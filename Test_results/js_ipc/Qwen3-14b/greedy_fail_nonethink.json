[
  {
    "Task_id": 10,
    "Instruction": "Task Description: Implement a class for interacting with the EXMO cryptocurrency exchange API, handling authentication, request signing, and response processing.\n\nClass Description: The Trader class provides methods to authenticate and send signed requests to the EXMO API. It handles nonce generation, request signing using HMAC-SHA512, and response error handling.\n\nAttributes:\n- key: [String] - API key for authentication\n- secret: [String] - API secret for request signing\n- currency: [String] - Base currency for trading pairs\n- asset: [String] - Asset currency for trading pairs\n- pair: [String] - Combined trading pair in format 'asset_currency'\n- name: [String] - Exchange name (fixed as 'EXMO')\n- nonce: [Number] - Counter for API requests to prevent replay attacks\n\nMethods:\n- constructor(config) -> [Void] - Initializes the trader instance with configuration including API keys and currency pairs\n- api_query(method, params, callback) -> [Void] - Makes authenticated POST requests to the EXMO API\n  - method: [String] - API endpoint method\n  - params: [Object] - Request parameters\n  - callback: [Function] - Callback function to handle response (error, data)",
    "Canonical_solution": "const CryptoJS = require(\"crypto-js\");\nconst querystring = require('querystring');\nconst request = require('request');\n\nclass Trader {\n  constructor(config) {\n    this.key = \"\";\n    this.secret = \"\";\n    \n    if(_.isObject(config)) {\n      if(_.isString(config.key)) this.key = config.key;\n      if(_.isString(config.secret)) this.secret = config.secret;\n      this.currency = config.currency;\n      this.asset = config.asset;\n      this.pair = this.asset + '_' + this.currency;\n    };\n\n    this.name = 'EXMO';\n    this.nonce = new Date() * 1000;\n  }\n\n  api_query(method, params, callback) {\n    params.nonce = this.nonce++;\n    var post_data = querystring.stringify(params);\n\n    var options = {\n      url: API_URL + method,\n      headers: {'Key': this.key,'Sign': CryptoJS.HmacSHA512(post_data, this.secret).toString(CryptoJS.enc.hex) },\n      form: params\n    };\n    \n    request.post(options, function (error, response, body) {\n      if (!error && response.statusCode == 200) {\n        data=JSON.parse(body);          \n        if(data.error) error = { message: data.error }\n        else if (data.result!=undefined && data.result==false)  error = { message: '\"result\": false' } ;\n        callback(error, data);\n      } else {\n        console.log('cb request error');\n        console.log(body);\n\n        if(error) {\n          if(includes(error.message, recoverableErrors)) {\n            error.notFatal = true;\n          }\n          console.log(error);\n          callback(error);\n        };\n      };\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Trader {\n  constructor(config) {\n    this.key = config.key;\n    this.secret = config.secret;\n    this.currency = config.currency;\n    this.asset = config.asset;\n    this.pair = `${this.asset}_${this.currency}`;\n    this.name = 'EXMO';\n    this.nonce = Math.floor(Date.now() / 1000);\n  }\n\n  api_query(method, params, callback) {\n    const url = `https://api.exmo.com/v1/${method}`;\n    const nonce = this.nonce++;\n    const data = { ...params, nonce };\n\n    const hmac = require('crypto').createHmac('sha512', this.secret);\n    const signature = hmac.update(JSON.stringify(data)).digest('hex');\n\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Key': this.key,\n        'Sign': signature\n      },\n      body: JSON.stringify(data)\n    };\n\n    fetch(url, options)\n      .then(res => res.json())\n      .then(json => {\n        if (json.error) {\n          callback(new Error(json.error), null);\n        } else {\n          callback(null, json);\n        }\n      })\n      .catch(err => callback(err, null));\n  }\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Create a function that initializes and starts an HTTP server with WebSocket support using Express and Socket.IO, implementing a particle simulation system with cluster and client event handling.\n\nFunction Description: The function `startServer` initializes an Express application, sets up static file serving, integrates Socket.IO for real-time communication, and configures a particle simulation system with collision detection and cluster management. It handles particle movement, boundary collisions, and client interactions through defined event handlers.\n\nInput: None (The function takes no parameters)\n\nOutput: None (The function starts a server listening on port 3000 but doesn't return any value)",
    "Canonical_solution": "function startServer() {\n    const express = require('express');\n    const app = express();\n    const server = require('http').Server(app);\n    const io = require('socket.io')(server);\n    const swip = require('../../../src/server/index.js');\n\n    app.use(express.static(__dirname + './../static'));\n\n    swip(io, {\n        cluster: {\n            events: {\n                update: (cluster) => {\n                    const blobs = cluster.data.blobs;\n                    const clients = cluster.clients;\n\n                    const updatedBlobs = blobs.map((blob) => {\n                        const boundaryOffset = blob.size;\n                        const client = clients.find((c) => isParticleInClient(blob, c));\n\n                        let nextPosX = blob.x + blob.speedX;\n                        let nextPosY = blob.y + blob.speedY;\n                        let nextSpeedX = blob.speedX;\n                        let nextSpeedY = blob.speedY;\n\n                        if (client) {\n                            if (((blob.speedX < 0) &&\n                                ((nextPosX - boundaryOffset) < client.transform.x)\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.left, nextPosY))) {\n                                nextPosX = client.transform.x + boundaryOffset;\n                                nextSpeedX = blob.speedX * -1;\n                            } else if (((blob.speedX > 0) &&\n                                ((nextPosX + boundaryOffset) > (client.transform.x + client.size.width))\n                                && !isWallOpenAtPosition(client.transform.y, client.openings.right, nextPosY))) {\n                                nextPosX = client.transform.x + (client.size.width - boundaryOffset);\n                                nextSpeedX = blob.speedX * -1;\n                            }\n\n                            if (((blob.speedY < 0) &&\n                                ((nextPosY - boundaryOffset) < client.transform.y\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.top, nextPosX)))) {\n                                nextPosY = client.transform.y + boundaryOffset;\n                                nextSpeedY = blob.speedY * -1;\n                            } else if (((blob.speedY > 0) &&\n                                ((nextPosY + boundaryOffset) > (client.transform.y + client.size.height))\n                                && !isWallOpenAtPosition(client.transform.x, client.openings.bottom, nextPosX))\n                            ) {\n                                nextPosY = client.transform.y + (client.size.height - boundaryOffset);\n                                nextSpeedY = blob.speedY * -1;\n                            }\n                        } else {\n                            const firstClient = clients[0];\n                            nextPosX = firstClient.transform.x + (firstClient.size.width / 2);\n                            nextPosY = firstClient.transform.y + (firstClient.size.height / 2);\n                            nextSpeedX = 0;\n                            nextSpeedY = 0;\n                        }\n\n                        blob.x = nextPosX;\n                        blob.y = nextPosY;\n                        blob.speedX = nextSpeedX;\n                        blob.speedY = nextSpeedY;\n\n                        return blob;\n                    });\n\n                    return {\n                        blobs: { $set: updatedBlobs },\n                    };\n                },\n                merge: (cluster1, cluster2, transform) => ({\n                    blobs: { $set: getNewParticleDist(cluster1, cluster2, transform) },\n                    backgroundColor: { $set: cluster1.data.backgroundColor },\n                }),\n            },\n            init: () => ({ blobs: [], backgroundColor: getRandomColor() }),\n        },\n\n        client: {\n            init: () => ({}),\n            events: {\n                addBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $push: blobs } },\n                        },\n                    };\n                },\n                updateBlobs: ({ cluster, client }, { blobs }) => {\n                    return {\n                        cluster: {\n                            data: { blobs: { $set: blobs } },\n                        },\n                    };\n                },\n            },\n        },\n    });\n\n    server.listen(3000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst http = require('http');\nconst socketIO = require('socket.io');\nconst { Worker, isMainThread, parentPort } = require('worker_threads');\nconst cluster = require('cluster');\nconst numCPUs = require('os').cpus().length;\n\nfunction startServer() {\n  if (isMainThread) {\n    const app = express();\n    const server = http.createServer(app);\n    const io = socketIO(server);\n\n    app.use(express.static('public'));\n\n    let particles = [];\n\n    function createParticle() {\n      return {\n        id: Date.now() + Math.random(),\n        x: Math.random() * 800,\n        y: Math.random() * 600,\n        vx: (Math.random() - 0.5) * 4,\n        vy: (Math.random() - 0.5) * 4,\n        radius: 10\n      };\n    }\n\n    function updateParticles() {\n      for (let i = 0; i < particles.length; i++) {\n        particles[i].x += particles[i].vx;\n        particles[i].y += particles[i].vy;\n\n        if (particles[i].x < particles[i].radius || particles[i].x > 800 - particles[i].radius) {\n          particles[i].vx *= -1;\n        }\n        if (particles[i].y < particles[i].radius || particles[i].y > 600 - particles[i].radius) {\n          particles[i].vy *= -1;\n        }\n      }\n    }\n\n    io.on('connection', (socket) => {\n      console.log('A user connected');\n\n      socket.on('requestParticles', () => {\n        socket.emit('initialParticles', particles);\n      });\n\n      socket.on('addParticle', () => {\n        particles.push(createParticle());\n        io.emit('particleAdded', createParticle());\n      });\n\n      socket.on('disconnect', () => {\n        console.log('User disconnected');\n      });\n    });\n\n    setInterval(() => {\n      updateParticles();\n      io.emit('updateParticles', particles);\n    }, 30);\n\n    server.listen(3000, () => {\n      console.log('Server is running on port 3000');\n    });\n\n    if (cluster.isMaster) {\n      for (let i = 0; i < numCPUs; i++) {\n        cluster.fork();\n      }\n    } else {\n      startServer();\n    }\n  } else {\n    const worker = new Worker(__filename);\n    worker.on('message', (message) => {\n      console.log('Worker received:', message);\n    });\n    worker.postMessage('start');\n  }\n}"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by:\n1. Maintaining a mapping of known URL shortening services\n2. Using service-specific APIs when available\n3. Falling back to generic HTTP HEAD requests to follow redirects\n4. Preventing infinite loops through depth tracking and URL history\n\nAttributes:\nmap: [Object] - A mapping of URL shortening services to their known domains\ntimeout: [Number] - HTTP request timeout in milliseconds (default: 5000)\n\nMethods:\nconstructor() -> [URLExpander] - Initializes the URL expander with default configuration\n\nexpand: [Function](args: Object, callback: Function) -> [void] - Main method to expand a URL\n- args: Object containing:\n  - url: String - The URL to expand\n  - depth: Number - Current recursion depth (optional)\n  - seen: Object - Map of previously seen URLs (optional)\n- callback: Function to receive the result with expanded args object\n\nAPIs: [Object] - Collection of service-specific expansion methods:\n- isgd: [Function](args: Object, callback: Function) -> [void] - Expands is.gd URLs\n- googl: [Function](args: Object, callback: Function) -> [void] - Expands goo.gl URLs\n- budurl: [Function](args: Object, callback: Function) -> [void] - Expands budurl.com URLs\n- snipurl: [Function](args: Object, callback: Function) -> [void] - Expands snipurl.com and related URLs\n- generic: [Function](args: Object, callback: Function) -> [void] - Generic URL expansion using HTTP HEAD requests",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n  constructor() {\n    this.map = {\n      'is.gd': 'isgd',\n      'goo.gl': 'googl',\n      'budurl.com': 'budurl',\n      'snipurl.com': 'snipurl'\n    };\n    this.timeout = 5000;\n    this.APIs = {\n      isgd: (args, callback) => {\n        const { url, depth = 0, seen = {} } = args;\n        if (depth > 10 || seen[url]) return callback(null, { ...args, expanded: url });\n        seen[url] = true;\n        fetch(`https://is.gd/shorturl.php?format=json&url=${encodeURIComponent(url)}`)\n          .then(res => res.json())\n          .then(data => {\n            if (data && data.url) {\n              args.url = data.url;\n              args.depth = depth + 1;\n              args.seen = seen;\n              this.expand(args, callback);\n            } else {\n              callback(null, { ...args, expanded: url });\n            }\n          })\n          .catch(() => this.generic(args, callback));\n      },\n      googl: (args, callback) => {\n        const { url, depth = 0, seen = {} } = args;\n        if (depth > 10 || seen[url]) return callback(null, { ...args, expanded: url });\n        seen[url] = true;\n        fetch(`https://www.googleapis.com/urlshortener/v1/url?key=YOUR_API_KEY`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ longUrl: url })\n        })\n          .then(res => res.json())\n          .then(data => {\n            if (data && data.longUrl) {\n              args.url = data.longUrl;\n              args.depth = depth + 1;\n              args.seen = seen;\n              this.expand(args, callback);\n            } else {\n              callback(null, { ...args, expanded: url });\n            }\n          })\n          .catch(() => this.generic(args, callback));\n      },\n      budurl: (args, callback) => {\n        const { url, depth = 0, seen = {} } = args;\n        if (depth > 10 || seen[url]) return callback(null, { ...args, expanded: url });\n        seen[url] = true;\n        fetch(`https://api.budurl.com/v1/expand?url=${encodeURIComponent(url)}`)\n          .then(res => res.json())\n          .then(data => {\n            if (data && data.expanded_url) {\n              args.url = data.expanded_url;\n              args.depth = depth + 1;\n              args.seen = seen;\n              this.expand(args, callback);\n            } else {\n              callback(null, { ...args, expanded: url });\n            }\n          })\n          .catch(() => this.generic(args, callback));\n      },\n      snipurl: (args, callback) => {\n        const { url, depth = 0, seen = {} } = args;\n        if (depth > 10 || seen[url]) return callback(null, { ...args, expanded: url });\n        seen[url] = true;\n        fetch(`https://snipurl.com/api/expand?url=${encodeURIComponent(url)}`)\n          .then(res => res.json())\n          .then(data => {\n            if (data && data.url) {\n              args.url = data.url;\n              args.depth = depth + 1;\n              args.seen = seen;\n              this.expand(args, callback);\n            } else {\n              callback(null, { ...args, expanded: url });\n            }\n          })\n          .catch(() => this.generic(args, callback));\n      },\n      generic: (args, callback) => {\n        const { url, depth = 0, seen = {} } = args;\n        if (depth > 10 || seen[url]) return callback(null, { ...args, expanded: url });\n        seen[url] = true;\n        fetch(url, { method: 'HEAD', timeout: this.timeout })\n          .then(res => {\n            const location = res.headers.get('Location');\n            if (location) {\n              args.url = location;\n              args.depth = depth + 1;\n              args.seen = seen;\n              this.expand(args, callback);\n            } else {\n              callback(null, { ...args, expanded: url });\n            }\n          })\n          .catch(() => callback(null, { ...args, expanded: url }));\n      }\n    };\n  }\n\n  expand(args, callback) {\n    const { url } = args;\n    const service = Object.keys(this.map).find(domain => url.includes(domain));\n    if (service && this.APIs[this.map[service]]) {\n      this.APIs[this.map[service]](args, callback);\n    } else {\n      this.APIs.generic(args, callback);\n    }\n  }\n}"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Create a function to set up an Express server with Next.js integration, MongoDB session storage, and basic route handling.\n\nFunction Description: The function `setupServer` initializes and configures an Express server with session management using MongoDB as the session store. It integrates Next.js for server-side rendering and sets up a catch-all route handler. The server listens on a specified port and connects to MongoDB using environment variables for configuration.\n\nInput: None (The function uses environment variables for configuration:\n- `process.env.NODE_ENV`: Determines if the environment is production or development\n- `process.env.MONGO_URL_TEST`: MongoDB connection URL\n- `process.env.PORT`: Server port (defaults to 8000)\n- `process.env.SESSION_NAME`: Name for the session cookie\n- `process.env.SESSION_SECRET`: Secret key for session encryption)\n\nOutput: None (The function starts an Express server that:\n- Listens on the specified port\n- Outputs the server URL to console when ready\n- Maintains persistent connections to MongoDB for session storage)",
    "Canonical_solution": "function setupServer() {\n  const express = require('express');\n  const session = require('express-session');\n  const mongoSessionStore = require('connect-mongo');\n  const next = require('next');\n  const mongoose = require('mongoose');\n\n  const dev = process.env.NODE_ENV !== 'production';\n  const MONGO_URL = process.env.MONGO_URL_TEST;\n  const port = process.env.PORT || 8000;\n  const ROOT_URL = `http://localhost:${port}`;\n\n  mongoose.connect(MONGO_URL);\n\n  const app = next({ dev });\n  const handle = app.getRequestHandler();\n\n  const server = express();\n\n  const sessionOptions = {\n    name: process.env.SESSION_NAME,\n    secret: process.env.SESSION_SECRET,\n    store: mongoSessionStore.create({\n      mongoUrl: MONGO_URL,\n      ttl: 14 * 24 * 60 * 60,\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      maxAge: 14 * 24 * 60 * 60 * 1000,\n      domain: 'localhost',\n    },\n  };\n\n  const sessionMiddleware = session(sessionOptions);\n  server.use(sessionMiddleware);\n\n  server.get('*', (req, res) => handle(req, res));\n\n  server.listen(port, (err) => {\n    if (err) throw err;\n    console.log(`> Ready on ${ROOT_URL}`);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst next = require('next');\nconst session = require('express-session');\nconst MongoDBStore = require('connect-mongodb-session')(session);\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({ dev });\nconst handle = app.getRequestHandler();\n\nasync function setupServer() {\n  await app.prepare();\n\n  const server = express();\n\n  const store = new MongoDBStore({\n    uri: process.env.MONGO_URL_TEST,\n    collection: 'sessions'\n  });\n\n  server.use(\n    session({\n      secret: process.env.SESSION_SECRET,\n      resave: false,\n      saveUninitialized: false,\n      store: store,\n      cookie: {\n        secure: process.env.NODE_ENV === 'production',\n        httpOnly: true,\n        maxAge: 1000 * 60 * 60 * 24 * 7 // 1 week\n      },\n      name: process.env.SESSION_NAME\n    })\n  );\n\n  server.all('*', (req, res) => {\n    return handle(req, res);\n  });\n\n  const port = process.env.PORT || 8000;\n  server.listen(port, () => {\n    console.log(`Server is running on http://localhost:${port}`);\n  });\n}\n\nsetupServer();"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a function that sets up and starts an HTTP server using the Express framework in JavaScript, with middleware configurations for request processing and static file serving.\n\nFunction Description: The function `createServer` initializes an Express application, configures various middleware for logging, request parsing, and static file serving, and starts an HTTP server listening on a specified port. It also includes environment-specific error handling for development mode.\n\nInput: None (The function does not take any parameters; it uses environment variables like `process.env.PORT` for configuration.)\n\nOutput: None (The function does not return any value; it starts an HTTP server that listens on the specified port and logs a message upon successful startup.)",
    "Canonical_solution": "function createServer() {\n    var express = require('express');\n    var http = require('http');\n    var path = require('path');\n\n    var app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.favicon());\n    app.use(express.logger('dev'));\n    app.use(express.json());\n    app.use(express.urlencoded());\n    app.use(express.methodOverride());\n    app.use(express.static(path.join(__dirname, '/public')));\n    app.use(express.static(path.join(__dirname, '/tests')));\n\n    if ('development' == app.get('env')) {\n        app.use(express.errorHandler());\n    }\n\n    http.createServer(app).listen(app.get('port'), function(){\n        console.log('Express server listening on port ' + app.get('port'));\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst http = require('http');\nconst path = require('path');\n\nfunction createServer() {\n  const app = express();\n  const port = process.env.PORT || 3000;\n\n  // Middleware for logging\n  app.use((req, res, next) => {\n    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);\n    next();\n  });\n\n  // Middleware for parsing request bodies\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // Serve static files from the 'public' directory\n  app.use(express.static(path.join(__dirname, 'public')));\n\n  // Error handling middleware for development\n  if (process.env.NODE_ENV === 'development') {\n    app.use((err, req, res, next) => {\n      console.error(err.stack);\n      res.status(500).send('Something broke!');\n    });\n  }\n\n  // Start the HTTP server\n  const server = http.createServer(app);\n  server.listen(port, () => {\n    console.log(`Server is running on http://localhost:${port}`);\n  });\n}\n\ncreateServer();"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Create a Twitter Search Client class that handles searching tweets, managing search state, and storing results locally.\n\nClass Description: TSClient is a Twitter search client that performs searches, tracks search state (including pagination and since_id), caches results to local files, and provides synchronization capabilities.\n\nAttributes:\n- search: [Object] - Contains search parameters and state including query (q), since_id, result count (rcount), and a unique search id\n- id: [String] - MD5 hash of the search query used as a unique identifier\n- new_since_id: [String] - Tracks the newest tweet ID retrieved during the current sync\n\nMethods:\n- constructor(query, cb) -> [TSClient] - Initializes a new search client with the given query. Creates a unique ID for the search and loads previous state if available. Calls the callback with the initialized client.\n  - query: [String] - The search query string\n  - cb: [Function] - Callback function that receives the initialized TSClient instance\n\n- syncSearch(callback) -> [void] - Initiates a new synchronization of search results, walking through paginated results.\n  - callback: [Function] - Called with the array of results when sync completes\n\n- set(search) -> [void] - Updates the search state and persists it to disk.\n  - search: [Object] - The search state object to save\n\n- _walker(s) -> [void] - Internal recursive method that handles pagination through search results.\n  - s: [Object] - State object containing:\n    - ts: [TSClient] - Reference to the TSClient instance\n    - search: [Object] - Current search parameters\n    - cb: [Function] - Completion callback\n    - page: [Number] - Current page number\n    - results: [Array] - Accumulated results\n    - new_since_id: [String] - Newest tweet ID in current batch (optional)",
    "Canonical_solution": "var request = require('request');\nvar url = require('url');\n\nclass TSClient {\n    constructor(query, cb) {\n        this.search = {};\n        this.search.q = query;\n        this.search.since_id = 0;\n        this.search.rcount = 0;\n        var hash = crypto.createHash('md5');\n        hash.update(query);\n        this.search.id = hash.digest('hex');\n        var self = this;\n        lfs.readObjectFromFile(self.search.id+'.search', function(data) {\n            if(data && data.id) {\n                self.search = data;            \n            } else {\n                lfs.writeObjectToFile(self.search.id+'.search',self.search);\n            }\n            cb(self);\n        });\n    }\n\n    syncSearch(callback) {\n        console.log(\"new sync \"+JSON.stringify(this.search));\n        this._walker({ts:this, search:this.search, cb:callback, page:1, results:[]});\n    }\n\n    set(search) {\n        this.search = search;\n        lfs.writeObjectToFile(search.id+'.search',search);    \n    }\n\n    _walker(s) {\n        var uri = url.parse(\"http://search.twitter.com/search.json\");\n        uri.query = {q:s.search.q, rpp:100, page:s.page, since_id:s.search.since_id};\n        console.log(\"walking page \"+url.format(uri));\n        request.get({uri:url.format(uri)}, function(err, resp, body) {\n            if(err) {\n                console.log(\"request failed: \"+err);\n                s.cb([]);\n                return;\n            }\n            var data = JSON.parse(body);\n            if(data && data.results && data.results.length > 0) {\n                s.results = s.results.concat(data.results);\n                s.page++;\n                console.log(\"page \"+data.page+\" and max \"+data.max_id_str);\n                if(data.page == 1) s.new_since_id = data.max_id_str;\n            } else {\n                s.page=16;\n            }\n            if(s.page <= 15) {\n                this._walker(s);\n            } else {\n                console.log(\"saving \"+s.results.length+\" tweets\");\n                lfs.writeObjectsToFile(s.search.id+'.tweets',s.results);\n                s.search.rcount += s.results.length;\n                if(s.new_since_id) s.search.since_id = s.new_since_id;\n                s.ts.set(s.search);\n                s.cb(s.results);\n            }\n        }.bind(this));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "const crypto = require('crypto');\nconst fs = require('fs');\nconst path = require('path');\n\nclass TSClient {\n  constructor(query, cb) {\n    this.search = {\n      q: query,\n      since_id: null,\n      rcount: 100,\n      id: crypto.createHash('md5').update(query).digest('hex')\n    };\n    this.new_since_id = null;\n    this._loadState();\n    cb(this);\n  }\n\n  syncSearch(callback) {\n    this._walker({\n      ts: this,\n      search: this.search,\n      cb: callback,\n      page: 1,\n      results: []\n    });\n  }\n\n  set(search) {\n    this.search = { ...this.search, ...search };\n    this._saveState();\n  }\n\n  _loadState() {\n    const statePath = path.join(__dirname, 'states', `${this.search.id}.json`);\n    try {\n      const data = fs.readFileSync(statePath, 'utf8');\n      this.search = JSON.parse(data);\n    } catch (e) {\n      // State not found, use default\n    }\n  }\n\n  _saveState() {\n    const statePath = path.join(__dirname, 'states', `${this.search.id}.json`);\n    fs.writeFileSync(statePath, JSON.stringify(this.search, null, 2));\n  }\n\n  _walker(s) {\n    // Simulate API call to Twitter with pagination and since_id\n    const results = [];\n    for (let i = 0; i < s.search.rcount; i++) {\n      results.push({\n        id_str: String(Date.now() + i),\n        text: `Tweet ${i + 1} for query \"${s.search.q}\"`\n      });\n    }\n\n    if (results.length > 0) {\n      s.new_since_id = results[0].id_str;\n    }\n\n    s.results = s.results.concat(results);\n\n    if (results.length === s.search.rcount) {\n      s.ts.set({ since_id: s.new_since_id });\n      s.cb(s.results);\n    } else {\n      s.page++;\n      setTimeout(() => this._walker({ ...s, page: s.page }), 1000);\n    }\n  }\n}"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a function that sets up and starts an Express server with basic configuration, static file serving, and additional route handlers.\n\nFunction Description: The function `createExpressServer` initializes an Express application, configures it to serve static files from a parent directory, integrates additional route handlers from a separate module, and starts listening on a specified port (either from environment variables or defaulting to 3000).\n\nInput: None (The function takes no parameters but uses environment variables for configuration)\n\nOutput: Returns the HTTP server instance created by `app.listen()`, which is actively listening on the specified port. The function also logs server start information to the console.",
    "Canonical_solution": "function createExpressServer() {\n    const express = require('express');\n    const app = express();\n\n    app.set('port', process.env.PORT || 3000);\n    app.use(express.static('../'));\n\n    require('./src-server/multerImpl')(app);\n\n    return app.listen(app.get('port'), () => {\n        console.log('Express server listening on port ' + app.get('port'));\n        console.log('Visit http://localhost:' + app.get('port') + '/example/ to check out the upload example');\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 96,
    "wrong_result": "const express = require('express');\nconst path = require('path');\nconst app = express();\nconst server = require('http').createServer(app);\n\napp.use(express.static(path.join(__dirname, '..')));\napp.use('/', require('./routes'));\n\nconst PORT = process.env.PORT || 3000;\n\nserver.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n\nmodule.exports = server;"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Create a function that makes an HTTP POST request to a specified URL with custom headers and data, then handles the response.\n\nFunction Description: The function `makeHttpRequest` sends an HTTP POST request to a given URL with specified headers and a data payload. It uses the `request` module to perform the HTTP request and includes a callback function to handle the response or errors. The function is designed to be reusable for making HTTP POST requests with minimal configuration.\n\nInput: \n- None (The URL, headers, and data are hardcoded within the function for simplicity. In a real-world scenario, these could be passed as parameters.)\n\nOutput: \n- None (The function logs the response body to the console if the request is successful. In a real-world scenario, the response could be returned or processed further.)\n\nNote: The function assumes the `request` module is available in the environment. If not, it must be installed via npm or another package manager.",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n    };\n\n    var dataString = '18233982904';\n\n    var options = {\n        url: 'http://localhost:28139/CurlToNode',\n        method: 'POST',\n        headers: headers,\n        body: dataString\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "const request = require('request');\n\nfunction makeHttpRequest() {\n  const url = 'https://example.com/api/endpoint';\n  const headers = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer your_token_here'\n  };\n  const data = {\n    key1: 'value1',\n    key2: 'value2'\n  };\n\n  request.post({\n    url: url,\n    headers: headers,\n    json: data\n  }, (error, response, body) => {\n    if (error) {\n      console.error('Error:', error);\n      return;\n    }\n    if (response.statusCode !== 200) {\n      console.error('Status Code:', response.statusCode);\n      return;\n    }\n    console.log('Response Body:', body);\n  });\n}"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to generate PDFs from HTML templates and serve them as streams.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens on port 8080. It serves PDF files generated from an HTML template, replacing placeholders with actual image paths, and streams the PDF output to the client. The server handles incoming requests, checks for favicon requests, and responds with either a 404 error or the generated PDF.\n\nInput: None (The function does not take any input parameters.)\n\nOutput: None (The function does not return any value but starts an HTTP server that listens on port 8080 and logs the server address to the console.)",
    "Canonical_solution": "function createServer() {\n    const fs = require('fs');\n    const http = require('http');\n    const pdf = require('../../');\n    const tmpl = fs.readFileSync(require.resolve('../businesscard/businesscard.html'), 'utf8');\n\n    const server = http.createServer(function (req, res) {\n        if (req.url === '/favicon.ico') return res.end('404');\n        const html = tmpl.replace('{{image}}', `file://${require.resolve('../businesscard/image.png')}`);\n        pdf.create(html, {width: '50mm', height: '90mm'}).toStream((err, stream) => {\n            if (err) return res.end(err.stack);\n            res.setHeader('Content-type', 'application/pdf');\n            stream.pipe(res);\n        });\n    });\n\n    server.listen(8080, function (err) {\n        if (err) throw err;\n        console.log('Listening on http://localhost:%s', server.address().port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\nconst { exec } = require('child_process');\n\nfunction createServer() {\n  const server = http.createServer((req, res) => {\n    if (req.url === '/favicon.ico') {\n      res.writeHead(404);\n      return res.end();\n    }\n\n    const htmlTemplate = fs.readFileSync(path.join(__dirname, 'template.html'), 'utf8');\n    const htmlContent = htmlTemplate.replace(/{{imagePath}}/g, 'https://example.com/image.jpg');\n\n    const tempHtmlPath = path.join(__dirname, 'temp.html');\n    fs.writeFileSync(tempHtmlPath, htmlContent);\n\n    exec(`wkhtmltopdf ${tempHtmlPath} -`, (err, stdout, stderr) => {\n      if (err) {\n        console.error(`Error generating PDF: ${err}`);\n        res.writeHead(500);\n        return res.end('Internal Server Error');\n      }\n\n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', 'inline; filename=\"output.pdf\"');\n      res.write(stdout);\n      res.end();\n    });\n  });\n\n  server.listen(8080, () => {\n    console.log(`Server running at http://localhost:8080`);\n  });\n}\n\ncreateServer();"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Create a JavaScript class that implements a server capable of handling HTTP requests and piping data to responses, with support for live reload functionality and error handling.\n\nClass Description: The `Server` class is designed to create an HTTP server that can handle incoming requests, pipe data to responses (particularly for live reload functionality), and manage server lifecycle events. It supports both standalone operation and integration with existing Express-like applications.\n\nAttributes:\n- options: [Object] - Configuration options for the server including livereload file path and port number.\n- clients: [Object] - Storage for connected clients (used for live reload functionality).\n- server: [http.Server] - The underlying HTTP server instance.\n- app: [Object] - Optional Express-like application instance for integration.\n- port: [Number] - The port number the server is listening on.\n\nMethods:\n- constructor(options) -> [Server] - Initializes the server with given options, setting defaults for livereload path and port.\n- configure(app) -> [Server] - Configures the server to work with an existing Express-like application.\n- handler(req, res, next) -> [Server] - Handles incoming HTTP requests, supporting both middleware and direct handling modes.\n- livereload(req, res) -> [void] - Pipes the livereload JavaScript file to the response.\n- listen(port, fn) -> [void] - Starts the server listening on the specified port.\n- close(req, res) -> [void] - Closes the server and optionally ends a response.\n- error(e) -> [void] - Handles and logs server errors.\n\nNote: The class demonstrates inter-process communication through HTTP and file system operations, particularly in the `livereload` method where it pipes file contents directly to HTTP responses.",
    "Canonical_solution": "var fs = require('fs');\nvar http = require('http');\n\nclass Server {\n  constructor(options) {\n    this.options = options || {};\n    this.options.livereload = this.options.livereload || path.join(__dirname, 'public/livereload.js');\n    this.options.port = parseInt(this.options.port || 35729, 10);\n    this.clients = {};\n    this.configure(this.options.app);\n  }\n\n  configure(app) {\n    if(!app) {\n      this.server = http.createServer(this.handler.bind(this));\n      this.server.on('error', this.error.bind(this));\n      return this;\n    }\n\n    var self = this;\n    this.app = app;\n\n    this.app.listen = function(port, done) {\n      done = done || function() {};\n      var srv = self.server = http.createServer(app);\n      srv.on('error', self.error.bind(self));\n      srv.on('close', self.close.bind(self));\n      return srv.listen(port, done);\n    };\n\n    return this;\n  }\n\n  handler(req, res, next) {\n    var middleware = typeof next === 'function';\n    if(middleware) {\n      this.handle(req, res, next);\n      return this;\n    }\n\n    req\n      .on('end', this.handle.bind(this, req, res))\n      .on('data', function(chunk) {\n        req.data = req.data || '';\n        req.data += chunk;\n      });\n\n    return this;\n  }\n\n  livereload(req, res) {\n    fs.createReadStream(this.options.livereload).pipe(res);\n  }\n\n  listen(port, fn) {\n    this.port = port;\n    this.server.listen(port, fn);\n  }\n\n  close(req, res) {\n    if(res) res.end();\n    if(this.server._handle) this.server.close();\n  }\n\n  error(e) {\n    console.error('Error:', e.message);\n    console.error(e.stack);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 100,
    "wrong_result": "class Server {\n  constructor(options) {\n    this.options = {\n      livereload: '/livereload.js',\n      livereloadPort: 35729,\n      ...options\n    };\n    this.clients = {};\n    this.server = null;\n    this.app = null;\n    this.port = null;\n  }\n\n  configure(app) {\n    this.app = app;\n    return this;\n  }\n\n  handler(req, res, next) {\n    if (this.app) {\n      this.app(req, res, next);\n    } else {\n      if (req.url === this.options.livereload) {\n        this.livereload(req, res);\n      } else {\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\n        res.end('Not Found');\n      }\n    }\n  }\n\n  livereload(req, res) {\n    const fs = require('fs');\n    const path = require('path');\n    const livereloadScriptPath = path.join(__dirname, 'livereload.js');\n\n    fs.createReadStream(livereloadScriptPath)\n      .pipe(res)\n      .on('error', (e) => {\n        res.writeHead(500, { 'Content-Type': 'text/plain' });\n        res.end('Internal Server Error');\n        this.error(e);\n      });\n  }\n\n  listen(port, fn) {\n    this.port = port;\n    this.server = require('http').createServer(this.handler.bind(this));\n    this.server.listen(port, () => {\n      console.log(`Server listening on port ${port}`);\n      if (fn) fn();\n    });\n    this.server.on('error', this.error.bind(this));\n  }\n\n  close(req, res) {\n    if (this.server) {\n      this.server.close(() => {\n        console.log('Server closed');\n        if (res && !res.headersSent) {\n          res.end();\n        }\n      });\n    }\n  }\n\n  error(e) {\n    console.error('Server error:', e.message);\n    if (e.stack) console.error(e.stack);\n  }\n}"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to record incoming connections and requests, piping the request data to individual files for each connection.\n\nFunction Description: The function `createServer` initializes an HTTP server that listens for incoming connections. Each connection's request data is piped to a unique file. The server handles different request types, including file uploads via a simple HTML form, and returns appropriate responses. The server also logs connection activities.\n\nInput: None (The function uses environment variables or defaults for configuration, specifically the `PORT` environment variable or defaults to 8080.)\n\nOutput: None (The function creates and starts an HTTP server that runs indefinitely, logging activities to the console and writing request data to files.)\n\nNote: The function does not explicitly return any value but has side effects of creating a running server and writing files to the filesystem.",
    "Canonical_solution": "function createServer() {\n    var http = require('http');\n    var fs = require('fs');\n    var connections = 0;\n\n    var server = http.createServer(function(req, res) {\n        var socket = req.socket;\n        console.log('Request: %s %s -> %s', req.method, req.url, socket.filename);\n\n        req.on('end', function() {\n            if (req.url !== '/') {\n                res.end(JSON.stringify({\n                    method: req.method,\n                    url: req.url,\n                    filename: socket.filename,\n                }));\n                return;\n            }\n\n            res.writeHead(200, {'content-type': 'text/html'});\n            res.end(\n                '<form action=\"/upload\" enctype=\"multipart/form-data\" method=\"post\">'+\n                '<input type=\"text\" name=\"title\"><br>'+\n                '<input type=\"file\" name=\"upload\" multiple=\"multiple\"><br>'+\n                '<input type=\"submit\" value=\"Upload\">'+\n                '</form>'\n            );\n        });\n    });\n\n    server.on('connection', function(socket) {\n        connections++;\n        socket.id = connections;\n        socket.filename = 'connection-' + socket.id + '.http';\n        socket.file = fs.createWriteStream(socket.filename);\n        socket.pipe(socket.file);\n\n        console.log('--> %s', socket.filename);\n        socket.on('close', function() {\n            console.log('<-- %s', socket.filename);\n        });\n    });\n\n    var port = process.env.PORT || 8080;\n    server.listen(port, function() {\n        console.log('Recording connections on port %s', port);\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\nconst { v4: uuidv4 } = require('uuid');\n\nfunction createServer() {\n  const port = process.env.PORT || 8080;\n  const server = http.createServer((req, res) => {\n    const uniqueId = uuidv4();\n    const filePath = path.join(__dirname, 'request_data', `${uniqueId}.txt`);\n    const writeStream = fs.createWriteStream(filePath);\n\n    console.log(`New connection from ${req.socket.remoteAddress}:${req.socket.remotePort}`);\n\n    req.on('data', (chunk) => {\n      writeStream.write(chunk);\n    });\n\n    req.on('end', () => {\n      writeStream.end();\n      console.log(`Request data for ${uniqueId} has been written to ${filePath}`);\n      res.writeHead(200, { 'Content-Type': 'text/plain' });\n      res.end('Request received and stored.\\n');\n    });\n\n    req.on('error', (err) => {\n      console.error(`Error processing request for ${uniqueId}:`, err);\n      res.writeHead(500, { 'Content-Type': 'text/plain' });\n      res.end('Internal Server Error.\\n');\n    });\n  });\n\n  server.on('listening', () => {\n    console.log(`Server is listening on port ${port}`);\n  });\n\n  server.on('error', (err) => {\n    console.error(`Server error:`, err);\n  });\n\n  server.listen(port);\n}"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement an OAuth server class that handles GitHub OAuth authentication flow, including starting a server to receive the authorization code and exchanging it for an access token.\n\nClass Description: The OAuthServer class represents a server that facilitates GitHub OAuth authentication. It creates an Express server to handle the OAuth callback, exchanges the authorization code for an access token using GitHub's API, and provides methods to start and stop the server.\n\nAttributes:\n- options: [Object] - Configuration object containing client credentials and server settings\n- prompt: [Object] - Reference to an external prompt object used to signal completion of authentication\n- app: [Object] - Express application instance for handling HTTP requests\n- server: [Object] - HTTP server instance created by Express\n- token: [String|null] - Stores the obtained OAuth access token\n\nMethods:\n- constructor(options) -> [OAuthServer] - Initializes the OAuth server with configuration options and sets up the Express route for handling OAuth callbacks\n- start() -> [Promise] - Starts the HTTP server on the configured port and returns a promise that resolves when the server is ready or rejects on error\n- stop() -> [void] - Stops the HTTP server and cleans up resources",
    "Canonical_solution": "const express = require('express');\nconst axios = require('axios');\n\nclass OAuthServer {\n  constructor(options) {\n    this.options = options;\n    this.prompt = this.options.prompt;\n    this.app = express();\n    this.app.get('/', (req, res) => {\n      const code = req.query.code;\n      axios\n        .post(\n          `https://github.com/login/oauth/access_token?client_secret=${\n            this.options.client_secret\n          }&client_id=${this.options.client_id}&code=${code}`,\n          {},\n          {\n            headers: {\n              Accept: 'application/json'\n            }\n          }\n        )\n        .then(response => {\n          const accessToken = response.data.access_token;\n          this.token = accessToken;\n          res.send('Enquirer: Github OAuth Server is up');\n          this.prompt.submit();\n        })\n        .catch(e => console.log('axios error', e));\n    });\n    this.token = null;\n  }\n\n  start() {\n    return new Promise((resolve, reject) => {\n      this.server = this.app.listen(this.options.port, err => {\n        if (err) {\n          return reject(err);\n        }\n        resolve();\n      });\n    });\n  }\n\n  stop() {\n    this.server.close();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "const express = require('express');\nconst http = require('http');\nconst { promisify } = require('util');\nconst fetch = require('node-fetch');\n\nclass OAuthServer {\n  constructor(options) {\n    this.options = options;\n    this.prompt = options.prompt;\n    this.app = express();\n    this.server = null;\n    this.token = null;\n\n    this.app.get('/auth/callback', async (req, res) => {\n      const { code } = req.query;\n      try {\n        const response = await fetch('https://github.com/login/oauth/access_token', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            client_id: this.options.clientId,\n            client_secret: this.options.clientSecret,\n            code\n          })\n        });\n\n        const data = await response.json();\n        if (data.error) {\n          throw new Error(data.error_description || 'Failed to exchange code for token');\n        }\n\n        this.token = data.access_token;\n        this.prompt.resolve(this.token);\n        res.send('Authentication successful. You can close this window.');\n      } catch (error) {\n        console.error('Error exchanging code for token:', error);\n        this.prompt.reject(error);\n        res.status(500).send('Authentication failed.');\n      }\n    });\n  }\n\n  async start() {\n    return new Promise((resolve, reject) => {\n      this.server = http.createServer(this.app);\n      this.server.listen(this.options.port, () => {\n        console.log(`OAuth server running on port ${this.options.port}`);\n        resolve();\n      });\n    });\n  }\n\n  stop() {\n    if (this.server) {\n      this.server.close(() => {\n        console.log('OAuth server stopped.');\n      });\n    }\n  }\n}\n\nmodule.exports = OAuthServer;"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a function that sets up an HTTP server to serve static files from a specified directory, handling different MIME types and responding with 404 errors for non-existent files.\n\nFunction Description: The function `createFileServer` initializes an HTTP server that serves static files (HTML, images, JavaScript, CSS) from a 'static' directory in the current working directory. It handles proper MIME types for different file extensions and responds with 404 errors when files are not found. The server listens on port 1338 by default.\n\nInput: None (The function takes no parameters; all configuration is internal)\n\nOutput: None (The function doesn't return anything; it creates and starts an HTTP server that continues running)",
    "Canonical_solution": "function createFileServer() {\n    var http = require('http'),\n        url = require('url'),\n        path = require('path'),\n        fs = require('fs'),\n        port = 1338;\n    var mimeTypes = {\n        \"html\": \"text/html\",\n        \"jpeg\": \"image/jpeg\",\n        \"jpg\": \"image/jpeg\",\n        \"png\": \"image/png\",\n        \"js\": \"text/javascript\",\n        \"css\": \"text/css\"};\n\n    http.createServer(function(req, res) {\n        var uri = url.parse(req.url).pathname;\n        var filename = path.join(process.cwd(),'static', uri);\n        fs.exists(filename, function(exists) {\n            if(!exists) {\n                console.error(\"not exists: \" + filename);\n                res.writeHead(404, {'Content-Type': 'text/plain'});\n                res.write('404 Not Found\\n');\n                res.end();\n                return;\n            }\n            var mimeType = mimeTypes[path.extname(filename).split(\".\")[1]];\n            res.writeHead(200, {'Content-Type':mimeType});\n\n            var fileStream = fs.createReadStream(filename);\n            fileStream.pipe(res);\n        });\n    }).listen(port);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 100,
    "wrong_result": "const http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\nfunction createFileServer() {\n  const server = http.createServer((req, res) => {\n    const filePath = path.join(__dirname, 'static', req.url === '/' ? 'index.html' : req.url);\n    const extname = path.extname(filePath);\n    let mimeType = 'text/plain';\n\n    switch (extname) {\n      case '.html':\n        mimeType = 'text/html';\n        break;\n      case '.js':\n        mimeType = 'text/javascript';\n        break;\n      case '.css':\n        mimeType = 'text/css';\n        break;\n      case '.jpg':\n      case '.jpeg':\n        mimeType = 'image/jpeg';\n        break;\n      case '.png':\n        mimeType = 'image/png';\n        break;\n      case '.gif':\n        mimeType = 'image/gif';\n        break;\n      case '.ico':\n        mimeType = 'image/x-icon';\n        break;\n      case '.svg':\n        mimeType = 'image/svg+xml';\n        break;\n      case '.mp3':\n        mimeType = 'audio/mpeg';\n        break;\n      case '.wav':\n        mimeType = 'audio/wav';\n        break;\n      case '.ogg':\n        mimeType = 'audio/ogg';\n        break;\n      case '.webm':\n        mimeType = 'video/webm';\n        break;\n      case '.mp4':\n        mimeType = 'video/mp4';\n        break;\n      case '.pdf':\n        mimeType = 'application/pdf';\n        break;\n      case '.json':\n        mimeType = 'application/json';\n        break;\n      case '.xml':\n        mimeType = 'application/xml';\n        break;\n      case '.txt':\n        mimeType = 'text/plain';\n        break;\n    }\n\n    fs.readFile(filePath, (err, data) => {\n      if (err) {\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\n        res.end('404 Not Found');\n      } else {\n        res.writeHead(200, { 'Content-Type': mimeType });\n        res.end(data);\n      }\n    });\n  });\n\n  server.listen(1338, () => {\n    console.log('Server running on port 1338');\n  });\n}"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a TCP server class in JavaScript that can handle both regular and TLS-encrypted connections, manage client connections, and provide methods to start and destroy the server.\n\nClass Description: The MockServer class is a TCP server implementation that can be configured to use either regular TCP or TLS encryption. It manages server lifecycle, client connections, and provides methods to start and stop the server gracefully.\n\nAttributes:\n- host: [String] - The host address the server binds to\n- port: [Number] - The port number the server listens on\n- family: [String] - The IP address family (e.g., 'ipv4')\n- server: [Object] - The underlying TCP/TLS server instance\n- tlsEnabled: [Boolean] - Flag indicating if TLS is enabled\n- state: [String] - Current server state ('stopped', 'running', or 'destroyed')\n- connections: [Number] - Count of active client connections\n- sockets: [Array] - Array of active client sockets\n\nMethods:\n- constructor(port, host, options) -> [void] - Initializes the server with specified port, host, and options (including TLS configuration)\n- start() -> [Promise] - Starts the server and returns a promise that resolves when listening\n- destroy() -> [Promise] - Gracefully shuts down the server and returns a promise that resolves when complete",
    "Canonical_solution": "const net = require('net');\nconst tls = require('tls');\n\nclass MockServer {\n  constructor(port, host, options) {\n    // Save the settings\n    this.host = host;\n    this.port = port;\n    this.family = 'ipv4';\n\n    // Create a server socket\n    this.server = options.tls ? tls.createServer(options) : net.createServer(options);\n    this.tlsEnabled = !!options.tls;\n\n    // state\n    this.state = 'stopped';\n\n    // Number of connections\n    this.connections = 0;\n\n    // sockets\n    this.sockets = [];\n  }\n\n  /**\n   * Start the TCP server\n   */\n  start() {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      self.server.on('error', err => {\n        reject(err);\n      });\n\n      const connectionEventName = self.tlsEnabled ? 'secureConnection' : 'connection';\n      self.server.on(connectionEventName, c => {\n        self.connections = self.connections + 1;\n        self.sockets.push(c);\n\n        c.on('error', e => {\n          console.warn('connection error: ', e);\n        });\n\n        c.on('close', () => {\n          self.connections = self.connections - 1;\n          const index = self.sockets.indexOf(c);\n          if (index !== -1) {\n            self.sockets.splice(index, 1);\n          }\n        });\n      });\n\n      self.server.listen(self.port, self.host, () => {\n        // update address information if necessary\n        self.host = self.server.address().address;\n        self.port = self.server.address().port;\n        self.family = self.server.address().family;\n\n        resolve(self);\n      });\n\n      self.state = 'running';\n    });\n  }\n\n  /**\n   * Destroy the TCP server\n   */\n  destroy() {\n    const self = this;\n    if (self.state === 'destroyed') {\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve, reject) => {\n      self.sockets.forEach(socket => socket.destroy());\n      self.server.close(err => {\n        if (err) return reject(err);\n        self.state = 'destroyed';\n        resolve();\n      });\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "class MockServer {\n  constructor(port, host, options = {}) {\n    this.host = host || '127.0.0.1';\n    this.port = port;\n    this.family = options.family || 'ipv4';\n    this.server = null;\n    this.tlsEnabled = options.tls || false;\n    this.state = 'stopped';\n    this.connections = 0;\n    this.sockets = [];\n  }\n\n  async start() {\n    return new Promise((resolve, reject) => {\n      if (this.state !== 'stopped') {\n        return reject(new Error('Server is already running or destroyed'));\n      }\n\n      const serverOptions = {\n        host: this.host,\n        port: this.port,\n        family: this.family\n      };\n\n      if (this.tlsEnabled) {\n        const tlsOptions = {\n          key: process.env.TLS_KEY || fs.readFileSync('server.key'),\n          cert: process.env.TLS_CERT || fs.readFileSync('server.crt')\n        };\n        this.server = tls.createServer(tlsOptions, (socket) => {\n          this.handleConnection(socket);\n        });\n      } else {\n        this.server = net.createServer((socket) => {\n          this.handleConnection(socket);\n        });\n      }\n\n      this.server.on('error', (err) => {\n        this.state = 'destroyed';\n        this.sockets.forEach(socket => socket.destroy());\n        this.sockets = [];\n        reject(err);\n      });\n\n      this.server.on('listening', () => {\n        this.state = 'running';\n        resolve();\n      });\n\n      this.server.listen(serverOptions);\n    });\n  }\n\n  handleConnection(socket) {\n    this.connections++;\n    this.sockets.push(socket);\n\n    socket.on('close', () => {\n      this.connections--;\n      this.sockets = this.sockets.filter(s => s !== socket);\n    });\n\n    socket.on('end', () => {\n      this.connections--;\n      this.sockets = this.sockets.filter(s => s !== socket);\n    });\n\n    socket.on('error', (err) => {\n      console.error('Socket error:', err);\n    });\n  }\n\n  async destroy() {\n    return new Promise((resolve, reject) => {\n      if (this.state === 'destroyed') {\n        return resolve();\n      }\n\n      if (!this.server) {\n        return resolve();\n      }\n\n      this.state = 'destroyed';\n\n      this.server.close((err) => {\n        if (err) {\n          return reject(err);\n        }\n\n        this.sockets.forEach(socket => socket.destroy());\n        this.sockets = [];\n        this.connections = 0;\n        resolve();\n      });\n\n      this.server.removeAllListeners();\n      this.server = null;\n    });\n  }\n}"
  },
  {
    "Task_id": 157,
    "Instruction": "Task Description: Create a TCP proxy server that handles client connections, processes incoming data, and responds with HTTP-formatted messages. The server should be able to start and stop dynamically, track whether it was called, and store received data.\n\nFunction Description: The function creates and manages a TCP proxy server instance. It handles client connections, processes incoming data in two phases (initial connection and subsequent data), and responds with predefined HTTP responses. The server tracks all received data and whether any client has connected to it.\n\nInput: None (The function takes no parameters but returns an object with methods that can be called)\n\nOutput: Returns an object with the following methods:\n- start(callback): Starts the server on a random available port and executes the callback when ready\n- stop(callback): Stops the server and executes the callback when complete\n- getData(): Returns all data received from clients\n- wasCalled(): Returns a boolean indicating whether the server received any client connections\n\nThe server responds to client connections with:\n1. Initial response: 'HTTP/1.1 200 OK\\r\\n\\r\\n'\n2. Subsequent response: 'HTTP/1.1 200 OK\\r\\ncontent-type: text/plain\\r\\ncontent-length: 5\\r\\n\\r\\nderp\\n'",
    "Canonical_solution": "function createProxyServer() {\n    var called = false;\n    var proxiedHost = 'google.com';\n    var data = '';\n\n    var s = require('net').createServer(function (sock) {\n        called = true;\n        sock.once('data', function (c) {\n            data += c;\n\n            sock.write('HTTP/1.1 200 OK\\r\\n\\r\\n');\n\n            sock.once('data', function (c) {\n                data += c;\n\n                sock.write('HTTP/1.1 200 OK\\r\\n');\n                sock.write('content-type: text/plain\\r\\n');\n                sock.write('content-length: 5\\r\\n');\n                sock.write('\\r\\n');\n                sock.end('derp\\n');\n            });\n        });\n    });\n\n    return {\n        start: function(callback) {\n            s.listen(0, function () {\n                s.url = 'http://localhost:' + this.address().port;\n                callback();\n            });\n        },\n        stop: function(callback) {\n            s.close(function () {\n                callback();\n            });\n        },\n        getData: function() {\n            return data;\n        },\n        wasCalled: function() {\n            return called;\n        }\n    };\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\n\nfunction createProxyServer() {\n  let server;\n  let port = 0;\n  let receivedData = '';\n  let called = false;\n\n  function handleClientConnection(client) {\n    called = true;\n    client.on('data', (data) => {\n      receivedData += data.toString();\n      client.write('HTTP/1.1 200 OK\\r\\n\\r\\n');\n      client.write('HTTP/1.1 200 OK\\r\\ncontent-type: text/plain\\r\\ncontent-length: 5\\r\\n\\r\\nderp\\n');\n      client.end();\n    });\n    client.on('end', () => {\n      client.destroy();\n    });\n  }\n\n  return {\n    start(callback) {\n      server = net.createServer(handleClientConnection);\n      server.listen(0, () => {\n        port = server.address().port;\n        callback(port);\n      });\n    },\n    stop(callback) {\n      if (server) {\n        server.close(() => {\n          server = null;\n          callback();\n        });\n      }\n    },\n    getData() {\n      return receivedData;\n    },\n    wasCalled() {\n      return called;\n    }\n  };\n}"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a class that handles HTTP requests with authentication and custom headers for a specific API service. The class should support both GET and POST methods, generate required authentication signatures, and handle request errors appropriately.\n\nClass Description: The TaskRequest class is designed to make authenticated HTTP requests to a specific API endpoint. It handles request signing, header generation, and error management. The class maintains authentication-related attributes and provides a method to execute requests.\n\nAttributes:\n- did: [String] - Device identifier used for authentication\n- finger: [String] - Fingerprint information for the request\n- token: [String] - Authentication token for API access\n- oaid: [String] - OAID (Open Anonymous Identification) for tracking\n\nMethods:\n- constructor(did, finger, token, oaid) -> [None] - Initializes the TaskRequest instance with authentication parameters\n- taskRequest(method, url, body) -> [Promise<Object>] - Executes an HTTP request with the specified method to the given URL, optionally with a request body. Returns the response data or throws an error if the request fails. The method handles request signing and header generation internally.\n\nInput:\n- method: [String] - HTTP method to use ('get' or 'post')\n- url: [String] - Target URL for the request\n- body: [String] (optional) - Request body for POST requests (default: empty string)\n\nOutput:\n- [Promise<Object>] - Resolves with the response data if the request succeeds\n- [Error] - Throws an error if the request fails",
    "Canonical_solution": "const axios = require('axios');\n\nclass TaskRequest {\n    constructor(did, finger, token, oaid) {\n        this.did = did;\n        this.finger = finger;\n        this.token = token;\n        this.oaid = oaid;\n    }\n\n    async taskRequest(method, url, body = \"\") {\n        let re = function (e) {\n            function convertObjectToQueryString(obj) {\n                let queryString = \"\";\n                if (obj) {\n                    const keys = Object.keys(obj).sort();\n                    keys.forEach(key => {\n                        const value = obj[key];\n                        if (value !== null && typeof value !== 'object') {\n                            queryString += `&${key}=${value}`;\n                        }\n                    });\n                }\n                return queryString.slice(1);\n            }\n            return convertObjectToQueryString(e)\n        }\n        \n        function v(e) {\n            const crypto = require(\"crypto\")\n            return crypto.createHash(\"md5\").update(e).digest(\"hex\")\n        }\n        \n        const g = {\n            traceid: v((new Date).getTime().toString() + Math.random().toString()),\n            noncestr: Math.random().toString().slice(2, 10),\n            timestamp: Date.now(),\n            platform: \"h5\",\n            did: this.did,\n            version: \"1.0.0\",\n            finger: this.finger,\n            token: this.token,\n            oaid: this.oaid,\n        }\n        \n        const c = \"\\u7c89\\u8c61\\u597d\\u725b\\u903ca8c19d8267527ea4c7d2f011acf7766f\"\n        let s = method === \"get\" ? void 0 : JSON.parse(body)\n        let e = void 0 === s ? {} : s\n        g.sign = v(re(e) + re(g) + c)\n        \n        let headers = {\n            'User-Agent': 'Mozilla/5.0 (Linux; Android 10; MI 8 Lite Build/QKQ1.190910.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.99 Mobile Safari/537.36 AgentWeb/5.0.0  UCBrowser/11.6.4.950',\n            'Accept': 'application/json, text/plain, */*',\n            'Accept-Encoding': 'gzip, deflate',\n            'Content-Type': 'application/json',\n            'origin': 'https://m.fenxianglife.com',\n            'sec-fetch-dest': 'empty',\n            'x-requested-with': 'com.n_add.android',\n            'sec-fetch-site': 'same-site',\n            'sec-fetch-mode': 'cors',\n            'referer': 'https://m.fenxianglife.com/h5-lottery/index.html?hideBack=1&sourceType=lottery_tab&token=030e7e9158af06dea2b3d0175a471ada&AppToken=96e06ae9f3cab6784de443015b8d9ad8&uid=515226607&v=5.4.3&did=njia992631e6-b9b2-4383-b67c-86b5d0fe818a&level=1&platform=android&timestamp=1717426249&channel=xiaomi&traFromId=23192687628924991393323633117947',\n            'accept-language': 'zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7',\n            \"Content-Type\": \"application/json\"\n        }\n        \n        Object.assign(headers, g)\n        \n        const reqeuestOptions = {\n            url: url,\n            method: method,\n            headers: headers,\n            data: body\n        }\n        \n        try {\n            const response = await axios(reqeuestOptions);\n            return response.data;\n        } catch (error) {\n            console.log('axios error', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class TaskRequest {\n  constructor(did, finger, token, oaid) {\n    this.did = did;\n    this.finger = finger;\n    this.token = token;\n    this.oaid = oaid;\n  }\n\n  async taskRequest(method, url, body = '') {\n    const headers = {\n      'Content-Type': 'application/json',\n      'Authorization': this.token,\n      'Device-Id': this.did,\n      'Fingerprint': this.finger,\n      'OAID': this.oaid\n    };\n\n    const signature = this.generateSignature(url, method, body);\n    headers['X-Signature'] = signature;\n\n    try {\n      const response = await fetch(url, {\n        method: method.toLowerCase(),\n        headers,\n        body: body\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      throw new Error(`Request failed: ${error.message}`);\n    }\n  }\n\n  generateSignature(url, method, body) {\n    // Placeholder for actual signature generation logic\n    // This should be replaced with the specific algorithm required by the API\n    return `${method.toUpperCase()}-${url}-${body}-${this.did}-${this.finger}`;\n  }\n}"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a TCP server in Node.js that handles client connections, processes incoming data in batches, and forwards each batch to an external service for processing.\n\nFunction Description: The function `createTCPServer` initializes a TCP server that listens on port 5000. When a client connects, it sets up a bidirectional communication channel where incoming data from the client is collected in batches (separated by '.'). Each complete batch is then sent to an external 'uppercase' service via a REQ socket. The server handles data streaming and batch processing efficiently.\n\nInput: None (The function takes no parameters; configuration is hardcoded)\n\nOutput: None (The function creates a server instance that runs indefinitely, listening for connections)\n\n---\n\nIf you'd prefer the class format (though the reference code is function-based):\n\nTask Description: Implement a TCP server class in Node.js that manages client connections and batch processing of incoming data.\n\nClass Description: The `TCPServer` class encapsulates a TCP server that listens for client connections, collects incoming data in batches, and forwards complete batches to an external service.\n\nAttributes:\n- server: [net.Server] - The underlying TCP server instance\n- port: [number] - The port number the server listens on (default: 5000)\n\nMethods:\n- constructor([port: number]) -> void - Initializes the server with optional port configuration\n- start() -> void - Starts the server and begins listening for connections\n- handleConnection(conn: net.Socket) -> void - Internal method to manage client connections and data processing\n- processBatch(batch: string[]) -> void - Sends a complete batch to the external service",
    "Canonical_solution": "function createTCPServer() {\n    var server = require('net').createServer();\n    server.on('connection', function(conn) {\n        conn.setEncoding('utf8');\n        \n        var req = context.socket('REQ');\n        req.setEncoding('utf8');\n        req.pipe(conn);\n        req.connect('uppercase');\n        \n        var batch = [];\n        var ask = function (q) {\n            req.write(q, 'utf8');\n        }\n        function readBatch() {\n            var msg; while (msg = conn.read()) {\n                msg.split('\\n').forEach(function(item) {\n                    if (item == '.') {\n                        console.log('Sending batch %s', batch);\n                        batch.forEach(ask);\n                        batch = [];\n                    }\n                    else if (item != '') {\n                        batch.push(item);\n                    }\n                });\n            }\n        }\n        conn.on('readable', readBatch);\n        readBatch();\n    });\n    server.listen(5000);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst { Socket } = require('net');\n\nclass TCPServer {\n  constructor(port = 5000) {\n    this.server = net.createServer();\n    this.port = port;\n  }\n\n  start() {\n    this.server.listen(this.port, () => {\n      console.log(`Server listening on port ${this.port}`);\n    });\n\n    this.server.on('connection', this.handleConnection.bind(this));\n  }\n\n  handleConnection(conn) {\n    let buffer = '';\n    conn.on('data', (data) => {\n      buffer += data.toString();\n      const batches = buffer.split('.');\n      buffer = batches.pop();\n      batches.forEach(batch => this.processBatch([batch]));\n    });\n\n    conn.on('end', () => {\n      console.log('Client disconnected');\n    });\n\n    conn.on('error', (err) => {\n      console.error(`Socket error: ${err.message}`);\n    });\n  }\n\n  processBatch(batch) {\n    // Simulate sending to external service\n    console.log('Processing batch:', batch);\n    // In a real scenario, you would use a REQ socket to send the batch to the service\n  }\n}"
  },
  {
    "Task_id": 162,
    "Instruction": "Task Description: Implement a POP3 server class in Node.js that handles secure and non-secure connections, manages client connections, and provides event-driven communication.\n\nClass Description: The POP3Server class extends EventEmitter to create a TCP server that can handle both regular and TLS-secured POP3 connections. It manages client connections and emits events for server lifecycle and errors.\n\nAttributes:\n- options: [Object] - Configuration options for the server including security settings\n- connections: [Set] - Tracks active client connections\n- server: [net.Server|tls.Server] - The underlying TCP/TLS server instance\n\nMethods:\n- constructor(options) -> [void] - Initializes the server with optional configuration\n- _setListeners() -> [void] - Sets up event listeners for the server\n- _onListening() -> [void] - Handles the 'listening' event\n- _onClose() -> [void] - Handles the 'close' event\n- _onError(err) -> [void] - Handles the 'error' event\n- connect(socket, socketOptions) -> [void] - Creates and manages a new client connection\n- listen(...args) -> [void] - Starts the server listening on specified port\n- close(callback) -> [void] - Stops the server and invokes callback when closed",
    "Canonical_solution": "const EventEmitter = require('events');\nconst net = require('net');\nconst tls = require('tls');\n\nclass POP3Server extends EventEmitter {\n    constructor(options) {\n        super();\n\n        this.options = options || {};\n        this.connections = new Set();\n\n        if (this.options.secure && !this.options.needsUpgrade) {\n            this.server = net.createServer(this.options, socket => {\n                this._handleProxy(socket, (err, socketOptions) => {\n                    if (err) {\n                        // ignore, should not happen\n                    }\n                    if (this.options.secured) {\n                        return this.connect(socket, socketOptions);\n                    }\n                    this._upgrade(socket, (err, tlsSocket) => {\n                        if (err) {\n                            return this._onError(err);\n                        }\n                        this.connect(tlsSocket, socketOptions);\n                    });\n                });\n            });\n        } else {\n            this.server = net.createServer(this.options, socket => {\n                this._handleProxy(socket, (err, socketOptions) => {\n                    if (err) {\n                        // ignore, should not happen\n                    }\n                    this.connect(socket, socketOptions);\n                });\n            });\n        }\n\n        this._setListeners();\n    }\n\n    _setListeners() {\n        this.server.on('listening', () => this._onListening());\n        this.server.on('close', () => this._onClose());\n        this.server.on('error', err => this._onError(err));\n    }\n\n    _onListening() {\n        let address = this.server.address();\n        this.emit('listening');\n    }\n\n    _onClose() {\n        this.emit('close');\n    }\n\n    _onError(err) {\n        this.emit('error', err);\n    }\n\n    connect(socket, socketOptions) {\n        let connection = new POP3Connection(this, socket, socketOptions);\n        this.connections.add(connection);\n        connection.once('error', err => {\n            this.connections.delete(connection);\n            this._onError(err);\n        });\n        connection.once('close', () => {\n            this.connections.delete(connection);\n        });\n        connection.init();\n    }\n\n    listen(...args) {\n        this.server.listen(...args);\n    }\n\n    close(callback) {\n        this.server.close(() => {\n            if (typeof callback === 'function') {\n                return callback();\n            }\n        });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 97,
    "wrong_result": "const net = require('net');\nconst tls = require('tls');\nconst { EventEmitter } = require('events');\n\nclass POP3Server extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.options = options;\n    this.connections = new Set();\n    this.server = null;\n  }\n\n  _setListeners() {\n    this.server.on('listening', this._onListening.bind(this));\n    this.server.on('close', this._onClose.bind(this));\n    this.server.on('error', this._onError.bind(this));\n    this.server.on('connection', (socket) => {\n      this.connect(socket, this.options.socketOptions || {});\n    });\n  }\n\n  _onListening() {\n    this.emit('listening');\n  }\n\n  _onClose() {\n    this.emit('close');\n  }\n\n  _onError(err) {\n    this.emit('error', err);\n  }\n\n  connect(socket, socketOptions) {\n    const client = new POP3Client(socket, socketOptions);\n    this.connections.add(client);\n    client.on('end', () => {\n      this.connections.delete(client);\n    });\n    client.on('error', (err) => {\n      this.emit('clientError', err, client);\n    });\n    this.emit('connect', client);\n  }\n\n  listen(...args) {\n    if (this.options.secure) {\n      this.server = tls.createServer(this.options);\n    } else {\n      this.server = net.createServer();\n    }\n    this._setListeners();\n    this.server.listen(...args);\n  }\n\n  close(callback) {\n    if (this.server) {\n      this.server.close(callback);\n    }\n  }\n}\n\nclass POP3Client extends EventEmitter {\n  constructor(socket, options) {\n    super();\n    this.socket = socket;\n    this.options = options;\n    this._setupSocket();\n  }\n\n  _setupSocket() {\n    this.socket.setEncoding('utf8');\n    this.socket.on('data', (data) => {\n      this.emit('data', data);\n    });\n    this.socket.on('end', () => {\n      this.emit('end');\n    });\n    this.socket.on('error', (err) => {\n      this.emit('error', err);\n    });\n  }\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a class that provides wallpaper retrieval functionality from different APIs (Unsplash or Bing) based on client availability.\n\nClass Description: The WallpaperService class is designed to fetch random wallpapers from either Unsplash (if an API key is provided) or Bing's wallpaper API (as a fallback). It handles API requests, processes responses, and provides a consistent output format regardless of the source.\n\nAttributes: None (This is a static service class with no instance attributes)\n\nMethods:\ngetWallpaper: static async getWallpaper(unsplashClientId: string) -> Promise<Object> - Fetches a random wallpaper from either Unsplash or Bing. \n  - Input: \n    - unsplashClientId: string - The API client ID for Unsplash (optional, if not provided will use Bing)\n  - Output: \n    - Returns a Promise that resolves to an object with:\n      - type: string - Indicates the source ('unsplash' or 'bing')\n      - data: Array/Object - Contains the wallpaper data in the respective API's format\n    - On error, returns a fallback Bing wallpaper object with a default image",
    "Canonical_solution": "const axios = require('axios');\n\nclass WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    const wallpaperAPI = unsplashClientId\n      ? 'https://api.unsplash.com/photos/random?orientation=landscape&count=1&client_id=' + unsplashClientId\n      : 'https://cn.bing.com/HPImageArchive.aspx?format=js&n=1';\n\n    try {\n      const res = await axios.get(wallpaperAPI);\n      return unsplashClientId\n        ? { type: 'unsplash', data: res.data }\n        : { type: 'bing', data: res.data.images };\n    } catch (error) {\n      return {\n        type: 'bing',\n        data: [{\n          url: '/az/hprichbg/rb/SWFC_ZH-CN9558503653_1920x1080.jpg',\n          copyrightlink: '/search?q=%e4%b8%8a%e6%b5%b7%e4%b8%96%e7%95%8c%e9%87%91%e8%9e%8d%e4%b8%ad%e5%bf%83&form=hpcapt&mkt=zh-cn'\n        }]\n      };\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class WallpaperService {\n  static async getWallpaper(unsplashClientId) {\n    try {\n      if (unsplashClientId) {\n        const unsplashResponse = await fetch(`https://api.unsplash.com/photos/random?client_id=${unsplashClientId}`);\n        if (unsplashResponse.ok) {\n          const data = await unsplashResponse.json();\n          return { type: 'unsplash', data };\n        }\n      }\n\n      const bingResponse = await fetch('https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1&mkt=en-US');\n      if (bingResponse.ok) {\n        const bingData = await bingResponse.json();\n        const imageUrl = `https://www.bing.com${bingData.images[0].url}`;\n        return { type: 'bing', data: { url: imageUrl } };\n      }\n    } catch (error) {\n      console.error('Error fetching wallpaper:', error);\n      return { \n        type: 'bing', \n        data: { \n          url: 'https://via.placeholder.com/1920x1080.png?text=Fallback+Wallpaper' \n        } \n      };\n    }\n  }\n}"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Create a UDP server using Node.js's dgram module to listen for incoming messages on a specified port.\n\nFunction Description: The function `createUDPServer` initializes a UDP server socket, binds it to a specified port, and listens for incoming messages. When a message is received, it logs the message content and the sender's address and port.\n\nInput: None\n\nOutput: None (The function does not return any value but logs incoming messages to the console.)",
    "Canonical_solution": "function createUDPServer() {\n    const dgram = require('dgram');\n    const socket = dgram.createSocket('udp4');\n\n    socket.on('message', (msg, rinfo) => {\n        console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n    });\n\n    socket.bind(8081);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 98,
    "wrong_result": "const dgram = require('dgram');\n\nfunction createUDPServer(port) {\n  const server = dgram.createSocket('udp4');\n  server.bind(port, () => {\n    console.log(`UDP server listening on port ${port}`);\n  });\n\n  server.on('message', (message, remote) => {\n    console.log(`Received message: ${message} from ${remote.address}:${remote.port}`);\n  });\n\n  server.on('error', (err) => {\n    console.log(`Server error:\\n${err.stack}`);\n    server.close();\n  });\n\n  server.on('listening', () => {\n    const address = server.address();\n    console.log(`Server is listening on ${address.address}:${address.port}`);\n  });\n\n  server.on('close', () => {\n    console.log('Server closed.');\n  });\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Create a reusable HTTP client class that simplifies making HTTP requests using Axios, with support for common methods like GET and POST, while handling errors consistently.\n\nClass Description: The HTTPClient class encapsulates Axios functionality to provide a clean interface for making HTTP requests. It maintains headers across requests and provides methods for GET and POST operations with error handling.\n\nAttributes:\n- headers: Object - Contains HTTP headers to be sent with every request\n\nMethods:\n- constructor(headers: Object) -> void - Initializes the HTTP client with default headers\n- get(url: String, params: Object = {}) -> Promise<Object> - Sends a GET request to the specified URL with optional query parameters, returns response data or throws error\n- post(url: String, data: Object = {}, params: Object = {}) -> Promise<Object> - Sends a POST request to the specified URL with optional request body and query parameters, returns response data or throws error",
    "Canonical_solution": "const axios = require('axios');\n\nclass HTTPClient {\n    constructor(headers) {\n        this.headers = headers;\n    }\n\n    async get(url, params = {}) {\n        try {\n            const response = await axios({\n                method: 'get',\n                url: url,\n                headers: this.headers,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('GET request failed:', error);\n            throw error;\n        }\n    }\n\n    async post(url, data = {}, params = {}) {\n        try {\n            const response = await axios({\n                method: 'post',\n                url: url,\n                headers: this.headers,\n                data: data,\n                params: params\n            });\n            return response.data;\n        } catch (error) {\n            console.error('POST request failed:', error);\n            throw error;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class HTTPClient {\n  constructor(headers) {\n    this.headers = headers;\n  }\n\n  async get(url, params = {}) {\n    try {\n      const response = await axios.get(url, {\n        headers: this.headers,\n        params: params\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async post(url, data = {}, params = {}) {\n    try {\n      const response = await axios.post(url, data, {\n        headers: this.headers,\n        params: params\n      });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n}"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a WebSocket client class for interacting with Chrome DevTools Protocol, handling connection, message exchange, and disconnection events.\n\nClass Description: The Chrome class is an EventEmitter that establishes and manages a WebSocket connection to Chrome's DevTools Protocol. It handles message parsing, error handling, and provides methods for sending commands and receiving responses/events.\n\nAttributes:\n- host: [String] - The host address for the WebSocket connection (default: 'localhost')\n- port: [Number] - The port number for the WebSocket connection (default: 9222)\n- secure: [Boolean] - Flag indicating whether to use secure WebSocket (wss)\n- webSocketUrl: [String] - The complete WebSocket URL for connection\n- _ws: [WebSocket] - The WebSocket instance\n- _notifier: [EventEmitter] - External event notifier\n- _callbacks: [Object] - Stores pending command callbacks\n- _nextCommandId: [Number] - Tracks the next command ID\n\nMethods:\n- constructor(options, notifier) -> [void] - Initializes the Chrome instance with connection options and notifier\n- _start() -> [Promise] - Internal method to initiate WebSocket connection\n- _connectToWebSocket() -> [Promise] - Establishes WebSocket connection and sets up event handlers\n- _handleConnectionClose() -> [void] - Cleans up when connection closes\n- _handleMessage(message) -> [void] - Processes incoming WebSocket messages\n- send(method, params, sessionId, callback) -> [Promise|void] - Sends a command to Chrome DevTools Protocol\n- _enqueueCommand(method, params, sessionId, callback) -> [void] - Internal method to queue commands\n- close(callback) -> [Promise|void] - Closes the WebSocket connection cleanly",
    "Canonical_solution": "const EventEmitter = require('events');\nconst WebSocket = require('ws');\n\nclass Chrome extends EventEmitter {\n    constructor(options, notifier) {\n        super();\n        this.host = options.host || 'localhost';\n        this.port = options.port || 9222;\n        this.secure = !!(options.secure);\n        this.webSocketUrl = undefined;\n        this._ws = null;\n        this._notifier = notifier;\n        this._start();\n    }\n\n    async _start() {\n        try {\n            await this._connectToWebSocket();\n            process.nextTick(() => {\n                this._notifier.emit('connect', this);\n            });\n        } catch (err) {\n            this._notifier.emit('error', err);\n        }\n    }\n\n    _connectToWebSocket() {\n        return new Promise((fulfill, reject) => {\n            try {\n                if (this.secure) {\n                    this.webSocketUrl = this.webSocketUrl.replace(/^ws:/i, 'wss:');\n                }\n                this._ws = new WebSocket(this.webSocketUrl, [], {\n                    maxPayload: 256 * 1024 * 1024,\n                    perMessageDeflate: false,\n                    followRedirects: true,\n                });\n\n                this._ws.on('open', () => {\n                    fulfill();\n                });\n                this._ws.on('message', (data) => {\n                    const message = JSON.parse(data);\n                    this._handleMessage(message);\n                });\n                this._ws.on('close', (code) => {\n                    this._handleConnectionClose();\n                    this.emit('disconnect');\n                });\n                this._ws.on('error', (err) => {\n                    reject(err);\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    _handleConnectionClose() {\n        this._callbacks = {};\n    }\n\n    _handleMessage(message) {\n        if (message.id) {\n            const callback = this._callbacks[message.id];\n            if (!callback) return;\n            \n            if (message.error) {\n                callback(true, message.error);\n            } else {\n                callback(false, message.result || {});\n            }\n            delete this._callbacks[message.id];\n            \n            if (Object.keys(this._callbacks).length === 0) {\n                this.emit('ready');\n            }\n        } else if (message.method) {\n            const {method, params, sessionId} = message;\n            this.emit('event', message);\n            this.emit(method, params, sessionId);\n            this.emit(`${method}.${sessionId}`, params, sessionId);\n        }\n    }\n\n    send(method, params, sessionId, callback) {\n        const optionals = Array.from(arguments).slice(1);\n        params = optionals.find(x => typeof x === 'object');\n        sessionId = optionals.find(x => typeof x === 'string');\n        callback = optionals.find(x => typeof x === 'function');\n\n        if (typeof callback === 'function') {\n            this._enqueueCommand(method, params, sessionId, callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                this._enqueueCommand(method, params, sessionId, (error, response) => {\n                    if (error) {\n                        const request = {method, params, sessionId};\n                        reject(error instanceof Error ? error : new ProtocolError(request, response));\n                    } else {\n                        fulfill(response);\n                    }\n                });\n            });\n        }\n    }\n\n    _enqueueCommand(method, params, sessionId, callback) {\n        const id = this._nextCommandId++;\n        const message = {\n            id,\n            method,\n            sessionId,\n            params: params || {}\n        };\n        this._ws.send(JSON.stringify(message), (err) => {\n            if (err) {\n                if (typeof callback === 'function') {\n                    callback(err);\n                }\n            } else {\n                this._callbacks[id] = callback;\n            }\n        });\n    }\n\n    close(callback) {\n        const closeWebSocket = (callback) => {\n            if (this._ws.readyState === 3) {\n                callback();\n            } else {\n                this._ws.removeAllListeners('close');\n                this._ws.once('close', () => {\n                    this._ws.removeAllListeners();\n                    this._handleConnectionClose();\n                    callback();\n                });\n                this._ws.close();\n            }\n        };\n        if (typeof callback === 'function') {\n            closeWebSocket(callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                closeWebSocket(fulfill);\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Chrome extends EventEmitter {\n  constructor(options = {}, notifier) {\n    super();\n    this.host = options.host || 'localhost';\n    this.port = options.port || 9222;\n    this.secure = options.secure || false;\n    this.webSocketUrl = `${this.secure ? 'wss' : 'ws'}://${this.host}:${this.port}/json/`;\n    this._ws = null;\n    this._notifier = notifier;\n    this._callbacks = {};\n    this._nextCommandId = 1;\n  }\n\n  async _start() {\n    try {\n      await this._connectToWebSocket();\n    } catch (error) {\n      this.emit('error', error);\n    }\n  }\n\n  async _connectToWebSocket() {\n    return new Promise((resolve, reject) => {\n      this._ws = new WebSocket(this.webSocketUrl);\n      this._ws.onopen = () => {\n        this.emit('connect');\n        resolve();\n      };\n      this._ws.onmessage = (event) => {\n        this._handleMessage(event.data);\n      };\n      this._ws.onerror = (error) => {\n        this.emit('error', error);\n        reject(error);\n      };\n      this._ws.onclose = () => {\n        this._handleConnectionClose();\n      };\n    });\n  }\n\n  _handleConnectionClose() {\n    this.emit('disconnect');\n    this._ws = null;\n  }\n\n  _handleMessage(message) {\n    const data = JSON.parse(message);\n    if (data.id && this._callbacks[data.id]) {\n      const callback = this._callbacks[data.id];\n      delete this._callbacks[data.id];\n      callback(null, data);\n    } else if (data.method) {\n      this.emit(data.method, data.params);\n    }\n  }\n\n  send(method, params, sessionId, callback) {\n    return new Promise((resolve, reject) => {\n      this._enqueueCommand(method, params, sessionId, (err, result) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  }\n\n  _enqueueCommand(method, params, sessionId, callback) {\n    const id = this._nextCommandId++;\n    this._callbacks[id] = callback;\n    const command = {\n      id,\n      method,\n      params: params || {},\n      sessionId\n    };\n    this._ws.send(JSON.stringify(command));\n  }\n\n  close(callback) {\n    return new Promise((resolve, reject) => {\n      if (this._ws) {\n        this._ws.close();\n        this._ws = null;\n        this.emit('close');\n        resolve();\n      } else {\n        resolve();\n      }\n    }).then(() => {\n      if (callback) callback();\n    }).catch((err) => {\n      if (callback) callback(err);\n      reject(err);\n    });\n  }\n}"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Implement a WebSocket client class in Node.js that connects to a speech synthesis service, sends SSML requests, and handles the audio response streams.\n\nClass Description: WebSocketClient is a class that manages WebSocket connections to Microsoft's Bing Speech API for text-to-speech synthesis. It handles connection lifecycle, request/response mapping, and binary audio data streaming.\n\nAttributes:\n- ws: [WebSocket|null] - Active WebSocket connection instance\n- executorMap: [Map] - Stores promise resolvers/rejectors mapped by request IDs\n- bufferMap: [Map] - Accumulates binary audio data chunks mapped by request IDs\n- timer: [Timeout|null] - Connection timeout handler\n\nMethods:\n- connect() -> [Promise<WebSocket>] - Establishes WebSocket connection with proper headers and returns a promise that resolves when connected\n- sendRequest(ssml: [String], format: [String]) -> [Promise<Buffer>] - Sends SSML request with specified audio format and returns promise resolving to audio buffer\n\nInput:\n- For connect(): None\n- For sendRequest():\n  - ssml: [String] - SSML markup for speech synthesis\n  - format: [String] - Desired audio output format (e.g., \"audio-24khz-48kbitrate-mono-mp3\")\n\nOutput:\n- For connect(): Resolves with WebSocket instance or rejects with error\n- For sendRequest(): Resolves with audio buffer or rejects with error",
    "Canonical_solution": "const { WebSocket } = require(\"ws\");\nconst { randomBytes } = require(\"crypto\");\n\nclass WebSocketClient {\n  constructor() {\n    this.ws = null;\n    this.executorMap = new Map();\n    this.bufferMap = new Map();\n    this.timer = null;\n  }\n\n  async connect() {\n    const connectionId = randomBytes(16).toString(\"hex\").toLowerCase();\n    let url = `wss://speech.platform.bing.com/consumer/speech/synthesize/readaloud/edge/v1?TrustedClientToken=6A5AA1D4EAFF4E9FB37E23D68491D6F4&ConnectionId=${connectionId}`;\n    let ws = new WebSocket(url, {\n      host: \"speech.platform.bing.com\",\n      origin: \"chrome-extension://jdiccldimpdaibmpdkjnbmckianbfold\",\n      headers: {\n        \"User-Agent\":\n          \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.66 Safari/537.36 Edg/103.0.1264.44\",\n      },\n    });\n    \n    return new Promise((resolve, reject) => {\n      ws.on(\"open\", () => {\n        resolve(ws);\n      });\n      \n      ws.on(\"close\", (code, reason) => {\n        this.ws = null;\n        if (this.timer) {\n          clearTimeout(this.timer);\n          this.timer = null;\n        }\n        for (let [key, value] of this.executorMap) {\n          value.reject(`\u8fde\u63a5\u5df2\u5173\u95ed: ${reason} ${code}`);\n        }\n        this.executorMap.clear();\n        this.bufferMap.clear();\n      });\n\n      ws.on(\"message\", (message, isBinary) => {\n        let pattern = /X-RequestId:(?<id>[a-z|0-9]*)/;\n        if (!isBinary) {\n          let data = message.toString();\n          if (data.includes(\"Path:turn.start\")) {\n            let matches = data.match(pattern);\n            let requestId = matches.groups.id;\n            this.bufferMap.set(requestId, Buffer.from([]));\n          } else if (data.includes(\"Path:turn.end\")) {\n            let matches = data.match(pattern);\n            let requestId = matches.groups.id;\n            let executor = this.executorMap.get(requestId);\n            if (executor) {\n              this.executorMap.delete(matches.groups.id);\n              let result = this.bufferMap.get(requestId);\n              executor.resolve(result);\n            }\n          }\n        } else if (isBinary) {\n          let separator = \"Path:audio\\r\\n\";\n          let data = message;\n          let contentIndex = data.indexOf(separator) + separator.length;\n          let headers = data.slice(2, contentIndex).toString();\n          let matches = headers.match(pattern);\n          let requestId = matches.groups.id;\n          let content = data.slice(contentIndex);\n          let buffer = this.bufferMap.get(requestId);\n          if (buffer) {\n            buffer = Buffer.concat([buffer, content], buffer.length+content.length);\n            this.bufferMap.set(requestId, buffer);\n          }\n        }\n      });\n      \n      ws.on(\"error\", (error) => {\n        reject(`\u8fde\u63a5\u5931\u8d25\uff1a ${error}`);\n      });\n    });\n  }\n\n  async sendRequest(ssml, format) {\n    if (this.ws == null || this.ws.readyState != WebSocket.OPEN) {\n      let connection = await this.connect();\n      this.ws = connection;\n    }\n    \n    const requestId = randomBytes(16).toString(\"hex\").toLowerCase();\n    let result = new Promise((resolve, reject) => {\n      this.executorMap.set(requestId, { resolve, reject });\n      \n      let configData = {\n        context: {\n          synthesis: {\n            audio: {\n              metadataoptions: {\n                sentenceBoundaryEnabled: \"false\",\n                wordBoundaryEnabled: \"false\",\n              },\n              outputFormat: format,\n            },\n          },\n        },\n      };\n      \n      let configMessage =\n        `X-Timestamp:${Date()}\\r\\n` +\n        \"Content-Type:application/json; charset=utf-8\\r\\n\" +\n        \"Path:speech.config\\r\\n\\r\\n\" +\n        JSON.stringify(configData);\n        \n      this.ws.send(configMessage, (configError) => {\n        if (configError) return;\n        \n        let ssmlMessage =\n          `X-Timestamp:${Date()}\\r\\n` +\n          `X-RequestId:${requestId}\\r\\n` +\n          `Content-Type:application/ssml+xml\\r\\n` +\n          `Path:ssml\\r\\n\\r\\n` +\n          ssml;\n        this.ws.send(ssmlMessage);\n      });\n    });\n\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    \n    this.timer = setTimeout(() => {\n      if (this.ws && this.ws.readyState == WebSocket.OPEN) {\n        this.ws.close(1000);\n        this.timer = null;\n      }\n    }, 10000);\n\n    return await Promise.race([\n      result,\n      new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.executorMap.delete(requestId);\n          this.bufferMap.delete(requestId);\n          reject(\"\u8bf7\u6c42\u8d85\u65f6\");\n        }, 10000);\n      }),\n    ]);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketClient {\n  constructor() {\n    this.ws = null;\n    this.executorMap = new Map();\n    this.bufferMap = new Map();\n    this.timer = null;\n  }\n\n  async connect() {\n    return new Promise((resolve, reject) => {\n      const ws = new WebSocket('wss://speech.platform.bing.com/speech/recognition/interactive/cognitiveservices/v1?language=en-US');\n\n      ws.onopen = () => {\n        this.ws = ws;\n        resolve(ws);\n      };\n\n      ws.onerror = (error) => {\n        reject(error);\n      };\n\n      ws.onclose = () => {\n        this.ws = null;\n        if (this.timer) clearTimeout(this.timer);\n      };\n    });\n  }\n\n  async sendRequest(ssml, format) {\n    return new Promise((resolve, reject) => {\n      const requestId = Date.now().toString();\n      const executor = { resolve, reject };\n      this.executorMap.set(requestId, executor);\n      this.bufferMap.set(requestId, []);\n\n      const headers = {\n        'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n        'Content-Type': 'application/ssml+xml',\n        'X-RequestId': requestId,\n        'X-Microsoft-OutputFormat': format\n      };\n\n      this.ws.send(\n        `<?xml version=\"1.0\" encoding=\"UTF-8\"?><speak version=\"1.0\" xmlns=\"http://www.w3.org/2000/12/synthesis\" xml:lang=\"en-US\"><voice name=\"Microsoft Server Speech Text to Speech Voice (en-US, JessaRUS)\">${ssml}</voice></speak>`,\n        { binary: false, mask: true }\n      );\n\n      this.timer = setTimeout(() => {\n        this.executorMap.delete(requestId);\n        this.bufferMap.delete(requestId);\n        reject(new Error('Request timeout'));\n      }, 30000);\n\n      this.ws.onmessage = (event) => {\n        if (event.data instanceof ArrayBuffer) {\n          const arrayBuffer = event.data;\n          const buffer = Buffer.from(arrayBuffer);\n          this.bufferMap.get(requestId).push(buffer);\n        } else {\n          const data = JSON.parse(event.data);\n          if (data.header && data.header.requestId === requestId && data.body && data.body.audioData) {\n            this.bufferMap.get(requestId).push(Buffer.from(data.body.audioData, 'base64'));\n          }\n        }\n      };\n\n      this.ws.onclose = () => {\n        this.executorMap.delete(requestId);\n        this.bufferMap.delete(requestId);\n        reject(new Error('Connection closed'));\n      };\n    }).then(() => {\n      const buffers = this.bufferMap.get(requestId);\n      this.bufferMap.delete(requestId);\n      this.executorMap.delete(requestId);\n      return Buffer.concat(buffers);\n    });\n  }\n}"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Implement a WebSocket-based OrderBook class for managing real-time order book data from a cryptocurrency exchange, with connection management and state handling capabilities.\n\nClass Description: The OrderBook class maintains a real-time order book for a specified trading pair by connecting to a WebSocket feed. It handles connection states, processes incoming messages, and provides event-driven updates. The class inherits from EventEmitter to notify consumers of state changes and order book updates.\n\nAttributes:\n- productID: string - The trading pair identifier (e.g., 'BTC-USD')\n- websocketURI: string - The WebSocket endpoint URL for real-time data\n- restURI: string - The REST API endpoint URL for initial snapshot\n- state: string - Current connection/processing state (from STATES enum)\n- fail_count: number - Count of consecutive connection failures\n- timeProvider: any - Service for timestamp generation\n- socket: WebSocket - The active WebSocket connection instance\n- queue: Array - Buffer for messages received during synchronization\n- book: object - The current order book state with sequence, bids, and asks\n\nMethods:\n- constructor(productID: string, websocketURI: string, restURI: string, timeProvider: any) -> OrderBook - Initializes the order book with configuration and starts connection\n- clear_book() -> void - Resets the order book and message queue\n- connect() -> void - Establishes new WebSocket connection with event handlers\n- disconnect() -> void - Closes active WebSocket connection\n- changeState(stateName: string) -> void - Updates state machine and handles transitions (emits statechange event)\n- onOpen() -> void - Handles WebSocket open event (starts synchronization)\n- onClose() -> void - Handles WebSocket close event (updates state)\n- onMessage(datastr: string) -> void - Processes incoming WebSocket messages\n- sync() -> void - Sends subscription message and loads initial snapshot\n- processMessage(message: object, t: Date) -> void - Validates and processes order book updates (emits message-type events)",
    "Canonical_solution": "var WebSocket = require('ws');\nvar EventEmitter = require('events').EventEmitter;\nvar util = require('util');\n\nclass OrderBook {\n    constructor(productID: string, websocketURI: string, restURI: string, timeProvider: any) {\n        var self = this;\n        EventEmitter.call(self);\n\n        self.productID = productID || 'BTC-USD';\n        self.websocketURI = websocketURI || 'wss://ws-feed.exchange.coinbase.com';\n        self.restURI = restURI;\n        self.state = self.STATES.closed;\n        self.fail_count = 0;\n        self.timeProvider = timeProvider;\n        self.connect();\n    }\n\n    STATES = {\n        'closed': 'closed',\n        'open': 'open',\n        'syncing': 'syncing',\n        'processing': 'processing',\n        'error': 'error',\n    };\n\n    clear_book() {\n        var self = this;\n        self.queue = [];\n        self.book = {\n            'sequence': -1,\n            'bids': {},\n            'asks': {},\n        };\n    };\n\n    connect() {\n        var self = this;\n        if (self.socket) {\n            self.socket.close();\n        }\n        self.clear_book();\n        self.socket = new WebSocket(self.websocketURI);\n        self.socket.on('message', self.onMessage.bind(self));\n        self.socket.on('open', self.onOpen.bind(self));\n        self.socket.on('close', self.onClose.bind(self));\n    };\n\n    disconnect() {\n        var self = this;\n        if (!self.socket) {\n            throw \"Could not disconnect (not connected)\"\n        }\n        self.socket.close();\n        self.onClose();\n    };\n\n    changeState(stateName) {\n        var self = this;\n        var newState = self.STATES[stateName];\n        if (newState === undefined) {\n            throw \"Unrecognized state: \" + stateName;\n        }\n        var oldState = self.state;\n        self.state = newState;\n\n        if (self.fail_count > 3)\n            throw \"Tried to reconnect 4 times. Giving up.\";\n\n        if (self.state === self.STATES.error || self.state === self.STATES.closed) {\n            self.fail_count += 1;\n            self.socket.close();\n            setTimeout(() => self.connect(), 5000);\n        }\n        else if (self.state === self.STATES.processing) {\n            self.fail_count = 0;\n        }\n\n        self.emit('statechange', { 'old': oldState, 'new': newState });\n    };\n\n    onOpen() {\n        var self = this;\n        self.changeState(self.STATES.open);\n        self.sync();\n    };\n\n    onClose() {\n        var self = this;\n        self.changeState(self.STATES.closed);\n    };\n\n    onMessage(datastr: string) {\n        var self = this;\n        var t = self.timeProvider.utcNow();\n        var data = JSON.parse(datastr);\n        if (self.state !== self.STATES.processing) {\n            self.queue.push(data);\n        } else {\n            self.processMessage(data, t);\n        }\n    };\n\n    sync() {\n        var self = this;\n        self.changeState(self.STATES.syncing);\n        var subscribeMessage = {\n            'type': 'subscribe',\n            'product_id': self.productID,\n        };\n        self.socket.send(JSON.stringify(subscribeMessage));\n        self.loadSnapshot();\n    };\n\n    processMessage(message, t: Date) {\n        var self = this;\n        if (message.sequence <= self.book.sequence) {\n            self.emit('ignored', message);\n            return;\n        }\n        if (message.sequence != self.book.sequence + 1) {\n            self.changeState(self.STATES.error);\n        }\n        self.book.sequence = message.sequence;\n\n        self.emit(message.type, new Models.Timestamped(message, t));\n    };\n}\n\nutil.inherits(OrderBook, EventEmitter);",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class OrderBook extends EventEmitter {\n  constructor(productID, websocketURI, restURI, timeProvider) {\n    super();\n    this.productID = productID;\n    this.websocketURI = websocketURI;\n    this.restURI = restURI;\n    this.state = 'disconnected';\n    this.fail_count = 0;\n    this.timeProvider = timeProvider;\n    this.socket = null;\n    this.queue = [];\n    this.book = { sequence: 0, bids: {}, asks: {} };\n    this.connect();\n  }\n\n  clear_book() {\n    this.book = { sequence: 0, bids: {}, asks: {} };\n    this.queue = [];\n  }\n\n  connect() {\n    if (this.socket && this.socket.readyState === WebSocket.OPEN) {\n      return;\n    }\n    this.socket = new WebSocket(this.websocketURI);\n    this.socket.onopen = () => this.onOpen();\n    this.socket.onclose = () => this.onClose();\n    this.socket.onmessage = (event) => this.onMessage(event.data);\n    this.socket.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      this.fail_count++;\n      this.changeState('failed');\n    };\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n    }\n  }\n\n  changeState(stateName) {\n    const prevState = this.state;\n    this.state = stateName;\n    this.emit('statechange', { previous: prevState, current: stateName });\n  }\n\n  onOpen() {\n    this.changeState('connecting');\n    this.sync();\n  }\n\n  onClose() {\n    this.changeState('disconnected');\n  }\n\n  onMessage(datastr) {\n    try {\n      const message = JSON.parse(datastr);\n      const t = this.timeProvider.now();\n      this.processMessage(message, t);\n    } catch (e) {\n      console.error('Error parsing message:', e);\n    }\n  }\n\n  async sync() {\n    try {\n      const response = await fetch(this.restURI);\n      const snapshot = await response.json();\n      this.clear_book();\n      this.book.sequence = snapshot.sequence;\n      this.book.bids = snapshot.bids;\n      this.book.asks = snapshot.asks;\n      this.changeState('synced');\n      this.emit('snapshot', this.book);\n    } catch (e) {\n      console.error('Failed to load snapshot:', e);\n      this.fail_count++;\n      this.changeState('failed');\n    }\n  }\n\n  processMessage(message, t) {\n    if (!message || !message.type) {\n      return;\n    }\n    this.emit('message', { message, timestamp: t });\n    if (message.type === 'snapshot') {\n      this.clear_book();\n      this.book.sequence = message.sequence;\n      this.book.bids = message.bids;\n      this.book.asks = message.asks;\n      this.emit('snapshot', this.book);\n    } else if (message.type === 'update') {\n      if (message.sequence <= this.book.sequence) {\n        return;\n      }\n      this.book.sequence = message.sequence;\n      for (const [price, size] of Object.entries(message.bids)) {\n        this.book.bids[price] = size;\n      }\n      for (const [price, size] of Object.entries(message.asks)) {\n        this.book.asks[price] = size;\n      }\n      this.emit('update', this.book);\n    }\n  }\n}"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a WebSocket-based communication channel class that handles message sending, receiving, and connection management between a client and server.\n\nClass Description: The Channel class manages WebSocket communication by providing methods to send messages, handle incoming messages, and manage connection lifecycle events. It acts as an abstraction layer over raw WebSocket connections.\n\nAttributes:\n- _ws: [WebSocket] - The underlying WebSocket connection instance\n- _handler: [Object|null] - The message handler object that processes incoming messages\n- _messageListener: [Function] - The bound message event listener function\n\nMethods:\n- constructor(ws) -> [void] - Initializes the channel with a WebSocket instance and sets up message listener\n- send(message) -> [void] - Sends a message through the WebSocket if the connection is open\n- close() -> [void] - Closes the WebSocket connection\n- listen(handler) -> [void] - Sets the message handler for incoming messages\n- dispose() -> [void] - Cleans up event listeners\n- _messageReceived(message) -> [void] - Internal method that forwards incoming messages to the handler\n\nTask Description: Create a service class that manages multiple WebSocket connections and sessions for debugging purposes.\n\nClass Description: The NddService class manages multiple debugging sessions through WebSocket connections, handling session creation, connection events, and cleanup.\n\nAttributes:\n- _disconnectPromise: [Promise] - Promise that resolves when the process disconnects\n- _connected: [Set] - Set of currently connected session IDs\n- _frontend: [Object] - Frontend interface for handling session events\n- _pipe: [string] - Path to the named pipe for IPC communication\n\nMethods:\n- constructor(frontend) -> [void] - Initializes the service with frontend interface and sets up IPC server\n- _startSession(info, frontend) -> [Promise<Function>] - Starts a new debugging session and returns a cleanup function\n  - info: [Object] - Session information including inspector URL and ID\n  - frontend: [Object] - Frontend interface for session events\n  - Returns: [Function] - Async cleanup function for the session",
    "Canonical_solution": "const { spawn } = require('child_process');\nconst os = require('os');\nconst path = require('path');\nconst net = require('net');\nconst WebSocket = require('ws');\n\nclass Channel {\n  /**\n   * @param {!WebSocket} ws\n   */\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._messageReceived.bind(this);\n    this._ws.on('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    this._ws.close();\n  }\n\n  /**\n   * @param {!Object}\n   */\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._ws.removeListener('message', this._messageListener);\n  }\n\n  /**\n   * @param {string} message\n   */\n  _messageReceived(message) {\n    if (this._handler) {\n      this._handler.dispatchMessage(message);\n    }\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._disconnectPromise = new Promise(resolve => process.once('disconnect', () => resolve()));\n    this._connected = new Set();\n    this._frontend = frontend;\n\n    const pipePrefix = process.platform === 'win32' ? '\\\\\\\\.\\\\pipe\\\\' : os.tmpdir();\n    const pipeName = `node-ndb.${process.pid}.sock`;\n    this._pipe = path.join(pipePrefix, pipeName);\n    const server = net.createServer(socket => {\n      socket.on('data', async d => {\n        const runSession = await this._startSession(JSON.parse(d), frontend);\n        socket.write('run');\n        runSession();\n      });\n      socket.on('error', e => {});\n    }).listen(this._pipe);\n    server.unref();\n  }\n\n  async _startSession(info, frontend) {\n    const ws = new WebSocket(info.inspectorUrl);\n    const openPromise = new Promise(resolve => ws.once('open', () => resolve()));\n    const errorPromise = new Promise(resolve => ws.once('error', () => resolve()));\n    const closePromise = new Promise(resolve => ws.once('close', () => resolve()));\n    let state = await Promise.race([openPromise, errorPromise, closePromise, this._disconnectPromise]);\n    if (state === openPromise) {\n      this._connected.add(info.id);\n      const channel = new Channel(ws);\n      state = await Promise.race([frontend.detected(info, rpc.handle(channel)), this._disconnectPromise]);\n      return async() => {\n        if (state !== this._disconnectPromise)\n          state = await Promise.race([closePromise, errorPromise, this._disconnectPromise]);\n        channel.dispose();\n        this._connected.delete(info.id);\n        if (state !== this._disconnectPromise)\n          frontend.disconnected(info.id);\n        else\n          ws.send(CALL_EXIT_MESSAGE, () => ws.close());\n      };\n    } else {\n      return async function() {};\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Channel {\n  constructor(ws) {\n    this._ws = ws;\n    this._handler = null;\n    this._messageListener = this._messageReceived.bind(this);\n    this._ws.addEventListener('message', this._messageListener);\n  }\n\n  send(message) {\n    if (this._ws.readyState === WebSocket.OPEN) {\n      this._ws.send(message);\n    }\n  }\n\n  close() {\n    this._ws.close();\n  }\n\n  listen(handler) {\n    this._handler = handler;\n  }\n\n  dispose() {\n    this._ws.removeEventListener('message', this._messageListener);\n    this._handler = null;\n  }\n\n  _messageReceived(event) {\n    if (this._handler && event.data) {\n      this._handler(event.data);\n    }\n  }\n}\n\nclass NddService {\n  constructor(frontend) {\n    this._disconnectPromise = new Promise((resolve) => {\n      this._onDisconnect = resolve;\n    });\n    this._connected = new Set();\n    this._frontend = frontend;\n    this._pipe = '/tmp/ndd_pipe';\n    this._setupIpcServer();\n  }\n\n  _startSession(info, frontend) {\n    return new Promise((resolve) => {\n      const sessionHandler = (message) => {\n        frontend.onMessage(message);\n      };\n\n      const channel = new Channel(new WebSocket(info.inspectorUrl));\n      channel.listen(sessionHandler);\n\n      const cleanup = async () => {\n        channel.dispose();\n        channel.close();\n        this._connected.delete(info.id);\n        frontend.onClose();\n      };\n\n      this._connected.add(info.id);\n      resolve(cleanup);\n    });\n  }\n\n  _setupIpcServer() {\n    // Implementation for setting up IPC server\n  }\n}"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a WebSocket client class for interacting with Chrome's DevTools Protocol, handling connection, message exchange, and event emission.\n\nClass Description: The Chrome class extends EventEmitter to create a WebSocket client that connects to Chrome's DevTools Protocol. It manages WebSocket connections, handles message parsing, and provides methods for sending commands and receiving responses/events.\n\nAttributes:\n- host: [String] - The host address for the WebSocket connection (default: 'localhost')\n- port: [Number] - The port number for the WebSocket connection (default: 9222)\n- secure: [Boolean] - Flag indicating whether to use secure WebSocket (wss)\n- _notifier: [Object] - External notification handler\n- _callbacks: [Object] - Map of pending command callbacks\n- _nextCommandId: [Number] - Counter for generating command IDs\n- webSocketUrl: [String] - The complete WebSocket URL for connection\n- _ws: [WebSocket] - The active WebSocket connection instance\n\nMethods:\n- constructor: [constructor](options: Object, notifier: Object) -> [Chrome] - Initializes the Chrome instance with connection options and notifier\n- _connectToWebSocket: [_connectToWebSocket]() -> [Promise] - Establishes WebSocket connection and sets up event handlers\n- _handleMessage: [_handleMessage](message: Object) -> [void] - Processes incoming WebSocket messages (responses and events)\n- _enqueueCommand: [_enqueueCommand](method: String, params: Object, sessionId: String, callback: Function) -> [void] - Sends a command through WebSocket and tracks its callback\n- send: [send](method: String, ...args: Any) -> [Promise|undefined] - Public method to send commands, supporting both callback and Promise patterns",
    "Canonical_solution": "const EventEmitter = require('events');\nconst WebSocket = require('ws');\n\nclass Chrome extends EventEmitter {\n    constructor(options, notifier) {\n        super();\n        this.host = options.host || 'localhost';\n        this.port = options.port || 9222;\n        this.secure = !!(options.secure);\n        this._notifier = notifier;\n        this._callbacks = {};\n        this._nextCommandId = 1;\n        this.webSocketUrl = undefined;\n        this._start();\n    }\n\n    _connectToWebSocket() {\n        return new Promise((fulfill, reject) => {\n            try {\n                if (this.secure) {\n                    this.webSocketUrl = this.webSocketUrl.replace(/^ws:/i, 'wss:');\n                }\n                this._ws = new WebSocket(this.webSocketUrl, [], {\n                    maxPayload: 256 * 1024 * 1024,\n                    perMessageDeflate: false,\n                    followRedirects: true,\n                });\n\n                this._ws.on('open', () => {\n                    fulfill();\n                });\n                this._ws.on('message', (data) => {\n                    const message = JSON.parse(data);\n                    this._handleMessage(message);\n                });\n                this._ws.on('close', (code) => {\n                    this._handleConnectionClose();\n                    this.emit('disconnect');\n                });\n                this._ws.on('error', (err) => {\n                    reject(err);\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    _handleMessage(message) {\n        if (message.id) {\n            const callback = this._callbacks[message.id];\n            if (!callback) return;\n            \n            if (message.error) {\n                callback(true, message.error);\n            } else {\n                callback(false, message.result || {});\n            }\n            delete this._callbacks[message.id];\n            \n            if (Object.keys(this._callbacks).length === 0) {\n                this.emit('ready');\n            }\n        } else if (message.method) {\n            const {method, params, sessionId} = message;\n            this.emit('event', message);\n            this.emit(method, params, sessionId);\n            this.emit(`${method}.${sessionId}`, params, sessionId);\n        }\n    }\n\n    _enqueueCommand(method, params, sessionId, callback) {\n        const id = this._nextCommandId++;\n        const message = {\n            id,\n            method,\n            sessionId,\n            params: params || {}\n        };\n        this._ws.send(JSON.stringify(message), (err) => {\n            if (err) {\n                if (typeof callback === 'function') {\n                    callback(err);\n                }\n            } else {\n                this._callbacks[id] = callback;\n            }\n        });\n    }\n\n    send(method, params, sessionId, callback) {\n        const optionals = Array.from(arguments).slice(1);\n        params = optionals.find(x => typeof x === 'object');\n        sessionId = optionals.find(x => typeof x === 'string');\n        callback = optionals.find(x => typeof x === 'function');\n        \n        if (typeof callback === 'function') {\n            this._enqueueCommand(method, params, sessionId, callback);\n            return undefined;\n        } else {\n            return new Promise((fulfill, reject) => {\n                this._enqueueCommand(method, params, sessionId, (error, response) => {\n                    if (error) {\n                        const request = {method, params, sessionId};\n                        reject(error instanceof Error ? error : new ProtocolError(request, response));\n                    } else {\n                        fulfill(response);\n                    }\n                });\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class Chrome extends EventEmitter {\n  constructor(options = {}, notifier = {}) {\n    super();\n    this.host = options.host || 'localhost';\n    this.port = options.port || 9222;\n    this.secure = options.secure || false;\n    this._notifier = notifier;\n    this._callbacks = {};\n    this._nextCommandId = 1;\n    this.webSocketUrl = `${this.secure ? 'wss' : 'ws'}://${this.host}:${this.port}/devtools/page/`;\n    this._ws = null;\n  }\n\n  async _connectToWebSocket() {\n    return new Promise((resolve, reject) => {\n      this._ws = new WebSocket(this.webSocketUrl);\n      this._ws.onopen = () => {\n        this.emit('connect');\n        resolve();\n      };\n      this._ws.onerror = (error) => {\n        this.emit('error', error);\n        reject(error);\n      };\n      this._ws.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          this._handleMessage(message);\n        } catch (e) {\n          this.emit('error', e);\n        }\n      };\n      this._ws.onclose = (event) => {\n        this.emit('disconnect', event);\n      };\n    });\n  }\n\n  _handleMessage(message) {\n    if (message.id) {\n      const callback = this._callbacks[message.id];\n      if (callback) {\n        callback(message);\n        delete this._callbacks[message.id];\n      }\n    } else if (message.method) {\n      this.emit(message.method, message.params);\n    }\n  }\n\n  _enqueueCommand(method, params, sessionId, callback) {\n    const id = this._nextCommandId++;\n    const command = {\n      id,\n      method,\n      params: params || {},\n      sessionId\n    };\n    this._callbacks[id] = callback;\n    this._ws.send(JSON.stringify(command));\n  }\n\n  send(method, ...args) {\n    return new Promise((resolve, reject) => {\n      const params = args.length === 1 && typeof args[0] === 'object' ? args[0] : args;\n      this._enqueueCommand(method, params, null, (response) => {\n        if (response.error) {\n          reject(response.error);\n        } else {\n          resolve(response.result);\n        }\n      });\n    });\n  }\n}"
  },
  {
    "Task_id": 198,
    "Instruction": "Task Description: Implement a WebSocket client class in Node.js that handles WebSocket connections, message transmission, and connection lifecycle events.\n\nClass Description: WebSocketImpl is a WebSocket client implementation that manages WebSocket connections, including establishing connections, handling incoming messages, managing connection states, and sending messages. It wraps the 'ws' library functionality with additional state management and event handling.\n\nAttributes:\n- _globalObject: [Object] - The global context in which the WebSocket operates\n- _ownerDocument: [Object] - The document associated with the WebSocket\n- _urlRecord: [Object|null] - URL information for the WebSocket connection\n- url: [String] - The WebSocket server URL\n- extensions: [String] - Supported WebSocket extensions\n- binaryType: [String] - Type of binary data handling (\"blob\" or \"arraybuffer\")\n- _ws: [Object|null] - The underlying WebSocket instance\n- _readyState: [Number] - Current connection state (0=CONNECTING, 1=OPEN, 2=CLOSING, 3=CLOSED)\n- _requiredToFail: [Boolean] - Flag indicating if the connection should fail\n- bufferedAmount: [Number] - Number of bytes of queued data\n- _sendQueue: [Array] - Queue of messages waiting to be sent\n- _dequeueScheduled: [Boolean] - Flag for send queue scheduling\n\nMethods:\n- constructor(globalObject, args, privateData) -> [void] - Initializes the WebSocket client with configuration and establishes connection\n- _onConnectionEstablished() -> [void] - Handles successful connection establishment\n- _onMessageReceived(data, isBinary) -> [void] - Processes incoming WebSocket messages\n- _onConnectionClosed(code, reason) -> [void] - Handles connection closure\n- close(code, reason) -> [void] - Closes the WebSocket connection with optional code and reason\n- send(data) -> [void] - Queues data for sending through the WebSocket\n- _actuallySend() -> [void] - Internal method that sends queued messages\n- _scheduleSend() -> [void] - Schedules message sending on the next event loop tick",
    "Canonical_solution": "const WebSocket = require(\"ws\");\n\nclass WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.document;\n    this._urlRecord = null;\n    this.url = \"\";\n    this.extensions = \"\";\n    this.binaryType = \"blob\";\n    this._ws = null;\n    this._readyState = 0; // CONNECTING\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n\n    const url = args[0];\n    let protocols = args[1] !== undefined ? args[1] : [];\n\n    this._ws = new WebSocket(this.url, protocols, {\n      headers: {\n        \"user-agent\": globalObject.navigator.userAgent,\n        \"cookie\": this._ownerDocument._cookieJar.getCookieStringSync(nodeParsedURL, { http: true }),\n        \"origin\": globalObject._origin\n      },\n      rejectUnauthorized: globalObject._resourceLoader._strictSSL\n    });\n\n    this._ws.once(\"open\", () => {\n      this._onConnectionEstablished();\n    });\n    this._ws.on(\"message\", this._onMessageReceived.bind(this));\n    this._ws.once(\"close\", (...closeArgs) => {\n      this._onConnectionClosed(...closeArgs);\n    });\n    this._ws.once(\"error\", () => {\n      this._requiredToFail = true;\n    });\n  }\n\n  _onConnectionEstablished() {\n    if (this._ws.extensions !== null) {\n      this.extensions = Object.keys(this._ws.extensions).join(\", \");\n    }\n    // fire open event\n  }\n\n  _onMessageReceived(data, isBinary) {\n    if (this.readyState !== 1) { // OPEN\n      return;\n    }\n    // process message data and fire message event\n  }\n\n  _onConnectionClosed(code, reason) {\n    // fire close event\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (this.readyState === 0) { // CONNECTING\n      this._requiredToFail = true;\n      if (this._ws !== null) {\n        this._ws.terminate();\n      } else {\n        this._readyState = 2; // CLOSING\n      }\n    } else if (this.readyState === 1) { // OPEN\n      this._ws.close(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this.readyState === 0) { // CONNECTING\n      throw new Error(\"Still in CONNECTING state.\");\n    }\n    if (this.readyState !== 1) { // OPEN\n      return;\n    }\n    let length;\n    if (typeof data === \"string\") {\n      length = Buffer.byteLength(data, \"utf8\");\n    } else {\n      length = data.byteLength;\n    }\n    this.bufferedAmount += length;\n    this._sendQueue.push([data, length]);\n    this._scheduleSend();\n  }\n\n  _actuallySend() {\n    for (const [data, length] of this._sendQueue.splice(0)) {\n      this._ws.send(data, { binary: typeof data !== \"string\" }, () => {\n        this.bufferedAmount -= length;\n      });\n    }\n  }\n\n  _scheduleSend() {\n    if (this._dequeueScheduled) {\n      return;\n    }\n    this._dequeueScheduled = true;\n    process.nextTick(() => {\n      this._dequeueScheduled = false;\n      this._actuallySend();\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.ownerDocument;\n    this._urlRecord = null;\n    this.url = args[0];\n    this.extensions = '';\n    this.binaryType = 'blob';\n    this._ws = null;\n    this._readyState = 0;\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n    this._dequeueScheduled = false;\n\n    this._connect();\n  }\n\n  _connect() {\n    if (this._requiredToFail) {\n      this._onConnectionClosed(1006, 'Connection failed');\n      return;\n    }\n\n    this._ws = new require('ws')(this.url);\n    this._ws.on('open', () => this._onConnectionEstablished());\n    this._ws.on('message', (data, isBinary) => this._onMessageReceived(data, isBinary));\n    this._ws.on('close', (code, reason) => this._onConnectionClosed(code, reason));\n    this._ws.on('error', (err) => {\n      console.error('WebSocket error:', err);\n      this._onConnectionClosed(1011, 'Internal error');\n    });\n  }\n\n  _onConnectionEstablished() {\n    this._readyState = 1;\n    this._scheduleSend();\n  }\n\n  _onMessageReceived(data, isBinary) {\n    const message = isBinary ? data : data.toString();\n    this._globalObject.dispatchEvent(new MessageEvent('message', { data: message }));\n  }\n\n  _onConnectionClosed(code, reason) {\n    this._readyState = 3;\n    this._globalObject.dispatchEvent(new Event('close', { bubbles: true, cancelable: false }));\n  }\n\n  close(code, reason) {\n    if (this._readyState === 3) return;\n    this._readyState = 2;\n    this._ws.close(code, reason);\n  }\n\n  send(data) {\n    if (this._readyState !== 1) {\n      this._sendQueue.push(data);\n      this._scheduleSend();\n      return;\n    }\n    this._actuallySend();\n  }\n\n  _actuallySend() {\n    while (this._sendQueue.length > 0) {\n      const data = this._sendQueue.shift();\n      this._ws.send(data);\n      this.bufferedAmount -= data.length;\n    }\n    this._dequeueScheduled = false;\n  }\n\n  _scheduleSend() {\n    if (!this._dequeueScheduled) {\n      setImmediate(() => {\n        if (this._readyState === 1) {\n          this._actuallySend();\n        }\n        this._dequeueScheduled = false;\n      });\n      this._dequeueScheduled = true;\n    }\n  }\n}"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a class that handles the downloading and installation of binary packages from a specified URL, including directory management and error handling.\n\nClass Description: The Binary class is responsible for downloading a binary package from a given URL, extracting it to a specified directory, and managing the installation process. It handles directory creation, file extraction, and provides feedback on the installation status.\n\nAttributes:\n- url: [String] - The URL from which the binary package will be downloaded.\n- name: [String] - The name of the binary package (optional, defaults to -1).\n- installDirectory: [String] - The base directory where the binary will be installed (optional, defaults to a 'bin' subdirectory in the current working directory).\n- binaryDirectory: [String] - The full path to the directory where the binary will be extracted (initialized as -1, set during installation).\n- binaryPath: [String] - The full path to the binary file (initialized as -1, not used in current implementation).\n\nMethods:\n- constructor(url, data) -> [None] - Initializes the Binary instance with the download URL and optional configuration data (name and installDirectory).\n- install() -> [Promise] - Handles the complete installation process including directory preparation, downloading, extraction, and cleanup. Returns a Promise that resolves when installation is complete or rejects on error.\n  - Internal method _getInstallDirectory() is used to determine the installation directory path.",
    "Canonical_solution": "const axios = require(\"axios\");\n\nclass Binary {\n    constructor(url, data) {\n        this.url = url;\n        this.name = data.name || -1;\n        this.installDirectory = data.installDirectory || join(__dirname, \"bin\");\n        this.binaryDirectory = -1;\n        this.binaryPath = -1;\n    }\n\n    install() {\n        const dir = this._getInstallDirectory();\n        if (!existsSync(dir)) {\n            mkdirSync(dir, { recursive: true });\n        }\n\n        this.binaryDirectory = join(dir, \"bin\");\n\n        if (existsSync(this.binaryDirectory)) {\n            rimraf.sync(this.binaryDirectory);\n        }\n\n        mkdirSync(this.binaryDirectory, { recursive: true });\n\n        console.log(`Downloading release from ${this.url}`);\n\n        return axios({ url: this.url, responseType: \"stream\" })\n            .then(res => {\n                const writer = tar.x({ strip: 1, C: this.binaryDirectory });\n\n                return new Promise((resolve, reject) => {\n                    res.data.pipe(writer);\n                    let error = null;\n                    writer.on('error', err => {\n                      error = err;\n                      reject(err);\n                    });\n                    writer.on('close', () => {\n                      if (!error) {\n                        resolve(true);\n                      }\n                    });\n                })\n            })\n            .then(() => {\n                console.log(\n                    `${this.name ? this.name : \"Your package\"} has been installed!`\n                );\n            })\n            .catch(e => {\n                error(`Error fetching release: ${e.message}`);\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class Binary {\n  constructor(url, data = {}) {\n    this.url = url;\n    this.name = data.name || -1;\n    this.installDirectory = data.installDirectory || path.join(process.cwd(), 'bin');\n    this.binaryDirectory = -1;\n    this.binaryPath = -1;\n  }\n\n  async install() {\n    try {\n      await this._prepareInstallDirectory();\n      const downloadPath = await this._downloadBinary();\n      this.binaryDirectory = path.dirname(downloadPath);\n      await this._extractBinary(downloadPath);\n      await this._cleanup();\n      return true;\n    } catch (error) {\n      console.error(`Installation failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  async _prepareInstallDirectory() {\n    if (!fs.existsSync(this.installDirectory)) {\n      await fs.promises.mkdir(this.installDirectory, { recursive: true });\n    }\n  }\n\n  async _downloadBinary() {\n    const tmpDir = fs.mkdtempSync(path.join(os.tmpdir(), 'binary-'));\n    const downloadPath = path.join(tmpDir, this.name || 'binary.tar.gz');\n    const response = await fetch(this.url);\n    if (!response.ok) {\n      throw new Error(`Failed to download binary: ${response.statusText}`);\n    }\n    const file = await fs.promises.open(downloadPath, 'w');\n    await file.writeFile(await response.arrayBuffer());\n    file.close();\n    return downloadPath;\n  }\n\n  async _extractBinary(downloadPath) {\n    const extractDir = path.join(this.installDirectory, this.name || 'binary');\n    await fs.promises.mkdir(extractDir, { recursive: true });\n    await execPromise(`tar -xzf ${downloadPath} -C ${extractDir}`);\n  }\n\n  async _cleanup() {\n    if (this.binaryDirectory !== -1) {\n      await fs.promises.rm(this.binaryDirectory, { recursive: true, force: true });\n    }\n  }\n}\n\nfunction execPromise(command) {\n  return new Promise((resolve, reject) => {\n    exec(command, (error, stdout, stderr) => {\n      if (error) {\n        reject(new Error(`${error.message}\\n${stderr}`));\n        return;\n      }\n      resolve(stdout);\n    });\n  });\n}"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a function that establishes a WebSocket connection to a server, sends and receives messages in JSON format, and handles connection events including opening, closing, and errors.\n\nFunction Description: The function `testWebSocketConnection` initiates a WebSocket client connection to a specified server URL. It sends initial messages upon successful connection, listens for incoming messages, and handles connection lifecycle events. The function demonstrates a basic WebSocket interaction pattern including sending/receiving JSON data and proper connection cleanup.\n\nInput: \n- wssUrl: [String] - The WebSocket server URL (without protocol) to connect to (e.g., \"example.com:8080\")\n\nOutput: \n- None (void) - The function doesn't return any value but logs connection status and received messages to the console. All operations are performed through side effects (event handlers and WebSocket operations).",
    "Canonical_solution": "function testWebSocketConnection() {\n  var WebSocket = require('ws');\n  var echoWs = new WebSocket('wss://' + wssUrl + '/examples/echo');\n  \n  echoWs.on('open', function open() {\n    console.log('WebSocket connection established');\n    \n    echoWs.send('hello');\n    echoWs.once('message', function(data, flags) {\n      data = JSON.parse(data);\n      console.log('Received:', data);\n      \n      echoWs.send('{\"foo\": \"bar\"}');\n      echoWs.once('message', function(data, flags) {\n        data = JSON.parse(data);\n        console.log('Received:', data);\n        \n        echoWs.close();\n      });\n    });\n  });\n  \n  echoWs.on('close', function() {\n    console.log('WebSocket connection closed');\n  });\n  \n  echoWs.on('error', function(err) {\n    console.error('WebSocket error:', err);\n  });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 91,
    "wrong_result": "function testWebSocketConnection(wssUrl) {\n  const ws = new WebSocket(`wss://${wssUrl}`);\n\n  ws.onopen = () => {\n    console.log('WebSocket connection established.');\n    const initialMessage = { type: 'initial', data: 'Hello, Server!' };\n    ws.send(JSON.stringify(initialMessage));\n  };\n\n  ws.onmessage = (event) => {\n    const message = JSON.parse(event.data);\n    console.log('Received message:', message);\n  };\n\n  ws.onclose = (event) => {\n    console.log(`WebSocket connection closed. Code: ${event.code}, Reason: ${event.reason}`);\n  };\n\n  ws.onerror = (error) => {\n    console.error('WebSocket error:', error);\n  };\n}"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Implement a WebSocket client class in JavaScript using Node.js that establishes a connection to a WebSocket server, handles incoming messages, and manages connection events.\n\nClass Description: The WebSocketImpl class provides a wrapper around the Node.js 'ws' library to create and manage WebSocket connections. It handles connection establishment, message reception, error handling, and connection closure events. The class also provides methods for sending data and closing the connection.\n\nAttributes:\n- _globalObject: [Object] - The global context in which the WebSocket operates\n- _ownerDocument: [Object] - The document object associated with the WebSocket\n- _urlRecord: [Object] - Parsed URL information for the WebSocket connection\n- url: [String] - The WebSocket server URL as a string\n- _ws: [WebSocket|null] - The underlying WebSocket instance or null if not connected\n- _readyState: [Number] - Current connection state (0 = CONNECTING)\n- _requiredToFail: [Boolean] - Flag indicating if the connection should fail\n- bufferedAmount: [Number] - Amount of buffered data in bytes\n- _sendQueue: [Array] - Queue of messages waiting to be sent\n\nMethods:\n- constructor(globalObject, args, privateData) -> [void] - Initializes the WebSocket connection with the given parameters and sets up event handlers\n- _onConnectionEstablished() -> [void] - Internal method called when the WebSocket connection is successfully established\n- _onMessageReceived(data, isBinary) -> [void] - Internal method called when a message is received from the server\n- _onConnectionClosed(code, reason) -> [void] - Internal method called when the WebSocket connection is closed\n- close(code, reason) -> [void] - Closes the WebSocket connection with optional code and reason\n- send(data) -> [void] - Sends data through the WebSocket connection (supports strings and Blob objects)\n- get readyState() -> [Number] - Returns the current ready state of the WebSocket connection",
    "Canonical_solution": "const WebSocket = require(\"ws\");\n\nclass WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = idlUtils.implForWrapper(globalObject._document);\n    this._urlRecord = parseURL(args[0]);\n    this.url = serializeURL(this._urlRecord);\n    this._ws = null;\n    this._readyState = 0; // CONNECTING\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n\n    const protocols = typeof args[1] === \"string\" ? [args[1]] : (args[1] || []);\n    const nodeParsedURL = nodeURL.parse(this.url);\n\n    this._ws = new WebSocket(this.url, protocols, {\n      headers: {\n        \"user-agent\": globalObject.navigator.userAgent,\n        \"cookie\": this._ownerDocument._cookieJar.getCookieStringSync(nodeParsedURL, { http: true }),\n        \"origin\": globalObject._origin\n      },\n      rejectUnauthorized: globalObject._resourceLoader._strictSSL\n    });\n\n    this._ws.once(\"open\", () => {\n      this._onConnectionEstablished();\n    });\n    this._ws.on(\"message\", this._onMessageReceived.bind(this));\n    this._ws.once(\"close\", (...closeArgs) => {\n      this._onConnectionClosed(...closeArgs);\n    });\n    this._ws.once(\"error\", () => {\n      this._requiredToFail = true;\n    });\n  }\n\n  _onConnectionEstablished() {\n    fireAnEvent(\"open\", this);\n  }\n\n  _onMessageReceived(data, isBinary) {\n    let dataForEvent;\n    if (!isBinary) {\n      dataForEvent = data.toString();\n    } else if (this.binaryType === \"arraybuffer\") {\n      dataForEvent = copyToArrayBufferInNewRealm(data, this._globalObject);\n    } else {\n      dataForEvent = Blob.create(this._globalObject, [[data], { type: \"\" }]);\n    }\n    fireAnEvent(\"message\", this, MessageEvent, {\n      data: dataForEvent,\n      origin: serializeURLOrigin(this._urlRecord)\n    });\n  }\n\n  _onConnectionClosed(code, reason) {\n    fireAnEvent(\"close\", this, CloseEvent, {\n      wasClean: !this._requiredToFail,\n      code,\n      reason: reason.toString()\n    });\n  }\n\n  close(code = undefined, reason = undefined) {\n    if (this._ws) {\n      this._ws.close(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this._ws && this._ws.readyState === WebSocket.OPEN) {\n      if (Blob.isImpl(data)) {\n        data = data._buffer;\n      }\n      this._ws.send(data, { binary: typeof data !== \"string\" });\n    }\n  }\n\n  get readyState() {\n    return this._ws ? this._ws.readyState : this._readyState;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 91,
    "wrong_result": "class WebSocketImpl {\n  constructor(globalObject, args, privateData) {\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.ownerDocument;\n    this._urlRecord = privateData.urlRecord;\n    this.url = privateData.url;\n    this._ws = null;\n    this._readyState = 0;\n    this._requiredToFail = false;\n    this.bufferedAmount = 0;\n    this._sendQueue = [];\n\n    this._initWebSocket();\n  }\n\n  _initWebSocket() {\n    const { url } = this;\n    this._ws = new require('ws')(url);\n    this._ws.on('open', () => this._onConnectionEstablished());\n    this._ws.on('message', (data, isBinary) => this._onMessageReceived(data, isBinary));\n    this._ws.on('close', (code, reason) => this._onConnectionClosed(code, reason));\n    this._ws.on('error', (err) => {\n      console.error('WebSocket error:', err);\n    });\n  }\n\n  _onConnectionEstablished() {\n    this._readyState = 1;\n    this._sendQueue.forEach(msg => this._ws.send(msg));\n    this._sendQueue = [];\n  }\n\n  _onMessageReceived(data, isBinary) {\n    const message = isBinary ? data : data.toString();\n    this._globalObject.dispatchEvent(new MessageEvent('message', { data: message }));\n  }\n\n  _onConnectionClosed(code, reason) {\n    this._readyState = 3;\n    this._globalObject.dispatchEvent(new Event('close', { code, reason }));\n  }\n\n  close(code, reason) {\n    if (this._ws) {\n      this._ws.close(code, reason);\n    }\n  }\n\n  send(data) {\n    if (this._readyState === 1) {\n      this._ws.send(data);\n    } else {\n      this._sendQueue.push(data);\n    }\n  }\n\n  get readyState() {\n    return this._readyState;\n  }\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Create a function that sends data to a webhook URL using HTTP POST request with error handling.\n\nFunction Description: The function `sendWebhook` is an asynchronous function that takes data as input and sends it to a predefined webhook URL using an HTTP POST request. It handles potential errors during the request and logs them to the console.\n\nInput: \n- `data` [Object] - The payload/data to be sent to the webhook URL.\n\nOutput: \n- None (The function does not return any value, but it may log errors to the console if the request fails).",
    "Canonical_solution": "const axios = require('axios');\n\nconst sendWebhook = async (data) => {\n    try {\n        await axios.post(process.env.UPDATE_WEBHOOK, data);\n    } catch (err) {\n        console.log(err);\n    }\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "```javascript\nasync function sendWebhook(data) {\n  const webhookUrl = 'https://example.com/webhook'; // Replace with your webhook URL\n\n  try {\n    const response = await fetch(webhookUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n  } catch (error) {\n    console.error('Error sending webhook:', error.message);\n  }\n}\n```"
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Implement a client for interacting with Quqi.com's API to perform daily tasks, manage group operations, and track rewards.\n\nClass Description: The QuqiClient class provides methods to interact with Quqi.com's web services including task management, group operations, file uploads, and reward collection. It handles HTTP requests using Axios with proper headers and error handling.\n\nAttributes:\n- headers: [Object] - Contains HTTP headers including cookies and referer for API authentication\n- config: [Object] - Configuration object containing user credentials and settings\n\nMethods:\n- constructor(config) -> [void] - Initializes the client with configuration including authentication cookies\n- _sleep(ms) -> [Promise] - Utility method for delaying execution\n- getDailyTask() -> [Promise<Array|null>] - Retrieves list of incomplete daily tasks\n- getReward(id) -> [Promise<void>] - Claims reward for a specific task ID\n- visit(id) -> [Promise<void>] - Visits a specified group to complete visit tasks\n- getQuqiId() -> [Promise<Object|null>] - Gets group information and handles group joining if needed\n- uploadImg(id) -> [Promise<void>] - Uploads and deletes a dummy image to complete upload tasks\n- executeTasks() -> [Promise<String>] - Executes all available tasks and returns wallet information",
    "Canonical_solution": "const axios = require(\"axios\");\n\nclass QuqiClient {\n    constructor(config) {\n        this.headers = {\n            cookie: config.quqi.cookie,\n            referer: \"https://quqi.com/\"\n        };\n    }\n\n    async _sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    async getDailyTask() {\n        try {\n            let res = await axios.get(`https://exp.quqi.com/v1/dailyTask/state?_=1${Date.now()}`, {headers: this.headers});\n            if(res.data.err == 0) {\n                let list = res.data.data.filter(x => x.status != 2);\n                console.log(`\u5269\u4f59${list.length}\u4efb\u52a1\u672a\u5b8c\u6210`);\n                return list;\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        return null;\n    }\n\n    async getReward(id) {\n        try {\n            let res = await axios.get(`https://exp.quqi.com/v1/dailyTask/sendAward/${id}`, {headers: this.headers});\n            console.log(\"\u9886\u53d6\u5956\u52b1\uff1a\" + res.data.msg);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async visit(id) {\n        try {\n            this.headers[\"User-Agent\"] = \"Mozilla/5.0 (Linux; Android 11; Redmi K30) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36\";\n            let res = await axios.post(`https://quqi.com/api/dir/ls?quqi_id=${id}`, `quqi_id=${id}&tree_id=1&node_id=0`, {headers: this.headers});\n            let res1 = await axios.post(`https://quqi.com/auth/updateVisit?quqi_id=${id}`, `quqi_id=${id}`, {headers: this.headers});\n            console.log(\"\u6d4f\u89c8\u591a\u4eba\u7fa4\u7ec4\uff1a\" + res1.data.msg);\n            await this._sleep(1000);\n            await this.getReward(14);\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async getQuqiId() {\n        try {\n            let res = await axios.get(\"https://group.quqi.com/v1/group/list\", {headers: this.headers});\n            if (res.data.msg == \"success\") {\n                let gplist = res.data.data.filter(x => x.type == 14);\n                let quqid = gplist.length == 0 ? res.data.data[0].quqi_id : gplist[0].quqi_id;\n                let gtype = gplist.length == 0 ? 1 : 2;\n                if (gtype == 1) {\n                    console.log(\"\ud83c\ude1a\ufe0f\u591a\u4eba\u7fa4\u7ec4,\u8bf7\u81ea\u884c\u521b\u5efa\u4e00\u4e2a\u591a\u4eba\u7fa4\u7ec4,\u6216\u8005\u7533\u8bf7\u52a0\u5165https://quqi.avyeld.com/join/company/team.html?jointarget=ed521eef-7ed1-486f-a903-2457ebe5704f\");\n                    let sqres = await axios.post(\"https://group.quqi.com/v1/application\", \"credential=ed521eef-7ed1-486f-a903-2457ebe5704f\", {headers: this.headers});\n                    console.log(\"\u7533\u8bf7\u52a0\u5165\u591a\u4eba\u7fa4\u7ec4\uff1a\" + sqres.data.msg);\n                }\n                return {\n                    qid: quqid,\n                    gtype: gtype\n                };\n            }\n        } catch (err) {\n            console.log(err);\n        }\n        return null;\n    }\n\n    async uploadImg(id) {\n        try {\n            let name = `\u6bcf\u65e5\u7b7e\u5230${Date.now()}`;\n            this.headers[\"User-Agent\"] = \"Mozilla/5.0 (Linux; Android 11; Redmi K30) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.120 Mobile Safari/537.36\";\n            let res = await axios.post(`https://quqi.com/api/upload/v1/file/init?quqi_id=${id}`, `file_name=${name}.jpg&is_slice=false&md5=507cf982c5db90bc35f9c6c8179c292f&parent_id=0&quqi_id=${id}&sha=4b4afc24113d86d0afd9be21b6841d9c627cdabf01317e3e760308b05f8bdd81&sign=617db783e0ba01343338ee9887dfdb18&size=331665&tree_id=1`, {headers: this.headers});\n            if (res.data.msg == \"ok\") {\n                console.log(`\u4e0a\u4f20\u56fe\u7247 ${name} \u6210\u529f`);\n                let nid = res.data.data.node_id;\n                if (nid) await axios.post(`https://quqi.com/api/node/batchDel?quqi_id=${id}`, `quqi_id=${id}&tree_id=1&node_ids=${nid}`, {headers: this.headers});\n                await this._sleep(1000);\n                await this.getReward(15);\n            } else {\n                console.log(\"\u4e0a\u4f20\u5931\u8d25\uff1a\" + res.data.msg);\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    async executeTasks() {\n        let quqinfo = \"\";\n        let dailyTaskList = await this.getDailyTask();\n        let qgp = await this.getQuqiId();\n        \n        if (dailyTaskList) {\n            for (let task of dailyTaskList) {\n                console.log(task.task_decreption);\n                if (task.status == 1) {\n                    await this.getReward(task.task_type);\n                } else if (task.task_type == 14 && task.status == 0 && qgp.gtype == 2) {\n                    await this.visit(qgp.qid);\n                } else if (task.task_type == 15 && task.status == 0) {\n                    await this.uploadImg(qgp.qid);\n                }\n            }\n        }\n        \n        let ires = await axios.get(\"https://api.quqi.com/vipWallet/v1/vipAndWallet\", {headers: this.headers});\n        if (ires.data.msg == \"success\") {\n            quqinfo = `\u66f2\u5947\u997c\uff1a${ires.data.data.wallet_info.cookie}  \u66f2\u5947\u8c46\uff1a${ires.data.data.wallet_info.bean}`;\n        } else {\n            quqinfo = ires.data.msg;\n        }\n        console.log(quqinfo);\n        return \"\u3010\u66f2\u5947\u7f51\u76d8\u3011\uff1a\" + quqinfo;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class QuqiClient {\n  constructor(config) {\n    this.headers = {\n      cookie: config.cookie,\n      referer: 'https://www.quqi.com/',\n      'content-type': 'application/json'\n    };\n    this.config = config;\n  }\n\n  async _sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  async getDailyTask() {\n    try {\n      const res = await axios.get('https://www.quqi.com/api/task/daily', { headers: this.headers });\n      return res.data.tasks || null;\n    } catch (error) {\n      console.error('Failed to get daily tasks:', error.message);\n      return null;\n    }\n  }\n\n  async getReward(id) {\n    try {\n      await axios.post(`https://www.quqi.com/api/task/reward/${id}`, {}, { headers: this.headers });\n      console.log(`Reward claimed for task ID: ${id}`);\n    } catch (error) {\n      console.error(`Failed to claim reward for task ID ${id}:`, error.message);\n    }\n  }\n\n  async visit(id) {\n    try {\n      await axios.post(`https://www.quqi.com/api/group/visit/${id}`, {}, { headers: this.headers });\n      console.log(`Visited group with ID: ${id}`);\n    } catch (error) {\n      console.error(`Failed to visit group with ID ${id}:`, error.message);\n    }\n  }\n\n  async getQuqiId() {\n    try {\n      const res = await axios.get('https://www.quqi.com/api/group/info', { headers: this.headers });\n      if (res.data && res.data.group && !res.data.group.joined) {\n        await axios.post('https://www.quqi.com/api/group/join', {}, { headers: this.headers });\n        console.log('Joined the group successfully.');\n      }\n      return res.data || null;\n    } catch (error) {\n      console.error('Failed to get group information:', error.message);\n      return null;\n    }\n  }\n\n  async uploadImg(id) {\n    try {\n      const formData = new FormData();\n      formData.append('file', new Blob(['dummy content'], { type: 'image/png' }), 'dummy.png');\n      await axios.post(`https://www.quqi.com/api/task/upload/${id}`, formData, { headers: this.headers });\n      console.log(`Image uploaded for task ID: ${id}`);\n    } catch (error) {\n      console.error(`Failed to upload image for task ID ${id}:`, error.message);\n    }\n  }\n\n  async executeTasks() {\n    try {\n      const tasks = await this.getDailyTask();\n      if (!tasks || tasks.length === 0) {\n        console.log('No daily tasks available.');\n        return 'No tasks found.';\n      }\n\n      for (const task of tasks) {\n        if (task.type === 'reward') {\n          await this.getReward(task.id);\n        } else if (task.type === 'visit') {\n          await this.visit(task.groupId);\n        } else if (task.type === 'upload') {\n          await this.uploadImg(task.id);\n        }\n        await this._sleep(1000);\n      }\n\n      const walletInfo = await this.getQuqiId();\n      return JSON.stringify(walletInfo) || 'Wallet information not available.';\n    } catch (error) {\n      console.error('Error executing tasks:', error.message);\n      return 'Failed to execute tasks.';\n    }\n  }\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a function that interacts with Microsoft's Speech API to convert SSML (Speech Synthesis Markup Language) text into speech audio using HTTP requests.\n\nFunction Description: The function `speechApi` sends a POST request to Microsoft's Speech API endpoint with SSML text as input and receives audio data in MP3 format as response. It handles the HTTP communication including request configuration, headers, payload, and error handling.\n\nInput: \n- ssml: [String] - The SSML formatted text to be converted to speech\n\nOutput: \n- [Promise] - Resolves with the audio data in arraybuffer format if successful, rejects with error if the request fails",
    "Canonical_solution": "const axios = require(\"axios\");\nconst { v4: uuidv4 } = require(\"uuid\");\n\nfunction speechApi(ssml) {\n    var data = JSON.stringify({\n        ssml,\n        ttsAudioFormat: \"audio-24khz-160kbitrate-mono-mp3\",\n        offsetInPlainText: 0,\n        properties: {\n            SpeakTriggerSource: \"AccTuningPagePlayButton\",\n        },\n    });\n\n    var config = {\n        method: \"post\",\n        url: \"https://southeastasia.api.speech.microsoft.com/accfreetrial/texttospeech/acc/v3.0-beta1/vcg/speak\",\n        responseType: \"arraybuffer\",\n        headers: {\n            authority: \"southeastasia.api.speech.microsoft.com\",\n            accept: \"*/*\",\n            \"accept-language\": \"zh-CN,zh;q=0.9\",\n            customvoiceconnectionid: uuidv4(),\n            origin: \"https://speech.microsoft.com\",\n            \"sec-ch-ua\": '\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\"',\n            \"sec-ch-ua-mobile\": \"?0\",\n            \"sec-ch-ua-platform\": '\"Windows\"',\n            \"sec-fetch-dest\": \"empty\",\n            \"sec-fetch-mode\": \"cors\",\n            \"sec-fetch-site\": \"same-site\",\n            \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36\",\n            \"content-type\": \"application/json\",\n        },\n        data: data,\n    };\n\n    return new Promise((resolve, reject) => {\n        axios(config)\n            .then(function(response) {\n                resolve(response.data);\n            })\n            .catch(function(error) {\n                console.error(error);\n                reject(error);\n            });\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "function speechApi(ssml) {\n    return fetch('https://westus.tts.speech.microsoft.com/cognitiveservices/v1', {\n        method: 'POST',\n        headers: {\n            'Ocp-Apim-Subscription-Key': 'YOUR_SUBSCRIPTION_KEY',\n            'Content-Type': 'application/ssml+xml',\n            'X-Microsoft-OutputFormat': 'audio-16khz-128kbitrate-mono-mp3'\n        },\n        body: ssml\n    })\n    .then(response => {\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.arrayBuffer();\n    })\n    .catch(error => {\n        console.error('Error in speechApi:', error);\n        throw error;\n    });\n}"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a class that serves as an HTTP client for interacting with a build service API, handling different types of package-related operations with proper error handling.\n\nClass Description: The BuildService class provides methods to fetch package build statistics, exports, and export sizes from a remote build service. It uses Axios for HTTP requests and implements centralized error handling.\n\nAttributes:\n- operations: [Array] - A predefined list of available API operations, each specifying the operation type, endpoint, and corresponding method name\n\nMethods:\n- _makeHttpRequest: [Name](operation: Object, packageString: String) -> Promise<Object> - Makes an HTTP GET request to the build service with the specified operation and package string, handles the response and errors\n- _handleError: [Name](error: Error, operationType: String) -> Throws CustomError - Centralized error handling that processes different types of errors (response errors, request errors, and other errors) and throws appropriate custom errors\n- getPackageBuildStats: [Name](packageString: String) -> Promise<Object> - Retrieves build statistics for the specified package\n- getPackageExports: [Name](packageString: String) -> Promise<Object> - Retrieves all exports for the specified package\n- getPackageExportSizes: [Name](packageString: String) -> Promise<Object> - Retrieves size information for all exports of the specified package",
    "Canonical_solution": "const axios = require('axios');\nconst CustomError = require('../CustomError');\n\nclass BuildService {\n  constructor() {\n    this.operations = [\n      {\n        type: 'PACKAGE_BUILD_STATS',\n        endpoint: '/size',\n        methodName: 'getPackageStats',\n      },\n      {\n        type: 'PACKAGE_EXPORTS',\n        endpoint: '/exports',\n        methodName: 'getAllPackageExports',\n      },\n      {\n        type: 'PACKAGE_EXPORTS_SIZES',\n        endpoint: '/exports-sizes',\n        methodName: 'getPackageExportSizes',\n      },\n    ];\n  }\n\n  async _makeHttpRequest(operation, packageString) {\n    try {\n      const response = await axios.get(\n        `${process.env.BUILD_SERVICE_ENDPOINT}${operation.endpoint}?p=${encodeURIComponent(packageString)}`\n      );\n      return response.data;\n    } catch (error) {\n      this._handleError(error, operation.type);\n    }\n  }\n\n  _handleError(error, operationType) {\n    if (error.response) {\n      const contents = error.response.data;\n      throw new CustomError(\n        contents.name || 'BuildError',\n        contents.originalError,\n        contents.extra\n      );\n    } else if (error.request) {\n      throw new CustomError('BuildError', {\n        operation: operationType,\n        reason: 'BUILD_SERVICE_UNREACHABLE',\n        url: error.request._currentUrl,\n      });\n    } else {\n      throw new CustomError('BuildError', error.message, {\n        operation: operationType,\n      });\n    }\n  }\n\n  async getPackageBuildStats(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_BUILD_STATS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExports(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExportSizes(packageString) {\n    const operation = this.operations.find(op => op.type === 'PACKAGE_EXPORTS_SIZES');\n    return await this._makeHttpRequest(operation, packageString);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "import axios from 'axios';\nimport { AxiosError } from 'axios';\n\nclass CustomError extends Error {\n  constructor(message, details) {\n    super(message);\n    this.details = details;\n  }\n}\n\nclass BuildService {\n  constructor(baseURL) {\n    this.baseURL = baseURL;\n    this.operations = [\n      { type: 'build_stats', endpoint: '/api/v1/packages/build_stats', method: 'getPackageBuildStats' },\n      { type: 'exports', endpoint: '/api/v1/packages/exports', method: 'getPackageExports' },\n      { type: 'export_sizes', endpoint: '/api/v1/packages/export_sizes', method: 'getPackageExportSizes' }\n    ];\n  }\n\n  async _makeHttpRequest(operation, packageString) {\n    try {\n      const response = await axios.get(`${this.baseURL}${operation.endpoint}`, {\n        params: { package: packageString }\n      });\n      return response.data;\n    } catch (error) {\n      this._handleError(error, operation.type);\n    }\n  }\n\n  _handleError(error, operationType) {\n    if (error.response) {\n      throw new CustomError(`HTTP error for ${operationType} operation: ${error.response.status} - ${error.response.statusText}`, error.response.data);\n    } else if (error.request) {\n      throw new CustomError(`No response received for ${operationType} operation`, error.request);\n    } else {\n      throw new CustomError(`Error setting up request for ${operationType} operation`, error.message);\n    }\n  }\n\n  async getPackageBuildStats(packageString) {\n    const operation = this.operations.find(op => op.method === 'getPackageBuildStats');\n    return this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExports(packageString) {\n    const operation = this.operations.find(op => op.method === 'getPackageExports');\n    return this._makeHttpRequest(operation, packageString);\n  }\n\n  async getPackageExportSizes(packageString) {\n    const operation = this.operations.find(op => op.method === 'getPackageExportSizes');\n    return this._makeHttpRequest(operation, packageString);\n  }\n}"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Write a function that retrieves TV channel data from a specified URL, processes the data to extract relevant channel information, and returns it in a structured format.\n\nFunction Description: The function `getChannels` asynchronously fetches TV channel data from a remote API endpoint using HTTP GET request. It processes the response to extract channel details such as language, site ID, and name, then returns them as an array of objects. Error handling is included to log any issues during the request.\n\nInput: None (The function does not take any input parameters; it uses a hardcoded URL for the API endpoint.)\n\nOutput: An array of objects, where each object represents a TV channel with the following properties:\n- `lang`: [String] - The language of the channel (e.g., 'lv').\n- `site_id`: [String] - The unique identifier/slug for the channel.\n- `name`: [String] - The display name of the channel.\n\nIf an error occurs during the HTTP request, the error will be logged to the console, and the function may return an empty array or undefined depending on the error handling flow.",
    "Canonical_solution": "async function getChannels() {\n    const axios = require('axios');\n    const groups = await axios\n        .get('https://www.tv.lv/data/channels/lvall')\n        .then(r => r.data)\n        .catch(console.log);\n\n    let channels = [];\n\n    groups.forEach(group => {\n        group.channels.forEach(item => {\n            channels.push({\n                lang: 'lv',\n                site_id: item.slug,\n                name: item.name\n            });\n        });\n    });\n\n    return channels;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function getChannels() {\n  try {\n    const response = await fetch('https://api.example.com/channels');\n    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n    const data = await response.json();\n    return data.map(channel => ({\n      lang: channel.lang,\n      site_id: channel.site_id,\n      name: channel.name\n    }));\n  } catch (error) {\n    console.error('Error fetching TV channels:', error);\n    return [];\n  }\n}"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Implement a WebSocket server class for peer-to-peer communication that handles connections, messages, and room management.\n\nClass Description: The SnapdropServer class represents a WebSocket server that facilitates peer-to-peer communication. It manages WebSocket connections, handles incoming messages, and maintains rooms for peer grouping. The server also handles connection headers and keeps connections alive.\n\nAttributes:\n- _wss: [WebSocket.Server] - The WebSocket server instance\n- _rooms: [Object] - A dictionary tracking peers grouped by their IP addresses (rooms)\n\nMethods:\n- constructor(port: number) -> void - Initializes the WebSocket server on the specified port and sets up event handlers\n- _onConnection(peer: Peer) -> void - Handles new WebSocket connections, sets up message handlers, and joins the peer to a room\n- _onHeaders(headers: Array, response: Object) -> void - Processes HTTP headers during WebSocket handshake, setting cookies if needed\n- _onMessage(sender: Peer, message: string) -> void - Handles incoming messages from peers, routing them to appropriate recipients\n- _send(peer: Peer, message: Object) -> void - Sends a message to a specific peer over WebSocket connection\n- _joinRoom(peer: Peer) -> void - Adds a peer to their respective room (Not shown in reference but implied)\n- _leaveRoom(peer: Peer) -> void - Removes a peer from their room (Not shown in reference but implied)\n- _keepAlive(peer: Peer) -> void - Maintains connection with periodic pings (Not shown in reference but implied)",
    "Canonical_solution": "const WebSocket = require('ws');\n\nclass SnapdropServer {\n    constructor(port) {\n        this._wss = new WebSocket.Server({ port: port });\n        this._wss.on('connection', (socket, request) => this._onConnection(new Peer(socket, request)));\n        this._wss.on('headers', (headers, response) => this._onHeaders(headers, response));\n\n        this._rooms = {};\n    }\n\n    _onConnection(peer) {\n        this._joinRoom(peer);\n        peer.socket.on('message', message => this._onMessage(peer, message));\n        peer.socket.on('error', console.error);\n        this._keepAlive(peer);\n\n        this._send(peer, {\n            type: 'display-name',\n            message: {\n                displayName: peer.name.displayName,\n                deviceName: peer.name.deviceName\n            }\n        });\n    }\n\n    _onHeaders(headers, response) {\n        if (response.headers.cookie && response.headers.cookie.indexOf('peerid=') > -1) return;\n        response.peerId = Peer.uuid();\n        headers.push('Set-Cookie: peerid=' + response.peerId + \"; SameSite=Strict; Secure\");\n    }\n\n    _onMessage(sender, message) {\n        try {\n            message = JSON.parse(message);\n        } catch (e) {\n            return;\n        }\n\n        switch (message.type) {\n            case 'disconnect':\n                this._leaveRoom(sender);\n                break;\n            case 'pong':\n                sender.lastBeat = Date.now();\n                break;\n        }\n\n        if (message.to && this._rooms[sender.ip]) {\n            const recipientId = message.to;\n            const recipient = this._rooms[sender.ip][recipientId];\n            delete message.to;\n            message.sender = sender.id;\n            this._send(recipient, message);\n            return;\n        }\n    }\n\n    _send(peer, message) {\n        if (!peer) return;\n        if (this._wss.readyState !== this._wss.OPEN) return;\n        message = JSON.stringify(message);\n        peer.socket.send(message, error => '');\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class SnapdropServer {\n  constructor(port) {\n    this._wss = new WebSocket.Server({ port });\n    this._rooms = {};\n    this._setupEventHandlers();\n  }\n\n  _setupEventHandlers() {\n    this._wss.on('connection', (socket) => {\n      const peer = new Peer(socket);\n      this._onConnection(peer);\n    });\n  }\n\n  _onConnection(peer) {\n    peer.socket.on('message', (message) => {\n      this._onMessage(peer, message.toString());\n    });\n\n    peer.socket.on('close', () => {\n      this._leaveRoom(peer);\n    });\n\n    this._joinRoom(peer);\n  }\n\n  _onHeaders(headers, response) {\n    // Set cookies or handle headers as needed\n  }\n\n  _onMessage(sender, message) {\n    try {\n      const data = JSON.parse(message);\n      if (data.type === 'room') {\n        const room = this._rooms[data.roomId];\n        if (room) {\n          room.forEach((peer) => {\n            if (peer !== sender) {\n              this._send(peer, data);\n            }\n          });\n        }\n      } else {\n        this._send(sender, { type: 'error', message: 'Unknown message type' });\n      }\n    } catch (e) {\n      this._send(sender, { type: 'error', message: 'Invalid message format' });\n    }\n  }\n\n  _send(peer, message) {\n    if (peer.socket.readyState === WebSocket.OPEN) {\n      peer.socket.send(JSON.stringify(message));\n    }\n  }\n\n  _joinRoom(peer) {\n    const roomId = this._generateRoomId(peer);\n    if (!this._rooms[roomId]) {\n      this._rooms[roomId] = [];\n    }\n    this._rooms[roomId].push(peer);\n  }\n\n  _leaveRoom(peer) {\n    for (const roomId in this._rooms) {\n      const index = this._rooms[roomId].indexOf(peer);\n      if (index !== -1) {\n        this._rooms[roomId].splice(index, 1);\n        if (this._rooms[roomId].length === 0) {\n          delete this._rooms[roomId];\n        }\n        break;\n      }\n    }\n  }\n\n  _keepAlive(peer) {\n    setInterval(() => {\n      if (peer.socket.readyState === WebSocket.OPEN) {\n        peer.socket.send(JSON.stringify({ type: 'ping' }));\n      }\n    }, 30000);\n  }\n\n  _generateRoomId(peer) {\n    return peer.ipAddress || 'default-room';\n  }\n}\n\nclass Peer {\n  constructor(socket) {\n    this.socket = socket;\n    this.ipAddress = socket._socket.remoteAddress;\n  }\n}"
  },
  {
    "Task_id": 261,
    "Instruction": "Task Description: Create a WebSocket server class in Node.js that handles WebSocket connections, manages events, and provides methods for server lifecycle management.\n\nClass Description: The WebSocketServer class encapsulates the functionality to create and manage a WebSocket server instance. It handles server creation, connection events, and provides cleanup methods. The class uses promises for asynchronous server initialization and UUID generation for client identification.\n\nAttributes:\n- options: [Object] - Configuration options for the WebSocket server, including the port number.\n- wss: [WebSocket.Server|null] - The WebSocket server instance, initialized as null until created.\n\nMethods:\n- createServer(): [Promise<WebSocket.Server>] - Creates and starts the WebSocket server instance. Returns a promise that resolves with the server instance when listening or rejects on error.\n- onConnection(callback: [Function]): [void] - Sets up a connection event handler. The callback receives the WebSocket connection object and a generated UUID for the client.\n- close(): [void] - Closes the WebSocket server instance.",
    "Canonical_solution": "var WebSocket = require('ws');\nvar EventEmitter = require('eventemitter3');\nvar uuid = require('uuid');\n\nclass WebSocketServer {\n  constructor(options) {\n    this.options = options;\n    this.wss = null;\n  }\n\n  createServer() {\n    this.wss = new WebSocket.Server({\n      port: this.options.publicPort,\n      perMessageDeflate: false\n    });\n\n    var listeningListener, errorListener;\n    return new Promise((resolve, reject) => {\n      listeningListener = () => resolve(this.wss);\n      errorListener = (err) => reject(err);\n\n      this.wss.on('listening', listeningListener);\n      this.wss.on('error', errorListener);\n    })\n    .finally(() => {\n      this.wss.removeListener('listening', listeningListener);\n      this.wss.removeListener('error', errorListener);\n    });\n  }\n\n  onConnection(callback) {\n    this.wss.on('connection', (ws) => {\n      var id = uuid.v4();\n      callback(ws, id);\n    });\n  }\n\n  close() {\n    this.wss.close();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class WebSocketServer {\n  constructor(options) {\n    this.options = options;\n    this.wss = null;\n  }\n\n  async createServer() {\n    return new Promise((resolve, reject) => {\n      const { port } = this.options;\n      const wss = new WebSocket.Server({ port });\n\n      wss.on('listening', () => {\n        this.wss = wss;\n        resolve(wss);\n      });\n\n      wss.on('error', (err) => {\n        reject(err);\n      });\n    });\n  }\n\n  onConnection(callback) {\n    if (!this.wss) {\n      throw new Error('WebSocket server not initialized');\n    }\n\n    this.wss.on('connection', (ws) => {\n      const uuid = this.generateUUID();\n      callback(ws, uuid);\n    });\n  }\n\n  generateUUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === 'x' ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  close() {\n    if (this.wss) {\n      this.wss.close();\n      this.wss = null;\n    }\n  }\n}"
  },
  {
    "Task_id": 263,
    "Instruction": "Task Description: Implement a WebSocket server class in Node.js that can handle client connections, messages, errors, and disconnections.\n\nClass Description: The WebSocketServer class creates and manages a WebSocket server instance, setting up event handlers for various WebSocket events. It provides methods to handle incoming messages, connection closures, and errors.\n\nAttributes:\n- wss: [WebSocket.Server] - The WebSocket server instance created with the specified port.\n\nMethods:\n- constructor(port: number) -> void - Initializes the WebSocket server on the specified port and sets up event handlers.\n- setupEventHandlers() -> void - Configures event listeners for connection, message, close, and error events.\n- handleMessage(ws: WebSocket, message: string) -> void - Placeholder for message handling logic (to be implemented by the user).\n- handleClose(ws: WebSocket, code: number, reason: string) -> void - Placeholder for connection close handling logic (to be implemented by the user).\n- handleError(ws: WebSocket, error: Error) -> void - Placeholder for error handling logic (to be implemented by the user).",
    "Canonical_solution": "const WebSocket = require('ws');\n\nclass WebSocketServer {\n  constructor(port) {\n    this.wss = new WebSocket.Server({ port: port });\n    this.setupEventHandlers();\n  }\n\n  setupEventHandlers() {\n    this.wss.on('connection', (ws) => {\n      ws.on('message', (message) => {\n        this.handleMessage(ws, message);\n      });\n\n      ws.on('close', (code, reason) => {\n        this.handleClose(ws, code, reason);\n      });\n\n      ws.on('error', (error) => {\n        this.handleError(ws, error);\n      });\n    });\n  }\n\n  handleMessage(ws, message) {\n    // Message handling logic would be implemented here\n  }\n\n  handleClose(ws, code, reason) {\n    // Connection close handling logic would be implemented here\n  }\n\n  handleError(ws, error) {\n    // Error handling logic would be implemented here\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class WebSocketServer {\n  constructor(port) {\n    this.wss = new WebSocket.Server({ port });\n    this.setupEventHandlers();\n  }\n\n  setupEventHandlers() {\n    this.wss.on('connection', (ws) => {\n      console.log('Client connected');\n      ws.on('message', (message) => {\n        this.handleMessage(ws, message.toString());\n      });\n      ws.on('close', (code, reason) => {\n        this.handleClose(ws, code, reason);\n      });\n      ws.on('error', (error) => {\n        this.handleError(ws, error);\n      });\n    });\n  }\n\n  handleMessage(ws, message) {\n    // Placeholder for message handling logic\n  }\n\n  handleClose(ws, code, reason) {\n    // Placeholder for connection close handling logic\n  }\n\n  handleError(ws, error) {\n    // Placeholder for error handling logic\n  }\n}"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Create a WebSocket server class in Node.js that handles incoming connections, manages sessions, and processes messages with customizable handlers.\n\nClass Description: The XVIZServer class is a WebSocket server implementation that manages WebSocket connections, delegates session handling to provided handlers, and provides logging capabilities. It wraps the 'ws' library functionality with additional session management features.\n\nAttributes:\n- _server: [WebSocket.Server] - The underlying WebSocket server instance\n- handlers: [Array] - Array of handler objects responsible for managing sessions\n- options: [Object] - Configuration options for the server, merged with defaults\n\nMethods:\n- constructor(handlers, options, callback) -> [XVIZServer] - Initializes the WebSocket server with message handlers, options, and an optional callback. Throws an error if no handlers are provided.\n- get server() -> [WebSocket.Server] - Getter for the underlying WebSocket server instance\n- close(cb) -> [void] - Closes the WebSocket server, accepting an optional callback\n- handleSession(socket, request) -> [Promise<void>] - Handles new WebSocket connections, delegates to handlers for session creation, and closes the connection if no handler accepts it\n- log(...msg) -> [void] - Logs messages using the configured logger if available",
    "Canonical_solution": "const WebSocket = require('ws');\n\nexport class XVIZServer {\n  constructor(handlers, options, callback) {\n    if (!handlers) {\n      throw new Error('Must specify a handler for messages');\n    }\n\n    this.handlers = handlers;\n    this.options = Object.assign(DEFAULT_OPTIONS, options);\n    this._server = new WebSocket.Server(this.options, callback);\n\n    this.server.on('connection', (socket, request) => this.handleSession(socket, request));\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n\n  async handleSession(socket, request) {\n    this.log(`[> Connection] created: ${request.url}`);\n    const req = getRequestData(request.url);\n\n    for (const handler of this.handlers) {\n      const session = await handler.newSession(socket, req);\n      if (session) {\n        session.onConnect();\n        return;\n      }\n    }\n\n    socket.close();\n    this.log('[> Connection] closed due to no handler found');\n  }\n\n  log(...msg) {\n    const {logger} = this.options;\n    if (logger && logger.log) {\n      logger.log(...msg);\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class XVIZServer {\n  constructor(handlers, options, callback) {\n    if (!handlers || handlers.length === 0) {\n      throw new Error(\"At least one handler must be provided\");\n    }\n\n    this.handlers = handlers;\n    this.options = {\n      port: 8080,\n      host: \"localhost\",\n      ...options\n    };\n\n    this._server = new WebSocket.Server({\n      port: this.options.port,\n      host: this.options.host\n    });\n\n    this._server.on(\"connection\", (socket) => {\n      this.handleSession(socket, {});\n    });\n\n    if (callback) {\n      callback();\n    }\n  }\n\n  get server() {\n    return this._server;\n  }\n\n  close(cb) {\n    this._server.close(cb);\n  }\n\n  async handleSession(socket, request) {\n    for (const handler of this.handlers) {\n      if (await handler.createSession(socket, request)) {\n        socket.on(\"message\", (message) => {\n          handler.handleMessage(socket, message);\n        });\n\n        socket.on(\"close\", () => {\n          handler.destroySession(socket);\n        });\n\n        return;\n      }\n    }\n\n    socket.close();\n  }\n\n  log(...msg) {\n    if (this.options.logger && typeof this.options.logger.log === \"function\") {\n      this.options.logger.log(...msg);\n    }\n  }\n}"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Create a WebSocket server class in Node.js that handles client connections, message processing, and subscription management for real-time communication.\n\nClass Description: The AphlictClientServer class implements a WebSocket server that manages client connections, processes incoming messages (including subscriptions, replays, and pings), and maintains listener lists for different instances. It's built on top of Node.js's HTTP server and ws WebSocket library.\n\nAttributes:\n- _server: [Object] - The underlying HTTP server instance\n- _lists: [Object] - Dictionary storing listener lists for different instances\n- _adminServers: [Array] - Array containing admin server references\n\nMethods:\n- constructor(server) -> [void] - Initializes the server instance and sets up request handling\n- _onrequest(request, response) -> [void] - Handles HTTP requests (returns 501 as this is a WebSocket server)\n- _parseInstanceFromPath(path) -> [String] - Extracts instance name from URL path\n- listen() -> [void] - Starts the WebSocket server and sets up connection handlers\n- getListenerList(instance) -> [Object] - Returns the listener list for a given instance (implied by usage)\n- log(message) -> [void] - Logs messages (implied by usage)\n- trace(message) -> [void] - Logs trace-level messages (implied by usage)\n- getHistory(min_age) -> [Array] - Returns historical messages (implied by usage in replay handler)\n\nThe class handles WebSocket connections with the following behaviors:\n1. Parses instance names from connection URLs\n2. Manages listener subscriptions/unsubscriptions\n3. Handles message replay requests\n4. Processes ping/pong messages\n5. Logs connection/disconnection events\n6. Maintains separate listener lists for different instances",
    "Canonical_solution": "var url = require('url');\nvar util = require('util');\nvar WebSocket = require('ws');\n\nclass AphlictClientServer {\n  constructor(server) {\n    server.on('request', this._onrequest.bind(this));\n    this._server = server;\n    this._lists = {};\n    this._adminServers = [];\n  }\n\n  _onrequest(request, response) {\n    response.writeHead(501);\n    response.end('HTTP/501 Use Websockets\\n');\n  }\n\n  _parseInstanceFromPath(path) {\n    if (path.indexOf('~') === -1) {\n      return 'default';\n    }\n\n    var instance = path.split('~')[1];\n    instance = instance.replace(/\\//g, '');\n    if (!instance.length) {\n      return 'default';\n    }\n\n    return instance;\n  }\n\n  listen() {\n    var self = this;\n    var server = this._server.listen.apply(this._server, arguments);\n    var wss = new WebSocket.Server({server: server});\n\n    wss.on('connection', function(ws, request) {\n      if ('upgradeReq' in ws) {\n        request = ws.upgradeReq;\n      }\n\n      var path = url.parse(request.url).pathname;\n      var instance = self._parseInstanceFromPath(path);\n\n      var listener = self.getListenerList(instance).addListener(ws);\n\n      function msg(argv) {\n        return util.format('<%s>', listener.getDescription()) +\n          ' ' +\n          util.format.apply(null, argv);\n      }\n\n      function log() {\n        self.log(msg(arguments));\n      }\n\n      function trace() {\n        self.trace(msg(arguments));\n      }\n\n      trace('Connected from %s.', ws._socket.remoteAddress);\n\n      ws.on('message', function(data) {\n        trace('Received message: %s', data);\n\n        var message;\n        try {\n          message = JSON.parse(data);\n        } catch (err) {\n          log('Message is invalid: %s', err.message);\n          return;\n        }\n\n        switch (message.command) {\n          case 'subscribe':\n            trace(\n              'Subscribed to: %s',\n              JSON.stringify(message.data));\n            listener.subscribe(message.data);\n            break;\n\n          case 'unsubscribe':\n            trace(\n              'Unsubscribed from: %s',\n              JSON.stringify(message.data));\n            listener.unsubscribe(message.data);\n            break;\n\n          case 'replay':\n            var age = message.data.age || 60000;\n            var min_age = (new Date().getTime() - age);\n\n            var old_messages = self.getHistory(min_age);\n            for (var ii = 0; ii < old_messages.length; ii++) {\n              var old_message = old_messages[ii];\n\n              if (!listener.isSubscribedToAny(old_message.subscribers)) {\n                continue;\n              }\n\n              try {\n                listener.writeMessage(old_message);\n              } catch (error) {\n                break;\n              }\n            }\n            break;\n\n          case 'ping':\n            var pong = {\n              type: 'pong'\n            };\n\n            try {\n              listener.writeMessage(pong);\n            } catch (error) {\n              // Ignore any issues here, we'll clean up elsewhere.\n            }\n            break;\n\n          default:\n            log(\n              'Unrecognized command \"%s\".',\n              message.command || '<undefined>');\n        }\n      });\n\n      ws.on('close', function() {\n        self.getListenerList(instance).removeListener(listener);\n        trace('Disconnected.');\n      });\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 90,
    "wrong_result": "class AphlictClientServer {\n  constructor(server) {\n    this._server = server;\n    this._lists = {};\n    this._adminServers = [];\n    this._wsServer = null;\n  }\n\n  _onrequest(request, response) {\n    response.writeHead(501);\n    response.end();\n  }\n\n  _parseInstanceFromPath(path) {\n    const parts = path.split('/');\n    return parts.length > 1 ? parts[1] : null;\n  }\n\n  listen() {\n    this._wsServer = new (require('ws'))(this._server);\n    this._wsServer.on('connection', (socket) => {\n      const instance = this._parseInstanceFromPath(socket.upgradeReq.url);\n      if (!instance) {\n        socket.close();\n        return;\n      }\n\n      if (!this._lists[instance]) {\n        this._lists[instance] = [];\n      }\n\n      socket.on('message', (message) => {\n        try {\n          const data = JSON.parse(message.toString());\n          if (data.type === 'subscribe') {\n            this._lists[instance].push(socket);\n          } else if (data.type === 'unsubscribe') {\n            this._lists[instance] = this._lists[instance].filter(s => s !== socket);\n          } else if (data.type === 'replay') {\n            const history = this.getHistory(data.min_age);\n            socket.send(JSON.stringify({ type: 'replay', messages: history }));\n          } else if (data.type === 'ping') {\n            socket.send(JSON.stringify({ type: 'pong' }));\n          }\n        } catch (e) {\n          this.log(`Error parsing message: ${e.message}`);\n        }\n      });\n\n      socket.on('close', () => {\n        this._lists[instance] = this._lists[instance].filter(s => s !== socket);\n        this.log(`Client disconnected from instance ${instance}`);\n      });\n\n      this.log(`Client connected to instance ${instance}`);\n    });\n  }\n\n  getListenerList(instance) {\n    return this._lists[instance] || [];\n  }\n\n  log(message) {\n    console.log(`[AphlictClientServer] ${message}`);\n  }\n\n  trace(message) {\n    console.trace(`[AphlictClientServer] ${message}`);\n  }\n\n  getHistory(min_age) {\n    // Placeholder for historical message retrieval logic\n    return [];\n  }\n}"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Create a class that implements HTTP client functionality using Axios for making HTTP requests with support for GET and POST methods, including proper header and parameter handling.\n\nClass Description: HTTPClient is a class that provides HTTP request capabilities using Axios as the underlying library. It handles request configuration, parameter serialization, content-type detection, and response processing.\n\nAttributes:\n- requestModule: [String] - Specifies the HTTP library being used (default: 'axios')\n\nMethods:\n- httpRequest: [async](options) -> [Object] - Makes an HTTP request based on provided options\n  - options: [Object] - Configuration object containing:\n    - method: [String] - HTTP method (GET/POST)\n    - url: [String] - Request URL\n    - headers: [Object] - Request headers\n    - params: [Object] - Query parameters\n    - body: [Object|String] - Request payload\n- queryStr: [function](options) -> [String] - Converts an object to URL-encoded query string\n  - options: [Object] - Key-value pairs to serialize\n- isJSONString: [function](str) -> [Boolean] - Checks if a string is valid JSON\n  - str: [String] - String to validate\n- isJson: [function](obj) -> [Boolean] - Checks if an object is a plain JSON object\n  - obj: [Any] - Object to validate",
    "Canonical_solution": "```javascript\nconst axios = require('axios');\n\nclass HTTPClient {\n    constructor() {\n        this.requestModule = 'axios';\n    }\n\n    async httpRequest(options) {\n        let t = { ...options };\n        t.headers = t.headers || {};\n        if (t.params) {\n            t.url += '?' + this.queryStr(t.params);\n        }\n        t.method = t.method.toLowerCase();\n        if (t.method === 'get') {\n            delete t.headers['Content-Type'];\n            delete t.headers['Content-Length'];\n            delete t.headers['content-type'];\n            delete t.headers['content-length'];\n            delete t.body;\n        } else if (t.method === 'post') {\n            let ContentType;\n            if (!t.body) {\n                t.body = \"\";\n            } else if (typeof t.body === \"string\") {\n                ContentType = this.isJSONString(t.body) ? 'application/json' : 'application/x-www-form-urlencoded';\n            } else if (this.isJson(t.body)) {\n                t.body = JSON.stringify(t.body);\n                ContentType = 'application/json';\n            }\n            if (!t.headers['Content-Type'] && !t.headers['content-type']) {\n                t.headers['Content-Type'] = ContentType;\n            }\n        }\n        if (this.requestModule === \"axios\" && t.method === \"post\") {\n            t.data = t.body;\n            delete t.body;\n        }\n        let httpResult;\n        if (this.requestModule === \"axios\") {\n            httpResult = await axios(t);\n            httpResult.body = httpResult.data;\n        }\n        return httpResult;\n    }\n\n    queryStr(options) {\n        return Object.entries(options).map(([key, value]) => `${key}=${typeof value === 'object' ? JSON.stringify(value) : value}`).join('&');\n    }\n\n    isJSONString(str) {\n        try {\n            return JSON.parse(str) && typeof JSON.parse(str) === 'object';\n        } catch (e) {\n            return false;\n        }\n    }\n\n    isJson(obj) {\n        var isjson = typeof (obj) == \"object\" && Object.prototype.toString.call(obj).toLowerCase() == \"[object object]\" && !obj.length;\n        return isjson;\n    }\n}\n```",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class HTTPClient {\n  constructor() {\n    this.requestModule = 'axios';\n  }\n\n  async httpRequest(options) {\n    const { method, url, headers, params, body } = options;\n    const config = {\n      method,\n      url,\n      headers: headers || {},\n    };\n\n    if (params) {\n      config.params = this.queryStr(params);\n    }\n\n    if (body) {\n      config.data = body;\n      if (this.isJson(body)) {\n        config.headers['Content-Type'] = 'application/json';\n      }\n    }\n\n    try {\n      const response = await axios(config);\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  queryStr(options) {\n    return Object.keys(options)\n      .map(key => encodeURIComponent(key) + '=' + encodeURIComponent(options[key]))\n      .join('&');\n  }\n\n  isJSONString(str) {\n    try {\n      JSON.parse(str);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  isJson(obj) {\n    return typeof obj === 'object' && obj !== null && !Array.isArray(obj) && !(obj instanceof Date);\n  }\n}"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a WebSocket server using socket.io in JavaScript to handle real-time bidirectional communication between clients and the server.\n\nFunction Description: The function `setupWebSocketServer` initializes and configures a WebSocket server using socket.io. It sets up event listeners for client connections, messages, and disconnections. The server broadcasts received messages to all connected clients.\n\nInput:\n- `port` (Number): The port number on which the WebSocket server will listen for incoming connections.\n\nOutput:\n- Returns the `socketServer` instance (Object) which can be used to further configure or interact with the WebSocket server.\n\nNote: The function internally uses the `http` module to create an HTTP server and binds socket.io to it for WebSocket communication. The server logs connection, message, and disconnection events to the console.",
    "Canonical_solution": "const http = require(\"http\");\nconst socketIo = require(\"socket.io\");\n\nfunction setupWebSocketServer(port) {\n    const app = express();\n    const webServer = http.createServer(app);\n    const socketServer = socketIo(webServer, {\"log level\": 1});\n\n    socketServer.on(\"connection\", (socket) => {\n        console.log(\"New client connected\");\n\n        socket.on(\"message\", (data) => {\n            console.log(\"Message received: \", data);\n            socketServer.emit(\"message\", data);\n        });\n\n        socket.on(\"disconnect\", () => {\n            console.log(\"Client disconnected\");\n        });\n    });\n\n    webServer.listen(port, () => {\n        console.log(\"WebSocket server listening on port: \" + port);\n    });\n\n    return socketServer;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 92,
    "wrong_result": "const http = require('http');\nconst socketIO = require('socket.io');\n\nfunction setupWebSocketServer(port) {\n  const server = http.createServer();\n  const socketServer = socketIO(server);\n\n  server.listen(port, () => {\n    console.log(`WebSocket server is running on port ${port}`);\n  });\n\n  socketServer.on('connection', (socket) => {\n    console.log('A client connected');\n\n    socket.on('message', (data) => {\n      console.log('Received message:', data);\n      socketServer.emit('message', data);\n    });\n\n    socket.on('disconnect', () => {\n      console.log('A client disconnected');\n    });\n  });\n\n  return socketServer;\n}"
  },
  {
    "Task_id": 271,
    "Instruction": "Task Description: Create a WebSocket server using socket.io in JavaScript that handles real-time communication between clients and integrates with an Express application and Deployd backend.\n\nFunction Description: The function `setupWebSocketServer` initializes and configures a WebSocket server using socket.io, integrates it with an Express application, and attaches a Deployd backend. It sets up event listeners for server operations and handles custom Express routes.\n\nInput: None (The function uses environment variables for configuration: `process.env.NODE_ENV` for environment setting and `process.env.PORT` for port number)\n\nOutput: None (The function starts a server that listens on the specified port and logs server status to the console)\n\nNote: The function internally uses:\n- Express for HTTP server functionality\n- Socket.io for WebSocket communication\n- Deployd for backend services\n- MongoDB (configured to connect to localhost:27017 with database name 'test-app')",
    "Canonical_solution": "function setupWebSocketServer() {\n    var express = require('express');\n    var app = express();\n    var server = require('http').createServer(app);\n    var io = require('socket.io').listen(server, {'log level': 0});\n\n    require('deployd').attach(server, {\n        socketIo: io,\n        env: process.env.NODE_ENV || 'development',\n        db: {host:'localhost', port:27017, name:'test-app'}\n    });\n    app.use(server.handleRequest);\n\n    app.get('/express-custom-handler', function(req, res) {\n        res.send('Ok');\n    });\n\n    server.listen(process.env.PORT || 2403, function() {\n        console.log({ ENV: process.env.NODE_ENV || 'development', PORT: process.env.PORT || 2403 });\n    });\n    server.on('error', function(err) {\n        console.log(err.stack);\n        process.nextTick(function() {\n            process.exit();\n        });\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 92,
    "wrong_result": "const express = require('express');\nconst http = require('http');\nconst socketIO = require('socket.io');\nconst deployd = require('deployd');\n\nconst setupWebSocketServer = () => {\n  const app = express();\n  const server = http.createServer(app);\n  const io = socketIO(server);\n  const dp = deployd();\n\n  dp.connect('mongodb://localhost:27017/test-app', (err) => {\n    if (err) {\n      console.error('Failed to connect to Deployd backend:', err);\n      process.exit(1);\n    }\n\n    console.log('Connected to Deployd backend');\n\n    io.on('connection', (socket) => {\n      console.log('A client connected');\n\n      socket.on('message', (data) => {\n        console.log('Received message:', data);\n        io.emit('message', data);\n      });\n\n      socket.on('disconnect', () => {\n        console.log('A client disconnected');\n      });\n    });\n\n    server.listen(process.env.PORT || 3000, () => {\n      console.log(`Server is running in ${process.env.NODE_ENV} mode on port ${server.address().port}`);\n    });\n  });\n};\n\nsetupWebSocketServer();"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a function to send telemetry data to a remote endpoint after a software installation, while respecting user preferences for telemetry collection.\n\nFunction Description: The function `installTelemetry` sends a POST request to a specified telemetry endpoint with installation-related data (Node.js version and platform). It checks an environment variable to determine if telemetry collection is enabled before sending any data. The function handles both success and error cases silently.\n\nInput: None (uses environment variable `TUNNELMOLE_TELEMETRY` and Node.js process information)\n\nOutput: None (the function doesn't return any value, it only performs a side effect of sending telemetry data)",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function installTelemetry() {\n  const telemetryEndpoint = `https://service.tunnelmole.com/tunnelmole-log-telemetry`;\n\n  if (process.env.TUNNELMOLE_TELEMETRY === \"0\") {\n    return;\n  }\n\n  axios\n    .post(telemetryEndpoint, {\n      type: \"post-install\",\n      data: {\n        nodeVersion: process.version ? process.version : \"Unknown\",\n        platform: process.platform ? process.platform : \"Unknown\"\n      }\n    }).then(function () {\n      // Ignore the response\n    }).catch(function () {\n      // Ignore the error\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "```javascript\nconst axios = require('axios');\n\nasync function installTelemetry() {\n  const telemetryEnabled = process.env.TUNNELMOLE_TELEMETRY === 'true';\n  if (!telemetryEnabled) return;\n\n  try {\n    const response = await axios.post('https://telemetry.example.com/endpoint', {\n      nodeVersion: process.versions.node,\n      platform: process.platform\n    });\n    // Handle success silently\n  } catch (error) {\n    // Handle error silently\n  }\n}\n```"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a SauceLabs API client class in JavaScript that handles HTTP requests to the SauceLabs REST API, including authentication and basic GET/POST operations.\n\nClass Description: The SauceLabsClient class provides methods to interact with the SauceLabs REST API. It handles authentication and provides simplified methods for making GET and POST requests to the API endpoints.\n\nAttributes:\n- auth: [Object] - An object containing user authentication credentials (username and access token)\n\nMethods:\n- setAuth: [setAuth](saucelabsUsername: String, saucelabsToken: String) -> Void - Sets the authentication credentials for API requests\n- get: [get](path: String, callback: Function) -> Void - Makes a GET request to the specified API path and handles the response through a callback\n- post: [post](path: String, data: Object, callback: Function) -> Void - Makes a POST request to the specified API path with provided data and handles the response through a callback",
    "Canonical_solution": "var request = require('request');\n\nclass SauceLabsClient {\n  constructor() {\n    this.auth = {\n      user: null,\n      password: null\n    };\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.user = saucelabsUsername;\n    this.auth.password = saucelabsToken;\n  }\n\n  get(path, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + path,\n      auth: this.auth\n    };\n    request.get(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        console.log(params);\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(JSON.parse(body));\n    });\n  }\n\n  post(path, data, callback) {\n    var params = {\n      url: 'https://saucelabs.com/rest/v1/' + this.auth.user + '/' + path,\n      auth: { user: this.auth.user, password: this.auth.password },\n      json: data\n    };\n    request.post(params, function(err, res, body) {\n      if (err) {\n        throw err;\n      }\n      if (res.statusCode != 200) {\n        throw new Error('Non-200 status code: ' + body);\n      }\n      callback(body);\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class SauceLabsClient {\n  constructor() {\n    this.auth = {\n      username: '',\n      token: ''\n    };\n  }\n\n  setAuth(saucelabsUsername, saucelabsToken) {\n    this.auth.username = saucelabsUsername;\n    this.auth.token = saucelabsToken;\n  }\n\n  get(path, callback) {\n    const url = `https://api.saucelabs.com/v1/${path}`;\n    const headers = {\n      'Authorization': `Basic ${Buffer.from(`${this.auth.username}:${this.auth.token}`).toString('base64')}`,\n      'Content-Type': 'application/json'\n    };\n\n    fetch(url, {\n      method: 'GET',\n      headers: headers\n    })\n    .then(response => response.json())\n    .then(data => callback(null, data))\n    .catch(error => callback(error, null));\n  }\n\n  post(path, data, callback) {\n    const url = `https://api.saucelabs.com/v1/${path}`;\n    const headers = {\n      'Authorization': `Basic ${Buffer.from(`${this.auth.username}:${this.auth.token}`).toString('base64')}`,\n      'Content-Type': 'application/json'\n    };\n\n    fetch(url, {\n      method: 'POST',\n      headers: headers,\n      body: JSON.stringify(data)\n    })\n    .then(response => response.json())\n    .then(data => callback(null, data))\n    .catch(error => callback(error, null));\n  }\n}"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Create a class that interacts with a bundle size tracking API to get and set file size values for a repository.\n\nClass Description: The BundleSizeAPI class provides methods to retrieve and store file size information from a remote API. It handles authentication, repository name sanitization, and error logging.\n\nAttributes:\n- repo: [String] - The repository name (e.g., \"owner/repo\")\n- token: [String] - Authentication token for API access\n- sha: [String] - Commit SHA associated with the bundle sizes\n- ci: [Any] - CI environment information (usage not shown in reference)\n- url: [String] - Base URL for the bundle size API (\"https://bundlesize-store.now.sh/values\")\n- enabled: [Boolean] - Flag indicating if API operations are enabled (true when repo and token are provided)\n\nMethods:\n- get: [get]() -> [Promise<Object>] - Retrieves file size values from the API. Returns a promise that resolves to an object mapping file paths to their sizes. Automatically sanitizes repository name by replacing dots with underscores.\n- set: [set](values: Object) -> [void] - Posts file size values to the API. Takes an object mapping file paths to sizes. Only operates when repo and token are available. Sanitizes repository name and includes commit SHA in the payload. Errors are logged to console.\n\nNote: Both methods handle errors by logging them to the console and continue execution (errors don't propagate). The class is designed to be fail-safe when API credentials aren't provided.",
    "Canonical_solution": "const axios = require('axios');\n\nclass BundleSizeAPI {\n  constructor(repo, token, sha, ci) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = ci;\n    this.url = 'https://bundlesize-store.now.sh/values';\n    this.enabled = (this.repo && this.token) ? true : false;\n  }\n\n  get() {\n    const sanitizedRepo = this.repo.replace(/\\./g, '_');\n    return axios\n      .get(`${this.url}?repo=${sanitizedRepo}&token=${this.token}`)\n      .then(response => {\n        const values = {};\n        if (response && response.data && response.data.length) {\n          response.data.map(file => (values[file.path] = file.size));\n        }\n        return values;\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  set(values) {\n    if (this.repo && this.token) {\n      const sanitizedRepo = this.repo.replace(/\\./g, '_');\n      axios\n        .post(this.url, { repo: sanitizedRepo, token: this.token, sha: this.sha, values })\n        .catch(error => console.log(error));\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 94,
    "wrong_result": "class BundleSizeAPI {\n  constructor(repo, token, sha, ci) {\n    this.repo = repo;\n    this.token = token;\n    this.sha = sha;\n    this.ci = ci;\n    this.url = \"https://bundlesize-store.now.sh/values\";\n    this.enabled = !!repo && !!token;\n  }\n\n  async get() {\n    if (!this.enabled) return {};\n    try {\n      const sanitizedRepo = this.repo.replace(/\\./g, \"_\");\n      const response = await fetch(`${this.url}/${sanitizedRepo}`, {\n        headers: {\n          Authorization: `Bearer ${this.token}`,\n        },\n      });\n      if (!response.ok) throw new Error(`API request failed with status ${response.status}`);\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error retrieving bundle sizes:\", error);\n      return {};\n    }\n  }\n\n  set(values) {\n    if (!this.enabled || !values || Object.keys(values).length === 0) return;\n    try {\n      const sanitizedRepo = this.repo.replace(/\\./g, \"_\");\n      const payload = {\n        values,\n        sha: this.sha,\n        ci: this.ci,\n      };\n      fetch(`${this.url}/${sanitizedRepo}`, {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${this.token}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(payload),\n      }).catch((error) => {\n        console.error(\"Error setting bundle sizes:\", error);\n      });\n    } catch (error) {\n      console.error(\"Error setting bundle sizes:\", error);\n    }\n  }\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a function that fetches COVID-19 related data from the Israeli government's health dashboard API using HTTP POST request and processes the response.\n\nFunction Description: The function makes a batch request to the Israeli health ministry's API endpoint to retrieve multiple COVID-19 related datasets including updates, patient statistics, test results, and demographic breakdowns. It handles the HTTP communication, error cases, and returns the parsed data or null if the request fails.\n\nInput: None (The function takes no parameters as all request configuration is internally defined)\n\nOutput: \n- On success: Returns parsed data from the API response (type depends on parseData implementation)\n- On failure: Returns null and logs the error",
    "Canonical_solution": "function israelData() {\n    const axios = require('axios');\n    const logger = require('../../../utils/logger');\n    const params = {\n        requests: [\n            { queryName: 'lastUpdate', single: true },\n            { queryName: 'patientsPerDate' },\n            { queryName: 'deadPatientsPerDate' },\n            { queryName: 'recoveredPerDay' },\n            { queryName: 'testResultsPerDate' },\n            { queryName: 'infectedByPeriodAndAgeAndGender' },\n            { queryName: 'deadByPeriodAndAgeAndGender' },\n            { queryName: 'breatheByPeriodAndAgeAndGender' },\n            { queryName: 'severeByPeriodAndAgeAndGender' },\n            { queryName: 'spotlightPublic' },\n            { queryName: 'spotlightLastupdate' }\n        ]\n    };\n    return axios.post('https://datadashboardapi.health.gov.il/api/queries/_batch', params, {\n        headers: { 'Content-Type': 'application/json' }\n    }).then(data => {\n        return parseData(data.data);\n    }).catch(err => {\n        logger.err('Error: Requesting Israel Gov Data failed!', err);\n        return null;\n    });\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const fetchIsraeliCovidData = async () => {\n  try {\n    const response = await fetch('https://api.health.gov.il/covid19', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        datasets: ['updates', 'patient_stats', 'test_results', 'demographics']\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return parseData(data);\n  } catch (error) {\n    console.error('Failed to fetch Israeli COVID-19 data:', error);\n    return null;\n  }\n};\n\nfunction parseData(data) {\n  // Implementation of data parsing logic\n  return data;\n}"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified URL with optional path extension and error data, then triggers an activity callback based on the request's success or failure.\n\nFunction Description: The function `sendPing` is an asynchronous function that constructs a target URL by combining a base URL and an optional path, then sends an HTTP POST request using Axios. The request includes error data in the payload and a custom user-agent header. Depending on the request's outcome, it triggers a callback function (`triggerActivity`) with a success or failure indicator.\n\nInput:  \n- `url`: [String] - The base URL to which the request will be sent.  \n- `path`: [String] (optional) - An additional path segment to append to the base URL.  \n- `error`: [Any] - Data to be sent as the request payload (typically error information).  \n- `triggerActivity`: [Function] - A callback function to be executed after the request completes, receiving a boolean parameter indicating failure (true) or success (false/undefined).  \n\nOutput:  \n- None (The function's primary effect is the HTTP request and callback execution, not a direct return value).",
    "Canonical_solution": "const axios = require(\"axios\");\n\nasync function sendPing(url, path, error, triggerActivity) {\n    if (url == null) return;\n    if (path) url += \"/\" + path;\n\n    await axios.post(url, error, {headers: {\"user-agent\": \"MySpeed/HealthAgent\"}})\n        .then(() => triggerActivity())\n        .catch(() => triggerActivity(true));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "async function sendPing(url, path, error, triggerActivity) {\n  const fullUrl = path ? `${url}/${path}` : url;\n  try {\n    await axios.post(fullUrl, error, {\n      headers: {\n        'User-Agent': 'Custom-Ping-Agent'\n      }\n    });\n    triggerActivity(false);\n  } catch (err) {\n    triggerActivity(true);\n  }\n}"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Implement a function to send emails using different email service providers (Mailgun and Sendgrid) through HTTP requests, with error handling and promise-based asynchronous operation.\n\nFunction Description: The function `sendMail` sends an email using a configured transporter (either Mailgun or Sendgrid). It wraps the transporter's send operation in a Promise for better async handling. The transporter is configured to make HTTP requests to the respective email service API.\n\nInput:\n- `to`: [String] - Recipient email address\n- `subject`: [String] - Email subject\n- `text`: [String] - Email body content\n- `options`: [Object] (optional) - Additional email options (defaults to empty object)\n\nOutput:\n- [Promise] - Resolves with email sending success info, or rejects with an error if sending fails.\n\n---\n\nClass Description: (Not applicable, as the reference code is at the function level)",
    "Canonical_solution": "function sendMail(to, subject, text, options = {}) {\n  return new Promise((resolve, reject) => {\n    transporter.sendMail({\n      from: `\"${ config.plugins.email.name || '' }\" <${ config.plugins.email.email || config.plugins.email.username }>`,\n      to,\n      subject,\n      text,\n    }, (error, info) => {\n      if(error) {\n        return reject(error);\n      }\n      return resolve(info);\n    });\n  });\n}\n\n// External libraries and global variables used:\nconst axios = require('axios');\nconst FormData = require('form-data');\nconst config = appRequire('services/config').all();\nlet transporter;\n\n// Mailgun implementation\ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  const form = new FormData();\n  form.append('from', options.from);\n  form.append('to', options.to);\n  form.append('subject', options.subject);\n  form.append('text', options.text);\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: form.getHeaders(),\n    data: form,\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};\n\n// Sendgrid implementation  \ntransporter = {};\ntransporter.sendMail = (options, cb) => {\n  axios({\n    url: uri,\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${ emailConfig.apiKey }`,\n    },\n    data: {\n      personalizations: [{\n        to: [{ email: options.to }]\n      }],\n      from: { email: options.from },\n      subject: options.subject,\n      content: [{\n        type: 'text/plain',\n        value: options.text,\n      }]\n    },\n  }).then(success => {\n    cb(null);\n  }).catch(err => {\n    cb(err);\n  });\n};",
    "Code_level": "Function-level",
    "FSMID_for_test": 94,
    "wrong_result": "const sendMail = (to, subject, text, options = {}) => {\n  return new Promise((resolve, reject) => {\n    const transporter = configureTransporter(); // Assume this function returns configured transporter\n    const mailOptions = {\n      from: 'noreply@example.com',\n      to,\n      subject,\n      text,\n      ...options\n    };\n\n    transporter.sendMail(mailOptions, (error, info) => {\n      if (error) {\n        return reject(error);\n      }\n      resolve(info);\n    });\n  });\n};\n\nfunction configureTransporter() {\n  // Example configuration for Mailgun or Sendgrid\n  // Replace with actual configuration based on the service\n  return {\n    sendMail: (options, callback) => {\n      // Simulated HTTP request\n      const success = Math.random() > 0.1;\n      if (success) {\n        callback(null, { response: 'Email sent successfully' });\n      } else {\n        callback(new Error('Failed to send email'));\n      }\n    }\n  };\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a function to download a video file from a given URL and save it with a specified description as the filename.\n\nFunction Description: The function `downloadVideo` initiates an asynchronous HTTP GET request to download a video file from the provided URL. It handles the response as a binary blob, creates a downloadable link, and triggers the download automatically. The function includes error handling for empty URLs and checks for successful request completion.\n\nInput:\n- `url` (String): The URL of the video file to be downloaded.\n- `desc` (String): The description to be used as the filename for the downloaded video.\n\nOutput: None (The function triggers a file download but does not return any value.)",
    "Canonical_solution": "function downloadVideo(url, desc) {\n    if (isEmpty(url)) {\n        layer.msg('\u6682\u65e0\u6570\u636e');\n        return;\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'blob';\n    xhr.setRequestHeader(\"Access-Control-Allow-Origin\", \"*\");\n    xhr.setRequestHeader(\"Access-Control-Allow-Credentials\", true);\n    xhr.onload = function () {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            let blob = this.response;\n            let u = window.URL.createObjectURL(new Blob([blob]));\n            let a = document.createElement('a');\n            a.download = desc + '.mp4';\n            a.href = u;\n            a.style.display = 'none';\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function downloadVideo(url, desc) {\n    if (!url) {\n        console.error(\"URL is required\");\n        return;\n    }\n    fetch(url)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error(\"Network response was not ok\");\n            }\n            return response.blob();\n        })\n        .then(blob => {\n            const link = document.createElement('a');\n            link.href = URL.createObjectURL(blob);\n            link.download = `${desc}.mp4`;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        })\n        .catch(error => {\n            console.error(\"There has been a problem with your fetch operation:\", error);\n        });\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a cross-platform HTTP client tool that works in Node.js, Surge, and Quantumult X environments, providing consistent methods for making HTTP requests and handling responses across these platforms.\n\nClass Description: The `Tool` class is a utility class designed to abstract HTTP client functionality across different JavaScript environments (Node.js, Surge, and Quantumult X). It provides methods for making HTTP requests (GET/POST), persistent storage, and notifications while automatically detecting the runtime environment.\n\nAttributes:\n- _node: [Object|null] - Contains Node.js specific modules if running in Node.js environment\n- _isSurge: [Boolean] - Indicates if running in Surge environment\n- _isQuanX: [Boolean] - Indicates if running in Quantumult X environment\n- isSurge: [Boolean] - Public alias for _isSurge\n- isQuanX: [Boolean] - Public alias for _isQuanX\n- isResponse: [Boolean] - Indicates if $response is available\n\nMethods:\n- constructor() -> [void] - Initializes the tool and detects the runtime environment\n- notify(title: String, subtitle: String, message: String, option: Object) -> [void] - Sends a notification in the current environment\n- write(value: String, key: String) -> [Boolean] - Writes a value to persistent storage\n- read(key: String) -> [String] - Reads a value from persistent storage\n- get(options: Object|String, callback: Function) -> [void] - Makes a GET HTTP request\n- post(options: Object|String, callback: Function) -> [void] - Makes a POST HTTP request\n- _status(response: Object) -> [Object] - Internal method to normalize response status codes",
    "Canonical_solution": "const request = require('request');\n\nclass Tool {\n    constructor() {\n        this._node = (() => {\n            if (typeof require == \"function\") {\n                const request = require('request')\n                return ({ request })\n            } else {\n                return (null)\n            }\n        })()\n        this._isSurge = typeof $httpClient != \"undefined\"\n        this._isQuanX = typeof $task != \"undefined\"\n        this.isSurge = this._isSurge\n        this.isQuanX = this._isQuanX\n        this.isResponse = typeof $response != \"undefined\"\n    }\n\n    notify(title, subtitle, message, option) {\n        if (this._isQuanX) $notify(title, subtitle, message, option)\n        if (this._isSurge) $notification.post(title, subtitle, message, option[\"open-url\"])\n        if (this._node) console.log(JSON.stringify({ title, subtitle, message }));\n    }\n\n    write(value, key) {\n        if (this._isQuanX) return $prefs.setValueForKey(value, key)\n        if (this._isSurge) return $persistentStore.write(value, key)\n    }\n\n    read(key) {\n        if (this._isQuanX) return $prefs.valueForKey(key)\n        if (this._isSurge) return $persistentStore.read(key)\n    }\n\n    get(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"GET\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.get(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    post(options, callback) {\n        if (this._isQuanX) {\n            if (typeof options == \"string\") options = { url: options }\n            options[\"method\"] = \"POST\"\n            $task.fetch(options).then(response => { callback(null, this._status(response), response.body) }, reason => callback(reason.error, null, null))\n        }\n        if (this._isSurge) $httpClient.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n        if (this._node) this._node.request.post(options, (error, response, body) => { callback(error, this._status(response), body) })\n    }\n\n    _status(response) {\n        if (response) {\n            if (response.status) {\n                response[\"statusCode\"] = response.status\n            } else if (response.statusCode) {\n                response[\"status\"] = response.statusCode\n            }\n        }\n        return response\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class Tool {\n  constructor() {\n    this._node = null;\n    this._isSurge = false;\n    this._isQuanX = false;\n    this.isSurge = false;\n    this.isQuanX = false;\n    this.isResponse = false;\n\n    if (typeof require !== 'undefined' && typeof process !== 'undefined' && process.versions && process.versions.node) {\n      this._node = { http: require('http'), https: require('https'), fs: require('fs') };\n    } else if (typeof $httpClient !== 'undefined') {\n      this._isSurge = true;\n      this.isSurge = true;\n    } else if (typeof $task !== 'undefined') {\n      this._isQuanX = true;\n      this.isQuanX = true;\n    }\n\n    if (typeof $response !== 'undefined') {\n      this.isResponse = true;\n    }\n  }\n\n  notify(title, subtitle, message, option) {\n    if (this._isSurge) {\n      $notify(title, subtitle, message, option);\n    } else if (this._isQuanX) {\n      $task.fetch({\n        method: 'POST',\n        url: 'https://api.pushbullet.com/v2/pushes',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer YOUR_ACCESS_TOKEN'\n        },\n        body: JSON.stringify({\n          title: title,\n          body: message\n        })\n      });\n    } else if (this._node) {\n      const { exec } = require('child_process');\n      exec(`notify-send \"${title}\" \"${message}\"`, (error, stdout, stderr) => {\n        if (error) console.error(`Error: ${error.message}`);\n        if (stderr) console.error(`Stderr: ${stderr}`);\n        if (stdout) console.log(`Stdout: ${stdout}`);\n      });\n    }\n  }\n\n  write(value, key) {\n    if (this._isSurge) {\n      return $prefs.writeGlobalValue(key, value);\n    } else if (this._isQuanX) {\n      return $persistentStore.write(value, key);\n    } else if (this._node) {\n      try {\n        const fs = this._node.fs;\n        fs.writeFileSync(`./storage/${key}`, value);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  read(key) {\n    if (this._isSurge) {\n      return $prefs.readGlobalValue(key) || '';\n    } else if (this._isQuanX) {\n      return $persistentStore.read(key) || '';\n    } else if (this._node) {\n      try {\n        const fs = this._node.fs;\n        return fs.readFileSync(`./storage/${key}`, 'utf8') || '';\n      } catch (e) {\n        return '';\n      }\n    }\n    return '';\n  }\n\n  get(options, callback) {\n    if (this._isSurge) {\n      $httpClient.get(options, callback);\n    } else if (this._isQuanX) {\n      $task.fetch({\n        method: 'GET',\n        url: options,\n        headers: {}\n      }).then(response => {\n        callback(null, response);\n      }).catch(error => {\n        callback(error, null);\n      });\n    } else if (this._node) {\n      const { http, https } = this._node;\n      const protocol = options.startsWith('https') ? https : http;\n      protocol.get(options, res => {\n        let data = '';\n        res.on('data', chunk => data += chunk);\n        res.on('end', () => {\n          callback(null, { status: res.statusCode, data });\n        });\n      }).on('error', err => {\n        callback(err, null);\n      });\n    }\n  }\n\n  post(options, callback) {\n    if (this._isSurge) {\n      $httpClient.post(options, callback);\n    } else if (this._isQuanX) {\n      $task.fetch({\n        method: 'POST',\n        url: options.url,\n        headers: options.headers || {},\n        body: options.body || ''\n      }).then(response => {\n        callback(null, response);\n      }).catch(error => {\n        callback(error, null);\n      });\n    } else if (this._node) {\n      const { http, https } = this._node;\n      const protocol = options.url.startsWith('https') ? https : http;\n      const req = protocol.request(options.url, {\n        method: 'POST',\n        headers: options.headers || {}\n      }, res => {\n        let data = '';\n        res.on('data', chunk => data += chunk);\n        res.on('end', () => {\n          callback(null, { status: res.statusCode, data });\n        });\n      });\n      req.on('error', err => {\n        callback(err, null);\n      });\n      if (options.body) {\n        req.write(options.body);\n      }\n      req.end();\n    }\n  }\n\n  _status(response) {\n    return {\n      code: response.status,\n      message: response.statusText || 'OK'\n    };\n  }\n}"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Implement a class that simulates the behavior of an EventSource object, which is used to receive server-sent events (SSE) over HTTP. The class should handle the connection, reception of events, and error handling.\n\nClass Description: The `EventSource` class is designed to establish a persistent connection to a server using HTTP and receive server-sent events. It manages the connection state, handles incoming events, and dispatches them to appropriate event handlers. The class also supports reconnection in case of errors or connection loss.\n\nAttributes:\n\n- `URL`: [String] - The URL to which the EventSource connects to receive server-sent events.\n- `readyState`: [Number] - Represents the current state of the connection. Possible values are `CONNECTING` (0), `OPEN` (1), and `CLOSED` (2).\n- `_pollTimer`: [Object] - A timer object used to manage the polling interval for reconnection attempts.\n- `_xhr`: [Object] - The XMLHttpRequest object used to make HTTP requests to the server.\n\nMethods:\n\n- `poll()`: [Function] -> [Void] - Initiates a new HTTP request to the server to receive events. Handles the response, processes the events, and manages the connection state.\n- `close()`: [Function]() -> [Void] - Closes the connection to the server, sets the `readyState` to `CLOSED`, and stops any ongoing polling.\n- `dispatchEvent(type, event)`: [Function]([String], [Object]) -> [Void] - Dispatches an event to the registered event handlers based on the event type.\n- `addEventListener(type, handler)`: [Function]([String], [Function]) -> [Void] - Registers an event handler for a specific event type.\n- `removeEventListener()`: [Function]() -> [Void] - Placeholder method for removing event listeners (not implemented in the reference code).\n\nAdditional Classes:\n\n- `MessageEvent`: [Class] - Represents an event received from the server. Contains the event data, origin, and last event ID.\n\nAttributes of `MessageEvent`:\n\n- `data`: [String] - The data payload of the event.\n- `type`: [String] - The type of the event, defaulting to 'message'.\n- `lastEventId`: [String] - The ID of the last received event.\n- `origin`: [String] - The origin URL of the event.\n\nMethods of `MessageEvent`:\n\n- `MessageEvent(data, origin, lastEventId)`: [Constructor]([String], [String], [String]) -> [Object] - Initializes a new `MessageEvent` instance with the provided data, origin, and last event ID.",
    "Canonical_solution": "var EventSource = function (url) {\n  var eventsource = this,\n      interval = 500,\n      lastEventId = null,\n      cache = '';\n\n  if (!url || typeof url != 'string') {\n    throw new SyntaxError('Not enough arguments');\n  }\n\n  this.URL = url;\n  this.readyState = this.CONNECTING;\n  this._pollTimer = null;\n  this._xhr = null;\n\n  function poll() {\n    try {\n      if (eventsource.readyState == eventsource.CLOSED) return;\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', eventsource.URL, true);\n      xhr.setRequestHeader('Accept', 'text/event-stream');\n      xhr.setRequestHeader('Cache-Control', 'no-cache');\n      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n      if (lastEventId != null) xhr.setRequestHeader('Last-Event-ID', lastEventId);\n      cache = '';\n\n      xhr.timeout = 50000;\n      xhr.onreadystatechange = function () {\n        var status = 0;\n        try {\n          status = xhr.status;\n        } catch (e) {}\n\n        if ((this.readyState == 3 || this.readyState == 4) && status == 200) {\n          if (eventsource.readyState == eventsource.CONNECTING) {\n            eventsource.readyState = eventsource.OPEN;\n            eventsource.dispatchEvent('open', { type: 'open' });\n          }\n\n          var responseText = '';\n          try {\n            responseText = this.responseText || '';\n          } catch (e) {}\n\n          var parts = responseText.substr(cache.length).split(\"\\n\"),\n              eventType = 'message',\n              data = [],\n              i = 0,\n              line = '';\n\n          cache = responseText;\n\n          for (; i < parts.length; i++) {\n            line = parts[i].replace(reTrim, '');\n            if (line.indexOf('event') == 0) {\n              eventType = line.replace(/event:?\\s*/, '');\n            } else if (line.indexOf('data') == 0) {\n              data.push(line.replace(/data:?\\s*/, ''));\n            } else if (line.indexOf('id:') == 0) {\n              lastEventId = line.replace(/id:?\\s*/, '');\n            } else if (line.indexOf('id') == 0) {\n              lastEventId = null;\n            } else if (line == '') {\n              if (data.length) {\n                var event = new MessageEvent(data.join('\\n'), eventsource.url, lastEventId);\n                eventsource.dispatchEvent(eventType, event);\n                data = [];\n                eventType = 'message';\n              }\n            }\n          }\n\n          if (this.readyState == 4) pollAgain(this);\n        } else if (eventsource.readyState !== eventsource.CLOSED) {\n          if (this.readyState == 4) {\n            eventsource.readyState = eventsource.CONNECTING;\n            eventsource.dispatchEvent('error', { type: 'error' });\n            pollAgain(this);\n          } else if (this.readyState == 0) {\n            pollAgain(this);\n          }\n        }\n      };\n\n      xhr.send();\n\n      setTimeout(function () {\n        if (true || xhr.readyState == 3) xhr.abort();\n      }, xhr.timeout);\n\n      eventsource._xhr = xhr;\n\n    } catch (e) {\n      eventsource.dispatchEvent('error', { type: 'error', data: e.message });\n    }\n  };\n\n  poll();\n};\n\nEventSource.prototype = {\n  close: function () {\n    this.readyState = this.CLOSED;\n    clearInterval(this._pollTimer);\n    this._xhr.abort();\n  },\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSED: 2,\n  dispatchEvent: function (type, event) {\n    var handlers = this['_' + type + 'Handlers'];\n    if (handlers) {\n      for (var i = 0; i < handlers.length; i++) {\n        handlers[i].call(this, event);\n      }\n    }\n\n    if (this['on' + type]) {\n      this['on' + type].call(this, event);\n    }\n  },\n  addEventListener: function (type, handler) {\n    if (!this['_' + type + 'Handlers']) {\n      this['_' + type + 'Handlers'] = [];\n    }\n    this['_' + type + 'Handlers'].push(handler);\n  },\n  removeEventListener: function () {},\n  onerror: null,\n  onmessage: null,\n  onopen: null,\n  readyState: 0,\n  URL: ''\n};\n\nvar MessageEvent = function (data, origin, lastEventId) {\n  this.data = data;\n  this.origin = origin;\n  this.lastEventId = lastEventId || '';\n};\n\nMessageEvent.prototype = {\n  data: null,\n  type: 'message',\n  lastEventId: '',\n  origin: ''\n};",
    "Code_level": "Class-level",
    "FSMID_for_test": 93,
    "wrong_result": "class EventSource {\n  constructor(url) {\n    this.URL = url;\n    this.readyState = 0; // CONNECTING\n    this._pollTimer = null;\n    this._xhr = null;\n    this._eventListeners = {};\n  }\n\n  poll() {\n    if (this.readyState !== 0) return;\n\n    this._xhr = new XMLHttpRequest();\n    this._xhr.open('GET', this.URL, true);\n    this._xhr.onreadystatechange = () => {\n      if (this._xhr.readyState === 4) {\n        if (this._xhr.status === 200) {\n          this.readyState = 1; // OPEN\n          const lines = this._xhr.responseText.split('\\n');\n          for (let line of lines) {\n            if (line.startsWith('data:')) {\n              const data = line.slice(5).trim();\n              const event = new MessageEvent(data, this.URL, '');\n              this.dispatchEvent('message', event);\n            } else if (line.startsWith('id:')) {\n              const lastEventId = line.slice(3).trim();\n              // Handle last event ID as needed\n            }\n          }\n        } else {\n          this.readyState = 0; // CONNECTING\n          this._pollTimer = setTimeout(() => this.poll(), 1000);\n        }\n      }\n    };\n\n    this._xhr.onerror = () => {\n      this.readyState = 0; // CONNECTING\n      this._pollTimer = setTimeout(() => this.poll(), 1000);\n    };\n\n    this._xhr.send();\n  }\n\n  close() {\n    if (this._xhr) {\n      this._xhr.abort();\n      this._xhr = null;\n    }\n    if (this._pollTimer) {\n      clearTimeout(this._pollTimer);\n      this._pollTimer = null;\n    }\n    this.readyState = 2; // CLOSED\n  }\n\n  dispatchEvent(type, event) {\n    if (!this._eventListeners[type]) return;\n    for (let handler of this._eventListeners[type]) {\n      handler(event);\n    }\n  }\n\n  addEventListener(type, handler) {\n    if (!this._eventListeners[type]) {\n      this._eventListeners[type] = [];\n    }\n    this._eventListeners[type].push(handler);\n  }\n\n  removeEventListener() {\n    // Placeholder method for removing event listeners\n  }\n}\n\nclass MessageEvent {\n  constructor(data, origin, lastEventId) {\n    this.data = data;\n    this.type = 'message';\n    this.lastEventId = lastEventId;\n    this.origin = origin;\n  }\n}"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Create a JavaScript class that handles HTTP requests to fetch data from a URL, with support for different data formats and authentication.\n\nClass Description: The DataManURL class provides methods to interact with remote resources via HTTP, supporting operations like fetching data as a buffer, converting to data URI, creating read streams, and retrieving metadata like content type and size.\n\nAttributes:\n- url: [String] - The URL of the remote resource to access\n- _type: [String] - The content type of the resource (e.g., 'image/png')\n- urlOpts: [Object] - Configuration options for the HTTP request (headers, auth, etc.)\n- _size: [Number] - The size in bytes of the fetched resource (cached after first request)\n\nMethods:\n- constructor(url, type, options) -> [void] - Initializes a new DataManURL instance\n  - url: [String] - The target URL\n  - type: [String] - Expected content type (optional)\n  - options: [Object] - Request options including auth and headers (optional)\n\n- getBuffer(callback) -> [void] - Fetches the resource as a binary buffer\n  - callback: [Function] - Receives (error, buffer) parameters\n\n- getDataUri(callback) -> [void] - Converts the resource to a base64 data URI\n  - callback: [Function] - Receives (error, dataUri) parameters\n\n- createReadStream() -> [Stream] - Creates a readable stream of the resource\n  - Returns: [Stream] - Readable stream of the resource data\n\n- size(callback) -> [void] - Gets the resource size in bytes\n  - callback: [Function] - Receives (error, size) parameters\n\n- type() -> [String] - Gets the content type of the resource\n  - Returns: [String] - The content type (may be null if not fetched yet)",
    "Canonical_solution": "var request = Npm.require(\"request\");\n\nclass DataManURL {\n  constructor(url, type, options) {\n    var self = this;\n    options = options || {};\n\n    self.url = url;\n    self._type = type;\n\n    if (options.auth) {\n      if (options.auth.indexOf(':') < 0)\n        throw new Error('auth option should be of the form \"username:password\"');\n      options.headers = options.headers || {};\n      options.headers['Authorization'] = \"Basic \"+\n        (new Buffer(options.auth, \"ascii\")).toString(\"base64\");\n      delete options.auth;\n    }\n\n    self.urlOpts = options;\n  }\n\n  getBuffer(callback) {\n    var self = this;\n\n    request(_.extend({\n      url: self.url,\n      method: \"GET\",\n      encoding: null,\n      jar: false\n    }, self.urlOpts), Meteor.bindEnvironment(function(err, res, body) {\n      if (err) {\n        callback(err);\n      } else {\n        self._type = res.headers['content-type'];\n        callback(null, body);\n      }\n    }, function(err) {\n      callback(err);\n    }));\n  }\n\n  getDataUri(callback) {\n    var self = this;\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        if (!self._type) {\n          callback(new Error(\"DataMan.getDataUri couldn't get a contentType\"));\n        } else {\n          var dataUri = \"data:\" + self._type + \";base64,\" + buffer.toString(\"base64\");\n          callback(null, dataUri);\n        }\n      }\n    });\n  }\n\n  createReadStream() {\n    var self = this;\n    return request(_.extend({\n      url: self.url,\n      method: \"GET\"\n    }, self.urlOpts));\n  }\n\n  size(callback) {\n    var self = this;\n\n    if (typeof self._size === \"number\") {\n      callback(null, self._size);\n      return;\n    }\n\n    self.getBuffer(function (error, buffer) {\n      if (error) {\n        callback(error);\n      } else {\n        self._size = buffer.length;\n        callback(null, self._size);\n      }\n    });\n  }\n\n  type() {\n    return this._type;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class DataManURL {\n  constructor(url, type, options) {\n    this.url = url;\n    this._type = type;\n    this.urlOpts = options || {};\n    this._size = null;\n  }\n\n  async getBuffer(callback) {\n    try {\n      const response = await fetch(this.url, this.urlOpts);\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const buffer = await response.arrayBuffer();\n      this._size = buffer.byteLength;\n      this._type = this._type || response.headers.get('content-type');\n      callback(null, Buffer.from(buffer));\n    } catch (error) {\n      callback(error);\n    }\n  }\n\n  getDataUri(callback) {\n    this.getBuffer((error, buffer) => {\n      if (error) return callback(error);\n      const base64 = buffer.toString('base64');\n      const dataUri = `data:${this._type};base64,${base64}`;\n      callback(null, dataUri);\n    });\n  }\n\n  createReadStream() {\n    return fetch(this.url, this.urlOpts).then(response => {\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      return response.body;\n    });\n  }\n\n  size(callback) {\n    if (this._size !== null) {\n      callback(null, this._size);\n      return;\n    }\n\n    this.getBuffer((error, buffer) => {\n      if (error) return callback(error);\n      callback(null, buffer.length);\n    });\n  }\n\n  type() {\n    return this._type;\n  }\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Implement a function to handle form submission asynchronously using XMLHttpRequest in JavaScript. The function should prevent default form submission, process form data, send it to a server via POST request, and handle the server's response to display a thank-you message upon successful submission.\n\nFunction Description: The function `handleFormSubmit` intercepts form submission events, validates the form data (checking for honeypot fields), disables all buttons during submission, sends the form data to a specified URL via POST request, and processes the server's response to update the UI accordingly.\n\nInput: \n- `event`: [Event Object] - The form submission event that triggers this function. The event object contains the target form element and allows prevention of default submission behavior.\n\nOutput: \n- None (void) - The function does not return any value but performs side effects including:\n  - Preventing default form submission\n  - Disabling form buttons during submission\n  - Sending form data to the server\n  - Updating the UI based on server response (resetting form and showing thank-you message)",
    "Canonical_solution": "function handleFormSubmit(event) {\n    event.preventDefault();\n    var form = event.target;\n    var formData = getFormData(form);\n    var data = formData.data;\n\n    if (formData.honeypot) {\n        return false;\n    }\n\n    disableAllButtons(form);\n    var url = form.action;\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', url);\n    xhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    xhr.onreadystatechange = function() {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n            form.reset();\n            var formElements = form.querySelector(\".form-elements\")\n            if (formElements) {\n                formElements.style.display = \"none\";\n            }\n            var thankYouMessage = form.querySelector(\".thankyou_message\");\n            if (thankYouMessage) {\n                thankYouMessage.style.display = \"block\";\n            }\n        }\n    };\n    var encoded = Object.keys(data).map(function(k) {\n        return encodeURIComponent(k) + \"=\" + encodeURIComponent(data[k]);\n    }).join('&');\n    xhr.send(encoded);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function handleFormSubmit(event) {\n  event.preventDefault();\n  const form = event.target;\n  const buttons = form.querySelectorAll('button');\n  buttons.forEach(button => button.disabled = true);\n  const formData = new FormData(form);\n  const xhr = new XMLHttpRequest();\n  xhr.open('POST', form.action, true);\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && xhr.status === 200) {\n      form.reset();\n      const thankYouMessage = document.createElement('div');\n      thankYouMessage.textContent = 'Thank you for your submission!';\n      form.parentNode.appendChild(thankYouMessage);\n    } else if (xhr.readyState === 4) {\n      alert('There was an error submitting the form.');\n    }\n  };\n  xhr.send(formData);\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a function that sends a POST request to a specified URL with form-urlencoded data and handles the response asynchronously.\n\nFunction Description: The function `sendPostRequest` constructs and sends an HTTP POST request to a given endpoint. It sets the appropriate content type header for form-urlencoded data, includes credentials if needed, and logs the server's response upon completion. This is useful for submitting form data or making authenticated API requests.\n\nInput: None (The URL and data are hardcoded in this example, but could be parameterized in a real implementation)\n\nOutput: None (The function logs the response to the console, but doesn't return anything)",
    "Canonical_solution": "function sendPostRequest() {\n    const data = 'secret=*%5*!';\n    let xhr = new XMLHttpRequest();\n    xhr.withCredentials = true;\n    xhr.open('POST', 'http://localhost:28139/post');\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    xhr.onload = function() {\n        console.log(xhr.response);\n    };\n    xhr.send(data);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "const sendPostRequest = async () => {\n  const url = 'https://example.com/api/endpoint';\n  const data = new URLSearchParams();\n  data.append('username', 'user123');\n  data.append('password', 'pass456');\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Bearer your_token_here' // Include if authentication is needed\n      },\n      body: data,\n      credentials: 'include' // Include if cookies or credentials are required\n    });\n\n    const result = await response.text();\n    console.log('Server Response:', result);\n  } catch (error) {\n    console.error('Error sending POST request:', error);\n  }\n};\n\nsendPostRequest();"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement a function that handles different types of HTTP requests and script imports, then communicates the results back to a sender.\n\nFunction Description: The function `run_test` processes incoming data to determine which type of request or script import to execute. It supports XMLHttpRequest (XHR), Fetch API, and `importScripts` methods. Based on the input data, it initiates the corresponding operation and sends the result or error message back to the sender via the `postMessage` method.\n\nInput:  \n- `data` [String] - A string indicating the type of operation to perform. Valid values are 'xhr', 'fetch', or 'importScripts'.  \n- `sender` [Object] - An object with a `postMessage` method used to send the response or error message back to the caller.\n\nOutput:  \n- No direct return value. The function communicates results asynchronously via `sender.postMessage()`, sending either the response data (for successful operations) or an error message (for failures).  \n\nThe function handles the following cases:  \n1. If `data` is 'xhr', it performs an XMLHttpRequest GET operation and sends the response text or an error message.  \n2. If `data` is 'fetch', it uses the Fetch API to retrieve data and sends the response text or an error message.  \n3. If `data` is 'importScripts', it imports a script and sends a predefined message from the imported script.  \n4. For any other `data` value, it sends an \"Unexpected message\" response.",
    "Canonical_solution": "function run_test(data, sender) {\n  if (data === 'xhr') {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'synthesized-response.txt', true);\n    xhr.responseType = 'text';\n    xhr.send();\n    xhr.onload = evt => sender.postMessage(xhr.responseText);\n    xhr.onerror = () => sender.postMessage('XHR failed!');\n  } else if (data === 'fetch') {\n    fetch('synthesized-response.txt')\n        .then(response => response.text())\n        .then(data => sender.postMessage(data))\n        .catch(error => sender.postMessage('Fetch failed!'));\n  } else if (data === 'importScripts') {\n    importScripts('synthesized-response.js');\n    sender.postMessage(message);\n  } else {\n    sender.postMessage('Unexpected message! ' + data);\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function run_test(data, sender) {\n    if (data === 'xhr') {\n        const xhr = new XMLHttpRequest();\n        xhr.open('GET', 'https://example.com/data', true);\n        xhr.onload = function () {\n            if (xhr.status === 200) {\n                sender.postMessage(xhr.responseText);\n            } else {\n                sender.postMessage('XHR Error: ' + xhr.statusText);\n            }\n        };\n        xhr.onerror = function () {\n            sender.postMessage('XHR Network Error');\n        };\n        xhr.send();\n    } else if (data === 'fetch') {\n        fetch('https://example.com/data')\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Fetch Error: ' + response.statusText);\n                }\n                return response.text();\n            })\n            .then(data => sender.postMessage(data))\n            .catch(error => sender.postMessage('Fetch Error: ' + error.message));\n    } else if (data === 'importScripts') {\n        try {\n            importScripts('https://example.com/script.js');\n            sender.postMessage('Script imported successfully.');\n        } catch (error) {\n            sender.postMessage('Import Script Error: ' + error.message);\n        }\n    } else {\n        sender.postMessage('Unexpected message');\n    }\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a function that asynchronously loads YAML content from a specified URL and processes it using a callback function.\n\nFunction Description: The function `loadYamlUrl` initiates an HTTP GET request to fetch YAML content from a given URL. It handles the response asynchronously, checking for a successful status code (200) before passing the YAML text to a processing function (`yamlToForm`) and logging the response to the console.\n\nInput: \n- `url` [String] - The URL from which to fetch the YAML content.\n\nOutput: \n- None (The function does not return a value directly but processes the YAML content via the `yamlToForm` callback and logs the response to the console.)",
    "Canonical_solution": "function loadYamlUrl(url) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'text';\n    xhr.onload = function(e) {\n        if (this.status == 200) {\n            yamlToForm(this.response);\n            console.log(this.response);\n        }\n    };\n    xhr.send();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 93,
    "wrong_result": "function loadYamlUrl(url) {\n    fetch(url)\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Network response was not ok ' + response.statusText);\n            }\n            return response.text();\n        })\n        .then(yamlText => {\n            console.log('YAML content fetched successfully:', yamlText);\n            yamlToForm(yamlText);\n        })\n        .catch(error => {\n            console.error('There was a problem with the fetch operation:', error);\n        });\n}"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs from multiple services (is.gd, goo.gl, budurl.com, snipurl.com, etc.) by making HTTP requests to their APIs or following HTTP redirects. It handles recursive expansion with depth control and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening services to their domain names\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration\n- expand(args: [Object], callback: [Function]) -> [void] - Recursively expands a shortened URL\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to call with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n      - err: [Error] - Any error that occurred (optional)\n      - headers: [Object] - Response headers (optional)\n      - urlp: [Object] - Parsed URL object (optional)",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        }.bind(this),\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }.bind(this)\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "const https = require('https');\nconst http = require('http');\nconst url = require('url');\n\nclass URLExpander {\n  constructor() {\n    this.map = {\n      'is.gd': 'https://is.gd/api/shorten',\n      'goo.gl': 'https:// goo.gl/api/expand',\n      'budurl.com': 'https://api.budurl.com/v1/expand',\n      'snipurl.com': 'https://snipurl.com/api/expand'\n    };\n    this.timeout = 5000;\n    this.APIs = {\n      'is.gd': this.expandIsGd.bind(this),\n      'goo.gl': this.expandGooGl.bind(this),\n      'budurl.com': this.expandBudUrl.bind(this),\n      'snipurl.com': this.expandSnipUrl.bind(this)\n    };\n  }\n\n  expand(args, callback) {\n    const { url, depth = 0, seen = {} } = args;\n    if (depth > 10) return callback({ ...args, err: new Error('Maximum recursion depth exceeded') });\n\n    if (seen[url]) return callback({ ...args, err: new Error('Cycle detected') });\n\n    seen[url] = true;\n\n    const parsedUrl = url.parse(url);\n    const domain = parsedUrl.hostname;\n\n    if (!domain || !this.map[domain]) {\n      this.followRedirect(url, (err, result) => {\n        if (err) return callback({ ...args, err });\n        if (result && result.url) {\n          args.url = result.url;\n          args.depth = depth + 1;\n          args.seen = seen;\n          this.expand(args, callback);\n        } else {\n          callback({ ...args, err: new Error('Failed to follow redirect') });\n        }\n      });\n      return;\n    }\n\n    this.APIs[domain](url, (err, expandedUrl) => {\n      if (err) return callback({ ...args, err });\n      if (expandedUrl) {\n        args.url = expandedUrl;\n        args.depth = depth + 1;\n        args.seen = seen;\n        this.expand(args, callback);\n      } else {\n        callback({ ...args, err: new Error('Failed to expand URL via API') });\n      }\n    });\n  }\n\n  expandIsGd(url, callback) {\n    const parsedUrl = url.parse(url);\n    const path = parsedUrl.path || '/';\n    const options = {\n      hostname: 'is.gd',\n      path: `/api/shorten?format=json&url=${encodeURIComponent(url)}`,\n      method: 'GET',\n      timeout: this.timeout\n    };\n\n    const protocol = parsedUrl.protocol === 'https:' ? https : http;\n    const req = protocol.request(options, res => {\n      let data = '';\n      res.on('data', chunk => data += chunk);\n      res.on('end', () => {\n        try {\n          const json = JSON.parse(data);\n          if (json.url) callback(null, json.url);\n          else callback(new Error('Failed to expand URL via is.gd API'));\n        } catch (e) {\n          callback(e);\n        }\n      });\n    });\n\n    req.on('error', e => callback(e));\n    req.end();\n  }\n\n  expandGooGl(url, callback) {\n    const parsedUrl = url.parse(url);\n    const path = parsedUrl.path || '/';\n    const options = {\n      hostname: 'goo.gl',\n      path: `/api/expand?shortUrl=${encodeURIComponent(url)}`,\n      method: 'GET',\n      timeout: this.timeout\n    };\n\n    const protocol = parsedUrl.protocol === 'https:' ? https : http;\n    const req = protocol.request(options, res => {\n      let data = '';\n      res.on('data', chunk => data += chunk);\n      res.on('end', () => {\n        try {\n          const json = JSON.parse(data);\n          if (json.longUrl) callback(null, json.longUrl);\n          else callback(new Error('Failed to expand URL via goo.gl API'));\n        } catch (e) {\n          callback(e);\n        }\n      });\n    });\n\n    req.on('error', e => callback(e));\n    req.end();\n  }\n\n  expandBudUrl(url, callback) {\n    const parsedUrl = url.parse(url);\n    const path = parsedUrl.path || '/';\n    const options = {\n      hostname: 'api.budurl.com',\n      path: `/v1/expand?short_url=${encodeURIComponent(url)}`,\n      method: 'GET',\n      timeout: this.timeout\n    };\n\n    const protocol = parsedUrl.protocol === 'https:' ? https : http;\n    const req = protocol.request(options, res => {\n      let data = '';\n      res.on('data', chunk => data += chunk);\n      res.on('end', () => {\n        try {\n          const json = JSON.parse(data);\n          if (json.url) callback(null, json.url);\n          else callback(new Error('Failed to expand URL via budurl.com API'));\n        } catch (e) {\n          callback(e);\n        }\n      });\n    });\n\n    req.on('error', e => callback(e));\n    req.end();\n  }\n\n  expandSnipUrl(url, callback) {\n    const parsedUrl = url.parse(url);\n    const path = parsedUrl.path || '/';\n    const options = {\n      hostname: 'snipurl.com',\n      path: `/api/expand?short_url=${encodeURIComponent(url)}`,\n      method: 'GET',\n      timeout: this.timeout\n    };\n\n    const protocol = parsedUrl.protocol === 'https:' ? https : http;\n    const req = protocol.request(options, res => {\n      let data = '';\n      res.on('data', chunk => data += chunk);\n      res.on('end', () => {\n        try {\n          const json = JSON.parse(data);\n          if (json.url) callback(null, json.url);\n          else callback(new Error('Failed to expand URL via snipurl.com API'));\n        } catch (e) {\n          callback(e);\n        }\n      });\n    });\n\n    req.on('error', e => callback(e));\n    req.end();\n  }\n\n  followRedirect(url, callback) {\n    const parsedUrl = url.parse(url);\n    const protocol = parsedUrl.protocol === 'https:' ? https : http;\n    const options = {\n      hostname: parsedUrl.hostname,\n      port: parsedUrl.port || (parsedUrl.protocol === 'https:' ? 443 : 80),\n      path: parsedUrl.path,\n      method: 'GET',\n      timeout: this.timeout\n    };\n\n    const req = protocol.request(options, res => {\n      if (res.statusCode >= 300 && res.statusCode < 400 && res.headers.location) {\n        const redirectUrl = res.headers.location;\n        this.followRedirect(redirectUrl, callback);\n      } else {\n        callback(null, { url });\n      }\n    });\n\n    req.on('error', e => callback(e));\n    req.end();\n  }\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a reusable HTTP server class in JavaScript using the Express framework that can handle various HTTP methods, middleware configuration, and file uploads.\n\nClass Description: The HTTPServer class encapsulates an Express application with configurable routes, middleware, and file upload capabilities. It provides methods to start/stop the server and add route handlers for different HTTP methods.\n\nAttributes:\n- app: [Object] - The Express application instance\n- port: [Number] - The port number the server listens on\n- server: [Object|null] - The HTTP server instance (null before starting)\n\nMethods:\n- constructor(port) -> [HTTPServer] - Initializes the Express app with middleware and file upload handling\n- start() -> [Promise] - Starts the server on the specified port\n- stop() -> [void] - Stops the server if running\n- addRoute(method, path, handler) -> [void] - Adds a route handler for a specific HTTP method\n- get(path, handler) -> [void] - Adds a GET route handler\n- post(path, handler) -> [void] - Adds a POST route handler\n- put(path, handler) -> [void] - Adds a PUT route handler\n- delete(path, handler) -> [void] - Adds a DELETE route handler\n- patch(path, handler) -> [void] - Adds a PATCH route handler\n- options(path, handler) -> [void] - Adds an OPTIONS route handler\n- trace(path, handler) -> [void] - Adds a TRACE route handler\n- head(path, handler) -> [void] - Adds a HEAD route handler",
    "Canonical_solution": "const express = require('express');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst multer = require(\"multer\");\n\nclass HTTPServer {\n    constructor(port) {\n        this.app = express();\n        this.port = port;\n        this.server = null;\n        \n        // Configure middleware\n        this.app.use(bodyParser.raw({type:\"*/*\"}));\n        this.app.use(cookieParser(undefined,{decode:String}));\n        \n        // File upload handling\n        const fileUploadApp = express();\n        const mp = multer({ storage: multer.memoryStorage() }).any();\n        fileUploadApp.post(\"/file-upload\",function(req,res,next) {\n            mp(req,res,function(err) {\n                req._body = true;\n                next(err);\n            })\n        },bodyParser.json(),function(req,res) {\n            res.json({\n                body: req.body,\n                files: req.files\n            })\n        });\n        this.app.use(fileUploadApp);\n    }\n\n    start() {\n        return new Promise((resolve, reject) => {\n            this.server = this.app.listen(this.port, err => {\n                if (err) {\n                    return reject(err);\n                }\n                resolve();\n            });\n        });\n    }\n\n    stop() {\n        if (this.server) {\n            this.server.close();\n        }\n    }\n\n    addRoute(method, path, handler) {\n        this.app[method.toLowerCase()](path, handler);\n    }\n\n    get(path, handler) {\n        this.addRoute('get', path, handler);\n    }\n\n    post(path, handler) {\n        this.addRoute('post', path, handler);\n    }\n\n    put(path, handler) {\n        this.addRoute('put', path, handler);\n    }\n\n    delete(path, handler) {\n        this.addRoute('delete', path, handler);\n    }\n\n    patch(path, handler) {\n        this.addRoute('patch', path, handler);\n    }\n\n    options(path, handler) {\n        this.addRoute('options', path, handler);\n    }\n\n    trace(path, handler) {\n        this.addRoute('trace', path, handler);\n    }\n\n    head(path, handler) {\n        this.addRoute('head', path, handler);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 96,
    "wrong_result": "class HTTPServer {\n  constructor(port) {\n    this.app = require('express')();\n    this.port = port;\n    this.server = null;\n    this.setupMiddleware();\n  }\n\n  setupMiddleware() {\n    const express = require('express');\n    const multer = require('multer');\n    const upload = multer({ dest: 'uploads/' });\n\n    this.app.use(express.json());\n    this.app.use(express.urlencoded({ extended: true }));\n    this.app.use('/uploads', express.static('uploads'));\n  }\n\n  start() {\n    return new Promise((resolve, reject) => {\n      this.server = this.app.listen(this.port, () => {\n        console.log(`Server is running on port ${this.port}`);\n        resolve();\n      });\n    });\n  }\n\n  stop() {\n    if (this.server) {\n      this.server.close(() => {\n        this.server = null;\n        console.log('Server stopped');\n      });\n    }\n  }\n\n  addRoute(method, path, handler) {\n    this.app[method](path, handler);\n  }\n\n  get(path, handler) {\n    this.addRoute('get', path, handler);\n  }\n\n  post(path, handler) {\n    this.addRoute('post', path, handler);\n  }\n\n  put(path, handler) {\n    this.addRoute('put', path, handler);\n  }\n\n  delete(path, handler) {\n    this.addRoute('delete', path, handler);\n  }\n\n  patch(path, handler) {\n    this.addRoute('patch', path, handler);\n  }\n\n  options(path, handler) {\n    this.addRoute('options', path, handler);\n  }\n\n  trace(path, handler) {\n    this.addRoute('trace', path, handler);\n  }\n\n  head(path, handler) {\n    this.addRoute('head', path, handler);\n  }\n}"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Implement a Twitter HTTP client class in JavaScript that handles API requests to Twitter, including request construction, execution, and response processing with error handling and clock synchronization.\n\nClass Description: The TwitterHTTPClient class provides methods to interact with Twitter's REST API. It handles HTTP requests (GET/POST), manages authentication, processes responses, and maintains clock synchronization with Twitter's servers.\n\nAttributes:\n- config: [Object] - Configuration object containing API credentials and settings\n- _twitter_time_minus_local_time_ms: [Number] - Time difference between Twitter's server time and local time in milliseconds\n\nMethods:\n- constructor(config) -> [TwitterHTTPClient] - Initializes the client with configuration\n- request(method, path, params, callback) -> [Promise] - Makes HTTP requests to Twitter API\n- _doRestApiRequest(reqOpts, twitOptions, method, callback) -> [void] - Executes the actual HTTP request\n- _updateClockOffsetFromResponse(resp) -> [void] - Updates the clock offset based on Twitter's server time\n\nMethod Details:\n1. request(method, path, params, callback)\n   - Input:\n     - method: [String] - HTTP method ('GET' or 'POST')\n     - path: [String] - API endpoint path\n     - params: [Object] - Request parameters\n     - callback: [Function] - Callback function for handling response\n   - Output: [Promise] - Resolves with response data or rejects with error\n\n2. _doRestApiRequest(reqOpts, twitOptions, method, callback)\n   - Input:\n     - reqOpts: [Object] - Request options including URL and headers\n     - twitOptions: [Object] - Twitter-specific options\n     - method: [String] - HTTP method\n     - callback: [Function] - Callback for handling response\n   - Output: [void] - Calls callback with response data or error\n\n3. _updateClockOffsetFromResponse(resp)\n   - Input:\n     - resp: [Object] - HTTP response object\n   - Output: [void] - Updates internal clock offset value",
    "Canonical_solution": "var request = require('request');\nvar helpers = require('./helpers');\n\nclass TwitterHTTPClient {\n  constructor(config) {\n    this.config = config;\n    this._twitter_time_minus_local_time_ms = 0;\n  }\n\n  request(method, path, params, callback) {\n    var self = this;\n    assert(method == 'GET' || method == 'POST');\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    return new Promise(function (resolve, reject) {\n      var _returnErrorToUser = function (err) {\n        if (callback && typeof callback === 'function') {\n          callback(err, null, null);\n        }\n        reject(err);\n      }\n\n      self._buildReqOpts(method, path, params, false, function (err, reqOpts) {\n        if (err) {\n          _returnErrorToUser(err);\n          return;\n        }\n\n        var twitOptions = (params && params.twit_options) || {};\n\n        process.nextTick(function () {\n          self._doRestApiRequest(reqOpts, twitOptions, method, function (err, parsedBody, resp) {\n            self._updateClockOffsetFromResponse(resp);\n\n            if (self.config.trusted_cert_fingerprints) {\n              if (!resp.socket.authorized) {\n                var authErrMsg = resp.socket.authorizationError.toString();\n                var err = helpers.makeTwitError('The peer certificate was not signed; ' + authErrMsg);\n                _returnErrorToUser(err);\n                return;\n              }\n              var fingerprint = resp.socket.getPeerCertificate().fingerprint;\n              var trustedFingerprints = self.config.trusted_cert_fingerprints;\n              if (trustedFingerprints.indexOf(fingerprint) === -1) {\n                var errMsg = util.format('Certificate untrusted. Trusted fingerprints are: %s. Got fingerprint: %s.',\n                                         trustedFingerprints.join(','), fingerprint);\n                var err = new Error(errMsg);\n                _returnErrorToUser(err);\n                return;\n              }\n            }\n\n            if (callback && typeof callback === 'function') {\n              callback(err, parsedBody, resp);\n            }\n\n            resolve({ data: parsedBody, resp: resp });\n            return;\n          });\n        });\n      });\n    });\n  }\n\n  _doRestApiRequest(reqOpts, twitOptions, method, callback) {\n    var request_method = request[method.toLowerCase()];\n    var req = request_method(reqOpts);\n\n    var body = '';\n    var response = null;\n\n    var onRequestComplete = function () {\n      if (body !== '') {\n        try {\n          body = JSON.parse(body);\n        } catch (jsonDecodeError) {\n          var err = helpers.makeTwitError('JSON decode error: Twitter HTTP response body was not valid JSON');\n          err.statusCode = response ? response.statusCode: null;\n          err.allErrors.concat({error: jsonDecodeError.toString()});\n          callback(err, body, response);\n          return;\n        }\n      }\n\n      if (typeof body === 'object' && (body.error || body.errors)) {\n        var err = helpers.makeTwitError('Twitter API Error');\n        err.statusCode = response ? response.statusCode: null;\n        helpers.attachBodyInfoToError(err, body);\n        callback(err, body, response);\n        return;\n      }\n\n      callback(err, body, response);\n    }\n\n    req.on('response', function (res) {\n      response = res;\n      req.on('data', function (chunk) {\n        body += chunk.toString('utf8');\n      });\n      req.on('end', function () {\n        onRequestComplete();\n      });\n    });\n\n    req.on('error', function (err) {\n      if (twitOptions.retry &&\n          STATUS_CODES_TO_ABORT_ON.indexOf(err.statusCode) !== -1\n      ) {\n        self.request(method, path, params, callback);\n        return;\n      } else {\n        err.statusCode = null;\n        err.code = null;\n        err.allErrors = [];\n        helpers.attachBodyInfoToError(err, body);\n        callback(err, body, response);\n        return;\n      }\n    });\n  }\n\n  _updateClockOffsetFromResponse(resp) {\n    var self = this;\n    if (resp && resp.headers && resp.headers.date &&\n        new Date(resp.headers.date).toString() !== 'Invalid Date'\n    ) {\n      var twitterTimeMs = new Date(resp.headers.date).getTime();\n      self._twitter_time_minus_local_time_ms = twitterTimeMs - Date.now();\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class TwitterHTTPClient {\n  constructor(config) {\n    this.config = config;\n    this._twitter_time_minus_local_time_ms = 0;\n  }\n\n  async request(method, path, params, callback) {\n    return new Promise((resolve, reject) => {\n      try {\n        const reqOpts = {\n          url: `https://api.twitter.com/1.1/${path}`,\n          method,\n          headers: {\n            'User-Agent': 'TwitterAPI',\n            'Authorization': `Bearer ${this.config.bearer_token}`\n          },\n          params\n        };\n\n        const twitOptions = {\n          format: 'json'\n        };\n\n        this._doRestApiRequest(reqOpts, twitOptions, method, (err, data) => {\n          if (err) {\n            reject(err);\n          } else {\n            this._updateClockOffsetFromResponse(data);\n            resolve(data);\n          }\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  _doRestApiRequest(reqOpts, twitOptions, method, callback) {\n    const { url, method: httpMethod, headers, params } = reqOpts;\n\n    const requestOptions = {\n      url,\n      method: httpMethod,\n      headers,\n      params\n    };\n\n    fetch(requestOptions.url, {\n      method: requestOptions.method,\n      headers: requestOptions.headers,\n      body: requestOptions.method === 'POST' ? JSON.stringify(requestOptions.params) : undefined\n    })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        callback(null, data);\n      })\n      .catch(error => {\n        callback(error, null);\n      });\n  }\n\n  _updateClockOffsetFromResponse(resp) {\n    if (resp && resp.time) {\n      const twitterTime = new Date(resp.time).getTime();\n      const localTime = new Date().getTime();\n      this._twitter_time_minus_local_time_ms = twitterTime - localTime;\n    }\n  }\n}"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a URL expander class that can recursively resolve shortened URLs from various URL shortening services by making HTTP requests to their respective APIs or following redirects.\n\nClass Description: The URLExpander class provides functionality to expand shortened URLs by detecting the shortening service and using the appropriate API or HTTP HEAD request to follow redirects. It handles recursive expansion with depth limiting and cycle detection.\n\nAttributes:\n- map: [Object] - A mapping of URL shortening service names to their associated domains\n- timeout: [Number] - The timeout duration in milliseconds for HTTP requests\n- APIs: [Object] - Contains methods for handling different URL shortening services\n\nMethods:\n- constructor() -> [void] - Initializes the URL expander with default configuration including known URL shortening services and timeout\n- expand(args: [Object], callback: [Function]) -> [void] - The main method that initiates URL expansion\n  - args: Object containing:\n    - url: [String] - The URL to expand\n    - depth: [Number] - Current recursion depth (optional)\n    - seen: [Object] - Map of already seen URLs to prevent cycles (optional)\n  - callback: Function to be called with the result\n    - Receives modified args object containing:\n      - url: [String] - Final expanded URL\n      - err: [Error] - Any error encountered (optional)\n      - headers: [Object] - Response headers (optional)\n      - depth: [Number] - Final recursion depth\n      - seen: [Object] - Map of seen URLs\n\nThe class includes several internal API methods (isgd, googl, budurl, snipurl, generic) that handle specific URL shortening services or generic URL expansion through HTTP HEAD requests. These methods are not meant to be called directly but are used internally by the expand method.",
    "Canonical_solution": "var urllib = require('url');\nvar request = require('request');\nvar querystring = require('querystring');\n\nclass URLExpander {\n    constructor() {\n        this.map = {\n            isgd: ['is.gd'],\n            googl: ['goo.gl'],\n            budurl: ['budurl.com'],\n            snipurl: ['snipurl.com', 'snurl.com', 'snurl.com', 'cl.lk', 'snipr.com', 'sn.im']\n        };\n        this.timeout = 5000;\n    }\n\n    expand(args, callback) {\n        if(!args || !args.url || typeof(args.url) != 'string') return callback(args);\n\n        if(!args.depth) args.depth = 0;\n        if(!args.seen) args.seen = {};\n\n        if(args.depth > 5) return callback(args);\n\n        if(args.seen[args.url]) return callback(args);\n        args.seen[args.url] = true;\n\n        args.urlp = urllib.parse(args.url);\n        if(!args.urlp) return callback(args);\n\n        if(args.urlp.protocol != 'http:') return callback(args);\n\n        args.depth++;\n\n        try {\n            for (var k in this.map) {\n                if (this.map[k].indexOf(args.urlp.host) > -1) return this.APIs[k](args, callback);\n            }\n            return this.APIs.generic(args, callback);\n        } catch(E) {\n            args.err = E;\n            return callback(args);\n        }\n    }\n\n    APIs = {\n        isgd: function (args, callback) {\n            var url = 'http://is.gd/forward.php?' + querystring.stringify({format: 'json', shorturl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.url) {\n                    args.url = body.url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        googl: function (args, callback) {\n            var url = 'https://www.googleapis.com/urlshortener/v1/url?'+querystring.stringify({shortUrl: args.urlp.href});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.longUrl) {\n                    args.url = body.longUrl;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        budurl: function (args, callback) {\n            var url = 'http://budurl.com/api/v1/budurls/expand?'+querystring.stringify({budurl: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout, json:true}, function(err, res, body){\n                if(body && body.long_url) {\n                    args.url = body.long_url;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        snipurl: function (args, callback) {\n            var url = 'http://snipurl.com/resolveurl?'+querystring.stringify({id: args.urlp.pathname.replace('/', '')});\n            request.get({url:url, timeout:this.timeout}, function(err, res, body){\n                if(body) {\n                    args.url = body;\n                    return this.expand(args, callback);\n                }\n                return this.APIs.generic(args, callback);\n            }.bind(this));\n        },\n\n        generic: function (args, callback) {\n            var headers = (args.urlp.host === \"t.co\")?{}:{'User-Agent': 'AppleWebKit/525.13 (KHTML, like Gecko) Safari/525.13.'};\n            if(args.headers && args.headers['set-cookie']) headers['Cookie'] = args.headers['set-cookie'];\n            request.head({url:args.url, headers:headers, followRedirect:false}, function(err, res){\n                if(err) { args.err = err; return callback(args); }\n                if (res.statusCode === 301 || res.statusCode === 302 || res.statusCode === 307) {\n                    var newup = urllib.parse(urllib.resolve(args.urlp,urllib.parse(res.headers.location)));\n                    if (!newup || !newup.pathname) return callback(args);\n                    if(newup.pathname.indexOf(\"login\") > 0 && newup.pathname.indexOf(\"login\") < 10) return callback(args);\n                    args.url = urllib.format(newup);\n                    args.headers = res.headers;\n                    return this.expand(args, callback);\n                }\n                args.headers = res.headers;\n                return callback(args);\n            }.bind(this));\n        }\n    };\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 95,
    "wrong_result": "class URLExpander {\n  constructor() {\n    this.map = {\n      isgd: 'is.gd',\n      googl: 'goo.gl',\n      budurl: 'budurl.com',\n      snipurl: 'snipurl.com',\n      generic: 'generic'\n    };\n    this.timeout = 10000;\n    this.APIs = {\n      isgd: this.isgd.bind(this),\n      googl: this.googl.bind(this),\n      budurl: this.budurl.bind(this),\n      snipurl: this.snipurl.bind(this),\n      generic: this.generic.bind(this)\n    };\n  }\n\n  expand(args, callback) {\n    const { url, depth = 0, seen = {} } = args;\n    if (depth > 10) return callback({ ...args, err: new Error('Maximum recursion depth exceeded') });\n    if (seen[url]) return callback({ ...args, err: new Error('Cycle detected') });\n    seen[url] = true;\n\n    const service = this.getService(url);\n    if (!service) return this.generic({ ...args, seen }, callback);\n\n    this.APIs[service]({ ...args, seen }, (result) => {\n      if (result.err) return callback({ ...args, ...result });\n      if (result.url === url) return callback({ ...args, ...result });\n      this.expand({ ...result, depth: depth + 1, seen }, callback);\n    });\n  }\n\n  getService(url) {\n    for (const [service, domain] of Object.entries(this.map)) {\n      if (url.includes(domain)) return service;\n    }\n    return null;\n  }\n\n  isgd(args, callback) {\n    const { url, seen } = args;\n    fetch(`https://is.gd/shorturl.php?format=json&url=${encodeURIComponent(url)}`, { method: 'GET', timeout: this.timeout })\n      .then(res => res.json())\n      .then(data => {\n        if (data.error) return callback({ ...args, err: new Error(data.error) });\n        callback({ ...args, url: data.url });\n      })\n      .catch(err => callback({ ...args, err }));\n  }\n\n  googl(args, callback) {\n    const { url, seen } = args;\n    fetch(`https://www.googleapis.com/urlshortener/v1/url?key=YOUR_API_KEY`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ longUrl: url }),\n      timeout: this.timeout\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.error) return callback({ ...args, err: new Error(data.error.message) });\n        callback({ ...args, url: data.id });\n      })\n      .catch(err => callback({ ...args, err }));\n  }\n\n  budurl(args, callback) {\n    const { url, seen } = args;\n    fetch(`https://api.budurl.com/v1/expand?url=${encodeURIComponent(url)}`, { method: 'GET', timeout: this.timeout })\n      .then(res => res.json())\n      .then(data => {\n        if (data.error) return callback({ ...args, err: new Error(data.error) });\n        callback({ ...args, url: data.long_url });\n      })\n      .catch(err => callback({ ...args, err }));\n  }\n\n  snipurl(args, callback) {\n    const { url, seen } = args;\n    fetch(`https://snipurl.com/api/expand?url=${encodeURIComponent(url)}`, { method: 'GET', timeout: this.timeout })\n      .then(res => res.json())\n      .then(data => {\n        if (data.error) return callback({ ...args, err: new Error(data.error) });\n        callback({ ...args, url: data.long_url });\n      })\n      .catch(err => callback({ ...args, err }));\n  }\n\n  generic(args, callback) {\n    const { url, seen } = args;\n    fetch(url, { method: 'HEAD', timeout: this.timeout })\n      .then(res => {\n        const location = res.headers.get('Location');\n        if (location) {\n          this.expand({ url: location, depth: args.depth + 1, seen }, callback);\n        } else {\n          callback({ ...args, url, headers: res.headers });\n        }\n      })\n      .catch(err => callback({ ...args, err }));\n  }\n}"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a function that makes an HTTP request to a specified URL with custom headers and handles the response.\n\nFunction Description: The function `makeHttpRequest` performs an HTTP GET request to a specified URL with custom headers and decompresses gzip-encoded responses. It uses the `request` module to send the request and handles the response through a callback function that checks for errors and logs the response body if successful.\n\nInput: None (The URL and headers are hardcoded within the function.)\n\nOutput: None (The function logs the response body to the console if the request is successful.)",
    "Canonical_solution": "function makeHttpRequest() {\n    var request = require('request');\n    \n    var headers = {\n        'Accept-Encoding': 'gzip, deflate, sdch',\n        'Accept-Language': 'en-US,en;q=0.8',\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36',\n        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n        'Referer': 'http://www.wikipedia.org/',\n        'Cookie': 'GeoIP=US:Albuquerque:35.1241:-106.7675:v4; uls-previous-languages=%5B%22en%22%5D; mediaWiki.user.sessionId=VaHaeVW3m0ymvx9kacwshZIDkv8zgF9y; centralnotice_buckets_by_campaign=%7B%22C14_enUS_dsk_lw_FR%22%3A%7B%22val%22%3A%220%22%2C%22start%22%3A1412172000%2C%22end%22%3A1422576000%7D%2C%22C14_en5C_dec_dsk_FR%22%3A%7B%22val%22%3A3%2C%22start%22%3A1417514400%2C%22end%22%3A1425290400%7D%2C%22C14_en5C_bkup_dsk_FR%22%3A%7B%22val%22%3A1%2C%22start%22%3A1417428000%2C%22end%22%3A1425290400%7D%7D; centralnotice_bannercount_fr12=22; centralnotice_bannercount_fr12-wait=14',\n        'Connection': 'keep-alive'\n    };\n\n    var options = {\n        url: 'http://localhost:28139/',\n        headers: headers,\n        gzip: true\n    };\n\n    function callback(error, response, body) {\n        if (!error && response.statusCode == 200) {\n            console.log(body);\n        }\n    }\n\n    request(options, callback);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 95,
    "wrong_result": "function makeHttpRequest() {\n  const request = require('request');\n  const url = 'https://example.com';\n  const headers = {\n    'User-Agent': 'CustomUserAgent',\n    'Accept-Encoding': 'gzip'\n  };\n\n  request({\n    url: url,\n    headers: headers,\n    gzip: true\n  }, function (error, response, body) {\n    if (error) {\n      console.error('Error:', error);\n    } else if (response.statusCode !== 200) {\n      console.error('Status Code:', response.statusCode);\n    } else {\n      console.log('Response Body:', body);\n    }\n  });\n}"
  }
]