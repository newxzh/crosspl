[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a Java class that implements an ActiveMQ message consumer capable of receiving messages from a specified queue, processing different message types (TextMessage and BytesMessage), and handling connection exceptions.\n\nClass Description: The ActiveMqConsumer class implements Runnable and ExceptionListener interfaces to asynchronously consume messages from an ActiveMQ broker while handling connection exceptions. It manages the JMS connection lifecycle and provides methods to start/stop the consumer.\n\nAttributes:\n- connection: Connection - JMS connection to the ActiveMQ broker\n- session: Session - JMS session for message processing\n- consumer: MessageConsumer - JMS message consumer for receiving messages\n- remoteUri: String - URI of the ActiveMQ broker\n- queueName: String - Name of the queue to consume messages from\n\nMethods:\n- ActiveMqConsumer(String remoteUri, String queueName) -> None - Constructor that initializes the broker URI and queue name\n- start() -> void - Creates connection factory, establishes connection, creates session and consumer\n- stop() -> void - Closes consumer, session and connection resources\n- run() -> void - Continuously receives and processes messages (TextMessage/BytesMessage)\n- onException(JMSException e) -> void - Exception handler that stops the consumer on connection errors\n- getConnection() -> Connection - Returns the JMS connection\n- getSession() -> Session - Returns the JMS session\n- getConsumer() -> MessageConsumer - Returns the message consumer",
    "Canonical_solution": "import javax.jms.BytesMessage;\nimport javax.jms.Connection;\nimport javax.jms.Destination;\nimport javax.jms.ExceptionListener;\nimport javax.jms.JMSException;\nimport javax.jms.Message;\nimport javax.jms.MessageConsumer;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport com.sitewhere.spi.SiteWhereException;\n\npublic class ActiveMqConsumer implements Runnable, ExceptionListener {\n\n    private Connection connection;\n    private Session session;\n    private MessageConsumer consumer;\n    private String remoteUri;\n    private String queueName;\n\n    public ActiveMqConsumer(String remoteUri, String queueName) {\n        this.remoteUri = remoteUri;\n        this.queueName = queueName;\n    }\n\n    public void start() throws SiteWhereException {\n        try {\n            ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(remoteUri);\n            this.connection = connectionFactory.createConnection();\n            this.connection.setExceptionListener(this);\n            this.connection.start();\n            this.session = this.connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n            Destination destination = this.session.createQueue(queueName);\n            this.consumer = this.session.createConsumer(destination);\n        } catch (Exception e) {\n            throw new SiteWhereException(\"Error starting ActiveMQ consumer.\", e);\n        }\n    }\n\n    public void stop() throws SiteWhereException {\n        try {\n            this.consumer.close();\n            this.session.close();\n            this.connection.close();\n        } catch (Exception e) {\n            throw new SiteWhereException(\"Error shutting down ActiveMQ consumer.\", e);\n        }\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            try {\n                Message message = consumer.receive();\n                if (message == null) {\n                    break;\n                }\n                if (message instanceof TextMessage) {\n                    TextMessage textMessage = (TextMessage) message;\n                    byte[] payload = textMessage.getText().getBytes();\n                    // Process payload here\n                } else if (message instanceof BytesMessage) {\n                    BytesMessage bytesMessage = (BytesMessage) message;\n                    byte[] buffer = new byte[(int) bytesMessage.getBodyLength()];\n                    // Process buffer here\n                }\n            } catch (Throwable e) {\n                return;\n            }\n        }\n    }\n\n    @Override\n    public void onException(JMSException e) {\n        try {\n            stop();\n        } catch (SiteWhereException e1) {\n        }\n    }\n\n    protected Connection getConnection() {\n        return connection;\n    }\n\n    protected Session getSession() {\n        return session;\n    }\n\n    protected MessageConsumer getConsumer() {\n        return consumer;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 39,
    "right_result": "```java\nimport javax.jms.*;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class ActiveMqConsumer implements Runnable, ExceptionListener {\n    private Connection connection;\n    private Session session;\n    private MessageConsumer consumer;\n    private String remoteUri;\n    private String queueName;\n\n    public ActiveMqConsumer(String remoteUri, String queueName) {\n        this.remoteUri = remoteUri;\n        this.queueName = queueName;\n    }\n\n    public void start() {\n        try {\n            ConnectionFactory factory = new ActiveMQConnectionFactory(remoteUri);\n            connection = factory.createConnection();\n            connection.setExceptionListener(this);\n            connection.start();\n            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n            Destination queue = session.createQueue(queueName);\n            consumer = session.createConsumer(queue);\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (consumer != null) consumer.close();\n            if (session != null) session.close();\n            if (connection != null) connection.close();\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void run() {\n        try {\n            while (true) {\n                Message message = consumer.receive();\n                if (message instanceof TextMessage) {\n                    TextMessage textMsg = (TextMessage) message;\n                    System.out.println(\"Received text: \" + textMsg.getText());\n                } else if (message instanceof BytesMessage) {\n                    BytesMessage bytesMsg = (BytesMessage) message;\n                    byte[] bytes = new byte[(int) bytesMsg.getBodyLength()];\n                    bytesMsg.readBytes(bytes);\n                    System.out.println(\"Received bytes: \" + new String(bytes));\n                }\n            }\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onException(JMSException e) {\n        System.err.println(\"Connection exception: \" + e.getMessage());\n        stop();\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n    public Session getSession() {\n        return session;\n    }\n\n    public MessageConsumer getConsumer() {\n        return consumer;\n    }\n}\n```"
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Create a Java class that provides read-only access to file contents using MemorySegment and FileChannel for efficient memory-mapped file operations.\n\nClass Description: MemorySegmentReaderSupplier is a utility class that implements ReaderSupplier interface, designed to provide memory-mapped file reading capabilities. It uses Java NIO's FileChannel to map a file into memory as a MemorySegment, allowing efficient read operations. The class manages memory resources through an Arena and automatically handles resource cleanup.\n\nAttributes:\n- arena: Arena - Manages the lifecycle of the memory segment and ensures proper cleanup\n- memory: MemorySegment - The memory-mapped representation of the file content\n\nMethods:\n- Constructor: MemorySegmentReaderSupplier(Path path) throws IOException - Initializes the reader by opening the specified file and mapping it into memory. Throws IOException if file operations fail.\n- get: get() -> MemorySegmentReader - Returns a new MemorySegmentReader instance for accessing the memory-mapped file content\n- close: close() -> void - Releases all allocated resources by closing the arena and unmapping the memory segment",
    "Canonical_solution": "import java.io.IOException;\nimport java.lang.foreign.Arena;\nimport java.lang.foreign.MemorySegment;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class MemorySegmentReaderSupplier implements ReaderSupplier {\n    private final Arena arena;\n    private final MemorySegment memory;\n\n    public MemorySegmentReaderSupplier(Path path) throws IOException {\n        this.arena = Arena.ofShared();\n        try (var ch = FileChannel.open(path, StandardOpenOption.READ)) {\n            this.memory = ch.map(FileChannel.MapMode.READ_ONLY, 0L, ch.size(), arena);\n        } catch (Throwable e) {\n            arena.close();\n            if (e instanceof IOException) {\n                throw (IOException) e;\n            }\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public MemorySegmentReader get() {\n        return new MemorySegmentReader(memory);\n    }\n\n    @Override\n    public void close() {\n        arena.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.lang.foreign.Arena;\nimport java.lang.foreign.MemorySegment;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class MemorySegmentReaderSupplier implements ReaderSupplier {\n    private final Arena arena;\n    private final MemorySegment memory;\n    private final FileChannel channel;\n\n    public MemorySegmentReaderSupplier(Path path) throws IOException {\n        this.arena = Arena.ofAutoCloseable();\n        this.channel = FileChannel.open(path, StandardOpenOption.READ);\n        long size = channel.size();\n        MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_ONLY, 0, size);\n        this.memory = MemorySegment.ofBuffer(buffer);\n    }\n\n    @Override\n    public MemorySegmentReader get() {\n        return new MemorySegmentReader(memory);\n    }\n\n    @Override\n    public void close() throws IOException {\n        arena.close();\n        channel.close();\n    }\n}\n```"
  },
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests for sending debug information to a server, including handling redirects and SSL connections.\n\nClass Description: HttpDebugIdSender is a utility class designed to send debug information to a specified server URL using HTTP POST requests. It handles JSON payload construction, SSL connections (when needed), and follows redirects if necessary. The class includes error logging and proper resource cleanup.\n\nAttributes:\n- distinctId: String - Unique identifier for the debug session\n- infoId: String - Additional information ID to be included in the URL\n- serverUrl: String - Base URL of the server to which debug information will be sent\n\nMethods:\n- HttpDebugIdSender(String serverUrl, String distinctId, String infoId) -> None - Constructor that initializes the class with server URL, distinct ID, and info ID\n- send() -> None - Initiates the HTTP request to send debug information\n- sendHttpRequest(String serverUrl, boolean isRedirects) -> None - Internal method that handles the actual HTTP request, including connection setup, payload sending, and response handling\n- closeStream(ByteArrayOutputStream out, OutputStream out2, BufferedOutputStream bout, HttpURLConnection connection) -> None - Helper method to safely close all open streams and connections",
    "Canonical_solution": "import android.content.Context;\nimport com.sensorsdata.analytics.android.sdk.SALog;\nimport com.sensorsdata.analytics.android.sdk.SensorsDataAPI;\nimport com.sensorsdata.analytics.android.sdk.util.NetworkUtils;\nimport com.sensorsdata.analytics.android.sdk.util.TimeUtils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nimport javax.net.ssl.HttpsURLConnection;\n\npublic class HttpDebugIdSender {\n    private String distinctId;\n    private String infoId;\n    private String serverUrl;\n\n    public HttpDebugIdSender(String serverUrl, String distinctId, String infoId) {\n        this.distinctId = distinctId;\n        this.infoId = infoId;\n        this.serverUrl = serverUrl;\n    }\n\n    public void send() {\n        sendHttpRequest(serverUrl, false);\n    }\n\n    private void sendHttpRequest(String serverUrl, boolean isRedirects) {\n        ByteArrayOutputStream out = null;\n        OutputStream out2 = null;\n        BufferedOutputStream bout = null;\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(String.format(serverUrl + \"&info_id=%s\", infoId));\n            SALog.info(\"HttpDebugIdSender\", String.format(\"DebugMode URL:%s\", url), null);\n            connection = (HttpURLConnection) url.openConnection();\n            if (connection == null) {\n                SALog.info(\"HttpDebugIdSender\", String.format(\"can not connect %s,shouldn't happen\", url.toString()), null);\n                return;\n            }\n            SAConfigOptions configOptions = SensorsDataAPI.getConfigOptions();\n            if (configOptions != null && configOptions.getSSLSocketFactory() != null\n                    && connection instanceof HttpsURLConnection) {\n                ((HttpsURLConnection) connection).setSSLSocketFactory(configOptions.getSSLSocketFactory());\n            }\n            connection.setInstanceFollowRedirects(false);\n            out = new ByteArrayOutputStream();\n            OutputStreamWriter writer = new OutputStreamWriter(out);\n            String requestBody = \"{\\\"distinct_id\\\": \\\"\" + distinctId + \"\\\"}\";\n            writer.write(requestBody);\n            writer.flush();\n            SALog.info(\"HttpDebugIdSender\", String.format(\"DebugMode request body : %s\", requestBody), null);\n            connection.setDoOutput(true);\n            connection.setUseCaches(false);\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Content-type\", \"text/plain\");\n\n            out2 = connection.getOutputStream();\n            bout = new BufferedOutputStream(out2);\n            bout.write(out.toString().getBytes(\"UTF-8\"));\n            bout.flush();\n            out.close();\n            int responseCode = connection.getResponseCode();\n            SALog.info(\"HttpDebugIdSender\", String.format(TimeUtils.SDK_LOCALE, \"DebugMode ResponseCode: %d\", responseCode), null);\n            if (!isRedirects && NetworkUtils.needRedirects(responseCode)) {\n                String location = NetworkUtils.getLocation(connection, serverUrl);\n                if (!TextUtils.isEmpty(location)) {\n                    closeStream(out, out2, bout, connection);\n                    sendHttpRequest(location, true);\n                }\n            }\n        } catch (Exception e) {\n            SALog.printStackTrace(e);\n        } finally {\n            closeStream(out, out2, bout, connection);\n        }\n    }\n\n    private void closeStream(ByteArrayOutputStream out, OutputStream out2, BufferedOutputStream bout, HttpURLConnection connection) {\n        if (out != null) {\n            try {\n                out.close();\n            } catch (Exception e) {\n                SALog.printStackTrace(e);\n            }\n        }\n        if (out2 != null) {\n            try {\n                out2.close();\n            } catch (Exception e) {\n                SALog.printStackTrace(e);\n            }\n        }\n        if (bout != null) {\n            try {\n                bout.close();\n            } catch (Exception e) {\n                SALog.printStackTrace(e);\n            }\n        }\n        if (connection != null) {\n            try {\n                connection.disconnect();\n            } catch (Exception e) {\n                SALog.printStackTrace(e);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "import java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport org.json.JSONObject;\n\npublic class HttpDebugIdSender {\n    private final String distinctId;\n    private final String infoId;\n    private final String serverUrl;\n\n    public HttpDebugIdSender(String serverUrl, String distinctId, String infoId) {\n        this.serverUrl = serverUrl;\n        this.distinctId = distinctId;\n        this.infoId = infoId;\n    }\n\n    public void send() {\n        String fullUrl = serverUrl + \"?infoId=\" + infoId;\n        sendHttpRequest(fullUrl, true);\n    }\n\n    private void sendHttpRequest(String serverUrl, boolean isRedirects) {\n        HttpURLConnection connection = null;\n        OutputStream out = null;\n        BufferedOutputStream bout = null;\n        try {\n            URL url = new URL(serverUrl);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setInstanceFollowRedirects(isRedirects);\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n            connection.setRequestProperty(\"Accept\", \"application/json\");\n            connection.setDoOutput(true);\n\n            JSONObject json = new JSONObject();\n            json.put(\"distinctId\", distinctId);\n            json.put(\"infoId\", infoId);\n            String jsonStr = json.toString();\n            out = connection.getOutputStream();\n            bout = new BufferedOutputStream(out);\n            bout.write(jsonStr.getBytes(\"UTF-8\"));\n            bout.flush();\n\n            int responseCode = connection.getResponseCode();\n            if (responseCode >= 400) {\n                System.err.println(\"HTTP error code: \" + responseCode);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            closeStream(null, out, bout, connection);\n        }\n    }\n\n    private void closeStream(ByteArrayOutputStream out, OutputStream out2, BufferedOutputStream bout, HttpURLConnection connection) {\n        try {\n            if (bout != null) bout.close();\n            if (out2 != null) out2.close();\n            if (out != null) out.close();\n            if (connection != null) connection.disconnect();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create a Java class that demonstrates how to make an HTTP request using HttpURLConnection, including setting connection timeouts and request headers, and handling the response.\n\nClass Description: The CleartextHttpCredentialsTest class is designed to test basic HTTP connectivity with a target URL. It demonstrates how to establish a connection, set timeouts, add request headers, and retrieve response information. The class focuses on proper resource cleanup after the connection is used.\n\nAttributes:\n- TARGET: [String] - A constant storing the URL to which the HTTP request will be made\n\nMethods:\n- runTest: [runTest]() -> [void] - Executes the HTTP request to the target URL. Sets connection timeouts, adds an Authorization header, retrieves the response code and message, and ensures proper connection cleanup. Throws Exception if any step fails.",
    "Canonical_solution": "import java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class CleartextHttpCredentialsTest {\n\n  private static final String TARGET = \"http://www.google.com\";\n\n  public void runTest() throws Exception {\n    HttpURLConnection connection = null;\n    try {\n      connection = (HttpURLConnection) new URL(TARGET).openConnection();\n      connection.setConnectTimeout(20000);\n      connection.setReadTimeout(20000);\n      connection.setRequestProperty(\"Authorization\", \"value\");\n      int responseCode = connection.getResponseCode();\n      String responseMessage = connection.getResponseMessage();\n    } finally {\n      if (connection != null) {\n        connection.disconnect();\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "import java.io.*;\nimport java.net.*;\n\npublic class CleartextHttpCredentialsTest {\n    private static final String TARGET = \"http://example.com\";\n\n    public void runTest() throws Exception {\n        URL url = new URL(TARGET);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        try {\n            conn.setConnectTimeout(5000);\n            conn.setReadTimeout(5000);\n            conn.setRequestProperty(\"Authorization\", \"Basic dXNlcjpwYXNz\");\n            conn.setRequestMethod(\"GET\");\n            conn.connect();\n            int responseCode = conn.getResponseCode();\n            String responseMessage = conn.getResponseMessage();\n            System.out.println(\"Response Code: \" + responseCode);\n            System.out.println(\"Response Message: \" + responseMessage);\n\n            try (InputStream is = conn.getInputStream()) {\n                byte[] buffer = new byte[1024];\n                while (is.read(buffer) != -1) {\n                }\n            } catch (IOException e) {\n                try (InputStream es = conn.getErrorStream()) {\n                    byte[] buffer = new byte[1024];\n                    while (es.read(buffer) != -1) {\n                    }\n                }\n            }\n        } finally {\n            conn.disconnect();\n        }\n    }\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Implement a Java class that handles HTTP downloads with support for redirects and user-agent customization.\n\nClass Description: The HttpDownloader class provides functionality to download files from HTTP URLs while handling redirects (up to a maximum limit) and allowing customization of the User-Agent header. It includes logging capabilities for tracking download progress and errors.\n\nAttributes:\n- logger: Logger - SLF4J logger for tracking download operations and errors\n- MAXIMUM_REDIRECTS: int - Maximum number of redirects to follow (constant value 8)\n\nMethods:\n- download(String targetUrlString, Path path, String userAgent) -> void - Main method to initiate download from a URL to a specified path with a custom user agent. Throws IOException for network or file operation failures.\n- getDownloadedOrNextUrl(String urlString, Path path, String userAgent) -> Optional<String> - Helper method that processes a single URL request, either downloading the content or returning the next URL in case of redirect. Throws IOException for network or file operation failures. Returns Optional.empty() if download was successful, or Optional containing the next URL if redirect occurred.",
    "Canonical_solution": "import java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Optional;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nclass HttpDownloader {\n    private static final Logger logger = LoggerFactory.getLogger(HttpDownloader.class);\n    private static final int MAXIMUM_REDIRECTS = 8;\n\n    public static void download(final String targetUrlString, final Path path, final String userAgent) throws IOException {\n        logger.info(\"Started download from: \" + targetUrlString);\n\n        String urlString = targetUrlString;\n        for (int i = 0; i < MAXIMUM_REDIRECTS; ++i) {\n            final Optional<String> nextUrlString = getDownloadedOrNextUrl(urlString, path, userAgent);\n            if (!nextUrlString.isPresent()) {\n                return;\n            }\n            logger.info(\"Redirected to: \" + nextUrlString.get());\n            urlString = nextUrlString.get();\n        }\n        throw new IOException(\"Too many redirects from: \" + targetUrlString);\n    }\n\n    private static Optional<String> getDownloadedOrNextUrl(final String urlString, final Path path, final String userAgent)\n            throws IOException {\n        logger.debug(\"Requesting GET {}\", urlString);\n        final URL url;\n        try {\n            url = new URL(urlString);\n        } catch (final MalformedURLException ex) {\n            throw new IOException(\"Invalid URL: \" + urlString, ex);\n        }\n\n        final HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        try {\n            connection.setInstanceFollowRedirects(false);\n            connection.setRequestMethod(\"GET\");\n            connection.setRequestProperty(\"Accept\", \"*/*\");\n            connection.setRequestProperty(\"User-Agent\", userAgent);\n            connection.connect();\n\n            final int statusCode = connection.getResponseCode();\n            logger.debug(\"Received HTTP status code {} from GET {}\", statusCode, urlString);\n            switch (statusCode) {\n                case HttpURLConnection.HTTP_MOVED_PERM:\n                case HttpURLConnection.HTTP_MOVED_TEMP:\n                    final String location = connection.getHeaderField(\"Location\");\n                    if (location == null) {\n                        throw new IOException(\"No Location header for HTTP status code \" + statusCode);\n                    }\n                    return Optional.of(location);\n                case HttpURLConnection.HTTP_OK:\n                    final InputStream downloadStream = connection.getInputStream();\n                    logger.info(\"Downloading from {} into {}\", urlString, path.toString());\n                    Files.copy(downloadStream, path, StandardCopyOption.REPLACE_EXISTING);\n                    logger.info(\"Downloaded\");\n                    return Optional.empty();\n                default:\n                    final String responseMessage;\n                    try {\n                        responseMessage = connection.getResponseMessage();\n                    } catch (final IOException ex) {\n                        throw new IOException(\"Unexpected HTTP status code \" + statusCode, ex);\n                    }\n                    throw new IOException(\"Unexpected HTTP status code \" + statusCode + \" with message: \" + responseMessage);\n            }\n        } finally {\n            connection.disconnect();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.file.Path;\nimport java.util.Optional;\n\npublic class HttpDownloader {\n    private static final Logger logger = LoggerFactory.getLogger(HttpDownloader.class);\n    private static final int MAXIMUM_REDIRECTS = 8;\n\n    public void download(String targetUrlString, Path path, String userAgent) throws IOException {\n        logger.info(\"Starting download from {}\", targetUrlString);\n        String currentUrl = targetUrlString;\n        int redirectCount = 0;\n\n        while (true) {\n            Optional<String> nextUrl = getDownloadedOrNextUrl(currentUrl, path, userAgent);\n            if (!nextUrl.isPresent()) {\n                logger.info(\"Download completed to {}\", path);\n                break;\n            }\n\n            if (redirectCount >= MAXIMUM_REDIRECTS) {\n                throw new IOException(\"Exceeded maximum redirects: \" + MAXIMUM_REDIRECTS);\n            }\n\n            logger.info(\"Redirecting to {}\", nextUrl.get());\n            currentUrl = nextUrl.get();\n            redirectCount++;\n        }\n    }\n\n    private Optional<String> getDownloadedOrNextUrl(String urlString, Path path, String userAgent) throws IOException {\n        try {\n            URL url = new URL(urlString);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            try {\n                connection.setRequestProperty(\"User-Agent\", userAgent);\n                int responseCode = connection.getResponseCode();\n\n                if (responseCode == 200) {\n                    try (InputStream is = connection.getInputStream();\n                         FileOutputStream fos = new FileOutputStream(path.toFile())) {\n                        byte[] buffer = new byte[4096];\n                        int bytesRead;\n                        while ((bytesRead = is.read(buffer)) != -1) {\n                            fos.write(buffer, 0, bytesRead);\n                        }\n                    }\n                    logger.info(\"Downloaded content from {}\", urlString);\n                    return Optional.empty();\n                } else if (responseCode / 100 == 3) {\n                    String location = connection.getHeaderField(\"Location\");\n                    if (location == null) {\n                        throw new IOException(\"Redirect location not found\");\n                    }\n                    URL nextUrl = new URL(url, location);\n                    logger.info(\"Redirect detected to {}\", nextUrl.toString());\n                    return Optional.of(nextUrl.toString());\n                } else {\n                    throw new IOException(\"HTTP error code: \" + responseCode);\n                }\n            } finally {\n                connection.disconnect();\n            }\n        } catch (MalformedURLException e) {\n            throw new IOException(\"Invalid URL: \" + urlString, e);\n        }\n    }\n}"
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Create a utility class for handling various HTTP operations including GET, POST requests, file downloads, and form submissions.\n\nClass Description: WebUtils is a utility class that provides static methods for performing common HTTP operations. It handles connection management, request configuration, and response processing.\n\nMethods:\n\nMethod1: getBody(String reqURL) -> String - Performs a GET request to the specified URL and returns the response body as a string.\nMethod2: getJson(String reqURL) -> JsonNode - Performs a GET request to the specified URL and parses the JSON response into a JsonNode object.\nMethod3: downloadFile(String reqURL, String fileLocation) -> void - Downloads a file from the specified URL and saves it to the given file location.\nMethod4: post(String reqURL, String postContent) -> String - Performs a POST request with plain text content to the specified URL and returns the response body.\nMethod5: postForm(String reqURL, Map<String, String> fields) -> String - Performs a form submission (application/x-www-form-urlencoded) to the specified URL with the given form fields and returns the response body.\nMethod6: getLineStream(String reqURL) -> Stream<String> - Performs a GET request to the specified URL and returns the response as a stream of lines.\nMethod7: getUserAgent() -> String - Returns a formatted User-Agent string for HTTP requests.\nMethod8: connectionToString(HttpURLConnection con) -> String - Helper method that reads the response from an HttpURLConnection and converts it to a string.",
    "Canonical_solution": "import com.fasterxml.jackson.databind.JsonNode;\nimport org.geysermc.geyser.GeyserImpl;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Map;\nimport java.util.stream.Stream;\n\npublic class WebUtils {\n\n    public static String getBody(String reqURL) {\n        try {\n            URL url = new URL(reqURL);\n            HttpURLConnection con = (HttpURLConnection) url.openConnection();\n            con.setRequestMethod(\"GET\");\n            con.setRequestProperty(\"User-Agent\", getUserAgent());\n            con.setConnectTimeout(10000);\n            con.setReadTimeout(10000);\n\n            return connectionToString(con);\n        } catch (Exception e) {\n            return e.getMessage();\n        }\n    }\n\n    public static JsonNode getJson(String reqURL) throws IOException {\n        HttpURLConnection con = (HttpURLConnection) new URL(reqURL).openConnection();\n        con.setRequestProperty(\"User-Agent\", getUserAgent());\n        con.setConnectTimeout(10000);\n        con.setReadTimeout(10000);\n        return GeyserImpl.JSON_MAPPER.readTree(con.getInputStream());\n    }\n\n    public static void downloadFile(String reqURL, String fileLocation) {\n        try {\n            HttpURLConnection con = (HttpURLConnection) new URL(reqURL).openConnection();\n            con.setRequestProperty(\"User-Agent\", getUserAgent());\n            InputStream in = con.getInputStream();\n            Files.copy(in, Paths.get(fileLocation), StandardCopyOption.REPLACE_EXISTING);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Unable to download and save file: \" + fileLocation + \" (\" + reqURL + \")\", e);\n        }\n    }\n\n    public static String post(String reqURL, String postContent) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"POST\");\n        con.setRequestProperty(\"Content-Type\", \"text/plain\");\n        con.setRequestProperty(\"User-Agent\", getUserAgent());\n        con.setDoOutput(true);\n\n        OutputStream out = con.getOutputStream();\n        out.write(postContent.getBytes(StandardCharsets.UTF_8));\n        out.close();\n\n        return connectionToString(con);\n    }\n\n    private static String connectionToString(HttpURLConnection con) throws IOException {\n        con.getResponseCode();\n\n        InputStream inputStream = con.getErrorStream();\n        if (inputStream == null) {\n            inputStream = con.getInputStream();\n        }\n\n        StringBuilder content = new StringBuilder();\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(inputStream))) {\n            String inputLine;\n\n            while ((inputLine = in.readLine()) != null) {\n                content.append(inputLine);\n                content.append(\"\\n\");\n            }\n\n            con.disconnect();\n        }\n\n        return content.toString();\n    }\n\n    public static String postForm(String reqURL, Map<String, String> fields) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"POST\");\n        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        con.setRequestProperty(\"User-Agent\", getUserAgent());\n        con.setDoOutput(true);\n\n        try (OutputStream out = con.getOutputStream()) {\n            for (Map.Entry<String, String> field : fields.entrySet()) {\n                out.write((field.getKey() + \"=\" + URLEncoder.encode(field.getValue(), StandardCharsets.UTF_8) + \"&\").getBytes(StandardCharsets.UTF_8));\n            }\n        }\n\n        return connectionToString(con);\n    }\n\n    public static Stream<String> getLineStream(String reqURL) {\n        try {\n            URL url = new URL(reqURL);\n            HttpURLConnection con = (HttpURLConnection) url.openConnection();\n            con.setRequestMethod(\"GET\");\n            con.setRequestProperty(\"User-Agent\", getUserAgent());\n            con.setConnectTimeout(10000);\n            con.setReadTimeout(10000);\n\n            return connectionToString(con).lines();\n        } catch (Exception e) {\n            GeyserImpl.getInstance().getLogger().error(\"Error while trying to get a stream from \" + reqURL, e);\n            return Stream.empty();\n        }\n    }\n\n    public static String getUserAgent() {\n        return \"Geyser-\" + GeyserImpl.getInstance().getPlatformType().platformName() + \"/\" + GeyserImpl.VERSION;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.util.stream.Stream;\nimport java.nio.charset.StandardCharsets;\n\npublic class WebUtils {\n    public static String getBody(String reqURL) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"GET\");\n        int responseCode = con.getResponseCode();\n        InputStream is = responseCode >= 400 ? con.getErrorStream() : con.getInputStream();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {\n            StringBuilder response = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.append(line).append(\"\\n\");\n            }\n            return response.toString();\n        } finally {\n            con.disconnect();\n        }\n    }\n\n    public static JsonNode getJson(String reqURL) throws IOException {\n        String jsonStr = getBody(reqURL);\n        ObjectMapper mapper = new ObjectMapper();\n        return mapper.readTree(jsonStr);\n    }\n\n    public static void downloadFile(String reqURL, String fileLocation) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"GET\");\n        try (InputStream is = con.getInputStream();\n             FileOutputStream fos = new FileOutputStream(fileLocation)) {\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = is.read(buffer)) != -1) {\n                fos.write(buffer, 0, bytesRead);\n            }\n        } finally {\n            con.disconnect();\n        }\n    }\n\n    public static String post(String reqURL, String postContent) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"POST\");\n        con.setDoOutput(true);\n        con.setRequestProperty(\"Content-Type\", \"text/plain; charset=UTF-8\");\n        try (OutputStream os = con.getOutputStream()) {\n            os.write(postContent.getBytes(StandardCharsets.UTF_8));\n        }\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()))) {\n            StringBuilder response = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.append(line).append(\"\\n\");\n            }\n            return response.toString();\n        } finally {\n            con.disconnect();\n        }\n    }\n\n    public static String postForm(String reqURL, Map<String, String> fields) throws IOException {\n        StringBuilder postData = new StringBuilder();\n        for (Map.Entry<String, String> entry : fields.entrySet()) {\n            if (postData.length() > 0) {\n                postData.append('&');\n            }\n            postData.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"))\n                   .append('=')\n                   .append(URLEncoder.encode(entry.getValue(), \"UTF-8\"));\n        }\n        URL url = new URL(reqURL);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"POST\");\n        con.setDoOutput(true);\n        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        try (OutputStream os = con.getOutputStream()) {\n            os.write(postData.toString().getBytes(StandardCharsets.UTF_8));\n        }\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()))) {\n            StringBuilder response = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.append(line).append(\"\\n\");\n            }\n            return response.toString();\n        } finally {\n            con.disconnect();\n        }\n    }\n\n    public static Stream<String> getLineStream(String reqURL) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"GET\");\n        InputStream is = con.getInputStream();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        return reader.lines();\n    }\n\n    public static String getUserAgent() {\n        return \"WebUtils/1.0 (+https://example.com)\";\n    }\n\n    public static String connectionToString(HttpURLConnection con) throws IOException {\n        StringBuilder response = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.append(line).append(\"\\n\");\n            }\n        } catch (IOException e) {\n            try (BufferedReader errorReader = new BufferedReader(new InputStreamReader(con.getErrorStream()))) {\n                String errorLine;\n                while ((errorLine = errorReader.readLine()) != null) {\n                    response.append(errorLine).append(\"\\n\");\n                }\n            }\n        }\n        return response.toString();\n    }\n}\n```"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a Java class that reads and processes OSM (OpenStreetMap) PBF (Protocolbuffer Binary Format) files using Java NIO's FileChannel for efficient file operations, with support for lazy reading of file blocks.\n\nClass Description: The OsmInputFile class provides functionality to read and process OSM PBF files. It supports both eager and lazy reading modes, where lazy reading defers the actual decoding of data blocks until needed. The class uses FileChannel for efficient file operations and includes methods for reading headers, blocks, and validating file contents.\n\nAttributes:\n- path: [Path] - The file path to the OSM PBF file to be processed\n- lazy: [boolean] - Flag indicating whether to use lazy reading mode for file blocks\n\nMethods:\n- readInt: [readInt]([FileChannel channel]) -> [int] - Reads a 4-byte integer from the specified FileChannel\n- readBytes: [readBytes]([FileChannel channel, int length]) -> [byte[]] - Reads a specified number of bytes from the current position in the FileChannel\n- readBytes: [readBytes]([FileChannel channel, long offset, int length]) -> [byte[]] - Reads a specified number of bytes from a specific offset in the FileChannel\n- readBlobHeader: [readBlobHeader]([FileChannel channel]) -> [BlobHeader] - Reads and parses a BlobHeader from the FileChannel\n- openChannel: [openChannel]() -> [FileChannel] - Opens and returns a FileChannel for reading the input file\n- LazyReader (inner class): [LazyReader]() -> [OsmBlockSource] - Implements lazy reading functionality for OSM blocks\n  - forEachBlock: [forEachBlock]([Consumer<Block> consumer]) -> [void] - Processes each block in the file using the provided consumer\n  - close: [close]() -> [void] - Closes the lazy reading channel\n  - LazyBlock (inner record): [LazyBlock]([long offset, int length, FileChannel channel]) -> [Block] - Represents a lazily-read block\n    - decodeElements: [decodeElements]() -> [Iterable<OsmElement>] - Decodes the block's elements when accessed",
    "Canonical_solution": "import com.onthegomap.planetiler.reader.FileFormatException;\nimport com.onthegomap.planetiler.util.ByteBufferUtil;\nimport crosby.binary.Fileformat.BlobHeader;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.List;\nimport java.util.function.Consumer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class OsmInputFile {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(OsmInputFile.class);\n\n  private final Path path;\n  private final boolean lazy;\n\n  public OsmInputFile(Path path, boolean lazyReads) {\n    this.path = path;\n    lazy = lazyReads;\n  }\n\n  private static int readInt(FileChannel channel) throws IOException {\n    ByteBuffer buf = ByteBuffer.allocate(4);\n    int read = channel.read(buf);\n    if (read != 4) {\n      throw new IOException(\"Tried to read 4 bytes but only got \" + read);\n    }\n    return buf.flip().getInt();\n  }\n\n  private static byte[] readBytes(FileChannel channel, int length) throws IOException {\n    ByteBuffer buf = ByteBuffer.allocate(length);\n    int read = channel.read(buf);\n    if (read != length) {\n      throw new IOException(\"Tried to read \" + length + \" bytes but only got \" + read);\n    }\n    return buf.flip().array();\n  }\n\n  private static byte[] readBytes(FileChannel channel, long offset, int length) throws IOException {\n    ByteBuffer buf = ByteBuffer.allocate(length);\n    int read = channel.read(buf, offset);\n    if (read != length) {\n      throw new IOException(\"Tried to read \" + length + \" bytes at \" + offset + \" but only got \" + read);\n    }\n    return buf.flip().array();\n  }\n\n  private static BlobHeader readBlobHeader(FileChannel channel) throws IOException {\n    int headerSize = readInt(channel);\n    if (headerSize > 64 * 1024) {\n      throw new IllegalArgumentException(\"Header longer than 64 KiB\");\n    }\n    byte[] headerBytes = readBytes(channel, headerSize);\n    return BlobHeader.parseFrom(headerBytes);\n  }\n\n  private FileChannel openChannel() {\n    try {\n      return FileChannel.open(path, StandardOpenOption.READ);\n    } catch (IOException e) {\n      throw new UncheckedIOException(e);\n    }\n  }\n\n  private class LazyReader implements OsmBlockSource {\n\n    final FileChannel lazyReadChannel = openChannel();\n\n    @Override\n    public void forEachBlock(Consumer<Block> consumer) {\n      try (FileChannel channel = openChannel()) {\n        final long size = channel.size();\n        while (channel.position() < size) {\n          BlobHeader header = readBlobHeader(channel);\n          int blockSize = header.getDatasize();\n          String headerType = header.getType();\n          long blockStartPosition = channel.position();\n          if (\"OSMData\".equals(headerType)) {\n            consumer.accept(new LazyBlock(blockStartPosition, blockSize, lazyReadChannel));\n          } else if (\"OSMHeader\".equals(headerType)) {\n            validateHeader(readBytes(channel, blockStartPosition, blockSize));\n          } else {\n            LOGGER.warn(\"Unrecognized OSM PBF blob header type: {}\", headerType);\n          }\n          channel.position(blockStartPosition + blockSize);\n        }\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n    }\n\n    @Override\n    public void close() {\n      try {\n        lazyReadChannel.close();\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n    }\n\n    private record LazyBlock(long offset, int length, FileChannel channel) implements Block {\n\n      public Iterable<OsmElement> decodeElements() {\n        try {\n          var buffer = channel.map(FileChannel.MapMode.READ_ONLY, offset, length);\n          var result = PbfDecoder.decode(buffer);\n          ByteBufferUtil.free(buffer);\n          return result;\n        } catch (IOException e) {\n          throw new UncheckedIOException(e);\n        }\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.function.Consumer;\n\npublic class OsmInputFile {\n    private final Path path;\n    private final boolean lazy;\n\n    public OsmInputFile(Path path, boolean lazy) {\n        this.path = path;\n        this.lazy = lazy;\n    }\n\n    private int readInt(FileChannel channel) throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocate(4);\n        channel.read(buffer);\n        buffer.flip();\n        return buffer.getInt();\n    }\n\n    private byte[] readBytes(FileChannel channel, int length) throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocate(length);\n        channel.read(buffer);\n        buffer.flip();\n        byte[] bytes = new byte[length];\n        buffer.get(bytes);\n        return bytes;\n    }\n\n    private byte[] readBytes(FileChannel channel, long offset, int length) throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocate(length);\n        channel.read(buffer, offset);\n        buffer.flip();\n        byte[] bytes = new byte[length];\n        buffer.get(bytes);\n        return bytes;\n    }\n\n    public BlobHeader readBlobHeader(FileChannel channel) throws IOException {\n        int headerLength = readInt(channel);\n        byte[] headerBytes = readBytes(channel, headerLength);\n        return parseBlobHeader(headerBytes);\n    }\n\n    private BlobHeader parseBlobHeader(byte[] bytes) {\n        // Placeholder for actual parsing logic\n        return new BlobHeader();\n    }\n\n    public FileChannel openChannel() throws IOException {\n        return FileChannel.open(path, StandardOpenOption.READ);\n    }\n\n    public class LazyReader {\n        private final FileChannel channel;\n        private long currentOffset;\n\n        public LazyReader() throws IOException {\n            this.channel = openChannel();\n            this.currentOffset = 0;\n        }\n\n        public void forEachBlock(Consumer<Block> consumer) {\n            try {\n                while (true) {\n                    BlobHeader header = readBlobHeader(channel);\n                    long blockOffset = currentOffset;\n                    int blockLength = header.getLength();\n                    currentOffset += blockLength + 4;\n                    consumer.accept(new LazyBlock(blockOffset, blockLength, channel));\n                }\n            } catch (IOException e) {\n                // End of file reached\n            }\n        }\n\n        public void close() throws IOException {\n            channel.close();\n        }\n    }\n\n    public record LazyBlock(long offset, int length, FileChannel channel) implements Block {\n        @Override\n        public Iterable<OsmElement> decodeElements() {\n            try {\n                byte[] data = readBytes(channel, offset, length);\n                return parseOsmElements(data);\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        private Iterable<OsmElement> parseOsmElements(byte[] data) {\n            // Placeholder for actual parsing logic\n            return null;\n        }\n    }\n\n    public interface Block {\n        Iterable<OsmElement> decodeElements();\n    }\n\n    public static class BlobHeader {\n        private int length;\n\n        public int getLength() {\n            return length;\n        }\n    }\n\n    public static class OsmElement {\n        // Placeholder for actual OsmElement structure\n    }\n}\n```"
  },
  {
    "Task_id": 111,
    "Instruction": "Task Description: Create a Java class that implements a RESTful client using HttpURLConnection to perform HTTP requests (GET, POST, PUT) and handle responses.\n\nClass Description: The `RestfulClient` class provides methods to execute HTTP requests (GET, POST, PUT) to a specified URL and process the responses. It handles connection setup, request parameter configuration, input/output stream management, and connection cleanup.\n\nAttributes: None\n\nMethods:\n\nMethod1: `get(String path) -> String` - Executes a GET request to the specified URL path and returns the response as a String.  \nMethod2: `post(String path, String requestBody) -> String` - Executes a POST request to the specified URL path with the provided request body and returns the response as a String.  \nMethod3: `put(String path, String requestBody) -> String` - Executes a PUT request to the specified URL path with the provided request body and returns the response as a String.  \nMethod4: `executeRequest(String method, String path, String requestBody) -> String` - Internal helper method that handles the common logic for executing HTTP requests (connection setup, request configuration, and response processing).  \nMethod5: `getVal(RestfulRequest request) -> String` - Executes a custom HTTP request based on the provided `RestfulRequest` object (containing URL, method, and parameters) and returns the response as a String.  \n\nInput:  \n- For `get`, `post`, and `put`:  \n  - `path` (String): The target URL for the HTTP request.  \n  - `requestBody` (String, optional for POST/PUT): The request payload in JSON format.  \n- For `getVal`:  \n  - `request` (RestfulRequest): An object encapsulating the request details (URL, HTTP method, and parameters).  \n\nOutput:  \n- String: The response body from the HTTP request, or `null` if an error occurs.",
    "Canonical_solution": "import lombok.extern.slf4j.Slf4j;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\n@Slf4j\npublic class RestfulClient {\n\n    public String get(String path) {\n        return executeRequest(\"GET\", path, null);\n    }\n\n    public String post(String path, String requestBody) {\n        return executeRequest(\"POST\", path, requestBody);\n    }\n\n    public String put(String path, String requestBody) {\n        return executeRequest(\"PUT\", path, requestBody);\n    }\n\n    private String executeRequest(String method, String path, String requestBody){\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(path);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(method);\n            connection.setRequestProperty(\"Content-Type\", \"application/json; charset=utf-8\");\n\n            if (requestBody != null) {\n                connection.setDoOutput(true);\n                try (OutputStream os = connection.getOutputStream()) {\n                    byte[] input = requestBody.getBytes();\n                    os.write(input, 0, input.length);\n                }\n            }\n\n            if (connection.getResponseCode() == 200) {\n                try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n                    String inputLine;\n                    StringBuilder response = new StringBuilder();\n                    while ((inputLine = in.readLine()) != null) {\n                        response.append(inputLine);\n                    }\n                    return response.toString();\n                }\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n        return null;\n    }\n\n    public String getVal(RestfulRequest request) {\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(request.getUrl());\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(request.getMethod());\n            connection.setDoInput(true);\n            connection.setDoOutput(true);\n            connection.setRequestProperty(\"Content-Type\", \" application/json\");\n            byte[] content = request.getParam().getBytes();\n            connection.setRequestProperty(\"Content-Length\", content.length + \"\");\n\n            connection.setReadTimeout(10000);\n            connection.setConnectTimeout(10000);\n            connection.connect();\n            OutputStream out = connection.getOutputStream();\n            out.write(content);\n            out.flush();\n            out.close();\n\n            if (connection.getResponseCode() == 200) {\n                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n                String inputLine;\n                StringBuilder response = new StringBuilder();\n                while ((inputLine = in.readLine()) != null) {\n                    response.append(inputLine);\n                }\n                in.close();\n                return response.toString();\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n        return null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\n\npublic class RestfulClient {\n\n    public String get(String path) {\n        return executeRequest(\"GET\", path, null);\n    }\n\n    public String post(String path, String requestBody) {\n        return executeRequest(\"POST\", path, requestBody);\n    }\n\n    public String put(String path, String requestBody) {\n        return executeRequest(\"PUT\", path, requestBody);\n    }\n\n    private String executeRequest(String method, String path, String requestBody) {\n        try {\n            URL url = new URL(path);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(method);\n            conn.setRequestProperty(\"Content-Type\", \"application/json\");\n            if (method.equals(\"POST\") || method.equals(\"PUT\")) {\n                conn.setDoOutput(true);\n            }\n            if (requestBody != null && !requestBody.isEmpty()) {\n                try (OutputStream os = conn.getOutputStream()) {\n                    os.write(requestBody.getBytes(StandardCharsets.UTF_8));\n                }\n            }\n            int responseCode = conn.getResponseCode();\n            InputStream is;\n            if (responseCode >= 400) {\n                is = conn.getErrorStream();\n            } else {\n                is = conn.getInputStream();\n            }\n            String response = readResponse(is);\n            conn.disconnect();\n            return response;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private String readResponse(InputStream is) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n        StringBuilder response = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            response.append(line);\n        }\n        return response.toString();\n    }\n\n    public String getVal(RestfulRequest request) {\n        String url = request.getUrl();\n        String method = request.getMethod();\n        String requestBody = request.getRequestBody();\n        return executeRequest(method, url, requestBody);\n    }\n}\n```"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, send messages, and handle server responses.\n\nClass Description: The TelnetClient class provides functionality to connect to a remote server using TCP, with optional SSL support. It reads input from the console, sends it to the server, and handles the connection lifecycle.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be used\n- HOST: String - The host address of the remote server (default: \"127.0.0.1\")\n- PORT: int - The port number of the remote server (default: 8023 or 8992 for SSL)\n\nMethods:\n- start(): void - Initializes and starts the TCP client. Handles the connection setup, message sending, and connection teardown. Throws Exception if any error occurs during execution.\n  Input: None\n  Output: None (void)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic final class TelnetClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8992\" : \"8023\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE);\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new TelnetClientInitializer(sslCtx));\n\n            Channel ch = b.connect(HOST, PORT).sync().channel();\n\n            ChannelFuture lastWriteFuture = null;\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            for (;;) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                lastWriteFuture = ch.writeAndFlush(line + \"\\r\\n\");\n\n                if (\"bye\".equals(line.toLowerCase())) {\n                    ch.closeFuture().sync();\n                    break;\n                }\n            }\n\n            if (lastWriteFuture != null) {\n                lastWriteFuture.sync();\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.util.CharsetUtil;\nimport java.util.Scanner;\n\npublic class TelnetClient {\n    private final boolean SSL;\n    private final String HOST;\n    private final int PORT;\n\n    public TelnetClient(boolean SSL) {\n        this.SSL = SSL;\n        this.HOST = \"127.0.0.1\";\n        this.PORT = SSL ? 8992 : 8023;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            SslContext sslCtx = null;\n            if (SSL) {\n                sslCtx = SslContextBuilder.forClient()\n                        .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                        .build();\n            }\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) {\n                            ChannelPipeline p = ch.pipeline();\n                            if (sslCtx != null) {\n                                p.addLast(sslCtx.newHandler(ch.alloc()));\n                            }\n                            p.addLast(new ClientHandler());\n                        }\n                    });\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            Channel channel = f.channel();\n\n            new Thread(() -> {\n                Scanner scanner = new Scanner(System.in);\n                while (scanner.hasNextLine()) {\n                    String line = scanner.nextLine();\n                    channel.writeAndFlush(line + \"\\r\\n\");\n                }\n            }).start();\n\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class ClientHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ByteBuf in = (ByteBuf) msg;\n            try {\n                System.out.println(\"Received: \" + in.toString(CharsetUtil.UTF_8));\n            } finally {\n                in.release();\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n\n    public static void main(String[] args) {\n        TelnetClient client = new TelnetClient(false);\n        try {\n            client.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, send and receive messages, and handle SSL encryption if required.\n\nClass Description: The EchoClient class is a Netty-based TCP client that connects to a specified server, optionally using SSL encryption, and includes a handler for processing incoming and outgoing messages.\n\nAttributes:\nSSL: [boolean] - Flag indicating whether SSL encryption should be used\nHOST: [String] - The host address of the server to connect to\nPORT: [int] - The port number of the server to connect to\nSIZE: [int] - The size parameter for message handling (unused in basic implementation)\n\nMethods:\nstart: [start]() -> [void] - Initializes and starts the Netty client, establishing a connection to the specified server. Handles SSL context creation if needed, configures the client pipeline, and manages connection lifecycle.\ninitChannel: [initChannel]([SocketChannel ch]) -> [void] - (Internal method) Configures the channel pipeline with SSL handler (if enabled) and custom client handler during channel initialization.",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic final class EchoClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8007\"));\n    static final int SIZE = Integer.parseInt(System.getProperty(\"size\", \"256\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.TCP_NODELAY, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc(), HOST, PORT));\n                     }\n                     p.addLast(new EchoClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\n\npublic class EchoClient {\n    private final boolean ssl;\n    private final String host;\n    private final int port;\n    private final int size;\n    private SslContext sslContext;\n\n    public EchoClient(boolean ssl, String host, int port, int size) {\n        this.ssl = ssl;\n        this.host = host;\n        this.port = port;\n        this.size = size;\n    }\n\n    public void start() throws Exception {\n        if (ssl) {\n            sslContext = SslContextBuilder.forClient().build();\n        }\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     if (ssl) {\n                         ch.pipeline().addLast(\"ssl\", new SslHandler(sslContext.newEngine(ch.alloc())));\n                     }\n                     ch.pipeline().addLast(new EchoClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class EchoClientHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            ctx.writeAndFlush(Unpooled.copiedBuffer(\"Hello from client\\n\".getBytes()));\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            System.out.println(\"Received: \" + msg);\n            ctx.write(msg);\n        }\n\n        @Override\n        public void channelReadComplete(ChannelHandlerContext ctx) {\n            ctx.flush();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a Java class that implements a simple TCP chat client using Netty framework, capable of connecting to a remote server, sending messages from console input, and gracefully shutting down.\n\nClass Description: SimpleChatClient is a Netty-based TCP client that establishes a connection to a specified host and port, sends user input messages to the server, and handles connection lifecycle management.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server to connect to\nport: int - The port number of the remote server to connect to\n\nMethods:\nSimpleChatClient: (String host, int port) -> void - Constructor that initializes the client with target host and port\nrun: () -> void - Main method that initializes Netty components, establishes connection, handles user input, and manages shutdown\n    - Initializes NioEventLoopGroup for I/O operations\n    - Configures Bootstrap with NioSocketChannel and handler\n    - Connects to remote server and maintains channel\n    - Reads user input from console and sends to server\n    - Handles graceful shutdown of resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class SimpleChatClient {\n\n    private final String host;\n    private final int port;\n\n    public SimpleChatClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new SimpleChatClientInitializer());\n            Channel channel = bootstrap.connect(host, port).sync().channel();\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                channel.writeAndFlush(in.readLine() + \"\\r\\n\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\n\npublic class SimpleChatClient {\n    private final String host;\n    private final int port;\n\n    public SimpleChatClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            ch.pipeline().addLast(new StringDecoder(), new StringEncoder(), new SimpleChatClientHandler());\n                        }\n                    });\n\n            ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port)).sync();\n            Channel channel = future.channel();\n\n            new Thread(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        channel.writeAndFlush(line + \"\\n\");\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                } finally {\n                    channel.close();\n                }\n            }).start();\n\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class SimpleChatClientHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            System.out.println(\"Server: \" + msg);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.err.println(\"Usage: \" + SimpleChatClient.class.getSimpleName() + \" <host> <port>\");\n            return;\n        }\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n        new SimpleChatClient(host, port).run();\n    }\n}\n```"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a secure (optional SSL) connection to a server, send and receive serialized Java objects.\n\nClass Description: ObjectEchoClient is a Netty-based TCP client that connects to a specified server, handles SSL encryption if enabled, and processes object serialization/deserialization for communication. The client maintains the connection until explicitly closed.\n\nAttributes:\nSSL: [boolean] - Flag indicating whether SSL encryption should be used\nHOST: [String] - The host address of the server to connect to\nPORT: [int] - The port number of the server to connect to\nSIZE: [int] - The size parameter (unused in current implementation but available for configuration)\n\nMethods:\nstart: [start]() -> [void] - Initializes and starts the Netty client, establishes connection to server, configures SSL if enabled, sets up object serialization pipeline, and maintains connection until shutdown. Throws Exception if any error occurs during startup or operation.\n\nThe method performs the following operations:\n1. Creates SSL context if SSL is enabled\n2. Initializes NioEventLoopGroup for I/O operations\n3. Configures Bootstrap with NioSocketChannel\n4. Sets up pipeline with ObjectEncoder, ObjectDecoder and custom handler\n5. Connects to specified host and port\n6. Maintains connection until channel is closed\n7. Shuts down event loop group gracefully when done",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.serialization.ClassResolvers;\nimport io.netty.handler.codec.serialization.ObjectDecoder;\nimport io.netty.handler.codec.serialization.ObjectEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic final class ObjectEchoClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8007\"));\n    static final int SIZE = Integer.parseInt(System.getProperty(\"size\", \"256\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    if (sslCtx != null) {\n                        p.addLast(sslCtx.newHandler(ch.alloc(), HOST, PORT));\n                    }\n                    p.addLast(\n                            new ObjectEncoder(),\n                            new ObjectDecoder(ClassResolvers.cacheDisabled(null)),\n                            new ObjectEchoClientHandler());\n                }\n             });\n\n            b.connect(HOST, PORT).sync().channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.serialization.ObjectDecoder;\nimport io.netty.handler.codec.serialization.ObjectEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SimpleTrustManagerFactory;\n\nimport javax.net.ssl.SSLException;\nimport java.security.cert.CertificateException;\n\npublic class ObjectEchoClient {\n    private final boolean ssl;\n    private final String host;\n    private final int port;\n    private final int size;\n\n    public ObjectEchoClient(boolean ssl, String host, int port, int size) {\n        this.ssl = ssl;\n        this.host = host;\n        this.port = port;\n        this.size = size;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ChannelPipeline pipeline = ch.pipeline();\n                     if (ssl) {\n                         try {\n                             SslContext sslContext = SslContextBuilder.forClient()\n                                     .trustManager(SimpleTrustManagerFactory.INSTANCE)\n                                     .build();\n                             pipeline.addLast(\"ssl\", sslContext.newHandler(ch.alloc()));\n                         } catch (SSLException e) {\n                             throw new RuntimeException(e);\n                         }\n                     }\n                     pipeline.addLast(\"encoder\", new ObjectEncoder());\n                     pipeline.addLast(\"decoder\", new ObjectDecoder(1024 * 1024, new io.netty.handler.codec.serialization.ObjectStreamClassResolver()));\n                     pipeline.addLast(\"handler\", new ClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class ClientHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            ctx.writeAndFlush(\"Hello from client\");\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            System.out.println(\"Received: \" + msg);\n            ctx.close();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 117,
    "Instruction": "Task Description: Create a secure TCP chat client using Java Netty framework that establishes an encrypted connection to a server, sends messages from standard input, and gracefully shuts down when instructed.\n\nClass Description: SecureChatClient is a Netty-based client that handles secure TCP communication with a chat server. It manages connection lifecycle, message sending, and proper resource cleanup.\n\nAttributes:\n- HOST: [String] - The server host address (default: \"127.0.0.1\")\n- PORT: [int] - The server port number (default: 8992)\n- group: [EventLoopGroup] - Manages client-side I/O threads\n- channel: [Channel] - Represents the active network connection\n- sslCtx: [SslContext] - SSL context for secure communication\n\nMethods:\n- SecureChatClient() -> [void] - Constructor that initializes SSL context and event loop group\n- connect() -> [void] - Establishes connection to the server using Bootstrap configuration\n- startChat() -> [void] - Starts interactive chat session reading from standard input and sending messages to server\n- shutdown() -> [void] - Gracefully shuts down the client and releases resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic final class SecureChatClient {\n\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8992\"));\n\n    private EventLoopGroup group;\n    private Channel channel;\n    private SslContext sslCtx;\n\n    public SecureChatClient() throws Exception {\n        this.sslCtx = SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE);\n        this.group = new NioEventLoopGroup();\n    }\n\n    public void connect() throws Exception {\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioSocketChannel.class)\n         .handler(new SecureChatClientInitializer(sslCtx));\n\n        this.channel = b.connect(HOST, PORT).sync().channel();\n    }\n\n    public void startChat() throws Exception {\n        ChannelFuture lastWriteFuture = null;\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        for (;;) {\n            String line = in.readLine();\n            if (line == null) {\n                break;\n            }\n\n            lastWriteFuture = channel.writeAndFlush(line + \"\\r\\n\");\n\n            if (\"bye\".equals(line.toLowerCase())) {\n                channel.closeFuture().sync();\n                break;\n            }\n        }\n\n        if (lastWriteFuture != null) {\n            lastWriteFuture.sync();\n        }\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\n\nimport javax.net.ssl.SSLException;\nimport java.net.InetSocketAddress;\nimport java.util.Scanner;\n\npublic class SecureChatClient {\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = 8992;\n    private final EventLoopGroup group;\n    private Channel channel;\n    private final SslContext sslCtx;\n\n    public SecureChatClient() throws SSLException {\n        this.group = new NioEventLoopGroup();\n        this.sslCtx = SslContextBuilder.forClient().build();\n    }\n\n    public void connect() throws InterruptedException {\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioSocketChannel.class)\n         .handler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) {\n                 ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n                 ch.pipeline().addLast(new StringDecoder());\n                 ch.pipeline().addLast(new StringEncoder());\n                 ch.pipeline().addLast(new SecureChatClientHandler());\n             }\n         });\n        channel = b.connect(new InetSocketAddress(HOST, PORT)).sync().channel();\n    }\n\n    public void startChat() {\n        new Thread(() -> {\n            Scanner scanner = new Scanner(System.in);\n            while (scanner.hasNextLine()) {\n                String line = scanner.nextLine();\n                if (line.equalsIgnoreCase(\"exit\")) {\n                    break;\n                }\n                channel.writeAndFlush(line + \"\\n\");\n            }\n            scanner.close();\n            shutdown();\n        }).start();\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n        }\n        group.shutdownGracefully().syncUninterruptibly();\n    }\n\n    private static class SecureChatClientHandler extends SimpleChannelInboundHandler<String> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, String msg) {\n            System.out.println(msg);\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        SecureChatClient client = new SecureChatClient();\n        client.connect();\n        client.startChat();\n    }\n}\n```"
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a WebSocket client using Java Netty framework that can establish a connection to a WebSocket server, send and receive frames, and handle connection lifecycle events.\n\nClass Description: WebSocketTestClient is a Netty-based WebSocket client implementation that handles WebSocket connections, frame transmission, and connection management. It supports different WebSocket versions and provides callback mechanisms for frame handling.\n\nAttributes:\n- bootstrap: [Bootstrap] - Netty bootstrap instance for client configuration\n- ch: [Channel] - Active channel representing the WebSocket connection\n- uri: [URI] - Target WebSocket server URI\n- version: [WebSocketVersion] - WebSocket protocol version to use\n- closed: [boolean] - Connection status flag\n- count: [AtomicInteger] - Counter for handler naming\n\nMethods:\n- connect(): [WebSocketTestClient] - Establishes connection to WebSocket server, performs handshake, and returns self for chaining\n- send(WebSocketFrame frame, FrameListener listener): [WebSocketTestClient] - Sends WebSocket frame and registers listener for response, returns self for chaining\n- destroy(): [void] - Gracefully closes connection and releases resources\n- destroy(boolean dirty): [void] - Closes connection with option for immediate termination\n- isActive(): [boolean] - Returns connection active status\n- isOpen(): [boolean] - Returns connection open status\n- isWritable(): [boolean] - Returns channel writable status\n\nNested Interfaces:\n- FrameListener: Callback interface for frame reception and error handling\n  - onFrame(WebSocketFrame frame): [void] - Called when frame is received\n  - onError(Throwable t): [void] - Called when error occurs\n\nNested Classes:\n- WSClientHandler: [SimpleChannelInboundHandler<Object>] - Internal handler for WebSocket handshake and frame processing\n  - handshakeFuture(): [ChannelFuture] - Returns handshake completion future\n  - handlerAdded(ChannelHandlerContext ctx): [void] - Initializes handshake promise\n  - channelActive(ChannelHandlerContext ctx): [void] - Initiates handshake\n  - channelRead0(ChannelHandlerContext ctx, Object o): [void] - Processes incoming messages\n  - exceptionCaught(ChannelHandlerContext ctx, Throwable cause): [void] - Handles channel errors",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;\nimport io.netty.handler.codec.http.websocketx.WebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketVersion;\nimport io.netty.util.CharsetUtil;\nimport io.netty.util.ReferenceCountUtil;\n\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic final class WebSocketTestClient {\n    private final Bootstrap bootstrap = new Bootstrap();\n    private Channel ch;\n    private final URI uri;\n    private final WebSocketVersion version;\n    private volatile boolean closed;\n    private static final AtomicInteger count = new AtomicInteger();\n\n    public WebSocketTestClient(WebSocketVersion version, URI uri) {\n        this.uri = uri;\n        this.version = version;\n    }\n\n    public WebSocketTestClient connect() throws Exception {\n        String protocol = uri.getScheme();\n        if (!\"ws\".equals(protocol)) {\n            throw new IllegalArgumentException(\"Unsupported protocol: \" + protocol);\n        }\n        final WebSocketClientHandshaker handshaker =\n                WebSocketClientHandshakerFactory.newHandshaker(\n                        uri, version, null, false, new DefaultHttpHeaders());\n        WSClientHandler handler = new WSClientHandler(handshaker);\n        EventLoopGroup group = new NioEventLoopGroup();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer() {\n                    @Override\n                    protected void initChannel(Channel channel) throws Exception {\n                        ChannelPipeline p = channel.pipeline();\n                        p.addLast(\n                                new HttpClientCodec(),\n                                new HttpObjectAggregator(8192), handler);\n                    }\n                });\n\n        ChannelFuture future =\n                bootstrap.connect(\n                        new InetSocketAddress(uri.getHost(), uri.getPort()));\n        future.syncUninterruptibly();\n        handler.handshakeFuture.syncUninterruptibly();\n        ch = future.channel();\n        return this;\n    }\n\n    public WebSocketTestClient send(WebSocketFrame frame, final FrameListener listener) {\n        ch.pipeline().addLast(\"responseHandler\" + count.incrementAndGet(), new SimpleChannelInboundHandler<Object>() {\n            @Override\n            protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n                if (msg instanceof CloseWebSocketFrame) {\n                    closed = true;\n                }\n                listener.onFrame((WebSocketFrame) msg);\n                ctx.pipeline().remove(this);\n            }\n\n            @Override\n            public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n                cause.printStackTrace();\n                listener.onError(cause);\n                ctx.pipeline().remove(this);\n            }\n        });\n        ChannelFuture cf = ch.writeAndFlush(frame).syncUninterruptibly();\n        if (!cf.isSuccess()) {\n            listener.onError(cf.cause());\n        }\n        return this;\n    }\n\n    public void destroy() {\n        this.destroy(false);\n    }\n\n    public void destroy(boolean dirty) {\n        if (!closed && !dirty) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            send(new CloseWebSocketFrame(), new FrameListener() {\n                @Override\n                public void onFrame(WebSocketFrame frame) {\n                    latch.countDown();\n                }\n\n                @Override\n                public void onError(Throwable t) {\n                    latch.countDown();\n                }\n            });\n            try {\n                latch.await(10, TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        if (ch != null) {\n            ch.close().syncUninterruptibly();\n        }\n        try {\n            bootstrap.group().shutdownGracefully(0, 1, TimeUnit.SECONDS).get();\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public boolean isActive() {\n        return this.ch != null && this.ch.isActive();\n    }\n\n    public boolean isOpen() {\n        return this.ch != null && this.ch.isOpen();\n    }\n\n    public boolean isWritable() {\n        return this.ch != null && this.ch.isWritable();\n    }\n\n    public interface FrameListener {\n        void onFrame(WebSocketFrame frame);\n        void onError(Throwable t);\n    }\n\n    private static final class WSClientHandler extends SimpleChannelInboundHandler<Object> {\n        private final WebSocketClientHandshaker handshaker;\n        private ChannelPromise handshakeFuture;\n\n        WSClientHandler(WebSocketClientHandshaker handshaker) {\n            super(false);\n            this.handshaker = handshaker;\n        }\n\n        public ChannelFuture handshakeFuture() {\n            return handshakeFuture;\n        }\n\n        @Override\n        public void handlerAdded(ChannelHandlerContext ctx) {\n            handshakeFuture = ctx.newPromise();\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            handshaker.handshake(ctx.channel());\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object o) throws Exception {\n            Channel ch = ctx.channel();\n            if (!handshaker.isHandshakeComplete()) {\n                handshaker.finishHandshake(ch, (FullHttpResponse) o);\n                handshakeFuture.setSuccess();\n                ReferenceCountUtil.release(o);\n                return;\n            }\n\n            if (o instanceof FullHttpResponse) {\n                FullHttpResponse response = (FullHttpResponse) o;\n                ReferenceCountUtil.release(o);\n                throw new Exception(\"Unexpected HttpResponse (status=\" + response.getStatus() + \", content=\"\n                        + response.content().toString(CharsetUtil.UTF_8) + ')');\n            }\n            ctx.fireChannelRead(o);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            if (!handshakeFuture.isDone()) {\n                handshakeFuture.setFailure(cause);\n            }\n            ctx.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.websocketx.*;\nimport io.netty.util.AttributeKey;\nimport java.net.URI;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class WebSocketTestClient {\n    private final Bootstrap bootstrap;\n    private Channel ch;\n    private final URI uri;\n    private final WebSocketVersion version;\n    private volatile boolean closed;\n    private final AtomicInteger count = new AtomicInteger(0);\n    private final Map<Integer, FrameListener> listeners = new ConcurrentHashMap<>();\n\n    public WebSocketTestClient(URI uri, WebSocketVersion version) {\n        this.uri = uri;\n        this.version = version;\n        this.bootstrap = new Bootstrap();\n        this.bootstrap.group(new NioEventLoopGroup())\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<Channel>() {\n                    @Override\n                    protected void initChannel(Channel ch) {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(\"httpDecoder\", new HttpClientDecoder());\n                        pipeline.addLast(\"httpEncoder\", new HttpEncoder());\n                        pipeline.addLast(\"wsHandler\", new WSClientHandler());\n                    }\n                });\n    }\n\n    public WebSocketTestClient connect() {\n        this.ch = bootstrap.connect(uri.getHost(), uri.getPort()).syncUninterruptibly().channel();\n        return this;\n    }\n\n    public WebSocketTestClient send(WebSocketFrame frame, FrameListener listener) {\n        int id = count.incrementAndGet();\n        listeners.put(id, listener);\n        ch.writeAndFlush(frame);\n        return this;\n    }\n\n    public void destroy() {\n        destroy(false);\n    }\n\n    public void destroy(boolean dirty) {\n        if (ch != null && ch.isOpen()) {\n            ch.close();\n            if (!dirty) {\n                ch.closeFuture().syncUninterruptibly();\n            }\n        }\n        closed = true;\n    }\n\n    public boolean isActive() {\n        return ch != null && ch.isActive();\n    }\n\n    public boolean isOpen() {\n        return ch != null && ch.isOpen();\n    }\n\n    public boolean isWritable() {\n        return ch != null && ch.isWritable();\n    }\n\n    public interface FrameListener {\n        void onFrame(WebSocketFrame frame);\n        void onError(Throwable t);\n    }\n\n    private class WSClientHandler extends SimpleChannelInboundHandler<Object> {\n        private final ChannelFuture handshakeFuture = new DefaultChannelFuture(ch, false);\n\n        public ChannelFuture handshakeFuture() {\n            return handshakeFuture;\n        }\n\n        @Override\n        public void handlerAdded(ChannelHandlerContext ctx) {\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, uri.getRawPath(), Unpooled.EMPTY_BUFFER);\n            request.headers().set(HttpHeaderNames.HOST, uri.getHost());\n            request.headers().set(HttpHeaderNames.UPGRADE, \"websocket\");\n            request.headers().set(HttpHeaderNames.CONNECTION, \"Upgrade\");\n            request.headers().set(HttpHeaderNames.SEC_WEBSOCKET_KEY, \"dGhlIHNlY3VyZSByb290\");\n            request.headers().set(HttpHeaderNames.SEC_WEBSOCKET_VERSION, version.toHttpHeaderValue());\n            ctx.writeAndFlush(request);\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof FullHttpResponse) {\n                FullHttpResponse response = (FullHttpResponse) msg;\n                if (response.status().code() != 200) {\n                    ctx.close();\n                    return;\n                }\n                handshakeFuture.setSuccess();\n            } else if (msg instanceof WebSocketFrame) {\n                WebSocketFrame frame = (WebSocketFrame) msg;\n                int id = count.get();\n                FrameListener listener = listeners.remove(id);\n                if (listener != null) {\n                    listener.onFrame(frame);\n                }\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a server, calculate factorials, and handle secure connections when required.\n\nClass Description: The FactorialClient class establishes a TCP connection to a specified server using Netty's non-blocking I/O. It supports optional SSL encryption and calculates factorials through server communication. The class manages connection lifecycle and resource cleanup.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be used\n- HOST: String - The host address of the server to connect to (default: \"127.0.0.1\")\n- PORT: int - The port number of the server (default: 8322)\n- COUNT: int - The number for which factorial should be calculated (default: 1000)\n\nMethods:\n- start(): void - Initializes the Netty client, establishes connection, handles SSL if enabled, and calculates factorial. Throws Exception if any error occurs during the process.\n  - Input: None\n  - Output: None (prints factorial result to stderr)\n  - Description: Creates event loop group, configures bootstrap with channel type and handler, connects to server, retrieves factorial result from handler, and ensures proper resource cleanup.",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic final class FactorialClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8322\"));\n    static final int COUNT = Integer.parseInt(System.getProperty(\"count\", \"1000\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx = SSL ? SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE) : null;\n        EventLoopGroup group = new NioEventLoopGroup();\n        \n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new FactorialClientInitializer(sslCtx));\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            FactorialClientHandler handler = (FactorialClientHandler) f.channel().pipeline().last();\n            System.err.format(\"Factorial of %,d is: %,d\", COUNT, handler.getFactorial());\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.ByteToMessageDecoder;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport javax.net.ssl.SSLException;\nimport java.nio.charset.CharsetUtil;\nimport java.util.concurrent.CountDownLatch;\n\npublic class FactorialClient {\n    private final boolean ssl;\n    private final String host;\n    private final int port;\n    private final int count;\n\n    public FactorialClient() {\n        this.ssl = false;\n        this.host = \"127.0.0.1\";\n        this.port = 8322;\n        this.count = 1000;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     if (ssl) {\n                         try {\n                             SslContext sslCtx = SslContextBuilder.forClient()\n                                 .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                                 .build();\n                             p.addLast(sslCtx.newHandler(ch.alloc()));\n                         } catch (SSLException e) {\n                             e.printStackTrace();\n                         }\n                     }\n                     p.addLast(new FactorialClientHandler(count));\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            FactorialClientHandler handler = (FactorialClientHandler) f.channel().pipeline().last();\n            handler.await();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class FactorialClientHandler extends ChannelInboundHandlerAdapter {\n        private final int count;\n        private final CountDownLatch latch = new CountDownLatch(1);\n\n        public FactorialClientHandler(int count) {\n            this.count = count;\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            ctx.writeAndFlush(Unpooled.copiedBuffer(String.valueOf(count), CharsetUtil.UTF_8));\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            String result = ((io.netty.buffer.ByteBuf) msg).toString(CharsetUtil.UTF_8);\n            System.err.println(\"Factorial result: \" + result);\n            latch.countDown();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n            latch.countDown();\n        }\n\n        public void await() throws InterruptedException {\n            latch.await();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based TCP client for RPC communication, handling connection management, message sending, and resource cleanup.\n\nClass Description: NettyConnectClient is a TCP client implementation using Netty framework for RPC communication. It manages network connections, handles message encoding/decoding, and provides methods for connection validation and resource cleanup.\n\nAttributes:\n- group: [EventLoopGroup] - Manages client-side I/O threads and event processing\n- channel: [Channel] - Represents the active network connection to the server\n\nMethods:\n- init: [void]([String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory]) -> [void] - Initializes the client connection, sets up the pipeline with encoders/decoders, and establishes connection to the server\n- isValidate: [void]() -> [boolean] - Checks if the current connection is active and valid\n- close: [void]() -> [void] - Closes the active connection and releases all resources\n- send: [void]([XxlRpcRequest xxlRpcRequest]) -> [void] - Sends an RPC request through the established channel",
    "Canonical_solution": "import com.wugui.datax.rpc.remoting.invoker.XxlRpcInvokerFactory;\nimport com.wugui.datax.rpc.remoting.net.common.ConnectClient;\nimport com.wugui.datax.rpc.remoting.net.impl.netty.codec.NettyDecoder;\nimport com.wugui.datax.rpc.remoting.net.impl.netty.codec.NettyEncoder;\nimport com.wugui.datax.rpc.remoting.net.params.Beat;\nimport com.wugui.datax.rpc.remoting.net.params.XxlRpcRequest;\nimport com.wugui.datax.rpc.remoting.net.params.XxlRpcResponse;\nimport com.wugui.datax.rpc.serialize.Serializer;\nimport com.wugui.datax.rpc.util.IpUtil;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyConnectClient extends ConnectClient {\n\n    private EventLoopGroup group;\n    private Channel channel;\n\n    @Override\n    public void init(String address, final Serializer serializer, final XxlRpcInvokerFactory xxlRpcInvokerFactory) throws Exception {\n        final NettyConnectClient thisClient = this;\n\n        Object[] array = IpUtil.parseIpPort(address);\n        String host = (String) array[0];\n        int port = (int) array[1];\n\n        this.group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel channel) throws Exception {\n                        channel.pipeline()\n                                .addLast(new IdleStateHandler(0,0, Beat.BEAT_INTERVAL, TimeUnit.SECONDS))\n                                .addLast(new NettyEncoder(XxlRpcRequest.class, serializer))\n                                .addLast(new NettyDecoder(XxlRpcResponse.class, serializer))\n                                .addLast(new NettyClientHandler(xxlRpcInvokerFactory, thisClient));\n                    }\n                })\n                .option(ChannelOption.TCP_NODELAY, true)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000);\n        this.channel = bootstrap.connect(host, port).sync().channel();\n\n        if (!isValidate()) {\n            close();\n            return;\n        }\n    }\n\n    @Override\n    public boolean isValidate() {\n        if (this.channel != null) {\n            return this.channel.isActive();\n        }\n        return false;\n    }\n\n    @Override\n    public void close() {\n        if (this.channel != null && this.channel.isActive()) {\n            this.channel.close();\n        }\n        if (this.group != null && !this.group.isShutdown()) {\n            this.group.shutdownGracefully();\n        }\n    }\n\n    @Override\n    public void send(XxlRpcRequest xxlRpcRequest) throws Exception {\n        this.channel.writeAndFlush(xxlRpcRequest).sync();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class NettyConnectClient {\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public void init(String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory) {\n        group = new NioEventLoopGroup();\n        String[] parts = address.split(\":\");\n        String host = parts[0];\n        int port = Integer.parseInt(parts[1]);\n\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new MessageEncoder(serializer), new MessageDecoder(serializer));\n                    }\n                });\n\n        try {\n            channel = bootstrap.connect(host, port).sync().channel();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public boolean isValidate() {\n        return channel != null && channel.isActive();\n    }\n\n    public void close() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void send(XxlRpcRequest xxlRpcRequest) {\n        if (isValidate()) {\n            channel.writeAndFlush(xxlRpcRequest);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework for establishing non-blocking network connections, sending messages to a server, and handling console input.\n\nClass Description: The EchoClient class provides functionality to connect to a TCP server, send messages, read console input, and gracefully shutdown the connection. It uses Netty's non-blocking I/O model for efficient network communication.\n\nAttributes:\n- hostName: [String] - The hostname or IP address of the server to connect to\n- portNumber: [int] - The port number of the server to connect to\n- group: [EventLoopGroup] - Netty event loop group for managing I/O threads\n- channel: [Channel] - The active network channel for communication with the server\n\nMethods:\n- connect(): [void]() -> [void] - Initializes the Netty client, connects to the specified server, and sets up the communication pipeline\n- sendMessage(): [void]([String message]) -> [void] - Converts the input string to a ByteBuf and sends it to the server through the established channel\n- startConsoleInput(): [void]() -> [void] - Starts reading input from the console and sends each line to the server (throws IOException)\n- shutdown(): [void]() -> [void] - Gracefully shuts down the client connection and releases resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\n\npublic final class EchoClient {\n\n    private final String hostName;\n    private final int portNumber;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public EchoClient(String hostName, int portNumber) {\n        this.hostName = hostName;\n        this.portNumber = portNumber;\n    }\n\n    public void connect() throws InterruptedException {\n        group = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioSocketChannel.class)\n         .option(ChannelOption.TCP_NODELAY, true)\n         .handler(new EchoClientChannelInitializer());\n\n        ChannelFuture f = b.connect(hostName, portNumber).sync();\n        channel = f.channel();\n    }\n\n    public void sendMessage(String message) {\n        ByteBuffer writeBuffer = ByteBuffer.allocate(32);\n        writeBuffer.put(message.getBytes());\n        writeBuffer.flip();\n        writeBuffer.rewind();\n        \n        ByteBuf buf = Unpooled.copiedBuffer(writeBuffer);\n        channel.writeAndFlush(buf);\n        writeBuffer.clear();\n    }\n\n    public void startConsoleInput() throws IOException {\n        try (BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in))) {\n            String userInput;\n            while ((userInput = stdIn.readLine()) != null) {\n                sendMessage(userInput);\n            }\n        } catch (UnknownHostException e) {\n            System.err.println(\"\u4e0d\u660e\u4e3b\u673a\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a \" + hostName);\n            System.exit(1);\n        } catch (IOException e) {\n            System.err.println(\"\u4e0d\u80fd\u4ece\u4e3b\u673a\u4e2d\u83b7\u53d6I/O\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a\" + hostName);\n            System.exit(1);\n        }\n    }\n\n    public void shutdown() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\n\npublic class EchoClient {\n    private final String hostName;\n    private final int portNumber;\n    private final EventLoopGroup group;\n    private Channel channel;\n\n    public EchoClient(String hostName, int portNumber) {\n        this.hostName = hostName;\n        this.portNumber = portNumber;\n        this.group = new NioEventLoopGroup();\n    }\n\n    public void connect() {\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) {\n                        }\n                    });\n\n            ChannelFuture future = bootstrap.connect(hostName, portNumber).sync();\n            channel = future.channel();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void sendMessage(String message) {\n        if (channel != null && channel.isActive()) {\n            ByteBuf buffer = Unpooled.copiedBuffer(message, StandardCharsets.UTF_8);\n            channel.writeAndFlush(buffer);\n        }\n    }\n\n    public void startConsoleInput() throws IOException {\n        new Thread(() -> {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    sendMessage(line);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n        }\n        group.shutdownGracefully().syncUninterruptibly();\n    }\n}\n```"
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a Java class that manages TCP client connections using Netty framework, handling connection establishment, error handling, and resource cleanup.\n\nClass Description: NetService is a connection management class that maintains and reuses TCP connections to remote locations using Netty's non-blocking I/O. It provides thread-safe connection pooling and handles connection lifecycle including handshake, authentication, and graceful shutdown.\n\nAttributes:\n- connections: ConcurrentHashMap<Location, Connection> - Thread-safe map storing active connections keyed by remote location\n\nMethods:\n- connect(Location location) -> Connection - Establishes or reuses a TCP connection to the specified location. Handles connection initialization, handshake, and authentication. Returns the established connection.\n  Input: \n    - location: Location - The remote endpoint to connect to\n  Output: \n    - Connection - The established or existing connection object\n\nThe implementation should:\n1. Use Netty's Bootstrap for client configuration\n2. Employ NioEventLoopGroup for I/O thread management\n3. Configure TCP_NODELAY for low-latency communication\n4. Handle connection errors and interruptions\n5. Implement connection pooling with automatic cleanup\n6. Support connection handshake and authentication\n7. Provide graceful shutdown of resources\n8. Maintain thread safety through ConcurrentHashMap",
    "Canonical_solution": "import io.dingodb.common.Location;\nimport io.dingodb.net.NetError;\nimport io.dingodb.net.netty.Constant;\nimport io.dingodb.net.netty.connection.Connection;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport static io.dingodb.common.concurrent.Executors.executor;\nimport static io.dingodb.common.util.Optional.ifPresent;\n\n@Slf4j\npublic class NetService {\n\n    private final Map<Location, Connection> connections = new ConcurrentHashMap<>(8);\n\n    private Connection connect(Location location) {\n        return connections.computeIfAbsent(location, k -> {\n            Optional<Connection> connection = Optional.empty();\n            NioEventLoopGroup executor = new NioEventLoopGroup(0, executor(location.url() + \"/connection\"));\n            try {\n                Bootstrap bootstrap = new Bootstrap();\n                bootstrap\n                    .channel(NioSocketChannel.class)\n                    .group(executor)\n                    .option(ChannelOption.TCP_NODELAY, true)\n                    .remoteAddress(location.toSocketAddress())\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            connection.ifAbsentSet(new Connection(Constant.CLIENT, location, ch));\n                            NettyHandlers.initChannelPipeline(ch, connection.get());\n                        }\n                    });\n                bootstrap.connect().sync().await();\n                connection\n                    .ifPresent(Connection::handshake).ifPresent(Connection::auth)\n                    .ifPresent(() -> log.info(\"Connection open, remote: [{}].\", location))\n                    .orElseThrow(() -> new NullPointerException(\"connection\"));\n            } catch (InterruptedException e) {\n                log.error(\"Open connection to [{}] interrupted.\", location, e);\n                connection.ifPresent(Connection::close);\n                executor.shutdownGracefully();\n                NetError.OPEN_CONNECTION_INTERRUPT.throwFormatError(location);\n            } catch (Exception e) {\n                log.error(\"Open connection to [{}] error.\", location, e);\n                connection.ifPresent(Connection::close);\n                executor.shutdownGracefully();\n                throw e;\n            }\n            connection.get().addCloseListener(__ -> executor.shutdownGracefully());\n            connection.ifPresent(__ -> __.addCloseListener(___ -> connections.remove(location, __)));\n            connection.ifPresent(__ -> __.socket().closeFuture().addListener(ignore -> __.close()));\n            return connection.get();\n        });\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class NetService {\n    private final ConcurrentHashMap<Location, Connection> connections = new ConcurrentHashMap<>();\n    private final EventLoopGroup group;\n    private final Bootstrap bootstrap;\n\n    public NetService() {\n        this.group = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .option(io.netty.channel.socket.ChannelOption.TCP_NODELAY, true)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel ch) {\n                        // Add handlers for handshake and authentication\n                    }\n                });\n    }\n\n    public Connection connect(Location location) {\n        return connections.computeIfAbsent(location, loc -> {\n            try {\n                ChannelFuture future = bootstrap.connect(new InetSocketAddress(loc.getHost(), loc.getPort()));\n                future.sync();\n                Channel channel = future.channel();\n                Connection connection = new Connection(channel);\n                connection.handshake();\n                connection.authenticate();\n                return connection;\n            } catch (Exception e) {\n                e.printStackTrace();\n                return null;\n            }\n        });\n    }\n\n    public void shutdown() {\n        for (Connection connection : connections.values()) {\n            connection.close();\n        }\n        group.shutdownGracefully();\n    }\n}"
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a server, send requests, and receive responses, with optional SSL support.\n\nClass Description: FactorialClient is a Netty-based TCP client that connects to a server to calculate factorials. It handles SSL configuration, connection management, and graceful shutdown of resources.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be used\n- HOST: String - The host address of the server to connect to (default: \"127.0.0.1\")\n- PORT: int - The port number of the server (default: 8322)\n- COUNT: int - The number for which factorial should be calculated (default: 1000)\n\nMethods:\n- start(): void - Initializes and starts the Netty client. Configures SSL if enabled, establishes connection to server, and handles the factorial calculation request. Throws Exception if any error occurs during the process.\n  - Input: None\n  - Output: None (prints result to System.err)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic final class FactorialClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8322\"));\n    static final int COUNT = Integer.parseInt(System.getProperty(\"count\", \"1000\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new FactorialClientInitializer(sslCtx));\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n\n            FactorialClientHandler handler =\n                (FactorialClientHandler) f.channel().pipeline().last();\n\n            System.err.format(\"Factorial of %,d is: %,d\", COUNT, handler.getFactorial());\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.util.CharsetUtil;\n\npublic class FactorialClient {\n    private final boolean ssl;\n    private final String host;\n    private final int port;\n    private final int count;\n\n    public FactorialClient() {\n        this.ssl = false;\n        this.host = \"127.0.0.1\";\n        this.port = 8322;\n        this.count = 1000;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     if (ssl) {\n                         SslContext sslCtx = SslContextBuilder.forClient().build();\n                         ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     ch.pipeline().addLast(new ClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private class ClientHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            String request = \"FACTORIAL \" + count;\n            ctx.writeAndFlush(Unpooled.copiedBuffer(request, CharsetUtil.UTF_8));\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ByteBuf buf = (ByteBuf) msg;\n            String response = buf.toString(CharsetUtil.UTF_8);\n            System.err.println(\"Result: \" + response);\n            ctx.close();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish non-blocking connections to a remote server, handle message processing through a configurable pipeline, and ensure proper resource cleanup.\n\nClass Description: The MocoClient class provides a reusable TCP client implementation using Netty's non-blocking I/O capabilities. It manages connection lifecycle, channel configuration, and graceful shutdown of network resources.\n\nAttributes:\n- None (This is a stateless client implementation where all configuration is passed through method parameters)\n\nMethods:\n- run(String host, int port, ChannelHandler pipelineFactory) -> void - Main method that initializes and runs the Netty client. It takes the server host address, port number, and a pipeline factory for configuring message handlers. The method establishes the connection, waits for it to close, and ensures proper resource cleanup. Throws MocoException if interrupted during operation.\n\nThe method performs these key operations:\n1. Creates NioEventLoopGroup for I/O thread management\n2. Configures Bootstrap with NioSocketChannel and connection parameters\n3. Sets TCP_NODELAY option for low-latency communication\n4. Applies the provided pipeline factory for message handling\n5. Establishes connection and waits for channel closure\n6. Implements graceful shutdown in finally block",
    "Canonical_solution": "import com.github.dreamhead.moco.MocoException;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MocoClient {\n    public final void run(final String host, final int port, final ChannelHandler pipelineFactory) {\n        EventLoopGroup group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .remoteAddress(host, port)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .handler(pipelineFactory);\n\n        try {\n            Channel channel = bootstrap.connect().sync().channel();\n            ChannelFuture future = channel.closeFuture().sync();\n            future.addListener(ChannelFutureListener.CLOSE);\n        } catch (InterruptedException e) {\n            throw new MocoException(e);\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MocoClient {\n    public void run(String host, int port, ChannelHandler pipelineFactory) throws MocoException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .option(ChannelOption.TCP_NODELAY, true)\n                    .handler(pipelineFactory);\n            ChannelFuture future = bootstrap.connect(host, port).sync();\n            future.channel().closeFuture().awaitUninterruptibly();\n        } catch (InterruptedException e) {\n            throw new MocoException(\"Interrupted during client operation\", e);\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish non-blocking connections, send messages to a server, and handle graceful shutdown.\n\nClass Description: The EchoClient class provides functionality to connect to a TCP server, send messages, and manage client resources. It uses Netty's non-blocking I/O for efficient communication.\n\nAttributes:\n- hostName: [String] - The hostname or IP address of the server to connect to\n- portNumber: [int] - The port number of the server to connect to\n- group: [EventLoopGroup] - Netty event loop group for managing I/O threads\n- channel: [Channel] - The active network channel for communication with the server\n\nMethods:\n- connect(): [void] - Establishes a connection to the specified server using Netty's Bootstrap. Initializes the event loop group and configures the client pipeline.\n- sendMessage(message: [String]): [void] - Converts the input string to a ByteBuf and sends it to the connected server through the active channel.\n- startConsoleInput(): [void] - Reads input from the console and sends it to the server line by line until terminated. Handles IO exceptions.\n- shutdown(): [void] - Gracefully shuts down the event loop group and releases all resources. Should be called when the client is no longer needed.",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\n\npublic final class EchoClient {\n\n    private final String hostName;\n    private final int portNumber;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public EchoClient(String hostName, int portNumber) {\n        this.hostName = hostName;\n        this.portNumber = portNumber;\n    }\n\n    public void connect() throws InterruptedException {\n        group = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioSocketChannel.class)\n         .option(ChannelOption.TCP_NODELAY, true)\n         .handler(new EchoClientHandler());\n\n        ChannelFuture f = b.connect(hostName, portNumber).sync();\n        channel = f.channel();\n    }\n\n    public void sendMessage(String message) {\n        ByteBuffer writeBuffer = ByteBuffer.allocate(32);\n        writeBuffer.put(message.getBytes());\n        writeBuffer.flip();\n        writeBuffer.rewind();\n        \n        ByteBuf buf = Unpooled.copiedBuffer(writeBuffer);\n        channel.writeAndFlush(buf);\n        writeBuffer.clear();\n    }\n\n    public void startConsoleInput() throws IOException {\n        try (BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in))) {\n            String userInput;\n            while ((userInput = stdIn.readLine()) != null) {\n                sendMessage(userInput);\n            }\n        } catch (UnknownHostException e) {\n            System.err.println(\"\u4e0d\u660e\u4e3b\u673a\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a \" + hostName);\n            System.exit(1);\n        } catch (IOException e) {\n            System.err.println(\"\u4e0d\u80fd\u4ece\u4e3b\u673a\u4e2d\u83b7\u53d6I/O\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a\" + hostName);\n            System.exit(1);\n        }\n    }\n\n    public void shutdown() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.util.CharsetUtil;\nimport java.io.IOException;\nimport java.util.Scanner;\n\npublic class EchoClient {\n    private String hostName;\n    private int portNumber;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public EchoClient(String hostName, int portNumber) {\n        this.hostName = hostName;\n        this.portNumber = portNumber;\n    }\n\n    public void connect() throws Exception {\n        group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                 .channel(NioSocketChannel.class)\n                 .handler(new ChannelInitializer<SocketChannel>() {\n                     @Override\n                     protected void initChannel(SocketChannel ch) {\n                         ch.pipeline().addLast(new EchoClientHandler());\n                     }\n                 });\n        ChannelFuture future = bootstrap.connect(hostName, portNumber).sync();\n        channel = future.channel();\n    }\n\n    public void sendMessage(String message) {\n        ByteBuf buf = Unpooled.copiedBuffer(message, CharsetUtil.UTF_8);\n        channel.writeAndFlush(buf);\n    }\n\n    public void startConsoleInput() {\n        try (Scanner scanner = new Scanner(System.in)) {\n            while (scanner.hasNextLine()) {\n                String line = scanner.nextLine();\n                if (line.equalsIgnoreCase(\"exit\")) {\n                    break;\n                }\n                sendMessage(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    private class EchoClientHandler extends SimpleChannelInboundHandler<ByteBuf> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) {\n            byte[] bytes = new byte[msg.readableBytes()];\n            msg.readBytes(bytes);\n            System.out.println(\"Received: \" + new String(bytes, CharsetUtil.UTF_8));\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 13,
    "Instruction": "Task Description: Implement a Java class that reads and processes PMTiles archives, providing access to individual tiles and their metadata using Java NIO's FileChannel for efficient file operations.\n\nClass Description: ReadablePmtiles is a concrete implementation of the ReadableTileArchive interface that enables reading and navigating through a PMTiles archive format. It uses FileChannel for efficient random access to file contents and handles compressed directory structures within the archive.\n\nAttributes:\n- channel: [SeekableByteChannel] - The underlying byte channel for reading the PMTiles file\n- header: [Pmtiles.Header] - The parsed header information from the PMTiles archive\n\nMethods:\n- newReadFromFile: [static](Path path) -> [ReadableTileArchive] - Static factory method that creates a new instance by opening a file channel to the specified path\n- getTile: [int x, int y, int z] -> [byte[]] - Retrieves the tile data at the specified coordinates (x,y,z) or returns null if not found\n- close: [] -> [void] - Closes the underlying file channel and releases system resources\n- getAllTiles: [] -> [CloseableIterator<Tile>] - Returns an iterator over all tiles in the archive\n- getBytes: [private](long start, int length) -> [byte[]] - Internal method to read bytes from the channel at specified position\n- readDir: [private](long offset, int length) -> [List<Pmtiles.Entry>] - Reads and parses a directory from the archive\n- getTiles: [private](List<Pmtiles.Entry> dir) -> [Stream<Tile>] - Converts directory entries into a stream of tiles",
    "Canonical_solution": "import com.onthegomap.planetiler.archive.ReadableTileArchive;\nimport com.onthegomap.planetiler.archive.Tile;\nimport com.onthegomap.planetiler.archive.TileArchiveMetadata;\nimport com.onthegomap.planetiler.archive.TileCompression;\nimport com.onthegomap.planetiler.geo.TileCoord;\nimport com.onthegomap.planetiler.util.CloseableIterator;\nimport com.onthegomap.planetiler.util.Gzip;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.SeekableByteChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.stream.IntStream;\nimport java.util.stream.Stream;\nimport org.locationtech.jts.geom.Coordinate;\n\npublic class ReadablePmtiles implements ReadableTileArchive {\n  private final SeekableByteChannel channel;\n  private final Pmtiles.Header header;\n\n  public ReadablePmtiles(SeekableByteChannel channel) throws IOException {\n    this.channel = channel;\n    this.header = Pmtiles.Header.fromBytes(getBytes(0, Pmtiles.HEADER_LEN));\n  }\n\n  public static ReadableTileArchive newReadFromFile(Path path) throws IOException {\n    return new ReadablePmtiles(FileChannel.open(path, StandardOpenOption.READ));\n  }\n\n  private synchronized byte[] getBytes(long start, int length) throws IOException {\n    channel.position(start);\n    var buf = ByteBuffer.allocate(length);\n    channel.read(buf);\n    return buf.array();\n  }\n\n  @Override\n  @SuppressWarnings(\"java:S1168\")\n  public byte[] getTile(int x, int y, int z) {\n    try {\n      var tileId = TileCoord.ofXYZ(x, y, z).hilbertEncoded();\n      long dirOffset = header.rootDirOffset();\n      int dirLength = (int) header.rootDirLength();\n\n      for (int depth = 0; depth <= 3; depth++) {\n        byte[] dirBytes = getBytes(dirOffset, dirLength);\n        if (header.internalCompression() == Pmtiles.Compression.GZIP) {\n          dirBytes = Gzip.gunzip(dirBytes);\n        }\n\n        var dir = Pmtiles.directoryFromBytes(dirBytes);\n        var entry = findTile(dir, tileId);\n        if (entry != null) {\n          if (entry.runLength() > 0) {\n            return getBytes(header.tileDataOffset() + entry.offset(), entry.length());\n          } else {\n            dirOffset = header.leafDirectoriesOffset() + entry.offset();\n            dirLength = entry.length();\n          }\n        } else {\n          return null;\n        }\n      }\n    } catch (IOException e) {\n      throw new IllegalStateException(\"Could not get tile\", e);\n    }\n    return null;\n  }\n\n  @Override\n  public void close() throws IOException {\n    channel.close();\n  }\n\n  private List<Pmtiles.Entry> readDir(long offset, int length) {\n    try {\n      var buf = getBytes(offset, length);\n      if (header.internalCompression() == Pmtiles.Compression.GZIP) {\n        buf = Gzip.gunzip(buf);\n      }\n      return Pmtiles.directoryFromBytes(buf);\n    } catch (IOException e) {\n      throw new UncheckedIOException(e);\n    }\n  }\n\n  @Override\n  public CloseableIterator<Tile> getAllTiles() {\n    List<Pmtiles.Entry> rootDir = readDir(header.rootDirOffset(), (int) header.rootDirLength());\n    return CloseableIterator.of(getTiles(rootDir));\n  }\n\n  private Stream<Tile> getTiles(List<Pmtiles.Entry> dir) {\n    return dir.stream().mapMulti((entry, next) -> {\n      try {\n        if (entry.runLength == 0) {\n          getTiles(readDir(header.leafDirectoriesOffset() + entry.offset(), entry.length())).forEach(next);\n        } else {\n          var data = getBytes(header.tileDataOffset() + entry.offset(), entry.length());\n          for (int i = 0; i < entry.runLength(); i++) {\n            next.accept(new Tile(TileCoord.hilbertDecode((int) (entry.tileId() + i)), data));\n          }\n        }\n      } catch (IOException e) {\n        throw new IllegalStateException(\"Failed to iterate through pmtiles archive \", e);\n      }\n    });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SeekableByteChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.stream.Stream;\n\npublic class ReadablePmtiles implements ReadableTileArchive {\n    private final SeekableByteChannel channel;\n    private final Pmtiles.Header header;\n\n    private ReadablePmtiles(SeekableByteChannel channel, Pmtiles.Header header) {\n        this.channel = channel;\n        this.header = header;\n    }\n\n    public static ReadableTileArchive newReadFromFile(Path path) throws IOException {\n        SeekableByteChannel channel = java.nio.channels.FileChannel.open(path, StandardOpenOption.READ);\n        Pmtiles.Header header = readHeader(channel);\n        return new ReadablePmtiles(channel, header);\n    }\n\n    private static Pmtiles.Header readHeader(SeekableByteChannel channel) throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocate(16); // Assuming header size is 16 bytes\n        channel.read(buffer);\n        buffer.flip();\n        int version = buffer.getInt();\n        long directoryOffset = buffer.getLong();\n        int directorySize = buffer.getInt();\n        int tileCount = buffer.getInt();\n        return new Pmtiles.Header(version, directoryOffset, directorySize, tileCount);\n    }\n\n    @Override\n    public byte[] getTile(int x, int y, int z) {\n        try {\n            List<Pmtiles.Entry> entries = readDir(header.directoryOffset(), header.directorySize());\n            for (Pmtiles.Entry entry : entries) {\n                if (entry.x() == x && entry.y() == y && entry.z() == z) {\n                    return getBytes(entry.dataOffset(), entry.dataSize());\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    @Override\n    public void close() throws IOException {\n        channel.close();\n    }\n\n    @Override\n    public CloseableIterator<Tile> getAllTiles() {\n        return new CloseableIterator<Tile>() {\n            private final List<Pmtiles.Entry> entries = readDir(header.directoryOffset(), header.directorySize());\n            private final Iterator<Pmtiles.Entry> iterator = entries.iterator();\n\n            @Override\n            public boolean hasNext() {\n                return iterator.hasNext();\n            }\n\n            @Override\n            public Tile next() {\n                Pmtiles.Entry entry = iterator.next();\n                try {\n                    byte[] data = getBytes(entry.dataOffset(), entry.dataSize());\n                    return new Tile(entry.x(), entry.y(), entry.z(), data);\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            @Override\n            public void close() {\n                // No action needed\n            }\n        };\n    }\n\n    private byte[] getBytes(long start, int length) throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocate(length);\n        channel.position(start);\n        int bytesRead = channel.read(buffer);\n        if (bytesRead != length) {\n            throw new IOException(\"Failed to read \" + length + \" bytes from \" + start);\n        }\n        return buffer.array();\n    }\n\n    private List<Pmtiles.Entry> readDir(long offset, int length) throws IOException {\n        byte[] dirData = getBytes(offset, length);\n        List<Pmtiles.Entry> entries = new ArrayList<>();\n        // Placeholder for actual parsing logic\n        return entries;\n    }\n}\n```"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Create a Java class that implements a Redis client using Netty framework for TCP communication, capable of sending Redis commands and receiving responses.\n\nClass Description: The RedisClient class establishes a non-blocking TCP connection to a Redis server using Netty's NIO framework. It handles command input from the user, sends commands to the Redis server, and manages connection lifecycle including graceful shutdown.\n\nAttributes:\n- HOST: [String] - The Redis server host address (default: \"127.0.0.1\")\n- PORT: [int] - The Redis server port number (default: 6379)\n- group: [EventLoopGroup] - Manages client-side I/O threads\n- channel: [Channel] - The active network channel for communication\n- lastWriteFuture: [ChannelFuture] - Tracks the last write operation to the server\n\nMethods:\n- start(): [void] - Initializes the Netty client, establishes connection to Redis server, and starts command input loop\n- stop(): [void] - Closes the connection and shuts down the client gracefully\n- initChannel(SocketChannel ch): [void] - Configures the channel pipeline with Redis codecs and handlers (internal method)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.redis.RedisArrayAggregator;\nimport io.netty.handler.codec.redis.RedisBulkStringAggregator;\nimport io.netty.handler.codec.redis.RedisDecoder;\nimport io.netty.handler.codec.redis.RedisEncoder;\nimport io.netty.util.concurrent.GenericFutureListener;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class RedisClient {\n    private static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    private static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"6379\"));\n\n    private EventLoopGroup group;\n    private Channel channel;\n    private ChannelFuture lastWriteFuture;\n\n    public void start() throws Exception {\n        group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new RedisDecoder());\n                     p.addLast(new RedisBulkStringAggregator());\n                     p.addLast(new RedisArrayAggregator());\n                     p.addLast(new RedisEncoder());\n                     p.addLast(new RedisClientHandler());\n                 }\n             });\n\n            channel = b.connect(HOST, PORT).sync().channel();\n\n            System.out.println(\"Enter Redis commands (quit to end)\");\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            for (;;) {\n                final String input = in.readLine();\n                final String line = input != null ? input.trim() : null;\n                if (line == null || \"quit\".equalsIgnoreCase(line)) {\n                    channel.close().sync();\n                    break;\n                } else if (line.isEmpty()) {\n                    continue;\n                }\n                lastWriteFuture = channel.writeAndFlush(line);\n                lastWriteFuture.addListener(new GenericFutureListener<ChannelFuture>() {\n                    @Override\n                    public void operationComplete(ChannelFuture future) throws Exception {\n                        if (!future.isSuccess()) {\n                            System.err.print(\"write failed: \");\n                            future.cause().printStackTrace(System.err);\n                        }\n                    }\n                });\n            }\n\n            if (lastWriteFuture != null) {\n                lastWriteFuture.sync();\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void stop() throws InterruptedException {\n        if (channel != null) {\n            channel.close().sync();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\nimport java.util.Scanner;\n\npublic class RedisClient {\n    private final String HOST = \"127.0.0.1\";\n    private final int PORT = 6379;\n    private EventLoopGroup group;\n    private Channel channel;\n    private ChannelFuture lastWriteFuture;\n\n    public void start() throws Exception {\n        group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        RedisClient.this.initChannel(ch);\n                    }\n                });\n        ChannelFuture future = bootstrap.connect(HOST, PORT).sync();\n        channel = future.channel();\n\n        new Thread(() -> {\n            Scanner scanner = new Scanner(System.in);\n            while (true) {\n                String command = scanner.nextLine();\n                if (command.equals(\"quit\")) {\n                    break;\n                }\n                lastWriteFuture = channel.writeAndFlush(command);\n            }\n            stop();\n        }).start();\n    }\n\n    private void initChannel(SocketChannel ch) {\n        ch.pipeline().addLast(\n                new StringEncoder(),\n                new StringDecoder(),\n                new RedisClientHandler()\n        );\n    }\n\n    public void stop() {\n        if (channel != null) {\n            channel.close().awaitUninterruptibly();\n        }\n        if (group != null) {\n            group.shutdownGracefully().awaitUninterruptibly();\n        }\n    }\n\n    private static class RedisClientHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            System.out.println(\"Received: \" + msg);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to send serialized Java objects to a remote server.\n\nClass Description: The JacksonClient class establishes a TCP connection to a specified host and port using Netty's non-blocking I/O. It sends a JacksonBean object containing sample data (including lists and maps) to the server and handles connection lifecycle properly.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server\nport: int - The port number of the remote server\n\nMethods:\nconstructor: JacksonClient(String host, int port) -> void - Initializes the client with target server address\nrun: run() -> void - Establishes connection, sends sample data, and manages connection lifecycle. Throws Exception if connection fails",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class JacksonClient {\n\n    private final String host;\n    private final int port;\n\n    public JacksonClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new JacksonClientInitializer());\n            \n            Channel channel = bootstrap.connect(host, port).sync().channel();\n\n            JacksonBean user = new JacksonBean();\n            user.setAge(27);\n            user.setName(\"waylau\");\n            List<String> sons = new ArrayList<String>();\n            for (int i = 0; i < 10; i++) {\n                sons.add(\"Lucy\"+i);\n                sons.add(\"Lily\"+i);\n            }\n\n            user.setSons(sons);\n            Map<String, String> addrs = new HashMap<String, String>();\n            for (int i = 0; i < 10; i++) {\n                addrs.put(\"001\"+i, \"18998366112\");\n                addrs.put(\"002\"+i, \"15014965012\");\n            }\n\n            user.setAddrs(addrs);\n            channel.write(user);\n            channel.flush();\n\n            channel.closeFuture().sync();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class JacksonClient {\n    private final String host;\n    private final int port;\n    private final ObjectMapper objectMapper = new ObjectMapper();\n\n    public JacksonClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                         @Override\n                         public void channelActive(ChannelHandlerContext ctx) {\n                             JacksonBean bean = new JacksonBean();\n                             List<String> list = new ArrayList<>();\n                             list.add(\"item1\");\n                             list.add(\"item2\");\n                             Map<String, Object> map = new HashMap<>();\n                             map.put(\"key1\", \"value1\");\n                             map.put(\"key2\", 123);\n                             bean.setSampleList(list);\n                             bean.setSampleMap(map);\n                             try {\n                                 byte[] data = objectMapper.writeValueAsBytes(bean);\n                                 ctx.writeAndFlush(Unpooled.wrappedBuffer(data));\n                             } catch (JsonProcessingException e) {\n                                 e.printStackTrace();\n                             }\n                         }\n                     });\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    static class JacksonBean {\n        private List<String> sampleList;\n        private Map<String, Object> sampleMap;\n\n        public List<String> getSampleList() {\n            return sampleList;\n        }\n\n        public void setSampleList(List<String> sampleList) {\n            this.sampleList = sampleList;\n        }\n\n        public Map<String, Object> getSampleMap() {\n            return sampleMap;\n        }\n\n        public void setSampleMap(Map<String, Object> sampleMap) {\n            this.sampleMap = sampleMap;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a proxy server, handle SSL encryption if enabled, manage connection lifecycle, and support reconnection with exponential backoff.\n\nClass Description: ProxyClientContainer is a Netty-based TCP client container that establishes and maintains a connection to a proxy server. It handles SSL encryption when configured, manages connection retries with exponential backoff, and provides channel management for proxy communication.\n\nAttributes:\n- logger: [Logger] - SLF4J logger instance for logging events\n- workerGroup: [NioEventLoopGroup] - Netty event loop group for handling I/O operations\n- bootstrap: [Bootstrap] - Primary bootstrap for proxy server connections\n- realServerBootstrap: [Bootstrap] - Bootstrap for real server connections\n- config: [Config] - Configuration instance for client settings\n- sslContext: [SSLContext] - SSL context for secure connections (nullable)\n- sleepTimeMill: [long] - Current sleep duration for reconnection attempts\n\nMethods:\n- ProxyClientContainer() -> [void] - Constructor that initializes worker group, bootstraps, and configures channel pipelines\n- start() -> [void] - Starts the client by initiating connection to proxy server\n- createSslHandler(SSLContext sslContext) -> [ChannelHandler] - Creates SSL handler for secure connections\n- connectProxyServer() -> [void] - Connects to proxy server with retry logic on failure\n- stop() -> [void] - Shuts down the client gracefully\n- channelInactive(ChannelHandlerContext ctx) -> [void] - Handles channel inactive events by triggering reconnection\n- reconnectWait() -> [void] - Implements exponential backoff for reconnection attempts",
    "Canonical_solution": "import javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport org.fengfei.lanproxy.client.handlers.ClientChannelHandler;\nimport org.fengfei.lanproxy.client.handlers.RealServerChannelHandler;\nimport org.fengfei.lanproxy.common.Config;\nimport org.fengfei.lanproxy.protocol.IdleCheckHandler;\nimport org.fengfei.lanproxy.protocol.ProxyMessage;\nimport org.fengfei.lanproxy.protocol.ProxyMessageDecoder;\nimport org.fengfei.lanproxy.protocol.ProxyMessageEncoder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslHandler;\n\npublic class ProxyClientContainer {\n\n    private static Logger logger = LoggerFactory.getLogger(ProxyClientContainer.class);\n\n    private NioEventLoopGroup workerGroup;\n    private Bootstrap bootstrap;\n    private Bootstrap realServerBootstrap;\n    private Config config = Config.getInstance();\n    private SSLContext sslContext;\n    private long sleepTimeMill = 1000;\n\n    public ProxyClientContainer() {\n        workerGroup = new NioEventLoopGroup();\n        realServerBootstrap = new Bootstrap();\n        realServerBootstrap.group(workerGroup);\n        realServerBootstrap.channel(NioSocketChannel.class);\n        realServerBootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) throws Exception {\n                ch.pipeline().addLast(new RealServerChannelHandler());\n            }\n        });\n\n        bootstrap = new Bootstrap();\n        bootstrap.group(workerGroup);\n        bootstrap.channel(NioSocketChannel.class);\n        bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) throws Exception {\n                if (Config.getInstance().getBooleanValue(\"ssl.enable\", false)) {\n                    if (sslContext == null) {\n                        sslContext = SslContextCreator.createSSLContext();\n                    }\n                    ch.pipeline().addLast(createSslHandler(sslContext));\n                }\n                ch.pipeline().addLast(new ProxyMessageDecoder(MAX_FRAME_LENGTH, LENGTH_FIELD_OFFSET, LENGTH_FIELD_LENGTH, LENGTH_ADJUSTMENT, INITIAL_BYTES_TO_STRIP));\n                ch.pipeline().addLast(new ProxyMessageEncoder());\n                ch.pipeline().addLast(new IdleCheckHandler(IdleCheckHandler.READ_IDLE_TIME, IdleCheckHandler.WRITE_IDLE_TIME - 10, 0));\n                ch.pipeline().addLast(new ClientChannelHandler(realServerBootstrap, bootstrap, ProxyClientContainer.this));\n            }\n        });\n    }\n\n    public void start() {\n        connectProxyServer();\n    }\n\n    private ChannelHandler createSslHandler(SSLContext sslContext) {\n        SSLEngine sslEngine = sslContext.createSSLEngine();\n        sslEngine.setUseClientMode(true);\n        return new SslHandler(sslEngine);\n    }\n\n    private void connectProxyServer() {\n        bootstrap.connect(config.getStringValue(\"server.host\"), config.getIntValue(\"server.port\")).addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                if (future.isSuccess()) {\n                    ProxyMessage proxyMessage = new ProxyMessage();\n                    proxyMessage.setType(ProxyMessage.C_TYPE_AUTH);\n                    proxyMessage.setUri(config.getStringValue(\"client.key\"));\n                    future.channel().writeAndFlush(proxyMessage);\n                    sleepTimeMill = 1000;\n                    logger.info(\"connect proxy server success, {}\", future.channel());\n                } else {\n                    logger.warn(\"connect proxy server failed\", future.cause());\n                    reconnectWait();\n                    connectProxyServer();\n                }\n            }\n        });\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n    }\n\n    public void channelInactive(ChannelHandlerContext ctx) {\n        reconnectWait();\n        connectProxyServer();\n    }\n\n    private void reconnectWait() {\n        try {\n            if (sleepTimeMill > 60000) {\n                sleepTimeMill = 1000;\n            }\n            synchronized (this) {\n                sleepTimeMill = sleepTimeMill * 2;\n                wait(sleepTimeMill);\n            }\n        } catch (InterruptedException e) {\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.util.concurrent.ScheduledFuture;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.net.ssl.SSLContext;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProxyClientContainer extends ChannelInboundHandlerAdapter {\n    private static final Logger logger = LoggerFactory.getLogger(ProxyClientContainer.class);\n    private final NioEventLoopGroup workerGroup;\n    private final Bootstrap bootstrap;\n    private final Bootstrap realServerBootstrap;\n    private final Config config;\n    private final SSLContext sslContext;\n    private long sleepTimeMill = 100;\n    private ScheduledFuture<?> reconnectTask;\n\n    public ProxyClientContainer(Config config) {\n        this.config = config;\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n        this.realServerBootstrap = new Bootstrap();\n        this.sslContext = createSslContext();\n        configureBootstrap();\n    }\n\n    private void configureBootstrap() {\n        bootstrap.group(workerGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        if (sslContext != null) {\n                            pipeline.addLast(\"ssl\", createSslHandler(sslContext));\n                        }\n                        // Add proxy communication handlers\n                    }\n                });\n    }\n\n    public void start() {\n        connectProxyServer();\n    }\n\n    private void connectProxyServer() {\n        bootstrap.connect(config.getProxyHost(), config.getProxyPort())\n                .addListener(future -> {\n                    if (!future.isSuccess()) {\n                        logger.warn(\"Connection to proxy failed, attempting reconnect...\");\n                        reconnectWait();\n                    } else {\n                        sleepTimeMill = 100;\n                    }\n                });\n    }\n\n    private SslHandler createSslHandler(SSLContext sslContext) {\n        return new SslHandler(sslContext.createSSLEngine());\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) {\n        logger.info(\"Channel inactive, initiating reconnect...\");\n        reconnectWait();\n    }\n\n    private void reconnectWait() {\n        if (reconnectTask != null) {\n            reconnectTask.cancel(false);\n        }\n        reconnectTask = workerGroup.schedule(() -> {\n            connectProxyServer();\n            sleepTimeMill = Math.min(sleepTimeMill * 2, 10000);\n        }, sleepTimeMill, TimeUnit.MILLISECONDS);\n    }\n\n    public void stop() {\n        if (reconnectTask != null) {\n            reconnectTask.cancel(false);\n        }\n        workerGroup.shutdownGracefully();\n    }\n\n    private SSLContext createSslContext() {\n        // Implementation to create SSLContext based on config\n        return null;\n    }\n}\n```"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a non-blocking connection to a remote server, send serialized objects, and handle graceful shutdown.\n\nClass Description: SerializationClient is a Netty-based TCP client that connects to a specified host and port, sends multiple instances of a serializable object (SerializationBean) to the server, and manages connection lifecycle including proper resource cleanup.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server to connect to\n\nMethods:\n- Constructor: SerializationClient(String host, int port) -> None - Initializes the client with target server's host and port\n- run: void() throws Exception - Main method that:\n  1. Initializes Netty client components\n  2. Establishes TCP connection\n  3. Sends multiple serialized objects\n  4. Manages connection lifecycle and cleanup\n  5. Handles graceful shutdown of resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class SerializationClient {\n\n    private final String host;\n    private final int port;\n\n    public SerializationClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new SerializationClientInitializer());\n\n            Channel channel = bootstrap.connect(host, port).sync().channel();\n\n            SerializationBean user = new SerializationBean();\n\n            for (int i = 0; i < 10; i++) {\n                user = new SerializationBean();\n                user.setAge(i);\n                user.setName(\"waylau\");\n                channel.write(user);\n            }\n            channel.flush();\n\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.serialization.ObjectEncoder;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class SerializationClient {\n    private final String host;\n    private final int port;\n\n    public SerializationClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            ch.pipeline().addLast(new ObjectEncoder());\n                        }\n                    });\n\n            ChannelFuture future = bootstrap.connect(host, port).sync();\n            Channel channel = future.channel();\n\n            List<SerializationBean> beans = Arrays.asList(\n                    new SerializationBean(\"Test1\"),\n                    new SerializationBean(\"Test2\")\n            );\n\n            for (SerializationBean bean : beans) {\n                channel.writeAndFlush(bean);\n            }\n\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    static class SerializationBean implements java.io.Serializable {\n        private String data;\n\n        public SerializationBean(String data) {\n            this.data = data;\n        }\n    }\n}"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, handle Protocol Buffers (protobuf) message encoding/decoding, and manage connection lifecycle.\n\nClass Description: ProtobufProxy is a Netty-based TCP client implementation that connects to a specified server address and port, configures a pipeline for protobuf message processing, and manages connection resources. It implements a Proxy interface and handles graceful shutdown of network resources.\n\nMethods:\n\nconnect: [connect](String serverAddress, int port) -> void - Establishes a TCP connection to the specified server address and port. Configures the Netty pipeline with protobuf handlers and connection management components. The method blocks until the connection is closed and ensures proper resource cleanup.\n\nInput:\n- serverAddress: String - The IP address or hostname of the server to connect to\n- port: int - The TCP port number of the server\n\nOutput: None (void) - The method establishes a persistent connection that remains active until closed by either end",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.nico.ratel.landlords.client.handler.ProtobufTransferHandler;\nimport org.nico.ratel.landlords.client.handler.SecondProtobufCodec;\nimport org.nico.ratel.landlords.entity.ClientTransferData;\nimport org.nico.ratel.landlords.print.SimplePrinter;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class ProtobufProxy implements Proxy {\n\n    @Override\n    public void connect(String serverAddress, int port) throws InterruptedException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline()\n                                    .addLast(new IdleStateHandler(0, 4, 0, TimeUnit.SECONDS))\n                                    .addLast(new ProtobufVarint32FrameDecoder())\n                                    .addLast(new ProtobufDecoder(ClientTransferData.ClientTransferDataProtoc.getDefaultInstance()))\n                                    .addLast(new ProtobufVarint32LengthFieldPrepender())\n                                    .addLast(new ProtobufEncoder())\n                                    .addLast(new SecondProtobufCodec())\n                                    .addLast(new ProtobufTransferHandler());\n                        }\n                    });\n            SimplePrinter.printNotice(\"Connecting to \" + serverAddress + \":\" + port);\n            Channel channel = bootstrap.connect(serverAddress, port).sync().channel();\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarInt32FrameDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarInt32LengthFieldPrepender;\n\npublic class ProtobufProxy implements Proxy {\n    private final EventLoopGroup group = new NioEventLoopGroup();\n\n    @Override\n    public void connect(String serverAddress, int port) {\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(\n                         new ProtobufVarInt32FrameDecoder(),\n                         new ProtobufDecoder(MyMessage.getDefaultInstance()),\n                         new ProtobufVarInt32LengthFieldPrepender(),\n                         new ProtobufEncoder()\n                     );\n                 }\n             });\n\n            ChannelFuture f = b.connect(serverAddress, port).sync();\n            f.channel().closeFuture().sync();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a Java class that implements a Netty TCP client for establishing and managing non-blocking TCP connections to a remote server, handling message sending, and providing reconnection capabilities.\n\nClass Description: The `NettyClient` class is a Spring component that manages a Netty-based TCP client. It handles connection establishment, message sending, automatic reconnection on failure, and graceful shutdown. The client uses Netty's non-blocking I/O model with NioSocketChannel for efficient communication.\n\nAttributes:\n- `RECONNECT_SECONDS`: Integer - The delay in seconds before attempting to reconnect after a connection failure.\n- `logger`: Logger - SLF4J logger for logging client activities and errors.\n- `serverHost`: String - The host address of the remote server to connect to (injected via Spring).\n- `serverPort`: Integer - The port number of the remote server to connect to (injected via Spring).\n- `eventGroup`: EventLoopGroup - Netty event loop group for managing I/O threads.\n- `channel`: Channel - The active channel representing the connection to the server (volatile for thread safety).\n\nMethods:\n- `start()`: void - Initializes and starts the Netty client, attempting to connect to the server. Uses Bootstrap to configure client settings and sets up connection listener.\n- `reconnect()`: void - Schedules a reconnection attempt after a connection failure, using the specified RECONNECT_SECONDS delay.\n- `shutdown()`: void - Gracefully shuts down the client by closing the active channel and releasing event loop resources (annotated with @PreDestroy for Spring lifecycle management).\n- `send(Invocation invocation)`: void - Sends a message to the server through the active channel. Validates channel state before sending.",
    "Canonical_solution": "import cn.iocoder.springboot.lab67.nettyclientdemo.client.handler.NettyClientHandlerInitializer;\nimport cn.iocoder.springboot.lab67.nettycommondemo.codec.Invocation;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport java.util.concurrent.TimeUnit;\n\n@Component\npublic class NettyClient {\n\n    private static final Integer RECONNECT_SECONDS = 20;\n\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    @Value(\"${netty.server.host}\")\n    private String serverHost;\n    @Value(\"${netty.server.port}\")\n    private Integer serverPort;\n\n    private EventLoopGroup eventGroup = new NioEventLoopGroup();\n    private volatile Channel channel;\n\n    @PostConstruct\n    public void start() throws InterruptedException {\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(eventGroup)\n                .channel(NioSocketChannel.class)\n                .remoteAddress(serverHost, serverPort)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .handler(new NettyClientHandlerInitializer());\n\n        bootstrap.connect().addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                if (!future.isSuccess()) {\n                    logger.error(\"[start][Netty Client connection to server({}:{}) failed]\", serverHost, serverPort);\n                    reconnect();\n                    return;\n                }\n                channel = future.channel();\n                logger.info(\"[start][Netty Client connected to server({}:{}) successfully]\", serverHost, serverPort);\n            }\n        });\n    }\n\n    public void reconnect() {\n        eventGroup.schedule(new Runnable() {\n            @Override\n            public void run() {\n                logger.info(\"[reconnect][Starting reconnection]\");\n                try {\n                    start();\n                } catch (InterruptedException e) {\n                    logger.error(\"[reconnect][Reconnection failed]\", e);\n                }\n            }\n        }, RECONNECT_SECONDS, TimeUnit.SECONDS);\n        logger.info(\"[reconnect][Will attempt reconnection in {} seconds]\", RECONNECT_SECONDS);\n    }\n\n    @PreDestroy\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n        }\n        eventGroup.shutdownGracefully();\n    }\n\n    public void send(Invocation invocation) {\n        if (channel == null) {\n            logger.error(\"[send][Connection does not exist]\");\n            return;\n        }\n        if (!channel.isActive()) {\n            logger.error(\"[send][Connection({}) is not active]\", channel.id());\n            return;\n        }\n        channel.writeAndFlush(invocation);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PreDestroy;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\n@Component\npublic class NettyClient {\n    private static final int RECONNECT_SECONDS = 5;\n    private static final Logger logger = LoggerFactory.getLogger(NettyClient.class);\n    @Value(\"${server.host}\")\n    private String serverHost;\n    @Value(\"${server.port}\")\n    private int serverPort;\n    private EventLoopGroup eventGroup;\n    private volatile Channel channel;\n    private ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\n\n    public void start() {\n        eventGroup = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(eventGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                            @Override\n                            public void channelActive(ChannelHandlerContext ctx) {\n                                logger.info(\"Connected to server {}\", serverHost);\n                            }\n\n                            @Override\n                            public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n                                logger.error(\"Connection error\", cause);\n                                ctx.close();\n                                reconnect();\n                            }\n                        });\n                    }\n                });\n\n        ChannelFuture future = bootstrap.connect(serverHost, serverPort);\n        future.addListener((ChannelFutureListener) f -> {\n            if (f.isSuccess()) {\n                channel = f.channel();\n            } else {\n                logger.error(\"Failed to connect to server {}\", serverHost, f.cause());\n                reconnect();\n            }\n        });\n    }\n\n    public void reconnect() {\n        scheduler.schedule(() -> {\n            logger.info(\"Reconnecting to server {}\", serverHost);\n            start();\n        }, RECONNECT_SECONDS, TimeUnit.SECONDS);\n    }\n\n    @PreDestroy\n    public void shutdown() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n        }\n        if (eventGroup != null) {\n            eventGroup.shutdownGracefully().syncUninterruptibly();\n        }\n        scheduler.shutdownNow();\n    }\n\n    public void send(Invocation invocation) {\n        if (channel != null && channel.isActive()) {\n            ByteBuf buffer = Unpooled.wrappedBuffer(invocation.getMessage().getBytes());\n            channel.writeAndFlush(buffer);\n        } else {\n            logger.warn(\"Channel is not active, cannot send message\");\n            reconnect();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 136,
    "Instruction": "Task Description: Create a secure TCP chat client using Java Netty framework that establishes an SSL encrypted connection to a remote server, sends user input messages, and gracefully handles connection termination.\n\nClass Description: SecureChatClient is a Netty-based TCP client that connects to a secure chat server, sends messages from standard input, and properly manages connection lifecycle and resources.\n\nAttributes:\nHOST: String - The server host address (default: \"127.0.0.1\")\nPORT: int - The server port number (default: 8992)\n\nMethods:\nmain: main(String[] args) -> void - Entry point that initializes SSL context, configures Netty client, establishes connection, handles user input, and manages shutdown\n    - args: String[] - Command line arguments (unused in current implementation)\n    - Returns: void",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic final class SecureChatClient {\n\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8992\"));\n\n    public static void main(String[] args) throws Exception {\n        final SslContext sslCtx = SslContextBuilder.forClient()\n            .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new SecureChatClientInitializer(sslCtx));\n\n            Channel ch = b.connect(HOST, PORT).sync().channel();\n\n            ChannelFuture lastWriteFuture = null;\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            for (;;) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                lastWriteFuture = ch.writeAndFlush(line + \"\\r\\n\");\n\n                if (\"bye\".equals(line.toLowerCase())) {\n                    ch.closeFuture().sync();\n                    break;\n                }\n            }\n\n            if (lastWriteFuture != null) {\n                lastWriteFuture.sync();\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.ssl.SSLContext;\nimport io.netty.handler.ssl.SSLEngine;\nimport io.netty.util.CharsetUtil;\n\nimport javax.net.ssl.*;\nimport java.security.SecureRandom;\nimport java.util.Scanner;\nimport java.util.concurrent.TimeUnit;\n\npublic class SecureChatClient {\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = 8992;\n\n    public static void main(String[] args) throws Exception {\n        SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n        sslContext.init(null, new TrustManager[]{new X509TrustManager() {\n            public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) {}\n            public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) {}\n            public java.security.cert.X509Certificate[] getAcceptedIssuers() { return new java.security.cert.X509Certificate[0]; }\n        }}, new SecureRandom());\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     SSLEngine engine = sslContext.createSSLEngine();\n                     engine.setUseClientMode(true);\n                     p.addLast(\"ssl\", new SslHandler(engine));\n                     p.addLast(new ChannelInboundHandlerAdapter() {\n                         @Override\n                         public void channelActive(ChannelHandlerContext ctx) {\n                             System.out.println(\"Connected to server\");\n                         }\n\n                         @Override\n                         public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                             ByteBuf buf = (ByteBuf) msg;\n                             System.out.println(\"Received: \" + buf.toString(CharsetUtil.UTF_8));\n                             buf.release();\n                         }\n\n                         @Override\n                         public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n                             cause.printStackTrace();\n                             ctx.close();\n                         }\n                     });\n                 }\n             });\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            Channel channel = f.channel();\n\n            new Thread(() -> {\n                Scanner scanner = new Scanner(System.in);\n                while (true) {\n                    String line = scanner.nextLine();\n                    if (line.equalsIgnoreCase(\"exit\")) {\n                        channel.close();\n                        break;\n                    }\n                    channel.writeAndFlush(Unpooled.copiedBuffer(line, CharsetUtil.UTF_8));\n                }\n                scanner.close();\n            }).start();\n\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework for network communication, capable of establishing connections, sending/receiving messages, and gracefully shutting down.\n\nClass Description: NettyRemotingClient is a Netty-based TCP client implementation that handles network communication with a remote server. It manages connection lifecycle, message encoding/decoding, and provides synchronous invocation capabilities.\n\nAttributes:\n- bootstrap: [Bootstrap] - Netty's Bootstrap instance for client configuration\n- eventLoopGroupWorker: [EventLoopGroup] - Manages client-side I/O threads\n\nMethods:\n- NettyRemotingClient(): [Constructor] -> [void] - Initializes the client with NioEventLoopGroup and configures Bootstrap with NioSocketChannel, TCP_NODELAY option, and pipeline handlers (encoder, decoder, and client handler)\n- createChannel(String addr): [String addr (host:port format)] -> [ChannelFuture] - Creates a channel connection to the specified address, throws RemotingConnectException if connection fails\n- invokeSync(Channel channel, RemotingCommand request, long timeoutMillis): [Channel channel, RemotingCommand request, long timeoutMillis] -> [CompletableFuture<RemotingCommand>] - Sends a request synchronously through the channel and returns a CompletableFuture for the response\n- shutdown(): [void] -> [void] - Gracefully shuts down the event loop group and releases resources\n- NettyClientHandler: [Inner Class] -> [void] - Handles incoming messages from the server (extends SimpleChannelInboundHandler<RemotingCommand>)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport org.apache.rocketmq.remoting.exception.RemotingConnectException;\nimport org.apache.rocketmq.remoting.protocol.RemotingCommand;\n\nimport java.util.concurrent.CompletableFuture;\n\npublic class NettyRemotingClient {\n\n    private final Bootstrap bootstrap = new Bootstrap();\n    private final EventLoopGroup eventLoopGroupWorker;\n\n    public NettyRemotingClient() {\n        this.eventLoopGroupWorker = new NioEventLoopGroup();\n        this.bootstrap.group(this.eventLoopGroupWorker)\n            .channel(NioSocketChannel.class)\n            .option(ChannelOption.TCP_NODELAY, true)\n            .option(ChannelOption.SO_KEEPALIVE, false)\n            .handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline pipeline = ch.pipeline();\n                    pipeline.addLast(\n                        new NettyEncoder(),\n                        new NettyDecoder(),\n                        new NettyClientHandler());\n                }\n            });\n    }\n\n    public ChannelFuture createChannel(String addr) throws InterruptedException, RemotingConnectException {\n        String[] hostAndPort = addr.split(\":\");\n        ChannelFuture channelFuture = bootstrap.connect(hostAndPort[0], Integer.parseInt(hostAndPort[1])).sync();\n        if (!channelFuture.isSuccess()) {\n            throw new RemotingConnectException(addr);\n        }\n        return channelFuture;\n    }\n\n    public CompletableFuture<RemotingCommand> invokeSync(Channel channel, RemotingCommand request, long timeoutMillis) {\n        CompletableFuture<RemotingCommand> future = new CompletableFuture<>();\n        try {\n            channel.writeAndFlush(request).addListener(f -> {\n                if (f.isSuccess()) {\n                    // Handle response logic here\n                } else {\n                    future.completeExceptionally(f.cause());\n                }\n            });\n        } catch (Exception e) {\n            future.completeExceptionally(e);\n        }\n        return future;\n    }\n\n    public void shutdown() {\n        this.eventLoopGroupWorker.shutdownGracefully();\n    }\n\n    class NettyClientHandler extends SimpleChannelInboundHandler<RemotingCommand> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) throws Exception {\n            // Process incoming messages\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.MessageToMessageDecoder;\nimport io.netty.handler.codec.MessageToMessageEncoder;\nimport io.netty.util.concurrent.Future;\nimport io.netty.util.concurrent.GenericFutureListener;\n\nimport java.net.InetSocketAddress;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.TimeUnit;\nimport java.util.UUID;\n\nclass NettyRemotingClient {\n    private final Bootstrap bootstrap;\n    private final EventLoopGroup eventLoopGroupWorker;\n    private final Map<String, CompletableFuture<RemotingCommand>> pendingFutures = new ConcurrentHashMap<>();\n\n    public NettyRemotingClient() {\n        this.eventLoopGroupWorker = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n        this.bootstrap.group(eventLoopGroupWorker)\n                .channel(NioSocketChannel.class)\n                .option(io.netty.channel.ChannelOption.TCP_NODELAY, true)\n                .handler(new ChannelInitializer<Channel>() {\n                    @Override\n                    protected void initChannel(Channel ch) {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(new RemotingEncoder());\n                        pipeline.addLast(new RemotingDecoder());\n                        pipeline.addLast(new NettyClientHandler());\n                    }\n                });\n    }\n\n    public ChannelFuture createChannel(String addr) throws RemotingConnectException {\n        String[] parts = addr.split(\":\");\n        String host = parts[0];\n        int port = Integer.parseInt(parts[1]);\n        ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port)).syncUninterruptibly();\n        if (!future.isSuccess()) {\n            throw new RemotingConnectException(\"Failed to connect to \" + addr, future.cause());\n        }\n        return future;\n    }\n\n    public CompletableFuture<RemotingCommand> invokeSync(Channel channel, RemotingCommand request, long timeoutMillis) {\n        String uniqueId = UUID.randomUUID().toString();\n        CompletableFuture<RemotingCommand> future = new CompletableFuture<>();\n        pendingFutures.put(uniqueId, future);\n        request.setOpaque(uniqueId);\n        channel.writeAndFlush(request).addListener((GenericFutureListener<Future<Void>>) f -> {\n            if (!f.isSuccess()) {\n                future.completeExceptionally(f.cause());\n            }\n        });\n        try {\n            return future.orTimeout(timeoutMillis, TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            future.completeExceptionally(e);\n            return future;\n        }\n    }\n\n    public void shutdown() {\n        if (eventLoopGroupWorker != null) {\n            eventLoopGroupWorker.shutdownGracefully();\n        }\n    }\n\n    private class NettyClientHandler extends SimpleChannelInboundHandler<RemotingCommand> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) {\n            String uniqueId = msg.getOpaque();\n            CompletableFuture<RemotingCommand> future = pendingFutures.remove(uniqueId);\n            if (future != null) {\n                future.complete(msg);\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            ctx.close();\n        }\n    }\n}\n\nclass RemotingCommand {\n    private String opaque;\n\n    public void setOpaque(String opaque) {\n        this.opaque = opaque;\n    }\n\n    public String getOpaque() {\n        return opaque;\n    }\n}\n\nclass RemotingEncoder extends MessageToMessageEncoder<RemotingCommand> {\n    @Override\n    protected void encode(ChannelHandlerContext ctx, RemotingCommand msg, List<Object> out) {\n        // Implementation for encoding RemotingCommand to ByteBuf\n    }\n}\n\nclass RemotingDecoder extends MessageToMessageDecoder<ByteBuf> {\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf msg, List<Object> out) {\n        // Implementation for decoding ByteBuf to RemotingCommand\n    }\n}\n\nclass RemotingConnectException extends Exception {\n    public RemotingConnectException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n```"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a Java class that implements a WebSocket client proxy using Netty framework to establish and manage WebSocket connections to a remote server.\n\nClass Description: The WebsocketProxy class implements the Proxy interface and provides functionality to connect to a WebSocket server using Netty's non-blocking I/O. It handles WebSocket protocol negotiation, connection management, and graceful shutdown of resources.\n\nAttributes: (This class doesn't have any explicit attributes as it's primarily focused on connection management)\n\nMethods:\n1: connect(String serverAddress, int port) -> void - Establishes a WebSocket connection to the specified server address and port. The method:\n   - Creates a WebSocket URI using the provided address and port\n   - Initializes Netty's event loop group and bootstrap\n   - Configures the channel pipeline with necessary handlers (idle state, HTTP codec, WebSocket protocol)\n   - Connects to the server and waits for the connection to close\n   - Ensures proper resource cleanup on shutdown\n   Throws InterruptedException if the connection is interrupted and URISyntaxException if the URI is malformed\n\nInput:\n- serverAddress: String - The IP address or hostname of the WebSocket server\n- port: int - The port number on which the WebSocket server is listening\n\nOutput: None (void) - The method establishes a persistent connection that remains open until closed by either end",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.websocketx.*;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.nico.ratel.landlords.client.handler.WebsocketTransferHandler;\nimport org.nico.ratel.landlords.print.SimplePrinter;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.concurrent.TimeUnit;\n\npublic class WebsocketProxy implements Proxy {\n\n    @Override\n    public void connect(String serverAddress, int port) throws InterruptedException, URISyntaxException {\n        URI uri = new URI(\"ws://\" + serverAddress + \":\" + port + \"/ratel\");\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline()\n                                    .addLast(new IdleStateHandler(60 * 30, 0, 0, TimeUnit.SECONDS))\n                                    .addLast(new HttpClientCodec())\n                                    .addLast(new HttpObjectAggregator(8192))\n                                    .addLast(new WebSocketClientProtocolHandler(uri\n                                            , WebSocketVersion.V13\n                                            , null\n                                            , true\n                                            , new DefaultHttpHeaders(), 100000))\n                                    .addLast(\"ws\", new WebsocketTransferHandler());\n                        }\n                    });\n            SimplePrinter.printNotice(\"Connecting to \" + serverAddress + \":\" + port);\n            Channel channel = bootstrap.connect(serverAddress, port).sync().channel();\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\npublic class WebsocketProxy implements Proxy {\n    public void connect(String serverAddress, int port) throws URISyntaxException, InterruptedException {\n        URI uri = new URI(\"ws://\" + serverAddress + \":\" + port);\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ChannelPipeline pipeline = ch.pipeline();\n                     pipeline.addLast(new IdleStateHandler(60, 30, 0));\n                     pipeline.addLast(new HttpClientCodec());\n                     pipeline.addLast(new WebSocketClientProtocolHandler(uri));\n                 }\n             });\n            Channel channel = b.connect(uri.getHost(), uri.getPort()).sync().channel();\n            channel.closeFuture().await();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Implement a class that provides memory-mapped file operations for efficient random read access while supporting sequential write operations. The class should manage file segments, handle resource cleanup, and provide disk usage information.\n\nClass Description: AppendStoreMmap is an abstract class that implements memory-mapped file operations for large files divided into segments. It combines sequential writing with random reading capabilities using memory mapping for efficient access. The class handles file channel management, segment mapping, and resource cleanup.\n\nAttributes:\n- outputStream: DataOutputStream - Used for sequential writing operations\n- segmentBits: int - Number of bits representing segment size (log2 of segment size)\n- segmentMask: long - Bitmask for segment calculations\n- segmentBytes: long - Size of each segment in bytes\n- path: Path - File path being operated on\n- madvise: boolean - Whether to use memory advice for mapped buffers\n- outIdx: long - Current output index position\n- segments: MappedByteBuffer[] - Array of mapped byte buffers for file segments\n- channel: FileChannel - File channel for memory mapping operations\n- LOGGER: Logger - Logger instance for error reporting\n\nMethods:\n- AppendStoreMmap(Path path, boolean madvise) -> None - Constructor with default segment size (1GB)\n- AppendStoreMmap(Path path, long segmentSizeBytes, boolean madvise) -> None - Constructor with custom segment size\n- getSegments() -> MappedByteBuffer[] - Returns mapped segments, initializing them if needed\n- close() -> None - Closes all resources and unmaps segments\n- diskUsageBytes() -> long - Returns current disk usage of the file",
    "Canonical_solution": "import java.io.BufferedOutputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.Arrays;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nabstract class AppendStoreMmap implements AppendStore {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(AppendStoreMmap.class);\n\n  final DataOutputStream outputStream;\n  final int segmentBits;\n  final long segmentMask;\n  final long segmentBytes;\n  private final Path path;\n  private final boolean madvise;\n  long outIdx = 0;\n  private volatile MappedByteBuffer[] segments;\n  private volatile FileChannel channel;\n\n  AppendStoreMmap(Path path, boolean madvise) {\n    this(path, 1 << 30, madvise);\n  }\n\n  AppendStoreMmap(Path path, long segmentSizeBytes, boolean madvise) {\n    this.path = path;\n    this.madvise = madvise;\n    segmentBits = (int) (Math.log(segmentSizeBytes) / Math.log(2));\n    segmentMask = (1L << segmentBits) - 1;\n    segmentBytes = segmentSizeBytes;\n    try {\n      this.outputStream = new DataOutputStream(new BufferedOutputStream(Files.newOutputStream(path), 50_000));\n    } catch (IOException e) {\n      throw new IllegalStateException(\"Could not create SequentialWriteRandomReadFile output stream\", e);\n    }\n  }\n\n  MappedByteBuffer[] getSegments() {\n    if (segments == null) {\n      synchronized (this) {\n        if (segments == null) {\n          try {\n            outputStream.close();\n            channel = FileChannel.open(path, StandardOpenOption.READ);\n            segments = ByteBufferUtil.mapFile(channel, outIdx, segmentBytes, madvise);\n          } catch (IOException e) {\n            throw new UncheckedIOException(e);\n          }\n        }\n      }\n    }\n    return segments;\n  }\n\n  @Override\n  public void close() throws IOException {\n    outputStream.close();\n    synchronized (this) {\n      if (channel != null) {\n        channel.close();\n      }\n      if (segments != null) {\n        try {\n          ByteBufferUtil.free(segments);\n        } catch (IOException e) {\n          LOGGER.info(\"Unable to unmap {} {}\", path, e);\n        }\n        Arrays.fill(segments, null);\n      }\n    }\n  }\n\n  @Override\n  public long diskUsageBytes() {\n    return FileUtils.size(path);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.DataOutputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.logging.Logger;\n\npublic abstract class AppendStoreMmap {\n    protected DataOutputStream outputStream;\n    protected int segmentBits;\n    protected long segmentMask;\n    protected long segmentBytes;\n    protected Path path;\n    protected boolean madvise;\n    protected long outIdx;\n    protected MappedByteBuffer[] segments;\n    protected FileChannel channel;\n    protected Logger LOGGER;\n\n    public AppendStoreMmap(Path path, boolean madvise) throws IOException {\n        this(path, 1L << 30, madvise);\n    }\n\n    public AppendStoreMmap(Path path, long segmentSizeBytes, boolean madvise) throws IOException {\n        this.path = path;\n        this.segmentBytes = segmentSizeBytes;\n        this.segmentBits = Long.numberOfTrailingZeros(segmentSizeBytes);\n        this.segmentMask = segmentSizeBytes - 1;\n        this.madvise = madvise;\n        this.outIdx = 0;\n        this.segments = null;\n        this.LOGGER = Logger.getLogger(AppendStoreMmap.class.getName());\n\n        this.channel = FileChannel.open(path, StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.CREATE);\n        FileOutputStream fos = new FileOutputStream(path.toFile(), true);\n        this.outputStream = new DataOutputStream(fos);\n    }\n\n    public MappedByteBuffer[] getSegments() throws IOException {\n        if (segments == null) {\n            long fileSize = channel.size();\n            long numSegments = (fileSize + segmentBytes - 1) / segmentBytes;\n            segments = new MappedByteBuffer[(int) numSegments];\n            for (int i = 0; i < numSegments; i++) {\n                long position = (long) i * segmentBytes;\n                long size = Math.min(segmentBytes, fileSize - position);\n                segments[i] = channel.map(FileChannel.MapMode.READ_ONLY, position, size);\n                if (madvise) {\n                    try {\n                        java.lang.reflect.Field cleanerField = segments[i].getClass().getDeclaredField(\"cleaner\");\n                        cleanerField.setAccessible(true);\n                        java.lang.reflect.Method cleanMethod = cleanerField.getType().getDeclaredMethod(\"clean\");\n                        cleanMethod.invoke(cleanerField.get(segments[i]));\n                    } catch (Exception e) {\n                        LOGGER.warning(\"Failed to apply madvise: \" + e.getMessage());\n                    }\n                }\n            }\n        }\n        return segments;\n    }\n\n    public void close() {\n        try {\n            if (outputStream != null) {\n                outputStream.close();\n            }\n            if (channel != null) {\n                channel.close();\n            }\n            if (segments != null) {\n                for (MappedByteBuffer buffer : segments) {\n                    if (buffer != null) {\n                        try {\n                            java.lang.reflect.Field cleanerField = buffer.getClass().getDeclaredField(\"cleaner\");\n                            cleanerField.setAccessible(true);\n                            java.lang.reflect.Method cleanMethod = cleanerField.getType().getDeclaredMethod(\"clean\");\n                            cleanMethod.invoke(cleanerField.get(buffer));\n                        } catch (Exception e) {\n                            LOGGER.warning(\"Failed to unmap buffer: \" + e.getMessage());\n                        }\n                    }\n                }\n            }\n        } catch (IOException e) {\n            LOGGER.warning(\"Error closing resources: \" + e.getMessage());\n        }\n    }\n\n    public long diskUsageBytes() {\n        try {\n            return channel.size();\n        } catch (IOException e) {\n            LOGGER.warning(\"Error getting disk usage: \" + e.getMessage());\n            return 0;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based HTTP client for RPC communication, capable of establishing and managing TCP connections, sending requests, and handling responses.\n\nClass Description: NettyHttpConnectClient is a connection client implementation that uses Netty framework to establish HTTP connections with a remote server. It handles connection lifecycle, request sending, and connection validation.\n\nAttributes:\n- group: [EventLoopGroup] - Manages client-side I/O threads\n- channel: [Channel] - Represents the active network channel\n- serializer: [Serializer] - Handles request/response serialization\n- address: [String] - The server address including protocol and port\n- host: [String] - The server hostname extracted from address\n\nMethods:\n- init: [init(String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory)] -> [void] - Initializes the client with server address, serializer and invoker factory. Creates Netty bootstrap and establishes connection.\n- isValidate: [isValidate()] -> [boolean] - Checks if the current connection is active and valid.\n- close: [close()] -> [void] - Closes the active connection and releases resources.\n- send: [send(XxlRpcRequest xxlRpcRequest)] -> [void] - Serializes and sends an RPC request to the server through the established channel.",
    "Canonical_solution": "import com.wugui.datax.rpc.remoting.invoker.XxlRpcInvokerFactory;\nimport com.wugui.datax.rpc.remoting.net.common.ConnectClient;\nimport com.wugui.datax.rpc.remoting.net.common.NettyConstant;\nimport com.wugui.datax.rpc.remoting.net.params.Beat;\nimport com.wugui.datax.rpc.remoting.net.params.XxlRpcRequest;\nimport com.wugui.datax.rpc.serialize.Serializer;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.net.URI;\nimport java.net.URL;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyHttpConnectClient extends ConnectClient {\n\n    private EventLoopGroup group;\n    private Channel channel;\n    private Serializer serializer;\n    private String address;\n    private String host;\n\n    @Override\n    public void init(String address, final Serializer serializer, final XxlRpcInvokerFactory xxlRpcInvokerFactory) throws Exception {\n        final NettyHttpConnectClient thisClient = this;\n\n        if (!address.toLowerCase().startsWith(\"http\")) {\n            address = \"http://\" + address;\n        }\n\n        this.address = address;\n        URL url = new URL(address);\n        this.host = url.getHost();\n        int port = url.getPort() > -1 ? url.getPort() : 80;\n\n        this.group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel channel) throws Exception {\n                        channel.pipeline()\n                                .addLast(new IdleStateHandler(0, 0, Beat.BEAT_INTERVAL, TimeUnit.SECONDS))\n                                .addLast(new HttpClientCodec())\n                                .addLast(new HttpObjectAggregator(NettyConstant.MAX_LENGTH))\n                                .addLast(new NettyHttpClientHandler(xxlRpcInvokerFactory, serializer, thisClient));\n                    }\n                })\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000);\n        this.channel = bootstrap.connect(host, port).sync().channel();\n\n        this.serializer = serializer;\n\n        if (!isValidate()) {\n            close();\n            return;\n        }\n    }\n\n    @Override\n    public boolean isValidate() {\n        if (this.channel != null) {\n            return this.channel.isActive();\n        }\n        return false;\n    }\n\n    @Override\n    public void close() {\n        if (this.channel != null && this.channel.isActive()) {\n            this.channel.close();\n        }\n        if (this.group != null && !this.group.isShutdown()) {\n            this.group.shutdownGracefully();\n        }\n    }\n\n    @Override\n    public void send(XxlRpcRequest xxlRpcRequest) throws Exception {\n        byte[] requestBytes = serializer.serialize(xxlRpcRequest);\n\n        DefaultFullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, new URI(address).getRawPath(), Unpooled.wrappedBuffer(requestBytes));\n        request.headers().set(HttpHeaderNames.HOST, host);\n        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);\n        request.headers().set(HttpHeaderNames.CONTENT_LENGTH, request.content().readableBytes());\n\n        this.channel.writeAndFlush(request).sync();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.util.concurrent.GenericFutureListener;\n\npublic class NettyHttpConnectClient {\n    private EventLoopGroup group;\n    private Channel channel;\n    private Serializer serializer;\n    private String address;\n    private String host;\n\n    public void init(String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory) {\n        this.address = address;\n        this.serializer = serializer;\n        try {\n            URI uri = new URI(address);\n            this.host = uri.getHost();\n            int port = uri.getPort() == -1 ? 80 : uri.getPort();\n\n            group = new NioEventLoopGroup();\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new HttpClientCodec());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            channel = f.channel();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean isValidate() {\n        return channel != null && channel.isActive();\n    }\n\n    public void close() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n            channel = null;\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void send(XxlRpcRequest xxlRpcRequest) {\n        if (channel == null || !channel.isActive()) {\n            return;\n        }\n        byte[] data = serializer.serialize(xxlRpcRequest);\n        ByteBuf buf = Unpooled.wrappedBuffer(data);\n        FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, \"/\", buf);\n        request.headers().set(HttpHeaderNames.CONTENT_TYPE, \"application/octet-stream\");\n        request.headers().set(HttpHeaderNames.HOST, host);\n        channel.writeAndFlush(request);\n    }\n}\n```"
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based TCP client for HTTP communication, supporting SSL/TLS encryption, chunked content transfer, and asynchronous request/response handling.\n\nClass Description: The NettyClient class establishes and manages TCP connections to a remote server using Netty's asynchronous I/O framework. It handles HTTP requests and responses, supports SSL/TLS encryption, and provides callback mechanisms for asynchronous processing.\n\nAttributes:\n- hostname: String - The target server hostname\n- port: int - The target server port\n- group: EventLoopGroup - Manages client-side I/O threads\n- b: Bootstrap - Configures Netty client behavior\n- responseParts: Queue<HttpObject> - Stores received HTTP response parts\n- callbackInvoked: AtomicBoolean - Tracks callback invocation status\n- communicationHandler: CommunicationHandler - Processes incoming HTTP messages\n- isOpen: AtomicBoolean - Tracks client connection state\n- request: HttpRequest - Current HTTP request being sent\n- content: ChunkedInput<HttpContent> - Optional request content\n- responseFuture: FutureResult<ResponseParts> - Future for response handling\n- callback: Callback<ResponseParts> - Callback for response handling\n- channelConnectFuture: ChannelFuture - Future for channel connection\n- exception: Exception - Stores any encountered exceptions\n- isKeepAlive: boolean - Tracks HTTP keep-alive status\n\nMethods:\n- NettyClient(String, int, SSLFactory) -> void - Constructor that initializes the client with hostname, port, and optional SSL factory\n- sendRequest(HttpRequest, ChunkedInput<HttpContent>, Callback<ResponseParts>) -> Future<ResponseParts> - Sends an HTTP request with optional content and registers a callback\n- close() -> void - Gracefully shuts down the client and releases resources\n- resetState() -> void - Resets internal state for new requests\n- createChannel() -> void - Creates a new channel connection to the server\n- invokeFutureAndCallback(String) -> void - Invokes the response future and callback with results\n- CommunicationHandler (inner class) - Handles incoming HTTP messages and exceptions\n\nInner Classes:\n- CommunicationHandler: SimpleChannelInboundHandler<HttpObject> - Processes HTTP responses and exceptions\n- ResponseParts: static class - Wrapper for HTTP response parts and completion context",
    "Canonical_solution": "import com.github.ambry.commons.SSLFactory;\nimport com.github.ambry.commons.Callback;\nimport com.github.ambry.router.FutureResult;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpContent;\nimport io.netty.handler.codec.http.HttpObject;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpResponse;\nimport io.netty.handler.codec.http.HttpUtil;\nimport io.netty.handler.codec.http.LastHttpContent;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.stream.ChunkedInput;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.util.ReferenceCountUtil;\nimport io.netty.util.concurrent.GenericFutureListener;\nimport java.io.Closeable;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class NettyClient implements Closeable {\n  private final String hostname;\n  private final int port;\n  private final EventLoopGroup group = new NioEventLoopGroup();\n  private final Bootstrap b = new Bootstrap();\n  private final Queue<HttpObject> responseParts = new LinkedList<HttpObject>();\n  private final AtomicBoolean callbackInvoked = new AtomicBoolean(false);\n  private final CommunicationHandler communicationHandler = new CommunicationHandler();\n  private final AtomicBoolean isOpen = new AtomicBoolean(true);\n\n  private HttpRequest request;\n  private ChunkedInput<HttpContent> content;\n  private FutureResult<ResponseParts> responseFuture;\n  private Callback<ResponseParts> callback;\n  private volatile ChannelFuture channelConnectFuture;\n  private volatile Exception exception = null;\n  private volatile boolean isKeepAlive = false;\n\n  public NettyClient(final String hostname, final int port, final SSLFactory sslFactory) throws InterruptedException {\n    this.hostname = hostname;\n    this.port = port;\n    b.group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<SocketChannel>() {\n      @Override\n      public void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline pipeline = ch.pipeline();\n        if (sslFactory != null) {\n          pipeline.addLast(\"sslHandler\",\n              new SslHandler(sslFactory.createSSLEngine(hostname, port, SSLFactory.Mode.CLIENT)));\n        }\n        pipeline.addLast(new HttpClientCodec()).addLast(new ChunkedWriteHandler()).addLast(communicationHandler);\n      }\n    });\n    createChannel();\n  }\n\n  public Future<ResponseParts> sendRequest(HttpRequest request, ChunkedInput<HttpContent> content,\n      Callback<ResponseParts> callback) {\n    this.request = request;\n    this.content = content;\n    this.callback = callback;\n    resetState();\n    channelConnectFuture.addListener(new GenericFutureListener<ChannelFuture>() {\n      @Override\n      public void operationComplete(ChannelFuture future) {\n        if (future.isSuccess()) {\n          future.channel().write(request).addListener(new GenericFutureListener<ChannelFuture>() {\n            @Override\n            public void operationComplete(ChannelFuture future) {\n              if (!future.isSuccess()) {\n                exception = (Exception) future.cause();\n                invokeFutureAndCallback(\"WriteResultListener::operationComplete\");\n              }\n            }\n          });\n          if (content != null) {\n            future.channel().write(content).addListener(new GenericFutureListener<ChannelFuture>() {\n              @Override\n              public void operationComplete(ChannelFuture future) {\n                if (!future.isSuccess()) {\n                  exception = (Exception) future.cause();\n                  invokeFutureAndCallback(\"WriteResultListener::operationComplete\");\n                }\n              }\n            });\n          }\n          future.channel().flush();\n        } else {\n          exception = (Exception) future.cause();\n          invokeFutureAndCallback(\"RequestSender::operationComplete\");\n        }\n      }\n    });\n    return responseFuture;\n  }\n\n  @Override\n  public void close() {\n    if (isOpen.compareAndSet(true, false) {\n      group.shutdownGracefully();\n    }\n  }\n\n  private void resetState() {\n    responseFuture = new FutureResult<>();\n    responseParts.clear();\n    exception = null;\n    callbackInvoked.set(false);\n  }\n\n  private void createChannel() throws InterruptedException {\n    channelConnectFuture = b.connect(hostname, port);\n    channelConnectFuture.channel().closeFuture().addListener(new GenericFutureListener<ChannelFuture>() {\n      @Override\n      public void operationComplete(ChannelFuture future) throws InterruptedException {\n        if (isOpen.get()) {\n          createChannel();\n        }\n        invokeFutureAndCallback(\"ChannelCloseListener::operationComplete\");\n      }\n    });\n  }\n\n  private void invokeFutureAndCallback(String completionContext) {\n    if (callbackInvoked.compareAndSet(false, true)) {\n      responseFuture.done(new ResponseParts(responseParts, completionContext), exception);\n      if (callback != null) {\n        callback.onCompletion(new ResponseParts(responseParts, completionContext), exception);\n      }\n    }\n  }\n\n  @ChannelHandler.Sharable\n  private class CommunicationHandler extends SimpleChannelInboundHandler<HttpObject> {\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx, HttpObject in) {\n      responseParts.offer(ReferenceCountUtil.retain(in));\n      if (in instanceof HttpResponse && in.decoderResult().isSuccess()) {\n        isKeepAlive = HttpUtil.isKeepAlive((HttpResponse) in);\n      } else if (in.decoderResult().isFailure()) {\n        Throwable cause = in.decoderResult().cause();\n        if (cause instanceof Exception) {\n          exception = (Exception) cause;\n        } else {\n          exception =\n              new Exception(\"Encountered Throwable when trying to decode response. Message: \" + cause.getMessage());\n        }\n        invokeFutureAndCallback(\"CommunicationHandler::channelRead0 - decoder failure\");\n      }\n      if (in instanceof LastHttpContent) {\n        if (isKeepAlive) {\n          invokeFutureAndCallback(\"CommunicationHandler::channelRead0 - last content\");\n        } else {\n          ctx.close();\n        }\n      }\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) {\n      ctx.close();\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n      if (cause instanceof Exception) {\n        exception = (Exception) cause;\n        ctx.close();\n      } else {\n        ctx.fireExceptionCaught(cause);\n      }\n    }\n  }\n\n  public static class ResponseParts {\n    public final Queue<HttpObject> queue;\n    public final String completionContext;\n\n    private ResponseParts(Queue<HttpObject> queue, String completionContext) {\n      this.queue = queue;\n      this.completionContext = completionContext;\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.multipart.HttpData;\nimport io.netty.handler.codec.http.multipart.HttpPostRequestEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.stream.ChunkedWriteHandler;\n\nimport java.util.Queue;\nimport java.util.LinkedList;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class NettyClient {\n    private final String hostname;\n    private final int port;\n    private final EventLoopGroup group;\n    private final Bootstrap b;\n    private final Queue<HttpObject> responseParts;\n    private final AtomicBoolean callbackInvoked;\n    private CommunicationHandler communicationHandler;\n    private final AtomicBoolean isOpen;\n    private HttpRequest request;\n    private ChunkedInput<HttpContent> content;\n    private FutureResult<ResponseParts> responseFuture;\n    private Callback<ResponseParts> callback;\n    private ChannelFuture channelConnectFuture;\n    private Exception exception;\n    private boolean isKeepAlive;\n\n    public NettyClient(String hostname, int port, SSLFactory sslFactory) {\n        this.hostname = hostname;\n        this.port = port;\n        this.group = new NioEventLoopGroup();\n        this.b = new Bootstrap();\n        this.b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline pipeline = ch.pipeline();\n                     if (sslFactory != null) {\n                         SslContext sslCtx = sslFactory.createSslContext();\n                         pipeline.addLast(\"ssl\", new SslHandler(sslCtx.newEngine(ch.alloc())));\n                     }\n                     pipeline.addLast(\"chunked\", new ChunkedWriteHandler());\n                     pipeline.addLast(\"handler\", new CommunicationHandler());\n                 }\n             });\n        this.responseParts = new LinkedList<>();\n        this.callbackInvoked = new AtomicBoolean(false);\n        this.isOpen = new AtomicBoolean(false);\n        this.communicationHandler = new CommunicationHandler();\n    }\n\n    public Future<ResponseParts> sendRequest(HttpRequest request, ChunkedInput<HttpContent> content, Callback<ResponseParts> callback) {\n        this.request = request;\n        this.content = content;\n        this.callback = callback;\n        this.responseFuture = new FutureResult<>();\n        this.callbackInvoked.set(false);\n        this.responseParts.clear();\n        this.isKeepAlive = false;\n\n        createChannel();\n\n        return responseFuture;\n    }\n\n    private void createChannel() {\n        channelConnectFuture = b.connect(hostname, port).addListener(f -> {\n            if (f.isSuccess()) {\n                isOpen.set(true);\n                Channel channel = f.channel();\n                channel.writeAndFlush(request);\n                if (content != null) {\n                    channel.writeAndFlush(content);\n                }\n            } else {\n                exception = new Exception(\"Connection failed\");\n                responseFuture.setFailure(exception);\n            }\n        });\n    }\n\n    public void close() {\n        if (isOpen.get()) {\n            channelConnectFuture.channel().close();\n            group.shutdownGracefully();\n            isOpen.set(false);\n        }\n    }\n\n    private void resetState() {\n        responseParts.clear();\n        callbackInvoked.set(false);\n        isKeepAlive = false;\n    }\n\n    private void invokeFutureAndCallback(String result) {\n        if (!callbackInvoked.getAndSet(true)) {\n            responseFuture.setResult(new ResponseParts(responseParts, isKeepAlive));\n            callback.onSuccess(new ResponseParts(responseParts, isKeepAlive));\n        }\n    }\n\n    private class CommunicationHandler extends SimpleChannelInboundHandler<HttpObject> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws Exception {\n            if (msg instanceof HttpResponse) {\n                HttpResponse response = (HttpResponse) msg;\n                responseParts.add(response);\n                isKeepAlive = HttpUtil.isKeepAlive(response);\n            } else if (msg instanceof HttpContent) {\n                HttpContent content = (HttpContent) msg;\n                responseParts.add(content);\n                if (content instanceof LastHttpContent) {\n                    invokeFutureAndCallback(\"complete\");\n                }\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            exception = new Exception(cause);\n            responseFuture.setFailure(exception);\n            ctx.close();\n        }\n    }\n\n    public static class ResponseParts {\n        private final Queue<HttpObject> parts;\n        private final boolean isKeepAlive;\n\n        public ResponseParts(Queue<HttpObject> parts, boolean isKeepAlive) {\n            this.parts = parts;\n            this.isKeepAlive = isKeepAlive;\n        }\n\n        public Queue<HttpObject> getParts() {\n            return parts;\n        }\n\n        public boolean isKeepAlive() {\n            return isKeepAlive;\n        }\n    }\n\n    public interface Callback<T> {\n        void onSuccess(T result);\n        void onFailure(Exception e);\n    }\n\n    public static class FutureResult<T> {\n        private T result;\n        private Exception exception;\n        private boolean isSet = false;\n\n        public synchronized void setResult(T result) {\n            if (!isSet) {\n                this.result = result;\n                isSet = true;\n            }\n        }\n\n        public synchronized void setFailure(Exception e) {\n            if (!isSet) {\n                this.exception = e;\n                isSet = true;\n            }\n        }\n\n        public T get() throws Exception {\n            if (exception != null) {\n                throw exception;\n            }\n            return result;\n        }\n    }\n\n    public static class SSLFactory {\n        public SslContext createSslContext() {\n            // Implementation depends on specific SSL configuration\n            return null;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a Java class that implements a HTTP client using Netty framework to send HTTP requests and receive responses.\n\nClass Description: The HttpSnoopClient class is a Netty-based HTTP client that establishes TCP connections, sends HTTP requests, and handles responses. It supports SSL/TLS connections and provides methods for connection management.\n\nAttributes:\n- group: [NioEventLoopGroup] - Manages event loops for client I/O operations\n- bootstrap: [Bootstrap] - Configures and initializes the Netty client\n- channel: [Channel] - Represents the active network connection\n\nMethods:\n- HttpSnoopClient(): [Constructor] -> [void] - Initializes the event loop group and bootstrap instance\n- connect(String host, int port, SslContext sslCtx): [void] -> [void] - Establishes a connection to the specified host and port with optional SSL context\n- sendRequest(URI uri, String host): [void] -> [void] - Sends an HTTP GET request to the specified URI with appropriate headers\n- waitForClose(): [void] -> [void] - Waits for the channel to close\n- shutdown(): [void] -> [void] - Shuts down the event loop group gracefully\n- createSslContext(): [static] -> [SslContext] - Creates and returns an SSL context with insecure trust manager for testing purposes",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.cookie.ClientCookieEncoder;\nimport io.netty.handler.codec.http.cookie.DefaultCookie;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.net.URI;\n\npublic final class HttpSnoopClient {\n\n    static final String URL = System.getProperty(\"url\", \"http://127.0.0.1:8080/\");\n\n    private final EventLoopGroup group;\n    private final Bootstrap bootstrap;\n    private Channel channel;\n\n    public HttpSnoopClient() {\n        group = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n    }\n\n    public void connect(String host, int port, SslContext sslCtx) throws InterruptedException {\n        bootstrap.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new HttpSnoopClientInitializer(sslCtx));\n        channel = bootstrap.connect(host, port).sync().channel();\n    }\n\n    public void sendRequest(URI uri, String host) {\n        HttpRequest request = new DefaultFullHttpRequest(\n                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.getRawPath());\n        request.headers().set(HttpHeaderNames.HOST, host);\n        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);\n        request.headers().set(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.GZIP);\n        request.headers().set(\n                HttpHeaderNames.COOKIE,\n                ClientCookieEncoder.STRICT.encode(\n                        new DefaultCookie(\"my-cookie\", \"foo\"),\n                        new DefaultCookie(\"another-cookie\", \"bar\")));\n        channel.writeAndFlush(request);\n    }\n\n    public void waitForClose() throws InterruptedException {\n        channel.closeFuture().sync();\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n    }\n\n    public static SslContext createSslContext() throws Exception {\n        return SslContextBuilder.forClient()\n            .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpMethod;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport java.net.URI;\nimport java.nio.charset.CharsetUtil;\n\npublic class HttpSnoopClient {\n    private final EventLoopGroup group;\n    private final Bootstrap bootstrap;\n    private Channel channel;\n\n    public HttpSnoopClient() {\n        group = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                 .channel(NioSocketChannel.class);\n    }\n\n    public void connect(String host, int port, SslContext sslCtx) throws Exception {\n        bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) {\n                if (sslCtx != null) {\n                    ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n                }\n                ch.pipeline().addLast(new HttpClientCodec());\n                ch.pipeline().addLast(new HttpObjectAggregator(8192));\n                ch.pipeline().addLast(new HttpSnoopClientHandler());\n            }\n        });\n\n        channel = bootstrap.connect(host, port).sync().channel();\n    }\n\n    public void sendRequest(URI uri, String host) {\n        FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, uri.toString());\n        request.headers().set(HttpHeaderNames.HOST, host);\n        request.headers().set(HttpHeaderNames.CONTENT_LENGTH, request.content().readableBytes());\n\n        channel.writeAndFlush(request);\n    }\n\n    public void waitForClose() throws InterruptedException {\n        channel.closeFuture().sync();\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n    }\n\n    public static SslContext createSslContext() throws Exception {\n        return SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                .build();\n    }\n\n    private static class HttpSnoopClientHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof FullHttpResponse) {\n                FullHttpResponse response = (FullHttpResponse) msg;\n                System.out.println(\"Received response: \" + response.status());\n                System.out.println(\"Content: \" + response.content().toString(CharsetUtil.UTF_8));\n            }\n            ctx.fireChannelRead(msg);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a Java class that implements an HTTP/2 client using Netty framework to establish TCP connections, send HTTP/2 requests, and handle responses.\n\nClass Description: The Http2Client class provides functionality to connect to an HTTP/2 server, send requests, and disconnect gracefully. It uses Netty's non-blocking I/O capabilities for efficient network communication.\n\nAttributes:\n- HOST: [String] - The host address to connect to (default: \"127.0.0.1\")\n- PORT: [int] - The port number to connect to (default: 8080)\n- URL: [String] - The endpoint path for HTTP requests (default: \"/whatever\")\n- workerGroup: [EventLoopGroup] - Manages client-side I/O threads\n- initializer: [Http2ClientInitializer] - Configures the client pipeline\n- channel: [Channel] - Represents the network communication channel\n\nMethods:\n- connect(): [void] - Establishes a TCP connection to the specified host and port using Netty's Bootstrap\n- sendRequest(): [void] - Sends an HTTP/2 request to the connected server and waits for responses\n- disconnect(): [void] - Closes the connection and releases resources gracefully",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpHeaderValues;\nimport io.netty.handler.codec.http.HttpScheme;\nimport io.netty.handler.codec.http2.HttpConversionUtil;\nimport io.netty.util.AsciiString;\nimport java.util.concurrent.TimeUnit;\n\npublic final class Http2Client {\n\n    private static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    private static final int PORT = 8080;\n    private static final String URL = System.getProperty(\"url\", \"/whatever\");\n\n    private EventLoopGroup workerGroup;\n    private Http2ClientInitializer initializer;\n    private Channel channel;\n\n    public void connect() throws Exception {\n        workerGroup = new NioEventLoopGroup();\n        initializer = new Http2ClientInitializer(Integer.MAX_VALUE);\n\n        Bootstrap b = new Bootstrap();\n        b.group(workerGroup);\n        b.channel(NioSocketChannel.class);\n        b.option(ChannelOption.SO_KEEPALIVE, true);\n        b.remoteAddress(HOST, PORT);\n        b.handler(initializer);\n\n        channel = b.connect().syncUninterruptibly().channel();\n        System.out.println(\"Connected to [\" + HOST + ':' + PORT + ']');\n    }\n\n    public void sendRequest() throws Exception {\n        Http2SettingsHandler http2SettingsHandler = initializer.settingsHandler();\n        http2SettingsHandler.awaitSettings(5, TimeUnit.SECONDS);\n\n        HttpResponseHandler responseHandler = initializer.responseHandler();\n        int streamId = 3;\n        HttpScheme scheme = HttpScheme.HTTP;\n        AsciiString hostName = new AsciiString(HOST + ':' + PORT);\n        System.err.println(\"Sending request(s)...\");\n\n        if (URL != null) {\n            FullHttpRequest request = new DefaultFullHttpRequest(HTTP_1_1, GET, URL, Unpooled.EMPTY_BUFFER);\n            request.headers().add(HttpHeaderNames.HOST, hostName);\n            request.headers().add(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(), scheme.name());\n            request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.GZIP);\n            request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.DEFLATE);\n            responseHandler.put(streamId, channel.write(request), channel.newPromise());\n        }\n\n        channel.flush();\n        responseHandler.awaitResponses(5, TimeUnit.SECONDS);\n        System.out.println(\"Finished HTTP/2 request(s)\");\n    }\n\n    public void disconnect() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpMethod;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http2.Http2ClientHandler;\n\npublic class Http2Client {\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = 8080;\n    private static final String URL = \"/whatever\";\n    private EventLoopGroup workerGroup;\n    private Http2ClientInitializer initializer;\n    private Channel channel;\n\n    public void connect() throws Exception {\n        workerGroup = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(workerGroup)\n                .channel(NioSocketChannel.class)\n                .handler(initializer = new Http2ClientInitializer());\n        ChannelFuture future = bootstrap.connect(HOST, PORT).sync();\n        channel = future.channel();\n    }\n\n    public void sendRequest() throws Exception {\n        FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_2_0, HttpMethod.GET, URL);\n        request.headers().set(HttpHeaderNames.HOST, HOST);\n        request.headers().set(HttpHeaderNames.CONTENT_LENGTH, request.content().readableBytes());\n        channel.writeAndFlush(request).sync();\n    }\n\n    public void disconnect() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class Http2ClientInitializer extends ChannelInitializer<Channel> {\n        @Override\n        protected void initChannel(Channel ch) {\n            ChannelPipeline pipeline = ch.pipeline();\n            pipeline.addLast(new Http2ClientHandler());\n        }\n    }\n}"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to multiple hosts, send HTTP requests, and handle responses.\n\nClass Description: NettyTcpClient is a TCP client implementation using Netty framework that connects to multiple hosts, sends HTTP GET requests to a specified path, and handles responses. It manages connection lifecycle and includes automatic reconnection on failure.\n\nAttributes:\n- hosts: List<String> - List of host addresses to connect to\n- port: int - TCP port number for connections\n- path: String - HTTP path for GET requests\n- group: EventLoopGroup - Netty event loop group for managing I/O threads\n- bootstrap: Bootstrap - Netty bootstrap for client configuration\n- channelConnectListener: ChannelConnectListener - Listener for connection events\n\nMethods:\n- NettyTcpClient(List<String> hosts, int port, String path) -> None - Constructor that initializes the client with target hosts, port, and request path\n- connect() -> None - Initiates connections to all specified hosts\n- shutdown() -> None - Gracefully shuts down the client and releases resources\n- ResponseHandler(Bootstrap bootstrap) -> None - (Inner class constructor) Handles HTTP responses and manages request cycle\n- channelActive(ChannelHandlerContext ctx) -> None - (Inner class method) Called when channel becomes active, sends initial request\n- channelRead0(ChannelHandlerContext ctx, HttpObject msg) -> None - (Inner class method) Processes incoming HTTP messages\n- channelInactive(ChannelHandlerContext ctx) -> None - (Inner class method) Handles channel disconnection and triggers reconnection\n- sendRequest(ChannelHandlerContext ctx) -> None - (Inner class method) Sends HTTP GET request\n- operationComplete(ChannelFuture future) -> None - (Inner class method) Listener callback for connection completion events",
    "Canonical_solution": "import com.github.ambry.rest.RestUtils;\nimport com.github.ambry.utils.Pair;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufAllocator;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.DefaultHttpRequest;\nimport io.netty.handler.codec.http.HttpChunkedInput;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpContent;\nimport io.netty.handler.codec.http.HttpMethod;\nimport io.netty.handler.codec.http.HttpObject;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpResponse;\nimport io.netty.handler.codec.http.HttpUtil;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.LastHttpContent;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.stream.ChunkedInput;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.util.concurrent.GenericFutureListener;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class NettyTcpClient {\n\n  private final List<String> hosts;\n  private final int port;\n  private final String path;\n  private final EventLoopGroup group;\n  private final Bootstrap bootstrap;\n  private final ChannelConnectListener channelConnectListener = new ChannelConnectListener();\n\n  public NettyTcpClient(List<String> hosts, int port, String path) {\n    this.hosts = hosts;\n    this.port = port;\n    this.path = path;\n    this.group = new NioEventLoopGroup();\n    this.bootstrap = new Bootstrap()\n        .group(group)\n        .channel(NioSocketChannel.class)\n        .handler(new ChannelInitializer<SocketChannel>() {\n          @Override\n          public void initChannel(SocketChannel ch) {\n            ch.pipeline()\n                .addLast(new HttpClientCodec())\n                .addLast(new ChunkedWriteHandler())\n                .addLast(new ResponseHandler(bootstrap));\n          }\n        });\n  }\n\n  public void connect() {\n    for (String host : hosts) {\n      ChannelFuture future = bootstrap.connect(host, port);\n      future.addListener(channelConnectListener);\n    }\n  }\n\n  public void shutdown() {\n    group.shutdownGracefully();\n  }\n\n  private class ResponseHandler extends SimpleChannelInboundHandler<HttpObject> {\n    private final Logger logger = LoggerFactory.getLogger(getClass());\n    private final Bootstrap bootstrap;\n    private HttpRequest request;\n\n    ResponseHandler(Bootstrap bootstrap) {\n      this.bootstrap = bootstrap;\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) {\n      sendRequest(ctx);\n    }\n\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx, HttpObject msg) {\n      if (msg instanceof HttpResponse) {\n        HttpResponse response = (HttpResponse) msg;\n        if (!HttpUtil.isKeepAlive(response)) {\n          ctx.close();\n        }\n      }\n      if (msg instanceof LastHttpContent) {\n        if (ctx.channel().isActive()) {\n          sendRequest(ctx);\n        }\n      }\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) {\n      ctx.close();\n      bootstrap.connect().addListener(channelConnectListener);\n    }\n\n    private void sendRequest(ChannelHandlerContext ctx) {\n      request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, path);\n      ctx.writeAndFlush(request);\n    }\n  }\n\n  private class ChannelConnectListener implements GenericFutureListener<ChannelFuture> {\n    @Override\n    public void operationComplete(ChannelFuture future) {\n      if (!future.isSuccess()) {\n        logger.error(\"Channel connection failed\", future.cause());\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.util.AttributeKey;\n\nimport java.util.List;\n\npublic class NettyTcpClient {\n    private final List<String> hosts;\n    private final int port;\n    private final String path;\n    private final EventLoopGroup group;\n    private final Bootstrap bootstrap;\n    private final ChannelConnectListener channelConnectListener;\n\n    public NettyTcpClient(List<String> hosts, int port, String path) {\n        this.hosts = hosts;\n        this.port = port;\n        this.path = path;\n        this.group = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n        this.bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new ResponseHandler(bootstrap));\n                    }\n                });\n        this.channelConnectListener = null;\n    }\n\n    public void connect() {\n        for (String host : hosts) {\n            bootstrap.connect(host, port).addListener(future -> {\n                if (future.isSuccess()) {\n                    if (channelConnectListener != null) {\n                        channelConnectListener.onConnect(future.channel());\n                    }\n                } else {\n                    future.cause().printStackTrace();\n                }\n            });\n        }\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n    }\n\n    private class ResponseHandler extends ChannelInboundHandlerAdapter {\n        private final Bootstrap bootstrap;\n\n        public ResponseHandler(Bootstrap bootstrap) {\n            this.bootstrap = bootstrap;\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            sendRequest(ctx);\n        }\n\n        private void sendRequest(ChannelHandlerContext ctx) {\n            FullHttpRequest request = new DefaultFullHttpRequest(\n                    HttpVersion.HTTP_1_1, HttpMethod.GET, path);\n            request.headers().set(HttpHeaderNames.HOST, \"localhost\");\n            request.headers().set(HttpHeaderNames.CONTENT_LENGTH, request.content().readableBytes());\n            ctx.writeAndFlush(request);\n        }\n\n        @Override\n        public void channelRead0(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof HttpResponse) {\n                HttpResponse response = (HttpResponse) msg;\n                System.out.println(\"Received response: \" + response.status());\n            }\n            if (msg instanceof HttpContent) {\n                HttpContent content = (HttpContent) msg;\n                System.out.println(\"Received content: \" + content.content().toString(io.netty.util.CharsetUtil.UTF_8));\n            }\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) {\n            bootstrap.connect(ctx.channel().remoteAddress().toString().split(\":\")[0], port)\n                    .addListener(future -> {\n                        if (future.isSuccess()) {\n                            if (channelConnectListener != null) {\n                                channelConnectListener.onReconnect(future.channel());\n                            }\n                        } else {\n                            future.cause().printStackTrace();\n                        }\n                    });\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n\n    public interface ChannelConnectListener {\n        void onConnect(Channel channel);\n        void onReconnect(Channel channel);\n    }\n}\n```"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, send protocol messages, and handle responses.\n\nClass Description: ProtocolClient is a Netty-based TCP client that connects to a specified host and port, sends custom protocol messages at regular intervals, and handles server responses. The client uses custom encoders/decoders for protocol message processing and maintains the connection until explicitly stopped.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server\n- MAX_FRAME_LENGTH: int (static final) - Maximum allowed frame length for messages (1MB)\n- LENGTH_FIELD_LENGTH: int (static final) - Length of the length field in protocol header (4 bytes)\n- LENGTH_FIELD_OFFSET: int (static final) - Offset of the length field in protocol header (6 bytes)\n- LENGTH_ADJUSTMENT: int (static final) - Adjustment value for the length field (0)\n- INITIAL_BYTES_TO_STRIP: int (static final) - Number of initial bytes to strip (0)\n\nMethods:\n- ProtocolClient(String host, int port) -> None - Constructor that initializes the client with target host and port\n- run() throws InterruptedException -> void - Main method that configures and starts the Netty client, establishes connection, and sends periodic messages\n  - Input: None\n  - Output: None (continuously runs until interrupted)\n  - Side effects: Creates network connection, sends messages every 2 seconds, handles responses\n  - Throws: InterruptedException if thread sleep is interrupted",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.nio.charset.Charset;\n\npublic class ProtocolClient {\n\n    private String host;\n    private int port;\n\n    private static final int MAX_FRAME_LENGTH = 1024 * 1024;\n    private static final int LENGTH_FIELD_LENGTH = 4;\n    private static final int LENGTH_FIELD_OFFSET = 6;\n    private static final int LENGTH_ADJUSTMENT = 0;\n    private static final int INITIAL_BYTES_TO_STRIP = 0;\n\n    public ProtocolClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws InterruptedException {\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup);\n            b.channel(NioSocketChannel.class);\n            b.option(ChannelOption.SO_KEEPALIVE, true);\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(\n                            \"decoder\",\n                            new ProtocolDecoder(MAX_FRAME_LENGTH,\n                                    LENGTH_FIELD_OFFSET, LENGTH_FIELD_LENGTH,\n                                    LENGTH_ADJUSTMENT, INITIAL_BYTES_TO_STRIP));\n                    ch.pipeline().addLast(\"encoder\", new ProtocolEncoder());\n                    ch.pipeline().addLast(new ProtocolClientHandler());\n                }\n            });\n\n            ChannelFuture f = b.connect(host, port).sync();\n\n            while (true) {\n                ProtocolMsg msg = new ProtocolMsg();\n                ProtocolHeader protocolHeader = new ProtocolHeader();\n                protocolHeader.setMagic((byte) 0x01);\n                protocolHeader.setMsgType((byte) 0x01);\n                protocolHeader.setReserve((short) 0);\n                protocolHeader.setSn((short) 0);\n                String body = \"\u5e8a\u524d\u660e\u6708\u5149\u7591\u662f\u5730\u4e0a\u971c\";\n                StringBuffer sb = new StringBuffer();\n                for (int i = 0; i < 2700; i++) {\n                    sb.append(body);\n                }\n\n                byte[] bodyBytes = sb.toString().getBytes(\n                        Charset.forName(\"utf-8\"));\n                int bodySize = bodyBytes.length;\n                protocolHeader.setLen(bodySize);\n\n                msg.setProtocolHeader(protocolHeader);\n                msg.setBody(sb.toString());\n\n                f.channel().writeAndFlush(msg);\n                Thread.sleep(2000);\n            }\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.LengthFieldBasedFrameDecoder;\nimport io.netty.handler.codec.MessageToByteEncoder;\nimport io.netty.util.CharsetUtil;\nimport io.netty.util.concurrent.ScheduledFuture;\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProtocolClient {\n    private final String host;\n    private final int port;\n    private static final int MAX_FRAME_LENGTH = 1024 * 1024;\n    private static final int LENGTH_FIELD_LENGTH = 4;\n    private static final int LENGTH_FIELD_OFFSET = 6;\n    private static final int LENGTH_ADJUSTMENT = 0;\n    private static final int INITIAL_BYTES_TO_STRIP = 0;\n\n    public ProtocolClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws InterruptedException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            ch.pipeline().addLast(\n                                    new ProtocolDecoder(),\n                                    new ProtocolEncoder(),\n                                    new ProtocolHandler()\n                            );\n                        }\n                    });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class ProtocolDecoder extends LengthFieldBasedFrameDecoder {\n        public ProtocolDecoder() {\n            super(MAX_FRAME_LENGTH, LENGTH_FIELD_OFFSET, LENGTH_FIELD_LENGTH, LENGTH_ADJUSTMENT, INITIAL_BYTES_TO_STRIP);\n        }\n    }\n\n    private static class ProtocolEncoder extends MessageToByteEncoder<ByteBuf> {\n        @Override\n        protected void encode(ChannelHandlerContext ctx, ByteBuf msg, ByteBuf out) throws Exception {\n            int length = msg.readableBytes();\n            out.writeInt(length);\n            out.writeBytes(msg);\n        }\n    }\n\n    private static class ProtocolHandler extends ChannelInboundHandlerAdapter {\n        private ScheduledFuture<?> scheduledFuture;\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            scheduledFuture = ctx.channel().eventLoop().scheduleAtFixedRate(\n                    () -> {\n                        ByteBuf msg = Unpooled.copiedBuffer(\"Hello Server\", CharsetUtil.UTF_8);\n                        ctx.writeAndFlush(msg);\n                    },\n                    0, 2, TimeUnit.SECONDS\n            );\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ByteBuf buf = (ByteBuf) msg;\n            System.out.println(\"Received: \" + buf.toString(CharsetUtil.UTF_8));\n            buf.release();\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) {\n            if (scheduledFuture != null) {\n                scheduledFuture.cancel(false);\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based TCP client capable of establishing WebSocket connections with support for SSL/TLS, SOCKS proxy, message compression, and idle connection handling.\n\nClass Description: The NettyTcpClient class provides functionality to connect to a WebSocket server using Netty's asynchronous event-driven network framework. It handles connection establishment, SSL/TLS encryption, proxy configuration, message processing, and graceful shutdown.\n\nAttributes:\n- LOG: Logger - Logger instance for logging events and errors\n- uri: URI - The target WebSocket server URI\n- webSocketChannel: Channel - The active WebSocket channel\n- eventLoopGroup: NioEventLoopGroup - Manages client-side I/O threads\n- compressedMessages: boolean - Flag for enabling message compression\n- acceptAllCertificates: boolean - Flag for accepting all SSL certificates\n- enableLoggingHandler: boolean - Flag for enabling Netty's logging handler\n- loggingHandlerLevel: LogLevel - Logging level for Netty's logging handler\n- socksProxyHost: String - SOCKS proxy host address\n- socksProxyPort: Integer - SOCKS proxy port number\n\nMethods:\n- connect(): void - Establishes a WebSocket connection to the specified URI with configured options\n- disconnect(): void - Closes the WebSocket connection and releases resources\n- getWebSocketClientExtensionHandler(): WebSocketClientExtensionHandler -> WebSocketClientExtensionHandler - Returns the WebSocket extension handler (defaults to compression handler)\n- getWebSocketClientHandler(WebSocketClientHandshaker, WebSocketClientHandler.WebSocketMessageHandler): WebSocketClientHandler -> WebSocketClientHandler - Creates and returns a custom WebSocket client handler with ping/pong and channel state management",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;\nimport io.netty.handler.codec.http.websocketx.WebSocketVersion;\nimport io.netty.handler.codec.http.websocketx.extensions.WebSocketClientExtensionHandler;\nimport io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketClientCompressionHandler;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.proxy.Socks5ProxyHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport io.netty.handler.timeout.IdleState;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.internal.SocketUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.URI;\nimport java.time.Duration;\n\npublic class NettyTcpClient {\n\n    private static final Logger LOG = LoggerFactory.getLogger(NettyTcpClient.class);\n    private static final Duration DEFAULT_CONNECTION_TIMEOUT = Duration.ofSeconds(10);\n    private static final int DEFAULT_IDLE_TIMEOUT = 15;\n\n    private URI uri;\n    private Channel webSocketChannel;\n    private NioEventLoopGroup eventLoopGroup;\n    private boolean compressedMessages = false;\n    private boolean acceptAllCertificates = false;\n    private boolean enableLoggingHandler = false;\n    private LogLevel loggingHandlerLevel = LogLevel.DEBUG;\n    private String socksProxyHost;\n    private Integer socksProxyPort;\n\n    public void connect() {\n        try {\n            String scheme = uri.getScheme() == null ? \"ws\" : uri.getScheme();\n            String host = uri.getHost();\n            if (host == null) {\n                throw new IllegalArgumentException(\"Host cannot be null.\");\n            }\n\n            final int port = uri.getPort() == -1 ? \n                (\"ws\".equalsIgnoreCase(scheme) ? 80 : 443) : uri.getPort();\n\n            final boolean ssl = \"wss\".equalsIgnoreCase(scheme);\n            final SslContext sslCtx = ssl ? \n                SslContextBuilder.forClient()\n                    .trustManager(acceptAllCertificates ? InsecureTrustManagerFactory.INSTANCE : null)\n                    .build() : null;\n\n            WebSocketClientHandler handler = getWebSocketClientHandler(\n                WebSocketClientHandshakerFactory.newHandshaker(\n                    uri, WebSocketVersion.V13, null, true, new DefaultHttpHeaders(), 65536),\n                message -> {});\n\n            if (eventLoopGroup == null || eventLoopGroup.isShutdown()) {\n                eventLoopGroup = new NioEventLoopGroup(2);\n            }\n\n            new Bootstrap()\n                .group(eventLoopGroup)\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, \n                    (int) DEFAULT_CONNECTION_TIMEOUT.toMillis())\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline p = ch.pipeline();\n                        if (socksProxyHost != null) {\n                            p.addLast(new Socks5ProxyHandler(\n                                SocketUtils.socketAddress(socksProxyHost, socksProxyPort)));\n                        }\n                        if (sslCtx != null) {\n                            p.addLast(sslCtx.newHandler(ch.alloc(), host, port));\n                        }\n                        p.addLast(new HttpClientCodec());\n                        if (enableLoggingHandler) {\n                            p.addLast(new LoggingHandler(loggingHandlerLevel));\n                        }\n                        if (compressedMessages) {\n                            p.addLast(WebSocketClientCompressionHandler.INSTANCE);\n                        }\n                        p.addLast(new HttpObjectAggregator(8192));\n                        if (DEFAULT_IDLE_TIMEOUT > 0) {\n                            p.addLast(new IdleStateHandler(DEFAULT_IDLE_TIMEOUT, 0, 0));\n                        }\n                        WebSocketClientExtensionHandler clientExtensionHandler = \n                            getWebSocketClientExtensionHandler();\n                        if (clientExtensionHandler != null) {\n                            p.addLast(clientExtensionHandler);\n                        }\n                        p.addLast(handler);\n                    }\n                })\n                .connect(uri.getHost(), port)\n                .addListener((ChannelFuture channelFuture) -> {\n                    webSocketChannel = channelFuture.channel();\n                    if (!channelFuture.isSuccess()) {\n                        LOG.error(\"Connection failed\", channelFuture.cause());\n                    }\n                });\n        } catch (Exception e) {\n            LOG.error(\"Connection error\", e);\n        }\n    }\n\n    public void disconnect() {\n        if (webSocketChannel != null) {\n            webSocketChannel.close();\n        }\n        if (eventLoopGroup != null) {\n            eventLoopGroup.shutdownGracefully(2, DEFAULT_IDLE_TIMEOUT, TimeUnit.SECONDS);\n        }\n    }\n\n    protected WebSocketClientExtensionHandler getWebSocketClientExtensionHandler() {\n        return WebSocketClientCompressionHandler.INSTANCE;\n    }\n\n    protected WebSocketClientHandler getWebSocketClientHandler(\n        WebSocketClientHandshaker handshaker,\n        WebSocketClientHandler.WebSocketMessageHandler handler) {\n        return new WebSocketClientHandler(handshaker, handler) {\n            @Override\n            public void channelInactive(ChannelHandlerContext ctx) {\n                LOG.info(\"Channel inactive\");\n                ctx.close();\n            }\n\n            @Override\n            public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {\n                if (evt instanceof IdleStateEvent) {\n                    IdleStateEvent e = (IdleStateEvent) evt;\n                    if (e.state() == IdleState.READER_IDLE) {\n                        ctx.writeAndFlush(new PingWebSocketFrame());\n                    }\n                }\n            }\n        };\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.websocketx.*;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.proxy.Socks5ProxyHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.concurrent.GenericFutureListener;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.security.cert.X509Certificate;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyTcpClient {\n    private static final Logger LOG = LoggerFactory.getLogger(NettyTcpClient.class);\n    private final URI uri;\n    private Channel webSocketChannel;\n    private final NioEventLoopGroup eventLoopGroup;\n    private final boolean compressedMessages;\n    private final boolean acceptAllCertificates;\n    private final boolean enableLoggingHandler;\n    private final LogLevel loggingHandlerLevel;\n    private final String socksProxyHost;\n    private final int socksProxyPort;\n\n    public NettyTcpClient(URI uri, boolean compressedMessages, boolean acceptAllCertificates, boolean enableLoggingHandler, LogLevel loggingHandlerLevel, String socksProxyHost, int socksProxyPort) {\n        this.uri = uri;\n        this.compressedMessages = compressedMessages;\n        this.acceptAllCertificates = acceptAllCertificates;\n        this.enableLoggingHandler = enableLoggingHandler;\n        this.loggingHandlerLevel = loggingHandlerLevel;\n        this.socksProxyHost = socksProxyHost;\n        this.socksProxyPort = socksProxyPort;\n        this.eventLoopGroup = new NioEventLoopGroup();\n    }\n\n    public void connect() {\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(eventLoopGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        if (socksProxyHost != null && socksProxyPort > 0) {\n                            pipeline.addLast(new Socks5ProxyHandler(new InetSocketAddress(socksProxyHost, socksProxyPort)));\n                        }\n                        try {\n                            SslContext sslContext = SslContextBuilder.forClient()\n                                    .trustManager(acceptAllCertificates ? InsecureTrustManagerFactory.INSTANCE : null)\n                                    .build();\n                            pipeline.addLast(sslContext.newHandler(ch.alloc()));\n                        } catch (Exception e) {\n                            LOG.error(\"Failed to create SSL context\", e);\n                        }\n                        if (enableLoggingHandler) {\n                            pipeline.addLast(new LoggingHandler(loggingHandlerLevel.toNettyLevel()));\n                        }\n                        pipeline.addLast(new IdleStateHandler(60, 60, 60, TimeUnit.SECONDS));\n                        if (compressedMessages) {\n                            pipeline.addLast(new WebSocketClientExtensionHandler(new CompressionExtension()));\n                        }\n                        WebSocketClientHandshaker handshaker = WebSocketClientHandshakerFactory.newHandshaker(\n                                uri, WebSocketVersion.V13, null, false, new DefaultHttpHeaders());\n                        pipeline.addLast(new WebSocketClientHandler(handshaker, message -> {\n                            LOG.info(\"Received message: {}\", message.text());\n                        }));\n                    }\n                });\n\n        try {\n            webSocketChannel = bootstrap.connect(new InetSocketAddress(uri.getHost(), uri.getPort())).sync().channel();\n            webSocketChannel.closeFuture().sync();\n        } catch (InterruptedException e) {\n            LOG.error(\"Connection interrupted\", e);\n        } finally {\n            eventLoopGroup.shutdownGracefully();\n        }\n    }\n\n    public void disconnect() {\n        if (webSocketChannel != null) {\n            webSocketChannel.close();\n        }\n        eventLoopGroup.shutdownGracefully();\n    }\n\n    public WebSocketClientExtensionHandler getWebSocketClientExtensionHandler() {\n        return new WebSocketClientExtensionHandler(new CompressionExtension());\n    }\n\n    public WebSocketClientHandler getWebSocketClientHandler(WebSocketClientHandshaker handshaker, WebSocketClientHandler.WebSocketMessageHandler messageHandler) {\n        return new WebSocketClientHandler(handshaker, messageHandler);\n    }\n\n    public static class CompressionExtension implements WebSocketClientExtensionHandler.Extension {\n        @Override\n        public String name() {\n            return \"permessage-deflate\";\n        }\n\n        @Override\n        public void init(WebSocketClientExtensionHandler handler) {\n            // Custom initialization for compression\n        }\n\n        @Override\n        public void write(WebSocketFrame frame, ChannelHandlerContext ctx) {\n            // Handle message compression\n        }\n\n        @Override\n        public void read(WebSocketFrame frame, ChannelHandlerContext ctx) {\n            // Handle message decompression\n        }\n    }\n\n    public static class WebSocketClientHandler extends SimpleChannelInboundHandler<WebSocketFrame> {\n        private final WebSocketClientHandshaker handshaker;\n        private final WebSocketMessageHandler messageHandler;\n\n        public WebSocketClientHandler(WebSocketClientHandshaker handshaker, WebSocketMessageHandler messageHandler) {\n            this.handshaker = handshaker;\n            this.messageHandler = messageHandler;\n        }\n\n        @Override\n        public void handlerAdded(ChannelHandlerContext ctx) {\n            handshaker.handshake(ctx.channel());\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) {\n            if (frame instanceof TextWebSocketFrame) {\n                messageHandler.onMessage(((TextWebSocketFrame) frame).text());\n            } else if (frame instanceof PongWebSocketFrame) {\n                ctx.writeAndFlush(new PingWebSocketFrame(Unpooled.buffer()));\n            } else if (frame instanceof CloseWebSocketFrame) {\n                ctx.close();\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            LOG.error(\"WebSocket client exception\", cause);\n            ctx.close();\n        }\n\n        public interface WebSocketMessageHandler {\n            void onMessage(String message);\n        }\n    }\n\n    public enum LogLevel {\n        OFF(io.netty.handler.logging.LogLevel.OFF),\n        ERROR(io.netty.handler.logging.LogLevel.ERROR),\n        WARN(io.netty.handler.logging.LogLevel.WARN),\n        INFO(io.netty.handler.logging.LogLevel.INFO),\n        DEBUG(io.netty.handler.logging.LogLevel.DEBUG),\n        TRACE(io.netty.handler.logging.LogLevel.TRACE);\n\n        private final io.netty.handler.logging.LogLevel nettyLevel;\n\n        LogLevel(io.netty.handler.logging.LogLevel nettyLevel) {\n            this.nettyLevel = nettyLevel;\n        }\n\n        public io.netty.handler.logging.LogLevel toNettyLevel() {\n            return nettyLevel;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server and handle echo messages.\n\nClass Description: The EchoClient class is a Netty-based TCP client that connects to a specified host and port, and handles incoming and outgoing messages through a custom handler. It manages network resources and ensures proper cleanup.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server to connect to\n\nMethods:\n- EchoClient(String host, int port) -> None - Constructor that initializes the client with target host and port\n- start() -> void - Initializes and starts the Netty client, establishes connection to the remote server, and manages the connection lifecycle. Throws Exception if any error occurs during the process",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.net.InetSocketAddress;\n\npublic class EchoClient {\n    private final String host;\n    private final int port;\n\n    public EchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n                .channel(NioSocketChannel.class)\n                .remoteAddress(new InetSocketAddress(host, port))\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(new EchoClientHandler());\n                    }\n                });\n            ChannelFuture f = b.connect().sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.util.CharsetUtil;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\n\npublic class EchoClient {\n    private final String host;\n    private final int port;\n\n    public EchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new EchoClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class EchoClientHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            ctx.writeAndFlush(Unpooled.copiedBuffer(\"Hello, server!\", CharsetUtil.UTF_8));\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ByteBuf in = (ByteBuf) msg;\n            System.out.println(\"Received: \" + in.toString(CharsetUtil.UTF_8));\n            ctx.close();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a remote server, handle incoming data, and manage connection lifecycle.\n\nClass Description: The TimeClient class establishes and manages a non-blocking TCP connection to a specified server using Netty's NIO framework. It handles connection setup, message processing through a custom pipeline, and graceful shutdown of resources.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server to connect to\nport: int - The port number of the remote server\nworkerGroup: EventLoopGroup - Netty's event loop group for handling I/O operations\nbootstrap: Bootstrap - Netty's client bootstrap for configuring and starting the client\n\nMethods:\nTimeClient(String host, int port) -> None - Constructor that initializes the client with target server details and creates necessary Netty components\nstart() -> void - Configures and starts the Netty client, establishes connection to server, and waits for connection closure\nstop() -> void - Shuts down the client gracefully by releasing all resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class TimeClient {\n\n    private String host;\n    private int port;\n    private EventLoopGroup workerGroup;\n    private Bootstrap bootstrap;\n\n    public TimeClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n    }\n\n    public void start() throws Exception {\n        try {\n            bootstrap.group(workerGroup)\n                    .channel(NioSocketChannel.class)\n                    .option(ChannelOption.SO_KEEPALIVE, true)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new TimeDecoder());\n                            ch.pipeline().addLast(new TimeClientHandler());\n                        }\n                    });\n\n            ChannelFuture f = bootstrap.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class TimeClient {\n    private final String host;\n    private final int port;\n    private final EventLoopGroup workerGroup;\n    private final Bootstrap bootstrap;\n\n    public TimeClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n        bootstrap.group(workerGroup)\n                 .channel(NioSocketChannel.class)\n                 .handler(new ChannelInitializer<SocketChannel>() {\n                     @Override\n                     protected void initChannel(SocketChannel ch) {\n                         ch.pipeline().addLast(new TimeClientHandler());\n                     }\n                 });\n    }\n\n    public void start() throws Exception {\n        ChannelFuture future = bootstrap.connect(host, port).sync();\n        future.channel().closeFuture().sync();\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n    }\n\n    private static class TimeClientHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            System.out.println(\"Received: \" + msg);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, send periodic messages, and handle graceful shutdown.\n\nClass Description: MyClient is a Netty-based TCP client that connects to a specified host and port, sends periodic messages containing Chinese poetry, and manages network resources properly. The client uses custom encoders/decoders and handlers for message processing.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server to connect to\nport: int - The port number of the remote server to connect to\n\nMethods:\nconstructor: MyClient(String host, int port) -> void - Initializes the client with target host and port information\nrun: run() -> void - Main method that establishes the connection, sends periodic messages, and manages resources. Throws InterruptedException for thread-related operations\ninitChannel: initChannel(SocketChannel ch) -> void - Configures the channel pipeline with custom encoders, decoders, and handlers (internal method within ChannelInitializer)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.nio.charset.Charset;\n\npublic class MyClient {\n\n    private String host;\n    private int port;\n\n    public MyClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws InterruptedException {\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup);\n            b.channel(NioSocketChannel.class);\n            b.option(ChannelOption.SO_KEEPALIVE, true);\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(\"decoder\", new MyDecoder());\n                    ch.pipeline().addLast(\"encoder\", new MyEncoder());\n                    ch.pipeline().addLast(new MyClientHandler());\n                }\n            });\n\n            ChannelFuture f = b.connect(host, port).sync();\n\n            while (true) {\n                Msg msg = new Msg();\n                MsgHeader msgHeader = new MsgHeader();\n                msgHeader.setMsgType(MsgType.EMGW_LOGIN_REQ.getValue());\n                String body = \"\u5e8a\u524d\u660e\u6708\u5149\uff0c\u7591\u662f\u5730\u4e0a\u971c\u3002\u4e3e\u5934\u671b\u660e\u6708\uff0c\u4f4e\u5934\u601d\u6545\u4e61\u3002\";\n\n                byte[] bodyBytes = body.getBytes(Charset.forName(\"utf-8\"));\n                int bodySize = bodyBytes.length;\n                msgHeader.setLen(bodySize);\n                msg.setMsgHeader(msgHeader);\n                msg.setBody(body);\n\n                f.channel().writeAndFlush(msg);\n                Thread.sleep(2000);\n            }\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.ByteToMessageDecoder;\nimport io.netty.handler.codec.MessageToByteEncoder;\nimport io.netty.util.concurrent.ScheduledFuture;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class MyClient {\n    private final String host;\n    private final int port;\n\n    public MyClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws InterruptedException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            ch.pipeline().addLast(\n                                    new MessageEncoder(),\n                                    new MessageDecoder(),\n                                    new ClientHandler()\n                            );\n                        }\n                    });\n\n            ChannelFuture future = bootstrap.connect(host, port).sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n\n    private static class MessageEncoder extends MessageToByteEncoder<String> {\n        @Override\n        protected void encode(ChannelHandlerContext ctx, String msg, ByteBuf out) {\n            out.writeBytes(msg.getBytes(StandardCharsets.UTF_8));\n        }\n    }\n\n    private static class MessageDecoder extends ByteToMessageDecoder {\n        private final ByteBuf buffer = Unpooled.buffer();\n\n        @Override\n        protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) {\n            buffer.writeBytes(in);\n            while (buffer.isReadable()) {\n                int length = buffer.readableBytes();\n                byte[] bytes = new byte[length];\n                buffer.readBytes(bytes);\n                String message = new String(bytes, StandardCharsets.UTF_8);\n                out.add(message);\n            }\n        }\n    }\n\n    private static class ClientHandler extends ChannelInboundHandlerAdapter {\n        private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n        private final List<String> poems = Arrays.asList(\n                \"\u5e8a\u524d\u660e\u6708\u5149\",\n                \"\u7591\u662f\u5730\u4e0a\u971c\",\n                \"\u4e3e\u5934\u671b\u660e\u6708\",\n                \"\u4f4e\u5934\u601d\u6545\u4e61\"\n        );\n        private int index = 0;\n        private ScheduledFuture<?> scheduledFuture;\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            scheduledFuture = scheduler.scheduleAtFixedRate(() -> {\n                if (index < poems.size()) {\n                    ctx.writeAndFlush(poems.get(index++));\n                } else {\n                    scheduledFuture.cancel(true);\n                    scheduler.shutdown();\n                }\n            }, 0, 5, TimeUnit.SECONDS);\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) {\n            if (scheduledFuture != null) {\n                scheduledFuture.cancel(true);\n            }\n            scheduler.shutdown();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 153,
    "Instruction": "Task Description: Create a TCP client using Java Netty framework that can establish a secure/non-secure connection to a remote server, send messages from standard input, and gracefully handle connection termination.\n\nClass Description: TelnetClient is a Netty-based TCP client that connects to a specified host and port, supports SSL/TLS encryption when configured, and provides interactive message sending capability through standard input.\n\nAttributes:\nSSL: static final boolean - Flag indicating whether SSL/TLS encryption should be used\nHOST: static final String - The host address to connect to (default: \"127.0.0.1\")\nPORT: static final int - The port number to connect to (default: 8992 for SSL, 8023 for non-SSL)\n\nMethods:\nstart: void() throws Exception - Main method that initializes the Netty client, establishes connection, handles user input, and manages connection lifecycle\n  - Initializes SSL context if SSL is enabled\n  - Creates and configures Netty Bootstrap with NioEventLoopGroup\n  - Establishes connection to specified host and port\n  - Reads input from console and sends to server\n  - Handles graceful shutdown on \"bye\" command or connection close",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic final class TelnetClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8992\" : \"8023\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new TelnetClientInitializer(sslCtx));\n\n            Channel ch = b.connect(HOST, PORT).sync().channel();\n\n            ChannelFuture lastWriteFuture = null;\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            for (;;) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                lastWriteFuture = ch.writeAndFlush(line + \"\\r\\n\");\n\n                if (\"bye\".equals(line.toLowerCase())) {\n                    ch.closeFuture().sync();\n                    break;\n                }\n            }\n\n            if (lastWriteFuture != null) {\n                lastWriteFuture.sync();\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class TelnetClient {\n    public static final boolean SSL = true;\n    public static final String HOST = \"127.0.0.1\";\n    public static final int PORT = SSL ? 8992 : 8023;\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            SslContext sslCtx = null;\n            if (SSL) {\n                sslCtx = SslContextBuilder.forClient().build();\n            }\n\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) {\n                            if (sslCtx != null) {\n                                ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n                            }\n                            ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                            });\n                        }\n                    });\n\n            ChannelFuture future = bootstrap.connect(HOST, PORT).sync();\n            Channel channel = future.channel();\n\n            Thread inputThread = new Thread(() -> {\n                try {\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n                    String line;\n                    while (channel.isOpen()) {\n                        line = reader.readLine();\n                        if (line == null) {\n                            break;\n                        }\n                        if (line.equals(\"bye\")) {\n                            channel.writeAndFlush(Unpooled.copiedBuffer(line.getBytes())).addListener(f -> {\n                                channel.close();\n                            });\n                            break;\n                        } else {\n                            channel.writeAndFlush(Unpooled.copiedBuffer(line.getBytes()));\n                        }\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n            inputThread.start();\n\n            future.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a remote server, send messages from standard input, and handle file operations.\n\nClass Description: The FileClient class establishes a TCP connection to a specified host and port using Netty's non-blocking I/O. It configures the client pipeline with string encoders/decoders and a custom handler for file operations. The client continuously reads input from the console and sends it to the server.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server to connect to\nport: int - The port number of the remote server\ndest: String - The destination path for file operations (used by the client handler)\n\nMethods:\nrun(): void - throws InterruptedException, IOException - Main method that initializes the Netty client, establishes connection, and handles message sending\n  - Input: None\n  - Output: None (but may throw InterruptedException or IOException)\n  \nFileClient(String, int, String) - Constructor that initializes the client with connection parameters\n  - Input:\n    - host: String - Server hostname/IP\n    - port: int - Server port\n    - dest: String - File destination path\n  - Output: FileClient instance (constructor)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.util.CharsetUtil;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class FileClient {\n\n    private String host;\n    private int port;\n    private String dest;\n\n    public FileClient(String host, int port, String dest) {\n        this.host = host;\n        this.port = port;\n        this.dest = dest;\n    }\n\n    public void run() throws InterruptedException, IOException {\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup);\n            b.channel(NioSocketChannel.class);\n            b.option(ChannelOption.SO_KEEPALIVE, true);\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(\"encoder\", new StringEncoder(CharsetUtil.UTF_8));\n                    ch.pipeline().addLast(\"decoder\", new StringDecoder(CharsetUtil.UTF_8));\n                    ch.pipeline().addLast(new FileClientHandler(dest));\n                }\n            });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            Channel channel = f.channel();\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                channel.writeAndFlush(in.readLine() + \"\\r\\n\");\n            }\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\nimport java.io.IOException;\nimport java.io.Scanner;\nimport java.util.concurrent.TimeUnit;\n\npublic class FileClient {\n    private final String host;\n    private final int port;\n    private final String dest;\n\n    public FileClient(String host, int port, String dest) {\n        this.host = host;\n        this.port = port;\n        this.dest = dest;\n    }\n\n    public void run() throws InterruptedException, IOException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new StringEncoder());\n                     ch.pipeline().addLast(new StringDecoder());\n                     ch.pipeline().addLast(new CustomHandler(dest));\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            Channel channel = f.channel();\n\n            Scanner scanner = new Scanner(System.in);\n            while (scanner.hasNextLine()) {\n                String line = scanner.nextLine();\n                channel.writeAndFlush(line);\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class CustomHandler extends ChannelInboundHandlerAdapter {\n        private final String dest;\n\n        public CustomHandler(String dest) {\n            this.dest = dest;\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            System.out.println(\"Received: \" + msg);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        new FileClient(\"localhost\", 8080, \"/path/to/dest\").run();\n    }\n}"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a Docker daemon, with support for SSL/TLS encryption and timeout handling.\n\nClass Description: The NettyTcpClient class provides functionality to establish and manage TCP connections to a Docker daemon using Netty framework. It handles connection initialization, SSL/TLS configuration, timeout management, and graceful shutdown.\n\nAttributes:\n- bootstrap: Bootstrap - Netty's client bootstrap for connection configuration\n- eventLoopGroup: EventLoopGroup - Manages client-side I/O threads\n- connectTimeout: Integer - Connection timeout in milliseconds\n- readTimeout: Integer - Read operation timeout in milliseconds\n- threadPrefix: String - Prefix for Netty thread names\n\nMethods:\n- init(DockerClientConfig dockerClientConfig) -> void - Initializes the Netty client with Docker configuration\n- connect(DockerClientConfig dockerClientConfig) -> DuplexChannel - Establishes connection to Docker daemon with SSL support\n- initSsl(DockerClientConfig dockerClientConfig) -> SslHandler - Configures SSL/TLS for the connection\n- enableHostNameVerification(SSLParameters sslParameters) -> SSLParameters - Enables hostname verification in SSL parameters\n- close() -> void - Shuts down the client gracefully\n- configure(T channel) -> T - Configures channel timeouts and handlers\n- ReadTimeoutHandler() -> void - Inner class handling read timeout events",
    "Canonical_solution": "import com.github.dockerjava.core.DockerClientConfig;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelConfig;\nimport io.netty.channel.ChannelFactory;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.DuplexChannel;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpContentDecompressor;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.timeout.IdleState;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.concurrent.DefaultThreadFactory;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.SocketTimeoutException;\nimport java.security.Security;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLParameters;\n\npublic class NettyTcpClient {\n\n    private static String threadPrefix = \"dockerjava-netty\";\n    private Bootstrap bootstrap;\n    private EventLoopGroup eventLoopGroup;\n    private Integer connectTimeout;\n    private Integer readTimeout;\n\n    public void init(DockerClientConfig dockerClientConfig) {\n        bootstrap = new Bootstrap();\n        eventLoopGroup = new NioEventLoopGroup(0, new DefaultThreadFactory(threadPrefix));\n\n        InetAddress addr = InetAddress.getLoopbackAddress();\n        final SocketAddress proxyAddress = new InetSocketAddress(addr, 8008);\n\n        Security.addProvider(new BouncyCastleProvider());\n\n        ChannelFactory<NioSocketChannel> factory = () -> configure(new NioSocketChannel());\n\n        bootstrap.group(eventLoopGroup).channelFactory(factory)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(final SocketChannel channel) throws Exception {\n                        channel.pipeline().addLast(new HttpClientCodec());\n                        channel.pipeline().addLast(new HttpContentDecompressor());\n                    }\n                });\n    }\n\n    public DuplexChannel connect(DockerClientConfig dockerClientConfig) throws InterruptedException {\n        String host = dockerClientConfig.getDockerHost().getHost();\n        int port = dockerClientConfig.getDockerHost().getPort();\n\n        if (port == -1) {\n            throw new RuntimeException(\"no port configured for \" + host);\n        }\n\n        final DuplexChannel channel = (DuplexChannel) bootstrap.connect(host, port).sync().channel();\n\n        final SslHandler ssl = initSsl(dockerClientConfig);\n\n        if (ssl != null) {\n            channel.pipeline().addFirst(ssl);\n            ssl.sslCloseFuture().addListener(future -> channel.eventLoop().execute(channel::close));\n        }\n\n        return channel;\n    }\n\n    private SslHandler initSsl(DockerClientConfig dockerClientConfig) {\n        SslHandler ssl = null;\n\n        try {\n            String host = dockerClientConfig.getDockerHost().getHost();\n            int port = dockerClientConfig.getDockerHost().getPort();\n\n            final SSLConfig sslConfig = dockerClientConfig.getSSLConfig();\n\n            if (sslConfig != null && sslConfig.getSSLContext() != null) {\n                SSLEngine engine = sslConfig.getSSLContext().createSSLEngine(host, port);\n                engine.setUseClientMode(true);\n                engine.setSSLParameters(enableHostNameVerification(engine.getSSLParameters()));\n                ssl = new SslHandler(engine);\n            }\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        return ssl;\n    }\n\n    public SSLParameters enableHostNameVerification(SSLParameters sslParameters) {\n        sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        return sslParameters;\n    }\n\n    public void close() throws IOException {\n        Objects.requireNonNull(eventLoopGroup, \"Factory not initialized. You probably forgot to call init()!\");\n        eventLoopGroup.shutdownGracefully();\n    }\n\n    private <T extends Channel> T configure(T channel) {\n        ChannelConfig channelConfig = channel.config();\n\n        if (connectTimeout != null) {\n            channelConfig.setConnectTimeoutMillis(connectTimeout);\n        }\n        if (readTimeout != null) {\n            channel.pipeline().addLast(\"readTimeoutHandler\", new ReadTimeoutHandler());\n        }\n\n        return channel;\n    }\n\n    private final class ReadTimeoutHandler extends IdleStateHandler {\n        private boolean alreadyTimedOut;\n\n        ReadTimeoutHandler() {\n            super(readTimeout, 0, 0, TimeUnit.MILLISECONDS);\n        }\n\n        @Override\n        protected synchronized void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt) throws Exception {\n            assert evt.state() == IdleState.READER_IDLE;\n            final Channel channel = ctx.channel();\n            if (channel == null || !channel.isActive() || alreadyTimedOut) {\n                return;\n            }\n            DockerClientConfig dockerClientConfig = getDockerClientConfig();\n            final Object dockerAPIEndpoint = dockerClientConfig.getDockerHost();\n            final String msg = \"Read timed out: No data received within \" + readTimeout\n                    + \"ms.  Perhaps the docker API (\" + dockerAPIEndpoint\n                    + \") is not responding normally, or perhaps you need to increase the readTimeout value.\";\n            final Exception ex = new SocketTimeoutException(msg);\n            ctx.fireExceptionCaught(ex);\n            alreadyTimedOut = true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.PooledByteBufAllocator;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.timeout.ReadTimeoutHandler;\nimport io.netty.util.HashedWheelTimer;\nimport io.netty.util.Timeout;\nimport io.netty.util.Timer;\nimport io.netty.util.concurrent.Future;\nimport io.netty.util.concurrent.GenericFutureListener;\n\nimport javax.net.ssl.SSLParameters;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyTcpClient {\n    private Bootstrap bootstrap;\n    private EventLoopGroup eventLoopGroup;\n    private Integer connectTimeout;\n    private Integer readTimeout;\n    private String threadPrefix;\n\n    public void init(DockerClientConfig dockerClientConfig) {\n        this.connectTimeout = dockerClientConfig.getConnectTimeout();\n        this.readTimeout = dockerClientConfig.getReadTimeout();\n        this.threadPrefix = dockerClientConfig.getThreadPrefix();\n        this.eventLoopGroup = new NioEventLoopGroup(1, new ThreadFactoryImpl(threadPrefix));\n        this.bootstrap = new Bootstrap();\n        this.bootstrap.group(eventLoopGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(\"ssl\", initSsl(dockerClientConfig));\n                        pipeline.addLast(\"timeout\", new ReadTimeoutHandler(readTimeout, TimeUnit.MILLISECONDS));\n                        pipeline.addLast(\"handler\", new DockerClientHandler());\n                    }\n                });\n    }\n\n    public Channel connect(DockerClientConfig dockerClientConfig) {\n        InetSocketAddress address = new InetSocketAddress(dockerClientConfig.getHost(), dockerClientConfig.getPort());\n        ChannelFuture future = bootstrap.connect(address);\n        if (connectTimeout != null && connectTimeout > 0) {\n            future.addListener((GenericFutureListener<Future<? super Void>>) f -> {\n                if (!f.isSuccess()) {\n                    future.channel().close();\n                }\n            });\n            try {\n                future.awaitUninterruptibly(connectTimeout, TimeUnit.MILLISECONDS);\n            } finally {\n                if (future.isCancelled()) {\n                    future.channel().close();\n                }\n            }\n        }\n        return future.channel();\n    }\n\n    private SslHandler initSsl(DockerClientConfig dockerClientConfig) {\n        try {\n            SslContext sslContext = SslContextBuilder.forClient()\n                    .sslContext(enableHostNameVerification(dockerClientConfig.getSslParameters()))\n                    .build();\n            return sslContext.newHandler(new PooledByteBufAllocator(false));\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to initialize SSL\", e);\n        }\n    }\n\n    private SSLParameters enableHostNameVerification(SSLParameters sslParameters) {\n        sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        return sslParameters;\n    }\n\n    public void close() {\n        if (eventLoopGroup != null) {\n            eventLoopGroup.shutdownGracefully();\n        }\n    }\n\n    private <T extends Channel> T configure(T channel) {\n        channel.config().setConnectTimeoutMillis(connectTimeout);\n        return channel;\n    }\n\n    private class ReadTimeoutHandler extends io.netty.handler.timeout.ReadTimeoutHandler {\n        public ReadTimeoutHandler(int timeout, TimeUnit unit) {\n            super(timeout, unit);\n        }\n\n        @Override\n        protected void handleTimeout(ChannelHandlerContext ctx) {\n            ctx.channel().close();\n        }\n    }\n\n    private static class ThreadFactoryImpl implements java.util.concurrent.ThreadFactory {\n        private final String prefix;\n        private int counter = 0;\n\n        public ThreadFactoryImpl(String prefix) {\n            this.prefix = prefix;\n        }\n\n        @Override\n        public Thread newThread(Runnable r) {\n            Thread thread = new Thread(r, prefix + \"-\" + counter++);\n            thread.setDaemon(true);\n            return thread;\n        }\n    }\n\n    private static class DockerClientHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        // Custom handler logic for Docker client\n    }\n}\n```"
  },
  {
    "Task_id": 156,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish secure or non-secure connections to a remote server, with capabilities for graceful shutdown.\n\nClass Description: The HttpUploadClient class provides functionality to create and manage a Netty-based TCP client that can connect to a specified host and port, with optional SSL/TLS encryption. It handles connection establishment, channel management, and resource cleanup.\n\nAttributes:\n- host: [String] - The hostname or IP address of the remote server to connect to\n- port: [int] - The port number of the remote server\n- ssl: [boolean] - Flag indicating whether SSL/TLS encryption should be used\n- sslCtx: [SslContext] - Netty's SSL context for secure connections (null if ssl is false)\n- group: [EventLoopGroup] - Netty event loop group for managing I/O operations\n- bootstrap: [Bootstrap] - Netty bootstrap for configuring client connection parameters\n\nMethods:\n- HttpUploadClient(String host, int port, boolean ssl) -> [Constructor] - Initializes the client with connection parameters and SSL configuration if needed\n- connect() -> [Channel] - Establishes a connection to the remote server and returns the communication channel\n- shutdown() -> [void] - Shuts down the client gracefully and releases all resources\n- main(String[] args) -> [void] - Example usage demonstrating client initialization, connection, and shutdown",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport io.netty.util.internal.SocketUtils;\n\npublic class HttpUploadClient {\n\n    private final String host;\n    private final int port;\n    private final boolean ssl;\n    private final SslContext sslCtx;\n    private final EventLoopGroup group;\n    private final Bootstrap bootstrap;\n\n    public HttpUploadClient(String host, int port, boolean ssl) throws Exception {\n        this.host = host;\n        this.port = port;\n        this.ssl = ssl;\n        \n        if (ssl) {\n            this.sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            this.sslCtx = null;\n        }\n\n        this.group = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new HttpUploadClientInitializer(sslCtx));\n    }\n\n    public Channel connect() throws InterruptedException {\n        ChannelFuture future = bootstrap.connect(SocketUtils.socketAddress(host, port));\n        return future.sync().channel();\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        String host = \"127.0.0.1\";\n        int port = 8080;\n        boolean ssl = false;\n\n        HttpUploadClient client = new HttpUploadClient(host, port, ssl);\n        try {\n            Channel channel = client.connect();\n            // Perform operations with the channel here\n        } finally {\n            client.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\n\npublic class HttpUploadClient {\n    private final String host;\n    private final int port;\n    private final boolean ssl;\n    private SslContext sslCtx;\n    private EventLoopGroup group;\n    private Bootstrap bootstrap;\n    private Channel channel;\n\n    public HttpUploadClient(String host, int port, boolean ssl) {\n        this.host = host;\n        this.port = port;\n        this.ssl = ssl;\n        this.group = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n        if (ssl) {\n            try {\n                this.sslCtx = SslContextBuilder.forClient().build();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        this.bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        if (ssl) {\n                            ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n                        }\n                    }\n                });\n    }\n\n    public Channel connect() {\n        ChannelFuture future = bootstrap.connect(host, port);\n        try {\n            future.sync();\n            this.channel = future.channel();\n            return channel;\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(\"Connection interrupted\", e);\n        }\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n        }\n        group.shutdownGracefully();\n    }\n\n    public static void main(String[] args) {\n        HttpUploadClient client = new HttpUploadClient(\"localhost\", 8080, false);\n        Channel channel = client.connect();\n        client.shutdown();\n    }\n}"
  },
  {
    "Task_id": 158,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a remote server, handle network communication, and manage resources properly.\n\nClass Description: The TimeClient class represents a Netty-based TCP client that connects to a specified host and port. It manages network connections asynchronously using Netty's event-driven architecture and provides methods to start and stop the client connection.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server to connect to\n- workerGroup: EventLoopGroup - Netty's event loop group for handling I/O operations\n- bootstrap: Bootstrap - Netty's bootstrap for configuring and starting the client\n\nMethods:\n- TimeClient(String host, int port) -> None - Constructor that initializes the client with target host and port\n- start() -> void - Starts the client connection, configures the pipeline, and connects to the server\n- stop() -> void - Shuts down the client connection gracefully and releases resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class TimeClient {\n\n    private String host;\n    private int port;\n    private EventLoopGroup workerGroup;\n    private Bootstrap bootstrap;\n\n    public TimeClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n    }\n\n    public void start() throws Exception {\n        try {\n            bootstrap.group(workerGroup);\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.option(ChannelOption.SO_KEEPALIVE, true);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new TimeClientHandler());\n                }\n            });\n\n            ChannelFuture f = bootstrap.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class TimeClient {\n    private final String host;\n    private final int port;\n    private EventLoopGroup workerGroup;\n    private Bootstrap bootstrap;\n\n    public TimeClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() {\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n        bootstrap.group(workerGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new TimeClientHandler());\n                    }\n                });\n        ChannelFuture future = bootstrap.connect(host, port).sync();\n        try {\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void stop() {\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 159,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, handle SSL/TLS if required, and process incoming/outgoing messages.\n\nClass Description: DiscardClient is a Netty-based TCP client that connects to a specified server, optionally with SSL/TLS encryption, and handles network communication through a custom handler. The client manages resources efficiently and supports graceful shutdown.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL/TLS encryption should be used\n- HOST: String - The hostname or IP address of the server to connect to (default: \"127.0.0.1\")\n- PORT: int - The port number of the server to connect to (default: 8009)\n- SIZE: int - The size parameter for communication (default: 256)\n- sslCtx: SslContext - SSL context for secure connections (nullable)\n\nMethods:\n- main(String[] args) -> void - Entry point that initializes the client, establishes connection, and manages the client lifecycle\n  - args: String[] - Command line arguments (unused in current implementation)\n- initChannel(SocketChannel ch) -> void - Configures the channel pipeline with SSL handler (if enabled) and custom client handler\n  - ch: SocketChannel - The socket channel to be initialized\n- connect() -> ChannelFuture - Establishes connection to the remote server and returns future for connection status\n- shutdown() -> void - Shuts down the client gracefully and releases all resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic final class DiscardClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8009\"));\n    static final int SIZE = Integer.parseInt(System.getProperty(\"size\", \"256\"));\n\n    public static void main(String[] args) throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc(), HOST, PORT));\n                     }\n                     p.addLast(new DiscardClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\n\npublic class DiscardClient {\n    private final boolean SSL;\n    private final String HOST;\n    private final int PORT;\n    private final int SIZE;\n    private final SslContext sslCtx;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public DiscardClient(boolean SSL, String HOST, int PORT, int SIZE) throws Exception {\n        this.SSL = SSL;\n        this.HOST = HOST;\n        this.PORT = PORT;\n        this.SIZE = SIZE;\n        this.sslCtx = SSL ? SslContextBuilder.forClient().build() : null;\n    }\n\n    public void initChannel(SocketChannel ch) {\n        ChannelPipeline pipeline = ch.pipeline();\n        if (sslCtx != null) {\n            pipeline.addLast(sslCtx.newHandler(ch.alloc()));\n        }\n        pipeline.addLast(new DiscardClientHandler());\n    }\n\n    public ChannelFuture connect() {\n        group = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioSocketChannel.class)\n         .handler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) {\n                 DiscardClient.this.initChannel(ch);\n             }\n         });\n        ChannelFuture future = b.connect(HOST, PORT);\n        this.channel = future.channel();\n        return future;\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.close().awaitUninterruptibly();\n        }\n        if (group != null) {\n            group.shutdownGracefully().awaitUninterruptibly();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        boolean SSL = false;\n        String HOST = \"127.0.0.1\";\n        int PORT = 8009;\n        int SIZE = 256;\n        DiscardClient client = new DiscardClient(SSL, HOST, PORT, SIZE);\n        ChannelFuture future = client.connect();\n        future.sync();\n        client.channel.closeFuture().sync();\n        client.shutdown();\n    }\n\n    private class DiscardClientHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ((ByteBuf) msg).release();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 160,
    "Instruction": "Task Description: Implement a Java class that establishes a TCP server using Netty framework to handle WebSocket connections, manage client protocols, and process various commands and binary messages.\n\nClass Description: LocalServer is a Netty-based TCP server that handles WebSocket connections, manages client protocols, and processes text/binary messages. It maintains a list of active protocols and delegates command execution to connected clients.\n\nAttributes:\n- port: int - The port number on which the server listens for incoming connections\n- protocolList: List<Protocol> - Maintains active client protocols and their associated connections\n- logger: Logger - Logging instance for server events and errors\n\nMethods:\n- LocalServer(int port) -> void - Constructor that initializes the server with specified port and creates an empty protocol list\n- listen(int port) -> void - Sets the server's listening port\n- start() -> void - Starts the Netty server with boss/worker groups, configures channel options and handlers, and binds to the specified port\n- LocalServerWebsocketEventImp (inner class) - Handles WebSocket events including connection, disconnection, and message processing\n\nLocalServerWebsocketEventImp Methods:\n- onConnect(ChannelHandlerContext ctx) -> void - Handles new WebSocket connections\n- onDisconnect(ChannelHandlerContext ctx) -> void - Handles client disconnections and cleans up associated protocols\n- onTextMessage(ChannelHandlerContext ctx, String text) -> void - Processes incoming text messages and executes corresponding commands\n- onBinaryMessage(ChannelHandlerContext ctx, byte[] data) -> void - Handles binary file uploads and processes file chunks\n- initLocalClient(ChannelHandlerContext ctx, Command command) -> void - Initializes a new client protocol for device communication\n- executeCommand(ChannelHandlerContext ctx, Command command) -> void - Executes commands on the appropriate protocol instance",
    "Canonical_solution": "import com.yeetor.androidcontrol.*;\nimport com.yeetor.androidcontrol.client.LocalClient;\nimport com.yeetor.androidcontrol.message.BinaryMessage;\nimport com.yeetor.androidcontrol.message.FileMessage;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport org.apache.log4j.Logger;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class LocalServer extends BaseServer {\n    private static Logger logger = Logger.getLogger(LocalServer.class);\n    \n    private int port = -1;\n    List<Protocol> protocolList;\n\n    public LocalServer(int port) {\n        listen(port);\n        protocolList = new LinkedList<Protocol>();\n    }\n\n    public void listen(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup).\n                channel(NioServerSocketChannel.class).\n                childOption(ChannelOption.SO_KEEPALIVE, true).\n                childHandler(new ChildChannel(new LocalServerWebsocketEventImp()));\n        ChannelFuture future = bootstrap.bind(port).sync();\n        future.channel().closeFuture().sync();\n    }\n\n    private class LocalServerWebsocketEventImp extends WebsocketEvent {\n\n        @Override\n        public void onConnect(ChannelHandlerContext ctx) {\n            logger.info(\"Websocket new connection!\" + ctx.channel().remoteAddress());\n        }\n\n        @Override\n        public void onDisconnect(ChannelHandlerContext ctx) {\n            for (Protocol protocol : protocolList) {\n                if (protocol.getBroswerSocket() != null && protocol.getBroswerSocket() == ctx) {\n                    protocol.broswerDisconnect();\n                    protocol.close();\n                    protocolList.remove(protocol);\n                    break;\n                }\n\n                if (protocol.getClientSocket() != null && protocol.getClientSocket() == ctx) {\n                    protocol.clientDisconnect();\n                    protocol.close();\n                    protocolList.remove(protocol);\n                    break;\n                }\n            }\n            logger.info(\"Websocket lost connection!\" + ctx.channel().remoteAddress());\n        }\n\n        @Override\n        public void onTextMessage(ChannelHandlerContext ctx, String text) {\n            Command command = Command.ParseCommand(text);\n            if (command != null) {\n                switch (command.getSchem()) {\n                    case WAIT:\n                        initLocalClient(ctx, command);\n                        break;\n                    case START:\n                    case WAITTING:\n                    case TOUCH:\n                    case KEYEVENT:\n                    case INPUT:\n                    case PUSH:\n                        executeCommand(ctx, command);\n                        break;\n                    case SHOT:\n                        sendShot(ctx, command);\n                        break;\n                    case DEVICES:\n                        sendDevicesJson(ctx);\n                        break;\n                }\n            }\n        }\n\n        @Override\n        public void onBinaryMessage(ChannelHandlerContext ctx, byte[] data) {\n            int headlen = (data[1] & 0xFF) << 8 | (data[0] & 0xFF);\n            String infoJSON = new String(data, 2, headlen);\n            BinaryMessage message = BinaryMessage.parse(infoJSON);\n\n            if (message.getType().equals(\"file\")) {\n                FileMessage fileMessage = (FileMessage) message;\n                File file = Constant.getTmpFile(fileMessage.name);\n                if (fileMessage.offset == 0 && file.exists()) {\n                    file.delete();\n                }\n                try {\n                    FileOutputStream os = new FileOutputStream(file, true);\n                    byte[] bs = Arrays.copyOfRange(data, 2 + headlen, data.length);\n                    os.write(bs);\n                    os.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                if (fileMessage.offset + fileMessage.packagesize == fileMessage.filesize) {\n                    ctx.channel().writeAndFlush(new TextWebSocketFrame(\"message://upload file success\"));\n                }\n            }\n        }\n\n        void initLocalClient(final ChannelHandlerContext ctx, Command command) {\n            String sn = command.getString(\"sn\", null);\n            String key = command.getString(\"key\", null);\n\n            if (StringUtils.isEmpty(sn)) {\n                AdbDevice iDevice = AdbServer.server().getFirstDevice();\n                if (iDevice == null) {\n                    ctx.channel().close();\n                    return;\n                }\n                sn = iDevice.getIDevice().getSerialNumber();\n            }\n\n            JSONObject obj = new JSONObject();\n            obj.put(\"sn\", sn);\n            obj.put(\"key\", key);\n\n            ctx.channel().writeAndFlush(new TextWebSocketFrame(\"open://\" + obj.toJSONString()));\n\n            Protocol protocol = new Protocol();\n            protocol.setSn(sn);\n            protocol.setKey(key);\n            protocol.setBroswerSocket(ctx);\n            protocolList.add(protocol);\n\n            LocalClient localClient = new LocalClient(protocol);\n            protocol.setLocalClient(localClient);\n        }\n\n        void executeCommand(ChannelHandlerContext ctx, Command command) {\n            Protocol protocol = null;\n            for (Protocol p : protocolList) {\n                if (p.getBroswerSocket() != null && p.getBroswerSocket() == ctx) {\n                    protocol = p;\n                    break;\n                }\n                if (p.getClientSocket() != null && p.getClientSocket() == ctx) {\n                    protocol = p;\n                    break;\n                }\n            }\n            if (protocol != null) {\n                protocol.getLocalClient().executeCommand(ctx, command);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LocalServer {\n    private final int port;\n    private final List<Protocol> protocolList = new ArrayList<>();\n    private final Logger logger = LoggerFactory.getLogger(LocalServer.class);\n\n    public LocalServer(int port) {\n        this.port = port;\n    }\n\n    public void listen(int port) {\n        this.port = port;\n    }\n\n    public void start() {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) {\n                            ChannelPipeline pipeline = ch.pipeline();\n                            pipeline.addLast(new HttpServerCodec());\n                            pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n                            pipeline.addLast(new LocalServerWebsocketEventImp());\n                        }\n                    })\n                    .option(ChannelOption.SO_BACKLOG, 128)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            logger.error(\"Server start failed\", e);\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    private class LocalServerWebsocketEventImp extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            onConnect(ctx);\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) {\n            onDisconnect(ctx);\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof TextWebSocketFrame) {\n                onTextMessage(ctx, ((TextWebSocketFrame) msg).text());\n            } else if (msg instanceof BinaryWebSocketFrame) {\n                onBinaryMessage(ctx, ((BinaryWebSocketFrame) msg).content().array());\n            }\n        }\n\n        private void onConnect(ChannelHandlerContext ctx) {\n            logger.info(\"WebSocket client connected: {}\", ctx.channel().remoteAddress());\n        }\n\n        private void onDisconnect(ChannelHandlerContext ctx) {\n            logger.info(\"WebSocket client disconnected: {}\", ctx.channel().remoteAddress());\n            protocolList.removeIf(protocol -> protocol.getChannel().equals(ctx.channel()));\n        }\n\n        private void onTextMessage(ChannelHandlerContext ctx, String text) {\n            logger.info(\"Received text message: {}\", text);\n            Command command = parseCommand(text);\n            if (command != null) {\n                executeCommand(ctx, command);\n            }\n        }\n\n        private void onBinaryMessage(ChannelHandlerContext ctx, byte[] data) {\n            logger.info(\"Received binary message of size {}\", data.length);\n            // Process binary data\n        }\n\n        private void initLocalClient(ChannelHandlerContext ctx, Command command) {\n            Protocol protocol = new Protocol(ctx.channel(), command);\n            protocolList.add(protocol);\n        }\n\n        private void executeCommand(ChannelHandlerContext ctx, Command command) {\n            Protocol protocol = protocolList.stream()\n                    .filter(p -> p.getChannel().equals(ctx.channel()))\n                    .findFirst()\n                    .orElse(null);\n            if (protocol != null) {\n                protocol.executeCommand(command);\n            } else {\n                initLocalClient(ctx, command);\n            }\n        }\n\n        private Command parseCommand(String text) {\n            // Placeholder for command parsing logic\n            return new Command(text);\n        }\n    }\n\n    static class Protocol {\n        private final Channel channel;\n        private final Command command;\n\n        Protocol(Channel channel, Command command) {\n            this.channel = channel;\n            this.command = command;\n        }\n\n        Channel getChannel() {\n            return channel;\n        }\n\n        void executeCommand(Command command) {\n            // Placeholder for command execution logic\n        }\n    }\n\n    static class Command {\n        private final String content;\n\n        Command(String content) {\n            this.content = content;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests for static file serving, with optional SSL support.\n\nClass Description: HttpStaticFileServer is a Netty-based server that serves static files over HTTP or HTTPS. It uses a boss-worker thread model for handling connections and includes SSL configuration capabilities.\n\nAttributes:\n- SSL: [boolean] - Flag indicating whether SSL/TLS encryption should be enabled\n- PORT: [int] - The port number on which the server will listen (defaults to 8080 for HTTP or 8443 for HTTPS)\n\nMethods:\n- start(): [void] - Starts the Netty server with the configured settings. Throws Exception if startup fails.\n  - Input: None\n  - Output: None (but binds to specified port and starts serving requests)\n  - Side effects: Creates event loop groups, binds to port, and keeps server running until shutdown",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslProvider;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class HttpStaticFileServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8443\" : \"8080\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey())\n                .sslProvider(SslProvider.JDK).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new HttpStaticFileServerInitializer(sslCtx));\n\n            Channel ch = b.bind(PORT).sync().channel();\n\n            System.err.println(\"Open your web browser and navigate to \" +\n                    (SSL? \"https\" : \"http\") + \"://127.0.0.1:\" + PORT + '/');\n\n            ch.closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.HttpObject;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.stream.DefaultFileRegion;\nimport java.io.File;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class HttpStaticFileServer {\n    private final boolean ssl;\n    private final int port;\n\n    public HttpStaticFileServer(boolean ssl, int port) {\n        this.ssl = ssl;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     if (ssl) {\n                         try {\n                             SslContext sslCtx = SslContextBuilder.forServer(new File(\"server.crt\"), new File(\"server.key\")).build();\n                             p.addLast(new SslHandler(sslCtx.newEngine(ch.alloc())));\n                         } catch (Exception e) {\n                             throw new RuntimeException(\"Failed to create SSL context\", e);\n                         }\n                     }\n                     p.addLast(new HttpServerCodec());\n                     p.addLast(new FileServerHandler());\n                 }\n             });\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class FileServerHandler extends SimpleChannelInboundHandler<HttpObject> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) {\n            if (msg instanceof HttpRequest) {\n                HttpRequest request = (HttpRequest) msg;\n                String uri = request.uri();\n                File file = new File(\"files\" + uri);\n                if (file.exists()) {\n                    try {\n                        ctx.writeAndFlush(new DefaultFileRegion(file, 0, file.length()));\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                } else {\n                    ctx.writeAndFlush(new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.NOT_FOUND));\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a Java class that implements an HTTP server using Netty framework, capable of handling HTTP requests with configurable thread pool settings and connection management.\n\nClass Description: Netty4HttpServer is a Netty-based HTTP server implementation that handles incoming HTTP requests using configurable worker threads and connection pooling. It extends AbstractServer and implements StatisticCallback for monitoring purposes.\n\nAttributes:\n- httpMessageHandler: HttpMessageHandler - Handler for processing HTTP requests\n- url: URL - Server configuration URL containing parameters like port, thread settings\n- channel: Channel - Netty channel for server communication\n- bossGroup: EventLoopGroup - Netty event loop group for accepting connections\n- workerGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- standardThreadExecutor: StandardThreadExecutor - Thread pool for request processing\n\nMethods:\n- open() -> boolean - Initializes and starts the HTTP server, returns true if successful\n  Input: None\n  Output: boolean indicating success/failure of server startup\n\n- close(int timeout) -> void - Shuts down the server gracefully within specified timeout\n  Input: timeout - maximum time to wait for shutdown (in milliseconds)\n  Output: None\n\n- processHttpRequest(ChannelHandlerContext ctx, FullHttpRequest httpRequest) -> void - Processes incoming HTTP requests\n  Input: \n    ctx - ChannelHandlerContext for the connection\n    httpRequest - Full HTTP request object\n  Output: None\n\n- sendResponse(ChannelHandlerContext ctx, FullHttpResponse httpResponse) -> void - Sends HTTP response to client\n  Input:\n    ctx - ChannelHandlerContext for the connection\n    httpResponse - Full HTTP response object\n  Output: None\n\n- getUrl() -> URL - Returns server configuration URL\n  Input: None\n  Output: URL object containing server configuration",
    "Canonical_solution": "import com.weibo.api.motan.common.ChannelState;\nimport com.weibo.api.motan.common.MotanConstants;\nimport com.weibo.api.motan.common.URLParamType;\nimport com.weibo.api.motan.core.DefaultThreadFactory;\nimport com.weibo.api.motan.core.StandardThreadExecutor;\nimport com.weibo.api.motan.exception.MotanFrameworkException;\nimport com.weibo.api.motan.rpc.Request;\nimport com.weibo.api.motan.rpc.Response;\nimport com.weibo.api.motan.rpc.URL;\nimport com.weibo.api.motan.transport.AbstractServer;\nimport com.weibo.api.motan.transport.TransportException;\nimport com.weibo.api.motan.util.LoggerUtil;\nimport com.weibo.api.motan.util.StatisticCallback;\nimport com.weibo.api.motan.util.StatsUtil;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.stream.ChunkedWriteHandler;\n\nimport java.net.InetSocketAddress;\n\npublic class Netty4HttpServer extends AbstractServer implements StatisticCallback {\n    private HttpMessageHandler httpMessageHandler;\n    private URL url;\n    private Channel channel;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private StandardThreadExecutor standardThreadExecutor;\n\n    public Netty4HttpServer(URL url, HttpMessageHandler httpMessageHandler) {\n        this.url = url;\n        this.httpMessageHandler = httpMessageHandler;\n    }\n\n    @Override\n    public synchronized boolean open() {\n        if (isAvailable()) {\n            return true;\n        }\n        if (channel != null) {\n            channel.close();\n        }\n        if (bossGroup == null) {\n            bossGroup = new NioEventLoopGroup();\n            workerGroup = new NioEventLoopGroup();\n        }\n        boolean shareChannel = url.getBooleanParameter(URLParamType.shareChannel.getName(), URLParamType.shareChannel.getBooleanValue());\n        int workerQueueSize = url.getIntParameter(URLParamType.workerQueueSize.getName(), 500);\n\n        int minWorkerThread, maxWorkerThread;\n\n        if (shareChannel) {\n            minWorkerThread = url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MIN_WORKDER);\n            maxWorkerThread = url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MAX_WORKDER);\n        } else {\n            minWorkerThread =\n                    url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MIN_WORKDER);\n            maxWorkerThread =\n                    url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MAX_WORKDER);\n        }\n        final int maxContentLength = url.getIntParameter(URLParamType.maxContentLength.getName(), URLParamType.maxContentLength.getIntValue());\n        standardThreadExecutor = (standardThreadExecutor != null && !standardThreadExecutor.isShutdown()) ? standardThreadExecutor\n                : new StandardThreadExecutor(minWorkerThread, maxWorkerThread, workerQueueSize, new DefaultThreadFactory(\"NettyServer-\" + url.getServerPortStr(), true));\n        standardThreadExecutor.prestartAllCoreThreads();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(\"http-decoder\", new HttpRequestDecoder());\n                ch.pipeline().addLast(\"http-aggregator\", new HttpObjectAggregator(maxContentLength));\n                ch.pipeline().addLast(\"http-encoder\", new HttpResponseEncoder());\n                ch.pipeline().addLast(\"http-chunked\", new ChunkedWriteHandler());\n                ch.pipeline().addLast(\"serverHandler\", new SimpleChannelInboundHandler<FullHttpRequest>() {\n                    protected void channelRead0(final ChannelHandlerContext ctx, final FullHttpRequest httpRequest) {\n                        httpRequest.content().retain();\n                        try {\n                            standardThreadExecutor.execute(() -> processHttpRequest(ctx, httpRequest));\n                        } catch (Exception e) {\n                            LoggerUtil.error(\"request is rejected by threadPool!\", e);\n                            httpRequest.content().release();\n                            sendResponse(ctx, NettyHttpUtil.buildErrorResponse(\"request is rejected by thread pool!\"));\n                        }\n                    }\n                });\n            }\n        }).option(ChannelOption.SO_BACKLOG, 1024).childOption(ChannelOption.SO_KEEPALIVE, false);\n\n        ChannelFuture f;\n        try {\n            f = b.bind(url.getPort()).sync();\n            channel = f.channel();\n        } catch (InterruptedException e) {\n            LoggerUtil.error(\"init http server fail.\", e);\n            return false;\n        }\n        setLocalAddress((InetSocketAddress) channel.localAddress());\n        if (url.getPort() == 0) {\n            url.setPort(getLocalAddress().getPort());\n        }\n        state = ChannelState.ALIVE;\n        StatsUtil.registryStatisticCallback(this);\n        LoggerUtil.info(\"Netty4HttpServer ServerChannel finish Open: url=\" + url);\n        return true;\n    }\n\n    private void processHttpRequest(ChannelHandlerContext ctx, FullHttpRequest httpRequest) {\n        FullHttpResponse httpResponse;\n        try {\n            httpRequest.headers().set(URLParamType.host.getName(), ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress().getHostAddress());\n            httpResponse = httpMessageHandler.handle(this, httpRequest);\n        } catch (Exception e) {\n            LoggerUtil.error(\"NettyHttpHandler process http request fail.\", e);\n            httpResponse = NettyHttpUtil.buildErrorResponse(e.getMessage());\n        } finally {\n            httpRequest.content().release();\n        }\n        sendResponse(ctx, httpResponse);\n    }\n\n    private void sendResponse(ChannelHandlerContext ctx, FullHttpResponse httpResponse) {\n        boolean close = false;\n        try {\n            ctx.write(httpResponse);\n            ctx.flush();\n        } catch (Exception e) {\n            LoggerUtil.error(\"NettyHttpHandler write response fail.\", e);\n            close = true;\n        } finally {\n            if (close || httpResponse == null || !httpResponse.headers().contains(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE, true)) {\n                ctx.close();\n            }\n        }\n    }\n\n    @Override\n    public synchronized void close(int timeout) {\n        if (state.isCloseState()) {\n            LoggerUtil.info(\"Netty4HttpServer close fail: already close, url={}\", url.getUri());\n            return;\n        }\n\n        if (state.isUnInitState()) {\n            LoggerUtil.info(\"Netty4HttpServer close Fail: don't need to close because node is unInit state: url={}\",\n                    url.getUri());\n            return;\n        }\n        if (channel != null) {\n            channel.close();\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        if (standardThreadExecutor != null) {\n            standardThreadExecutor.shutdownNow();\n        }\n        workerGroup = null;\n        bossGroup = null;\n        standardThreadExecutor = null;\n        channel = null;\n        state = ChannelState.CLOSE;\n        StatsUtil.unRegistryStatisticCallback(this);\n    }\n\n    @Override\n    public URL getUrl() {\n        return url;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.codec.http.HttpContentCompressor;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpResponse;\nimport io.netty.handler.codec.http.LastHttpContent;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.HttpHeaders;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpMethod;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport java.net.URL;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class Netty4HttpServer extends AbstractServer implements StatisticCallback {\n    private final HttpMessageHandler httpMessageHandler;\n    private final URL url;\n    private Channel channel;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ExecutorService standardThreadExecutor;\n\n    public Netty4HttpServer(HttpMessageHandler httpMessageHandler, URL url) {\n        this.httpMessageHandler = httpMessageHandler;\n        this.url = url;\n    }\n\n    public boolean open() {\n        try {\n            int port = url.getPort();\n            if (port == -1) {\n                port = 80;\n            }\n            String query = url.getQuery();\n            int workerThreads = 10;\n            int bossThreads = 1;\n            if (query != null) {\n                String[] params = query.split(\"&\");\n                for (String param : params) {\n                    String[] keyValue = param.split(\"=\");\n                    if (keyValue.length == 2) {\n                        if (keyValue[0].equals(\"workerThreads\")) {\n                            workerThreads = Integer.parseInt(keyValue[1]);\n                        } else if (keyValue[0].equals(\"bossThreads\")) {\n                            bossThreads = Integer.parseInt(keyValue[1]);\n                        }\n                    }\n                }\n            }\n\n            bossGroup = new NioEventLoopGroup(bossThreads);\n            workerGroup = new NioEventLoopGroup(workerThreads);\n            standardThreadExecutor = Executors.newFixedThreadPool(workerThreads);\n\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(\n                             new HttpRequestDecoder(),\n                             new HttpObjectAggregator(65536),\n                             new HttpResponseEncoder(),\n                             new HttpHandler()\n                     );\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            channel = f.channel();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public void close(int timeout) {\n        if (channel != null) {\n            channel.close().awaitUninterruptibly();\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully(0, timeout, TimeUnit.MILLISECONDS);\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully(0, timeout, TimeUnit.MILLISECONDS);\n        }\n        if (standardThreadExecutor != null) {\n            standardThreadExecutor.shutdown();\n            try {\n                if (!standardThreadExecutor.awaitTermination(timeout, TimeUnit.MILLISECONDS)) {\n                    standardThreadExecutor.shutdownNow();\n                }\n            } catch (InterruptedException e) {\n                standardThreadExecutor.shutdownNow();\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n\n    private class HttpHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) {\n            processHttpRequest(ctx, request);\n        }\n    }\n\n    public void processHttpRequest(ChannelHandlerContext ctx, FullHttpRequest httpRequest) {\n        FullHttpResponse response = httpMessageHandler.handleRequest(httpRequest);\n        sendResponse(ctx, response);\n    }\n\n    public void sendResponse(ChannelHandlerContext ctx, FullHttpResponse httpResponse) {\n        ctx.writeAndFlush(httpResponse);\n    }\n\n    public URL getUrl() {\n        return url;\n    }\n\n    @Override\n    public void onStatisticsUpdate(String statisticName, Object value) {\n        // Implementation here\n    }\n}\n```"
  },
  {
    "Task_id": 165,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling incoming client connections, processing requests through a configurable thread pool, and managing server lifecycle.\n\nClass Description: NettyServer is a TCP server implementation that uses Netty framework for non-blocking I/O operations. It manages server connections, processes incoming requests through a thread pool, and provides lifecycle control (open/close) for the server.\n\nAttributes:\n- channelManage: [NettyServerChannelManage] - Manages active server channels and connections\n- bossGroup: [EventLoopGroup] - Netty event loop group for accepting connections\n- workerGroup: [EventLoopGroup] - Netty event loop group for handling I/O operations\n- serverChannel: [Channel] - The main server channel listening for connections\n- messageHandler: [MessageHandler] - Handler for processing incoming messages\n- threadPoolExecutor: [ThreadPoolExecutor] - Thread pool for request processing\n- rejectCounter: [AtomicInteger] - Counter for rejected requests\n- logger: [Logger] - Logger instance for server operations\n- url: [URL] - Configuration URL containing server parameters\n- state: [ChannelState] - Current state of the server channel\n- codec: [Codec] - Codec for message serialization/deserialization\n\nMethods:\n- open() -> [boolean] - Starts the server, initializes thread pools and Netty components, binds to configured port\n- close([int] timeout) -> [void] - Shuts down the server gracefully, releasing all resources\n- cleanup() -> [void] - Internal method for resource cleanup during server shutdown\n- NettyServer([URL] url, [MessageHandler] messageHandler) - Constructor initializing server with configuration and message handler",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport org.hongxi.summer.common.ChannelState;\nimport org.hongxi.summer.common.SummerConstants;\nimport org.hongxi.summer.common.URLParamType;\nimport org.hongxi.summer.common.threadpool.DefaultThreadFactory;\nimport org.hongxi.summer.common.threadpool.StandardThreadPoolExecutor;\nimport org.hongxi.summer.exception.SummerFrameworkException;\nimport org.hongxi.summer.rpc.Request;\nimport org.hongxi.summer.rpc.Response;\nimport org.hongxi.summer.rpc.URL;\nimport org.hongxi.summer.transport.AbstractServer;\nimport org.hongxi.summer.transport.MessageHandler;\nimport org.hongxi.summer.transport.TransportException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class NettyServer extends AbstractServer {\n    private static final Logger logger = LoggerFactory.getLogger(NettyServer.class);\n\n    protected NettyServerChannelManage channelManage;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel serverChannel;\n    private MessageHandler messageHandler;\n    private ThreadPoolExecutor threadPoolExecutor;\n    private AtomicInteger rejectCounter = new AtomicInteger(0);\n\n    public NettyServer(URL url, MessageHandler messageHandler) {\n        super(url);\n        this.messageHandler = messageHandler;\n    }\n\n    @Override\n    public boolean open() {\n        if (isAvailable()) {\n            logger.warn(\"server channel already open, url={}\", url);\n            return state.isAliveState();\n        }\n\n        if (bossGroup == null) {\n            bossGroup = new NioEventLoopGroup(1);\n            workerGroup = new NioEventLoopGroup();\n        }\n\n        logger.info(\"server channel start open, url={}\", url);\n        boolean shareChannel = url.getBooleanParameter(\n                URLParamType.shareChannel.getName(), URLParamType.shareChannel.boolValue());\n        int maxContentLength = url.getIntParameter(\n                URLParamType.maxContentLength.getName(), URLParamType.maxContentLength.intValue());\n        int maxServerConnections = url.getIntParameter(\n                URLParamType.maxServerConnections.getName(), URLParamType.maxServerConnections.intValue());\n        int maxQueueSize = url.getIntParameter(\n                URLParamType.workerQueueSize.getName(), URLParamType.workerQueueSize.intValue());\n\n        int minWorkerThreads;\n        int maxWorkerThreads;\n        if (shareChannel) {\n            minWorkerThreads = url.getIntParameter(URLParamType.minWorkerThreads.getName(),\n                    SummerConstants.NETTY_SHARE_CHANNEL_MIN_WORKER_THREADS);\n            maxWorkerThreads = url.getIntParameter(URLParamType.maxWorkerThreads.getName(),\n                    SummerConstants.NETTY_SHARE_CHANNEL_MAX_WORKER_THREADS);\n        } else {\n            minWorkerThreads = url.getIntParameter(URLParamType.minWorkerThreads.getName(),\n                    SummerConstants.NETTY_NOT_SHARE_CHANNEL_MIN_WORKER_THREADS);\n            maxWorkerThreads = url.getIntParameter(URLParamType.maxWorkerThreads.getName(),\n                    SummerConstants.NETTY_NOT_SHARE_CHANNEL_MAX_WORKER_THREADS);\n        }\n\n        if (threadPoolExecutor == null || threadPoolExecutor.isShutdown()) {\n            threadPoolExecutor = new StandardThreadPoolExecutor(minWorkerThreads, maxWorkerThreads,\n                    maxQueueSize, new DefaultThreadFactory(\"NettyServer-\" + url.getServerPortStr(), true));\n        }\n        threadPoolExecutor.prestartAllCoreThreads();\n\n        channelManage = new NettyServerChannelManage(maxServerConnections);\n\n        ServerBootstrap serverBootstrap = new ServerBootstrap();\n        serverBootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel socketChannel) throws Exception {\n                        ChannelPipeline pipeline = socketChannel.pipeline();\n                        pipeline.addLast(\"channel_manage\", channelManage);\n                        pipeline.addLast(\"decoder\", new NettyDecoder(codec, NettyServer.this, maxContentLength));\n                        pipeline.addLast(\"encoder\", new NettyEncoder());\n                        pipeline.addLast(\"handler\", new NettyChannelHandler(NettyServer.this, messageHandler, threadPoolExecutor));\n                    }\n                });\n        serverBootstrap.childOption(ChannelOption.TCP_NODELAY, true);\n        serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);\n        ChannelFuture channelFuture = serverBootstrap.bind(new InetSocketAddress(url.getPort()));\n        channelFuture.syncUninterruptibly();\n        serverChannel = channelFuture.channel();\n        state = ChannelState.ALIVE;\n        logger.info(\"server channel finished open: url={}\", url);\n        return state.isAliveState();\n    }\n\n    @Override\n    public synchronized void close(int timeout) {\n        if (state.isCloseState()) return;\n\n        try {\n            cleanup();\n            if (state.isUnInitState()) {\n                logger.info(\"Server close failed, state={}, uri={}\", state.value(), url.getUri());\n                return;\n            }\n\n            state = ChannelState.CLOSE;\n            logger.info(\"Server close success, uri={}\", url.getUri());\n        } catch (Exception e) {\n            logger.error(\"Server close error, uri={}\", url.getUri(), e);\n        }\n    }\n\n    private void cleanup() {\n        if (serverChannel != null) {\n            serverChannel.close();\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n            bossGroup = null;\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n            workerGroup = null;\n        }\n        if (channelManage != null) {\n            channelManage.close();\n        }\n        if (threadPoolExecutor != null) {\n            threadPoolExecutor.shutdownNow();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.net.URL;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class NettyServer {\n    private final NettyServerChannelManage channelManage;\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private Channel serverChannel;\n    private final MessageHandler messageHandler;\n    private final ThreadPoolExecutor threadPoolExecutor;\n    private final AtomicInteger rejectCounter;\n    private final Logger logger;\n    private final URL url;\n    private ChannelState state;\n    private final Codec codec;\n\n    public NettyServer(URL url, MessageHandler messageHandler) {\n        this.url = url;\n        this.messageHandler = messageHandler;\n        this.channelManage = new NettyServerChannelManage();\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n        this.threadPoolExecutor = new ThreadPoolExecutor(10, 20, 60L, java.util.concurrent.TimeUnit.SECONDS, new java.util.concurrent.LinkedBlockingQueue<>());\n        this.rejectCounter = new AtomicInteger(0);\n        this.logger = Logger.getLogger(NettyServer.class.getName());\n        this.state = ChannelState.NEW;\n        this.codec = new Codec();\n    }\n\n    public boolean open() {\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap();\n            bootstrap.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<>() {\n                        @Override\n                        protected void initChannel(Channel ch) {\n                            ch.pipeline().addLast(codec.getDecoder(), codec.getEncoder(), new MessageHandlerAdapter(messageHandler, threadPoolExecutor, rejectCounter));\n                        }\n                    });\n\n            ChannelFuture future = bootstrap.bind(url.getPort()).sync();\n            serverChannel = future.channel();\n            state = ChannelState.ACTIVE;\n            return true;\n        } catch (Exception e) {\n            logger.severe(\"Failed to start server: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    public void close(int timeout) {\n        if (state == ChannelState.ACTIVE) {\n            try {\n                serverChannel.closeFuture().await(timeout);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            } finally {\n                cleanup();\n            }\n        }\n    }\n\n    private void cleanup() {\n        if (serverChannel != null) {\n            serverChannel.close();\n            serverChannel = null;\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        if (threadPoolExecutor != null) {\n            threadPoolExecutor.shutdown();\n        }\n        state = ChannelState.CLOSED;\n    }\n\n    private enum ChannelState { NEW, ACTIVE, CLOSED }\n}\n```"
  },
  {
    "Task_id": 166,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based HTTP server for handling RPC (Remote Procedure Call) requests. The server should manage incoming connections, process HTTP requests, and handle server lifecycle events (start/stop).\n\nClass Description: NettyHttpServer is a server implementation that uses Netty framework to create a non-blocking HTTP server capable of handling RPC requests. It manages thread pools for request processing and implements proper resource cleanup during shutdown.\n\nAttributes:\n- thread: Thread - The thread in which the Netty server runs\n- logger: Logger - Logger instance for server events (inherited from parent class)\n\nMethods:\n- start(XxlRpcProviderFactory) -> void - Starts the Netty HTTP server on a specified port, initializes thread pools, and sets up request handlers\n  - Input: xxlRpcProviderFactory - Configuration factory containing server parameters like port number and thread pool sizes\n  - Output: None (server runs asynchronously in a separate thread)\n  \n- stop() -> void - Stops the server gracefully by interrupting the server thread and shutting down all resources\n  - Input: None\n  - Output: None (performs cleanup operations)\n\nThe implementation should follow Netty best practices including:\n1. Using separate event loop groups for connection acceptance and request processing\n2. Proper channel pipeline configuration with HTTP codecs and aggregator\n3. Idle connection handling\n4. Graceful shutdown of all resources\n5. Thread pool management for request processing\n6. Proper error handling and logging",
    "Canonical_solution": "import com.wugui.datax.rpc.remoting.net.Server;\nimport com.wugui.datax.rpc.remoting.net.common.NettyConstant;\nimport com.wugui.datax.rpc.remoting.net.params.Beat;\nimport com.wugui.datax.rpc.remoting.provider.XxlRpcProviderFactory;\nimport com.wugui.datax.rpc.util.ThreadPoolUtil;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyHttpServer extends Server {\n\n    private Thread thread;\n\n    @Override\n    public void start(final XxlRpcProviderFactory xxlRpcProviderFactory) {\n        thread = new Thread(() -> {\n            final ThreadPoolExecutor serverHandlerPool = ThreadPoolUtil.makeServerThreadPool(\n                    NettyHttpServer.class.getSimpleName(),\n                    xxlRpcProviderFactory.getCorePoolSize(),\n                    xxlRpcProviderFactory.getMaxPoolSize());\n            EventLoopGroup bossGroup = new NioEventLoopGroup();\n            EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n            try {\n                ServerBootstrap bootstrap = new ServerBootstrap();\n                bootstrap.group(bossGroup, workerGroup)\n                        .channel(NioServerSocketChannel.class)\n                        .childHandler(new ChannelInitializer<SocketChannel>() {\n                            @Override\n                            public void initChannel(SocketChannel channel) {\n                                channel.pipeline()\n                                        .addLast(new IdleStateHandler(0, 0, Beat.BEAT_INTERVAL * 3, TimeUnit.SECONDS))\n                                        .addLast(new HttpServerCodec())\n                                        .addLast(new HttpObjectAggregator(NettyConstant.MAX_LENGTH))\n                                        .addLast(new NettyHttpServerHandler(xxlRpcProviderFactory, serverHandlerPool));\n                            }\n                        })\n                        .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n                ChannelFuture future = bootstrap.bind(xxlRpcProviderFactory.getPort()).sync();\n                logger.info(\">>>>>>>>>>> xxl-rpc remoting server start success, nettype = {}, port = {}\", NettyHttpServer.class.getName(), xxlRpcProviderFactory.getPort());\n                onStarted();\n\n                future.channel().closeFuture().sync();\n            } catch (InterruptedException e) {\n                if (e instanceof InterruptedException) {\n                    logger.info(\">>>>>>>>>>> xxl-rpc remoting server stop.\");\n                } else {\n                    logger.error(\">>>>>>>>>>> xxl-rpc remoting server error.\", e);\n                }\n            } finally {\n                try {\n                    serverHandlerPool.shutdown();\n                } catch (Exception e) {\n                    logger.error(e.getMessage(), e);\n                }\n                try {\n                    workerGroup.shutdownGracefully();\n                    bossGroup.shutdownGracefully();\n                } catch (Exception e) {\n                    logger.error(e.getMessage(), e);\n                }\n            }\n        });\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    @Override\n    public void stop() {\n        if (thread != null && thread.isAlive()) {\n            thread.interrupt();\n        }\n        onStopped();\n        logger.info(\">>>>>>>>>>> xxl-rpc remoting server destroy success.\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class NettyHttpServer {\n    private Thread thread;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel channel;\n    private final Logger logger = LoggerFactory.getLogger(NettyHttpServer.class);\n\n    public void start(XxlRpcProviderFactory xxlRpcProviderFactory) {\n        int port = xxlRpcProviderFactory.getPort();\n        int bossThreadCount = xxlRpcProviderFactory.getBossThreadCount();\n        int workerThreadCount = xxlRpcProviderFactory.getWorkerThreadCount();\n\n        bossGroup = new NioEventLoopGroup(bossThreadCount);\n        workerGroup = new NioEventLoopGroup(workerThreadCount);\n\n        thread = new Thread(() -> {\n            try {\n                ServerBootstrap b = new ServerBootstrap();\n                b.group(bossGroup, workerGroup)\n                 .channel(NioServerSocketChannel.class)\n                 .childHandler(new ChannelInitializer<SocketChannel>() {\n                     @Override\n                     public void initChannel(SocketChannel ch) {\n                         ch.pipeline().addLast(\n                             new HttpServerCodec(),\n                             new HttpObjectAggregator(65536),\n                             new IdleStateHandler(60, 30, 60),\n                             new RpcHandler()\n                         );\n                     }\n                 });\n\n                ChannelFuture f = b.bind(port).sync();\n                channel = f.channel();\n                f.channel().closeFuture().sync();\n            } catch (Exception e) {\n                logger.error(\"Failed to start Netty server\", e);\n            } finally {\n                if (bossGroup != null) {\n                    bossGroup.shutdownGracefully();\n                }\n                if (workerGroup != null) {\n                    workerGroup.shutdownGracefully();\n                }\n            }\n        });\n        thread.start();\n    }\n\n    public void stop() {\n        if (thread != null) {\n            thread.interrupt();\n        }\n\n        if (channel != null) {\n            channel.close();\n        }\n\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}"
  },
  {
    "Task_id": 167,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process requests.\n\nClass Description: DiscardServer is a Netty-based TCP server that listens on a specified port, accepts incoming connections, and processes client requests using a custom handler. The server uses non-blocking I/O and is designed to be gracefully shutdown when no longer needed.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nDiscardServer: (int port) -> void - Constructor that initializes the server with the specified port number\nrun: () -> void - Starts the server, binds it to the configured port, and begins accepting connections. Throws Exception if any error occurs during startup\nmain: (String[] args) -> void - Entry point that creates and starts the server instance with either a specified port or default port 8080",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class DiscardServer {\n\n    private int port;\n\n    public DiscardServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new DiscardServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = args.length > 0 ? Integer.parseInt(args[0]) : 8080;\n        new DiscardServer(port).run();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\n\npublic class DiscardServer {\n    private final int port;\n\n    public DiscardServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new DiscardHandler());\n                 }\n             });\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        int port = 8080;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        DiscardServer server = new DiscardServer(port);\n        try {\n            server.run();\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n\n    private static class DiscardHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ((ByteBuf) msg).release();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a Java class that implements a MySQL-compatible Netty TCP server to handle client connections and MySQL protocol communication.\n\nClass Description: The MysqlNettyServer class is a Netty-based TCP server that handles MySQL protocol connections. It manages client connections, processes MySQL protocol messages, and maintains connection state. The server uses Netty's non-blocking I/O model for high performance.\n\nAttributes:\n- host: String - The host address the server binds to (nullable)\n- port: int - The port number the server listens on\n- connections: static Map<String, MysqlConnection> - Thread-safe map storing active MySQL connections by connection ID\n- eventLoopGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- server: ServerBootstrap - Netty server bootstrap instance for server configuration\n\nMethods:\n- start() -> void - Starts the Netty server, binds to the specified host and port, and begins accepting connections. Throws Exception if binding fails.\n- channelInitializer() -> ChannelInitializer<SocketChannel> - Creates and returns a channel initializer that sets up the pipeline for new connections, including handlers for MySQL protocol processing.\n- close() -> void - Shuts down the server gracefully by closing all connections and releasing resources.\n\nThe class uses Netty's NIO transport and includes handlers for:\n1. MySQL handshake protocol\n2. MySQL message decoding\n3. Connection idle state management\n4. MySQL command processing\n5. Exception handling\n\nThe server maintains thread-safe tracking of active connections and automatically cleans up closed connections.",
    "Canonical_solution": "import io.dingodb.common.concurrent.ThreadPoolBuilder;\nimport io.dingodb.driver.mysql.MysqlConnection;\nimport io.dingodb.net.netty.NettyHandlers;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioChannelOption;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.net.StandardSocketOptions;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Slf4j\n@Getter\n@Builder\npublic class MysqlNettyServer {\n    public final String host;\n    public final int port;\n    public static final Map<String, MysqlConnection> connections = new ConcurrentHashMap<>();\n\n    private EventLoopGroup eventLoopGroup;\n    private ServerBootstrap server;\n\n    public void start() throws Exception {\n        server = new ServerBootstrap();\n        eventLoopGroup = new NioEventLoopGroup(151,\n            new ThreadPoolBuilder().name(\"mysql server \" + port).coreThreads(151).maximumThreads(151).build());\n        server\n            .channel(NioServerSocketChannel.class)\n            .group(eventLoopGroup)\n            .childOption(ChannelOption.TCP_NODELAY, true)\n            .childOption(ChannelOption.SO_KEEPALIVE, Boolean.TRUE)\n            .childOption(NioChannelOption.of(StandardSocketOptions.SO_KEEPALIVE), Boolean.TRUE)\n            .childHandler(channelInitializer());\n        if (host != null) {\n            server.localAddress(host, port);\n        } else {\n            server.localAddress(port);\n        }\n        try {\n            server.bind().sync().await();\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            System.exit(-1);\n        }\n    }\n\n    private ChannelInitializer<SocketChannel> channelInitializer() {\n        return new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) {\n                MysqlConnection mysqlConnection = new MysqlConnection(ch);\n                ch.closeFuture().addListener(f -> {\n                    if (mysqlConnection.getId() != null) {\n                        connections.remove(mysqlConnection.getId());\n                    }\n                }).addListener(f -> mysqlConnection.close());\n                ch.pipeline().addLast(\"handshake\", new HandshakeHandler(mysqlConnection));\n                ch.pipeline().addLast(\"decoder\", new MysqlDecoder());\n                MysqlIdleStateHandler mysqlIdleStateHandler = new MysqlIdleStateHandler(\n                    28800, 60);\n                mysqlConnection.mysqlIdleStateHandler = mysqlIdleStateHandler;\n                ch.pipeline().addLast(\"idleStateHandler\", mysqlIdleStateHandler);\n                ch.pipeline()\n                    .addLast(\"mysqlHandler\", new MysqlHandler(mysqlConnection));\n                ch.pipeline().addLast(\"exception\", new NettyHandlers.ExceptionHandler());\n            }\n        };\n    }\n\n    public void close() {\n        eventLoopGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class MysqlNettyServer {\n    private String host;\n    private int port;\n    private static final Map<String, MysqlConnection> connections = new ConcurrentHashMap<>();\n    private EventLoopGroup eventLoopGroup;\n    private ServerBootstrap server;\n\n    public MysqlNettyServer(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        eventLoopGroup = new NioEventLoopGroup();\n        server = new ServerBootstrap();\n        server.group(eventLoopGroup)\n              .channel(NioServerSocketChannel.class)\n              .childHandler(channelInitializer());\n        server.bind(host, port).sync();\n    }\n\n    private ChannelInitializer<SocketChannel> channelInitializer() {\n        return new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(new IdleStateHandler(60, 30, 0));\n                ch.pipeline().addLast(new MySqlMessageDecoder());\n                ch.pipeline().addLast(new HandshakeHandler());\n                ch.pipeline().addLast(new CommandHandler());\n                ch.pipeline().addLast(new ExceptionHandler());\n                ch.pipeline().addLast(new ConnectionHandler());\n            }\n        };\n    }\n\n    public void close() {\n        if (eventLoopGroup != null) {\n            eventLoopGroup.shutdownGracefully();\n        }\n        if (!connections.isEmpty()) {\n            connections.values().forEach(MysqlConnection::close);\n            connections.clear();\n        }\n    }\n\n    private static class ConnectionHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(io.netty.channel.ChannelHandlerContext ctx) {\n            String connectionId = ctx.channel().id().asLongText();\n            connections.put(connectionId, new MysqlConnection(ctx.channel()));\n        }\n\n        @Override\n        public void channelInactive(io.netty.channel.ChannelHandlerContext ctx) {\n            String connectionId = ctx.channel().id().asLongText();\n            connections.remove(connectionId);\n        }\n    }\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a Java class that provides file channel operations using Java NIO's FileChannel for efficient file I/O operations, including reading, writing, positioning, truncating, and memory mapping.\n\nClass Description: TranslogFileChannel is a wrapper class for FileChannel that simplifies file operations while maintaining the performance benefits of Java NIO. It implements Closeable to ensure proper resource cleanup.\n\nAttributes:\n- location: Path - The file path associated with the FileChannel\n- channel: FileChannel - The underlying FileChannel instance for performing I/O operations\n\nMethods:\n- TranslogFileChannel(Path location) -> void - Constructor that opens a FileChannel for both reading and writing at the specified path\n- write(ByteBuffer src) -> void - Writes data from the given ByteBuffer to the file\n- read(ByteBuffer dst) -> int - Reads data from the file into the given ByteBuffer, returning the number of bytes read\n- position() -> long - Returns the current position in the file\n- position(long newPosition) -> void - Sets the position in the file\n- size() -> long - Returns the current size of the file\n- truncate(long size) -> void - Truncates the file to the specified size\n- force(boolean metaData) -> void - Forces any updates to be written to the storage device\n- transferTo(long position, long count, WritableByteChannel target) -> long - Transfers bytes from this channel to the given writable channel\n- transferFrom(ReadableByteChannel src, long position, long count) -> long - Transfers bytes into this channel from the given readable channel\n- map(FileChannel.MapMode mode, long position, long size) -> MappedByteBuffer - Maps a region of this channel's file directly into memory\n- close() -> void - Closes the FileChannel and releases associated resources",
    "Canonical_solution": "import java.io.Closeable;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class TranslogFileChannel implements Closeable {\n\n    private final Path location;\n    private FileChannel channel;\n\n    public TranslogFileChannel(Path location) throws IOException {\n        this.location = location;\n        this.channel = FileChannel.open(location, StandardOpenOption.READ, StandardOpenOption.WRITE);\n    }\n\n    public void write(ByteBuffer src) throws IOException {\n        channel.write(src);\n    }\n\n    public int read(ByteBuffer dst) throws IOException {\n        return channel.read(dst);\n    }\n\n    public long position() throws IOException {\n        return channel.position();\n    }\n\n    public void position(long newPosition) throws IOException {\n        channel.position(newPosition);\n    }\n\n    public long size() throws IOException {\n        return channel.size();\n    }\n\n    public void truncate(long size) throws IOException {\n        channel.truncate(size);\n    }\n\n    public void force(boolean metaData) throws IOException {\n        channel.force(metaData);\n    }\n\n    public long transferTo(long position, long count, WritableByteChannel target) throws IOException {\n        return channel.transferTo(position, count, target);\n    }\n\n    public long transferFrom(ReadableByteChannel src, long position, long count) throws IOException {\n        return channel.transferFrom(src, position, count);\n    }\n\n    public MappedByteBuffer map(MapMode mode, long position, long size) throws IOException {\n        return channel.map(mode, position, size);\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (channel != null) {\n            channel.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.ReadableByteChannel;\nimport java.nio.channels.WritableByteChannel;\nimport java.nio.channels.FileChannel.MapMode;\nimport java.nio.MappedByteBuffer;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class TranslogFileChannel implements Closeable {\n    private final Path location;\n    private final FileChannel channel;\n\n    public TranslogFileChannel(Path location) throws IOException {\n        this.location = location;\n        this.channel = FileChannel.open(location, StandardOpenOption.READ, StandardOpenOption.WRITE);\n    }\n\n    public void write(ByteBuffer src) throws IOException {\n        channel.write(src);\n    }\n\n    public int read(ByteBuffer dst) throws IOException {\n        return channel.read(dst);\n    }\n\n    public long position() {\n        return channel.position();\n    }\n\n    public void position(long newPosition) {\n        channel.position(newPosition);\n    }\n\n    public long size() {\n        return channel.size();\n    }\n\n    public void truncate(long size) throws IOException {\n        channel.truncate(size);\n    }\n\n    public void force(boolean metaData) throws IOException {\n        channel.force(metaData);\n    }\n\n    public long transferTo(long position, long count, WritableByteChannel target) throws IOException {\n        return channel.transferTo(position, count, target);\n    }\n\n    public long transferFrom(ReadableByteChannel src, long position, long count) throws IOException {\n        return channel.transferFrom(src, position, count);\n    }\n\n    public MappedByteBuffer map(MapMode mode, long position, long size) throws IOException {\n        return channel.map(mode, position, size);\n    }\n\n    @Override\n    public void close() throws IOException {\n        channel.close();\n    }\n}\n```"
  },
  {
    "Task_id": 170,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling HTTP requests with optional SSL encryption.\n\nClass Description: The HttpSnoopServer class is a Netty-based HTTP server that can operate in both secure (HTTPS) and non-secure (HTTP) modes. It uses a boss-worker thread model for handling connections and includes SSL support through self-signed certificates when enabled.\n\nAttributes:\n- SSL: static final boolean - Determines whether SSL encryption should be enabled (configured via system property \"ssl\")\n- PORT: static final int - The port number the server will listen on (configured via system property \"port\", defaults to 8443 for SSL or 8080 for non-SSL)\n\nMethods:\n- start(): void - Starts the HTTP server with the configured settings. Throws Exception if server startup fails.\n  - Initializes SSL context if enabled\n  - Sets up boss and worker event loop groups\n  - Configures server bootstrap with channel type and handlers\n  - Binds to specified port and starts accepting connections\n  - Handles graceful shutdown of resources",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class HttpSnoopServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8443\" : \"8080\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new HttpSnoopServerInitializer(sslCtx));\n\n            Channel ch = b.bind(PORT).sync().channel();\n\n            System.err.println(\"Open your web browser and navigate to \" +\n                    (SSL? \"https\" : \"http\") + \"://127.0.0.1:\" + PORT + '/');\n\n            ch.closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObject;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpResponse;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.DefaultHttpResponse;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class HttpSnoopServer {\n    static final boolean SSL = Boolean.getBoolean(\"ssl\");\n    static final int PORT = Integer.getInteger(\"port\", SSL ? 8443 : 8080);\n\n    public void start() throws Exception {\n        SslContext sslCtx = null;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new HttpServerCodec());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new SimpleChannelInboundHandler<HttpObject>() {\n                         @Override\n                         protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) {\n                             if (msg instanceof HttpRequest) {\n                                 System.out.println(\"Received request: \" + ((HttpRequest) msg).uri());\n                             }\n                             ctx.writeAndFlush(new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK));\n                         }\n                     });\n                 }\n             });\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 171,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using the Netty framework to handle incoming client connections and process requests.\n\nClass Description: The `JacksonServer` class is a Netty-based TCP server that listens on a specified port for incoming client connections. It uses a boss-worker thread model to handle connections efficiently and includes logging for monitoring server activity. The server is designed to be gracefully shutdown when no longer needed.\n\nAttributes:\n- PORT: [int] - The port number on which the server will listen for incoming connections (default: 8082).\n\nMethods:\n- start(): [void] - Initializes and starts the Netty TCP server. It sets up the server configuration, binds to the specified port, and keeps the server running until it is shutdown. This method throws Exception if any error occurs during server startup or operation.\n  - Input: None\n  - Output: None (but may throw Exception)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic final class JacksonServer {\n\n    static final int PORT = 8082;\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .option(ChannelOption.SO_BACKLOG, 100)\n             .childOption(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new JacksonServerInitializer());\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.util.CharsetUtil;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class JacksonServer {\n    private static final int PORT = 8082;\n    private static final Logger logger = Logger.getLogger(JacksonServer.class.getName());\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new ServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            logger.info(\"Server started on port \" + PORT);\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class ServerHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            logger.info(\"Client connected: \" + ctx.channel().remoteAddress());\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ByteBuf in = (ByteBuf) msg;\n            try {\n                logger.info(\"Received: \" + in.toString(CharsetUtil.UTF_8));\n                ctx.writeAndFlush(msg);\n            } finally {\n                in.release();\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            logger.log(Level.SEVERE, \"Exception occurred\", cause);\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 173,
    "Instruction": "Task Description: Implement a TCP server using Java Netty framework that echoes back any received messages to the client. The server should be configurable to run on any specified port and should properly handle resource cleanup during shutdown.\n\nClass Description: EchoServer is a Netty-based TCP server implementation that listens for incoming connections, processes received messages by echoing them back, and manages server lifecycle including startup and graceful shutdown.\n\nAttributes:\n- DEFAULT_PORT: int - The default port number (7) to use when no port is specified\n- bossGroup: EventLoopGroup - The parent event loop group that accepts incoming connections\n- workerGroup: EventLoopGroup - The child event loop group that handles the traffic of accepted connections\n- bootstrap: ServerBootstrap - The server bootstrap instance used to configure and start the server\n\nMethods:\n- EchoServer() -> None - Constructor that initializes the event loop groups and server bootstrap\n- start(int port) -> void - Starts the server on the specified port, configures channel options and handlers, and binds to the port\n  Input: port (int) - The port number to bind the server to\n- stop() -> void - Shuts down the event loop groups gracefully to release all resources\n- main(String[] args) -> void - Entry point that creates and starts the server instance\n  Input: args (String[]) - Command line arguments (optional port number)\n  Output: None (runs indefinitely until terminated)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class EchoServer {\n\n    public static int DEFAULT_PORT = 7;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public EchoServer() {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws InterruptedException {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new EchoServerChannelInitializer())\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"EchoServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            stop();\n        }\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = args.length > 0 ? Integer.parseInt(args[0]) : DEFAULT_PORT;\n        EchoServer server = new EchoServer();\n        server.start(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class EchoServer {\n    public static final int DEFAULT_PORT = 7;\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final ServerBootstrap bootstrap;\n\n    public EchoServer() {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class);\n    }\n\n    public void start(int port) throws Exception {\n        bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(new StringDecoder(), new StringEncoder(), new EchoServerHandler());\n            }\n        });\n        ChannelFuture future = bootstrap.bind(port).sync();\n        System.out.println(\"Server started on port \" + port);\n        future.channel().closeFuture().sync();\n    }\n\n    public void stop() throws Exception {\n        bossGroup.shutdownGracefully().sync();\n        workerGroup.shutdownGracefully().sync();\n    }\n\n    public static void main(String[] args) {\n        int port = DEFAULT_PORT;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        EchoServer server = new EchoServer();\n        try {\n            server.start(port);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                server.stop();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class EchoServerHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ctx.write(msg);\n            ctx.flush();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 174,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and manage communication protocols.\n\nClass Description: RemoteServer is a TCP server implementation using Netty framework that listens on a specified port, manages client connections, and maintains a list of communication protocols. It extends BaseServer for basic server functionality.\n\nAttributes:\n- port: int - The port number on which the server listens for incoming connections\n- protocolList: List<Protocol> - A list to maintain active communication protocols between clients and browsers\n\nMethods:\n- RemoteServer(int port) -> [Constructor] - Initializes the server with the specified port and creates an empty protocol list\n- listen(int port) -> void - Sets the server's listening port\n- start() -> void - Starts the Netty server, configures the server bootstrap with worker groups, channel type, and handlers, then binds to the specified port\n- findProtocolByBrowser(ChannelHandlerContext ctx) -> Protocol - Finds and returns a protocol associated with a browser's channel context\n- findProtocolByKey(String key) -> Protocol - Finds and returns a protocol associated with a specific key\n- findProtocolByClient(ChannelHandlerContext ctx) -> Protocol - Finds and returns a protocol associated with a client's channel context",
    "Canonical_solution": "import com.yeetor.androidcontrol.*;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class RemoteServer extends BaseServer {\n    private int port = -1;\n    List<Protocol> protocolList;\n\n    public RemoteServer(int port) {\n        listen(port);\n        protocolList = new LinkedList<Protocol>();\n    }\n\n    public void listen(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childHandler(new ChildChannel(new RemoteServerWebsocketEventImp()));\n\n        ChannelFuture future = bootstrap.bind(port).sync();\n        future.channel().closeFuture().sync();\n    }\n\n    private Protocol findProtocolByBrowser(ChannelHandlerContext ctx) {\n        for (Protocol protocol : protocolList) {\n            if (protocol.getBroswerSocket() != null && protocol.getBroswerSocket() == ctx) {\n                return protocol;\n            }\n        }\n        return null;\n    }\n\n    private Protocol findProtocolByKey(String key) {\n        for (Protocol protocol : protocolList) {\n            if (protocol.getBroswerSocket() != null && StringUtils.equals(key, protocol.getKey())) {\n                return protocol;\n            }\n        }\n        return null;\n    }\n\n    private Protocol findProtocolByClient(ChannelHandlerContext ctx) {\n        for (Protocol protocol : protocolList) {\n            if (protocol.getClientSocket() != null && protocol.getClientSocket() == ctx) {\n                return protocol;\n            }\n        }\n        return null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RemoteServer extends BaseServer {\n    private int port;\n    private List<Protocol> protocolList;\n\n    public RemoteServer(int port) {\n        this.port = port;\n        this.protocolList = new ArrayList<>();\n    }\n\n    public void listen(int port) {\n        this.port = port;\n    }\n\n    public void start() {\n        NioEventLoopGroup bossGroup = new NioEventLoopGroup();\n        NioEventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline pipeline = ch.pipeline();\n                     pipeline.addLast(new YourHandler(protocolList));\n                 }\n             });\n            b.bind(port).sync().channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public Protocol findProtocolByBrowser(ChannelHandlerContext ctx) {\n        for (Protocol protocol : protocolList) {\n            if (protocol.getBrowserContext().equals(ctx)) {\n                return protocol;\n            }\n        }\n        return null;\n    }\n\n    public Protocol findProtocolByKey(String key) {\n        for (Protocol protocol : protocolList) {\n            if (protocol.getKey().equals(key)) {\n                return protocol;\n            }\n        }\n        return null;\n    }\n\n    public Protocol findProtocolByClient(ChannelHandlerContext ctx) {\n        for (Protocol protocol : protocolList) {\n            if (protocol.getClientContext().equals(ctx)) {\n                return protocol;\n            }\n        }\n        return null;\n    }\n}\n```"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Implement a Netty-based JAX-RS server class that handles HTTP requests and integrates with RESTEasy framework for RESTful service deployment.\n\nClass Description: SofaNettyJaxrsServer is a Netty-based embedded JAX-RS server implementation that provides HTTP communication capabilities and integrates with RESTEasy framework for RESTful service deployment. It supports both standard NIO and Epoll transport, SSL/TLS encryption, and customizable channel options.\n\nAttributes:\n- serverConfig: [ServerConfig] - Configuration object containing server settings\n- bootstrap: [ServerBootstrap] - Netty server bootstrap instance\n- hostname: [String] - Hostname to bind the server to\n- port: [int] - Port number to listen on\n- deployment: [ResteasyDeployment] - RESTEasy deployment configuration\n- root: [String] - Root resource path\n- domain: [SecurityDomain] - Security domain for authentication\n- eventLoopGroup: [EventLoopGroup] - Netty event loop group for I/O operations\n- eventExecutor: [EventLoopGroup] - Netty event executor for business logic\n- ioWorkerCount: [int] - Number of I/O worker threads\n- executorThreadCount: [int] - Number of executor threads\n- sslContext: [SSLContext] - SSL context for secure connections\n- maxRequestSize: [int] - Maximum allowed HTTP request size\n- backlog: [int] - Connection backlog size\n- channelHandlers: [List<ChannelHandler>] - Additional channel handlers\n- channelOptions: [Map<ChannelOption, Object>] - Channel options\n- childChannelOptions: [Map<ChannelOption, Object>] - Child channel options\n- httpChannelHandlers: [List<ChannelHandler>] - Additional HTTP channel handlers\n\nMethods:\n- start(): [void] - Starts the Netty server and binds it to the configured host and port\n- stop(): [void] - Stops the server and releases all resources\n- createChannelInitializer(): [ChannelInitializer<SocketChannel>] - Creates a channel initializer for new connections\n- setupHandlers(SocketChannel ch, RequestDispatcher dispatcher): [void] - Sets up the channel pipeline with required handlers\n- createRequestDispatcher(): [RequestDispatcher] - Creates a RESTEasy request dispatcher",
    "Canonical_solution": "import com.alipay.sofa.rpc.common.SystemInfo;\nimport com.alipay.sofa.rpc.common.struct.NamedThreadFactory;\nimport com.alipay.sofa.rpc.common.utils.StringUtils;\nimport com.alipay.sofa.rpc.config.ServerConfig;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.util.concurrent.EventExecutor;\nimport org.jboss.resteasy.core.SynchronousDispatcher;\nimport org.jboss.resteasy.plugins.server.embedded.EmbeddedJaxrsServer;\nimport org.jboss.resteasy.plugins.server.embedded.SecurityDomain;\nimport org.jboss.resteasy.plugins.server.netty.RequestDispatcher;\nimport org.jboss.resteasy.plugins.server.netty.RestEasyHttpRequestDecoder;\nimport org.jboss.resteasy.plugins.server.netty.RestEasyHttpResponseEncoder;\nimport org.jboss.resteasy.spi.ResteasyDeployment;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport java.net.InetSocketAddress;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\npublic class SofaNettyJaxrsServer implements EmbeddedJaxrsServer {\n\n    private final ServerConfig         serverConfig;\n    protected ServerBootstrap          bootstrap;\n    protected String                   hostname;\n    protected int                      port;\n    protected ResteasyDeployment       deployment;\n    protected String                   root;\n    protected SecurityDomain           domain;\n    private EventLoopGroup             eventLoopGroup;\n    private EventLoopGroup             eventExecutor;\n    private int                        ioWorkerCount;\n    private int                        executorThreadCount;\n    private SSLContext                 sslContext;\n    private int                        maxRequestSize;\n    private int                        backlog;\n    private List<ChannelHandler>       channelHandlers;\n    private Map<ChannelOption, Object> channelOptions;\n    private Map<ChannelOption, Object> childChannelOptions;\n    private List<ChannelHandler>       httpChannelHandlers;\n\n    public SofaNettyJaxrsServer(ServerConfig serverConfig) {\n        if (serverConfig == null) {\n            throw new IllegalArgumentException(\"server config is null\");\n        }\n        this.serverConfig = serverConfig;\n        this.deployment = new ResteasyDeployment();\n        this.root = \"\";\n        this.ioWorkerCount = SystemInfo.getCpuCores() * 2;\n        this.executorThreadCount = 16;\n        this.maxRequestSize = 1024 * 1024 * 10;\n        this.backlog = 128;\n        this.channelHandlers = Collections.emptyList();\n        this.channelOptions = Collections.emptyMap();\n        this.childChannelOptions = Collections.emptyMap();\n        this.httpChannelHandlers = Collections.emptyList();\n    }\n\n    @Override\n    public void start() {\n        boolean daemon = serverConfig.isDaemon();\n        boolean isEpoll = serverConfig.isEpoll();\n        NamedThreadFactory ioFactory = new NamedThreadFactory(\"SEV-REST-IO-\" + port, daemon);\n        NamedThreadFactory bizFactory = new NamedThreadFactory(\"SEV-REST-BIZ-\" + port, daemon);\n        eventLoopGroup = isEpoll ? new EpollEventLoopGroup(ioWorkerCount, ioFactory)\n            : new NioEventLoopGroup(ioWorkerCount, ioFactory);\n        eventExecutor = isEpoll ? new EpollEventLoopGroup(executorThreadCount, bizFactory)\n            : new NioEventLoopGroup(executorThreadCount, bizFactory);\n\n        bootstrap = new ServerBootstrap()\n            .group(eventLoopGroup)\n            .channel(isEpoll ? EpollServerSocketChannel.class : NioServerSocketChannel.class)\n            .childHandler(createChannelInitializer())\n            .option(ChannelOption.SO_BACKLOG, backlog)\n            .childOption(ChannelOption.SO_KEEPALIVE, serverConfig.isKeepAlive());\n\n        for (Map.Entry<ChannelOption, Object> entry : channelOptions.entrySet()) {\n            bootstrap.option(entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<ChannelOption, Object> entry : childChannelOptions.entrySet()) {\n            bootstrap.childOption(entry.getKey(), entry.getValue());\n        }\n\n        final InetSocketAddress socketAddress;\n        if (null == hostname || hostname.isEmpty()) {\n            socketAddress = new InetSocketAddress(port);\n        } else {\n            socketAddress = new InetSocketAddress(hostname, port);\n        }\n\n        bootstrap.bind(socketAddress).syncUninterruptibly();\n    }\n\n    private ChannelInitializer<SocketChannel> createChannelInitializer() {\n        final RequestDispatcher dispatcher = createRequestDispatcher();\n        if (sslContext == null) {\n            return new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    setupHandlers(ch, dispatcher);\n                }\n            };\n        } else {\n            final SSLEngine engine = sslContext.createSSLEngine();\n            engine.setUseClientMode(false);\n            return new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addFirst(new SslHandler(engine));\n                    setupHandlers(ch, dispatcher);\n                }\n            };\n        }\n    }\n\n    private void setupHandlers(SocketChannel ch, RequestDispatcher dispatcher) {\n        ChannelPipeline channelPipeline = ch.pipeline();\n        channelPipeline.addLast(channelHandlers.toArray(new ChannelHandler[channelHandlers.size()]));\n        channelPipeline.addLast(new HttpRequestDecoder());\n        channelPipeline.addLast(new HttpObjectAggregator(maxRequestSize));\n        channelPipeline.addLast(new HttpResponseEncoder());\n        channelPipeline.addLast(httpChannelHandlers.toArray(new ChannelHandler[httpChannelHandlers.size()]));\n        channelPipeline.addLast(new RestEasyHttpRequestDecoder(dispatcher.getDispatcher(), root));\n        channelPipeline.addLast(new RestEasyHttpResponseEncoder());\n        channelPipeline.addLast(eventExecutor, new SofaRestRequestHandler(dispatcher));\n    }\n\n    protected RequestDispatcher createRequestDispatcher() {\n        return new RequestDispatcher((SynchronousDispatcher) deployment.getDispatcher(),\n            deployment.getProviderFactory(), domain);\n    }\n\n    @Override\n    public void stop() {\n        try {\n            eventLoopGroup.shutdownGracefully().sync();\n            eventExecutor.shutdownGracefully().sync();\n        } catch (Exception ignore) {\n        }\n        bootstrap = null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport org.jboss.resteasy.core.ResteasyDeployment;\nimport org.jboss.resteasy.core.RequestDispatcher;\nimport org.jboss.resteasy.core.ResourceMethodInvoker;\nimport org.jboss.resteasy.spi.ResteasyProviderFactory;\n\nimport javax.net.ssl.SSLContext;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\npublic class SofaNettyJaxrsServer {\n    private ServerConfig serverConfig;\n    private ServerBootstrap bootstrap;\n    private String hostname;\n    private int port;\n    private ResteasyDeployment deployment;\n    private String root;\n    private SecurityDomain domain;\n    private EventLoopGroup eventLoopGroup;\n    private EventLoopGroup eventExecutor;\n    private int ioWorkerCount;\n    private int executorThreadCount;\n    private SSLContext sslContext;\n    private int maxRequestSize;\n    private int backlog;\n    private List<ChannelHandler> channelHandlers;\n    private Map<ChannelOption, Object> channelOptions;\n    private Map<ChannelOption, Object> childChannelOptions;\n    private List<ChannelHandler> httpChannelHandlers;\n\n    public void start() throws Exception {\n        eventLoopGroup = new NioEventLoopGroup(ioWorkerCount);\n        eventExecutor = new NioEventLoopGroup(executorThreadCount);\n        bootstrap = new ServerBootstrap();\n        bootstrap.group(eventLoopGroup, eventExecutor)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, backlog)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n        if (sslContext != null) {\n            SslContext sslCtx = SslContextBuilder.forServer(sslContext).build();\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) {\n                    ChannelPipeline pipeline = ch.pipeline();\n                    pipeline.addLast(sslCtx.newHandler(ch.alloc()));\n                    pipeline.addLast(createChannelInitializer().initChannel(ch));\n                }\n            });\n        } else {\n            bootstrap.handler(createChannelInitializer());\n        }\n\n        Channel channel = bootstrap.bind(hostname, port).sync().channel();\n        channel.closeFuture().sync();\n    }\n\n    public void stop() {\n        if (eventLoopGroup != null) {\n            eventLoopGroup.shutdownGracefully();\n        }\n        if (eventExecutor != null) {\n            eventExecutor.shutdownGracefully();\n        }\n    }\n\n    private ChannelInitializer<SocketChannel> createChannelInitializer() {\n        return new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) {\n                ChannelPipeline pipeline = ch.pipeline();\n                pipeline.addLast(new HttpServerCodec());\n                setupHandlers(ch, createRequestDispatcher());\n                if (httpChannelHandlers != null) {\n                    for (ChannelHandler handler : httpChannelHandlers) {\n                        pipeline.addLast(handler);\n                    }\n                }\n            }\n        };\n    }\n\n    private void setupHandlers(SocketChannel ch, RequestDispatcher dispatcher) {\n        // Custom handler to process requests with RESTEasy\n        ch.pipeline().addLast(new SimpleChannelInboundHandler<FullHttpRequest>() {\n            @Override\n            protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) {\n                // Process request using RESTEasy dispatcher\n                try {\n                    dispatcher.service(request.getMethod().name(), request.uri(), request.headers(), request.content().toString(CharsetUtil.UTF_8));\n                    // Send response back\n                } catch (Exception e) {\n                    // Handle exception\n                }\n            }\n        });\n    }\n\n    private RequestDispatcher createRequestDispatcher() {\n        ResteasyDeployment deployment = new ResteasyDeployment();\n        deployment.setResourcePackages(root);\n        deployment.setSecurityDomain(domain);\n        deployment.start();\n        return new RequestDispatcher(deployment, new ResteasyProviderFactory());\n    }\n}\n```"
  },
  {
    "Task_id": 177,
    "Instruction": "Task Description: Create a Java class that implements an embedded HTTP server using Netty framework, capable of handling HTTP requests and routing them to appropriate controller methods based on URI paths.\n\nClass Description: EmbedHttpServer is a Netty-based HTTP server implementation that provides request routing functionality to various controller methods. It supports adding custom controllers with RequestMapping annotations and handles both successful responses and error cases.\n\nAttributes:\n- port: int - The port number on which the server will listen\n- defaultController: DefaultController - The default controller to handle unmatched requests\n- controllerList: List<Object> - List of registered controller objects that handle specific routes\n- LOGGER: Logger - Logger instance for error and debug logging\n\nMethods:\n- EmbedHttpServer(int port) -> EmbedHttpServer - Constructor that initializes the server with specified port\n- invoke(String uri, Channel channel, FullHttpRequest request) -> FullHttpResponse - Routes the incoming request to the appropriate controller method based on URI matching\n- fixUri(String uri) -> String - Normalizes URI paths by ensuring proper slash formatting\n- start(GenericFutureListener startedListener) -> void - Starts the Netty server with specified configuration and event listeners\n- addController(Object obj) -> EmbedHttpServer - Registers a controller object to handle specific routes, supports method chaining",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpHeaderValues;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.util.concurrent.GenericFutureListener;\nimport java.lang.reflect.Method;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.pdown.gui.http.controller.DefaultController;\nimport org.pdown.gui.http.util.HttpHandlerUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\npublic class EmbedHttpServer {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(EmbedHttpServer.class);\n\n  private int port;\n  private DefaultController defaultController;\n  private List<Object> controllerList;\n\n  public EmbedHttpServer(int port) {\n    this.port = port;\n    this.defaultController = new DefaultController();\n    this.controllerList = new ArrayList<>();\n  }\n\n  public FullHttpResponse invoke(String uri, Channel channel, FullHttpRequest request) throws Exception {\n    if (controllerList != null) {\n      for (Object obj : controllerList) {\n        Class<?> clazz = obj.getClass();\n        RequestMapping mapping = clazz.getAnnotation(RequestMapping.class);\n        if (mapping != null) {\n          String mappingUri = fixUri(mapping.value()[0]);\n          for (Method actionMethod : clazz.getMethods()) {\n            RequestMapping subMapping = actionMethod.getAnnotation(RequestMapping.class);\n            if (subMapping != null) {\n              String subMappingUri = fixUri(subMapping.value()[0]);\n              if (uri.equalsIgnoreCase(mappingUri + subMappingUri)) {\n                return (FullHttpResponse) actionMethod.invoke(obj, channel, request);\n              }\n            }\n          }\n        }\n      }\n    }\n    return defaultController.handle(channel, request);\n  }\n\n  private String fixUri(String uri) {\n    StringBuilder builder = new StringBuilder(uri);\n    if (builder.indexOf(\"/\") != 0) {\n      builder.insert(0, \"/\");\n    }\n    if (builder.lastIndexOf(\"/\") == builder.length() - 1) {\n      builder.delete(builder.length() - 1, builder.length());\n    }\n    return builder.toString();\n  }\n\n  public void start(GenericFutureListener startedListener) {\n    NioEventLoopGroup bossGroup = new NioEventLoopGroup(2);\n    NioEventLoopGroup workGroup = new NioEventLoopGroup(2);\n    try {\n      ServerBootstrap bootstrap = new ServerBootstrap().group(bossGroup, workGroup)\n          .channel(NioServerSocketChannel.class)\n          .childHandler(new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel ch) throws Exception {\n              ch.pipeline().addLast(\"httpCodec\", new HttpServerCodec());\n              ch.pipeline().addLast(new HttpObjectAggregator(4194304));\n              ch.pipeline()\n                  .addLast(\"serverHandle\", new SimpleChannelInboundHandler<FullHttpRequest>() {\n\n                    @Override\n                    protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) throws Exception {\n                      URI uri = new URI(request.uri());\n                      FullHttpResponse httpResponse = invoke(uri.getPath(), ctx.channel(), request);\n                      if (httpResponse != null) {\n                        httpResponse.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);\n                        httpResponse.headers().set(HttpHeaderNames.CONTENT_LENGTH, httpResponse.content().readableBytes());\n                        ch.writeAndFlush(httpResponse);\n                      }\n                    }\n\n                    @Override\n                    public void channelUnregistered(ChannelHandlerContext ctx) {\n                      ctx.channel().close();\n                    }\n\n                    @Override\n                    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n                      LOGGER.error(\"native request error\", cause.getCause() == null ? cause : cause.getCause());\n                      Map<String, Object> data = new HashMap<>();\n                      data.put(\"error\", cause.getCause().toString());\n                      FullHttpResponse httpResponse = HttpHandlerUtil.buildJson(data);\n                      httpResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);\n                      ctx.channel().writeAndFlush(httpResponse);\n                    }\n                  });\n            }\n          });\n      ChannelFuture f = bootstrap.bind(\"127.0.0.1\", port).sync();\n      if (startedListener != null) {\n        f.addListener(startedListener);\n      }\n      f.channel().closeFuture().sync();\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      bossGroup.shutdownGracefully();\n      workGroup.shutdownGracefully();\n    }\n  }\n\n  public EmbedHttpServer addController(Object obj) {\n    this.controllerList.add(obj);\n    return this;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.util.CharsetUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.lang.annotation.*;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\n@interface RequestMapping {\n    String[] value();\n}\n\nclass DefaultController {\n    public FullHttpResponse handleRequest(String uri, Channel channel, FullHttpRequest request) {\n        return new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.NOT_FOUND);\n    }\n}\n\npublic class EmbedHttpServer {\n    private final int port;\n    private final DefaultController defaultController;\n    private final List<Object> controllerList;\n    private final Logger LOGGER;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n        this.defaultController = new DefaultController();\n        this.controllerList = new ArrayList<>();\n        this.LOGGER = LoggerFactory.getLogger(EmbedHttpServer.class);\n    }\n\n    public FullHttpResponse invoke(String uri, Channel channel, FullHttpRequest request) {\n        String normalizedUri = fixUri(uri);\n        for (Object controller : controllerList) {\n            for (Method method : controller.getClass().getDeclaredMethods()) {\n                RequestMapping annotation = method.getAnnotation(RequestMapping.class);\n                if (annotation != null) {\n                    for (String path : annotation.value()) {\n                        if (path.equals(normalizedUri)) {\n                            try {\n                                method.setAccessible(true);\n                                return (FullHttpResponse) method.invoke(controller, normalizedUri, channel, request);\n                            } catch (Exception e) {\n                                LOGGER.error(\"Error invoking method\", e);\n                                return new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        try {\n            Method method = defaultController.getClass().getMethod(\"handleRequest\", String.class, Channel.class, FullHttpRequest.class);\n            method.setAccessible(true);\n            return (FullHttpResponse) method.invoke(defaultController, normalizedUri, channel, request);\n        } catch (Exception e) {\n            LOGGER.error(\"Error invoking default controller\", e);\n            return new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n        }\n    }\n\n    private String fixUri(String uri) {\n        if (uri == null || uri.isEmpty()) {\n            return \"/\";\n        }\n        uri = uri.replaceAll(\"/+\", \"/\");\n        if (uri.length() > 1 && uri.endsWith(\"/\")) {\n            uri = uri.substring(0, uri.length() - 1);\n        }\n        return uri;\n    }\n\n    public void start(GenericFutureListener<ChannelFuture> startedListener) {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(\n                         new HttpServerCodec(),\n                         new HttpObjectAggregator(65536),\n                         new HttpServerHandler(EmbedHttpServer.this)\n                     );\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).addListener(startedListener);\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            LOGGER.error(\"Server start interrupted\", e);\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public EmbedHttpServer addController(Object obj) {\n        controllerList.add(obj);\n        return this;\n    }\n\n    private static class HttpServerHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        private final EmbedHttpServer server;\n\n        public HttpServerHandler(EmbedHttpServer server) {\n            this.server = server;\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) {\n            String uri = request.uri();\n            String normalizedUri = server.fixUri(uri);\n            FullHttpResponse response = server.invoke(normalizedUri, ctx.channel(), request);\n            ctx.writeAndFlush(response);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework with line-based frame decoding capability. The server should handle incoming connections, process line-delimited messages, and manage resources properly during startup and shutdown.\n\nClass Description: MyLineBasedFrameDecoderServer is a Netty-based TCP server that uses line-based frame decoding for handling text protocols. It manages server lifecycle including startup, connection handling, and graceful shutdown.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and accepts them\n- workerGroup: [NioEventLoopGroup] - Handles I/O operations for accepted connections\n- bootstrap: [ServerBootstrap] - Netty server configuration and management object\n- DEFAULT_PORT: [int] - Default port number for the server (8023)\n\nMethods:\n- start([int port]) -> [void] - Starts the server on specified port, binds handlers, and begins accepting connections. Throws Exception if startup fails.\n- shutdown() -> [void] - Gracefully shuts down the server by releasing all thread resources\n- main([String[] args]) -> [void] - Entry point that creates and starts the server instance on default port",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyLineBasedFrameDecoderServer {\n\n    public static int DEFAULT_PORT = 8023;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public MyLineBasedFrameDecoderServer() {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws Exception {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new MyLineBasedFrameDecoderChannelInitializer())\n                    .option(ChannelOption.SO_BACKLOG, 128)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"MyLineBasedFrameDecoderServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = DEFAULT_PORT;\n        MyLineBasedFrameDecoderServer server = new MyLineBasedFrameDecoderServer();\n        server.start(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.LineBasedFrameDecoder;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\n\npublic class MyLineBasedFrameDecoderServer {\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final ServerBootstrap bootstrap;\n    private static final int DEFAULT_PORT = 8023;\n\n    public MyLineBasedFrameDecoderServer() {\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws Exception {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            ch.pipeline().addLast(new LineBasedFrameDecoder(1024), new StringDecoder(), new StringEncoder(), new MyHandler());\n                        }\n                    });\n\n            ChannelFuture future = bootstrap.bind(port).sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            // Cleanup is handled by shutdown()\n        }\n    }\n\n    public void shutdown() {\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) {\n        MyLineBasedFrameDecoderServer server = new MyLineBasedFrameDecoderServer();\n        try {\n            server.start(DEFAULT_PORT);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static class MyHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            String line = (String) msg;\n            System.out.println(\"Received: \" + line);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Implement an asynchronous file handling class in Java using NIO's AsynchronousFileChannel for non-blocking file operations, supporting both reading and writing with various file opening options.\n\nClass Description: AsyncFileImpl is an implementation of AsyncFile interface that provides asynchronous file operations using Java NIO. It handles file reading, writing, and closing operations in a non-blocking manner, with support for various file opening modes and permissions.\n\nAttributes:\n- vertx: VertxInternal - The Vert.x instance for asynchronous operations\n- ch: AsynchronousFileChannel - The NIO asynchronous file channel\n- context: ContextInternal - The Vert.x context for operation execution\n- closed: boolean - Flag indicating if the file is closed\n- writePos: long - Current write position in the file\n- readBufferSize: int - Size of the read buffer (default 8192)\n- handler: Handler<Buffer> - Handler for read operations\n- endHandler: Handler<Void> - Handler for end of file operations\n- readPos: long - Current read position in the file\n- readLength: long - Maximum length to read (default Long.MAX_VALUE)\n\nMethods:\n- AsyncFileImpl(VertxInternal vertx, String path, OpenOptions options, ContextInternal context) -> [Constructor] - Initializes the file channel with specified path and options\n- close() -> Future<Void> - Closes the file channel and releases resources\n- read(Buffer buffer, int offset, long position, int length) -> Future<Buffer> - Reads data from file into buffer at specified position\n- write(Buffer buffer, long position) -> Future<Void> - Writes buffer content to file at specified position\n- doWrite(Buffer buffer, long position, Handler<AsyncResult<Void>> handler) -> void - Internal method for write operation\n- doWrite(ByteBuffer[] buffers, long position, Handler<AsyncResult<Void>> handler) -> void - Internal method for writing multiple buffers\n- doWrite(ByteBuffer buff, long position, long toWrite, Handler<AsyncResult<Void>> handler) -> void - Internal method for writing buffer content\n- writeInternal(ByteBuffer buff, long position, Handler<AsyncResult<Void>> handler) -> void - Core write implementation using CompletionHandler\n- doRead(Buffer writeBuff, int offset, ByteBuffer buff, long position, Promise<Buffer> promise) -> void - Internal method for read operation\n- check() -> void - Verifies if file is not closed\n- closeInternal(Promise<Void> handler) -> void - Internal method for closing the file channel",
    "Canonical_solution": "import io.vertx.core.AsyncResult;\nimport io.vertx.core.Future;\nimport io.vertx.core.Handler;\nimport io.vertx.core.Promise;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.internal.buffer.BufferInternal;\nimport io.vertx.core.file.AsyncFile;\nimport io.vertx.core.file.FileSystemException;\nimport io.vertx.core.file.OpenOptions;\nimport io.vertx.core.impl.Arguments;\nimport io.vertx.core.internal.ContextInternal;\nimport io.vertx.core.internal.VertxInternal;\nimport io.vertx.core.internal.logging.Logger;\nimport io.vertx.core.internal.logging.LoggerFactory;\nimport io.vertx.core.streams.impl.InboundBuffer;\n\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousFileChannel;\nimport java.nio.channels.CompletionHandler;\nimport java.nio.file.OpenOption;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.nio.file.attribute.FileAttribute;\nimport java.nio.file.attribute.PosixFilePermissions;\nimport java.util.HashSet;\nimport java.util.Objects;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class AsyncFileImpl implements AsyncFile {\n\n    private static final Logger log = LoggerFactory.getLogger(AsyncFile.class);\n\n    private final VertxInternal vertx;\n    private final AsynchronousFileChannel ch;\n    private final ContextInternal context;\n    private boolean closed;\n    private long writePos;\n    private int readBufferSize = 8192;\n    private Handler<Buffer> handler;\n    private Handler<Void> endHandler;\n    private long readPos;\n    private long readLength = Long.MAX_VALUE;\n\n    public AsyncFileImpl(VertxInternal vertx, String path, OpenOptions options, ContextInternal context) {\n        this.vertx = vertx;\n        Path file = Paths.get(path);\n        HashSet<OpenOption> opts = new HashSet<>();\n        if (options.isRead()) opts.add(StandardOpenOption.READ);\n        if (options.isWrite()) opts.add(StandardOpenOption.WRITE);\n        if (options.isCreate()) opts.add(StandardOpenOption.CREATE);\n        if (options.isCreateNew()) opts.add(StandardOpenOption.CREATE_NEW);\n        if (options.isSync()) opts.add(StandardOpenOption.SYNC);\n        if (options.isDsync()) opts.add(StandardOpenOption.DSYNC);\n        if (options.isDeleteOnClose()) opts.add(StandardOpenOption.DELETE_ON_CLOSE);\n        if (options.isSparse()) opts.add(StandardOpenOption.SPARSE);\n        if (options.isTruncateExisting()) opts.add(StandardOpenOption.TRUNCATE_EXISTING);\n        try {\n            if (options.getPerms() != null) {\n                FileAttribute<?> attrs = PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString(options.getPerms()));\n                ch = AsynchronousFileChannel.open(file, opts, vertx.getWorkerPool().executor(), attrs);\n            } else {\n                ch = AsynchronousFileChannel.open(file, opts, vertx.getWorkerPool().executor());\n            }\n            if (options.isAppend()) writePos = ch.size();\n        } catch (IOException e) {\n            throw new FileSystemException(e);\n        }\n        this.context = context;\n    }\n\n    @Override\n    public Future<Void> close() {\n        Promise<Void> promise = context.promise();\n        closeInternal(promise);\n        return promise.future();\n    }\n\n    @Override\n    public Future<Buffer> read(Buffer buffer, int offset, long position, int length) {\n        Promise<Buffer> promise = context.promise();\n        Objects.requireNonNull(buffer, \"buffer\");\n        Arguments.require(offset >= 0, \"offset must be >= 0\");\n        Arguments.require(position >= 0, \"position must be >= 0\");\n        Arguments.require(length >= 0, \"length must be >= 0\");\n        check();\n        ByteBuffer bb = ByteBuffer.allocate(length);\n        doRead(buffer, offset, bb, position, promise);\n        return promise.future();\n    }\n\n    @Override\n    public Future<Void> write(Buffer buffer, long position) {\n        Promise<Void> promise = context.promise();\n        doWrite(buffer, position, promise::handle);\n        return promise.future();\n    }\n\n    private void doWrite(Buffer buffer, long position, Handler<AsyncResult<Void>> handler) {\n        Objects.requireNonNull(buffer, \"buffer\");\n        Arguments.require(position >= 0, \"position must be >= 0\");\n        check();\n        ByteBuf buf = ((BufferInternal)buffer).getByteBuf();\n        if (buf.nioBufferCount() > 1) {\n            doWrite(buf.nioBuffers(), position, handler);\n        } else {\n            ByteBuffer bb = buf.nioBuffer();\n            doWrite(bb, position, bb.limit(), handler);\n        }\n    }\n\n    private void doWrite(ByteBuffer[] buffers, long position, Handler<AsyncResult<Void>> handler) {\n        AtomicInteger cnt = new AtomicInteger();\n        AtomicBoolean sentFailure = new AtomicBoolean();\n        for (ByteBuffer b: buffers) {\n            int limit = b.limit();\n            doWrite(b, position, limit, ar -> {\n                if (ar.succeeded()) {\n                    if (cnt.incrementAndGet() == buffers.length) {\n                        handler.handle(ar);\n                    }\n                } else {\n                    if (sentFailure.compareAndSet(false, true)) {\n                        handler.handle(ar);\n                    }\n                }\n            });\n            position += limit;\n        }\n    }\n\n    private void doWrite(ByteBuffer buff, long position, long toWrite, Handler<AsyncResult<Void>> handler) {\n        if (toWrite > 0) {\n            writeInternal(buff, position, handler);\n        } else {\n            handler.handle(Future.succeededFuture());\n        }\n    }\n\n    private void writeInternal(ByteBuffer buff, long position, Handler<AsyncResult<Void>> handler) {\n        ch.write(buff, position, null, new CompletionHandler<Integer, Object>() {\n            public void completed(Integer bytesWritten, Object attachment) {\n                long pos = position;\n                if (buff.hasRemaining()) {\n                    pos += bytesWritten;\n                    writeInternal(buff, pos, handler);\n                } else {\n                    context.runOnContext((v) -> {\n                        handler.handle(Future.succeededFuture());\n                    });\n                }\n            }\n\n            public void failed(Throwable exc, Object attachment) {\n                context.runOnContext((v) -> {\n                    handler.handle(Future.failedFuture(exc));\n                });\n            }\n        });\n    }\n\n    private void doRead(Buffer writeBuff, int offset, ByteBuffer buff, long position, Promise<Buffer> promise) {\n        ch.read(buff, position, null, new CompletionHandler<Integer, Object>() {\n            long pos = position;\n\n            private void done() {\n                buff.flip();\n                writeBuff.setBytes(offset, buff);\n                buff.compact();\n                promise.complete(writeBuff);\n            }\n\n            public void completed(Integer bytesRead, Object attachment) {\n                if (bytesRead == -1) {\n                    done();\n                } else if (buff.hasRemaining()) {\n                    pos += bytesRead;\n                    doRead(writeBuff, offset, buff, pos, promise);\n                } else {\n                    done();\n                }\n            }\n\n            public void failed(Throwable t, Object attachment) {\n                promise.fail(t);\n            }\n        });\n    }\n\n    private void check() {\n        if (closed) {\n            throw new IllegalStateException(\"File handle is closed\");\n        }\n    }\n\n    private void closeInternal(Promise<Void> handler) {\n        check();\n        closed = true;\n        context.<Void>executeBlockingInternal(() -> {\n            ch.close();\n            return null;\n        }).onComplete(handler);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport io.vertx.core.ContextInternal;\nimport io.vertx.core.VertxInternal;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.impl.Promise;\nimport io.vertx.core.impl.logging.Logger;\nimport io.vertx.core.impl.logging.LoggerFactory;\n\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousFileChannel;\nimport java.nio.channels.CompletionHandler;\nimport java.nio.file.OpenOption;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class AsyncFileImpl implements AsyncFile {\n    private static final Logger log = LoggerFactory.getLogger(AsyncFileImpl.class);\n    private final VertxInternal vertx;\n    private final AsynchronousFileChannel ch;\n    private final ContextInternal context;\n    private boolean closed;\n    private long writePos;\n    private int readBufferSize = 8192;\n    private Handler<Buffer> handler;\n    private Handler<Void> endHandler;\n    private long readPos;\n    private long readLength = Long.MAX_VALUE;\n\n    public AsyncFileImpl(VertxInternal vertx, String path, OpenOptions options, ContextInternal context) {\n        this.vertx = vertx;\n        this.context = context;\n        this.closed = false;\n        Set<OpenOption> openOptions = new HashSet<>();\n        if (options.read()) {\n            openOptions.add(StandardOpenOption.READ);\n        }\n        if (options.write()) {\n            openOptions.add(StandardOpenOption.WRITE);\n        }\n        if (options.create()) {\n            openOptions.add(StandardOpenOption.CREATE);\n        }\n        if (options.append()) {\n            openOptions.add(StandardOpenOption.APPEND);\n        }\n        if (options.truncate()) {\n            openOptions.add(StandardOpenOption.TRUNCATE_EXISTING);\n        }\n        try {\n            this.ch = AsynchronousFileChannel.open(Paths.get(path), openOptions);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to open file: \" + path, e);\n        }\n    }\n\n    @Override\n    public Future<Void> close() {\n        Promise<Void> promise = Promise.promise();\n        closeInternal(promise);\n        return promise.future();\n    }\n\n    private void closeInternal(Promise<Void> handler) {\n        if (closed) {\n            handler.complete();\n            return;\n        }\n        try {\n            ch.close();\n        } catch (IOException e) {\n            handler.fail(e);\n            return;\n        } finally {\n            closed = true;\n        }\n        handler.complete();\n    }\n\n    @Override\n    public Future<Buffer> read(Buffer buffer, int offset, long position, int length) {\n        Promise<Buffer> promise = Promise.promise();\n        check();\n        if (offset + length > buffer.length()) {\n            promise.fail(new IllegalArgumentException(\"Buffer too small\"));\n            return promise.future();\n        }\n        ByteBuffer bb = buffer.getByteBuf().nioBuffer(offset, length);\n        ch.read(bb, position, new CompletionHandler<Integer, ByteBuffer>() {\n            @Override\n            public void completed(Integer result, ByteBuffer attachment) {\n                if (result == -1) {\n                    if (endHandler != null) {\n                        context.executeOnContext(() -> endHandler.handle(null));\n                    }\n                    promise.complete(buffer);\n                } else {\n                    context.executeOnContext(() -> {\n                        if (handler != null) {\n                            handler.handle(buffer);\n                        }\n                    });\n                }\n            }\n\n            @Override\n            public void failed(Throwable exc, ByteBuffer attachment) {\n                context.executeOnContext(() -> promise.fail(exc));\n            }\n        });\n        return promise.future();\n    }\n\n    @Override\n    public Future<Void> write(Buffer buffer, long position) {\n        Promise<Void> promise = Promise.promise();\n        doWrite(buffer, position, promise);\n        return promise.future();\n    }\n\n    private void doWrite(Buffer buffer, long position, Handler<AsyncResult<Void>> handler) {\n        ByteBuffer bb = buffer.getByteBuf().nioBuffer();\n        ch.write(bb, position, new CompletionHandler<Integer, ByteBuffer>() {\n            @Override\n            public void completed(Integer result, ByteBuffer attachment) {\n                context.executeOnContext(() -> handler.handle(Future.succeededFuture()));\n            }\n\n            @Override\n            public void failed(Throwable exc, ByteBuffer attachment) {\n                context.executeOnContext(() -> handler.handle(Future.failedFuture(exc)));\n            }\n        });\n    }\n\n    private void doWrite(ByteBuffer[] buffers, long position, Handler<AsyncResult<Void>> handler) {\n        ch.write(buffers, position, new CompletionHandler<Long, ByteBuffer[]>() {\n            @Override\n            public void completed(Long result, ByteBuffer[] attachment) {\n                context.executeOnContext(() -> handler.handle(Future.succeededFuture()));\n            }\n\n            @Override\n            public void failed(Throwable exc, ByteBuffer[] attachment) {\n                context.executeOnContext(() -> handler.handle(Future.failedFuture(exc)));\n            }\n        });\n    }\n\n    private void doWrite(ByteBuffer buff, long position, long toWrite, Handler<AsyncResult<Void>> handler) {\n        ch.write(buff, position, toWrite, new CompletionHandler<Long, ByteBuffer>() {\n            @Override\n            public void completed(Long result, ByteBuffer attachment) {\n                context.executeOnContext(() -> handler.handle(Future.succeededFuture()));\n            }\n\n            @Override\n            public void failed(Throwable exc, ByteBuffer attachment) {\n                context.executeOnContext(() -> handler.handle(Future.failedFuture(exc)));\n            }\n        });\n    }\n\n    private void writeInternal(ByteBuffer buff, long position, Handler<AsyncResult<Void>> handler) {\n        ch.write(buff, position, new CompletionHandler<Integer, ByteBuffer>() {\n            @Override\n            public void completed(Integer result, ByteBuffer attachment) {\n                context.executeOnContext(() -> handler.handle(Future.succeededFuture()));\n            }\n\n            @Override\n            public void failed(Throwable exc, ByteBuffer attachment) {\n                context.executeOnContext(() -> handler.handle(Future.failedFuture(exc)));\n            }\n        });\n    }\n\n    private void doRead(Buffer writeBuff, int offset, ByteBuffer buff, long position, Promise<Buffer> promise) {\n        ch.read(buff, position, new CompletionHandler<Integer, ByteBuffer>() {\n            @Override\n            public void completed(Integer result, ByteBuffer attachment) {\n                if (result == -1) {\n                    if (endHandler != null) {\n                        context.executeOnContext(() -> endHandler.handle(null));\n                    }\n                    promise.complete(writeBuff);\n                } else {\n                    context.executeOnContext(() -> {\n                        if (handler != null) {\n                            handler.handle(writeBuff);\n                        }\n                    });\n                }\n            }\n\n            @Override\n            public void failed(Throwable exc, ByteBuffer attachment) {\n                context.executeOnContext(() -> promise.fail(exc));\n            }\n        });\n    }\n\n    private void check() {\n        if (closed) {\n            throw new IllegalStateException(\"File is closed\");\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 180,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling Telnet connections with optional SSL encryption.\n\nClass Description: The TelnetServer class is a Netty-based TCP server implementation that listens for incoming Telnet connections. It supports optional SSL encryption and uses separate thread groups for connection acceptance and request processing. The server logs connection events and properly manages resources during shutdown.\n\nAttributes:\n- SSL: static final boolean - Flag indicating whether SSL encryption should be enabled (configured via system property)\n- PORT: static final int - The port number the server will bind to (configurable via system property, defaults to 8023 or 8992 for SSL)\n\nMethods:\n- start(): void - Starts the Telnet server, binds to the configured port, and begins accepting connections. Throws Exception if any error occurs during startup.\n  Input: None\n  Output: None (void)\n  Description: Initializes SSL context if enabled, creates event loop groups, configures server bootstrap with channel type and handlers, binds to port, and waits for server shutdown. Ensures proper resource cleanup during shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class TelnetServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8992\" : \"8023\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new TelnetServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\nimport java.io.File;\n\npublic class TelnetServer {\n    public static final boolean SSL = Boolean.getBoolean(\"ssl.enabled\");\n    public static final int PORT = Integer.getInteger(\"port\", SSL ? 8992 : 8023);\n\n    public void start() throws Exception {\n        SslContext sslCtx = null;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forServer(new File(\"server.crt\"), new File(\"server.key\")).build();\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new TelnetHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            System.out.println(\"Telnet server started on port \" + PORT + (SSL ? \" (SSL)\" : \"\"));\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class TelnetHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            System.out.println(\"New connection from \" + ctx.channel().remoteAddress());\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ctx.write(msg);\n            ctx.flush();\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) {\n            System.out.println(\"Connection closed: \" + ctx.channel().remoteAddress());\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Implement a TCP server using Java Netty framework that can handle HTTP requests and responses efficiently with proper resource management.\n\nClass Description: NettyTCPServer is a class that creates and manages a TCP server using Netty framework. It handles HTTP protocol communication with clients, including request decoding, response encoding, chunked writes, and message aggregation. The server is designed to be non-blocking and supports graceful shutdown.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\nchannel: Channel - The server's communication channel\nbossGroup: EventLoopGroup - The parent event loop group that accepts incoming connections\nworkerGroup: EventLoopGroup - The child event loop group that handles the traffic of accepted connections\n\nMethods:\nstart(): void - Starts the TCP server on the specified port. Initializes event loop groups, configures server bootstrap with HTTP handlers, and binds to the port. Throws InterruptedException if interrupted during startup.\nshutdown(): void - Gracefully shuts down the server by closing the channel and shutting down event loop groups. Handles any InterruptedException during shutdown.\n\nThe class uses Netty's NIO transport and includes HTTP-specific handlers for proper protocol handling. It maintains proper resource management through graceful shutdown mechanisms.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class NettyTCPServer {\n\n    private static final Logger Logger = LoggerFactory.getLogger(NettyTCPServer.class);\n    private int port;\n    private Channel channel;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public NettyTCPServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        bossGroup = new NioEventLoopGroup(2);\n        workerGroup = new NioEventLoopGroup();\n\n        try {\n            final ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, 10240)\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.SO_REUSEADDR, true)\n                .childOption(ChannelOption.TCP_NODELAY, true)\n                .childOption(ChannelOption.SO_SNDBUF, 1024*64)\n                .childOption(ChannelOption.SO_RCVBUF, 1024*64)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel socketChannel) throws Exception {\n                        socketChannel.pipeline().addLast(new HttpRequestDecoder());\n                        socketChannel.pipeline().addLast(new HttpResponseEncoder());\n                        socketChannel.pipeline().addLast(new ChunkedWriteHandler());\n                        socketChannel.pipeline().addLast(new HttpObjectAggregator(100 * 1024 * 1024));\n                    }\n                });\n\n            channel = b.bind(port).sync().channel();\n            Logger.info(\"Server started on port {}\", port);\n        } catch (Exception e) {\n            Logger.error(\"Failed to start server on port {}: {}\", port, e.getMessage());\n            throw e;\n        }\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n            try {\n                channel.closeFuture().sync();\n            } catch (InterruptedException e) {\n                Logger.error(\"Error during server shutdown: {}\", e.getMessage());\n            }\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObject;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpResponse;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.util.CharsetUtil;\nimport io.netty.buffer.Unpooled;\n\npublic class NettyTCPServer {\n    private final int port;\n    private Channel channel;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public NettyTCPServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(\n                                new HttpServerCodec(),\n                                new ChunkedWriteHandler(),\n                                new HttpObjectAggregator(65536),\n                                new io.netty.channel.SimpleChannelInboundHandler<HttpObject>() {\n                                    @Override\n                                    protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) {\n                                        if (msg instanceof HttpRequest) {\n                                            HttpRequest request = (HttpRequest) msg;\n                                            FullHttpResponse response = new DefaultFullHttpResponse(\n                                                    HttpVersion.HTTP_1_1, HttpResponseStatus.OK,\n                                                    Unpooled.copiedBuffer(\"Hello, World!\", CharsetUtil.UTF_8));\n                                            response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/plain\");\n                                            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, response.content().readableBytes());\n                                            ctx.writeAndFlush(response);\n                                        }\n                                    }\n                                }\n                        );\n                    }\n                });\n        channel = bootstrap.bind(port).sync().channel();\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            try {\n                channel.close().sync();\n            } catch (InterruptedException e) {\n                // Handle or log as needed\n            }\n        }\n        if (bossGroup != null) {\n            try {\n                bossGroup.shutdownGracefully().sync();\n            } catch (InterruptedException e) {\n                // Handle or log as needed\n            }\n        }\n        if (workerGroup != null) {\n            try {\n                workerGroup.shutdownGracefully().sync();\n            } catch (InterruptedException e) {\n                // Handle or log as needed\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to echo back any received messages to clients.\n\nClass Description: The EchoServer class is a Netty-based TCP server that listens on a specified port and echoes back any data received from connected clients. It manages server lifecycle including startup, shutdown, and resource cleanup.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and distributes them to workerGroup\n- workerGroup: [NioEventLoopGroup] - Handles I/O operations for established connections\n- bootstrap: [ServerBootstrap] - Netty server configuration and management object\n- DEFAULT_PORT: [int] - Default port number (7) to use when no port is specified\n\nMethods:\n- EchoServer() -> [void] - Constructor that initializes bossGroup, workerGroup and bootstrap\n- start([int port]) -> [void] - Starts the server on specified port, configures channel pipeline and binds to port\n- shutdown() -> [void] - Gracefully shuts down the server and releases all resources\n- main([String[] args]) -> [void] - Entry point that parses command line arguments and starts the server",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class EchoServer {\n\n    public static int DEFAULT_PORT = 7;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public EchoServer() {\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws InterruptedException {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new EchoServerHandler())\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"EchoServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port;\n        try {\n            port = Integer.parseInt(args[0]);\n        } catch (RuntimeException ex) {\n            port = DEFAULT_PORT;\n        }\n\n        EchoServer server = new EchoServer();\n        server.start(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class EchoServer {\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final ServerBootstrap bootstrap;\n    private final int DEFAULT_PORT = 7;\n    private Channel channel;\n\n    public EchoServer() {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new StringDecoder(), new StringEncoder(), new EchoServerHandler());\n                    }\n                });\n    }\n\n    public void start(int port) throws Exception {\n        channel = bootstrap.bind(port).sync().channel();\n        System.out.println(\"Server started on port \" + port);\n        channel.closeFuture().sync();\n    }\n\n    public void shutdown() throws Exception {\n        if (channel != null) {\n            channel.close().sync();\n        }\n        bossGroup.shutdownGracefully().sync();\n        workerGroup.shutdownGracefully().sync();\n    }\n\n    public static void main(String[] args) {\n        int port = args.length > 0 ? Integer.parseInt(args[0]) : 7;\n        EchoServer server = new EchoServer();\n        try {\n            server.start(port);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                server.shutdown();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class EchoServerHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(io.netty.channel.ChannelHandlerContext ctx, Object msg) {\n            ctx.writeAndFlush(msg);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Create a Java class that implements a secure TCP chat server using Netty framework, supporting SSL/TLS encryption for secure communication between clients and the server.\n\nClass Description: SecureChatServer is a Netty-based TCP server that listens for incoming client connections on a specified port, establishes secure SSL/TLS encrypted channels, and handles chat communication. The server uses a boss-worker thread model for efficient connection handling.\n\nAttributes:\nPORT: [static final int] - The port number on which the server listens for incoming connections, defaulting to 8992 if not specified via system property.\n\nMethods:\nstart: [start]() -> [void] - Initializes and starts the secure chat server. Creates a self-signed SSL certificate, configures Netty's event loop groups, sets up server bootstrap with SSL context and channel handlers, binds to the specified port, and maintains server operation until shutdown. Handles resource cleanup during shutdown.\n- Throws: Exception if any error occurs during server startup or operation",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class SecureChatServer {\n\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8992\"));\n\n    public void start() throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        SslContext sslCtx = SslContext.newServerContext(ssc.certificate(), ssc.privateKey());\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new SecureChatServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\nimport java.util.Set;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\npublic class SecureChatServer {\n    public static final int PORT = Integer.getInteger(\"port\", 8992);\n\n    public void start() throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        SslContext sslContext = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline pipeline = ch.pipeline();\n                     pipeline.addLast(sslContext.newHandler(ch.alloc()));\n                     pipeline.addLast(new StringDecoder());\n                     pipeline.addLast(new StringEncoder());\n                     pipeline.addLast(new SecureChatHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class SecureChatHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        private static final Set<Channel> channels = new CopyOnWriteArraySet<>();\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            channels.add(ctx.channel());\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) {\n            channels.remove(ctx.channel());\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            String message = (String) msg;\n            for (Channel channel : channels) {\n                channel.writeAndFlush(message + \"\\n\");\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        new SecureChatServer().start();\n    }\n}\n```"
  },
  {
    "Task_id": 184,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and echo back received messages. The server should support optional SSL encryption and be configurable via system properties.\n\nClass Description: EchoServer is a Netty-based TCP server that listens for incoming connections on a specified port and echoes back any received data. It supports optional SSL encryption and uses NIO for non-blocking I/O operations.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be enabled (configured via system property \"ssl\")\n- PORT: int - The port number on which the server will listen (configured via system property \"port\", defaults to 8007)\n\nMethods:\n- start(): void - Starts the Netty TCP server, configures SSL if enabled, sets up event loop groups, and binds to the specified port. Throws Exception if any error occurs during startup.\n  - Input: None\n  - Output: None (void)\n  - Description: Initializes the server with boss and worker event loop groups, configures the server bootstrap with channel options and handlers, and starts listening for incoming connections. The method blocks until the server channel is closed.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class EchoServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8007\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        final EchoServerHandler serverHandler = new EchoServerHandler();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .option(ChannelOption.SO_BACKLOG, 100)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(serverHandler);\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class EchoServer {\n    private final boolean ssl;\n    private final int port;\n\n    public EchoServer() {\n        this.ssl = Boolean.getBoolean(\"ssl\");\n        this.port = Integer.getInteger(\"port\", 8007);\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     if (ssl) {\n                         try {\n                             SelfSignedCertificate ssc = new SelfSignedCertificate();\n                             SslContext sslContext = SslContextBuilder.forServer(ssc.key(), ssc.certificate()).build();\n                             p.addLast(sslContext.newHandler(ch.alloc()));\n                         } catch (Exception e) {\n                             e.printStackTrace();\n                         }\n                     }\n                     p.addLast(new EchoHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class EchoHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ctx.write(msg);\n            ctx.flush();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Implement an abstract HTTP/2 server transport class using Java Netty framework that handles TCP communication, manages server lifecycle (start/stop), and supports SSL encryption.\n\nClass Description: AbstractHttp2ServerTransport is an abstract base class for creating HTTP/2 server transports using Netty. It manages server bootstrap configuration, event loop groups, and provides core server functionality including SSL support and connection management.\n\nAttributes:\n- LOGGER: Logger - Logger instance for logging server events and errors\n- serverBootstrap: ServerBootstrap - Netty server bootstrap instance for configuring and starting the server\n- bizGroup: EventLoopGroup - Event loop group for handling business logic and I/O operations\n- transportConfig: ServerTransportConfig - Configuration object containing server parameters like host, port, and various TCP options\n\nMethods:\n- AbstractHttp2ServerTransport(ServerTransportConfig transportConfig) -> None - Constructor that initializes the transport with configuration\n- start() -> boolean - Starts the HTTP/2 server, initializes event loop groups, configures server bootstrap with TCP options and handlers, and binds to the specified host/port. Returns true if successful\n- stop() -> None - Shuts down the server gracefully, closing event loop groups and releasing resources\n- (inherited methods from ServerTransport superclass would be listed here if applicable)\n\nInput:\n- For constructor: ServerTransportConfig object containing server configuration parameters\n- For start(): None (uses internal state)\n- For stop(): None (uses internal state)\n\nOutput:\n- For start(): boolean indicating success/failure of server startup\n- For stop(): None (performs cleanup operations)",
    "Canonical_solution": "import com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException;\nimport com.alipay.sofa.rpc.log.LogCodes;\nimport com.alipay.sofa.rpc.log.Logger;\nimport com.alipay.sofa.rpc.log.LoggerFactory;\nimport com.alipay.sofa.rpc.server.http.HttpServerHandler;\nimport com.alipay.sofa.rpc.transport.ServerTransport;\nimport com.alipay.sofa.rpc.transport.ServerTransportConfig;\nimport com.alipay.sofa.rpc.transport.netty.NettyHelper;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.WriteBufferWaterMark;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\n\nimport java.net.InetSocketAddress;\n\npublic abstract class AbstractHttp2ServerTransport extends ServerTransport {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractHttp2ServerTransport.class);\n\n    private volatile ServerBootstrap serverBootstrap;\n    private EventLoopGroup bizGroup;\n\n    protected AbstractHttp2ServerTransport(ServerTransportConfig transportConfig) {\n        super(transportConfig);\n    }\n\n    @Override\n    public boolean start() {\n        if (serverBootstrap != null) {\n            return true;\n        }\n        synchronized (this) {\n            if (serverBootstrap != null) {\n                return true;\n            }\n            boolean flag = false;\n            SslContext sslCtx = SslContextBuilder.build();\n\n            EventLoopGroup bossGroup = NettyHelper.getServerBossEventLoopGroup(transportConfig);\n            HttpServerHandler httpServerHandler = (HttpServerHandler) transportConfig.getServerHandler();\n            bizGroup = NettyHelper.getServerBizEventLoopGroup(transportConfig, httpServerHandler.getBizThreadPool());\n\n            serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(bossGroup, bizGroup)\n                .channel(transportConfig.isUseEpoll() ? EpollServerSocketChannel.class : NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, transportConfig.getBacklog())\n                .option(ChannelOption.SO_REUSEADDR, transportConfig.isReuseAddr())\n                .option(ChannelOption.RCVBUF_ALLOCATOR, NettyHelper.getRecvByteBufAllocator())\n                .option(ChannelOption.ALLOCATOR, NettyHelper.getByteBufAllocator())\n                .childOption(ChannelOption.SO_KEEPALIVE, transportConfig.isKeepAlive())\n                .childOption(ChannelOption.TCP_NODELAY, transportConfig.isTcpNoDelay())\n                .childOption(ChannelOption.SO_RCVBUF, 8192 * 128)\n                .childOption(ChannelOption.SO_SNDBUF, 8192 * 128)\n                .handler(new LoggingHandler(LogLevel.DEBUG))\n                .childOption(ChannelOption.ALLOCATOR, NettyHelper.getByteBufAllocator())\n                .childOption(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(\n                    transportConfig.getBufferMin(), transportConfig.getBufferMax()))\n                .childHandler(new Http2ServerChannelInitializer(bizGroup, sslCtx,\n                    httpServerHandler, transportConfig.getPayload()));\n\n            ChannelFuture future = serverBootstrap.bind(\n                new InetSocketAddress(transportConfig.getHost(), transportConfig.getPort()));\n            ChannelFuture channelFuture = future.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture future) throws Exception {\n                    if (future.isSuccess()) {\n                        if (LOGGER.isInfoEnabled()) {\n                            LOGGER.info(\"HTTP/2 Server bind to {}:{} success!\",\n                                transportConfig.getHost(), transportConfig.getPort());\n                        }\n                    } else {\n                        LOGGER.error(LogCodes.getLog(LogCodes.ERROR_HTTP2_BIND, transportConfig.getHost(),\n                            transportConfig.getPort()));\n                        stop();\n                    }\n                }\n            });\n\n            try {\n                channelFuture.await();\n                if (channelFuture.isSuccess()) {\n                    flag = Boolean.TRUE;\n                } else {\n                    throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_START_SERVER, \"HTTP/2\"),\n                        future.cause());\n                }\n            } catch (InterruptedException e) {\n                LOGGER.error(e.getMessage(), e);\n            }\n            return flag;\n        }\n    }\n\n    @Override\n    public void stop() {\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Shutdown the SOFA RPC HTTP/2 server transport now...\");\n        }\n        NettyHelper.closeServerBossEventLoopGroup(transportConfig);\n        if (bizGroup != null) {\n            bizGroup.shutdownGracefully();\n        }\n        serverBootstrap = null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.net.ssl.KeyManagerFactory;\nimport javax.net.ssl.TrustManagerFactory;\nimport java.io.File;\nimport java.security.KeyStore;\n\npublic abstract class AbstractHttp2ServerTransport {\n    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractHttp2ServerTransport.class);\n    protected ServerBootstrap serverBootstrap;\n    protected EventLoopGroup bizGroup;\n    protected ServerTransportConfig transportConfig;\n\n    public AbstractHttp2ServerTransport(ServerTransportConfig transportConfig) {\n        this.transportConfig = transportConfig;\n    }\n\n    public boolean start() {\n        try {\n            if (bizGroup == null) {\n                bizGroup = new NioEventLoopGroup(transportConfig.getWorkerThreads());\n            }\n            serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(bizGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .option(io.netty.channel.ChannelOption.SO_BACKLOG, transportConfig.getBacklog())\n                    .childOption(io.netty.channel.ChannelOption.TCP_NODELAY, transportConfig.isTcpNoDelay())\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            ChannelPipeline p = ch.pipeline();\n                            if (transportConfig.isSslEnabled()) {\n                                try {\n                                    KeyStore keyStore = KeyStore.getInstance(transportConfig.getKeyStoreType());\n                                    keyStore.load(new File(transportConfig.getKeyStorePath()).toURI().toURL(), transportConfig.getKeyStorePassword().toCharArray());\n                                    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n                                    kmf.init(keyStore, transportConfig.getKeyStorePassword().toCharArray());\n\n                                    KeyStore trustStore = KeyStore.getInstance(transportConfig.getTrustStoreType());\n                                    trustStore.load(new File(transportConfig.getTrustStorePath()).toURI().toURL(), transportConfig.getTrustStorePassword().toCharArray());\n                                    TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n                                    tmf.init(trustStore);\n\n                                    SslContext sslCtx = SslContextBuilder.forServer(kmf)\n                                            .trustManager(tmf)\n                                            .build();\n                                    p.addLast(sslCtx.newHandler(ch.alloc()));\n                                } catch (Exception e) {\n                                    LOGGER.error(\"Failed to initialize SSL context\", e);\n                                }\n                            }\n                            p.addLast(new LoggingHandler(LogLevel.INFO));\n                            // Add HTTP/2 handler here, implementation depends on subclass\n                        }\n                    });\n\n            ChannelFuture f = serverBootstrap.bind(transportConfig.getHost(), transportConfig.getPort()).sync();\n            if (!f.isSuccess()) {\n                LOGGER.error(\"Failed to bind to {}:{}\", transportConfig.getHost(), transportConfig.getPort());\n                return false;\n            }\n            return true;\n        } catch (Exception e) {\n            LOGGER.error(\"Error starting server\", e);\n            return false;\n        }\n    }\n\n    public void stop() {\n        if (bizGroup != null) {\n            bizGroup.shutdownGracefully().awaitUninterruptibly();\n        }\n        if (serverBootstrap != null) {\n            Channel channel = serverBootstrap.localAddress().channel();\n            if (channel != null) {\n                channel.close().awaitUninterruptibly();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process time-related requests.\n\nClass Description: The TimeServer class is a Netty-based TCP server that listens on a specified port for incoming client connections. It uses Netty's event-driven architecture to efficiently handle multiple concurrent connections. The server processes incoming requests through a pipeline of handlers and responds with time-related information.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nconstructor: TimeServer(int port) -> void - Initializes the server with the specified port number\nrun: run() -> void - Starts the server, binds it to the specified port, and begins accepting client connections. This method handles the server's lifecycle including startup, operation, and graceful shutdown. Throws Exception if any error occurs during server operation.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class TimeServer {\n\n    private int port;\n\n    public TimeServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new TimeEncoder());\n                     ch.pipeline().addLast(new TimeServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport java.util.Date;\n\npublic class TimeServer {\n    private final int port;\n\n    public TimeServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new TimeServerHandler());\n                 }\n             });\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class TimeServerHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            ctx.writeAndFlush(new Date().toString() + \"\\r\\n\");\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 189,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling telnet connections with optional SSL encryption.\n\nClass Description: The TelnetServer class is a Netty-based TCP server implementation that listens for incoming telnet connections. It supports optional SSL encryption and provides graceful shutdown capabilities. The server uses a boss-worker thread model for handling connections efficiently.\n\nAttributes:\n- SSL: [boolean] - Flag indicating whether SSL encryption should be enabled\n- PORT: [int] - The port number on which the server will listen for connections\n\nMethods:\n- start(): [void] throws [Exception] - Initializes and starts the TCP server. Configures SSL if enabled, sets up event loop groups, and binds to the specified port. The method blocks until the server is shut down.\n  - Input: None\n  - Output: None (but may throw exceptions during server setup or operation)\n  - Side effects: Starts a TCP server that listens for incoming connections and processes them using the configured pipeline handlers",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class TelnetServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8992\" : \"8023\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContext.newServerContext(ssc.certificate(), ssc.privateKey());\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new TelnetServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class TelnetServer {\n    private final boolean ssl;\n    private final int port;\n\n    public TelnetServer(boolean ssl, int port) {\n        this.ssl = ssl;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     if (ssl) {\n                         SelfSignedCertificate ssc = new SelfSignedCertificate();\n                         SslContext sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new TelnetHandler());\n                 }\n             });\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests and responses.\n\nClass Description: The NettyTcpServer class provides functionality to start and stop a Netty-based TCP server that listens for HTTP requests on a specified port and responds with a predefined message. It manages server resources and lifecycle.\n\nAttributes:\n- ctx: ApplicationContext - The Micronaut application context for dependency injection and configuration\n- serverLoop: EventLoopGroup - The Netty event loop group that handles server I/O operations\n- server: ServerSocketChannel - The server socket channel that listens for incoming connections\n\nMethods:\n- startServer(int port) -> void - Starts the TCP server on the specified port. Initializes the server with an event loop group, configures the channel pipeline with HTTP codec and handler, and binds to the given port.\n  Input: port (int) - The port number to bind the server to\n  Output: None (throws Exception if server fails to start)\n\n- stopServer() -> void - Stops the server gracefully by shutting down the event loop group and closing the application context.\n  Input: None\n  Output: None\n\n- getPort() -> int - Returns the port number the server is bound to, or -1 if the server is not running.\n  Input: None\n  Output: int - The port number or -1 if server is not active",
    "Canonical_solution": "import io.micronaut.context.ApplicationContext;\nimport io.micronaut.http.HttpRequest;\nimport io.micronaut.http.body.CloseableAvailableByteBody;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufAllocator;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.ServerSocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.EmptyHttpHeaders;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpContent;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.LastHttpContent;\nimport java.util.Map;\n\npublic class NettyTcpServer {\n\n    private ApplicationContext ctx;\n    private EventLoopGroup serverLoop;\n    private ServerSocketChannel server;\n\n    public void startServer(int port) throws Exception {\n        ctx = ApplicationContext.run(Map.of(\"spec.name\", \"NettyTcpServer\"));\n        serverLoop = new NioEventLoopGroup(1);\n        server = (ServerSocketChannel) new ServerBootstrap()\n            .group(serverLoop)\n            .channel(NioServerSocketChannel.class)\n            .localAddress(port)\n            .childHandler(new ChannelInitializer<>() {\n                FullHttpResponse response;\n\n                @Override\n                public void handlerAdded(ChannelHandlerContext ctx) {\n                    ByteBuf resp = ctx.alloc().buffer();\n                    ByteBufUtil.writeAscii(resp, \"bar\");\n                    response = new DefaultFullHttpResponse(\n                        HttpVersion.HTTP_1_1, \n                        HttpResponseStatus.OK, \n                        resp, \n                        new DefaultHttpHeaders().add(HttpHeaderNames.CONTENT_LENGTH, resp.readableBytes()), \n                        EmptyHttpHeaders.INSTANCE\n                    );\n                }\n\n                @Override\n                protected void initChannel(@NonNull Channel ch) {\n                    ch.pipeline()\n                        .addLast(new HttpServerCodec())\n                        .addLast(new ChannelInboundHandlerAdapter() {\n                            boolean inBody = false;\n\n                            @Override\n                            public void channelRead(@NonNull ChannelHandlerContext ctx, @NonNull Object msg) throws Exception {\n                                if (!inBody) {\n                                    inBody = true;\n                                    if (!(msg instanceof FullHttpResponse)) {\n                                        return;\n                                    }\n                                }\n                                ((HttpContent) msg).release();\n                                if (msg instanceof LastHttpContent) {\n                                    ctx.writeAndFlush(new DefaultFullHttpResponse(\n                                        response.protocolVersion(),\n                                        response.status(),\n                                        response.content().retainedSlice(),\n                                        response.headers(),\n                                        response.trailingHeaders()\n                                    ));\n                                    inBody = false;\n                                }\n                            }\n                        });\n                }\n            })\n            .bind().syncUninterruptibly().channel();\n    }\n\n    public void stopServer() {\n        if (serverLoop != null) {\n            serverLoop.shutdownGracefully();\n        }\n        if (ctx != null) {\n            ctx.close();\n        }\n    }\n\n    public int getPort() {\n        return server != null ? server.localAddress().getPort() : -1;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.ServerSocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpResponse;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.SimpleChannelInboundHandler;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.util.CharsetUtil;\nimport io.netty.buffer.Unpooled;\nimport java.net.InetSocketAddress;\nimport org.springframework.context.ApplicationContext;\n\npublic class NettyTcpServer {\n    private final ApplicationContext ctx;\n    private EventLoopGroup serverLoop;\n    private ServerSocketChannel server;\n\n    public NettyTcpServer(ApplicationContext ctx) {\n        this.ctx = ctx;\n    }\n\n    public void startServer(int port) throws Exception {\n        serverLoop = new NioEventLoopGroup();\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(serverLoop)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<Channel>() {\n                    @Override\n                    protected void initChannel(Channel ch) {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(new HttpServerCodec());\n                        pipeline.addLast(new SimpleChannelInboundHandler<FullHttpRequest>() {\n                            @Override\n                            protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) {\n                                FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.copiedBuffer(\"Hello, World!\", CharsetUtil.UTF_8));\n                                response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/plain\");\n                                response.headers().set(HttpHeaderNames.CONTENT_LENGTH, response.content().readableBytes());\n                                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n                            }\n                        });\n                    }\n                });\n\n        ChannelFuture future = bootstrap.bind(port).sync();\n        server = (ServerSocketChannel) future.channel();\n    }\n\n    public void stopServer() {\n        if (serverLoop != null) {\n            try {\n                serverLoop.shutdownGracefully().sync();\n            } catch (InterruptedException e) {\n                // Handle interruption\n            }\n        }\n        if (ctx != null) {\n            ctx.close();\n        }\n    }\n\n    public int getPort() {\n        if (server != null && server.isOpen()) {\n            InetSocketAddress address = (InetSocketAddress) server.localAddress();\n            return address.getPort();\n        }\n        return -1;\n    }\n}"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Implement a Java class that sets up a Netty-based TCP server for handling HTTP requests, with thread pool management for business logic processing and idle connection handling.\n\nClass Description: EmbedServer is a Netty-based HTTP server implementation that handles incoming requests using a thread pool for business logic processing. It manages server lifecycle (start/stop) and includes connection idle state detection.\n\nAttributes:\n- executorBiz: ExecutorBiz - Business logic executor for handling requests\n- thread: Thread - Server thread running the Netty event loop\n\nMethods:\n- start(String address, int port, String appname, String accessToken) -> void - Starts the Netty server on specified port with given configuration\n  - address: String - Server bind address\n  - port: int - Server bind port\n  - appname: String - Application name (unused in current implementation)\n  - accessToken: String - Authentication token for requests\n- stop() -> void - Stops the server and releases resources\n- EmbedHttpServerHandler(ExecutorBiz executorBiz, String accessToken, ThreadPoolExecutor bizThreadPool) -> void - Constructor for the HTTP request handler\n  - executorBiz: ExecutorBiz - Business logic executor\n  - accessToken: String - Authentication token\n  - bizThreadPool: ThreadPoolExecutor - Thread pool for request processing\n- channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) -> void - Handles incoming HTTP requests\n  - ctx: ChannelHandlerContext - Netty channel context\n  - msg: FullHttpRequest - Incoming HTTP request\n- exceptionCaught(ChannelHandlerContext ctx, Throwable cause) -> void - Handles channel exceptions\n  - ctx: ChannelHandlerContext - Netty channel context\n  - cause: Throwable - Exception that occurred\n- userEventTriggered(ChannelHandlerContext ctx, Object evt) -> void - Handles idle state events\n  - ctx: ChannelHandlerContext - Netty channel context\n  - evt: Object - Triggered event (IdleStateEvent for idle connections)",
    "Canonical_solution": "import com.xxl.job.core.biz.ExecutorBiz;\nimport com.xxl.job.core.biz.impl.ExecutorBizImpl;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.concurrent.*;\n\npublic class EmbedServer {\n    private static final Logger logger = LoggerFactory.getLogger(EmbedServer.class);\n\n    private ExecutorBiz executorBiz;\n    private Thread thread;\n\n    public void start(final String address, final int port, final String appname, final String accessToken) {\n        executorBiz = new ExecutorBizImpl();\n        thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                EventLoopGroup bossGroup = new NioEventLoopGroup();\n                EventLoopGroup workerGroup = new NioEventLoopGroup();\n                ThreadPoolExecutor bizThreadPool = new ThreadPoolExecutor(\n                        0,\n                        200,\n                        60L,\n                        TimeUnit.SECONDS,\n                        new LinkedBlockingQueue<Runnable>(2000),\n                        new ThreadFactory() {\n                            @Override\n                            public Thread newThread(Runnable r) {\n                                return new Thread(r, \"xxl-rpc, EmbedServer bizThreadPool-\" + r.hashCode());\n                            }\n                        },\n                        new RejectedExecutionHandler() {\n                            @Override\n                            public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n                                throw new RuntimeException(\"xxl-job, EmbedServer bizThreadPool is EXHAUSTED!\");\n                            }\n                        });\n\n                try {\n                    ServerBootstrap bootstrap = new ServerBootstrap();\n                    bootstrap.group(bossGroup, workerGroup)\n                            .channel(NioServerSocketChannel.class)\n                            .childHandler(new ChannelInitializer<SocketChannel>() {\n                                @Override\n                                public void initChannel(SocketChannel channel) throws Exception {\n                                    channel.pipeline()\n                                            .addLast(new IdleStateHandler(0, 0, 30 * 3, TimeUnit.SECONDS))\n                                            .addLast(new HttpServerCodec())\n                                            .addLast(new HttpObjectAggregator(5 * 1024 * 1024))\n                                            .addLast(new EmbedHttpServerHandler(executorBiz, accessToken, bizThreadPool));\n                                }\n                            })\n                            .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n                    ChannelFuture future = bootstrap.bind(port).sync();\n                    logger.info(\">>>>>>>>>>> xxl-job remoting server start success, nettype = {}, port = {}\", EmbedServer.class, port);\n\n                    future.channel().closeFuture().sync();\n                } catch (InterruptedException e) {\n                    if (e instanceof InterruptedException) {\n                        logger.info(\">>>>>>>>>>> xxl-job remoting server stop.\");\n                    } else {\n                        logger.error(\">>>>>>>>>>> xxl-job remoting server error.\", e);\n                    }\n                } finally {\n                    try {\n                        workerGroup.shutdownGracefully();\n                        bossGroup.shutdownGracefully();\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            }\n        });\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    public void stop() throws Exception {\n        if (thread!=null && thread.isAlive()) {\n            thread.interrupt();\n        }\n        logger.info(\">>>>>>>>>>> xxl-job remoting server destroy success.\");\n    }\n\n    public static class EmbedHttpServerHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        private static final Logger logger = LoggerFactory.getLogger(EmbedHttpServerHandler.class);\n\n        private ExecutorBiz executorBiz;\n        private String accessToken;\n        private ThreadPoolExecutor bizThreadPool;\n\n        public EmbedHttpServerHandler(ExecutorBiz executorBiz, String accessToken, ThreadPoolExecutor bizThreadPool) {\n            this.executorBiz = executorBiz;\n            this.accessToken = accessToken;\n            this.bizThreadPool = bizThreadPool;\n        }\n\n        @Override\n        protected void channelRead0(final ChannelHandlerContext ctx, FullHttpRequest msg) throws Exception {\n            bizThreadPool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    String responseJson = \"{}\";\n                    FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.copiedBuffer(responseJson, CharsetUtil.UTF_8));\n                    response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/html;charset=UTF-8\");\n                    response.headers().set(HttpHeaderNames.CONTENT_LENGTH, response.content().readableBytes());\n                    ctx.writeAndFlush(response);\n                }\n            });\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            logger.error(\">>>>>>>>>>> xxl-job provider netty_http server caught exception\", cause);\n            ctx.close();\n        }\n\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n            if (evt instanceof IdleStateEvent) {\n                ctx.channel().close();\n                logger.debug(\">>>>>>>>>>> xxl-job provider netty_http server close an idle channel.\");\n            } else {\n                super.userEventTriggered(ctx, evt);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.concurrent.DefaultEventExecutorGroup;\nimport io.netty.util.concurrent.EventExecutorGroup;\n\nimport java.util.concurrent.ThreadPoolExecutor;\n\npublic class EmbedServer {\n    private ExecutorBiz executorBiz;\n    private Thread thread;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public void start(String address, int port, String appname, String accessToken) {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             public void initChannel(SocketChannel ch) {\n                 ch.pipeline().addLast(\n                     new IdleStateHandler(60, 0, 0),\n                     new EmbedHttpServerHandler(executorBiz, accessToken, (ThreadPoolExecutor) executorBiz)\n                 );\n             }\n         });\n\n        try {\n            ChannelFuture f = b.bind(port).sync();\n            thread = new Thread(() -> {\n                try {\n                    f.channel().closeFuture().sync();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n            thread.start();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        if (thread != null) {\n            thread.interrupt();\n        }\n    }\n\n    public static class EmbedHttpServerHandler extends ChannelInboundHandlerAdapter {\n        private final ExecutorBiz executorBiz;\n        private final String accessToken;\n        private final ThreadPoolExecutor bizThreadPool;\n\n        public EmbedHttpServerHandler(ExecutorBiz executorBiz, String accessToken, ThreadPoolExecutor bizThreadPool) {\n            this.executorBiz = executorBiz;\n            this.accessToken = accessToken;\n            this.bizThreadPool = bizThreadPool;\n        }\n\n        @Override\n        public void channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) {\n            String token = msg.headers().get(\"Authorization\");\n            if (!accessToken.equals(token)) {\n                FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.UNAUTHORIZED);\n                ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n                return;\n            }\n\n            bizThreadPool.submit(() -> {\n                try {\n                    FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n                    ctx.writeAndFlush(response);\n                } catch (Exception e) {\n                    ctx.close();\n                }\n            });\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {\n            if (evt instanceof IdleStateEvent) {\n                ctx.close();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Create a Java class that implements an HTTP/2 server using Netty framework, capable of handling incoming TCP connections with configurable port settings and proper resource management.\n\nClass Description: The Http2Server class is a Netty-based TCP server implementation that listens for HTTP/2 connections on a specified port. It manages server lifecycle including startup, shutdown, and resource cleanup, using Netty's event loop groups for efficient I/O handling.\n\nAttributes:\n- DEFAULT_PORT: int - Default port number (8080) used when no port is specified\n- bossGroup: EventLoopGroup - Netty event loop group for accepting incoming connections\n- workerGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- bootstrap: ServerBootstrap - Netty server bootstrap for configuring server parameters\n\nMethods:\n- Http2Server() -> None - Constructor that initializes the event loop groups and server bootstrap\n- start(int port) -> void - Starts the server on the specified port, configures channel options and handlers, and binds to the port\n- shutdown() -> void - Gracefully shuts down the server and releases all resources",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class Http2Server {\n\n    public static int DEFAULT_PORT = 8080;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public Http2Server() {\n        this.bossGroup = new NioEventLoopGroup(1);\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws Exception {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new Http2ServerInitializer())\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"HTTP/2\u670d\u52a1\u5668\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http2.Http2FrameDecoder;\nimport io.netty.handler.codec.http2.Http2FrameEncoder;\nimport io.netty.handler.codec.http2.Http2ServerHandler;\n\npublic class Http2Server {\n    private static final int DEFAULT_PORT = 8080;\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final ServerBootstrap bootstrap;\n\n    public Http2Server() {\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws Exception {\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline p = ch.pipeline();\n                        p.addLast(new Http2FrameDecoder());\n                        p.addLast(new Http2FrameEncoder());\n                        p.addLast(new Http2ServerHandler());\n                    }\n                });\n\n        ChannelFuture future = bootstrap.bind(port).sync();\n    }\n\n    public void shutdown() {\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n}"
  },
  {
    "Task_id": 195,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and manage them efficiently.\n\nClass Description: The `NettyServer` class is a TCP server implementation using Netty framework. It listens on a specified host and port, manages client connections, and provides hooks for connection events. The server uses non-blocking I/O and maintains a set of active connections.\n\nAttributes:\n- host: [String] - The host address the server binds to (can be null for any local address)\n- port: [int] - The port number the server listens on\n- connections: [Set<Connection>] - Thread-safe set of active client connections\n- onConnect: [Consumer<Connection>] - Callback function triggered when a new connection is established\n- eventLoopGroup: [EventLoopGroup] - Netty event loop group for handling I/O operations\n- server: [ServerBootstrap] - Netty server bootstrap instance for server configuration\n\nMethods:\n- start(): [void] - Starts the Netty server, binds to the specified host and port, and begins accepting connections\n- channelInitializer(): [ChannelInitializer<SocketChannel>] - Creates and returns a channel initializer for new connections\n- close(): [void] - Shuts down the server gracefully, releasing all resources",
    "Canonical_solution": "import io.dingodb.common.Location;\nimport io.dingodb.common.concurrent.ThreadPoolBuilder;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Set;\nimport java.util.concurrent.CopyOnWriteArraySet;\nimport java.util.function.Consumer;\n\nimport static io.dingodb.net.netty.Constant.SERVER;\n\n@Slf4j\n@Getter\n@Builder\npublic class NettyServer {\n\n    public final String host;\n    public final int port;\n    private final Set<Connection> connections = new CopyOnWriteArraySet<>();\n    private final Consumer<Connection> onConnect;\n\n    private EventLoopGroup eventLoopGroup;\n    private ServerBootstrap server;\n\n    public void start() throws Exception {\n        server = new ServerBootstrap();\n        eventLoopGroup = new NioEventLoopGroup(2, new ThreadPoolBuilder().name(\"Netty server \" + port).build());\n        server\n            .channel(NioServerSocketChannel.class)\n            .group(eventLoopGroup)\n            .childOption(ChannelOption.TCP_NODELAY, true)\n            .childHandler(channelInitializer());\n        if (host != null) {\n            server.localAddress(host, port);\n        } else {\n            server.localAddress(port);\n        }\n        try {\n            server.bind().sync().await();\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            System.exit(-1);\n        }\n    }\n\n    private ChannelInitializer<SocketChannel> channelInitializer() {\n        return new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) {\n                Connection connection = new Connection(\n                    SERVER, new Location(ch.remoteAddress().getHostName(), ch.remoteAddress().getPort()), ch\n                );\n                NettyHandlers.initChannelPipelineWithHandshake(ch, connection);\n                connections.add(connection);\n                if (onConnect != null) {\n                    onConnect.accept(connection);\n                }\n                ch.closeFuture().addListener(f -> connections.remove(connection)).addListener(f -> connection.close());\n            }\n        };\n    }\n\n    public void close() {\n        eventLoopGroup.shutdownGracefully();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.util.Set;\nimport java.util.concurrent.CopyOnWriteArraySet;\nimport java.util.function.Consumer;\n\npublic class NettyServer {\n    private String host;\n    private int port;\n    private Set<Connection> connections = new CopyOnWriteArraySet<>();\n    private Consumer<Connection> onConnect;\n    private EventLoopGroup eventLoopGroup;\n    private ServerBootstrap server;\n\n    public NettyServer(String host, int port, Consumer<Connection> onConnect) {\n        this.host = host;\n        this.port = port;\n        this.onConnect = onConnect;\n    }\n\n    public void start() throws Exception {\n        eventLoopGroup = new NioEventLoopGroup();\n        server = new ServerBootstrap();\n        server.group(eventLoopGroup)\n              .channel(NioServerSocketChannel.class)\n              .childHandler(channelInitializer())\n              .bind(host, port)\n              .sync();\n    }\n\n    public ChannelInitializer<SocketChannel> channelInitializer() {\n        return new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(new io.netty.channel.ChannelInboundHandlerAdapter() {\n                    @Override\n                    public void channelActive(io.netty.channel.ChannelHandlerContext ctx) {\n                        connections.add(new Connection(ctx.channel()));\n                        if (onConnect != null) {\n                            onConnect.accept(new Connection(ctx.channel()));\n                        }\n                    }\n                });\n            }\n        };\n    }\n\n    public void close() {\n        if (eventLoopGroup != null) {\n            eventLoopGroup.shutdownGracefully();\n        }\n    }\n}"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a Java class that implements a simple HTTP server using Netty framework, capable of handling incoming HTTP requests and providing graceful shutdown functionality.\n\nClass Description: NettyHttpServer is a class that sets up and manages a Netty-based HTTP server. It initializes the server with configurable options, handles incoming HTTP requests through a pipeline of handlers, and provides methods to control the server lifecycle.\n\nAttributes:\n- bossGroup: EventLoopGroup - Handles incoming connections and accepts them\n- workerGroup: EventLoopGroup - Handles the traffic of accepted connections\n- port: int - The port number on which the server is listening\n\nMethods:\n- init() -> void - Initializes and starts the HTTP server on an available port, setting up the necessary event loop groups and channel pipeline\n- stop() -> void - Shuts down the server gracefully by releasing all resources and closing the event loop groups\n- getUrl(String path) -> String - Constructs and returns a complete URL string using the server's address and the provided path",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport java.net.InetSocketAddress;\n\npublic class NettyHttpServer {\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private int port;\n\n    public void init() {\n        stop();\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.option(ChannelOption.SO_BACKLOG, 1024);\n        b.group(bossGroup, workerGroup)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<Channel>() {\n                @Override\n                protected void initChannel(final Channel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    p.addLast(new HttpServerCodec());\n                    p.addLast(NettyHttpTracing.create(httpTracing).serverHandler());\n                    p.addLast(new TestHandler(httpTracing));\n                }\n            });\n\n        try {\n            Channel ch = b.bind(0).sync().channel();\n            port = ((InetSocketAddress) ch.localAddress()).getPort();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new AssertionError(e);\n        }\n    }\n\n    public String getUrl(String path) {\n        return \"http://127.0.0.1:\" + port + path;\n    }\n\n    public void stop() {\n        if (bossGroup != null) bossGroup.shutdownGracefully();\n        if (workerGroup != null) workerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObject;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpResponse;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.SimpleChannelInboundHandler;\n\npublic class NettyHttpServer {\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private int port;\n\n    public NettyHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void init() {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new HttpServerCodec());\n                     ch.pipeline().addLast(new HttpObjectAggregator(65536));\n                     ch.pipeline().addLast(new SimpleChannelInboundHandler<HttpObject>() {\n                         @Override\n                         protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) {\n                             if (msg instanceof HttpRequest) {\n                                 HttpRequest request = (HttpRequest) msg;\n                                 FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n                                 response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/plain\");\n                                 response.content().writeBytes(\"Hello, World!\".getBytes());\n                                 ctx.writeAndFlush(response);\n                             }\n                         }\n                     });\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            // Additional cleanup if needed\n        }\n    }\n\n    public void stop() {\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public String getUrl(String path) {\n        return \"http://localhost:\" + port + \"/\" + path;\n    }\n}"
  },
  {
    "Task_id": 199,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle file-related operations over a network connection.\n\nClass Description: FileServer is a Netty-based TCP server that listens on a specified port for incoming connections, processes file-related requests using line-based text communication, and manages server resources efficiently.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and accepts them\n- workerGroup: [NioEventLoopGroup] - Processes the accepted connections' I/O operations\n- port: [int] - The port number on which the server listens for connections\n\nMethods:\n- run: [run(int port)] -> [void] - Initializes and starts the Netty server on the specified port, configuring the server bootstrap with appropriate channel options and handlers\n  - Input: port [int] - The port number to bind the server to\n  - Output: None (void), but starts the server process\n- main: [main(String[] args)] -> [void] - Entry point that creates a FileServer instance and runs it on port 8082 (or a specified port if provided as command-line argument)\n  - Input: args [String[]] - Command line arguments (optional port number)\n  - Output: None (void), but initiates the server startup",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.LineBasedFrameDecoder;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.util.CharsetUtil;\n\npublic class FileServer {\n\n    public void run(int port) throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, 100)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(\n                            new StringEncoder(CharsetUtil.UTF_8),\n                            new LineBasedFrameDecoder(1024),\n                            new StringDecoder(CharsetUtil.UTF_8),\n                            new FileServerHandler());\n                    }\n                });\n            ChannelFuture f = b.bind(port).sync();\n            System.out.println(\"Server start at port : \" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = 8082;\n        if (args.length > 0) {\n            try {\n                port = Integer.parseInt(args[0]);\n            } catch (NumberFormatException e) {\n                e.printStackTrace();\n            }\n        }\n        new FileServer().run(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.LineBasedFrameDecoder;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class FileServer {\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private int port;\n\n    public FileServer() {\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n    }\n\n    public void run(int port) {\n        this.port = port;\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) {\n                 ch.pipeline().addLast(\n                     new LineBasedFrameDecoder(1024),\n                     new StringDecoder(),\n                     new StringEncoder(),\n                     new FileServerHandler()\n                 );\n             }\n         })\n         .option(ChannelOption.SO_BACKLOG, 128)\n         .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n        try {\n            ChannelFuture f = b.bind(this.port).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        int port = 8082;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        FileServer server = new FileServer();\n        server.run(port);\n    }\n\n    private static class FileServerHandler extends SimpleChannelInboundHandler<String> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, String msg) {\n            System.out.println(\"Received: \" + msg);\n            ctx.writeAndFlush(\"ACK: \" + msg + \"\\n\");\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Implement a Java class that consumes messages from an ActiveMQ broker, supporting both queue and topic message consumption patterns. The class should handle connection management and provide clean resource cleanup.\n\nClass Description: JmsConsumer is a Java class that connects to an ActiveMQ message broker to consume messages from either a queue or a topic. It manages the entire JMS connection lifecycle including connection establishment, session creation, message consumption, and resource cleanup.\n\nAttributes:\n- USERNAME: [String] - Default username for ActiveMQ connection\n- PASSWORD: [String] - Default password for ActiveMQ connection\n- BROKEURL: [String] - Default broker URL for ActiveMQ connection\n- connectionFactory: [ConnectionFactory] - Factory for creating JMS connections\n- connection: [Connection] - Active connection to the message broker\n- session: [Session] - JMS session for message processing\n- destination: [Destination] - Target queue or topic for message consumption\n- messageConsumer: [MessageConsumer] - Consumer instance for receiving messages\n\nMethods:\n- consumeQueueMessages() -> [void] - Consumes messages from a specified queue (\"SAMPLE_MQ_QUEUE\") and prints them to console. Runs indefinitely until no messages are received for the timeout period.\n- consumeTopicMessages() -> [void] - Consumes messages from a specified topic (\"SAMPLE_MQ_TOPIC\") and prints them to console. Runs indefinitely until no messages are received for the timeout period.\n- closeConnection() -> [void] - Closes the JMS connection and releases all resources. Should be called when message consumption is complete.",
    "Canonical_solution": "import javax.jms.Connection;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.Destination;\nimport javax.jms.JMSException;\nimport javax.jms.MessageConsumer;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\nimport org.apache.activemq.ActiveMQConnection;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class JmsConsumer {\n\n    private static final String USERNAME = ActiveMQConnection.DEFAULT_USER;\n    private static final String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;\n    private static final String BROKEURL = ActiveMQConnection.DEFAULT_BROKER_URL;\n\n    private ConnectionFactory connectionFactory;\n    private Connection connection;\n    private Session session;\n    private Destination destination;\n    private MessageConsumer messageConsumer;\n\n    public void consumeQueueMessages() throws JMSException {\n        connectionFactory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKEURL);\n        connection = connectionFactory.createConnection();\n        connection.start();\n        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n        destination = session.createQueue(\"SAMPLE_MQ_QUEUE\");\n        messageConsumer = session.createConsumer(destination);\n        \n        while (true) {\n            TextMessage textMessage = (TextMessage) messageConsumer.receive(100000);\n            if (textMessage != null) {\n                System.out.println(\"QUEUE\\t\u6536\u5230\u7684\u6d88\u606f:\" + textMessage.getText());\n            } else {\n                break;\n            }\n        }\n    }\n\n    public void consumeTopicMessages() throws JMSException {\n        destination = session.createTopic(\"SAMPLE_MQ_TOPIC\");\n        messageConsumer = session.createConsumer(destination);\n        \n        while (true) {\n            TextMessage textMessage = (TextMessage) messageConsumer.receive(100000);\n            if (textMessage != null) {\n                System.out.println(\"TOPIC\\t\u6536\u5230\u7684\u6d88\u606f:\" + textMessage.getText());\n            } else {\n                break;\n            }\n        }\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (JMSException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 39,
    "right_result": "```java\nimport javax.jms.*;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class JmsConsumer {\n    private static final String USERNAME = \"admin\";\n    private static final String PASSWORD = \"admin\";\n    private static final String BROKEURL = \"tcp://localhost:61616\";\n\n    private ConnectionFactory connectionFactory;\n    private Connection connection;\n    private Session session;\n    private Destination destination;\n    private MessageConsumer messageConsumer;\n\n    public void consumeQueueMessages() {\n        try {\n            connectionFactory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKEURL);\n            connection = connectionFactory.createConnection();\n            connection.start();\n            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n            destination = session.createQueue(\"SAMPLE_MQ_QUEUE\");\n            messageConsumer = session.createConsumer(destination);\n            while (true) {\n                Message message = messageConsumer.receive(1000);\n                if (message == null) {\n                    break;\n                }\n                if (message instanceof TextMessage) {\n                    System.out.println(((TextMessage) message).getText());\n                } else {\n                    System.out.println(\"Received: \" + message);\n                }\n            }\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void consumeTopicMessages() {\n        try {\n            connectionFactory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKEURL);\n            connection = connectionFactory.createConnection();\n            connection.start();\n            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n            destination = session.createTopic(\"SAMPLE_MQ_TOPIC\");\n            messageConsumer = session.createConsumer(destination);\n            while (true) {\n                Message message = messageConsumer.receive(1000);\n                if (message == null) {\n                    break;\n                }\n                if (message instanceof TextMessage) {\n                    System.out.println(((TextMessage) message).getText());\n                } else {\n                    System.out.println(\"Received: \" + message);\n                }\n            }\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void closeConnection() {\n        try {\n            if (messageConsumer != null) {\n                messageConsumer.close();\n            }\n            if (session != null) {\n                session.close();\n            }\n            if (connection != null) {\n                connection.close();\n            }\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a Java class that provides memory-mapped file access capabilities and process spawning functionality for inter-process communication scenarios.\n\nClass Description: FileChannelInteractor is a utility class that handles memory-mapped file operations and process management. It allows read-only memory mapping of files and provides functionality to spawn worker processes for IPC scenarios.\n\nAttributes:\n- fileChannel: FileChannel - The NIO FileChannel used for file operations\n- mapAddress: long - The memory address of the mapped file region\n- fileSize: long - The size of the mapped file in bytes\n\nMethods:\n- FileChannelInteractor(String filePath) -> void - Constructor that opens a file channel and maps the file into memory in read-only mode\n- getMemoryMappedAddress() -> long - Returns the memory address of the mapped file region\n- getFileSize() -> long - Returns the size of the mapped file\n- close() -> void - Closes the file channel and releases system resources\n- spawnWorkerProcess() -> void - Static method that spawns a worker process with the same command and arguments as the current process, adding a \"--worker\" flag",
    "Canonical_solution": "import java.io.IOException;\nimport java.lang.foreign.Arena;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileChannelInteractor {\n\n    private FileChannel fileChannel;\n    private long mapAddress;\n    private long fileSize;\n\n    public FileChannelInteractor(String filePath) throws IOException {\n        this.fileChannel = FileChannel.open(Path.of(filePath), StandardOpenOption.READ);\n        this.fileSize = fileChannel.size();\n        this.mapAddress = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, fileSize, Arena.global()).address();\n    }\n\n    public long getMemoryMappedAddress() {\n        return mapAddress;\n    }\n\n    public long getFileSize() {\n        return fileSize;\n    }\n\n    public void close() throws IOException {\n        fileChannel.close();\n    }\n\n    public static void spawnWorkerProcess() throws IOException {\n        ProcessHandle.Info info = ProcessHandle.current().info();\n        ArrayList<String> workerCommand = new ArrayList<>();\n        info.command().ifPresent(workerCommand::add);\n        info.arguments().ifPresent(args -> workerCommand.addAll(Arrays.asList(args)));\n        workerCommand.add(\"--worker\");\n        new ProcessBuilder()\n                .command(workerCommand)\n                .inheritIO()\n                .redirectOutput(ProcessBuilder.Redirect.PIPE)\n                .start()\n                .getInputStream()\n                .transferTo(System.out);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "import java.io.IOException;\nimport java.lang.management.ManagementFactory;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.lang.reflect.Field;\n\npublic class FileChannelInteractor {\n    private FileChannel fileChannel;\n    private long mapAddress;\n    private long fileSize;\n\n    public FileChannelInteractor(String filePath) throws IOException {\n        fileChannel = FileChannel.open(Paths.get(filePath), StandardOpenOption.READ);\n        fileSize = fileChannel.size();\n        ByteBuffer buffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n        mapAddress = getAddress(buffer);\n    }\n\n    private static long getAddress(Object obj) {\n        try {\n            Field addressField = obj.getClass().getDeclaredField(\"address\");\n            addressField.setAccessible(true);\n            return addressField.getLong(obj);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Unable to get address\", e);\n        }\n    }\n\n    public long getMemoryMappedAddress() {\n        return mapAddress;\n    }\n\n    public long getFileSize() {\n        return fileSize;\n    }\n\n    public void close() throws IOException {\n        if (fileChannel != null) {\n            fileChannel.close();\n        }\n    }\n\n    public static void spawnWorkerProcess() {\n        String commandLine = ManagementFactory.getRuntimeMXBean().getCommandLine();\n        String[] parts = commandLine.split(\"\\\\s+\");\n        List<String> newArgs = new ArrayList<>(Arrays.asList(parts));\n        newArgs.add(\"--worker\");\n        ProcessBuilder pb = new ProcessBuilder(newArgs);\n        try {\n            pb.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework for handling client connections and message passing in a chat application.\n\nClass Description: The CIMServer class is a Spring component that initializes and manages a Netty-based TCP server. It handles client connections, maintains session information, and provides functionality to send messages to connected clients.\n\nAttributes:\n- boss: [EventLoopGroup] - Handles incoming connections and distributes them to worker threads\n- work: [EventLoopGroup] - Handles I/O operations for established connections\n- nettyPort: [int] - The port number on which the server listens for incoming connections\n\nMethods:\n- start(): [void]() -> [void] - Initializes and starts the Netty server (annotated with @PostConstruct)\n- destroy(): [void]() -> [void] - Shuts down the server gracefully (annotated with @PreDestroy)\n- sendMsg(): [void]([SendMsgReqVO sendMsgReqVO]) -> [void] - Sends a message to a specific client identified by user ID",
    "Canonical_solution": "import com.crossoverjie.cim.common.protocol.BaseCommand;\nimport com.crossoverjie.cim.common.protocol.Request;\nimport com.crossoverjie.cim.server.api.vo.req.SendMsgReqVO;\nimport com.crossoverjie.cim.server.init.CIMServerInitializer;\nimport com.crossoverjie.cim.server.util.SessionSocketHolder;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport jakarta.annotation.PostConstruct;\nimport jakarta.annotation.PreDestroy;\nimport java.net.InetSocketAddress;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CIMServer {\n\n    private EventLoopGroup boss = new NioEventLoopGroup();\n    private EventLoopGroup work = new NioEventLoopGroup();\n\n    @Value(\"${cim.server.port}\")\n    private int nettyPort;\n\n    @PostConstruct\n    public void start() throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap()\n                .group(boss, work)\n                .channel(NioServerSocketChannel.class)\n                .localAddress(new InetSocketAddress(nettyPort))\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childHandler(new CIMServerInitializer());\n\n        ChannelFuture future = bootstrap.bind().sync();\n        if (future.isSuccess()) {\n            log.info(\"Start cim server success!!!\");\n        }\n    }\n\n    @PreDestroy\n    public void destroy() {\n        boss.shutdownGracefully().syncUninterruptibly();\n        work.shutdownGracefully().syncUninterruptibly();\n        log.info(\"Close cim server success!!!\");\n    }\n\n    public void sendMsg(SendMsgReqVO sendMsgReqVO) {\n        NioSocketChannel socketChannel = SessionSocketHolder.get(sendMsgReqVO.getUserId());\n\n        if (null == socketChannel) {\n            log.error(\"client {} offline!\", sendMsgReqVO.getUserId());\n            return;\n        }\n        Request protocol = Request.newBuilder()\n                .setRequestId(sendMsgReqVO.getUserId())\n                .setReqMsg(sendMsgReqVO.getMsg())\n                .putAllProperties(sendMsgReqVO.getProperties())\n                .setCmd(BaseCommand.MESSAGE)\n                .build();\n\n        ChannelFuture future = socketChannel.writeAndFlush(protocol);\n        future.addListener((ChannelFutureListener) channelFuture ->\n                log.info(\"server push msg:[{}]\", sendMsgReqVO.toString()));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.CharsetUtil;\nimport io.netty.buffer.Unpooled;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Component\npublic class CIMServer {\n\n    private EventLoopGroup boss;\n    private EventLoopGroup work;\n    private int nettyPort;\n\n    private final Map<String, Channel> sessions = new ConcurrentHashMap<>();\n\n    @Value(\"${netty.port}\")\n    public void setNettyPort(int nettyPort) {\n        this.nettyPort = nettyPort;\n    }\n\n    @PostConstruct\n    public void start() {\n        boss = new NioEventLoopGroup();\n        work = new NioEventLoopGroup();\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(boss, work)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new ChatServerHandler());\n                    }\n                });\n        ChannelFuture future = bootstrap.bind(nettyPort).syncUninterruptibly();\n        if (!future.isSuccess()) {\n            throw new RuntimeException(\"Failed to bind to port \" + nettyPort);\n        }\n    }\n\n    @PreDestroy\n    public void destroy() {\n        if (boss != null) {\n            boss.shutdownGracefully();\n        }\n        if (work != null) {\n            work.shutdownGracefully();\n        }\n    }\n\n    public void sendMsg(SendMsgReqVO sendMsgReqVO) {\n        String userId = sendMsgReqVO.getUserId();\n        String message = sendMsgReqVO.getMessage();\n        Channel channel = sessions.get(userId);\n        if (channel != null && channel.isActive()) {\n            channel.writeAndFlush(Unpooled.copiedBuffer(message, CharsetUtil.UTF_8));\n        }\n    }\n\n    private class ChatServerHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof String) {\n                String userId = (String) msg;\n                sessions.put(userId, ctx.channel());\n            }\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) {\n            for (Map.Entry<String, Channel> entry : sessions.entrySet()) {\n                if (entry.getValue().equals(ctx.channel())) {\n                    sessions.remove(entry.getKey());\n                    break;\n                }\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle multiple client connections and manage them through a channel group.\n\nClass Description: The ChatServer class is a Netty-based TCP server that manages client connections through channel groups. It provides methods to start the server on a specified address and properly shut it down while releasing all resources.\n\nAttributes:\n- channelGroup: [ChannelGroup] - Maintains all active client channels for group operations\n- bossGroup: [EventLoopGroup] - Handles incoming connection requests\n- workGroup: [EventLoopGroup] - Handles I/O operations for established connections\n- channel: [Channel] - Represents the server's listening channel\n\nMethods:\n- start: [Name]([InetSocketAddress address]) -> [ChannelFuture] - Starts the server on the specified address, configures server options, and initializes the channel pipeline with handlers\n- destroy: [Name]() -> [void] - Properly shuts down the server by closing all channels and releasing thread resources",
    "Canonical_solution": "import java.net.InetSocketAddress;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.group.ChannelGroup;\nimport io.netty.channel.group.DefaultChannelGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.concurrent.ImmediateEventExecutor;\n\npublic class ChatServer {\n    private final ChannelGroup channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE);\n    private final EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private final EventLoopGroup workGroup = new NioEventLoopGroup();\n    private Channel channel;\n    \n    public ChannelFuture start(InetSocketAddress address) {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChatServerInitializer(channelGroup))\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n        \n        ChannelFuture future = bootstrap.bind(address).syncUninterruptibly();\n        channel = future.channel();\n        return future;\n    }\n    \n    public void destroy() {\n        if(channel != null) {\n            channel.close();\n        }\n        \n        channelGroup.close();\n        workGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.concurrent.DefaultEventExecutorGroup;\nimport io.netty.util.concurrent.EventExecutorGroup;\nimport io.netty.util.concurrent.GlobalEventExecutor;\n\npublic class ChatServer {\n    private ChannelGroup channelGroup;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workGroup;\n    private Channel channel;\n\n    public ChannelFuture start(InetSocketAddress address) {\n        bossGroup = new NioEventLoopGroup();\n        workGroup = new NioEventLoopGroup();\n        channelGroup = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);\n\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n                            @Override\n                            public void channelActive(ChannelHandlerContext ctx) {\n                                channelGroup.add(ctx.channel());\n                            }\n                        });\n                    }\n                });\n\n        ChannelFuture future = bootstrap.bind(address).syncUninterruptibly();\n        channel = future.channel();\n        return future;\n    }\n\n    public void destroy() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (channelGroup != null) {\n            channelGroup.close().syncUninterruptibly();\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workGroup != null) {\n            workGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 202,
    "Instruction": "Task Description: Implement a TCP server using Java Netty framework that listens for incoming connections, processes command-based requests, and returns appropriate responses. The server should support multiple commands and maintain a clean connection lifecycle.\n\nClass Description: Console is a singleton class that implements a TCP server with command processing capabilities. It maintains a registry of available commands and handles client connections using Netty's NIO framework.\n\nAttributes:\n- instance: Console - Singleton instance of the Console class\n- commands: Map<String, Class> - Registry mapping command strings to their respective Command classes\n\nMethods:\n- getInstance() -> Console - Returns the singleton instance of Console, initializing it with default commands if not already created\n- listenOnTCP(int port) -> void - Starts a TCP server on the specified port using Netty framework\n- Adapter: ChannelInboundHandlerAdapter - Inner class handling channel events and command processing\n  - channelRead(ChannelHandlerContext ctx, Object msg) -> void - Processes incoming messages as commands\n  - channelActive(ChannelHandlerContext ctx) -> void - Handles new connection initialization\n  - channelReadComplete(ChannelHandlerContext ctx) -> void - Handles post-read operations\n  - sendStringL(ChannelHandlerContext ctx, String text) -> void - Sends string with newline if missing\n  - sendString(ChannelHandlerContext ctx, String text) -> void - Sends string to client\n  - sendPrompt(ChannelHandlerContext ctx) -> void - Sends command prompt to client\n- Command: abstract static class - Base class for all command implementations\n  - Command(String command) - Constructor taking the command string\n  - execute() -> String - Abstract method to be implemented by concrete commands\n- HelpCommand: static class extends Command - Implements help command\n  - HelpCommand(String command) - Constructor\n  - execute() -> String - Returns help message\n- HelloCommand: static class extends Command - Implements hello command\n  - HelloCommand(String command) - Constructor\n  - execute() -> String - Returns random greeting message\n- DeviceCommand: static class extends Command - Implements device command\n  - DeviceCommand(String command) - Constructor\n  - execute() -> String - Returns device information in JSON format",
    "Canonical_solution": "import com.yeetor.androidcontrol.server.BaseServer;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.lang.reflect.Constructor;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Console {\n\n    private static Console instance;\n    private Map<String, Class> commands;\n\n    public static Console getInstance() {\n        if (instance == null) {\n            instance = new Console();\n            instance.commands = new HashMap<>();\n            instance.commands.put(\"help\", HelpCommand.class);\n            instance.commands.put(\"hello\", HelloCommand.class);\n            instance.commands.put(\"device\", DeviceCommand.class);\n        }\n        return instance;\n    }\n\n    public void listenOnTCP(int port) {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new Adapter());\n                        }\n                    }).option(ChannelOption.SO_BACKLOG, 128)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port);\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    class Adapter extends ChannelInboundHandlerAdapter {\n        \n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n            ByteBuf buf = (ByteBuf) msg;\n            byte[] res = new byte[buf.readableBytes()];\n            buf.readBytes(res);\n            buf.release();\n            \n            String str = new String(res).trim();\n            \n            Class cls = commands.get(str);\n            if (cls != null) {\n                Constructor constructor = cls.getDeclaredConstructor(String.class);\n                constructor.setAccessible(true);\n                Command command = (Command) constructor.newInstance(str);\n                sendStringL(ctx, command.execute());\n            } else {\n                sendString(ctx, \"command not found\\n\");\n            }\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n            sendString(ctx, \"help \u5e2e\u52a9\u63d0\u793a\\r\\nhello \u4eba\u751f\u683c\u8a00\\r\\n\");\n            sendPrompt(ctx);\n        }\n\n        @Override\n        public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n            sendPrompt(ctx);\n        }\n        \n        private void sendStringL(ChannelHandlerContext ctx, String text) {\n            if (!text.endsWith(\"\\n\")) {\n                text += \"\\n\";\n            }\n            sendString(ctx, text);\n        }\n        \n        private void sendString(ChannelHandlerContext ctx, String text) {\n            ByteBuf encoded = ctx.alloc().buffer(4 * text.length());\n            encoded.writeBytes(text.getBytes());\n            ctx.write(encoded);\n            ctx.flush();\n        }\n        \n        private void sendPrompt(ChannelHandlerContext ctx) {\n            sendString(ctx, \"> \");\n        }\n    }\n\n    public abstract static class Command {\n        private String command;\n        public Command(String command) {\n            this.command = command;\n        }\n        public abstract String execute();\n    }\n\n    public static class HelpCommand extends Command {\n        HelpCommand(String command) {\n            super(command);\n        }\n        @Override\n        public String execute() {\n            return \"\u6682\u65f6\u6ca1\u6709\u5e2e\u52a9\uff01\";\n        }\n    }\n\n    public static class HelloCommand extends Command {\n        String[] strings = new String[] {\n                \"Talking is cheap, show me the code!\",\n                \"\u652f\u6301\u4f5c\u8005<http://yeetor.com>\"\n        };\n        HelloCommand(String command) {\n            super(command);\n        }\n        @Override\n        public String execute() {\n            return strings[new java.util.Random().nextInt(strings.length)];\n        }\n    }\n\n    public static class DeviceCommand extends Command {\n        public DeviceCommand(String command) {\n            super(command);\n        }\n        @Override\n        public String execute() {\n            return BaseServer.getDevicesJSON();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Random;\n\npublic class Console {\n    private static Console instance;\n    private final Map<String, Class<? extends Command>> commands = new HashMap<>();\n\n    private Console() {\n        commands.put(\"help\", HelpCommand.class);\n        commands.put(\"hello\", HelloCommand.class);\n        commands.put(\"device\", DeviceCommand.class);\n    }\n\n    public static Console getInstance() {\n        if (instance == null) {\n            instance = new Console();\n        }\n        return instance;\n    }\n\n    public void listenOnTCP(int port) {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(\n                         new StringDecoder(),\n                         new Adapter()\n                     );\n                 }\n             })\n             .bind(port)\n             .sync()\n             .channel()\n             .closeFuture()\n             .sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private class Adapter extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            String message = (String) msg;\n            String[] lines = message.split(\"\\n\");\n            for (String line : lines) {\n                String command = line.trim();\n                if (!command.isEmpty()) {\n                    Class<? extends Command> commandClass = commands.get(command);\n                    if (commandClass != null) {\n                        try {\n                            Command cmd = commandClass.getConstructor(String.class).newInstance(command);\n                            String response = cmd.execute();\n                            sendStringL(ctx, response);\n                        } catch (Exception e) {\n                            sendStringL(ctx, \"Error executing command: \" + e.getMessage());\n                        }\n                    } else {\n                        sendStringL(ctx, \"Unknown command: \" + command);\n                    }\n                }\n            }\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            sendPrompt(ctx);\n        }\n\n        @Override\n        public void channelReadComplete(ChannelHandlerContext ctx) {\n            ctx.flush();\n        }\n\n        private void sendStringL(ChannelHandlerContext ctx, String text) {\n            if (!text.endsWith(\"\\n\")) {\n                text += \"\\n\";\n            }\n            sendString(ctx, text);\n        }\n\n        private void sendString(ChannelHandlerContext ctx, String text) {\n            ctx.writeAndFlush(text);\n        }\n\n        private void sendPrompt(ChannelHandlerContext ctx) {\n            sendStringL(ctx, \"$ \");\n        }\n    }\n\n    public abstract static class Command {\n        protected final String command;\n\n        protected Command(String command) {\n            this.command = command;\n        }\n\n        public abstract String execute();\n    }\n\n    public static class HelpCommand extends Command {\n        public HelpCommand(String command) {\n            super(command);\n        }\n\n        @Override\n        public String execute() {\n            return \"Available commands: help, hello, device\";\n        }\n    }\n\n    public static class HelloCommand extends Command {\n        public HelloCommand(String command) {\n            super(command);\n        }\n\n        @Override\n        public String execute() {\n            String[] greetings = {\"Hello, world!\", \"Hi there!\", \"Greetings!\"};\n            return greetings[new Random().nextInt(greetings.length)];\n        }\n    }\n\n    public static class DeviceCommand extends Command {\n        public DeviceCommand(String command) {\n            super(command);\n        }\n\n        @Override\n        public String execute() {\n            return \"{\\\"device\\\": \\\"server\\\", \\\"ip\\\": \\\"127.0.0.1\\\"}\";\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 203,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections, process requests, and manage server resources efficiently.\n\nClass Description: The MyServer class represents a Netty-based TCP server that listens on a specified port, handles incoming connections using NIO, processes client requests through a pipeline of handlers, and properly manages server resources during startup and shutdown.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nMyServer(int port) -> None - Constructor that initializes the server with the specified port number\nrun() throws Exception -> void - Starts the Netty server, configures the server bootstrap with event loop groups, channel type, pipeline handlers, and socket options. Binds to the specified port and keeps the server running until shutdown is triggered. Properly releases resources during shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyServer {\n\n    private int port;\n\n    public MyServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(\"decoder\", new MyDecoder());\n                     ch.pipeline().addLast(\"encoder\", new MyEncoder());\n                     ch.pipeline().addLast(new MyServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class MyServer {\n    private final int port;\n\n    public MyServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new StringDecoder(), new StringEncoder(), new ServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class ServerHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ctx.write(msg);\n            ctx.flush();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 204,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle object serialization and deserialization for client-server communication, with optional SSL support.\n\nClass Description: ObjectEchoServer is a Netty-based TCP server that listens for incoming connections, handles object serialization/deserialization, and echoes received objects back to clients. It supports optional SSL encryption and uses NIO for non-blocking I/O operations.\n\nAttributes:\n- SSL: [boolean] - Flag indicating whether SSL encryption should be enabled\n- PORT: [int] - The port number on which the server will listen for connections\n- sslCtx: [SslContext] - SSL context for secure communication (nullable)\n\nMethods:\n- start(): [void] - Starts the Netty server, configures the pipeline with necessary handlers (SSL, object encoder/decoder, and business logic handler), and binds to the specified port. Handles resource cleanup on shutdown.\n  Input: None\n  Output: None (throws Exception if startup fails)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.serialization.ClassResolvers;\nimport io.netty.handler.codec.serialization.ObjectDecoder;\nimport io.netty.handler.codec.serialization.ObjectEncoder;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class ObjectEchoServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8007\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    if (sslCtx != null) {\n                        p.addLast(sslCtx.newHandler(ch.alloc()));\n                    }\n                    p.addLast(\n                            new ObjectEncoder(),\n                            new ObjectDecoder(ClassResolvers.cacheDisabled(null)),\n                            new ObjectEchoServerHandler());\n                }\n             });\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.codec.serialization.ObjectDecoder;\nimport io.netty.handler.codec.serialization.ObjectEncoder;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class ObjectEchoServer {\n    private final boolean SSL;\n    private final int PORT;\n    private final SslContext sslCtx;\n\n    public ObjectEchoServer(boolean SSL, int PORT, SslContext sslCtx) {\n        this.SSL = SSL;\n        this.PORT = PORT;\n        this.sslCtx = sslCtx;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (SSL) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new ObjectDecoder(1048576, ClassResolvers.cacheDisabled(null)));\n                     p.addLast(new ObjectEncoder());\n                     p.addLast(new EchoHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class EchoHandler extends SimpleChannelInboundHandler<Object> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n            ctx.write(msg);\n        }\n\n        @Override\n        public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n            ctx.flush();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 205,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling incoming client connections and messages, with proper initialization and graceful shutdown.\n\nClass Description: NettyServer is a Spring component that sets up and manages a Netty-based TCP server. It handles server lifecycle including startup and shutdown, and delegates incoming connection handling to a specified handler initializer.\n\nAttributes:\n- logger: Logger - SLF4J logger for logging server events\n- port: Integer - Port number on which the server will listen (injected from configuration)\n- nettyServerHandlerInitializer: NettyServerHandlerInitializer - Handler for initializing channel pipelines (Spring-injected)\n- bossGroup: EventLoopGroup - Netty event loop group for accepting connections\n- workerGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- channel: Channel - Active server channel instance\n\nMethods:\n- start() -> void - Initializes and starts the Netty server (annotated with @PostConstruct)\n  - Input: None\n  - Output: None\n  - Throws: InterruptedException if thread is interrupted during startup\n- shutdown() -> void - Gracefully shuts down the server (annotated with @PreDestroy)\n  - Input: None\n  - Output: None",
    "Canonical_solution": "import cn.iocoder.springboot.lab67.nettyserverdemo.server.handler.NettyServerHandlerInitializer;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport java.net.InetSocketAddress;\n\n@Component\npublic class NettyServer {\n\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    @Value(\"${netty.port}\")\n    private Integer port;\n\n    @Autowired\n    private NettyServerHandlerInitializer nettyServerHandlerInitializer;\n\n    private EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private EventLoopGroup workerGroup = new NioEventLoopGroup();\n    private Channel channel;\n\n    @PostConstruct\n    public void start() throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .localAddress(new InetSocketAddress(port))\n                .option(ChannelOption.SO_BACKLOG, 1024)\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childOption(ChannelOption.TCP_NODELAY, true)\n                .childHandler(nettyServerHandlerInitializer);\n        ChannelFuture future = bootstrap.bind().sync();\n        if (future.isSuccess()) {\n            channel = future.channel();\n            logger.info(\"[start][Netty Server started on port {}]\", port);\n        }\n    }\n\n    @PreDestroy\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n        }\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\n\n@Component\npublic class NettyServer {\n    private static final Logger logger = LoggerFactory.getLogger(NettyServer.class);\n    @Value(\"${server.port}\")\n    private Integer port;\n    @Autowired\n    private NettyServerHandlerInitializer nettyServerHandlerInitializer;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel channel;\n\n    @PostConstruct\n    public void start() throws InterruptedException {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(nettyServerHandlerInitializer);\n        ChannelFuture f = b.bind(port).sync();\n        channel = f.channel();\n        logger.info(\"Netty server started on port {}\", port);\n    }\n\n    @PreDestroy\n    public void shutdown() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully().syncUninterruptibly();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully().syncUninterruptibly();\n        }\n        logger.info(\"Netty server shutdown gracefully\");\n    }\n}"
  },
  {
    "Task_id": 206,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and messages.\n\nClass Description: SimpleChatServer is a Netty-based TCP server that listens on a specified port for incoming client connections. It uses a boss-worker thread model to handle connections efficiently and provides basic server configuration options.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nSimpleChatServer(int port) -> None - Constructor that initializes the server with the specified port number\nrun() -> void - Starts the server, binds it to the specified port, and keeps it running until shutdown. Handles resource cleanup during shutdown. Throws Exception if any error occurs during server startup or operation.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class SimpleChatServer {\n\n    private int port;\n\n    public SimpleChatServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new SimpleChatServerInitializer())\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n            \n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class SimpleChatServer {\n    private final int port;\n\n    public SimpleChatServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new StringDecoder(), new StringEncoder(), new SimpleChatServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class SimpleChatServerHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            System.out.println(\"Received: \" + msg);\n            ctx.writeAndFlush(msg);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 207,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process their requests.\n\nClass Description: UptimeServer is a Netty-based TCP server that listens on a specified port for incoming client connections. It uses a boss-worker thread model to handle connections efficiently and includes logging for server events. The server remains active until explicitly shut down.\n\nAttributes:\n- PORT: int - The port number on which the server listens for incoming connections (default: 8080)\n- handler: UptimeServerHandler - The custom handler that processes incoming client requests\n\nMethods:\n- main: main(String[] args) -> void - The entry point of the application that configures and starts the Netty server\n  - args: String[] - Command line arguments (unused in this implementation)\n  - throws Exception - May throw exceptions during server startup or operation\n\nThe server uses two NioEventLoopGroups:\n1. bossGroup: Handles accepting new connections\n2. workerGroup: Handles processing of established connections\n\nThe server configuration includes:\n- Channel type: NioServerSocketChannel\n- Logging handler: LogLevel.INFO\n- Custom channel initializer that adds the UptimeServerHandler to the pipeline\n\nThe server binds to the specified port and remains running until shutdown. Resources are cleaned up gracefully on shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic final class UptimeServer {\n    private static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8080\"));\n    private static final UptimeServerHandler handler = new UptimeServerHandler();\n\n    public static void main(String[] args) throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .handler(new LoggingHandler(LogLevel.INFO))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) {\n                            ch.pipeline().addLast(handler);\n                        }\n                    });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class UptimeServer {\n    private static final int PORT = 8080;\n    private final UptimeServerHandler handler;\n\n    public UptimeServer() {\n        this.handler = new UptimeServerHandler();\n    }\n\n    public static void main(String[] args) throws Exception {\n        UptimeServer server = new UptimeServer();\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO));\n                     ch.pipeline().addLast(server.handler);\n                 }\n             });\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}"
  },
  {
    "Task_id": 208,
    "Instruction": "Task Description: Implement a Java class that creates a TCP server using Netty framework to handle HTTP file server functionality, including starting the server, configuring network options, and properly shutting down resources.\n\nClass Description: LoFileServer is a Netty-based HTTP file server that listens on a specified port, handles incoming HTTP requests, and manages server lifecycle operations. It uses Netty's non-blocking I/O model for high performance and includes proper resource cleanup.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\nchannel: Channel - The Netty channel representing the server's listening socket\nLogger: Logger - SLF4J logger instance for logging server events\n\nMethods:\nstart(): void - Starts the Netty server on the specified port. Configures thread groups, channel options, and HTTP pipeline handlers. Throws InterruptedException if the port is already in use or if startup fails.\nshutdown(): void - Gracefully shuts down the server by closing the channel and releasing all associated resources. Handles any interruption during shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class LoFileServer {\n    private static final Logger Logger = LoggerFactory.getLogger(LoFileServer.class);\n    private int port;\n    private Channel channel;\n\n    public LoFileServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        final EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        final EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            final ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, 1024)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.SO_REUSEADDR, true)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .option(ChannelOption.SO_SNDBUF, 1024*1024*10)\n                .option(ChannelOption.SO_RCVBUF, 1024*1024*10)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel socketChannel) throws Exception {\n                        socketChannel.pipeline().addLast(new HttpRequestDecoder());\n                        socketChannel.pipeline().addLast(new HttpResponseEncoder());\n                        socketChannel.pipeline().addLast(new ChunkedWriteHandler());\n                        socketChannel.pipeline().addLast(new HttpObjectAggregator(100 * 1024 * 1024));\n                        socketChannel.pipeline().addLast(new HttpFileServerHandler());\n                    }\n                });\n            \n            channel = b.bind(port).sync().channel();\n            Logger.info(\"Server started on port [{}]\", port);\n        } catch (Exception e) {\n            Logger.error(\"Port {} is already in use\", port);\n            throw e;\n        }\n    }\n\n    public void shutdown() {\n        if (this.channel != null) {\n            this.channel.close();\n            try {\n                this.channel.closeFuture().sync();\n            } catch (InterruptedException e) {\n                Logger.error(\"Error during server shutdown\", e);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class LoFileServer {\n    private final int port;\n    private Channel channel;\n    private final Logger logger;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public LoFileServer(int port) {\n        this.port = port;\n        this.logger = LoggerFactory.getLogger(LoFileServer.class);\n    }\n\n    public void start() throws InterruptedException {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(\n                         new HttpServerCodec(),\n                         new HttpObjectAggregator(65536),\n                         new SimpleChannelInboundHandler<>() {\n                             @Override\n                             protected void channelRead0(ChannelHandlerContext ctx, Object msg) {\n                                 // Placeholder for file serving logic\n                             }\n                         }\n                     );\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            channel = b.bind(port).sync().channel();\n            logger.info(\"Server started on port {}\", port);\n        } catch (InterruptedException e) {\n            logger.error(\"Server start interrupted\", e);\n            throw e;\n        }\n    }\n\n    public void shutdown() {\n        try {\n            if (channel != null) {\n                channel.close().sync();\n            }\n            if (bossGroup != null) {\n                bossGroup.shutdownGracefully().sync();\n            }\n            if (workerGroup != null) {\n                workerGroup.shutdownGracefully().sync();\n            }\n        } catch (InterruptedException e) {\n            logger.error(\"Shutdown interrupted\", e);\n            Thread.currentThread().interrupt();\n        }\n        logger.info(\"Server shutdown completed\");\n    }\n}\n```"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Implement a class that provides anonymous memory allocation capabilities using memory-mapped files, with a fallback to direct byte buffers if memory-mapped files cannot be unlinked.\n\nClass Description: The `AnonAllocator` class is designed to allocate anonymous memory blocks that are not backed by visible files in the filesystem. It attempts to use memory-mapped files that are immediately unlinked (deleted) from the filesystem while remaining accessible through the mapping. If this technique is not supported by the system, it falls back to using direct byte buffers.\n\nAttributes:\n- MAP_AND_UNLINK_SUPPORTED: boolean - A static final flag indicating whether the system supports memory mapping with immediate file unlinking. This is determined during class initialization by testing the capability.\n\nMethods:\n- allocate(int size) -> ByteBuffer - Allocates an anonymous memory block of the specified size. If memory-mapped files with unlinking are supported, it creates a temporary file, maps it into memory, and immediately deletes the file. Otherwise, it falls back to a direct byte buffer allocation. The method returns the allocated ByteBuffer.\n  - Input: size (int) - The size of the memory block to allocate in bytes.\n  - Output: ByteBuffer - The allocated memory block, either as a memory-mapped buffer or a direct byte buffer.",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileChannel.MapMode;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class AnonAllocator {\n\n    static final boolean MAP_AND_UNLINK_SUPPORTED;\n\n    static {\n        Path p = null;\n        boolean result = false;\n        try {\n            ByteBuffer mapped;\n            p = Files.createTempFile(\"unlink-test\", \".tmp\");\n            FileChannel chan = FileChannel.open(p, StandardOpenOption.READ, StandardOpenOption.WRITE);\n            chan.write(ByteBuffer.allocate(4*1024));\n            mapped = chan.map(MapMode.READ_WRITE, 0, 4*1024);\n            chan.close();\n            Files.delete(p);\n            result = mapped.get() == 0;\n        } catch (IOException e) {\n            if(p != null) {\n                Path toDelete = p;\n                Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n                    try {\n                        Files.deleteIfExists(toDelete);\n                    } catch (IOException e1) {\n                        System.err.println(\"could not delete tempfile \"  + toDelete + \", most likely cause: garbage collector did not free the memory mapping keeping it open ; \" + e1.getMessage());\n                    }\n                }));\n            }\n        }\n        MAP_AND_UNLINK_SUPPORTED = result;\n    }\n\n    public static ByteBuffer allocate(int size) {\n        if(MAP_AND_UNLINK_SUPPORTED) {\n            try {\n                Path p = Files.createTempFile(\"anon-mapping\", \".tmp\");\n                ByteBuffer mapped;\n                FileChannel chan = FileChannel.open(p, StandardOpenOption.READ, StandardOpenOption.WRITE);\n                chan.position(size);\n                chan.write(ByteBuffer.allocate(1));\n                mapped = chan.map(MapMode.READ_WRITE, 0, size);\n                chan.close();\n                Files.delete(p);\n                return mapped;\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return ByteBuffer.allocateDirect(size);\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class AnonAllocator {\n    public static final boolean MAP_AND_UNLINK_SUPPORTED;\n\n    static {\n        boolean supported = false;\n        try {\n            Path tempFile = Files.createTempFile(\"anon\", \"tmp\");\n            FileChannel channel = FileChannel.open(tempFile, StandardOpenOption.READ, StandardOpenOption.WRITE);\n            Files.delete(tempFile);\n            MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, 1);\n            buffer.flip();\n            supported = true;\n            channel.close();\n        } catch (Exception e) {\n            supported = false;\n        }\n        MAP_AND_UNLINK_SUPPORTED = supported;\n    }\n\n    public ByteBuffer allocate(int size) {\n        if (MAP_AND_UNLINK_SUPPORTED) {\n            try {\n                Path tempFile = Files.createTempFile(\"anon\", \"tmp\");\n                FileChannel channel = FileChannel.open(tempFile, StandardOpenOption.READ, StandardOpenOption.WRITE);\n                Files.delete(tempFile);\n                MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);\n                return buffer;\n            } catch (Exception e) {\n                return ByteBuffer.allocateDirect(size);\n            }\n        } else {\n            return ByteBuffer.allocateDirect(size);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests. The server should be configurable to listen on a specified port and properly manage its resources.\n\nClass Description: HttpServer is a Netty-based TCP server implementation that handles HTTP requests. It manages server lifecycle including startup, shutdown, and resource cleanup. The server uses a boss-worker thread model for handling connections and requests efficiently.\n\nAttributes:\n- DEFAULT_PORT: int - The default port (8080) to use when no port is specified\n- bossGroup: EventLoopGroup - The parent thread group that accepts incoming connections\n- workerGroup: EventLoopGroup - The child thread group that handles the traffic of accepted connections\n- bootstrap: ServerBootstrap - The server configuration and startup helper class\n\nMethods:\n- start(int port) -> void - Starts the server on the specified port. Initializes thread groups, configures server options, and binds to the port. Throws Exception if startup fails.\n- stop() -> void - Shuts down the server gracefully by releasing all thread resources\n- main(String[] args) -> void - Entry point that parses command line arguments for port number and starts the server",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class HttpServer {\n\n    public static int DEFAULT_PORT = 8080;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public void start(int port) throws Exception {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n\n        try {\n            bootstrap = new ServerBootstrap();\n            bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new HttpServerChannelInitializer())\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"HttpServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            stop();\n        }\n    }\n\n    public void stop() {\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port;\n        try {\n            port = Integer.parseInt(args[0]);\n        } catch (RuntimeException ex) {\n            port = DEFAULT_PORT;\n        }\n\n        HttpServer server = new HttpServer();\n        server.start(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpObject;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class HttpServer {\n    private static final int DEFAULT_PORT = 8080;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public void start(int port) throws Exception {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new HttpServerCodec());\n                        ch.pipeline().addLast(new SimpleChannelInboundHandler<HttpObject>() {\n                            @Override\n                            protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) {\n                                FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n                                ctx.writeAndFlush(response);\n                            }\n                        });\n                    }\n                });\n\n        ChannelFuture future = bootstrap.bind(port).sync();\n        future.channel().closeFuture().sync();\n    }\n\n    public void stop() {\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        int port = DEFAULT_PORT;\n        if (args.length > 0) {\n            try {\n                port = Integer.parseInt(args[0]);\n            } catch (NumberFormatException e) {\n                System.err.println(\"Invalid port number: \" + args[0]);\n                System.exit(1);\n            }\n        }\n        HttpServer server = new HttpServer();\n        try {\n            server.start(port);\n        } catch (Exception e) {\n            System.err.println(\"Failed to start server: \" + e.getMessage());\n            System.exit(1);\n        }\n    }\n}"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling HTTP requests with configurable thread pools and graceful shutdown capabilities.\n\nClass Description: NettySourceHttpServer is a TCP server implementation using Netty framework that handles HTTP requests. It manages server lifecycle (initialization, startup, shutdown) and uses configurable thread pools for handling connections. The server can be initialized with specific query registry and event subject for request processing.\n\nAttributes:\n- workerGroup: [NioEventLoopGroup] - Handles I/O operations and other tasks for accepted connections\n- bossGroup: [NioEventLoopGroup] - Accepts incoming connections with configurable thread count\n- nettyServerRunnable: [Runnable] - Contains the server startup logic\n- isInitialized: [boolean] - Tracks whether the server has been initialized\n- isStarted: [boolean] - Tracks whether the server is running\n\nMethods:\n- [Constructor]([Context context, int threadCount]) -> [void] - Initializes bossGroup with specified thread count and workerGroup with default settings\n- init([QueryRegistry queryRegistry, Subject<String, String> eventSubject, int port]) -> [void] - Configures server bootstrap with HTTP handlers and binding port if not already initialized\n- startServer() -> [void] - Starts the server in a separate thread if initialized but not running, adds shutdown hook\n- shutdownServer() -> [void] - Gracefully shuts down server resources if initialized and running",
    "Canonical_solution": "import io.mantisrx.connector.publish.core.QueryRegistry;\nimport io.mantisrx.runtime.Context;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport rx.subjects.Subject;\n\npublic class NettySourceHttpServer implements SourceHttpServer {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(NettySourceHttpServer.class);\n\n    private final NioEventLoopGroup workerGroup;\n    private final NioEventLoopGroup bossGroup;\n\n    private Runnable nettyServerRunnable;\n    private volatile boolean isInitialized = false;\n    private volatile boolean isStarted = false;\n\n    public NettySourceHttpServer(Context context, int threadCount) {\n        this.bossGroup = new NioEventLoopGroup(threadCount);\n        this.workerGroup = new NioEventLoopGroup();\n    }\n\n    @Override\n    public void init(QueryRegistry queryRegistry, Subject<String, String> eventSubject, int port) {\n        if (!isInitialized) {\n            nettyServerRunnable = () -> {\n                try {\n                    ServerBootstrap b = new ServerBootstrap();\n                    b.option(ChannelOption.SO_BACKLOG, 1024);\n                    b.group(bossGroup, workerGroup)\n                            .channel(NioServerSocketChannel.class)\n                            .childHandler(new HttpServerInitializer(queryRegistry, eventSubject));\n                    Channel ch = b.bind(port).sync().channel();\n                    ch.closeFuture().sync();\n                } catch (Exception e) {\n                    LOGGER.error(e.getMessage());\n                } finally {\n                    bossGroup.shutdownGracefully();\n                    workerGroup.shutdownGracefully();\n                }\n            };\n\n            isInitialized = true;\n        }\n    }\n\n    @Override\n    public void startServer() {\n        if (isInitialized && !isStarted) {\n            ExecutorService executor = Executors.newSingleThreadExecutor();\n            executor.submit(nettyServerRunnable);\n\n            Runtime.getRuntime().addShutdownHook(new Thread(this::shutdownServer));\n\n            isStarted = true;\n        } else {\n            throw new IllegalStateException(\"Server already started\");\n        }\n    }\n\n    @Override\n    public void shutdownServer() {\n        if (isInitialized && isStarted) {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\n\npublic class NettySourceHttpServer {\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final Runnable nettyServerRunnable;\n    private boolean isInitialized;\n    private boolean isStarted;\n\n    public NettySourceHttpServer(Context context, int threadCount) {\n        this.bossGroup = new NioEventLoopGroup(threadCount);\n        this.workerGroup = new NioEventLoopGroup();\n        this.nettyServerRunnable = () -> {\n            try {\n                ChannelFuture future = new ServerBootstrap()\n                        .group(bossGroup, workerGroup)\n                        .channel(NioServerSocketChannel.class)\n                        .childHandler(new ChannelInitializer<SocketChannel>() {\n                            @Override\n                            protected void initChannel(SocketChannel ch) {\n                                ChannelPipeline pipeline = ch.pipeline();\n                                pipeline.addLast(new HttpServerCodec());\n                                pipeline.addLast(new HttpObjectAggregator(65536));\n                                // Add custom handler with queryRegistry and eventSubject\n                            }\n                        })\n                        .bind(8080)\n                        .sync();\n                future.channel().closeFuture().sync();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            } finally {\n                shutdownServer();\n            }\n        };\n        this.isInitialized = false;\n        this.isStarted = false;\n    }\n\n    public void init(QueryRegistry queryRegistry, Subject<String, String> eventSubject, int port) {\n        if (!isInitialized) {\n            // Configuration logic here\n            isInitialized = true;\n        }\n    }\n\n    public void startServer() {\n        if (!isStarted && isInitialized) {\n            new Thread(nettyServerRunnable).start();\n            Runtime.getRuntime().addShutdownHook(new Thread(this::shutdownServer));\n            isStarted = true;\n        }\n    }\n\n    public void shutdownServer() {\n        if (isStarted && isInitialized) {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n            isStarted = false;\n            isInitialized = false;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 212,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process requests.\n\nClass Description: The TimeServer class is a Netty-based TCP server that listens on a specified port for incoming client connections. It uses Netty's event-driven architecture to efficiently handle multiple concurrent connections with non-blocking I/O operations.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nConstructor: TimeServer(int port) -> void - Initializes the server with the specified port number\nrun: run() -> void - Starts the server, configures Netty components, and begins listening for connections\nmain: main(String[] args) -> void - Entry point that creates and starts the server instance, using port 8080 by default or a specified port from command line arguments",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class TimeServer {\n\n    private int port;\n\n    public TimeServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new TimeServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        } else {\n            port = 8080;\n        }\n        new TimeServer(port).run();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class TimeServer {\n    private final int port;\n\n    public TimeServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline pipeline = ch.pipeline();\n                     pipeline.addLast(new StringDecoder());\n                     pipeline.addLast(new StringEncoder());\n                     pipeline.addLast(new TimeServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = 8080;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        new TimeServer(port).run();\n    }\n}\n\nclass TimeServerHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRead(io.netty.channel.ChannelHandlerContext ctx, Object msg) {\n        String request = (String) msg;\n        String response = java.time.LocalTime.now().toString();\n        ctx.writeAndFlush(response);\n    }\n\n    @Override\n    public void exceptionCaught(io.netty.channel.ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 214,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle client connections and process requests, with optional SSL support for secure communication.\n\nClass Description: FactorialServer is a Netty-based TCP server that listens on a specified port for incoming client connections. It supports optional SSL encryption and uses a boss-worker thread model for efficient connection handling. The server remains active until explicitly shut down, gracefully releasing all resources upon termination.\n\nAttributes:\n- SSL: [boolean] - Flag indicating whether SSL encryption should be enabled\n- PORT: [int] - The port number on which the server will listen for connections\n- sslCtx: [SslContext] - SSL context for secure communication (nullable)\n\nMethods:\n- main: [main(String[] args)] -> [void] - Entry point that initializes and starts the server. Handles SSL configuration if enabled, sets up event loop groups, configures server bootstrap, and manages server lifecycle.\n  - Input: String[] args - Command line arguments\n  - Output: void",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class FactorialServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8322\"));\n\n    public static void main(String[] args) throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new FactorialServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\n\nimport javax.net.ssl.SSLException;\n\npublic class FactorialServer {\n    private final boolean ssl;\n    private final int port;\n    private final SslContext sslCtx;\n\n    public FactorialServer(boolean ssl, int port) {\n        this.ssl = ssl;\n        this.port = port;\n        this.sslCtx = null;\n    }\n\n    public static void main(String[] args) {\n        int port = 8080;\n        boolean ssl = false;\n\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        if (args.length > 1 && args[1].equalsIgnoreCase(\"ssl\")) {\n            ssl = true;\n        }\n\n        FactorialServer server = new FactorialServer(ssl, port);\n        server.start();\n    }\n\n    private void start() {\n        SslContext sslCtx = null;\n        if (ssl) {\n            try {\n                sslCtx = SslContextBuilder.forServer(\"path/to/cert.pem\", \"path/to/key.pem\").build();\n            } catch (SSLException e) {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     if (ssl) {\n                         ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     ch.pipeline().addLast(new FactorialHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n\nclass FactorialHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        ctx.write(msg);\n        ctx.flush();\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 215,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP file uploads, with optional SSL support for secure connections.\n\nClass Description: HttpUploadServer is a Netty-based server that listens for incoming HTTP connections and handles file upload requests. It supports both secure (HTTPS) and non-secure (HTTP) connections, configurable via system properties.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL should be enabled (read from system property \"ssl\")\n- PORT: int - The port number the server will listen on (read from system property \"port\", defaults to 8443 for SSL or 8080 for non-SSL)\n\nMethods:\n- main(String[] args) -> void - Entry point of the application that sets up and runs the Netty server\n  - args: String[] - Command line arguments (not directly used)\n  - return: void\n\nThe method performs the following operations:\n1. Configures SSL context if SSL is enabled\n2. Creates event loop groups for handling connections\n3. Sets up server bootstrap with channel type and handlers\n4. Binds to the specified port and starts the server\n5. Keeps the server running until shutdown\n6. Cleans up resources on shutdown",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class HttpUploadServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8443\" : \"8080\"));\n\n    public static void main(String[] args) throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup);\n            b.channel(NioServerSocketChannel.class);\n            b.handler(new LoggingHandler(LogLevel.INFO));\n            b.childHandler(new HttpUploadServerInitializer(sslCtx));\n\n            Channel ch = b.bind(PORT).sync().channel();\n\n            System.err.println(\"Open your web browser and navigate to \" +\n                    (SSL? \"https\" : \"http\") + \"://127.0.0.1:\" + PORT + '/');\n\n            ch.closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.HttpMethod;\nimport io.netty.handler.codec.http.HttpUtil;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.buffer.Unpooled;\nimport io.netty.util.CharsetUtil;\n\npublic class HttpUploadServer {\n    private static final boolean SSL = Boolean.getBoolean(\"ssl\");\n    private static final int PORT = Integer.getInteger(\"port\", SSL ? 8443 : 8080);\n\n    public static void main(String[] args) throws Exception {\n        SslContext sslCtx = null;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forServer(\"keystore.jks\", \"password\", \"password\").build();\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ChannelPipeline pipeline = ch.pipeline();\n                     if (sslCtx != null) {\n                         pipeline.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     pipeline.addLast(new HttpServerCodec());\n                     pipeline.addLast(new HttpObjectAggregator(65536));\n                     pipeline.addLast(new FileUploadHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    static class FileUploadHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) {\n            if (request.method() == HttpMethod.POST && request.uri().equals(\"/upload\")) {\n                // Handle file upload logic here\n                ctx.writeAndFlush(new DefaultFullHttpResponse(request.protocolVersion(), HttpResponseStatus.OK, Unpooled.wrappedBuffer(\"File uploaded successfully\".getBytes(CharsetUtil.UTF_8))));\n            } else {\n                ctx.writeAndFlush(new DefaultFullHttpResponse(request.protocolVersion(), HttpResponseStatus.NOT_FOUND));\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 216,
    "Instruction": "Task Description: Create a Java class that implements an HTTP test server using Netty framework to handle incoming HTTP requests, process them with a custom handler, and return appropriate responses.\n\nClass Description: HttpTestServer is a Netty-based HTTP server designed for testing purposes. It handles incoming HTTP requests, processes them using a customizable request handler, and returns JSON responses. The server can be configured to simulate failures and include custom headers in responses.\n\nAttributes:\n- port: int - The port number on which the server will listen\n- fail: boolean - Flag to determine if server should respond with failure status\n- requestHandler: BiConsumer<HttpRequest, JsonGenerator> - Custom handler for processing requests and generating JSON responses\n- headers: Map<String, String> - Optional custom headers to include in responses\n- channel: Channel - Netty channel for server communication\n- group: NioEventLoopGroup - Netty event loop group for handling I/O operations\n- responses: List<String> - Stores all generated responses for testing purposes\n- JSON_FACTORY: JsonFactory - Static Jackson JSON factory for JSON processing\n\nMethods:\n- HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler, Map<String, String> headers) - Constructor with all parameters\n- HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler) - Constructor without headers parameter\n- run() -> void - Starts the server and binds it to the specified port\n- boundPort() -> int - Returns the actual port the server is bound to\n- shutDown() -> void - Gracefully shuts down the server and releases resources\n- HttpTestServerHandler (inner class) - Handles incoming HTTP requests and generates responses",
    "Canonical_solution": "import java.io.ByteArrayOutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.InetSocketAddress;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.BiConsumer;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.jetbrains.annotations.Nullable;\n\nimport com.fasterxml.jackson.core.JsonEncoding;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParser;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.EmptyHttpHeaders;\nimport io.netty.handler.codec.http.HttpContentCompressor;\nimport io.netty.handler.codec.http.HttpHeaders;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.util.ReferenceCountUtil;\n\npublic class HttpTestServer {\n\n    private final int port;\n    private final boolean fail;\n    private final BiConsumer<HttpRequest, JsonGenerator> requestHandler;\n    private static final JsonFactory JSON_FACTORY;\n    private Channel channel;\n    private NioEventLoopGroup group;\n    public List<String> responses = new ArrayList<>();\n    @Nullable\n    private final Map<String, String> headers;\n\n    static {\n        JSON_FACTORY = new JsonFactory();\n        JSON_FACTORY.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n        JSON_FACTORY.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, true);\n        JSON_FACTORY.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n    }\n\n    public HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler, @Nullable Map<String, String> headers) {\n        this.port = port;\n        this.fail = fail;\n        this.requestHandler = requestHandler;\n        this.headers = headers;\n    }\n\n    public HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler) {\n        this(port, fail, requestHandler, null);\n    }\n\n    public void run() throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        group = new NioEventLoopGroup();\n        bootstrap.group(group);\n        bootstrap.channel(NioServerSocketChannel.class);\n        bootstrap.childHandler(new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel ch) {\n                ChannelPipeline pipeline = ch.pipeline();\n                pipeline.addLast(\"decoder\", new HttpRequestDecoder());\n                pipeline.addLast(\"encoder\", new HttpResponseEncoder());\n                pipeline.addLast(\"deflater\", new HttpContentCompressor());\n                pipeline.addLast(\"handler\", new HttpTestServerHandler());\n            }\n        });\n        channel = bootstrap.bind(new InetSocketAddress(port)).sync().channel();\n    }\n\n    public int boundPort() {\n        InetSocketAddress localAddress = (InetSocketAddress) channel.localAddress();\n        return localAddress.getPort();\n    }\n\n    public void shutDown() {\n        channel.close().awaitUninterruptibly();\n        if (group != null) {\n            group.shutdownGracefully().awaitUninterruptibly();\n            group.terminationFuture().awaitUninterruptibly();\n            group = null;\n        }\n    }\n\n    @ChannelHandler.Sharable\n    public class HttpTestServerHandler extends SimpleChannelInboundHandler<Object> {\n        private final Logger logger = LogManager.getLogger(HttpTestServerHandler.class.getName());\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n            if (!(msg instanceof HttpRequest)) {\n                ctx.fireChannelRead(msg);\n                return;\n            }\n            try {\n                handleHttpRequest(ctx, (HttpRequest) msg);\n            } finally {\n                ReferenceCountUtil.release(msg);\n            }\n        }\n\n        private void handleHttpRequest(ChannelHandlerContext ctx, HttpRequest msg) throws UnsupportedEncodingException {\n            String uri = msg.uri();\n            logger.debug(\"Got Request for \" + uri);\n            HttpResponseStatus status = fail ? HttpResponseStatus.BAD_REQUEST : HttpResponseStatus.OK;\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\n            try {\n                JsonGenerator generator = JSON_FACTORY.createGenerator(out, JsonEncoding.UTF8);\n                requestHandler.accept(msg, generator);\n            } catch (Exception ex) {\n                status = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n            }\n            ByteBuf byteBuf = Unpooled.wrappedBuffer(out.toByteArray());\n            responses.add(out.toString(StandardCharsets.UTF_8));\n\n            DefaultFullHttpResponse response;\n            if (headers != null && headers.isEmpty() == false) {\n                HttpHeaders httpHeaders = new DefaultHttpHeaders();\n                for (var entries : headers.entrySet()) {\n                    httpHeaders.add(entries.getKey(), entries.getValue());\n                }\n                response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, status, byteBuf, httpHeaders, EmptyHttpHeaders.INSTANCE);\n            } else {\n                response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, status, byteBuf);\n            }\n\n            ChannelFuture future = ctx.channel().writeAndFlush(response);\n            future.addListener(ChannelFutureListener.CLOSE);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            logger.warn(\"Unexpected exception from downstream.\", cause);\n            ctx.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.util.CharsetUtil;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.BiConsumer;\n\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n\npublic class HttpTestServer {\n    private final int port;\n    private final boolean fail;\n    private final BiConsumer<HttpRequest, JsonGenerator> requestHandler;\n    private final Map<String, String> headers;\n    private Channel channel;\n    private EventLoopGroup group;\n    private final List<String> responses;\n    private static final JsonFactory JSON_FACTORY = new JsonFactory();\n\n    public HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler, Map<String, String> headers) {\n        this.port = port;\n        this.fail = fail;\n        this.requestHandler = requestHandler;\n        this.headers = headers;\n        this.responses = new ArrayList<>();\n    }\n\n    public HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler) {\n        this(port, fail, requestHandler, new HashMap<>());\n    }\n\n    public void run() throws Exception {\n        group = new NioEventLoopGroup();\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(group)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) {\n                 ch.pipeline().addLast(\n                     new HttpServerCodec(),\n                     new HttpTestServerHandler()\n                 );\n             }\n         });\n        channel = b.bind(port).sync().channel();\n    }\n\n    public int boundPort() {\n        return channel.localAddress() instanceof InetSocketAddress ? ((InetSocketAddress) channel.localAddress()).getPort() : -1;\n    }\n\n    public void shutDown() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    private class HttpTestServerHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof HttpRequest) {\n                HttpRequest request = (HttpRequest) msg;\n                FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n                if (fail) {\n                    response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.INTERNAL_SERVER_ERROR);\n                }\n                for (Map.Entry<String, String> entry : headers.entrySet()) {\n                    response.headers().set(entry.getKey(), entry.getValue());\n                }\n                try {\n                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                    JsonGenerator generator = JSON_FACTORY.createGenerator(baos);\n                    generator.setPrettyPrinter(new DefaultPrettyPrinter());\n                    requestHandler.accept(request, generator);\n                    generator.flush();\n                    ByteBuf content = Unpooled.copiedBuffer(baos.toByteArray(), CharsetUtil.UTF_8);\n                    response.content().writeBytes(content);\n                    baos.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                responses.add(response.content().toString(CharsetUtil.UTF_8));\n                ctx.writeAndFlush(response);\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 217,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process serialized data.\n\nClass Description: SerializationServer is a Netty-based TCP server that listens on a specified port for incoming connections, processes serialized data through a custom pipeline, and manages server resources efficiently.\n\nAttributes:\nPORT: static final int - The port number on which the server will listen for incoming connections (default: 8082)\n\nMethods:\nstart(): void - Starts the Netty TCP server with the following behavior:\n1. Creates boss and worker event loop groups for connection handling\n2. Configures server bootstrap with NIO transport channel\n3. Sets server options (backlog and keepalive)\n4. Adds logging handler and custom pipeline initializer\n5. Binds to the specified port and waits for server shutdown\n6. Cleans up resources on shutdown\n\nInput: None (The port is defined as a class constant)\n\nOutput: None (The method runs indefinitely until server shutdown)\n\nNote: The class requires proper exception handling for server operations and resource cleanup in finally block. The actual data processing is handled by a separate SerializationServerInitializer class which should be provided separately.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic final class SerializationServer {\n\n    static final int PORT = 8082;\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .option(ChannelOption.SO_BACKLOG, 100)\n             .childOption(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new SerializationServerInitializer());\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class SerializationServer {\n    public static final int PORT = 8082;\n\n    public void start() {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO));\n                     ch.pipeline().addLast(new SerializationServerInitializer());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}"
  },
  {
    "Task_id": 218,
    "Instruction": "Task Description: Create a Java class that implements a secure TCP chat server using Netty framework, supporting SSL/TLS encryption for secure communication between clients and the server.\n\nClass Description: SecureChatServer is a Netty-based TCP server that handles secure chat communications. It initializes SSL context, configures server bootstrap with event loop groups, and manages server lifecycle including graceful shutdown.\n\nAttributes:\nPORT: int - The port number on which the server listens for incoming connections (default: 8992)\nsslCtx: SslContext - The SSL context used for secure communication\nbossGroup: EventLoopGroup - The parent event loop group that accepts incoming connections\nworkerGroup: EventLoopGroup - The child event loop group that handles the traffic of accepted connections\n\nMethods:\nmain: main(String[] args) -> void - Entry point that initializes SSL context, configures server, binds to port, and manages server lifecycle\n    - args: String[] - Command line arguments (unused in this implementation)\n    - No explicit return value (void)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class SecureChatServer {\n\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8992\"));\n\n    public static void main(String[] args) throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        SslContext sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey())\n            .build();\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new SecureChatServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.cert.X509Certificate;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Locale;\nimport java.util.Random;\nimport javax.net.ssl.KeyStore;\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.bouncycastle.x509.X509V3CertificateGenerator;\n\npublic class SecureChatServer {\n    private static final int PORT = 8992;\n    private final SslContext sslCtx;\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n\n    public SecureChatServer() throws Exception {\n        sslCtx = createSslContext();\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n    }\n\n    private static SslContext createSslContext() throws Exception {\n        Security.addProvider(new BouncyCastleProvider());\n        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n        kpg.initialize(2048);\n        KeyPair keyPair = kpg.generateKeyPair();\n        X509Certificate cert = generateSelfSignedCertificate(keyPair);\n        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n        keyStore.load(null, null);\n        keyStore.setKeyEntry(\"server\", keyPair.getPrivate(), \"password\".toCharArray(), new Certificate[]{cert});\n        return SslContextBuilder.forServer(keyStore, \"password\").build();\n    }\n\n    private static X509Certificate generateSelfSignedCertificate(KeyPair keyPair) throws Exception {\n        String dn = \"CN=localhost\";\n        Calendar calendar = new GregorianCalendar();\n        calendar.add(Calendar.YEAR, 1);\n        Date notAfter = calendar.getTime();\n        Date notBefore = new Date();\n        BigInteger serial = new BigInteger(64, new Random());\n        X509V3CertificateGenerator certGen = new X509V3CertificateGenerator();\n        certGen.setSerialNumber(serial);\n        certGen.setSubjectDN(new X500Principal(dn));\n        certGen.setIssuerDN(new X500Principal(dn));\n        certGen.setNotBefore(notBefore);\n        certGen.setNotAfter(notAfter);\n        certGen.setPublicKey(keyPair.getPublic());\n        certGen.setSignatureAlgorithm(\"SHA256WithRSAEncryption\");\n        return certGen.generate(keyPair.getPrivate());\n    }\n\n    public void start() throws Exception {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) {\n                 ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n                 ch.pipeline().addLast(new SecureChatHandler());\n             }\n         });\n        ChannelFuture f = b.bind(PORT).sync();\n        f.channel().closeFuture().sync();\n    }\n\n    public void shutdown() {\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        SecureChatServer server = new SecureChatServer();\n        try {\n            server.start();\n        } finally {\n            server.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 219,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests, with optional SSL support for secure connections.\n\nClass Description: The HttpHelloWorldServer class is a Netty-based TCP server that listens for HTTP requests on a specified port. It supports both plain HTTP and HTTPS (when SSL is enabled) connections. The server uses a boss-worker thread model for handling connections and includes logging capabilities.\n\nAttributes:\n- SSL: static final boolean - Flag indicating whether SSL should be enabled\n- PORT: static final int - The port number on which the server will listen\n\nMethods:\n- start(): void - Starts the Netty TCP server. Throws Exception if any error occurs during startup.\n  - Input: None\n  - Output: None (but starts the server process)\n  - Description: Initializes SSL context if enabled, sets up event loop groups, configures server bootstrap with channel options and handlers, binds to the specified port, and keeps the server running until shutdown. Properly cleans up resources on shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class HttpHelloWorldServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8443\" : \"8080\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.option(ChannelOption.SO_BACKLOG, 1024);\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new HttpHelloWorldServerInitializer(sslCtx));\n\n            Channel ch = b.bind(PORT).sync().channel();\n\n            System.err.println(\"Open your web browser and navigate to \" +\n                    (SSL? \"https\" : \"http\") + \"://127.0.0.1:\" + PORT + '/');\n\n            ch.closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.buffer.Unpooled;\nimport io.netty.util.CharsetUtil;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class HttpHelloWorldServer {\n    public static final boolean SSL = true;\n    public static final int PORT = 8080;\n\n    public void start() throws Exception {\n        SslContext sslCtx = null;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forServer(new java.io.File(\"server.crt\"), new java.io.File(\"server.key\")).build();\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline pipeline = ch.pipeline();\n                     if (sslCtx != null) {\n                         pipeline.addLast(\"ssl\", new SslHandler(sslCtx.newHandler(ch.alloc())));\n                     }\n                     pipeline.addLast(\"codec\", new HttpServerCodec());\n                     pipeline.addLast(\"aggregator\", new HttpObjectAggregator(65536));\n                     pipeline.addLast(\"handler\", new HttpHelloWorldHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class HttpHelloWorldHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) throws Exception {\n            ByteBuf content = Unpooled.copiedBuffer(\"Hello World\", CharsetUtil.UTF_8);\n            FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);\n            response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/plain\");\n            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());\n            ctx.writeAndFlush(response);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 220,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle client connections and process requests, with optional SSL support for secure communication.\n\nClass Description: The FactorialServer class is a Netty-based TCP server that listens for incoming client connections on a specified port. It supports both plain and SSL-encrypted connections, and uses a separate initializer class to configure the channel pipeline for request processing.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be enabled\n- PORT: int - The port number on which the server will listen for connections\n\nMethods:\n- start(): void - Starts the Netty TCP server with the configured settings. Handles server initialization, binding to the specified port, and proper resource cleanup on shutdown. Throws Exception if any error occurs during server startup.\n\nInput: None (Configuration is done through system properties: \"ssl\" for enabling SSL and \"port\" for specifying the server port)\n\nOutput: None (The server runs continuously until shutdown)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class FactorialServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8322\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContext.newServerContext(ssc.certificate(), ssc.privateKey());\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new FactorialServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class FactorialServer {\n    private final boolean ssl;\n    private final int port;\n\n    public FactorialServer() {\n        this.ssl = Boolean.getBoolean(\"ssl\");\n        this.port = Integer.getInteger(\"port\", 8080);\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new FactorialServerInitializer());\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private class FactorialServerInitializer extends ChannelInitializer<SocketChannel> {\n        @Override\n        protected void initChannel(SocketChannel ch) {\n            ChannelPipeline pipeline = ch.pipeline();\n            if (ssl) {\n                try {\n                    SelfSignedCertificate cert = new SelfSignedCertificate();\n                    SslContext sslContext = SslContextBuilder.forServer(cert.key(), cert.cert()).build();\n                    pipeline.addLast(\"ssl\", sslContext.newHandler(ch.alloc()));\n                } catch (Exception e) {\n                    throw new RuntimeException(\"SSL context creation failed\", e);\n                }\n            }\n            pipeline.addLast(\"decoder\", new StringDecoder());\n            pipeline.addLast(\"encoder\", new StringEncoder());\n            pipeline.addLast(\"handler\", new FactorialHandler());\n        }\n    }\n\n    private static class FactorialHandler extends SimpleChannelInboundHandler<String> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, String msg) {\n            try {\n                int number = Integer.parseInt(msg);\n                long result = 1;\n                for (int i = 2; i <= number; i++) {\n                    result *= i;\n                }\n                ctx.writeAndFlush(result + \"\\n\");\n            } catch (NumberFormatException e) {\n                ctx.writeAndFlush(\"Invalid input\\n\");\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 221,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of starting and stopping the server, and handling incoming client connections through a configurable pipeline.\n\nClass Description: MocoServer is a Netty-based TCP server implementation that provides simple start/stop functionality and allows for custom channel pipeline configuration. It manages server resources including event loop groups and channel futures.\n\nAttributes:\n- group: [EventLoopGroup] - Netty event loop group for handling I/O operations\n- future: [ChannelFuture] - Future representing the server's channel binding operation\n\nMethods:\n- MocoServer() -> [void] - Constructor that initializes the event loop group\n- start([int port, ChannelInitializer<? extends Channel> pipelineFactory]) -> [int] - Starts the server on specified port with given pipeline configuration, returns actual bound port\n- stop() -> [void] - Stops the server gracefully, releasing all resources",
    "Canonical_solution": "import com.github.dreamhead.moco.MocoException;\nimport com.github.dreamhead.moco.util.MocoExecutors;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.concurrent.Future;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.util.concurrent.TimeUnit;\n\npublic final class MocoServer {\n    private EventLoopGroup group;\n    private ChannelFuture future;\n\n    public MocoServer() {\n        group = new NioEventLoopGroup(0, MocoExecutors.executor());\n    }\n\n    public int start(final int port, final ChannelInitializer<? extends Channel> pipelineFactory) {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(group)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(pipelineFactory);\n\n        try {\n            future = bootstrap.bind(port).sync();\n            SocketAddress socketAddress = future.channel().localAddress();\n            return ((InetSocketAddress) socketAddress).getPort();\n        } catch (InterruptedException e) {\n            throw new MocoException(e);\n        }\n    }\n\n    public void stop() {\n        if (future != null) {\n            future.channel().close().syncUninterruptibly();\n            future = null;\n        }\n\n        if (group != null) {\n            Future<?> groupFuture = group.shutdownGracefully(0, 0, TimeUnit.SECONDS);\n            try {\n                groupFuture.get();\n            } catch (Exception e) {\n                throw new IllegalStateException(e);\n            }\n            group = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MocoServer {\n    private EventLoopGroup group;\n    private ChannelFuture future;\n\n    public MocoServer() {\n        this.group = new NioEventLoopGroup();\n    }\n\n    public int start(int port, ChannelInitializer<? extends Channel> pipelineFactory) throws Exception {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(group)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(pipelineFactory);\n\n        future = b.bind(port).sync();\n        return future.channel().localAddress().getPort();\n    }\n\n    public void stop() {\n        if (future != null) {\n            try {\n                future.channel().close().sync();\n                group.shutdownGracefully().sync();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 223,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling both secure (SSL) and non-secure connections on the same port.\n\nClass Description: PortUnificationServer is a Netty-based TCP server that listens on a specified port and can handle both SSL and plaintext connections through port unification. It uses a boss-worker thread model for efficient connection handling.\n\nAttributes:\nPORT: int - The port number on which the server will listen for incoming connections (default: 8080)\n\nMethods:\nmain: main(String[] args) -> void - The entry point of the application that:\n1. Creates a self-signed SSL certificate for testing\n2. Sets up Netty's event loop groups\n3. Configures the server bootstrap with channel type and handlers\n4. Binds to the specified port and starts the server\n5. Handles graceful shutdown of resources\n\nThe method throws Exception to handle potential errors during server setup and operation.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class PortUnificationServer {\n\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8080\"));\n\n    public static void main(String[] args) throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        final SslContext sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey())\n            .build();\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new PortUnificationServerHandler(sslCtx));\n                }\n            });\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.util.CharsetUtil;\n\nimport java.security.KeyPair;\nimport java.security.KeyPairGenerator;\nimport java.security.Security;\nimport java.security.cert.X509Certificate;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\nimport org.bouncycastle.x509.X509V3CertificateGenerator;\nimport org.bouncycastle.jce.X509CertificateHolder;\nimport org.bouncycastle.operator.ContentSigner;\nimport org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\nimport org.bouncycastle.cert.X509v3CertificateBuilder;\nimport org.bouncycastle.cert.jcajce.JcaX509CertificateConverter;\n\npublic class PortUnificationServer {\n    private static final int PORT = 8080;\n\n    public static void main(String[] args) throws Exception {\n        int port = (args.length > 0) ? Integer.parseInt(args[0]) : PORT;\n\n        // Generate self-signed certificate\n        SslContext sslContext = createSelfSignedSslContext();\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new SslDetectorHandler(sslContext));\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static SslContext createSelfSignedSslContext() throws Exception {\n        Security.addProvider(new BouncyCastleProvider());\n\n        // Generate key pair\n        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n        keyGen.initialize(2048);\n        KeyPair keyPair = keyGen.generateKeyPair();\n\n        // Create self-signed certificate\n        X509Certificate cert = generateSelfSignedCertificate(keyPair);\n\n        // Create KeyStore\n        java.security.KeyStore keyStore = java.security.KeyStore.getInstance(java.security.KeyStore.getDefaultType());\n        keyStore.load(null, null);\n        keyStore.setKeyEntry(\"server\", keyPair.getPrivate(), \"password\".toCharArray(), new java.security.cert.Certificate[]{cert});\n\n        // Create SslContext\n        SslContext sslContext = SslContextBuilder.forServer(keyStore, \"password\".toCharArray()).build();\n\n        return sslContext;\n    }\n\n    private static X509Certificate generateSelfSignedCertificate(KeyPair keyPair) throws Exception {\n        String dnName = \"CN=localhost\";\n        Calendar calendar = Calendar.getInstance();\n        calendar.add(Calendar.YEAR, 1);\n        Date notAfter = calendar.getTime();\n\n        X509V3CertificateGenerator certGen = new X509V3CertificateGenerator();\n        certGen.setSerialNumber(BigInteger.valueOf(System.currentTimeMillis()));\n        certGen.setSubjectDN(new java.security.cert.X500Principal(dnName));\n        certGen.setIssuerDN(new java.security.cert.X500Principal(dnName));\n        certGen.setNotBefore(new Date());\n        certGen.setNotAfter(notAfter);\n        certGen.setPublicKey(keyPair.getPublic());\n        certGen.setSignatureAlgorithm(\"SHA256WithRSAEncryption\");\n\n        return certGen.generate(keyPair.getPrivate(), \"BC\");\n    }\n\n    static class SslDetectorHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        private final SslContext sslContext;\n\n        public SslDetectorHandler(SslContext sslContext) {\n            this.sslContext = sslContext;\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ByteBuf buf = (ByteBuf) msg;\n            if (buf.readableBytes() >= 1) {\n                byte firstByte = buf.getByte(0);\n                if (firstByte == (byte) 0x16) { // TLS handshake\n                    // Add SslHandler\n                    ctx.pipeline().addFirst(\"ssl\", new SslHandler(sslContext.newEngine(ctx.channel().alloc())));\n                    // Remove this handler\n                    ctx.pipeline().remove(this);\n                    // Pass the message to the next handler (SslHandler)\n                    ctx.fireChannelRead(msg);\n                } else {\n                    // Add PlaintextHandler\n                    ctx.pipeline().addFirst(\"plaintext\", new PlaintextHandler());\n                    ctx.pipeline().remove(this);\n                    ctx.fireChannelRead(msg);\n                }\n            } else {\n                // Not enough data, maybe wait for more\n                ctx.fireChannelRead(msg);\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n\n    static class PlaintextHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ByteBuf buf = (ByteBuf) msg;\n            System.out.println(\"Received plaintext: \" + buf.toString(CharsetUtil.UTF_8));\n            ctx.writeAndFlush(buf.retain());\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 224,
    "Instruction": "Task Description: Create a Java class that implements a WebSocket server using Netty framework to handle WebSocket connections and messages.\n\nClass Description: The WebSocketServer class is responsible for initializing and running a Netty-based WebSocket server. It configures the server with appropriate handlers for HTTP and WebSocket protocols, manages connection threads, and binds to a specified port.\n\nAttributes:\n- initParamDTO: InitParamDTO - Configuration parameters for the server including port number and thread counts\n\nMethods:\n- WebSocketServer(InitParamDTO initParamDTO) -> None - Constructor that initializes the server with configuration parameters\n- run() -> None - Starts the WebSocket server, configures the pipeline with necessary handlers, and binds to the specified port",
    "Canonical_solution": "import com.cf.carpark.service.core.dto.InitParamDTO;\nimport com.cf.carpark.service.websocket.handler.WebSocketFrameHandler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.util.CharsetUtil;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.net.InetSocketAddress;\n\n@Slf4j\npublic class WebSocketServer {\n\n    private InitParamDTO initParamDTO;\n\n    public void run() {\n        EventLoopGroup boosGroup = new NioEventLoopGroup(initParamDTO.getBoosTread());\n        EventLoopGroup workGroup = new NioEventLoopGroup(initParamDTO.getWorkTread());\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            InitParamDTO initParamDTO = this.initParamDTO;\n            serverBootstrap.group(boosGroup, workGroup).channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel socketChannel) throws Exception {\n                            ChannelPipeline pipeline = socketChannel.pipeline();\n\n                            pipeline.addLast(new HttpServerCodec());\n                            pipeline.addLast(new ChunkedWriteHandler());\n                            pipeline.addLast(new StringDecoder(CharsetUtil.UTF_8));\n                            pipeline.addLast(new StringEncoder(CharsetUtil.UTF_8));\n                            pipeline.addLast(new HttpObjectAggregator(1024 * 1024));\n                            pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n                            pipeline.addLast(new WebSocketFrameHandler(initParamDTO));\n                        }\n                    });\n\n            ChannelFuture channelFuture = serverBootstrap.bind(new InetSocketAddress(this.initParamDTO.getPort()))\n                    .addListener(future -> {\n                        log.info(\"\u670d\u52a1\u7aef\u6210\u529f\u7ed1\u5b9a\u7aef\u53e3\u53f7={}\", this.initParamDTO.getPort());\n                    });\n        } catch (Exception e) {\n            boosGroup.shutdownGracefully();\n            workGroup.shutdownGracefully();\n            log.error(\"websocketServer\u542f\u52a8\u5931\u8d25:{}\", e);\n        }\n    }\n\n    public WebSocketServer(InitParamDTO initParamDTO) {\n        this.initParamDTO = initParamDTO;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class WebSocketServer {\n    private final InitParamDTO initParamDTO;\n\n    public WebSocketServer(InitParamDTO initParamDTO) {\n        this.initParamDTO = initParamDTO;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(initParamDTO.getBossThreadCount());\n        EventLoopGroup workerGroup = new NioEventLoopGroup(initParamDTO.getWorkerThreadCount());\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(\n                         new HttpServerCodec(),\n                         new WebSocketServerProtocolHandler(\"/ws\"),\n                         new WebSocketHandler()\n                     );\n                 }\n             });\n\n            ChannelFuture f = b.bind(initParamDTO.getPort()).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 225,
    "Instruction": "Task Description: Implement a WebSocket proxy server using Java Netty framework to handle WebSocket connections and manage client-server communication.\n\nClass Description: WebsocketProxy is a class that implements a Proxy interface and provides functionality to start a WebSocket server on a specified port. It handles WebSocket protocol upgrades, HTTP requests, and manages client connections with proper resource cleanup.\n\nAttributes:\n- None (All variables are local to methods)\n\nMethods:\n- start(int port) -> void - Starts the WebSocket server on the specified port. Initializes event loop groups, configures server bootstrap with appropriate channel and handlers, binds to the port, and manages server lifecycle including graceful shutdown. Throws InterruptedException if the thread is interrupted during server operation.\n\nInput:\n- port: int - The port number on which the WebSocket server should listen for incoming connections\n\nOutput:\n- None (Void method, but it will start a server that listens on the specified port and handles WebSocket connections)\n\nNote: The implementation should include proper error handling, resource management, and support for both NIO and Epoll transport mechanisms based on system availability. The server should handle WebSocket protocol upgrades, HTTP codecs, chunked writes, and idle connection management.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.epoll.Epoll;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.nico.ratel.landlords.print.SimplePrinter;\nimport org.nico.ratel.landlords.robot.RobotDecisionMakers;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.TimeUnit;\n\npublic class WebsocketProxy implements Proxy {\n\n    @Override\n    public void start(int port) throws InterruptedException {\n        EventLoopGroup parentGroup = Epoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n        EventLoopGroup childGroup = Epoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap()\n                    .group(parentGroup, childGroup)\n                    .channel(Epoll.isAvailable() ? EpollServerSocketChannel.class : NioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline()\n                                    .addLast(new IdleStateHandler(60 * 30, 0, 0, TimeUnit.SECONDS))\n                                    .addLast(new HttpServerCodec())\n                                    .addLast(new ChunkedWriteHandler())\n                                    .addLast(new HttpObjectAggregator(8192))\n                                    .addLast(\"ws\", new WebSocketServerProtocolHandler(\"/ratel\"))\n                                    .addLast(new WebsocketTransferHandler());\n                        }\n                    });\n\n            ChannelFuture f = bootstrap.bind().sync();\n\n            SimplePrinter.serverLog(\"The websocket server was successfully started on port \" + port);\n            RobotDecisionMakers.init();\n            f.channel().closeFuture().sync();\n        } finally {\n            parentGroup.shutdownGracefully();\n            childGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.websocketx.*;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\n\npublic class WebsocketProxy implements Proxy {\n    public void start(int port) throws InterruptedException {\n        EventLoopGroup bossGroup = null;\n        EventLoopGroup workerGroup = null;\n        try {\n            if (io.netty.channel.epoll.Epoll.isAvailable()) {\n                bossGroup = new io.netty.channel.epoll.EpollEventLoopGroup();\n                workerGroup = new io.netty.channel.epoll.EpollEventLoopGroup();\n            } else {\n                bossGroup = new NioEventLoopGroup();\n                workerGroup = new NioEventLoopGroup();\n            }\n        } catch (Exception e) {\n            bossGroup = new NioEventLoopGroup();\n            workerGroup = new NioEventLoopGroup();\n        }\n\n        ServerBootstrap b = new ServerBootstrap();\n        if (io.netty.channel.epoll.Epoll.isAvailable()) {\n            b.channel(io.netty.channel.epoll.EpollServerSocketChannel.class);\n        } else {\n            b.channel(NioServerSocketChannel.class);\n        }\n        b.group(bossGroup, workerGroup)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) {\n                 ChannelPipeline pipeline = ch.pipeline();\n                 pipeline.addLast(new HttpServerCodec());\n                 pipeline.addLast(new HttpObjectAggregator(65536));\n                 pipeline.addLast(new ChunkedWriteHandler());\n                 pipeline.addLast(new IdleStateHandler(60, 30, 60));\n                 pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n                 pipeline.addLast(new WebSocketHandler());\n             }\n         });\n\n        ChannelFuture f = b.bind(port).sync();\n        f.channel().closeFuture().sync();\n    }\n\n    private static class WebSocketHandler extends SimpleChannelInboundHandler<WebSocketFrame> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) {\n            if (frame instanceof TextWebSocketFrame) {\n                String text = ((TextWebSocketFrame) frame).text();\n                ctx.writeAndFlush(new TextWebSocketFrame(\"Echo: \" + text));\n            } else if (frame instanceof PingWebSocketFrame) {\n                ctx.writeAndFlush(new PongWebSocketFrame(frame.content().retain()));\n            } else if (frame instanceof CloseWebSocketFrame) {\n                ctx.close();\n            } else if (frame instanceof BinaryWebSocketFrame) {\n                // Handle binary frames\n            } else if (frame instanceof ContinuationWebSocketFrame) {\n                // Handle continuation frames\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests, with configurable bind address and port, and proper resource management for startup and shutdown.\n\nClass Description: WebConfigContainer is a container class that manages the lifecycle of a Netty-based HTTP server. It initializes and configures the server components, starts the server on a specified port, and provides graceful shutdown capabilities.\n\nAttributes:\n- serverWorkerGroup: [NioEventLoopGroup] - Worker thread group for handling I/O operations\n- serverBossGroup: [NioEventLoopGroup] - Boss thread group for accepting incoming connections\n- logger: [Logger] - SLF4J logger instance for logging server events\n\nMethods:\n- WebConfigContainer() -> [void] - Constructor that initializes the boss and worker event loop groups\n- start() -> [void] - Starts the HTTP server by configuring ServerBootstrap, setting up the channel pipeline with HTTP handlers, and binding to the configured port\n- stop() -> [void] - Gracefully shuts down the server by closing the event loop groups and releasing all resources",
    "Canonical_solution": "import org.fengfei.lanproxy.common.container.Container;\nimport org.fengfei.lanproxy.server.config.ProxyConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.stream.ChunkedWriteHandler;\n\npublic class WebConfigContainer implements Container {\n\n    private static Logger logger = LoggerFactory.getLogger(WebConfigContainer.class);\n\n    private NioEventLoopGroup serverWorkerGroup;\n    private NioEventLoopGroup serverBossGroup;\n\n    public WebConfigContainer() {\n        serverBossGroup = new NioEventLoopGroup(1);\n        serverWorkerGroup = new NioEventLoopGroup(1);\n    }\n\n    @Override\n    public void start() {\n        ServerBootstrap httpServerBootstrap = new ServerBootstrap();\n        httpServerBootstrap.group(serverBossGroup, serverWorkerGroup)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline pipeline = ch.pipeline();\n                    pipeline.addLast(new HttpServerCodec());\n                    pipeline.addLast(new HttpObjectAggregator(8 * 1024 * 1024));\n                    pipeline.addLast(new ChunkedWriteHandler());\n                    pipeline.addLast(new HttpRequestHandler());\n                }\n            });\n\n        try {\n            httpServerBootstrap.bind(ProxyConfig.getInstance().getConfigServerBind(),\n                    ProxyConfig.getInstance().getConfigServerPort()).get();\n            logger.info(\"http server start on port \" + ProxyConfig.getInstance().getConfigServerPort());\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    @Override\n    public void stop() {\n        serverBossGroup.shutdownGracefully();\n        serverWorkerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class WebConfigContainer {\n    private final EventLoopGroup serverBossGroup;\n    private final EventLoopGroup serverWorkerGroup;\n    private final Logger logger;\n    private final String bindAddress;\n    private final int port;\n\n    public WebConfigContainer(String bindAddress, int port) {\n        this.bindAddress = bindAddress;\n        this.port = port;\n        this.serverBossGroup = new NioEventLoopGroup(1);\n        this.serverWorkerGroup = new NioEventLoopGroup();\n        this.logger = LoggerFactory.getLogger(WebConfigContainer.class);\n    }\n\n    public void start() throws Exception {\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap();\n            bootstrap.group(serverBossGroup, serverWorkerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            ch.pipeline().addLast(new HttpServerCodec());\n                            ch.pipeline().addLast(new WebRequestHandler(logger));\n                        }\n                    });\n\n            ChannelFuture future = bootstrap.bind(bindAddress, port).sync();\n            logger.info(\"Server started on {}:{}\", bindAddress, port);\n            future.channel().closeFuture().sync();\n        } catch (Exception e) {\n            logger.error(\"Failed to start server\", e);\n            throw e;\n        }\n    }\n\n    public void stop() {\n        try {\n            serverBossGroup.shutdownGracefully().sync();\n            serverWorkerGroup.shutdownGracefully().sync();\n            logger.info(\"Server stopped\");\n        } catch (InterruptedException e) {\n            logger.error(\"Interrupted during shutdown\", e);\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    private static class WebRequestHandler extends io.netty.channel.SimpleChannelInboundHandler<io.netty.handler.codec.http.FullHttpRequest> {\n        private final Logger logger;\n\n        public WebRequestHandler(Logger logger) {\n            this.logger = logger;\n        }\n\n        @Override\n        protected void channelRead0(io.netty.channel.ChannelHandlerContext ctx, io.netty.handler.codec.http.FullHttpRequest msg) {\n            logger.info(\"Received request: {}\", msg.uri());\n            // Handle request and send response\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 227,
    "Instruction": "Task Description: Implement a Netty-based HTTP server in Java that handles incoming HTTP requests with tracing capabilities for specific endpoints.\n\nClass Description: NettyHttpServer is a TCP server implementation using Netty framework that listens for HTTP requests. It provides tracing functionality for specific endpoints (\"/unsampled\" and \"/traced\") while serving regular requests for other paths. The server manages its lifecycle through start and stop methods.\n\nAttributes:\n- bossGroup: [EventLoopGroup] - Handles incoming connections (accept loop)\n- workerGroup: [EventLoopGroup] - Handles I/O operations for established connections\n\nMethods:\n- startServer() -> [int] - Starts the HTTP server on an available port, returns the bound port number\n- stopServer() -> [void] - Shuts down the server gracefully, releasing all resources\n- TracingDispatchHandler (inner class) - Handles request tracing for specific endpoints\n  - channelRead(ChannelHandlerContext, Object) -> [void] - Processes incoming messages and routes them to appropriate tracing handlers\n  - write(ChannelHandlerContext, Object, ChannelPromise) -> [void] - Processes outgoing messages with tracing context",
    "Canonical_solution": "import brave.Tracing;\nimport brave.baggage.BaggagePropagation;\nimport brave.baggage.BaggagePropagationConfig.SingleBaggageField;\nimport brave.propagation.B3Propagation;\nimport brave.sampler.Sampler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelDuplexHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.util.AttributeKey;\nimport java.net.InetSocketAddress;\n\npublic class NettyHttpServer {\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public int startServer() throws InterruptedException {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.option(ChannelOption.SO_BACKLOG, 1024);\n        b.group(bossGroup, workerGroup)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<Channel>() {\n                @Override\n                protected void initChannel(final Channel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    p.addLast(new HttpServerCodec());\n                    p.addLast(new TracingDispatchHandler());\n                    p.addLast(new HelloWorldHandler());\n                }\n            });\n\n        Channel ch = b.bind(0).sync().channel();\n        return ((InetSocketAddress) ch.localAddress()).getPort();\n    }\n\n    public void stopServer() {\n        if (bossGroup != null) bossGroup.shutdownGracefully();\n        if (workerGroup != null) workerGroup.shutdownGracefully();\n    }\n\n    static class TracingDispatchHandler extends ChannelDuplexHandler {\n        static final AttributeKey<String> URI_ATTRIBUTE = AttributeKey.valueOf(\"uri\");\n\n        final ChannelDuplexHandler unsampled = NettyHttpTracing.create(\n            Tracing.newBuilder().sampler(Sampler.NEVER_SAMPLE).build()\n        ).serverHandler();\n        final ChannelDuplexHandler traced = NettyHttpTracing.create(\n            Tracing.newBuilder()\n                .propagationFactory(BaggagePropagation.newFactoryBuilder(B3Propagation.FACTORY)\n                .build()\n        ).serverHandler();\n\n        @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n            if (!(msg instanceof HttpRequest)) {\n                ctx.fireChannelRead(msg);\n                return;\n            }\n            String uri = ((HttpRequest) msg).uri();\n            if (\"/unsampled\".equals(uri)) {\n                ctx.channel().attr(URI_ATTRIBUTE).set(uri);\n                unsampled.channelRead(ctx, msg);\n            } else if (\"/traced\".equals(uri)) {\n                ctx.channel().attr(URI_ATTRIBUTE).set(uri);\n                traced.channelRead(ctx, msg);\n            } else {\n                ctx.fireChannelRead(msg);\n            }\n        }\n\n        @Override\n        public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise prm) throws Exception {\n            String uri = ctx.channel().attr(URI_ATTRIBUTE).get();\n            if (uri == null) {\n                ctx.write(msg, prm);\n                return;\n            }\n            if (\"/unsampled\".equals(uri)) {\n                unsampled.write(ctx, msg, prm);\n            } else if (\"/traced\".equals(uri)) {\n                traced.write(ctx, msg, prm);\n            } else {\n                ctx.write(msg, prm);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.util.CharsetUtil;\n\npublic class NettyHttpServer {\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n\n    public NettyHttpServer() {\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n    }\n\n    public int startServer() throws Exception {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) {\n                 ChannelPipeline p = ch.pipeline();\n                 p.addLast(new HttpServerCodec());\n                 p.addLast(new HttpObjectAggregator(65536));\n                 p.addLast(new TracingDispatchHandler());\n             }\n         });\n\n        ChannelFuture f = b.bind(0).sync();\n        return f.channel().localAddress().getPort();\n    }\n\n    public void stopServer() {\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n\n    private class TracingDispatchHandler extends ChannelDuplexHandler {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof FullHttpRequest) {\n                FullHttpRequest request = (FullHttpRequest) msg;\n                String uri = request.uri();\n                if (\"/traced\".equals(uri)) {\n                    System.out.println(\"Traced endpoint accessed: \" + uri);\n                } else if (\"/unsampled\".equals(uri)) {\n                    System.out.println(\"Unsampled endpoint accessed: \" + uri);\n                } else {\n                    System.out.println(\"Regular request: \" + uri);\n                }\n\n                FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.wrappedBuffer(\"Hello\".getBytes(CharsetUtil.UTF_8)));\n                ctx.writeAndFlush(response);\n            }\n        }\n\n        @Override\n        public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n            if (msg instanceof FullHttpResponse) {\n                FullHttpResponse response = (FullHttpResponse) msg;\n                response.headers().set(\"X-Traced\", \"true\");\n            }\n            ctx.write(msg, promise);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 228,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and echo back received messages.\n\nClass Description: The EchoServer class is a Netty-based TCP server that listens on a specified port, accepts client connections, and echoes back any received messages. It uses Netty's event-driven architecture for efficient network communication.\n\nAttributes:\n- port: int - The port number on which the server will listen for incoming connections\n\nMethods:\n- EchoServer(int port) -> Constructor - Initializes the server with the specified port number\n- start() -> void - Starts the server, binds to the specified port, and begins accepting connections. Handles server shutdown gracefully when stopped. Throws Exception if any error occurs during startup or operation",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.net.InetSocketAddress;\n\npublic class EchoServer {\n    private final int port;\n\n    public EchoServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        final EchoServerHandler serverHandler = new EchoServerHandler();\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b = b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(serverHandler);\n                        }\n                    });\n            ChannelFuture f = b.bind().sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully().sync();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\n\npublic class EchoServer {\n    private final int port;\n\n    public EchoServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ch.pipeline().addLast(new EchoServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class EchoServerHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead0(ChannelHandlerContext ctx, Object msg) {\n            ctx.writeAndFlush(msg);\n        }\n    }\n}"
  },
  {
    "Task_id": 229,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle proxy server functionality, including SSL/TLS support, message encoding/decoding, and idle connection management.\n\nClass Description: ProxyServerContainer is a Netty-based TCP server container that manages proxy server operations. It handles client connections, processes proxy messages, and manages server resources. The class includes SSL/TLS support, custom message handlers, and graceful shutdown capabilities.\n\nAttributes:\n- serverWorkerGroup: [NioEventLoopGroup] - Handles I/O operations and other tasks for accepted connections\n- serverBossGroup: [NioEventLoopGroup] - Accepts incoming connections and assigns them to worker group\n- logger: [Logger] - SLF4J logger instance for logging server events and errors\n\nMethods:\n- ProxyServerContainer() -> [void] - Constructor that initializes the event loop groups\n- start() -> [void] - Starts the proxy server by binding to configured host/port and setting up channel pipeline\n- stop() -> [void] - Shuts down the server gracefully by releasing all resources\n- createSslHandler(SSLContext sslContext, boolean needsClientAuth) -> [ChannelHandler] - Creates SSL handler for secure communication (input: SSLContext for security configuration, boolean for client auth requirement; output: configured SSL handler)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslHandler;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport org.fengfei.lanproxy.server.config.ProxyConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ProxyServerContainer {\n\n    private static final Logger logger = LoggerFactory.getLogger(ProxyServerContainer.class);\n\n    private NioEventLoopGroup serverWorkerGroup;\n    private NioEventLoopGroup serverBossGroup;\n\n    public ProxyServerContainer() {\n        serverBossGroup = new NioEventLoopGroup();\n        serverWorkerGroup = new NioEventLoopGroup();\n    }\n\n    public void start() {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(serverBossGroup, serverWorkerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(new ProxyMessageDecoder(MAX_FRAME_LENGTH, LENGTH_FIELD_OFFSET, \n                                LENGTH_FIELD_LENGTH, LENGTH_ADJUSTMENT, INITIAL_BYTES_TO_STRIP));\n                        pipeline.addLast(new ProxyMessageEncoder());\n                        pipeline.addLast(new IdleCheckHandler(IdleCheckHandler.READ_IDLE_TIME, \n                                IdleCheckHandler.WRITE_IDLE_TIME, 0));\n                        pipeline.addLast(new ServerChannelHandler());\n                    }\n                });\n\n        try {\n            ChannelFuture future = bootstrap.bind(ProxyConfig.getInstance().getServerBind(), \n                    ProxyConfig.getInstance().getServerPort()).sync();\n            logger.info(\"proxy server start on port \" + ProxyConfig.getInstance().getServerPort());\n        } catch (InterruptedException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    private ChannelHandler createSslHandler(SSLContext sslContext, boolean needsClientAuth) {\n        SSLEngine sslEngine = sslContext.createSSLEngine();\n        sslEngine.setUseClientMode(false);\n        if (needsClientAuth) {\n            sslEngine.setNeedClientAuth(true);\n        }\n        return new SslHandler(sslEngine);\n    }\n\n    public void stop() {\n        serverBossGroup.shutdownGracefully();\n        serverWorkerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.net.ssl.SSLContext;\n\npublic class ProxyServerContainer {\n    private final EventLoopGroup serverBossGroup;\n    private final EventLoopGroup serverWorkerGroup;\n    private final Logger logger;\n\n    public ProxyServerContainer() {\n        this.serverBossGroup = new NioEventLoopGroup();\n        this.serverWorkerGroup = new NioEventLoopGroup();\n        this.logger = LoggerFactory.getLogger(ProxyServerContainer.class);\n    }\n\n    public void start() {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(serverBossGroup, serverWorkerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(\"ssl\", createSslHandler(SSLContext.getDefault(), false));\n                        pipeline.addLast(\"idle\", new IdleStateHandler(60, 0, 0));\n                        pipeline.addLast(\"decoder\", new StringDecoder());\n                        pipeline.addLast(\"encoder\", new StringEncoder());\n                        pipeline.addLast(\"proxyHandler\", new ProxyHandler());\n                    }\n                });\n\n        try {\n            ChannelFuture future = bootstrap.bind(8080).sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            logger.error(\"Server start failed\", e);\n        } finally {\n            stop();\n        }\n    }\n\n    public void stop() {\n        serverBossGroup.shutdownGracefully();\n        serverWorkerGroup.shutdownGracefully();\n    }\n\n    public ChannelHandler createSslHandler(SSLContext sslContext, boolean needsClientAuth) {\n        try {\n            SslContext context = SslContextBuilder.forServer(sslContext).build();\n            return new SslHandler(context.newEngine(null));\n        } catch (Exception e) {\n            logger.error(\"Failed to create SSL handler\", e);\n            return null;\n        }\n    }\n\n    private static class ProxyHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        // Proxy message handling logic\n    }\n}\n```"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a Java class for writing FLV (Flash Video) files using Java NIO's FileChannel and ByteBuffer for efficient file operations. The class should handle both new file creation and appending to existing files, including metadata management.\n\nClass Description: The FLVWriter class provides functionality to write FLV video files with proper headers, metadata tags, and media data tags. It uses Java NIO channels and buffers for efficient file operations, supporting both new file creation and appending to existing files while maintaining FLV format specifications.\n\nAttributes:\n- fileChannel: [SeekableByteChannel] - Channel for writing the final FLV output file\n- dataChannel: [SeekableByteChannel] - Temporary channel for storing tags before finalization\n- filePath: [String] - Path to the output FLV file\n- append: [boolean] - Flag indicating whether to append to an existing file\n- appendOffset: [long] - Position in existing file where new data should be appended\n- meta: [Map<String, ?>] - Metadata extracted from existing FLV file when appending\n\nMethods:\n- FLVWriter(String filePath) -> [void] - Constructor that initializes the writer with a file path for new file creation\n- FLVWriter(Path path, boolean append) -> [void] - Constructor that initializes the writer with append mode and handles existing file metadata\n- getMetaData(Path path, int maxTags) -> [Map<String, ?>] - Extracts metadata from an existing FLV file (private method)\n- createDataFile() -> [void] - Creates a temporary data file for storing tags (private method)\n- createOutputFile() -> [void] - Creates the final output FLV file (private method)\n- writeTag(ITag tag) -> [boolean] - Writes a media tag to the temporary data file\n- close() -> [void] - Finalizes the FLV file and cleans up resources\n- finalizeFlv() -> [long] - Combines temporary data with existing file (if appending) and writes final FLV file (private method)",
    "Canonical_solution": "import java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SeekableByteChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.util.Map;\n\npublic class FLVWriter {\n\n    private static final Logger log = LoggerFactory.getLogger(FLVWriter.class);\n\n    private SeekableByteChannel fileChannel;\n    private SeekableByteChannel dataChannel;\n    private String filePath;\n    private boolean append;\n    private long appendOffset = 13L;\n    private Map<String, ?> meta;\n\n    public FLVWriter(String filePath) {\n        this.filePath = filePath;\n        try {\n            createDataFile();\n        } catch (Exception e) {\n            log.error(\"Failed to create FLV writer\", e);\n        }\n    }\n\n    public FLVWriter(Path path, boolean append) {\n        filePath = path.toFile().getAbsolutePath();\n        this.append = append;\n        try {\n            if (append) {\n                meta = getMetaData(path, 5);\n                Files.move(path, path.resolveSibling(path.toFile().getName().replace(\".flv\", \".old\")));\n            }\n            createDataFile();\n        } catch (Exception e) {\n            log.error(\"Failed to create FLV writer\", e);\n        }\n    }\n\n    private Map<String, ?> getMetaData(Path path, int maxTags) throws IOException {\n        Map<String, ?> meta = null;\n        try (SeekableByteChannel channel = Files.newByteChannel(path, StandardOpenOption.READ)) {\n            long size = channel.size();\n            if (size > 0L) {\n                channel.position(appendOffset);\n                ByteBuffer dst = ByteBuffer.allocate(11);\n                do {\n                    int read = channel.read(dst);\n                    if (read > 0) {\n                        dst.flip();\n                        byte tagType = (byte) (dst.get() & 31);\n                        int bodySize = IOUtils.readUnsignedMediumInt(dst);\n                        if (tagType == ITag.TYPE_METADATA) {\n                            ByteBuffer buf = ByteBuffer.allocate(bodySize);\n                            read = channel.read(buf);\n                            if (read > 0) {\n                                buf.flip();\n                                Input input = new Input(IoBuffer.wrap(buf));\n                                String metaType = Deserializer.deserialize(input, String.class);\n                                meta = Deserializer.deserialize(input, Map.class);\n                                if (meta.containsKey(\"duration\")) {\n                                    appendOffset = channel.position() + 4L;\n                                    break;\n                                }\n                            }\n                            buf.compact();\n                        }\n                        channel.position(channel.position() + 4L);\n                        dst.compact();\n                    }\n                } while (--maxTags > 0);\n            }\n        }\n        return meta;\n    }\n\n    private void createDataFile() throws IOException {\n        Path path = Paths.get(filePath + \".ser\");\n        if (Files.deleteIfExists(path)) {\n            log.debug(\"Previous flv data file existed and was removed\");\n        }\n        this.dataChannel = Files.newByteChannel(path, StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE, StandardOpenOption.READ);\n    }\n\n    private void createOutputFile() throws IOException {\n        this.fileChannel = Files.newByteChannel(Paths.get(filePath), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n    }\n\n    public boolean writeTag(ITag tag) throws IOException {\n        try {\n            int bodySize = tag.getBodySize();\n            byte dataType = tag.getDataType();\n            IoBuffer tagBody = tag.getBody();\n            int totalTagSize = 11 + bodySize + 4;\n            ByteBuffer tagBuffer = ByteBuffer.allocate(totalTagSize);\n            int timestamp = tag.getTimestamp();\n            byte[] bodyBuf = new byte[bodySize];\n            tagBody.get(bodyBuf);\n            IOUtils.writeUnsignedByte(tagBuffer, dataType);\n            IOUtils.writeMediumInt(tagBuffer, bodySize);\n            IOUtils.writeExtendedMediumInt(tagBuffer, timestamp);\n            tagBuffer.put(new byte[] {0, 0, 0});\n            tagBuffer.put(bodyBuf);\n            tagBuffer.putInt(11 + bodySize);\n            tagBuffer.flip();\n            dataChannel.write(tagBuffer);\n            return true;\n        } catch (Exception e) {\n            log.error(\"Failed to write tag\", e);\n            return false;\n        }\n    }\n\n    public void close() {\n        try {\n            finalizeFlv();\n        } catch (Exception e) {\n            log.error(\"Failed to finalize FLV\", e);\n        } finally {\n            try {\n                if (dataChannel != null) dataChannel.close();\n                if (fileChannel != null) fileChannel.close();\n            } catch (IOException e) {\n                log.error(\"Failed to close channels\", e);\n            }\n        }\n    }\n\n    private long finalizeFlv() throws IOException {\n        createOutputFile();\n        writeHeader();\n        writeMetadataTag();\n        ByteBuffer dst = ByteBuffer.allocate(1024);\n        if (append) {\n            Path prevFlv = Paths.get(filePath.replace(\".flv\", \".old\"));\n            if (Files.exists(prevFlv)) {\n                try (SeekableByteChannel prevChannel = Files.newByteChannel(prevFlv, StandardOpenOption.READ)) {\n                    prevChannel.position(appendOffset);\n                    int read;\n                    do {\n                        read = prevChannel.read(dst);\n                        if (read > 0) {\n                            dst.flip();\n                            fileChannel.write(dst);\n                            dst.compact();\n                        }\n                    } while (read > 0);\n                }\n                Files.deleteIfExists(prevFlv);\n            }\n        }\n        dataChannel.position(0L);\n        int read;\n        do {\n            read = dataChannel.read(dst);\n            if (read > 0) {\n                dst.flip();\n                fileChannel.write(dst);\n                dst.compact();\n            }\n        } while (read > 0);\n        Files.deleteIfExists(Paths.get(filePath + \".ser\"));\n        return fileChannel.position();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.*;\nimport java.util.*;\n\npublic class FLVWriter {\n    private FileChannel fileChannel;\n    private FileChannel dataChannel;\n    private String filePath;\n    private boolean append;\n    private long appendOffset;\n    private Map<String, ?> meta;\n\n    public FLVWriter(String filePath) {\n        this.filePath = filePath;\n        this.append = false;\n        createOutputFile();\n        createDataFile();\n    }\n\n    public FLVWriter(Path path, boolean append) {\n        this.filePath = path.toString();\n        this.append = append;\n        try {\n            this.fileChannel = FileChannel.open(path, StandardOpenOption.READ, StandardOpenOption.WRITE);\n            this.meta = getMetaData(path, 100);\n            this.appendOffset = this.fileChannel.position();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        createDataFile();\n    }\n\n    private Map<String, ?> getMetaData(Path path, int maxTags) {\n        Map<String, Object> metadata = new HashMap<>();\n        try (FileChannel channel = FileChannel.open(path, StandardOpenOption.READ)) {\n            ByteBuffer buffer = ByteBuffer.allocate(11);\n            channel.position(9);\n            int tagCount = 0;\n            while (tagCount < maxTags && channel.read(buffer) > 0) {\n                buffer.flip();\n                byte tagType = buffer.get();\n                int dataSize = ((buffer.get() & 0xFF) << 16) | ((buffer.get() & 0xFF) << 8) | (buffer.get() & 0xFF);\n                buffer.position(buffer.position() + 3);\n                ByteBuffer dataBuffer = ByteBuffer.allocate(dataSize);\n                channel.read(dataBuffer);\n                dataBuffer.flip();\n                if (tagType == 8) {\n                    metadata.put(\"onMetaData\", parseAmfData(dataBuffer));\n                }\n                buffer.clear();\n                tagCount++;\n                channel.position(channel.position() + 11 + dataSize);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return metadata;\n    }\n\n    private void createDataFile() {\n        try {\n            Path tempPath = Files.createTempFile(\"flv\", \".tmp\");\n            this.dataChannel = FileChannel.open(tempPath, StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.DELETE_ON_CLOSE);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void createOutputFile() {\n        try {\n            Path path = Paths.get(filePath);\n            if (!Files.exists(path)) {\n                Files.createFile(path);\n            }\n            this.fileChannel = FileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE);\n            ByteBuffer header = ByteBuffer.allocate(13);\n            header.put(\"FLV\".getBytes());\n            header.put((byte) 1);\n            header.put((byte) 1);\n            header.putInt(9);\n            header.flip();\n            fileChannel.write(header);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean writeTag(ITag tag) {\n        ByteBuffer buffer = ByteBuffer.allocate(11 + tag.getDataSize());\n        buffer.put((byte) tag.getType());\n        int dataSize = tag.getDataSize();\n        buffer.put((byte) (dataSize >> 16 & 0xFF));\n        buffer.put((byte) (dataSize >> 8 & 0xFF));\n        buffer.put((byte) (dataSize & 0xFF));\n        buffer.putInt(tag.getTimestamp());\n        buffer.put((byte) 0);\n        buffer.putInt(0);\n        buffer.put(tag.getData());\n        buffer.flip();\n        try {\n            dataChannel.write(buffer);\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    public void close() {\n        finalizeFlv();\n        try {\n            if (fileChannel != null) fileChannel.close();\n            if (dataChannel != null) dataChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private long finalizeFlv() {\n        try {\n            if (append) {\n                long dataPos = dataChannel.position();\n                dataChannel.position(0);\n                ByteBuffer buffer = ByteBuffer.allocate(8192);\n                while (dataChannel.read(buffer) > 0) {\n                    buffer.flip();\n                    fileChannel.write(buffer);\n                    buffer.clear();\n                }\n                dataChannel.close();\n            } else {\n                long dataPos = dataChannel.position();\n                dataChannel.position(0);\n                ByteBuffer buffer = ByteBuffer.allocate(8192);\n                while (dataChannel.read(buffer) > 0) {\n                    buffer.flip();\n                    fileChannel.write(buffer);\n                    buffer.clear();\n                }\n                dataChannel.close();\n            }\n            fileChannel.close();\n            return fileChannel.size();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n\n    private Object parseAmfData(ByteBuffer buffer) {\n        // Simplified AMF parsing; actual implementation would be more complex\n        return null;\n    }\n}\n```"
  },
  {
    "Task_id": 230,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process requests, with optional SSL support for secure communication.\n\nClass Description: DiscardServer is a Netty-based TCP server that listens on a specified port, accepts client connections, and processes incoming data (discarding it in this example). It supports optional SSL encryption and uses NIO for non-blocking I/O operations.\n\nAttributes:\n- SSL: [boolean] - Flag indicating whether SSL encryption should be enabled\n- PORT: [int] - The port number on which the server will listen for connections\n- sslCtx: [SslContext] - SSL context for secure communication (nullable)\n\nMethods:\n- main: [main(String[] args)] -> void - Entry point that configures and starts the Netty server\n  - args: [String[]] - Command line arguments (not directly used)\n  - Throws: Exception - For various Netty and SSL related exceptions\n- initChannel: [initChannel(SocketChannel ch)] -> void - Initializes the channel pipeline for each new connection (inner method of ChannelInitializer)\n  - ch: [SocketChannel] - The socket channel being initialized\n  - Configures SSL handler (if enabled) and adds the main server handler to the pipeline",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class DiscardServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8009\"));\n\n    public static void main(String[] args) throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new DiscardServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\n\npublic class DiscardServer {\n    private static final boolean SSL = false;\n    private static final int PORT = 8080;\n    private static SslContext sslCtx;\n\n    public static void main(String[] args) throws Exception {\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.key(), ssc.cert()).build();\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ChannelPipeline pipeline = ch.pipeline();\n                     if (SSL) {\n                         pipeline.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     pipeline.addLast(new DiscardServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class DiscardServerHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            ((ByteBuf) msg).release();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 231,
    "Instruction": "Task Description: Create a Java class that implements a fake Docker server using Netty TCP server technology to intercept and record HTTP requests while responding with empty JSON responses.\n\nClass Description: The FakeDockerServer class simulates a Docker API server for testing purposes. It captures incoming HTTP requests and responds with a static JSON response. The server uses Netty's NIO event loop groups for handling connections and implements graceful shutdown capabilities.\n\nAttributes:\n- port: int - The port number on which the server will listen\n- parent: NioEventLoopGroup - The parent event loop group for accepting connections\n- child: NioEventLoopGroup - The child event loop group for handling connections\n- requests: List<HttpRequest> - Stores all received HTTP requests for inspection\n- channel: Channel - The server's communication channel\n\nMethods:\n- FakeDockerServer(int port) -> None - Constructor that initializes the server with specified port\n- start() -> void - Starts the server and configures request handling pipeline\n- stop() -> void - Stops the server and releases resources gracefully\n- getRequests() -> List<HttpRequest> - Returns the list of captured HTTP requests",
    "Canonical_solution": "import com.github.dockerjava.api.DockerClient;\nimport com.github.dockerjava.core.DefaultDockerClientConfig;\nimport com.github.dockerjava.core.DockerClientBuilder;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpContent;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.util.CharsetUtil;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;\nimport static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;\nimport static io.netty.handler.codec.http.HttpResponseStatus.OK;\nimport static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n\npublic class FakeDockerServer {\n    private final int port;\n    private final NioEventLoopGroup parent;\n    private final NioEventLoopGroup child;\n    private final List<HttpRequest> requests = new ArrayList<>();\n    private Channel channel;\n\n    public FakeDockerServer(int port) {\n        this.port = port;\n        this.parent = new NioEventLoopGroup();\n        this.child = new NioEventLoopGroup();\n    }\n\n    public void start() throws Exception {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(parent, child)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel socketChannel) throws Exception {\n                    ChannelPipeline pipeline = socketChannel.pipeline();\n                    pipeline.addLast(\"codec\", new HttpServerCodec());\n                    pipeline.addLast(\"httpHandler\", new SimpleChannelInboundHandler<Object>() {\n                        @Override\n                        protected void channelRead0(ChannelHandlerContext context, Object message) throws Exception {\n                            if (message instanceof HttpRequest) {\n                                HttpRequest request = (HttpRequest) message;\n                                requests.add(request);\n                            }\n\n                            if (message instanceof HttpContent) {\n                                FullHttpResponse response = new DefaultFullHttpResponse(HTTP_1_1, OK, Unpooled.copiedBuffer(\"{}\", CharsetUtil.UTF_8));\n                                response.headers().set(CONTENT_TYPE, \"application/json; charset=UTF-8\");\n                                response.headers().set(CONTENT_LENGTH, response.content().readableBytes());\n                                context.writeAndFlush(response);\n                            }\n                        }\n                    });\n                }\n            });\n\n        channel = bootstrap.bind(port).syncUninterruptibly().channel();\n    }\n\n    public void stop() throws Exception {\n        parent.shutdownGracefully();\n        child.shutdownGracefully();\n        channel.closeFuture().sync();\n    }\n\n    public List<HttpRequest> getRequests() {\n        return requests;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FakeDockerServer {\n    private final int port;\n    private final NioEventLoopGroup parent;\n    private final NioEventLoopGroup child;\n    private final List<HttpRequest> requests;\n    private Channel channel;\n\n    public FakeDockerServer(int port) {\n        this.port = port;\n        this.parent = new NioEventLoopGroup();\n        this.child = new NioEventLoopGroup();\n        this.requests = new ArrayList<>();\n    }\n\n    public void start() throws Exception {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(parent, child)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) {\n                 ch.pipeline().addLast(new HttpServerCodec());\n                 ch.pipeline().addLast(new SimpleChannelInboundHandler<HttpObject>() {\n                     @Override\n                     protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) {\n                         if (msg instanceof HttpRequest) {\n                             requests.add((HttpRequest) msg);\n                             FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.copiedBuffer(\"{}\"));\n                             response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"application/json\");\n                             ctx.writeAndFlush(response);\n                         }\n                     }\n                 });\n             }\n         });\n\n        channel = b.bind(port).sync().channel();\n    }\n\n    public void stop() {\n        if (channel != null) {\n            channel.closeFuture().syncUninterruptibly();\n        }\n        parent.shutdownGracefully();\n        child.shutdownGracefully();\n    }\n\n    public List<HttpRequest> getRequests() {\n        return requests;\n    }\n}\n```"
  },
  {
    "Task_id": 232,
    "Instruction": "Task Description: Implement a TCP server using Java Netty framework that handles client connections and processes Protocol Buffers (protobuf) messages with support for idle connection detection and custom message handling.\n\nClass Description: ProtobufProxy is a Netty-based TCP server implementation that establishes a server socket, configures protocol buffer message handling, and manages client connections. It includes idle connection detection, protobuf message encoding/decoding, and custom business logic handlers.\n\nAttributes: None (This class doesn't maintain any instance attributes, using local variables within methods instead)\n\nMethods:\n1: start(int port) -> void - Initializes and starts the Netty TCP server on the specified port. Creates event loop groups, configures server bootstrap with protobuf handlers, binds to the port, and manages server lifecycle. The method blocks until server shutdown.\n   - Input Parameters:\n     - port: int - The TCP port number to bind the server to\n   - Output: None (void)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.epoll.Epoll;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.nico.ratel.landlords.entity.ServerTransferData;\nimport org.nico.ratel.landlords.print.SimplePrinter;\nimport org.nico.ratel.landlords.robot.RobotDecisionMakers;\nimport org.nico.ratel.landlords.server.ServerContains;\nimport org.nico.ratel.landlords.server.handler.SecondProtobufCodec;\nimport org.nico.ratel.landlords.server.handler.ProtobufTransferHandler;\n\nimport java.net.InetSocketAddress;\nimport java.util.Timer;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProtobufProxy implements Proxy {\n\n    @Override\n    public void start(int port) throws InterruptedException {\n        EventLoopGroup parentGroup = Epoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n        EventLoopGroup childGroup = Epoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap()\n                    .group(parentGroup, childGroup)\n                    .channel(Epoll.isAvailable() ? EpollServerSocketChannel.class : NioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline()\n                                .addLast(new IdleStateHandler(60 * 30, 0, 0, TimeUnit.SECONDS))\n                                .addLast(new ProtobufVarint32FrameDecoder())\n                                .addLast(new ProtobufDecoder(ServerTransferData.ServerTransferDataProtoc.getDefaultInstance()))\n                                .addLast(new ProtobufVarint32LengthFieldPrepender())\n                                .addLast(new ProtobufEncoder())\n                                .addLast(new SecondProtobufCodec())\n                                .addLast(new ProtobufTransferHandler());\n                        }\n                    });\n\n            ChannelFuture f = bootstrap.bind().sync();\n\n            SimplePrinter.serverLog(\"The protobuf server was successfully started on port \" + port);\n            RobotDecisionMakers.init();\n\n            ServerContains.THREAD_EXCUTER.execute(() -> {\n                Timer timer = new Timer();\n                timer.schedule(new RoomClearTask(), 0L, 3000L);\n            });\n            f.channel().closeFuture().sync();\n        } finally {\n            parentGroup.shutdownGracefully();\n            childGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.LengthFieldBasedFrameDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarInt32LengthFieldPrepender;\nimport io.netty.handler.timeout.IdleStateHandler;\n\npublic class ProtobufProxy {\n    public void start(int port) {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ChannelPipeline pipeline = ch.pipeline();\n                     pipeline.addLast(new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, 0, 4, 0, 4));\n                     pipeline.addLast(new ProtobufDecoder(YourMessage.getDefaultInstance()));\n                     pipeline.addLast(new ProtobufVarInt32LengthFieldPrepender());\n                     pipeline.addLast(new IdleStateHandler(0, 0, 60));\n                     pipeline.addLast(new ChannelInboundHandlerAdapter() {\n                         @Override\n                         public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                             // Custom message handling logic\n                         }\n\n                         @Override\n                         public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {\n                             if (evt instanceof IdleStateEvent) {\n                                 ctx.close();\n                             }\n                         }\n\n                         @Override\n                         public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n                             cause.printStackTrace();\n                             ctx.close();\n                         }\n                     });\n                 }\n             });\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 233,
    "Instruction": "Task Description: Create a Java class that implements a UDP server using Netty framework for backup communication in a distributed system. The server should handle incoming UDP packets, decode them, and process messages while managing resources efficiently.\n\nClass Description: BackupServer is an AutoCloseable class that establishes a Netty-based UDP server for backup communication. It manages network connections, message handling, and graceful shutdown procedures.\n\nAttributes:\n- commonParameter: [CommonParameter] - Configuration parameters for the backup server\n- port: [int] - Port number to bind the UDP server\n- backupManager: [BackupManager] - Manager for backup operations\n- channel: [Channel] - Netty channel for UDP communication\n- shutdown: [boolean] - Flag indicating server shutdown status\n- executor: [ExecutorService] - Thread executor for server operations\n\nMethods:\n- initServer(): [void]() -> [void] - Initializes and starts the backup server in a separate thread if conditions are met\n- start(): [void]() throws [Exception] - Configures and starts the Netty UDP server with proper handlers\n- close(): [void]() -> [void] - Implements AutoCloseable to gracefully shutdown the server and release resources\n\nConstructor:\n- BackupServer([BackupManager backupManager]) - Creates a new instance with the specified BackupManager",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.common.backup.BackupManager;\nimport org.tron.common.es.ExecutorServiceManager;\nimport org.tron.common.parameter.CommonParameter;\nimport org.tron.p2p.stats.TrafficStats;\n\npublic class BackupServer implements AutoCloseable {\n\n  private CommonParameter commonParameter = CommonParameter.getInstance();\n  private int port = commonParameter.getBackupPort();\n  private BackupManager backupManager;\n  private Channel channel;\n  private volatile boolean shutdown = false;\n  private ExecutorService executor;\n\n  public BackupServer(final BackupManager backupManager) {\n    this.backupManager = backupManager;\n  }\n\n  public void initServer() {\n    if (port > 0 && commonParameter.getBackupMembers().size() > 0) {\n      executor = ExecutorServiceManager.newSingleThreadExecutor(\"BackupServer\");\n      executor.submit(() -> {\n        try {\n          start();\n        } catch (Exception e) {\n          logger.error(\"Start backup server failed, {}\", e);\n        }\n      });\n    }\n  }\n\n  private void start() throws Exception {\n    NioEventLoopGroup group = new NioEventLoopGroup(1);\n    try {\n      while (!shutdown) {\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n            .channel(NioDatagramChannel.class)\n            .handler(new ChannelInitializer<NioDatagramChannel>() {\n              @Override\n              public void initChannel(NioDatagramChannel ch) throws Exception {\n                ch.pipeline().addLast(TrafficStats.udp);\n                ch.pipeline().addLast(new ProtobufVarint32LengthFieldPrepender());\n                ch.pipeline().addLast(new ProtobufVarint32FrameDecoder());\n                ch.pipeline().addLast(new PacketDecoder());\n                MessageHandler messageHandler = new MessageHandler(ch, backupManager);\n                backupManager.setMessageHandler(messageHandler);\n                ch.pipeline().addLast(messageHandler);\n              }\n            });\n\n        channel = b.bind(port).sync().channel();\n        channel.closeFuture().sync();\n        if (shutdown) {\n          break;\n        }\n      }\n    } finally {\n      group.shutdownGracefully().sync();\n    }\n  }\n\n  @Override\n  public void close() {\n    shutdown = true;\n    backupManager.stop();\n    if (channel != null) {\n      try {\n        channel.close().await(10, TimeUnit.SECONDS);\n      } catch (Exception e) {\n        logger.warn(\"Closing backup server failed.\", e);\n      }\n    }\n    ExecutorServiceManager.shutdownAndAwaitTermination(executor, \"BackupServer\");\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 5,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.DatagramChannel;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport io.netty.handler.codec.LengthFieldBasedFrameDecoder;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class BackupServer implements AutoCloseable {\n    private final CommonParameter commonParameter;\n    private final int port;\n    private final BackupManager backupManager;\n    private Channel channel;\n    private boolean shutdown;\n    private ExecutorService executor;\n    private EventLoopGroup group;\n\n    public BackupServer(BackupManager backupManager) {\n        this.backupManager = backupManager;\n        this.executor = Executors.newCachedThreadPool();\n    }\n\n    public void initServer() {\n        if (!shutdown) {\n            executor.submit(() -> {\n                try {\n                    start();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n    }\n\n    public void start() throws Exception {\n        group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioDatagramChannel.class)\n             .handler(new ChannelInitializer<DatagramChannel>() {\n                 @Override\n                 protected void initChannel(DatagramChannel ch) {\n                     ch.pipeline().addLast(\n                         new LengthFieldBasedFrameDecoder(1024, 0, 4, 0, 4),\n                         new StringDecoder(),\n                         new StringEncoder(),\n                         new UdpHandler(backupManager)\n                     );\n                 }\n             });\n\n            channel = b.bind(new InetSocketAddress(port)).sync().channel();\n        } catch (Exception e) {\n            throw e;\n        }\n    }\n\n    @Override\n    public void close() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n        if (executor != null) {\n            executor.shutdown();\n        }\n        shutdown = true;\n    }\n\n    private static class UdpHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        private final BackupManager backupManager;\n\n        public UdpHandler(BackupManager backupManager) {\n            this.backupManager = backupManager;\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            String message = (String) msg;\n            backupManager.processMessage(message);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 234,
    "Instruction": "Task Description: Create a Java class that implements a UDP echo server using Netty framework, capable of receiving datagrams and echoing them back to the sender.\n\nClass Description: DatagramChannelEchoServer is a Netty-based UDP server that listens on a specified port, receives incoming datagrams, and echoes them back to the sender. The server handles network operations asynchronously and includes proper resource cleanup.\n\nAttributes:\n- group: [NioEventLoopGroup] - Handles I/O operations asynchronously\n- bootstrap: [Bootstrap] - Configures and initializes the Netty server\n- channelFuture: [ChannelFuture] - Represents the result of an asynchronous channel operation\n- DEFAULT_PORT: [int] - Default port number (7) if none specified\n\nMethods:\n- start([int port]) -> [void] - Starts the UDP server on the specified port, initializes Netty components, and binds to the port\n- shutdown() -> [void] - Gracefully shuts down the server and releases resources\n- main([String[] args]) -> [void] - Entry point that parses command line arguments and starts the server\n\nThe class should use NioDatagramChannel for UDP transport, enable SO_BROADCAST option, and include proper error handling and resource cleanup. The server should continue running until explicitly stopped, echoing all received datagrams back to their senders.",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\n\npublic class DatagramChannelEchoServer {\n\n    public static int DEFAULT_PORT = 7;\n\n    private EventLoopGroup group;\n    private Bootstrap bootstrap;\n    private ChannelFuture channelFuture;\n\n    public void start(int port) throws Exception {\n        group = new NioEventLoopGroup();\n        \n        try {\n            bootstrap = new Bootstrap();\n            \n            bootstrap.group(group)\n                .channel(NioDatagramChannel.class)\n                .option(ChannelOption.SO_BROADCAST, true)\n                .handler(new DatagramChannelEchoServerHandler());\n            \n            channelFuture = bootstrap.bind(port).sync();\n            System.out.println(\"DatagramChannelEchoServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            \n            channelFuture.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port;\n\n        try {\n            port = Integer.parseInt(args[0]);\n        } catch (RuntimeException ex) {\n            port = DEFAULT_PORT;\n        }\n\n        DatagramChannelEchoServer server = new DatagramChannelEchoServer();\n        server.start(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 5,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.DatagramPacket;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport io.netty.util.concurrent.Future;\nimport io.netty.util.concurrent.GenericFutureListener;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\n\npublic class DatagramChannelEchoServer {\n    private NioEventLoopGroup group;\n    private Bootstrap bootstrap;\n    private ChannelFuture channelFuture;\n    private static final int DEFAULT_PORT = 7;\n\n    public void start(int port) {\n        group = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioDatagramChannel.class)\n                .option(ChannelOption.SO_BROADCAST, true)\n                .handler(new ChannelInitializer<NioDatagramChannel>() {\n                    @Override\n                    protected void initChannel(NioDatagramChannel ch) {\n                        ch.pipeline().addLast(new EchoHandler());\n                    }\n                });\n        channelFuture = bootstrap.bind(port).syncUninterruptibly();\n    }\n\n    public void shutdown() {\n        if (channelFuture != null) {\n            channelFuture.channel().close();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        int port = DEFAULT_PORT;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        DatagramChannelEchoServer server = new DatagramChannelEchoServer();\n        server.start(port);\n        Runtime.getRuntime().addShutdownHook(new Thread(server::shutdown));\n        server.channelFuture.channel().closeFuture().awaitUninterruptibly();\n    }\n\n    private static class EchoHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            DatagramPacket packet = (DatagramPacket) msg;\n            ByteBuf data = packet.content();\n            SocketAddress sender = packet.sender();\n            ByteBuf copy = data.copy();\n            ctx.writeAndFlush(new DatagramPacket(copy, sender)).addListener((GenericFutureListener<Future<? super Void>>) future -> data.release());\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 236,
    "Instruction": "Task Description: Create a Java class that implements a UDP client using Netty framework for sending and receiving datagram packets. The client should be able to start a connection, send messages to a specified host and port, handle console input for sending messages, and gracefully shutdown the connection.\n\nClass Description: DatagramChannelEchoClient is a Netty-based UDP client that establishes a connection to a specified host and port, sends messages via UDP datagrams, and can be controlled through console input. It manages network resources efficiently and provides clean shutdown capabilities.\n\nAttributes:\n- host: String - The target host address to which messages will be sent\n- port: int - The target port number on the host\n- group: EventLoopGroup - Netty event loop group for handling I/O operations\n- channel: Channel - The Netty channel used for UDP communication\n\nMethods:\n- DatagramChannelEchoClient(String host, int port) -> None - Constructor that initializes the client with target host and port\n- start() -> void - Starts the UDP client by initializing Netty components and binding to the port\n- sendMessage(String message) -> void - Sends a message to the configured host and port via UDP\n- stop() -> void - Gracefully shuts down the client and releases resources\n- runConsoleInput() -> void - Reads input from console and sends it as messages until terminated",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\n\npublic final class DatagramChannelEchoClient {\n\n    private final String host;\n    private final int port;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public DatagramChannelEchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        group = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioDatagramChannel.class)\n         .option(ChannelOption.SO_BROADCAST, true)\n         .handler(new DatagramChannelEchoClientHandler());\n\n        ChannelFuture f = b.bind(port).sync();\n        channel = f.channel();\n        System.out.println(\"DatagramChannelEchoClient\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n    }\n\n    public void sendMessage(String message) throws IOException {\n        ByteBuffer writeBuffer = ByteBuffer.allocate(32);\n        writeBuffer.put(message.getBytes());\n        writeBuffer.flip();\n        writeBuffer.rewind();\n        \n        io.netty.buffer.ByteBuf buf = io.netty.buffer.Unpooled.copiedBuffer(writeBuffer);\n        channel.writeAndFlush(new io.netty.channel.socket.DatagramPacket(\n            buf, new InetSocketAddress(host, port)));\n        writeBuffer.clear();\n    }\n\n    public void stop() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void runConsoleInput() throws IOException {\n        try (BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in))) {\n            String userInput;\n            while ((userInput = stdIn.readLine()) != null) {\n                sendMessage(userInput);\n            }\n        } catch (UnknownHostException e) {\n            System.err.println(\"\u4e0d\u660e\u4e3b\u673a\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a \" + host);\n            System.exit(1);\n        } catch (IOException e) {\n            System.err.println(\"\u4e0d\u80fd\u4ece\u4e3b\u673a\u4e2d\u83b7\u53d6I/O\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a\" + host);\n            System.exit(1);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 5,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.DatagramChannel;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.util.CharsetUtil;\nimport java.net.DatagramPacket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.util.Scanner;\n\npublic class DatagramChannelEchoClient {\n    private final String host;\n    private final int port;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public DatagramChannelEchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        group = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioDatagramChannel.class)\n         .handler(new ChannelInitializer<DatagramChannel>() {\n             @Override\n             protected void initChannel(DatagramChannel ch) {\n                 ch.pipeline().addLast(new DatagramHandler());\n             }\n         });\n        channel = b.bind(0).sync().channel();\n    }\n\n    public void sendMessage(String message) {\n        try {\n            InetAddress address = InetAddress.getByName(host);\n            byte[] data = message.getBytes();\n            DatagramPacket packet = new DatagramPacket(data, data.length, address, port);\n            channel.writeAndFlush(packet);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void runConsoleInput() {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextLine()) {\n            String line = scanner.nextLine();\n            if (line.equalsIgnoreCase(\"exit\")) {\n                break;\n            }\n            sendMessage(line);\n        }\n        scanner.close();\n    }\n\n    private static class DatagramHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof DatagramPacket) {\n                DatagramPacket packet = (DatagramPacket) msg;\n                ByteBuf content = packet.content();\n                String received = content.toString(CharsetUtil.UTF_8);\n                System.out.println(\"Received: \" + received);\n                content.release();\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 240,
    "Instruction": "Task Description: Implement a Java class that interacts with GitHub's OAuth API to obtain an access token and retrieve user information using the OkHttp library for HTTP requests.\n\nClass Description: The `GithubProvider` class handles authentication with GitHub's OAuth API. It provides methods to obtain an access token using authorization code and to fetch GitHub user information using the obtained access token.\n\nAttributes:\n- clientId: String - GitHub OAuth application client ID (injected from configuration)\n- clientSecret: String - GitHub OAuth application client secret (injected from configuration)\n- redirectUri: String - Redirect URI registered with GitHub OAuth application (injected from configuration)\n\nMethods:\n- getAccessToken(AccessTokenDTO accessTokenDTO) -> String - Obtains an access token from GitHub's OAuth API. Takes an AccessTokenDTO object containing authorization code and other parameters, sets client credentials, makes a POST request to GitHub's token endpoint, and returns the access token.\n- getUser(String accessToken) -> GithubUser - Retrieves GitHub user information using the provided access token. Makes a GET request to GitHub's user API endpoint with the access token in the Authorization header and returns the user data as a GithubUser object.",
    "Canonical_solution": "import com.alibaba.fastjson.JSON;\nimport life.majiang.community.dto.AccessTokenDTO;\nimport life.majiang.community.provider.dto.GithubUser;\nimport okhttp3.*;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class GithubProvider {\n\n    @Value(\"${github.client.id}\")\n    private String clientId;\n\n    @Value(\"${github.client.secret}\")\n    private String clientSecret;\n\n    @Value(\"${github.redirect.uri}\")\n    private String redirectUri;\n\n    public String getAccessToken(AccessTokenDTO accessTokenDTO) {\n        accessTokenDTO.setClient_id(clientId);\n        accessTokenDTO.setClient_secret(clientSecret);\n        accessTokenDTO.setRedirect_uri(redirectUri);\n        MediaType mediaType = MediaType.get(\"application/json; charset=utf-8\");\n        OkHttpClient client = new OkHttpClient();\n\n        RequestBody body = RequestBody.create(mediaType, JSON.toJSONString(accessTokenDTO));\n        Request request = new Request.Builder()\n                .url(\"https://github.com/login/oauth/access_token\")\n                .post(body)\n                .build();\n        try (Response response = client.newCall(request).execute()) {\n            String string = response.body().string();\n            String token = string.split(\"&\")[0].split(\"=\")[1];\n            return token;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public GithubUser getUser(String accessToken) {\n        OkHttpClient client = new OkHttpClient();\n        Request request = new Request.Builder()\n                .url(\"https://api.github.com/user\")\n                .header(\"Authorization\", \"token \" + accessToken)\n                .build();\n        try {\n            Response response = client.newCall(request).execute();\n            String string = response.body().string();\n            GithubUser githubUser = JSON.parseObject(string, GithubUser.class);\n            return githubUser;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "import okhttp3.*;\n\npublic class GithubProvider {\n    private final String clientId;\n    private final String clientSecret;\n    private final String redirectUri;\n    private final OkHttpClient client;\n\n    public GithubProvider(String clientId, String clientSecret, String redirectUri) {\n        this.clientId = clientId;\n        this.clientSecret = clientSecret;\n        this.redirectUri = redirectUri;\n        this.client = new OkHttpClient();\n    }\n\n    public String getAccessToken(AccessTokenDTO accessTokenDTO) throws IOException {\n        String code = accessTokenDTO.getCode();\n        RequestBody body = new FormBody.Builder()\n                .add(\"client_id\", clientId)\n                .add(\"client_secret\", clientSecret)\n                .add(\"code\", code)\n                .add(\"redirect_uri\", redirectUri)\n                .build();\n\n        Request request = new Request.Builder()\n                .url(\"https://github.com/login/oauth/access_token\")\n                .post(body)\n                .build();\n\n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n            String responseBody = response.body().string();\n            String[] parts = responseBody.split(\"&\");\n            for (String part : parts) {\n                if (part.startsWith(\"access_token=\")) {\n                    return part.substring(\"access_token=\".length());\n                }\n            }\n            throw new IOException(\"Access token not found in response\");\n        }\n    }\n\n    public GithubUser getUser(String accessToken) throws IOException {\n        Request request = new Request.Builder()\n                .url(\"https://api.github.com/user\")\n                .header(\"Authorization\", \"token \" + accessToken)\n                .build();\n\n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n            String responseBody = response.body().string();\n            return parseGithubUser(responseBody);\n        }\n    }\n\n    private GithubUser parseGithubUser(String json) {\n        return new GithubUser();\n    }\n}"
  },
  {
    "Task_id": 241,
    "Instruction": "Task Description: Create a Java class that implements a RESTful API client for inter-process communication using HTTP, with support for handling both client and server errors, and token-based authentication.\n\nClass Description: The BeaconClient class is a RESTful HTTP client designed for inter-process communication. It handles HTTP requests and responses, manages authentication tokens, and provides error handling for both client-side (4xx) and server-side (5xx) errors. The class uses Java's HttpClient for communication and Jackson for JSON serialization/deserialization.\n\nAttributes:\n- port: int - The port number on which the server is running (localhost)\n- token: String - The authentication token used for Bearer token authorization (optional)\n\nMethods:\n- performRequest: <RES> performRequest(BeaconInterface<?> prov, String rawNode) -> RES - Sends an HTTP POST request to the specified path with the given content. Handles authentication and error responses. Returns the deserialized response object.\n- performRequest: <REQ, RES> performRequest(REQ req) -> RES - Converts the request object to JSON and sends it to the appropriate endpoint determined by the request type. Returns the deserialized response object.\n- parseClientError: Optional<BeaconClientErrorResponse> parseClientError(HttpResponse<String> response) -> Optional<BeaconClientErrorResponse> - Parses and returns client error responses (4xx status codes) from the server.\n- parseServerError: Optional<BeaconServerErrorResponse> parseServerError(HttpResponse<String> response) -> Optional<BeaconServerErrorResponse> - Parses and returns server error responses (5xx status codes) from the server.",
    "Canonical_solution": "import io.xpipe.beacon.api.HandshakeExchange;\nimport io.xpipe.core.util.JacksonMapper;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.util.Optional;\n\npublic class BeaconClient {\n\n    private final int port;\n    private String token;\n\n    public BeaconClient(int port) {\n        this.port = port;\n    }\n\n    public <RES> RES performRequest(BeaconInterface<?> prov, String rawNode)\n            throws BeaconConnectorException, BeaconClientException, BeaconServerException {\n        var client = HttpClient.newHttpClient();\n        HttpResponse<String> response;\n        try {\n            var uri = URI.create(\"http://127.0.0.1:\" + port + prov.getPath());\n            var builder = HttpRequest.newBuilder();\n            if (token != null) {\n                builder.header(\"Authorization\", \"Bearer \" + token);\n            }\n            var httpRequest = builder.uri(uri)\n                    .POST(HttpRequest.BodyPublishers.ofString(content))\n                    .build();\n            response = client.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n        } catch (Exception ex) {\n            throw new BeaconConnectorException(\"Couldn't send request\", ex);\n        }\n\n        var se = parseServerError(response);\n        if (se.isPresent()) {\n            se.get().throwError();\n        }\n\n        var ce = parseClientError(response);\n        if (ce.isPresent()) {\n            throw ce.get().throwException();\n        }\n\n        try {\n            var reader = JacksonMapper.getDefault().readerFor(prov.getResponseClass());\n            var emptyResponseClass = prov.getResponseClass().getDeclaredFields().length == 0;\n            var body = response.body();\n            if (emptyResponseClass && body.isBlank()) {\n                return createDefaultResponse(prov);\n            }\n            var v = (RES) reader.readValue(body);\n            return v;\n        } catch (IOException ex) {\n            throw new BeaconConnectorException(\"Couldn't parse response\", ex);\n        }\n    }\n\n    public <REQ, RES> RES performRequest(REQ req)\n            throws BeaconConnectorException, BeaconClientException, BeaconServerException {\n        ObjectNode node = JacksonMapper.getDefault().valueToTree(req);\n        var prov = BeaconInterface.byRequest(req);\n        if (prov.isEmpty()) {\n            throw new IllegalArgumentException(\"Unknown request class \" + req.getClass());\n        }\n        return performRequest(prov.get(), node.toPrettyString());\n    }\n\n    private Optional<BeaconClientErrorResponse> parseClientError(HttpResponse<String> response)\n            throws BeaconConnectorException {\n        if (response.statusCode() < 400 || response.statusCode() > 499) {\n            return Optional.empty();\n        }\n        try {\n            var v = JacksonMapper.getDefault().readValue(response.body(), BeaconClientErrorResponse.class);\n            return Optional.of(v);\n        } catch (IOException ex) {\n            throw new BeaconConnectorException(\"Couldn't parse client error message\", ex);\n        }\n    }\n\n    private Optional<BeaconServerErrorResponse> parseServerError(HttpResponse<String> response)\n            throws BeaconConnectorException {\n        if (response.statusCode() < 500 || response.statusCode() > 599) {\n            return Optional.empty();\n        }\n        try {\n            var v = JacksonMapper.getDefault().readValue(response.body(), BeaconServerErrorResponse.class);\n            return Optional.of(v);\n        } catch (IOException ex) {\n            throw new BeaconConnectorException(\"Couldn't parse client error message\", ex);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "```java\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.Optional;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class BeaconClient {\n    private final int port;\n    private final String token;\n    private final HttpClient httpClient;\n    private final ObjectMapper mapper;\n\n    public BeaconClient(int port, String token) {\n        this.port = port;\n        this.token = token;\n        this.httpClient = HttpClient.newHttpClient();\n        this.mapper = new ObjectMapper();\n    }\n\n    public <RES> RES performRequest(BeaconInterface<?> prov, String rawNode) throws Exception {\n        String url = \"http://localhost:\" + port + \"/\" + rawNode;\n        String requestBody = prov.getRequestData();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .header(\"Content-Type\", \"application/json\")\n                .header(\"Authorization\", \"Bearer \" + token)\n                .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                .build();\n\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n        if (response.statusCode() >= 200 && response.statusCode() < 300) {\n            return mapper.readValue(response.body(), (Class<RES>) ((ParameterizedType) prov.getClass().getGenericInterfaces()[0]).getActualTypeArguments()[0]);\n        } else if (response.statusCode() >= 400 && response.statusCode() < 500) {\n            Optional<BeaconClientErrorResponse> error = parseClientError(response);\n            if (error.isPresent()) {\n                return (RES) error.get();\n            }\n        } else {\n            Optional<BeaconServerErrorResponse> error = parseServerError(response);\n            if (error.isPresent()) {\n                return (RES) error.get();\n            }\n        }\n        throw new Exception(\"Unexpected response: \" + response.statusCode());\n    }\n\n    public <REQ, RES> RES performRequest(REQ req) throws Exception {\n        String url = \"http://localhost:\" + port + \"/endpoint\";\n        String requestBody = mapper.writeValueAsString(req);\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .header(\"Content-Type\", \"application/json\")\n                .header(\"Authorization\", \"Bearer \" + token)\n                .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                .build();\n\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n        if (response.statusCode() >= 200 && response.statusCode() < 300) {\n            return mapper.readValue(response.body(), (Class<RES>) ((ParameterizedType) req.getClass().getGenericInterfaces()[0]).getActualTypeArguments()[0]);\n        } else if (response.statusCode() >= 400 && response.statusCode() < 500) {\n            Optional<BeaconClientErrorResponse> error = parseClientError(response);\n            if (error.isPresent()) {\n                return (RES) error.get();\n            }\n        } else {\n            Optional<BeaconServerErrorResponse> error = parseServerError(response);\n            if (error.isPresent()) {\n                return (RES) error.get();\n            }\n        }\n        throw new Exception(\"Unexpected response: \" + response.statusCode());\n    }\n\n    private Optional<BeaconClientErrorResponse> parseClientError(HttpResponse<String> response) {\n        if (response.statusCode() >= 400 && response.statusCode() < 500) {\n            try {\n                return Optional.of(mapper.readValue(response.body(), BeaconClientErrorResponse.class));\n            } catch (Exception e) {\n                return Optional.empty();\n            }\n        }\n        return Optional.empty();\n    }\n\n    private Optional<BeaconServerErrorResponse> parseServerError(HttpResponse<String> response) {\n        if (response.statusCode() >= 500 && response.statusCode() < 600) {\n            try {\n                return Optional.of(mapper.readValue(response.body(), BeaconServerErrorResponse.class));\n            } catch (Exception e) {\n                return Optional.empty();\n            }\n        }\n        return Optional.empty();\n    }\n}\n```"
  },
  {
    "Task_id": 246,
    "Instruction": "Task Description: Create a Java class that provides HTTP client functionality for making POST requests and JSON requests to RESTful APIs, with support for both JSON and form-data payloads, and proper response handling.\n\nClass Description: The Network class is a utility class that encapsulates HTTP client operations for interacting with RESTful APIs. It provides methods for making POST requests with flexible parameter formats (JSON or form-data) and a specialized method for making requests that expect JSON responses.\n\nAttributes:\n\nhttpClient: [HttpClient] - A shared HTTP client instance used for all requests, initialized as a static final variable to ensure thread-safety and reuse.\n\nMethods:\n\nmakePOSTRequest: [Name](String url, Map<Object, Object> parameters, Map<String, String> headers, boolean convertParamtersToJSON) -> [HttpResponse<String>] - Makes a POST request to the specified URL with the given parameters and headers. The convertParamtersToJSON flag determines whether parameters are sent as JSON or form-urlencoded data.\n\nbuildFormDataFromMap: [Name](Map<Object, Object> data) -> [HttpRequest.BodyPublisher] - A private helper method that converts a Map into form-urlencoded string format for POST requests.\n\nmakeJsonRequest: [Name](String url) -> [JsonElement] - Makes a GET request to the specified URL and parses the response as JSON, throwing an IOException if the request fails.\n\nfailure: [Name](int statusCode) -> [boolean] - A private helper method that checks if an HTTP status code indicates failure (outside 200-299 range).",
    "Canonical_solution": "import com.google.gson.Gson;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParser;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\npublic class Network {\n\n    private static final HttpClient httpClient = HttpClient.newHttpClient();\n\n    public static HttpResponse<String> makePOSTRequest(String url, Map<Object, Object> parameters, Map<String, String> headers, boolean convertParamtersToJSON) throws IOException, InterruptedException {\n        Gson gson = new Gson();\n        String JSONParameters = gson.toJson(parameters);\n\n        HttpRequest.Builder requestBuilder = HttpRequest.newBuilder(URI.create(url))\n                .POST(convertParamtersToJSON ? BodyPublishers.ofString(JSONParameters) : buildFormDataFromMap(parameters));\n\n        for (Map.Entry<String, String> entry : headers.entrySet())\n            requestBuilder.header(entry.getKey(), entry.getValue());\n\n        HttpRequest request = requestBuilder.build();\n        return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    }\n\n    private static HttpRequest.BodyPublisher buildFormDataFromMap(Map<Object, Object> data) {\n        var builder = new StringBuilder();\n        for (Map.Entry<Object, Object> entry : data.entrySet()) {\n            if (builder.length() > 0) {\n                builder.append(\"&\");\n            }\n            builder.append(URLEncoder.encode(entry.getKey().toString(), StandardCharsets.UTF_8));\n            builder.append(\"=\");\n            builder.append(URLEncoder.encode(entry.getValue().toString(), StandardCharsets.UTF_8));\n        }\n        return HttpRequest.BodyPublishers.ofString(builder.toString());\n    }\n\n    static JsonElement makeJsonRequest(String url) throws IOException {\n        try {\n            HttpResponse<InputStream> response = httpClient.send(HttpRequest.newBuilder(URI.create(url)).build(),\n                    HttpResponse.BodyHandlers.ofInputStream());\n            if (failure(response.statusCode())) {\n                throw new IOException(\"HTTP Response was \" + response);\n            }\n            return JsonParser.parseReader(new BufferedReader(new InputStreamReader(response.body())));\n        } catch (InterruptedException e) {\n            throw new IOException(e);\n        }\n    }\n\n    private static boolean failure(int statusCode) {\n        return statusCode < 200 || statusCode > 299;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\nimport javax.json.Json;\nimport javax.json.JsonObject;\nimport javax.json.JsonParser;\nimport javax.json.JsonElement;\n\npublic class Network {\n    private static final HttpClient httpClient = HttpClient.newHttpClient();\n\n    public static HttpResponse<String> makePOSTRequest(String url, Map<Object, Object> parameters, Map<String, String> headers, boolean convertParamtersToJSON) throws IOException, InterruptedException {\n        HttpRequest.Builder requestBuilder = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .POST(convertParamtersToJSON ? buildJsonBody(parameters) : buildFormDataFromMap(parameters));\n        \n        if (headers != null) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                requestBuilder.header(entry.getKey(), entry.getValue());\n            }\n        }\n        \n        HttpRequest request = requestBuilder.build();\n        return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    }\n\n    private static HttpRequest.BodyPublisher buildJsonBody(Map<Object, Object> parameters) {\n        JsonObject json = Json.createObjectBuilder();\n        for (Map.Entry<Object, Object> entry : parameters.entrySet()) {\n            json.add(entry.getKey().toString(), entry.getValue().toString());\n        }\n        return HttpRequest.BodyPublishers.ofString(json.toString());\n    }\n\n    private static HttpRequest.BodyPublisher buildFormDataFromMap(Map<Object, Object> data) {\n        StringBuilder formData = new StringBuilder();\n        for (Map.Entry<Object, Object> entry : data.entrySet()) {\n            if (formData.length() > 0) {\n                formData.append(\"&\");\n            }\n            try {\n                formData.append(URLEncoder.encode(entry.getKey().toString(), StandardCharsets.UTF_8))\n                       .append(\"=\")\n                       .append(URLEncoder.encode(entry.getValue().toString(), StandardCharsets.UTF_8));\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        }\n        return HttpRequest.BodyPublishers.ofString(formData.toString());\n    }\n\n    public static JsonElement makeJsonRequest(String url) throws IOException, InterruptedException {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .GET()\n                .build();\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        if (failure(response.statusCode())) {\n            throw new IOException(\"Request failed with status code \" + response.statusCode());\n        }\n        JsonParser parser = Json.createParser(response.body());\n        return parser.getValue();\n    }\n\n    private static boolean failure(int statusCode) {\n        return statusCode < 200 || statusCode > 299;\n    }\n}"
  },
  {
    "Task_id": 247,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests to a RESTful API using the OkHttp client library, with support for both GET and POST methods, including timeout configuration and proper resource cleanup.\n\nClass Description: GHMatrixBatchRequester is a utility class designed to make HTTP requests to a GraphHopper matrix API. It provides methods for sending GET and POST requests, handles response processing, and includes timeout configurations for network operations.\n\nAttributes:\n- logger: Logger - Used for logging debug and error information\n- client: OkHttpClient - The HTTP client instance used to make requests\n\nMethods:\n- Constructor: GHMatrixBatchRequester() -> void - Initializes the HTTP client with default timeout settings (5 seconds for connect and read)\n- Constructor: GHMatrixBatchRequester(OkHttpClient) -> void - Allows injection of a custom configured OkHttpClient instance\n- getJson: getJson(String url) -> JsonResult - Sends a GET request to the specified URL and returns the response as a JsonResult object containing the response body, status code, and headers\n- postJson: postJson(String url, JsonNode requestJson) -> JsonResult - Sends a POST request with JSON payload to the specified URL and returns the response as a JsonResult object containing the response body, status code, and headers",
    "Canonical_solution": "import com.fasterxml.jackson.databind.JsonNode;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.ResponseBody;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.net.SocketTimeoutException;\nimport java.util.concurrent.TimeUnit;\n\nimport static com.graphhopper.api.GraphHopperWeb.X_GH_CLIENT_VERSION;\nimport static com.graphhopper.api.Version.GH_VERSION_FROM_MAVEN;\n\npublic class GHMatrixBatchRequester {\n\n    private final Logger logger = LoggerFactory.getLogger(getClass());\n    private OkHttpClient client;\n\n    public GHMatrixBatchRequester() {\n        this.client = new OkHttpClient.Builder()\n                .connectTimeout(5, TimeUnit.SECONDS)\n                .readTimeout(5, TimeUnit.SECONDS)\n                .build();\n    }\n\n    public GHMatrixBatchRequester(OkHttpClient client) {\n        this.client = client;\n    }\n\n    protected JsonResult getJson(String url) throws IOException {\n        Request okRequest = new Request.Builder().url(url)\n                .header(X_GH_CLIENT_VERSION, GH_VERSION_FROM_MAVEN)\n                .build();\n        ResponseBody body = null;\n        try {\n            Response rsp = client.newCall(okRequest).execute();\n            body = rsp.body();\n            return new JsonResult(body.string(), rsp.code(), rsp.headers().toMultimap());\n        } finally {\n            if (body != null) {\n                body.close();\n            }\n        }\n    }\n\n    protected JsonResult postJson(String url, JsonNode requestJson) throws IOException {\n        Request okRequest = new Request.Builder().url(url)\n                .header(X_GH_CLIENT_VERSION, GH_VERSION_FROM_MAVEN)\n                .post(createRequestBody(requestJson))\n                .build();\n        ResponseBody body = null;\n        try {\n            Response rsp = client.newCall(okRequest).execute();\n            body = rsp.body();\n            return new JsonResult(body.string(), rsp.code(), rsp.headers().toMultimap());\n        } finally {\n            if (body != null) {\n                body.close();\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "import okhttp3.*;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class GHMatrixBatchRequester {\n    private final Logger logger;\n    private final OkHttpClient client;\n    private final ObjectMapper objectMapper;\n\n    public GHMatrixBatchRequester() {\n        this.client = new OkHttpClient.Builder()\n                .connectTimeout(5, java.util.concurrent.TimeUnit.SECONDS)\n                .readTimeout(5, java.util.concurrent.TimeUnit.SECONDS)\n                .build();\n        this.logger = LoggerFactory.getLogger(GHMatrixBatchRequester.class);\n        this.objectMapper = new ObjectMapper();\n    }\n\n    public GHMatrixBatchRequester(OkHttpClient client) {\n        this.client = client;\n        this.logger = LoggerFactory.getLogger(GHMatrixBatchRequester.class);\n        this.objectMapper = new ObjectMapper();\n    }\n\n    public JsonResult getJson(String url) {\n        Request request = new Request.Builder().url(url).build();\n        try (Response response = client.newCall(request).execute()) {\n            String responseBody = response.body().string();\n            return new JsonResult(responseBody, response.code(), response.headers());\n        } catch (Exception e) {\n            logger.error(\"Error in GET request\", e);\n            return new JsonResult(null, -1, null);\n        }\n    }\n\n    public JsonResult postJson(String url, JsonNode requestJson) {\n        try {\n            String jsonStr = objectMapper.writeValueAsString(requestJson);\n            RequestBody body = RequestBody.create(jsonStr, MediaType.get(\"application/json\"));\n            Request request = new Request.Builder()\n                    .url(url)\n                    .post(body)\n                    .build();\n            try (Response response = client.newCall(request).execute()) {\n                String responseBody = response.body().string();\n                return new JsonResult(responseBody, response.code(), response.headers());\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in POST request\", e);\n            return new JsonResult(null, -1, null);\n        }\n    }\n}"
  },
  {
    "Task_id": 257,
    "Instruction": "Task Description: Create a Kafka sink class that writes data to a Kafka topic, with configuration parameters for the Kafka producer and topic name.\n\nClass Description: The KafkaSink class is a self-documenting sink that takes data from an observable stream, encodes it, and writes it to a specified Kafka topic. It handles Kafka producer initialization, message sending, and resource cleanup.\n\nAttributes:\n- encoder: [Func1<T, byte[]>] - Function to encode the input data into byte arrays\n- registry: [Registry] - Metrics registry for monitoring\n- kafkaProducerAtomicRef: [AtomicReference<KafkaProducer<byte[], byte[]>>] - Thread-safe reference to the Kafka producer instance\n- subscription: [Subscription] - Subscription to the observable data stream\n\nMethods:\n- call: [call(Context context, PortRequest ignore, Observable<T> dataO)] -> [void] - Initializes the Kafka producer if needed and subscribes to the input observable to send data to Kafka\n- getParameters: [getParameters()] -> [List<ParameterDefinition<?>>] - Returns the list of parameter definitions for Kafka configuration and topic name\n- metadata: [metadata()] -> [Metadata] - Provides metadata about the sink including name and description\n- close: [close()] -> [void] - Cleans up resources by unsubscribing from the observable stream",
    "Canonical_solution": "import com.netflix.spectator.api.Registry;\nimport io.mantisrx.runtime.Context;\nimport io.mantisrx.runtime.Metadata;\nimport io.mantisrx.runtime.PortRequest;\nimport io.mantisrx.runtime.parameter.ParameterDefinition;\nimport io.mantisrx.runtime.parameter.Parameters;\nimport io.mantisrx.runtime.parameter.type.StringParameter;\nimport io.mantisrx.runtime.parameter.validator.Validators;\nimport io.mantisrx.runtime.sink.SelfDocumentingSink;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicReference;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport rx.Observable;\nimport rx.Subscription;\nimport rx.functions.Func1;\nimport rx.schedulers.Schedulers;\n\npublic class KafkaSink<T> implements SelfDocumentingSink<T> {\n    private static final Logger logger = LoggerFactory.getLogger(KafkaSink.class);\n    private final Func1<T, byte[]> encoder;\n    private final Registry registry;\n    private final AtomicReference<KafkaProducer<byte[], byte[]>> kafkaProducerAtomicRef = new AtomicReference<>(null);\n    private Subscription subscription;\n\n    KafkaSink(Registry registry, Func1<T, byte[]> encoder) {\n        this.encoder = encoder;\n        this.registry = registry;\n    }\n\n    @Override\n    public void call(Context context, PortRequest ignore, Observable<T> dataO) {\n        if (kafkaProducerAtomicRef.get() == null) {\n            MantisKafkaProducerConfig mantisKafkaProducerConfig = new MantisKafkaProducerConfig(context);\n            Map<String, Object> producerProperties = mantisKafkaProducerConfig.getProducerProperties();\n            KafkaProducer<byte[], byte[]> kafkaProducer = new KafkaProducer<>(producerProperties);\n            kafkaProducerAtomicRef.compareAndSet(null, kafkaProducer);\n            logger.info(\"Kafka Producer initialized\");\n        }\n        KafkaProducer<byte[], byte[]> kafkaProducer = kafkaProducerAtomicRef.get();\n        Parameters parameters = context.getParameters();\n        String topic = (String)parameters.get(KafkaSinkJobParameters.TOPIC);\n\n        subscription = dataO.map(encoder::call)\n            .flatMap((dataBytes) ->\n                         Observable.from(kafkaProducer.send(new ProducerRecord<>(topic, dataBytes)))\n                             .subscribeOn(Schedulers.io()))\n            .subscribe();\n    }\n\n    @Override\n    public List<ParameterDefinition<?>> getParameters() {\n        final List<ParameterDefinition<?>> params = new ArrayList<>();\n        params.add(new StringParameter()\n                       .name(KafkaSinkJobParameters.TOPIC)\n                       .description(\"Kafka topic to write to\")\n                       .validator(Validators.notNullOrEmpty())\n                       .required()\n                       .build());\n        params.addAll(MantisKafkaProducerConfig.getJobParameterDefinitions());\n        return params;\n    }\n\n    @Override\n    public Metadata metadata() {\n        StringBuilder description = new StringBuilder();\n        description.append(\"Writes the output of the job into the configured Kafka topic\");\n\n        return new Metadata.Builder()\n            .name(\"Mantis Kafka Sink\")\n            .description(description.toString())\n            .build();\n    }\n\n    @Override\n    public void close() {\n        subscription.unsubscribe();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "right_result": "```java\nimport io.reactivex.Observable;\nimport io.reactivex.Subscription;\nimport io.reactivex.functions.Function;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.ByteArraySerializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class KafkaSink<T> {\n    private final Function<T, byte[]> encoder;\n    private final Registry registry;\n    private final AtomicReference<KafkaProducer<byte[], byte[]>> kafkaProducerAtomicRef;\n    private Subscription subscription;\n\n    public KafkaSink(Function<T, byte[]> encoder, Registry registry) {\n        this.encoder = encoder;\n        this.registry = registry;\n        this.kafkaProducerAtomicRef = new AtomicReference<>();\n    }\n\n    public void call(Context context, PortRequest ignore, Observable<T> dataO) {\n        KafkaProducer<byte[], byte[]> producer = kafkaProducerAtomicRef.get();\n        if (producer == null) {\n            synchronized (kafkaProducerAtomicRef) {\n                producer = kafkaProducerAtomicRef.get();\n                if (producer == null) {\n                    Properties props = new Properties();\n                    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, context.getParameter(\"bootstrap.servers\"));\n                    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n                    props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n                    producer = new KafkaProducer<>(props);\n                    kafkaProducerAtomicRef.set(producer);\n                }\n            }\n        }\n\n        subscription = dataO.subscribe(\n            data -> {\n                byte[] bytes = encoder.apply(data);\n                String topic = context.getParameter(\"topic\");\n                ProducerRecord<byte[], byte[]> record = new ProducerRecord<>(topic, bytes);\n                producer.send(record);\n            },\n            error -> {\n                // Handle error\n            },\n            () -> {\n                // onComplete\n            }\n        );\n    }\n\n    public List<ParameterDefinition<?>> getParameters() {\n        List<ParameterDefinition<?>> params = new ArrayList<>();\n        params.add(new ParameterDefinition<>(\"bootstrap.servers\", String.class, \"Kafka bootstrap servers\"));\n        params.add(new ParameterDefinition<>(\"topic\", String.class, \"Kafka topic name\"));\n        return params;\n    }\n\n    public Metadata metadata() {\n        return new Metadata(\"kafka_sink\", \"Writes data to a Kafka topic\");\n    }\n\n    public void close() {\n        if (subscription != null) {\n            subscription.unsubscribe();\n        }\n        KafkaProducer<byte[], byte[]> producer = kafkaProducerAtomicRef.get();\n        if (producer != null) {\n            producer.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 258,
    "Instruction": "Task Description: Create a Java class that implements a Kafka producer for sending partition metric samples to a Kafka topic, with configurable producer properties and error handling.\n\nClass Description: KafkaSampleProducer is a class that provides functionality to create and manage a Kafka producer for sending partition metric samples. It handles producer configuration, message sending, and proper resource cleanup.\n\nAttributes:\n- PRODUCER_CLOSE_TIMEOUT: [Duration] - The maximum time to wait for the producer to close gracefully\n- _shutdown: [boolean] - Flag indicating whether the producer should be shut down\n- _producer: [Producer<byte[], byte[]>] - The Kafka producer instance\n\nMethods:\n- createProducer: [void]([Map<String, ?> config, String producerClientId]) -> [void] - Configures and creates a Kafka producer instance with the given configuration and client ID\n- storePartitionMetricSamples: [AtomicInteger]([MetricSampler.Samples samples, Producer<byte[], byte[]> producer, String partitionMetricSampleStoreTopic, Logger log]) -> [AtomicInteger] - Sends partition metric samples to the specified Kafka topic and returns the count of successfully sent samples\n- close: [void]([]) -> [void] - Gracefully shuts down the Kafka producer with a timeout",
    "Canonical_solution": "import com.linkedin.kafka.cruisecontrol.monitor.sampling.holder.PartitionMetricSample;\nimport java.time.Duration;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.serialization.ByteArraySerializer;\nimport org.slf4j.Logger;\n\nimport static com.linkedin.kafka.cruisecontrol.monitor.sampling.SamplingUtils.bootstrapServers;\n\npublic class KafkaSampleProducer {\n    protected static final Duration PRODUCER_CLOSE_TIMEOUT = Duration.ofMinutes(3);\n    protected volatile boolean _shutdown = false;\n    protected Producer<byte[], byte[]> _producer;\n\n    protected void createProducer(Map<String, ?> config, String producerClientId) {\n        Properties producerProps = new Properties();\n        producerProps.putAll(config);\n        producerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers(config));\n        producerProps.setProperty(ProducerConfig.CLIENT_ID_CONFIG, producerClientId);\n        producerProps.setProperty(ProducerConfig.LINGER_MS_CONFIG, \"30000\");\n        producerProps.setProperty(ProducerConfig.BATCH_SIZE_CONFIG, \"500000\");\n        producerProps.setProperty(ProducerConfig.BUFFER_MEMORY_CONFIG, \"67108864\");\n        producerProps.setProperty(ProducerConfig.RETRIES_CONFIG, \"5\");\n        producerProps.setProperty(ProducerConfig.COMPRESSION_TYPE_CONFIG, \"gzip\");\n        producerProps.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        producerProps.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        producerProps.setProperty(ProducerConfig.RECONNECT_BACKOFF_MS_CONFIG, config.get(\"reconnect.backoff.ms\").toString());\n        _producer = new KafkaProducer<>(producerProps);\n    }\n\n    static AtomicInteger storePartitionMetricSamples(MetricSampler.Samples samples, Producer<byte[], byte[]> producer,\n                                                   String partitionMetricSampleStoreTopic, Logger log) {\n        final AtomicInteger metricSampleCount = new AtomicInteger(0);\n        for (PartitionMetricSample sample : samples.partitionMetricSamples()) {\n            producer.send(new ProducerRecord<>(partitionMetricSampleStoreTopic, null, sample.sampleTime(), null, sample.toBytes()),\n                        (recordMetadata, e) -> {\n                            if (e == null) {\n                                metricSampleCount.incrementAndGet();\n                            } else {\n                                log.error(\"Failed to produce partition metric sample for {} of timestamp {} due to exception\",\n                                          sample.entity().tp(), sample.sampleTime(), e);\n                            }\n                        });\n        }\n        return metricSampleCount;\n    }\n\n    public void close() {\n        _shutdown = true;\n        _producer.close(PRODUCER_CLOSE_TIMEOUT);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "right_result": "```java\nimport org.apache.kafka.common.serialization.ByteArraySerializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.Callback;\nimport org.apache.kafka.clients.producer.RecordMetadata;\nimport org.slf4j.Logger;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.time.Duration;\nimport java.util.concurrent.TimeUnit;\n\npublic class KafkaSampleProducer {\n    private static final Duration PRODUCER_CLOSE_TIMEOUT = Duration.ofSeconds(5);\n    private volatile boolean _shutdown;\n    private Producer<byte[], byte[]> _producer;\n\n    public void createProducer(Map<String, ?> config, String producerClientId) {\n        Properties props = new Properties();\n        props.putAll(config);\n        props.put(ProducerConfig.CLIENT_ID_CONFIG, producerClientId);\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        _producer = new KafkaProducer<>(props);\n    }\n\n    public AtomicInteger storePartitionMetricSamples(MetricSampler.Samples samples, Producer<byte[], byte[]> producer, String partitionMetricSampleStoreTopic, Logger log) {\n        AtomicInteger successCount = new AtomicInteger(0);\n        for (Object sample : samples) {\n            try {\n                byte[] key = (byte[]) sample.getClass().getMethod(\"getKey\").invoke(sample);\n                byte[] value = (byte[]) sample.getClass().getMethod(\"getValue\").invoke(sample);\n                ProducerRecord<byte[], byte[]> record = new ProducerRecord<>(partitionMetricSampleStoreTopic, key, value);\n                producer.send(record, (metadata, exception) -> {\n                    if (exception == null) {\n                        successCount.incrementAndGet();\n                    } else {\n                        log.error(\"Failed to send sample\", exception);\n                    }\n                });\n            } catch (Exception e) {\n                log.error(\"Error processing sample\", e);\n            }\n        }\n        return successCount;\n    }\n\n    public void close() {\n        if (_producer != null) {\n            try {\n                _producer.close(PRODUCER_CLOSE_TIMEOUT.toMillis(), TimeUnit.MILLISECONDS);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                // Log the interruption\n            } finally {\n                _shutdown = true;\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 262,
    "Instruction": "Task Description: Implement a Java class that manages non-blocking HTTP connections using Java NIO (New I/O) capabilities. The class should handle connection establishment, connection queue management, and distribute connections across multiple processors for load balancing.\n\nClass Description: NIOConnector is a thread-based class that manages asynchronous HTTP connections using Java NIO. It maintains a queue of pending connections, establishes them asynchronously, and distributes successfully established connections to a pool of NIOProcessor instances for further processing.\n\nAttributes:\n- name: String - The name identifier for this connector thread\n- selector: Selector - The NIO selector used for monitoring connection events\n- connectQueue: BlockingQueue<BackendConnection> - Queue holding pending connection requests\n- processors: NIOProcessor[] - Array of processors for handling established connections\n- nextProcessor: int - Index for round-robin processor selection\n- connectCount: long - Counter for tracking connection attempts\n\nMethods:\n- NIOConnector(String name) -> void - Constructor that initializes the connector with a name and opens a new selector\n- setProcessors(NIOProcessor[] processors) -> void - Sets the array of processors for connection distribution\n- postConnect(BackendConnection c) -> void - Adds a new connection request to the queue and wakes up the selector\n- run() -> void - Main thread loop that handles connection establishment and event processing\n- connect(Selector selector) -> void - Processes pending connections from the queue\n- finishConnect(SelectionKey key, Object att) -> void - Completes the connection process for a channel\n- clearSelectionKey(SelectionKey key) -> void - Cleans up a selection key after processing\n- nextProcessor() -> NIOProcessor - Selects the next processor in round-robin fashion\n\nInner Class:\n- ConnectIdGenerator - Generates unique IDs for established connections with thread-safe incrementing",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.util.Set;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\nimport org.apache.log4j.Logger;\n\npublic final class NIOConnector extends Thread {\n    private static final Logger LOGGER = Logger.getLogger(NIOConnector.class);\n    private static final ConnectIdGenerator ID_GENERATOR = new ConnectIdGenerator();\n\n    private final String name;\n    private final Selector selector;\n    private final BlockingQueue<BackendConnection> connectQueue;\n    private NIOProcessor[] processors;\n    private int nextProcessor;\n    private long connectCount;\n\n    public NIOConnector(String name) throws IOException {\n        super.setName(name);\n        this.name = name;\n        this.selector = Selector.open();\n        this.connectQueue = new LinkedBlockingQueue<BackendConnection>();\n    }\n\n    public void setProcessors(NIOProcessor[] processors) {\n        this.processors = processors;\n    }\n\n    public void postConnect(BackendConnection c) {\n        connectQueue.offer(c);\n        selector.wakeup();\n    }\n\n    @Override\n    public void run() {\n        final Selector selector = this.selector;\n        for (;;) {\n            ++connectCount;\n            try {\n                selector.select(1000L);\n                connect(selector);\n                Set<SelectionKey> keys = selector.selectedKeys();\n                try {\n                    for (SelectionKey key : keys) {\n                        Object att = key.attachment();\n                        if (att != null && key.isValid() && key.isConnectable()) {\n                            finishConnect(key, att);\n                        } else {\n                            key.cancel();\n                        }\n                    }\n                } finally {\n                    keys.clear();\n                }\n            } catch (Throwable e) {\n                LOGGER.warn(name, e);\n            }\n        }\n    }\n\n    private void connect(Selector selector) {\n        BackendConnection c = null;\n        while ((c = connectQueue.poll()) != null) {\n            try {\n                c.connect(selector);\n            } catch (Throwable e) {\n                c.error(ErrorCode.ERR_CONNECT_SOCKET, e);\n            }\n        }\n    }\n\n    private void finishConnect(SelectionKey key, Object att) {\n        BackendConnection c = (BackendConnection) att;\n        try {\n            if (c.finishConnect()) {\n                clearSelectionKey(key);\n                c.setId(ID_GENERATOR.getId());\n                NIOProcessor processor = nextProcessor();\n                c.setProcessor(processor);\n                processor.postRegister(c);\n            }\n        } catch (Throwable e) {\n            clearSelectionKey(key);\n            c.error(ErrorCode.ERR_FINISH_CONNECT, e);\n        }\n    }\n\n    private void clearSelectionKey(SelectionKey key) {\n        if (key.isValid()) {\n            key.attach(null);\n            key.cancel();\n        }\n    }\n\n    private NIOProcessor nextProcessor() {\n        if (++nextProcessor == processors.length) {\n            nextProcessor = 0;\n        }\n        return processors[nextProcessor];\n    }\n\n    private static class ConnectIdGenerator {\n        private static final long MAX_VALUE = Long.MAX_VALUE;\n        private long connectId = 0L;\n        private final Object lock = new Object();\n\n        private long getId() {\n            synchronized (lock) {\n                if (connectId >= MAX_VALUE) {\n                    connectId = 0L;\n                }\n                return ++connectId;\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 20,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class NIOConnector {\n    private final String name;\n    private final Selector selector;\n    private final BlockingQueue<BackendConnection> connectQueue;\n    private NIOProcessor[] processors;\n    private int nextProcessor;\n    private long connectCount;\n    private final ConnectIdGenerator idGenerator;\n\n    public NIOConnector(String name) throws IOException {\n        this.name = name;\n        this.selector = Selector.open();\n        this.connectQueue = new LinkedBlockingQueue<>();\n        this.connectCount = 0;\n        this.idGenerator = new ConnectIdGenerator();\n    }\n\n    public void setProcessors(NIOProcessor[] processors) {\n        this.processors = processors;\n        this.nextProcessor = 0;\n    }\n\n    public void postConnect(BackendConnection c) {\n        connectQueue.add(c);\n        selector.wakeup();\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            try {\n                int ready = selector.select();\n                if (ready > 0) {\n                    Set<SelectionKey> selectedKeys = selector.selectedKeys();\n                    Iterator<SelectionKey> it = selectedKeys.iterator();\n                    while (it.hasNext()) {\n                        SelectionKey key = it.next();\n                        if (key.isConnectable()) {\n                            finishConnect(key, key.attachment());\n                        }\n                        it.remove();\n                    }\n                }\n                connect(selector);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void connect(Selector selector) throws IOException {\n        BackendConnection c;\n        while ((c = connectQueue.poll()) != null) {\n            try {\n                SocketChannel channel = SocketChannel.open();\n                channel.configureBlocking(false);\n                channel.connect(c.getRemoteAddress());\n                channel.register(selector, SelectionKey.OP_CONNECT, c);\n                connectCount++;\n            } catch (IOException e) {\n                // Handle connection error\n            }\n        }\n    }\n\n    private void finishConnect(SelectionKey key, Object att) {\n        if (!key.isValid()) {\n            return;\n        }\n        SocketChannel channel = (SocketChannel) key.channel();\n        try {\n            if (channel.finishConnect()) {\n                long connectionId = idGenerator.nextId();\n                NIOProcessor processor = nextProcessor();\n                processor.handleConnection(channel, connectionId);\n            }\n        } catch (IOException e) {\n            // Handle error\n        } finally {\n            clearSelectionKey(key);\n        }\n    }\n\n    private void clearSelectionKey(SelectionKey key) {\n        key.cancel();\n    }\n\n    private NIOProcessor nextProcessor() {\n        NIOProcessor processor = processors[nextProcessor];\n        nextProcessor = (nextProcessor + 1) % processors.length;\n        return processor;\n    }\n\n    private static class ConnectIdGenerator {\n        private final AtomicInteger id = new AtomicInteger(0);\n\n        public long nextId() {\n            return id.getAndIncrement();\n        }\n    }\n}\n\nclass BackendConnection {\n    private final InetSocketAddress remoteAddress;\n\n    public BackendConnection(InetSocketAddress remoteAddress) {\n        this.remoteAddress = remoteAddress;\n    }\n\n    public InetSocketAddress getRemoteAddress() {\n        return remoteAddress;\n    }\n}\n\ninterface NIOProcessor {\n    void handleConnection(SocketChannel channel, long connectionId);\n}\n```"
  },
  {
    "Task_id": 263,
    "Instruction": "Task Description: Implement a Java NIO HTTP server that handles multiple client connections asynchronously, measures throughput performance, and tracks message statistics.\n\nClass Description: NioServerPerfTest is a non-blocking NIO server implementation that accepts client connections, reads data efficiently, and tracks performance metrics including bytes received, messages processed, and throughput rates.\n\nAttributes:\n- ch: [ServerSocketChannel] - The server socket channel listening for incoming connections\n- selector: [Selector] - The selector managing multiple non-blocking channels\n- running: [boolean] - Flag controlling server execution\n- buffer: [ByteBuffer] - Buffer for reading incoming data\n- total_bytes_received: [AtomicLong] - Counter for total bytes received\n- total_msgs: [AtomicLong] - Counter for total messages processed\n- start: [AtomicLong] - Timestamp for performance measurement start\n\nMethods:\n- create: [create(int size, boolean direct)] -> [ByteBuffer] - Creates a new ByteBuffer of given size, optionally direct\n- start: [start(boolean direct)] -> [void] - Starts the NIO server with specified buffer type (direct/heap)\n- handle: [handle(SocketChannel ch, ByteBuffer buf)] -> [boolean] - Handles read operations from a client channel, returns false to close connection",
    "Canonical_solution": "import org.jgroups.util.Util;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class NioServerPerfTest {\n    protected ServerSocketChannel ch;\n    protected Selector            selector;\n    protected volatile boolean    running=true;\n    protected ByteBuffer          buffer;\n    protected final AtomicLong    total_bytes_received=new AtomicLong(0);\n    protected final AtomicLong    total_msgs=new AtomicLong(0);\n    protected final AtomicLong    start=new AtomicLong(0);\n\n    public static final long      BYTES_TO_SEND=10_000_000;\n    public static final int       SIZE=1000;\n\n    protected static ByteBuffer create(int size, boolean direct) {\n        return direct? ByteBuffer.allocateDirect(size) : ByteBuffer.allocate(size);\n    }\n\n    protected void start(boolean direct) throws Exception {\n        selector=Selector.open();\n\n        ch=ServerSocketChannel.open();\n        ch.bind(new InetSocketAddress(\"0.0.0.0\", 7500));\n        ch.configureBlocking(false);\n        ch.register(selector, SelectionKey.OP_ACCEPT, null);\n        System.out.println(\"-- server ready\");\n\n        while(running) {\n            selector.select();\n            Set<SelectionKey> keys=selector.selectedKeys();\n            for(Iterator<SelectionKey> it=keys.iterator(); it.hasNext();) {\n                SelectionKey key=it.next();\n                if(!key.isValid()) {\n                    it.remove();\n                    continue;\n                }\n                it.remove();\n                if(key.isAcceptable()) {\n                    SocketChannel client_ch=ch.accept();\n                    if(client_ch != null) {\n                        System.out.printf(\"accepted connection from %s\\n\", client_ch.getRemoteAddress());\n                        client_ch.configureBlocking(false);\n                        client_ch.register(selector, SelectionKey.OP_READ, create(SIZE, direct));\n                    }\n                }\n                else if(key.isReadable()) {\n                    if(!handle((SocketChannel)key.channel(), (ByteBuffer)key.attachment())) {\n                        key.cancel();\n                        Util.close(key.channel());\n                    }\n                }\n            }\n        }\n\n        Util.close(selector,ch);\n    }\n\n    protected boolean handle(SocketChannel ch, ByteBuffer buf) {\n        try {\n            if(start.get() == 0)\n                start.compareAndSet(0, System.currentTimeMillis());\n            int num=ch.read(buf);\n            if(num < 0)\n                return false;\n            total_bytes_received.addAndGet(num);\n            if(!buf.hasRemaining()) {\n                total_msgs.incrementAndGet();\n                buf.rewind();\n            }\n            if(total_bytes_received.get() >= BYTES_TO_SEND) {\n                long time=System.currentTimeMillis() - start.get();\n                double throughput_sec=total_bytes_received.get() / (time / 1000.0), msgs_sec=total_msgs.get() / (time / 1000.0);\n                System.out.printf(\"\\n===========================\\nreceived %d messages in %.2f secs: throughput: %s/sec, %.2f msgs/sec\\n\",\n                                  total_msgs.get(), time/1000.0, Util.printBytes(throughput_sec), msgs_sec);\n                start.set(0);\n                total_bytes_received.set(0);\n                total_msgs.set(0);\n                return false;\n            }\n        }\n        catch(IOException e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "right_result": "import java.nio.ByteBuffer;\nimport java.nio.channels.*;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Set;\nimport java.util.Iterator;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class NioServerPerfTest {\n    private ServerSocketChannel ch;\n    private Selector selector;\n    private boolean running;\n    private ByteBuffer buffer;\n    private final AtomicLong total_bytes_received = new AtomicLong(0);\n    private final AtomicLong total_msgs = new AtomicLong(0);\n    private final AtomicLong start = new AtomicLong(0);\n\n    public static ByteBuffer create(int size, boolean direct) {\n        return direct ? ByteBuffer.allocateDirect(size) : ByteBuffer.allocate(size);\n    }\n\n    public void start(boolean direct) {\n        try {\n            ch = ServerSocketChannel.open();\n            ch.configureBlocking(false);\n            ch.bind(new InetSocketAddress(8080));\n            selector = Selector.open();\n            ch.register(selector, SelectionKey.OP_ACCEPT);\n            buffer = create(1024, direct);\n            start.set(System.nanoTime());\n            running = true;\n            while (running) {\n                selector.select();\n                Set<SelectionKey> keys = selector.selectedKeys();\n                Iterator<SelectionKey> it = keys.iterator();\n                while (it.hasNext()) {\n                    SelectionKey key = it.next();\n                    if (key.isAcceptable()) {\n                        SocketChannel clientCh = ch.accept();\n                        clientCh.configureBlocking(false);\n                        clientCh.register(selector, SelectionKey.OP_READ);\n                    } else if (key.isReadable()) {\n                        SocketChannel clientCh = (SocketChannel) key.channel();\n                        if (!handle(clientCh, buffer)) {\n                            clientCh.close();\n                        }\n                    }\n                    it.remove();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private boolean handle(SocketChannel ch, ByteBuffer buf) {\n        try {\n            int readBytes = ch.read(buf);\n            if (readBytes == -1) {\n                return false;\n            }\n            if (readBytes > 0) {\n                total_bytes_received.addAndGet(readBytes);\n                total_msgs.incrementAndGet();\n                buf.flip();\n                buf.clear();\n            }\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n}"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Implement a Java NIO HTTP server that handles client connections asynchronously, processes incoming requests, and sends responses back to clients. The server should use non-blocking I/O operations managed by a Selector to efficiently handle multiple connections.\n\nClass Description: NioHttpServer is a class that implements a non-blocking HTTP server using Java NIO (New I/O) capabilities. It manages client connections, reads incoming requests, and writes responses asynchronously. The server can also make HTTP requests to external services (like Baidu in the example) to fetch response data.\n\nAttributes:\n- charset: [Charset] - The character set used for encoding/decoding text data (UTF-8 in this case)\n- client: [HttpClient] - Apache HttpClient instance used to make external HTTP requests\n\nMethods:\n- startServer: [startServer(int port)] -> [void] - Starts the HTTP server on the specified port, initializes the ServerSocketChannel and Selector, and begins the event loop to handle client connections\n- handleAccept: [handleAccept(SelectionKey key, Selector selector)] -> [void] - Handles new client connections by accepting the SocketChannel and registering it with the selector for write operations\n- handleRead: [handleRead(SelectionKey key, Selector selector)] -> [void] - Handles incoming data from clients by reading from the SocketChannel and preparing for write operations\n- handleWrite: [handleWrite(SelectionKey key, Selector selector)] -> [void] - Handles writing data to clients by sending responses through the SocketChannel and preparing for read operations\n- executeResponse: [executeResponse()] -> [String] - Makes an HTTP GET request to an external service (Baidu in the example) and returns the response body as a string",
    "Canonical_solution": "import org.apache.commons.codec.Charsets;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NioHttpServer {\n\n    private static Charset charset = Charset.forName(\"UTF8\");\n    private HttpClient client = HttpClientBuilder.create().build();\n\n    public void startServer(int port) throws IOException {\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        Selector selector = Selector.open();\n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        while (true) {\n            if (selector.select(1) > 0) {\n                Set<SelectionKey> set = selector.selectedKeys();\n                Iterator<SelectionKey> keyIterator = set.iterator();\n                while (keyIterator.hasNext()) {\n                    SelectionKey key = keyIterator.next();\n                    if (key.isAcceptable()) {\n                        handleAccept(key, selector);\n                    } else if (key.isReadable()) {\n                        handleRead(key, selector);\n                    } else if (key.isWritable()) {\n                        handleWrite(key, selector);\n                    }\n                    keyIterator.remove();\n                }\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();\n        clientChannel.configureBlocking(false);\n        clientChannel.register(selector, SelectionKey.OP_WRITE);\n    }\n\n    private void handleRead(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        clientChannel.read(byteBuffer);\n        byteBuffer.flip();\n        System.out.println(Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());\n        key.interestOps(SelectionKey.OP_WRITE);\n        selector.wakeup();\n    }\n\n    private void handleWrite(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        String data = executeResponse().substring(0, 100);\n        byteBuffer.put(data.getBytes());\n        clientChannel.write(byteBuffer);\n        key.interestOps(SelectionKey.OP_READ);\n        selector.wakeup();\n    }\n\n    private String executeResponse() throws IOException {\n        String data = \"\";\n        HttpGet get = new HttpGet(\"http://www.baidu.com\");\n        HttpResponse response = client.execute(get);\n        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n            data = EntityUtils.toString(response.getEntity(), Charsets.UTF_8);\n        }\n        return data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Iterator;\nimport java.util.Set;\n\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\n\npublic class NioHttpServer {\n    private final java.nio.charset.Charset charset = StandardCharsets.UTF_8;\n    private final CloseableHttpClient client = HttpClients.createDefault();\n\n    public void startServer(int port) throws IOException {\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        serverSocketChannel.bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n\n        Selector selector = Selector.open();\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        while (true) {\n            selector.select();\n            Set<SelectionKey> selectedKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iterator = selectedKeys.iterator();\n\n            while (iterator.hasNext()) {\n                SelectionKey key = iterator.next();\n                if (key.isAcceptable()) {\n                    handleAccept(key, selector);\n                } else if (key.isReadable()) {\n                    handleRead(key, selector);\n                } else if (key.isWritable()) {\n                    handleWrite(key, selector);\n                }\n                iterator.remove();\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key, Selector selector) throws IOException {\n        ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();\n        SocketChannel socketChannel = serverSocketChannel.accept();\n        socketChannel.configureBlocking(false);\n        socketChannel.register(selector, SelectionKey.OP_WRITE);\n    }\n\n    private void handleRead(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        int bytesRead = socketChannel.read(buffer);\n        if (bytesRead == -1) {\n            socketChannel.close();\n            return;\n        }\n        buffer.flip();\n        String request = new String(buffer.array(), 0, bytesRead, charset);\n        System.out.println(\"Received: \" + request);\n        socketChannel.register(selector, SelectionKey.OP_WRITE);\n    }\n\n    private void handleWrite(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) key.channel();\n        String response = executeResponse();\n        ByteBuffer buffer = ByteBuffer.wrap(response.getBytes(charset));\n        socketChannel.write(buffer);\n        socketChannel.register(selector, SelectionKey.OP_READ);\n    }\n\n    private String executeResponse() {\n        try {\n            HttpGet request = new HttpGet(\"http://www.baidu.com\");\n            CloseableHttpResponse response = client.execute(request);\n            String body = EntityUtils.toString(response.getEntity());\n            response.close();\n            return body;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"Error\";\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 266,
    "Instruction": "Task Description: Implement a non-blocking HTTP server using Java NIO (New I/O) that can handle multiple client connections concurrently. The server should be able to accept new connections, read incoming requests, and write responses asynchronously using separate threads for different operations.\n\nClass Description: NioHttpServer is a multi-threaded HTTP server implementation using Java NIO that handles client connections in a non-blocking manner. It uses three separate selectors for different operations: accepting connections, reading requests, and writing responses.\n\nAttributes:\n- serverSocketChannel: ServerSocketChannel - The main server channel that listens for incoming connections\n- selector: Selector - The selector for accepting new client connections\n- clientReadSelector: Selector - The selector for handling read operations from clients\n- clientWriteSelector: Selector - The selector for handling write operations to clients\n\nMethods:\n- NioHttpServer(int port) -> void - Constructor that initializes the server socket channel and selectors, binds to the specified port, and configures non-blocking mode\n- start() -> void - Starts three separate threads for handling server operations (accepting connections, reading requests, and writing responses)\n- ServerChannelThread(Selector serverSelector, Selector clientReadSelector) -> void - Nested class that handles accepting new client connections and registers them with the read selector\n- ClientReadChannelThread(Selector clientReadSelector, Selector clientWriteSelector) -> void - Nested class that handles reading incoming requests from clients and registers them with the write selector when ready to respond\n- ClientWriteChannelThread(Selector clientReadSelector, Selector clientWriteSelector) -> void - Nested class that handles writing responses to clients and registers them back with the read selector when done",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NioHttpServer {\n\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n    private Selector clientReadSelector;\n    private Selector clientWriteSelector;\n\n    public NioHttpServer(int port) throws IOException {\n        serverSocketChannel = ServerSocketChannel.open();\n        selector = Selector.open();\n        clientReadSelector = Selector.open();\n        clientWriteSelector = Selector.open();\n        \n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n    }\n\n    public void start() {\n        new Thread(new ServerChannelThread(selector, clientReadSelector)).start();\n        new Thread(new ClientReadChannelThread(clientReadSelector, clientWriteSelector)).start();\n        new Thread(new ClientWriteChannelThread(clientReadSelector, clientWriteSelector)).start();\n    }\n\n    private static class ServerChannelThread implements Runnable {\n        private Selector serverSelector;\n        private Selector clientReadSelector;\n\n        public ServerChannelThread(Selector serverSelector, Selector clientReadSelector) {\n            this.serverSelector = serverSelector;\n            this.clientReadSelector = clientReadSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    if (serverSelector.select(1) > 0) {\n                        Set<SelectionKey> set = serverSelector.selectedKeys();\n                        Iterator<SelectionKey> keyIterator = set.iterator();\n\n                        while (keyIterator.hasNext()) {\n                            SelectionKey key = keyIterator.next();\n                            if (key.isAcceptable()) {\n                                SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();\n                                clientChannel.configureBlocking(false);\n                                clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                            }\n                            keyIterator.remove();\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class ClientReadChannelThread implements Runnable {\n        private Selector clientReadSelector;\n        private Selector clientWriteSelector;\n\n        public ClientReadChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    if (clientReadSelector.select(1) > 0) {\n                        Set<SelectionKey> set = clientReadSelector.selectedKeys();\n                        Iterator<SelectionKey> keyIterator = set.iterator();\n\n                        while (keyIterator.hasNext()) {\n                            SelectionKey key = keyIterator.next();\n\n                            if (key.isReadable()) {\n                                try {\n                                    SocketChannel clientChannel = (SocketChannel) key.channel();\n                                    ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n                                    clientChannel.read(byteBuffer);\n                                    byteBuffer.flip();\n                                    System.out.println(Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());\n                                    clientChannel.register(clientWriteSelector, SelectionKey.OP_WRITE);\n                                } finally {\n                                    keyIterator.remove();\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class ClientWriteChannelThread implements Runnable {\n        private Selector clientReadSelector;\n        private Selector clientWriteSelector;\n\n        public ClientWriteChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    if (clientWriteSelector.select(1) > 0) {\n                        Set<SelectionKey> set = clientWriteSelector.selectedKeys();\n                        Iterator<SelectionKey> keyIterator = set.iterator();\n\n                        while (keyIterator.hasNext()) {\n                            SelectionKey key = keyIterator.next();\n\n                            if (key.isWritable()) {\n                                try {\n                                    SocketChannel clientChannel = (SocketChannel) key.channel();\n                                    ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n                                    String msg = \"server channel write: current time mill \" + System.currentTimeMillis();\n                                    byteBuffer.put(msg.getBytes());\n                                    byteBuffer.flip();\n                                    clientChannel.write(byteBuffer);\n                                    clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                                } finally {\n                                    keyIterator.remove();\n                                    key.interestOps(SelectionKey.OP_READ);\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\n\npublic class NioHttpServer {\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n    private Selector clientReadSelector;\n    private Selector clientWriteSelector;\n\n    public NioHttpServer(int port) throws IOException {\n        serverSocketChannel = ServerSocketChannel.open();\n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        selector = Selector.open();\n        clientReadSelector = Selector.open();\n        clientWriteSelector = Selector.open();\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n    }\n\n    public void start() {\n        new Thread(new ServerChannelThread(selector, clientReadSelector)).start();\n        new Thread(new ClientReadChannelThread(clientReadSelector, clientWriteSelector)).start();\n        new Thread(new ClientWriteChannelThread(clientReadSelector, clientWriteSelector)).start();\n    }\n\n    private class ServerChannelThread implements Runnable {\n        private final Selector serverSelector;\n        private final Selector clientReadSelector;\n\n        public ServerChannelThread(Selector serverSelector, Selector clientReadSelector) {\n            this.serverSelector = serverSelector;\n            this.clientReadSelector = clientReadSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    serverSelector.select();\n                    Iterator<SelectionKey> keys = serverSelector.selectedKeys().iterator();\n                    while (keys.hasNext()) {\n                        SelectionKey key = keys.next();\n                        if (key.isAcceptable()) {\n                            ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();\n                            SocketChannel clientChannel = serverChannel.accept();\n                            clientChannel.configureBlocking(false);\n                            clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                        }\n                        keys.remove();\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private class ClientReadChannelThread implements Runnable {\n        private final Selector clientReadSelector;\n        private final Selector clientWriteSelector;\n\n        public ClientReadChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    clientReadSelector.select();\n                    Iterator<SelectionKey> keys = clientReadSelector.selectedKeys().iterator();\n                    while (keys.hasNext()) {\n                        SelectionKey key = keys.next();\n                        if (key.isReadable()) {\n                            SocketChannel clientChannel = (SocketChannel) key.channel();\n                            ByteBuffer buffer = ByteBuffer.allocate(1024);\n                            int bytesRead = clientChannel.read(buffer);\n                            if (bytesRead == -1) {\n                                clientChannel.close();\n                                key.cancel();\n                                continue;\n                            }\n                            buffer.flip();\n                            String request = new String(buffer.array(), 0, bytesRead);\n                            System.out.println(\"Received: \" + request);\n                            String response = \"HTTP/1.1 200 OK\\r\\nContent-Length: 13\\r\\n\\r\\nHello, World!\";\n                            ByteBuffer responseBuffer = ByteBuffer.wrap(response.getBytes());\n                            clientChannel.register(clientWriteSelector, SelectionKey.OP_WRITE, responseBuffer);\n                        }\n                        keys.remove();\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private class ClientWriteChannelThread implements Runnable {\n        private final Selector clientReadSelector;\n        private final Selector clientWriteSelector;\n\n        public ClientWriteChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    clientWriteSelector.select();\n                    Iterator<SelectionKey> keys = clientWriteSelector.selectedKeys().iterator();\n                    while (keys.hasNext()) {\n                        SelectionKey key = keys.next();\n                        if (key.isWritable()) {\n                            SocketChannel clientChannel = (SocketChannel) key.channel();\n                            ByteBuffer responseBuffer = (ByteBuffer) key.attachment();\n                            if (responseBuffer.hasRemaining()) {\n                                clientChannel.write(responseBuffer);\n                            }\n                            clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                            key.cancel();\n                        }\n                        keys.remove();\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 268,
    "Instruction": "Task Description: Create a Java class that implements an HTTP/2 server using Netty framework, supporting SSL/TLS encryption and providing methods for server startup and shutdown.\n\nClass Description: BaseHttp2Server is an abstract class that serves as a foundation for building HTTP/2 servers using Netty. It handles SSL/TLS configuration, channel management, and provides basic server lifecycle methods. Concrete implementations must define their own request handlers.\n\nAttributes:\n- sslContext: [SslContext] - SSL/TLS context for secure connections\n- hasReleasedSslContext: [AtomicBoolean] - Tracks whether SSL context resources have been released\n- bootstrap: [ServerBootstrap] - Netty server bootstrap configuration\n- shouldShutDownEventLoopGroup: [boolean] - Flag indicating whether to shutdown event loop group\n- allChannels: [ChannelGroup] - Tracks all active server channels\n\nMethods:\n- BaseHttp2Server([SslContext], [EventLoopGroup]) -> [void] - Constructor that initializes the server with SSL context and optional event loop group\n- addHandlersToPipeline([SSLSession], [ChannelPipeline]) -> [void] - Abstract method to be implemented by subclasses for adding custom handlers to the pipeline\n- start([int]) -> [CompletableFuture<Integer>] - Starts the server on specified port and returns future with bound port number\n- shutdown() -> [CompletableFuture<Void>] - Gracefully shuts down the server and releases resources",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.group.ChannelGroup;\nimport io.netty.channel.group.DefaultChannelGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.util.ReferenceCounted;\nimport io.netty.util.concurrent.Future;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport javax.net.ssl.SSLSession;\n\nabstract class BaseHttp2Server {\n    private final SslContext sslContext;\n    private final AtomicBoolean hasReleasedSslContext = new AtomicBoolean(false);\n    private final ServerBootstrap bootstrap;\n    private final boolean shouldShutDownEventLoopGroup;\n    private final ChannelGroup allChannels;\n\n    BaseHttp2Server(final SslContext sslContext, final EventLoopGroup eventLoopGroup) {\n        this.sslContext = sslContext;\n\n        if (this.sslContext instanceof ReferenceCounted) {\n            ((ReferenceCounted) this.sslContext).retain();\n        }\n\n        this.bootstrap = new ServerBootstrap();\n\n        if (eventLoopGroup != null) {\n            this.bootstrap.group(eventLoopGroup);\n            this.shouldShutDownEventLoopGroup = false;\n        } else {\n            this.bootstrap.group(new NioEventLoopGroup(1));\n            this.shouldShutDownEventLoopGroup = true;\n        }\n\n        this.allChannels = new DefaultChannelGroup(this.bootstrap.config().group().next());\n\n        this.bootstrap.channel(ServerChannelClassUtil.getServerSocketChannelClass(this.bootstrap.config().group()));\n        this.bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(final SocketChannel channel) {\n                final SslHandler sslHandler = sslContext.newHandler(channel.alloc());\n                channel.pipeline().addLast(sslHandler);\n\n                sslHandler.handshakeFuture().addListener(handshakeFuture -> {\n                    if (handshakeFuture.isSuccess()) {\n                        BaseHttp2Server.this.addHandlersToPipeline(sslHandler.engine().getSession(), channel.pipeline());\n                        BaseHttp2Server.this.allChannels.add(channel);\n                    }\n                });\n            }\n        });\n    }\n\n    protected abstract void addHandlersToPipeline(final SSLSession sslSession, final ChannelPipeline pipeline) throws Exception;\n\n    public CompletableFuture<Integer> start(final int port) {\n        final ChannelFuture channelFuture = this.bootstrap.bind(port);\n        this.allChannels.add(channelFuture.channel());\n\n        final CompletableFuture<Integer> startFuture = new CompletableFuture<>();\n\n        channelFuture.addListener((future -> {\n            if (future.isSuccess()) {\n                startFuture.complete(((InetSocketAddress) channelFuture.channel().localAddress()).getPort());\n            } else {\n                startFuture.completeExceptionally(future.cause());\n            }\n        }));\n\n        return startFuture;\n    }\n\n    public CompletableFuture<Void> shutdown() {\n        final CompletableFuture<Void> shutdownFuture = new CompletableFuture<>();\n        final Future<Void> channelCloseFuture = this.allChannels.close();\n\n        if (this.shouldShutDownEventLoopGroup) {\n            channelCloseFuture.addListener(future ->\n                    BaseHttp2Server.this.bootstrap.config().group().shutdownGracefully());\n\n            this.bootstrap.config().group().terminationFuture().addListener(future -> {\n                if (future.isSuccess()) {\n                    shutdownFuture.complete(null);\n                } else {\n                    shutdownFuture.completeExceptionally(future.cause());\n                }\n            });\n        } else {\n            channelCloseFuture.addListener(future -> {\n                if (future.isSuccess()) {\n                    shutdownFuture.complete(null);\n                } else {\n                    shutdownFuture.completeExceptionally(future.cause());\n                }\n            });\n        }\n\n        return shutdownFuture.thenRun(() -> {\n            if (BaseHttp2Server.this.sslContext instanceof ReferenceCounted) {\n                if (BaseHttp2Server.this.hasReleasedSslContext.compareAndSet(false, true)) {\n                    ((ReferenceCounted) BaseHttp2Server.this.sslContext).release();\n                }\n            }\n        });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 19,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.ssl.SslSession;\nimport io.netty.util.concurrent.DefaultChannelGroup;\nimport io.netty.util.concurrent.GlobalEventExecutor;\nimport io.netty.util.concurrent.ChannelGroup;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic abstract class BaseHttp2Server {\n    private final SslContext sslContext;\n    private final AtomicBoolean hasReleasedSslContext = new AtomicBoolean(false);\n    private final ServerBootstrap bootstrap;\n    private boolean shouldShutDownEventLoopGroup = false;\n    private final ChannelGroup allChannels;\n\n    public BaseHttp2Server(SslContext sslContext, EventLoopGroup eventLoopGroup) {\n        this.sslContext = sslContext;\n        this.bootstrap = new ServerBootstrap();\n        this.bootstrap.group(eventLoopGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline p = ch.pipeline();\n                        SslHandler sslHandler = sslContext.newHandler(ch.alloc());\n                        p.addLast(\"ssl\", sslHandler);\n                        // Add HTTP/2 handler here\n                        addHandlersToPipeline(sslHandler.engine().getSession(), p);\n                    }\n                });\n        this.allChannels = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);\n    }\n\n    protected abstract void addHandlersToPipeline(SslSession session, ChannelPipeline pipeline);\n\n    public CompletableFuture<Integer> start(int port) {\n        CompletableFuture<Integer> future = new CompletableFuture<>();\n        bootstrap.bind(port).addListener((ChannelFutureListener) f -> {\n            if (f.isSuccess()) {\n                Channel channel = f.channel();\n                allChannels.add(channel);\n                future.complete(channel.localAddress().getPort());\n            } else {\n                future.completeExceptionally(f.cause());\n            }\n        });\n        return future;\n    }\n\n    public CompletableFuture<Void> shutdown() {\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        allChannels.close().addListener((ChannelFutureListener) f -> {\n            if (f.isSuccess()) {\n                if (hasReleasedSslContext.compareAndSet(false, true)) {\n                    sslContext.close();\n                }\n                if (shouldShutDownEventLoopGroup) {\n                    bootstrap.config().group().shutdownGracefully();\n                }\n                future.complete(null);\n            } else {\n                future.completeExceptionally(f.cause());\n            }\n        });\n        return future;\n    }\n}\n```"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Implement a class for memory-mapped file reading with random access capabilities using Java NIO's FileChannel and MappedByteBuffer.\n\nClass Description: RandomAccessReadMemoryMappedFile is a class that provides random access reading functionality for files using memory-mapped I/O. It maps a file into memory for efficient reading operations and implements common random access operations like seek, read, and position tracking.\n\nAttributes:\n- mappedByteBuffer: ByteBuffer - The memory-mapped buffer containing the file contents\n- size: long - The size of the file in bytes\n- fileChannel: FileChannel - The file channel used for memory mapping\n- unmapper: Consumer<? super ByteBuffer> - A consumer for properly unmapping the buffer when closing\n\nMethods:\n- Constructor(filename: String) -> void - Creates an instance by opening the specified file\n- Constructor(file: File) -> void - Creates an instance using the specified File object\n- Constructor(path: Path) -> void - Creates an instance using the specified Path object\n- close() -> void - Closes the file channel and unmaps the buffer\n- seek(position: long) -> void - Sets the reading position in the file\n- getPosition() -> long - Returns the current reading position\n- read() -> int - Reads a single byte from the current position\n- read(b: byte[], offset: int, length: int) -> int - Reads bytes into an array\n- length() -> long - Returns the file size\n- isClosed() -> boolean - Checks if the reader is closed\n- isEOF() -> boolean - Checks if the current position is at end of file\n- checkClosed() -> void - Internal method to verify the reader isn't closed (throws IOException if closed)",
    "Canonical_solution": "import java.io.File;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.EnumSet;\nimport java.util.Optional;\nimport java.util.function.Consumer;\n\npublic class RandomAccessReadMemoryMappedFile implements RandomAccessRead\n{\n    private ByteBuffer mappedByteBuffer;\n    private final long size;\n    private final FileChannel fileChannel;\n    private final Consumer<? super ByteBuffer> unmapper;\n\n    public RandomAccessReadMemoryMappedFile(String filename) throws IOException\n    {\n        this(new File(filename));\n    }\n\n    public RandomAccessReadMemoryMappedFile(File file) throws IOException\n    {\n        this(file.toPath());\n    }\n\n    public RandomAccessReadMemoryMappedFile(Path path) throws IOException\n    {\n        fileChannel = FileChannel.open(path, EnumSet.of(StandardOpenOption.READ));\n        size = fileChannel.size();\n        if (size > Integer.MAX_VALUE)\n        {\n            throw new IOException(getClass().getName() + \" doesn't yet support files bigger than \"\n                    + Integer.MAX_VALUE);\n        }\n        mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, size);\n        unmapper = IOUtils::unmap;\n    }\n\n    @Override\n    public void close() throws IOException\n    {\n        if (fileChannel != null)\n        {\n            fileChannel.close();\n        }\n        if (mappedByteBuffer != null)\n        {\n            Optional.ofNullable(unmapper).ifPresent(u -> u.accept(mappedByteBuffer));\n            mappedByteBuffer = null;\n        }\n    }\n\n    @Override\n    public void seek(long position) throws IOException\n    {\n        checkClosed();\n        if (position < 0)\n        {\n            throw new IOException(\"Invalid position \"+position);\n        }\n        mappedByteBuffer.position((int) Math.min(position, size));\n    }\n\n    @Override\n    public long getPosition() throws IOException\n    {\n       checkClosed();\n       return mappedByteBuffer.position();\n    }\n\n    @Override\n    public int read() throws IOException\n    {\n        if (isEOF())\n        {\n            return -1;\n        }\n        return mappedByteBuffer.get() & 0xff;\n    }\n\n    @Override\n    public int read(byte[] b, int offset, int length) throws IOException\n    {\n        if (isEOF())\n        {\n            return -1;\n        }\n        int remainingBytes = (int)size - mappedByteBuffer.position();\n        remainingBytes = Math.min(remainingBytes, length);\n        mappedByteBuffer.get(b, offset, remainingBytes);\n        return remainingBytes;\n    }\n\n    @Override\n    public long length() throws IOException\n    {\n        checkClosed();\n        return size;\n    }\n\n    private void checkClosed() throws IOException\n    {\n        if (isClosed())\n        {\n            throw new IOException(getClass().getSimpleName() + \" already closed\");\n        }\n    }\n\n    @Override\n    public boolean isClosed()\n    {\n        return mappedByteBuffer == null;\n    }\n\n    @Override\n    public boolean isEOF() throws IOException\n    {\n        checkClosed();\n        return mappedByteBuffer.position() >= size;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.nio.channels.FileChannel;\nimport java.nio.MappedByteBuffer;\nimport java.nio.ByteBuffer;\nimport java.nio.file.Path;\nimport java.nio.file.Files;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.function.Consumer;\n\npublic class RandomAccessReadMemoryMappedFile {\n    private MappedByteBuffer mappedByteBuffer;\n    private long size;\n    private FileChannel fileChannel;\n    private Consumer<? super ByteBuffer> unmapper;\n    private boolean isClosed = false;\n\n    public RandomAccessReadMemoryMappedFile(String filename) throws IOException {\n        this(new File(filename));\n    }\n\n    public RandomAccessReadMemoryMappedFile(File file) throws IOException {\n        this.fileChannel = FileChannel.open(file.toPath(), java.nio.file.StandardOpenOption.READ);\n        this.size = fileChannel.size();\n        this.mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, size);\n        this.unmapper = (ByteBuffer buffer) -> {\n            try {\n                ((java.nio.channels.FileChannel) buffer).close();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        };\n    }\n\n    public RandomAccessReadMemoryMappedFile(Path path) throws IOException {\n        this.fileChannel = FileChannel.open(path, java.nio.file.StandardOpenOption.READ);\n        this.size = fileChannel.size();\n        this.mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, size);\n        this.unmapper = (ByteBuffer buffer) -> {\n            try {\n                ((java.nio.channels.FileChannel) buffer).close();\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        };\n    }\n\n    public void close() throws IOException {\n        if (isClosed) {\n            return;\n        }\n        fileChannel.close();\n        unmapper.accept(mappedByteBuffer);\n        isClosed = true;\n    }\n\n    public void seek(long position) {\n        if (position < 0 || position > size) {\n            throw new IllegalArgumentException(\"Position out of bounds\");\n        }\n        mappedByteBuffer.position((int) position);\n    }\n\n    public long getPosition() {\n        return mappedByteBuffer.position();\n    }\n\n    public int read() throws IOException {\n        checkClosed();\n        if (mappedByteBuffer.remaining() == 0) {\n            return -1;\n        }\n        return mappedByteBuffer.get() & 0xFF;\n    }\n\n    public int read(byte[] b, int offset, int length) throws IOException {\n        checkClosed();\n        int bytesRead = Math.min(length, mappedByteBuffer.remaining());\n        if (bytesRead == 0) {\n            return -1;\n        }\n        mappedByteBuffer.get(b, offset, bytesRead);\n        return bytesRead;\n    }\n\n    public long length() {\n        return size;\n    }\n\n    public boolean isClosed() {\n        return isClosed;\n    }\n\n    public boolean isEOF() {\n        return mappedByteBuffer.position() >= size;\n    }\n\n    private void checkClosed() throws IOException {\n        if (isClosed) {\n            throw new IOException(\"Reader is closed\");\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a Java class that provides a fluent interface for building and executing command-line processes with configurable environment variables, working directory, and output handling.\n\nClass Description: The CommandLine class is a builder-style utility for executing external processes. It allows chaining configuration methods to set up command arguments, environment variables, working directory, and output streams before execution. The class handles process execution, stream management, and result collection.\n\nAttributes:\n- cmdLine: List<String> - Stores the command and its arguments\n- env: Map<String, String> - Stores environment variables for the process\n- cleanEnvironment: boolean - Flag to determine whether to clear existing environment variables\n- workingDirectory: File - The working directory for the process\n- outPrefix: String - Prefix for standard output lines\n- errPrefix: String - Prefix for error output lines\n- out: OutputStream - Stream for standard output\n- err: OutputStream - Stream for error output\n\nMethods:\n- cmd(String): CommandLine - Static factory method to create a new CommandLine instance with initial command\n- workingDirectory(File): CommandLine - Sets the working directory using File object\n- workingDirectory(String): CommandLine - Sets the working directory using path string\n- arg(String): CommandLine - Adds a single argument to the command\n- args(String...): CommandLine - Adds multiple arguments to the command\n- outPrefix(String): CommandLine - Sets prefix for standard output\n- errPrefix(String): CommandLine - Sets prefix for error output\n- out(OutputStream): CommandLine - Sets standard output stream\n- err(OutputStream): CommandLine - Sets error output stream\n- env(String, String): CommandLine - Adds an environment variable\n- newEnv(boolean): CommandLine - Configures whether to clean environment variables\n- run(): ProcessRunner.ProcessResult - Executes the configured command and returns the result",
    "Canonical_solution": "import jodd.io.StreamGobbler;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class CommandLine {\n\n    public static final int OK = 0;\n\n    protected final List<String> cmdLine = new ArrayList<>();\n    protected Map<String, String> env = null;\n    protected boolean cleanEnvironment = false;\n    protected File workingDirectory;\n    protected String outPrefix;\n    protected String errPrefix;\n    protected OutputStream out = System.out;\n    protected OutputStream err = System.err;\n\n    protected CommandLine(final String command) {\n        cmdLine.add(command);\n    }\n\n    public static CommandLine cmd(final String command) {\n        return new CommandLine(command);\n    }\n\n    public CommandLine workingDirectory(final File workDirectory) {\n        this.workingDirectory = workDirectory;\n        return this;\n    }\n\n    public CommandLine workingDirectory(final String workDirectory) {\n        this.workingDirectory = new File(workDirectory);\n        return this;\n    }\n\n    public CommandLine arg(final String argument) {\n        cmdLine.add(argument);\n        return this;\n    }\n\n    public CommandLine args(final String... arguments) {\n        if (arguments != null && arguments.length > 0) {\n            Collections.addAll(cmdLine, arguments);\n        }\n        return this;\n    }\n\n    public CommandLine outPrefix(final String prefix) {\n        this.outPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine errPrefix(final String prefix) {\n        this.errPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine out(final OutputStream out) {\n        this.out = out;\n        return this;\n    }\n\n    public CommandLine err(final OutputStream err) {\n        this.err = err;\n        return this;\n    }\n\n    public CommandLine env(final String key, final String value) {\n        if (env == null) {\n            env = new HashMap<>();\n        }\n        env.put(key, value);\n        return this;\n    }\n\n    public CommandLine newEnv(final boolean clean) {\n        cleanEnvironment = clean;\n        return this;\n    }\n\n    public ProcessRunner.ProcessResult run() {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        out = err = baos;\n\n        try {\n            baos.write(StringUtil.join(cmdLine, ' ').getBytes());\n            baos.write(StringPool.BYTES_NEW_LINE);\n        }\n        catch (IOException ignore) {\n        }\n\n        ProcessBuilder processBuilder = new ProcessBuilder();\n        processBuilder.command(cmdLine);\n\n        if (cleanEnvironment) {\n            processBuilder.environment().clear();\n        }\n        if (env != null) {\n            processBuilder.environment().putAll(env);\n        }\n\n        processBuilder.directory(workingDirectory);\n\n        Process process = null;\n        try {\n            process = processBuilder.start();\n        }\n        catch (IOException ioex) {\n            return writeException(baos, ioex);\n        }\n\n        StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), out, outPrefix);\n        StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), err, errPrefix);\n\n        outputGobbler.start();\n        errorGobbler.start();\n\n        int result;\n        try {\n            result = process.waitFor();\n        }\n        catch (InterruptedException iex) {\n            return writeException(baos, iex);\n        }\n\n        outputGobbler.waitFor();\n        errorGobbler.waitFor();\n\n        return new ProcessRunner.ProcessResult(result, baos.toString());\n    }\n\n    private ProcessRunner.ProcessResult writeException(final ByteArrayOutputStream baos, final Exception ex) {\n        try {\n            baos.write(errPrefix.getBytes());\n        }\n        catch (IOException ignore) {\n        }\n\n        ex.printStackTrace(new PrintStream(baos));\n        return new ProcessRunner.ProcessResult(-1, baos.toString());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class CommandLine {\n    private List<String> cmdLine;\n    private Map<String, String> env;\n    private boolean cleanEnvironment;\n    private File workingDirectory;\n    private String outPrefix;\n    private String errPrefix;\n    private OutputStream out;\n    private OutputStream err;\n\n    private CommandLine() {\n        this.cmdLine = new ArrayList<>();\n        this.env = new HashMap<>();\n        this.cleanEnvironment = false;\n    }\n\n    public static CommandLine cmd(String command) {\n        CommandLine cli = new CommandLine();\n        cli.cmdLine.add(command);\n        return cli;\n    }\n\n    public CommandLine workingDirectory(File directory) {\n        this.workingDirectory = directory;\n        return this;\n    }\n\n    public CommandLine workingDirectory(String path) {\n        this.workingDirectory = new File(path);\n        return this;\n    }\n\n    public CommandLine arg(String arg) {\n        this.cmdLine.add(arg);\n        return this;\n    }\n\n    public CommandLine args(String... args) {\n        for (String arg : args) {\n            this.cmdLine.add(arg);\n        }\n        return this;\n    }\n\n    public CommandLine outPrefix(String prefix) {\n        this.outPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine errPrefix(String prefix) {\n        this.errPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine out(OutputStream stream) {\n        this.out = stream;\n        return this;\n    }\n\n    public CommandLine err(OutputStream stream) {\n        this.err = stream;\n        return this;\n    }\n\n    public CommandLine env(String key, String value) {\n        this.env.put(key, value);\n        return this;\n    }\n\n    public CommandLine newEnv(boolean clean) {\n        this.cleanEnvironment = clean;\n        return this;\n    }\n\n    public ProcessRunner.ProcessResult run() {\n        ProcessBuilder pb = new ProcessBuilder(cmdLine);\n        if (workingDirectory != null) {\n            pb.directory(workingDirectory);\n        }\n\n        if (cleanEnvironment) {\n            pb.environment().clear();\n        }\n        pb.environment().putAll(env);\n\n        Process process;\n        try {\n            process = pb.start();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to start process\", e);\n        }\n\n        Thread outThread = new Thread(() -> {\n            try (InputStream is = process.getInputStream();\n                 BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n                 OutputStream os = out) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    os.write((outPrefix + line + \"\\n\").getBytes());\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n\n        Thread errThread = new Thread(() -> {\n            try (InputStream is = process.getErrorStream();\n                 BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n                 OutputStream os = err) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    os.write((errPrefix + line + \"\\n\").getBytes());\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n\n        outThread.start();\n        errThread.start();\n\n        try {\n            int exitCode = process.waitFor();\n            outThread.join();\n            errThread.join();\n            return new ProcessRunner.ProcessResult(exitCode, out, err);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(\"Process interrupted\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 275,
    "Instruction": "Task Description: Create a Java class that manages external processes, handling their input/output streams and providing control over process execution, including starting, stopping, and monitoring.\n\nClass Description: The DaemonHandler class is designed to manage external processes executed via ProcessBuilder. It provides functionality to start processes with either delimited or undelimited output handling, stop processes (either gracefully or forcibly), and retrieve process exit codes. The class maintains separate threads for handling standard output and error streams, with output being captured and placed into a shared blocking deque.\n\nAttributes:\n- processBuilder: ProcessBuilder - Configures and starts external processes\n- process: Process - Represents the currently running external process\n- outThread: Thread - Thread handling standard output stream\n- errThread: Thread - Thread handling error output stream\n- errProxy: OutputProxy - Proxy for handling error stream output\n- outProxy: OutputProxy - Proxy for handling standard output stream\n- deque: BlockingDeque<Event> - Shared queue for process output events\n- stdOut: boolean - Flag indicating whether to capture standard output\n\nMethods:\n- DaemonHandler(BlockingDeque<Event>, String...) -> void - Constructor that initializes the process handler with output queue and command\n- setStdOutListener(boolean) -> void - Sets whether to capture standard output\n- startDelimited() -> Process - Starts process with delimited output handling (using default delimiter)\n- startDelimited(byte) -> Process - Starts process with custom delimiter for output handling\n- startUndelimited() -> Process - Starts process with undelimited output handling (default buffer size)\n- startUndelimited(int) -> Process - Starts process with undelimited output handling (custom buffer size)\n- stop(boolean) -> void - Stops the managed process (optionally forcibly)\n- getExitCode() -> int - Retrieves the exit code of the process (or PROCESS_STOPPED if not running)",
    "Canonical_solution": "import com.linbit.extproc.OutputProxy.Event;\nimport java.io.IOException;\nimport java.lang.ProcessBuilder.Redirect;\nimport java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.TimeUnit;\n\npublic class DaemonHandler\n{\n    public static final int PROCESS_STOPPED = Integer.MAX_VALUE;\n    private static final byte DELIMITER = '\\n';\n\n    private final ProcessBuilder processBuilder;\n    private Process process;\n\n    private Thread outThread;\n    private Thread errThread;\n    private OutputProxy errProxy;\n    private OutputProxy outProxy;\n\n    private final BlockingDeque<Event> deque;\n    private boolean stdOut;\n\n    public DaemonHandler(final BlockingDeque<Event> dequeRef, final String... command)\n    {\n        deque = dequeRef;\n        processBuilder = new ProcessBuilder(command);\n        processBuilder.redirectError(Redirect.PIPE);\n        stdOut = true;\n    }\n\n    public void setStdOutListener(boolean stdOutRef)\n    {\n        stdOut = stdOutRef;\n    }\n\n    public Process startDelimited() throws IOException\n    {\n        return startDelimited(DELIMITER);\n    }\n\n    public Process startDelimited(byte delimiterRef) throws IOException\n    {\n        stop(true);\n\n        process = processBuilder.start();\n        errProxy = new OutputProxyDelimited(process.getErrorStream(), deque, delimiterRef, false);\n        errThread = new Thread(errProxy);\n        if (stdOut)\n        {\n            outProxy = new OutputProxyDelimited(process.getInputStream(), deque, delimiterRef, true);\n            outThread = new Thread(outProxy);\n            outThread.start();\n        }\n        errThread.start();\n        return process;\n    }\n\n    public Process startUndelimited() throws IOException\n    {\n        return startUndelimited(OutputProxy.DFLT_BUFFER_SIZE);\n    }\n\n    public Process startUndelimited(int bufferSize) throws IOException\n    {\n        stop(true);\n\n        process = processBuilder.start();\n        errProxy = new OutputProxy(process.getErrorStream(), deque, false, bufferSize);\n        errThread = new Thread(errProxy);\n        if (stdOut)\n        {\n            outProxy = new OutputProxy(process.getInputStream(), deque, true, bufferSize);\n            outThread = new Thread(outProxy);\n            outThread.start();\n        }\n        errThread.start();\n        return process;\n    }\n\n    public void stop(boolean force)\n    {\n        if (process != null)\n        {\n            if (outProxy != null)\n            {\n                outProxy.expectShutdown();\n            }\n            errProxy.expectShutdown();\n            if (force)\n            {\n                process.destroyForcibly();\n            }\n            else\n            {\n                process.destroy();\n            }\n            if (outThread != null)\n            {\n                outThread.interrupt();\n            }\n            errThread.interrupt();\n            process = null;\n        }\n    }\n\n    public int getExitCode()\n    {\n        int exitValue;\n        Process proc = process;\n        if (proc != null)\n        {\n            if (proc.isAlive())\n            {\n                try\n                {\n                    proc.waitFor(500, TimeUnit.MILLISECONDS);\n                }\n                catch (InterruptedException ignored)\n                {\n                }\n                if (proc.isAlive())\n                {\n                    throw new ImplementationError(\"Process is still running\");\n                }\n            }\n            exitValue = proc.exitValue();\n        }\n        else\n        {\n            exitValue = PROCESS_STOPPED;\n        }\n        return exitValue;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.LinkedBlockingDeque;\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Arrays;\n\npublic class DaemonHandler {\n    private ProcessBuilder processBuilder;\n    private Process process;\n    private Thread outThread;\n    private Thread errThread;\n    private OutputProxy outProxy;\n    private OutputProxy errProxy;\n    private BlockingDeque<Event> deque;\n    private boolean stdOut;\n    private static final int PROCESS_STOPPED = -1;\n\n    public DaemonHandler(BlockingDeque<Event> deque, String... command) {\n        this.deque = deque;\n        this.processBuilder = new ProcessBuilder(command);\n        this.stdOut = true;\n    }\n\n    public void setStdOutListener(boolean stdOut) {\n        this.stdOut = stdOut;\n    }\n\n    public Process startDelimited() {\n        return startProcess((byte) '\\n');\n    }\n\n    public Process startDelimited(byte delimiter) {\n        return startProcess(delimiter);\n    }\n\n    public Process startUndelimited() {\n        return startProcess(4096, false);\n    }\n\n    public Process startUndelimited(int bufferSize) {\n        return startProcess(bufferSize, false);\n    }\n\n    private Process startProcess(byte delimiter) {\n        try {\n            process = processBuilder.start();\n            outProxy = new OutputProxy(process.getInputStream(), delimiter, 4096, true);\n            errProxy = new OutputProxy(process.getErrorStream(), delimiter, 4096, true);\n            outThread = new Thread(outProxy);\n            errThread = new Thread(errProxy);\n            outThread.start();\n            errThread.start();\n            return process;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private Process startProcess(int bufferSize, boolean isDelimited) {\n        try {\n            process = processBuilder.start();\n            outProxy = new OutputProxy(process.getInputStream(), (byte) 0, bufferSize, isDelimited);\n            errProxy = new OutputProxy(process.getErrorStream(), (byte) 0, bufferSize, isDelimited);\n            outThread = new Thread(outProxy);\n            errThread = new Thread(errProxy);\n            outThread.start();\n            errThread.start();\n            return process;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public void stop(boolean forcibly) {\n        if (process != null) {\n            if (forcibly) {\n                process.destroyForcibly();\n            } else {\n                process.destroy();\n                try {\n                    process.waitFor();\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            }\n            if (outThread != null) {\n                outThread.interrupt();\n            }\n            if (errThread != null) {\n                errThread.interrupt();\n            }\n        }\n    }\n\n    public int getExitCode() {\n        if (process == null || !process.isAlive()) {\n            return PROCESS_STOPPED;\n        }\n        try {\n            return process.exitValue();\n        } catch (IllegalThreadStateException e) {\n            return PROCESS_STOPPED;\n        }\n    }\n\n    private class OutputProxy implements Runnable {\n        private final InputStream inputStream;\n        private final byte delimiter;\n        private final int bufferSize;\n        private final boolean isDelimited;\n\n        public OutputProxy(InputStream inputStream, byte delimiter, int bufferSize, boolean isDelimited) {\n            this.inputStream = inputStream;\n            this.delimiter = delimiter;\n            this.bufferSize = bufferSize;\n            this.isDelimited = isDelimited;\n        }\n\n        @Override\n        public void run() {\n            try (InputStream is = inputStream) {\n                byte[] buffer = new byte[bufferSize];\n                int bytesRead;\n                StringBuilder currentEvent = new StringBuilder();\n\n                while ((bytesRead = is.read(buffer)) != -1) {\n                    byte[] dataBytes = Arrays.copyOfRange(buffer, 0, bytesRead);\n                    String data = new String(dataBytes);\n                    if (isDelimited) {\n                        String[] parts = data.split(String.valueOf((char) delimiter));\n                        for (int i = 0; i < parts.length - 1; i++) {\n                            deque.addLast(new Event(parts[i]));\n                        }\n                        currentEvent = new StringBuilder(parts[parts.length - 1]);\n                    } else {\n                        deque.addLast(new Event(data));\n                    }\n                }\n                if (isDelimited && currentEvent.length() > 0) {\n                    deque.addLast(new Event(currentEvent.toString()));\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class Event {\n        private final String data;\n\n        public Event(String data) {\n            this.data = data;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 279,
    "Instruction": "Task Description: Create a Java class that facilitates interaction with external processes through command execution, providing methods for writing input, executing commands, and retrieving results, with support for timeout handling and resource cleanup.\n\nClass Description: The Command class encapsulates functionality for executing and interacting with external processes. It handles process creation, input/output stream management, command execution, and result collection, with features for line-based input, process termination, and timeout control.\n\nAttributes:\n\nprocess: [Process] - The running external process instance\nstdIn: [OutputStream] - Stream for writing input to the process\nstdOut: [File] - Temporary file storing the process's standard output\nstdErr: [File] - Temporary file storing the process's error output\nnextLine: [String] - Line separator string for command input\nexit: [String] - Command string to terminate the process\ncharset: [Charset] - Character encoding for input/output\nstartTime: [LocalDateTime] - Timestamp when the process was started\n\nMethods:\n\nof: [of(String init)] -> [Command] - Creates a Command instance with default settings\nof: [of(String init, Charset charset)] -> [Command] - Creates a Command instance with specified charset\nof: [of(String init, String nextLine, String exit, Charset charset)] -> [Command] - Creates a Command instance with custom settings\nwrite: [write(String str)] -> [Command] - Writes a string to the process's input stream\nline: [line()] -> [Command] - Writes a line separator to the process's input stream\nexit: [exit()] -> [Command] - Sends the exit command to terminate the process\nexec: [exec(String str)] -> [Command] - Executes a command string (writes input and adds line separator)\nresult: [result()] -> [CommandResult] - Waits for process completion and returns results\nresult: [result(long millis)] -> [CommandResult] - Waits with timeout for process completion\nclose: [close()] -> [void] - Terminates the process and releases resources",
    "Canonical_solution": "import java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.charset.Charset;\nimport java.time.LocalDateTime;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\n\npublic final class Command {\n\n    public static final String NEXT_LINE = SystemUtils.lineSeparator();\n    public static final String EXIT_COMMAND = \"exit\";\n\n    private final Process process;\n    private final OutputStream stdIn;\n    private final File stdOut;\n    private final File stdErr;\n    private final String nextLine;\n    private final String exit;\n    private final Charset charset;\n    private final LocalDateTime startTime;\n\n    private Command(String init, String nextLine, String exit, Charset charset) throws IOException {\n        if (!StringUtils.hasText(init)) {\n            throw new IllegalArgumentException(\"Empty init\");\n        }\n        StringTokenizer st = new StringTokenizer(init);\n        String[] cmdArray = new String[st.countTokens()];\n        for (int i = 0; st.hasMoreTokens(); i++) {\n            cmdArray[i] = st.nextToken();\n        }\n\n        this.stdOut = FileUtils.createTemp();\n        this.stdErr = FileUtils.createTemp();\n\n        ProcessBuilder builder = new ProcessBuilder(cmdArray).redirectError(this.stdErr).redirectOutput(this.stdOut);\n        this.process = builder.start();\n        this.stdIn = this.process.getOutputStream();\n        this.nextLine = nextLine;\n        this.exit = exit;\n        this.charset = charset;\n        this.startTime = LocalDateTime.now();\n    }\n\n    public static Command of(String init) throws IOException {\n        return of(init, SystemUtils.charset());\n    }\n\n    public static Command of(String init, Charset charset) throws IOException {\n        return of(init, NEXT_LINE, EXIT_COMMAND, charset);\n    }\n\n    public static Command of(String init, String nextLine, String exit, Charset charset) throws IOException {\n        return new Command(init, nextLine, exit, charset);\n    }\n\n    public Command write(String str) throws IOException {\n        this.stdIn.write(str.getBytes(this.charset));\n        this.stdIn.flush();\n        return this;\n    }\n\n    public Command line() throws IOException {\n        return write(this.nextLine);\n    }\n\n    public Command exit() throws IOException {\n        write(this.exit);\n        return line();\n    }\n\n    public Command exec(String str) throws IOException {\n        write(str);\n        return line();\n    }\n\n    public CommandResult result() throws InterruptedException {\n        this.process.waitFor();\n        return CommandResult.of(this.stdOut, this.stdErr, this.startTime, LocalDateTime.now(), this.charset);\n    }\n\n    public CommandResult result(long millis) throws InterruptedException, CommandTimeoutException {\n        if (this.process.waitFor(millis, TimeUnit.MILLISECONDS)) {\n            return result();\n        }\n        this.process.destroyForcibly();\n        throw new CommandTimeoutException();\n    }\n\n    public void close() {\n        this.process.destroy();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.*;\nimport java.nio.file.*;\nimport java.util.*;\nimport java.time.LocalDateTime;\nimport java.util.concurrent.TimeUnit;\n\npublic class Command {\n    private Process process;\n    private OutputStream stdIn;\n    private File stdOut;\n    private File stdErr;\n    private String nextLine;\n    private String exit;\n    private Charset charset;\n    private LocalDateTime startTime;\n\n    private Command(String init, String nextLine, String exit, Charset charset) {\n        this.nextLine = nextLine;\n        this.exit = exit;\n        this.charset = charset;\n        this.startTime = LocalDateTime.now();\n\n        try {\n            this.stdOut = Files.createTempFile(\"command\", \".out\");\n            this.stdErr = Files.createTempFile(\"command\", \".err\");\n\n            ProcessBuilder pb = new ProcessBuilder(init);\n            pb.redirectOutput(stdOut);\n            pb.redirectError(stdErr);\n            this.process = pb.start();\n\n            this.stdIn = this.process.getOutputStream();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to start process\", e);\n        }\n    }\n\n    public static Command of(String init) {\n        return new Command(init, \"\\n\", \"exit\", Charset.defaultCharset());\n    }\n\n    public static Command of(String init, Charset charset) {\n        return new Command(init, \"\\n\", \"exit\", charset);\n    }\n\n    public static Command of(String init, String nextLine, String exit, Charset charset) {\n        return new Command(init, nextLine, exit, charset);\n    }\n\n    public Command write(String str) {\n        try {\n            this.stdIn.write(str.getBytes(this.charset));\n            this.stdIn.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to write to process\", e);\n        }\n        return this;\n    }\n\n    public Command line() {\n        return write(this.nextLine);\n    }\n\n    public Command exit() {\n        return write(this.exit);\n    }\n\n    public Command exec(String str) {\n        return write(str).line();\n    }\n\n    public CommandResult result() {\n        return result(0);\n    }\n\n    public CommandResult result(long millis) {\n        try {\n            if (millis <= 0) {\n                this.process.waitFor();\n            } else {\n                boolean exited = this.process.waitFor(millis, TimeUnit.MILLISECONDS);\n                if (!exited) {\n                    this.process.destroy();\n                    throw new RuntimeException(\"Process timed out\");\n                }\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new RuntimeException(\"Process interrupted\", e);\n        }\n\n        String stdout = readContent(this.stdOut);\n        String stderr = readContent(this.stdErr);\n        int exitCode = this.process.exitValue();\n\n        return new CommandResult(exitCode, stdout, stderr, this.startTime, LocalDateTime.now());\n    }\n\n    private String readContent(File file) {\n        try {\n            return Files.readString(file, this.charset);\n        } catch (IOException e) {\n            return \"\";\n        }\n    }\n\n    public void close() {\n        if (this.stdIn != null) {\n            try {\n                this.stdIn.close();\n            } catch (IOException e) {\n                // Handle exception\n            }\n        }\n        if (this.process != null) {\n            this.process.destroy();\n            try {\n                this.process.waitFor();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n        try {\n            Files.deleteIfExists(this.stdOut);\n            Files.deleteIfExists(this.stdErr);\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 283,
    "Instruction": "Task Description: Create a Java class that executes shell commands, handling both simple commands and those requiring shell interpretation (with wildcards or special characters). The class should manage process execution, input/output streams, and error handling.\n\nClass Description: ShellCommand is a concrete implementation of AbstractCommand that executes shell commands either directly or through a shell interpreter when needed. It handles command tokenization, process building, and execution status reporting.\n\nAttributes:\n- command: String - The raw shell command to be executed\n- argv: List<String> - The tokenized command arguments, potentially including shell interpreter when needed\n- shellWildcardPattern: Pattern - Compiled regex pattern to detect shell special characters\n\nMethods:\n- ShellCommand(String command) -> None - Constructor that initializes the command and determines if shell interpretation is needed\n- hasWildcard(String command) -> boolean - Checks if the command contains shell wildcard characters that require interpretation\n- tokenize(String s) -> List<String> - Splits a command string into individual tokens for process execution\n- doExecute(ConcurrentTestCommandExecutor executor) -> None - Executes the command using ProcessBuilder, handles I/O streams, and reports execution status",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nprivate final Pattern shellWildcardPattern = Pattern.compile(\"[*?$|<>&]\");\n\nstatic int runAppProcess(\n    ProcessBuilder pb,\n    Logger logger,\n    Reader appInput,\n    Writer appOutput) throws IOException, InterruptedException {\n  pb.redirectErrorStream(true);\n  if (logger != null) {\n    logger.info(\"start process: \" + pb.command());\n  }\n  Process p = pb.start();\n\n  if (appInput != null) {\n    OutputStream out =\n        new BufferedOutputStream(\n            p.getOutputStream(),\n            100 * 1024);\n    int c;\n    while ((c = appInput.read()) != -1) {\n      out.write(c);\n    }\n    out.flush();\n  }\n  if (appOutput != null) {\n    InputStream in =\n        new BufferedInputStream(\n            p.getInputStream(),\n            100 * 1024);\n    int c;\n    while ((c = in.read()) != -1) {\n      appOutput.write(c);\n    }\n    appOutput.flush();\n    in.close();\n  }\n  p.waitFor();\n\n  int status = p.exitValue();\n  if (logger != null) {\n    logger.info(\"exit status=\" + status + \" from \" + pb.command());\n  }\n  return status;\n}\n\nprivate class ShellCommand extends AbstractCommand {\n  private final String command;\n  private List<String> argv;\n\n  private ShellCommand(String command) {\n    this.command = command;\n    boolean needShell = hasWildcard(command);\n    if (needShell) {\n      argv = new ArrayList<>();\n      argv.add(\"/bin/sh\");\n      argv.add(\"-c\");\n      argv.add(command);\n    } else {\n      argv = tokenize(command);\n    }\n  }\n\n  private boolean hasWildcard(String command) {\n    return shellWildcardPattern.matcher(command).find();\n  }\n\n  private List<String> tokenize(String s) {\n    List<String> result = new ArrayList<>();\n    StringTokenizer tokenizer = new StringTokenizer(s);\n    while (tokenizer.hasMoreTokens()) {\n      result.add(tokenizer.nextToken());\n    }\n    return result;\n  }\n\n  protected void doExecute(ConcurrentTestCommandExecutor executor) {\n    Integer threadId = executor.getThreadId();\n    storeMessage(threadId, command);\n\n    ProcessBuilder pb = new ProcessBuilder(argv);\n    pb.directory(scriptDirectory);\n    try {\n      int status = runAppProcess(pb, null, null, getThreadWriter(threadId));\n      if (status != 0) {\n        storeMessage(threadId,\n            \"command \" + command + \": exited with status \" + status);\n      }\n    } catch (Exception e) {\n      storeMessage(threadId,\n          \"command \" + command + \": failed with exception \" + e.getMessage());\n    }\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Pattern;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.concurrent.ConcurrentTestCommandExecutor;\nimport java.lang.ProcessBuilder;\n\npublic class ShellCommand extends AbstractCommand {\n    private String command;\n    private List<String> argv;\n    private Pattern shellWildcardPattern;\n\n    public ShellCommand(String command) {\n        this.command = command;\n        this.shellWildcardPattern = Pattern.compile(\".*[\\\\*\\\\?\\\\[]\");\n        if (hasWildcard(command)) {\n            this.argv = Arrays.asList(\"sh\", \"-c\", command);\n        } else {\n            this.argv = tokenize(command);\n        }\n    }\n\n    private boolean hasWildcard(String command) {\n        return shellWildcardPattern.matcher(command).matches();\n    }\n\n    private List<String> tokenize(String s) {\n        return Arrays.asList(s.split(\"\\\\s+\"));\n    }\n\n    public void doExecute(ConcurrentTestCommandExecutor executor) {\n        try {\n            ProcessBuilder pb = new ProcessBuilder(argv);\n            pb.redirectErrorStream(true);\n            Process process = pb.start();\n\n            BufferedReader reader = new BufferedReader(\n                new InputStreamReader(process.getInputStream()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n\n            int exitCode = process.waitFor();\n            if (exitCode != 0) {\n                // Handle error\n            }\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 284,
    "Instruction": "Task Description: Create a Java class that facilitates the conversion of DEX files to OAT files using the Android dex2oat tool, handling process execution and stream management.\n\nClass Description: InterpretDex2OatHelper is a utility class that provides functionality to convert Android DEX files to OAT files by invoking the system's dex2oat tool. It handles process creation, stream consumption, and error checking during the conversion process.\n\nAttributes:\n- STREAM_CONSUMER: [Executor] - A single-thread executor used for consuming process output streams asynchronously.\n\nMethods:\n- getCurrentInstructionSet: () -> [String] - Retrieves the current instruction set architecture of the device using reflection.\n- interpretDex2Oat: (String dexFilePath, String oatFilePath) -> [void] - Main method that executes the dex2oat conversion process with appropriate parameters.\n- consumeInputStream: (InputStream is) -> [void] - Helper method that asynchronously consumes an input stream to prevent process blocking.\n\nMethod Details:\n1. getCurrentInstructionSet:\n   - Input: None\n   - Output: String representing the current instruction set\n   - Description: Uses reflection to call VMRuntime.getCurrentInstructionSet()\n\n2. interpretDex2Oat:\n   - Input: \n     - dexFilePath: String - Path to the input DEX file\n     - oatFilePath: String - Path for the output OAT file\n   - Output: void (throws IOException on failure)\n   - Description: \n     - Prepares the dex2oat command with version-specific parameters\n     - Creates and manages the conversion process\n     - Handles stream consumption and process termination\n\n3. consumeInputStream:\n   - Input: \n     - is: InputStream - Stream to be consumed\n   - Output: void\n   - Description: Asynchronously reads and discards stream contents to prevent blocking",
    "Canonical_solution": "import android.os.Build;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\npublic class InterpretDex2OatHelper {\n\n    private static String getCurrentInstructionSet() throws Exception {\n        Class<?> clazz = Class.forName(\"dalvik.system.VMRuntime\");\n        Method currentGet = clazz.getDeclaredMethod(\"getCurrentInstructionSet\");\n        return (String) currentGet.invoke(null);\n    }\n\n    public static void interpretDex2Oat(String dexFilePath, String oatFilePath) throws IOException {\n        String targetISA = null;\n        try {\n            targetISA = getCurrentInstructionSet();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        final File oatFile = new File(oatFilePath);\n        if (!oatFile.exists()) {\n            oatFile.getParentFile().mkdirs();\n        }\n\n        final List<String> commandAndParams = new ArrayList<>();\n        commandAndParams.add(\"dex2oat\");\n\n        if (Build.VERSION.SDK_INT >= 24) {\n            commandAndParams.add(\"--runtime-arg\");\n            commandAndParams.add(\"-classpath\");\n            commandAndParams.add(\"--runtime-arg\");\n            commandAndParams.add(\"&\");\n        }\n        commandAndParams.add(\"--dex-file=\" + dexFilePath);\n        commandAndParams.add(\"--oat-file=\" + oatFilePath);\n        commandAndParams.add(\"--instruction-set=\" + targetISA);\n\n        if (Build.VERSION.SDK_INT > 25) {\n            commandAndParams.add(\"--compiler-filter=quicken\");\n        } else {\n            commandAndParams.add(\"--compiler-filter=interpret-only\");\n        }\n\n        final ProcessBuilder pb = new ProcessBuilder(commandAndParams);\n        pb.redirectErrorStream(true);\n        final Process dex2oatProcess = pb.start();\n\n        StreamConsumer.consumeInputStream(dex2oatProcess.getInputStream());\n        StreamConsumer.consumeInputStream(dex2oatProcess.getErrorStream());\n\n        try {\n            final int ret = dex2oatProcess.waitFor();\n            if (ret != 0) {\n                throw new IOException(\"dex2oat works unsuccessfully, exit code: \" + ret);\n            }\n        } catch (InterruptedException e) {\n            throw new IOException(\"dex2oat is interrupted, msg: \" + e.getMessage(), e);\n        }\n    }\n\n    private static class StreamConsumer {\n        static final Executor STREAM_CONSUMER = Executors.newSingleThreadExecutor();\n\n        static void consumeInputStream(final InputStream is) {\n            STREAM_CONSUMER.execute(new Runnable() {\n                @Override\n                public void run() {\n                    if (is == null) {\n                        return;\n                    }\n                    final byte[] buffer = new byte[256];\n                    try {\n                        while ((is.read(buffer)) > 0) {\n                            // To satisfy checkstyle rules.\n                        }\n                    } catch (IOException ignored) {\n                        // Ignored.\n                    } finally {\n                        try {\n                            is.close();\n                        } catch (Exception ignored) {\n                            // Ignored.\n                        }\n                    }\n                }\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\npublic class InterpretDex2OatHelper {\n    private static final Executor STREAM_CONSUMER = Executors.newSingleThreadExecutor();\n\n    public static String getCurrentInstructionSet() {\n        try {\n            Class<?> vmRuntimeClass = Class.forName(\"android.os.VMRuntime\");\n            java.lang.reflect.Method method = vmRuntimeClass.getMethod(\"getCurrentInstructionSet\");\n            return (String) method.invoke(null);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to get instruction set\", e);\n        }\n    }\n\n    public static void interpretDex2Oat(String dexFilePath, String oatFilePath) throws IOException {\n        String instructionSet = getCurrentInstructionSet();\n        List<String> command = new ArrayList<>();\n        command.add(\"dex2oat\");\n        command.add(\"--dex-file=\" + dexFilePath);\n        command.add(\"--oat-file=\" + oatFilePath);\n        command.add(\"--instruction-set=\" + instructionSet);\n\n        ProcessBuilder processBuilder = new ProcessBuilder(command);\n        Process process = processBuilder.start();\n\n        STREAM_CONSUMER.execute(() -> consumeInputStream(process.getInputStream()));\n        STREAM_CONSUMER.execute(() -> consumeInputStream(process.getErrorStream()));\n\n        int exitCode = process.waitFor();\n        if (exitCode != 0) {\n            throw new IOException(\"dex2oat failed with exit code \" + exitCode);\n        }\n    }\n\n    private static void consumeInputStream(InputStream is) {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                // Discard the output\n            }\n        } catch (IOException e) {\n            // Handle or log the exception\n        }\n    }\n}"
  },
  {
    "Task_id": 285,
    "Instruction": "Task Description: Create a function that retrieves the version of the Java compiler installed on the system by executing the 'javac -version' command and capturing its output.\n\nFunction Description: The function uses Java's ProcessBuilder to launch an external process running the 'javac -version' command. It captures the command's output (which is redirected from stderr to stdout), reads the first line of output, and returns it as the version string. If any errors occur during this process, the function returns \"unknown\".\n\nInput: None (The function takes no input parameters)\n\nOutput: String - Returns the version string output by the 'javac -version' command (e.g., \"javac 1.8.0_291\"), or \"unknown\" if an error occurs during execution.",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.lang.ProcessBuilder;\n\nprivate String getJavaCompilerVersion() {\n    ProcessBuilder pb = new ProcessBuilder(\"javac\", \"-version\");\n    pb.redirectErrorStream(true);\n\n    BufferedReader in = null;\n    try {\n        Process process = pb.start();\n        in = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String buffer = in.readLine();\n        process.waitFor();\n        return buffer;\n    } catch (Exception e) {\n        return \"unknown\";\n    } finally {\n        if (in != null) {\n            try {\n                in.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class VersionFetcher {\n    public static String getJavaCompilerVersion() {\n        try {\n            ProcessBuilder pb = new ProcessBuilder(\"javac\", \"-version\");\n            pb.redirectErrorStream(true);\n            Process process = pb.start();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String version = reader.readLine();\n            process.waitFor();\n            return version != null ? version : \"unknown\";\n        } catch (IOException | InterruptedException e) {\n            return \"unknown\";\n        }\n    }\n}"
  },
  {
    "Task_id": 289,
    "Instruction": "Task Description: Implement a utility class that provides methods to retrieve system information, specifically the hostname, in a cross-platform manner (supporting both Linux and Windows operating systems).\n\nClass Description: The SystemInfoUtil class contains static methods for obtaining system information. It handles platform-specific differences internally and provides a consistent interface for retrieving the hostname.\n\nMethods:\n\nMethod1: getHostName() -> String - Retrieves the hostname of the current system. On Linux systems, it uses the 'uname -n' command, while on Windows it first tries the COMPUTERNAME environment variable and falls back to the 'hostname' command if needed. Returns an empty string if the hostname cannot be determined.\n\nMethod2: getUname(String param) -> String - A helper method that executes the 'uname' command with the specified parameter and returns its output. Primarily used internally by getHostName() for Linux systems. Returns an empty string if the command fails or times out.\n\nInput Parameters:\n- param (String): The parameter to pass to the uname command (e.g., \"-n\" for nodename)\n\nOutput:\n- String: The requested system information (hostname or uname output), or empty string if retrieval fails",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.concurrent.TimeUnit;\n\npublic static String getHostName()\n{\n    String hostname = \"\";\n\n    if (Platform.isLinux())\n    {\n        hostname = getUname(\"-n\");\n    }\n    else if (Platform.isWindows())\n    {\n        hostname = System.getenv().get(\"COMPUTERNAME\");\n        try\n        {\n            Process process = new ProcessBuilder(\"hostname\").start();\n            process.waitFor(1, TimeUnit.SECONDS);\n            BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            hostname = br.readLine().trim();\n        }\n        catch (IOException | InterruptedException ignored)\n        {\n        }\n    }\n    return hostname;\n}\n\npublic static String getUname(String param)\n{\n    String uname = \"\";\n    try\n    {\n        Process process = new ProcessBuilder(\"uname\", param).start();\n        process.waitFor(1, TimeUnit.SECONDS);\n        BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        uname = br.readLine().trim();\n    }\n    catch (IOException | InterruptedException ignored)\n    {\n    }\n    return uname;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.concurrent.TimeUnit;\n\npublic class SystemInfoUtil {\n    public static String getHostName() {\n        String os = System.getProperty(\"os.name\").toLowerCase();\n        if (os.contains(\"win\")) {\n            String computerName = System.getenv(\"COMPUTERNAME\");\n            if (computerName != null && !computerName.isEmpty()) {\n                return computerName;\n            } else {\n                return executeHostnameCommand();\n            }\n        } else {\n            return getUname(\"-n\");\n        }\n    }\n\n    private static String executeHostnameCommand() {\n        ProcessBuilder pb = new ProcessBuilder(\"hostname\");\n        pb.redirectErrorStream(true);\n        try {\n            Process process = pb.start();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            StringBuilder output = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line).append(\"\\n\");\n            }\n            boolean exited = process.waitFor(5, TimeUnit.SECONDS);\n            if (!exited) {\n                process.destroyForcibly();\n                return \"\";\n            }\n            int exitCode = process.exitValue();\n            if (exitCode != 0) {\n                return \"\";\n            }\n            return output.toString().trim();\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n\n    public static String getUname(String param) {\n        ProcessBuilder pb = new ProcessBuilder(\"uname\", param);\n        pb.redirectErrorStream(true);\n        try {\n            Process process = pb.start();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            StringBuilder output = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line).append(\"\\n\");\n            }\n            boolean exited = process.waitFor(5, TimeUnit.SECONDS);\n            if (!exited) {\n                process.destroyForcibly();\n                return \"\";\n            }\n            int exitCode = process.exitValue();\n            if (exitCode != 0) {\n                return \"\";\n            }\n            return output.toString().trim();\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n}"
  },
  {
    "Task_id": 294,
    "Instruction": "Task Description: Create a Java class that manages the execution of external processes, handles their input/output streams, and provides mechanisms for process termination and output handling through callbacks.\n\nClass Description: The ProcessExecutor class is responsible for executing external processes using ProcessBuilder, managing their lifecycle, and providing real-time output handling through a callback interface. It uses a thread pool for asynchronous execution and includes methods for graceful termination.\n\nAttributes:\n- mProcessBuilder: ProcessBuilder - Configures and manages the external process to be executed\n- mProcess: Process - Represents the currently running external process instance\n- mExecutor: ThreadPoolExecutor - Manages the thread used for asynchronous process execution\n\nMethods:\n- ProcessExecutor(Path scriptPath, Path libraryPath) -> void - Constructor that initializes the ProcessBuilder with the given script and library paths\n- execute(ProcessOutputHandler outputHandler) -> void - Starts the external process asynchronously and handles its output through the provided callback interface\n- terminate() -> void - Terminates the running process and shuts down the executor service\n- interface ProcessOutputHandler - Callback interface for handling process output, completion, and errors\n  - handleOutput(String output) -> void - Called for each line of output from the process\n  - handleCompletion(int exitCode) -> void - Called when the process completes with its exit code\n  - handleError(String errorMessage) -> void - Called when an error occurs during process execution",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.file.Path;\nimport java.util.concurrent.ThreadPoolExecutor;\n\npublic class ProcessExecutor {\n\n    private ProcessBuilder mProcessBuilder;\n    private Process mProcess;\n    private ThreadPoolExecutor mExecutor;\n\n    public ProcessExecutor(Path scriptPath, Path libraryPath) {\n        mProcessBuilder = new ProcessBuilder();\n        mProcessBuilder.command(scriptPath.toString(), libraryPath.toString());\n    }\n\n    public void execute(ProcessOutputHandler outputHandler) {\n        mExecutor = ThreadPool.CACHED;\n        mExecutor.execute(() -> {\n            try {\n                mProcess = mProcessBuilder.start();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(mProcess.getInputStream()));\n                String line;\n                while((line = reader.readLine()) != null) {\n                    outputHandler.handleOutput(line);\n                }\n\n                int exitCode = mProcess.waitFor();\n                outputHandler.handleCompletion(exitCode);\n            } catch(InterruptedException ie) {\n                outputHandler.handleError(\"Process was interrupted\");\n            } catch(IOException ioe) {\n                outputHandler.handleError(\"IO Error during process execution\");\n            }\n        });\n    }\n\n    public void terminate() {\n        if(mProcess != null) {\n            mProcess.destroy();\n        }\n        if(mExecutor != null) {\n            mExecutor.shutdownNow();\n        }\n    }\n\n    public interface ProcessOutputHandler {\n        void handleOutput(String output);\n        void handleCompletion(int exitCode);\n        void handleError(String errorMessage);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.*;\nimport java.nio.file.Path;\nimport java.util.concurrent.*;\n\npublic class ProcessExecutor {\n    private ProcessBuilder mProcessBuilder;\n    private Process mProcess;\n    private ThreadPoolExecutor mExecutor;\n\n    public ProcessExecutor(Path scriptPath, Path libraryPath) {\n        mProcessBuilder = new ProcessBuilder(scriptPath.toString());\n        mProcessBuilder.directory(libraryPath.toFile());\n        mExecutor = (ThreadPoolExecutor) Executors.newFixedThreadPool(2);\n    }\n\n    public void execute(ProcessOutputHandler outputHandler) {\n        try {\n            mProcess = mProcessBuilder.start();\n        } catch (IOException e) {\n            outputHandler.handleError(\"Failed to start process: \" + e.getMessage());\n            return;\n        }\n\n        mExecutor.execute(() -> {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(mProcess.getInputStream()))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    outputHandler.handleOutput(line);\n                }\n            } catch (IOException e) {\n                outputHandler.handleError(\"Error reading stdout: \" + e.getMessage());\n            }\n        });\n\n        mExecutor.execute(() -> {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(mProcess.getErrorStream()))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    outputHandler.handleError(line);\n                }\n            } catch (IOException e) {\n                outputHandler.handleError(\"Error reading stderr: \" + e.getMessage());\n            }\n        });\n\n        mExecutor.execute(() -> {\n            try {\n                int exitCode = mProcess.waitFor();\n                outputHandler.handleCompletion(exitCode);\n            } catch (InterruptedException e) {\n                outputHandler.handleError(\"Process interrupted: \" + e.getMessage());\n            }\n        });\n    }\n\n    public void terminate() {\n        if (mProcess != null) {\n            mProcess.destroy();\n        }\n        mExecutor.shutdownNow();\n    }\n\n    public interface ProcessOutputHandler {\n        void handleOutput(String output);\n        void handleCompletion(int exitCode);\n        void handleError(String errorMessage);\n    }\n}\n```"
  },
  {
    "Task_id": 297,
    "Instruction": "Task Description: Create a Java class that executes external processes, handles their output streams, and provides a way to interact with the process execution through callback methods.\n\nClass Description: The ProcessExecutor class is designed to manage external process execution in a cross-platform manner (handling Windows and Unix-like systems differently). It provides methods to start processes, redirect their output streams, and handle both standard output and error streams through a handler interface.\n\nAttributes:\n- process: Process - Represents the currently running external process\n- processBuilder: ProcessBuilder - Used to configure and start external processes\n\nMethods:\n- execRedirected: static Process(String[] command) throws IOException - Configures and starts an external process with error stream redirected to standard output. Handles Windows-specific command formatting.\n  - Input: String[] command - The command and arguments to execute\n  - Output: Process - The started process instance\n\n- listenOnProcess: int(String[] arguments, ProcessOutputHandler handler) - Executes a command and listens to its output streams, forwarding output lines and errors to the handler.\n  - Input: \n    - String[] arguments - The command and arguments to execute\n    - ProcessOutputHandler handler - Callback interface for handling output and errors\n  - Output: int - The exit value of the process (-1 if execution failed)\n\n- ProcessOutputHandler: interface - Callback interface for handling process output and errors\n  - Methods:\n    - handleOutputLine: void(String line) - Called for each line of output from the process\n    - handleError: void(String errorMessage) - Called when an error occurs during process execution",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Map;\n\npublic class ProcessExecutor {\n\n    private Process process;\n    private ProcessBuilder processBuilder;\n\n    public static Process execRedirected(String[] command) throws IOException {\n        ProcessBuilder pb;\n\n        if (!OSUtils.isWindows()) {\n            pb = new ProcessBuilder(command);\n        } else {\n            String[] cmdLine = new String[command.length];\n            for (int i = 0; i < command.length; i++)\n                cmdLine[i] = command[i].replace(\"\\\"\", \"\\\\\\\"\");\n            pb = new ProcessBuilder(cmdLine);\n            Map<String, String> env = pb.environment();\n            env.put(\"CYGWIN\", \"nodosfilewarning\");\n        }\n        pb.redirectErrorStream(true);\n\n        return pb.start();\n    }\n\n    public int listenOnProcess(String[] arguments, ProcessOutputHandler handler) {\n        try {\n            final Process p = execRedirected(arguments);\n            Thread thread = new Thread() {\n                public void run() {\n                    try {\n                        InputStreamReader reader = new InputStreamReader(p.getInputStream());\n                        int c;\n                        String line = \"\";\n                        while ((c = reader.read()) != -1) {\n                            if ((char) c == '\\r')\n                                continue;\n                            if ((char) c == '\\n') {\n                                handler.handleOutputLine(line);\n                                line = \"\";\n                            } else {\n                                line += (char) c;\n                            }\n                        }\n                        handler.handleOutputLine(line);\n                        reader.close();\n\n                        reader = new InputStreamReader(p.getErrorStream());\n                        while ((c = reader.read()) != -1)\n                            System.err.print((char) c);\n                        reader.close();\n                    } catch (Exception e) {\n                        handler.handleError(\"Run Exception: \" + e.getMessage());\n                    }\n                }\n            };\n            thread.start();\n            int res = p.waitFor();\n            thread.join();\n            return res;\n        } catch (Exception e) {\n            handler.handleError(\"Process Exception: \" + e.getMessage());\n        }\n        return -1;\n    }\n\n    public interface ProcessOutputHandler {\n        void handleOutputLine(String line);\n        void handleError(String errorMessage);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.*;\n\npublic class ProcessExecutor {\n    private Process process;\n    private ProcessBuilder processBuilder;\n\n    public static Process execRedirected(String[] command) throws IOException {\n        String[] cmdArray = command;\n        if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n            cmdArray = new String[] {\"cmd.exe\", \"/c\"};\n            cmdArray = Arrays.copyOf(cmdArray, cmdArray.length + command.length);\n            System.arraycopy(command, 0, cmdArray, 2, command.length);\n        }\n        ProcessBuilder pb = new ProcessBuilder(cmdArray);\n        pb.redirectErrorStream(true);\n        return pb.start();\n    }\n\n    public int listenOnProcess(String[] arguments, ProcessOutputHandler handler) {\n        try {\n            processBuilder = new ProcessBuilder(arguments);\n            process = processBuilder.start();\n            InputStream stdout = process.getInputStream();\n            InputStream stderr = process.getErrorStream();\n\n            Thread outThread = new Thread(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        handler.handleOutputLine(line);\n                    }\n                } catch (IOException e) {\n                    handler.handleError(e.getMessage());\n                }\n            });\n\n            Thread errThread = new Thread(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(stderr))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        handler.handleError(line);\n                    }\n                } catch (IOException e) {\n                    handler.handleError(e.getMessage());\n                }\n            });\n\n            outThread.start();\n            errThread.start();\n            int exitCode = process.waitFor();\n            outThread.join();\n            errThread.join();\n            return exitCode;\n        } catch (IOException | InterruptedException e) {\n            handler.handleError(e.getMessage());\n            return -1;\n        }\n    }\n\n    public interface ProcessOutputHandler {\n        void handleOutputLine(String line);\n        void handleError(String errorMessage);\n    }\n}\n```"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Implement a thread-safe registry class for managing daemon processes using memory-mapped files for persistent storage. The class should handle concurrent access, automatic file resizing, and data recovery from corrupted states.\n\nClass Description: DaemonRegistry is a thread-safe class that maintains a registry of daemon processes in a memory-mapped file. It provides methods to read, update, and manage daemon information with proper file locking and automatic buffer resizing when needed. The class implements AutoCloseable for proper resource management.\n\nAttributes:\n- LOGGER: Logger - Logger instance for logging operations\n- MAX_LENGTH: int - Maximum initial size for the memory-mapped buffer (32KB)\n- LOCK_TIMEOUT_MS: long - Timeout duration for acquiring file locks (20 seconds)\n- locks: Map<Path, Object> - Static concurrent map for maintaining file-level locks\n- registryFile: Path - Path to the registry file\n- lck: Object - Instance-specific lock object\n- channel: FileChannel - File channel for the registry file\n- buffer: MappedByteBuffer - Memory-mapped byte buffer for the file\n- size: long - Current size of the memory-mapped buffer\n- infosMap: Map<String, DaemonInfo> - Map storing daemon information\n\nMethods:\n- DaemonRegistry(Path registryFile) -> void - Constructor that initializes the registry by creating or opening the specified file and setting up the memory-mapped buffer\n- close() -> void - Closes the file channel and releases system resources\n- getAll() -> List<DaemonInfo> - Returns a list of all registered daemon information\n- read() -> void - Reads all daemon information from the memory-mapped file into the internal map\n- doUpdate(Runnable updater) -> void - Performs a read or update operation with file locking, handles buffer resizing and data recovery\n- tryLock() -> FileLock - Attempts to acquire an exclusive lock on the file\n- reset() -> void - Clears the internal map and resets the buffer\n- readString() -> String - Reads a UTF-8 encoded string from the buffer\n- writeString(String str) -> void - Writes a UTF-8 encoded string to the buffer\n- nextPowerOf2(long a, long min) -> long - Helper method to calculate the next power of 2 greater than or equal to input values",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.BufferOverflowException;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileLock;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class DaemonRegistry implements AutoCloseable {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DaemonRegistry.class);\n    private static final int MAX_LENGTH = 32768;\n    private static final long LOCK_TIMEOUT_MS = 1000 * 20;\n    private static final Map<Path, Object> locks = new ConcurrentHashMap<>();\n\n    private final Path registryFile;\n    private final Object lck;\n    private final FileChannel channel;\n    private MappedByteBuffer buffer;\n    private long size;\n    private final Map<String, DaemonInfo> infosMap = new HashMap<>();\n\n    public DaemonRegistry(Path registryFile) {\n        final Path absPath = registryFile.toAbsolutePath().normalize();\n        this.lck = locks.computeIfAbsent(absPath, p -> new Object());\n        this.registryFile = absPath;\n        try {\n            if (!Files.isRegularFile(absPath)) {\n                if (!Files.isDirectory(absPath.getParent())) {\n                    Files.createDirectories(absPath.getParent());\n                }\n            }\n            channel = FileChannel.open(\n                    absPath, StandardOpenOption.CREATE, StandardOpenOption.READ, StandardOpenOption.WRITE);\n            size = nextPowerOf2(channel.size(), MAX_LENGTH);\n            buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);\n        } catch (IOException e) {\n            throw new DaemonException(e);\n        }\n    }\n\n    public void close() {\n        try {\n            channel.close();\n        } catch (IOException e) {\n            throw new DaemonException(\"Error closing registry\", e);\n        }\n    }\n\n    public List<DaemonInfo> getAll() {\n        read();\n        return new ArrayList<>(infosMap.values());\n    }\n\n    private void read() {\n        doUpdate(null);\n    }\n\n    private void doUpdate(Runnable updater) {\n        if (!Files.isReadable(registryFile)) {\n            throw new DaemonException(\"Registry became unaccessible\");\n        }\n\n        synchronized (lck) {\n            final long deadline = System.currentTimeMillis() + LOCK_TIMEOUT_MS;\n            while (System.currentTimeMillis() < deadline) {\n                try (FileLock l = tryLock()) {\n                    BufferCaster.cast(buffer).position(0);\n                    infosMap.clear();\n                    int nb = buffer.getInt();\n                    for (int i = 0; i < nb; i++) {\n                        String daemonId = readString();\n                        String javaHome = readString();\n                        String mavenHome = readString();\n                        int pid = buffer.getInt();\n                        String address = readString();\n\n                        byte[] token = new byte[DaemonInfo.TOKEN_SIZE];\n                        buffer.get(token);\n\n                        String locale = readString();\n                        List<String> opts = new ArrayList<>();\n                        int nbOpts = buffer.getInt();\n                        for (int j = 0; j < nbOpts; j++) {\n                            opts.add(readString());\n                        }\n                        DaemonState state = DaemonState.values()[buffer.get()];\n                        long lastIdle = buffer.getLong();\n                        long lastBusy = buffer.getLong();\n                        DaemonInfo di = new DaemonInfo(\n                                daemonId, javaHome, mavenHome, pid, address, token, locale, opts, state, lastIdle,\n                                lastBusy);\n                        infosMap.putIfAbsent(di.getId(), di);\n                    }\n\n                    if (updater != null) {\n                        updater.run();\n                        BufferCaster.cast(buffer).position((int) 0);\n                        buffer.putInt(infosMap.size());\n                        for (DaemonInfo di : infosMap.values()) {\n                            writeString(di.getId());\n                            writeString(di.getJavaHome());\n                            writeString(di.getMvndHome());\n                            buffer.putInt(di.getPid());\n                            writeString(di.getAddress());\n                            buffer.put(di.getToken());\n                            writeString(di.getLocale());\n                            buffer.putInt(di.getOptions().size());\n                            for (String opt : di.getOptions()) {\n                                writeString(opt);\n                            }\n                            buffer.put((byte) di.getState().ordinal());\n                            buffer.putLong(di.getLastIdle());\n                            buffer.putLong(di.getLastBusy());\n                        }\n                    }\n                    return;\n                } catch (BufferOverflowException e) {\n                    size <<= 1;\n                    LOGGER.info(\"Resizing registry to {} kb due to buffer overflow\", (size / 1024));\n                    try {\n                        buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);\n                    } catch (IOException ex) {\n                        ex.addSuppressed(e);\n                        throw new DaemonException(\"Could not resize registry \" + registryFile, ex);\n                    }\n                } catch (IOException e) {\n                    throw new DaemonException(\n                            \"Exception while \" + (updater != null ? \"updating \" : \"reading \") + registryFile, e);\n                } catch (IllegalStateException | ArrayIndexOutOfBoundsException | BufferUnderflowException e) {\n                    String absPath = registryFile.toAbsolutePath().normalize().toString();\n                    LOGGER.warn(\n                            \"Invalid daemon registry info, trying to recover from this issue. \"\n                                    + \"If you keep getting this warning, try deleting the `registry.bin` file at [{}]\",\n                            absPath,\n                            e);\n                    this.reset();\n                    return;\n                }\n            }\n            throw new RuntimeException(\"Could not lock \" + registryFile + \" within \" + LOCK_TIMEOUT_MS + \" ms\");\n        }\n    }\n\n    private FileLock tryLock() {\n        try {\n            return channel.tryLock(0, size, false);\n        } catch (IOException e) {\n            throw new DaemonException(\"Could not lock \" + registryFile, e);\n        }\n    }\n\n    private void reset() {\n        infosMap.clear();\n        BufferCaster.cast(buffer).clear();\n        buffer.putInt(0);\n    }\n\n    protected String readString() {\n        int sz = buffer.getShort();\n        if (sz == -1) {\n            return null;\n        }\n        if (sz < -1 || sz > 1024) {\n            throw new IllegalStateException(\"Bad string size: \" + sz);\n        }\n        byte[] buf = new byte[sz];\n        buffer.get(buf);\n        return new String(buf, StandardCharsets.UTF_8);\n    }\n\n    protected void writeString(String str) {\n        if (str == null) {\n            buffer.putShort((short) -1);\n            return;\n        }\n        byte[] buf = str.getBytes(StandardCharsets.UTF_8);\n        if (buf.length > 1024) {\n            LOGGER.warn(\"Attempting to write string longer than 1024 bytes: '{}'. Please raise an issue.\", str);\n            str = str.substring(0, 1033);\n            while (buf.length > 1024) {\n                str = str.substring(0, str.length() - 12) + \"\u2026\";\n                buf = str.getBytes(StandardCharsets.UTF_8);\n            }\n        }\n        buffer.putShort((short) buf.length);\n        buffer.put(buf);\n    }\n\n    private long nextPowerOf2(long a, long min) {\n        long b = min;\n        while (b < a) {\n            b = b << 1;\n        }\n        return b;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport java.nio.charset.StandardCharsets;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.logging.Logger;\n\npublic class DaemonRegistry implements AutoCloseable {\n    private static final Logger LOGGER = Logger.getLogger(DaemonRegistry.class.getName());\n    private static final int MAX_LENGTH = 32 * 1024;\n    private static final long LOCK_TIMEOUT_MS = 20_000;\n    private static final Map<Path, Object> locks = new ConcurrentHashMap<>();\n    private final Path registryFile;\n    private final Object lck = new Object();\n    private FileChannel channel;\n    private MappedByteBuffer buffer;\n    private long size;\n    private final Map<String, DaemonInfo> infosMap = new ConcurrentHashMap<>();\n\n    public DaemonRegistry(Path registryFile) throws IOException {\n        this.registryFile = registryFile;\n        if (!Files.exists(registryFile)) {\n            Files.createFile(registryFile);\n        }\n        this.channel = FileChannel.open(registryFile, StandardOpenOption.READ, StandardOpenOption.WRITE);\n        this.size = MAX_LENGTH;\n        this.buffer = this.channel.map(FileChannel.MapMode.READ_WRITE, 0, this.size);\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (channel != null) {\n            channel.close();\n        }\n    }\n\n    public List<DaemonInfo> getAll() {\n        synchronized (lck) {\n            read();\n            return new ArrayList<>(infosMap.values());\n        }\n    }\n\n    private void read() {\n        synchronized (lck) {\n            FileLock lock = tryLock();\n            if (lock == null) {\n                return;\n            }\n            try {\n                buffer.rewind();\n                int count = buffer.getInt();\n                infosMap.clear();\n                for (int i = 0; i < count; i++) {\n                    String name = readString();\n                    int pid = buffer.getInt();\n                    String status = readString();\n                    infosMap.put(name, new DaemonInfo(name, pid, status));\n                }\n            } catch (Exception e) {\n                reset();\n                LOGGER.severe(\"Error reading registry: \" + e.getMessage());\n            } finally {\n                try {\n                    lock.release();\n                } catch (IOException e) {\n                    LOGGER.severe(\"Error releasing lock: \" + e.getMessage());\n                }\n            }\n        }\n    }\n\n    public void doUpdate(Runnable updater) {\n        synchronized (lck) {\n            FileLock lock = tryLock();\n            if (lock == null) {\n                return;\n            }\n            try {\n                updater.run();\n            } catch (Exception e) {\n                LOGGER.severe(\"Error during update: \" + e.getMessage());\n                reset();\n            } finally {\n                try {\n                    lock.release();\n                } catch (IOException e) {\n                    LOGGER.severe(\"Error releasing lock: \" + e.getMessage());\n                }\n            }\n        }\n    }\n\n    private FileLock tryLock() {\n        Object lockObj = locks.computeIfAbsent(registryFile, k -> new Object());\n        synchronized (lockObj) {\n            try {\n                FileLock lock = channel.tryLock(0, Long.MAX_VALUE, false);\n                if (lock != null) {\n                    return lock;\n                }\n                long startTime = System.currentTimeMillis();\n                while (System.currentTimeMillis() - startTime < LOCK_TIMEOUT_MS) {\n                    try {\n                        lock = channel.tryLock(0, Long.MAX_VALUE, false);\n                        if (lock != null) {\n                            return lock;\n                        }\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        Thread.currentThread().interrupt();\n                        return null;\n                    }\n                }\n                return null;\n            } catch (IOException e) {\n                LOGGER.severe(\"Error acquiring lock: \" + e.getMessage());\n                return null;\n            }\n        }\n    }\n\n    private void reset() {\n        synchronized (lck) {\n            infosMap.clear();\n            try {\n                if (channel != null) {\n                    channel.close();\n                }\n                channel = FileChannel.open(registryFile, StandardOpenOption.READ, StandardOpenOption.WRITE);\n                size = MAX_LENGTH;\n                buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);\n            } catch (IOException e) {\n                LOGGER.severe(\"Error resetting registry: \" + e.getMessage());\n            }\n        }\n    }\n\n    private String readString() {\n        int length = buffer.getInt();\n        if (length < 0 || length > buffer.remaining()) {\n            throw new IllegalArgumentException(\"Invalid string length\");\n        }\n        byte[] bytes = new byte[length];\n        buffer.get(bytes);\n        return new String(bytes, StandardCharsets.UTF_8);\n    }\n\n    private void writeString(String str) {\n        byte[] bytes = str.getBytes(StandardCharsets.UTF_8);\n        int length = bytes.length;\n        if (buffer.remaining() < Integer.BYTES + length) {\n            resizeBuffer(buffer.capacity() + Integer.BYTES + length);\n        }\n        buffer.putInt(length);\n        buffer.put(bytes);\n    }\n\n    private void resizeBuffer(long newSize) {\n        synchronized (lck) {\n            FileLock lock = tryLock();\n            if (lock == null) {\n                return;\n            }\n            try {\n                channel.truncate(newSize);\n                buffer.clear();\n                buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, newSize);\n                size = newSize;\n            } catch (IOException e) {\n                LOGGER.severe(\"Error resizing buffer: \" + e.getMessage());\n            } finally {\n                try {\n                    lock.release();\n                } catch (IOException e) {\n                    LOGGER.severe(\"Error releasing lock: \" + e.getMessage());\n                }\n            }\n        }\n    }\n\n    private static long nextPowerOf2(long a, long min) {\n        if (a >= min) {\n            return a;\n        }\n        return 1L << (Long.numberOfTrailingZeros(min) + 1);\n    }\n}\n\nclass DaemonInfo {\n    private final String name;\n    private final int pid;\n    private final String status;\n\n    public DaemonInfo(String name, int pid, String status) {\n        this.name = name;\n        this.pid = pid;\n        this.status = status;\n    }\n\n    // Getters and other methods as needed\n}\n```"
  },
  {
    "Task_id": 306,
    "Instruction": "Task Description: Implement a RabbitMQ producer class in Java that can connect to a RabbitMQ broker, send messages to a specified queue, and properly manage resources.\n\nClass Description: The RabbitMQProducer class provides functionality to establish a connection with a RabbitMQ message broker, declare a queue, send messages to that queue, and handle connection cleanup. It supports both single message and batch message sending operations.\n\nAttributes:\n- host: String - The hostname or IP address of the RabbitMQ server\n- port: int - The port number of the RabbitMQ server\n- username: String - The username for authentication with RabbitMQ\n- password: String - The password for authentication with RabbitMQ\n- queueName: String - The name of the queue to send messages to\n- durable: boolean - Whether the queue should survive server restarts\n- connection: Connection - The RabbitMQ connection object\n- channel: Channel - The RabbitMQ channel object for message operations\n\nMethods:\n- RabbitMQProducer(Map<String, String> config) -> void - Constructor that initializes the producer with configuration parameters\n- connect() -> void - Establishes connection to RabbitMQ and creates a channel\n- sendMessage(String message) -> void - Sends a single message to the declared queue\n- sendMessages(String[] messages) -> void - Sends multiple messages to the declared queue\n- close() -> void - Closes the channel and connection to release resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.MessageProperties;\n\npublic class RabbitMQProducer {\n\n    private String host;\n    private int port;\n    private String username;\n    private String password;\n    private String queueName;\n    private boolean durable;\n    private Connection connection;\n    private Channel channel;\n\n    public RabbitMQProducer(Map<String, String> config) {\n        this.host = config.get(\"rabbitmq_host\");\n        this.port = Integer.parseInt(config.get(\"rabbitmq_port\"));\n        this.username = config.get(\"rabbitmq_user\");\n        this.password = config.get(\"rabbitmq_pass\");\n        this.queueName = config.get(\"rabbitmq_queuename\");\n        this.durable = config.get(\"rabbitmq_durable\").equals(\"true\");\n    }\n\n    public void connect() throws IOException, TimeoutException {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(host);\n        factory.setPort(port);\n        factory.setUsername(username);\n        factory.setPassword(password);\n        connection = factory.newConnection();\n        channel = connection.createChannel();\n        channel.queueDeclare(queueName, durable, false, false, null);\n    }\n\n    public void sendMessage(String message) throws IOException {\n        channel.basicPublish(\"\", queueName, \n            MessageProperties.PERSISTENT_TEXT_PLAIN,\n            message.getBytes()\n        );\n    }\n\n    public void sendMessages(String[] messages) throws IOException {\n        for (String message : messages) {\n            sendMessage(message);\n        }\n    }\n\n    public void close() throws IOException, TimeoutException {\n        if (channel != null && channel.isOpen()) {\n            channel.close();\n        }\n        if (connection != null && connection.isOpen()) {\n            connection.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 40,
    "right_result": "import com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport java.io.IOException;\nimport java.util.Map;\n\npublic class RabbitMQProducer {\n    private String host;\n    private int port;\n    private String username;\n    private String password;\n    private String queueName;\n    private boolean durable;\n    private Connection connection;\n    private Channel channel;\n\n    public RabbitMQProducer(Map<String, String> config) {\n        this.host = config.get(\"host\");\n        this.port = Integer.parseInt(config.get(\"port\"));\n        this.username = config.get(\"username\");\n        this.password = config.get(\"password\");\n        this.queueName = config.get(\"queueName\");\n        this.durable = Boolean.parseBoolean(config.get(\"durable\"));\n    }\n\n    public void connect() throws IOException {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(host);\n        factory.setPort(port);\n        factory.setUsername(username);\n        factory.setPassword(password);\n        connection = factory.newConnection();\n        channel = connection.createChannel();\n        channel.queueDeclare(queueName, durable, false, false, null);\n    }\n\n    public void sendMessage(String message) throws IOException {\n        channel.basicPublish(\"\", queueName, null, message.getBytes());\n    }\n\n    public void sendMessages(String[] messages) throws IOException {\n        for (String message : messages) {\n            sendMessage(message);\n        }\n    }\n\n    public void close() throws IOException {\n        if (channel != null) {\n            channel.close();\n        }\n        if (connection != null) {\n            connection.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 307,
    "Instruction": "Task Description: Create a Java class that implements a Redis publisher using the Lettuce client library, capable of publishing elements to a Redis list and providing a reactive stream publisher for consuming these elements.\n\nClass Description: The RedisPublisher class provides functionality to connect to a Redis server, publish elements to a Redis list, and create a reactive stream publisher for these elements. It handles connection management and resource cleanup.\n\nAttributes:\n- client: [RedisClient] - The Redis client instance used to establish connections with the Redis server.\n- connection: [StatefulRedisConnection<String, String>] - The active connection to the Redis server for executing commands.\n\nMethods:\n- RedisPublisher() - [Constructor] -> [void] - Initializes the Redis client and establishes a connection to the Redis server. Also flushes all existing data in Redis.\n- createPublisher(long elements) -> [Publisher<String>] - Creates and returns a reactive stream Publisher that emits elements from a Redis list. The method creates a new Redis list with the specified number of elements and sets up a supplier for LRANGE commands to retrieve them.\n- close() -> [void] - Closes the Redis connection and shuts down the client to release resources.\n\nInput: \n- For createPublisher: elements [long] - The number of elements to publish to the Redis list.\n\nOutput:\n- For createPublisher: A Publisher<String> that emits the elements from the Redis list. Returns null if elements equals Long.MAX_VALUE.",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.output.ValueListOutput;\nimport io.lettuce.core.protocol.Command;\nimport io.lettuce.core.protocol.CommandArgs;\nimport io.lettuce.core.protocol.CommandType;\nimport io.lettuce.test.resource.FastShutdown;\nimport io.lettuce.test.resource.TestClientResources;\nimport io.lettuce.test.settings.TestSettings;\nimport org.reactivestreams.Publisher;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.function.Supplier;\n\npublic class RedisPublisher {\n\n    private RedisClient client;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisPublisher() {\n        client = RedisClient.create(TestClientResources.get(), RedisURI.create(TestSettings.host(), TestSettings.port()));\n        connection = client.connect();\n        connection.sync().flushall();\n    }\n\n    public Publisher<String> createPublisher(long elements) {\n        RedisCommands<String, String> sync = connection.sync();\n\n        if (elements == Long.MAX_VALUE) {\n            return null;\n        }\n\n        String id = UUID.randomUUID().toString();\n        String key = \"PublisherVerification-\" + id;\n\n        for (int i = 0; i < elements; i++) {\n            sync.lpush(key, \"element-\" + i);\n        }\n\n        Supplier<Command<String, String, List<String>>> supplier = () -> {\n            CommandArgs<String, String> args = new CommandArgs<>(StringCodec.UTF8).addKey(key).add(0).add(-1);\n            return new Command<>(CommandType.LRANGE, new ValueListOutput<>(StringCodec.UTF8), args);\n        };\n\n        return new TestRedisPublisher(supplier, connection, true);\n    }\n\n    public void close() {\n        connection.close();\n        FastShutdown.shutdown(client);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.FluxSink;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class RedisPublisher {\n    private RedisClient client;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisPublisher() {\n        client = RedisClient.create(\"redis://localhost:6379\");\n        connection = client.connect();\n        connection.sync().flushAll();\n    }\n\n    public Publisher<String> createPublisher(long elements) {\n        if (elements == Long.MAX_VALUE) {\n            return null;\n        }\n        String listName = \"publisher_list_\" + System.currentTimeMillis();\n        for (long i = 0; i < elements; i++) {\n            connection.sync().rPush(listName, \"element-\" + i);\n        }\n        List<String> elementsList = connection.sync().lRange(listName, 0, elements - 1);\n        return Flux.fromIterable(elementsList);\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (client != null) {\n            client.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 311,
    "Instruction": "Task Description: Create a Java class that manages Redis connections using the Jedis client library, providing functionality for connection establishment, credential updates, and resource cleanup.\n\nClass Description: The RedisConnectionManager class encapsulates Redis connection management using JedisPooled for connection pooling. It handles authentication, provides access to the Jedis instance, allows credential updates, and ensures proper resource cleanup.\n\nAttributes:\n- jedis: JedisPooled - The pooled Redis connection instance\n- credentialsProvider: DefaultRedisCredentialsProvider - Provider for Redis authentication credentials\n\nMethods:\n- RedisConnectionManager(String host, int port, String initialUsername, String initialPassword) -> void - Constructor that initializes the Redis connection with host, port, and initial credentials\n- updateCredentials(String updatedUsername, String updatedPassword) -> void - Updates the authentication credentials for the Redis connection\n- getJedisInstance() -> JedisPooled - Returns the managed JedisPooled instance for Redis operations\n- closeConnection() -> void - Closes the Redis connection and releases resources",
    "Canonical_solution": "import redis.clients.jedis.DefaultJedisClientConfig;\nimport redis.clients.jedis.DefaultRedisCredentials;\nimport redis.clients.jedis.DefaultRedisCredentialsProvider;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisPooled;\n\npublic class RedisConnectionManager {\n\n    private JedisPooled jedis;\n    private DefaultRedisCredentialsProvider credentialsProvider;\n\n    public RedisConnectionManager(String host, int port, String initialUsername, String initialPassword) {\n        DefaultRedisCredentials initialCredentials = new DefaultRedisCredentials(initialUsername, initialPassword);\n        this.credentialsProvider = new DefaultRedisCredentialsProvider(initialCredentials);\n        HostAndPort address = new HostAndPort(host, port);\n        DefaultJedisClientConfig clientConfig = DefaultJedisClientConfig.builder()\n                .credentialsProvider(credentialsProvider).build();\n        this.jedis = new JedisPooled(address, clientConfig);\n    }\n\n    public void updateCredentials(String updatedUsername, String updatedPassword) {\n        DefaultRedisCredentials updatedCredentials = new DefaultRedisCredentials(updatedUsername, updatedPassword);\n        credentialsProvider.setCredentials(updatedCredentials);\n    }\n\n    public JedisPooled getJedisInstance() {\n        return jedis;\n    }\n\n    public void closeConnection() {\n        jedis.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import redis.clients.jedis.JedisPooled;\nimport redis.clients.jedis.RedisURI;\nimport com.example.DefaultRedisCredentialsProvider;\n\npublic class RedisConnectionManager {\n    private JedisPooled jedis;\n    private DefaultRedisCredentialsProvider credentialsProvider;\n\n    public RedisConnectionManager(String host, int port, String initialUsername, String initialPassword) {\n        this.credentialsProvider = new DefaultRedisCredentialsProvider(initialUsername, initialPassword);\n        RedisURI redisURI = RedisURI.create(host, port);\n        redisURI.setUsername(initialUsername);\n        redisURI.setPassword(initialPassword);\n        this.jedis = new JedisPooled(redisURI);\n    }\n\n    public void updateCredentials(String updatedUsername, String updatedPassword) {\n        this.credentialsProvider.setUsername(updatedUsername);\n        this.credentialsProvider.setPassword(updatedPassword);\n    }\n\n    public JedisPooled getJedisInstance() {\n        return jedis;\n    }\n\n    public void closeConnection() {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 312,
    "Instruction": "Task Description: Implement a Redis-based registry class for node registration and subscription in a distributed system, using Java with Jedis client library.\n\nClass Description: RedisRegistry is a class that provides node registration and subscription capabilities using Redis as the backend storage. It maintains connections to Redis servers, handles node registration, and manages subscription to node changes.\n\nAttributes:\n- jedisPools: ConcurrentHashMap<String, JedisPool> - A thread-safe map storing JedisPool instances for different Redis server addresses\n- clusterName: String - The name of the current cluster\n- replicate: boolean - Flag indicating whether operations should be replicated to all Redis servers\n- notifiers: ConcurrentMap<String, Notifier> - A thread-safe map storing Notifier instances for different node paths\n\nMethods:\n- RedisRegistry(AppContext appContext) - Constructor - Initializes the registry with configuration from AppContext\n  Input: appContext: AppContext - The application context containing configuration\n  Output: None\n\n- doRegister(Node node) - protected - Registers a node in Redis\n  Input: node: Node - The node to be registered\n  Output: None (throws NodeRegistryException on failure)\n\n- doSubscribe(Node node, NotifyListener listener) - protected - Subscribes to node changes\n  Input: \n    node: Node - The node that wants to subscribe\n    listener: NotifyListener - The listener to be notified of changes\n  Output: None\n\nNested Classes:\n- NotifySub extends JedisPubSub - Handles Redis pub/sub messages\n  Methods:\n    onMessage(String key, String msg) - Processes incoming messages\n      Input:\n        key: String - The channel/key of the message\n        msg: String - The message content\n      Output: None\n\n- Notifier extends Thread - Manages subscription thread\n  Methods:\n    run() - Main thread execution for subscription\n      Input: None\n      Output: None\n    shutdown() - Stops the subscription thread\n      Input: None\n      Output: None",
    "Canonical_solution": "import com.github.ltsopensource.core.AppContext;\nimport com.github.ltsopensource.core.cluster.Config;\nimport com.github.ltsopensource.core.cluster.Node;\nimport com.github.ltsopensource.core.cluster.NodeType;\nimport com.github.ltsopensource.core.commons.utils.CollectionUtils;\nimport com.github.ltsopensource.core.constant.Constants;\nimport com.github.ltsopensource.core.exception.NodeRegistryException;\nimport com.github.ltsopensource.core.logger.Logger;\nimport com.github.ltsopensource.core.logger.LoggerFactory;\nimport com.github.ltsopensource.core.registry.NotifyEvent;\nimport com.github.ltsopensource.core.registry.NotifyListener;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPubSub;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class RedisRegistry {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(RedisRegistry.class);\n    private final Map<String, JedisPool> jedisPools = new ConcurrentHashMap<String, JedisPool>();\n    private String clusterName;\n    private boolean replicate;\n    private final ConcurrentMap<String, Notifier> notifiers = new ConcurrentHashMap<String, Notifier>();\n\n    public RedisRegistry(AppContext appContext) {\n        Config config = appContext.getConfig();\n        this.clusterName = config.getClusterName();\n\n        String address = NodeRegistryUtils.getRealRegistryAddress(config.getRegistryAddress());\n        String[] addrs = address.split(\",\");\n        for (String addr : addrs) {\n            int i = addr.indexOf(':');\n            String host = addr.substring(0, i);\n            int port = Integer.parseInt(addr.substring(i + 1));\n            this.jedisPools.put(addr, new JedisPool(new JedisPoolConfig(), host, port, Constants.DEFAULT_TIMEOUT));\n        }\n    }\n\n    protected void doRegister(Node node) {\n        String key = NodeRegistryUtils.getNodeTypePath(clusterName, node.getNodeType());\n        boolean success = false;\n        NodeRegistryException exception = null;\n        for (Map.Entry<String, JedisPool> entry : jedisPools.entrySet()) {\n            JedisPool jedisPool = entry.getValue();\n            try {\n                Jedis jedis = jedisPool.getResource();\n                try {\n                    jedis.hset(key, node.toFullString(), String.valueOf(SystemClock.now() + Constants.DEFAULT_SESSION_TIMEOUT));\n                    jedis.publish(key, Constants.REGISTER);\n                    success = true;\n                    if (!replicate) {\n                        break;\n                    }\n                } finally {\n                    jedis.close();\n                }\n            } catch (Throwable t) {\n                exception = new NodeRegistryException(\"Failed to register node to redis registry. registry: \" + entry.getKey() + \", node: \" + node + \", cause: \" + t.getMessage(), t);\n            }\n        }\n        if (exception != null && !success) {\n            throw exception;\n        }\n    }\n\n    protected void doSubscribe(Node node, NotifyListener listener) {\n        List<NodeType> listenNodeTypes = node.getListenNodeTypes();\n        if (CollectionUtils.isEmpty(listenNodeTypes)) {\n            return;\n        }\n        for (NodeType listenNodeType : listenNodeTypes) {\n            String listenNodePath = NodeRegistryUtils.getNodeTypePath(clusterName, listenNodeType);\n            Notifier notifier = notifiers.get(listenNodePath);\n            if (notifier == null) {\n                Notifier newNotifier = new Notifier(listenNodePath);\n                notifiers.putIfAbsent(listenNodePath, newNotifier);\n                notifier = notifiers.get(listenNodePath);\n                if (notifier == newNotifier) {\n                    notifier.start();\n                }\n            }\n        }\n    }\n\n    private class NotifySub extends JedisPubSub {\n        private final JedisPool jedisPool;\n\n        public NotifySub(JedisPool jedisPool) {\n            this.jedisPool = jedisPool;\n        }\n\n        @Override\n        public void onMessage(String key, String msg) {\n            if (msg.equals(Constants.REGISTER) || msg.equals(Constants.UNREGISTER)) {\n                try {\n                    Jedis jedis = jedisPool.getResource();\n                    try {\n                        doNotify(jedis, key);\n                    } finally {\n                        jedis.close();\n                    }\n                } catch (Throwable t) {\n                    LOGGER.error(t.getMessage(), t);\n                }\n            }\n        }\n    }\n\n    private class Notifier extends Thread {\n        private final String listenNodePath;\n        private volatile Jedis jedis;\n        private volatile boolean running = true;\n\n        public Notifier(String listenNodePath) {\n            super.setDaemon(true);\n            super.setName(\"LTSRedisSubscribe\");\n            this.listenNodePath = listenNodePath;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (running) {\n                    for (Map.Entry<String, JedisPool> entry : jedisPools.entrySet()) {\n                        try {\n                            JedisPool jedisPool = entry.getValue();\n                            jedis = jedisPool.getResource();\n                            try {\n                                jedis.subscribe(new NotifySub(jedisPool), listenNodePath);\n                                break;\n                            } finally {\n                                jedis.close();\n                            }\n                        } catch (Throwable t) {\n                            LOGGER.warn(\"Failed to subscribe node from redis registry. registry: \" + entry.getKey(), t);\n                        }\n                    }\n                }\n            } catch (Throwable t) {\n                LOGGER.error(t.getMessage(), t);\n            }\n        }\n\n        public void shutdown() {\n            try {\n                running = false;\n                jedis.disconnect();\n            } catch (Throwable t) {\n                LOGGER.warn(t.getMessage(), t);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPubSub;\nimport redis.clients.jedis.exceptions.JedisException;\n\npublic class RedisRegistry {\n    private final ConcurrentHashMap<String, JedisPool> jedisPools;\n    private final String clusterName;\n    private final boolean replicate;\n    private final ConcurrentMap<String, Notifier> notifiers;\n\n    public RedisRegistry(AppContext appContext) {\n        this.jedisPools = new ConcurrentHashMap<>();\n        for (String server : appContext.getRedisServers()) {\n            jedisPools.put(server, new JedisPool(server));\n        }\n        this.clusterName = appContext.getClusterName();\n        this.replicate = appContext.isReplicate();\n        this.notifiers = new ConcurrentHashMap<>();\n    }\n\n    protected void doRegister(Node node) throws NodeRegistryException {\n        for (JedisPool pool : jedisPools.values()) {\n            try (Jedis jedis = pool.getResource()) {\n                String nodeKey = \"cluster:\" + clusterName + \":nodes:\" + node.getId();\n                jedis.hset(nodeKey, \"id\", node.getId());\n                jedis.hset(nodeKey, \"address\", node.getAddress());\n            } catch (JedisException e) {\n                throw new NodeRegistryException(\"Failed to register node\", e);\n            }\n        }\n    }\n\n    protected void doSubscribe(Node node, NotifyListener listener) {\n        String nodePath = \"cluster:\" + clusterName + \":node:\" + node.getId();\n        Notifier notifier = new Notifier(nodePath, listener, jedisPools.values().iterator().next());\n        notifiers.put(nodePath, notifier);\n        notifier.start();\n    }\n\n    private static class NotifySub extends JedisPubSub {\n        private final NotifyListener listener;\n\n        public NotifySub(NotifyListener listener) {\n            this.listener = listener;\n        }\n\n        @Override\n        public void onMessage(String channel, String message) {\n            listener.onNotify(channel, message);\n        }\n    }\n\n    private static class Notifier extends Thread {\n        private final String channel;\n        private final NotifyListener listener;\n        private final JedisPool jedisPool;\n        private volatile boolean running = true;\n        private Jedis jedis;\n\n        public Notifier(String channel, NotifyListener listener, JedisPool jedisPool) {\n            this.channel = channel;\n            this.listener = listener;\n            this.jedisPool = jedisPool;\n        }\n\n        @Override\n        public void run() {\n            try {\n                jedis = jedisPool.getResource();\n                NotifySub sub = new NotifySub(listener);\n                jedis.subscribe(sub, channel);\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                if (jedis != null) {\n                    jedis.close();\n                }\n            }\n        }\n\n        public void shutdown() {\n            running = false;\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 317,
    "Instruction": "Task Description: Create a Java class that provides a client interface for interacting with Redis Search functionality, including index creation, document management, search operations, and aggregation.\n\nClass Description: The RedisSearchClient class encapsulates Redis Search operations using the Jedis client library. It manages a connection to Redis and provides methods for creating search indexes, adding JSON documents, performing searches, and running aggregations.\n\nAttributes:\n- jedis: JedisPooled - The pooled Redis client connection used for all operations\n\nMethods:\n- RedisSearchClient(String host, int port) -> void - Constructor that initializes the Redis connection with the specified host and port\n- createIndex(String indexName, String prefix, SchemaField[] schema) -> void - Creates a new search index with the given name, prefix, and schema definition\n- addDocument(String key, Object document) -> void - Adds a JSON document to Redis with the specified key\n- search(String indexName, Query query) -> List<Document> - Performs a search query on the specified index and returns matching documents\n- aggregate(String indexName, AggregationBuilder aggregationBuilder) -> AggregationResult - Executes an aggregation query on the specified index and returns the results\n- close() -> void - Closes the Redis connection and releases resources",
    "Canonical_solution": "import redis.clients.jedis.JedisPooled;\nimport redis.clients.jedis.search.*;\nimport redis.clients.jedis.search.aggr.*;\nimport redis.clients.jedis.search.schemafields.*;\n\npublic class RedisSearchClient {\n\n    private JedisPooled jedis;\n\n    public RedisSearchClient(String host, int port) {\n        this.jedis = new JedisPooled(host, port);\n    }\n\n    public void createIndex(String indexName, String prefix, SchemaField[] schema) {\n        jedis.ftCreate(indexName,\n            FTCreateParams.createParams()\n                .on(IndexDataType.JSON)\n                .addPrefix(prefix),\n            schema\n        );\n    }\n\n    public void addDocument(String key, Object document) {\n        jedis.jsonSetWithEscape(key, document);\n    }\n\n    public List<Document> search(String indexName, Query query) {\n        return jedis.ftSearch(indexName, query).getDocuments();\n    }\n\n    public AggregationResult aggregate(String indexName, AggregationBuilder aggregationBuilder) {\n        return jedis.ftAggregate(indexName, aggregationBuilder);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.JedisPooled;\nimport redis.clients.jedis.commands.RedisSearchCommands;\nimport redis.clients.jedis.params.SearchParams;\nimport redis.clients.jedis.resps.SearchResult;\nimport redis.clients.jedis.resps.AggregationResult;\nimport redis.clients.jedis.resps.Document;\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.stream.Collectors;\n\npublic class RedisSearchClient {\n    private final JedisPooled jedis;\n\n    public RedisSearchClient(String host, int port) {\n        this.jedis = new JedisPooled(host, port);\n    }\n\n    public void createIndex(String indexName, String prefix, SchemaField[] schema) {\n        StringBuilder schemaBuilder = new StringBuilder();\n        for (SchemaField field : schema) {\n            schemaBuilder.append(field.getName()).append(\" \").append(field.getType()).append(\" \");\n        }\n        String schemaStr = schemaBuilder.toString().trim();\n        jedis.sendCommand(\"FT.CREATE\", indexName, \"PREFIX\", prefix, \"SCHEMA\", schemaStr);\n    }\n\n    public void addDocument(String key, Object document) {\n        jedis.set(key, document.toString());\n    }\n\n    public List<Document> search(String indexName, Query query) {\n        List<String> results = jedis.ftSearch(indexName, query.getQueryString());\n        return results.stream().map(Document::new).collect(Collectors.toList());\n    }\n\n    public AggregationResult aggregate(String indexName, AggregationBuilder aggregationBuilder) {\n        String aggregationQuery = aggregationBuilder.build();\n        return jedis.ftAggregate(indexName, aggregationQuery);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```"
  },
  {
    "Task_id": 318,
    "Instruction": "Task Description: Create a Redis connection manager class that handles both standalone and cluster Redis connections with token-based authentication for multiple users.\n\nClass Description: The RedisConnectionManager class provides functionality to establish and manage Redis connections (both standalone and cluster) using token-based authentication. It supports multiple authentication credentials and configures connection options like timeouts and reauthentication behavior.\n\nAttributes:\n- redisClient: RedisClient - The client for standalone Redis connections\n- redisClusterClient: RedisClusterClient - The client for Redis cluster connections\n- credentialsUser1: TokenBasedRedisCredentialsProvider - Authentication credentials provider for user 1\n- credentialsUser2: TokenBasedRedisCredentialsProvider - Authentication credentials provider for user 2\n\nMethods:\n- RedisConnectionManager(String redisUri, String authority, Set<String> scopes, String user1ClientId, String user1Secret, String user2ClientId, String user2Secret) -> void - Constructor that initializes the connection manager with Redis URI, authentication authority, scopes, and credentials for two users\n- createStandaloneConnection() -> StatefulRedisConnection<String, String> - Creates and returns a standalone Redis connection using user1 credentials\n- createStandaloneConnectionWithUser2() -> StatefulRedisConnection<String, String> - Creates and returns a standalone Redis connection using user2 credentials\n- createClusterConnection() -> StatefulRedisClusterConnection<String, String> - Creates and returns a Redis cluster connection\n- close() -> void - Closes all connections and releases resources",
    "Canonical_solution": "import io.lettuce.authx.TokenBasedRedisCredentialsProvider;\nimport io.lettuce.core.ClientOptions;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.SocketOptions;\nimport io.lettuce.core.TimeoutOptions;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.cluster.ClusterClientOptions;\nimport io.lettuce.core.cluster.RedisClusterClient;\nimport io.lettuce.core.cluster.api.StatefulRedisClusterConnection;\nimport io.lettuce.core.cluster.api.sync.NodeSelection;\nimport io.lettuce.core.cluster.api.sync.RedisAdvancedClusterCommands;\nimport io.lettuce.core.codec.StringCodec;\nimport redis.clients.authentication.core.IdentityProviderConfig;\nimport redis.clients.authentication.core.TokenAuthConfig;\nimport redis.clients.authentication.entraid.EntraIDTokenAuthConfigBuilder;\n\nimport java.time.Duration;\nimport java.util.Collections;\nimport java.util.Set;\n\npublic class RedisConnectionManager {\n\n    private RedisClient redisClient;\n    private RedisClusterClient redisClusterClient;\n    private TokenBasedRedisCredentialsProvider credentialsUser1;\n    private TokenBasedRedisCredentialsProvider credentialsUser2;\n\n    public RedisConnectionManager(String redisUri, String authority, Set<String> scopes, \n                                String user1ClientId, String user1Secret, \n                                String user2ClientId, String user2Secret) {\n        IdentityProviderConfig config1;\n        try (EntraIDTokenAuthConfigBuilder builder = EntraIDTokenAuthConfigBuilder.builder()) {\n            config1 = builder.authority(authority).clientId(user1ClientId).secret(user1Secret).scopes(scopes)\n                    .tokenRequestExecTimeoutInMs(10000).build().getIdentityProviderConfig();\n        }\n\n        TokenAuthConfig tokenAuthConfigUser1 = TokenAuthConfig.builder().tokenRequestExecTimeoutInMs(10000)\n                .expirationRefreshRatio(0.1f).identityProviderConfig(config1).build();\n        credentialsUser1 = TokenBasedRedisCredentialsProvider.create(tokenAuthConfigUser1);\n\n        IdentityProviderConfig config2 = EntraIDTokenAuthConfigBuilder.builder().authority(authority).clientId(user2ClientId)\n                .secret(user2Secret).scopes(scopes).tokenRequestExecTimeoutInMs(10000).build().getIdentityProviderConfig();\n        TokenAuthConfig tokenAuthConfigUser2 = TokenAuthConfig.builder().tokenRequestExecTimeoutInMs(10000)\n                .expirationRefreshRatio(0.1f).identityProviderConfig(config2).build();\n        credentialsUser2 = TokenBasedRedisCredentialsProvider.create(tokenAuthConfigUser2);\n\n        RedisURI redisURI1 = RedisURI.create(redisUri);\n        redisURI1.setCredentialsProvider(credentialsUser1);\n\n        RedisURI redisURI2 = RedisURI.create(redisUri);\n        redisURI2.setCredentialsProvider(credentialsUser2);\n\n        ClientOptions clientOptions = ClientOptions.builder()\n                .socketOptions(SocketOptions.builder().connectTimeout(Duration.ofSeconds(5)).build())\n                .disconnectedBehavior(ClientOptions.DisconnectedBehavior.REJECT_COMMANDS)\n                .timeoutOptions(TimeoutOptions.enabled(Duration.ofSeconds(1)))\n                .reauthenticateBehavior(ClientOptions.ReauthenticateBehavior.ON_NEW_CREDENTIALS).build();\n\n        redisClient = RedisClient.create(redisURI1);\n        redisClient.setOptions(clientOptions);\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnection() {\n        return redisClient.connect(StringCodec.UTF8);\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnectionWithUser2() {\n        RedisURI redisURI2 = RedisURI.create(REDIS_URI);\n        redisURI2.setCredentialsProvider(credentialsUser2);\n        return redisClient.connect(StringCodec.UTF8, redisURI2);\n    }\n\n    public StatefulRedisClusterConnection<String, String> createClusterConnection() {\n        ClusterClientOptions clusterClientOptions = ClusterClientOptions.builder()\n                .socketOptions(SocketOptions.builder().connectTimeout(Duration.ofSeconds(5)).build())\n                .disconnectedBehavior(ClientOptions.DisconnectedBehavior.REJECT_COMMANDS)\n                .timeoutOptions(TimeoutOptions.enabled(Duration.ofSeconds(1)))\n                .reauthenticateBehavior(ClientOptions.ReauthenticateBehavior.ON_NEW_CREDENTIALS).build();\n\n        redisClusterClient = RedisClusterClient.create(redisURI1);\n        redisClusterClient.setOptions(clusterClientOptions);\n        return redisClusterClient.connect(StringCodec.UTF8);\n    }\n\n    public void close() {\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n        if (redisClusterClient != null) {\n            redisClusterClient.shutdown();\n        }\n        if (credentialsUser1 != null) {\n            credentialsUser1.close();\n        }\n        if (credentialsUser2 != null) {\n            credentialsUser2.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisClusterClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.StatefulRedisClusterConnection;\n\nimport java.util.Set;\n\npublic class RedisConnectionManager implements AutoCloseable {\n    private final String redisUri;\n    private final RedisClient redisClient;\n    private final RedisClusterClient redisClusterClient;\n    private final TokenBasedRedisCredentialsProvider credentialsUser1;\n    private final TokenBasedRedisCredentialsProvider credentialsUser2;\n\n    public RedisConnectionManager(String redisUri, String authority, Set<String> scopes, String user1ClientId, String user1Secret, String user2ClientId, String user2Secret) {\n        this.redisUri = redisUri;\n        this.credentialsUser1 = new TokenBasedRedisCredentialsProvider(authority, scopes, user1ClientId, user1Secret);\n        this.credentialsUser2 = new TokenBasedRedisCredentialsProvider(authority, scopes, user2ClientId, user2Secret);\n        this.redisClient = RedisClient.create(redisUri);\n        this.redisClusterClient = RedisClusterClient.create(redisUri);\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnection() {\n        String token = credentialsUser1.getAccessToken();\n        RedisURI uri = RedisURI.create(redisUri);\n        uri.setPassword(token);\n        return redisClient.connect(uri);\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnectionWithUser2() {\n        String token = credentialsUser2.getAccessToken();\n        RedisURI uri = RedisURI.create(redisUri);\n        uri.setPassword(token);\n        return redisClient.connect(uri);\n    }\n\n    public StatefulRedisClusterConnection<String, String> createClusterConnection() {\n        String token = credentialsUser1.getAccessToken();\n        RedisURI uri = RedisURI.create(redisUri);\n        uri.setPassword(token);\n        return redisClusterClient.connectCluster(uri);\n    }\n\n    @Override\n    public void close() {\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n        if (redisClusterClient != null) {\n            redisClusterClient.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 320,
    "Instruction": "Task Description: Create a Java class that manages authentication and operations for a Redis cluster using Jedis client library, with support for token-based authentication and connection pooling.\n\nClass Description: RedisClusterAuthManager is a class that handles Redis cluster authentication and operations. It provides methods to execute basic Redis operations and test re-authentication functionality in a multi-threaded environment.\n\nAttributes:\n- idpConfig: [IdentityProviderConfig] - Configuration for the identity provider that generates authentication tokens\n- authXManager: [AuthXManager] - Manager responsible for handling authentication processes\n- config: [JedisClientConfig] - Configuration for the Jedis client\n- poolConfig: [ConnectionPoolConfig] - Configuration for the connection pool\n- hostAndPort: [HostAndPort] - Redis cluster endpoint information\n\nMethods:\n- RedisClusterAuthManager([HostAndPort hostAndPort]) -> [void] - Constructor that initializes the authentication manager with Redis cluster endpoint\n- executeRedisOperations() -> [void] - Executes basic Redis operations (set, get, delete) on the cluster\n- testReAuthentication() -> [void] - Tests re-authentication functionality in a multi-threaded environment, verifying that connections properly re-authenticate",
    "Canonical_solution": "import redis.clients.authentication.core.IdentityProvider;\nimport redis.clients.authentication.core.IdentityProviderConfig;\nimport redis.clients.authentication.core.SimpleToken;\nimport redis.clients.authentication.core.Token;\nimport redis.clients.authentication.entraid.EntraIDTokenAuthConfigBuilder;\nimport redis.clients.jedis.Connection;\nimport redis.clients.jedis.ConnectionPoolConfig;\nimport redis.clients.jedis.DefaultJedisClientConfig;\nimport redis.clients.jedis.EndpointConfig;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.JedisCluster;\n\npublic class RedisClusterAuthManager {\n\n    private final IdentityProviderConfig idpConfig;\n    private final AuthXManager authXManager;\n    private final JedisClientConfig config;\n    private final ConnectionPoolConfig poolConfig;\n    private final HostAndPort hostAndPort;\n\n    public RedisClusterAuthManager(HostAndPort hostAndPort) {\n        this.hostAndPort = hostAndPort;\n        this.idpConfig = new IdentityProviderConfig() {\n            @Override\n            public IdentityProvider getProvider() {\n                return new IdentityProvider() {\n                    @Override\n                    public Token requestToken() {\n                        return new SimpleToken(\"default\", \"cluster\",\n                                System.currentTimeMillis() + 5 * 1000, System.currentTimeMillis(),\n                                null);\n                    }\n                };\n            }\n        };\n        this.authXManager = new AuthXManager(EntraIDTokenAuthConfigBuilder.builder()\n                .lowerRefreshBoundMillis(1000).identityProviderConfig(idpConfig).build());\n        this.config = DefaultJedisClientConfig.builder().authXManager(authXManager).build();\n        this.poolConfig = new ConnectionPoolConfig();\n    }\n\n    public void executeRedisOperations() {\n        try (JedisCluster jc = new JedisCluster(hostAndPort, config, 5, poolConfig)) {\n            jc.set(\"foo\", \"bar\");\n            jc.get(\"foo\");\n            jc.del(\"foo\");\n        }\n    }\n\n    public void testReAuthentication() throws InterruptedException, ExecutionException {\n        AuthXManager spyManager = spy(authXManager);\n        List<Connection> connections = new ArrayList<>();\n        \n        doAnswer(invocation -> {\n            Connection connection = spy((Connection) invocation.getArgument(0));\n            invocation.getArguments()[0] = connection;\n            connections.add(connection);\n            Object result = invocation.callRealMethod();\n            return result;\n        }).when(spyManager).addConnection(any(Connection.class));\n\n        JedisClientConfig spyConfig = DefaultJedisClientConfig.builder().authXManager(spyManager).build();\n        \n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        CountDownLatch latch = new CountDownLatch(1);\n        \n        try (JedisCluster jc = new JedisCluster(Collections.singleton(hostAndPort), spyConfig)) {\n            Runnable task = () -> {\n                while (latch.getCount() > 0) {\n                    jc.set(\"foo\", \"bar\");\n                }\n            };\n            Future task1 = executorService.submit(task);\n            Future task2 = executorService.submit(task);\n\n            await().pollInterval(ONE_HUNDRED_MILLISECONDS).atMost(ONE_SECOND)\n                    .until(connections::size, greaterThanOrEqualTo(2));\n\n            connections.forEach(conn -> {\n                verify(conn, atLeast(2)).reAuthenticate();\n            });\n            \n            latch.countDown();\n            task1.get();\n            task2.get();\n        } finally {\n            latch.countDown();\n            executorService.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.JedisCluster;\nimport redis.clients.jedis.HostAndPort;\nimport java.util.Set;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\npublic class RedisClusterAuthManager {\n    private IdentityProviderConfig idpConfig;\n    private AuthXManager authXManager;\n    private JedisClientConfig config;\n    private ConnectionPoolConfig poolConfig;\n    private HostAndPort hostAndPort;\n\n    public RedisClusterAuthManager(HostAndPort hostAndPort) {\n        this.hostAndPort = hostAndPort;\n    }\n\n    public void executeRedisOperations() {\n        String token = authXManager.getToken();\n        JedisCluster jedisCluster = new JedisCluster(Set.of(hostAndPort), poolConfig.getTimeout(), poolConfig.getSoTimeout(), poolConfig.getMaxRedirections(), token, 0);\n        try {\n            jedisCluster.set(\"key\", \"value\");\n            String value = jedisCluster.get(\"key\");\n            System.out.println(\"Retrieved value: \" + value);\n            jedisCluster.del(\"key\");\n        } finally {\n            jedisCluster.close();\n        }\n    }\n\n    public void testReAuthentication() {\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        for (int i = 0; i < 2; i++) {\n            executor.submit(() -> {\n                try {\n                    String token = authXManager.getToken();\n                    JedisCluster jedisCluster = new JedisCluster(Set.of(hostAndPort), poolConfig.getTimeout(), poolConfig.getSoTimeout(), poolConfig.getMaxRedirections(), token, 0);\n                    try {\n                        jedisCluster.set(\"threadKey\", \"threadValue\");\n                        String value = jedisCluster.get(\"threadKey\");\n                        System.out.println(\"Thread retrieved value: \" + value);\n                        jedisCluster.del(\"threadKey\");\n                    } finally {\n                        jedisCluster.close();\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n\n        try {\n            Thread.sleep(1000);\n            authXManager.refreshToken();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        executor.shutdown();\n        try {\n            executor.awaitTermination(5, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 322,
    "Instruction": "Task Description: Implement a Redis data access object (DAO) class in Java that provides functionality for caching and retrieving Seckill objects using Redis as the storage backend. The class should handle connection management, serialization/deserialization, and implement a cache-aside pattern with distributed locking.\n\nClass Description: RedisDao is a Java class that interacts with Redis to store and retrieve Seckill objects. It uses Jedis as the Redis client, Protostuff for serialization, and implements distributed locking for thread-safe operations.\n\nAttributes:\n- jedisPool: JedisPool - The connection pool for Redis connections\n- schema: RuntimeSchema<Seckill> - The Protostuff schema for Seckill object serialization\n\nMethods:\n- RedisDao(String ip, int port) -> void - Constructor that initializes the JedisPool with given Redis server IP and port\n- getSeckill(long seckillId) -> Seckill - Retrieves a Seckill object from Redis by its ID\n- getSeckill(long seckillId, Jedis jedis) -> Seckill - Retrieves a Seckill object from Redis using an existing Jedis connection\n- getOrPutSeckill(long seckillId, Function<Long, Seckill> getDataFromDb) -> Seckill - Implements cache-aside pattern with distributed locking, fetching from DB if not in cache\n- putSeckill(Seckill seckill) -> String - Stores a Seckill object in Redis with default expiration\n- putSeckill(Seckill seckill, Jedis jedis) -> String - Stores a Seckill object in Redis using an existing Jedis connection\n- getSeckillRedisKey(long seckillId) -> String - Helper method to generate Redis key for a Seckill object",
    "Canonical_solution": "import cn.codingxiaxw.entity.Seckill;\nimport cn.codingxiaxw.utils.JedisUtils;\nimport com.dyuproject.protostuff.LinkedBuffer;\nimport com.dyuproject.protostuff.ProtostuffIOUtil;\nimport com.dyuproject.protostuff.runtime.RuntimeSchema;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\nimport java.util.UUID;\nimport java.util.function.Function;\n\npublic class RedisDao {\n    private final JedisPool jedisPool;\n    private RuntimeSchema<Seckill> schema = RuntimeSchema.createFrom(Seckill.class);\n\n    public RedisDao(String ip, int port) {\n        jedisPool = new JedisPool(ip, port);\n    }\n\n    public Seckill getSeckill(long seckillId) {\n        return getSeckill(seckillId, null);\n    }\n\n    public Seckill getSeckill(long seckillId, Jedis jedis) {\n        boolean hasJedis = jedis != null;\n        try {\n            if (!hasJedis) {\n                jedis = jedisPool.getResource();\n            }\n            try {\n                String key = getSeckillRedisKey(seckillId);\n                byte[] bytes = jedis.get(key.getBytes());\n                if (bytes != null) {\n                    Seckill seckill = schema.newMessage();\n                    ProtostuffIOUtil.mergeFrom(bytes, seckill, schema);\n                    return seckill;\n                }\n            } finally {\n                if (!hasJedis) {\n                    jedis.close();\n                }\n            }\n        } catch (Exception e) {\n        }\n        return null;\n    }\n\n    public Seckill getOrPutSeckill(long seckillId, Function<Long, Seckill> getDataFromDb) {\n        String lockKey = \"seckill:locks:getSeckill:\" + seckillId;\n        String lockRequestId = UUID.randomUUID().toString();\n        Jedis jedis = jedisPool.getResource();\n\n        try {\n            while (true) {\n                Seckill seckill = getSeckill(seckillId, jedis);\n                if (seckill != null) {\n                    return seckill;\n                }\n                boolean getLock = JedisUtils.tryGetDistributedLock(jedis, lockKey, lockRequestId, 1000);\n                if (getLock) {\n                    seckill = getDataFromDb.apply(seckillId);\n                    putSeckill(seckill, jedis);\n                    return seckill;\n                }\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException ignored) {\n                }\n            }\n        } catch (Exception ignored) {\n        } finally {\n            JedisUtils.releaseDistributedLock(jedis, lockKey, lockRequestId);\n            jedis.close();\n        }\n        return null;\n    }\n\n    public String putSeckill(Seckill seckill) {\n        return putSeckill(seckill, null);\n    }\n\n    public String putSeckill(Seckill seckill, Jedis jedis) {\n        boolean hasJedis = jedis != null;\n        try {\n            if (!hasJedis) {\n                jedis = jedisPool.getResource();\n            }\n            try {\n                String key = getSeckillRedisKey(seckill.getSeckillId());\n                byte[] bytes = ProtostuffIOUtil.toByteArray(seckill, schema,\n                        LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));\n                int timeout = 60 * 60;\n                return jedis.setex(key.getBytes(), timeout, bytes);\n            } finally {\n                if (!hasJedis) {\n                    jedis.close();\n                }\n            }\n        } catch (Exception e) {\n        }\n        return null;\n    }\n\n    private String getSeckillRedisKey(long seckillId) {\n        return \"seckill:\" + seckillId;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport com.dyuproject.protostuff.RuntimeSchema;\nimport com.dyuproject.protostuff.Schema;\nimport com.google.common.base.Function;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Collections;\nimport java.util.UUID;\n\npublic class RedisDao {\n    private final JedisPool jedisPool;\n    private final Schema<Seckill> schema;\n\n    public RedisDao(String ip, int port) {\n        this.jedisPool = new JedisPool(ip, port);\n        this.schema = RuntimeSchema.getSchema(Seckill.class);\n    }\n\n    public Seckill getSeckill(long seckillId) {\n        Jedis jedis = null;\n        try {\n            jedis = jedisPool.getResource();\n            byte[] data = jedis.get(getSeckillRedisKey(seckillId).getBytes(StandardCharsets.UTF_8));\n            if (data != null) {\n                Seckill seckill = schema.newMessage();\n                schema.mergeFrom(data, seckill);\n                return seckill;\n            }\n            return null;\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public Seckill getSeckill(long seckillId, Jedis jedis) {\n        byte[] data = jedis.get(getSeckillRedisKey(seckillId).getBytes(StandardCharsets.UTF_8));\n        if (data != null) {\n            Seckill seckill = schema.newMessage();\n            schema.mergeFrom(data, seckill);\n            return seckill;\n        }\n        return null;\n    }\n\n    public Seckill getOrPutSeckill(long seckillId, Function<Long, Seckill> getDataFromDb) {\n        String key = getSeckillRedisKey(seckillId);\n        Jedis jedis = null;\n        try {\n            jedis = jedisPool.getResource();\n            byte[] data = jedis.get(key.getBytes(StandardCharsets.UTF_8));\n            if (data != null) {\n                Seckill seckill = schema.newMessage();\n                schema.mergeFrom(data, seckill);\n                return seckill;\n            }\n\n            String lockKey = \"lock:\" + key;\n            String lockValue = UUID.randomUUID().toString();\n            String result = jedis.set(lockKey, lockValue, \"NX\", \"EX\", 10);\n            if (\"OK\".equals(result)) {\n                data = jedis.get(key.getBytes(StandardCharsets.UTF_8));\n                if (data != null) {\n                    jedis.del(lockKey);\n                    Seckill seckill = schema.newMessage();\n                    schema.mergeFrom(data, seckill);\n                    return seckill;\n                }\n\n                Seckill seckill = getDataFromDb.apply(seckillId);\n                if (seckill != null) {\n                    String putResult = putSeckill(seckill);\n                    String script = \"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end\";\n                    Long delResult = (Long) jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(lockValue));\n                    return seckill;\n                }\n            }\n            return null;\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public String putSeckill(Seckill seckill) {\n        Jedis jedis = null;\n        try {\n            jedis = jedisPool.getResource();\n            byte[] data = schema.toByteArray(seckill);\n            String key = getSeckillRedisKey(seckill.getId());\n            String result = jedis.set(key.getBytes(StandardCharsets.UTF_8), data);\n            jedis.expire(key.getBytes(StandardCharsets.UTF_8), 60);\n            return result;\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public String putSeckill(Seckill seckill, Jedis jedis) {\n        byte[] data = schema.toByteArray(seckill);\n        String key = getSeckillRedisKey(seckill.getId());\n        String result = jedis.set(key.getBytes(StandardCharsets.UTF_8), data);\n        jedis.expire(key.getBytes(StandardCharsets.UTF_8), 60);\n        return result;\n    }\n\n    private String getSeckillRedisKey(long seckillId) {\n        return \"seckill:\" + seckillId;\n    }\n}\n```"
  },
  {
    "Task_id": 324,
    "Instruction": "Task Description: Create a Java class that provides functionality to connect to Redis Sentinel instances and Redis masters via Sentinel, with support for SSL/TLS connections and custom DNS resolution.\n\nClass Description: The RedisSentinelConnector class facilitates connections to Redis Sentinel servers and Redis master instances through Sentinel, with configurable SSL/TLS options and custom DNS resolution capabilities.\n\nAttributes:\n- clientResources: [ClientResources] - The Lettuce client resources configuration including custom DNS resolver and other client settings\n\nMethods:\n- RedisSentinelConnector([ClientResources clientResources]) -> [RedisSentinelConnector] - Constructor that initializes the connector with custom client resources including DNS resolution configuration\n- connectToSentinelDirectly([String host]) -> [StatefulRedisSentinelConnection<String, String>] - Establishes a direct connection to a Redis Sentinel server with SSL/TLS (peer verification disabled)\n- connectToMasterViaSentinel([String host, String masterId, File truststore]) -> [StatefulRedisConnection<String, String>] - Connects to a Redis master via Sentinel with SSL/TLS using the specified truststore for certificate verification\n- closeConnection([AutoCloseable connection, RedisClient client]) -> [void] - Safely closes the given connection and shuts down the associated Redis client",
    "Canonical_solution": "import io.lettuce.core.*;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DnsResolver;\nimport io.lettuce.core.resource.MappingSocketAddressResolver;\nimport io.lettuce.core.sentinel.api.StatefulRedisSentinelConnection;\nimport io.lettuce.test.resource.FastShutdown;\n\npublic class RedisSentinelConnector {\n\n    private final ClientResources clientResources;\n\n    public RedisSentinelConnector(ClientResources clientResources) {\n        this.clientResources = clientResources.mutate()\n                .socketAddressResolver(MappingSocketAddressResolver.create(DnsResolver.jvmDefault(), hostAndPort -> {\n                    return HostAndPort.of(hostAndPort.getHostText(), hostAndPort.getPort() + 443);\n                })).build();\n    }\n\n    public StatefulRedisSentinelConnection<String, String> connectToSentinelDirectly(String host) {\n        RedisURI redisURI = RedisURI.create(\"rediss://\" + host + \":\" + RedisURI.DEFAULT_SENTINEL_PORT);\n        redisURI.setVerifyPeer(false);\n\n        RedisClient client = RedisClient.create(clientResources);\n        StatefulRedisSentinelConnection<String, String> connection = client.connectSentinel(redisURI);\n        return connection;\n    }\n\n    public StatefulRedisConnection<String, String> connectToMasterViaSentinel(String host, String masterId, File truststore) {\n        RedisURI redisURI = RedisURI.create(\"rediss-sentinel://\" + host + \":\" + RedisURI.DEFAULT_SENTINEL_PORT\n                + \"?sentinelMasterId=\" + masterId);\n        SslOptions options = SslOptions.builder().truststore(truststore).build();\n\n        RedisClient client = RedisClient.create(clientResources);\n        client.setOptions(ClientOptions.builder().sslOptions(options).build());\n        StatefulRedisConnection<String, String> connection = client.connect(redisURI);\n        return connection;\n    }\n\n    public void closeConnection(AutoCloseable connection, RedisClient client) {\n        try {\n            if (connection != null) {\n                connection.close();\n            }\n        } finally {\n            if (client != null) {\n                FastShutdown.shutdown(client);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.SslOptions;\nimport io.lettuce.core.StatefulRedisConnection;\nimport io.lettuce.core.StatefulRedisSentinelConnection;\nimport io.lettuce.core.ClientResources;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.security.KeyStore;\n\npublic class RedisSentinelConnector {\n    private final ClientResources clientResources;\n\n    public RedisSentinelConnector(ClientResources clientResources) {\n        this.clientResources = clientResources;\n    }\n\n    public StatefulRedisSentinelConnection<String, String> connectToSentinelDirectly(String host) {\n        RedisURI redisUri = RedisURI.create(host);\n        redisUri.setSsl(true);\n        redisUri.setVerifyPeer(false);\n\n        RedisClient client = RedisClient.create(clientResources, redisUri);\n        return client.connectSentinel();\n    }\n\n    public StatefulRedisConnection<String, String> connectToMasterViaSentinel(String host, String masterId, File truststore) throws Exception {\n        RedisURI sentinelUri = RedisURI.create(host);\n        sentinelUri.setSsl(true);\n        sentinelUri.setVerifyPeer(false);\n\n        RedisClient sentinelClient = RedisClient.create(clientResources, sentinelUri);\n        StatefulRedisSentinelConnection<String, String> sentinelConn = sentinelClient.connectSentinel();\n\n        RedisURI masterUri = sentinelConn.getMaster(masterId).get();\n\n        KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n        keyStore.load(new FileInputStream(truststore), \"password\".toCharArray());\n\n        SslOptions sslOptions = SslOptions.builder()\n                .truststore(keyStore)\n                .build();\n\n        RedisURI masterRedisUri = RedisURI.builder()\n                .withHost(masterUri.getHost())\n                .withPort(masterUri.getPort())\n                .withSsl(true)\n                .build();\n\n        RedisClient masterClient = RedisClient.create(clientResources, masterRedisUri);\n        return masterClient.connect();\n    }\n\n    public void closeConnection(AutoCloseable connection, RedisClient client) {\n        try {\n            if (connection != null) {\n                connection.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (client != null) {\n                client.shutdown();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 325,
    "Instruction": "Task Description: Create a Java class that implements a Redis client using connection pooling to perform high-throughput operations in a multi-threaded environment.\n\nClass Description: The RedisPooledClient class provides a thread-safe interface to interact with Redis using a pooled connection. It supports basic CRUD operations and is designed to handle concurrent requests efficiently.\n\nAttributes:\n- jedisPool: JedisPooled - The pooled Redis connection instance that manages connections to the Redis server\n\nMethods:\n- RedisPooledClient(String host, int port, String password) -> void - Constructor that initializes the Redis connection pool with the specified host, port, and password\n- performOperations(int totalOperations) -> void - Executes a specified number of set/get operations across multiple threads to demonstrate concurrent Redis access\n- close() -> void - Properly closes the Redis connection pool to release resources",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class RedisPooledClient {\n\n    private JedisPooled jedisPool;\n\n    public RedisPooledClient(String host, int port, String password) {\n        this.jedisPool = new JedisPooled(host, port, null, password);\n    }\n\n    public void performOperations(int totalOperations) {\n        List<Thread> threads = new ArrayList<>();\n        AtomicInteger counter = new AtomicInteger();\n\n        for (int i = 0; i < 50; i++) {\n            Thread thread = new Thread(() -> {\n                for (int j = 0; (j = counter.getAndIncrement()) < totalOperations;) {\n                    try {\n                        String key = \"foo\" + j;\n                        jedisPool.set(key, key);\n                        jedisPool.get(key);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            });\n            threads.add(thread);\n            thread.start();\n        }\n\n        for (Thread t : threads) {\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void close() {\n        jedisPool.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class RedisPooledClient {\n    private final JedisPool jedisPool;\n\n    public RedisPooledClient(String host, int port, String password) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port, 2000, password);\n    }\n\n    public void performOperations(int totalOperations) {\n        ExecutorService executor = Executors.newFixedThreadPool(10);\n        CountDownLatch latch = new CountDownLatch(totalOperations);\n        for (int i = 0; i < totalOperations; i++) {\n            executor.submit(() -> {\n                try {\n                    Jedis jedis = jedisPool.getResource();\n                    try {\n                        String key = \"key:\" + System.currentTimeMillis() + \"-\" + Thread.currentThread().getId();\n                        String value = \"value\";\n                        jedis.set(key, value);\n                        String result = jedis.get(key);\n                        if (result == null || !result.equals(value)) {\n                            System.err.println(\"Operation failed\");\n                        }\n                    } finally {\n                        jedis.close();\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                } finally {\n                    latch.countDown();\n                }\n            });\n        }\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        executor.shutdown();\n    }\n\n    public void close() {\n        jedisPool.close();\n    }\n}\n```"
  },
  {
    "Task_id": 326,
    "Instruction": "Task Description: Create a Redis connection manager class in Java that handles connection pooling and basic Redis operations using the Jedis client library.\n\nClass Description: The RedisConnectionManager class provides a convenient way to manage Redis connections using a connection pool and execute common Redis commands. It handles connection lifecycle and resource management.\n\nAttributes:\n- jedisPool: JedisPool - The connection pool instance that manages Redis connections\n\nMethods:\n- RedisConnectionManager(String host, int port, String username, String password) -> void - Constructor that initializes the Redis connection pool with the specified connection parameters\n- executeCommand(RedisCommand command) -> void - Executes the specified Redis command (SET, GET, or INCR) using a connection from the pool and stores the result in the command object for GET operations\n- close() -> void - Closes the connection pool and releases all resources\n- isClosed() -> boolean - Checks if the connection pool is closed",
    "Canonical_solution": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.exceptions.JedisException;\n\npublic class RedisConnectionManager {\n\n    private JedisPool jedisPool;\n\n    public RedisConnectionManager(String host, int port, String username, String password) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port, username, password);\n    }\n\n    public void executeCommand(RedisCommand command) {\n        try (Jedis jedis = jedisPool.getResource()) {\n            switch (command.getOperation()) {\n                case \"SET\":\n                    jedis.set(command.getKey(), command.getValue());\n                    break;\n                case \"GET\":\n                    String result = jedis.get(command.getKey());\n                    command.setResult(result);\n                    break;\n                case \"INCR\":\n                    jedis.incr(command.getKey());\n                    break;\n                default:\n                    throw new JedisException(\"Unsupported operation: \" + command.getOperation());\n            }\n        }\n    }\n\n    public void close() {\n        if (jedisPool != null && !jedisPool.isClosed()) {\n            jedisPool.close();\n        }\n    }\n\n    public boolean isClosed() {\n        return jedisPool == null || jedisPool.isClosed();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\npublic class RedisConnectionManager {\n    private final JedisPool jedisPool;\n\n    public RedisConnectionManager(String host, int port, String username, String password) {\n        this.jedisPool = new JedisPool(host, port, password);\n    }\n\n    public void executeCommand(RedisCommand command) {\n        try (Jedis jedis = jedisPool.getResource()) {\n            if (command.getType() == RedisCommand.Type.SET) {\n                jedis.set(command.getKey(), command.getValue());\n            } else if (command.getType() == RedisCommand.Type.GET) {\n                String result = jedis.get(command.getKey());\n                command.setResult(result);\n            } else if (command.getType() == RedisCommand.Type.INCR) {\n                Long result = jedis.incr(command.getKey());\n                command.setResult(result.toString());\n            }\n        } catch (Exception e) {\n            // Handle exceptions as needed\n        }\n    }\n\n    public void close() {\n        jedisPool.close();\n    }\n\n    public boolean isClosed() {\n        return jedisPool.isClosed();\n    }\n}\n```"
  },
  {
    "Task_id": 327,
    "Instruction": "Task Description: Create a Java class that establishes a secure SSL/TLS connection to a Redis server using Lettuce client library, with support for SNI (Server Name Indication) and custom truststore configuration.\n\nClass Description: The RedisSSLConnection class provides a secure way to connect to a Redis server using SSL/TLS encryption. It handles SSL configuration including truststore setup and SNI support, and manages the Redis client lifecycle.\n\nAttributes:\n- redisClient: RedisClient - The underlying Redis client instance\n- connection: StatefulRedisConnection<String, String> - The active Redis connection\n\nMethods:\n- RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) -> void - Constructor that initializes the Redis client with SSL configuration\n  - redisUri: String - Redis server URI (e.g., \"rediss://host:port\")\n  - hostName: String - The hostname for SNI\n  - truststorePath: String - Path to the truststore file\n  - truststorePassword: String - Password for the truststore\n- getConnection() -> StatefulRedisConnection<String, String> - Returns the established Redis connection\n- close() -> void - Closes the connection and shuts down the Redis client",
    "Canonical_solution": "import io.lettuce.core.ClientOptions;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.SslOptions;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport javax.net.ssl.SNIHostName;\nimport javax.net.ssl.SNIServerName;\nimport javax.net.ssl.SSLParameters;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RedisSSLConnection {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) {\n        this.redisClient = RedisClient.create(redisUri);\n\n        List<SNIServerName> serverNames = new ArrayList<>();\n        serverNames.add(new SNIHostName(hostName));\n        \n        SslOptions sslOptions = SslOptions.builder()\n                .jdkSslProvider()\n                .truststore(new File(truststorePath), truststorePassword)\n                .sslParameters(() -> {\n                    SSLParameters parameters = new SSLParameters();\n                    parameters.setServerNames(serverNames);\n                    return parameters;\n                }).build();\n\n        ClientOptions clientOptions = ClientOptions.builder()\n                .sslOptions(sslOptions)\n                .build();\n        \n        redisClient.setOptions(clientOptions);\n        this.connection = redisClient.connect();\n    }\n\n    public StatefulRedisConnection<String, String> getConnection() {\n        return this.connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.RedisClientOptions;\nimport io.lettuce.core.StatefulRedisConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManagerFactory;\nimport java.io.FileInputStream;\nimport java.security.KeyStore;\n\npublic class RedisSSLConnection {\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) {\n        RedisURI redisUriObj = RedisURI.parse(redisUri);\n        redisUriObj.setHost(hostName);\n        try {\n            KeyStore trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n            try (FileInputStream fis = new FileInputStream(truststorePath)) {\n                trustStore.load(fis, truststorePassword.toCharArray());\n            }\n            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n            tmf.init(trustStore);\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, tmf.getTrustManagers(), null);\n            RedisClientOptions options = RedisClientOptions.builder().sslContext(sslContext).build();\n            redisClient = RedisClient.create(redisUriObj);\n            connection = redisClient.connect(options);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create Redis SSL connection\", e);\n        }\n    }\n\n    public StatefulRedisConnection<String, String> getConnection() {\n        return connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}"
  },
  {
    "Task_id": 328,
    "Instruction": "Task Description: Create a Java class that manages a pool of Redis connections using Jedis, allowing concurrent operations on Redis with connection pooling for efficient resource utilization.\n\nClass Description: RedisConnectionPool is a utility class that manages a pool of Redis connections. It provides thread-safe access to Redis operations and handles connection lifecycle management.\n\nAttributes:\n- pool: JedisPool - The connection pool instance managing Redis connections\n- endpoint: EndpointConfig - Configuration object containing Redis connection details (host, port, password)\n\nMethods:\n- RedisConnectionPool(EndpointConfig endpoint) -> void - Constructor that initializes the Redis connection pool with the given endpoint configuration\n- executeOperations(int totalOperations) -> void - Executes a specified number of Redis SET/GET operations across multiple threads (50 threads by default)\n- close() -> void - Properly shuts down the connection pool and releases all resources",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class RedisConnectionPool {\n\n    private JedisPool pool;\n    private EndpointConfig endpoint;\n\n    public RedisConnectionPool(EndpointConfig endpoint) {\n        this.endpoint = endpoint;\n        this.pool = new JedisPool(new GenericObjectPoolConfig<Jedis>(), \n            endpoint.getHost(), endpoint.getPort(), 2000, endpoint.getPassword());\n    }\n\n    public void executeOperations(int totalOperations) {\n        AtomicInteger ind = new AtomicInteger();\n        for (int i = 0; i < 50; i++) {\n            new Thread(() -> {\n                for (int j = 0; (j = ind.getAndIncrement()) < totalOperations;) {\n                    try (Jedis jedis = pool.getResource()) {\n                        String key = \"foo\" + j;\n                        jedis.set(key, key);\n                        jedis.get(key);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        }\n    }\n\n    public void close() {\n        if (pool != null) {\n            pool.destroy();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class RedisConnectionPool {\n    private final JedisPool pool;\n    private final EndpointConfig endpoint;\n\n    public RedisConnectionPool(EndpointConfig endpoint) {\n        this.endpoint = endpoint;\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.pool = new JedisPool(poolConfig, endpoint.getHost(), endpoint.getPort(), 2000, endpoint.getPassword());\n    }\n\n    public void executeOperations(int totalOperations) {\n        ExecutorService executor = Executors.newFixedThreadPool(50);\n        for (int i = 0; i < totalOperations; i++) {\n            executor.submit(() -> {\n                try (Jedis jedis = pool.getResource()) {\n                    String key = \"key_\" + System.currentTimeMillis() + \"_\" + Thread.currentThread().getId();\n                    String value = \"value_\" + System.currentTimeMillis();\n                    jedis.set(key, value);\n                    String result = jedis.get(key);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n        executor.shutdown();\n        try {\n            executor.awaitTermination(1, java.util.concurrent.TimeUnit.MINUTES);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        if (pool != null) {\n            pool.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 329,
    "Instruction": "Task Description: Create a Java class that provides basic Redis interaction capabilities using the Lettuce client library, including connection management and key-value operations.\n\nClass Description: The RedisInteraction class encapsulates Redis connection and basic operations, providing methods to set/get values and manage the connection lifecycle.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance used to create connections\n- connection: StatefulRedisConnection<String, String> - The active Redis connection\n- syncCommands: RedisCommands<String, String> - Synchronous command interface for Redis operations\n\nMethods:\n- RedisInteraction(String redisUri) -> void - Constructor that initializes the Redis client and establishes a connection using the provided URI\n- setValue(String key, String value) -> void - Stores a key-value pair in Redis\n- getValue(String key) -> String - Retrieves the value associated with the given key from Redis\n- closeConnection() -> void - Properly closes the Redis connection and shuts down the client",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\n\npublic class RedisInteraction {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n    private RedisCommands<String, String> syncCommands;\n\n    public RedisInteraction(String redisUri) {\n        this.redisClient = RedisClient.create(RedisURI.create(redisUri));\n        this.connection = redisClient.connect();\n        this.syncCommands = connection.sync();\n    }\n\n    public void setValue(String key, String value) {\n        syncCommands.set(key, value);\n    }\n\n    public String getValue(String key) {\n        return syncCommands.get(key);\n    }\n\n    public void closeConnection() {\n        connection.close();\n        redisClient.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.StatefulRedisConnection;\nimport io.lettuce.core.RedisCommands;\n\npublic class RedisInteraction {\n    private final RedisClient redisClient;\n    private final StatefulRedisConnection<String, String> connection;\n    private final RedisCommands<String, String> syncCommands;\n\n    public RedisInteraction(String redisUri) {\n        this.redisClient = RedisClient.create(redisUri);\n        this.connection = redisClient.connect();\n        this.syncCommands = connection.sync();\n    }\n\n    public void setValue(String key, String value) {\n        syncCommands.set(key, value);\n    }\n\n    public String getValue(String key) {\n        return syncCommands.get(key);\n    }\n\n    public void closeConnection() {\n        connection.close();\n        redisClient.shutdown();\n    }\n}"
  },
  {
    "Task_id": 333,
    "Instruction": "Task Description: Create a Java class that implements a Redis Sentinel connection pool for managing connections to a Redis master server, with automatic failover handling when the master changes.\n\nClass Description: JedisSentinelPool is a connection pool implementation that maintains connections to a Redis master server discovered through Redis Sentinel. It automatically handles master failover by monitoring Sentinel notifications and reconfiguring the connection pool when the master changes.\n\nAttributes:\n- LOG: Logger - Logger instance for logging events and errors\n- factory: JedisFactory - Factory for creating Jedis instances\n- sentinelClientConfig: JedisClientConfig - Configuration for connecting to Sentinels\n- masterListeners: Collection<MasterListener> - Collection of threads monitoring Sentinel servers\n- currentHostMaster: HostAndPort - Current master server address (volatile)\n- initPoolLock: Lock - Lock for thread-safe pool initialization\n\nMethods:\n- JedisSentinelPool(String, Set<HostAndPort>, JedisFactory, JedisClientConfig) -> void - Constructor that initializes the Sentinel pool with master name, Sentinel addresses, factory, and client config\n- initMaster(HostAndPort) -> void - Initializes or updates the master connection pool\n- initSentinels(Set<HostAndPort>, String) -> HostAndPort - Discovers the current master from Sentinels and starts listeners\n- toHostAndPort(List<String>) -> HostAndPort - Converts Sentinel response to HostAndPort object\n- getResource() -> Jedis - Gets a Jedis resource from the pool (overrides parent method)\n- returnResource(Jedis) -> void - Returns a Jedis resource to the pool (overrides parent method)\n\nNested Class MasterListener:\n- masterName: String - Name of the monitored master\n- host: String - Sentinel host address\n- port: int - Sentinel port number\n- subscribeRetryWaitTimeMillis: long - Retry wait time for subscription\n- j: Jedis - Jedis instance for Sentinel connection\n- running: AtomicBoolean - Flag controlling listener thread\n\nMasterListener Methods:\n- MasterListener(String, String, int) -> void - Constructor for Sentinel listener\n- run() -> void - Main listener thread that monitors Sentinel for master changes\n- shutdown() -> void - Gracefully shuts down the listener thread",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport java.util.stream.Collectors;\n\npublic class JedisSentinelPool extends Pool<Jedis> {\n\n  private static final Logger LOG = LoggerFactory.getLogger(JedisSentinelPool.class);\n  private final JedisFactory factory;\n  private final JedisClientConfig sentinelClientConfig;\n  protected final Collection<MasterListener> masterListeners = new ArrayList<>();\n  private volatile HostAndPort currentHostMaster;\n  private final Lock initPoolLock = new ReentrantLock(true);\n\n  public JedisSentinelPool(String masterName, Set<HostAndPort> sentinels,\n      final JedisFactory factory, final JedisClientConfig sentinelClientConfig) {\n    super(factory);\n    this.factory = factory;\n    this.sentinelClientConfig = sentinelClientConfig;\n    HostAndPort master = initSentinels(sentinels, masterName);\n    initMaster(master);\n  }\n\n  private void initMaster(HostAndPort master) {\n    initPoolLock.lock();\n    try {\n      if (!master.equals(currentHostMaster)) {\n        currentHostMaster = master;\n        factory.setHostAndPort(currentHostMaster);\n        super.clear();\n        LOG.info(\"Created JedisSentinelPool to master at {}\", master);\n      }\n    } finally {\n      initPoolLock.unlock();\n    }\n  }\n\n  private HostAndPort initSentinels(Set<HostAndPort> sentinels, final String masterName) {\n    HostAndPort master = null;\n    boolean sentinelAvailable = false;\n    LOG.info(\"Trying to find master from available Sentinels...\");\n\n    for (HostAndPort sentinel : sentinels) {\n      LOG.debug(\"Connecting to Sentinel {}\", sentinel);\n      try (Jedis jedis = new Jedis(sentinel, sentinelClientConfig)) {\n        List<String> masterAddr = jedis.sentinelGetMasterAddrByName(masterName);\n        sentinelAvailable = true;\n        if (masterAddr == null || masterAddr.size() != 2) {\n          LOG.warn(\"Can not get master addr, master name: {}. Sentinel: {}\", masterName, sentinel);\n          continue;\n        }\n        master = toHostAndPort(masterAddr);\n        LOG.debug(\"Found Redis master at {}\", master);\n        break;\n      } catch (JedisException e) {\n        LOG.warn(\"Cannot get master address from sentinel running @ {}. Reason: {}. Trying next one.\", sentinel, e);\n      }\n    }\n\n    if (master == null) {\n      if (sentinelAvailable) {\n        throw new JedisException(\"Can connect to sentinel, but \" + masterName + \" seems to be not monitored...\");\n      } else {\n        throw new JedisConnectionException(\"All sentinels down, cannot determine where is \" + masterName + \" master is running...\");\n      }\n    }\n\n    LOG.info(\"Redis master running at {}, starting Sentinel listeners...\", master);\n    for (HostAndPort sentinel : sentinels) {\n      MasterListener masterListener = new MasterListener(masterName, sentinel.getHost(), sentinel.getPort());\n      masterListener.setDaemon(true);\n      masterListeners.add(masterListener);\n      masterListener.start();\n    }\n    return master;\n  }\n\n  private HostAndPort toHostAndPort(List<String> getMasterAddrByNameResult) {\n    String host = getMasterAddrByNameResult.get(0);\n    int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n    return new HostAndPort(host, port);\n  }\n\n  @Override\n  public Jedis getResource() {\n    while (true) {\n      Jedis jedis = super.getResource();\n      jedis.setDataSource(this);\n      final HostAndPort master = currentHostMaster;\n      final HostAndPort connection = jedis.getClient().getHostAndPort();\n      if (master.equals(connection)) {\n        return jedis;\n      } else {\n        returnBrokenResource(jedis);\n      }\n    }\n  }\n\n  @Override\n  public void returnResource(final Jedis resource) {\n    if (resource != null) {\n      try {\n        resource.resetState();\n        super.returnResource(resource);\n      } catch (RuntimeException e) {\n        returnBrokenResource(resource);\n        LOG.debug(\"Resource is returned to the pool as broken\", e);\n      }\n    }\n  }\n\n  protected class MasterListener extends Thread {\n    protected String masterName;\n    protected String host;\n    protected int port;\n    protected long subscribeRetryWaitTimeMillis = 5000;\n    protected volatile Jedis j;\n    protected AtomicBoolean running = new AtomicBoolean(false);\n\n    public MasterListener(String masterName, String host, int port) {\n      super(String.format(\"MasterListener-%s-[%s:%d]\", masterName, host, port));\n      this.masterName = masterName;\n      this.host = host;\n      this.port = port;\n    }\n\n    @Override\n    public void run() {\n      running.set(true);\n      while (running.get()) {\n        try {\n          if (!running.get()) break;\n          final HostAndPort hostPort = new HostAndPort(host, port);\n          j = new Jedis(hostPort, sentinelClientConfig);\n          List<String> masterAddr = j.sentinelGetMasterAddrByName(masterName);\n          if (masterAddr == null || masterAddr.size() != 2) {\n            LOG.warn(\"Can not get master addr, master name: {}. Sentinel: {}.\", masterName, hostPort);\n          } else {\n            initMaster(toHostAndPort(masterAddr));\n          }\n          j.subscribe(new JedisPubSub() {\n            @Override\n            public void onMessage(String channel, String message) {\n              LOG.debug(\"Sentinel {} published: {}.\", hostPort, message);\n              String[] switchMasterMsg = message.split(\" \");\n              if (switchMasterMsg.length > 3) {\n                if (masterName.equals(switchMasterMsg[0])) {\n                  initMaster(toHostAndPort(Arrays.asList(switchMasterMsg[3], switchMasterMsg[4])));\n                } else {\n                  LOG.debug(\"Ignoring message on +switch-master for master name {}, our master name is {}\",\n                      switchMasterMsg[0], masterName);\n                }\n              } else {\n                LOG.error(\"Invalid message received on Sentinel {} on channel +switch-master: {}\",\n                    hostPort, message);\n              }\n            }\n          }, \"+switch-master\");\n        } catch (JedisException e) {\n          if (running.get()) {\n            LOG.error(\"Lost connection to Sentinel at {}:{}. Sleeping 5000ms and retrying.\", host, port, e);\n            try {\n              Thread.sleep(subscribeRetryWaitTimeMillis);\n            } catch (InterruptedException e1) {\n              LOG.error(\"Sleep interrupted: \", e1);\n            }\n          } else {\n            LOG.debug(\"Unsubscribing from Sentinel at {}:{}\", host, port);\n          }\n        } finally {\n          if (j != null) {\n            j.close();\n          }\n        }\n      }\n    }\n\n    public void shutdown() {\n      try {\n        LOG.debug(\"Shutting down listener on {}:{}\", host, port);\n        running.set(false);\n        if (j != null) {\n          j.close();\n        }\n      } catch (RuntimeException e) {\n        LOG.error(\"Caught exception while shutting down: \", e);\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class JedisSentinelPool {\n    private static final Logger LOG = LoggerFactory.getLogger(JedisSentinelPool.class);\n    private final JedisFactory factory;\n    private final JedisClientConfig sentinelClientConfig;\n    private final Set<MasterListener> masterListeners = new HashSet<>();\n    private volatile HostAndPort currentHostMaster;\n    private final Lock initPoolLock = new ReentrantLock();\n    private JedisPool jedisPool;\n\n    public JedisSentinelPool(String masterName, Set<HostAndPort> sentinels, JedisFactory factory, JedisClientConfig config) {\n        this.factory = factory;\n        this.sentinelClientConfig = config;\n        initSentinels(sentinels, masterName);\n    }\n\n    private HostAndPort initSentinels(Set<HostAndPort> sentinels, String masterName) {\n        for (HostAndPort sentinel : sentinels) {\n            try (Jedis jedis = new Jedis(sentinel.getHost(), sentinel.getPort(), sentinelClientConfig)) {\n                List<String> response = jedis.sentinelGetMasterAddrByName(masterName);\n                if (response != null && response.size() >= 2) {\n                    HostAndPort master = toHostAndPort(response);\n                    currentHostMaster = master;\n                    for (HostAndPort s : sentinels) {\n                        MasterListener listener = new MasterListener(masterName, s.getHost(), s.getPort());\n                        masterListeners.add(listener);\n                        new Thread(listener).start();\n                    }\n                    return master;\n                }\n            } catch (Exception e) {\n                LOG.warn(\"Failed to connect to sentinel {}\", sentinel, e);\n            }\n        }\n        throw new RuntimeException(\"Could not find master\");\n    }\n\n    private HostAndPort toHostAndPort(List<String> response) {\n        String host = response.get(0);\n        int port = Integer.parseInt(response.get(1));\n        return new HostAndPort(host, port);\n    }\n\n    public Jedis getResource() {\n        if (jedisPool == null) {\n            initPoolLock.lock();\n            try {\n                if (jedisPool == null) {\n                    initMaster(currentHostMaster);\n                }\n            } finally {\n                initPoolLock.unlock();\n            }\n        }\n        return jedisPool.getResource();\n    }\n\n    public void returnResource(Jedis jedis) {\n        if (jedis != null) {\n            jedisPool.returnResource(jedis);\n        }\n    }\n\n    private void initMaster(HostAndPort host) {\n        if (jedisPool != null) {\n            jedisPool.close();\n        }\n        jedisPool = new JedisPool(factory, host.getHost(), host.getPort(), sentinelClientConfig);\n    }\n\n    private class MasterListener {\n        private final String masterName;\n        private final String host;\n        private final int port;\n        private final long subscribeRetryWaitTimeMillis = 1000;\n        private Jedis j;\n        private final AtomicBoolean running = new AtomicBoolean(true);\n\n        public MasterListener(String masterName, String host, int port) {\n            this.masterName = masterName;\n            this.host = host;\n            this.port = port;\n        }\n\n        public void run() {\n            while (running.get()) {\n                try {\n                    j = new Jedis(host, port, sentinelClientConfig);\n                    j.subscribe(new JedisPubSub() {\n                        @Override\n                        public void onMessage(String channel, String message) {\n                            String[] parts = message.split(\" \");\n                            if (parts.length >= 3 && parts[1].equals(masterName)) {\n                                String newHost = parts[2];\n                                int newPort = Integer.parseInt(parts[3]);\n                                HostAndPort newMaster = new HostAndPort(newHost, newPort);\n                                if (!newMaster.equals(currentHostMaster)) {\n                                    currentHostMaster = newMaster;\n                                    initMaster(newMaster);\n                                }\n                            }\n                        }\n                    }, \"__sentinel__events\");\n                } catch (Exception e) {\n                    LOG.warn(\"Error in Sentinel listener, retrying...\", e);\n                    try {\n                        Thread.sleep(subscribeRetryWaitTimeMillis);\n                    } catch (InterruptedException ie) {\n                        Thread.currentThread().interrupt();\n                        break;\n                    }\n                } finally {\n                    if (j != null) {\n                        j.close();\n                    }\n                }\n            }\n        }\n\n        public void shutdown() {\n            running.set(false);\n            if (j != null) {\n                j.close();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 334,
    "Instruction": "Task Description: Implement a Redis Pub/Sub manager class in Java that handles publishing and subscribing to Redis channels, including connection management and resource cleanup.\n\nClass Description: RedisPubSubManager is a class that manages Redis publish/subscribe operations using a connection pool. It provides methods to start subscribers and publishers on a specified channel, and handles connection lifecycle management.\n\nAttributes:\n- jedisPool: JedisPool - The connection pool for Redis connections\n- channelName: String - The name of the channel to publish/subscribe to\n- logger: Logger - Logger instance for logging operations and errors\n\nMethods:\n- RedisPubSubManager(String host, int port, String channelName) -> void - Constructor that initializes the Redis connection pool with the specified host, port, and channel name\n- startSubscriber(Subscriber subscriber) -> void - Starts a subscriber thread that listens to messages on the configured channel using the provided subscriber implementation\n- startPublisher() -> void - Starts a publisher that can send messages to the configured channel\n- shutdown() -> void - Closes the connection pool and releases all resources",
    "Canonical_solution": "import com.github.ltsopensource.core.logger.Logger;\nimport com.github.ltsopensource.core.logger.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisPubSubManager {\n\n    private static final Logger logger = LoggerFactory.getLogger(RedisPubSubManager.class);\n    private final JedisPool jedisPool;\n    private final String channelName;\n\n    public RedisPubSubManager(String host, int port, String channelName) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port, 0);\n        this.channelName = channelName;\n    }\n\n    public void startSubscriber(Subscriber subscriber) {\n        Jedis subscriberJedis = jedisPool.getResource();\n        new Thread(() -> {\n            try {\n                logger.info(\"Subscribing to \\\"\" + channelName + \"\\\". This thread will be blocked.\");\n                subscriberJedis.subscribe(subscriber, channelName);\n                logger.info(\"Subscription ended.\");\n            } catch (Exception e) {\n                logger.error(\"Subscribing failed.\", e);\n            } finally {\n                subscriberJedis.close();\n            }\n        }).start();\n    }\n\n    public void startPublisher() {\n        Jedis publisherJedis = jedisPool.getResource();\n        new Publisher(publisherJedis, channelName).start();\n        publisherJedis.close();\n    }\n\n    public void shutdown() {\n        jedisPool.destroy();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.PubSub;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class RedisPubSubManager {\n    private JedisPool jedisPool;\n    private String channelName;\n    private Logger logger;\n\n    public RedisPubSubManager(String host, int port, String channelName) {\n        this.channelName = channelName;\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port);\n        this.logger = LoggerFactory.getLogger(RedisPubSubManager.class);\n    }\n\n    public void startSubscriber(Subscriber subscriber) {\n        new Thread(() -> {\n            try (Jedis jedis = jedisPool.getResource()) {\n                jedis.subscribe(new PubSub() {\n                    @Override\n                    public void onMessage(String channel, String message) {\n                        subscriber.onMessage(message);\n                    }\n                }, channelName);\n            } catch (Exception e) {\n                logger.error(\"Error starting subscriber\", e);\n            }\n        }).start();\n    }\n\n    public void startPublisher() {\n        // Placeholder for publisher initialization\n    }\n\n    public void shutdown() {\n        if (jedisPool != null) {\n            jedisPool.close();\n        }\n    }\n\n    public interface Subscriber {\n        void onMessage(String message);\n    }\n}\n```"
  },
  {
    "Task_id": 336,
    "Instruction": "Task Description: Create a Java utility class for interacting with Redis using sharded connections, providing thread-safe initialization, connection pooling, and basic CRUD operations for both string and object values.\n\nClass Description: JedisUtil is a utility class that manages Redis connections using Jedis sharding with connection pooling. It provides methods for storing and retrieving both string and serialized object values with expiration support.\n\nAttributes:\n- logger: Logger - SLF4J logger for logging messages\n- address: String - Comma-separated Redis server addresses\n- shardedJedisPool: ShardedJedisPool - Pool of sharded Redis connections\n- INSTANCE_INIT_LOCL: ReentrantLock - Lock for thread-safe initialization\n\nMethods:\n- init(String address) -> void - Initializes the Redis connection pool with the given addresses\n- getInstance() -> ShardedJedis - Returns a sharded Redis connection instance (thread-safe initialization)\n- close() -> void - Closes the Redis connection pool and releases resources\n- serialize(Object object) -> byte[] - Serializes a Java object to byte array\n- unserialize(byte[] bytes) -> Object - Deserializes a byte array back to a Java object\n- setStringValue(String key, String value, int seconds) -> String - Stores a string value in Redis with expiration time\n- setObjectValue(String key, Object obj, int seconds) -> String - Stores a serialized object in Redis with expiration time\n- getStringValue(String key) -> String - Retrieves a string value from Redis\n- getObjectValue(String key) -> Object - Retrieves and deserializes an object from Redis",
    "Canonical_solution": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.JedisShardInfo;\nimport redis.clients.jedis.ShardedJedis;\nimport redis.clients.jedis.ShardedJedisPool;\n\nimport java.io.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class JedisUtil {\n    private static Logger logger = LoggerFactory.getLogger(JedisUtil.class);\n    private static String address;\n    private static ShardedJedisPool shardedJedisPool;\n    private static ReentrantLock INSTANCE_INIT_LOCL = new ReentrantLock(false);\n\n    public static void init(String address) {\n        JedisUtil.address = address;\n        getInstance();\n    }\n\n    private static ShardedJedis getInstance() {\n        if (shardedJedisPool == null) {\n            try {\n                if (INSTANCE_INIT_LOCL.tryLock(2, TimeUnit.SECONDS)) {\n                    try {\n                        if (shardedJedisPool == null) {\n                            JedisPoolConfig config = new JedisPoolConfig();\n                            config.setMaxTotal(200);\n                            config.setMaxIdle(50);\n                            config.setMinIdle(8);\n                            config.setMaxWaitMillis(10000);\n                            config.setTestOnBorrow(true);\n                            config.setTestOnReturn(false);\n                            config.setTestWhileIdle(true);\n                            config.setTimeBetweenEvictionRunsMillis(30000);\n                            config.setNumTestsPerEvictionRun(10);\n                            config.setMinEvictableIdleTimeMillis(60000);\n\n                            List<JedisShardInfo> jedisShardInfos = new LinkedList<JedisShardInfo>();\n                            String[] addressArr = address.split(\",\");\n                            for (int i = 0; i < addressArr.length; i++) {\n                                JedisShardInfo jedisShardInfo = new JedisShardInfo(addressArr[i]);\n                                jedisShardInfos.add(jedisShardInfo);\n                            }\n                            shardedJedisPool = new ShardedJedisPool(config, jedisShardInfos);\n                            logger.info(\">>>>>>>>>>> xxl-sso, JedisUtil.ShardedJedisPool init success.\");\n                        }\n                    } finally {\n                        INSTANCE_INIT_LOCL.unlock();\n                    }\n                }\n            } catch (InterruptedException e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        if (shardedJedisPool == null) {\n            throw new NullPointerException(\">>>>>>>>>>> xxl-sso, JedisUtil.ShardedJedisPool is null.\");\n        }\n\n        return shardedJedisPool.getResource();\n    }\n\n    public static void close() throws IOException {\n        if(shardedJedisPool != null) {\n            shardedJedisPool.close();\n        }\n    }\n\n    private static byte[] serialize(Object object) {\n        ObjectOutputStream oos = null;\n        ByteArrayOutputStream baos = null;\n        try {\n            baos = new ByteArrayOutputStream();\n            oos = new ObjectOutputStream(baos);\n            oos.writeObject(object);\n            return baos.toByteArray();\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            try {\n                if (oos != null) oos.close();\n                if (baos != null) baos.close();\n            } catch (IOException e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n        return null;\n    }\n\n    private static Object unserialize(byte[] bytes) {\n        ByteArrayInputStream bais = null;\n        try {\n            bais = new ByteArrayInputStream(bytes);\n            ObjectInputStream ois = new ObjectInputStream(bais);\n            return ois.readObject();\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            try {\n                if (bais != null) bais.close();\n            } catch (IOException e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n        return null;\n    }\n\n    public static String setStringValue(String key, String value, int seconds) {\n        String result = null;\n        ShardedJedis client = getInstance();\n        try {\n            result = client.setex(key, seconds, value);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            if (client != null) {\n                client.close();\n            }\n        }\n        return result;\n    }\n\n    public static String setObjectValue(String key, Object obj, int seconds) {\n        String result = null;\n        ShardedJedis client = getInstance();\n        try {\n            result = client.setex(key.getBytes(), seconds, serialize(obj));\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            if (client != null) {\n                client.close();\n            }\n        }\n        return result;\n    }\n\n    public static String getStringValue(String key) {\n        String value = null;\n        ShardedJedis client = getInstance();\n        try {\n            value = client.get(key);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            if (client != null) {\n                client.close();\n            }\n        }\n        return value;\n    }\n\n    public static Object getObjectValue(String key) {\n        Object obj = null;\n        ShardedJedis client = getInstance();\n        try {\n            byte[] bytes = client.get(key.getBytes());\n            if (bytes != null && bytes.length > 0) {\n                obj = unserialize(bytes);\n            }\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            if (client != null) {\n                client.close();\n            }\n        }\n        return obj;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.JedisShardInfo;\nimport redis.clients.jedis.ShardedJedis;\nimport redis.clients.jedis.ShardedJedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class JedisUtil {\n    private static final Logger logger = LoggerFactory.getLogger(JedisUtil.class);\n    private String address;\n    private ShardedJedisPool shardedJedisPool;\n    private final ReentrantLock INSTANCE_INIT_LOCL = new ReentrantLock();\n\n    public void init(String address) {\n        if (shardedJedisPool == null) {\n            INSTANCE_INIT_LOCL.lock();\n            try {\n                if (shardedJedisPool == null) {\n                    this.address = address;\n                    JedisPoolConfig poolConfig = new JedisPoolConfig();\n                    List<JedisShardInfo> shards = new ArrayList<>();\n                    for (String addr : address.split(\",\")) {\n                        String[] parts = addr.trim().split(\":\");\n                        String host = parts[0];\n                        int port = parts.length > 1 ? Integer.parseInt(parts[1]) : 6379;\n                        shards.add(new JedisShardInfo(host, port));\n                    }\n                    shardedJedisPool = new ShardedJedisPool(poolConfig, shards);\n                }\n            } finally {\n                INSTANCE_INIT_LOCL.unlock();\n            }\n        }\n    }\n\n    public ShardedJedis getInstance() {\n        if (shardedJedisPool == null) {\n            throw new IllegalStateException(\"Redis pool not initialized\");\n        }\n        return shardedJedisPool.getResource();\n    }\n\n    public void close() {\n        if (shardedJedisPool != null) {\n            shardedJedisPool.close();\n        }\n    }\n\n    private byte[] serialize(Object object) throws IOException {\n        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();\n             ObjectOutputStream oos = new ObjectOutputStream(bos)) {\n            oos.writeObject(object);\n            return bos.toByteArray();\n        }\n    }\n\n    private Object unserialize(byte[] bytes) throws IOException, ClassNotFoundException {\n        try (ByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n             ObjectInputStream ois = new ObjectInputStream(bis)) {\n            return ois.readObject();\n        }\n    }\n\n    public String setStringValue(String key, String value, int seconds) {\n        ShardedJedis jedis = null;\n        try {\n            jedis = shardedJedisPool.getResource();\n            return jedis.setex(key, seconds, value);\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public String setObjectValue(String key, Object obj, int seconds) {\n        ShardedJedis jedis = null;\n        try {\n            jedis = shardedJedisPool.getResource();\n            byte[] bytes = serialize(obj);\n            return jedis.setex(key, seconds, bytes);\n        } catch (IOException e) {\n            logger.error(\"Serialization error\", e);\n            return null;\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public String getStringValue(String key) {\n        ShardedJedis jedis = null;\n        try {\n            jedis = shardedJedisPool.getResource();\n            return jedis.get(key);\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public Object getObjectValue(String key) {\n        ShardedJedis jedis = null;\n        try {\n            jedis = shardedJedisPool.getResource();\n            byte[] bytes = jedis.getBinary(key);\n            if (bytes == null) {\n                return null;\n            }\n            return unserialize(bytes);\n        } catch (IOException | ClassNotFoundException e) {\n            logger.error(\"Deserialization error\", e);\n            return null;\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 337,
    "Instruction": "Task Description: Create a Java class that provides geospatial operations using Redis, including adding locations, querying locations within a radius, calculating distances between locations, and retrieving position coordinates.\n\nClass Description: The RedisGeoOperations class encapsulates Redis geospatial commands using the Lettuce client. It manages Redis connections and provides methods for common geospatial operations.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance for connection management\n- redisCommands: RedisCommands<String, String> - Synchronous Redis command interface for executing operations\n\nMethods:\n- RedisGeoOperations(String host, int port) -> void - Constructor that initializes the Redis client with specified host and port\n- addGeoLocation(String key, double longitude, double latitude, String member) -> void - Adds a geospatial member with coordinates to the specified key\n- getGeoRadius(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit) -> Set<String> - Returns members within given radius of a point\n- getGeoDistance(String key, String member1, String member2, GeoArgs.Unit unit) -> Double - Calculates distance between two members in specified units\n- getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit, GeoArgs geoArgs) -> List<GeoWithin<String>> - Returns members within radius with additional options (like distance or coordinates)\n- getGeoPositions(String key, String... members) -> List<GeoCoordinates> - Returns coordinates for specified members\n- closeConnection() -> void - Properly closes Redis connection and shuts down client",
    "Canonical_solution": "import io.lettuce.core.*;\nimport io.lettuce.core.api.sync.RedisCommands;\n\npublic class RedisGeoOperations {\n\n    private RedisClient redisClient;\n    private RedisCommands<String, String> redisCommands;\n\n    public RedisGeoOperations(String host, int port) {\n        this.redisClient = RedisClient.create(RedisURI.Builder.redis(host, port).build());\n        this.redisCommands = redisClient.connect().sync();\n    }\n\n    public void addGeoLocation(String key, double longitude, double latitude, String member) {\n        redisCommands.geoadd(key, longitude, latitude, member);\n    }\n\n    public Set<String> getGeoRadius(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit);\n    }\n\n    public Double getGeoDistance(String key, String member1, String member2, GeoArgs.Unit unit) {\n        return redisCommands.geodist(key, member1, member2, unit);\n    }\n\n    public List<GeoWithin<String>> getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, \n                                                      GeoArgs.Unit unit, GeoArgs geoArgs) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit, geoArgs);\n    }\n\n    public List<GeoCoordinates> getGeoPositions(String key, String... members) {\n        return redisCommands.geopos(key, members);\n    }\n\n    public void closeConnection() {\n        redisCommands.getStatefulConnection().close();\n        redisClient.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisCommands;\nimport io.lettuce.core.GeoArgs;\nimport io.lettuce.core.GeoCoordinates;\nimport io.lettuce.core.GeoWithin;\nimport java.util.Set;\nimport java.util.List;\n\npublic class RedisGeoOperations {\n    private final RedisClient redisClient;\n    private final RedisCommands<String, String> redisCommands;\n\n    public RedisGeoOperations(String host, int port) {\n        this.redisClient = RedisClient.create(\"redis://\" + host + \":\" + port);\n        this.redisCommands = redisClient.connect().sync();\n    }\n\n    public void addGeoLocation(String key, double longitude, double latitude, String member) {\n        redisCommands.geoAdd(key, longitude, latitude, member);\n    }\n\n    public Set<String> getGeoRadius(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit) {\n        return redisCommands.geoRadius(key, longitude, latitude, radius, unit);\n    }\n\n    public Double getGeoDistance(String key, String member1, String member2, GeoArgs.Unit unit) {\n        return redisCommands.geoDist(key, member1, member2, unit);\n    }\n\n    public List<GeoWithin<String>> getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit, GeoArgs geoArgs) {\n        return redisCommands.geoRadius(key, longitude, latitude, radius, unit, geoArgs);\n    }\n\n    public List<GeoCoordinates> getGeoPositions(String key, String... members) {\n        return redisCommands.geoPos(key, members);\n    }\n\n    public void closeConnection() {\n        redisCommands.close();\n        redisClient.shutdown();\n    }\n}"
  },
  {
    "Task_id": 338,
    "Instruction": "Task Description: Create a Java class that establishes and manages connections to a Redis master-replica setup using Lettuce client, with support for read operations from replicas and secure connection handling.\n\nClass Description: RedisMasterReplicaConnector is a utility class that provides methods to create, manage, and close connections to a Redis master-replica cluster. It supports read scaling by allowing read operations from replicas and includes secure connection handling with custom DNS resolution.\n\nAttributes:\n- clientResources: ClientResources - The Lettuce client resources configuration including custom socket address resolver\n\nMethods:\n- RedisMasterReplicaConnector(ClientResources) -> void - Constructor that initializes client resources with custom DNS resolution\n- createConnection(String host, String masterId) -> StatefulRedisMasterReplicaConnection<String, String> - Creates a connection to Redis master-replica setup with specified host and master ID\n- closeConnection(StatefulRedisMasterReplicaConnection<String, String> connection) -> void - Properly closes the Redis connection and shuts down the client\n- performOperations(StatefulRedisMasterReplicaConnection<String, String> connection, String key, String value) -> void - Demonstrates basic Redis operations (set and get) using the established connection",
    "Canonical_solution": "import io.lettuce.core.ReadFrom;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DnsResolver;\nimport io.lettuce.core.resource.MappingSocketAddressResolver;\nimport io.lettuce.test.resource.FastShutdown;\n\npublic class RedisMasterReplicaConnector {\n\n    private final ClientResources clientResources;\n\n    public RedisMasterReplicaConnector(ClientResources clientResources) {\n        this.clientResources = clientResources.mutate()\n                .socketAddressResolver(MappingSocketAddressResolver.create(DnsResolver.jvmDefault(), hostAndPort -> {\n                    return HostAndPort.of(hostAndPort.getHostText(), hostAndPort.getPort() + 443);\n                })).build();\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> createConnection(String host, String masterId) {\n        RedisClient client = RedisClient.create(clientResources);\n        RedisURI redisURI = RedisURI.create(\"rediss-sentinel://\" + host + \":26379?sentinelMasterId=\" + masterId);\n        redisURI.setVerifyPeer(false);\n        \n        StatefulRedisMasterReplicaConnection<String, String> connection = \n            MasterReplica.connect(client, StringCodec.UTF8, redisURI);\n        connection.setReadFrom(ReadFrom.REPLICA);\n        \n        return connection;\n    }\n\n    public void closeConnection(StatefulRedisMasterReplicaConnection<String, String> connection) {\n        if (connection != null) {\n            connection.close();\n            FastShutdown.shutdown(connection.getRedisClient());\n        }\n    }\n\n    public void performOperations(StatefulRedisMasterReplicaConnection<String, String> connection, String key, String value) {\n        connection.sync().set(key, value);\n        connection.sync().get(key);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.StatefulRedisMasterReplicaConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.ClientResources;\n\npublic class RedisMasterReplicaConnector {\n    private final ClientResources clientResources;\n\n    public RedisMasterReplicaConnector(ClientResources clientResources) {\n        this.clientResources = clientResources;\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> createConnection(String host, String masterId) {\n        RedisURI redisUri = RedisURI.create(host);\n        RedisClient client = RedisClient.create(clientResources, redisUri);\n        return client.connect(RedisURI.create(host), StatefulRedisMasterReplicaConnection.class);\n    }\n\n    public void closeConnection(StatefulRedisMasterReplicaConnection<String, String> connection) {\n        connection.close();\n        connection.getClient().shutdown();\n    }\n\n    public void performOperations(StatefulRedisMasterReplicaConnection<String, String> connection, String key, String value) {\n        RedisCommands<String, String> commands = connection.sync();\n        commands.set(key, value);\n        commands.get(key);\n    }\n}\n```"
  },
  {
    "Task_id": 339,
    "Instruction": "Task Description: Implement a Redis client class in Java that supports read-write operations with master-slave architecture, connection pooling, and proper resource management.\n\nClass Description: ReadWriteRedisClient is a Java class that provides a Redis client implementation with support for master-slave architecture. It uses connection pooling (via JedisPool) for efficient resource management and implements basic CRUD operations with automatic routing of read operations to slaves and write operations to the master.\n\nAttributes:\n- master: JedisPool - Connection pool for the master Redis instance\n- slaves: List<JedisPool> - List of connection pools for slave Redis instances\n- jedisPoolConfig: JedisPoolConfig - Configuration for the connection pools\n- address: String - Comma-separated list of Redis server addresses (master first)\n- timeout: int - Connection timeout in milliseconds\n- random: Random - Random number generator for slave selection\n\nMethods:\n- initialize() -> void - Initializes the Redis connection pools based on the configured addresses\n- destroy() -> void - Closes all connection pools and releases resources\n- get(String key) -> String - Retrieves a value from Redis (reads from a random slave)\n- set(String key, String value) -> String - Stores a value in Redis (writes to master)\n- fetchResource(boolean read) -> Jedis - Internal method to get a Redis connection (selects master or random slave)\n- setJedisPoolConfig(JedisPoolConfig jedisPoolConfig) -> void - Sets the connection pool configuration\n- setTimeout(int timeout) -> void - Sets the connection timeout\n- setAddress(String address) -> void - Sets the Redis server addresses",
    "Canonical_solution": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class ReadWriteRedisClient {\n\n    private JedisPool master;\n    private List<JedisPool> slaves = new ArrayList<JedisPool>();\n    private JedisPoolConfig jedisPoolConfig;\n    private String address;\n    private int timeout = 3000;\n    private Random random = new Random();\n\n    public void initialize() throws Exception {\n        String[] hostAndPorts = address.split(\",\");\n        String masterHP = hostAndPorts[0];\n        String[] ms = masterHP.split(\":\");\n        master = new JedisPool(jedisPoolConfig, ms[0], Integer.valueOf(ms[1]), timeout);\n        if (hostAndPorts.length > 1) {\n            for (int i = 1; i < hostAndPorts.length; i++) {\n                String[] ss = hostAndPorts[i].split(\":\");\n                JedisPool slave = new JedisPool(jedisPoolConfig, ss[0], Integer.valueOf(ss[1]), timeout);\n                slaves.add(slave);\n            }\n        }\n        slaves.add(master);\n    }\n\n    public void destroy() throws Exception {\n        if (master != null) {\n            master.close();\n        }\n        for (JedisPool slave : slaves) {\n            if (slave != null) {\n                slave.close();\n            }\n        }\n    }\n\n    public String get(String key) {\n        Jedis jedis = fetchResource(true);\n        try {\n            return jedis.get(key);\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public String set(String key, String value) {\n        Jedis jedis = fetchResource(false);\n        try {\n            return jedis.set(key, value);\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    private Jedis fetchResource(boolean read) {\n        if(slaves.isEmpty() || !read) {\n            return master.getResource();\n        }\n        int size = slaves.size();\n        int i = random.nextInt(size);\n        return slaves.get(i).getResource();\n    }\n\n    public void setJedisPoolConfig(JedisPoolConfig jedisPoolConfig) {\n        this.jedisPoolConfig = jedisPoolConfig;\n    }\n\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class ReadWriteRedisClient {\n    private JedisPool master;\n    private List<JedisPool> slaves;\n    private JedisPoolConfig jedisPoolConfig;\n    private String address;\n    private int timeout;\n    private Random random;\n\n    public ReadWriteRedisClient() {\n        this.random = new Random();\n    }\n\n    public void initialize() {\n        String[] addresses = address.split(\",\");\n        if (addresses.length == 0) {\n            throw new IllegalArgumentException(\"No Redis addresses provided\");\n        }\n        String[] masterParts = addresses[0].split(\":\");\n        String masterHost = masterParts[0];\n        int masterPort = Integer.parseInt(masterParts[1]);\n        master = new JedisPool(jedisPoolConfig, masterHost, masterPort, timeout);\n\n        slaves = new ArrayList<>();\n        for (int i = 1; i < addresses.length; i++) {\n            String[] slaveParts = addresses[i].split(\":\");\n            String host = slaveParts[0];\n            int port = Integer.parseInt(slaveParts[1]);\n            JedisPool pool = new JedisPool(jedisPoolConfig, host, port, timeout);\n            slaves.add(pool);\n        }\n    }\n\n    public void destroy() {\n        if (master != null) {\n            master.close();\n        }\n        for (JedisPool pool : slaves) {\n            if (pool != null) {\n                pool.close();\n            }\n        }\n    }\n\n    public String get(String key) {\n        Jedis jedis = fetchResource(true);\n        try {\n            return jedis.get(key);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public String set(String key, String value) {\n        Jedis jedis = fetchResource(false);\n        try {\n            return jedis.set(key, value);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    private Jedis fetchResource(boolean read) {\n        if (read) {\n            int index = random.nextInt(slaves.size());\n            return slaves.get(index).getResource();\n        } else {\n            return master.getResource();\n        }\n    }\n\n    public void setJedisPoolConfig(JedisPoolConfig jedisPoolConfig) {\n        this.jedisPoolConfig = jedisPoolConfig;\n    }\n\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n}"
  },
  {
    "Task_id": 340,
    "Instruction": "Task Description: Create a Java class that establishes and manages a connection to a Redis master-slave setup using Lettuce client, with support for read preference configuration.\n\nClass Description: The RedisMasterSlaveConnector class provides functionality to connect to a Redis master-slave deployment, configure read preferences, and properly close connections. It uses Lettuce's MasterReplica API for high availability.\n\nAttributes:\n- redisClient: RedisClient - The underlying Redis client instance\n- connection: StatefulRedisMasterReplicaConnection<String, String> - The active connection to Redis master-slave setup\n\nMethods:\n- connectToMasterSlave(String sentinelUrl) -> void - Establishes a connection to Redis master-slave setup using the provided sentinel URL and configures read preference to prefer master\n- getConnection() -> StatefulRedisMasterReplicaConnection<String, String> - Returns the active Redis master-slave connection\n- closeConnection() -> void - Properly closes the Redis connection and shuts down the client",
    "Canonical_solution": "import io.lettuce.core.ReadFrom;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.masterreplica.MasterReplica;\nimport io.lettuce.core.masterreplica.StatefulRedisMasterReplicaConnection;\n\npublic class RedisMasterSlaveConnector {\n\n    private RedisClient redisClient;\n    private StatefulRedisMasterReplicaConnection<String, String> connection;\n\n    public void connectToMasterSlave(String sentinelUrl) {\n        redisClient = RedisClient.create();\n        connection = MasterReplica.connect(redisClient, StringCodec.UTF8, RedisURI.create(sentinelUrl));\n        connection.setReadFrom(ReadFrom.UPSTREAM_PREFERRED);\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.StatefulRedisMasterReplicaConnection;\nimport io.lettuce.core.ReadFrom;\n\npublic class RedisMasterSlaveConnector {\n    private RedisClient redisClient;\n    private StatefulRedisMasterReplicaConnection<String, String> connection;\n\n    public void connectToMasterSlave(String sentinelUrl) {\n        RedisURI redisUri = RedisURI.create(sentinelUrl);\n        redisClient = RedisClient.create(redisUri);\n        connection = redisClient.connectMasterReplica();\n        connection.setReadFrom(ReadFrom.MASTER);\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}"
  },
  {
    "Task_id": 341,
    "Instruction": "Task Description: Create a Java class that implements Redis client functionality using Jedis for basic key-value operations, hash operations, and key expiration management.\n\nClass Description: JedisClientSingle is a Redis client wrapper class that provides simplified access to common Redis operations using connection pooling. It handles connection management, authentication, and resource cleanup automatically.\n\nAttributes:\n- jedisPool: JedisPool - The connection pool for Redis connections\n- password: String - The password for Redis authentication (optional)\n- port: int - The port number of the Redis server\n- host: String - The host address of the Redis server\n- logger: Logger - SLF4J logger instance for logging operations\n\nMethods:\n- getResource() -> Jedis - Internal method to get a Jedis instance from the pool and authenticate if needed\n- get(String key) -> String - Retrieves the value associated with the given key\n- set(String key, String value) -> String - Sets the value for the given key\n- hget(String hkey, String key) -> String - Gets the value of a field in a hash\n- hset(String hkey, String key, String value) -> long - Sets the value of a field in a hash\n- incr(String key) -> long - Increments the integer value of a key by 1\n- expire(String key, Integer second) -> long - Sets a timeout on a key\n- ttl(String key) -> long - Gets the remaining time to live of a key\n- del(String key) -> long - Deletes a key\n- hdel(String hkey, String key) -> long - Deletes a field from a hash",
    "Canonical_solution": "import org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\npublic class JedisClientSingle {\n\n    private static final Logger logger = LoggerFactory.getLogger(JedisClientSingle.class);\n\n    private JedisPool jedisPool;\n    private String password;\n    private int port;\n    private String host;\n\n    private Jedis getResource() {\n        if(jedisPool==null) {\n            jedisPool = new JedisPool(host, port);\n        }\n        Jedis resource = jedisPool.getResource();\n        if (StringUtils.isBlank(password)) {\n            return resource;\n        } else {\n            resource.auth(password);\n            return resource;\n        }\n    }\n\n    public String get(String key) {\n        Jedis resource = getResource();\n        String string = resource.get(key);\n        resource.close();\n        return string;\n    }\n\n    public String set(String key, String value) {\n        Jedis resource = getResource();\n        String string = resource.set(key, value);\n        resource.close();\n        return string;\n    }\n\n    public String hget(String hkey, String key) {\n        Jedis resource = getResource();\n        String string = resource.hget(hkey, key);\n        resource.close();\n        return string;\n    }\n\n    public long hset(String hkey, String key, String value) {\n        Jedis resource = getResource();\n        Long hset = resource.hset(hkey, key, value);\n        resource.close();\n        return hset;\n    }\n\n    public long incr(String key) {\n        Jedis resource = getResource();\n        Long incr = resource.incr(key);\n        resource.close();\n        return incr;\n    }\n\n    public long expire(String key, Integer second) {\n        Jedis resource = getResource();\n        Long expire = resource.expire(key, second);\n        resource.close();\n        return expire;\n    }\n\n    public long ttl(String key) {\n        Jedis resource = getResource();\n        Long ttl = resource.ttl(key);\n        resource.close();\n        return ttl;\n    }\n\n    public long del(String key) {\n        Jedis resource = getResource();\n        Long del = resource.del(key);\n        resource.close();\n        return del;\n    }\n\n    public long hdel(String hkey, String key) {\n        Jedis resource = getResource();\n        Long hdel = resource.hdel(hkey, key);\n        resource.close();\n        return hdel;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class JedisClientSingle {\n    private final JedisPool jedisPool;\n    private final String password;\n    private final int port;\n    private final String host;\n    private final Logger logger;\n\n    public JedisClientSingle(String host, int port, String password) {\n        this.host = host;\n        this.port = port;\n        this.password = password;\n        this.jedisPool = new JedisPool(new JedisPoolConfig(), host, port);\n        this.logger = LoggerFactory.getLogger(JedisClientSingle.class);\n    }\n\n    private Jedis getResource() {\n        Jedis jedis = jedisPool.getResource();\n        if (password != null && !password.isEmpty()) {\n            jedis.auth(password);\n        }\n        return jedis;\n    }\n\n    public String get(String key) {\n        Jedis jedis = getResource();\n        try {\n            return jedis.get(key);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public String set(String key, String value) {\n        Jedis jedis = getResource();\n        try {\n            return jedis.set(key, value);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public String hget(String hkey, String key) {\n        Jedis jedis = getResource();\n        try {\n            return jedis.hget(hkey, key);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public long hset(String hkey, String key, String value) {\n        Jedis jedis = getResource();\n        try {\n            return jedis.hset(hkey, key, value);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public long incr(String key) {\n        Jedis jedis = getResource();\n        try {\n            return jedis.incr(key);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public long expire(String key, Integer second) {\n        Jedis jedis = getResource();\n        try {\n            return jedis.expire(key, second);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public long ttl(String key) {\n        Jedis jedis = getResource();\n        try {\n            return jedis.ttl(key);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public long del(String key) {\n        Jedis jedis = getResource();\n        try {\n            return jedis.del(key);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public long hdel(String hkey, String key) {\n        Jedis jedis = getResource();\n        try {\n            return jedis.hdel(hkey, key);\n        } finally {\n            jedis.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 343,
    "Instruction": "Task Description: Create a Java class that provides a client interface for interacting with Redis JSON data structures using the Lettuce Redis client library. The class should handle connection management and provide methods for common JSON operations.\n\nClass Description: RedisJsonClient is a wrapper class for Lettuce Redis client that specializes in JSON operations. It manages Redis connections and provides synchronous methods to manipulate JSON data stored in Redis.\n\nAttributes:\n- client: RedisClient - The main Redis client instance for connection management\n- syncCommands: RedisCommands<String, String> - Synchronous command interface for Redis operations\n\nMethods:\n- RedisJsonClient(String host, int port) -> void - Constructor that initializes the Redis connection with the specified host and port\n- jsonGet(String key, JsonPath path) -> JsonValue - Retrieves JSON value at specified path from given key\n- jsonSet(String key, JsonPath path, JsonValue value) -> String - Sets JSON value at specified path for given key\n- jsonDel(String key, JsonPath path) -> Long - Deletes JSON value at specified path from given key\n- jsonArrlen(String key, JsonPath path) -> List<Long> - Gets length of JSON array at specified path\n- jsonArrpop(String key, JsonPath path) -> List<JsonValue> - Pops elements from JSON array at specified path\n- close() -> void - Shuts down the Redis connection and releases resources\n- createJsonValue(String value) -> JsonValue - Creates a new JsonValue from string\n- createJsonObject() -> JsonObject - Creates a new empty JsonObject\n- createJsonArray() -> JsonArray - Creates a new empty JsonArray",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.codec.ByteArrayCodec;\nimport io.lettuce.core.json.JsonParser;\nimport io.lettuce.core.json.JsonPath;\nimport io.lettuce.core.json.JsonValue;\n\npublic class RedisJsonClient {\n\n    private RedisClient client;\n    private RedisCommands<String, String> syncCommands;\n\n    public RedisJsonClient(String host, int port) {\n        RedisURI redisURI = RedisURI.Builder.redis(host).withPort(port).build();\n        client = RedisClient.create(redisURI);\n        syncCommands = client.connect().sync();\n    }\n\n    public JsonValue jsonGet(String key, JsonPath path) {\n        List<JsonValue> values = syncCommands.jsonGet(key, path);\n        return values != null && !values.isEmpty() ? values.get(0) : null;\n    }\n\n    public String jsonSet(String key, JsonPath path, JsonValue value) {\n        return syncCommands.jsonSet(key, path, value);\n    }\n\n    public Long jsonDel(String key, JsonPath path) {\n        return syncCommands.jsonDel(key, path);\n    }\n\n    public List<Long> jsonArrlen(String key, JsonPath path) {\n        return syncCommands.jsonArrlen(key, path);\n    }\n\n    public List<JsonValue> jsonArrpop(String key, JsonPath path) {\n        return syncCommands.jsonArrpop(key, path);\n    }\n\n    public void close() {\n        if (client != null) {\n            client.shutdown();\n        }\n    }\n\n    public JsonValue createJsonValue(String value) {\n        return syncCommands.getJsonParser().createJsonValue(value);\n    }\n\n    public JsonObject createJsonObject() {\n        return syncCommands.getJsonParser().createJsonObject();\n    }\n\n    public JsonArray createJsonArray() {\n        return syncCommands.getJsonParser().createJsonArray();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisCommands;\nimport io.lettuce.core.StatefulRedisConnection;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class RedisJsonClient {\n    private final RedisClient client;\n    private final RedisCommands<String, String> syncCommands;\n\n    public RedisJsonClient(String host, int port) {\n        this.client = RedisClient.create(\"redis://\" + host + \":\" + port);\n        StatefulRedisConnection<String, String> connection = client.connect();\n        this.syncCommands = connection.sync();\n    }\n\n    public JsonValue jsonGet(String key, String path) {\n        String result = (String) syncCommands.send(\"JSON.GET\", key, path);\n        return createJsonValue(result);\n    }\n\n    public String jsonSet(String key, String path, JsonValue value) {\n        return (String) syncCommands.send(\"JSON.SET\", key, path, value.toString());\n    }\n\n    public Long jsonDel(String key, String path) {\n        return (Long) syncCommands.send(\"JSON.DEL\", key, path);\n    }\n\n    public List<Long> jsonArrlen(String key, String path) {\n        Long result = (Long) syncCommands.send(\"JSON.ARRLEN\", key, path);\n        return Collections.singletonList(result);\n    }\n\n    public List<JsonValue> jsonArrpop(String key, String path) {\n        List<String> results = (List<String>) syncCommands.send(\"JSON.ARRPOP\", key, path);\n        List<JsonValue> jsonValues = new ArrayList<>();\n        for (String s : results) {\n            jsonValues.add(createJsonValue(s));\n        }\n        return jsonValues;\n    }\n\n    public void close() {\n        syncCommands.close();\n        client.shutdown();\n    }\n\n    public JsonValue createJsonValue(String value) {\n        return new JsonValue(value);\n    }\n\n    public JsonObject createJsonObject() {\n        return new JsonObject(\"{}\");\n    }\n\n    public JsonArray createJsonArray() {\n        return new JsonArray(\"[]\");\n    }\n}\n```"
  },
  {
    "Task_id": 344,
    "Instruction": "Task Description: Create a Java class that provides asynchronous Redis hash operations using the Lettuce client, including CRUD operations and field manipulation.\n\nClass Description: RedisHashInteraction is a utility class that encapsulates asynchronous Redis hash operations. It manages Redis connections and provides thread-safe methods for interacting with Redis hashes.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance for creating connections\n- connection: StatefulRedisConnection<String, String> - The persistent connection to Redis\n- asyncCommands: RedisAsyncCommands<String, String> - The asynchronous command interface for Redis operations\n\nMethods:\n- Constructor(redisUri: String) -> void - Initializes the Redis client and establishes a connection using the provided URI\n- deleteKeys(keys: String...) -> CompletableFuture<Long> - Deletes one or more keys from Redis and returns the count of deleted keys\n- setHash(key: String, hash: Map<String, String>) -> CompletableFuture<Long> - Sets multiple hash fields at once for a given key\n- getHashField(key: String, field: String) -> CompletableFuture<String> - Retrieves the value of a specific field in a hash\n- getAllHashFields(key: String) -> CompletableFuture<Map<String, String>> - Retrieves all fields and values of a hash\n- incrementHashField(key: String, field: String, amount: long) -> CompletableFuture<Long> - Increments the integer value of a hash field by the given amount\n- closeConnection() -> void - Properly closes the Redis connection and shuts down the client",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.async.RedisAsyncCommands;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\n\npublic class RedisHashInteraction {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n    private RedisAsyncCommands<String, String> asyncCommands;\n\n    public RedisHashInteraction(String redisUri) {\n        this.redisClient = RedisClient.create(redisUri);\n        this.connection = redisClient.connect();\n        this.asyncCommands = connection.async();\n    }\n\n    public CompletableFuture<Long> deleteKeys(String... keys) {\n        return asyncCommands.del(keys).toCompletableFuture();\n    }\n\n    public CompletableFuture<Long> setHash(String key, Map<String, String> hash) {\n        return asyncCommands.hset(key, hash).toCompletableFuture();\n    }\n\n    public CompletableFuture<String> getHashField(String key, String field) {\n        return asyncCommands.hget(key, field).toCompletableFuture();\n    }\n\n    public CompletableFuture<Map<String, String>> getAllHashFields(String key) {\n        return asyncCommands.hgetall(key).toCompletableFuture();\n    }\n\n    public CompletableFuture<Long> incrementHashField(String key, String field, long amount) {\n        return asyncCommands.hincrby(key, field, amount).toCompletableFuture();\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.StatefulRedisConnection;\nimport io.lettuce.core.api.async.RedisAsyncCommands;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\n\npublic class RedisHashInteraction {\n    private final RedisClient redisClient;\n    private final StatefulRedisConnection<String, String> connection;\n    private final RedisAsyncCommands<String, String> asyncCommands;\n\n    public RedisHashInteraction(String redisUri) {\n        this.redisClient = RedisClient.create(redisUri);\n        this.connection = redisClient.connect();\n        this.asyncCommands = connection.async();\n    }\n\n    public CompletableFuture<Long> deleteKeys(String... keys) {\n        return asyncCommands.del(keys);\n    }\n\n    public CompletableFuture<Long> setHash(String key, Map<String, String> hash) {\n        return asyncCommands.hSet(key, hash);\n    }\n\n    public CompletableFuture<String> getHashField(String key, String field) {\n        return asyncCommands.hGet(key, field);\n    }\n\n    public CompletableFuture<Map<String, String>> getAllHashFields(String key) {\n        return asyncCommands.hGetAll(key);\n    }\n\n    public CompletableFuture<Long> incrementHashField(String key, String field, long amount) {\n        return asyncCommands.hIncrBy(key, field, amount);\n    }\n\n    public void closeConnection() {\n        connection.close();\n        redisClient.shutdown();\n    }\n}"
  },
  {
    "Task_id": 346,
    "Instruction": "Task Description: Create a Java class for managing Redis cluster connections and operations using Jedis and UnifiedJedis clients.\n\nClass Description: The RedisClusterManager class provides functionality to interact with a Redis cluster, including connection management, bucket creation/initialization, and performing Redis operations. It supports both JedisCluster and UnifiedJedis interfaces for cluster operations.\n\nAttributes:\n- jedisCluster: JedisCluster - The Jedis cluster client instance for Redis operations\n- unifiedJedisCluster: UnifiedJedis - The UnifiedJedis interface for Redis cluster operations (wraps jedisCluster)\n\nMethods:\n- RedisClusterManager(List<HostAndPort> shards) -> void - Constructor that initializes the Redis cluster connection using provided shards\n- createBucket(String key) -> byte[] - Converts a string key to UTF-8 bytes for Redis operations\n- initializeBucket(byte[] key) -> void - Placeholder for bucket initialization logic using the cluster client\n- performRedisOperations(byte[] key) -> void - Placeholder for performing CRUD operations on the cluster\n- closeConnections() -> void - Properly closes all Redis cluster connections\n- createShards(String host, List<Integer> ports) -> List<HostAndPort> - Static helper method to create shard configurations from host and ports",
    "Canonical_solution": "import java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.UUID;\n\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisCluster;\nimport redis.clients.jedis.UnifiedJedis;\n\npublic class RedisClusterManager {\n\n    private JedisCluster jedisCluster;\n    private UnifiedJedis unifiedJedisCluster;\n\n    public RedisClusterManager(List<HostAndPort> shards) {\n        this.jedisCluster = new JedisCluster(new HashSet<>(shards));\n        this.unifiedJedisCluster = this.jedisCluster;\n    }\n\n    public byte[] createBucket(String key) {\n        byte[] byteKey = key.getBytes(StandardCharsets.UTF_8);\n        return byteKey;\n    }\n\n    public void initializeBucket(byte[] key) {\n        // Initialize bucket logic using jedisCluster\n    }\n\n    public void performRedisOperations(byte[] key) {\n        // Perform CRUD operations using jedisCluster\n    }\n\n    public void closeConnections() {\n        try {\n            if (jedisCluster != null) {\n                jedisCluster.close();\n            }\n            if (unifiedJedisCluster != null) {\n                unifiedJedisCluster.close();\n            }\n        } catch (Exception e) {\n            // Handle exception\n        }\n    }\n\n    public static List<HostAndPort> createShards(String host, List<Integer> ports) {\n        List<HostAndPort> shards = new ArrayList<>();\n        for (Integer port : ports) {\n            shards.add(new HostAndPort(host, port));\n        }\n        return shards;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisCluster;\nimport redis.clients.jedis.UnifiedJedis;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\npublic class RedisClusterManager {\n    private JedisCluster jedisCluster;\n    private UnifiedJedis unifiedJedisCluster;\n\n    public RedisClusterManager(List<HostAndPort> shards) {\n        this.jedisCluster = new JedisCluster(new HashSet<>(shards));\n        this.unifiedJedisCluster = new UnifiedJedis(jedisCluster);\n    }\n\n    public byte[] createBucket(String key) {\n        return key.getBytes(StandardCharsets.UTF_8);\n    }\n\n    public void initializeBucket(byte[] key) {\n        // Placeholder for bucket initialization logic\n    }\n\n    public void performRedisOperations(byte[] key) {\n        // Placeholder for performing Redis operations\n    }\n\n    public void closeConnections() {\n        jedisCluster.close();\n        unifiedJedisCluster.close();\n    }\n\n    public static List<HostAndPort> createShards(String host, List<Integer> ports) {\n        List<HostAndPort> shards = new ArrayList<>();\n        for (int port : ports) {\n            shards.add(new HostAndPort(host, port));\n        }\n        return shards;\n    }\n}\n```"
  },
  {
    "Task_id": 348,
    "Instruction": "Task Description: Create a Redis connection manager class in Java that handles connection pooling, resource management, and basic Redis operations.\n\nClass Description: RedisConnectionManager is a utility class that manages Redis connections using Jedis connection pooling. It provides methods to get connections, execute commands, and properly close connections to ensure resource efficiency.\n\nAttributes:\n- jedisPool: JedisPool - The connection pool instance that manages Redis connections\n\nMethods:\n- RedisConnectionManager(String host, int port, int timeout, String password) -> void - Constructor that initializes the connection pool with specified parameters\n- getConnection() -> Jedis - Retrieves a Redis connection from the pool\n- closeConnection(Jedis jedis) -> void - Returns a connection to the pool\n- closePool() -> void - Closes the entire connection pool\n- executeCommand(String key, String value) -> void - Executes a basic Redis SET/GET operation and prints the result",
    "Canonical_solution": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisConnectionManager {\n\n    private JedisPool jedisPool;\n\n    public RedisConnectionManager(String host, int port, int timeout, String password) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port, timeout, password);\n    }\n\n    public Jedis getConnection() {\n        return jedisPool.getResource();\n    }\n\n    public void closeConnection(Jedis jedis) {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n\n    public void closePool() {\n        if (jedisPool != null && !jedisPool.isClosed()) {\n            jedisPool.close();\n        }\n    }\n\n    public void executeCommand(String key, String value) {\n        try (Jedis jedis = getConnection()) {\n            jedis.set(key, value);\n            String result = jedis.get(key);\n            System.out.println(\"Redis operation result: \" + result);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.HostAndPort;\n\npublic class RedisConnectionManager {\n    private JedisPool jedisPool;\n\n    public RedisConnectionManager(String host, int port, int timeout, String password) {\n        HostAndPort hostAndPort = new HostAndPort(host, port);\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, hostAndPort, timeout, password);\n    }\n\n    public Jedis getConnection() {\n        return jedisPool.getResource();\n    }\n\n    public void closeConnection(Jedis jedis) {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n\n    public void closePool() {\n        if (jedisPool != null) {\n            jedisPool.close();\n        }\n    }\n\n    public void executeCommand(String key, String value) {\n        Jedis jedis = getConnection();\n        try {\n            jedis.set(key, value);\n            String result = jedis.get(key);\n            System.out.println(result);\n        } finally {\n            closeConnection(jedis);\n        }\n    }\n}"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Create a Java class that implements a writable tile archive using Java NIO's FileChannel for efficient file operations, supporting both file-based and in-memory storage options.\n\nClass Description: WriteablePmtiles is a class that provides functionality to write and manage tile archive data using Java NIO channels. It supports writing to either a physical file or an in-memory buffer, tracks bytes written, and handles proper resource cleanup.\n\nAttributes:\n- out: [SeekableByteChannel] - The channel used for writing data (either FileChannel or in-memory channel)\n- bytesWritten: [LongSupplier] - A supplier that provides the number of bytes written to the channel\n\nMethods:\n- newWriteToFile(Path path) -> [WriteablePmtiles] - Static factory method that creates a new instance writing to a physical file at the specified path\n- newWriteToMemory(SeekableInMemoryByteChannel bytes) -> [WriteablePmtiles] - Static factory method that creates a new instance writing to an in-memory byte channel\n- finish(TileArchiveMetadata tileArchiveMetadata) -> [void] - Finalizes the archive by writing metadata and directory information\n- bytesWritten() -> [long] - Returns the number of bytes written to the archive\n- close() -> [void] - Closes the underlying channel and releases system resources\n- DeduplicatingTileWriter.write(TileEncodingResult encodingResult) -> [void] - Inner class method that writes tile data to the channel\n- DeduplicatingTileWriter.close() -> [void] - Inner class method that performs any necessary cleanup (none in this implementation)",
    "Canonical_solution": "import com.onthegomap.planetiler.util.FileUtils;\nimport com.onthegomap.planetiler.util.SeekableInMemoryByteChannel;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.SeekableByteChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.function.LongSupplier;\n\npublic final class WriteablePmtiles implements WriteableTileArchive {\n\n  private final SeekableByteChannel out;\n  private final LongSupplier bytesWritten;\n\n  private WriteablePmtiles(SeekableByteChannel channel, LongSupplier bytesWritten) throws IOException {\n    this.out = channel;\n    out.write(ByteBuffer.allocate(INIT_SECTION));\n    this.bytesWritten = bytesWritten;\n  }\n\n  public static WriteablePmtiles newWriteToFile(Path path) throws IOException {\n    return new WriteablePmtiles(\n      FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.READ, StandardOpenOption.WRITE),\n      () -> FileUtils.size(path)\n    );\n  }\n\n  public static WriteablePmtiles newWriteToMemory(SeekableInMemoryByteChannel bytes) throws IOException {\n    return new WriteablePmtiles(bytes, () -> 0);\n  }\n\n  @Override\n  public void finish(TileArchiveMetadata tileArchiveMetadata) {\n    try {\n      out.write(ByteBuffer.wrap(jsonBytes));\n      out.write(ByteBuffer.wrap(directories.leaves));\n      out.position(0);\n      out.write(ByteBuffer.wrap(header.toBytes()));\n      out.write(ByteBuffer.wrap(directories.root));\n    } catch (IOException e) {\n      LOGGER.error(e.getMessage());\n    }\n  }\n\n  @Override\n  public long bytesWritten() {\n    return bytesWritten.getAsLong();\n  }\n\n  @Override\n  public void close() throws IOException {\n    out.close();\n  }\n\n  private class DeduplicatingTileWriter implements TileWriter {\n    @Override\n    public void write(TileEncodingResult encodingResult) {\n      try {\n        out.write(ByteBuffer.wrap(data));\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n      currentOffset += data.length;\n    }\n\n    @Override\n    public void close() {\n      // no cleanup needed.\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SeekableByteChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.function.LongSupplier;\n\npublic class WriteablePmtiles {\n    private final SeekableByteChannel out;\n    private final LongSupplier bytesWritten;\n\n    private WriteablePmtiles(SeekableByteChannel out, LongSupplier bytesWritten) {\n        this.out = out;\n        this.bytesWritten = bytesWritten;\n    }\n\n    public static WriteablePmtiles newWriteToFile(Path path) throws IOException {\n        SeekableByteChannel fileChannel = java.nio.channels.FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n        return new WriteablePmtiles(fileChannel, () -> fileChannel.position());\n    }\n\n    public static WriteablePmtiles newWriteToMemory(SeekableInMemoryByteChannel bytes) {\n        return new WriteablePmtiles(bytes, () -> bytes.position());\n    }\n\n    public void finish(TileArchiveMetadata tileArchiveMetadata) throws IOException {\n        // Placeholder for writing metadata and directory\n    }\n\n    public long bytesWritten() {\n        return bytesWritten.getAsLong();\n    }\n\n    public void close() throws IOException {\n        out.close();\n    }\n\n    public class DeduplicatingTileWriter {\n        public void write(TileEncodingResult encodingResult) throws IOException {\n            byte[] data = encodingResult.getData();\n            ByteBuffer buffer = ByteBuffer.wrap(data);\n            out.write(buffer);\n        }\n\n        public void close() {\n            // No-op\n        }\n    }\n}"
  },
  {
    "Task_id": 351,
    "Instruction": "Task Description: Create a Java class that establishes and manages a connection to a Redis master-slave setup using Lettuce client, allowing read operations to prefer the master node while maintaining failover capabilities.\n\nClass Description: The RedisMasterSlaveConnector class provides functionality to connect to a Redis master-slave cluster, manage the connection, and properly clean up resources when done. It uses Lettuce's MasterReplica API for high availability support.\n\nAttributes:\n- redisClient: RedisClient - The underlying Redis client instance used for connection management\n- connection: StatefulRedisMasterReplicaConnection<String, String> - The active connection to the Redis master-slave cluster\n\nMethods:\n- RedisMasterSlaveConnector() -> void - Constructor that initializes the RedisClient instance\n- connect(List<RedisURI> nodes) -> void - Establishes a connection to the Redis master-slave cluster using the provided node URIs and configures read preference\n- getConnection() -> StatefulRedisMasterReplicaConnection<String, String> - Returns the active Redis master-slave connection\n- close() -> void - Properly closes the connection and shuts down the Redis client to release resources",
    "Canonical_solution": "import io.lettuce.core.ReadFrom;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.masterreplica.MasterReplica;\nimport io.lettuce.core.masterreplica.StatefulRedisMasterReplicaConnection;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class RedisMasterSlaveConnector {\n\n    private RedisClient redisClient;\n    private StatefulRedisMasterReplicaConnection<String, String> connection;\n\n    public RedisMasterSlaveConnector() {\n        this.redisClient = RedisClient.create();\n    }\n\n    public void connect(List<RedisURI> nodes) {\n        this.connection = MasterReplica.connect(redisClient, StringCodec.UTF8, nodes);\n        connection.setReadFrom(ReadFrom.UPSTREAM_PREFERRED);\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> getConnection() {\n        return this.connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisMasterReplicaConnection;\n\npublic class RedisMasterSlaveConnector {\n    private RedisClient redisClient;\n    private StatefulRedisMasterReplicaConnection<String, String> connection;\n\n    public RedisMasterSlaveConnector() {\n        this.redisClient = RedisClient.create();\n    }\n\n    public void connect(List<RedisURI> nodes) {\n        RedisURI masterUri = nodes.get(0);\n        List<RedisURI> replicaUris = nodes.subList(1, nodes.size());\n        this.connection = redisClient.connectMasterReplica(masterUri, replicaUris);\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> getConnection() {\n        return connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 353,
    "Instruction": "Task Description: Create a Java class that manages Redis connections using the Lettuce client, supporting batch operations with asynchronous command execution.\n\nClass Description: The RedisConnectionManager class provides a way to establish, manage, and close Redis connections using Lettuce client. It supports binary data operations through ByteArrayCodec and maintains a batch of asynchronous commands for execution.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance for connection management\n- connection: StatefulRedisConnection<byte[], byte[]> - The active Redis connection using byte arrays as key/value format\n- BATCH_SIZE: int (static final) - Constant defining the maximum number of commands in a batch\n- commands: CompletableFuture[] - Array to store asynchronous command futures for batch operations\n\nMethods:\n- setupConnection(): void - Initializes the Redis client and establishes a connection using test settings (host and port from TestSettings)\n- getConnection(): StatefulRedisConnection<byte[], byte[]> - Returns the active Redis connection\n- closeConnection(): void - Properly closes the Redis connection and shuts down the client\n- getCommandFutures(): CompletableFuture[] - Returns the array of command futures for batch operations\n- getBatchSize(): int - Returns the constant batch size value",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.codec.ByteArrayCodec;\nimport io.lettuce.test.settings.TestSettings;\nimport java.util.concurrent.CompletableFuture;\n\npublic class RedisConnectionManager {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<byte[], byte[]> connection;\n    private static final int BATCH_SIZE = 20;\n    private CompletableFuture[] commands;\n\n    public void setupConnection() {\n        redisClient = RedisClient.create(RedisURI.create(TestSettings.host(), TestSettings.port()));\n        connection = redisClient.connect(ByteArrayCodec.INSTANCE);\n        commands = new CompletableFuture[BATCH_SIZE];\n    }\n\n    public StatefulRedisConnection<byte[], byte[]> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n\n    public CompletableFuture[] getCommandFutures() {\n        return commands;\n    }\n\n    public int getBatchSize() {\n        return BATCH_SIZE;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.StatefulRedisConnection;\nimport io.lettuce.core.codec.ByteArrayCodec;\nimport java.util.concurrent.CompletableFuture;\nimport com.example.TestSettings;\n\npublic class RedisConnectionManager {\n    private final RedisClient redisClient;\n    private StatefulRedisConnection<byte[], byte[]> connection;\n    public static final int BATCH_SIZE = 100;\n    private CompletableFuture<?>[] commands;\n\n    public void setupConnection() {\n        String host = TestSettings.getHost();\n        int port = TestSettings.getPort();\n        redisClient = RedisClient.create(\"redis://\" + host + \":\" + port);\n        connection = redisClient.connect(new ByteArrayCodec());\n    }\n\n    public StatefulRedisConnection<byte[], byte[]> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n\n    public CompletableFuture<?>[] getCommandFutures() {\n        return commands;\n    }\n\n    public int getBatchSize() {\n        return BATCH_SIZE;\n    }\n}"
  },
  {
    "Task_id": 355,
    "Instruction": "Task Description: Create a Java class that provides functionality to connect to Redis using Unix domain sockets, perform basic Redis operations, and manage connection lifecycle.\n\nClass Description: The RedisSocketConnector class enables interaction with Redis server through Unix domain sockets. It handles connection establishment, basic key-value operations, and proper resource cleanup. The class also includes utility methods for Redis URI creation and socket support detection.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance used for connections\n- connection: StatefulRedisConnection<String, String> - The active Redis connection\n\nMethods:\n- connect(RedisURI redisURI) -> void - Establishes a connection to Redis using the provided URI\n- performRedisAction(String key, String value) -> void - Performs a set and get operation on the specified key-value pair\n- close() -> void - Closes the Redis connection and shuts down the client\n- createSocketRedisUri(String socketPath) -> RedisURI - Creates a Redis URI for socket connection from the given path\n- isSupported() -> boolean - Checks if domain sockets are supported on the current system",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.resource.Transports;\nimport io.lettuce.test.resource.TestClientResources;\nimport io.netty.util.internal.SystemPropertyUtil;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Locale;\n\npublic class RedisSocketConnector {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n\n    public void connect(RedisURI redisURI) {\n        redisClient = RedisClient.create(TestClientResources.get(), redisURI);\n        connection = redisClient.connect();\n    }\n\n    public void performRedisAction(String key, String value) {\n        RedisCommands<String, String> syncCommands = connection.sync();\n        syncCommands.set(key, value);\n        String result = syncCommands.get(key);\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n\n    public static RedisURI createSocketRedisUri(String socketPath) throws IOException {\n        File file = new File(socketPath).getCanonicalFile();\n        return RedisURI.create(RedisURI.URI_SCHEME_REDIS_SOCKET + \"://\" + file.getCanonicalPath());\n    }\n\n    public static boolean isSupported() {\n        String osName = SystemPropertyUtil.get(\"os.name\").toLowerCase(Locale.UK).trim();\n        return Transports.NativeTransports.isDomainSocketSupported();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\n\npublic class RedisSocketConnector {\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n\n    public void connect(RedisURI redisURI) {\n        redisClient = RedisClient.create(redisURI);\n        connection = redisClient.connect();\n    }\n\n    public void performRedisAction(String key, String value) {\n        RedisCommands<String, String> sync = connection.sync();\n        sync.set(key, value);\n        String result = sync.get(key);\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n\n    public static RedisURI createSocketRedisUri(String socketPath) {\n        return RedisURI.create(\"unix://\" + socketPath);\n    }\n\n    public boolean isSupported() {\n        String osName = System.getProperty(\"os.name\").toLowerCase();\n        return !osName.contains(\"win\");\n    }\n}\n```"
  },
  {
    "Task_id": 356,
    "Instruction": "Task Description: Implement a Redis Sentinel connection provider class in Java that manages connections to a Redis master node through Sentinel monitoring, including automatic failover handling.\n\nClass Description: SentineledConnectionProvider is a class that provides managed connections to a Redis master node in a Sentinel-monitored environment. It automatically discovers the current master through Sentinel nodes and maintains a connection pool to it. The class also includes a listener thread that monitors for master failover events and updates the connection pool accordingly.\n\nAttributes:\n- currentMaster: [HostAndPort] - The current master node's host and port\n- pool: [ConnectionPool] - The connection pool to the current master node\n- masterName: [String] - The name of the Redis master as configured in Sentinel\n- masterClientConfig: [JedisClientConfig] - Configuration for connections to the master node\n- sentinelClientConfig: [JedisClientConfig] - Configuration for connections to Sentinel nodes\n\nMethods:\n- SentineledConnectionProvider([String] masterName, [JedisClientConfig] masterClientConfig, [Set<HostAndPort>] sentinels, [JedisClientConfig] sentinelClientConfig) -> [void] - Constructor that initializes the connection provider with master name, configurations, and Sentinel nodes\n- getConnection() -> [Connection] - Retrieves a connection from the pool to the current master node\n- initMaster([HostAndPort] master) -> [void] - Initializes or updates the connection pool to the specified master node\n- initSentinels([Set<HostAndPort>] sentinels) -> [HostAndPort] - Discovers the current master node through Sentinel nodes\n- SentinelListener([HostAndPort] node) -> [void] - Nested class constructor for Sentinel listener thread\n- run() -> [void] - Main execution method of the Sentinel listener thread (overrides Thread.run())\n- shutdown() -> [void] - Shuts down the Sentinel listener thread",
    "Canonical_solution": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Connection;\nimport redis.clients.jedis.ConnectionPool;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.JedisPubSub;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.jedis.util.IOUtils;\n\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class SentineledConnectionProvider {\n\n  private static final Logger LOG = LoggerFactory.getLogger(SentineledConnectionProvider.class);\n\n  private volatile HostAndPort currentMaster;\n  private volatile ConnectionPool pool;\n  private final String masterName;\n  private final JedisClientConfig masterClientConfig;\n  private final JedisClientConfig sentinelClientConfig;\n\n  public SentineledConnectionProvider(String masterName, final JedisClientConfig masterClientConfig,\n      Set<HostAndPort> sentinels, final JedisClientConfig sentinelClientConfig) {\n    this.masterName = masterName;\n    this.masterClientConfig = masterClientConfig;\n    this.sentinelClientConfig = sentinelClientConfig;\n\n    HostAndPort master = initSentinels(sentinels);\n    initMaster(master);\n  }\n\n  public Connection getConnection() {\n    return pool.getResource();\n  }\n\n  private void initMaster(HostAndPort master) {\n    if (!master.equals(currentMaster)) {\n      currentMaster = master;\n      pool = new ConnectionPool(currentMaster, masterClientConfig);\n      LOG.info(\"Created connection pool to master at {}.\", master);\n    }\n  }\n\n  private HostAndPort initSentinels(Set<HostAndPort> sentinels) {\n    HostAndPort master = null;\n    boolean sentinelAvailable = false;\n\n    for (HostAndPort sentinel : sentinels) {\n      try (Jedis jedis = new Jedis(sentinel, sentinelClientConfig)) {\n        List<String> masterAddr = jedis.sentinelGetMasterAddrByName(masterName);\n        sentinelAvailable = true;\n\n        if (masterAddr == null || masterAddr.size() != 2) {\n          continue;\n        }\n\n        master = new HostAndPort(masterAddr.get(0), Integer.parseInt(masterAddr.get(1)));\n        break;\n      } catch (JedisException e) {\n        LOG.warn(\"Could not get master address from {}.\", sentinel, e);\n      }\n    }\n\n    if (master == null) {\n      if (sentinelAvailable) {\n        throw new JedisException(\"Can connect to sentinel, but \" + masterName + \" seems to be not monitored.\");\n      } else {\n        throw new JedisConnectionException(\"All sentinels down, cannot determine where \" + masterName + \" is running.\");\n      }\n    }\n\n    return master;\n  }\n\n  protected class SentinelListener extends Thread {\n    protected final HostAndPort node;\n    protected volatile Jedis sentinelJedis;\n    protected AtomicBoolean running = new AtomicBoolean(false);\n\n    public SentinelListener(HostAndPort node) {\n      this.node = node;\n    }\n\n    @Override\n    public void run() {\n      running.set(true);\n\n      while (running.get()) {\n        try {\n          sentinelJedis = new Jedis(node, sentinelClientConfig);\n          sentinelJedis.subscribe(new JedisPubSub() {\n            @Override\n            public void onMessage(String channel, String message) {\n              String[] switchMasterMsg = message.split(\" \");\n              if (switchMasterMsg.length > 3 && masterName.equals(switchMasterMsg[0])) {\n                initMaster(new HostAndPort(switchMasterMsg[3], Integer.parseInt(switchMasterMsg[4])));\n              }\n            }\n          }, \"+switch-master\");\n        } catch (JedisException e) {\n          if (running.get()) {\n            try {\n              Thread.sleep(5000);\n            } catch (InterruptedException se) {\n              LOG.error(\"Sleep interrupted.\", se);\n            }\n          }\n        } finally {\n          IOUtils.closeQuietly(sentinelJedis);\n        }\n      }\n    }\n\n    public void shutdown() {\n      running.set(false);\n      if (sentinelJedis != null) {\n        sentinelJedis.close();\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.JedisPubSub;\nimport redis.clients.jedis.util.Pool;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class SentineledConnectionProvider {\n    private HostAndPort currentMaster;\n    private Pool<Connection> pool;\n    private String masterName;\n    private JedisClientConfig masterClientConfig;\n    private JedisClientConfig sentinelClientConfig;\n    private Set<HostAndPort> sentinels;\n    private SentinelListener sentinelListener;\n    private final AtomicBoolean isRunning = new AtomicBoolean(true);\n\n    public SentineledConnectionProvider(String masterName, JedisClientConfig masterClientConfig, Set<HostAndPort> sentinels, JedisClientConfig sentinelClientConfig) {\n        this.masterName = masterName;\n        this.masterClientConfig = masterClientConfig;\n        this.sentinels = sentinels;\n        this.sentinelClientConfig = sentinelClientConfig;\n        this.currentMaster = initSentinels(sentinels);\n        this.pool = initMaster(currentMaster);\n        this.sentinelListener = new SentinelListener(sentinels.iterator().next());\n        this.sentinelListener.start();\n    }\n\n    public Connection getConnection() {\n        return pool.getResource();\n    }\n\n    private void initMaster(HostAndPort master) {\n        this.currentMaster = master;\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        pool = new JedisPool(poolConfig, master.getHost(), master.getPort(), masterClientConfig.getTimeout(), masterClientConfig.getPassword());\n    }\n\n    private HostAndPort initSentinels(Set<HostAndPort> sentinels) {\n        for (HostAndPort sentinel : sentinels) {\n            try (Jedis jedis = new Jedis(sentinel.getHost(), sentinel.getPort(), sentinelClientConfig.getTimeout())) {\n                List<String> masterInfo = jedis.sentinelGetMasterAddrByName(masterName);\n                if (masterInfo != null && masterInfo.size() == 2) {\n                    String host = masterInfo.get(0);\n                    int port = Integer.parseInt(masterInfo.get(1));\n                    return new HostAndPort(host, port);\n                }\n            } catch (Exception e) {\n                continue;\n            }\n        }\n        throw new RuntimeException(\"Failed to discover Redis master through Sentinels\");\n    }\n\n    private class SentinelListener extends Thread {\n        private final HostAndPort sentinelNode;\n        private volatile boolean running = true;\n\n        public SentinelListener(HostAndPort node) {\n            this.sentinelNode = node;\n        }\n\n        @Override\n        public void run() {\n            while (running && isRunning.get()) {\n                try (Jedis jedis = new Jedis(sentinelNode.getHost(), sentinelNode.getPort(), sentinelClientConfig.getTimeout())) {\n                    jedis.subscribe(new JedisPubSub() {\n                        @Override\n                        public void onMessage(String channel, String message) {\n                            if (message.startsWith(\"master\")) {\n                                String[] parts = message.split(\" \");\n                                if (parts.length >= 4 && parts[1].equals(masterName)) {\n                                    String newHost = parts[2];\n                                    int newPort = Integer.parseInt(parts[3]);\n                                    HostAndPort newMaster = new HostAndPort(newHost, newPort);\n                                    synchronized (SentineledConnectionProvider.this) {\n                                        if (!SentineledConnectionProvider.this.currentMaster.equals(newMaster)) {\n                                            SentineledConnectionProvider.this.currentMaster = newMaster;\n                                            SentineledConnectionProvider.this.initMaster(newMaster);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }, \"__sentinel__events\");\n                } catch (Exception e) {\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException ex) {\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            }\n        }\n\n        public void shutdown() {\n            running = false;\n        }\n    }\n\n    public void shutdown() {\n        isRunning.set(false);\n        sentinelListener.shutdown();\n        try {\n            sentinelListener.join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        if (pool != null) {\n            pool.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 359,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer to subscribe to messages from a specified topic and process them asynchronously.\n\nClass Description: The SimpleConsumer class provides a basic implementation of a RocketMQ push consumer. It handles the setup, subscription, message listening, and lifecycle management of a consumer instance. The class allows for easy configuration of consumer group, NameServer address, topic subscription, and message processing logic.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The core RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- SimpleConsumer(String consumerGroup, String namesrvAddr) -> void - Constructor that initializes the consumer with a consumer group and NameServer address\n- subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a message listener to handle incoming messages\n- start() -> void - Starts the consumer to begin message consumption\n- shutdown() -> void - Shuts down the consumer gracefully\n- createDefaultListener() -> MessageListenerConcurrently - Static factory method that creates a default message listener which prints received messages",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport java.util.List;\n\npublic class SimpleConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public SimpleConsumer(String consumerGroup, String namesrvAddr) {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static MessageListenerConcurrently createDefaultListener() {\n        return new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                for (MessageExt msg : msgs) {\n                    System.out.println(msg.getKeys() + \":\" + new String(msg.getBody()));\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        };\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\n\npublic class SimpleConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public SimpleConsumer(String consumerGroup, String namesrvAddr) throws Exception {\n        this.consumer = new DefaultMQPushConsumer(consumerGroup);\n        this.consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) throws Exception {\n        this.consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        this.consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws Exception {\n        this.consumer.start();\n    }\n\n    public void shutdown() {\n        this.consumer.shutdown();\n    }\n\n    public static MessageListenerConcurrently createDefaultListener() {\n        return (MessageListenerConcurrently) (messages, context) -> {\n            for (MessageExt msg : messages) {\n                System.out.println(\"Received message: \" + new String(msg.getBody()));\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        };\n    }\n}\n```"
  },
  {
    "Task_id": 360,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ message consumer using the push model. The class should handle message consumption from a specified topic, with configurable NameServer address and consumer group settings.\n\nClass Description: The Consumer class is a RocketMQ message consumer implementation that subscribes to a topic and processes incoming messages asynchronously. It uses DefaultMQPushConsumer for push-based consumption and provides methods to start, shutdown, and configure the consumer.\n\nAttributes:\n- CONSUMER_GROUP: [String] - The consumer group name for this consumer instance\n- DEFAULT_NAMESRVADDR: [String] - Default NameServer address if none is provided\n- TOPIC: [String] - The topic to subscribe to for messages\n- consumer: [DefaultMQPushConsumer] - The RocketMQ push consumer instance\n\nMethods:\n- Consumer() - [Constructor] -> [void] - Initializes the consumer with default settings, subscribes to the topic, and registers a message listener\n- start() -> [void] - Starts the consumer to begin receiving messages\n- shutdown() -> [void] - Shuts down the consumer gracefully\n- setNamesrvAddr(String namesrvAddr) -> [void] - Sets the NameServer address for the consumer",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\n\npublic class Consumer {\n\n    public static final String CONSUMER_GROUP = \"please_rename_unique_group_name_4\";\n    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    public static final String TOPIC = \"TopicTest\";\n\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.subscribe(TOPIC, \"*\");\n        consumer.registerMessageListener((MessageListenerConcurrently) (msg, context) -> {\n            System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msg);\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.*;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.exception.MQClientException;\n\npublic class Consumer {\n    public static final String CONSUMER_GROUP = \"default_group\";\n    public static final String DEFAULT_NAMESRVADDR = \"localhost:9876\";\n    public static final String TOPIC = \"default_topic\";\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer() throws MQClientException {\n        this.consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        this.consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        this.consumer.subscribe(TOPIC, \"*\");\n        this.consumer.registerMessageListener((MessageListenerConcurrently) (messages, context) -> {\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n}\n```"
  },
  {
    "Task_id": 365,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer to asynchronously receive and process messages from a specified topic.\n\nClass Description: The PushConsumer class provides a wrapper around RocketMQ's DefaultMQPushConsumer to simplify message consumption. It handles consumer initialization, topic subscription, message listening, and lifecycle management.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The underlying RocketMQ push consumer instance\n\nMethods:\n- PushConsumer(String consumerGroup, String namesrvAddr) -> void - Constructor that initializes the consumer with a consumer group and NameServer address\n- subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) -> void - Sets the consumption starting point (e.g., from last offset or earliest)\n- setConsumeTimestamp(String consumeTimestamp) -> void - Sets the timestamp for consumption starting point\n- registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a callback for processing received messages\n- start() -> void - Starts the consumer to begin message consumption\n- shutdown() -> void - Shuts down the consumer gracefully\n\nNested Class:\n- SimpleMessageListener: MessageListenerConcurrently - A basic message listener implementation that prints received messages and returns success status",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class PushConsumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) {\n        consumer.setConsumeFromWhere(consumeFromWhere);\n    }\n\n    public void setConsumeTimestamp(String consumeTimestamp) {\n        consumer.setConsumeTimestamp(consumeTimestamp);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n            System.out.printf(Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.*;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.Message;\nimport java.util.List;\n\npublic class PushConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer(String consumerGroup, String namesrvAddr) throws Exception {\n        this.consumer = new DefaultMQPushConsumer(consumerGroup);\n        this.consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) {\n        consumer.setConsumeFromWhere(consumeFromWhere);\n    }\n\n    public void setConsumeTimestamp(String consumeTimestamp) {\n        consumer.setConsumeTimestamp(consumeTimestamp);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.setMessageListener(listener);\n    }\n\n    public void start() throws Exception {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> messages, ConsumeConcurrentlyContext context) {\n            for (MessageExt message : messages) {\n                System.out.println(\"Received message: \" + new String(message.getBody()));\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 368,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to asynchronously receive and process messages from a specified topic.\n\nClass Description: The RocketMQConsumer class provides functionality to initialize, configure, and manage a RocketMQ push consumer. It allows subscribing to topics, registering message listeners, and controlling the consumer lifecycle.\n\nAttributes:\n- pushConsumer: DefaultMQPushConsumer - The core RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- initializeConsumer(String consumerGroup, String namesrvAddr) -> void - Initializes the consumer with a consumer group and NameServer address. Sets consumption strategy to start from last offset and message model to clustering.\n- subscribeToTopic(String topic, String tagExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a concurrent message listener to handle incoming messages\n- startConsumer() -> void - Starts the consumer to begin receiving messages\n- shutdownConsumer() -> void - Gracefully shuts down the consumer instance",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n\nimport java.util.List;\n\npublic class RocketMQConsumer {\n\n    private DefaultMQPushConsumer pushConsumer;\n\n    public void initializeConsumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        pushConsumer = new DefaultMQPushConsumer(consumerGroup);\n        pushConsumer.setNamesrvAddr(namesrvAddr);\n        pushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n        pushConsumer.setMessageModel(MessageModel.CLUSTERING);\n    }\n\n    public void subscribeToTopic(String topic, String tagExpression) throws MQClientException {\n        pushConsumer.subscribe(topic, tagExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        pushConsumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                return listener.consumeMessage(msgs, context);\n            }\n        });\n    }\n\n    public void startConsumer() throws MQClientException {\n        pushConsumer.start();\n    }\n\n    public void shutdownConsumer() {\n        pushConsumer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageModel;\nimport org.apache.rocketmq.client.listener.MessageListenerConcurrently;\n\npublic class RocketMQConsumer {\n    private DefaultMQPushConsumer pushConsumer;\n\n    public void initializeConsumer(String consumerGroup, String namesrvAddr) {\n        pushConsumer = new DefaultMQPushConsumer(consumerGroup);\n        pushConsumer.setNamesrvAddr(namesrvAddr);\n        pushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n        pushConsumer.setMessageModel(MessageModel.CLUSTERING);\n    }\n\n    public void subscribeToTopic(String topic, String tagExpression) {\n        pushConsumer.subscribe(topic, tagExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        pushConsumer.registerMessageListener(listener);\n    }\n\n    public void startConsumer() {\n        pushConsumer.start();\n    }\n\n    public void shutdownConsumer() {\n        pushConsumer.shutdown();\n    }\n}"
  },
  {
    "Task_id": 369,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer to subscribe to messages from a specified topic and process them asynchronously.\n\nClass Description: The PushConsumer class is a RocketMQ message consumer that uses push mode to receive messages from a message queue. It handles message subscription, listener registration, and consumer lifecycle management.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The core RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- PushConsumer(String consumerGroup, String namesrvAddr) -> void - Constructor that initializes the consumer with a consumer group and NameServer address\n- subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a message listener to handle incoming messages\n- start() -> void - Starts the consumer to begin receiving messages\n- shutdown() -> void - Shuts down the consumer gracefully\n\nNested Class:\n- SimpleMessageListener: MessageListenerConcurrently - A basic message listener implementation that prints received messages\n  Methods:\n  - consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) -> ConsumeConcurrentlyStatus - Processes received messages and returns consumption status",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n\nimport java.util.List;\n\npublic class PushConsumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.setMessageModel(MessageModel.BROADCASTING);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                                                      ConsumeConcurrentlyContext context) {\n            System.out.printf(Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.*;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class PushConsumer {\n    private final DefaultMQPushConsumer consumer;\n\n    public PushConsumer(String consumerGroup, String namesrvAddr) throws Exception {\n        this.consumer = new DefaultMQPushConsumer(consumerGroup);\n        this.consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        try {\n            this.consumer.subscribe(topic, subExpression);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        this.consumer.setMessageListener(listener);\n    }\n\n    public void start() throws Exception {\n        this.consumer.start();\n    }\n\n    public void shutdown() {\n        this.consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n            for (MessageExt msg : msgs) {\n                System.out.println(\"Received message: \" + new String(msg.getBody()));\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Create a Java class that manages a mark file for inter-process communication, allowing processes to check the status of another process through a shared memory-mapped file. The class should handle file creation, version checking, timestamp validation, and resource cleanup.\n\nClass Description: The MarkFile class provides a mechanism for processes to communicate their liveness status via a memory-mapped file. It supports checking version compatibility, monitoring heartbeat timestamps, and ensuring proper resource cleanup. The class implements AutoCloseable for proper resource management.\n\nAttributes:\n- markFile: File - The physical file used for marking process status\n- mappedBuffer: MappedByteBuffer - The memory-mapped buffer for file operations\n- buffer: UnsafeBuffer - Wrapper around mappedBuffer for atomic operations\n- isClosed: AtomicBoolean - Flag indicating whether resources have been released\n\nMethods:\n- MarkFile(File, boolean, int, int, int, long, EpochClock, IntConsumer, Consumer<String>) -> void - Constructor that initializes the mark file with version and timestamp fields\n- close() -> void - Releases resources and closes the file channel\n- mapNewOrExistingMarkFile(File, boolean, int, int, long, long, EpochClock, IntConsumer, Consumer<String>) -> MappedByteBuffer - Static method that maps the file into memory and performs version/timestamp validation\n- ensureMarkFileLink(File, File, String) -> void - Static method that manages symbolic links to the mark file directory",
    "Canonical_solution": "import org.agrona.concurrent.UnsafeBuffer;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.function.Consumer;\nimport java.util.function.IntConsumer;\nimport static java.nio.channels.FileChannel.MapMode.READ_WRITE;\nimport static java.nio.file.StandardOpenOption.CREATE;\nimport static java.nio.file.StandardOpenOption.READ;\nimport static java.nio.file.StandardOpenOption.WRITE;\n\npublic class MarkFile implements AutoCloseable\n{\n    private final File markFile;\n    private final MappedByteBuffer mappedBuffer;\n    private final UnsafeBuffer buffer;\n    private final AtomicBoolean isClosed = new AtomicBoolean();\n\n    public MarkFile(\n        final File markFile,\n        final boolean shouldPreExist,\n        final int versionFieldOffset,\n        final int timestampFieldOffset,\n        final int totalFileLength,\n        final long timeoutMs,\n        final EpochClock epochClock,\n        final IntConsumer versionCheck,\n        final Consumer<String> logger)\n    {\n        this.markFile = markFile;\n        this.mappedBuffer = mapNewOrExistingMarkFile(\n            markFile,\n            shouldPreExist,\n            versionFieldOffset,\n            timestampFieldOffset,\n            totalFileLength,\n            timeoutMs,\n            epochClock,\n            versionCheck,\n            logger);\n        this.buffer = new UnsafeBuffer(mappedBuffer);\n    }\n\n    public void close()\n    {\n        if (isClosed.compareAndSet(false, true))\n        {\n            BufferUtil.free(mappedBuffer);\n        }\n    }\n\n    public static MappedByteBuffer mapNewOrExistingMarkFile(\n        final File markFile,\n        final boolean shouldPreExist,\n        final int versionFieldOffset,\n        final int timestampFieldOffset,\n        final long totalFileLength,\n        final long timeoutMs,\n        final EpochClock epochClock,\n        final IntConsumer versionCheck,\n        final Consumer<String> logger)\n    {\n        MappedByteBuffer byteBuffer = null;\n\n        try (FileChannel channel = FileChannel.open(markFile.toPath(), CREATE, READ, WRITE))\n        {\n            byteBuffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, totalFileLength);\n            final UnsafeBuffer buffer = new UnsafeBuffer(byteBuffer);\n\n            if (shouldPreExist)\n            {\n                if (buffer.capacity() < (timestampFieldOffset + SIZE_OF_LONG))\n                {\n                    throw new IllegalStateException(\"active MarkFile too short capacity=\" + buffer.capacity() +\n                        \" < \" + (timestampFieldOffset + SIZE_OF_LONG));\n                }\n\n                final int version = buffer.getIntVolatile(versionFieldOffset);\n\n                if (null != logger)\n                {\n                    logger.accept(\"INFO: Mark file exists: \" + markFile);\n                }\n\n                versionCheck.accept(version);\n\n                final long timestampMs = buffer.getLongVolatile(timestampFieldOffset);\n                final long timestampAgeMs = epochClock.time() - timestampMs;\n\n                if (null != logger)\n                {\n                    logger.accept(\"INFO: heartbeat timestampMs=\" + timestampMs + \" ageMs=\" + timestampAgeMs);\n                }\n\n                if (timestampAgeMs < timeoutMs)\n                {\n                    throw new IllegalStateException(\"active Mark file detected\");\n                }\n            }\n        }\n        catch (final Exception ex)\n        {\n            if (null != byteBuffer)\n            {\n                BufferUtil.free(byteBuffer);\n            }\n\n            throw new RuntimeException(ex);\n        }\n\n        return byteBuffer;\n    }\n\n    public static void ensureMarkFileLink(final File serviceDir, final File actualFile, final String linkFilename)\n    {\n        final Path linkFile = new File(serviceDir, linkFilename).toPath();\n        if (serviceDir.equals(actualFile.getParentFile()))\n        {\n            try\n            {\n                Files.deleteIfExists(linkFile);\n            }\n            catch (final IOException ex)\n            {\n                throw new RuntimeException(\"failed to remove old link file\", ex);\n            }\n        }\n        else\n        {\n            try\n            {\n                Files.write(\n                    linkFile,\n                    actualFile.getParent().getBytes(US_ASCII),\n                    StandardOpenOption.CREATE,\n                    StandardOpenOption.WRITE,\n                    StandardOpenOption.TRUNCATE_EXISTING);\n            }\n            catch (final IOException ex)\n            {\n                throw new RuntimeException(\"failed to create link for mark file directory\", ex);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.function.Consumer;\nimport java.util.function.IntConsumer;\n\npublic class MarkFile implements AutoCloseable {\n    private final File markFile;\n    private final MappedByteBuffer mappedBuffer;\n    private final UnsafeBuffer buffer;\n    private final AtomicBoolean isClosed;\n\n    public MarkFile(File markFile, boolean createIfNotExists, int majorVersion, int minorVersion, int patchVersion, long maxTimestampAge, EpochClock epochClock, IntConsumer versionCheck, Consumer<String> errorConsumer) {\n        this.markFile = markFile;\n        this.isClosed = new AtomicBoolean(false);\n        this.mappedBuffer = mapNewOrExistingMarkFile(markFile, createIfNotExists, majorVersion, minorVersion, patchVersion, maxTimestampAge, epochClock, versionCheck, errorConsumer);\n        this.buffer = new UnsafeBuffer(mappedBuffer);\n    }\n\n    public static MappedByteBuffer mapNewOrExistingMarkFile(File markFile, boolean createIfNotExists, int majorVersion, int minorVersion, int patchVersion, long maxTimestampAge, EpochClock epochClock, IntConsumer versionCheck, Consumer<String> errorConsumer) {\n        try {\n            if (!markFile.exists() && createIfNotExists) {\n                markFile.createNewFile();\n            }\n            FileChannel channel = FileChannel.open(markFile.toPath(), java.nio.file.StandardOpenOption.READ, java.nio.file.StandardOpenOption.WRITE);\n            MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, markFile.length());\n            int storedMajor = buffer.getInt(0);\n            int storedMinor = buffer.getInt(4);\n            int storedPatch = buffer.getInt(8);\n            long storedTimestamp = buffer.getLong(12);\n\n            if (storedMajor != majorVersion || storedMinor != minorVersion || storedPatch != patchVersion) {\n                versionCheck.accept((storedMajor << 16) | (storedMinor << 8) | storedPatch);\n            }\n\n            long currentTime = epochClock.currentTimeMillis();\n            if (currentTime - storedTimestamp > maxTimestampAge) {\n                errorConsumer.accept(\"Timestamp expired\");\n            }\n\n            return buffer;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static void ensureMarkFileLink(File markFile, File targetDir, String linkName) {\n        try {\n            Path targetPath = targetDir.toPath().resolve(linkName);\n            Path sourcePath = markFile.toPath();\n            Files.createSymbolicLink(targetPath, sourcePath);\n        } catch (IOException e) {\n            // Handle existing link or other errors\n        }\n    }\n\n    @Override\n    public void close() {\n        if (isClosed.compareAndSet(false, true)) {\n            try {\n                mappedBuffer.clear();\n            } catch (Exception e) {\n                // Handle exception\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 371,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ ordered message consumer using the DefaultMQPushConsumer for push-based message consumption with ordered message processing.\n\nClass Description: The RocketMQOrderedConsumer class provides functionality to consume messages from RocketMQ in an ordered manner. It handles consumer initialization, topic subscription, message listening, and consumer lifecycle management. The class includes an inner class for ordered message processing.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The main consumer instance that handles message consumption from RocketMQ\n\nMethods:\n- RocketMQOrderedConsumer(String namesrvAddr, String consumerGroup) -> void - Constructor that initializes the consumer with NameServer address and consumer group\n- subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- registerMessageListener(MessageListenerOrderly listener) -> void - Registers an ordered message listener for processing incoming messages\n- start() -> void - Starts the consumer to begin message consumption\n- shutdown() -> void - Shuts down the consumer gracefully\n\nInner Class:\n- OrderedMessageListener: MessageListenerOrderly - Implements ordered message processing logic with consumeMessage method\n  - consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) -> ConsumeOrderlyStatus - Processes a batch of messages and returns consumption status",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class RocketMQOrderedConsumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public RocketMQOrderedConsumer(String namesrvAddr, String consumerGroup) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerOrderly listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class OrderedMessageListener implements MessageListenerOrderly {\n        @Override\n        public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n            System.out.printf(System.currentTimeMillis() + \",\" + Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeOrderlyStatus.SUCCESS;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.client.consumer.consumemode.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\n\npublic class RocketMQOrderedConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public RocketMQOrderedConsumer(String namesrvAddr, String consumerGroup) {\n        this.consumer = new DefaultMQPushConsumer(consumerGroup);\n        this.consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        this.consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerOrderly listener) {\n        this.consumer.setMessageListener(listener);\n    }\n\n    public void start() {\n        this.consumer.start();\n    }\n\n    public void shutdown() {\n        this.consumer.shutdown();\n    }\n\n    public static class OrderedMessageListener implements MessageListenerOrderly {\n        @Override\n        public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n            return ConsumeOrderlyStatus.SUCCESS;\n        }\n    }\n}"
  },
  {
    "Task_id": 372,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to asynchronously process messages from a specified topic, handling message consumption with retry logic for failed messages.\n\nClass Description: The PlanConsumer class is a Spring component that initializes and manages a RocketMQ push consumer. It subscribes to a specific topic, processes incoming messages, and implements retry logic for failed message consumption. The consumer is configured to start automatically after bean initialization.\n\nAttributes:\n- consumerGroup: String - The consumer group name for the RocketMQ consumer, injected from properties\n- namesrvAddr: String - The NameServer address for RocketMQ, injected from properties\n- logger: Logger - SLF4J logger instance for logging messages and errors\n\nMethods:\n- defaultMQPushConsumer(): void - Initializes and starts the RocketMQ consumer. This method is automatically called after bean construction (@PostConstruct). It:\n  1. Creates a DefaultMQPushConsumer instance\n  2. Configures NameServer address\n  3. Subscribes to the specified topic with wildcard tag filter\n  4. Sets consumption offset strategy\n  5. Registers a concurrent message listener\n  6. Starts the consumer\n  The message listener processes messages, logs successful consumption, and implements retry logic (up to 3 attempts) for failed messages.\n\nInput: None (Configuration is injected via @Value annotations)\n\nOutput: None (The consumer runs continuously, processing messages as they arrive)",
    "Canonical_solution": "import com.alibaba.fastjson.JSON;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport top.lrshuai.mq.comment.Const;\nimport top.lrshuai.mq.test.entity.AccountPlan;\n\nimport javax.annotation.PostConstruct;\nimport java.util.List;\n\n@Component\npublic class PlanConsumer {\n\n    @Value(\"${apache.rocketmq.consumer.PushConsumer}\")\n    private String consumerGroup;\n\n    @Value(\"${apache.rocketmq.namesrvAddr}\")\n    private String namesrvAddr;\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @PostConstruct\n    public void defaultMQPushConsumer() {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        try {\n            consumer.subscribe(Const.PLAN_TOPIC, \"*\");\n            consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n            consumer.registerMessageListener((MessageListenerConcurrently) (list, context) -> {\n                MessageExt tempMsg = null;\n                try {\n                    for (MessageExt msg : list) {\n                        tempMsg = msg;\n                        String messageBody = new String(msg.getBody(), \"utf-8\");\n                        AccountPlan plan = JSON.parseObject(messageBody, AccountPlan.class);\n                        logger.info(\"\u6d88\u8d39\u6210\u529f\uff1amsgId={}\uff0cplan={}\", msg.getMsgId(), plan);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    if(tempMsg.getReconsumeTimes() == 3) {\n                        logger.error(\"msg consume error by:{}\", tempMsg);\n                        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n                    }\n                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            });\n            consumer.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.*;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\n\n@Component\npublic class PlanConsumer {\n\n    @Value(\"${rocketmq.consumer.group}\")\n    private String consumerGroup;\n\n    @Value(\"${rocketmq.namesrv.addr}\")\n    private String namesrvAddr;\n\n    private static final Logger logger = LoggerFactory.getLogger(PlanConsumer.class);\n\n    @PostConstruct\n    public void defaultMQPushConsumer() {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n        consumer.setMaxReconsumeTimes(3);\n        consumer.subscribe(\"yourTopicName\", \"*\");\n        consumer.registerMessageListener((MessageListenerConcurrently) (messages, context) -> {\n            try {\n                for (Message message : messages) {\n                    logger.info(\"Processing message: {}\", new String(message.getBody()));\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            } catch (Exception e) {\n                logger.error(\"Failed to process messages\", e);\n                return ConsumeConcurrentlyStatus.RECONSUME_LATER;\n            }\n        });\n        try {\n            consumer.start();\n        } catch (Exception e) {\n            logger.error(\"Failed to start consumer\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 374,
    "Instruction": "Task Description: Implement a RocketMQ consumer class that handles message consumption from a Logical Message Queue (LMQ) using POP mode, with proper initialization, message processing, and cleanup functionality.\n\nClass Description: LMQPushPopConsumer is a Java class that demonstrates how to consume messages from a RocketMQ Logical Message Queue (LMQ) using POP (Pull-on-Poll) mode. It handles consumer initialization, topic subscription, message processing, and resource cleanup.\n\nAttributes:\n- CLUSTER_NAME: [String] - The name of the RocketMQ cluster\n- BROKER_NAME: [String] - The name of the target broker\n- TOPIC: [String] - The parent topic name\n- LMQ_TOPIC: [String] - The Logical Message Queue topic name (prefixed with LMQ_PREFIX)\n- NAMESRV_ADDR: [String] - The NameServer address\n- CONSUMER_GROUP: [String] - The consumer group name\n- BROKER_ADDR_MAP: [HashMap<Long, String>] - Mapping of broker IDs to their addresses\n- consumer: [DefaultMQPushConsumer] - The RocketMQ push consumer instance\n- mqAdminExt: [DefaultMQAdminExt] - The RocketMQ admin tool instance\n\nMethods:\n- initializeConsumer(): [void] -> [void] - Initializes the consumer by setting up POP mode, configuring consumer properties, subscribing to the topic, and registering a message listener\n- switchPop(): [void] -> [void] - Configures the broker to use POP mode for message consumption\n- shutdown(): [void] -> [void] - Shuts down the consumer and admin instances to release resources",
    "Canonical_solution": "import com.google.common.collect.Lists;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageRequestMode;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.route.TopicRouteData;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n\npublic class LMQPushPopConsumer {\n    public static final String CLUSTER_NAME = \"DefaultCluster\";\n    public static final String BROKER_NAME = \"broker-a\";\n    public static final String TOPIC = \"TopicLMQParent\";\n    public static final String LMQ_TOPIC = MixAll.LMQ_PREFIX + \"456\";\n    public static final String NAMESRV_ADDR = \"127.0.0.1:9876\";\n    public static final String CONSUMER_GROUP = \"CID_LMQ_POP_1\";\n    public static final HashMap<Long, String> BROKER_ADDR_MAP = new HashMap<Long, String>() {\n        {\n            put(MixAll.MASTER_ID, \"127.0.0.1:10911\");\n        }\n    };\n\n    private DefaultMQPushConsumer consumer;\n    private DefaultMQAdminExt mqAdminExt;\n\n    public void initializeConsumer() throws Exception {\n        switchPop();\n\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamesrvAddr(NAMESRV_ADDR);\n        consumer.subscribe(LMQ_TOPIC, \"*\");\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        consumer.setClientRebalance(false);\n        consumer.start();\n\n        consumer.getDefaultMQPushConsumerImpl().getmQClientFactory().updateTopicRouteInfoFromNameServer(TOPIC);\n\n        final TopicRouteData topicRouteData = new TopicRouteData();\n        final BrokerData brokerData = new BrokerData();\n        brokerData.setCluster(CLUSTER_NAME);\n        brokerData.setBrokerName(BROKER_NAME);\n        brokerData.setBrokerAddrs(BROKER_ADDR_MAP);\n        topicRouteData.setBrokerDatas(Lists.newArrayList(brokerData));\n        consumer.getDefaultMQPushConsumerImpl().getmQClientFactory().getTopicRouteTable().put(LMQ_TOPIC, topicRouteData);\n        consumer.getDefaultMQPushConsumerImpl().getmQClientFactory().doRebalance();\n    }\n\n    private void switchPop() throws Exception {\n        mqAdminExt = new DefaultMQAdminExt();\n        mqAdminExt.setNamesrvAddr(NAMESRV_ADDR);\n        mqAdminExt.start();\n        List<BrokerData> brokerDatas = mqAdminExt.examineTopicRouteInfo(TOPIC).getBrokerDatas();\n        for (BrokerData brokerData : brokerDatas) {\n            Set<String> brokerAddrs = new HashSet<>(brokerData.getBrokerAddrs().values());\n            for (String brokerAddr : brokerAddrs) {\n                mqAdminExt.setMessageRequestMode(brokerAddr, LMQ_TOPIC, CONSUMER_GROUP, MessageRequestMode.POP, 8,\n                    3_000);\n            }\n        }\n    }\n\n    public void shutdown() {\n        if (consumer != null) {\n            consumer.shutdown();\n        }\n        if (mqAdminExt != null) {\n            mqAdminExt.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.admin.BrokerConfig;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class LMQPushPopConsumer {\n    private static final String CLUSTER_NAME = \"defaultCluster\";\n    private static final String BROKER_NAME = \"defaultBroker\";\n    private static final String TOPIC = \"parentTopic\";\n    private static final String LMQ_TOPIC = \"LMQ_prefix_parentTopic\";\n    private static final String NAMESRV_ADDR = \"localhost:9876\";\n    private static final String CONSUMER_GROUP = \"lmqConsumerGroup\";\n    private static final Map<Long, String> BROKER_ADDR_MAP = new HashMap<>();\n\n    private DefaultMQPushConsumer consumer;\n    private DefaultMQAdminExt mqAdminExt;\n\n    public void initializeConsumer() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamesrvAddr(NAMESRV_ADDR);\n        consumer.setClusterName(CLUSTER_NAME);\n        consumer.subscribe(LMQ_TOPIC, \"*\");\n        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {\n            for (MessageExt msg : msgs) {\n                // Process message\n                System.out.println(\"Received message: \" + new String(msg.getBody()));\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n        consumer.start();\n    }\n\n    public void switchPop() throws MQClientException {\n        mqAdminExt = new DefaultMQAdminExt();\n        mqAdminExt.setNamesrvAddr(NAMESRV_ADDR);\n        mqAdminExt.start();\n        for (Map.Entry<Long, String> entry : BROKER_ADDR_MAP.entrySet()) {\n            BrokerConfig brokerConfig = new BrokerConfig();\n            brokerConfig.setBrokerId(entry.getKey());\n            brokerConfig.setBrokerName(BROKER_NAME);\n            brokerConfig.setBrokerIP1(entry.getValue());\n            brokerConfig.setPopMode(true); // Hypothetical method for POP mode\n            mqAdminExt.updateBrokerConfig(brokerConfig);\n        }\n    }\n\n    public void shutdown() {\n        if (consumer != null) {\n            consumer.shutdown();\n        }\n        if (mqAdminExt != null) {\n            mqAdminExt.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 376,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer to asynchronously receive and process messages from a specified topic with tag filtering.\n\nClass Description: The PushConsumer class is a RocketMQ message consumer that subscribes to a topic and processes incoming messages using a concurrent message listener. It supports broadcasting message model and can be configured with various consumption strategies.\n\nAttributes:\n- CONSUMER_GROUP: [String] - The consumer group name for this consumer instance\n- DEFAULT_NAMESRVADDR: [String] - Default NameServer address for RocketMQ\n- TOPIC: [String] - The topic to subscribe to for messages\n- SUB_EXPRESSION: [String] - Tag filter expression for message subscription\n- consumer: [DefaultMQPushConsumer] - The RocketMQ push consumer instance\n\nMethods:\n- PushConsumer() [Constructor] -> [void] - Initializes the consumer with default settings, subscribes to the topic, and registers the message listener\n- start() -> [void] - Starts the consumer to begin receiving messages\n- shutdown() -> [void] - Shuts down the consumer and releases resources",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;\n\npublic class PushConsumer {\n\n    public static final String CONSUMER_GROUP = \"please_rename_unique_group_name_1\";\n    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    public static final String TOPIC = \"TopicTest\";\n    public static final String SUB_EXPRESSION = \"TagA || TagC || TagD\";\n\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.setMessageModel(MessageModel.BROADCASTING);\n        consumer.subscribe(TOPIC, SUB_EXPRESSION);\n        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {\n            System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n        System.out.printf(\"Broadcast Consumer Started.%n\");\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.*;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n\nimport java.util.List;\n\npublic class PushConsumer {\n    private static final String CONSUMER_GROUP = \"default_consumer_group\";\n    private static final String DEFAULT_NAMESRVADDR = \"localhost:9876\";\n    private static final String TOPIC = \"default_topic\";\n    private static final String SUB_EXPRESSION = \"*\";\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer() throws Exception {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        consumer.setMessageModel(MessageModel.BROADCASTING);\n        consumer.subscribe(TOPIC, SUB_EXPRESSION);\n        consumer.registerMessageListener((MessageListenerConcurrently) (messages, context) -> {\n            for (MessageExt message : messages) {\n                System.out.println(\"Received message: \" + new String(message.getBody()));\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void start() throws Exception {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 377,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer with namespace support to asynchronously consume messages from a specified topic.\n\nClass Description: The PushConsumerWithNamespace class is designed to consume messages from a RocketMQ topic using a push-based model. It supports namespace configuration and provides methods to initialize, start, and shutdown the consumer. The consumer processes messages concurrently and prints message details to the console.\n\nAttributes:\n- NAMESPACE: [String] - The namespace identifier for the RocketMQ instance\n- CONSUMER_GROUP: [String] - The consumer group name\n- DEFAULT_NAMESRVADDR: [String] - The NameServer address\n- TOPIC: [String] - The topic to subscribe to\n- consumer: [DefaultMQPushConsumer] - The RocketMQ push consumer instance\n\nMethods:\n- initializeConsumer(): [void]() -> [void] - Initializes the consumer with namespace, NameServer address, topic subscription, and message listener configuration\n- startConsumer(): [void]() -> [void] - Starts the consumer to begin message consumption\n- shutdownConsumer(): [void]() -> [void] - Shuts down the consumer gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\n\npublic class PushConsumerWithNamespace {\n    public static final String NAMESPACE = \"InstanceTest\";\n    public static final String CONSUMER_GROUP = \"cidTest\";\n    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    public static final String TOPIC = \"NAMESPACE_TOPIC\";\n\n    private DefaultMQPushConsumer consumer;\n\n    public void initializeConsumer() throws Exception {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamespaceV2(NAMESPACE);\n        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        consumer.subscribe(TOPIC, \"*\");\n        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {\n            msgs.forEach(msg -> System.out.printf(\"Msg topic is:%s, MsgId is:%s, reconsumeTimes is:%s%n\", \n                msg.getTopic(), msg.getMsgId(), msg.getReconsumeTimes()));\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void startConsumer() throws Exception {\n        consumer.start();\n    }\n\n    public void shutdownConsumer() {\n        consumer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.*;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.exception.MQClientException;\n\nimport java.util.List;\n\npublic class PushConsumerWithNamespace {\n    private static final String NAMESPACE = \"your_namespace\";\n    private static final String CONSUMER_GROUP = \"your_consumer_group\";\n    private static final String DEFAULT_NAMESRVADDR = \"localhost:9876\";\n    private static final String TOPIC = \"your_topic\";\n    private DefaultMQPushConsumer consumer;\n\n    public void initializeConsumer() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamespace(NAMESPACE);\n        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        consumer.subscribe(TOPIC, \"*\");\n        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {\n            for (MessageExt msg : msgs) {\n                System.out.println(\"Received message: \" + new String(msg.getBody()));\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void startConsumer() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdownConsumer() {\n        if (consumer != null) {\n            consumer.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 379,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to subscribe to messages from a specified topic and process them asynchronously.\n\nClass Description: The Consumer class is a RocketMQ message consumer that uses push-based consumption model. It allows subscribing to topics, registering message listeners, and managing the consumer lifecycle (startup and shutdown).\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- Constructor: Consumer(String consumerGroup, String namesrvAddr) -> void - Initializes the consumer with a consumer group name and NameServer address. Sets the consumption offset strategy to start from the first offset.\n- subscribe: subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering using a subscription expression.\n- registerMessageListener: registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a concurrent message listener to handle incoming messages.\n- start: start() -> void - Starts the consumer to begin message consumption.\n- shutdown: shutdown() -> void - Shuts down the consumer gracefully.\n\nNested Class:\n- SimpleMessageListener: Implements MessageListenerConcurrently interface to provide basic message handling functionality. Prints received messages and returns CONSUME_SUCCESS status.",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class Consumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n        System.out.println(String.format(\"Consumer %s Started.\", consumer.getConsumerGroup()));\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                                                       ConsumeConcurrentlyContext context) {\n            System.out.printf(Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.*;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.protocol.heartbeat.ConsumeFromWhere;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Consumer {\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer(String consumerGroup, String namesrvAddr) throws Exception {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws Exception {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        private final AtomicInteger counter = new AtomicInteger(0);\n\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> messages, ConsumeConcurrentlyContext context) {\n            for (MessageExt msg : messages) {\n                System.out.println(\"Received message: \" + new String(msg.getBody()) + \" | MessageId: \" + msg.getMsgId());\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 380,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to asynchronously receive and process messages from a specified topic, measuring the delay between message delivery and consumption.\n\nClass Description: The TimerConsumer class is a RocketMQ push consumer that subscribes to a specified topic, processes incoming messages, and calculates the time delay between when messages were delivered and when they were consumed. It provides command-line configuration for NameServer address and topic name.\n\nAttributes:\n- topic: String - The RocketMQ topic to subscribe to for messages\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- TimerConsumer(String[] args) - Constructor - Initializes the consumer with command-line arguments for NameServer address and topic\n  Input: args: String[] - Command-line arguments containing optional NameServer address and topic\n  Output: None\n\n- start() - void - Starts the consumer, subscribes to the topic, and registers a message listener\n  Input: None\n  Output: None (throws MQClientException if startup fails)\n\n- buildCommandlineOptions(Options options) - Options - Helper method to define command-line options\n  Input: options: Options - Apache Commons CLI Options object to extend\n  Output: Options - The extended Options object with consumer-specific options",
    "Canonical_solution": "import org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.DefaultParser;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.srvutil.ServerUtil;\n\nimport java.util.List;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class TimerConsumer {\n    private final String topic;\n    private final DefaultMQPushConsumer consumer;\n\n    public TimerConsumer(String[] args) {\n        Options options = ServerUtil.buildCommandlineOptions(new Options());\n        final CommandLine commandLine = ServerUtil.parseCmdLine(\"benchmarkTimerConsumer\", args, buildCommandlineOptions(options), new DefaultParser());\n        if (null == commandLine) {\n            System.exit(-1);\n        }\n\n        final String namesrvAddr = commandLine.hasOption('n') ? commandLine.getOptionValue('t').trim() : \"localhost:9876\";\n        topic = commandLine.hasOption('t') ? commandLine.getOptionValue('t').trim() : \"BenchmarkTest\";\n        System.out.printf(\"namesrvAddr: %s, topic: %s%n\", namesrvAddr, topic);\n\n        consumer = new DefaultMQPushConsumer(\"benchmark_consumer\");\n        consumer.setInstanceName(Long.toString(System.currentTimeMillis()));\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws MQClientException {\n        consumer.subscribe(topic, \"*\");\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                MessageExt msg = msgs.get(0);\n                long now = System.currentTimeMillis();\n\n                long deliverTimeMs = Long.parseLong(msg.getProperty(\"MY_RECORD_TIMER_DELIVER_MS\"));\n                long delayedDuration = now - deliverTimeMs;\n\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        consumer.start();\n        System.out.printf(\"Start receiving messages%n\");\n    }\n\n    private Options buildCommandlineOptions(Options options) {\n        Option opt = new Option(\"n\", \"namesrvAddr\", true, \"Nameserver address, default: localhost:9876\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        opt = new Option(\"t\", \"topic\", true, \"Send messages to which topic, default: BenchmarkTest\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        return options;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.commons.cli.*;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.*;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.exception.MQClientException;\n\npublic class TimerConsumer {\n    private String topic;\n    private String nameServer;\n    private DefaultMQPushConsumer consumer;\n\n    public TimerConsumer(String[] args) throws Exception {\n        Options options = new Options();\n        buildCommandlineOptions(options);\n        CommandLineParser parser = new DefaultParser();\n        CommandLine cmd = parser.parse(options, args);\n        this.topic = cmd.getOptionValue(\"t\");\n        this.nameServer = cmd.getOptionValue(\"n\");\n    }\n\n    public void start() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(\"timer-consumer-group\");\n        consumer.setNamesrvAddr(nameServer);\n        consumer.subscribe(topic, \"*\");\n        consumer.registerMessageListener((MessageListenerConcurrently) (messages, context) -> {\n            for (MessageExt msg : messages) {\n                long delay = System.currentTimeMillis() - msg.getStoreTimestamp();\n                System.out.println(\"Message delay: \" + delay + \" ms\");\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n        consumer.start();\n    }\n\n    private Options buildCommandlineOptions(Options options) {\n        Option nameServerOpt = Option.builder(\"n\").longOpt(\"namesrv\").hasArg().argName(\"address\").desc(\"NameServer address\").build();\n        Option topicOpt = Option.builder(\"t\").longOpt(\"topic\").hasArg().argName(\"topic\").desc(\"Topic name\").build();\n        options.addOption(nameServerOpt);\n        options.addOption(topicOpt);\n        return options;\n    }\n}\n```"
  },
  {
    "Task_id": 381,
    "Instruction": "Task Description: Implement a Java class that acts as a RocketMQ producer to send messages to a specified topic using Apache RocketMQ client library.\n\nClass Description: The RocketMQProducer class encapsulates the functionality to create, configure, and manage a RocketMQ message producer. It handles producer initialization, message creation, message sending, and producer shutdown.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- namesrvAddr: String - The address of the NameServer for service discovery\n- producerGroup: String - The group name of the producer\n- topic: String - The target topic for message sending\n- messageSize: int - The size of the message to be sent\n\nMethods:\n- RocketMQProducer(String, String, String, int) - Constructor - Initializes the producer with NameServer address, producer group, topic, and message size\n- start() -> void - Configures and starts the producer instance\n- sendMessage() -> SendResult - Creates and sends a message to the configured topic\n- shutdown() -> void - Shuts down the producer instance",
    "Canonical_solution": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport java.nio.charset.StandardCharsets;\n\npublic class RocketMQProducer {\n\n    private DefaultMQProducer producer;\n    private String namesrvAddr;\n    private String producerGroup;\n    private String topic;\n    private int messageSize;\n\n    public RocketMQProducer(String namesrvAddr, String producerGroup, String topic, int messageSize) {\n        this.namesrvAddr = namesrvAddr;\n        this.producerGroup = producerGroup;\n        this.topic = topic;\n        this.messageSize = messageSize;\n        this.producer = new DefaultMQProducer(producerGroup);\n    }\n\n    public void start() throws MQClientException {\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.setVipChannelEnabled(false);\n        producer.start();\n    }\n\n    public SendResult sendMessage() throws Exception {\n        StringBuilder sb = new StringBuilder();\n        for (int j = 0; j < messageSize; j += 10) {\n            sb.append(\"hello baby\");\n        }\n        byte[] body = sb.toString().getBytes(StandardCharsets.UTF_8);\n        Message message = new Message(topic, body);\n        return producer.send(message);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.SendResult;\n\npublic class RocketMQProducer {\n    private DefaultMQProducer producer;\n    private String namesrvAddr;\n    private String producerGroup;\n    private String topic;\n    private int messageSize;\n\n    public RocketMQProducer(String namesrvAddr, String producerGroup, String topic, int messageSize) {\n        this.namesrvAddr = namesrvAddr;\n        this.producerGroup = producerGroup;\n        this.topic = topic;\n        this.messageSize = messageSize;\n    }\n\n    public void start() {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n        try {\n            producer.start();\n        } catch (MQClientException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public SendResult sendMessage() {\n        byte[] body = new byte[messageSize];\n        for (int i = 0; i < messageSize; i++) {\n            body[i] = 0;\n        }\n        Message msg = new Message(topic, body);\n        try {\n            return producer.send(msg);\n        } catch (MQClientException | InterruptedException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public void shutdown() {\n        if (producer != null) {\n            producer.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 382,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer capable of sending messages to both regular topics and LMQ (Light Message Queue) topics. The producer should support initialization, message sending with custom properties, and proper shutdown.\n\nClass Description: The LMQProducer class is a RocketMQ producer implementation that demonstrates how to send messages to both regular topics and LMQ topics. It handles producer lifecycle management and message sending with multi-dispatch capabilities.\n\nAttributes:\n- PRODUCER_GROUP: String - The name of the producer group\n- DEFAULT_NAMESRVADDR: String - Default NameServer address (format: \"ip:port\")\n- TOPIC: String - The main topic to which messages will be sent\n- TAG: String - The tag for messages\n- LMQ_TOPIC_1: String - First LMQ topic (prefixed with MixAll.LMQ_PREFIX)\n- LMQ_TOPIC_2: String - Second LMQ topic (prefixed with MixAll.LMQ_PREFIX)\n- producer: DefaultMQProducer - The RocketMQ producer instance\n\nMethods:\n- initialize() throws MQClientException -> void - Initializes the producer by creating a new DefaultMQProducer instance, setting the NameServer address, and starting the producer\n- sendMessage(int messageId) throws Exception -> SendResult - Creates and sends a message with the given ID, setting message keys and LMQ dispatch properties\n- shutdown() -> void - Shuts down the producer instance gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class LMQProducer {\n    public static final String PRODUCER_GROUP = \"ProducerGroupName\";\n    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    public static final String TOPIC = \"TopicLMQParent\";\n    public static final String TAG = \"TagA\";\n    public static final String LMQ_TOPIC_1 = MixAll.LMQ_PREFIX + \"123\";\n    public static final String LMQ_TOPIC_2 = MixAll.LMQ_PREFIX + \"456\";\n\n    private DefaultMQProducer producer;\n\n    public void initialize() throws MQClientException {\n        producer = new DefaultMQProducer(PRODUCER_GROUP);\n        producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        producer.start();\n    }\n\n    public SendResult sendMessage(int messageId) throws Exception {\n        Message msg = new Message(TOPIC, TAG, (\"Hello RocketMQ \" + messageId).getBytes(RemotingHelper.DEFAULT_CHARSET));\n        msg.setKeys(\"Key\" + messageId);\n        msg.putUserProperty(MessageConst.PROPERTY_INNER_MULTI_DISPATCH,\n            String.join(MixAll.LMQ_DISPATCH_SEPARATOR, LMQ_TOPIC_1, LMQ_TOPIC_2));\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.util.MixAll;\n\npublic class LMQProducer {\n    private static final String PRODUCER_GROUP = \"LMQProducerGroup\";\n    private static final String DEFAULT_NAMESRVADDR = \"localhost:9876\";\n    private static final String TOPIC = \"RegularTopic\";\n    private static final String TAG = \"TagA\";\n    private static final String LMQ_TOPIC_1 = MixAll.LMQ_PREFIX + \"lmqTopic1\";\n    private static final String LMQ_TOPIC_2 = MixAll.LMQ_PREFIX + \"lmqTopic2\";\n    private DefaultMQProducer producer;\n\n    public void initialize() throws MQClientException {\n        producer = new DefaultMQProducer(PRODUCER_GROUP);\n        producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        producer.start();\n    }\n\n    public SendResult sendMessage(int messageId) throws Exception {\n        Message msg = new Message(TOPIC, TAG, (\"messageId:\" + messageId).getBytes());\n        msg.putUserProperty(\"messageId\", String.valueOf(messageId));\n        msg.putUserProperty(\"lmqTopic1\", LMQ_TOPIC_1);\n        msg.putUserProperty(\"lmqTopic2\", LMQ_TOPIC_2);\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        if (producer != null) {\n            producer.shutdown();\n        }\n    }\n}"
  },
  {
    "Task_id": 383,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ message producer sink for sending messages to RocketMQ topics, supporting both synchronous and asynchronous message delivery, batch processing, and configurable message delay levels.\n\nClass Description: The RocketMQSink class is a Flink-compatible sink that sends messages to RocketMQ. It handles message serialization, topic selection, and provides configurable message delivery options including synchronous/asynchronous sending, batch processing, and delayed message delivery.\n\nAttributes:\n- LOG: Logger - Logger instance for logging debug and error messages\n- producer: DefaultMQProducer - RocketMQ producer instance for sending messages\n- async: boolean - Flag indicating whether to use asynchronous message sending\n- props: Properties - Configuration properties for the producer\n- topicSelector: TopicSelector<IN> - Selector for determining message topics and tags\n- serializationSchema: KeyValueSerializationSchema<IN> - Schema for serializing input data\n- batchFlushOnCheckpoint: boolean - Flag indicating whether to use batch processing\n- batchSize: int - Maximum batch size for batch processing\n- batchList: List<Message> - Buffer for batch messages\n- messageDeliveryDelayLevel: int - Configuration for delayed message delivery\n\nMethods:\n- RocketMQSink(KeyValueSerializationSchema<IN>, TopicSelector<IN>, Properties) -> void - Constructor that initializes the sink with serialization schema, topic selector, and configuration properties\n- open(Configuration) -> void - Initializes the RocketMQ producer and prepares for message sending\n- invoke(IN) -> void - Processes and sends a single message (either immediately or adds to batch)\n- prepareMessage(IN) -> Message - Creates a RocketMQ Message object from input data\n- close() -> void - Cleans up resources and shuts down the producer\n- flushSync() -> void - Sends all batched messages synchronously (used when batch processing is enabled)",
    "Canonical_solution": "import com.zhisheng.connectors.rocketmq.common.selector.TopicSelector;\nimport com.zhisheng.connectors.rocketmq.common.serialization.KeyValueSerializationSchema;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Properties;\n\npublic class RocketMQSink<IN> {\n    private static final Logger LOG = LoggerFactory.getLogger(RocketMQSink.class);\n\n    private transient DefaultMQProducer producer;\n    private boolean async;\n    private Properties props;\n    private TopicSelector<IN> topicSelector;\n    private KeyValueSerializationSchema<IN> serializationSchema;\n    private boolean batchFlushOnCheckpoint;\n    private int batchSize = 1000;\n    private List<Message> batchList;\n    private int messageDeliveryDelayLevel;\n\n    public RocketMQSink(KeyValueSerializationSchema<IN> schema, TopicSelector<IN> topicSelector, Properties props) {\n        this.serializationSchema = schema;\n        this.topicSelector = topicSelector;\n        this.props = props;\n        this.messageDeliveryDelayLevel = RocketMQUtils.getInteger(this.props, RocketMQConfig.MSG_DELAY_LEVEL,\n                RocketMQConfig.MSG_DELAY_LEVEL00);\n        if (this.messageDeliveryDelayLevel < RocketMQConfig.MSG_DELAY_LEVEL00) {\n            this.messageDeliveryDelayLevel = RocketMQConfig.MSG_DELAY_LEVEL00;\n        } else if (this.messageDeliveryDelayLevel > RocketMQConfig.MSG_DELAY_LEVEL18) {\n            this.messageDeliveryDelayLevel = RocketMQConfig.MSG_DELAY_LEVEL18;\n        }\n    }\n\n    public void open(Configuration parameters) throws Exception {\n        Validate.notEmpty(props, \"Producer properties can not be empty\");\n        Validate.notNull(topicSelector, \"TopicSelector can not be null\");\n        Validate.notNull(serializationSchema, \"KeyValueSerializationSchema can not be null\");\n\n        producer = new DefaultMQProducer();\n        producer.setInstanceName(String.valueOf(getRuntimeContext().getIndexOfThisSubtask()));\n        RocketMQConfig.buildProducerConfigs(props, producer);\n        batchList = new LinkedList<>();\n\n        try {\n            producer.start();\n        } catch (MQClientException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public void invoke(IN input) throws Exception {\n        Message msg = prepareMessage(input);\n\n        if (batchFlushOnCheckpoint) {\n            batchList.add(msg);\n            if (batchList.size() >= batchSize) {\n                flushSync();\n            }\n            return;\n        }\n\n        if (async) {\n            try {\n                producer.send(msg, new SendCallback() {\n                    @Override\n                    public void onSuccess(SendResult sendResult) {\n                        LOG.debug(\"Async send message success! result: {}\", sendResult);\n                    }\n\n                    @Override\n                    public void onException(Throwable throwable) {\n                        if (throwable != null) {\n                            LOG.error(\"Async send message failure!\", throwable);\n                        }\n                    }\n                });\n            } catch (Exception e) {\n                LOG.error(\"Async send message failure!\", e);\n            }\n        } else {\n            try {\n                SendResult result = producer.send(msg);\n                LOG.debug(\"Sync send message result: {}\", result);\n            } catch (Exception e) {\n                LOG.error(\"Sync send message failure!\", e);\n            }\n        }\n    }\n\n    private Message prepareMessage(IN input) {\n        String topic = topicSelector.getTopic(input);\n        String tag = topicSelector.getTag(input) != null ? topicSelector.getTag(input) : \"\";\n\n        byte[] k = serializationSchema.serializeKey(input);\n        String key = k != null ? new String(k, StandardCharsets.UTF_8) : \"\";\n        byte[] value = serializationSchema.serializeValue(input);\n\n        Validate.notNull(topic, \"the message topic is null\");\n        Validate.notNull(value, \"the message body is null\");\n\n        Message msg = new Message(topic, tag, key, value);\n        if (this.messageDeliveryDelayLevel > RocketMQConfig.MSG_DELAY_LEVEL00) {\n            msg.setDelayTimeLevel(this.messageDeliveryDelayLevel);\n        }\n        return msg;\n    }\n\n    public void close() throws Exception {\n        if (producer != null) {\n            flushSync();\n            producer.shutdown();\n        }\n    }\n\n    private void flushSync() throws Exception {\n        if (batchFlushOnCheckpoint) {\n            synchronized (batchList) {\n                if (batchList.size() > 0) {\n                    producer.send(batchList);\n                    batchList.clear();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\npublic class RocketMQSink<IN> extends RichSinkFunction<IN> {\n    private static final Logger LOG = LoggerFactory.getLogger(RocketMQSink.class);\n    private DefaultMQProducer producer;\n    private boolean async;\n    private Properties props;\n    private TopicSelector<IN> topicSelector;\n    private KeyValueSerializationSchema<IN> serializationSchema;\n    private boolean batchFlushOnCheckpoint;\n    private int batchSize;\n    private List<Message> batchList;\n    private int messageDeliveryDelayLevel;\n\n    public RocketMQSink(KeyValueSerializationSchema<IN> serializationSchema, TopicSelector<IN> topicSelector, Properties props) {\n        this.serializationSchema = serializationSchema;\n        this.topicSelector = topicSelector;\n        this.props = props;\n        this.async = Boolean.parseBoolean(props.getProperty(\"async\", \"false\"));\n        this.batchFlushOnCheckpoint = Boolean.parseBoolean(props.getProperty(\"batchFlushOnCheckpoint\", \"false\"));\n        this.batchSize = Integer.parseInt(props.getProperty(\"batchSize\", \"100\"));\n        this.messageDeliveryDelayLevel = Integer.parseInt(props.getProperty(\"messageDeliveryDelayLevel\", \"0\"));\n    }\n\n    @Override\n    public void open(Configuration parameters) {\n        producer = new DefaultMQProducer();\n        producer.setProducerGroup(props.getProperty(\"producerGroup\", \"defaultGroup\"));\n        producer.setNamesrvAddr(props.getProperty(\"namesrvAddr\", \"localhost:9876\"));\n        try {\n            producer.start();\n        } catch (MQClientException | InterruptedException e) {\n            LOG.error(\"Failed to start RocketMQ producer\", e);\n            throw new RuntimeException(e);\n        }\n        batchList = new ArrayList<>();\n    }\n\n    @Override\n    public void invoke(IN value) {\n        Message msg = prepareMessage(value);\n        if (batchFlushOnCheckpoint) {\n            batchList.add(msg);\n            if (batchList.size() >= batchSize) {\n                flushSync();\n            }\n        } else {\n            if (async) {\n                producer.sendOneway(msg);\n            } else {\n                try {\n                    producer.send(msg);\n                } catch (Exception e) {\n                    LOG.error(\"Failed to send message synchronously\", e);\n                }\n            }\n        }\n    }\n\n    private Message prepareMessage(IN value) {\n        String topic = topicSelector.selectTopic(value);\n        String tag = topicSelector.selectTag(value);\n        byte[] key = serializationSchema.getKey(value);\n        byte[] body = serializationSchema.getValue(value);\n        Message message = new Message(topic, tag, key, body);\n        message.setDelayTimeLevel(messageDeliveryDelayLevel);\n        return message;\n    }\n\n    private void flushSync() {\n        if (batchList.isEmpty()) {\n            return;\n        }\n        if (async) {\n            for (Message msg : batchList) {\n                producer.sendOneway(msg);\n            }\n        } else {\n            for (Message msg : batchList) {\n                try {\n                    producer.send(msg);\n                } catch (Exception e) {\n                    LOG.error(\"Failed to send message synchronously\", e);\n                }\n            }\n        }\n        batchList.clear();\n    }\n\n    @Override\n    public void close() {\n        if (producer != null) {\n            producer.shutdown();\n        }\n        if (batchFlushOnCheckpoint) {\n            flushSync();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 385,
    "Instruction": "Task Description: Create a Java class that implements a simple RocketMQ producer to send messages to a specified topic.\n\nClass Description: The SimpleProducer class provides basic functionality to send messages to a RocketMQ broker. It handles producer initialization, message sending, and cleanup.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance that handles message sending operations\n\nMethods:\n- SimpleProducer(String producerGroup, String namesrvAddr) -> Constructor - Initializes the producer with the specified producer group and NameServer address\n- start() -> void - Starts the producer instance to begin sending messages\n- sendMessage(String topic, String tags, String keys, byte[] body) -> void - Creates and sends a message with the specified topic, tags, keys, and body content\n- shutdown() -> void - Shuts down the producer instance and releases resources",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class SimpleProducer {\n    private DefaultMQProducer producer;\n\n    public SimpleProducer(String producerGroup, String namesrvAddr) {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n    }\n\n    public void sendMessage(String topic, String tags, String keys, byte[] body) throws Exception {\n        Message msg = new Message(topic, tags, keys, body);\n        producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.client.exception.MQClientException;\n\npublic class SimpleProducer {\n    private DefaultMQProducer producer;\n\n    public SimpleProducer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        this.producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() {\n        producer.start();\n    }\n\n    public void sendMessage(String topic, String tags, String keys, byte[] body) {\n        try {\n            Message message = new Message(topic, tags, keys, body);\n            producer.send(message);\n        } catch (MQClientException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 387,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer for sending order-related messages to a specified topic.\n\nClass Description: The OrderProducer class is a Spring component that initializes and manages a RocketMQ producer instance. It provides methods to send test order messages and actual order objects to a configured RocketMQ topic.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- namesrvAddr: String - The address of the RocketMQ NameServer (injected from properties)\n- topicName: String - The target topic name for messages (injected from properties)\n\nMethods:\n- init(): void - Initializes the producer instance with configuration settings and starts it. Uses @PostConstruct to ensure initialization after dependency injection.\n- send(): void - Sends 100 test order messages to the configured topic with incrementing tags.\n- send(HOrder order): boolean - Sends a serialized order object to the configured topic, using the order ID in the message tag. Returns true if sent successfully, false otherwise.\n\nInput:\n- For send(): None\n- For send(HOrder order): order - An HOrder object representing the order to be sent\n\nOutput:\n- For send(): None\n- For send(HOrder order): boolean - Indicates whether the message was successfully sent (true) or not (false)",
    "Canonical_solution": "import com.alibaba.fastjson2.JSON;\nimport com.camp.promotion.entity.HOrder;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.client.producer.SendStatus;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.nio.charset.StandardCharsets;\n\n@Component\npublic class OrderProducer {\n\n    private DefaultMQProducer producer;\n\n    @Value(\"${rocketmq.nameserver.addr}\")\n    private String namesrvAddr;\n\n    @Value(\"${rocketmq.topic.name}\")\n    private String topicName;\n\n    @PostConstruct\n    public void init() throws MQClientException {\n        producer = new DefaultMQProducer();\n        producer.setProducerGroup(\"create_order_producer_group\");\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.setRetryTimesWhenSendFailed(3);\n        producer.setSendMsgTimeout(1000);\n        producer.start();\n    }\n\n    public void send() {\n        try {\n            for (int i = 0; i < 100; i++) {\n                String body = \"TEST_ORDER_\" + i;\n                Message message = new Message(topicName, \"create_order\" + i, body.getBytes(StandardCharsets.UTF_8));\n                SendResult sendResult = producer.send(message);\n            }\n        } catch (MQBrokerException | MQClientException | RemotingException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean send(HOrder order) {\n        byte[] body = JSON.toJSONBytes(order);\n        Message message = new Message(topicName, \"create_order\" + order.getId(), body);\n        SendResult sendResult;\n        try {\n            sendResult = producer.send(message);\n        } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {\n            return false;\n        }\n        return sendResult.getSendStatus() == SendStatus.SEND_OK;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.SendStatus;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.io.IOException;\nimport java.util.Objects;\n\n@Component\npublic class OrderProducer {\n    @Value(\"${rocketmq.namesrv.addr}\")\n    private String namesrvAddr;\n\n    @Value(\"${rocketmq.topic.order}\")\n    private String topicName;\n\n    private DefaultMQProducer producer;\n\n    @PostConstruct\n    public void init() {\n        producer = new DefaultMQProducer(\"order_producer_group\");\n        producer.setNamesrvAddr(namesrvAddr);\n        try {\n            producer.start();\n        } catch (MQClientException | InterruptedException e) {\n            throw new RuntimeException(\"Failed to start RocketMQ producer\", e);\n        }\n    }\n\n    public void send() {\n        for (int i = 0; i < 100; i++) {\n            Message msg = new Message(topicName, \"tag\" + i, (\"test_order_\" + i).getBytes());\n            try {\n                producer.send(msg);\n            } catch (Exception e) {\n                // Handle or log error as needed\n            }\n        }\n    }\n\n    public boolean send(HOrder order) {\n        if (Objects.isNull(order) || Objects.isNull(order.getId())) {\n            return false;\n        }\n        try {\n            String json = new ObjectMapper().writeValueAsString(order);\n            Message msg = new Message(topicName, order.getId(), json.getBytes());\n            SendResult result = producer.send(msg);\n            return result.getSendStatus() == SendStatus.SEND_OK;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 389,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer to send messages to a RocketMQ broker.\n\nClass Description: The RocketMQProducer class encapsulates the functionality for sending messages to a RocketMQ message broker. It handles producer initialization, message sending, and resource cleanup.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance that handles message sending operations\n\nMethods:\n- RocketMQProducer(String producerGroup, String namesrvAddr) -> void - Constructor that initializes the producer with a producer group and NameServer address. Starts the producer instance.\n- sendMessage(String topic, String tags, String keys, String body) -> SendResult - Creates and sends a message to the specified topic with given tags and keys. Returns the send result containing message status.\n- shutdown() -> void - Shuts down the producer instance and releases resources.\n\nInput:\n- Constructor parameters:\n  - producerGroup: String - The group name of the producer\n  - namesrvAddr: String - The address of the NameServer\n- sendMessage parameters:\n  - topic: String - The topic to send the message to\n  - tags: String - Tags for message filtering\n  - keys: String - The business key of the message\n  - body: String - The message content\n\nOutput:\n- sendMessage returns: SendResult - Contains information about the message sending operation\n- shutdown returns: void",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class RocketMQProducer {\n\n    private DefaultMQProducer producer;\n\n    public RocketMQProducer(String producerGroup, String namesrvAddr) throws MQClientException {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.start();\n    }\n\n    public SendResult sendMessage(String topic, String tags, String keys, String body) throws Exception {\n        Message msg = new Message(topic,\n                tags,\n                keys,\n                body.getBytes(RemotingHelper.DEFAULT_CHARSET));\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.client.producer.SendResult;\n\npublic class RocketMQProducer {\n    private DefaultMQProducer producer;\n\n    public RocketMQProducer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        this.producer.setNamesrvAddr(namesrvAddr);\n        this.producer.start();\n    }\n\n    public SendResult sendMessage(String topic, String tags, String keys, String body) throws MQClientException, InterruptedException {\n        Message msg = new Message(topic, tags, keys, body.getBytes());\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality for making synchronous and asynchronous HTTP requests, specifically designed for interacting with the Broadcastify API.\n\nClass Description: The BroadcastifyHttpClient class provides methods for testing API connections and sending asynchronous requests to the Broadcastify service. It uses Java's HttpClient for HTTP/2 communication with configurable timeout and redirect policies.\n\nAttributes:\n- mHttpClient: [HttpClient] - The underlying HTTP client instance configured with HTTP/2 support, 20-second timeout, and normal redirect policy\n\nMethods:\n- testConnection: [testConnection](BroadcastifyCallConfiguration configuration) -> String - Tests the connection to the Broadcastify API by sending a synchronous multipart/form-data POST request with API key, system ID, and test flag. Returns the response body with status code or error message.\n- sendAsyncRequest: [sendAsyncRequest](HttpRequest request) -> void - Sends an HTTP request asynchronously and handles the response or error in a completion callback. Successful responses (status 200) and errors are handled separately.",
    "Canonical_solution": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\n\npublic class BroadcastifyHttpClient {\n\n    private HttpClient mHttpClient = HttpClient.newBuilder()\n        .version(HttpClient.Version.HTTP_2)\n        .followRedirects(HttpClient.Redirect.NORMAL)\n        .connectTimeout(Duration.ofSeconds(20))\n        .build();\n\n    public String testConnection(BroadcastifyCallConfiguration configuration) {\n        BroadcastifyCallBuilder bodyBuilder = new BroadcastifyCallBuilder();\n        bodyBuilder.addPart(FormField.API_KEY, configuration.getApiKey())\n            .addPart(FormField.SYSTEM_ID, configuration.getSystemID())\n            .addPart(FormField.TEST, 1);\n\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(configuration.getHost()))\n            .header(HttpHeaders.CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bodyBuilder.getBoundary())\n            .header(HttpHeaders.USER_AGENT, \"sdrtrunk\")\n            .header(HttpHeaders.ACCEPT, \"*/*\")\n            .POST(bodyBuilder.build())\n            .build();\n\n        HttpResponse.BodyHandler<String> responseHandler = HttpResponse.BodyHandlers.ofString();\n\n        try {\n            HttpResponse<String> response = mHttpClient.send(request, responseHandler);\n            String responseBody = response.body();\n            return (responseBody != null ? responseBody : \"(no response)\") + \" Status Code:\" + response.statusCode();\n        }\n        catch(Exception e) {\n            return e.getLocalizedMessage();\n        }\n    }\n\n    public void sendAsyncRequest(HttpRequest request) {\n        mHttpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n            .whenComplete((response, throwable) -> {\n                if(throwable != null || response.statusCode() != 200) {\n                    if(!(throwable instanceof IOException || throwable instanceof CompletionException)) {\n                        // Handle non-I/O errors\n                    }\n                }\n                else {\n                    // Handle successful response\n                }\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "```java\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\n\npublic class BroadcastifyHttpClient {\n    private final HttpClient mHttpClient;\n\n    public BroadcastifyHttpClient() {\n        mHttpClient = HttpClient.newBuilder()\n                .version(HttpClient.Version.HTTP_2)\n                .connectTimeout(Duration.ofSeconds(20))\n                .redirect(HttpClient.Redirect.NORMAL)\n                .build();\n    }\n\n    public String testConnection(BroadcastifyCallConfiguration configuration) {\n        String boundary = \"===\" + System.currentTimeMillis() + \"===\";\n        String body = \"--\" + boundary + \"\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"api_key\\\"\\r\\n\\r\\n\" +\n                      configuration.getApiKey() + \"\\r\\n\" +\n                      \"--\" + boundary + \"\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"system_id\\\"\\r\\n\\r\\n\" +\n                      configuration.getSystemId() + \"\\r\\n\" +\n                      \"--\" + boundary + \"\\r\\n\" +\n                      \"Content-Disposition: form-data; name=\\\"test\\\"\\r\\n\\r\\n\" +\n                      \"true\\r\\n\" +\n                      \"--\" + boundary + \"--\\r\\n\";\n\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(\"https://api.broadcastify.com/test\"))\n                .header(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary)\n                .POST(HttpRequest.BodyPublishers.ofString(body))\n                .build();\n\n        try {\n            HttpResponse<String> response = mHttpClient.send(request, HttpResponse.BodyHandlers.ofString());\n            return \"Status: \" + response.statusCode() + \", Body: \" + response.body();\n        } catch (Exception e) {\n            return \"Error: \" + e.getMessage();\n        }\n    }\n\n    public void sendAsyncRequest(HttpRequest request) {\n        mHttpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n                .thenAccept(response -> {\n                    if (response.statusCode() == 200) {\n                        System.out.println(\"Success: \" + response.body());\n                    } else {\n                        System.out.println(\"Error: \" + response.statusCode() + \", \" + response.body());\n                    }\n                })\n                .exceptionally(ex -> {\n                    System.err.println(\"Exception: \" + ex.getMessage());\n                    return null;\n                });\n    }\n}\n```"
  },
  {
    "Task_id": 391,
    "Instruction": "Task Description: Implement a Java class that acts as a RocketMQ producer to send messages to a specified topic with tags. The class should handle producer configuration, message sending, and resource cleanup.\n\nClass Description: The RocketMQProducer class encapsulates the functionality for creating and managing a RocketMQ message producer. It handles initialization, configuration, message sending, and shutdown of the producer instance.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- namesrvAddr: String - The NameServer address for RocketMQ\n- LOGGER: Logger - Logger instance for logging producer activities\n\nMethods:\n- RocketMQProducer(String producerGroup, String namesrvAddr) -> None - Constructor that initializes the producer with a group name and NameServer address\n- configureProducer() -> None - Configures the producer with necessary settings including NameServer address and access channel\n- startProducer() -> None - Starts the producer instance and logs the startup\n- sendMessage(String topic, String tags, String messageBody) -> SendResult - Creates and sends a message to the specified topic with given tags and body, returns the send result\n- shutdownProducer() -> None - Shuts down the producer instance to release resources",
    "Canonical_solution": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.client.producer.SendStatus;\nimport org.apache.rocketmq.client.AccessChannel;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\n\npublic class RocketMQProducer {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(RocketMQProducer.class);\n    private DefaultMQProducer producer;\n    private String namesrvAddr;\n\n    public RocketMQProducer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup, false, null);\n        this.namesrvAddr = namesrvAddr;\n    }\n\n    public void configureProducer() {\n        producer.setAccessChannel(AccessChannel.CLOUD);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void startProducer() throws Exception {\n        producer.start();\n        LOGGER.info(\"Producer Started...\");\n    }\n\n    public SendResult sendMessage(String topic, String tags, String messageBody) throws Exception {\n        Message msg = new Message(\n            topic, \n            tags, \n            messageBody.getBytes(RemotingHelper.DEFAULT_CHARSET)\n        );\n        SendResult sendResult = producer.send(msg);\n        if (sendResult.getSendStatus() != SendStatus.SEND_OK) {\n            throw new Exception(\"Message sending failed\");\n        }\n        return sendResult;\n    }\n\n    public void shutdownProducer() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.logging.log4j.Logger;\nimport org.apache.logging.log4j.LogManager;\n\npublic class RocketMQProducer {\n    private DefaultMQProducer producer;\n    private String namesrvAddr;\n    private static final Logger LOGGER = LogManager.getLogger(RocketMQProducer.class);\n\n    public RocketMQProducer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        this.namesrvAddr = namesrvAddr;\n        configureProducer();\n    }\n\n    private void configureProducer() {\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void startProducer() {\n        try {\n            producer.start();\n            LOGGER.info(\"Producer started successfully.\");\n        } catch (MQClientException | InterruptedException e) {\n            LOGGER.error(\"Failed to start producer\", e);\n        }\n    }\n\n    public SendResult sendMessage(String topic, String tags, String messageBody) throws MQClientException, InterruptedException {\n        Message msg = new Message(topic, tags, messageBody.getBytes());\n        return producer.send(msg);\n    }\n\n    public void shutdownProducer() {\n        if (producer != null) {\n            producer.shutdown();\n            LOGGER.info(\"Producer shutdown successfully.\");\n        }\n    }\n}"
  },
  {
    "Task_id": 392,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer capable of sending messages to a specified topic, querying messages, and managing the producer lifecycle.\n\nClass Description: The TestProducer class provides functionality to initialize, start, and manage a RocketMQ producer instance. It can send messages to a specified topic with tags and keys, query messages based on criteria, and properly shut down the producer when no longer needed.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance responsible for sending messages and performing message-related operations.\n\nMethods:\n- TestProducer(String namesrvAddr, String producerGroup) -> void - Constructor that initializes the producer with the specified NameServer address and producer group.\n- start() -> void - Starts the producer instance to begin sending messages.\n- sendMessage(String topic, String tags, String keys, String body) -> SendResult - Sends a message to the specified topic with given tags, keys, and body. Returns the send result.\n- queryMessage(String topic, String key, int maxNum, long begin, long end) -> QueryResult - Queries messages for the specified topic based on key, maximum number of messages, and time range. Returns the query result.\n- shutdown() -> void - Shuts down the producer instance gracefully.",
    "Canonical_solution": "import org.apache.rocketmq.client.QueryResult;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class TestProducer {\n\n    private DefaultMQProducer producer;\n\n    public TestProducer(String namesrvAddr, String producerGroup) throws MQClientException {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n    }\n\n    public SendResult sendMessage(String topic, String tags, String keys, String body) throws Exception {\n        Message msg = new Message(topic,\n                tags,\n                keys,\n                body.getBytes(RemotingHelper.DEFAULT_CHARSET));\n        return producer.send(msg);\n    }\n\n    public QueryResult queryMessage(String topic, String key, int maxNum, long begin, long end) throws Exception {\n        return producer.queryMessage(topic, key, maxNum, begin, end);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.client.admin.MQAdmin;\nimport org.apache.rocketmq.client.admin.MQAdminExt;\nimport org.apache.rocketmq.common.message.QueryResult;\n\npublic class TestProducer {\n    private DefaultMQProducer producer;\n    private MQAdmin mqAdmin;\n\n    public TestProducer(String namesrvAddr, String producerGroup) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        this.producer.setNamesrvAddr(namesrvAddr);\n        this.mqAdmin = new MQAdminExt();\n        this.mqAdmin.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n        mqAdmin.start();\n    }\n\n    public SendResult sendMessage(String topic, String tags, String keys, String body) throws MQClientException, InterruptedException {\n        Message msg = new Message(topic, tags, keys, body.getBytes());\n        return producer.send(msg);\n    }\n\n    public QueryResult queryMessage(String topic, String key, int maxNum, long begin, long end) throws MQClientException {\n        return mqAdmin.selectMessages(topic, key, maxNum, begin, end);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n        mqAdmin.shutdown();\n    }\n}"
  },
  {
    "Task_id": 393,
    "Instruction": "Task Description: Create a Java class that serves as a template for interacting with RocketMQ producers, providing various methods to send messages (including ordered messages) with configurable parameters.\n\nClass Description: The RocketMQTemplate class is a utility class that simplifies interaction with RocketMQ producers. It manages producer instances, provides default configurations, and offers multiple methods for sending messages with different levels of customization. The class handles both regular and ordered message sending, with configurable timeouts, queue numbers, and producer groups.\n\nAttributes:\n- log: [InternalLogger] - Logger instance for error and debug logging\n- DEFAULT_PRODUCER_GROUP: [String] - Default producer group name\n- DEFAULT_QUEUE_NUM: [int] - Default number of queues\n- DEFAULT_SEND_MSG_TIMEOUT: [int] - Default message sending timeout in milliseconds\n- producerMap: [Map<String, DefaultMQProducer>] - Map storing producer instances with their configuration keys\n\nMethods:\n- getProducer() -> [DefaultMQProducer] - Gets a producer with default settings\n- getProducer([int queueNum]) -> [DefaultMQProducer] - Gets a producer with custom queue number\n- getProducer([String producerGroup, int sendMsgTimeout]) -> [DefaultMQProducer] - Gets a producer with custom group and timeout\n- getProducer([int queueNum, String producerGroup, int sendMsgTimeout]) -> [DefaultMQProducer] - Gets a fully customized producer\n- send([String topic, String body]) -> [SendResult] - Sends a message with default settings\n- send([String topic, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with custom timeout\n- send([String producerGroup, String topic, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with custom group and timeout\n- send([String producerGroup, String topic, String tags, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with tags\n- send([String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with tags and keys\n- send([String producerGroup, Message message, int sendMsgTimeout]) -> [SendResult] - Internal method for sending messages\n- sendOrderly([String producerGroup, String topic, String keys, String body]) -> [SendResult] - Sends ordered message with default timeout\n- sendOrderly([String producerGroup, String topic, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends ordered message with custom timeout\n- sendOrderly([String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends ordered message with tags\n- sendOrderly([String producerGroup, Message message, int sendMsgTimeout]) -> [SendResult] - Internal method for sending ordered messages",
    "Canonical_solution": "import org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.rocketmq.client.log.ClientLogger;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.logging.InternalLogger;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class RocketMQTemplate {\n\n    private static final InternalLogger log = ClientLogger.getLog();\n\n    private static final String DEFAULT_PRODUCER_GROUP = \"default-producer\";\n    private static final int DEFAULT_QUEUE_NUM = 4;\n    private static final int DEFAULT_SEND_MSG_TIMEOUT = 3000;\n\n    private static Map<String, DefaultMQProducer> producerMap = new HashMap<>();\n\n    public static DefaultMQProducer getProducer() throws Exception {\n        return getProducer(DEFAULT_QUEUE_NUM, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static DefaultMQProducer getProducer(int queueNum) throws Exception {\n        return getProducer(queueNum, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static DefaultMQProducer getProducer(String producerGroup, int sendMsgTimeout) throws Exception {\n        return getProducer(DEFAULT_QUEUE_NUM, producerGroup, sendMsgTimeout);\n    }\n\n    public static DefaultMQProducer getProducer(int queueNum, String producerGroup, int sendMsgTimeout) throws Exception {\n        if (queueNum < 1) throw new IllegalArgumentException(\"queueNum must >= 1\");\n        if (StringUtils.isBlank(producerGroup)) throw new IllegalArgumentException(\"producerGroup cannot be null\");\n        String producerKey = producerGroup + queueNum;\n        if (producerMap.get(producerKey) == null) {\n            synchronized (producerMap) {\n                if (producerMap.get(producerKey) == null) {\n                    DefaultMQProducer producer = new DefaultMQProducer(DEFAULT_PRODUCER_GROUP);\n                    producer.setDefaultTopicQueueNums(queueNum);\n                    producer.setSendMsgTimeout(sendMsgTimeout);\n                    producer.start();\n                    producerMap.put(producerKey, producer);\n                }\n            }\n        }\n        return producerMap.get(producerKey);\n    }\n\n    public static SendResult send(String topic, String body) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static SendResult send(String topic, String body, int sendMsgTimeout) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, \"\", body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String tags, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, tags, \"\", body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        try {\n            return send(producerGroup, new Message(topic, tags, keys, body.getBytes(RemotingHelper.DEFAULT_CHARSET)), sendMsgTimeout);\n        } catch (Exception e) {\n            log.error(\"send error, producerGroup:{}, topic:{}, tags:{}, keys:{}, body:{}\",\n                    producerGroup, topic, tags, keys, body, e);\n            throw new MessagingException(e.getMessage(), e);\n        }\n    }\n\n    private static SendResult send(String producerGroup, Message message, int sendMsgTimeout) throws Exception {\n        return getProducer(producerGroup, sendMsgTimeout).send(message);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String keys, String body) {\n        return sendOrderly(producerGroup, topic, keys, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String keys, String body, int sendMsgTimeout) {\n        return sendOrderly(producerGroup, topic, keys, body, sendMsgTimeout);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        try {\n            return sendOrderly(producerGroup, new Message(topic, tags, keys, body.getBytes(RemotingHelper.DEFAULT_CHARSET)), sendMsgTimeout);\n        } catch (Exception e) {\n            log.error(\"send error, producerGroup:{}, topic:{}, tags:{}, keys:{}, body:{}\",\n                    producerGroup, topic, tags, keys, body, e);\n            throw new MessagingException(e.getMessage(), e);\n        }\n    }\n\n    private static SendResult sendOrderly(String producerGroup, Message message, int sendMsgTimeout) throws Exception {\n        return getProducer(producerGroup, sendMsgTimeout).send(message,\n                new MessageQueueSelector() {\n                    @Override\n                    public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n                        long id = NumberUtils.toLong(String.valueOf(arg));\n                        int index = (int) (id % mqs.size());\n                        return mqs.get(index);\n                    }\n                }, message.getKeys());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.SendResult;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageQueue;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageQueueSelector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class RocketMQTemplate {\n    private static final Logger log = LoggerFactory.getLogger(RocketMQTemplate.class);\n    private static final String DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER_GROUP\";\n    private static final int DEFAULT_QUEUE_NUM = 4;\n    private static final int DEFAULT_SEND_MSG_TIMEOUT = 3000;\n    private final Map<String, DefaultMQProducer> producerMap = new HashMap<>();\n\n    public DefaultMQProducer getProducer() {\n        return getProducer(DEFAULT_QUEUE_NUM, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public DefaultMQProducer getProducer(int queueNum) {\n        return getProducer(queueNum, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public DefaultMQProducer getProducer(String producerGroup, int sendMsgTimeout) {\n        return getProducer(DEFAULT_QUEUE_NUM, producerGroup, sendMsgTimeout);\n    }\n\n    public DefaultMQProducer getProducer(int queueNum, String producerGroup, int sendMsgTimeout) {\n        String key = producerGroup + \":\" + queueNum + \":\" + sendMsgTimeout;\n        if (!producerMap.containsKey(key)) {\n            DefaultMQProducer producer = new DefaultMQProducer(producerGroup);\n            producer.setSendMsgTimeout(sendMsgTimeout);\n            producer.setNumQueue(queueNum);\n            try {\n                producer.start();\n            } catch (MQClientException | InterruptedException e) {\n                log.error(\"Failed to start producer\", e);\n                throw new RuntimeException(\"Producer start failed\", e);\n            }\n            producerMap.put(key, producer);\n        }\n        return producerMap.get(key);\n    }\n\n    public SendResult send(String topic, String body) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, null, null, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public SendResult send(String topic, String body, int sendMsgTimeout) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, null, null, body, sendMsgTimeout);\n    }\n\n    public SendResult send(String producerGroup, String topic, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, null, null, body, sendMsgTimeout);\n    }\n\n    public SendResult send(String producerGroup, String topic, String tags, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, tags, null, body, sendMsgTimeout);\n    }\n\n    public SendResult send(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        Message message = new Message(topic, tags, keys, body.getBytes());\n        return send(producerGroup, message, sendMsgTimeout);\n    }\n\n    public SendResult send(String producerGroup, Message message, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(producerGroup, sendMsgTimeout);\n        try {\n            return producer.send(message);\n        } catch (MQClientException | InterruptedException e) {\n            log.error(\"Failed to send message\", e);\n            throw new RuntimeException(\"Message send failed\", e);\n        }\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String keys, String body) {\n        return sendOrderly(producerGroup, topic, null, keys, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String keys, String body, int sendMsgTimeout) {\n        return sendOrderly(producerGroup, topic, null, keys, body, sendMsgTimeout);\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        Message message = new Message(topic, tags, keys, body.getBytes());\n        return sendOrderly(producerGroup, message, sendMsgTimeout);\n    }\n\n    public SendResult sendOrderly(String producerGroup, Message message, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(producerGroup, sendMsgTimeout);\n        try {\n            MessageQueueSelector selector = (mqs, msg, arg) -> {\n                String key = (String) arg;\n                return mqs.get(0);\n            };\n            return producer.send(message, selector, keys);\n        } catch (MQClientException | InterruptedException e) {\n            log.error(\"Failed to send ordered message\", e);\n            throw new RuntimeException(\"Ordered message send failed\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 394,
    "Instruction": "Task Description: Implement a Java class that acts as a RocketMQ producer to send messages to a specified topic with a given tag.\n\nClass Description: The RocketMQProducer class encapsulates the functionality to initialize, send messages, and shutdown a RocketMQ producer instance. It handles the connection to the RocketMQ NameServer and manages message production.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- namespace: String - The namespace for the producer (V2 version)\n- producerGroup: String - The group name for the producer\n- namesrvAddr: String - The address of the NameServer\n- topic: String - The topic to which messages will be sent\n- tag: String - The tag for the messages\n\nMethods:\n- RocketMQProducer(String namespace, String producerGroup, String namesrvAddr, String topic, String tag) -> None - Constructor that initializes the producer with the given parameters\n- initialize() -> void - Configures and starts the producer instance with the specified namespace and NameServer address\n- sendMessage(String messageContent) -> void - Creates and sends a message with the given content to the configured topic and tag\n- shutdown() -> void - Shuts down the producer instance gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport java.nio.charset.StandardCharsets;\n\npublic class RocketMQProducer {\n\n    private DefaultMQProducer producer;\n    private String namespace;\n    private String producerGroup;\n    private String namesrvAddr;\n    private String topic;\n    private String tag;\n\n    public RocketMQProducer(String namespace, String producerGroup, String namesrvAddr, String topic, String tag) {\n        this.namespace = namespace;\n        this.producerGroup = producerGroup;\n        this.namesrvAddr = namesrvAddr;\n        this.topic = topic;\n        this.tag = tag;\n        this.producer = new DefaultMQProducer(producerGroup);\n    }\n\n    public void initialize() throws Exception {\n        producer.setNamespaceV2(namespace);\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.start();\n    }\n\n    public void sendMessage(String messageContent) throws Exception {\n        Message message = new Message(topic, tag, messageContent.getBytes(StandardCharsets.UTF_8));\n        producer.send(message);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class RocketMQProducer {\n    private DefaultMQProducer producer;\n    private String namespace;\n    private String producerGroup;\n    private String namesrvAddr;\n    private String topic;\n    private String tag;\n\n    public RocketMQProducer(String namespace, String producerGroup, String namesrvAddr, String topic, String tag) {\n        this.namespace = namespace;\n        this.producerGroup = producerGroup;\n        this.namesrvAddr = namesrvAddr;\n        this.topic = topic;\n        this.tag = tag;\n    }\n\n    public void initialize() {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamespace(namespace);\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.start();\n    }\n\n    public void sendMessage(String messageContent) {\n        try {\n            Message msg = new Message(topic, tag, messageContent.getBytes());\n            producer.send(msg);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 395,
    "Instruction": "Task Description: Create a Java class that implements an asynchronous message producer using RocketMQ, capable of sending messages to specified topics with callback handling for success and failure cases.\n\nClass Description: RMQAsyncSendProducer is a RocketMQ asynchronous message producer that sends messages to a specified topic and handles responses through callbacks. It tracks successful sends and exceptions, and provides methods for waiting for responses and shutting down the producer.\n\nAttributes:\n- nsAddr: String - The NameServer address for RocketMQ\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- sendCallback: SendCallback - Callback handler for message send results\n- successSendResult: List<SendResult> - Thread-safe list of successful send results\n- exceptionMsgCount: AtomicInteger - Counter for messages that failed to send\n- msgSize: int - The number of messages to send\n- logger: Logger - SLF4J logger instance\n- topic: String - The topic to which messages will be sent (inherited from AbstractMQProducer)\n- msgBodys: [Data Structure] - Stores message bodies (inherited from AbstractMQProducer)\n- originMsgs: [Data Structure] - Stores original messages (inherited from AbstractMQProducer)\n\nMethods:\n- RMQAsyncSendProducer(String nsAddr, String topic) -> void - Constructor that initializes the producer with NameServer address and topic\n- create() -> void - Creates and configures the DefaultMQProducer instance\n- start() -> void - Starts the producer instance\n- asyncSend(Object msg) -> void - Asynchronously sends a single message\n- asyncSend(int msgSize) -> void - Asynchronously sends multiple messages (quantity specified by msgSize)\n- asyncSend(Object msg, MessageQueueSelector selector, Object arg) -> void - Asynchronously sends a message with queue selection\n- waitForResponse(int timeoutMills) -> void - Waits for all responses until timeout\n- shutdown() -> void - Shuts down the producer (overrides AbstractMQProducer method)",
    "Canonical_solution": "import java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.test.clientinterface.AbstractMQProducer;\nimport org.apache.rocketmq.test.sendresult.ResultWrapper;\nimport org.apache.rocketmq.test.util.RandomUtil;\nimport org.apache.rocketmq.test.util.TestUtil;\n\npublic class RMQAsyncSendProducer extends AbstractMQProducer {\n    private static Logger logger = LoggerFactory.getLogger(RMQAsyncSendProducer.class);\n    private String nsAddr = null;\n    private DefaultMQProducer producer = null;\n    private SendCallback sendCallback = null;\n    private List<SendResult> successSendResult = Collections.synchronizedList(new ArrayList<SendResult>());\n    private AtomicInteger exceptionMsgCount = new AtomicInteger(0);\n    private int msgSize = 0;\n\n    public RMQAsyncSendProducer(String nsAddr, String topic) {\n        super(topic);\n        this.nsAddr = nsAddr;\n        sendCallback = new SendCallback() {\n            @Override\n            public void onSuccess(SendResult sendResult) {\n                successSendResult.add(sendResult);\n            }\n            @Override\n            public void onException(Throwable throwable) {\n                exceptionMsgCount.getAndIncrement();\n            }\n        };\n        create();\n        start();\n    }\n\n    private void create() {\n        producer = new DefaultMQProducer();\n        producer.setProducerGroup(RandomUtil.getStringByUUID());\n        producer.setInstanceName(RandomUtil.getStringByUUID());\n        if (nsAddr != null) {\n            producer.setNamesrvAddr(nsAddr);\n        }\n    }\n\n    private void start() {\n        try {\n            producer.start();\n        } catch (MQClientException e) {\n            logger.error(\"producer start failed!\");\n            e.printStackTrace();\n        }\n    }\n\n    public void asyncSend(Object msg) {\n        Message metaqMsg = (Message) msg;\n        try {\n            producer.send(metaqMsg, sendCallback);\n            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));\n            originMsgs.addData(msg);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void asyncSend(int msgSize) {\n        this.msgSize = msgSize;\n        for (int i = 0; i < msgSize; i++) {\n            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));\n            this.asyncSend(msg);\n        }\n    }\n\n    public void asyncSend(Object msg, MessageQueueSelector selector, Object arg) {\n        Message metaqMsg = (Message) msg;\n        try {\n            producer.send(metaqMsg, selector, arg, sendCallback);\n            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));\n            originMsgs.addData(msg);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void waitForResponse(int timeoutMills) {\n        long startTime = System.currentTimeMillis();\n        while (this.successSendResult.size() != this.msgSize) {\n            if (System.currentTimeMillis() - startTime < timeoutMills) {\n                TestUtil.waitForMonment(100);\n            } else {\n                logger.info(\"timeout but still not recv all response!\");\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.CountDownLatch;\n\npublic class RMQAsyncSendProducer extends AbstractMQProducer {\n    private String nsAddr;\n    private DefaultMQProducer producer;\n    private SendCallback sendCallback;\n    private List<SendResult> successSendResult;\n    private AtomicInteger exceptionMsgCount;\n    private int msgSize;\n    private Logger logger;\n    private String topic;\n    private CountDownLatch responseLatch;\n\n    public RMQAsyncSendProducer(String nsAddr, String topic) {\n        this.nsAddr = nsAddr;\n        this.topic = topic;\n        this.successSendResult = new CopyOnWriteArrayList<>();\n        this.exceptionMsgCount = new AtomicInteger(0);\n        this.logger = LoggerFactory.getLogger(RMQAsyncSendProducer.class);\n    }\n\n    public void create() {\n        producer = new DefaultMQProducer(\"RMQAsyncSendProducerGroup\");\n        producer.setNamesrvAddr(nsAddr);\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n    }\n\n    public void asyncSend(Object msg) {\n        Message message = new Message(topic, \"TagA\", msg.toString().getBytes());\n        sendCallback = new SendCallback() {\n            @Override\n            public void onSuccess(SendResult sendResult) {\n                successSendResult.add(sendResult);\n            }\n\n            @Override\n            public void onException(Throwable e) {\n                logger.error(\"Send failed\", e);\n                exceptionMsgCount.incrementAndGet();\n            }\n        };\n        producer.send(message, sendCallback);\n    }\n\n    public void asyncSend(int msgSize) {\n        this.msgSize = msgSize;\n        responseLatch = new CountDownLatch(msgSize);\n        sendCallback = new SendCallback() {\n            @Override\n            public void onSuccess(SendResult sendResult) {\n                successSendResult.add(sendResult);\n                responseLatch.countDown();\n            }\n\n            @Override\n            public void onException(Throwable e) {\n                logger.error(\"Send failed\", e);\n                exceptionMsgCount.incrementAndGet();\n                responseLatch.countDown();\n            }\n        };\n\n        for (int i = 0; i < msgSize; i++) {\n            Object msg = msgBodys.get(i);\n            Message message = new Message(topic, \"TagA\", msg.toString().getBytes());\n            producer.send(message, sendCallback);\n        }\n    }\n\n    public void asyncSend(Object msg, MessageQueueSelector selector, Object arg) {\n        Message message = new Message(topic, \"TagA\", msg.toString().getBytes());\n        sendCallback = new SendCallback() {\n            @Override\n            public void onSuccess(SendResult sendResult) {\n                successSendResult.add(sendResult);\n            }\n\n            @Override\n            public void onException(Throwable e) {\n                logger.error(\"Send failed\", e);\n                exceptionMsgCount.incrementAndGet();\n            }\n        };\n        producer.send(message, selector, arg, sendCallback);\n    }\n\n    public void waitForResponse(int timeoutMills) {\n        try {\n            if (responseLatch != null) {\n                responseLatch.await(timeoutMills, java.util.concurrent.TimeUnit.MILLISECONDS);\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            logger.error(\"Interrupted while waiting for responses\", e);\n        }\n    }\n\n    @Override\n    public void shutdown() {\n        producer.shutdown();\n    }\n}"
  },
  {
    "Task_id": 396,
    "Instruction": "Task Description: Create a Java class that implements an asynchronous message producer using RocketMQ, capable of sending messages to a specified topic with tags and keys, and handling success/failure callbacks.\n\nClass Description: AsyncProducer is a RocketMQ asynchronous message producer class that initializes a producer instance, sends messages asynchronously to a specified topic, and provides shutdown capability. It handles message sending callbacks for success and failure scenarios.\n\nAttributes:\nproducer: DefaultMQProducer - The RocketMQ producer instance responsible for sending messages\n\nMethods:\nAsyncProducer: [Constructor](String producerGroup, String namesrvAddr) -> void - Initializes the producer with a producer group name and NameServer address, sets retry policy for async sends, and starts the producer instance\nsendAsyncMessage: [Method](String topic, String tags, String keys, String body) -> void - Creates and sends an asynchronous message to the specified topic with given tags and keys, using the provided message body\nshutdown: [Method]() -> void - Shuts down the producer instance gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\nimport java.io.UnsupportedEncodingException;\n\npublic class AsyncProducer {\n\n    private DefaultMQProducer producer;\n\n    public AsyncProducer(String producerGroup, String namesrvAddr) throws MQClientException {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.setRetryTimesWhenSendAsyncFailed(0);\n        producer.start();\n    }\n\n    public void sendAsyncMessage(String topic, String tags, String keys, String body) throws UnsupportedEncodingException {\n        Message msg = new Message(topic, \n                                tags, \n                                keys, \n                                body.getBytes(RemotingHelper.DEFAULT_CHARSET));\n        try {\n            producer.send(msg, new SendCallback() {\n                @Override\n                public void onSuccess(SendResult sendResult) {\n                    System.out.printf(\"OK %s %n\", sendResult.getMsgId());\n                }\n\n                @Override\n                public void onException(Throwable e) {\n                    System.out.printf(\"Exception %s %n\", e);\n                    e.printStackTrace();\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.AsyncSendCallback;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class AsyncProducer {\n    private DefaultMQProducer producer;\n\n    public AsyncProducer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        this.producer.setNamesrvAddr(namesrvAddr);\n        this.producer.setRetryTimesWhenSendAsyncFailed(2);\n        try {\n            this.producer.start();\n        } catch (MQClientException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void sendAsyncMessage(String topic, String tags, String keys, String body) {\n        Message msg = new Message(topic, tags, keys, body.getBytes());\n        this.producer.send(msg, new AsyncSendCallback() {\n            @Override\n            public void onSuccess(SendResult sendResult) {\n                System.out.println(\"Message sent successfully: \" + sendResult);\n            }\n\n            @Override\n            public void onException(Throwable e) {\n                System.err.println(\"Failed to send message: \" + e.getMessage());\n                e.printStackTrace();\n            }\n        });\n    }\n\n    public void shutdown() {\n        this.producer.shutdown();\n    }\n}"
  },
  {
    "Task_id": 398,
    "Instruction": "Task Description: Implement a Java class that establishes a secure TCP client connection using GSSAPI for authentication and secure message exchange with a server.\n\nClass Description: The GSSClient class provides functionality to connect to a server using TCP, establish a secure GSSAPI context, send encrypted messages, and verify received messages. It handles GSSAPI authentication and secure communication over a socket connection.\n\nAttributes:\n- s: Socket - The socket used for TCP communication with the server\n\nMethods:\n- main(String[] args) -> void - Entry point that parses command line arguments, establishes connection, and manages the secure communication flow\n- createCtxt(String serverName, Oid mechOid) -> GSSContext - Creates and establishes a GSSAPI security context with the server\n- sendMsgToPeer(GSSContext aCtxt, String msg) -> void - Sends an encrypted message to the server using the established security context\n- verifyMsgFromPeer(GSSContext aCtxt, String msg) -> void - Verifies the message integrity code (MIC) received from the server\n- usage() -> void - Prints usage information for the program\n- print(String msg) -> void - Helper method to print messages to standard output\n- exit(int status) -> void - Closes the socket connection and exits the program with specified status code",
    "Canonical_solution": "import java.io.*;\nimport java.net.*;\n\nimport com.sun.gssapi.*;\n\nclass GSSClient {\n\n    private static Socket s;\n\n    public static void main(String args[]) {\n        String serverHost, serverName, message;\n        int port = 4444;\n\n        if (args.length < 3) {\n            usage();\n            exit(1);\n        }\n\n        serverHost = args[args.length - 3];\n        serverName = args[args.length - 2];\n        message = args[args.length - 1];\n        \n        try {\n            Oid mechOid = GSSManager.getDefaultMech();\n\n            for (int i = 0; i < (args.length - 3); i++) {\n                if (args[i].equals(\"-port\")) {\n                    if (i >= (args.length - 4)) {\n                        usage();\n                        exit(-1);\n                    }\n                    port = Integer.parseInt(args[++i]);\n                } else if (args[i].equals(\"-mech\")) {\n                    if (i >= (args.length-4)) {\n                        usage();\n                        exit(-1);\n                    }\n                    mechOid = new Oid(args[++i]);\n                }\n            }\n\n            s = new Socket(serverHost, port);\n            GSSContext aCtxt = createCtxt(serverName, mechOid);\n            sendMsgToPeer(aCtxt, message);                        \n            verifyMsgFromPeer(aCtxt, message);\n            aCtxt.dispose();\n            exit(0);\n\n        } catch (IOException e) {\n            print(\"\\n**Communication ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        } catch (GSSException e) {\n            print(\"\\n**GSSAPI ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        }\n    }\n\n    private static GSSContext createCtxt(String serverName, Oid mechOid)\n                    throws GSSException, IOException {\n        GSSContext aCtxt = new GSSContext(\n            new GSSName(serverName, GSSName.NT_HOSTBASED_SERVICE),\n                      mechOid, null, 0);\n\n        aCtxt.requestConf(true);\n        aCtxt.requestInteg(true);\n        aCtxt.requestMutualAuth(true);\n        aCtxt.requestReplayDet(true);\n        aCtxt.requestSequenceDet(true);\n        \n        DataInputStream dis = new DataInputStream(s.getInputStream());\n        DataOutputStream dos = new DataOutputStream(s.getOutputStream());\n\n        byte []inTok = new byte[0];\n        \n        do {\n            byte[] outTok = aCtxt.init(inTok, 0, inTok.length);\n            \n            if (outTok != null) {\n                dos.writeInt(outTok.length);\n                dos.write(outTok, 0, outTok.length);\n            }\n            \n            if (aCtxt.isEstablished())\n                break;\n            \n            inTok = new byte[dis.readInt()];\n            dis.readFully(inTok, 0, inTok.length);\n        } while (true);\n            \n        return (aCtxt);\n    }\n\n    private static void sendMsgToPeer(GSSContext aCtxt, String msg)\n                throws GSSException, IOException {\n        MessageProp mInfo = new MessageProp(0, true);\n        byte []tok = aCtxt.wrap(msg.getBytes(), 0, msg.length(), mInfo);\n        DataOutputStream dos = new DataOutputStream(s.getOutputStream());\n        dos.writeInt(tok.length);\n        dos.write(tok);\n        dos.flush();\n    }\n\n    private static void verifyMsgFromPeer(GSSContext aCtxt, String msg)\n                throws GSSException, IOException {\n        DataInputStream dis = new DataInputStream(s.getInputStream());\n        int len = dis.readInt();\n        MessageProp mInfo = new MessageProp();\n        aCtxt.verifyMIC(dis, new StringBufferInputStream(msg), mInfo);\n    }\n\n    private static void usage() {\n        print(\"GSSClient [-port port] [-mech 1.2.3.3] serverhost servername message\");\n    }\n\n    private static void print(String msg) {\n        System.out.println(msg);\n    }\n\n    private static void exit(int status) {\n        if (s != null) {\n            try {\n                s.close();\n            } catch (IOException e) {};\n        }\n        System.exit(status);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "import javax.security.auth.kerberos.KerberosTicket;\nimport org.ietf.jgss.GSSContext;\nimport org.ietf.jgss.GSSException;\nimport org.ietf.jgss.GSSManager;\nimport org.ietf.jgss.GSSName;\nimport org.ietf.jgss.Oid;\nimport java.io.*;\nimport java.net.Socket;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\n\npublic class GSSClient {\n    Socket s;\n\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            usage();\n            System.exit(1);\n        }\n        String serverName = args[0];\n        int port = Integer.parseInt(args[1]);\n        try {\n            Socket socket = new Socket(serverName, port);\n            GSSClient client = new GSSClient();\n            client.s = socket;\n            Oid mechOid = new Oid(\"1.2.840.113554.1.2.2\");\n            GSSContext context = client.createCtxt(serverName, mechOid);\n            client.sendMsgToPeer(context, \"Hello, server!\");\n            client.verifyMsgFromPeer(context, \"Hello, client!\");\n            socket.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n\n    public GSSContext createCtxt(String serverName, Oid mechOid) throws Exception {\n        GSSManager manager = GSSManager.getInstance();\n        GSSName server = manager.createName(serverName, GSSName.NT_HOSTBASED_SERVICE, mechOid);\n        GSSContext context = manager.createContext(server, mechOid, null, GSSContext.DEFAULT_LIFETIME);\n        context.requestMutualAuthentication(true);\n        context.requestConfidentiality(true);\n        context.requestIntegrity(true);\n\n        byte[] token = null;\n        while (!context.isEstablished()) {\n            token = context.initSecContext(token, 0, token == null ? 0 : token.length);\n            if (token != null && token.length > 0) {\n                s.getOutputStream().write(token);\n                s.getOutputStream().flush();\n                byte[] response = new byte[1024];\n                int bytesRead = s.getInputStream().read(response);\n                token = Arrays.copyOf(response, bytesRead);\n            }\n        }\n        return context;\n    }\n\n    public void sendMsgToPeer(GSSContext aCtxt, String msg) throws GSSException, IOException {\n        byte[] messageBytes = msg.getBytes(StandardCharsets.UTF_8);\n        byte[] wrapped = aCtxt.wrap(messageBytes, 0, messageBytes.length, false);\n        s.getOutputStream().write(wrapped);\n        s.getOutputStream().flush();\n    }\n\n    public void verifyMsgFromPeer(GSSContext aCtxt, String expectedMsg) throws GSSException, IOException {\n        byte[] received = new byte[1024];\n        int bytesRead = s.getInputStream().read(received);\n        byte[] receivedData = Arrays.copyOf(received, bytesRead);\n        byte[] unwrapped = aCtxt.unwrap(receivedData, 0, receivedData.length, null);\n        String actualMsg = new String(unwrapped, StandardCharsets.UTF_8);\n        if (!actualMsg.equals(expectedMsg)) {\n            throw new SecurityException(\"Message verification failed\");\n        }\n    }\n\n    public static void usage() {\n        System.out.println(\"Usage: GSSClient <server> <port>\");\n    }\n\n    public void print(String msg) {\n        System.out.println(msg);\n    }\n\n    public void exit(int status) {\n        try {\n            if (s != null) {\n                s.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.exit(status);\n    }\n}"
  },
  {
    "Task_id": 399,
    "Instruction": "Task Description: Create a TCP client class in Java that establishes a connection to a server, sends data to the server, and properly closes the connection.\n\nClass Description: The `TcpClient` class provides functionality to connect to a TCP server, send data to it, and manage the connection lifecycle. It encapsulates the socket and output stream for communication.\n\nAttributes:\n- socket: Socket - The socket object used for the TCP connection\n- out: OutputStream - The output stream for sending data to the server\n\nMethods:\n- connect(String host, int port) -> void - Establishes a connection to the specified server host and port\n- sendData(String data) -> void - Converts the input string to UTF-8 bytes and sends it to the server\n- close() -> void - Closes the output stream and socket connection",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class TcpClient {\n    private Socket socket;\n    private OutputStream out;\n\n    public void connect(String host, int port) throws IOException {\n        socket = new Socket(host, port);\n        out = socket.getOutputStream();\n    }\n\n    public void sendData(String data) throws IOException {\n        byte[] outputBytes = data.getBytes(\"UTF-8\");\n        out.write(outputBytes);\n        out.flush();\n    }\n\n    public void close() throws IOException {\n        if (out != null) {\n            out.close();\n        }\n        if (socket != null) {\n            socket.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.nio.charset.StandardCharsets;\n\npublic class TcpClient {\n    private Socket socket;\n    private OutputStream out;\n\n    public void connect(String host, int port) {\n        try {\n            socket = new Socket(host, port);\n            out = socket.getOutputStream();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to connect\", e);\n        }\n    }\n\n    public void sendData(String data) {\n        try {\n            out.write(data.getBytes(StandardCharsets.UTF_8));\n            out.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to send data\", e);\n        }\n    }\n\n    public void close() {\n        try {\n            if (out != null) {\n                out.close();\n            }\n            if (socket != null) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a Java class that implements an ActiveMQ message producer capable of sending messages to both queues and topics.\n\nClass Description: The JmsProducer class is responsible for establishing a connection to an ActiveMQ broker, creating both queue and topic destinations, and sending multiple text messages to each destination. It handles connection management and includes error handling for JMS operations.\n\nAttributes:\n- USERNAME: [String] - Default username for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_USER)\n- PASSWORD: [String] - Default password for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_PASSWORD)\n- BROKEURL: [String] - Default broker URL for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_BROKER_URL)\n- SENDNUM: [int] - Number of messages to send to each destination (default: 10)\n\nMethods:\n- run(): [void] - Main method that establishes the connection, creates destinations (queue and topic), and initiates message sending. Handles connection lifecycle and error cases.\n- sendMessage(Session session, MessageProducer messageProducer, String type): [void] - Helper method that creates and sends multiple text messages with timestamps to the specified destination. \n  Parameters:\n    - session: [Session] - JMS session for message creation\n    - messageProducer: [MessageProducer] - Producer for sending messages\n    - type: [String] - Destination type identifier (\"QUEUE\" or \"TOPIC\") for logging purposes",
    "Canonical_solution": "import javax.jms.Connection;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.Destination;\nimport javax.jms.JMSException;\nimport javax.jms.MessageProducer;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\nimport org.apache.activemq.ActiveMQConnection;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class JmsProducer {\n\n    private static final String USERNAME = ActiveMQConnection.DEFAULT_USER;\n    private static final String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;\n    private static final String BROKEURL = ActiveMQConnection.DEFAULT_BROKER_URL;\n    private static final int SENDNUM = 10;\n\n    public static void run() {\n        ConnectionFactory connectionFactory;\n        Connection connection = null;\n        Session session;\n        Destination destination;\n        MessageProducer messageProducer;\n        \n        connectionFactory = new ActiveMQConnectionFactory(JmsProducer.USERNAME, JmsProducer.PASSWORD, JmsProducer.BROKEURL);\n        try {\n            connection = connectionFactory.createConnection();\n            connection.start();\n            session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);\n            destination = session.createQueue(\"SAMPLE_MQ_QUEUE\");\n            messageProducer = session.createProducer(destination);\n            sendMessage(session, messageProducer, \"QUEUE\");\n\n            destination = session.createTopic(\"SAMPLE_MQ_TOPIC\");\n            messageProducer = session.createProducer(destination);\n            sendMessage(session, messageProducer, \"TOPIC\");\n            session.commit();\n            Thread.sleep(1000);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (JMSException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public static void sendMessage(Session session, MessageProducer messageProducer, String type) throws Exception {\n        for (int i = 0; i < JmsProducer.SENDNUM; i++) {\n            Date date = new Date();\n            TextMessage message = session.createTextMessage(\"ActiveMQ \u53d1\u9001\u6d88\u606f\u65f6\u95f4\uff1a\" + date);\n            System.out.println(\"\\t\" + type + \"\\t\u53d1\u9001\u6d88\u606f\uff1aActivemq \u53d1\u9001\u6d88\u606f\u65f6\u95f4\uff1a\" + date);\n            messageProducer.send(message);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 38,
    "right_result": "import javax.jms.*;\nimport java.util.Date;\n\npublic class JmsProducer {\n    private static final String USERNAME = ActiveMQConnection.DEFAULT_USER;\n    private static final String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;\n    private static final String BROKEURL = ActiveMQConnection.DEFAULT_BROKER_URL;\n    private static final int SENDNUM = 10;\n\n    public void run() {\n        Connection connection = null;\n        Session session = null;\n        MessageProducer queueProducer = null;\n        MessageProducer topicProducer = null;\n\n        try {\n            ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKEURL);\n            connection = connectionFactory.createConnection();\n            connection.start();\n            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n            Destination queue = session.createQueue(\"MyQueue\");\n            Destination topic = session.createTopic(\"MyTopic\");\n            queueProducer = session.createProducer(queue);\n            topicProducer = session.createProducer(topic);\n            sendMessage(session, queueProducer, \"QUEUE\");\n            sendMessage(session, topicProducer, \"TOPIC\");\n        } catch (JMSException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (queueProducer != null) queueProducer.close();\n                if (topicProducer != null) topicProducer.close();\n                if (session != null) session.close();\n                if (connection != null) connection.close();\n            } catch (JMSException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void sendMessage(Session session, MessageProducer producer, String type) throws JMSException {\n        for (int i = 0; i < SENDNUM; i++) {\n            TextMessage message = session.createTextMessage(\"Message \" + i + \" - \" + new Date());\n            producer.send(message);\n            System.out.println(\"Sent \" + type + \" message: \" + message.getText());\n        }\n    }\n\n    public static void main(String[] args) {\n        JmsProducer producer = new JmsProducer();\n        producer.run();\n    }\n}"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create a Java class that facilitates HTTP communication using Java's HttpClient, supporting GET requests with configurable options and error handling.\n\nClass Description: The HttpCommunicator class provides functionality to send HTTP GET requests to specified URIs. It includes features like automatic redirect following and optional error suppression for non-critical requests. The class encapsulates the HttpClient instance and provides methods for request execution.\n\nAttributes:\nhttpClient: [HttpClient] - The underlying HttpClient instance used for all HTTP communications, configured to always follow redirects.\n\nMethods:\nsendGetRequest: [Name](String uri, Map<String, Object> attributes) -> String - Sends a GET request to the specified URI. The attributes map can contain optional parameters like \"optional-option\" to suppress exceptions for non-critical requests. Returns the response body as a string or empty string for optional failed requests.\n\nreadUri: [Name](URI uri, boolean optional) -> String - Internal method that constructs and executes the HTTP request. If optional is true, returns empty string on failure instead of throwing an exception.\n\nisHttpOrHttps: [Name](String url) -> boolean - Helper method to check if a URL string uses HTTP or HTTPS protocol. Returns true if the URL starts with \"http://\" or \"https://\".",
    "Canonical_solution": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.Map;\n\npublic class HttpCommunicator {\n\n    private HttpClient httpClient;\n\n    public HttpCommunicator() {\n        this.httpClient = HttpClient.newBuilder()\n                .followRedirects(HttpClient.Redirect.ALWAYS)\n                .build();\n    }\n\n    public String sendGetRequest(String uri, Map<String, Object> attributes) {\n        boolean isOptional = attributes.containsKey(\"optional-option\");\n        return readUri(URI.create(uri), isOptional);\n    }\n\n    private String readUri(URI uri, boolean optional) {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(uri)\n                .GET()\n                .build();\n        try {\n            return httpClient.send(request, HttpResponse.BodyHandlers.ofString()).body();\n        } catch (Exception e) {\n            if (optional) {\n                return \"\";\n            } else {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    private boolean isHttpOrHttps(String url) {\n        return url != null && (url.startsWith(\"http://\") || url.startsWith(\"https://\"));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "```java\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.Map;\n\npublic class HttpCommunicator {\n    private final HttpClient httpClient;\n\n    public HttpCommunicator() {\n        this.httpClient = HttpClient.newBuilder()\n                .redirect(HttpClient.Redirect.ALWAYS)\n                .build();\n    }\n\n    public String sendGetRequest(String uri, Map<String, Object> attributes) {\n        boolean optional = attributes != null && attributes.containsKey(\"optional-option\");\n        try {\n            URI parsedUri = URI.create(uri);\n            return readUri(parsedUri, optional);\n        } catch (Exception e) {\n            if (optional) {\n                return \"\";\n            } else {\n                throw new RuntimeException(\"Failed to create URI: \" + uri, e);\n            }\n        }\n    }\n\n    private String readUri(URI uri, boolean optional) {\n        try {\n            HttpRequest request = HttpRequest.newBuilder(uri).GET().build();\n            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n            if (response.statusCode() >= 200 && response.statusCode() < 300) {\n                return response.body();\n            } else {\n                if (optional) {\n                    return \"\";\n                } else {\n                    throw new RuntimeException(\"HTTP error: \" + response.statusCode());\n                }\n            }\n        } catch (IOException | InterruptedException e) {\n            if (optional) {\n                return \"\";\n            } else {\n                throw new RuntimeException(\"Request failed\", e);\n            }\n        }\n    }\n\n    public boolean isHttpOrHttps(String url) {\n        return url != null && (url.startsWith(\"http://\") || url.startsWith(\"https://\"));\n    }\n}\n```"
  },
  {
    "Task_id": 400,
    "Instruction": "Task Description: Create a TCP client class in Java that establishes a connection to a server, allows sending messages to the server, and receives echoed responses until the termination command is sent.\n\nClass Description: The EchoClient class represents a TCP client that connects to a specified server host and port. It provides functionality for sending user input to the server and displaying the server's response, continuing this echo process until the user sends \"bye\" to terminate the connection.\n\nAttributes:\n- client: Socket - The socket used for the TCP connection to the server\n- input: BufferedReader - Reads user input from the console\n- buf: BufferedReader - Reads data from the server's response stream\n- out: PrintStream - Writes data to the server's output stream\n\nMethods:\n- EchoClient(String host, int port) -> void - Constructor that establishes a connection to the specified host and port, initializing the input/output streams\n- start() -> void - Starts the client interaction loop, reading user input and sending it to the server while displaying responses\n- close() -> void - Closes all open streams and the socket connection",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.net.Socket;\n\npublic class EchoClient {\n\n    private Socket client;\n    private BufferedReader input;\n    private BufferedReader buf;\n    private PrintStream out;\n\n    public EchoClient(String host, int port) throws Exception {\n        client = new Socket(host, port);\n        input = new BufferedReader(new InputStreamReader(System.in));\n        buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        out = new PrintStream(client.getOutputStream());\n    }\n\n    public void start() throws Exception {\n        boolean flag = true;\n        while (flag) {\n            System.out.print(\"\u8f93\u5165\u4fe1\u606f\uff1a\");\n            String str = input.readLine();\n            out.println(str);\n            if (\"bye\".equals(str)) {\n                flag = false;\n            } else {\n                String echo = buf.readLine();\n                System.out.println(echo);\n            }\n        }\n        close();\n    }\n\n    public void close() throws Exception {\n        buf.close();\n        client.close();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class EchoClient {\n    private Socket client;\n    private BufferedReader input;\n    private BufferedReader buf;\n    private PrintStream out;\n\n    public EchoClient(String host, int port) throws IOException {\n        client = new Socket(host, port);\n        input = new BufferedReader(new InputStreamReader(System.in));\n        buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        out = new PrintStream(client.getOutputStream());\n    }\n\n    public void start() {\n        try {\n            String line;\n            while (true) {\n                line = input.readLine();\n                if (line == null || line.equals(\"bye\")) {\n                    break;\n                }\n                out.println(line);\n                String response = buf.readLine();\n                if (response != null) {\n                    System.out.println(\"Server: \" + response);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            close();\n        }\n    }\n\n    public void close() {\n        try {\n            if (input != null) input.close();\n            if (buf != null) buf.close();\n            if (out != null) out.close();\n            if (client != null) client.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 401,
    "Instruction": "Task Description: Create a Java class that implements TCP client functionality for establishing a connection to a server, sending messages, and closing the connection.\n\nClass Description: The `SocketConnectTest` class provides basic TCP client capabilities using Java's Socket and I/O classes. It handles connection establishment, message transmission, and resource cleanup.\n\nAttributes:\n- client: [Socket] - The socket object representing the connection to the server\n- writer: [Writer] - The output stream writer for sending data to the server\n\nMethods:\n- connect: [connect(String host, int port)] -> [void] - Establishes a connection to the specified server host and port, initializing the socket and writer\n- sendMessage: [sendMessage(String message)] -> [void] - Sends the specified message to the connected server\n- close: [close()] -> [void] - Closes the writer and socket connection, releasing system resources",
    "Canonical_solution": "import java.io.*;\nimport java.net.Socket;\n\npublic class SocketConnectTest {\n\n    private Socket client;\n    private Writer writer;\n\n    public void connect(String host, int port) throws IOException {\n        client = new Socket(host, port);\n        writer = new OutputStreamWriter(client.getOutputStream());\n    }\n\n    public void sendMessage(String message) throws IOException {\n        writer.write(message);\n        writer.flush();\n    }\n\n    public void close() throws IOException {\n        writer.close();\n        client.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "import java.io.*;\nimport java.net.*;\n\npublic class SocketConnectTest {\n    private Socket client;\n    private Writer writer;\n\n    public void connect(String host, int port) throws IOException {\n        client = new Socket(host, port);\n        writer = new OutputStreamWriter(client.getOutputStream());\n    }\n\n    public void sendMessage(String message) throws IOException {\n        writer.write(message);\n        writer.flush();\n    }\n\n    public void close() {\n        try {\n            if (writer != null) {\n                writer.close();\n            }\n            if (client != null) {\n                client.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 402,
    "Instruction": "Task Description: Create an asynchronous task in Android that performs an HTTP GET request to a specified server using TCP socket communication, reads the response, and returns it to the caller via a callback mechanism.\n\nClass Description: HttpGetTask is an AsyncTask subclass that handles network operations in the background to prevent blocking the UI thread. It establishes a TCP connection to a server, sends an HTTP GET request, reads the response, and delivers it to a retained fragment through a weak reference.\n\nAttributes:\n- TAG: [String] - A constant for logging purposes\n- HOST: [String] - The hostname of the server to connect to\n- USER_NAME: [String] - The username for authentication\n- HTTP_GET_COMMAND: [String] - The formatted HTTP GET request string\n- mListener: [WeakReference<RetainedFragment>] - Weak reference to the fragment that will receive the result\n\nMethods:\n- HttpGetTask([RetainedFragment retainedFragment]) -> [void] - Constructor that initializes the task with a weak reference to the calling fragment\n- doInBackground([Void... params]) -> [String] - Performs the network operations in the background (opens socket, sends request, reads response)\n- onPostExecute([String result]) -> [void] - Delivers the result to the retained fragment after task completion\n- readStream([InputStream in]) -> [String] - Helper method that reads data from an input stream and returns it as a string",
    "Canonical_solution": "import android.os.AsyncTask;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.lang.ref.WeakReference;\nimport java.net.Socket;\n\npublic class HttpGetTask extends AsyncTask<Void, Void, String> {\n\n    private static final String TAG = \"HttpGetTask\";\n    private static final String HOST = \"api.geonames.org\";\n    private static final String USER_NAME = \"aporter\";\n    private static final String HTTP_GET_COMMAND = \"GET /earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=\"\n            + USER_NAME + \" HTTP/1.1\" + \"\\n\" + \"Host: \" + HOST + \"\\n\"\n            + \"Connection: close\" + \"\\n\\n\";\n\n    private final WeakReference<RetainedFragment> mListener;\n\n    public HttpGetTask(RetainedFragment retainedFragment) {\n        mListener = new WeakReference<>(retainedFragment);\n    }\n\n    @Override\n    protected String doInBackground(Void... params) {\n        Socket socket = null;\n        String data = \"\";\n\n        try {\n            socket = new Socket(HOST, 80);\n            PrintWriter pw = new PrintWriter(new OutputStreamWriter(\n                    socket.getOutputStream()), true);\n            pw.println(HTTP_GET_COMMAND);\n\n            data = readStream(socket.getInputStream());\n\n        } catch (IOException exception) {\n            exception.printStackTrace();\n        } finally {\n            if (null != socket)\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    Log.e(TAG, \"IOException\");\n                }\n        }\n        return data;\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        if (null != mListener.get()) {\n            mListener.get().onDownloadFinished(result);\n        }\n    }\n\n    private String readStream(InputStream in) {\n        BufferedReader reader = null;\n        StringBuilder data = new StringBuilder();\n        try {\n            reader = new BufferedReader(new InputStreamReader(in));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                data.append(line);\n            }\n        } catch (IOException e) {\n            Log.e(TAG, \"IOException\");\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    Log.e(TAG, \"IOException\");\n                }\n            }\n        }\n        return data.toString();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport android.os.AsyncTask;\nimport android.util.Log;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class HttpGetTask extends AsyncTask<Void, Void, String> {\n    private static final String TAG = \"HttpGetTask\";\n    private static final String HOST = \"example.com\";\n    private static final String USER_NAME = \"user\";\n    private static final String HTTP_GET_COMMAND = \"GET / HTTP/1.1\\r\\nHost: \" + HOST + \"\\r\\n\\r\\n\";\n    private final WeakReference<RetainedFragment> mListener;\n\n    public HttpGetTask(RetainedFragment retainedFragment) {\n        this.mListener = new WeakReference<>(retainedFragment);\n    }\n\n    @Override\n    protected String doInBackground(Void... voids) {\n        Socket socket = null;\n        try {\n            socket = new Socket(HOST, 80);\n            OutputStream out = socket.getOutputStream();\n            out.write(HTTP_GET_COMMAND.getBytes());\n            out.flush();\n\n            InputStream in = socket.getInputStream();\n            return readStream(in);\n        } catch (Exception e) {\n            Log.e(TAG, \"Error in doInBackground\", e);\n            return null;\n        } finally {\n            if (socket != null) {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    Log.e(TAG, \"Error closing socket\", e);\n                }\n            }\n        }\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        RetainedFragment fragment = mListener.get();\n        if (fragment != null) {\n            fragment.onTaskComplete(result);\n        }\n    }\n\n    private String readStream(InputStream in) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n        StringBuilder response = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            response.append(line).append(\"\\n\");\n        }\n        return response.toString();\n    }\n}\n```"
  },
  {
    "Task_id": 408,
    "Instruction": "Task Description: Create a Java class that implements a TCP client for basic communication with a server using Java's IO and networking capabilities.\n\nClass Description: The HelloClient class establishes a TCP connection to a specified server, receives messages from the server, and properly closes the connection when done. It uses Java's Socket and BufferedReader for network communication.\n\nAttributes:\n- client: Socket - The socket object representing the connection to the server\n- buf: BufferedReader - The buffered reader for receiving data from the server\n\nMethods:\n- connect(String host, int port) -> void - Establishes a connection to the specified server host and port\n  - Input: \n    - host: String - The server hostname or IP address\n    - port: int - The server port number\n  - Throws: Exception - If connection fails\n- receive() -> String - Reads a line of text from the server\n  - Returns: String - The received message from the server\n  - Throws: Exception - If reading fails\n- close() -> void - Closes the connection and cleans up resources\n  - Throws: Exception - If closing fails",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\n\npublic class HelloClient {\n\n    private Socket client;\n    private BufferedReader buf;\n\n    public void connect(String host, int port) throws Exception {\n        client = new Socket(host, port);\n        InputStreamReader inputStreamReader = new InputStreamReader(client.getInputStream());\n        buf = new BufferedReader(inputStreamReader);\n    }\n\n    public String receive() throws Exception {\n        String str = buf.readLine();\n        return str;\n    }\n\n    public void close() throws Exception {\n        buf.close();\n        client.close();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class HelloClient {\n    private Socket client;\n    private BufferedReader buf;\n\n    public void connect(String host, int port) throws Exception {\n        client = new Socket(host, port);\n        buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n    }\n\n    public String receive() throws Exception {\n        return buf.readLine();\n    }\n\n    public void close() throws Exception {\n        if (buf != null) {\n            buf.close();\n        }\n        if (client != null) {\n            client.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality for interacting with the OpenMHz API, including methods for testing connection authorization and uploading audio recordings with metadata.\n\nClass Description: OpenMHzHttpClient is a utility class that provides HTTP client operations for the OpenMHz API. It handles both synchronous and asynchronous requests, manages connection settings, and processes API responses. The class includes error handling and logging capabilities.\n\nAttributes:\n- mLog: Logger - SLF4J logger instance for error and debug logging\n- mHttpClient: HttpClient - Configured HTTP client instance with HTTP/2 support, redirect policy, and timeout settings\n\nMethods:\n- testConnection(String host, String systemName, String apiKey) -> String - Tests API connection and authorization by sending a POST request to the authorize endpoint. Returns status messages based on response code.\n  Input:\n    - host: String - Base URL of the OpenMHz server\n    - systemName: String - Name of the target system\n    - apiKey: String - API key for authentication\n  Output:\n    - String - Status message (\"OK\", \"Invalid API Key\", \"Invalid System Name\", \"No Response\", or \"Unknown Exception\")\n\n- sendAudioRecording(String uri, byte[] audioBytes, String boundary, String apiKey, long frequency, long timestampSeconds, int durationSeconds, String talkgroup, String radioId) -> void - Asynchronously uploads an audio recording with metadata to the OpenMHz API using multipart/form-data format.\n  Input:\n    - uri: String - Target endpoint URL\n    - audioBytes: byte[] - Audio file data to upload\n    - boundary: String - Multipart boundary string\n    - apiKey: String - API key for authentication\n    - frequency: long - Frequency value in Hz\n    - timestampSeconds: long - Recording start time in seconds\n    - durationSeconds: int - Recording duration in seconds\n    - talkgroup: String - Talkgroup identifier\n    - radioId: String - Radio source identifier\n  Output: None (asynchronous operation with error logging)",
    "Canonical_solution": "import com.google.common.net.HttpHeaders;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\nimport java.util.concurrent.CompletionException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class OpenMHzHttpClient {\n\n    private final static Logger mLog = LoggerFactory.getLogger(OpenMHzHttpClient.class);\n    private HttpClient mHttpClient = HttpClient.newBuilder()\n        .version(HttpClient.Version.HTTP_2)\n        .followRedirects(HttpClient.Redirect.NORMAL)\n        .connectTimeout(Duration.ofSeconds(20))\n        .build();\n\n    public String testConnection(String host, String systemName, String apiKey) {\n        String uri = host + \"/\" + systemName + \"/authorize\";\n\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(uri))\n            .header(HttpHeaders.CONTENT_TYPE, \"application/x-www-form-urlencoded\")\n            .header(HttpHeaders.USER_AGENT, \"sdrtrunk\")\n            .POST(HttpRequest.BodyPublishers.ofString(\"api_key=\" + apiKey))\n            .build();\n\n        try {\n            HttpResponse<String> response = mHttpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n            if (response.statusCode() == 200) {\n                return \"OK\";\n            } else if(response.statusCode() == 403) {\n                return \"Invalid API Key\";\n            } else if(response.statusCode() == 500) {\n                return \"Invalid System Name\";\n            }\n\n            return \"No Response\";\n        }\n        catch(Exception e) {  \n            Throwable throwableCause = e.getCause();\n\n            if(throwableCause instanceof ConnectException) {\n                return \"No Response\";\n            }\n\n            mLog.error(\"Exception connecting to OpenMHz server [\" + e.toString() + \"]\");\n            return \"Unknown Exception\";\n        }\n    }\n\n    public void sendAudioRecording(String uri, byte[] audioBytes, String boundary, String apiKey, long frequency, \n                                  long timestampSeconds, int durationSeconds, String talkgroup, String radioId) {\n        OpenMHzBuilder bodyBuilder = new OpenMHzBuilder();\n        bodyBuilder\n            .addFile(audioBytes)\n            .addPart(FormField.FREQ, frequency)\n            .addPart(FormField.START_TIME, timestampSeconds)\n            .addPart(FormField.STOP_TIME, timestampSeconds)\n            .addPart(FormField.CALL_LENGTH, durationSeconds)\n            .addPart(FormField.TALKGROUP_NUM, talkgroup)\n            .addPart(FormField.EMERGENCY, 0)\n            .addPart(FormField.API_KEY, apiKey)\n            .addPart(FormField.SOURCE_LIST, \"[{ \\\"pos\\\": 0.00, \\\"src\\\": \" + radioId + \"}]\");\n\n        HttpRequest fileRequest = HttpRequest.newBuilder()\n            .uri(URI.create(uri))\n            .header(HttpHeaders.CONTENT_TYPE, \"multipart/form-data; boundary=\" + boundary)\n            .header(HttpHeaders.USER_AGENT, \"sdrtrunk\")\n            .POST(bodyBuilder.build())\n            .build();\n\n        mHttpClient.sendAsync(fileRequest, HttpResponse.BodyHandlers.ofString())\n            .whenComplete((fileResponse, throwable1) -> {\n                if(throwable1 != null || fileResponse.statusCode() != 200) {\n                    if(throwable1 instanceof IOException || throwable1 instanceof CompletionException) {\n                        mLog.error(\"OpenMHz API file upload fail [\" +\n                            fileResponse.statusCode() + \"] response [\" +\n                            fileResponse.body() + \"]\");\n                    }\n                    else {\n                        mLog.error(\"OpenMHz API file upload fail [\" +\n                            fileResponse.statusCode() + \"] response [\" +\n                            fileResponse.body() + \"]\");\n                    }\n                }\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.io.ByteArrayOutputStream;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class OpenMHzHttpClient {\n    private final Logger mLog = LoggerFactory.getLogger(OpenMHzHttpClient.class);\n    private final HttpClient mHttpClient;\n\n    public OpenMHzHttpClient() {\n        mHttpClient = HttpClient.newBuilder()\n                .version(HttpClient.Version.HTTP_2)\n                .followRedirects(HttpClient.Redirect.NORMAL)\n                .connectTimeout(java.time.Duration.ofSeconds(10))\n                .build();\n    }\n\n    public String testConnection(String host, String systemName, String apiKey) {\n        try {\n            String url = host + \"/authorize\";\n            String jsonBody = String.format(\"{\\\"system_name\\\": \\\"%s\\\", \\\"api_key\\\": \\\"%s\\\"}\", systemName, apiKey);\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(URI.create(url))\n                    .header(\"Content-Type\", \"application/json\")\n                    .POST(HttpRequest.BodyPublishers.ofString(jsonBody))\n                    .build();\n\n            HttpResponse<String> response = mHttpClient.send(request, HttpResponse.BodyHandlers.ofString());\n            int statusCode = response.statusCode();\n\n            switch (statusCode) {\n                case 200:\n                    return \"OK\";\n                case 401:\n                    return \"Invalid API Key\";\n                case 404:\n                    return \"Invalid System Name\";\n                default:\n                    return \"Unknown Exception\";\n            }\n        } catch (Exception e) {\n            mLog.error(\"Error testing connection\", e);\n            return \"No Response\";\n        }\n    }\n\n    public void sendAudioRecording(String uri, byte[] audioBytes, String boundary, String apiKey, long frequency, long timestampSeconds, int durationSeconds, String talkgroup, String radioId) {\n        try {\n            ByteArrayOutputStream multipartBody = new ByteArrayOutputStream();\n            String boundaryStr = \"--\" + boundary + \"\\r\\n\";\n\n            multipartBody.write(boundaryStr.getBytes());\n            multipartBody.write(\"Content-Disposition: form-data; name=\\\"audio\\\"; filename=\\\"recording.wav\\\"\\r\\n\".getBytes());\n            multipartBody.write(\"Content-Type: application/octet-stream\\r\\n\\r\\n\".getBytes());\n            multipartBody.write(audioBytes);\n            multipartBody.write(\"\\r\\n\".getBytes());\n\n            String[] metadataFields = {\n                \"frequency\", String.valueOf(frequency),\n                \"timestamp_seconds\", String.valueOf(timestampSeconds),\n                \"duration_seconds\", String.valueOf(durationSeconds),\n                \"talkgroup\", talkgroup,\n                \"radio_id\", radioId\n            };\n\n            for (int i = 0; i < metadataFields.length; i += 2) {\n                String fieldName = metadataFields[i];\n                String fieldValue = metadataFields[i + 1];\n                multipartBody.write(boundaryStr.getBytes());\n                multipartBody.write(String.format(\"Content-Disposition: form-data; name=\\\"%s\\\"\\r\\n\\r\\n%s\\r\\n\", fieldName, fieldValue).getBytes());\n            }\n\n            multipartBody.write((\"--\" + boundary + \"--\\r\\n\").getBytes());\n\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(URI.create(uri))\n                    .header(\"Authorization\", \"Bearer \" + apiKey)\n                    .header(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary)\n                    .POST(HttpRequest.BodyPublishers.ofByteArray(multipartBody.toByteArray()))\n                    .build();\n\n            mHttpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n                    .thenApply(response -> {\n                        if (response.statusCode() >= 200 && response.statusCode() < 300) {\n                            mLog.info(\"Audio recording uploaded successfully\");\n                        } else {\n                            mLog.error(\"Failed to upload audio recording. Status code: {}\", response.statusCode());\n                        }\n                        return response;\n                    })\n                    .exceptionally(ex -> {\n                        mLog.error(\"Error uploading audio recording\", ex);\n                        return null;\n                    });\n        } catch (Exception e) {\n            mLog.error(\"Error building multipart request\", e);\n        }\n    }\n}"
  },
  {
    "Task_id": 410,
    "Instruction": "Task Description: Create a Java class that establishes a TCP connection to a server, sends commands, and receives responses, including the ability to list files and receive image data from the server.\n\nClass Description: The DeviceConnection class manages a TCP socket connection to a server, providing methods to interact with the server by sending commands and processing responses. It handles both text-based communication and binary image data transfer, with optional ZIP compression support.\n\nAttributes:\n- socket: Socket - The TCP socket connection to the server\n- reader: Reader - Inner class for reading data from the server\n- writer: Writer - Inner class for writing data to the server\n- USE_ZIP: boolean - Flag indicating whether to use ZIP compression for image data\n\nMethods:\n- DeviceConnection() -> void - Constructor that establishes a connection to the server at localhost:4242\n- close() -> void - Closes the socket connection\n- listLayoutFiles() -> ArrayList<String> - Requests and returns a list of layout files from the server\n- takePicture() -> Image - Requests an image from the server and returns it as a BufferedImage\n- complete() -> void - Verifies the completion of a server operation\n- Reader(InputStream) -> void - Inner class constructor for reading data\n- nextLine() -> String - Reads a line of text from the server (Reader class method)\n- Writer(OutputStream) -> void - Inner class constructor for writing data\n- println(String) -> void - Writes a line of text to the server (Writer class method)",
    "Canonical_solution": "import java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.*;\nimport java.net.Socket;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.IntBuffer;\nimport java.util.ArrayList;\nimport java.util.zip.ZipInputStream;\n\npublic class DeviceConnection {\n    private static final boolean USE_ZIP = true;\n    private Socket socket;\n    private Reader reader;\n    private Writer writer;\n\n    public DeviceConnection() {\n        try {\n            socket = new Socket(\"localhost\", 4242);\n            reader = new Reader(socket.getInputStream());\n            writer = new Writer(socket.getOutputStream());\n        } catch (IOException e) {\n            System.err.println(\"Did you \\\"adb forward tcp:4242 tcp:4242\\\"\");\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            if (socket != null) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public ArrayList<String> listLayoutFiles() {\n        ArrayList<String> files = new ArrayList<>();\n        if (writer == null) {\n            return files;\n        }\n        writer.println(\"LIST\");\n        boolean done = false;\n        while (!done) {\n            String response = reader.nextLine();\n            if (response.equals(\"DONE\")) {\n                done = true;\n            } else {\n                files.add(response);\n                System.out.println(\"Server response: \" + response);\n            }\n        }\n        return files;\n    }\n\n    public Image takePicture() {\n        writer.println(\"TAKE_PICTURE\");\n        String response = reader.nextLine();\n        int w = Integer.parseInt(response);\n        response = reader.nextLine();\n        int h = Integer.parseInt(response);\n        response = reader.nextLine();\n        int size = Integer.parseInt(response);\n        if (size == 0) {\n            complete();\n            return null;\n        }\n        byte[] bytes = new byte[size];\n        BufferedImage image = null;\n        try {\n            InputStream inputStream = reader.stream;\n            int offset = 0;\n            while (offset < size) {\n                int toRead = size - offset;\n                int read = inputStream.read(bytes, offset, toRead);\n                if (read > 0) {\n                    offset += read;\n                }\n            }\n            if (USE_ZIP) {\n                try {\n                    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);\n                    ZipInputStream zipInputStream = new ZipInputStream(byteArrayInputStream);\n                    zipInputStream.getNextEntry();\n                    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n                    byte[] buff = new byte[32768];\n                    int len = 0;\n                    while ((len = zipInputStream.read(buff)) > 0) {\n                        byteArrayOutputStream.write(buff, 0, len);\n                    }\n                    zipInputStream.closeEntry();\n                    zipInputStream.close();\n                    bytes = byteArrayOutputStream.toByteArray();\n                } catch(IOException e){\n                    e.printStackTrace();\n                }\n            }\n\n            image = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n            IntBuffer intBuffer = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();\n            int[] array = new int[intBuffer.remaining()];\n            intBuffer.get(array);\n            for (int i = 0; i < array.length; i++) {\n                int pixel = array[i];\n                int alpha = (pixel >> 24) & 0xff;\n                int red = (pixel >> 16) & 0xff;\n                int green = (pixel >> 8) & 0xff;\n                int blue = (pixel) & 0xff;\n                array[i] = (alpha << 24) + (blue << 16) + (green << 8) + red;\n            }\n            image.getRaster().setDataElements(0, 0, w, h, array);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        complete();\n        return image;\n    }\n\n    private class Reader {\n        DataInputStream stream;\n\n        Reader(InputStream stream) {\n            this.stream = new DataInputStream(stream);\n        }\n\n        String nextLine() {\n            try {\n                return stream.readUTF();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return \"\";\n        }\n    }\n\n    private class Writer {\n        DataOutputStream stream;\n\n        Writer(OutputStream stream) {\n            this.stream = new DataOutputStream(stream);\n        }\n\n        void println(String text) {\n            try {\n                stream.writeUTF(text);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void complete() {\n        String done = reader.nextLine();\n        if (!done.equals(\"DONE\")) {\n            System.out.println(\"WTF!!\");\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "import java.io.*;\nimport java.net.*;\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.util.ArrayList;\nimport java.util.zip.ZipInputStream;\n\npublic class DeviceConnection {\n    private Socket socket;\n    private Reader reader;\n    private Writer writer;\n    private final boolean USE_ZIP = true;\n\n    public DeviceConnection() throws IOException {\n        socket = new Socket(\"localhost\", 4242);\n        reader = new Reader(socket.getInputStream());\n        writer = new Writer(socket.getOutputStream());\n    }\n\n    public void close() throws IOException {\n        socket.close();\n    }\n\n    public ArrayList<String> listLayoutFiles() throws IOException {\n        writer.println(\"LIST_LAYOUTS\");\n        ArrayList<String> files = new ArrayList<>();\n        String line;\n        while (!(line = reader.nextLine()).equals(\"END\")) {\n            files.add(line);\n        }\n        return files;\n    }\n\n    public BufferedImage takePicture() throws IOException {\n        writer.println(\"TAKE_PICTURE\");\n        InputStream inputStream = socket.getInputStream();\n        if (USE_ZIP) {\n            inputStream = new ZipInputStream(inputStream);\n        }\n        return ImageIO.read(inputStream);\n    }\n\n    public void complete() throws IOException {\n        writer.println(\"COMPLETE\");\n        String response = reader.nextLine();\n        if (!response.equals(\"OK\")) {\n            throw new IOException(\"Completion failed: \" + response);\n        }\n    }\n\n    private class Reader {\n        private BufferedReader bufferedReader;\n\n        Reader(InputStream inputStream) {\n            bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n        }\n\n        String nextLine() throws IOException {\n            return bufferedReader.readLine();\n        }\n    }\n\n    private class Writer {\n        private PrintWriter printWriter;\n\n        Writer(OutputStream outputStream) {\n            printWriter = new PrintWriter(new OutputStreamWriter(outputStream));\n        }\n\n        void println(String s) {\n            printWriter.println(s);\n            printWriter.flush();\n        }\n    }\n}"
  },
  {
    "Task_id": 411,
    "Instruction": "Task Description: Implement a TCP client class in Java that establishes a connection to a server, handles bidirectional communication using object serialization, and manages various types of data frames for benchmarking purposes.\n\nClass Description: BinaryLinkClient is a TCP client implementation that connects to a benchmarking server, exchanging serialized data frames for coordinating benchmark execution, handling results, and managing output streams. It features thread-safe frame pushing, error handling, and resource management.\n\nAttributes:\n- lock: Object - Synchronization object for thread safety\n- clientSocket: Socket - TCP socket connection to the server\n- oos: ObjectOutputStream - Output stream for sending serialized objects\n- ois: ObjectInputStream - Input stream for receiving serialized objects\n- streamErr: ForwardingPrintStream - Error output stream that forwards to server\n- streamOut: ForwardingPrintStream - Standard output stream that forwards to server\n- outputFormat: OutputFormat - Proxy for formatting output frames\n- failed: boolean - Flag indicating connection failure state\n- resetToGo: int - Counter for periodic stream resets\n- delayedFrames: List<Serializable> - Buffer for frames during nested pushes\n- inFrame: boolean - Flag indicating ongoing frame transmission\n\nMethods:\n- BinaryLinkClient(String hostName, int hostPort) -> void - Constructor establishing connection to specified host:port\n- pushFrame(Serializable frame) -> void - Thread-safe method to send a serializable frame to server\n- readFrame() -> Object - Reads and returns the next frame from server\n- close() -> void - Closes all connections and streams\n- handshake() -> Options - Performs initial handshake with server, returns benchmark options\n- requestPlan() -> ActionPlan - Requests benchmark action plan from server\n- pushResults(IterationResult res) -> void - Sends benchmark results to server\n- pushException(BenchmarkException error) -> void - Sends benchmark exception to server\n- pushResultMetadata(BenchmarkResultMetaData res) -> void - Sends result metadata to server\n- getOutStream() -> PrintStream - Returns standard output stream\n- getErrStream() -> PrintStream - Returns error output stream\n- getOutputFormat() -> OutputFormat - Returns output format proxy\n\nInner Class:\n- ForwardingPrintStream - Custom PrintStream that forwards output to server as frames",
    "Canonical_solution": "import org.openjdk.jmh.runner.link.*;\nimport org.openjdk.jmh.runner.ActionPlan;\nimport org.openjdk.jmh.runner.BenchmarkException;\nimport org.openjdk.jmh.runner.format.OutputFormat;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.util.FileUtils;\nimport org.openjdk.jmh.util.Utils;\n\nimport java.io.*;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic final class BinaryLinkClient {\n\n    private static final int RESET_EACH = Integer.getInteger(\"jmh.link.resetEach\", 100);\n    private static final int BUFFER_SIZE = Integer.getInteger(\"jmh.link.bufferSize\", 64*1024);\n\n    private final Object lock;\n    private final Socket clientSocket;\n    private final ObjectOutputStream oos;\n    private final ObjectInputStream ois;\n    private final ForwardingPrintStream streamErr;\n    private final ForwardingPrintStream streamOut;\n    private final OutputFormat outputFormat;\n    private volatile boolean failed;\n    private int resetToGo;\n    private final List<Serializable> delayedFrames;\n    private boolean inFrame;\n\n    public BinaryLinkClient(String hostName, int hostPort) throws IOException {\n        this.lock = new Object();\n        this.clientSocket = new Socket(hostName, hostPort);\n        this.oos = new ObjectOutputStream(new BufferedOutputStream(clientSocket.getOutputStream(), BUFFER_SIZE));\n        this.oos.flush();\n        this.ois = new ObjectInputStream(new BufferedInputStream(clientSocket.getInputStream(), BUFFER_SIZE));\n        this.streamErr = new ForwardingPrintStream(OutputFrame.Type.ERR);\n        this.streamOut = new ForwardingPrintStream(OutputFrame.Type.OUT);\n        this.outputFormat = (OutputFormat) Proxy.newProxyInstance(\n                Thread.currentThread().getContextClassLoader(),\n                new Class[]{OutputFormat.class},\n                (proxy, method, args) -> {\n                    pushFrame(new OutputFormatFrame(ClassConventions.getMethodName(method), args));\n                    return null;\n                }\n        );\n        this.delayedFrames = new ArrayList<>();\n    }\n\n    private void pushFrame(Serializable frame) throws IOException {\n        if (failed) {\n            throw new IOException(\"Link had failed already\");\n        }\n\n        synchronized (lock) {\n            if (inFrame) {\n                delayedFrames.add(frame);\n                return;\n            }\n\n            try {\n                inFrame = true;\n\n                if (resetToGo-- < 0) {\n                    oos.reset();\n                    resetToGo = RESET_EACH;\n                }\n\n                oos.writeObject(frame);\n                oos.flush();\n\n                while (!delayedFrames.isEmpty()) {\n                    List<Serializable> frames = new ArrayList<>(delayedFrames);\n                    delayedFrames.clear();\n                    for (Serializable f : frames) {\n                        oos.writeObject(f);\n                    }\n                    oos.flush();\n                }\n            } catch (IOException e) {\n                failed = true;\n                throw e;\n            } finally {\n                inFrame = false;\n            }\n        }\n    }\n\n    private Object readFrame() throws IOException, ClassNotFoundException {\n        try {\n            return ois.readObject();\n        } catch (ClassNotFoundException | IOException ex) {\n            failed = true;\n            throw ex;\n        }\n    }\n\n    public void close() throws IOException {\n        FileUtils.safelyClose(streamErr);\n        FileUtils.safelyClose(streamOut);\n\n        synchronized (lock) {\n            oos.writeObject(new FinishingFrame());\n            FileUtils.safelyClose(ois);\n            FileUtils.safelyClose(oos);\n            clientSocket.close();\n        }\n    }\n\n    public Options handshake() throws IOException, ClassNotFoundException {\n        synchronized (lock) {\n            pushFrame(new HandshakeInitFrame(Utils.getPid()));\n            Object reply = readFrame();\n            if (reply instanceof HandshakeResponseFrame) {\n                return (((HandshakeResponseFrame) reply).getOpts());\n            } else {\n                throw new IllegalStateException(\"Got the erroneous reply: \" + reply);\n            }\n        }\n    }\n\n    public ActionPlan requestPlan() throws IOException, ClassNotFoundException {\n        synchronized (lock) {\n            pushFrame(new InfraFrame(InfraFrame.Type.ACTION_PLAN_REQUEST));\n            Object reply = readFrame();\n            if (reply instanceof ActionPlanFrame) {\n                return ((ActionPlanFrame) reply).getActionPlan();\n            } else {\n                throw new IllegalStateException(\"Got the erroneous reply: \" + reply);\n            }\n        }\n    }\n\n    public void pushResults(IterationResult res) throws IOException {\n        pushFrame(new ResultsFrame(res));\n    }\n\n    public void pushException(BenchmarkException error) throws IOException {\n        pushFrame(new ExceptionFrame(error));\n    }\n\n    public void pushResultMetadata(BenchmarkResultMetaData res) throws IOException {\n        pushFrame(new ResultMetadataFrame(res));\n    }\n\n    public PrintStream getOutStream() {\n        return streamOut;\n    }\n\n    public PrintStream getErrStream() {\n        return streamErr;\n    }\n\n    public OutputFormat getOutputFormat() {\n        return outputFormat;\n    }\n\n    class ForwardingPrintStream extends PrintStream {\n        public ForwardingPrintStream(final OutputFrame.Type type) {\n            super(new OutputStream() {\n                @Override\n                public void write(int b) throws IOException {\n                    pushFrame(new OutputFrame(type, new byte[]{(byte) (b & 0xFF)}));\n                }\n\n                @Override\n                public void write(byte[] b) throws IOException {\n                    pushFrame(new OutputFrame(type, Arrays.copyOf(b, b.length)));\n                }\n\n                @Override\n                public void write(byte[] b, int off, int len) throws IOException {\n                    pushFrame(new OutputFrame(type, Arrays.copyOfRange(b, off, len + off)));\n                }\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class BinaryLinkClient {\n    private final Object lock = new Object();\n    private Socket clientSocket;\n    private ObjectOutputStream oos;\n    private ObjectInputStream ois;\n    private ForwardingPrintStream streamErr;\n    private ForwardingPrintStream streamOut;\n    private OutputFormat outputFormat;\n    private boolean failed = false;\n    private int resetToGo = 0;\n    private List<Serializable> delayedFrames = new ArrayList<>();\n    private boolean inFrame = false;\n\n    public BinaryLinkClient(String hostName, int hostPort) throws IOException {\n        clientSocket = new Socket(hostName, hostPort);\n        oos = new ObjectOutputStream(clientSocket.getOutputStream());\n        ois = new ObjectInputStream(clientSocket.getInputStream());\n        streamOut = new ForwardingPrintStream(this);\n        streamErr = new ForwardingPrintStream(this);\n    }\n\n    public void pushFrame(Serializable frame) {\n        synchronized (lock) {\n            if (inFrame) {\n                delayedFrames.add(frame);\n            } else {\n                try {\n                    inFrame = true;\n                    oos.writeObject(frame);\n                    oos.flush();\n                    inFrame = false;\n                    while (!delayedFrames.isEmpty()) {\n                        Serializable delayed = delayedFrames.remove(0);\n                        oos.writeObject(delayed);\n                        oos.flush();\n                    }\n                } catch (IOException e) {\n                    failed = true;\n                }\n            }\n        }\n    }\n\n    public Object readFrame() {\n        try {\n            return ois.readObject();\n        } catch (ClassNotFoundException | IOException e) {\n            failed = true;\n            return null;\n        }\n    }\n\n    public void close() {\n        try {\n            if (clientSocket != null) {\n                clientSocket.close();\n            }\n            if (oos != null) {\n                oos.close();\n            }\n            if (ois != null) {\n                ois.close();\n            }\n            if (streamOut != null) {\n                streamOut.close();\n            }\n            if (streamErr != null) {\n                streamErr.close();\n            }\n        } catch (IOException e) {\n            // Handle\n        }\n    }\n\n    public Options handshake() {\n        try {\n            pushFrame(new HandshakeRequest());\n            return (Options) readFrame();\n        } catch (Exception e) {\n            failed = true;\n            return null;\n        }\n    }\n\n    public ActionPlan requestPlan() {\n        try {\n            pushFrame(new RequestPlan());\n            return (ActionPlan) readFrame();\n        } catch (Exception e) {\n            failed = true;\n            return null;\n        }\n    }\n\n    public void pushResults(IterationResult res) {\n        try {\n            pushFrame(res);\n        } catch (Exception e) {\n            failed = true;\n        }\n    }\n\n    public void pushException(BenchmarkException error) {\n        try {\n            pushFrame(error);\n        } catch (Exception e) {\n            failed = true;\n        }\n    }\n\n    public void pushResultMetadata(BenchmarkResultMetaData res) {\n        try {\n            pushFrame(res);\n        } catch (Exception e) {\n            failed = true;\n        }\n    }\n\n    public PrintStream getOutStream() {\n        return streamOut;\n    }\n\n    public PrintStream getErrStream() {\n        return streamErr;\n    }\n\n    public OutputFormat getOutputFormat() {\n        return outputFormat;\n    }\n\n    private class ForwardingPrintStream extends PrintStream {\n        private final BinaryLinkClient client;\n\n        public ForwardingPrintStream(BinaryLinkClient client) {\n            super(new OutputStream() {\n                @Override\n                public void write(int b) {\n                }\n            });\n            this.client = client;\n        }\n\n        @Override\n        public void write(byte[] b) {\n            client.pushFrame(b);\n        }\n\n        @Override\n        public void write(byte[] b, int off, int len) {\n            byte[] sub = Arrays.copyOfRange(b, off, off + len);\n            client.pushFrame(sub);\n        }\n\n        @Override\n        public void write(int b) {\n            byte[] data = { (byte) b };\n            client.pushFrame(data);\n        }\n\n        public void close() {\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 418,
    "Instruction": "Task Description: Implement a Java class for handling Protocol Buffers (protobuf) communication over TCP sockets, including message sending, receiving, and callback management for different response types (error, warning, info, success).\n\nClass Description: ProtobufIO is a TCP client implementation that facilitates bidirectional protobuf message exchange with a server. It handles message serialization/deserialization, connection management, and provides callback mechanisms for processing server responses.\n\nAttributes:\n\nsock: [Socket] - TCP socket connection to the server\ninputStream: [InputStream] - Input stream for reading data from the server\noutputStream: [OutputStream] - Output stream for writing data to the server\nthread: [Thread] - Worker thread for handling incoming messages\nshutdown: [boolean] - Flag indicating whether the connection should be terminated\noutStream: [PrintStream] - Output stream for logging/debugging\ncallbacks: [List<MessageCallback>] - Registered callback handlers for server responses\napiCallIdGen: [AtomicLong] - Generator for unique API call IDs\nCALLBACK_LOCK: [Object] - Synchronization object for callback operations\n\nMethods:\n\nProtobufIO: [Constructor](String host, int port, PrintStream out, String threadName) -> [void] - Initializes TCP connection to specified host:port and starts worker thread\nsend: [long](String apiCall, MessageLite msg) -> [long] - Sends a protobuf message with auto-generated API call ID\nsend: [long](long apiCallIdRef, String apiCallRef, MessageLite... messages) -> [long] - Sends one or more protobuf messages with specified API call ID\nsend: [void](byte[] data) -> [void] - Sends raw byte data with length header\nregisterCallback: [void](MessageCallback callback) -> [void] - Registers a callback handler for server responses\nunregisterCallback: [void](MessageCallback callback) -> [void] - Unregisters a callback handler\ngetNextApiCallId: [long]() -> [long] - Generates and returns a new unique API call ID\nshutdown: [void]() -> [void] - Closes the connection and stops the worker thread\ncallback: [void](long apiCallId, long retCode, String message, String cause, String correction, String details, Map<String, String> objRefsMap) -> [void] - Internal method to dispatch callbacks based on response type\nProtobufIOWorker.run: [void]() -> [void] - Worker thread implementation for reading and processing incoming messages (inner class)",
    "Canonical_solution": "import com.linbit.linstor.api.ApiConsts;\nimport com.linbit.linstor.api.ApiRcUtils;\nimport com.linbit.linstor.proto.MsgHeaderOuterClass.MsgHeader;\nimport com.linbit.linstor.proto.common.ApiCallResponseOuterClass.ApiCallResponse;\n\nimport static com.linbit.linstor.api.ApiConsts.MASK_ERROR;\nimport static com.linbit.linstor.api.ApiConsts.MASK_INFO;\nimport static com.linbit.linstor.api.ApiConsts.MASK_WARN;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport com.google.protobuf.MessageLite;\n\npublic class ProtobufIO\n{\n    public static final Object CALLBACK_LOCK = new Object();\n\n    public interface MessageCallback\n    {\n        void error(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n        void warn(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n        void info(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n        void success(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n    }\n\n    protected Socket sock;\n    protected InputStream inputStream;\n    protected OutputStream outputStream;\n\n    protected Thread thread;\n    protected boolean shutdown;\n\n    private PrintStream outStream;\n    private List<MessageCallback> callbacks = new ArrayList<>();\n    protected AtomicLong apiCallIdGen = new AtomicLong(0);\n\n    public ProtobufIO(\n        String host,\n        int port,\n        PrintStream out,\n        String threadName\n    )\n        throws UnknownHostException, IOException\n    {\n        outStream = out;\n        sock = new Socket(host, port);\n        inputStream = sock.getInputStream();\n        outputStream = sock.getOutputStream();\n\n        shutdown = false;\n        thread = new Thread(new ProtobufIOWorker(), threadName);\n        thread.start();\n    }\n\n    public long send(String apiCall, MessageLite msg) throws IOException\n    {\n        return send(\n            getNextApiCallId(),\n            apiCall,\n            msg\n        );\n    }\n\n    public long send(long apiCallIdRef, String apiCallRef, MessageLite... messages) throws IOException\n    {\n        MsgHeader headerMsg = MsgHeader.newBuilder()\n            .setMsgType(MsgHeader.MsgType.API_CALL)\n            .setMsgContent(apiCallRef)\n            .setApiCallId(apiCallIdRef)\n            .build();\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        headerMsg.writeDelimitedTo(baos);\n\n        for (MessageLite msg : messages)\n        {\n            msg.writeDelimitedTo(baos);\n        }\n        byte[] protoData = baos.toByteArray();\n        baos.close();\n\n        send(protoData);\n\n        return apiCallIdRef;\n    }\n\n    public void send(byte[] data) throws IOException\n    {\n        byte[] header = new byte[16];\n        ByteBuffer byteBuffer = ByteBuffer.wrap(header);\n        byteBuffer.putInt(0, 0);\n        byteBuffer.putInt(4, data.length);\n\n        outputStream.write(header);\n        outputStream.write(data);\n    }\n\n    public void registerCallback(MessageCallback callback)\n    {\n        callbacks.add(callback);\n    }\n\n    public void unregisterCallback(MessageCallback callback)\n    {\n        callbacks.remove(callback);\n    }\n\n    public long getNextApiCallId()\n    {\n        return apiCallIdGen.incrementAndGet();\n    }\n\n    public void shutdown() throws IOException\n    {\n        shutdown = true;\n        sock.close();\n        thread.interrupt();\n    }\n\n    private class ProtobufIOWorker implements Runnable\n    {\n        @Override\n        public void run()\n        {\n            StringBuilder sb = new StringBuilder();\n            byte[] header = new byte[16];\n            int read;\n            int offset = 0;\n            int protoLen;\n            while (!shutdown)\n            {\n                try\n                {\n                    offset = 0;\n                    while (offset != header.length)\n                    {\n                        read = inputStream.read(header, offset, header.length - offset);\n                        if (read == -1)\n                        {\n                            return;\n                        }\n                        offset += read;\n                    }\n\n                    protoLen = (header[4] & 0xFF) << 24 |\n                               (header[5] & 0xFF) << 16 |\n                               (header[6] & 0xFF) << 8  |\n                               (header[7] & 0xFF);\n                    offset = 0;\n                    byte[] data = new byte[protoLen];\n\n                    while (offset != protoLen)\n                    {\n                        read = inputStream.read(data, offset, protoLen - offset);\n                        if (read == -1)\n                        {\n                            return;\n                        }\n                        offset += read;\n                    }\n\n                    ByteArrayInputStream bais = new ByteArrayInputStream(data);\n                    MsgHeader protoHeader = MsgHeader.parseDelimitedFrom(bais);\n\n                    sb.setLength(0);\n                    int responseIdx = 1;\n\n                    String apiCall = protoHeader.getMsgContent();\n                    if (bais.available() == 0)\n                    {\n                        sb.append(\"ApiCallId: \")\n                            .append(protoHeader.getApiCallId())\n                            .append(\"\\n\")\n                            .append(apiCall)\n                            .append(\"\\n\");\n                    }\n                    if (!apiCall.equals(ApiConsts.API_VERSION))\n                    {\n                        while (bais.available() > 0)\n                        {\n                            ApiCallResponse response = ApiCallResponse.parseDelimitedFrom(bais);\n                            long retCode = response.getRetCode();\n                            String message = response.getMessage();\n                            String cause = response.getCause();\n                            String correction = response.getCorrection();\n                            String details = response.getDetails();\n                            Map<String, String> objRefsMap = response.getObjRefsMap();\n\n                            callback(protoHeader.getApiCallId(), retCode, message, cause, correction,\n                                details, objRefsMap);\n                        }\n                    }\n                }\n                catch (IOException ioExc)\n                {\n                    if (!shutdown)\n                    {\n                        ioExc.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class ProtobufIO {\n    private Socket sock;\n    private InputStream inputStream;\n    private OutputStream outputStream;\n    private Thread thread;\n    private boolean shutdown;\n    private PrintStream out;\n    private List<MessageCallback> callbacks;\n    private AtomicLong apiCallIdGen;\n    private final Object CALLBACK_LOCK = new Object();\n\n    public ProtobufIO(String host, int port, PrintStream out, String threadName) throws IOException {\n        this.out = out;\n        this.callbacks = new ArrayList<>();\n        this.apiCallIdGen = new AtomicLong(0);\n        this.sock = new Socket(host, port);\n        this.inputStream = sock.getInputStream();\n        this.outputStream = sock.getOutputStream();\n        this.shutdown = false;\n        this.thread = new Thread(new ProtobufIOWorker(), threadName);\n        this.thread.start();\n    }\n\n    public long send(String apiCall, MessageLite msg) throws IOException {\n        long apiCallId = getNextApiCallId();\n        byte[] data = msg.toByteArray();\n        sendWithLengthHeader(data);\n        return apiCallId;\n    }\n\n    public long send(long apiCallIdRef, String apiCallRef, MessageLite... messages) throws IOException {\n        for (MessageLite msg : messages) {\n            byte[] data = msg.toByteArray();\n            sendWithLengthHeader(data);\n        }\n        return apiCallIdRef;\n    }\n\n    public void send(byte[] data) throws IOException {\n        sendWithLengthHeader(data);\n    }\n\n    private void sendWithLengthHeader(byte[] data) throws IOException {\n        byte[] lengthBytes = new byte[4];\n        int length = data.length;\n        lengthBytes[0] = (byte) (length >> 24);\n        lengthBytes[1] = (byte) (length >> 16);\n        lengthBytes[2] = (byte) (length >> 8);\n        lengthBytes[3] = (byte) length;\n        outputStream.write(lengthBytes);\n        outputStream.write(data);\n        outputStream.flush();\n    }\n\n    public void registerCallback(MessageCallback callback) {\n        synchronized (CALLBACK_LOCK) {\n            callbacks.add(callback);\n        }\n    }\n\n    public void unregisterCallback(MessageCallback callback) {\n        synchronized (CALLBACK_LOCK) {\n            callbacks.remove(callback);\n        }\n    }\n\n    public long getNextApiCallId() {\n        return apiCallIdGen.incrementAndGet();\n    }\n\n    public void shutdown() {\n        try {\n            shutdown = true;\n            thread.interrupt();\n            sock.close();\n            inputStream.close();\n            outputStream.close();\n        } catch (IOException e) {\n            out.println(\"Error closing connection: \" + e.getMessage());\n        }\n    }\n\n    protected void callback(long apiCallId, long retCode, String message, String cause, String correction, String details, Map<String, String> objRefsMap) {\n        synchronized (CALLBACK_LOCK) {\n            for (MessageCallback callback : callbacks) {\n                callback.onResponse(apiCallId, retCode, message, cause, correction, details, objRefsMap);\n            }\n        }\n    }\n\n    private class ProtobufIOWorker implements Runnable {\n        @Override\n        public void run() {\n            try {\n                byte[] buffer = new byte[4];\n                while (!shutdown) {\n                    int bytesRead = inputStream.read(buffer, 0, 4);\n                    if (bytesRead != 4) {\n                        break;\n                    }\n                    int length = ((buffer[0] & 0xFF) << 24) | ((buffer[1] & 0xFF) << 16) | ((buffer[2] & 0xFF) << 8) | (buffer[3] & 0xFF);\n                    byte[] data = new byte[length];\n                    bytesRead = inputStream.read(data);\n                    if (bytesRead != length) {\n                        break;\n                    }\n                    MessageLite message = ResponseMessage.parseFrom(data);\n                    long apiCallId = message.getApiCallId();\n                    long retCode = message.getRetCode();\n                    String messageStr = message.getMessage();\n                    String cause = message.getCause();\n                    String correction = message.getCorrection();\n                    String details = message.getDetails();\n                    Map<String, String> objRefsMap = message.getObjRefsMap();\n                    callback(apiCallId, retCode, messageStr, cause, correction, details, objRefsMap);\n                }\n            } catch (IOException e) {\n                out.println(\"Worker thread error: \" + e.getMessage());\n            } finally {\n                try {\n                    sock.close();\n                } catch (IOException e) {\n                    out.println(\"Error closing socket: \" + e.getMessage());\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality for making various types of HTTP requests and handling responses.\n\nClass Description: The HttpCommunicationClient class provides methods for performing HTTP operations (GET, POST) and handling redirects. It manages an HTTP client instance and supports custom headers and browser-like requests.\n\nAttributes:\naddress: [InetSocketAddress] - The target server address (host and port) for HTTP requests\nhttpClient: [HttpClient] - The underlying HTTP client instance used for making requests\n\nMethods:\nsetupHttpClient: [setupHttpClient(ThreadPool threadPool)] -> [void] - Initializes the HTTP client with redirect policy and thread pool\ncloseClient: [closeClient()] -> [void] - Closes the HTTP client resources\nexecuteAndDefaultAssertions: [executeAndDefaultAssertions(HttpRequest request)] -> [HttpResponse<String>] - Internal method to execute requests and handle responses\nget: [get(String path, String[]... headers)] -> [HttpResponse<String>] - Performs a GET request to specified path with optional headers\nbrowserGet: [browserGet(String uri)] -> [HttpResponse<String>] - Performs a GET request with browser-like User-Agent header\npost: [post(String path)] -> [HttpResponse<String>] - Performs a POST request to specified path\ngetAllRedirectLocations: [getAllRedirectLocations(String path, String[]... headers)] -> [List<String>] - Retrieves all redirect locations for a request\nbrowserHeader: [static browserHeader()] -> [String[]] - Returns browser-like User-Agent header (static utility method)",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpClient.Redirect;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpRequest.Builder;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpResponse.BodyHandlers;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class HttpCommunicationClient {\n\n    protected InetSocketAddress address;\n    protected HttpClient httpClient;\n\n    public void setupHttpClient(ThreadPool threadPool) {\n        httpClient = HttpClient.newBuilder()\n            .followRedirects(Redirect.NORMAL)\n            .executor(threadPool.generic())\n            .build();\n    }\n\n    public void closeClient() {\n        httpClient.close();\n    }\n\n    private HttpResponse<String> executeAndDefaultAssertions(HttpRequest request) throws Exception {\n        var resp = httpClient.send(request, BodyHandlers.ofString());\n        return resp;\n    }\n\n    public HttpResponse<String> get(String path, String[] ... headers) throws Exception {\n        URI uri = URI.create(String.format(\"http://%s:%s%s\", address.getHostName(), address.getPort(), path));\n        Builder builder = HttpRequest.newBuilder(uri);\n        for (String[] header : headers) {\n            builder.header(header[0], header[1]);\n        }\n        return executeAndDefaultAssertions(builder.build());\n    }\n\n    public HttpResponse<String> browserGet(String uri) throws Exception {\n        return get(uri, browserHeader());\n    }\n\n    public HttpResponse<String> post(String path) throws Exception {\n        URI uri = URI.create(String.format(\"http://%s:%s%s\", address.getHostName(), address.getPort(), path));\n        HttpRequest request = HttpRequest.newBuilder(uri)\n            .POST(BodyPublishers.noBody())\n            .build();\n        return executeAndDefaultAssertions(request);\n    }\n\n    public List<String> getAllRedirectLocations(String path, String[] ... headers) throws Exception {\n        URI uri = URI.create(String.format(\"http://%s:%s%s\", address.getHostName(), address.getPort(), path));\n        Builder builder = HttpRequest.newBuilder(uri);\n        for (String[] header : headers) {\n            builder.header(header[0], header[1]);\n        }\n        var response = httpClient.send(builder.build(), BodyHandlers.discarding());\n        response = response.previousResponse().orElse(null);\n        List<String> redirects = new ArrayList<>();\n        while (response != null) {\n            redirects.addAll(response.headers().allValues(\"location\"));\n            response = response.previousResponse().orElse(null);\n        }\n        return redirects;\n    }\n\n    static String[] browserHeader() {\n        return new String[] {\n            \"User-Agent\",\n            \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\n        };\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "import java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class HttpCommunicationClient {\n    private final InetSocketAddress address;\n    private HttpClient httpClient;\n\n    public HttpCommunicationClient(InetSocketAddress address) {\n        this.address = address;\n    }\n\n    public void setupHttpClient(ThreadPool threadPool) {\n        this.httpClient = HttpClient.newBuilder()\n                .executor(threadPool.getExecutor())\n                .followRedirects(HttpClient.Redirect.NORMAL)\n                .build();\n    }\n\n    public void closeClient() {\n        if (httpClient != null) {\n            httpClient.close();\n        }\n    }\n\n    private HttpResponse<String> executeAndDefaultAssertions(HttpRequest request) throws Exception {\n        return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    }\n\n    public HttpResponse<String> get(String path, String[]... headers) throws Exception {\n        String uri = \"http://\" + address.getHostString() + \":\" + address.getPort() + path;\n        HttpRequest.Builder requestBuilder = HttpRequest.newBuilder(new URI(uri)).GET();\n        for (String[] header : headers) {\n            if (header.length == 2) {\n                requestBuilder.header(header[0], header[1]);\n            }\n        }\n        HttpRequest request = requestBuilder.build();\n        return executeAndDefaultAssertions(request);\n    }\n\n    public HttpResponse<String> browserGet(String uri) throws Exception {\n        String[] browserHeaders = browserHeader();\n        return get(uri, browserHeaders);\n    }\n\n    public HttpResponse<String> post(String path) throws Exception {\n        String uri = \"http://\" + address.getHostString() + \":\" + address.getPort() + path;\n        HttpRequest request = HttpRequest.newBuilder(new URI(uri))\n                .POST(HttpRequest.BodyPublishers.noBody())\n                .build();\n        return executeAndDefaultAssertions(request);\n    }\n\n    public List<String> getAllRedirectLocations(String path, String[]... headers) throws Exception {\n        List<String> locations = new ArrayList<>();\n        String uri = \"http://\" + address.getHostString() + \":\" + address.getPort() + path;\n        HttpRequest request = HttpRequest.newBuilder(new URI(uri)).GET().build();\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() >= 300 && response.statusCode() < 400) {\n            String location = response.headers().firstValue(\"Location\").orElse(null);\n            if (location != null) {\n                locations.add(location);\n            }\n        }\n        return locations;\n    }\n\n    public static String[] browserHeader() {\n        return new String[]{\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"};\n    }\n}"
  },
  {
    "Task_id": 426,
    "Instruction": "Task Description: Implement a Java class that provides TCP client functionality using Java NIO (Non-blocking I/O) for efficient network communication. The class should support both plaintext and SSL connections, manage multiple connections, and handle connection lifecycle operations.\n\nClass Description: The NioTcpClient class is a non-blocking TCP client implementation using Java NIO. It manages multiple socket connections, handles connection establishment, and provides methods for connection management. It supports both plaintext and SSL connections through a configurable transmission mechanism.\n\nAttributes:\n- nioSelector: Selector - The NIO selector used for managing multiple channels\n- keyMap: Map<String, SelectionKey> - Maps connection IDs to their corresponding selection keys\n- time: Time - Provides time-related functionality\n- sslFactory: SSLFactory - Handles SSL-related operations if SSL connections are used\n- networkConfig: NetworkConfig - Contains network configuration parameters\n\nMethods:\n- NioTcpClient(Time, SSLFactory, NetworkConfig) -> NioTcpClient - Constructor that initializes the selector, time, SSL factory, and network configuration\n- connect(InetSocketAddress, int, int, PortType) -> String - Establishes a new connection to the specified address with given buffer sizes and port type, returns a connection ID\n- generateConnectionId(SocketChannel) -> String - Generates a unique connection ID based on local and remote socket addresses\n- createTransmission(String, SelectionKey, String, int, PortType, SSLFactory.Mode) -> Transmission - Creates an appropriate transmission object (plaintext or SSL) for the connection\n- disconnect(String) -> void - Disconnects the connection with the specified ID\n- close() -> void - Closes all connections and releases all resources",
    "Canonical_solution": "import com.github.ambry.network.NetworkSend;\nimport com.github.ambry.network.NetworkReceive;\nimport com.github.ambry.network.PortType;\nimport com.github.ambry.commons.SSLFactory;\nimport com.github.ambry.config.NetworkConfig;\nimport com.github.ambry.utils.Time;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class NioTcpClient {\n\n  private final java.nio.channels.Selector nioSelector;\n  private final Map<String, SelectionKey> keyMap;\n  private final Time time;\n  private final SSLFactory sslFactory;\n  private final NetworkConfig networkConfig;\n\n  public NioTcpClient(Time time, SSLFactory sslFactory, NetworkConfig networkConfig) throws IOException {\n    this.nioSelector = java.nio.channels.Selector.open();\n    this.time = time;\n    this.keyMap = new HashMap<>();\n    this.sslFactory = sslFactory;\n    this.networkConfig = networkConfig;\n  }\n\n  public String connect(InetSocketAddress address, int sendBufferSize, int receiveBufferSize, PortType portType)\n      throws IOException {\n    SocketChannel channel = SocketChannel.open();\n    channel.configureBlocking(false);\n    channel.socket().setKeepAlive(true);\n    channel.socket().setSendBufferSize(sendBufferSize);\n    channel.socket().setReceiveBufferSize(receiveBufferSize);\n    channel.socket().setTcpNoDelay(true);\n    try {\n      channel.connect(address);\n    } catch (IOException e) {\n      channel.close();\n      throw e;\n    }\n    String connectionId = generateConnectionId(channel);\n    SelectionKey key = channel.register(this.nioSelector, SelectionKey.OP_CONNECT);\n    Transmission transmission = createTransmission(connectionId, key, address.getHostName(), address.getPort(), portType,\n        SSLFactory.Mode.CLIENT);\n    key.attach(transmission);\n    this.keyMap.put(connectionId, key);\n    return connectionId;\n  }\n\n  private String generateConnectionId(SocketChannel channel) {\n    return channel.socket().getLocalAddress().getHostAddress() + \":\" + channel.socket().getLocalPort() + \"-\" +\n        channel.socket().getInetAddress().getHostAddress() + \":\" + channel.socket().getPort();\n  }\n\n  protected Transmission createTransmission(String connectionId, SelectionKey key, String hostname, int port,\n      PortType portType, SSLFactory.Mode mode) throws IOException {\n    if (portType == PortType.PLAINTEXT) {\n      return new PlainTextTransmission(connectionId, (SocketChannel) key.channel(), key, time, null, networkConfig);\n    } else if (portType == PortType.SSL) {\n      return new SSLTransmission(sslFactory, connectionId, (SocketChannel) key.channel(), key, hostname, port, time,\n          null, mode, networkConfig);\n    } else {\n      throw new IllegalArgumentException(\"Unsupported portType \" + portType);\n    }\n  }\n\n  public void disconnect(String connectionId) {\n    SelectionKey key = this.keyMap.get(connectionId);\n    if (key != null) {\n      key.cancel();\n    }\n  }\n\n  public void close() throws IOException {\n    for (SelectionKey key : this.nioSelector.keys()) {\n      Transmission transmission = (Transmission) key.attachment();\n      if (transmission != null) {\n        transmission.close();\n      }\n      key.channel().close();\n    }\n    this.nioSelector.close();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "right_result": "```java\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.net.InetSocketAddress;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class NioTcpClient {\n    private final Selector nioSelector;\n    private final Map<String, SelectionKey> keyMap;\n    private final Time time;\n    private final SSLFactory sslFactory;\n    private final NetworkConfig networkConfig;\n\n    public NioTcpClient(Time time, SSLFactory sslFactory, NetworkConfig networkConfig) throws Exception {\n        this.nioSelector = Selector.open();\n        this.keyMap = new HashMap<>();\n        this.time = time;\n        this.sslFactory = sslFactory;\n        this.networkConfig = networkConfig;\n    }\n\n    public String connect(InetSocketAddress address, int readBufferSize, int writeBufferSize, PortType portType) throws Exception {\n        SocketChannel channel = SocketChannel.open();\n        channel.configureBlocking(false);\n        channel.connect(address);\n        SelectionKey key = channel.register(nioSelector, SelectionKey.OP_CONNECT);\n        String connectionId = generateConnectionId(channel);\n        keyMap.put(connectionId, key);\n        return connectionId;\n    }\n\n    private String generateConnectionId(SocketChannel channel) {\n        InetSocketAddress local = (InetSocketAddress) channel.getLocalAddress();\n        InetSocketAddress remote = (InetSocketAddress) channel.getRemoteAddress();\n        return String.format(\"%s:%d-%s:%d\", \n            local.getAddress().getHostAddress(), local.getPort(), \n            remote.getAddress().getHostAddress(), remote.getPort());\n    }\n\n    private Transmission createTransmission(String connectionId, SelectionKey key, String host, int port, PortType portType, SSLFactory.Mode mode) {\n        if (portType == PortType.PLAINTEXT) {\n            return new PlaintextTransmission(key, host, port, networkConfig.getReadBufferSize(), networkConfig.getWriteBufferSize());\n        } else {\n            return new SSLEncryptedTransmission(key, host, port, networkConfig.getReadBufferSize(), networkConfig.getWriteBufferSize(), sslFactory.createSSLEngine(mode));\n        }\n    }\n\n    public void disconnect(String connectionId) {\n        SelectionKey key = keyMap.remove(connectionId);\n        if (key != null) {\n            key.cancel();\n            try {\n                key.channel().close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void close() {\n        for (Map.Entry<String, SelectionKey> entry : keyMap.entrySet()) {\n            SelectionKey key = entry.getValue();\n            key.cancel();\n            try {\n                key.channel().close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        try {\n            nioSelector.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 428,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Java NIO (Non-blocking I/O) to send messages to a server. The client should support multiple sender threads, track total bytes and messages sent, and allow for both direct and heap byte buffers.\n\nClass Description: NioClientTest is a TCP client implementation that uses Java NIO's SocketChannel to communicate with a server. It manages multiple sender threads, tracks performance metrics, and provides interactive control via console input.\n\nAttributes:\n- running: boolean - Flag to control the main loop's execution\n- total_bytes_sent: LongAdder - Counter for total bytes sent to the server\n- total_msgs: LongAdder - Counter for total messages sent to the server\n- senders: Sender[] - Array of sender threads\n\nMethods:\n- create(int size, boolean direct) -> ByteBuffer - Creates a new ByteBuffer with specified size and type (direct or heap)\n- start(InetAddress host, boolean direct, int num_threads) -> void - Main method to start the client and handle user input\n- sendMessages(InetAddress host, boolean direct, int num_threads) -> void - Creates and starts sender threads\n- Sender(InetAddress host, boolean direct, CountDownLatch latch) -> void - Constructor for the inner Sender class\n- run() -> void - The Sender thread's main execution method (connects to server and sends data)\n\nInner Class: Sender extends Thread\nAttributes:\n- ch: SocketChannel - The channel used for communication\n- latch: CountDownLatch - Synchronization aid for thread coordination\n- host: InetAddress - The server's host address\n- direct: boolean - Flag for buffer type (direct or heap)\n- buf: ByteBuffer - The buffer used for message data\n\nMethods:\n- run() -> void - Connects to server, waits for latch, then sends messages until byte limit is reached",
    "Canonical_solution": "import org.jgroups.util.Util;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SocketChannel;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.atomic.LongAdder;\n\npublic class NioClientTest {\n    protected volatile boolean running=true;\n    protected final LongAdder total_bytes_sent=new LongAdder();\n    protected final LongAdder total_msgs=new LongAdder();\n    protected Sender[] senders;\n\n    protected static ByteBuffer create(int size, boolean direct) {\n        return direct? ByteBuffer.allocateDirect(size) : ByteBuffer.allocate(size);\n    }\n\n    protected void start(InetAddress host, boolean direct, int num_threads) throws Exception {\n        boolean looping=true;\n        while(looping) {\n            int c=Util.keyPress(\"[1] send [x] exit\");\n            switch(c) {\n                case '1':\n                    sendMessages(host, direct, num_threads);\n                    break;\n                case 'x':\n                case -1:\n                    looping=false;\n                    break;\n            }\n        }\n    }\n\n    protected void sendMessages(InetAddress host, boolean direct, int num_threads) throws Exception {\n        total_msgs.reset();\n        total_bytes_sent.reset();\n        senders=new Sender[num_threads];\n        final CountDownLatch latch=new CountDownLatch(1);\n        for(int i=0; i < senders.length; i++)\n            senders[i]=new Sender(host, direct, latch);\n        for(Sender sender: senders)\n            sender.start();\n        latch.countDown();\n        for(Sender sender: senders)\n            sender.join();\n    }\n\n    protected class Sender extends Thread {\n        protected SocketChannel ch;\n        protected final CountDownLatch latch;\n        protected final InetAddress host;\n        protected final boolean direct;\n        protected final ByteBuffer buf;\n\n        public Sender(InetAddress host, boolean direct, CountDownLatch latch) {\n            this.latch=latch;\n            this.host=host;\n            this.direct=direct;\n            buf=create(NioServerPerfTest.SIZE, direct);\n        }\n\n        public void run() {\n            try {\n                ch=SocketChannel.open();\n                ch.configureBlocking(true);\n                ch.connect(new InetSocketAddress(host, 7500));\n                latch.await();\n            }\n            catch(Exception e) {\n                e.printStackTrace();\n            }\n            for(;;) {\n                total_bytes_sent.add(NioServerPerfTest.SIZE);\n                if(total_bytes_sent.sum() > NioServerPerfTest.BYTES_TO_SEND)\n                    break;\n                buf.rewind();\n                try {\n                    ch.write(buf);\n                    total_msgs.increment();\n                }\n                catch(IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            Util.close(ch);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "right_result": "```java\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketChannel;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.LongAdder;\nimport java.util.Scanner;\n\npublic class NioClientTest {\n    private volatile boolean running = true;\n    private final LongAdder total_bytes_sent = new LongAdder();\n    private final LongAdder total_msgs = new LongAdder();\n    private Sender[] senders;\n\n    public ByteBuffer create(int size, boolean direct) {\n        return direct ? ByteBuffer.allocateDirect(size) : ByteBuffer.allocate(size);\n    }\n\n    public void start(InetAddress host, boolean direct, int num_threads) {\n        if (running) return;\n        running = true;\n        CountDownLatch latch = new CountDownLatch(1);\n        senders = new Sender[num_threads];\n        for (int i = 0; i < num_threads; i++) {\n            senders[i] = new Sender(host, direct, latch);\n            senders[i].start();\n        }\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Type 'exit' to stop the client.\");\n        while (running) {\n            String input = scanner.nextLine();\n            if (\"exit\".equals(input)) {\n                running = false;\n                for (Sender sender : senders) {\n                    sender.interrupt();\n                }\n                break;\n            }\n        }\n        scanner.close();\n    }\n\n    private class Sender extends Thread {\n        private final InetAddress host;\n        private final boolean direct;\n        private final CountDownLatch latch;\n        private SocketChannel ch;\n        private ByteBuffer buf;\n\n        public Sender(InetAddress host, boolean direct, CountDownLatch latch) {\n            this.host = host;\n            this.direct = direct;\n            this.latch = latch;\n        }\n\n        @Override\n        public void run() {\n            try {\n                latch.await();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                return;\n            }\n\n            try {\n                ch = SocketChannel.open();\n                ch.connect(new InetSocketAddress(host, 8080));\n                ch.configureBlocking(false);\n\n                buf = create(1024, direct);\n                String message = \"Hello, server!\";\n                buf.put(message.getBytes());\n                buf.flip();\n\n                while (running) {\n                    if (ch.write(buf) > 0) {\n                        total_bytes_sent.add(buf.limit());\n                        total_msgs.increment();\n                        buf.flip();\n                    }\n                    try {\n                        Thread.sleep(100);\n                    } catch (InterruptedException e) {\n                        Thread.currentThread().interrupt();\n                        break;\n                    }\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    if (ch != null) ch.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 430,
    "Instruction": "Task Description: Implement a Java class that establishes and manages a non-blocking TCP client connection to a Redis server using Java NIO (New I/O) techniques. The class should handle connection establishment, data writing, reading, and resource cleanup.\n\nClass Description: PassiveRedisIndexer is a TCP client that connects to a Redis server using non-blocking I/O operations. It manages connection state, handles write operations through a queue, and reads server responses while efficiently managing system resources.\n\nAttributes:\n- writeQueue: Queue<ByteBuffer> - A thread-safe queue holding data buffers to be written to the server\n- ref: AtomicReference<SocketHandler> - Atomic reference to the current socket handler instance\n- conMan: NIOConnectionManager - Manages NIO channel registration and event selection\n- config: ConfigReader - Reads configuration data for server connection details\n- namespaces: Map<String,String> - Static map containing XML namespace definitions for configuration parsing\n\nMethods:\n- getAddress() -> InetAddress - Retrieves the Redis server address from configuration\n  - Input: None\n  - Output: InetAddress - The server address to connect to\n\nSocketHandler Inner Class:\n- chan: SocketChannel - The NIO channel for the TCP connection\n- awaitingWriteNotification: boolean - Flag indicating if write operations are pending\n- toWrite: ByteBuffer - Current buffer being written to the channel\n- oblivion: ByteBuffer - Buffer for reading server responses (discarded in this implementation)\n\nSocketHandler Methods:\n- open() -> void - Initializes and opens the socket channel in non-blocking mode\n  - Input: None\n  - Output: None\n- close() -> void - Cleans up resources and closes the connection\n  - Input: None\n  - Output: None\n- getChannel() -> SocketChannel - Returns the socket channel\n  - Input: None\n  - Output: SocketChannel - The managed socket channel\n- registrationEvent(NIOConnectionManager, SelectionKey) -> void - Handles channel registration events\n  - Input: manager (NIOConnectionManager), key (SelectionKey)\n  - Output: None\n- selectionEvent(SelectionKey) -> void - Handles channel I/O events (connect, read, write)\n  - Input: key (SelectionKey)\n  - Output: None\n- read() -> void - Reads data from the channel (into oblivion buffer)\n  - Input: None\n  - Output: None\n- doStateChecks(long) -> void - Performs periodic connection state checks\n  - Input: now (long) - current timestamp\n  - Output: None\n- calcInterestOps() -> int - Calculates current interest operations for the selector\n  - Input: None\n  - Output: int - Bitmask of interest operations (READ, WRITE, CONNECT)",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.SocketChannel;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport lbms.plugins.mldht.utils.NIOConnectionManager;\nimport lbms.plugins.mldht.utils.Selectable;\nimport the8472.utils.ConfigReader;\nimport the8472.utils.XMLUtils;\nimport the8472.utils.concurrent.SerializedTaskExecutor;\n\npublic class PassiveRedisIndexer {\n\n    private Queue<ByteBuffer> writeQueue = new ConcurrentLinkedQueue<>();\n    private AtomicReference<SocketHandler> ref = new AtomicReference<>();\n    private NIOConnectionManager conMan;\n    private ConfigReader config;\n    private static final Map<String,String> namespaces = Map.of(\"xsi\",\"http://www.w3.org/2001/XMLSchema-instance\");\n\n    class SocketHandler implements Selectable {\n        \n        SocketChannel chan;\n        volatile boolean awaitingWriteNotification = true;\n        ByteBuffer toWrite;\n        ByteBuffer oblivion = ByteBuffer.allocateDirect(4*1024);\n        \n        void open() {\n            try {\n                chan = SocketChannel.open();\n                chan.configureBlocking(false);\n                chan.connect(new InetSocketAddress(getAddress(),6379));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            \n            conMan.register(this);\n        }\n        \n        void close() {\n            writeQueue.clear();\n            ref.compareAndSet(this, null);\n            try {\n                chan.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    \n        @Override\n        public SocketChannel getChannel() {\n            return chan;\n        }\n    \n        @Override\n        public void registrationEvent(NIOConnectionManager manager, SelectionKey key) throws IOException {}\n        \n        @Override\n        public void selectionEvent(SelectionKey key) throws IOException {\n            if(key.isValid() && key.isConnectable()) {\n                chan.finishConnect();\n                conMan.interestOpsChanged(this);\n            }\n                \n            if(key.isValid() && key.isReadable())\n                read();\n            if(key.isValid() && key.isWritable()) {\n                awaitingWriteNotification = false;\n                tryWrite.run();\n                conMan.interestOpsChanged(this);\n            }\n        }\n        \n        Runnable tryWrite = SerializedTaskExecutor.onceMore(() -> {\n            while(!awaitingWriteNotification && !writeQueue.isEmpty()) {\n                if(toWrite == null)\n                    toWrite = writeQueue.poll();\n                if(toWrite == null)\n                    continue;\n                \n                int written = 0;\n                try {\n                    written = chan.write(toWrite);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                \n                if(written < 0) {\n                    awaitingWriteNotification = true;\n                    close();\n                    continue;\n                }\n                \n                if(toWrite.remaining() > 0) {\n                    awaitingWriteNotification = true;\n                    conMan.interestOpsChanged(this);\n                } else {\n                    toWrite = null;\n                }\n            }\n        });\n        \n        void read() throws IOException {\n            while(true) {\n                oblivion.clear();\n                int read = chan.read(oblivion);\n                if(read < 0)\n                    close();\n                if(read <= 0)\n                    break;\n            }\n        }\n    \n        @Override\n        public void doStateChecks(long now) throws IOException {\n            if(!chan.isOpen()) {\n                close();\n                conMan.deRegister(this);\n            }\n        }\n    \n        @Override\n        public int calcInterestOps() {\n            int ops = SelectionKey.OP_READ;\n            \n            if(chan.isConnectionPending())\n                ops |= SelectionKey.OP_CONNECT;\n            \n            if(awaitingWriteNotification)\n                ops |= SelectionKey.OP_WRITE;\n                \n            return ops;\n        }\n    }\n\n    private InetAddress getAddress() {\n        return config.get(XMLUtils.buildXPath(\"//components/component[@xsi:type='mldht:redisIndexerType']/address\",namespaces))\n                   .flatMap(str -> Optional.ofNullable(str))\n                   .map(str -> {\n                       try {\n                           return InetAddress.getByName(str);\n                       } catch (Exception e) {\n                           throw new RuntimeException(e);\n                       }\n                   })\n                   .get();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "right_result": "```java\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.SocketChannel;\nimport java.util.Map;\nimport java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class PassiveRedisIndexer {\n    private final Queue<ByteBuffer> writeQueue = new ConcurrentLinkedQueue<>();\n    private final AtomicReference<SocketHandler> ref = new AtomicReference<>();\n    private final NIOConnectionManager conMan;\n    private final ConfigReader config;\n    private final Map<String, String> namespaces;\n\n    public PassiveRedisIndexer(NIOConnectionManager conMan, ConfigReader config, Map<String, String> namespaces) {\n        this.conMan = conMan;\n        this.config = config;\n        this.namespaces = namespaces;\n    }\n\n    public InetAddress getAddress() {\n        String host = config.getProperty(\"redis.host\");\n        int port = Integer.parseInt(config.getProperty(\"redis.port\"));\n        try {\n            return InetAddress.getByName(host);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to get Redis server address\", e);\n        }\n    }\n\n    private class SocketHandler {\n        private final SocketChannel chan;\n        private boolean awaitingWriteNotification;\n        private ByteBuffer toWrite;\n        private final ByteBuffer oblivion = ByteBuffer.allocate(1024);\n\n        public SocketHandler() throws Exception {\n            this.chan = SocketChannel.open();\n            this.chan.configureBlocking(false);\n        }\n\n        public void open() {\n            try {\n                InetAddress address = PassiveRedisIndexer.this.getAddress();\n                int port = Integer.parseInt(PassiveRedisIndexer.this.config.getProperty(\"redis.port\"));\n                chan.connect(new InetSocketAddress(address, port));\n                conMan.registerChannel(chan, this);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void close() {\n            try {\n                chan.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        public SocketChannel getChannel() {\n            return chan;\n        }\n\n        public void registrationEvent(NIOConnectionManager manager, SelectionKey key) {\n            if (key.isConnectable()) {\n                try {\n                    chan.finishConnect();\n                    key.interestOps(SelectionKey.OP_READ);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        public void selectionEvent(SelectionKey key) {\n            if (key.isConnectable()) {\n                try {\n                    chan.finishConnect();\n                    key.interestOps(SelectionKey.OP_READ);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            } else if (key.isReadable()) {\n                read();\n            } else if (key.isWritable()) {\n                write();\n            }\n        }\n\n        private void read() {\n            try {\n                int bytesRead = chan.read(oblivion);\n                if (bytesRead == -1) {\n                    close();\n                    return;\n                }\n                oblivion.flip();\n                oblivion.clear();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        private void write() {\n            if (toWrite == null || !toWrite.hasRemaining()) {\n                toWrite = writeQueue.poll();\n                if (toWrite == null) {\n                    key.interestOps(SelectionKey.OP_READ);\n                    return;\n                }\n            }\n            try {\n                int written = chan.write(toWrite);\n                if (!toWrite.hasRemaining()) {\n                    toWrite = null;\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void doStateChecks(long now) {\n            // Implement state checks if needed\n        }\n\n        public int calcInterestOps() {\n            int ops = 0;\n            if (!writeQueue.isEmpty()) {\n                ops |= SelectionKey.OP_WRITE;\n            }\n            if (chan.isConnected()) {\n                ops |= SelectionKey.OP_READ;\n            }\n            return ops;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 432,
    "Instruction": "Task Description: Create a Java class that implements asynchronous TCP client functionality using java.nio channels for non-blocking network communication, with support for connection management, socket configuration, and asynchronous I/O operations.\n\nClass Description: AsynchronousSocketChannelStream is a class that provides asynchronous TCP client functionality using Java NIO's AsynchronousSocketChannel. It handles connection establishment, socket configuration, and asynchronous read/write operations with support for connection retries and error handling.\n\nAttributes:\n- serverAddress: [ServerAddress] - The target server address to connect to\n- inetAddressResolver: [InetAddressResolver] - Resolves hostnames to IP addresses\n- settings: [SocketSettings] - Configuration for socket options and timeouts\n- group: [AsynchronousChannelGroup] - Optional channel group for resource management\n\nMethods:\n- openAsync([OperationContext operationContext], [AsyncCompletionHandler<Void> handler]) -> [void] - Initiates an asynchronous connection to the server, with completion notified via handler\n- initializeSocketChannel([AsyncCompletionHandler<Void> handler], [Queue<SocketAddress> socketAddressQueue]) -> [void] - Internal method to attempt connection to a socket address\n- OpenCompletionHandler([AsyncCompletionHandler<Void> handler], [Queue<SocketAddress> socketAddressQueue], [AsynchronousSocketChannel attemptConnectionChannel]) -> [void] - Handles connection completion/failure and manages retry logic\n- AsynchronousSocketChannelAdapter([AsynchronousSocketChannel channel]) -> [void] - Wrapper class that implements ExtendedAsynchronousByteChannel interface for I/O operations\n\nThe OpenCompletionHandler nested class provides:\n- completed([Void result], [Object attachment]) -> [void] - Handles successful connection\n- failed([Throwable exc], [Object attachment]) -> [void] - Handles connection failure and manages retries\n\nThe AsynchronousSocketChannelAdapter nested class provides:\n- Various read/write methods with timeout support -> [Future/void] - Implements asynchronous I/O operations\n- isOpen() -> [boolean] - Checks if channel is open\n- close() -> [void] - Closes the channel",
    "Canonical_solution": "import com.mongodb.MongoSocketException;\nimport com.mongodb.MongoSocketOpenException;\nimport com.mongodb.ServerAddress;\nimport com.mongodb.connection.AsyncCompletionHandler;\nimport com.mongodb.connection.SocketSettings;\nimport com.mongodb.lang.Nullable;\nimport com.mongodb.spi.dns.InetAddressResolver;\n\nimport java.io.IOException;\nimport java.net.SocketAddress;\nimport java.net.StandardSocketOptions;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousChannelGroup;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.CompletionHandler;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport static com.mongodb.internal.connection.ServerAddressHelper.getSocketAddresses;\n\npublic final class AsynchronousSocketChannelStream extends AsynchronousChannelStream {\n    private final ServerAddress serverAddress;\n    private final InetAddressResolver inetAddressResolver;\n    private final SocketSettings settings;\n    @Nullable\n    private final AsynchronousChannelGroup group;\n\n    public AsynchronousSocketChannelStream(\n            final ServerAddress serverAddress, final InetAddressResolver inetAddressResolver,\n            final SocketSettings settings, final PowerOfTwoBufferPool bufferProvider,\n            @Nullable final AsynchronousChannelGroup group) {\n        super(serverAddress, settings, bufferProvider);\n        this.serverAddress = serverAddress;\n        this.inetAddressResolver = inetAddressResolver;\n        this.settings = settings;\n        this.group = group;\n    }\n\n    @Override\n    public void openAsync(final OperationContext operationContext, final AsyncCompletionHandler<Void> handler) {\n        Queue<SocketAddress> socketAddressQueue;\n\n        try {\n            socketAddressQueue = new LinkedList<>(getSocketAddresses(serverAddress, inetAddressResolver));\n        } catch (Throwable t) {\n            handler.failed(t);\n            return;\n        }\n\n        initializeSocketChannel(handler, socketAddressQueue);\n    }\n\n    private void initializeSocketChannel(final AsyncCompletionHandler<Void> handler, final Queue<SocketAddress> socketAddressQueue) {\n        if (socketAddressQueue.isEmpty()) {\n            handler.failed(new MongoSocketException(\"Exception opening socket\", serverAddress));\n        } else {\n            SocketAddress socketAddress = socketAddressQueue.poll();\n\n            try {\n                AsynchronousSocketChannel attemptConnectionChannel;\n                attemptConnectionChannel = group == null\n                        ? AsynchronousSocketChannel.open()\n                        : AsynchronousSocketChannel.open(group);\n                attemptConnectionChannel.setOption(StandardSocketOptions.TCP_NODELAY, true);\n                attemptConnectionChannel.setOption(StandardSocketOptions.SO_KEEPALIVE, true);\n                if (settings.getReceiveBufferSize() > 0) {\n                    attemptConnectionChannel.setOption(StandardSocketOptions.SO_RCVBUF, settings.getReceiveBufferSize());\n                }\n                if (settings.getSendBufferSize() > 0) {\n                    attemptConnectionChannel.setOption(StandardSocketOptions.SO_SNDBUF, settings.getSendBufferSize());\n                }\n\n                attemptConnectionChannel.connect(socketAddress, null,\n                        new OpenCompletionHandler(handler, socketAddressQueue, attemptConnectionChannel));\n            } catch (IOException e) {\n                handler.failed(new MongoSocketOpenException(\"Exception opening socket\", serverAddress, e));\n            } catch (Throwable t) {\n                handler.failed(t);\n            }\n        }\n    }\n\n    private class OpenCompletionHandler implements CompletionHandler<Void, Object>  {\n        private final AtomicReference<AsyncCompletionHandler<Void>> handlerReference;\n        private final Queue<SocketAddress> socketAddressQueue;\n        private final AsynchronousSocketChannel attemptConnectionChannel;\n\n        OpenCompletionHandler(final AsyncCompletionHandler<Void> handler, final Queue<SocketAddress> socketAddressQueue,\n                              final AsynchronousSocketChannel attemptConnectionChannel) {\n            this.handlerReference = new AtomicReference<>(handler);\n            this.socketAddressQueue = socketAddressQueue;\n            this.attemptConnectionChannel = attemptConnectionChannel;\n        }\n\n        @Override\n        public void completed(final Void result, final Object attachment) {\n            setChannel(new AsynchronousSocketChannelAdapter(attemptConnectionChannel));\n            handlerReference.getAndSet(null).completed(null);\n        }\n\n        @Override\n        public void failed(final Throwable exc, final Object attachment) {\n            AsyncCompletionHandler<Void> localHandler = handlerReference.getAndSet(null);\n\n            if (socketAddressQueue.isEmpty()) {\n                if (exc instanceof IOException) {\n                    localHandler.failed(new MongoSocketOpenException(\"Exception opening socket\", getAddress(), exc));\n                } else {\n                    localHandler.failed(exc);\n                }\n            } else {\n                initializeSocketChannel(localHandler, socketAddressQueue);\n            }\n        }\n    }\n\n    private static final class AsynchronousSocketChannelAdapter implements ExtendedAsynchronousByteChannel {\n        private final AsynchronousSocketChannel channel;\n\n        private AsynchronousSocketChannelAdapter(final AsynchronousSocketChannel channel) {\n            this.channel = channel;\n        }\n\n        @Override\n        public <A> void read(final ByteBuffer dst, final long timeout, final TimeUnit unit, @Nullable final A attach,\n                             final CompletionHandler<Integer, ? super A> handler) {\n            channel.read(dst, timeout, unit, attach, handler);\n        }\n\n        @Override\n        public <A> void read(final ByteBuffer[] dsts, final int offset, final int length, final long timeout, final TimeUnit unit,\n                             @Nullable final A attach, final CompletionHandler<Long, ? super A> handler) {\n            channel.read(dsts, offset, length, timeout, unit, attach, handler);\n        }\n\n        @Override\n        public <A> void write(final ByteBuffer src, final long timeout, final TimeUnit unit, final A attach,\n                              final CompletionHandler<Integer, ? super A> handler) {\n            channel.write(src, timeout, unit, attach, handler);\n        }\n\n        @Override\n        public <A> void write(final ByteBuffer[] srcs, final int offset, final int length, final long timeout, final TimeUnit unit,\n                              final A attach, final CompletionHandler<Long, ? super A> handler) {\n            channel.write(srcs, offset, length, timeout, unit, attach, handler);\n        }\n\n        @Override\n        public <A> void read(final ByteBuffer dst, final A attachment, final CompletionHandler<Integer, ? super A> handler) {\n            channel.read(dst, attachment, handler);\n        }\n\n        @Override\n        public Future<Integer> read(final ByteBuffer dst) {\n            return channel.read(dst);\n        }\n\n        @Override\n        public <A> void write(final ByteBuffer src, final A attachment, final CompletionHandler<Integer, ? super A> handler) {\n            channel.write(src, attachment, handler);\n        }\n\n        @Override\n        public Future<Integer> write(final ByteBuffer src) {\n            return channel.write(src);\n        }\n\n        @Override\n        public boolean isOpen() {\n            return channel.isOpen();\n        }\n\n        @Override\n        public void close() throws IOException {\n            channel.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "right_result": "```java\nimport java.net.*;\nimport java.nio.channels.*;\nimport java.util.Queue;\nimport java.util.concurrent.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class AsynchronousSocketChannelStream {\n    private final ServerAddress serverAddress;\n    private final InetAddressResolver inetAddressResolver;\n    private final SocketSettings settings;\n    private final AsynchronousChannelGroup group;\n    private AsynchronousSocketChannel channel;\n    private final AtomicBoolean isOpen = new AtomicBoolean(false);\n\n    public AsynchronousSocketChannelStream(ServerAddress serverAddress, InetAddressResolver inetAddressResolver, SocketSettings settings, AsynchronousChannelGroup group) {\n        this.serverAddress = serverAddress;\n        this.inetAddressResolver = inetAddressResolver;\n        this.settings = settings;\n        this.group = group;\n    }\n\n    public void openAsync(OperationContext operationContext, AsyncCompletionHandler<Void> handler) {\n        Queue<SocketAddress> socketAddressQueue = resolveAddresses();\n        initializeSocketChannel(handler, socketAddressQueue);\n    }\n\n    private Queue<SocketAddress> resolveAddresses() {\n        Queue<SocketAddress> queue = new LinkedList<>();\n        try {\n            InetAddress[] addresses = inetAddressResolver.resolve(serverAddress.getHost(), serverAddress.getPort());\n            for (InetAddress address : addresses) {\n                queue.add(new InetSocketAddress(address, serverAddress.getPort()));\n            }\n        } catch (Exception e) {\n            handler.failed(e, null);\n        }\n        return queue;\n    }\n\n    private void initializeSocketChannel(AsyncCompletionHandler<Void> handler, Queue<SocketAddress> socketAddressQueue) {\n        if (socketAddressQueue.isEmpty()) {\n            handler.failed(new IOException(\"No addresses to connect\"), null);\n            return;\n        }\n\n        AsynchronousSocketChannel channel = null;\n        try {\n            channel = group != null ? AsynchronousSocketChannel.open(group) : AsynchronousSocketChannel.open();\n            SocketAddress nextAddress = socketAddressQueue.poll();\n            channel.connect(nextAddress, new OpenCompletionHandler(handler, socketAddressQueue, channel));\n        } catch (IOException e) {\n            if (channel != null) {\n                try {\n                    channel.close();\n                } catch (IOException ignore) {}\n            }\n            handler.failed(e, null);\n        }\n    }\n\n    private class OpenCompletionHandler implements CompletionHandler<Void, Object> {\n        private final AsyncCompletionHandler<Void> handler;\n        private final Queue<SocketAddress> socketAddressQueue;\n        private final AsynchronousSocketChannel attemptConnectionChannel;\n\n        public OpenCompletionHandler(AsyncCompletionHandler<Void> handler, Queue<SocketAddress> socketAddressQueue, AsynchronousSocketChannel attemptConnectionChannel) {\n            this.handler = handler;\n            this.socketAddressQueue = socketAddressQueue;\n            this.attemptConnectionChannel = attemptConnectionChannel;\n        }\n\n        @Override\n        public void completed(Void result, Object attachment) {\n            if (isOpen.compareAndSet(false, true)) {\n                AsynchronousSocketChannelStream.this.channel = attemptConnectionChannel;\n                handler.completed(null, null);\n            }\n        }\n\n        @Override\n        public void failed(Throwable exc, Object attachment) {\n            try {\n                attemptConnectionChannel.close();\n            } catch (IOException ignore) {}\n            if (socketAddressQueue.isEmpty()) {\n                handler.failed(exc, null);\n            } else {\n                initializeSocketChannel(handler, socketAddressQueue);\n            }\n        }\n    }\n\n    public AsynchronousSocketChannelAdapter getAdapter() {\n        return new AsynchronousSocketChannelAdapter(channel);\n    }\n\n    private class AsynchronousSocketChannelAdapter implements ExtendedAsynchronousByteChannel {\n        private final AsynchronousSocketChannel channel;\n\n        public AsynchronousSocketChannelAdapter(AsynchronousSocketChannel channel) {\n            this.channel = channel;\n        }\n\n        @Override\n        public <A> void read(ByteBuffer dst, long timeout, TimeUnit unit, A attachment, CompletionHandler<Integer, ? super A> handler) {\n            if (!isOpen.get()) {\n                handler.failed(new IOException(\"Channel is closed\"), attachment);\n                return;\n            }\n            channel.read(dst, timeout, unit, attachment, (result, att) -> {\n                if (result == -1) {\n                    handler.completed(null, att);\n                } else {\n                    handler.completed(result, att);\n                }\n            });\n        }\n\n        @Override\n        public <A> void write(ByteBuffer src, long timeout, TimeUnit unit, A attachment, CompletionHandler<Integer, ? super A> handler) {\n            if (!isOpen.get()) {\n                handler.failed(new IOException(\"Channel is closed\"), attachment);\n                return;\n            }\n            channel.write(src, timeout, unit, attachment, (result, att) -> {\n                if (result == -1) {\n                    handler.completed(null, att);\n                } else {\n                    handler.completed(result, att);\n                }\n            });\n        }\n\n        @Override\n        public boolean isOpen() {\n            return isOpen.get() && channel.isOpen();\n        }\n\n        @Override\n        public void close() throws IOException {\n            if (isOpen.compareAndSet(true, false)) {\n                channel.close();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 433,
    "Instruction": "Task Description: Implement a Java class that facilitates TCP-based communication using Java NIO (Non-blocking I/O) techniques, supporting both client and server modes with configurable options.\n\nClass Description: NioTransport is a class that provides TCP communication capabilities using Java NIO. It can operate in either server or client mode, supports direct buffers for performance optimization, and includes methods for starting/stopping communication, sending data, and receiving data through a callback mechanism.\n\nAttributes:\n- srv_channel: [ServerSocketChannel] - Server socket channel used in server mode\n- client_channel: [SocketChannel] - Client socket channel for communication\n- receiver_thread: [Receiver] - Thread handling incoming data reception\n- receiver: [RtReceiver] - Callback interface for received data\n- host: [InetAddress] - Host address for connection\n- port: [int] - Port number for communication (default: 7800)\n- server: [boolean] - Flag indicating if operating in server mode\n- direct_buffers: [boolean] - Flag indicating whether to use direct buffers\n- log: [Log] - Logger instance for logging messages\n\nMethods:\n- options(String... options) -> [void] - Configures transport options including server/client mode, host, port, and buffer type\n- receiver(RtReceiver receiver) -> [void] - Sets the receiver callback for incoming data\n- start(String... options) -> [void] - Starts the transport in either server or client mode based on configuration\n- stop() -> [void] - Stops the transport and releases resources\n- send(Object dest, byte[] buf, int offset, int length) -> [void] - Sends data through the established channel\n- Receiver.run() -> [void] - (Inner class method) Continuously receives data and forwards it to the registered receiver",
    "Canonical_solution": "import org.jgroups.logging.Log;\nimport org.jgroups.logging.LogFactory;\nimport org.jgroups.tests.RoundTrip;\nimport org.jgroups.tests.rt.RtReceiver;\nimport org.jgroups.tests.rt.RtTransport;\nimport org.jgroups.util.Util;\n\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.List;\n\npublic class NioTransport implements RtTransport {\n    protected ServerSocketChannel srv_channel;\n    protected SocketChannel       client_channel;\n    protected Receiver            receiver_thread;\n    protected RtReceiver          receiver;\n    protected InetAddress         host;\n    protected int                 port=7800;\n    protected boolean             server, direct_buffers;\n    protected final Log           log=LogFactory.getLog(NioTransport.class);\n\n    public NioTransport() {\n    }\n\n    public void options(String... options) throws Exception {\n        if(options == null)\n            return;\n        for(int i=0; i < options.length; i++) {\n            if(options[i].equals(\"-server\")) {\n                server=true;\n                continue;\n            }\n            if(options[i].equals(\"-host\")) {\n                host=InetAddress.getByName(options[++i]);\n                continue;\n            }\n            if(options[i].equals(\"-port\")) {\n                port=Integer.parseInt(options[++i]);\n                continue;\n            }\n            if(options[i].equals(\"-direct\")) {\n                direct_buffers=Boolean.parseBoolean(options[++i]);\n            }\n        }\n        if(host == null)\n            host=InetAddress.getLocalHost();\n    }\n\n    public void receiver(RtReceiver receiver) {\n        this.receiver=receiver;\n    }\n\n    public void start(String ... options) throws Exception {\n        options(options);\n        if(server) {\n            srv_channel=ServerSocketChannel.open();\n            srv_channel.bind(new InetSocketAddress(host, port), 50);\n            System.out.println(\"server started (ctrl-c to kill)\");\n            for(;;) {\n                client_channel=srv_channel.accept();\n                receiver_thread=new Receiver();\n                receiver_thread.start();\n            }\n        }\n        else {\n            client_channel=SocketChannel.open();\n            client_channel.connect(new InetSocketAddress(host, port));\n            receiver_thread=new Receiver();\n            receiver_thread.start();\n        }\n    }\n\n    public void stop() {\n        Util.close(srv_channel, client_channel);\n    }\n\n    public void send(Object dest, byte[] buf, int offset, int length) throws Exception {\n        ByteBuffer sbuf=ByteBuffer.wrap(buf, offset, length);\n        client_channel.write(sbuf);\n    }\n\n    protected class Receiver extends Thread {\n        public void run() {\n            ByteBuffer buf=direct_buffers? ByteBuffer.allocateDirect(RoundTrip.PAYLOAD) : ByteBuffer.allocate(RoundTrip.PAYLOAD);\n            for(;;) {\n                try {\n                    buf.position(0);\n                    int num=client_channel.read(buf);\n                    if(num == -1)\n                        break;\n                    if(num != RoundTrip.PAYLOAD)\n                        throw new IllegalStateException(\"expected \" + RoundTrip.PAYLOAD + \" bytes, but got only \" + num);\n                    if(receiver != null) {\n                        buf.flip();\n                        int offset=buf.hasArray()? buf.arrayOffset() + buf.position() : buf.position(), len=buf.remaining();\n                        if(!buf.isDirect())\n                            receiver.receive(null, buf.array(), offset, len);\n                        else {\n                            byte[] tmp=new byte[len];\n                            buf.get(tmp, 0, len);\n                            receiver.receive(null, tmp, 0, len);\n                        }\n                    }\n                }\n                catch(Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            Util.close(client_channel);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "right_result": "```java\nimport java.net.*;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.*;\nimport java.util.logging.Logger;\n\npublic class NioTransport {\n    private ServerSocketChannel srv_channel;\n    private SocketChannel client_channel;\n    private Thread receiver_thread;\n    private RtReceiver receiver;\n    private InetAddress host;\n    private int port = 7800;\n    private boolean server;\n    private boolean direct_buffers = false;\n    private Logger log;\n\n    public NioTransport() {\n        this.log = Logger.getLogger(NioTransport.class.getName());\n    }\n\n    public void options(String... options) {\n        for (String opt : options) {\n            if (opt.equals(\"server\")) {\n                server = true;\n            } else if (opt.equals(\"client\")) {\n                server = false;\n            } else if (opt.startsWith(\"host=\")) {\n                String hostStr = opt.substring(5);\n                try {\n                    host = InetAddress.getByName(hostStr);\n                } catch (UnknownHostException e) {\n                    log.severe(\"Invalid host: \" + hostStr);\n                }\n            } else if (opt.startsWith(\"port=\")) {\n                String portStr = opt.substring(5);\n                try {\n                    port = Integer.parseInt(portStr);\n                } catch (NumberFormatException e) {\n                    log.severe(\"Invalid port: \" + portStr);\n                }\n            } else if (opt.equals(\"directBuffers\")) {\n                direct_buffers = true;\n            }\n        }\n    }\n\n    public void receiver(RtReceiver receiver) {\n        this.receiver = receiver;\n    }\n\n    public void start(String... options) {\n        options(options);\n        try {\n            if (server) {\n                srv_channel = ServerSocketChannel.open();\n                srv_channel.socket().bind(new InetSocketAddress(host, port));\n                srv_channel.configureBlocking(false);\n                log.info(\"Server started on \" + host + \":\" + port);\n                client_channel = srv_channel.accept();\n                if (client_channel != null) {\n                    client_channel.configureBlocking(false);\n                    log.info(\"Client connected\");\n                    startReceiverThread();\n                } else {\n                    log.warning(\"No client connected\");\n                }\n            } else {\n                client_channel = SocketChannel.open();\n                client_channel.connect(new InetSocketAddress(host, port));\n                client_channel.configureBlocking(false);\n                log.info(\"Connected to \" + host + \":\" + port);\n                startReceiverThread();\n            }\n        } catch (IOException e) {\n            log.severe(\"Start failed: \" + e.getMessage());\n        }\n    }\n\n    private void startReceiverThread() {\n        receiver_thread = new Thread(new Receiver());\n        receiver_thread.start();\n    }\n\n    public void stop() {\n        try {\n            if (client_channel != null && client_channel.isOpen()) {\n                client_channel.close();\n            }\n            if (srv_channel != null && srv_channel.isOpen()) {\n                srv_channel.close();\n            }\n        } catch (IOException e) {\n            log.severe(\"Error closing channels: \" + e.getMessage());\n        }\n        if (receiver_thread != null) {\n            receiver_thread.interrupt();\n        }\n    }\n\n    public void send(Object dest, byte[] buf, int offset, int length) {\n        if (client_channel != null && client_channel.isConnected()) {\n            ByteBuffer buffer = direct_buffers ? ByteBuffer.allocateDirect(length) : ByteBuffer.allocate(length);\n            buffer.put(buf, offset, length);\n            buffer.flip();\n            try {\n                while (buffer.hasRemaining()) {\n                    client_channel.write(buffer);\n                }\n            } catch (IOException e) {\n                log.severe(\"Send failed: \" + e.getMessage());\n            }\n        } else {\n            log.warning(\"Not connected to send data\");\n        }\n    }\n\n    private class Receiver implements Runnable {\n        @Override\n        public void run() {\n            ByteBuffer buffer = direct_buffers ? ByteBuffer.allocateDirect(8192) : ByteBuffer.allocate(8192);\n            while (!Thread.currentThread().isInterrupted()) {\n                try {\n                    if (client_channel != null && client_channel.isConnected()) {\n                        int bytesRead = client_channel.read(buffer);\n                        if (bytesRead == -1) {\n                            break;\n                        }\n                        buffer.flip();\n                        byte[] data = new byte[bytesRead];\n                        buffer.get(data);\n                        buffer.clear();\n                        if (receiver != null) {\n                            receiver.onReceive(data, 0, bytesRead);\n                        }\n                    } else {\n                        Thread.sleep(100);\n                    }\n                } catch (IOException | InterruptedException e) {\n                    log.severe(\"Receiver error: \" + e.getMessage());\n                    break;\n                }\n            }\n            log.info(\"Receiver thread stopped\");\n        }\n    }\n\n    public interface RtReceiver {\n        void onReceive(byte[] data, int offset, int length);\n    }\n}\n```"
  },
  {
    "Task_id": 434,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Java NIO (Non-blocking I/O) for efficient network communication. The client should handle connection establishment, data transmission with checksum verification, and proper resource management.\n\nClass Description: ClientController is a TCP client implementation that manages non-blocking communication with a server. It uses a producer-consumer pattern with an internal queue for packet handling and implements checksum verification for data integrity.\n\nAttributes:\n- inner: BlockingQueue<Packet> - Queue for storing packets to be sent to the server\n- lock: Object - Synchronization lock for thread-safe operations\n- remote: InetSocketAddress - Server address to connect to\n- thread: Thread - Worker thread for handling network operations\n- channel: SocketChannel - NIO channel for communication with the server\n\nMethods:\n- ClientController(String host, int port) -> None - Constructor that initializes the client with server address\n- start() -> void - Starts the client thread if not already running\n- put(Packet packet) -> boolean - Adds a packet to the send queue (non-blocking)\n- clear() -> void - Clears all pending packets from the queue\n- run() -> void - Main thread method that handles connection and I/O operations (internal to ClientThread)\n- write() -> void - Handles packet writing to the channel with checksum calculation (internal to ClientThread)",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.zip.Adler32;\nimport java.util.zip.Checksum;\n\npublic class ClientController {\n\n    private BlockingQueue<Packet> inner = new LinkedBlockingQueue<>(100);\n    private Object lock = new Object();\n    private InetSocketAddress remote;\n    private Thread thread = new ClientThread(remote);\n\n    public ClientController(String host, int port) {\n        remote = new InetSocketAddress(host, port);\n    }\n\n    public void start() {\n        if (thread.isAlive() || remote == null) {\n            return;\n        }\n        synchronized (lock) {\n            thread.start();\n        }\n    }\n\n    public boolean put(Packet packet) {\n        return inner.offer(packet);\n    }\n\n    public void clear() {\n        inner.clear();\n    }\n\n    class ClientThread extends Thread {\n        SocketAddress remote;\n        SocketChannel channel;\n\n        ClientThread(SocketAddress remote) {\n            this.remote = remote;\n        }\n\n        @Override\n        public void run() {\n            try {\n                channel = SocketChannel.open();\n                channel.configureBlocking(false);\n                boolean isSuccess = channel.connect(new InetSocketAddress(30008));\n                if (!isSuccess) {\n                    while (!channel.finishConnect()) {\n                        System.out.println(\"Client is connecting...\");\n                    }\n                }\n                System.out.println(\"Client is connected.\");\n\n                Selector selector = Selector.open();\n                channel.register(selector, SelectionKey.OP_WRITE);\n                while (selector.isOpen()) {\n                    selector.select();\n                    Iterator<SelectionKey> it = selector.selectedKeys().iterator();\n                    while (it.hasNext()) {\n                        SelectionKey key = it.next();\n                        it.remove();\n                        if (!key.isValid()) {\n                            continue;\n                        }\n                        if (key.isWritable()) {\n                            write();\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                if (channel != null) {\n                    try {\n                        channel.close();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n                inner.clear();\n            }\n        }\n\n        private void write() throws Exception {\n            Packet packet = inner.take();\n            synchronized (lock) {\n                ByteBuffer body = packet.getBuffer();\n                ByteBuffer head = ByteBuffer.allocate(4);\n                head.putInt(body.limit());\n                head.flip();\n                while (head.hasRemaining()) {\n                    channel.write(head);\n                }\n\n                Checksum checksum = new Adler32();\n                while (body.hasRemaining()) {\n                    checksum.update(body.get());\n                }\n\n                body.rewind();\n                while (body.hasRemaining()) {\n                    channel.write(body);\n                }\n\n                long cks = checksum.getValue();\n                ByteBuffer tail = ByteBuffer.allocate(8);\n                tail.putLong(cks);\n                tail.flip();\n                while (tail.hasRemaining()) {\n                    channel.write(tail);\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "right_result": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class ClientController implements Runnable {\n    private final BlockingQueue<Packet> inner;\n    private final Object lock;\n    private final InetSocketAddress remote;\n    private final Thread thread;\n    private SocketChannel channel;\n\n    public ClientController(String host, int port) {\n        this.remote = new InetSocketAddress(host, port);\n        this.inner = new LinkedBlockingQueue<>();\n        this.lock = new Object();\n        this.thread = new Thread(this);\n    }\n\n    public void start() {\n        if (!thread.isAlive()) {\n            thread.start();\n        }\n    }\n\n    public boolean put(Packet packet) {\n        return inner.offer(packet);\n    }\n\n    public void clear() {\n        inner.clear();\n    }\n\n    @Override\n    public void run() {\n        try {\n            Selector selector = Selector.open();\n            channel = SocketChannel.open();\n            channel.configureBlocking(false);\n            channel.connect(remote);\n            channel.register(selector, SelectionKey.OP_CONNECT);\n\n            while (!Thread.currentThread().isInterrupted()) {\n                selector.select();\n                Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n                while (keys.hasNext()) {\n                    SelectionKey key = keys.next();\n                    keys.remove();\n\n                    if (key.isConnectable()) {\n                        SocketChannel sc = (SocketChannel) key.channel();\n                        if (sc.finishConnect()) {\n                            key.interestOps(SelectionKey.OP_WRITE);\n                        }\n                    } else if (key.isWritable()) {\n                        write();\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (channel != null) {\n                    channel.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void write() {\n        try {\n            Packet packet = inner.poll();\n            if (packet == null) {\n                return;\n            }\n\n            byte[] data = packet.getData();\n            int checksum = calculateChecksum(data);\n            byte[] checksumBytes = new byte[4];\n            for (int i = 0; i < 4; i++) {\n                checksumBytes[i] = (byte) (checksum >> (24 - i * 8));\n            }\n\n            ByteBuffer buffer = ByteBuffer.allocate(data.length + 4);\n            buffer.put(data);\n            buffer.put(checksumBytes);\n            buffer.flip();\n\n            while (buffer.hasRemaining()) {\n                channel.write(buffer);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private int calculateChecksum(byte[] data) {\n        int sum = 0;\n        for (byte b : data) {\n            sum += b & 0xFF;\n        }\n        return sum;\n    }\n}"
  },
  {
    "Task_id": 438,
    "Instruction": "Task Description: Implement a Java NIO-based TCP server that can handle multiple client connections simultaneously on specified ports, and respond with the current date and time when a client connects.\n\nClass Description: The DateServer class is a non-blocking TCP server implementation using Java NIO that listens on multiple ports and sends the current date to connecting clients.\n\nAttributes:\n- selector: Selector - Manages multiple channels and handles I/O operations\n- serverChannels: ServerSocketChannel[] - Array of server channels listening on different ports\n- ports: int[] - Array of port numbers the server should listen on\n\nMethods:\n- DateServer(int[] ports) -> void - Constructor that initializes the server with specified ports\n- initializeServer() -> void - Sets up server channels, configures them as non-blocking, and binds to ports\n- start() -> void - Main server loop that processes incoming connections using the selector\n- handleAccept(SelectionKey key) -> void - Handles new client connections and sends current date\n- close() -> void - Properly closes all server channels and selector to release resources",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class DateServer {\n\n    private Selector selector;\n    private ServerSocketChannel[] serverChannels;\n    private int[] ports;\n\n    public DateServer(int[] ports) throws Exception {\n        this.ports = ports;\n        this.selector = Selector.open();\n        this.serverChannels = new ServerSocketChannel[ports.length];\n        initializeServer();\n    }\n\n    private void initializeServer() throws Exception {\n        for (int i = 0; i < ports.length; i++) {\n            serverChannels[i] = ServerSocketChannel.open();\n            serverChannels[i].configureBlocking(false);\n            ServerSocket serverSocket = serverChannels[i].socket();\n            InetSocketAddress address = new InetSocketAddress(ports[i]);\n            serverSocket.bind(address);\n            serverChannels[i].register(selector, SelectionKey.OP_ACCEPT);\n            System.out.println(\"\u670d\u52a1\u5668\u8fd0\u884c\uff0c\u5728\" + ports[i] + \"\u7aef\u53e3\u76d1\u542c\u3002\");\n        }\n    }\n\n    public void start() throws Exception {\n        int keysAdd = 0;\n        while ((keysAdd = selector.select()) > 0) {\n            Set<SelectionKey> selectedKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iter = selectedKeys.iterator();\n            while (iter.hasNext()) {\n                SelectionKey key = iter.next();\n                if (key.isAcceptable()) {\n                    handleAccept(key);\n                }\n                iter.remove();\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws Exception {\n        ServerSocketChannel server = (ServerSocketChannel) key.channel();\n        SocketChannel client = server.accept();\n        client.configureBlocking(false);\n        ByteBuffer outBuf = ByteBuffer.allocateDirect(1024);\n        outBuf.put((\"\u5f53\u524d\u7684\u65f6\u95f4\u4e3a\uff1a\" + new Date()).getBytes());\n        outBuf.flip();\n        client.write(outBuf);\n        client.close();\n    }\n\n    public void close() throws Exception {\n        for (ServerSocketChannel channel : serverChannels) {\n            if (channel != null) {\n                channel.close();\n            }\n        }\n        if (selector != null) {\n            selector.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Date;\nimport java.util.Iterator;\n\npublic class DateServer {\n    private Selector selector;\n    private ServerSocketChannel[] serverChannels;\n    private int[] ports;\n\n    public DateServer(int[] ports) {\n        this.ports = ports;\n    }\n\n    public void initializeServer() throws IOException {\n        selector = Selector.open();\n        serverChannels = new ServerSocketChannel[ports.length];\n        for (int i = 0; i < ports.length; i++) {\n            ServerSocketChannel serverChannel = ServerSocketChannel.open();\n            serverChannel.configureBlocking(false);\n            serverChannel.bind(new InetSocketAddress(ports[i]));\n            serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n            serverChannels[i] = serverChannel;\n        }\n    }\n\n    public void start() throws IOException {\n        while (true) {\n            selector.select();\n            Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n            while (keys.hasNext()) {\n                SelectionKey key = keys.next();\n                if (key.isAcceptable()) {\n                    handleAccept(key);\n                }\n                keys.remove();\n            }\n        }\n    }\n\n    public void handleAccept(SelectionKey key) {\n        try {\n            ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();\n            SocketChannel clientChannel = serverSocketChannel.accept();\n            clientChannel.configureBlocking(false);\n            String date = new Date().toString();\n            ByteBuffer buffer = ByteBuffer.wrap(date.getBytes());\n            clientChannel.write(buffer);\n            clientChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            for (ServerSocketChannel channel : serverChannels) {\n                channel.close();\n            }\n            selector.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 439,
    "Instruction": "Task Description: Implement a non-blocking TCP echo server using Java NIO (New I/O) that can handle multiple client connections simultaneously. The server should echo back any data received from clients.\n\nClass Description: NonBlokingEchoServer is a Java NIO-based server implementation that uses non-blocking I/O operations to handle multiple client connections efficiently through a single thread. It utilizes Selector, ServerSocketChannel, and SocketChannel for managing connections and ByteBuffer for data operations.\n\nAttributes:\n- serverChannel: [ServerSocketChannel] - The main server channel that listens for incoming connections\n- selector: [Selector] - The multiplexor that monitors registered channels for I/O events\n- port: [int] - The port number on which the server listens for connections\n\nMethods:\n- NonBlokingEchoServer(int port) -> [void] - Constructor that initializes the server with the specified port\n- start() -> [void] - Starts the server, binds to the port, and begins accepting client connections\n- handleKey(SelectionKey key) -> [void] - Handles different types of I/O events (accept, read, write)\n- handleAccept(SelectionKey key) -> [void] - Processes new client connection requests\n- handleRead(SelectionKey key) -> [void] - Reads data from connected clients\n- handleWrite(SelectionKey key) -> [void] - Writes data back to connected clients\n- close() -> [void] - Closes the server channel and selector, releasing all resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NonBlokingEchoServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n    private int port;\n\n    public NonBlokingEchoServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        serverChannel = ServerSocketChannel.open();\n        InetSocketAddress address = new InetSocketAddress(port);\n        serverChannel.bind(address);\n        serverChannel.configureBlocking(false);\n        selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        System.out.println(\"NonBlokingEchoServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n\n        while (true) {\n            try {\n                selector.select();\n            } catch (IOException e) {\n                System.out.println(\"NonBlockingEchoServer\u5f02\u5e38!\" + e.getMessage());\n            }\n            Set<SelectionKey> readyKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iterator = readyKeys.iterator();\n            while (iterator.hasNext()) {\n                SelectionKey key = iterator.next();\n                iterator.remove();\n                try {\n                    handleKey(key);\n                } catch (IOException ex) {\n                    key.cancel();\n                    try {\n                        key.channel().close();\n                    } catch (IOException cex) {\n                        System.out.println(\"NonBlockingEchoServer\u5f02\u5e38!\" + cex.getMessage());\n                    }\n                }\n            }\n        }\n    }\n\n    private void handleKey(SelectionKey key) throws IOException {\n        if (key.isAcceptable()) {\n            handleAccept(key);\n        } else if (key.isReadable()) {\n            handleRead(key);\n        } else if (key.isWritable()) {\n            handleWrite(key);\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        ServerSocketChannel server = (ServerSocketChannel) key.channel();\n        SocketChannel socketChannel = server.accept();\n        System.out.println(\"NonBlokingEchoServer\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff1a\" + socketChannel);\n        socketChannel.configureBlocking(false);\n        SelectionKey clientKey = socketChannel.register(selector,\n                SelectionKey.OP_WRITE | SelectionKey.OP_READ);\n        ByteBuffer buffer = ByteBuffer.allocate(100);\n        clientKey.attach(buffer);\n    }\n\n    private void handleRead(SelectionKey key) throws IOException {\n        SocketChannel client = (SocketChannel) key.channel();\n        ByteBuffer output = (ByteBuffer) key.attachment();\n        client.read(output);\n        System.out.println(client.getRemoteAddress() \n                + \" -> NonBlokingEchoServer\uff1a\" + output.toString());\n        key.interestOps(SelectionKey.OP_WRITE);\n    }\n\n    private void handleWrite(SelectionKey key) throws IOException {\n        SocketChannel client = (SocketChannel) key.channel();\n        ByteBuffer output = (ByteBuffer) key.attachment();\n        output.flip();\n        client.write(output);\n        System.out.println(\"NonBlokingEchoServer  -> \" \n                + client.getRemoteAddress() + \"\uff1a\" + output.toString());\n        output.compact();\n        key.interestOps(SelectionKey.OP_READ);\n    }\n\n    public void close() throws IOException {\n        if (serverChannel != null) {\n            serverChannel.close();\n        }\n        if (selector != null) {\n            selector.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NonBlokingEchoServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n    private int port;\n\n    public NonBlokingEchoServer(int port) {\n        this.port = port;\n        try {\n            serverChannel = ServerSocketChannel.open();\n            serverChannel.configureBlocking(false);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void start() {\n        try {\n            serverChannel.bind(new java.net.InetSocketAddress(port));\n            selector = Selector.open();\n            serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n            while (true) {\n                selector.select();\n                Set<SelectionKey> keys = selector.selectedKeys();\n                Iterator<SelectionKey> iterator = keys.iterator();\n                while (iterator.hasNext()) {\n                    SelectionKey key = iterator.next();\n                    iterator.remove();\n                    handleKey(key);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleKey(SelectionKey key) {\n        if (key.isAcceptable()) {\n            handleAccept(key);\n        } else if (key.isReadable()) {\n            handleRead(key);\n        } else if (key.isWritable()) {\n            handleWrite(key);\n        }\n    }\n\n    private void handleAccept(SelectionKey key) {\n        ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();\n        try {\n            SocketChannel client = serverChannel.accept();\n            client.configureBlocking(false);\n            ByteBuffer buffer = ByteBuffer.allocate(1024);\n            client.register(selector, SelectionKey.OP_READ, buffer);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleRead(SelectionKey key) {\n        SocketChannel client = (SocketChannel) key.channel();\n        ByteBuffer buffer = (ByteBuffer) key.attachment();\n        try {\n            int bytesRead = client.read(buffer);\n            if (bytesRead > 0) {\n                buffer.flip();\n                client.register(selector, SelectionKey.OP_WRITE, buffer);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleWrite(SelectionKey key) {\n        SocketChannel client = (SocketChannel) key.channel();\n        ByteBuffer buffer = (ByteBuffer) key.attachment();\n        try {\n            client.write(buffer);\n            if (buffer.hasRemaining()) {\n                client.register(selector, SelectionKey.OP_WRITE, buffer);\n            } else {\n                buffer.clear();\n                client.register(selector, SelectionKey.OP_READ, buffer);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            if (serverChannel != null) {\n                serverChannel.close();\n            }\n            if (selector != null) {\n                selector.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 441,
    "Instruction": "Task Description: Implement a Unix domain socket-based IPC server using Java NIO that can listen for incoming messages and send responses asynchronously.\n\nClass Description: The Server class implements an IPC communicator that establishes a Unix domain socket server. It handles client connections asynchronously, processes incoming messages through a listener callback, and sends responses. The server manages its socket resources and cleans up the socket file on termination.\n\nAttributes:\n- serverSocketChannel: [ServerSocketChannel] - The NIO channel for accepting client connections on the Unix domain socket\n- socketPath: [Path] - Filesystem path where the Unix domain socket is created\n- LOG: [Logger] - Logger instance for recording server events and errors\n\nMethods:\n- create: [static](Path socketPath) -> [Server] - Factory method that creates and binds a Unix domain socket server at the specified path. Throws IOException if binding fails.\n- isClient: []() -> [boolean] - Returns false indicating this is a server-side communicator (always returns false for Server instances)\n- listen: [](IpcMessageListener listener, Executor executor) -> [void] - Starts listening for incoming messages asynchronously using the provided executor. Each message is delivered to the listener callback.\n- send: [](IpcMessage message, Executor executor) -> [void] - Sends a message to a connected client asynchronously using the provided executor.\n- close: []() -> [void] - Closes the server socket channel and deletes the socket file. Throws IOException if cleanup fails.",
    "Canonical_solution": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.net.StandardProtocolFamily;\nimport java.net.UnixDomainSocketAddress;\nimport java.nio.channels.AlreadyBoundException;\nimport java.nio.channels.AsynchronousCloseException;\nimport java.nio.channels.ClosedChannelException;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.UnsupportedAddressTypeException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.concurrent.Executor;\n\nclass Server implements IpcCommunicator {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(Server.class);\n\n\tprivate final ServerSocketChannel serverSocketChannel;\n\tprivate final Path socketPath;\n\n\tprivate Server(ServerSocketChannel serverSocketChannel, Path socketPath) {\n\t\tthis.serverSocketChannel = serverSocketChannel;\n\t\tthis.socketPath = socketPath;\n\t}\n\n\tpublic static Server create(Path socketPath) throws IOException {\n\t\tFiles.createDirectories(socketPath.getParent());\n\t\tvar address = UnixDomainSocketAddress.of(socketPath);\n\t\tServerSocketChannel ch = null;\n\t\ttry {\n\t\t\tch = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n\t\t\tch.bind(address);\n\t\t\tLOG.info(\"Spawning IPC server listening on socket {}\", socketPath);\n\t\t\treturn new Server(ch, socketPath);\n\t\t} catch (IOException | AlreadyBoundException | UnsupportedAddressTypeException e) {\n\t\t\tif (ch != null) {\n\t\t\t\tch.close();\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean isClient() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic void listen(IpcMessageListener listener, Executor executor) {\n\t\texecutor.execute(() -> {\n\t\t\twhile (serverSocketChannel.isOpen()) {\n\t\t\t\ttry (var ch = serverSocketChannel.accept()) {\n\t\t\t\t\twhile (ch.isConnected()) {\n\t\t\t\t\t\tvar msg = IpcMessage.receive(ch);\n\t\t\t\t\t\tlistener.handleMessage(msg);\n\t\t\t\t\t}\n\t\t\t\t} catch (AsynchronousCloseException e) {\n\t\t\t\t\treturn;\n\t\t\t\t} catch (EOFException | ClosedChannelException e) {\n\t\t\t\t\t// continue with next connected client\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tLOG.error(\"Failed to read IPC message\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t@Override\n\tpublic void send(IpcMessage message, Executor executor) {\n\t\texecutor.execute(() -> {\n\t\t\ttry (var ch = serverSocketChannel.accept()) {\n\t\t\t\tmessage.send(ch);\n\t\t\t} catch (IOException e) {\n\t\t\t\tLOG.error(\"Failed to send IPC message\", e);\n\t\t\t}\n\t\t});\n\t}\n\n\t@Override\n\tpublic void close() throws IOException {\n\t\ttry {\n\t\t\tserverSocketChannel.close();\n\t\t} finally {\n\t\t\tFiles.deleteIfExists(socketPath);\n\t\t\tLOG.debug(\"IPC server closed\");\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.file.Path;\nimport java.util.concurrent.Executor;\nimport java.util.logging.Logger;\n\npublic class Server {\n    private ServerSocketChannel serverSocketChannel;\n    private Path socketPath;\n    private static final Logger LOG = Logger.getLogger(Server.class.getName());\n\n    public static Server create(Path socketPath) throws IOException {\n        Server server = new Server();\n        server.socketPath = socketPath;\n        server.serverSocketChannel = ServerSocketChannel.open();\n        server.serverSocketChannel.bind(new java.net.UnixDomainSocketAddress(socketPath.toString()));\n        return server;\n    }\n\n    public boolean isClient() {\n        return false;\n    }\n\n    public void listen(IpcMessageListener listener, Executor executor) {\n        executor.execute(() -> {\n            try {\n                while (true) {\n                    SocketChannel clientChannel = serverSocketChannel.accept();\n                    if (clientChannel == null) {\n                        continue;\n                    }\n                    executor.execute(() -> {\n                        try {\n                            ByteBuffer buffer = ByteBuffer.allocate(1024);\n                            int bytesRead = clientChannel.read(buffer);\n                            if (bytesRead > 0) {\n                                buffer.flip();\n                                byte[] data = new byte[bytesRead];\n                                buffer.get(data);\n                                IpcMessage message = new IpcMessage(data);\n                                listener.onMessage(message);\n                            }\n                        } catch (IOException e) {\n                            LOG.severe(\"Error reading from client: \" + e.getMessage());\n                        }\n                    });\n                }\n            } catch (IOException e) {\n                LOG.severe(\"Error accepting connection: \" + e.getMessage());\n            }\n        });\n    }\n\n    public void send(IpcMessage message, Executor executor) {\n        executor.execute(() -> {\n            try {\n                // Placeholder for sending message logic\n            } catch (Exception e) {\n                LOG.severe(\"Error sending message: \" + e.getMessage());\n            }\n        });\n    }\n\n    public void close() throws IOException {\n        if (serverSocketChannel != null) {\n            serverSocketChannel.close();\n        }\n        java.nio.file.Files.delete(socketPath);\n    }\n}\n```"
  },
  {
    "Task_id": 442,
    "Instruction": "Task Description: Implement a Java NIO-based TCP server that handles multiple client connections asynchronously, processes incoming data packets with checksum verification, and manages resources efficiently.\n\nClass Description: NIOServer - A non-blocking TCP server implementation using Java NIO that handles multiple client connections through a single selector thread.\n\nAttributes:\n- serverChannel: ServerSocketChannel - The main server channel that listens for incoming connections\n- selector: Selector - The multiplexor that manages multiple client connections\n\nMethods:\n- start(int port) -> void - Starts the server on the specified port and begins accepting connections\n  - Input: port (int) - The port number to bind the server to\n  - Output: None (throws Exception if startup fails)\n  \n- stop() -> void - Shuts down the server and releases all resources\n  - Input: None\n  - Output: None (handles exceptions internally)\n  \n- handleAccept(SelectionKey key) -> void - Handles new client connection acceptance\n  - Input: key (SelectionKey) - The selection key representing the accept event\n  - Output: None (throws Exception if connection acceptance fails)\n  \n- handleRead(SelectionKey key) -> void - Handles incoming data from clients with checksum verification\n  - Input: key (SelectionKey) - The selection key representing the read event\n  - Output: None (handles exceptions internally)\n  \n- isFull(ByteBuffer buffer) -> boolean - Helper method to check if a buffer is full\n  - Input: buffer (ByteBuffer) - The buffer to check\n  - Output: boolean - True if buffer is full, false otherwise",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.zip.Adler32;\nimport java.util.zip.Checksum;\n\npublic class NIOServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n\n    public void start(int port) throws Exception {\n        serverChannel = ServerSocketChannel.open();\n        serverChannel.configureBlocking(false);\n        serverChannel.socket().setReuseAddress(true);\n        serverChannel.socket().bind(new InetSocketAddress(port));\n        \n        selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n        \n        while (selector.isOpen()) {\n            if (selector.select(3000) == 0) {\n                continue;\n            }\n            \n            Iterator<SelectionKey> it = selector.selectedKeys().iterator();\n            while (it.hasNext()) {\n                SelectionKey key = it.next();\n                it.remove();\n                \n                if (!key.isValid()) {\n                    continue;\n                }\n                \n                if (key.isAcceptable()) {\n                    handleAccept(key);\n                } else if (key.isReadable()) {\n                    handleRead(key);\n                }\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws Exception {\n        SocketChannel socketChannel = ((ServerSocketChannel) key.channel()).accept();\n        socketChannel.configureBlocking(false);\n        socketChannel.register(key.selector(), SelectionKey.OP_READ);\n    }\n\n    private void handleRead(SelectionKey key) {\n        SocketChannel channel = (SocketChannel) key.channel();\n        try {\n            ByteBuffer head = ByteBuffer.allocate(4);\n            while (!isFull(head)) {\n                if (channel.read(head) == -1) {\n                    throw new RuntimeException(\"EOF error\");\n                }\n            }\n            head.flip();\n            int dataSize = head.getInt();\n            \n            ByteBuffer body = ByteBuffer.allocate(dataSize);\n            while (!isFull(body)) {\n                if (channel.read(body) == -1) {\n                    throw new RuntimeException(\"EOF error\");\n                }\n            }\n            \n            ByteBuffer tail = ByteBuffer.allocate(8);\n            while (!isFull(tail)) {\n                if (channel.read(tail) == -1) {\n                    break;\n                }\n            }\n            tail.flip();\n            \n            Checksum checksum = new Adler32();\n            checksum.update(body.array(), 0, dataSize);\n            if (tail.getLong() != checksum.getValue()) {\n                throw new RuntimeException(\"Data corrupted\");\n            }\n            \n            body.flip();\n            // Process packet here\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                channel.close();\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n\n    private boolean isFull(ByteBuffer buffer) {\n        return buffer.position() == buffer.capacity();\n    }\n\n    public void stop() {\n        try {\n            if (selector != null) {\n                selector.close();\n            }\n            if (serverChannel != null) {\n                serverChannel.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NIOServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n\n    public void start(int port) throws IOException {\n        serverChannel = ServerSocketChannel.open();\n        serverChannel.socket().bind(new InetSocketAddress(port));\n        serverChannel.configureBlocking(false);\n        selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n        new Thread(this::listen).start();\n    }\n\n    private void listen() {\n        try {\n            while (true) {\n                selector.select();\n                Set<SelectionKey> keys = selector.selectedKeys();\n                Iterator<SelectionKey> it = keys.iterator();\n                while (it.hasNext()) {\n                    SelectionKey key = it.next();\n                    if (key.isAcceptable()) {\n                        handleAccept(key);\n                    } else if (key.isReadable()) {\n                        handleRead(key);\n                    }\n                    it.remove();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (serverChannel != null) {\n                serverChannel.close();\n            }\n            if (selector != null) {\n                selector.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();\n        SocketChannel clientChannel = serverChannel.accept();\n        clientChannel.configureBlocking(false);\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        clientChannel.register(selector, SelectionKey.OP_READ, buffer);\n    }\n\n    private void handleRead(SelectionKey key) {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = (ByteBuffer) key.attachment();\n        try {\n            int bytesRead = clientChannel.read(buffer);\n            if (bytesRead == -1) {\n                clientChannel.close();\n                key.cancel();\n                return;\n            }\n            if (isFull(buffer)) {\n                buffer.flip();\n                byte[] data = new byte[buffer.limit()];\n                buffer.get(data);\n                buffer.clear();\n                if (verifyChecksum(data)) {\n                    // Process data\n                } else {\n                    clientChannel.close();\n                    key.cancel();\n                }\n            }\n        } catch (IOException e) {\n            try {\n                clientChannel.close();\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n            key.cancel();\n        }\n    }\n\n    private boolean isFull(ByteBuffer buffer) {\n        return !buffer.hasRemaining();\n    }\n\n    private boolean verifyChecksum(byte[] data) {\n        if (data.length < 4) return false;\n        int expectedChecksum = bytesToInt(data, data.length - 4);\n        byte[] payload = new byte[data.length - 4];\n        System.arraycopy(data, 0, payload, 0, payload.length);\n        int actualChecksum = computeChecksum(payload);\n        return actualChecksum == expectedChecksum;\n    }\n\n    private int computeChecksum(byte[] data) {\n        int sum = 0;\n        for (byte b : data) {\n            sum += b & 0xFF;\n        }\n        return sum;\n    }\n\n    private int bytesToInt(byte[] bytes, int offset) {\n        return (bytes[offset] & 0xFF) << 24 | (bytes[offset + 1] & 0xFF) << 16 |\n               (bytes[offset + 2] & 0xFF) << 8 | (bytes[offset + 3] & 0xFF);\n    }\n}\n```"
  },
  {
    "Task_id": 444,
    "Instruction": "Task Description: Create a Java class that implements UDP-based communication for sending metrics to a Graphite server using Java NIO's non-blocking DatagramChannel.\n\nClass Description: The GraphiteUDP class provides functionality to connect to a Graphite server via UDP, send metric data in the correct format, and handle connection management. It implements non-blocking UDP communication using Java NIO's DatagramChannel and includes error tracking and resource cleanup.\n\nAttributes:\n- hostname: [String] - The hostname of the Graphite server\n- port: [int] - The port number of the Graphite server\n- address: [InetSocketAddress] - The resolved socket address of the Graphite server\n- datagramChannel: [DatagramChannel] - The NIO channel used for UDP communication\n- failures: [int] - Counter for tracking failed send attempts\n\nMethods:\n- connect(): [void] -> [void] - Establishes a connection to the Graphite server by opening a DatagramChannel\n- isConnected(): [void] -> [boolean] - Checks if the connection to the Graphite server is active\n- send(): [String name, String value, long timestamp] -> [void] - Formats and sends a metric to the Graphite server\n- getFailures(): [void] -> [int] - Returns the count of failed send attempts\n- flush(): [void] -> [void] - Placeholder method (no action needed for UDP)\n- close(): [void] -> [void] - Closes the DatagramChannel and cleans up resources\n- sanitize(): [String s] -> [String] - Sanitizes metric names and values (delegates to GraphiteSanitize)\n- getDatagramChannel(): [void] -> [DatagramChannel] - Returns the current DatagramChannel instance\n- setDatagramChannel(): [DatagramChannel datagramChannel] -> [void] - Sets the DatagramChannel instance\n- getAddress(): [void] -> [InetSocketAddress] - Returns the current target address\n- setAddress(): [InetSocketAddress address] -> [void] - Sets the target address",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.InetAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\n\npublic class GraphiteUDP implements GraphiteSender {\n\n    private final String hostname;\n    private final int port;\n    private InetSocketAddress address;\n\n    private DatagramChannel datagramChannel = null;\n    private int failures;\n\n    public GraphiteUDP(String hostname, int port) {\n        this.hostname = hostname;\n        this.port = port;\n        this.address = null;\n    }\n\n    public GraphiteUDP(InetSocketAddress address) {\n        this.hostname = null;\n        this.port = -1;\n        this.address = address;\n    }\n\n    @Override\n    public void connect() throws IllegalStateException, IOException {\n        if (isConnected()) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n\n        if (hostname != null) {\n            address = new InetSocketAddress(InetAddress.getByName(hostname), port);\n        }\n\n        datagramChannel = DatagramChannel.open();\n    }\n\n    @Override\n    public boolean isConnected() {\n        return datagramChannel != null && !datagramChannel.socket().isClosed();\n    }\n\n    @Override\n    public void send(String name, String value, long timestamp) throws IOException {\n        try {\n            String str = sanitize(name) + ' ' + sanitize(value) + ' ' + Long.toString(timestamp) + '\\n';\n            ByteBuffer byteBuffer = ByteBuffer.wrap(str.getBytes(UTF_8));\n            datagramChannel.send(byteBuffer, address);\n            this.failures = 0;\n        } catch (IOException e) {\n            failures++;\n            throw e;\n        }\n    }\n\n    @Override\n    public int getFailures() {\n        return failures;\n    }\n\n    @Override\n    public void flush() throws IOException {\n        // Nothing to do\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (datagramChannel != null) {\n            try {\n                datagramChannel.close();\n            } finally {\n                datagramChannel = null;\n            }\n        }\n    }\n\n    protected String sanitize(String s) {\n        return GraphiteSanitize.sanitize(s);\n    }\n\n    DatagramChannel getDatagramChannel() {\n        return datagramChannel;\n    }\n\n    void setDatagramChannel(DatagramChannel datagramChannel) {\n        this.datagramChannel = datagramChannel;\n    }\n\n    InetSocketAddress getAddress() {\n        return address;\n    }\n\n    void setAddress(InetSocketAddress address) {\n        this.address = address;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\npublic class GraphiteUDP {\n    private String hostname;\n    private int port;\n    private InetSocketAddress address;\n    private DatagramChannel datagramChannel;\n    private int failures;\n\n    public void connect() throws IOException {\n        address = new InetSocketAddress(hostname, port);\n        datagramChannel = DatagramChannel.open();\n        datagramChannel.configureBlocking(false);\n        datagramChannel.connect(address);\n    }\n\n    public boolean isConnected() {\n        return datagramChannel != null && datagramChannel.isConnected();\n    }\n\n    public void send(String name, String value, long timestamp) {\n        try {\n            String sanitizedName = sanitize(name);\n            String sanitizedValue = sanitize(value);\n            String message = sanitizedName + \" \" + sanitizedValue + \" \" + timestamp + \"\\n\";\n            ByteBuffer buffer = ByteBuffer.wrap(message.getBytes());\n            datagramChannel.send(buffer);\n        } catch (IOException e) {\n            failures++;\n        }\n    }\n\n    public int getFailures() {\n        return failures;\n    }\n\n    public void flush() {\n        // No action needed for UDP\n    }\n\n    public void close() {\n        if (datagramChannel != null) {\n            try {\n                datagramChannel.close();\n            } catch (IOException e) {\n                // Handle or log as needed\n            }\n            datagramChannel = null;\n        }\n    }\n\n    private String sanitize(String s) {\n        return GraphiteSanitize.sanitize(s);\n    }\n\n    public DatagramChannel getDatagramChannel() {\n        return datagramChannel;\n    }\n\n    public void setDatagramChannel(DatagramChannel datagramChannel) {\n        this.datagramChannel = datagramChannel;\n    }\n\n    public InetSocketAddress getAddress() {\n        return address;\n    }\n\n    public void setAddress(InetSocketAddress address) {\n        this.address = address;\n    }\n}\n```"
  },
  {
    "Task_id": 445,
    "Instruction": "Task Description: Implement a Java class for UDP-based communication with OpenTracker for live synchronization of peer information using Java NIO's non-blocking DatagramChannel.\n\nClass Description: The OpentrackerLiveSync class handles UDP communication with an OpenTracker server for peer synchronization. It uses non-blocking I/O to send peer information packets to a multicast group. The class maintains a queue of outgoing messages and processes them in batches.\n\nAttributes:\n- toSend: TransferQueue<ByteBuffer> - Thread-safe queue holding outgoing peer information packets\n- channel: DatagramChannel - The UDP communication channel for sending data\n- id: byte[] - 4-byte random identifier for this client\n- running: volatile boolean - Flag controlling the operation of the sender thread\n- HEADER_LENGTH: static final int - Constant for header size (8 bytes)\n- PEER_LENGTH: static final int - Constant for peer information size (28 bytes)\n- PEERS_PER_PACKET: static final int - Constant for maximum peers per packet (50)\n\nMethods:\n- OpentrackerLiveSync() -> None - Constructor initializes random client ID\n- start() -> None - Initializes UDP channel and starts sender thread\n- incomingPacket(MessageBase msg) -> None - Processes incoming messages and queues valid peer requests\n- send() -> None - Worker method that sends batched peer information packets\n- stop() -> None - Stops the sender thread and closes the channel\n\nInput Parameters for Methods:\n- incomingPacket: msg [MessageBase] - The incoming message to process\n- (Other methods take no explicit parameters)\n\nOutput/Return Values:\n- All methods return void except the constructor\n- Methods primarily affect class state and perform I/O operations",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.Inet4Address;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.StandardProtocolFamily;\nimport java.net.StandardSocketOptions;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\nimport java.util.concurrent.LinkedTransferQueue;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TransferQueue;\n\npublic class OpentrackerLiveSync {\n\n    TransferQueue<ByteBuffer> toSend = new LinkedTransferQueue<>();\n    DatagramChannel channel;\n    byte[] id = new byte[4];\n    volatile boolean running = true;\n    \n    private static final int HEADER_LENGTH = 0x08;\n    private static final int PEER_LENGTH = 0x1C;\n    private static final int PEERS_PER_PACKET = 50;\n    \n    public OpentrackerLiveSync() {\n        ThreadLocalRandom.current().nextBytes(id);\n    }\n    \n    public void start() {\n        try {\n            channel = DatagramChannel.open(StandardProtocolFamily.INET);\n            channel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, 1);\n            channel.setOption(StandardSocketOptions.SO_REUSEADDR, true);\n            channel.bind(new InetSocketAddress(0));\n            channel.connect(new InetSocketAddress(InetAddress.getByAddress(new byte[] {(byte) 224,0,23,5}), 9696));\n        } catch (IOException e) {\n            e.printStackTrace();\n            return;\n        }\n        \n        Thread t = new Thread(this::send);\n        t.setDaemon(true);\n        t.setName(\"opentracker-sync\");\n        t.start();\n    }\n    \n    public void incomingPacket(MessageBase msg) {\n        if(!running)\n            return;\n        if(msg.getType() != MessageBase.Type.REQ_MSG || msg.getMethod() != MessageBase.Method.GET_PEERS)\n            return;\n        \n        GetPeersRequest req = (GetPeersRequest) msg;\n        \n        ByteBuffer buf = ByteBuffer.allocate(PEER_LENGTH);\n        buf.put(req.getTarget().getHash());\n        buf.put(req.getOrigin().getAddress().getAddress());\n        buf.putShort((short) req.getOrigin().getPort());\n        buf.putShort((short) 0);\n        buf.flip();\n        toSend.add(buf);\n    }\n    \n    void send() {\n        ByteBuffer sendBuffer = ByteBuffer.allocate(HEADER_LENGTH);\n        sendBuffer.put(id);\n        sendBuffer.put(new byte[4]);\n        sendBuffer.flip();\n        \n        ByteBuffer[] buffers = new ByteBuffer[1 + PEERS_PER_PACKET];\n        buffers[0] = sendBuffer;\n\n        try {\n            while(running) {\n                for(int i = 1;i<buffers.length;i++) {\n                    buffers[i] = toSend.take();\n                }\n                \n                channel.write(buffers);\n                buffers[0].rewind();\n            }\n        } catch (IOException | InterruptedException e) {\n            running = false;\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        running = false;\n        try {\n            channel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "right_result": "```java\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.LinkedTransferQueue;\nimport java.util.concurrent.TransferQueue;\nimport java.security.SecureRandom;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\n\npublic class OpentrackerLiveSync {\n    private final TransferQueue<ByteBuffer> toSend = new LinkedTransferQueue<>();\n    private DatagramChannel channel;\n    private final byte[] id = new byte[4];\n    private volatile boolean running;\n    private static final int HEADER_LENGTH = 8;\n    private static final int PEER_LENGTH = 28;\n    private static final int PEERS_PER_PACKET = 50;\n\n    public OpentrackerLiveSync() {\n        new SecureRandom().nextBytes(id);\n    }\n\n    public void start() {\n        try {\n            channel = DatagramChannel.open();\n            channel.configureBlocking(false);\n            running = true;\n            new Thread(this::send).start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void incomingPacket(MessageBase msg) {\n        if (msg.isPeerRequest()) {\n            toSend.offer(msg.getPeerData());\n        }\n    }\n\n    private void send() {\n        while (running) {\n            List<ByteBuffer> peers = new ArrayList<>();\n            for (int i = 0; i < PEERS_PER_PACKET && !toSend.isEmpty(); i++) {\n                ByteBuffer peer = toSend.poll();\n                if (peer != null) {\n                    peers.add(peer);\n                }\n            }\n            if (!peers.isEmpty()) {\n                ByteBuffer packet = ByteBuffer.allocate(HEADER_LENGTH + peers.size() * PEER_LENGTH);\n                packet.put(new byte[HEADER_LENGTH]);\n                for (ByteBuffer peer : peers) {\n                    packet.put(peer);\n                }\n                packet.flip();\n                try {\n                    InetAddress group = InetAddress.getByName(\"224.0.0.1\");\n                    InetSocketAddress address = new InetSocketAddress(group, 6969);\n                    channel.send(packet, address);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            } else {\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    break;\n                }\n            }\n        }\n    }\n\n    public void stop() {\n        running = false;\n        try {\n            channel.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 446,
    "Instruction": "Task Description: Create a Java class that implements a non-blocking UDP sender using Java NIO's DatagramChannel for asynchronous communication.\n\nClass Description: The Sender class provides functionality to establish a non-blocking UDP connection, send data packets to a specified host and port, and manage the connection lifecycle. It uses Java NIO's DatagramChannel for efficient network communication.\n\nAttributes:\n- host: [String] - The target hostname or IP address for UDP communication\n- port: [int] - The target port number for UDP communication\n- address: [InetSocketAddress] - The socket address combining host and port for the target\n- channel: [DatagramChannel] - The NIO channel used for UDP communication\n\nMethods:\n- connect(): [void] -> [void] - Opens a DatagramChannel and prepares it for communication. Throws IOException if connection fails and IllegalStateException if already connected.\n- isConnected(): [void] -> [boolean] - Checks if the channel is currently connected and not closed.\n- send(ByteBuffer buffer): [ByteBuffer] -> [void] - Sends the contents of the provided ByteBuffer to the target address. Throws IOException if sending fails.\n- disconnect(): [void] -> [void] - Closes the DatagramChannel and releases resources. Safe to call even if not connected.",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\npublic class Sender {\n\n    private final String host;\n    private final int port;\n    private InetSocketAddress address;\n    private DatagramChannel channel;\n\n    public Sender(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void connect() throws IOException {\n        if (isConnected()) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n        if (host != null) {\n            address = new InetSocketAddress(host, port);\n        }\n        channel = DatagramChannel.open();\n    }\n\n    public boolean isConnected() {\n        return channel != null && !channel.socket().isClosed();\n    }\n\n    public void send(ByteBuffer buffer) throws IOException {\n        channel.send(buffer, address);\n    }\n\n    public void disconnect() throws IOException {\n        if (channel == null) {\n            return;\n        }\n        try {\n            channel.close();\n        } finally {\n            channel = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\nimport java.net.InetSocketAddress;\n\npublic class Sender {\n    private String host;\n    private int port;\n    private InetSocketAddress address;\n    private DatagramChannel channel;\n\n    public Sender(String host, int port) {\n        this.host = host;\n        this.port = port;\n        this.address = new InetSocketAddress(host, port);\n    }\n\n    public void connect() throws IOException {\n        if (channel != null && channel.isOpen()) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n        channel = DatagramChannel.open();\n        channel.configureBlocking(false);\n        channel.connect(address);\n    }\n\n    public boolean isConnected() {\n        return channel != null && channel.isOpen() && channel.isConnected();\n    }\n\n    public void send(ByteBuffer buffer) throws IOException {\n        if (!isConnected()) {\n            throw new IllegalStateException(\"Not connected\");\n        }\n        channel.send(buffer);\n    }\n\n    public void disconnect() {\n        if (channel != null && channel.isOpen()) {\n            try {\n                channel.close();\n            } catch (IOException e) {\n                // Ignore\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 448,
    "Instruction": "Task Description: Implement a Java class for multicast UDP communication using Java NIO's DatagramChannel for both sending and receiving messages in a non-blocking manner.\n\nClass Description: The MulticastUDP class provides functionality for joining a multicast group, sending messages to specified targets, receiving messages from the group, and closing the communication channel. It utilizes Java NIO's non-blocking capabilities for efficient UDP communication.\n\nAttributes:\n- channel: DatagramChannel - The NIO channel used for UDP communication  \n- group: InetAddress - The multicast group address  \n- port: int - The port number for multicast communication  \n\nMethods:\n- MulticastUDP(String host, int port) -> void - Constructor that initializes the multicast group address and port, and opens a DatagramChannel  \n- joinGroup() -> void - Binds the channel to the specified port and joins the multicast group  \n- receive() -> String - Receives a message from the multicast group and returns it as a String  \n- send(String message, String targetHost, int targetPort) -> void - Sends a message to a specified target host and port  \n- close() -> void - Closes the DatagramChannel to release resources",
    "Canonical_solution": "import java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.StandardProtocolFamily;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\npublic final class MulticastUDP {\n\n    private DatagramChannel channel;\n    private InetAddress group;\n    private int port;\n\n    public MulticastUDP(String host, int port) throws Exception {\n        this.group = InetAddress.getByName(host);\n        this.port = port;\n        this.channel = DatagramChannel.open(StandardProtocolFamily.INET);\n    }\n\n    public void joinGroup() throws Exception {\n        channel.bind(new InetSocketAddress(port));\n        channel.join(group, Utils.getLocalNetworkInterface());\n    }\n\n    public String receive() throws Exception {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        SocketAddress sender = channel.receive(buffer);\n        buffer.flip();\n        byte[] data = new byte[buffer.remaining()];\n        buffer.get(data);\n        return new String(data);\n    }\n\n    public void send(String message, String targetHost, int targetPort) throws Exception {\n        channel.configureBlocking(true);\n        InetSocketAddress sender = new InetSocketAddress(targetHost, targetPort);\n        channel.send(ByteBuffer.wrap(message.getBytes()), sender);\n    }\n\n    public void close() throws Exception {\n        channel.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.*;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\npublic class MulticastUDP {\n    private DatagramChannel channel;\n    private InetAddress group;\n    private int port;\n\n    public MulticastUDP(String host, int port) throws IOException {\n        this.group = InetAddress.getByName(host);\n        this.port = port;\n        this.channel = DatagramChannel.open();\n        this.channel.configureBlocking(false);\n    }\n\n    public void joinGroup() throws IOException {\n        channel.socket().bind(new InetSocketAddress(port));\n        channel.join(group, NetworkInterface.getDefault());\n    }\n\n    public String receive() throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        SocketAddress sender = channel.receive(buffer);\n        if (sender != null) {\n            buffer.flip();\n            byte[] data = new byte[buffer.remaining()];\n            buffer.get(data);\n            return new String(data);\n        }\n        return null;\n    }\n\n    public void send(String message, String targetHost, int targetPort) throws IOException {\n        ByteBuffer buffer = ByteBuffer.wrap(message.getBytes());\n        InetSocketAddress address = new InetSocketAddress(targetHost, targetPort);\n        channel.send(buffer, address);\n    }\n\n    public void close() throws IOException {\n        channel.close();\n    }\n}\n```"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality for interacting with a radio scanner API, supporting both synchronous and asynchronous requests.\n\nClass Description: The RdioScannerHttpClient class provides methods to test API connections and send audio recordings to a radio scanner service using HTTP multipart form data requests. It uses Java's HttpClient for HTTP/2 communication with configurable timeouts and redirect policies.\n\nAttributes:\n- mHttpClient: [HttpClient] - The underlying HTTP client instance configured with HTTP/2 support, 20-second timeout, and normal redirect policy\n\nMethods:\n- testConnection: [testConnection]([RdioScannerConfiguration configuration]) -> [String] - Synchronously tests the API connection by sending a test request with the API key and system ID, returns the response body with status code or error message\n- sendAudioRecordingAsync: [sendAudioRecordingAsync]([RdioScannerConfiguration config, RdioScannerBuilder bodyBuilder]) -> [void] - Asynchronously sends an audio recording to the API using multipart form data, handles response completion with success/error callbacks",
    "Canonical_solution": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\n\npublic class RdioScannerHttpClient {\n\n    private HttpClient mHttpClient = HttpClient.newBuilder()\n        .version(HttpClient.Version.HTTP_2)\n        .followRedirects(HttpClient.Redirect.NORMAL)\n        .connectTimeout(Duration.ofSeconds(20))\n        .build();\n\n    public String testConnection(RdioScannerConfiguration configuration) {\n        RdioScannerBuilder bodyBuilder = new RdioScannerBuilder();\n        bodyBuilder.addPart(FormField.KEY, configuration.getApiKey())\n            .addPart(FormField.SYSTEM, configuration.getSystemID())\n            .addPart(FormField.TEST, 1);\n\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(configuration.getHost()))\n            .header(HttpHeaders.CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bodyBuilder.getBoundary())\n            .header(HttpHeaders.USER_AGENT, \"sdrtrunk\")\n            .header(HttpHeaders.ACCEPT, \"*/*\")\n            .POST(bodyBuilder.build())\n            .build();\n\n        HttpResponse.BodyHandler<String> responseHandler = HttpResponse.BodyHandlers.ofString();\n\n        try {\n            HttpResponse<String> response = mHttpClient.send(request, responseHandler);\n            String responseBody = response.body();\n            return (responseBody != null ? responseBody : \"(no response)\") + \" Status Code:\" + response.statusCode();\n        }\n        catch(Exception e) {\n            return e.getLocalizedMessage();\n        }\n    }\n\n    public void sendAudioRecordingAsync(RdioScannerConfiguration config, RdioScannerBuilder bodyBuilder) {\n        HttpRequest fileRequest = HttpRequest.newBuilder()\n            .uri(URI.create(config.getHost()))\n            .header(HttpHeaders.CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bodyBuilder.getBoundary())\n            .header(HttpHeaders.USER_AGENT, \"sdrtrunk\")\n            .POST(bodyBuilder.build())\n            .build();\n\n        mHttpClient.sendAsync(fileRequest, HttpResponse.BodyHandlers.ofString())\n            .whenComplete((fileResponse, throwable1) -> {\n                if(throwable1 != null || fileResponse.statusCode() != 200) {\n                    if(throwable1 instanceof IOException || throwable1 instanceof CompletionException) {\n                        // Handle error cases\n                    }\n                }\n                else {\n                    // Handle successful response\n                }\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "```java\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\nimport java.util.UUID;\n\npublic class RdioScannerHttpClient {\n    private final HttpClient mHttpClient;\n\n    public RdioScannerHttpClient() {\n        mHttpClient = HttpClient.newBuilder()\n                .version(HttpClient.Version.HTTP_2)\n                .connectTimeout(Duration.ofSeconds(20))\n                .redirect(HttpClient.Redirect.NORMAL)\n                .build();\n    }\n\n    public String testConnection(RdioScannerConfiguration configuration) {\n        String url = configuration.getTestEndpoint();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .header(\"Authorization\", \"Bearer \" + configuration.getApiKey())\n                .header(\"System-ID\", configuration.getSystemId())\n                .GET()\n                .build();\n\n        try {\n            HttpResponse<String> response = mHttpClient.send(request, HttpResponse.BodyHandlers.ofString());\n            return \"Status: \" + response.statusCode() + \", Body: \" + response.body();\n        } catch (Exception e) {\n            return \"Error: \" + e.getMessage();\n        }\n    }\n\n    public void sendAudioRecordingAsync(RdioScannerConfiguration config, RdioScannerBuilder bodyBuilder) {\n        String url = config.getUploadEndpoint();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .header(\"Authorization\", \"Bearer \" + config.getApiKey())\n                .POST(buildMultipartBody(bodyBuilder))\n                .build();\n\n        mHttpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n                .thenAccept(response -> {\n                    if (response.statusCode() >= 200 && response.statusCode() < 300) {\n                        System.out.println(\"Success: \" + response.body());\n                    } else {\n                        System.err.println(\"Failure: \" + response.statusCode() + \" - \" + response.body());\n                    }\n                })\n                .exceptionally(ex -> {\n                    System.err.println(\"Error: \" + ex.getMessage());\n                    return null;\n                });\n    }\n\n    private BodyPublisher buildMultipartBody(RdioScannerBuilder bodyBuilder) {\n        String boundary = \"===\" + UUID.randomUUID().toString() + \"===\";\n        StringBuilder body = new StringBuilder();\n        bodyBuilder.buildParts(boundary, body);\n        return BodyPublishers.ofString(body.toString());\n    }\n}\n```"
  },
  {
    "Task_id": 452,
    "Instruction": "Task Description: Create a Java class that implements UDP communication using Vert.x, allowing for the initialization of a UDP socket, sending UDP packets, and closing the socket.\n\nClass Description: The UdpSender class provides functionality for sending UDP packets using Vert.x's DatagramSocket. It supports socket configuration, packet transmission, and socket cleanup.\n\nAttributes:\n\nAttribute1: socket [DatagramSocket] - The Vert.x DatagramSocket instance used for UDP communication.\nAttribute2: vertx [Vertx] - The Vert.x instance used to create the DatagramSocket.\n\nMethods:\n\nMethod1: initialize(DatagramSocketOptions options) -> void - Initializes the UDP socket with the specified configuration options.\nMethod2: sendPacket(Buffer data, int port, String host, Handler<AsyncResult<Void>> resultHandler) -> void - Sends a UDP packet containing the specified data to the given host and port, with an optional handler to track the send operation's success or failure.\nMethod3: close(Handler<AsyncResult<Void>> closeHandler) -> void - Closes the UDP socket, with an optional handler to track the close operation's completion.",
    "Canonical_solution": "import io.vertx.core.*;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.datagram.DatagramSocket;\nimport io.vertx.core.datagram.DatagramSocketOptions;\n\npublic class UdpSender {\n\n    private DatagramSocket socket;\n    private Vertx vertx;\n\n    public UdpSender(Vertx vertx) {\n        this.vertx = vertx;\n    }\n\n    public void initialize(DatagramSocketOptions options) {\n        socket = vertx.createDatagramSocket(options);\n    }\n\n    public void sendPacket(Buffer data, int port, String host, Handler<AsyncResult<Void>> resultHandler) {\n        socket.send(data, port, host).onComplete(resultHandler);\n    }\n\n    public void close(Handler<AsyncResult<Void>> closeHandler) {\n        if (socket != null) {\n            socket.close().onComplete(closeHandler);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 14,
    "right_result": "import io.vertx.core.Vertx;\nimport io.vertx.core.datagram.DatagramSocket;\nimport io.vertx.core.datagram.DatagramSocketOptions;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.Handler;\nimport io.vertx.core.AsyncResult;\n\npublic class UdpSender {\n    private DatagramSocket socket;\n    private final Vertx vertx;\n\n    public UdpSender(Vertx vertx) {\n        this.vertx = vertx;\n    }\n\n    public void initialize(DatagramSocketOptions options) {\n        this.socket = vertx.createDatagramSocket(options);\n    }\n\n    public void sendPacket(Buffer data, int port, String host, Handler<AsyncResult<Void>> resultHandler) {\n        socket.send(data, port, host, resultHandler);\n    }\n\n    public void close(Handler<AsyncResult<Void>> closeHandler) {\n        socket.close(closeHandler);\n    }\n}"
  },
  {
    "Task_id": 454,
    "Instruction": "Task Description: Retrieve the configurations of specified Kafka topics using the Kafka AdminClient API.\n\nFunction Description: This function connects to a Kafka cluster using the provided bootstrap servers and retrieves the configurations for the specified topic names. It utilizes the Kafka AdminClient to describe the configurations and returns them as a map of ConfigResource to Config objects.\n\nInput: \n- bootstrapServers: [String] - Comma-separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.\n- topicNames: [String[]] - Array of topic names for which configurations need to be retrieved.\n\nOutput: \n- [Map<ConfigResource, Config>] - A map where keys are ConfigResource objects representing the topics, and values are Config objects containing the configuration entries for each topic. The operation will timeout after 3 seconds if the configuration retrieval is not completed.",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.DescribeConfigsResult;\nimport org.apache.kafka.clients.admin.Config;\nimport org.apache.kafka.common.config.ConfigResource;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Arrays;\nimport java.util.concurrent.TimeUnit;\n\npublic Map<ConfigResource, Config> getTopicConfigurations(String bootstrapServers, String[] topicNames) throws Exception {\n    Map<String, Object> adminClientConfig = new HashMap<>();\n    adminClientConfig.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    AdminClient adminClient = AdminClient.create(adminClientConfig);\n    \n    ConfigResource[] configResources = Arrays.stream(topicNames)\n        .map(topicName -> new ConfigResource(ConfigResource.Type.TOPIC, topicName))\n        .toArray(ConfigResource[]::new);\n        \n    DescribeConfigsResult describeConfigsResult = adminClient.describeConfigs(Arrays.asList(configResources));\n    return describeConfigsResult.all().get(3, TimeUnit.SECONDS);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 36,
    "right_result": "```java\nimport org.apache.kafka.common.config.ConfigResource;\nimport org.apache.kafka.common.config.Config;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\n\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.stream.Collectors;\n\npublic class KafkaConfigRetriever {\n    public static Map<ConfigResource, Config> getTopicConfigurations(String bootstrapServers, String[] topicNames) {\n        Properties props = new Properties();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, \"3000\");\n\n        try (AdminClient adminClient = AdminClient.create(props)) {\n            Collection<ConfigResource> resources = Arrays.stream(topicNames)\n                .map(topic -> new ConfigResource(ConfigResource.Type.TOPIC, topic))\n                .collect(Collectors.toList());\n\n            return adminClient.describeConfigs(resources).all().get();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to retrieve Kafka configurations\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 457,
    "Instruction": "Task Description: Implement a Kafka topic administration utility class that provides functionality to describe Kafka topics using the AdminClient API.\n\nClass Description: The `KafkaTopicAdmin` class is a utility class designed to interact with Apache Kafka's administrative API. It provides methods to perform administrative operations on Kafka topics, specifically focusing on describing topic configurations. The class handles connection management and timeout configurations for administrative operations.\n\nAttributes:\n- configs: [Map<String, Object>] - Configuration properties for connecting to the Kafka cluster (e.g., bootstrap servers, security settings)\n- operationTimeout: [int] - Timeout duration in seconds for administrative operations\n\nMethods:\n- describeTopics: [describeTopics](String... topicNames) -> Map<String, TopicDescription> - Describes the specified Kafka topics by returning their configurations including partition count, replication factor, and other metadata. Throws KafkaException for operation failures or interruptions.\n- createAdmin: [createAdmin]() -> Admin - Creates and returns an AdminClient instance using the configured properties. Protected method for internal use.\n- getAdminConfig: [getAdminConfig]() -> Map<String, Object> - Returns a copy of the admin client configuration. Protected method for internal use.\n\nThe class implements AutoCloseable behavior through the AdminClient resource management in the describeTopics method, ensuring proper cleanup of resources. It handles various failure scenarios including timeouts, execution exceptions, and thread interruptions by wrapping them in appropriate KafkaException instances.",
    "Canonical_solution": "import org.apache.kafka.clients.admin.Admin;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.DescribeTopicsResult;\nimport org.apache.kafka.clients.admin.TopicDescription;\nimport org.springframework.kafka.KafkaException;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\npublic class KafkaTopicAdmin {\n\n    private final Map<String, Object> configs;\n    private final int operationTimeout;\n\n    public KafkaTopicAdmin(Map<String, Object> configs, int operationTimeout) {\n        this.configs = new HashMap<>(configs);\n        this.operationTimeout = operationTimeout;\n    }\n\n    public Map<String, TopicDescription> describeTopics(String... topicNames) {\n        try (Admin admin = createAdmin()) {\n            Map<String, TopicDescription> results = new HashMap<>();\n            DescribeTopicsResult topics = admin.describeTopics(Arrays.asList(topicNames));\n            try {\n                results.putAll(topics.allTopicNames().get(this.operationTimeout, TimeUnit.SECONDS));\n                return results;\n            }\n            catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                throw new KafkaException(\"Interrupted while getting topic descriptions\", ie);\n            }\n            catch (TimeoutException | ExecutionException ex) {\n                throw new KafkaException(\"Failed to obtain topic descriptions\", ex);\n            }\n        }\n    }\n\n    protected Admin createAdmin() {\n        return AdminClient.create(getAdminConfig());\n    }\n\n    protected Map<String, Object> getAdminConfig() {\n        final Map<String, Object> configs2 = new HashMap<>(this.configs);\n        return configs2;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 35,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.Admin;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.DescribeTopicsResult;\nimport org.apache.kafka.clients.admin.TopicDescription;\nimport org.apache.kafka.common.KafkaException;\n\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeoutException;\n\npublic class KafkaTopicAdmin implements AutoCloseable {\n    private final Map<String, Object> configs;\n    private final int operationTimeout;\n\n    public KafkaTopicAdmin(Map<String, Object> configs, int operationTimeout) {\n        this.configs = configs;\n        this.operationTimeout = operationTimeout;\n    }\n\n    public Map<String, TopicDescription> describeTopics(String... topicNames) {\n        try (Admin admin = createAdmin()) {\n            DescribeTopicsResult result = admin.describeTopics(Arrays.asList(topicNames));\n            return result.all().get(operationTimeout, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new KafkaException(\"Interrupted while describing topics\", e);\n        } catch (ExecutionException e) {\n            throw new KafkaException(\"Execution exception while describing topics\", e.getCause());\n        } catch (TimeoutException e) {\n            throw new KafkaException(\"Timeout while describing topics\", e);\n        } catch (Exception e) {\n            throw new KafkaException(\"Unexpected error while describing topics\", e);\n        }\n    }\n\n    protected Admin createAdmin() {\n        Map<String, Object> adminConfigs = new HashMap<>(configs);\n        adminConfigs.put(\"request.timeout.ms\", operationTimeout * 1000);\n        return Admin.create(adminConfigs);\n    }\n\n    protected Map<String, Object> getAdminConfig() {\n        return new HashMap<>(configs);\n    }\n\n    @Override\n    public void close() {\n        // Admin is managed in describeTopics\n    }\n}\n```"
  },
  {
    "Task_id": 458,
    "Instruction": "Task Description: Implement a WebSocket client class for handling device management operations in a cross-platform environment (Android/iOS), including device occupation, release, and various debug operations.\n\nClass Description: TransportClient is a WebSocket client implementation that handles communication with a device management server. It manages device resources, processes incoming commands, and coordinates debug sessions for both Android and iOS devices.\n\nAttributes:\n- Inherited from WebSocketClient: Basic WebSocket connection attributes (URI, connection state, etc.)\n- No additional attributes declared (uses inherited functionality)\n\nMethods:\n1. TransportClient(URI serverUri) -> void - Constructor that initializes the WebSocket client with the server URI.\n\n2. onOpen(ServerHandshake serverHandshake) -> void - Callback when WebSocket connection is established. Logs connection status.\n\n3. onMessage(String s) -> void - Handles incoming messages from server. Parses JSON messages and delegates to appropriate handler methods based on message type. Runs handlers in a thread pool.\n\n4. onClose(int i, String s, boolean b) -> void - Callback when connection closes. Handles cleanup and reconnection logic.\n\n5. onError(Exception e) -> void - Callback for connection errors. Logs error messages.\n\n6. handleOccupyMessage(JSONObject jsonObject) -> void - Processes device occupation requests. Locks device and initiates platform-specific debug setup.\n   - Input: JSONObject containing device info and debug parameters\n   - Output: None (side effects: device lock, debug session setup)\n\n7. handleAndroidOccupy(String udId, JSONObject jsonObject) -> void - Android-specific occupation handler. Starts debug session and required services.\n   - Input: \n     - udId: String - Device identifier\n     - jsonObject: JSONObject - Occupation parameters\n   - Output: None (side effects: Android debug session setup)\n\n8. handleIOSOccupy(String udId, JSONObject jsonObject) -> void - iOS-specific occupation handler. Starts debug session and required services.\n   - Input:\n     - udId: String - Device identifier\n     - jsonObject: JSONObject - Occupation parameters\n   - Output: None (side effects: iOS debug session setup)\n\n(Note: The class contains additional private handler methods for other message types that follow similar patterns to handleOccupyMessage, but they are not fully shown in the reference code. These would include handlers for release, debug steps, suite operations, etc.)",
    "Canonical_solution": "import com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\n\npublic class TransportClient extends WebSocketClient {\n\n    public TransportClient(URI serverUri) {\n        super(serverUri);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake serverHandshake) {\n        log.info(\"Connected and auth...\");\n    }\n\n    @Override\n    public void onMessage(String s) {\n        JSONObject jsonObject = JSON.parseObject(s);\n        if (jsonObject.getString(\"msg\").equals(\"pong\")) {\n            return;\n        }\n        log.info(\"Agent <- Server message: {}\", jsonObject);\n        TransportWorker.cachedThreadPool.execute(() -> {\n            switch (jsonObject.getString(\"msg\")) {\n                case \"occupy\" -> handleOccupyMessage(jsonObject);\n                case \"release\" -> handleReleaseMessage(jsonObject);\n                case \"stopDebug\" -> handleStopDebugMessage(jsonObject);\n                case \"settings\" -> handleSettingsMessage(jsonObject);\n                case \"auth\" -> handleAuthMessage(jsonObject);\n                case \"shutdown\" -> AgentManagerTool.stop();\n                case \"reboot\" -> handleRebootMessage(jsonObject);\n                case \"heartBeat\" -> handleHeartBeatMessage();\n                case \"hub\" -> PHCTool.setPosition(jsonObject.getInteger(\"position\"), jsonObject.getString(\"type\"));\n                case \"runStep\" -> handleRunStepMessage(jsonObject);\n                case \"debugStep\" -> handleDebugStepMessage(jsonObject);\n                case \"suite\" -> handleSuiteMessage(jsonObject);\n                case \"forceStopSuite\" -> handleForceStopSuiteMessage(jsonObject);\n            }\n        });\n    }\n\n    @Override\n    public void onClose(int i, String s, boolean b) {\n        if (TransportWorker.isKeyAuth) {\n            log.info(\"Server disconnected. Retry in 10s...\");\n        }\n        if (TransportWorker.client == this) {\n            TransportWorker.client = null;\n        }\n    }\n\n    @Override\n    public void onError(Exception e) {\n        log.info(e.getMessage());\n    }\n\n    private void handleOccupyMessage(JSONObject jsonObject) {\n        String udId = jsonObject.getString(\"udId\");\n        String token = jsonObject.getString(\"token\");\n        int platform = jsonObject.getInteger(\"platform\");\n\n        boolean lockSuccess = false;\n        try {\n            lockSuccess = DevicesLockMap.lockByUdId(udId, 30L, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            log.info(\"Fail to get device lock, cause {}\", e.getMessage());\n        }\n        if (!lockSuccess) {\n            log.info(\"Fail to get device lock... please make sure device is not busy.\");\n            return;\n        }\n\n        switch (platform) {\n            case PlatformType.ANDROID -> handleAndroidOccupy(udId, jsonObject);\n            case PlatformType.IOS -> handleIOSOccupy(udId, jsonObject);\n        }\n\n        JSONObject jsonDebug = new JSONObject();\n        jsonDebug.put(\"msg\", \"debugUser\");\n        jsonDebug.put(\"token\", token);\n        jsonDebug.put(\"udId\", udId);\n        TransportWorker.send(jsonDebug);\n    }\n\n    private void handleAndroidOccupy(String udId, JSONObject jsonObject) {\n        log.info(\"android lock udId\uff1a{}\", udId);\n        AndroidDeviceLocalStatus.startDebug(udId);\n\n        IDevice iDevice = AndroidDeviceBridgeTool.getIDeviceByUdId(udId);\n        if (iDevice == null) {\n            log.info(\"Target device is not connecting, please check the connection.\");\n            return;\n        }\n\n        int sasPort = jsonObject.getInteger(\"sasRemotePort\");\n        int uiaPort = jsonObject.getInteger(\"uia2RemotePort\");\n\n        if (sasPort != 0) {\n            AndroidSupplyTool.startShare(udId, sasPort);\n        }\n\n        if (uiaPort != 0) {\n            try {\n                AndroidDeviceBridgeTool.startUiaServer(iDevice, uiaPort);\n            } catch (InstallException e) {\n                log.error(e.getMessage());\n            }\n        }\n\n        OccupyMap.map.put(udId,\n                ScheduleTool.schedule(() -> {\n                    log.info(\"time up!\");\n                    androidRelease(udId);\n                }, BytesTool.remoteTimeout));\n    }\n\n    private void handleIOSOccupy(String udId, JSONObject jsonObject) {\n        log.info(\"ios lock udId\uff1a{}\", udId);\n        IOSDeviceLocalStatus.startDebug(udId);\n\n        if (!SibTool.getDeviceList().contains(udId)) {\n            log.info(\"Target device is not connecting, please check the connection.\");\n            return;\n        }\n\n        int sibPort = jsonObject.getInteger(\"sibRemotePort\");\n        int wdaPort = jsonObject.getInteger(\"wdaServerRemotePort\");\n        int wdaMjpegPort = jsonObject.getInteger(\"wdaMjpegRemotePort\");\n\n        if (sibPort != 0) {\n            SibTool.startShare(udId, sibPort);\n        }\n\n        if (wdaPort != 0 || wdaMjpegPort != 0) {\n            try {\n                SibTool.startWda(udId, wdaPort, wdaMjpegPort);\n            } catch (IOException | InterruptedException e) {\n                log.error(e.getMessage());\n            }\n        }\n\n        OccupyMap.map.put(udId,\n                ScheduleTool.schedule(() -> {\n                    log.info(\"time up!\");\n                    iosRelease(udId);\n                }, BytesTool.remoteTimeout));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport org.json.JSONObject;\n\nimport java.net.URI;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class TransportClient extends WebSocketClient {\n    private final ExecutorService threadPool = Executors.newFixedThreadPool(2);\n\n    public TransportClient(URI serverUri) {\n        super(serverUri);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake serverHandshake) {\n        System.out.println(\"WebSocket connected\");\n    }\n\n    @Override\n    public void onMessage(String s) {\n        try {\n            JSONObject message = new JSONObject(s);\n            String type = message.getString(\"type\");\n            switch (type) {\n                case \"occupy\":\n                    threadPool.submit(() -> handleOccupyMessage(message));\n                    break;\n                // Additional cases for other message types\n            }\n        } catch (Exception e) {\n            onError(e);\n        }\n    }\n\n    @Override\n    public void onClose(int i, String s, boolean b) {\n        System.out.println(\"WebSocket closed: \" + s);\n        // Reconnection logic if needed\n    }\n\n    @Override\n    public void onError(Exception e) {\n        System.err.println(\"WebSocket error: \" + e.getMessage());\n    }\n\n    private void handleOccupyMessage(JSONObject jsonObject) {\n        String deviceType = jsonObject.getString(\"deviceType\");\n        String udId = jsonObject.getString(\"udId\");\n        JSONObject params = jsonObject.getJSONObject(\"params\");\n\n        if (\"android\".equals(deviceType)) {\n            threadPool.submit(() -> handleAndroidOccupy(udId, params));\n        } else if (\"ios\".equals(deviceType)) {\n            threadPool.submit(() -> handleIOSOccupy(udId, params));\n        }\n        // Additional device type handling\n    }\n\n    private void handleAndroidOccupy(String udId, JSONObject jsonObject) {\n        // Android-specific occupation logic\n    }\n\n    private void handleIOSOccupy(String udId, JSONObject jsonObject) {\n        // iOS-specific occupation logic\n    }\n\n    // Additional private handler methods for other message types\n}\n```"
  },
  {
    "Task_id": 459,
    "Instruction": "Task Description: Create a WebSocket client class in Java using the org.java_websocket library to establish a connection to a WebSocket server and handle communication events.\n\nClass Description: The MyWebSocketClient class extends WebSocketClient to provide a custom WebSocket client implementation. It supports WebSocket communication with a server, including connection establishment, message exchange, and error handling. The class includes event handlers for WebSocket lifecycle events.\n\nAttributes:\n- perMessageDeflateDraft: [Draft] - A WebSocket draft implementation with Per-Message Deflate extension for message compression.\n\nMethods:\n- MyWebSocketClient: [Constructor](String serverUri) -> [void] - Initializes the WebSocket client with the server URI. Throws URISyntaxException if the URI is invalid.\n- onOpen: [void](ServerHandshake handshakedata) -> [void] - Callback invoked when the WebSocket connection is established.\n- onMessage: [void](String message) -> [void] - Callback invoked when a message is received from the server.\n- onClose: [void](int code, String reason, boolean remote) -> [void] - Callback invoked when the WebSocket connection is closed.\n- onError: [void](Exception ex) -> [void] - Callback invoked when an error occurs during WebSocket communication.",
    "Canonical_solution": "import java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Collections;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.extensions.permessage_deflate.PerMessageDeflateExtension;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class MyWebSocketClient extends WebSocketClient {\n\n    private static final Draft perMessageDeflateDraft = new Draft_6455(\n        new PerMessageDeflateExtension());\n\n    public MyWebSocketClient(String serverUri) throws URISyntaxException {\n        super(new URI(serverUri), perMessageDeflateDraft);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n    }\n\n    @Override\n    public void onMessage(String message) {\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onError(Exception ex) {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "import org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.drafts.Draft_17;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\npublic class MyWebSocketClient extends WebSocketClient {\n    private final Draft perMessageDeflateDraft;\n\n    public MyWebSocketClient(String serverUri) throws URISyntaxException {\n        super(new URI(serverUri), new Draft_17().setPerMessageDeflateEnabled(true));\n        this.perMessageDeflateDraft = new Draft_17().setPerMessageDeflateEnabled(true);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n    }\n\n    @Override\n    public void onMessage(String message) {\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onError(Exception ex) {\n    }\n}"
  },
  {
    "Task_id": 460,
    "Instruction": "Task Description: Create a WebSocket client class in Java using the org.java_websocket library to establish a connection to a WebSocket server and handle communication events.\n\nClass Description: The SimpleClient class extends WebSocketClient to provide a basic WebSocket client implementation. It handles connection events, message reception, connection closure, and errors through callback methods.\n\nAttributes:\n- serverUri: URI - The URI of the WebSocket server to connect to (inherited from WebSocketClient)\n\nMethods:\n- SimpleClient(URI serverUri) -> None - Constructor that initializes the WebSocket client with the server URI.\n- onOpen(ServerHandshake handshakedata) -> void - Callback method invoked when the WebSocket connection is successfully opened.\n- onMessage(String message) -> void - Callback method invoked when a text message is received from the server.\n- onClose(int code, String reason, boolean remote) -> void - Callback method invoked when the WebSocket connection is closed.\n- onError(Exception ex) -> void - Callback method invoked when an error occurs in the WebSocket connection.",
    "Canonical_solution": "import java.net.URI;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class SimpleClient extends WebSocketClient {\n\n    public SimpleClient(URI serverUri) {\n        super(serverUri);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        // Handle connection opening\n    }\n\n    @Override\n    public void onMessage(String message) {\n        // Handle text message received\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        // Handle connection closing\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        // Handle errors\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "import org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\n\npublic class SimpleClient extends WebSocketClient {\n    public SimpleClient(URI serverUri) {\n        super(serverUri);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n    }\n\n    @Override\n    public void onMessage(String message) {\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onError(Exception ex) {\n    }\n}"
  },
  {
    "Task_id": 461,
    "Instruction": "Task Description: Implement a WebSocket client class in Java using the org.java_websocket library to establish a connection with a WebSocket server, send and receive messages, and handle connection events.\n\nClass Description: The ExampleClient class extends WebSocketClient to create a WebSocket client that connects to a specified server URI. It overrides key WebSocket event-handling methods to manage connection lifecycle events.\n\nAttributes:\n- Inherited from WebSocketClient: All necessary attributes for WebSocket connection management are inherited from the parent class.\n\nMethods:\n- Constructor: ExampleClient(URI serverUri, Draft draft) -> void - Initializes the WebSocket client with server URI and protocol draft.\n- Constructor: ExampleClient(URI serverURI) -> void - Initializes the WebSocket client with server URI using default draft.\n- Constructor: ExampleClient(URI serverUri, Map<String, String> httpHeaders) -> void - Initializes the WebSocket client with server URI and custom HTTP headers.\n- onOpen: onOpen(ServerHandshake handshakedata) -> void - Called when connection is established, sends a greeting message.\n- onMessage: onMessage(String message) -> void - Called when a message is received from the server.\n- onClose: onClose(int code, String reason, boolean remote) -> void - Called when the connection is closed, logs closure details.\n- onError: onError(Exception ex) -> void - Called when an error occurs, prints the stack trace.",
    "Canonical_solution": "import java.net.URI;\nimport java.util.Map;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class ExampleClient extends WebSocketClient {\n\n  public ExampleClient(URI serverUri, Draft draft) {\n    super(serverUri, draft);\n  }\n\n  public ExampleClient(URI serverURI) {\n    super(serverURI);\n  }\n\n  public ExampleClient(URI serverUri, Map<String, String> httpHeaders) {\n    super(serverUri, httpHeaders);\n  }\n\n  @Override\n  public void onOpen(ServerHandshake handshakedata) {\n    send(\"Hello, it is me. Mario :)\");\n    System.out.println(\"opened connection\");\n  }\n\n  @Override\n  public void onMessage(String message) {\n    System.out.println(\"received: \" + message);\n  }\n\n  @Override\n  public void onClose(int code, String reason, boolean remote) {\n    System.out.println(\n        \"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \"\n            + reason);\n  }\n\n  @Override\n  public void onError(Exception ex) {\n    ex.printStackTrace();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "import org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.util.Map;\n\npublic class ExampleClient extends WebSocketClient {\n    public ExampleClient(URI serverUri, Draft draft) {\n        super(serverUri, draft);\n    }\n\n    public ExampleClient(URI serverURI) {\n        super(serverURI);\n    }\n\n    public ExampleClient(URI serverUri, Map<String, String> httpHeaders) {\n        super(serverUri, httpHeaders);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        System.out.println(\"Connected to server\");\n        send(\"Hello, server!\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(\"Received: \" + message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed: \" + reason + \" (Code: \" + code + \")\");\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        ex.printStackTrace();\n    }\n}"
  },
  {
    "Task_id": 462,
    "Instruction": "Task Description: Create a WebSocket client class that extends the basic WebSocketClient functionality to handle WebSocket communication with event callbacks and response streaming.\n\nClass Description: The MilkmanWebsocketClient class extends WebSocketClient to provide custom WebSocket client functionality. It handles WebSocket events (open, message, close, error) and streams responses to a subscriber while managing asynchronous request control.\n\nAttributes:\n- responseSubscriber: [Subscriber<byte[]>] - A subscriber that receives response data as byte arrays\n- asyncControl: [AsyncControl] - An asynchronous control object for managing request state and cancellation\n\nMethods:\n- MilkmanWebsocketClient([URI serverUri, Subscriber<byte[]> responseSubscriber, AsyncControl asyncControl]) -> [void] - Constructor that initializes the WebSocket client with server URI, response subscriber, and async control\n- onOpen([ServerHandshake handshakedata]) -> [void] - Callback when WebSocket connection is opened, triggers request ready\n- send([String message]) -> [void] - Sends a message through WebSocket and notifies subscriber of sent message\n- onMessage([String message]) -> [void] - Callback when message is received, notifies subscriber\n- onClose([int code, String reason, boolean remote]) -> [void] - Callback when WebSocket is closed, completes subscriber and marks request success\n- onError([Exception ex]) -> [void] - Callback when error occurs, notifies subscriber and marks request failure",
    "Canonical_solution": "import milkman.utils.AsyncResponseControl.AsyncControl;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport org.reactivestreams.Subscriber;\n\nimport java.net.URI;\n\npublic class MilkmanWebsocketClient extends WebSocketClient {\n\n    private final Subscriber<byte[]> responseSubscriber;\n    private final AsyncControl asyncControl;\n\n    public MilkmanWebsocketClient(URI serverUri,\n                                Subscriber<byte[]> responseSubscriber,\n                                AsyncControl asyncControl) {\n        super(serverUri);\n        this.responseSubscriber = responseSubscriber;\n        this.asyncControl = asyncControl;\n        asyncControl.onCancellationRequested.add(() -> close());\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        asyncControl.triggerReqeuestReady();\n    }\n\n    @Override\n    public void send(String message) {\n        String msg = \"SENT: \\n\" + message + \"\\n\\n\";\n        responseSubscriber.onNext(msg.getBytes());\n        super.send(message);\n    }\n\n    @Override\n    public void onMessage(String message) {\n        String msg = \"RECEIVED: \\n\" + message + \"\\n\\n\";\n        responseSubscriber.onNext(msg.getBytes());\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        responseSubscriber.onComplete();\n        asyncControl.triggerRequestSucceeded();\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        responseSubscriber.onError(ex);\n        asyncControl.triggerRequestFailed(ex);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.nio.charset.StandardCharsets;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport io.reactivex.subscribers.Subscriber;\n\npublic class MilkmanWebsocketClient extends WebSocketClient {\n    private final Subscriber<byte[]> responseSubscriber;\n    private final AsyncControl asyncControl;\n\n    public MilkmanWebsocketClient(URI serverUri, Subscriber<byte[]> responseSubscriber, AsyncControl asyncControl) {\n        super(serverUri);\n        this.responseSubscriber = responseSubscriber;\n        this.asyncControl = asyncControl;\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        asyncControl.requestReady();\n    }\n\n    public void send(String message) {\n        super.send(message);\n        responseSubscriber.onNext(message.getBytes(StandardCharsets.UTF_8));\n    }\n\n    @Override\n    public void onMessage(String message) {\n        responseSubscriber.onNext(message.getBytes(StandardCharsets.UTF_8));\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        responseSubscriber.onCompleted();\n        asyncControl.requestSuccess();\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        responseSubscriber.onError(ex);\n        asyncControl.requestFailure(ex);\n    }\n}\n```"
  },
  {
    "Task_id": 463,
    "Instruction": "Task Description: Implement a WebSocket client class in Java using the org.java_websocket library to establish a connection with a WebSocket server, handle incoming messages, and manage connection events.\n\nClass Description: WebSocketChatClient is a class that extends WebSocketClient from the org.java_websocket library. It provides functionality to connect to a WebSocket server and handle various WebSocket events such as connection opening, message reception, connection closing, and errors.\n\nAttributes:\n- Inherited from WebSocketClient: All attributes from the parent class WebSocketClient are available but not explicitly defined here.\n\nMethods:\n- Constructor: WebSocketChatClient(URI serverUri) -> void - Initializes the WebSocket client with the server URI.\n- onOpen: onOpen(ServerHandshake handshakedata) -> void - Called when the WebSocket connection is established. Prints \"Connected\" to the console.\n- onMessage: onMessage(String message) -> void - Called when a message is received from the server. Prints the message to the console.\n- onClose: onClose(int code, String reason, boolean remote) -> void - Called when the WebSocket connection is closed. Prints \"Disconnected\" to the console.\n- onError: onError(Exception ex) -> void - Called when an error occurs. Prints the stack trace of the exception.",
    "Canonical_solution": "import java.net.URI;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\nclass WebSocketChatClient extends WebSocketClient {\n\n  public WebSocketChatClient(URI serverUri) {\n    super(serverUri);\n  }\n\n  @Override\n  public void onOpen(ServerHandshake handshakedata) {\n    System.out.println(\"Connected\");\n  }\n\n  @Override\n  public void onMessage(String message) {\n    System.out.println(\"got: \" + message);\n  }\n\n  @Override\n  public void onClose(int code, String reason, boolean remote) {\n    System.out.println(\"Disconnected\");\n  }\n\n  @Override\n  public void onError(Exception ex) {\n    ex.printStackTrace();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\n\npublic class WebSocketChatClient extends WebSocketClient {\n    public WebSocketChatClient(URI serverUri) {\n        super(serverUri);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        System.out.println(\"Connected\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Disconnected\");\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        ex.printStackTrace();\n    }\n}\n```"
  },
  {
    "Task_id": 464,
    "Instruction": "Task Description: Implement a WebSocket client class that handles secure WebSocket connections with custom SSL configuration and event delegation.\n\nClass Description: WebSocketTransport is a WebSocket client implementation that extends the WebSocketClient class from the org.java_websocket library. It manages WebSocket connections with optional SSL/TLS encryption and delegates connection events to a listener interface. The class handles connection establishment, message reception, and connection termination events.\n\nAttributes:\n- CONNECT_TIMEOUT: int - Static constant defining the connection timeout in milliseconds (5000ms)\n- webSocketListener: WebSocketListener - Interface reference for handling WebSocket events (open, message, close, error)\n\nMethods:\n- WebSocketTransport(String serverUri, HttpConfiguration.SSLProperties sslProperties, Map<String, String> headers, WebSocketListener webSocketListener) -> None - Constructor that initializes the WebSocket client with server URI, SSL properties, custom headers, and event listener. Throws URISyntaxException for invalid URIs.\n- onOpen(ServerHandshake serverHandshake) -> void - Callback when WebSocket connection is established. Delegates to webSocketListener.\n- onMessage(String s) -> void - Callback when a text message is received. Delegates to webSocketListener.\n- onClose(int code, String reason, boolean remote) -> void - Callback when connection is closed. Delegates to webSocketListener.\n- onError(Exception e) -> void - Callback when an error occurs. Delegates to webSocketListener.",
    "Canonical_solution": "import java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Map;\n\nimport javax.net.ssl.SSLSocketFactory;\n\nimport org.apache.servicecomb.foundation.ssl.SSLManager;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class WebSocketTransport extends WebSocketClient {\n  public static final int CONNECT_TIMEOUT = 5000;\n\n  private final WebSocketListener webSocketListener;\n\n  public WebSocketTransport(String serverUri, HttpConfiguration.SSLProperties sslProperties,\n      Map<String, String> headers, WebSocketListener webSocketListener)\n      throws URISyntaxException {\n    super(new URI(serverUri), new Draft_6455(), headers, CONNECT_TIMEOUT);\n\n    if (sslProperties.isEnabled()) {\n      SSLSocketFactory sslSocketFactory = SSLManager\n          .createSSLSocketFactory(sslProperties.getSslOption(), sslProperties.getSslCustom());\n      URI uri = new URI(serverUri);\n      setSocketFactory(new SSLSocketFactoryExt(sslSocketFactory, uri.getHost(), uri.getPort()));\n    }\n\n    this.webSocketListener = webSocketListener;\n  }\n\n  @Override\n  public void onOpen(ServerHandshake serverHandshake) {\n    this.webSocketListener.onOpen(serverHandshake);\n  }\n\n  @Override\n  public void onMessage(String s) {\n    this.webSocketListener.onMessage(s);\n  }\n\n  @Override\n  public void onClose(int code, String reason, boolean remote) {\n    this.webSocketListener.onClose(code, reason, remote);\n  }\n\n  @Override\n  public void onError(Exception e) {\n    this.webSocketListener.onError(e);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Map;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.KeyManagerFactory;\nimport javax.net.ssl.TrustManagerFactory;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.KeyManagementException;\n\npublic class WebSocketTransport extends WebSocketClient {\n    public static final int CONNECT_TIMEOUT = 5000;\n    private final WebSocketListener webSocketListener;\n\n    public WebSocketTransport(String serverUri, HttpConfiguration.SSLProperties sslProperties, Map<String, String> headers, WebSocketListener webSocketListener) throws URISyntaxException {\n        super(new URI(serverUri), headers, createSSLContext(sslProperties));\n        this.webSocketListener = webSocketListener;\n    }\n\n    private static SSLContext createSSLContext(HttpConfiguration.SSLProperties sslProperties) {\n        try {\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n            KeyStore keyStore = sslProperties.getKeyStore();\n            KeyStore trustStore = sslProperties.getTrustStore();\n            char[] keyStorePassword = sslProperties.getKeyStorePassword();\n            kmf.init(keyStore, keyStorePassword);\n            tmf.init(trustStore);\n            sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n            return sslContext;\n        } catch (NoSuchAlgorithmException | UnrecoverableKeyException | KeyManagementException | CertificateException | NullPointerException e) {\n            throw new RuntimeException(\"Failed to create SSL context\", e);\n        }\n    }\n\n    @Override\n    public void onOpen(ServerHandshake serverHandshake) {\n        webSocketListener.onOpen(serverHandshake);\n    }\n\n    @Override\n    public void onMessage(String s) {\n        webSocketListener.onMessage(s);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        webSocketListener.onClose(code, reason, remote);\n    }\n\n    @Override\n    public void onError(Exception e) {\n        webSocketListener.onError(e);\n    }\n}\n```"
  },
  {
    "Task_id": 465,
    "Instruction": "Task Description: Create a WebSocket client class in Java using the org.java_websocket library to establish a connection to a WebSocket server, handle incoming messages, and manage connection events.\n\nClass Description: The TestWebSocket class extends WebSocketClient to create a WebSocket client that connects to a specified localhost port. It overrides key WebSocket event-handling methods to manage connection lifecycle events, message reception, and errors.\n\nAttributes:\n- None (The class inherits all necessary attributes from WebSocketClient)\n\nMethods:\n- Constructor: TestWebSocket(int port) throws URISyntaxException - Initializes the WebSocket client with the specified port, constructing the WebSocket URI as \"ws://localhost:[port]\".\n- onOpen: onOpen(ServerHandshake handshakedata) -> void - Called when the WebSocket connection is successfully established.\n- onMessage: onMessage(String message) -> void - Called when a text message is received from the server.\n- onMessage: onMessage(ByteBuffer message) -> void - Called when a binary message is received from the server.\n- onClose: onClose(int code, String reason, boolean remote) -> void - Called when the WebSocket connection is closed.\n- onError: onError(Exception ex) -> void - Called when an error occurs on the WebSocket connection.",
    "Canonical_solution": "import java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.ByteBuffer;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class TestWebSocket extends WebSocketClient {\n\n    public TestWebSocket(int port) throws URISyntaxException {\n        super(new URI(\"ws://localhost:\" + port));\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n    }\n\n    @Override\n    public void onMessage(String message) {\n    }\n\n    @Override\n    public void onMessage(ByteBuffer message) {\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onError(Exception ex) {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.ByteBuffer;\n\npublic class TestWebSocket extends WebSocketClient {\n    public TestWebSocket(int port) throws URISyntaxException {\n        super(new URI(\"ws://localhost:\" + port));\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        System.out.println(\"Connection opened\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(\"Received text message: \" + message);\n    }\n\n    @Override\n    public void onMessage(ByteBuffer message) {\n        System.out.println(\"Received binary message: \" + new String(message.array()));\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed: \" + reason);\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        System.err.println(\"Error occurred: \" + ex.getMessage());\n    }\n}\n```"
  },
  {
    "Task_id": 467,
    "Instruction": "Task Description: Implement a secure WebSocket client class in Java that supports SSL/TLS with configurable endpoint identification algorithm for secure communication.\n\nClass Description: SSLWebSocketClient is a WebSocket client implementation that extends the WebSocketClient class from org.java_websocket library. It provides SSL/TLS support with customizable endpoint identification algorithm for secure WebSocket connections. The class includes event handlers for WebSocket lifecycle events and SSL-specific error handling.\n\nAttributes:\n- endpointIdentificationAlgorithm: String - The algorithm used for endpoint identification during SSL handshake\n- onSSLError: boolean - Flag indicating whether an SSL error occurred during connection\n- onOpen: boolean - Flag indicating whether the WebSocket connection was successfully opened\n\nMethods:\n- SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm) -> None - Constructor that initializes the WebSocket client with server address, port, and endpoint identification algorithm\n- onOpen(ServerHandshake handshakedata) -> void - Callback triggered when WebSocket connection is successfully opened\n- onMessage(String message) -> void - Callback triggered when a message is received from the server\n- onClose(int code, String reason, boolean remote) -> void - Callback triggered when WebSocket connection is closed\n- onError(Exception ex) -> void - Callback triggered when an error occurs, with special handling for SSL errors\n- onSetSSLParameters(SSLParameters sslParameters) -> void - Override method to configure SSL parameters including endpoint identification algorithm",
    "Canonical_solution": "import java.net.URI;\nimport javax.net.ssl.SSLParameters;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class SSLWebSocketClient extends WebSocketClient {\n\n    private final String endpointIdentificationAlgorithm;\n    public boolean onSSLError = false;\n    public boolean onOpen = false;\n\n    public SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm)\n        throws java.net.URISyntaxException {\n        super(new URI(\"wss://\" + address + ':' + port));\n        this.endpointIdentificationAlgorithm = endpointIdentificationAlgorithm;\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        this.onOpen = true;\n    }\n\n    @Override\n    public void onMessage(String message) {\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        if (ex instanceof javax.net.ssl.SSLHandshakeException) {\n            this.onSSLError = true;\n        }\n    }\n\n    @Override\n    protected void onSetSSLParameters(SSLParameters sslParameters) {\n        super.onSetSSLParameters(sslParameters);\n        if (endpointIdentificationAlgorithm != null) {\n            sslParameters.setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "import org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport javax.net.ssl.SSLParameters;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.security.cert.CertificateException;\nimport javax.net.ssl.SSLException;\n\npublic class SSLWebSocketClient extends WebSocketClient {\n    private String endpointIdentificationAlgorithm;\n    private boolean onSSLError = false;\n    private boolean onOpen = false;\n\n    public SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm) throws URISyntaxException {\n        super(new URI(\"wss://\" + address + \":\" + port));\n        this.endpointIdentificationAlgorithm = endpointIdentificationAlgorithm;\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        super.onOpen(handshakedata);\n        this.onOpen = true;\n    }\n\n    @Override\n    public void onMessage(String message) {\n        // Handle message\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        super.onClose(code, reason, remote);\n        this.onOpen = false;\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        if (ex instanceof SSLException) {\n            this.onSSLError = true;\n        }\n        // Handle other errors\n    }\n\n    @Override\n    protected void onSetSSLParameters(SSLParameters sslParameters) {\n        sslParameters.setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm);\n    }\n}"
  },
  {
    "Task_id": 468,
    "Instruction": "Task Description: Implement a WebSocket server class in Java using the org.java_websocket library to handle client connections, messages, disconnections, and errors.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from org.java_websocket. It provides lifecycle methods for managing WebSocket connections and includes a CountDownLatch for server startup synchronization.\n\nAttributes:\n- serverLatch: CountDownLatch - Used to signal when the server has started (nullable)\n\nMethods:\n- Constructor: MyWebSocketServer(InetSocketAddress address, int decodercount, List<Draft> drafts, Collection<WebSocket> connectionscontainer) -> void - Creates a server instance with specified address, decoder count, protocol drafts, and connection container\n- Constructor: MyWebSocketServer(int port, CountDownLatch serverLatch) -> void - Creates a server instance with specified port and startup latch\n- Constructor: MyWebSocketServer(int port) -> void - Creates a server instance with specified port (no latch)\n- onOpen(WebSocket conn, ClientHandshake handshake) -> void - Called when a new client connects\n- onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Called when a client disconnects\n- onMessage(WebSocket conn, String message) -> void - Called when a message is received from a client\n- onError(WebSocket conn, Exception ex) -> void - Called when an error occurs\n- onStart() -> void - Called when the server starts successfully",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.util.Collection;\nimport java.util.List;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private CountDownLatch serverLatch = null;\n\n    public MyWebSocketServer(InetSocketAddress address, int decodercount, List<Draft> drafts,\n        Collection<WebSocket> connectionscontainer) {\n      super(address, decodercount, drafts, connectionscontainer);\n    }\n\n    public MyWebSocketServer(int port, CountDownLatch serverLatch) {\n      super(new InetSocketAddress(port));\n      this.serverLatch = serverLatch;\n    }\n\n    public MyWebSocketServer(int port) {\n      this(port, null);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n      ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n      if (serverLatch != null) {\n        serverLatch.countDown();\n      }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.drafts.Draft;\nimport java.net.InetSocketAddress;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n    private final CountDownLatch serverLatch;\n\n    public MyWebSocketServer(InetSocketAddress address, int decodercount, List<Draft> drafts, Collection<WebSocket> connectionscontainer) {\n        super(address, decodercount, drafts, connectionscontainer);\n        this.serverLatch = null;\n    }\n\n    public MyWebSocketServer(int port, CountDownLatch serverLatch) {\n        super(new InetSocketAddress(port));\n        this.serverLatch = serverLatch;\n    }\n\n    public MyWebSocketServer(int port) {\n        this(port, null);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new client connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle client disconnection\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Handle received message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle error\n    }\n\n    @Override\n    public void onStart() {\n        if (serverLatch != null) {\n            serverLatch.countDown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 469,
    "Instruction": "Task Description: Implement a WebSocket server class in Java using the org.java_websocket library to handle client connections, messages, disconnections, and errors, with synchronization support using CountDownLatch.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends WebSocketServer from org.java_websocket. It manages client connections and messages while providing synchronization points for server startup and message reception using CountDownLatch.\n\nAttributes:\ncountServerLatch: [CountDownLatch] - Synchronization aid to signal when the server has started  \ncountClientMessageLatch: [CountDownLatch] - Synchronization aid to signal when a client message is received  \n\nMethods:\nConstructor: [MyWebSocketServer](int port, CountDownLatch serverDownLatch, CountDownLatch countClientMessageLatch) -> [void] - Initializes the WebSocket server with specified port and synchronization latches  \nonOpen: [onOpen](WebSocket conn, ClientHandshake handshake) -> [void] - Callback for new client connections  \nonClose: [onClose](WebSocket conn, int code, String reason, boolean remote) -> [void] - Callback for client disconnections  \nonMessage: [onMessage](WebSocket conn, String message) -> [void] - Callback for processing received messages (decrements message latch)  \nonError: [onError](WebSocket conn, Exception ex) -> [void] - Callback for error handling (prints stack trace)  \nonStart: [onStart]() -> [void] - Callback when server starts (decrements server latch)",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private final CountDownLatch countServerLatch;\n    private final CountDownLatch countClientMessageLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch,\n        CountDownLatch countClientMessageLatch) {\n        super(new InetSocketAddress(port));\n        this.countServerLatch = serverDownLatch;\n        this.countClientMessageLatch = countClientMessageLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        countClientMessageLatch.countDown();\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        countServerLatch.countDown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.server.WebSocketServer;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n    private final CountDownLatch countServerLatch;\n    private final CountDownLatch countClientMessageLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch, CountDownLatch countClientMessageLatch) {\n        super(port);\n        this.countServerLatch = serverDownLatch;\n        this.countClientMessageLatch = countClientMessageLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        countClientMessageLatch.countDown();\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        countServerLatch.countDown();\n    }\n}"
  },
  {
    "Task_id": 470,
    "Instruction": "Task Description: Implement a WebSocket server class for handling real-time communication between clients, including connection management, message broadcasting, and error handling.\n\nClass Description: ChatServer is a WebSocket server implementation that extends WebSocketServer from org.java_websocket library. It manages client connections, processes incoming messages (both text and binary), broadcasts messages to all connected clients, and handles connection events and errors.\n\nAttributes:\n- (Inherited from WebSocketServer) port: int - The port number on which the server listens\n- (Inherited from WebSocketServer) address: InetSocketAddress - The network address of the server\n- (Inherited from WebSocketServer) draft: Draft_6455 - The WebSocket protocol draft being used\n\nMethods:\n- ChatServer(int port) -> None - Constructor that initializes the server with specified port\n- ChatServer(InetSocketAddress address) -> None - Constructor that initializes the server with specified socket address\n- ChatServer(int port, Draft_6455 draft) -> None - Constructor that initializes the server with specified port and protocol draft\n- onOpen(WebSocket conn, ClientHandshake handshake) -> void - Handles new client connections, sends welcome message, and notifies other clients\n- onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Handles client disconnections and notifies other clients\n- onMessage(WebSocket conn, String message) -> void - Processes incoming text messages and broadcasts to all clients\n- onMessage(WebSocket conn, ByteBuffer message) -> void - Processes incoming binary messages and broadcasts to all clients\n- onError(WebSocket conn, Exception ex) -> void - Handles errors that occur during WebSocket operations\n- onStart() -> void - Initializes server settings when the server starts",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.util.Collections;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class ChatServer extends WebSocketServer {\n\n    public ChatServer(int port) {\n        super(new InetSocketAddress(port));\n    }\n\n    public ChatServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    public ChatServer(int port, Draft_6455 draft) {\n        super(new InetSocketAddress(port), Collections.<Draft>singletonList(draft));\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        conn.send(\"Welcome to the server!\");\n        broadcast(\"new connection: \" + handshake.getResourceDescriptor());\n        System.out.println(conn.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room!\");\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        broadcast(conn + \" has left the room!\");\n        System.out.println(conn + \" has left the room!\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        broadcast(message);\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        broadcast(message.array());\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n        setConnectionLostTimeout(100);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport org.java_websocket.drafts.Draft_6455;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.util.Set;\n\npublic class ChatServer extends WebSocketServer {\n    public ChatServer(int port) {\n        super(port);\n    }\n\n    public ChatServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    public ChatServer(int port, Draft_6455 draft) {\n        super(port, draft);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        conn.send(\"Welcome to the chat!\");\n        String userConnectedMsg = \"User connected\";\n        for (WebSocket client : getConnections()) {\n            if (client != conn) {\n                client.send(userConnectedMsg);\n            }\n        }\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        String userDisconnectedMsg = \"User disconnected\";\n        for (WebSocket client : getConnections()) {\n            if (client != conn) {\n                client.send(userDisconnectedMsg);\n            }\n        }\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        for (WebSocket client : getConnections()) {\n            client.send(message);\n        }\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        for (WebSocket client : getConnections()) {\n            client.send(message);\n        }\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n    }\n}"
  },
  {
    "Task_id": 472,
    "Instruction": "Task Description: Implement a WebSocket server using the org.java_websocket library to handle client connections, messages, disconnections, and errors.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from the org.java_websocket library. It provides lifecycle methods for managing client connections and communication.\n\nAttributes:\n- countServerLatch: CountDownLatch - A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.\n\nMethods:\n- MyWebSocketServer(int port, CountDownLatch serverDownLatch) -> None - Constructor that initializes the WebSocket server with the specified port and CountDownLatch.\n- onOpen(WebSocket conn, ClientHandshake handshake) -> None - Called when a new client connection is established.\n- onClose(WebSocket conn, int code, String reason, boolean remote) -> None - Called when a client connection is closed.\n- onMessage(WebSocket conn, String message) -> None - Called when a message is received from a client.\n- onError(WebSocket conn, Exception ex) -> None - Called when an error occurs.\n- onStart() -> None - Called when the server starts successfully.",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private final CountDownLatch countServerLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch) {\n        super(new InetSocketAddress(port));\n        this.countServerLatch = serverDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new client connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle client disconnection\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Process received message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle errors\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        // Server startup complete\n        countServerLatch.countDown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n    private final CountDownLatch countServerLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch) {\n        super(port);\n        this.countServerLatch = serverDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new client connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle client disconnection\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Handle received message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle error\n    }\n\n    @Override\n    public void onStart() {\n        countServerLatch.countDown();\n    }\n}\n```"
  },
  {
    "Task_id": 474,
    "Instruction": "Task Description: Implement a WebSocket server class that handles client connections, messages, and disconnections using the org.java_websocket library. The server should assign unique IDs to clients and log connection events.\n\nClass Description: ChatServerAttachmentExample is a WebSocket server implementation that manages client connections, tracks clients with unique IDs, and handles text/binary messages. It extends WebSocketServer from the org.java_websocket library.\n\nAttributes:\n- index: Integer - Tracks the next available client ID to be assigned\n\nMethods:\n- Constructor(port: int) -> None - Creates server instance bound to specified port\n- Constructor(address: InetSocketAddress) -> None - Creates server instance bound to specified address\n- onOpen(conn: WebSocket, handshake: ClientHandshake) -> void - Handles new client connections, assigns ID\n- onClose(conn: WebSocket, code: int, reason: String, remote: boolean) -> void - Handles client disconnections\n- onMessage(conn: WebSocket, message: String) -> void - Processes text messages from clients\n- onMessage(conn: WebSocket, message: ByteBuffer) -> void - Processes binary messages from clients\n- onError(conn: WebSocket, ex: Exception) -> void - Handles connection errors\n- onStart() -> void - Called when server starts successfully",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class ChatServerAttachmentExample extends WebSocketServer {\n\n    Integer index = 0;\n\n    public ChatServerAttachmentExample(int port) throws UnknownHostException {\n        super(new InetSocketAddress(port));\n    }\n\n    public ChatServerAttachmentExample(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        conn.setAttachment(index);\n        index++;\n        System.out.println(\n            conn.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room! ID: \"\n                + conn.<Integer>getAttachment());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(conn + \" has left the room! ID: \" + conn.<Integer>getAttachment());\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class ChatServerAttachmentExample extends WebSocketServer {\n    private int index = 0;\n    private final Map<WebSocket, Integer> clientIds = new ConcurrentHashMap<>();\n\n    public ChatServerAttachmentExample(int port) {\n        super(port);\n    }\n\n    public ChatServerAttachmentExample(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        int clientId = index++;\n        clientIds.put(conn, clientId);\n        System.out.println(\"Client connected: ID \" + clientId);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        Integer clientId = clientIds.remove(conn);\n        if (clientId != null) {\n            System.out.println(\"Client disconnected: ID \" + clientId);\n        }\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        Integer clientId = clientIds.get(conn);\n        if (clientId != null) {\n            System.out.println(\"Client \" + clientId + \" sent text: \" + message);\n        }\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        Integer clientId = clientIds.get(conn);\n        if (clientId != null) {\n            System.out.println(\"Client \" + clientId + \" sent binary message of size \" + message.remaining());\n        }\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        System.err.println(\"Error occurred: \" + ex.getMessage());\n        if (conn != null) {\n            Integer clientId = clientIds.remove(conn);\n            if (clientId != null) {\n                System.out.println(\"Client \" + clientId + \" disconnected due to error.\");\n            }\n        }\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Chat server started.\");\n    }\n}"
  },
  {
    "Task_id": 475,
    "Instruction": "Task Description: Implement a WebSocket server class in Java using the org.java_websocket library to handle client connections, messages, disconnections, and errors.\n\nClass Description: The WSocketServer class extends WebSocketServer to create a custom WebSocket server that manages client connections and communication. It handles lifecycle events including connection opening, message reception, connection closing, and errors. The server can broadcast messages to all connected clients.\n\nAttributes:\n- Inherited attributes from WebSocketServer (base class handles socket connections and client management)\n\nMethods:\n- Constructor: WSocketServer(int port) throws UnknownHostException - Creates a server instance bound to the specified port.\n- Constructor: WSocketServer(InetSocketAddress address) - Creates a server instance bound to the specified socket address.\n- onOpen: onOpen(WebSocket conn, ClientHandshake handshake) -> void - Handles new client connections and sends a handshake confirmation.\n- onClose: onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Handles client disconnections and notifies other clients.\n- onMessage: onMessage(WebSocket conn, String message) -> void - Processes incoming messages from clients and echoes them back.\n- onError: onError(WebSocket conn, Exception ex) -> void - Handles errors occurring during WebSocket operations.\n- sendToClient: sendToClient(String text) -> void - Broadcasts a message to all connected clients (thread-safe operation).",
    "Canonical_solution": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.util.Collection;\n\npublic class WSocketServer extends WebSocketServer {\n\n    public WSocketServer(int port) throws UnknownHostException {\n        super(new InetSocketAddress(port));\n    }\n\n    public WSocketServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket webSocket, ClientHandshake clientHandshake) {\n        this.sendToClient(\"[Handshake Ok]\");\n    }\n\n    @Override\n    public void onClose(WebSocket webSocket, int i, String s, boolean b) {\n        this.sendToClient(webSocket + \" close\");\n    }\n\n    @Override\n    public void onMessage(WebSocket webSocket, String message) {\n        this.sendToClient(message);\n    }\n\n    @Override\n    public void onError(WebSocket webSocket, Exception e) {\n        e.printStackTrace();\n        if (webSocket != null) {\n            // Error handling for specific WebSocket\n        }\n    }\n\n    public void sendToClient(String text) {\n        Collection<WebSocket> con = connections();\n        synchronized (con) {\n            for (WebSocket c : con) {\n                c.send(text);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class WSocketServer extends WebSocketServer {\n\n    public WSocketServer(int port) throws UnknownHostException {\n        super(new InetSocketAddress(port));\n    }\n\n    public WSocketServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        conn.send(\"Handshake confirmed\");\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        sendToClient(\"Client disconnected\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    public void sendToClient(String text) {\n        Set<WebSocket> connections = new HashSet<>(this.getConnections());\n        for (WebSocket conn : connections) {\n            conn.send(text);\n        }\n    }\n}"
  },
  {
    "Task_id": 478,
    "Instruction": "Task Description: Create a WebSocket server class that handles client connections, messages, and disconnections using the org.java_websocket library. The server should also track SSL support and session information for testing purposes.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from the org.java_websocket library. It manages client connections, processes incoming messages, handles disconnections, and tracks SSL-related information for testing. The server notifies when it starts successfully via a CountDownLatch.\n\nAttributes:\n- testResult: [TestResult] - Stores test-related information including SSL support status and SSL session\n- countServerDownLatch: [CountDownLatch] - Used to signal when the server has successfully started\n\nMethods:\n- MyWebSocketServer([int port, TestResult testResult, CountDownLatch countServerDownLatch]) -> [void] - Constructor that initializes the server with specified port, test result object, and countdown latch\n- onOpen([WebSocket conn, ClientHandshake handshake]) -> [void] - Called when a new client connects; checks for SSL support and stores SSL session\n- onClose([WebSocket conn, int code, String reason, boolean remote]) -> [void] - Called when a client disconnects\n- onMessage([WebSocket conn, String message]) -> [void] - Called when a message is received from a client\n- onError([WebSocket conn, Exception ex]) -> [void] - Called when an error occurs; prints stack trace\n- onStart() -> [void] - Called when the server starts successfully; decrements the countdown latch",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport javax.net.ssl.SSLSession;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private final TestResult testResult;\n    private final CountDownLatch countServerDownLatch;\n\n    public MyWebSocketServer(int port, TestResult testResult, CountDownLatch countServerDownLatch) {\n        super(new InetSocketAddress(port));\n        this.testResult = testResult;\n        this.countServerDownLatch = countServerDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        testResult.hasSSLSupport = conn.hasSSLSupport();\n        try {\n            testResult.sslSession = conn.getSSLSession();\n        } catch (IllegalArgumentException e) {\n            // Ignore\n        }\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        countServerDownLatch.countDown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport javax.net.ssl.SSLSession;\nimport java.net.URI;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n    private final TestResult testResult;\n    private final CountDownLatch countServerDownLatch;\n\n    public MyWebSocketServer(int port, TestResult testResult, CountDownLatch countServerDownLatch) {\n        super(URI.create(\"ws://localhost:\" + port));\n        this.testResult = testResult;\n        this.countServerDownLatch = countServerDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        boolean isSecure = conn.isSecure();\n        testResult.setSslSupported(isSecure);\n        if (isSecure) {\n            SSLSession sslSession = conn.getSSLSession();\n            testResult.setSslSession(sslSession);\n        }\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        countServerDownLatch.countDown();\n    }\n}"
  },
  {
    "Task_id": 479,
    "Instruction": "Task Description: Create a WebSocket server implementation using the org.java_websocket library that handles client connections, messages, and disconnections, with configurable connection limits and support for different WebSocket drafts.\n\nClass Description: AutobahnServerTest is a WebSocket server implementation that extends WebSocketServer from the org.java_websocket library. It manages client connections, processes incoming messages (both text and binary), tracks connection statistics, and supports graceful shutdown when reaching a configured connection limit.\n\nAttributes:\n- openCounter: [static int] - Tracks total number of opened connections\n- closeCounter: [static int] - Tracks total number of closed connections\n- limit: [int] - Maximum number of connections before server shutdown\n\nMethods:\n- Constructor: [AutobahnServerTest]([int port, int limit, Draft d]) -> [void] - Creates server instance with specified port, connection limit, and WebSocket draft\n- Constructor: [AutobahnServerTest]([InetSocketAddress address, Draft d]) -> [void] - Creates server instance with specified address and WebSocket draft\n- onOpen: [void]([WebSocket conn, ClientHandshake handshake]) -> [void] - Handles new client connections, increments openCounter\n- onClose: [void]([WebSocket conn, int code, String reason, boolean remote]) -> [void] - Handles client disconnections, increments closeCounter, shuts down server if limit reached\n- onError: [void]([WebSocket conn, Exception ex]) -> [void] - Handles connection errors, prints stack trace\n- onStart: [void]() -> [void] - Called when server starts, prints startup message\n- onMessage: [void]([WebSocket conn, String message]) -> [void] - Handles text messages, echoes back to client\n- onMessage: [void]([WebSocket conn, ByteBuffer blob]) -> [void] - Handles binary messages, echoes back to client",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.Collections;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.extensions.permessage_deflate.PerMessageDeflateExtension;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class AutobahnServerTest extends WebSocketServer {\n\n    private static int openCounter = 0;\n    private static int closeCounter = 0;\n    private int limit = Integer.MAX_VALUE;\n\n    public AutobahnServerTest(int port, int limit, Draft d) throws UnknownHostException {\n        super(new InetSocketAddress(port), Collections.singletonList(d));\n        this.limit = limit;\n    }\n\n    public AutobahnServerTest(InetSocketAddress address, Draft d) {\n        super(address, Collections.singletonList(d));\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        openCounter++;\n        System.out.println(\"///////////Opened connection number\" + openCounter);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        closeCounter++;\n        System.out.println(\"closed\");\n        if (closeCounter >= limit) {\n            System.exit(0);\n        }\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        System.out.println(\"Error:\");\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.WebSocketServer;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.drafts.Draft;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\n\npublic class AutobahnServerTest extends WebSocketServer {\n    private static int openCounter = 0;\n    private static int closeCounter = 0;\n    private final int limit;\n\n    public AutobahnServerTest(int port, int limit, Draft d) {\n        this(new InetSocketAddress(port), d);\n        this.limit = limit;\n    }\n\n    public AutobahnServerTest(InetSocketAddress address, Draft d) {\n        super(address, d);\n        this.limit = Integer.MAX_VALUE;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        openCounter++;\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        closeCounter++;\n        if (closeCounter >= limit) {\n            this.stop();\n        }\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started on port \" + getPort());\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob);\n    }\n}"
  },
  {
    "Task_id": 480,
    "Instruction": "Task Description: Create a WebSocket server implementation using the org.java_websocket library to handle client connections, messages, and disconnections.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from the org.java_websocket library. It provides lifecycle methods for managing WebSocket connections and handling communication events.\n\nAttributes:\n- address: InetSocketAddress - The network address and port on which the server listens for connections\n\nMethods:\n- Constructor: MyWebSocketServer(InetSocketAddress address) -> void - Initializes the WebSocket server with the specified address\n- onOpen: onOpen(WebSocket conn, ClientHandshake handshake) -> void - Called when a new WebSocket connection is established\n- onClose: onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Called when a WebSocket connection is closed\n- onMessage: onMessage(WebSocket conn, String message) -> void - Called when a message is received from a WebSocket client\n- onError: onError(WebSocket conn, Exception ex) -> void - Called when an error occurs with a WebSocket connection\n- onStart: onStart() -> void - Called when the server starts successfully",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    public MyWebSocketServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new WebSocket connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle WebSocket connection closing\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Handle incoming WebSocket message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle WebSocket errors\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        // Handle server startup\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\n\npublic class MyWebSocketServer extends WebSocketServer {\n    private final InetSocketAddress address;\n\n    public MyWebSocketServer(InetSocketAddress address) {\n        super(address);\n        this.address = address;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n    }\n\n    @Override\n    public void onStart() {\n    }\n}"
  },
  {
    "Task_id": 481,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles real-time client communication, including connection management, message processing, and error handling.\n\nClass Description: WebSocketServer is a Java EE WebSocket endpoint that manages client connections through WebSocket protocol. It handles connection events (open/close/error) and processes incoming messages, supporting different message operations like sending messages, reading status, and retrieving history.\n\nAttributes:\n- sessionPools: [ConcurrentHashMap<String, Session>] - Thread-safe map storing active client sessions with their IDs as keys\n\nMethods:\n- onOpen: [onOpen(String accessToken, Session session)] -> [void] - Handles new WebSocket connections, authenticates users, and manages session conflicts\n- onClose: [onClose(String accessToken)] -> [void] - Cleans up closed connections from session pool\n- onMessage: [onMessage(String accessToken, String msg)] -> [void] - Processes incoming JSON messages and delegates to appropriate operations\n- operation: [operation(String accessToken, MessageOperation messageOperation)] -> [void] - Executes different message operations based on operation type\n- sendMessage: [sendMessage(String sessionId, MessageVO message)] -> [void] - Sends message to specific client session by ID\n- sendMessage: [sendMessage(Session session, MessageVO message)] -> [void] - Sends message to given session object\n- onError: [onError(Session session, Throwable throwable)] -> [void] - Handles WebSocket communication errors",
    "Canonical_solution": "import cn.hutool.json.JSONUtil;\nimport cn.lili.common.security.AuthUser;\nimport cn.lili.common.security.context.UserContext;\nimport cn.lili.common.security.enums.UserEnums;\nimport cn.lili.modules.im.config.CustomSpringConfigurator;\nimport cn.lili.modules.im.entity.vo.MessageVO;\nimport cn.lili.modules.im.entity.enums.MessageResultType;\nimport cn.lili.modules.im.entity.vo.MessageOperation;\nimport com.alibaba.fastjson.JSON;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Component\n@ServerEndpoint(value = \"/lili/webSocket/{accessToken}\", configurator = CustomSpringConfigurator.class)\n@Scope(\"prototype\")\npublic class WebSocketServer {\n\n    private static ConcurrentHashMap<String, Session> sessionPools = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(@PathParam(\"accessToken\") String accessToken, Session session) {\n        AuthUser authUser = UserContext.getAuthUser(cache, accessToken);\n        String sessionId = UserEnums.STORE.equals(authUser.getRole()) ? authUser.getStoreId() : authUser.getId();\n        if (sessionPools.containsKey(sessionId)) {\n            Session oldSession = sessionPools.get(sessionId);\n            sendMessage(oldSession,\n                MessageVO.builder().messageResultType(MessageResultType.OFFLINE).result(\"\u7528\u6237\u5f02\u5730\u767b\u9646\").build());\n            try {\n                oldSession.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        sessionPools.put(sessionId, session);\n    }\n\n    @OnClose\n    public void onClose(@PathParam(\"accessToken\") String accessToken) {\n        AuthUser authUser = UserContext.getAuthUser(accessToken);\n        sessionPools.remove(authUser);\n    }\n\n    @OnMessage\n    public void onMessage(@PathParam(\"accessToken\") String accessToken, String msg) {\n        MessageOperation messageOperation = JSON.parseObject(msg, MessageOperation.class);\n        operation(accessToken, messageOperation);\n    }\n\n    private void operation(String accessToken, MessageOperation messageOperation) {\n        AuthUser authUser = UserContext.getAuthUser(accessToken);\n        switch (messageOperation.getOperationType()) {\n            case MESSAGE:\n                sendMessage(messageOperation.getTo(), new MessageVO(MessageResultType.MESSAGE, imMessage));\n                break;\n            case READ:\n                break;\n            case UNREAD:\n                sendMessage(authUser.getId(),\n                    new MessageVO(MessageResultType.UN_READ, imMessageService.unReadMessages(accessToken)));\n                break;\n            case HISTORY:\n                sendMessage(authUser.getId(), new MessageVO(MessageResultType.HISTORY,\n                    imMessageService.historyMessage(accessToken, messageOperation.getTo())));\n                break;\n            default:\n                break;\n        }\n    }\n\n    private void sendMessage(String sessionId, MessageVO message) {\n        Session session = sessionPools.get(sessionId);\n        sendMessage(session, message);\n    }\n\n    private void sendMessage(Session session, MessageVO message) {\n        if (session != null) {\n            try {\n                session.getBasicRemote().sendText(JSON.toJSONString(message, true));\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@ServerEndpoint(\"/websocket\")\npublic class WebSocketServer {\n    private static final ConcurrentHashMap<String, Session> sessionPools = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session) {\n        String accessToken = extractAccessToken(session.getRequestURI());\n        onOpen(accessToken, session);\n    }\n\n    public void onOpen(String accessToken, Session session) {\n        String existingSessionId = null;\n        for (Map.Entry<String, Session> entry : sessionPools.entrySet()) {\n            Session existingSession = entry.getValue();\n            String existingToken = (String) existingSession.getUserProperties().get(\"accessToken\");\n            if (existingToken != null && existingToken.equals(accessToken)) {\n                existingSessionId = entry.getKey();\n                break;\n            }\n        }\n        if (existingSessionId != null) {\n            try {\n                sessionPools.get(existingSessionId).close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            sessionPools.remove(existingSessionId);\n        }\n        sessionPools.put(session.getId(), session);\n        session.getUserProperties().put(\"accessToken\", accessToken);\n    }\n\n    @OnClose\n    public void onClose(Session session) {\n        String accessToken = (String) session.getUserProperties().get(\"accessToken\");\n        sessionPools.remove(session.getId());\n        onClose(accessToken);\n    }\n\n    public void onClose(String accessToken) {\n        // Additional cleanup if needed\n    }\n\n    @OnMessage\n    public void onMessage(String message, Session session) {\n        String accessToken = (String) session.getUserProperties().get(\"accessToken\");\n        if (accessToken != null) {\n            onMessage(accessToken, message);\n        }\n    }\n\n    public void onMessage(String accessToken, String msg) {\n        MessageOperation operation = parseMessageOperation(msg);\n        operation(accessToken, operation);\n    }\n\n    public void operation(String accessToken, MessageOperation messageOperation) {\n        switch (messageOperation.getType()) {\n            case \"SEND\":\n                sendMessage(messageOperation.getSessionId(), messageOperation.getMessage());\n                break;\n            case \"READ_STATUS\":\n                // Handle read status\n                break;\n            case \"HISTORY\":\n                // Retrieve history\n                break;\n        }\n    }\n\n    public void sendMessage(String sessionId, MessageVO message) {\n        Session session = sessionPools.get(sessionId);\n        if (session != null) {\n            sendMessage(session, message);\n        }\n    }\n\n    public void sendMessage(Session session, MessageVO message) {\n        try {\n            session.getBasicRemote().sendText(message.toString());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        String accessToken = (String) session.getUserProperties().get(\"accessToken\");\n        onError(accessToken, throwable);\n    }\n\n    public void onError(String accessToken, Throwable throwable) {\n        throwable.printStackTrace();\n    }\n\n    private String extractAccessToken(String uri) {\n        if (uri.contains(\"?\")) {\n            String[] parts = uri.split(\"\\\\?\");\n            String query = parts[1];\n            String[] params = query.split(\"&\");\n            for (String param : params) {\n                String[] keyValue = param.split(\"=\");\n                if (keyValue[0].equals(\"token\")) {\n                    return keyValue[1];\n                }\n            }\n        }\n        return null;\n    }\n\n    private MessageOperation parseMessageOperation(String msg) {\n        // Placeholder for actual parsing logic\n        return new MessageOperation();\n    }\n}\n\nclass MessageOperation {\n    private String type;\n    private String sessionId;\n    private MessageVO message;\n\n    public String getType() {\n        return type;\n    }\n\n    public String getSessionId() {\n        return sessionId;\n    }\n\n    public MessageVO getMessage() {\n        return message;\n    }\n}\n\nclass MessageVO {\n    public String toString() {\n        return \"{}\"; // Placeholder\n    }\n}\n```"
  },
  {
    "Task_id": 482,
    "Instruction": "Task Description: Implement a WebSocket server endpoint class in Java that handles client connections, messages, disconnections, and errors using Java EE WebSocket API.\n\nClass Description: The WebsocketServerEndpoint class is a WebSocket server endpoint that manages client connections and message handling. It uses annotations to define WebSocket lifecycle events and maintains a map of message handlers for different message types.\n\nAttributes:\n- logger: Logger - Used for logging server events and errors\n- HANDLERS: Map<String, MessageHandler> - Static map storing message handlers keyed by message type\n\nMethods:\n- onOpen(Session session, EndpointConfig config) -> void - Handles new client connections, authenticates using access token from request parameters\n- onMessage(Session session, String message) -> void - Processes incoming messages from clients, delegates to appropriate message handler\n- onClose(Session session, CloseReason closeReason) -> void - Handles client disconnections, cleans up session\n- onError(Session session, Throwable throwable) -> void - Handles WebSocket communication errors\n- getMessageClass(MessageHandler handler) -> Class<? extends Message> - Helper method to determine message class type from handler's generic type information",
    "Canonical_solution": "import cn.iocoder.springboot.lab25.springwebsocket.handler.MessageHandler;\nimport cn.iocoder.springboot.lab25.springwebsocket.message.AuthRequest;\nimport cn.iocoder.springboot.lab25.springwebsocket.message.Message;\nimport cn.iocoder.springboot.lab25.springwebsocket.util.WebSocketUtil;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.aop.framework.AopProxyUtils;\n\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n@ServerEndpoint(\"/\")\npublic class WebsocketServerEndpoint {\n\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    private static final Map<String, MessageHandler> HANDLERS = new HashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        logger.info(\"[onOpen][session({}) connected]\", session);\n        List<String> accessTokenValues = session.getRequestParameterMap().get(\"accessToken\");\n        String accessToken = !CollectionUtils.isEmpty(accessTokenValues) ? accessTokenValues.get(0) : null;\n        AuthRequest authRequest = new AuthRequest().setAccessToken(accessToken);\n        MessageHandler<AuthRequest> messageHandler = HANDLERS.get(AuthRequest.TYPE);\n        if (messageHandler == null) {\n            logger.error(\"[onOpen][Auth message type, no message handler found]\");\n            return;\n        }\n        messageHandler.execute(session, authRequest);\n    }\n\n    @OnMessage\n    public void onMessage(Session session, String message) {\n        logger.info(\"[onMessage][session({}) received message({})]\", session, message);\n        try {\n            JSONObject jsonMessage = JSON.parseObject(message);\n            String messageType = jsonMessage.getString(\"type\");\n            MessageHandler messageHandler = HANDLERS.get(messageType);\n            if (messageHandler == null) {\n                logger.error(\"[onMessage][Message type({}) has no handler]\", messageType);\n                return;\n            }\n            Class<? extends Message> messageClass = getMessageClass(messageHandler);\n            Message messageObj = JSON.parseObject(jsonMessage.getString(\"body\"), messageClass);\n            messageHandler.execute(session, messageObj);\n        } catch (Throwable throwable) {\n            logger.error(\"[onMessage][session({}) error processing message]\", session, throwable);\n        }\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        logger.info(\"[onClose][session({}) disconnected. Reason: {}]\", session, closeReason);\n        WebSocketUtil.removeSession(session);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        logger.error(\"[onError][session({}) error occurred]\", session, throwable);\n    }\n\n    private Class<? extends Message> getMessageClass(MessageHandler handler) {\n        Class<?> targetClass = AopProxyUtils.ultimateTargetClass(handler);\n        Type[] interfaces = targetClass.getGenericInterfaces();\n        Class<?> superclass = targetClass.getSuperclass();\n        while ((Objects.isNull(interfaces) || interfaces.length == 0) && Objects.nonNull(superclass)) {\n            interfaces = superclass.getGenericInterfaces();\n            superclass = targetClass.getSuperclass();\n        }\n        if (Objects.nonNull(interfaces)) {\n            for (Type type : interfaces) {\n                if (type instanceof ParameterizedType) {\n                    ParameterizedType parameterizedType = (ParameterizedType) type;\n                    if (Objects.equals(parameterizedType.getRawType(), MessageHandler.class)) {\n                        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n                        if (Objects.nonNull(actualTypeArguments) && actualTypeArguments.length > 0) {\n                            return (Class<Message>) actualTypeArguments[0];\n                        }\n                    }\n                }\n            }\n        }\n        throw new IllegalStateException(String.format(\"Cannot determine message type for handler %s\", handler));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.Map;\nimport java.util.logging.Logger;\n\n@ServerEndpoint(\"/websocket\")\npublic class WebsocketServerEndpoint {\n    private static final Logger logger = Logger.getLogger(WebsocketServerEndpoint.class.getName());\n    private static final Map<String, MessageHandler> HANDLERS = new java.util.HashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        String queryString = session.getRequestURI().getQuery();\n        String token = parseQueryString(queryString).get(\"token\");\n        if (token == null || !authenticate(token)) {\n            try {\n                session.close();\n            } catch (IOException e) {\n                logger.severe(\"Failed to close session after authentication failure: \" + e.getMessage());\n            }\n            return;\n        }\n        logger.info(\"Client connected: \" + session.getId());\n    }\n\n    @OnMessage\n    public void onMessage(Session session, String message) {\n        try {\n            String messageType = determineMessageType(message);\n            MessageHandler handler = HANDLERS.get(messageType);\n            if (handler != null) {\n                handler.handle(message, session);\n            } else {\n                logger.warning(\"No handler found for message type: \" + messageType);\n            }\n        } catch (Exception e) {\n            logger.severe(\"Error processing message: \" + e.getMessage());\n        }\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        logger.info(\"Client disconnected: \" + session.getId() + \", Reason: \" + closeReason.getReasonPhrase());\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        logger.severe(\"WebSocket error for session \" + session.getId() + \": \" + throwable.getMessage());\n    }\n\n    private boolean authenticate(String token) {\n        // Placeholder for actual authentication logic\n        return \"validToken\".equals(token);\n    }\n\n    private String determineMessageType(String message) {\n        // Placeholder for message type determination logic\n        return \"default\";\n    }\n\n    private Map<String, String> parseQueryString(String queryString) {\n        Map<String, String> params = new java.util.HashMap<>();\n        if (queryString != null) {\n            for (String pair : queryString.split(\"&\")) {\n                int idx = pair.indexOf(\"=\");\n                String key = idx > 0 ? pair.substring(0, idx) : pair;\n                String value = idx > 0 && pair.length() > idx + 1 ? pair.substring(idx + 1) : \"\";\n                params.put(key, value);\n            }\n        }\n        return params;\n    }\n\n    public Class<? extends Message> getMessageClass(MessageHandler handler) {\n        Type type = handler.getClass().getGenericInterfaces()[0];\n        if (type instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n            Type[] actualTypes = parameterizedType.getActualTypeArguments();\n            if (actualTypes.length > 0 && actualTypes[0] instanceof Class) {\n                return (Class<? extends Message>) actualTypes[0];\n            }\n        }\n        return Message.class;\n    }\n\n    @FunctionalInterface\n    public interface MessageHandler {\n        void handle(String message, Session session);\n    }\n}\n```"
  },
  {
    "Task_id": 485,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles binary data communication asynchronously using ByteBuffer.\n\nClass Description: This class represents a WebSocket server endpoint that receives binary data from clients and echoes it back asynchronously. The endpoint is mapped to the \"/bytebuffer\" path and uses Java's WebSocket API for communication.\n\nAttributes: None\n\nMethods:\n- echoByteBuffer(ByteBuffer data, Session session) -> void - Handles incoming binary messages from WebSocket clients. Receives the binary data as a ByteBuffer and the client's Session object, then asynchronously sends the same data back to the client. The method uses the session's async remote endpoint to send the response without blocking.\n\nInput:\n- data: ByteBuffer - The binary data received from the client\n- session: Session - The WebSocket session object representing the client connection\n\nOutput: None (The method sends data back to the client through the session object but doesn't return anything)",
    "Canonical_solution": "import javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport java.nio.ByteBuffer;\n\n@ServerEndpoint(\"/bytebuffer\")\npublic class MyAsyncEndpointByteBuffer {\n\n    @OnMessage\n    public void echoByteBuffer(ByteBuffer data, Session session) {\n        session.getAsyncRemote().sendBinary(data);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.ServerEndpoint;\nimport java.nio.ByteBuffer;\n\n@ServerEndpoint(\"/bytebuffer\")\npublic class ByteBufferEchoEndpoint {\n    @OnMessage\n    public void echoByteBuffer(ByteBuffer data, Session session) {\n        session.getAsyncRemote().sendBinary(data);\n    }\n}\n```"
  },
  {
    "Task_id": 486,
    "Instruction": "Task Description: Create a WebSocket server endpoint class in Java that handles real-time communication between multiple clients, specifically for broadcasting figures and binary data snapshots to connected peers.\n\nClass Description: The Whiteboard class is a WebSocket server endpoint that manages client connections and facilitates real-time data broadcasting. It maintains a list of connected peers and provides methods to handle connection events (open/close) and message broadcasting (figures and binary data).\n\nAttributes:\n- LOGGER: Logger - Used for logging server activities and debugging information\n- PRESENT: Object - A dummy object used as a value in the peers ConcurrentMap\n- peers: ConcurrentMap<Session, Object> - Thread-safe collection storing all connected client sessions\n\nMethods:\n- onOpen(Session peer) -> void - Handles new WebSocket connections by adding the client session to the peers map\n- onClose(Session peer) -> void - Handles WebSocket disconnections by removing the client session from the peers map\n- broadcastFigure(Figure figure, Session session) -> void - Broadcasts a Figure object to all connected clients except the sender\n- broadcastSnapshot(ByteBuffer data, Session session) -> void - Broadcasts binary data to all connected clients except the sender",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport javax.websocket.EncodeException;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(value = \"/websocket\",\n    encoders = { FigureEncoder.class },\n    decoders = { FigureDecoder.class })\npublic class Whiteboard {\n\n    private static final Logger LOGGER = Logger.getLogger(Whiteboard.class.getName());\n    private static final Object PRESENT = new Object();\n    private static final ConcurrentMap<Session, Object> peers = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session peer) {\n        peers.put(peer, PRESENT);\n    }\n\n    @OnClose\n    public void onClose(Session peer) {\n        peers.remove(peer);\n    }\n\n    @OnMessage\n    public void broadcastFigure(Figure figure, Session session) throws IOException, EncodeException {\n        LOGGER.log(Level.INFO, \"boradcastFigure: {0}\", figure);\n        for (Session peer : session.getOpenSessions()) {\n            if (!peer.equals(session)) {\n                peer.getBasicRemote().sendObject(figure);\n            }\n        }\n    }\n\n    @OnMessage\n    public void broadcastSnapshot(ByteBuffer data, Session session) throws IOException {\n        LOGGER.log(Level.INFO, \"broadcastBinary: {0}\", data);\n        for (Session peer : session.getOpenSessions()) {\n            if (!peer.equals(session)) {\n                peer.getBasicRemote().sendBinary(data);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.OnClose;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.logging.Logger;\nimport java.nio.ByteBuffer;\n\n@ServerEndpoint(\"/whiteboard\")\npublic class Whiteboard {\n    private static final Logger LOGGER = Logger.getLogger(Whiteboard.class.getName());\n    private static final Object PRESENT = new Object();\n    private final ConcurrentHashMap<Session, Object> peers = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session peer) {\n        peers.put(peer, PRESENT);\n        LOGGER.info(\"New connection: \" + peer.getId());\n    }\n\n    @OnClose\n    public void onClose(Session peer) {\n        peers.remove(peer);\n        LOGGER.info(\"Connection closed: \" + peer.getId());\n    }\n\n    public void broadcastFigure(Figure figure, Session session) {\n        for (Map.Entry<Session, Object> entry : peers.entrySet()) {\n            Session peer = entry.getKey();\n            if (!peer.equals(session)) {\n                try {\n                    peer.getBasicRemote().sendText(figure.toString());\n                } catch (IOException e) {\n                    LOGGER.severe(\"Error broadcasting figure: \" + e.getMessage());\n                }\n            }\n        }\n    }\n\n    public void broadcastSnapshot(ByteBuffer data, Session session) {\n        for (Map.Entry<Session, Object> entry : peers.entrySet()) {\n            Session peer = entry.getKey();\n            if (!peer.equals(session)) {\n                try {\n                    peer.getBasicRemote().sendBinary(data);\n                } catch (IOException e) {\n                    LOGGER.severe(\"Error broadcasting snapshot: \" + e.getMessage());\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 487,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles binary data streams from clients and echoes them back.\n\nClass Description: This class represents a WebSocket server endpoint that receives binary data streams from clients and sends back the same data. It uses Java EE's WebSocket API to create a server endpoint at \"/inputstream\" path.\n\nAttributes: None\n\nMethods:\n- echoStream: [InputStream, Session] -> [void] - Handles incoming binary stream messages. Reads 12 bytes from the input stream and sends them back to the client using the WebSocket session. The method prints the received stream to console for debugging purposes. Throws IOException if there's an error during stream operations.\n\nInput:\n- stream: [InputStream] - The binary input stream received from the client\n- session: [Session] - The WebSocket session object representing the client connection\n\nOutput: None (sends binary data back through the WebSocket session)",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/inputstream\")\npublic class MyEndpointInputStream {\n\n    @OnMessage\n    public void echoStream(InputStream stream, Session session) throws IOException {\n        System.out.println(\"echoStream: \" + stream);\n        byte[] b = new byte[12];\n        stream.read(b);\n        session.getBasicRemote().sendBinary(ByteBuffer.wrap(b));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "import javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.ServerEndpoint;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport java.io.IOException;\n\n@ServerEndpoint(\"/inputstream\")\npublic class BinaryEchoServer {\n\n    @OnMessage\n    public void echoStream(InputStream stream, Session session) throws IOException {\n        byte[] buffer = new byte[12];\n        int bytesRead = stream.read(buffer);\n        if (bytesRead > 0) {\n            for (int i = 0; i < bytesRead; i++) {\n                System.out.print(buffer[i] + \" \");\n            }\n            System.out.println();\n            session.getBasicRemote().sendBinary(ByteBuffer.wrap(buffer, 0, bytesRead));\n        }\n    }\n}"
  },
  {
    "Task_id": 488,
    "Instruction": "Task Description: Implement a WebSocket server endpoint class in Java that handles client connections, messages, and disconnections, supporting both group broadcasting and private messaging.\n\nClass Description: WebSocket server endpoint class that manages client connections through WebSocket protocol, maintains active connections in a concurrent map, and provides message broadcasting and targeted messaging functionality.\n\nAttributes:\n- session: [Session] - The WebSocket session object representing a client connection\n- name: [String] - The identifier for the connected client\n- webSocketSet: [ConcurrentHashMap<String, WebSocket>] - Thread-safe map storing all active WebSocket connections with client names as keys\n\nMethods:\n- OnOpen([Session session, @PathParam(value = \"name\") String name]) -> [void] - Handles new client connections, stores the session and name, and notifies all clients\n- OnClose() -> [void] - Handles client disconnections, removes from active connections, and notifies all clients\n- OnMessage([String messageStr]) -> [void] - Processes incoming messages, routing to either private or group messaging based on message format\n- onError([Session session, Throwable error]) -> [void] - Handles any errors that occur during WebSocket communication\n- GroupSending([String message]) -> [void] - Broadcasts a message to all connected clients\n- AppointSending([String name, String message]) -> [void] - Sends a message to a specific client identified by name",
    "Canonical_solution": "import javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Component\n@ServerEndpoint(\"/websocket/{name}\")\npublic class WebSocket {\n    private Session session;\n    private String name;\n    private static ConcurrentHashMap<String, WebSocket> webSocketSet = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void OnOpen(Session session, @PathParam(value = \"name\") String name) {\n        this.session = session;\n        this.name = name;\n        webSocketSet.put(name, this);\n        GroupSending(name + \" \u6765\u4e86\");\n    }\n\n    @OnClose\n    public void OnClose() {\n        webSocketSet.remove(this.name);\n        GroupSending(name + \" \u8d70\u4e86\");\n    }\n\n    @OnMessage\n    public void OnMessage(String messageStr) {\n        if (messageStr.indexOf(\"TOUSER\") == 0) {\n            String[] split = messageStr.split(\";\");\n            String[] split1 = split[0].split(\":\");\n            String[] split2 = split[1].split(\":\");\n            String name = split1[1];\n            String message = split2[1];\n            AppointSending(name, message);\n        } else {\n            GroupSending(messageStr);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        error.printStackTrace();\n    }\n\n    public void GroupSending(String message) {\n        for (String name : webSocketSet.keySet()) {\n            try {\n                webSocketSet.get(name).session.getBasicRemote().sendText(message);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void AppointSending(String name, String message) {\n        try {\n            webSocketSet.get(name).session.getBasicRemote().sendText(message);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport javax.websocket.server.PathParam;\nimport java.io.IOException;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@ServerEndpoint(\"/websocket/{name}\")\npublic class WebSocket {\n    private Session session;\n    private String name;\n    private static final ConcurrentHashMap<String, WebSocket> webSocketSet = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session, @PathParam(\"name\") String name) {\n        this.session = session;\n        this.name = name;\n        webSocketSet.put(name, this);\n        groupSending(name + \" has joined the chat.\");\n    }\n\n    @OnClose\n    public void onClose() {\n        webSocketSet.remove(this.name);\n        groupSending(this.name + \" has left the chat.\");\n    }\n\n    @OnMessage\n    public void onMessage(String messageStr) {\n        if (messageStr.startsWith(\"private:\")) {\n            String[] parts = messageStr.substring(7).split(\":\", 2);\n            String targetName = parts[0];\n            String msg = parts[1];\n            appointSending(targetName, msg);\n        } else {\n            groupSending(messageStr);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        error.printStackTrace();\n        try {\n            session.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void groupSending(String message) {\n        for (WebSocket ws : webSocketSet.values()) {\n            try {\n                ws.session.getBasicRemote().sendText(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void appointSending(String name, String message) {\n        WebSocket target = webSocketSet.get(name);\n        if (target != null) {\n            try {\n                target.session.getBasicRemote().sendText(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 489,
    "Instruction": "Task Description: Implement a WebSocket server endpoint for a chat room application that handles client connections, message broadcasting, and connection termination.\n\nClass Description: The ChatRoomServerEndpoint class is a WebSocket server endpoint that manages a chat room where multiple clients can connect, send messages, and receive broadcasts of all messages. It tracks connected users and handles connection lifecycle events.\n\nAttributes:\n- logger: Logger - Used for logging server activities and errors\n- ONLINE_USER_SESSIONS: Map<String, Session> - Static map storing all active user sessions with usernames as keys (inherited from WebSocketUtils)\n\nMethods:\n- openSession: (@PathParam(\"username\") String username, Session session) -> void - Handles new client connections, adds user to active sessions, and broadcasts welcome message\n- onMessage: (@PathParam(\"username\") String username, String message) -> void - Processes incoming messages from clients and broadcasts them to all connected users\n- onClose: (@PathParam(\"username\") String username, Session session) -> void - Handles client disconnections, removes user from active sessions, and broadcasts departure message\n- onError: (Session session, Throwable throwable) -> void - Handles any errors that occur during WebSocket communication and closes the problematic session",
    "Canonical_solution": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\n\nimport static com.neo.utils.WebSocketUtils.ONLINE_USER_SESSIONS;\nimport static com.neo.utils.WebSocketUtils.sendMessageAll;\n\n@RestController\n@ServerEndpoint(\"/chat-room/{username}\")\npublic class ChatRoomServerEndpoint {\n    private static final Logger logger = LoggerFactory.getLogger(ChatRoomServerEndpoint.class);\n\n    @OnOpen\n    public void openSession(@PathParam(\"username\") String username, Session session) {\n        ONLINE_USER_SESSIONS.put(username, session);\n        String message = \"\u6b22\u8fce\u7528\u6237[\" + username + \"] \u6765\u5230\u804a\u5929\u5ba4\uff01\";\n        logger.info(\"\u7528\u6237\u767b\u5f55\uff1a\"+message);\n        sendMessageAll(message);\n    }\n\n    @OnMessage\n    public void onMessage(@PathParam(\"username\") String username, String message) {\n        logger.info(\"\u53d1\u9001\u6d88\u606f\uff1a\"+message);\n        sendMessageAll(\"\u7528\u6237[\" + username + \"] : \" + message);\n    }\n\n    @OnClose\n    public void onClose(@PathParam(\"username\") String username, Session session) {\n        ONLINE_USER_SESSIONS.remove(username);\n        sendMessageAll(\"\u7528\u6237[\" + username + \"] \u5df2\u7ecf\u79bb\u5f00\u804a\u5929\u5ba4\u4e86\uff01\");\n        try {\n            session.close();\n        } catch (IOException e) {\n            logger.error(\"onClose error\",e);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        try {\n            session.close();\n        } catch (IOException e) {\n            logger.error(\"onError excepiton\",e);\n        }\n        logger.info(\"Throwable msg \"+throwable.getMessage());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "import javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport javax.websocket.server.PathParam;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.logging.Logger;\n\n@ServerEndpoint(\"/chat/{username}\")\npublic class ChatRoomServerEndpoint {\n    private static final Logger logger = Logger.getLogger(ChatRoomServerEndpoint.class.getName());\n    public static final Map<String, Session> ONLINE_USER_SESSIONS = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void openSession(@PathParam(\"username\") String username, Session session) {\n        ONLINE_USER_SESSIONS.put(username, session);\n        logger.info(\"User \" + username + \" connected\");\n        String welcomeMessage = \"User \" + username + \" has joined the chat.\";\n        broadcastMessage(welcomeMessage);\n    }\n\n    @OnMessage\n    public void onMessage(@PathParam(\"username\") String username, String message) {\n        logger.info(\"Received message from \" + username + \": \" + message);\n        String formattedMessage = username + \": \" + message;\n        broadcastMessage(formattedMessage);\n    }\n\n    @OnClose\n    public void onClose(@PathParam(\"username\") String username, Session session) {\n        ONLINE_USER_SESSIONS.remove(username);\n        logger.info(\"User \" + username + \" disconnected\");\n        String departureMessage = \"User \" + username + \" has left the chat.\";\n        broadcastMessage(departureMessage);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        logger.severe(\"Error occurred: \" + throwable.getMessage());\n        try {\n            session.close();\n        } catch (IOException e) {\n            logger.severe(\"Failed to close session: \" + e.getMessage());\n        }\n    }\n\n    private void broadcastMessage(String message) {\n        for (Map.Entry<String, Session> entry : ONLINE_USER_SESSIONS.entrySet()) {\n            try {\n                entry.getValue().getBasicRemote().sendText(message);\n            } catch (IOException e) {\n                logger.severe(\"Failed to send message to \" + entry.getKey() + \": \" + e.getMessage());\n                try {\n                    entry.getValue().close();\n                } catch (IOException ex) {\n                    logger.severe(\"Failed to close session for \" + entry.getKey() + \": \" + ex.getMessage());\n                }\n                ONLINE_USER_SESSIONS.remove(entry.getKey());\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 490,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles binary data streams from clients and echoes them back.\n\nClass Description: The MyEndpointInputStream class is a WebSocket server endpoint that receives binary data streams from clients and sends back the same data. It uses Java EE's WebSocket API to manage client connections and data exchange.\n\nAttributes: None\n\nMethods:\n1. echoStream(InputStream stream, Session session) -> void - Handles incoming binary data streams from clients. Reads the first 12 bytes from the input stream and sends them back to the client as binary data.\n   - Input Parameters:\n     - stream: InputStream - The binary data stream received from the client\n     - session: Session - The WebSocket session representing the client connection\n   - Return Type: void\n   - Description: This method is triggered when a binary message is received. It reads 12 bytes from the input stream and echoes them back to the client using the session's basic remote interface. The method may throw IOException if there are issues with reading the stream or sending the response.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/inputstream\")\npublic class MyEndpointInputStream {\n\n    @OnMessage\n    public void echoStream(InputStream stream, Session session) throws IOException {\n        System.out.println(\"echoStream: \" + stream);\n        byte[] b = new byte[12];\n        stream.read(b);\n        session.getBasicRemote().sendBinary(ByteBuffer.wrap(b));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.ServerEndpoint;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\n\n@ServerEndpoint(\"/myendpoint\")\npublic class MyEndpointInputStream {\n\n    @OnMessage\n    public void echoStream(InputStream stream, Session session) throws IOException {\n        byte[] buffer = new byte[12];\n        stream.read(buffer);\n        session.getBasicRemote().sendBinary(ByteBuffer.wrap(buffer));\n    }\n}\n```"
  },
  {
    "Task_id": 491,
    "Instruction": "Task Description: Create a WebSocket server endpoint class in Java that handles client connections, text messages, and binary messages. The class should manage WebSocket sessions and echo received messages back to clients.\n\nClass Description: The MyEndpoint class is a WebSocket server endpoint that listens for client connections on the \"/websocket\" path. It handles text and binary messages, providing echo functionality while logging connection and message details.\n\nAttributes:\n- None (All required session information is passed through method parameters)\n\nMethods:\n- onOpen: [onOpen](Session session) -> void - Handles new WebSocket connections and logs the client's request URI.\n- echoText: [echoText](String data, boolean part) -> String - Handles incoming text messages, logs message details, and returns the same message (echo). The boolean parameter indicates if the message is complete or partial.\n- echoBinary: [echoBinary](ByteBuffer data, Session session) -> void - Handles incoming binary messages, logs message details, and sends the same binary data back to the client (echo). Throws IOException if sending fails.",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(value = \"/websocket\")\npublic class MyEndpoint {\n\n    @OnOpen\n    public void onOpen(Session session) {\n        System.out.println(\"Connected from: \" + session.getRequestURI());\n    }\n\n    @OnMessage\n    public String echoText(String data, boolean part) {\n        System.out.println(\"boolean(text) \" + data);\n        System.out.println(\"text length \" + data.length());\n        if (part) {\n            System.out.println(\"whole message received\");\n        } else {\n            System.out.println(\"partial message received\");\n        }\n        return data;\n    }\n\n    @OnMessage\n    public void echoBinary(ByteBuffer data, Session session) throws IOException {\n        System.out.println(\"boolean(binary) \" + data);\n        System.out.println(\"binary length \" + data.array().length);\n        session.getBasicRemote().sendBinary(data);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\n\n@ServerEndpoint(\"/websocket\")\npublic class MyEndpoint {\n\n    @OnOpen\n    public void onOpen(Session session) {\n        System.out.println(\"New connection from: \" + session.getRequestURI());\n    }\n\n    @OnMessage\n    public String echoText(String data, boolean part) {\n        System.out.println(\"Received text: \" + data + \", part: \" + part);\n        return data;\n    }\n\n    @OnMessage\n    public void echoBinary(ByteBuffer data, Session session) {\n        System.out.println(\"Received binary of length: \" + data.remaining());\n        try {\n            session.getBasicRemote().sendBinary(data);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 492,
    "Instruction": "Task Description: Create a WebSocket server endpoint class in Java for deploying containers, handling client connections, and managing deployment processes with error handling.\n\nClass Description: The ContainerDeployServerEndpoint class is a WebSocket server endpoint that facilitates container deployment through WebSocket connections. It handles client connections, initiates container deployment, and manages errors during the process. The class uses Java EE WebSocket API and integrates with a ContainerService for deployment operations.\n\nAttributes:\n- containerService: [ContainerService] - Service responsible for container deployment operations (injected via Spring)\n- log: [Logger] - SLF4J logger instance for logging events and errors (provided by Lombok)\n\nMethods:\n- onOpen: [onOpen](Long id, Session session) -> void - Handles new WebSocket connections. Takes container ID and session as parameters. Sends connection confirmation, initiates deployment, and closes the session. Logs errors if deployment fails.\n- onError: [onError](Session session, Throwable throwable) -> void - Handles WebSocket errors. Takes the session and throwable as parameters. Closes the session and logs the error.\n  \nNote: The class uses @ServerEndpoint annotation to define the WebSocket endpoint path with a configurator, and includes @Component for Spring integration. The endpoint path includes a path parameter for container ID (/container/deploy/{id}).",
    "Canonical_solution": "import tech.powerjob.server.config.OmsEndpointConfigure;\nimport tech.powerjob.server.core.container.ContainerService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\nimport javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\n\n@Slf4j\n@Component\n@ServerEndpoint(value = \"/container/deploy/{id}\", configurator = OmsEndpointConfigure.class)\npublic class ContainerDeployServerEndpoint {\n\n    @Resource\n    private ContainerService containerService;\n\n    @OnOpen\n    public void onOpen(@PathParam(\"id\") Long id, Session session) {\n        RemoteEndpoint.Async remote = session.getAsyncRemote();\n        remote.sendText(\"SYSTEM: connected successfully, start to deploy container: \" + id);\n        try {\n            containerService.deploy(id, session);\n        }catch (Exception e) {\n            log.error(\"[ContainerDeployServerEndpoint] deploy container {} failed.\", id, e);\n            remote.sendText(\"SYSTEM: deploy failed because of the exception\");\n            remote.sendText(ExceptionUtils.getStackTrace(e));\n        }\n        try {\n            session.close();\n        }catch (Exception e) {\n            log.error(\"[ContainerDeployServerEndpoint] close session for {} failed.\", id, e);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        try {\n            session.close();\n        } catch (IOException e) {\n            log.error(\"[ContainerDeployServerEndpoint] close session failed.\", e);\n        }\n        log.warn(\"[ContainerDeployServerEndpoint] session onError!\", throwable);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport javax.websocket.server.PathParam;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Component\n@ServerEndpoint(\"/container/deploy/{id}\")\npublic class ContainerDeployServerEndpoint {\n    private static final Logger log = LoggerFactory.getLogger(ContainerDeployServerEndpoint.class);\n    @Autowired\n    private ContainerService containerService;\n\n    @OnOpen\n    public void onOpen(@PathParam(\"id\") Long id, Session session) {\n        try {\n            session.getBasicRemote().sendText(\"Connection established for container ID: \" + id);\n            containerService.deploy(id);\n            session.close();\n        } catch (Exception e) {\n            log.error(\"Error during deployment for container ID: \" + id, e);\n            try {\n                session.close();\n            } catch (IOException ioEx) {\n                log.error(\"Failed to close session after error\", ioEx);\n            }\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        log.error(\"WebSocket error\", throwable);\n        try {\n            session.close();\n        } catch (IOException e) {\n            log.error(\"Failed to close session on error\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 495,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that echoes received text messages back to the client asynchronously.\n\nClass Description: This class represents a WebSocket server endpoint that handles text-based communication with clients. It listens for incoming text messages and echoes them back to the sender using asynchronous communication.\n\nAttributes: None\n\nMethods:\n- echoText: [String text, Session session] -> void - Handles incoming text messages from clients. Takes the received text and the client session as input, then sends the same text back to the client asynchronously using the session's async remote endpoint.",
    "Canonical_solution": "import javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/text\")\npublic class MyAsyncEndpointText {\n\n    @OnMessage\n    public void echoText(String text, Session session) {\n        session.getAsyncRemote().sendText(text);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.ServerEndpoint;\n\n@ServerEndpoint(\"/echo\")\npublic class EchoEndpoint {\n\n    @OnMessage\n    public void echoText(String text, Session session) {\n        session.getAsyncRemote().sendText(text);\n    }\n}\n```"
  },
  {
    "Task_id": 496,
    "Instruction": "Task Description: Create a gRPC client class in Java that checks the health of a gRPC server using the gRPC Health Checking Protocol.\n\nClass Description: The GrpcHealthClient class establishes a connection to a gRPC server and provides functionality to check the server's health status. It manages the gRPC channel and stub for communication with the server.\n\nAttributes:\n- channel: [ManagedChannel] - The gRPC communication channel to the server\n- stub: [HealthStub] - The asynchronous gRPC stub for health check operations\n\nMethods:\n- GrpcHealthClient(String host, int port) -> [void] - Constructor that initializes the gRPC channel and stub with the specified server host and port\n- checkHealth() -> [HealthCheckResponse] - Sends a health check request to the server and returns the response\n- shutdown() -> [void] - Shuts down the gRPC channel gracefully",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.health.v1.HealthCheckRequest;\nimport io.grpc.health.v1.HealthCheckResponse;\nimport io.grpc.health.v1.HealthGrpc;\nimport io.grpc.health.v1.HealthGrpc.HealthStub;\n\npublic class GrpcHealthClient {\n\n    private final ManagedChannel channel;\n    private final HealthStub stub;\n\n    public GrpcHealthClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port)\n                .usePlaintext()\n                .build();\n        this.stub = HealthGrpc.newStub(channel);\n    }\n\n    public HealthCheckResponse checkHealth() {\n        HealthCheckRequest request = HealthCheckRequest.getDefaultInstance();\n        AwaitableStreamObserver<HealthCheckResponse> responseObserver = new AwaitableStreamObserver<>();\n        stub.check(request, responseObserver);\n        return responseObserver.getSingle();\n    }\n\n    public void shutdown() {\n        channel.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport grpc.health.v1.HealthCheckRequest;\nimport grpc.health.v1.HealthCheckResponse;\nimport grpc.health.v1.HealthGrpc;\n\npublic class GrpcHealthClient {\n    private final ManagedChannel channel;\n    private final HealthGrpc.HealthStub stub;\n\n    public GrpcHealthClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port)\n                .usePlaintext()\n                .build();\n        this.stub = HealthGrpc.newBlockingStub(channel);\n    }\n\n    public HealthCheckResponse checkHealth() {\n        HealthCheckRequest request = HealthCheckRequest.newBuilder().build();\n        return stub.check(request);\n    }\n\n    public void shutdown() {\n        channel.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 497,
    "Instruction": "Task Description: Create a Java class that implements a gRPC client for interacting with a database service, allowing for retrieval of blockchain data and dynamic properties.\n\nClass Description: The DatabaseGrpcClient class provides a gRPC client implementation for connecting to a database service. It establishes a connection to a gRPC server, provides methods to retrieve blockchain blocks and dynamic properties, and handles connection shutdown.\n\nAttributes:\n- channel: [ManagedChannel] - The communication channel between the client and the gRPC server\n- databaseBlockingStub: [DatabaseGrpc.DatabaseBlockingStub] - The blocking stub used to make synchronous RPC calls to the server\n\nMethods:\n- Constructor: [DatabaseGrpcClient](String host, int port) -> [void] - Creates a new client instance connecting to the specified host and port\n- Constructor: [DatabaseGrpcClient](String host) -> [void] - Creates a new client instance connecting to the specified host (using default port)\n- getBlock: [getBlock](long blockNum) -> [Block] - Retrieves a block from the blockchain; if blockNum is negative, returns the latest block\n- shutdown: [shutdown]() -> [void] - Shuts down the connection channel\n- getDynamicProperties: [getDynamicProperties]() -> [DynamicProperties] - Retrieves the dynamic properties of the blockchain",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport org.tron.api.DatabaseGrpc;\nimport org.tron.api.GrpcAPI.EmptyMessage;\nimport org.tron.api.GrpcAPI.NumberMessage;\nimport org.tron.protos.Protocol.Block;\nimport org.tron.protos.Protocol.DynamicProperties;\n\npublic class DatabaseGrpcClient {\n\n  private final ManagedChannel channel;\n  private final DatabaseGrpc.DatabaseBlockingStub databaseBlockingStub;\n\n  public DatabaseGrpcClient(String host, int port) {\n    channel = ManagedChannelBuilder.forAddress(host, port)\n        .usePlaintext()\n        .build();\n    databaseBlockingStub = DatabaseGrpc.newBlockingStub(channel);\n  }\n\n  public DatabaseGrpcClient(String host) {\n    channel = ManagedChannelBuilder.forTarget(host)\n        .usePlaintext()\n        .build();\n    databaseBlockingStub = DatabaseGrpc.newBlockingStub(channel);\n  }\n\n  public Block getBlock(long blockNum) {\n    if (blockNum < 0) {\n      return databaseBlockingStub.getNowBlock(EmptyMessage.newBuilder().build());\n    }\n    NumberMessage.Builder builder = NumberMessage.newBuilder();\n    builder.setNum(blockNum);\n    return databaseBlockingStub.getBlockByNum(builder.build());\n  }\n\n  public void shutdown() {\n    channel.shutdown();\n  }\n\n  public DynamicProperties getDynamicProperties() {\n    return databaseBlockingStub.getDynamicProperties(EmptyMessage.newBuilder().build());\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport com.example.DatabaseGrpc;\nimport com.example.Block;\nimport com.example.DynamicProperties;\n\npublic class DatabaseGrpcClient {\n    private final ManagedChannel channel;\n    private final DatabaseGrpc.DatabaseBlockingStub databaseBlockingStub;\n\n    public DatabaseGrpcClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n        this.databaseBlockingStub = DatabaseGrpc.newBlockingStub(channel);\n    }\n\n    public DatabaseGrpcClient(String host) {\n        this(host, 50051);\n    }\n\n    public Block getBlock(long blockNum) {\n        Block request = Block.newBuilder().setNumber(blockNum).build();\n        return databaseBlockingStub.getBlock(request);\n    }\n\n    public DynamicProperties getDynamicProperties() {\n        return databaseBlockingStub.getDynamicProperties(DynamicProperties.newBuilder().build());\n    }\n\n    public void shutdown() {\n        channel.shutdown();\n    }\n}"
  },
  {
    "Task_id": 498,
    "Instruction": "Task Description: Create a gRPC client class for service discovery that handles connection management, stub creation, and remote method invocation with retry logic.\n\nClass Description: DiscoveryClient is a gRPC client implementation that manages connections to a discovery service, provides thread-safe operations, and includes automatic retry mechanisms for failed requests.\n\nAttributes:\n- requireResetStub: AtomicBoolean - Flag indicating whether the stub needs to be reset\n- channel: ManagedChannel - The gRPC communication channel\n- registerStub: DiscoveryServiceBlockingStub - Blocking stub for registration operations  \n- blockingStub: DiscoveryServiceBlockingStub - Blocking stub for general operations\n- readWriteLock: ReentrantReadWriteLock - Lock for thread-safe operations\n- pdAddresses: List<String> - Server addresses (implied from usage)\n\nMethods:\n- DiscoveryClient(String centerAddress) -> None - Constructor that initializes the client with target server address\n- getNodeInfos(Query query) -> NodeInfos - Retrieves node information from discovery service with retry logic\n- tryWithTimes(Function<V,R> function, V v) -> R - Helper method implementing retry logic for operations\n- resetStub() -> None - Resets the channel and stubs when connection issues occur  \n- resetChannel(String address) -> None - Recreates the channel and stubs with a new address\n- close() -> None - Shuts down the channel and cleans up resources\n\nThe class demonstrates proper gRPC client patterns including:\n1. Channel lifecycle management\n2. Thread-safe stub operations\n3. Connection retry mechanisms\n4. Resource cleanup\n5. Error handling for network operations",
    "Canonical_solution": "import org.apache.hugegraph.pd.grpc.discovery.DiscoveryServiceGrpc;\nimport org.apache.hugegraph.pd.grpc.discovery.NodeInfos;\nimport org.apache.hugegraph.pd.grpc.discovery.Query;\nimport org.apache.hugegraph.pd.grpc.discovery.RegisterInfo;\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\nimport java.util.function.Function;\n\npublic class DiscoveryClient {\n\n    private final AtomicBoolean requireResetStub = new AtomicBoolean(false);\n    private ManagedChannel channel = null;\n    private DiscoveryServiceGrpc.DiscoveryServiceBlockingStub registerStub;\n    private DiscoveryServiceGrpc.DiscoveryServiceBlockingStub blockingStub;\n    private ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n\n    public DiscoveryClient(String centerAddress) {\n        resetChannel(centerAddress);\n    }\n\n    public NodeInfos getNodeInfos(Query query) {\n        return tryWithTimes((q) -> {\n            this.readWriteLock.readLock().lock();\n            NodeInfos nodes;\n            try {\n                nodes = this.blockingStub.getNodes(q);\n            } finally {\n                this.readWriteLock.readLock().unlock();\n            }\n            return nodes;\n        }, query);\n    }\n\n    private <V, R> R tryWithTimes(Function<V, R> function, V v) {\n        R r;\n        Exception ex = null;\n        for (int i = 0; i < 3; i++) {\n            try {\n                r = function.apply(v);\n                return r;\n            } catch (Exception e) {\n                requireResetStub.set(true);\n                resetStub();\n                ex = e;\n            }\n        }\n        if (ex != null) {\n            throw new RuntimeException(\"Discovery method failed\", ex);\n        }\n        return null;\n    }\n\n    private void resetStub() {\n        if (requireResetStub.get()) {\n            try {\n                resetChannel(pdAddresses.get(0));\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to reset stub\", e);\n            }\n        }\n    }\n\n    private void resetChannel(String address) {\n        readWriteLock.writeLock().lock();\n        try {\n            if (requireResetStub.get()) {\n                if (channel != null) {\n                    channel.shutdownNow();\n                    channel.awaitTermination(100, TimeUnit.MILLISECONDS);\n                }\n                channel = ManagedChannelBuilder.forTarget(address)\n                        .usePlaintext().build();\n                this.registerStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n                this.blockingStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n                requireResetStub.set(false);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to reset channel\", e);\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n\n    public void close() {\n        readWriteLock.writeLock().lock();\n        try {\n            if (channel != null) {\n                channel.shutdownNow();\n                channel.awaitTermination(100, TimeUnit.MILLISECONDS);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to close channel\", e);\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\nimport java.util.function.Function;\n\npublic class DiscoveryClient {\n    private final AtomicBoolean requireResetStub = new AtomicBoolean(false);\n    private ManagedChannel channel;\n    private DiscoveryServiceBlockingStub registerStub;\n    private DiscoveryServiceBlockingStub blockingStub;\n    private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n    private final List<String> pdAddresses;\n\n    public DiscoveryClient(String centerAddress) {\n        this.pdAddresses = List.of(centerAddress);\n        this.channel = ManagedChannelBuilder.forTarget(centerAddress).usePlaintext().build();\n        this.registerStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n        this.blockingStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n    }\n\n    public NodeInfos getNodeInfos(Query query) {\n        return tryWithTimes((v) -> {\n            readWriteLock.readLock().lock();\n            try {\n                return blockingStub.getNodeInfos(v);\n            } finally {\n                readWriteLock.readLock().unlock();\n            }\n        }, query);\n    }\n\n    private <V, R> R tryWithTimes(Function<V, R> function, V v) {\n        int maxRetries = 3;\n        for (int i = 0; i < maxRetries; i++) {\n            try {\n                return function.apply(v);\n            } catch (StatusRuntimeException e) {\n                if (i == maxRetries - 1) {\n                    throw e;\n                }\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException ex) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(ex);\n                }\n            }\n        }\n        throw new RuntimeException(\"Unexpected error\");\n    }\n\n    private void resetStub() {\n        readWriteLock.writeLock().lock();\n        try {\n            if (channel != null) {\n                channel.shutdownNow();\n            }\n            resetChannel(pdAddresses.get(0));\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n\n    private void resetChannel(String address) {\n        this.channel = ManagedChannelBuilder.forTarget(address).usePlaintext().build();\n        this.registerStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n        this.blockingStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n    }\n\n    public void close() {\n        readWriteLock.writeLock().lock();\n        try {\n            if (channel != null) {\n                channel.shutdownNow();\n            }\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n}"
  },
  {
    "Task_id": 499,
    "Instruction": "Task Description: Create a gRPC client class in Java that connects to a gRPC server for executing GraphQL queries and handling responses asynchronously.\n\nClass Description: The GraphQlGrpcClient class establishes a connection to a gRPC server, provides functionality to execute GraphQL queries, and handles server responses asynchronously. It manages the gRPC channel lifecycle and provides cleanup methods.\n\nAttributes:\n- channel: [ManagedChannel] - The gRPC communication channel to the server\n- stub: [GraphQlServiceGrpc.GraphQlServiceStub] - The asynchronous gRPC stub for making service calls\n- ON_COMPLETE: [CountDownLatch] - Synchronization aid to wait for response completion\n- logger: [Logger] - Logger instance for logging client activities\n\nMethods:\n- GraphQlGrpcClient(String host, int port) -> [Constructor] - Creates a client instance with specified host and port, using plaintext connection\n- GraphQlGrpcClient(ManagedChannel channel) -> [Constructor] - Creates a client instance with an existing channel\n- shutdown() -> [void] - Shuts down the channel gracefully with a 5-second timeout\n- query(String query) -> [void] - Executes a GraphQL query asynchronously and logs responses/errors",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.examples.graphql.GraphQlRequest;\nimport io.grpc.examples.graphql.GraphQlResponse;\nimport io.grpc.examples.graphql.GraphQlServiceGrpc;\nimport io.grpc.stub.StreamObserver;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class GraphQlGrpcClient {\n  private static final Logger logger = Logger.getLogger(GraphQlGrpcClient.class.getName());\n\n  private final ManagedChannel channel;\n  private final GraphQlServiceGrpc.GraphQlServiceStub stub;\n  private final CountDownLatch ON_COMPLETE = new CountDownLatch(1);\n\n  public GraphQlGrpcClient(String host, int port) {\n    this(ManagedChannelBuilder.forAddress(host, port).usePlaintext().build());\n  }\n\n  GraphQlGrpcClient(ManagedChannel channel) {\n    this.channel = channel;\n    stub = GraphQlServiceGrpc.newStub(channel);\n  }\n\n  public void shutdown() throws InterruptedException {\n    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n  }\n\n  public void query(String query) {\n    GraphQlRequest request =\n        GraphQlRequest.newBuilder().build().newBuilder().setQuery(query).build();\n\n    stub.execute(\n        request,\n        new StreamObserver<GraphQlResponse>() {\n          @Override\n          public void onNext(GraphQlResponse value) {\n            logger.info(\"onNext: \" + value);\n          }\n\n          @Override\n          public void onError(Throwable t) {\n            logger.log(Level.WARNING, t, () -> \"onError\");\n            ON_COMPLETE.countDown();\n          }\n\n          @Override\n          public void onCompleted() {\n            logger.info(\"onCompleted\");\n            ON_COMPLETE.countDown();\n          }\n        });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport io.grpc.stub.StreamObserver;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class GraphQlGrpcClient {\n    private final ManagedChannel channel;\n    private final GraphQlServiceGrpc.GraphQlServiceStub stub;\n    private final CountDownLatch ON_COMPLETE;\n    private final Logger logger;\n\n    public GraphQlGrpcClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port)\n                .usePlaintext()\n                .build();\n        this.stub = GraphQlServiceGrpc.newStub(channel);\n        this.ON_COMPLETE = new CountDownLatch(1);\n        this.logger = Logger.getLogger(GraphQlGrpcClient.class.getName());\n    }\n\n    public GraphQlGrpcClient(ManagedChannel channel) {\n        this.channel = channel;\n        this.stub = GraphQlServiceGrpc.newStub(channel);\n        this.ON_COMPLETE = new CountDownLatch(1);\n        this.logger = Logger.getLogger(GraphQlGrpcClient.class.getName());\n    }\n\n    public void shutdown() {\n        try {\n            channel.shutdown().awaitTermination(5, java.util.concurrent.TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            logger.log(Level.SEVERE, \"Interrupted while shutting down channel\", e);\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void query(String query) {\n        GraphQLQuery request = GraphQLQuery.newBuilder().setQuery(query).build();\n        stub.query(request, new StreamObserver<GraphQLResponse>() {\n            @Override\n            public void onNext(GraphQLResponse response) {\n                logger.info(\"Received response: \" + response);\n                ON_COMPLETE.countDown();\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                if (t instanceof StatusRuntimeException) {\n                    logger.severe(\"Error executing query: \" + t.getMessage() + \" (Status: \" + ((StatusRuntimeException) t).getStatus() + \")\");\n                } else {\n                    logger.severe(\"Error executing query: \" + t.getMessage());\n                }\n                ON_COMPLETE.countDown();\n            }\n\n            @Override\n            public void onCompleted() {\n                // No-op\n            }\n        });\n    }\n}\n```"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Create a Kafka topic using the AdminClient API in Java.\n\nFunction Description: This function creates a new topic in a Kafka cluster using the AdminClient API. It establishes a connection to the Kafka broker, defines the topic configuration (name, partition count, and replication factor), and creates the topic. The function ensures proper resource cleanup by closing the AdminClient after topic creation.\n\nInput:\n- brokerAddress: String - The address of the Kafka broker to connect to (e.g., \"localhost:9092\")\n- topicName: String - The name of the topic to be created\n- partitionCount: int - The number of partitions for the topic\n- replicationFactor: short - The replication factor for the topic\n\nOutput: void - The function does not return any value but creates the specified topic in the Kafka cluster. Any exceptions during topic creation will be thrown to the caller.\n\nNote: The function handles resource cleanup by closing the AdminClient in a finally block to prevent resource leaks.",
    "Canonical_solution": "import java.util.Collections;\nimport java.util.Map;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.NewTopic;\n\npublic void testDiskFailure() throws IOException {\n    AdminClient adminClient = KafkaCruiseControlUtils.createAdminClient(Collections\n        .singletonMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, broker(0).plaintextAddr()));\n    try {\n        adminClient.createTopics(Collections.singleton(new NewTopic(TOPIC0, PARTITION_COUNT, TOPIC0_REPLICATION_FACTOR)));\n    } finally {\n        KafkaCruiseControlUtils.closeAdminClientWithTimeout(adminClient);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 34,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.common.config.ConfigDef;\n\nimport java.util.Collections;\nimport java.util.Properties;\n\npublic class KafkaTopicCreator {\n    public void createKafkaTopic(String brokerAddress, String topicName, int partitionCount, short replicationFactor) {\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", brokerAddress);\n        try (AdminClient adminClient = AdminClient.create(props)) {\n            NewTopic newTopic = new NewTopic(topicName, partitionCount, replicationFactor);\n            adminClient.createTopics(Collections.singletonList(newTopic)).all().get();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error creating Kafka topic\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Create a Java utility class for making HTTP/HTTPS requests with support for custom timeouts, request methods, content types, and handling of both successful and error responses.\n\nClass Description: HttpUtil is a utility class that provides methods for making HTTP/HTTPS requests. It handles both secure (HTTPS) and non-secure (HTTP) connections, supports various request methods (GET, POST, etc.), and includes proper error handling and resource cleanup.\n\nAttributes:\n- Timeout: [int] - Default timeout value for connections (5000ms)\n- DefalutEncoding: [String] - Default character encoding for requests/responses (\"UTF-8\")\n- currentProxy: [Map] - Storage for proxy configuration (currently unused in the reference implementation)\n- allHostsValid: [HostnameVerifier] - Custom hostname verifier that accepts all HTTPS hosts\n\nMethods:\n- httpRequest: [httpRequest(String requestUrl, int timeOut, String requestMethod, String contentType, String postString, String encoding)] -> [String] - Makes an HTTP/HTTPS request with specified parameters and returns the response as a string\n- readString: [readString(InputStream inputStream, String encoding)] -> [String] - Helper method to read an InputStream into a String with specified encoding\n- X509TrustUtiil: [Nested class implementing X509TrustManager] - Custom trust manager that accepts all certificates for HTTPS connections\n\nThe class handles:\n1. Both HTTP and HTTPS connections\n2. Custom timeouts for connect and read operations\n3. Various request methods (GET, POST, etc.)\n4. Request headers (particularly Content-Type)\n5. Request body for POST requests\n6. Proper error stream handling\n7. Resource cleanup (connection closing, stream closing)\n8. SSL certificate verification bypass for HTTPS\n9. Character encoding for requests and responses",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.security.SecureRandom;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.HashMap;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\npublic class HttpUtil {\n    private static final int Timeout = 5000;\n    private static final String DefalutEncoding = \"UTF-8\";\n    private static Map currentProxy = new HashMap();\n    public static HostnameVerifier allHostsValid = new HostnameVerifier() {\n        @Override\n        public boolean verify(String hostname, SSLSession session) {\n            return true;\n        }\n    };\n\n    public static String httpRequest(String requestUrl, int timeOut, String requestMethod, String contentType, String postString, String encoding) throws Exception {\n        if (\"\".equals(encoding) || encoding == null) {\n            encoding = DefalutEncoding;\n        }\n\n        URLConnection httpUrlConn = null;\n        HttpsURLConnection hsc = null;\n        HttpURLConnection hc = null;\n        InputStream inputStream = null;\n\n        String result;\n        try {\n            URL url = new URL(requestUrl);\n            if (requestUrl.startsWith(\"https\")) {\n                SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n                TrustManager[] tm = new TrustManager[]{new X509TrustUtiil()};\n                sslContext.init(null, tm, new SecureRandom());\n                SSLSocketFactory ssf = sslContext.getSocketFactory();\n                hsc = (HttpsURLConnection) url.openConnection();\n                hsc.setSSLSocketFactory(ssf);\n                hsc.setHostnameVerifier(allHostsValid);\n                httpUrlConn = hsc;\n            } else {\n                hc = (HttpURLConnection) url.openConnection();\n                hc.setRequestMethod(requestMethod);\n                hc.setInstanceFollowRedirects(false);\n                httpUrlConn = hc;\n            }\n\n            httpUrlConn.setConnectTimeout(timeOut);\n            httpUrlConn.setReadTimeout(timeOut);\n            if (contentType != null && !\"\".equals(contentType)) {\n                httpUrlConn.setRequestProperty(\"Content-Type\", contentType);\n            }\n\n            httpUrlConn.setDoOutput(true);\n            httpUrlConn.setDoInput(true);\n            httpUrlConn.connect();\n            if (null != postString && !\"\".equals(postString)) {\n                OutputStream outputStream = httpUrlConn.getOutputStream();\n                outputStream.write(postString.getBytes(encoding));\n                outputStream.flush();\n                outputStream.close();\n            }\n\n            inputStream = httpUrlConn.getInputStream();\n            result = readString(inputStream, encoding);\n            return result;\n        } catch (IOException var18) {\n            if (hsc == null) {\n                if (hc != null) {\n                    result = readString(hc.getErrorStream(), encoding);\n                    return result;\n                }\n                result = \"\";\n                return result;\n            }\n            result = readString(hsc.getErrorStream(), encoding);\n        } finally {\n            if (hsc != null) {\n                hsc.disconnect();\n            }\n            if (hc != null) {\n                hc.disconnect();\n            }\n        }\n        return result;\n    }\n\n    public static String readString(InputStream inputStream, String encoding) throws IOException {\n        BufferedInputStream bis = null;\n        ByteArrayOutputStream baos = null;\n\n        try {\n            bis = new BufferedInputStream(inputStream);\n            baos = new ByteArrayOutputStream();\n            byte[] arr = new byte[1];\n\n            int len;\n            while ((len = bis.read(arr)) != -1) {\n                baos.write(arr, 0, len);\n            }\n        } finally {\n            if (baos != null) {\n                baos.flush();\n                baos.close();\n            }\n            if (bis != null) {\n                bis.close();\n            }\n            if (inputStream != null) {\n                inputStream.close();\n            }\n            return baos.toString(encoding);\n        }\n    }\n\n    static class X509TrustUtiil implements X509TrustManager {\n        @Override\n        public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        }\n\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport javax.net.ssl.*;\n\npublic class HttpUtil {\n    private static final int TIMEOUT = 5000;\n    private static final String DEFAULT_ENCODING = \"UTF-8\";\n    private static final Map<String, String> currentProxy = null;\n    private static final HostnameVerifier allHostsValid = (hostname, session) -> true;\n\n    static {\n        try {\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, new TrustManager[]{new X509TrustUtiil()}, new SecureRandom());\n            HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());\n            HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static String httpRequest(String requestUrl, int timeOut, String requestMethod, String contentType, String postString, String encoding) throws IOException {\n        int timeout = timeOut > 0 ? timeOut : TIMEOUT;\n        String enc = encoding != null ? encoding : DEFAULT_ENCODING;\n\n        URL url = new URL(requestUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\n        if (requestMethod != null) {\n            connection.setRequestMethod(requestMethod);\n        }\n\n        if (contentType != null) {\n            connection.setRequestProperty(\"Content-Type\", contentType);\n        }\n\n        connection.setConnectTimeout(timeout);\n        connection.setReadTimeout(timeout);\n\n        if (requestMethod != null && requestMethod.equals(\"POST\")) {\n            connection.setDoOutput(true);\n            try (OutputStream os = connection.getOutputStream()) {\n                os.write(postString.getBytes(enc));\n            }\n        }\n\n        int responseCode = connection.getResponseCode();\n        InputStream inputStream;\n\n        if (responseCode >= 400) {\n            inputStream = connection.getErrorStream();\n        } else {\n            inputStream = connection.getInputStream();\n        }\n\n        String result = readString(inputStream, enc);\n\n        connection.disconnect();\n        return result;\n    }\n\n    private static String readString(InputStream inputStream, String encoding) throws IOException {\n        if (inputStream == null) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, encoding))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line).append(\"\\n\");\n            }\n        }\n        return sb.toString();\n    }\n\n    static class X509TrustUtiil implements X509TrustManager {\n        public void checkClientTrusted(X509Certificate[] chain, String authType) {}\n        public void checkServerTrusted(X509Certificate[] chain, String authType) {}\n        public X509Certificate[] getAcceptedIssuers() {\n            return new X509Certificate[0];\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 500,
    "Instruction": "Task Description: Create a gRPC client class in Java that connects to both full and solidity nodes of a blockchain network, allowing for transaction creation and broadcasting.\n\nClass Description: The GrpcClient class establishes gRPC connections to blockchain nodes (full and solidity) and provides methods for transaction operations. It manages channel lifecycle and provides blocking stub interfaces for synchronous communication.\n\nAttributes:\n- channelFull: [ManagedChannel] - Channel for connection to the full node\n- channelSolidity: [ManagedChannel] - Channel for connection to the solidity node\n- blockingStubFull: [WalletGrpc.WalletBlockingStub] - Blocking stub for full node operations\n- blockingStubSolidity: [WalletSolidityGrpc.WalletSolidityBlockingStub] - Blocking stub for solidity node operations\n- blockingStubExtension: [WalletExtensionGrpc.WalletExtensionBlockingStub] - Blocking stub for extension operations\n\nMethods:\n- GrpcClient(String fullnode, String soliditynode) -> [void] - Constructor that initializes connections to specified nodes\n- shutdown() -> [void] - Gracefully shuts down all active channels\n- createTransaction(AccountUpdateContract contract) -> [Transaction] - Creates a transaction using the full node stub\n- broadcastTransaction(Transaction signaturedTransaction) -> [boolean] - Broadcasts a signed transaction and returns operation result",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.api.WalletGrpc;\nimport org.tron.api.WalletSolidityGrpc;\nimport org.tron.api.WalletExtensionGrpc;\n\npublic class GrpcClient {\n\n  private ManagedChannel channelFull = null;\n  private ManagedChannel channelSolidity = null;\n  private WalletGrpc.WalletBlockingStub blockingStubFull = null;\n  private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity = null;\n  private WalletExtensionGrpc.WalletExtensionBlockingStub blockingStubExtension = null;\n\n  public GrpcClient(String fullnode, String soliditynode) {\n    if (!(fullnode.isEmpty())) {\n      channelFull = ManagedChannelBuilder.forTarget(fullnode)\n          .usePlaintext()\n          .build();\n      blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n    }\n    if (!(soliditynode.isEmpty())) {\n      channelSolidity = ManagedChannelBuilder.forTarget(soliditynode)\n          .usePlaintext()\n          .build();\n      blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n      blockingStubExtension = WalletExtensionGrpc.newBlockingStub(channelSolidity);\n    }\n  }\n\n  public void shutdown() throws InterruptedException {\n    if (channelFull != null) {\n      channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n    }\n    if (channelSolidity != null) {\n      channelSolidity.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n    }\n  }\n\n  public Transaction createTransaction(AccountUpdateContract contract) {\n    return blockingStubFull.updateAccount(contract);\n  }\n\n  public boolean broadcastTransaction(Transaction signaturedTransaction) {\n    GrpcAPI.Return response = blockingStubFull.broadcastTransaction(signaturedTransaction);\n    return response.getResult();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport com.example.WalletGrpc;\nimport com.example.WalletSolidityGrpc;\nimport com.example.WalletExtensionGrpc;\nimport com.example.AccountUpdateContract;\nimport com.example.Transaction;\n\npublic class GrpcClient {\n    private ManagedChannel channelFull;\n    private ManagedChannel channelSolidity;\n    private WalletGrpc.WalletBlockingStub blockingStubFull;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity;\n    private WalletExtensionGrpc.WalletExtensionBlockingStub blockingStubExtension;\n\n    public GrpcClient(String fullnode, String soliditynode) {\n        String[] fullParts = fullnode.split(\":\");\n        String fullHost = fullParts[0];\n        int fullPort = Integer.parseInt(fullParts[1]);\n        channelFull = ManagedChannelBuilder.forAddress(fullHost, fullPort).usePlaintext().build();\n\n        String[] solidityParts = soliditynode.split(\":\");\n        String solidityHost = solidityParts[0];\n        int solidityPort = Integer.parseInt(solidityParts[1]);\n        channelSolidity = ManagedChannelBuilder.forAddress(solidityHost, solidityPort).usePlaintext().build();\n\n        blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n        blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n        blockingStubExtension = WalletExtensionGrpc.newBlockingStub(channelFull);\n    }\n\n    public void shutdown() {\n        if (channelFull != null) {\n            channelFull.shutdown();\n        }\n        if (channelSolidity != null) {\n            channelSolidity.shutdown();\n        }\n    }\n\n    public Transaction createTransaction(AccountUpdateContract contract) {\n        return blockingStubFull.createTransaction(contract);\n    }\n\n    public boolean broadcastTransaction(Transaction signaturedTransaction) {\n        return blockingStubSolidity.broadcastTransaction(signaturedTransaction);\n    }\n}"
  },
  {
    "Task_id": 501,
    "Instruction": "Task Description: Create a gRPC client class in Java for interacting with a Tron blockchain wallet service, implementing various wallet operations through gRPC calls.\n\nClass Description: The WalletGrpcClient class provides a Java interface to interact with a Tron blockchain node's wallet service using gRPC. It handles connection management and provides methods for account queries, transaction creation, and blockchain data retrieval.\n\nAttributes:\n- channel: [ManagedChannel] - The gRPC communication channel to the server\n- walletBlockingStub: [WalletGrpc.WalletBlockingStub] - The blocking stub for making synchronous RPC calls\n\nMethods:\n- WalletGrpcClient(String host, int port) - Constructor - Creates a client connecting to specified host and port\n- WalletGrpcClient(String host) - Constructor - Creates a client connecting to specified host (using target format)\n- shutdown() -> void - Shuts down the channel with 5-second timeout\n- queryAccount(byte[] address) -> Account - Queries account information by address\n- createTransaction(TransferContract contract) -> Transaction - Creates a transfer transaction\n- createTransferAssetTransaction(TransferAssetContract contract) -> Transaction - Creates an asset transfer transaction\n- createParticipateAssetIssueTransaction(ParticipateAssetIssueContract contract) -> Transaction - Creates an asset participation transaction\n- createAssetIssue(AssetIssueContract contract) -> Transaction - Creates an asset issuance transaction\n- voteWitnessAccount(VoteWitnessContract contract) -> Transaction - Creates a witness voting transaction\n- createWitness(WitnessCreateContract contract) -> Transaction - Creates a witness creation transaction\n- broadcastTransaction(Transaction signedTransaction) -> boolean - Broadcasts a signed transaction to network\n- getBlock(long blockNum) -> Block - Retrieves block by number (or latest if negative)\n- listNodes() -> Optional<NodeList> - Lists connected nodes\n- getAssetIssueByAccount(byte[] address) -> Optional<AssetIssueList> - Gets assets issued by account\n- getAssetIssueByName(String assetName) -> AssetIssueContract - Gets asset by name\n- getAssetIssueListByName(String assetName) -> Optional<AssetIssueList> - Gets asset list by name\n- getAssetIssueById(String assetId) -> AssetIssueContract - Gets asset by ID",
    "Canonical_solution": "import com.google.protobuf.ByteString;\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.api.GrpcAPI.AssetIssueList;\nimport org.tron.api.GrpcAPI.BytesMessage;\nimport org.tron.api.GrpcAPI.EmptyMessage;\nimport org.tron.api.GrpcAPI.NodeList;\nimport org.tron.api.GrpcAPI.NumberMessage;\nimport org.tron.api.GrpcAPI.Return;\nimport org.tron.api.WalletGrpc;\nimport org.tron.protos.Protocol.Account;\nimport org.tron.protos.Protocol.Block;\nimport org.tron.protos.Protocol.Transaction;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.AssetIssueContract;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.ParticipateAssetIssueContract;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.TransferAssetContract;\nimport org.tron.protos.contract.BalanceContract.TransferContract;\nimport org.tron.protos.contract.WitnessContract.VoteWitnessContract;\nimport org.tron.protos.contract.WitnessContract.WitnessCreateContract;\n\npublic class WalletGrpcClient {\n\n  private final ManagedChannel channel;\n  private final WalletGrpc.WalletBlockingStub walletBlockingStub;\n\n  public WalletGrpcClient(String host, int port) {\n    channel = ManagedChannelBuilder.forAddress(host, port)\n        .usePlaintext()\n        .build();\n    walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n  }\n\n  public WalletGrpcClient(String host) {\n    channel = ManagedChannelBuilder.forTarget(host)\n        .usePlaintext()\n        .build();\n    walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n  }\n\n  public void shutdown() throws InterruptedException {\n    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n  }\n\n  public Account queryAccount(byte[] address) {\n    ByteString addressByteString = ByteString.copyFrom(address);\n    Account request = Account.newBuilder().setAddress(addressByteString).build();\n    return walletBlockingStub.getAccount(request);\n  }\n\n  public Transaction createTransaction(TransferContract contract) {\n    return walletBlockingStub.createTransaction(contract);\n  }\n\n  public Transaction createTransferAssetTransaction(TransferAssetContract contract) {\n    return walletBlockingStub.transferAsset(contract);\n  }\n\n  public Transaction createParticipateAssetIssueTransaction(\n      ParticipateAssetIssueContract contract) {\n    return walletBlockingStub.participateAssetIssue(contract);\n  }\n\n  public Transaction createAssetIssue(AssetIssueContract contract) {\n    return walletBlockingStub.createAssetIssue(contract);\n  }\n\n  public Transaction voteWitnessAccount(VoteWitnessContract contract) {\n    return walletBlockingStub.voteWitnessAccount(contract);\n  }\n\n  public Transaction createWitness(WitnessCreateContract contract) {\n    return walletBlockingStub.createWitness(contract);\n  }\n\n  public boolean broadcastTransaction(Transaction signedTransaction) {\n    Return response = walletBlockingStub.broadcastTransaction(signedTransaction);\n    return response.getResult();\n  }\n\n  public Block getBlock(long blockNum) {\n    if (blockNum < 0) {\n      return walletBlockingStub.getNowBlock(EmptyMessage.newBuilder().build());\n    }\n    NumberMessage.Builder builder = NumberMessage.newBuilder();\n    builder.setNum(blockNum);\n    return walletBlockingStub.getBlockByNum(builder.build());\n  }\n\n  public Optional<NodeList> listNodes() {\n    NodeList nodeList = walletBlockingStub\n        .listNodes(EmptyMessage.newBuilder().build());\n    if (nodeList != null) {\n      return Optional.of(nodeList);\n    }\n    return Optional.empty();\n  }\n\n  public Optional<AssetIssueList> getAssetIssueByAccount(byte[] address) {\n    ByteString addressByteString = ByteString.copyFrom(address);\n    Account request = Account.newBuilder().setAddress(addressByteString).build();\n    AssetIssueList assetIssueList = walletBlockingStub\n        .getAssetIssueByAccount(request);\n    if (assetIssueList != null) {\n      return Optional.of(assetIssueList);\n    }\n    return Optional.empty();\n  }\n\n  public AssetIssueContract getAssetIssueByName(String assetName) {\n    ByteString assetNameBs = ByteString.copyFrom(assetName.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetNameBs).build();\n    return walletBlockingStub.getAssetIssueByName(request);\n  }\n\n  public Optional<AssetIssueList> getAssetIssueListByName(String assetName) {\n    ByteString assetNameBs = ByteString.copyFrom(assetName.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetNameBs).build();\n\n    AssetIssueList assetIssueList = walletBlockingStub\n        .getAssetIssueListByName(request);\n    if (assetIssueList != null) {\n      return Optional.of(assetIssueList);\n    }\n    return Optional.empty();\n  }\n\n  public AssetIssueContract getAssetIssueById(String assetId) {\n    ByteString assetIdBs = ByteString.copyFrom(assetId.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetIdBs).build();\n    return walletBlockingStub.getAssetIssueById(request);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\n\npublic class WalletGrpcClient {\n    private final ManagedChannel channel;\n    private final WalletGrpc.WalletBlockingStub walletBlockingStub;\n\n    public WalletGrpcClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n        this.walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n    }\n\n    public WalletGrpcClient(String host) {\n        this.channel = ManagedChannelBuilder.forTarget(host).usePlaintext().build();\n        this.walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n    }\n\n    public void shutdown() {\n        try {\n            channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public Account queryAccount(byte[] address) {\n        return walletBlockingStub.queryAccount(QueryAccountRequest.newBuilder().setAddress(ByteString.copyFrom(address)).build());\n    }\n\n    public Transaction createTransaction(TransferContract contract) {\n        return walletBlockingStub.createTransaction(CreateTransactionRequest.newBuilder().setTransferContract(contract).build());\n    }\n\n    public Transaction createTransferAssetTransaction(TransferAssetContract contract) {\n        return walletBlockingStub.createTransferAssetTransaction(CreateTransferAssetTransactionRequest.newBuilder().setTransferAssetContract(contract).build());\n    }\n\n    public Transaction createParticipateAssetIssueTransaction(ParticipateAssetIssueContract contract) {\n        return walletBlockingStub.createParticipateAssetIssueTransaction(CreateParticipateAssetIssueTransactionRequest.newBuilder().setParticipateAssetIssueContract(contract).build());\n    }\n\n    public Transaction createAssetIssue(AssetIssueContract contract) {\n        return walletBlockingStub.createAssetIssue(CreateAssetIssueRequest.newBuilder().setAssetIssueContract(contract).build());\n    }\n\n    public Transaction voteWitnessAccount(VoteWitnessContract contract) {\n        return walletBlockingStub.voteWitnessAccount(VoteWitnessAccountRequest.newBuilder().setVoteWitnessContract(contract).build());\n    }\n\n    public Transaction createWitness(WitnessCreateContract contract) {\n        return walletBlockingStub.createWitness(CreateWitnessRequest.newBuilder().setWitnessCreateContract(contract).build());\n    }\n\n    public boolean broadcastTransaction(Transaction signedTransaction) {\n        try {\n            return walletBlockingStub.broadcastTransaction(signedTransaction).getResult();\n        } catch (StatusRuntimeException e) {\n            return false;\n        }\n    }\n\n    public Block getBlock(long blockNum) {\n        return walletBlockingStub.getBlock(GetBlockRequest.newBuilder().setNumber(blockNum).build());\n    }\n\n    public Optional<NodeList> listNodes() {\n        try {\n            return Optional.of(walletBlockingStub.listNodes(ListNodesRequest.newBuilder().build()));\n        } catch (StatusRuntimeException e) {\n            return Optional.empty();\n        }\n    }\n\n    public Optional<AssetIssueList> getAssetIssueByAccount(byte[] address) {\n        try {\n            return Optional.of(walletBlockingStub.getAssetIssueByAccount(GetAssetIssueByAccountRequest.newBuilder().setAddress(ByteString.copyFrom(address)).build()));\n        } catch (StatusRuntimeException e) {\n            return Optional.empty();\n        }\n    }\n\n    public AssetIssueContract getAssetIssueByName(String assetName) {\n        return walletBlockingStub.getAssetIssueByName(GetAssetIssueByNameRequest.newBuilder().setAssetName(assetName).build());\n    }\n\n    public Optional<AssetIssueList> getAssetIssueListByName(String assetName) {\n        try {\n            return Optional.of(walletBlockingStub.getAssetIssueListByName(GetAssetIssueListByNameRequest.newBuilder().setAssetName(assetName).build()));\n        } catch (StatusRuntimeException e) {\n            return Optional.empty();\n        }\n    }\n\n    public AssetIssueContract getAssetIssueById(String assetId) {\n        return walletBlockingStub.getAssetIssueById(GetAssetIssueByIdRequest.newBuilder().setAssetId(assetId).build());\n    }\n}\n```"
  },
  {
    "Task_id": 505,
    "Instruction": "Task Description: Create a Java class that implements a gRPC client for interacting with multiple TRON blockchain nodes (full node, solidity node, and PBFT node) to retrieve block information.\n\nClass Description: The GrpcClient class provides functionality to connect to different types of TRON blockchain nodes using gRPC protocol and retrieve block data from them. It manages multiple channel connections and provides blocking stub interfaces for synchronous calls.\n\nAttributes:\n- channelFull: [ManagedChannel] - Channel for connection to the full node\n- channelSolidity: [ManagedChannel] - Channel for connection to the solidity node\n- channelpBFT: [ManagedChannel] - Channel for connection to the PBFT node\n- blockingStubFull: [WalletGrpc.WalletBlockingStub] - Blocking stub for full node operations\n- blockingStubSolidity: [WalletSolidityGrpc.WalletSolidityBlockingStub] - Blocking stub for solidity node operations\n- blockingStubpBFT: [WalletSolidityGrpc.WalletSolidityBlockingStub] - Blocking stub for PBFT node operations\n\nMethods:\n- init: [void]([String fullnode, String solidityNode, String pBFTNode]) -> [void] - Initializes connections to all three node types by creating channels and stubs\n- getBlockFromFullNode: [GrpcAPI.Block]([long blockNum]) -> [GrpcAPI.Block] - Retrieves a block from the full node by block number\n- getBlockFromSolidityNode: [GrpcAPI.Block]([long blockNum]) -> [GrpcAPI.Block] - Retrieves a block from the solidity node by block number\n- getBlockFromPBFTNode: [GrpcAPI.Block]([long blockNum]) -> [GrpcAPI.Block] - Retrieves a block from the PBFT node by block number\n- shutdown: [void]([]) -> [void] - Gracefully shuts down all channel connections with a 5-second timeout",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.api.GrpcAPI;\nimport org.tron.api.WalletGrpc;\nimport org.tron.api.WalletSolidityGrpc;\n\npublic class GrpcClient {\n\n    private ManagedChannel channelFull;\n    private ManagedChannel channelSolidity;\n    private ManagedChannel channelpBFT;\n    private WalletGrpc.WalletBlockingStub blockingStubFull;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubpBFT;\n\n    public void init(String fullnode, String solidityNode, String pBFTNode) {\n        channelFull = ManagedChannelBuilder.forTarget(fullnode)\n                .usePlaintext()\n                .build();\n        channelSolidity = ManagedChannelBuilder.forTarget(solidityNode)\n                .usePlaintext()\n                .build();\n        channelpBFT = ManagedChannelBuilder.forTarget(pBFTNode)\n                .usePlaintext()\n                .build();\n        blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n        blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n        blockingStubpBFT = WalletSolidityGrpc.newBlockingStub(channelpBFT);\n    }\n\n    public GrpcAPI.Block getBlockFromFullNode(long blockNum) throws StatusRuntimeException {\n        GrpcAPI.NumberMessage message = GrpcAPI.NumberMessage.newBuilder().setNum(blockNum).build();\n        return blockingStubFull.getBlockByNum(message);\n    }\n\n    public GrpcAPI.Block getBlockFromSolidityNode(long blockNum) throws StatusRuntimeException {\n        GrpcAPI.NumberMessage message = GrpcAPI.NumberMessage.newBuilder().setNum(blockNum).build();\n        return blockingStubSolidity.getBlockByNum(message);\n    }\n\n    public GrpcAPI.Block getBlockFromPBFTNode(long blockNum) throws StatusRuntimeException {\n        GrpcAPI.NumberMessage message = GrpcAPI.NumberMessage.newBuilder().setNum(blockNum).build();\n        return blockingStubpBFT.getBlockByNum(message);\n    }\n\n    public void shutdown() throws InterruptedException {\n        if (channelFull != null) {\n            channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n        if (channelSolidity != null) {\n            channelSolidity.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n        if (channelpBFT != null) {\n            channelpBFT.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport com.google.protobuf.ByteString;\nimport org.tron.api.WalletGrpc;\nimport org.tron.api.WalletSolidityGrpc;\nimport org.tron.api.GrpcAPI;\n\npublic class GrpcClient {\n    private ManagedChannel channelFull;\n    private ManagedChannel channelSolidity;\n    private ManagedChannel channelpBFT;\n    private WalletGrpc.WalletBlockingStub blockingStubFull;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubpBFT;\n\n    public void init(String fullnode, String solidityNode, String pBFTNode) {\n        channelFull = ManagedChannelBuilder.forAddress(fullnode, 50051).usePlaintext().build();\n        channelSolidity = ManagedChannelBuilder.forAddress(solidityNode, 50051).usePlaintext().build();\n        channelpBFT = ManagedChannelBuilder.forAddress(pBFTNode, 50051).usePlaintext().build();\n\n        blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n        blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n        blockingStubpBFT = WalletSolidityGrpc.newBlockingStub(channelpBFT);\n    }\n\n    public GrpcAPI.Block getBlockFromFullNode(long blockNum) {\n        GrpcAPI.BlockNumOrHash blockNumOrHash = GrpcAPI.BlockNumOrHash.newBuilder().setNumber(blockNum).build();\n        return blockingStubFull.getBlockByNumber(blockNumOrHash);\n    }\n\n    public GrpcAPI.Block getBlockFromSolidityNode(long blockNum) {\n        GrpcAPI.BlockNumOrHash blockNumOrHash = GrpcAPI.BlockNumOrHash.newBuilder().setNumber(blockNum).build();\n        return blockingStubSolidity.getBlockByNumber(blockNumOrHash);\n    }\n\n    public GrpcAPI.Block getBlockFromPBFTNode(long blockNum) {\n        GrpcAPI.BlockNumOrHash blockNumOrHash = GrpcAPI.BlockNumOrHash.newBuilder().setNumber(blockNum).build();\n        return blockingStubpBFT.getBlockByNumber(blockNumOrHash);\n    }\n\n    public void shutdown() {\n        if (channelFull != null) {\n            channelFull.shutdown();\n            try {\n                channelFull.awaitTermination(5, java.util.concurrent.TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n        if (channelSolidity != null) {\n            channelSolidity.shutdown();\n            try {\n                channelSolidity.awaitTermination(5, java.util.concurrent.TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n        if (channelpBFT != null) {\n            channelpBFT.shutdown();\n            try {\n                channelpBFT.awaitTermination(5, java.util.concurrent.TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 506,
    "Instruction": "Task Description: Implement a gRPC server in Java that handles streaming requests and responses, following the structure and functionality of the provided reference code.\n\nClass Description: The HelloWorldServer class represents a gRPC server that listens on a specified port and provides a streaming greeting service. It manages server lifecycle operations (start, stop, await termination) and implements the gRPC service interface for handling client requests.\n\nAttributes:\n- server: [Server] - The gRPC server instance that handles incoming requests\n- logger: [Logger] - Logger instance for server activity logging\n\nMethods:\n- start() -> [void] - Starts the gRPC server on the specified port (50051 by default) and registers a shutdown hook for graceful termination. Throws IOException if server fails to start.\n- stop() -> [void] - Initiates graceful shutdown of the gRPC server if it's running\n- blockUntilShutdown() -> [void] - Blocks the calling thread until the server terminates. Throws InterruptedException if the thread is interrupted while waiting.\n\nNested Class:\n- GreeterImpl: [StreamingGreeterGrpc.StreamingGreeterImplBase] - Implements the gRPC service interface with streaming capabilities\n  Methods:\n  - sayHelloStreaming(HelloRequest req, StreamObserver<HelloReply> responseObserver) -> [void] - Handles client requests by sending multiple greeting responses in a stream. Takes a HelloRequest containing the client's name and a StreamObserver for sending responses. Sends three greeting messages with increasing excitement, then completes the stream.",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.examples.streaming.HelloReply;\nimport io.grpc.examples.streaming.HelloRequest;\nimport io.grpc.examples.streaming.StreamingGreeterGrpc;\nimport io.grpc.stub.StreamObserver;\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\npublic class HelloWorldServer {\n  private static final Logger logger = Logger.getLogger(HelloWorldServer.class.getName());\n  private Server server;\n\n  public void start() throws IOException {\n    int port = 50051;\n    server = ServerBuilder.forPort(port).addService(new GreeterImpl()).build().start();\n    logger.info(\"Server started, listening on \" + port);\n    Runtime.getRuntime()\n        .addShutdownHook(\n            new Thread() {\n              @Override\n              public void run() {\n                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n                HelloWorldServer.this.stop();\n                System.err.println(\"*** server shut down\");\n              }\n            });\n  }\n\n  public void stop() {\n    if (server != null) {\n      server.shutdown();\n    }\n  }\n\n  public void blockUntilShutdown() throws InterruptedException {\n    if (server != null) {\n      server.awaitTermination();\n    }\n  }\n\n  static class GreeterImpl extends StreamingGreeterGrpc.StreamingGreeterImplBase {\n    @Override\n    public void sayHelloStreaming(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n      try {\n        logger.info(\"Saying hi\");\n        responseObserver.onNext(\n            HelloReply.newBuilder().setMessage(\"Hello \" + req.getName()).build());\n        Thread.sleep(100);\n        logger.info(\"Saying hi\");\n        responseObserver.onNext(\n            HelloReply.newBuilder().setMessage(\"Hello \" + req.getName() + \"!\").build());\n        Thread.sleep(100);\n        logger.info(\"Saying hi\");\n        responseObserver.onNext(\n            HelloReply.newBuilder().setMessage(\"Hello \" + req.getName() + \"!!\").build());\n      } catch (InterruptedException e) {\n        responseObserver.onError(e);\n      } finally {\n        responseObserver.onCompleted();\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.StreamObserver;\nimport java.util.logging.Logger;\n\npublic class HelloWorldServer {\n    private final Server server;\n    private static final Logger logger = Logger.getLogger(HelloWorldServer.class.getName());\n\n    public HelloWorldServer(int port) throws IOException {\n        this.server = ServerBuilder.forPort(port)\n                .addService(new GreeterImpl())\n                .build();\n    }\n\n    public void start() throws IOException {\n        server.start();\n        logger.info(\"Server started on port \" + server.getPort());\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            logger.info(\"Shutting down server...\");\n            HelloWorldServer.this.stop();\n        }));\n    }\n\n    public void stop() {\n        if (server != null) {\n            server.shutdown();\n        }\n    }\n\n    public void blockUntilShutdown() throws InterruptedException {\n        server.awaitTermination();\n    }\n\n    static class GreeterImpl extends StreamingGreeterGrpc.StreamingGreeterImplBase {\n        @Override\n        public void sayHelloStreaming(HelloRequest request, StreamObserver<HelloReply> responseObserver) {\n            String name = request.getName();\n            for (int i = 0; i < 3; i++) {\n                String message = \"Hello \" + name + \"!\" + \" (\" + (i + 1) + \"x)\";\n                HelloReply reply = HelloReply.newBuilder().setMessage(message).build();\n                responseObserver.onNext(reply);\n            }\n            responseObserver.onCompleted();\n        }\n    }\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n        int port = 50051;\n        HelloWorldServer server = new HelloWorldServer(port);\n        server.start();\n        server.blockUntilShutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 508,
    "Instruction": "Task Description: Implement a gRPC server in Java that listens for incoming requests and provides book-related services. The server should start on a specified port, handle graceful shutdown, and wait for termination.\n\nClass Description: The BookServer class represents a gRPC server implementation that hosts book-related services. It manages server lifecycle including startup, shutdown, and termination waiting.\n\nAttributes:\n- server: [io.grpc.Server] - The gRPC server instance that handles incoming requests\n- logger: [java.util.logging.Logger] - Logger instance for server status messages\n\nMethods:\n- start() -> [void] - Starts the gRPC server on the default port (50051) and registers the BookService. Also adds a shutdown hook for graceful termination.\n- stop() -> [void] - Initiates a graceful shutdown of the gRPC server if it's running.\n- blockUntilShutdown() -> [void] - Blocks the main thread until the server is terminated.\n- main(String[] args) -> [void] - Entry point that creates and starts the server, then waits for shutdown. Throws IOException and InterruptedException.\n\nThe class follows gRPC server best practices including:\n1. Using ServerBuilder to create and configure the server\n2. Adding services before starting\n3. Implementing graceful shutdown\n4. Proper error handling\n5. Logging server status",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\npublic class BookServer {\n  private static final Logger logger = Logger.getLogger(BookServer.class.getName());\n\n  private Server server;\n\n  private void start() throws IOException {\n    int port = 50051;\n    server = ServerBuilder.forPort(port).addService(new BookService()).build().start();\n    logger.info(\"Server started, listening on \" + port);\n    Runtime.getRuntime()\n        .addShutdownHook(\n            new Thread(\n                () -> {\n                  System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n                  BookServer.this.stop();\n                  System.err.println(\"*** server shut down\");\n                }));\n  }\n\n  private void stop() {\n    if (server != null) {\n      server.shutdown();\n    }\n  }\n\n  private void blockUntilShutdown() throws InterruptedException {\n    if (server != null) {\n      server.awaitTermination();\n    }\n  }\n\n  public static void main(String[] args) throws IOException, InterruptedException {\n    final BookServer server = new BookServer();\n    server.start();\n    server.blockUntilShutdown();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class BookServer {\n    private Server server;\n    private static final Logger logger = Logger.getLogger(BookServer.class.getName());\n\n    public void start() throws IOException {\n        server = ServerBuilder.forPort(50051)\n                .addService(new BookServiceImpl())\n                .build();\n        server.start();\n        logger.info(\"Server started on port 50051\");\n        Runtime.getRuntime().addShutdownHook(new Thread(this::stop));\n    }\n\n    public void stop() {\n        if (server != null) {\n            logger.info(\"Shutting down server...\");\n            server.shutdown();\n            try {\n                server.awaitTermination(5, java.util.concurrent.TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                logger.log(Level.SEVERE, \"Server shutdown interrupted\", e);\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n\n    public void blockUntilShutdown() throws InterruptedException {\n        server.awaitTermination();\n    }\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n        BookServer bookServer = new BookServer();\n        bookServer.start();\n        bookServer.blockUntilShutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 510,
    "Instruction": "Task Description: Create a Java class that implements a gRPC server using NettyServerBuilder to handle multiple language processing services.\n\nClass Description: The ZemberekGrpcServer class is responsible for initializing and managing a gRPC server that provides various Turkish language processing services. It uses Netty as the underlying transport layer and allows configuration of the server port and service implementations.\n\nAttributes:\n- port: [int] - The port number on which the gRPC server will listen for incoming connections.\n- context: [ZemberekContext] - The context object containing configuration and resources for language processing services.\n- DEFAULT_PORT: [static final int] - The default port number (6789) used when no specific port is provided.\n\nMethods:\n- Constructor: [ZemberekGrpcServer](int port, ZemberekGrpcConfiguration configuration) -> [void] - Initializes the server with the specified port and configuration.\n- getPort: [getPort]() -> [int] - Returns the port number the server is configured to use.\n- getContext: [getContext]() -> [ZemberekContext] - Returns the ZemberekContext object containing service configurations.\n- start: [start]() -> [void] - Starts the gRPC server, adds all service implementations, and begins listening for requests. This method blocks until the server terminates.\n- main: [main](String[] args) -> [void] - The entry point that creates and starts the server using default parameters.",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.netty.shaded.io.grpc.netty.NettyServerBuilder;\nimport zemberek.core.logging.Log;\n\npublic class ZemberekGrpcServer {\n\n    public static final int DEFAULT_PORT = 6789;\n\n    private final int port;\n    private ZemberekContext context;\n\n    public ZemberekGrpcServer(int port, ZemberekGrpcConfiguration configuration) {\n        this.port = port;\n        context = new ZemberekContext(configuration);\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public ZemberekContext getContext() {\n        return context;\n    }\n\n    public void start() throws Exception {\n        Server server = NettyServerBuilder.forPort(port)\n                .addService(new LanguageIdServiceImpl())\n                .addService(new PreprocessingServiceImpl())\n                .addService(new NormalizationServiceImpl(context))\n                .addService(new MorphologyServiceImpl(context))\n                .build()\n                .start();\n        Log.info(\"Zemberek grpc server started at port: \" + port);\n        server.awaitTermination();\n    }\n\n    public static void main(String[] args) throws Exception {\n        new ZemberekGrpcServer(DEFAULT_PORT, null).start();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.netty.NettyServerBuilder;\nimport java.io.IOException;\n\npublic class ZemberekGrpcServer {\n    private final int port;\n    private final ZemberekContext context;\n    public static final int DEFAULT_PORT = 6789;\n\n    public ZemberekGrpcServer(int port, ZemberekGrpcConfiguration configuration) {\n        this.port = port;\n        this.context = configuration.getContext();\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public ZemberekContext getContext() {\n        return context;\n    }\n\n    public void start() throws IOException {\n        Server server = NettyServerBuilder.forPort(port)\n            .addService(context.getLanguageService())\n            .addService(context.getAnalysisService())\n            .build()\n            .start();\n        System.out.println(\"Server started on port \" + port);\n        server.awaitTermination();\n    }\n\n    public static void main(String[] args) {\n        int port = DEFAULT_PORT;\n        ZemberekGrpcConfiguration config = new ZemberekGrpcConfiguration();\n        ZemberekGrpcServer server = new ZemberekGrpcServer(port, config);\n        try {\n            server.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 511,
    "Instruction": "Task Description: Create a Java class that implements a gRPC server launcher for Spring Boot applications, capable of registering multiple gRPC services and managing server lifecycle.\n\nClass Description: The GrpcLauncher class is responsible for starting and managing a gRPC server in a Spring Boot application. It automatically discovers gRPC service beans, configures server parameters, and handles graceful shutdown. The class uses Lombok for logging and Spring's dependency injection.\n\nAttributes:\n- server: [Server] - The gRPC server instance\n- grpcServerPort: [Integer] - The port number for the gRPC server, injected from application properties\n- DEFAULT_MAX_MESSAGE_SIZE: [int] - Constant defining the maximum message size (10MB)\n\nMethods:\n- grpcStart: [grpcStart](Map<String, Object> grpcServiceBeanMap) -> void - Initializes and starts the gRPC server, registering all provided gRPC service beans. Handles server lifecycle and shutdown hooks.\n- grpcStop: [grpcStop]() -> void - Shuts down the gRPC server gracefully when called, typically during application termination.",
    "Canonical_solution": "import io.grpc.BindableService;\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.util.Map;\n\n@Slf4j\n@Component(\"grpcLauncher\")\npublic class GrpcLauncher {\n\n    public static final int DEFAULT_MAX_MESSAGE_SIZE = 10 * 1024 * 1024;\n\n    private Server server;\n\n    @Value(\"${server.grpc.port}\")\n    private Integer grpcServerPort;\n\n    public void grpcStart(Map<String, Object> grpcServiceBeanMap) {\n        try {\n            ServerBuilder serverBuilder = ServerBuilder.forPort(grpcServerPort);\n            for (Object bean : grpcServiceBeanMap.values()){\n                serverBuilder.addService((BindableService) bean);\n                log.info(\"{} is register in Spring Boot\", bean.getClass().getSimpleName());\n            }\n            server = serverBuilder\n                .maxInboundMessageSize(DEFAULT_MAX_MESSAGE_SIZE)\n                .maxInboundMetadataSize(DEFAULT_MAX_MESSAGE_SIZE)\n                .build().start();\n            log.info(\"grpc server is started at {}\", grpcServerPort);\n            server.awaitTermination();\n            Runtime.getRuntime().addShutdownHook(new Thread(this::grpcStop));\n        } catch (IOException | InterruptedException e){\n            e.printStackTrace();\n        }\n    }\n\n    private void grpcStop(){\n        if (server != null){\n            server.shutdownNow();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.ServerServiceDefinition;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.util.Map;\n\n@Component\n@Slf4j\npublic class GrpcLauncher {\n\n    private Server server;\n\n    @Value(\"${grpc.server.port}\")\n    private int grpcServerPort;\n\n    private static final int DEFAULT_MAX_MESSAGE_SIZE = 10 * 1024 * 1024;\n\n    public void grpcStart(Map<String, Object> grpcServiceBeanMap) {\n        server = ServerBuilder.forPort(grpcServerPort)\n                .maxMessageSize(DEFAULT_MAX_MESSAGE_SIZE)\n                .build();\n\n        for (Object service : grpcServiceBeanMap.values()) {\n            if (service instanceof ServerServiceDefinition) {\n                server.addService((ServerServiceDefinition) service);\n            }\n        }\n\n        try {\n            server.start();\n            log.info(\"gRPC server started on port {}\", grpcServerPort);\n            Runtime.getRuntime().addShutdownHook(new Thread(this::grpcStop));\n        } catch (Exception e) {\n            log.error(\"Failed to start gRPC server\", e);\n        }\n    }\n\n    public void grpcStop() {\n        if (server != null) {\n            log.info(\"Shutting down gRPC server...\");\n            server.shutdown();\n            try {\n                server.awaitTermination(10, java.util.concurrent.TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                log.error(\"gRPC server shutdown interrupted\", e);\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 512,
    "Instruction": "Task Description: Create a Java class that implements a gRPC server for a simple \"Hello World\" service, following the gRPC framework conventions. The server should handle incoming requests, process them, and send back appropriate responses, while also managing server lifecycle operations.\n\nClass Description: The HelloWorldServer class is a gRPC server implementation that listens on a specified port, handles incoming gRPC requests for a greeting service, and manages server startup and shutdown operations. It includes an inner class that implements the actual gRPC service logic.\n\nAttributes:\n- server: [io.grpc.Server] - The gRPC server instance that handles incoming requests\n- logger: [java.util.logging.Logger] - Logger instance for server status messages\n\nMethods:\n- start() -> [void] - Starts the gRPC server on a predefined port (50051) and registers the Greeter service implementation. Also adds a shutdown hook for graceful termination.\n- stop() -> [void] - Stops the gRPC server if it's running\n- blockUntilShutdown() -> [void] - Blocks the main thread until the server is terminated\n- main(String[] args) -> [void] - Entry point that creates and starts the server instance\n- GreeterImpl.sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) -> [void] - Implementation of the gRPC service method that processes HelloRequest and sends HelloReply",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.examples.helloworld.GreeterGrpc;\nimport io.grpc.examples.helloworld.HelloReply;\nimport io.grpc.examples.helloworld.HelloRequest;\nimport io.grpc.stub.StreamObserver;\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\npublic class HelloWorldServer {\n  private static final Logger logger = Logger.getLogger(HelloWorldServer.class.getName());\n\n  private Server server;\n\n  private void start() throws IOException {\n    int port = 50051;\n    server = ServerBuilder.forPort(port).addService(new GreeterImpl()).build().start();\n    logger.info(\"Server started, listening on \" + port);\n    Runtime.getRuntime()\n        .addShutdownHook(\n            new Thread() {\n              @Override\n              public void run() {\n                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n                HelloWorldServer.this.stop();\n                System.err.println(\"*** server shut down\");\n              }\n            });\n  }\n\n  private void stop() {\n    if (server != null) {\n      server.shutdown();\n    }\n  }\n\n  private void blockUntilShutdown() throws InterruptedException {\n    if (server != null) {\n      server.awaitTermination();\n    }\n  }\n\n  public static void main(String[] args) throws IOException, InterruptedException {\n    final HelloWorldServer server = new HelloWorldServer();\n    server.start();\n    server.blockUntilShutdown();\n  }\n\n  static class GreeterImpl extends GreeterGrpc.GreeterImplBase {\n    @Override\n    public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n      HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello \" + req.getName()).build();\n      responseObserver.onNext(reply);\n      responseObserver.onCompleted();\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.StreamObserver;\nimport java.util.logging.Logger;\n\npublic class HelloWorldServer {\n    private final Server server;\n    private final Logger logger = Logger.getLogger(HelloWorldServer.class.getName());\n\n    private HelloWorldServer(int port) throws java.io.IOException {\n        this.server = ServerBuilder.forPort(port)\n                .addService(new GreeterImpl())\n                .build();\n    }\n\n    public void start() throws java.io.IOException {\n        server.start();\n        logger.info(\"Server started, listening on \" + server.getPort());\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            System.err.println(\"Shutting down gRPC server...\");\n            try {\n                HelloWorldServer.this.stop();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.err.println(\"Server shut down.\");\n        }));\n    }\n\n    public void stop() throws InterruptedException {\n        if (server != null) {\n            server.shutdown().awaitTermination();\n        }\n    }\n\n    public void blockUntilShutdown() throws InterruptedException {\n        server.awaitTermination();\n    }\n\n    public static void main(String[] args) throws java.io.IOException, InterruptedException {\n        int port = 50051;\n        HelloWorldServer server = new HelloWorldServer(port);\n        server.start();\n        server.blockUntilShutdown();\n    }\n\n    static class GreeterImpl extends GreeterGrpc.GreeterImplBase {\n        @Override\n        public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {\n            HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello \" + request.getName()).build();\n            responseObserver.onNext(reply);\n            responseObserver.onCompleted();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 513,
    "Instruction": "Task Description: Create a gRPC server in Java that handles data requests, including synchronous, streaming, and bidirectional streaming operations, with Prometheus monitoring integration.\n\nClass Description: DataHandler is a gRPC server implementation that processes various types of data requests. It includes metrics collection through Prometheus and provides three main service methods for data operations.\n\nAttributes:\n- LOG: [Logger] - Logger instance for server operations logging\n- PORT: [int] - Port number for the gRPC server (1111)\n- syncRequests: [Counter] - Prometheus counter for tracking synchronous requests\n- streamingRequests: [Counter] - Prometheus counter for tracking streaming requests\n- grpcServer: [Server] - gRPC server instance\n- prometheusHttpServer: [HTTPServer] - Prometheus HTTP server for metrics exposure\n\nMethods:\n- start() -> [void] - Initializes and starts the gRPC server with Prometheus monitoring interceptor\n- blockUntilShutdown() -> [void] - Blocks the main thread until server shutdown\n- stop() -> [void] - Gracefully shuts down the gRPC server\n\nNested Class: DataImpl extends DataServiceGrpc.DataServiceImplBase and implements three service methods:\n- get([DataRequest], [StreamObserver<DataResponse>]) -> [void] - Handles synchronous data requests (converts input to uppercase)\n- streamingGet([EmptyRequest], [StreamObserver<DataResponse>]) -> [void] - Streams 10 sequential responses\n- streamingPut([StreamObserver<DataRequest>]) -> [StreamObserver<DataResponse>] - Handles bidirectional streaming (modifies and collects input data)",
    "Canonical_solution": "import colossus.data.Data;\nimport colossus.data.DataServiceGrpc;\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.ServerInterceptors;\nimport io.grpc.stub.StreamObserver;\nimport io.prometheus.client.CollectorRegistry;\nimport io.prometheus.client.Counter;\nimport io.prometheus.client.exporter.HTTPServer;\nimport me.dinowernli.grpc.prometheus.Configuration;\nimport me.dinowernli.grpc.prometheus.MonitoringServerInterceptor;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Logger;\nimport java.util.stream.IntStream;\n\npublic class DataHandler {\n    private static final Logger LOG = Logger.getLogger(DataHandler.class.getName());\n    private static final int PORT = 1111;\n    private static final Counter syncRequests = Counter.build()\n            .name(\"data_svc_sync_requests\")\n            .help(\"Sync requests to the data service\")\n            .labelNames(\"request_key\")\n            .register();\n\n    private static final Counter streamingRequests = Counter.build()\n            .name(\"data_svc_streaming_requests\")\n            .help(\"Streaming requests to the data service\")\n            .register();\n\n    private Server grpcServer;\n    private static HTTPServer prometheusHttpServer;\n\n    static class DataImpl extends DataServiceGrpc.DataServiceImplBase {\n        private static final Logger LOG = Logger.getLogger(DataImpl.class.getName());\n\n        @Override\n        public void get(Data.DataRequest req, StreamObserver<Data.DataResponse> resObserver) {\n            String request = req.getRequest();\n            LOG.info(String.format(\"Request received for the string: \\\"%s\\\"\", request));\n            String computedValue = request.toUpperCase();\n            LOG.info(String.format(\"Computed value: \\\"%s\\\"\", computedValue));\n            Data.DataResponse res = Data.DataResponse.newBuilder()\n                    .setValue(computedValue)\n                    .build();\n\n            syncRequests.labels(request).inc();\n\n            resObserver.onNext(res);\n            resObserver.onCompleted();\n        }\n\n        @Override\n        public void streamingGet(Data.EmptyRequest req, StreamObserver<Data.DataResponse> resObserver) {\n            LOG.info(\"Request received for streaming data\");\n\n            Data.DataResponse.Builder resBldr = Data.DataResponse.newBuilder();\n\n            IntStream.range(0, 10).forEach(i -> {\n                String value = String.format(\"Response %d\", i);\n\n                streamingRequests.inc();\n\n                resObserver.onNext(resBldr.setValue(value).build());\n            });\n\n            resObserver.onCompleted();\n        }\n\n        @Override\n        public StreamObserver<Data.DataRequest> streamingPut(final StreamObserver<Data.DataResponse> resObserver) {\n            return new StreamObserver<Data.DataRequest>() {\n                private List<String> items = new ArrayList<>();\n\n                @Override\n                public void onNext(Data.DataRequest req) {\n                    items.add(req.getRequest().replace(\"f\", \"9\").toUpperCase());\n                }\n\n                @Override\n                public void onError(Throwable t) {\n                    resObserver.onError(t);\n                }\n\n                @Override\n                public void onCompleted() {\n                    Data.DataResponse res = Data.DataResponse.newBuilder()\n                            .setValue(items.toString())\n                            .build();\n\n                    resObserver.onNext(res);\n                    resObserver.onCompleted();\n                }\n            };\n        }\n    }\n\n    private void start() throws IOException {\n        Configuration monitoringConfig = Configuration.cheapMetricsOnly();\n        MonitoringServerInterceptor prometheusInterceptor = MonitoringServerInterceptor.create(\n            monitoringConfig.withCollectorRegistry(new CollectorRegistry()));\n\n        grpcServer = ServerBuilder.forPort(PORT)\n            .addService(ServerInterceptors.intercept(new DataImpl().bindService(), prometheusInterceptor))\n            .build()\n            .start();\n        LOG.info(String.format(\"gRPC server successfully started on port %d\", PORT));\n    }\n\n    private void blockUntilShutdown() throws InterruptedException {\n        if (grpcServer != null) {\n            grpcServer.awaitTermination();\n        }\n    }\n\n    private void stop() {\n        if (grpcServer != null) grpcServer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.stub.StreamObserver;\nimport io.prometheus.client.CollectorRegistry;\nimport io.prometheus.client.Counter;\nimport com.sun.net.httpserver.HttpServer;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpExchange;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.TimeUnit;\n\npublic class DataHandler {\n    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(DataHandler.class);\n    private static final int PORT = 1111;\n    private final Counter syncRequests;\n    private final Counter streamingRequests;\n    private Server grpcServer;\n    private HttpServer prometheusHttpServer;\n\n    public DataHandler() {\n        syncRequests = Counter.build()\n                .name(\"grpc_sync_requests\")\n                .help(\"Number of synchronous requests\")\n                .register();\n        streamingRequests = Counter.build()\n                .name(\"grpc_streaming_requests\")\n                .help(\"Number of streaming requests\")\n                .register();\n    }\n\n    public void start() throws IOException {\n        grpcServer = ServerBuilder.forPort(PORT)\n                .addService(new DataImpl())\n                .build()\n                .start();\n        LOG.info(\"gRPC server started on port {}\", PORT);\n\n        prometheusHttpServer = HttpServer.create(new InetSocketAddress(9090), 0);\n        prometheusHttpServer.createContext(\"/metrics\", this::handleMetrics);\n        prometheusHttpServer.start();\n        LOG.info(\"Prometheus HTTP server started on port 9090\");\n    }\n\n    private void handleMetrics(HttpExchange exchange) throws IOException {\n        if (\"GET\".equals(exchange.getRequestMethod())) {\n            String metrics = CollectorRegistry.defaultRegistry.toString();\n            exchange.sendResponseHeaders(200, metrics.length());\n            exchange.getResponseBody().write(metrics.getBytes());\n            exchange.getResponseBody().close();\n        } else {\n            exchange.sendResponseHeaders(405, -1);\n        }\n    }\n\n    public void blockUntilShutdown() throws InterruptedException {\n        grpcServer.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n    }\n\n    public void stop() {\n        if (grpcServer != null) {\n            grpcServer.shutdown();\n        }\n        if (prometheusHttpServer != null) {\n            prometheusHttpServer.stop(0);\n        }\n    }\n\n    private class DataImpl extends DataServiceGrpc.DataServiceImplBase {\n        @Override\n        public void get(DataRequest request, StreamObserver<DataResponse> responseObserver) {\n            syncRequests.inc();\n            String input = request.getInput();\n            DataResponse response = DataResponse.newBuilder().setOutput(input.toUpperCase()).build();\n            responseObserver.onNext(response);\n            responseObserver.onCompleted();\n        }\n\n        @Override\n        public void streamingGet(EmptyRequest request, StreamObserver<DataResponse> responseObserver) {\n            streamingRequests.inc();\n            for (int i = 0; i < 10; i++) {\n                DataResponse response = DataResponse.newBuilder().setOutput(\"Stream \" + i).build();\n                responseObserver.onNext(response);\n            }\n            responseObserver.onCompleted();\n        }\n\n        @Override\n        public StreamObserver<DataRequest> streamingPut(StreamObserver<DataResponse> responseObserver) {\n            streamingRequests.inc();\n            return new StreamObserver<DataRequest>() {\n                @Override\n                public void onNext(DataRequest request) {\n                    String input = request.getInput();\n                    DataResponse response = DataResponse.newBuilder().setOutput(input + \" (processed)\").build();\n                    responseObserver.onNext(response);\n                }\n\n                @Override\n                public void onCompleted() {\n                    responseObserver.onCompleted();\n                }\n\n                @Override\n                public void onError(Throwable t) {\n                    responseObserver.onError(t);\n                }\n            };\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 514,
    "Instruction": "Task Description: Implement a gRPC server in Java that listens on a specified port, provides a service, and handles graceful shutdown.\n\nClass Description: The ShelfServer class is responsible for creating and managing a gRPC server instance. It initializes the server on a specified port, adds the required service implementation, and provides methods for starting, stopping, and waiting for server termination.\n\nAttributes:\n- server: [io.grpc.Server] - The gRPC server instance that handles incoming requests\n- logger: [java.util.logging.Logger] - Logger instance for server status messages\n\nMethods:\n- start() -> [void] - Starts the gRPC server on the specified port (50052 by default) and registers a shutdown hook for graceful termination. Throws IOException if server fails to start.\n- stop() -> [void] - Initiates a graceful shutdown of the gRPC server if it's running\n- blockUntilShutdown() -> [void] - Blocks the calling thread until the server terminates. Throws InterruptedException if the thread is interrupted while waiting\n- main(String[] args) -> [void] - Entry point that creates and starts the server instance. Throws IOException and InterruptedException for server start and shutdown operations",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\npublic class ShelfServer {\n  private static final Logger logger = Logger.getLogger(ShelfServer.class.getName());\n\n  private Server server;\n\n  private void start() throws IOException {\n    int port = 50052;\n    server = ServerBuilder.forPort(port).addService(new ShelfService()).build().start();\n    logger.info(\"Server started, listening on \" + port);\n    Runtime.getRuntime()\n        .addShutdownHook(\n            new Thread(\n                () -> {\n                  System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n                  ShelfServer.this.stop();\n                  System.err.println(\"*** server shut down\");\n                }));\n  }\n\n  private void stop() {\n    if (server != null) {\n      server.shutdown();\n    }\n  }\n\n  private void blockUntilShutdown() throws InterruptedException {\n    if (server != null) {\n      server.awaitTermination();\n    }\n  }\n\n  public static void main(String[] args) throws IOException, InterruptedException {\n    final ShelfServer server = new ShelfServer();\n    server.start();\n    server.blockUntilShutdown();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\npublic class ShelfServer {\n    private int port = 50052;\n    private Server server;\n    private static final Logger logger = Logger.getLogger(ShelfServer.class.getName());\n\n    public void start() throws IOException {\n        server = ServerBuilder.forPort(port)\n                .addService(new YourServiceImpl())\n                .build();\n        server.start();\n        logger.info(\"gRPC Server started on port \" + port);\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            System.err.println(\"Shutting down gRPC server...\");\n            stop();\n        }));\n    }\n\n    public void stop() {\n        if (server != null) {\n            server.shutdown();\n            logger.info(\"gRPC Server stopped\");\n        }\n    }\n\n    public void blockUntilShutdown() throws InterruptedException {\n        if (server != null) {\n            server.awaitTermination();\n        }\n    }\n\n    public void setPort(int port) {\n        this.port = port;\n    }\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n        int port = 50052;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        ShelfServer server = new ShelfServer();\n        server.setPort(port);\n        server.start();\n        server.blockUntilShutdown();\n    }\n}"
  },
  {
    "Task_id": 515,
    "Instruction": "Task Description: Create a Java class that implements a basic TCP server using ServerSocket to handle client connections and communication.\n\nClass Description: The SocketServer class establishes a TCP server that listens for incoming client connections on a specified port, handles communication with connected clients, and properly closes connections when done.\n\nAttributes:\n- serverSocket: [ServerSocket] - The server socket that listens for incoming client connections\n- clientSocket: [Socket] - The socket representing the connected client\n\nMethods:\n- start([int port]) -> [void] - Starts the server on the specified port, waits for client connections, and initiates communication handling\n- handleClientCommunication() -> [void] - Handles the data exchange with the connected client (receives data and sends response)\n- closeConnections() -> [void] - Closes both client and server sockets to release resources",
    "Canonical_solution": "import java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class SocketServer {\n\n    private ServerSocket serverSocket;\n    private Socket clientSocket;\n\n    public void start(int port) throws Exception {\n        serverSocket = new ServerSocket(port);\n        System.out.println(\"Server started, waiting for connections...\");\n        \n        clientSocket = serverSocket.accept();\n        System.out.println(\"Client connected\");\n        \n        handleClientCommunication();\n    }\n\n    private void handleClientCommunication() throws Exception {\n        try {\n            // Read from client\n            byte[] buffer = new byte[1024];\n            int len;\n            StringBuilder sb = new StringBuilder();\n            clientSocket.setSoTimeout(2000);\n            \n            while ((len = clientSocket.getInputStream().read(buffer)) != -1) {\n                sb.append(new String(buffer, 0, len));\n            }\n            System.out.println(\"From client: \" + sb);\n\n            // Write to client\n            String response = \"Hi I'm server\\r\\n\";\n            clientSocket.getOutputStream().write(response.getBytes());\n        } finally {\n            closeConnections();\n        }\n    }\n\n    private void closeConnections() throws Exception {\n        if (clientSocket != null) {\n            clientSocket.close();\n        }\n        if (serverSocket != null) {\n            serverSocket.close();\n        }\n        System.out.println(\"Connections closed\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class SocketServer {\n    private ServerSocket serverSocket;\n    private Socket clientSocket;\n\n    public void start(int port) {\n        try {\n            serverSocket = new ServerSocket(port);\n            clientSocket = serverSocket.accept();\n            handleClientCommunication();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            closeConnections();\n        }\n    }\n\n    public void handleClientCommunication() {\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n            String inputLine = in.readLine();\n            System.out.println(\"Received: \" + inputLine);\n            PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n            out.println(\"Echo: \" + inputLine);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void closeConnections() {\n        try {\n            if (clientSocket != null) {\n                clientSocket.close();\n            }\n            if (serverSocket != null) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 516,
    "Instruction": "Task Description: Implement a TCP server class that handles multiple client connections simultaneously, providing predefined chat responses to incoming messages.\n\nClass Description: TCPServer is a Java class that creates a TCP server listening on a specified port. It maintains a set of predefined messages and can handle multiple client connections concurrently, responding with random messages from its predefined set. The server can be started and stopped as needed.\n\nAttributes:\n- mIsServiceDestoryed: boolean - Flag indicating whether the server should stop running\n- mDefinedMessages: String[] - Array of predefined messages to send to clients\n\nMethods:\n- startServer() -> void - Starts the TCP server in a new thread\n- stopServer() -> void - Stops the TCP server by setting the termination flag\n- TcpServer (inner class) run() -> void - Main server loop that accepts client connections (implements Runnable)\n- responseClient(Socket client) -> void - Handles communication with an individual client\n  - Input: client: Socket - The client socket connection\n  - Output: (none) - Sends responses to client through the socket",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Random;\n\npublic class TCPServer {\n\n    private boolean mIsServiceDestoryed = false;\n    private String[] mDefinedMessages = new String[] {\n            \"\u4f60\u597d\u554a\uff0c\u54c8\u54c8\",\n            \"\u8bf7\u95ee\u4f60\u53eb\u4ec0\u4e48\u540d\u5b57\u5440\uff1f\",\n            \"\u4eca\u5929\u5317\u4eac\u5929\u6c14\u4e0d\u9519\u554a\uff0cshy\",\n            \"\u4f60\u77e5\u9053\u5417\uff1f\u6211\u53ef\u662f\u53ef\u4ee5\u548c\u591a\u4e2a\u4eba\u540c\u65f6\u804a\u5929\u7684\u54e6\",\n            \"\u7ed9\u4f60\u8bb2\u4e2a\u7b11\u8bdd\u5427\uff1a\u636e\u8bf4\u7231\u7b11\u7684\u4eba\u8fd0\u6c14\u4e0d\u4f1a\u592a\u5dee\uff0c\u4e0d\u77e5\u9053\u771f\u5047\u3002\"\n    };\n\n    public void startServer() {\n        new Thread(new TcpServer()).start();\n    }\n\n    public void stopServer() {\n        mIsServiceDestoryed = true;\n    }\n\n    private class TcpServer implements Runnable {\n        @Override\n        public void run() {\n            ServerSocket serverSocket = null;\n            try {\n                serverSocket = new ServerSocket(8688);\n            } catch (IOException e) {\n                System.err.println(\"establish tcp server failed, port:8688\");\n                e.printStackTrace();\n                return;\n            }\n\n            while (!mIsServiceDestoryed) {\n                try {\n                    final Socket client = serverSocket.accept();\n                    System.out.println(\"accept\");\n                    new Thread() {\n                        @Override\n                        public void run() {\n                            try {\n                                responseClient(client);\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                        };\n                    }.start();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private void responseClient(Socket client) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(\n                client.getInputStream()));\n        PrintWriter out = new PrintWriter(new BufferedWriter(\n                new OutputStreamWriter(client.getOutputStream())), true);\n        out.println(\"\u6b22\u8fce\u6765\u5230\u804a\u5929\u5ba4\uff01\");\n        while (!mIsServiceDestoryed) {\n            String str = in.readLine();\n            System.out.println(\"msg from client:\" + str);\n            if (str == null) {\n                break;\n            }\n            int i = new Random().nextInt(mDefinedMessages.length);\n            String msg = mDefinedMessages[i];\n            out.println(msg);\n            System.out.println(\"send :\" + msg);\n        }\n        System.out.println(\"client quit.\");\n        out.close();\n        in.close();\n        client.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "import java.io.*;\nimport java.net.*;\nimport java.util.Random;\n\npublic class TCPServer {\n    private boolean mIsServiceDestoryed;\n    private String[] mDefinedMessages;\n    private int mPort;\n\n    public TCPServer(int port, String[] messages) {\n        mPort = port;\n        mDefinedMessages = messages;\n    }\n\n    public void startServer() {\n        Thread thread = new Thread(new TcpServer());\n        thread.start();\n    }\n\n    public void stopServer() {\n        mIsServiceDestoryed = true;\n    }\n\n    private class TcpServer implements Runnable {\n        @Override\n        public void run() {\n            try (ServerSocket serverSocket = new ServerSocket(mPort)) {\n                while (!mIsServiceDestoryed) {\n                    Socket client = serverSocket.accept();\n                    new Thread(() -> responseClient(client)).start();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void responseClient(Socket client) {\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n             PrintWriter out = new PrintWriter(client.getOutputStream(), true)) {\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                String response = mDefinedMessages[new Random().nextInt(mDefinedMessages.length)];\n                out.println(response);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                client.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 517,
    "Instruction": "Task Description: Create a TCP server class that listens for incoming client connections, processes client requests, and sends responses back using a thread pool for handling multiple concurrent connections.\n\nClass Description: The ViewServer class implements a TCP server that listens on a specified port, accepts client connections, and handles each connection in a separate worker thread using a fixed-size thread pool. The server can send data to connected clients and process incoming requests.\n\nAttributes:\n- mServer: ServerSocket - The server socket that listens for incoming connections  \n- mPort: int - The port number on which the server listens  \n- mThread: Thread - The thread in which the server runs  \n- mThreadPool: ExecutorService - The thread pool for handling client connections  \n\nMethods:\n- start() -> boolean - Starts the server thread and initializes the thread pool. Returns true if successful, false if already running  \n- run() - The main server loop that accepts incoming connections and delegates them to worker threads  \n- writeValue(Socket client, String value) -> boolean - Writes a string value to the specified client socket. Returns true if successful, false otherwise  \n- ViewServerWorker(Socket client) - Constructor for the inner worker class that handles individual client connections  \n- ViewServerWorker.run() - Processes an individual client connection, reading requests and sending responses  \n\nInner Class:\nViewServerWorker - Handles individual client connections with these methods:\n- run() - Reads client input, processes the request, and manages connection cleanup",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ViewServer implements Runnable {\n    private static final int VIEW_SERVER_DEFAULT_PORT = 4939;\n    private static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n    \n    private ServerSocket mServer;\n    private final int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    private ViewServer(int port) {\n        mPort = port;\n    }\n\n    public boolean start() throws IOException {\n        if (mThread != null) {\n            return false;\n        }\n\n        mThread = new Thread(this, \"Local View Server [port=\" + mPort + \"]\");\n        mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n        mThread.start();\n\n        return true;\n    }\n\n    public void run() {\n        try {\n            mServer = new ServerSocket(mPort, VIEW_SERVER_MAX_CONNECTIONS, InetAddress.getLocalHost());\n        } catch (Exception e) {\n            Log.w(LOG_TAG, \"Starting ServerSocket error: \", e);\n        }\n\n        while (mServer != null && Thread.currentThread() == mThread) {\n            try {\n                Socket client = mServer.accept();\n                if (mThreadPool != null) {\n                    mThreadPool.submit(new ViewServerWorker(client));\n                } else {\n                    try {\n                        client.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            } catch (Exception e) {\n                Log.w(LOG_TAG, \"Connection error: \", e);\n            }\n        }\n    }\n\n    private static boolean writeValue(Socket client, String value) {\n        boolean result;\n        BufferedWriter out = null;\n        try {\n            OutputStream clientStream = client.getOutputStream();\n            out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024);\n            out.write(value);\n            out.write(\"\\n\");\n            out.flush();\n            result = true;\n        } catch (Exception e) {\n            result = false;\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    result = false;\n                }\n            }\n        }\n        return result;\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private Socket mClient;\n\n        public ViewServerWorker(Socket client) {\n            mClient = client;\n        }\n\n        public void run() {\n            BufferedReader in = null;\n            try {\n                in = new BufferedReader(new InputStreamReader(mClient.getInputStream()), 1024);\n                final String request = in.readLine();\n\n                // Process client request and send response\n                // ... (omitted for brevity)\n\n            } catch(IOException e) {\n                Log.w(LOG_TAG, \"Connection error: \", e);\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                if (mClient != null) {\n                    try {\n                        mClient.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.*;\n\npublic class ViewServer {\n    private ServerSocket mServer;\n    private int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n    private boolean isRunning;\n\n    public boolean start() {\n        if (isRunning) return false;\n        try {\n            mServer = new ServerSocket(mPort);\n            mThreadPool = Executors.newFixedThreadPool(10);\n            mThread = new Thread(this::run);\n            mThread.start();\n            isRunning = true;\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    private void run() {\n        while (isRunning) {\n            try {\n                Socket client = mServer.accept();\n                mThreadPool.submit(new ViewServerWorker(client));\n            } catch (IOException e) {\n                if (isRunning) {\n                    System.err.println(\"Error accepting connection: \" + e.getMessage());\n                }\n                break;\n            }\n        }\n        mThreadPool.shutdown();\n        try {\n            mServer.close();\n        } catch (IOException e) {\n            System.err.println(\"Error closing server socket: \" + e.getMessage());\n        }\n    }\n\n    public boolean writeValue(Socket client, String value) {\n        try {\n            OutputStream out = client.getOutputStream();\n            out.write(value.getBytes());\n            out.flush();\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private final Socket client;\n\n        public ViewServerWorker(Socket client) {\n            this.client = client;\n        }\n\n        @Override\n        public void run() {\n            try (BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n                 PrintWriter out = new PrintWriter(client.getOutputStream(), true)) {\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    out.println(\"Processed: \" + inputLine);\n                }\n            } catch (IOException e) {\n                System.err.println(\"Error handling client: \" + e.getMessage());\n            } finally {\n                try {\n                    client.close();\n                } catch (IOException e) {\n                    System.err.println(\"Error closing client socket: \" + e.getMessage());\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 518,
    "Instruction": "Task Description: Create a Java class that implements a TCP server for unicast communication, handling client connections and data exchange with configurable parameters for testing purposes.\n\nClass Description: UnicastTestTcpRpc is a TCP server implementation that listens for incoming client connections, processes requests, and manages data transmission with configurable buffer sizes and communication modes (synchronous/asynchronous).\n\nAttributes:\n- srv_sock: [ServerSocket] - The server socket listening for incoming connections\n- sock: [Socket] - The active client connection socket\n- sock_in: [DataInputStream] - Input stream for reading data from the client\n- sock_out: [DataOutputStream] - Output stream for writing data to the client\n\nMethods:\n- init(long, boolean, boolean, boolean, boolean, String, int, int) -> [void] - Initializes the server with configuration parameters and starts the acceptor thread\n  Parameters:\n    - sleep_time: [long] - Sleep time between operations\n    - exit_on_end: [boolean] - Whether to exit after processing\n    - busy_sleep: [boolean] - Use busy waiting instead of sleep\n    - sync: [boolean] - Use synchronous communication\n    - oob: [boolean] - Use out-of-band data\n    - addr: [String] - Address to connect to\n    - local_port: [int] - Local port to listen on\n    - dest_port: [int] - Destination port for connections\n\n- createSocket() -> [void] - Creates a new client socket connection if none exists\n- handleRequest(DataInputStream, DataOutputStream) -> [boolean] - Processes incoming client requests\n  Parameters:\n    - in: [DataInputStream] - Input stream from client\n    - out: [DataOutputStream] - Output stream to client\n  Returns: [boolean] - Whether to continue processing requests\n\n- set(Socket) -> [void] - Configures socket parameters (TCP_NODELAY, buffer sizes)\n  Parameters:\n    - socket: [Socket] - Socket to configure\n\n- stop() -> [void] - Closes all open sockets and releases resources\n- startTest(int) -> [void] - Starts the test with given parameters\n  Parameters:\n    - num: [int] - Test parameter\n\n- receiveData(long, byte[]) -> [void] - Handles received data from client\n  Parameters:\n    - val: [long] - Timestamp or identifier\n    - data: [byte[]] - Received data payload",
    "Canonical_solution": "import java.io.*;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class UnicastTestTcpRpc {\n    private ServerSocket srv_sock;\n    private volatile Socket sock;\n    private DataInputStream sock_in;\n    private DataOutputStream sock_out;\n\n    static final byte START         =  0;\n    static final byte RECEIVE_ASYNC =  1;\n    static final byte RECEIVE_SYNC  =  2;\n    static final byte ACK           = 10;\n\n    public void init(long sleep_time, boolean exit_on_end, boolean busy_sleep, boolean sync, boolean oob,\n                     String addr, int local_port, int dest_port) throws Exception {\n        this.srv_sock = new ServerSocket(local_port);\n        System.out.println(\"Listening on \" + srv_sock.getLocalSocketAddress());\n        \n        Thread acceptor = new Thread(() -> {\n            while(true) {\n                Socket client_sock = null;\n                DataInputStream in = null;\n                DataOutputStream out = null;\n                try {\n                    client_sock = srv_sock.accept();\n                    set(client_sock);\n                    in = new DataInputStream(client_sock.getInputStream());\n                    out = new DataOutputStream(client_sock.getOutputStream());\n                    if(!handleRequest(in, out)) {\n                        Util.close(client_sock);\n                        Util.close(out);\n                        Util.close(in);\n                        break;\n                    }\n                }\n                catch(IOException e) {\n                    Util.close(client_sock);\n                    Util.close(out);\n                    Util.close(in);\n                    break;\n                }\n            }\n        });\n        acceptor.start();\n    }\n\n    void createSocket() throws IOException {\n        if(sock == null) {\n            sock = new Socket(InetAddress.getByName(null), 9000);\n            set(sock);\n            sock_in = new DataInputStream(sock.getInputStream());\n            sock_out = new DataOutputStream(sock.getOutputStream());\n        }\n    }\n\n    boolean handleRequest(DataInputStream in, DataOutputStream out) throws IOException {\n        while(true) {\n            byte type = (byte)in.read();\n            if(type == -1)\n                return false;\n\n            switch(type) {\n                case START:\n                    int num = in.readInt();\n                    startTest(num);\n                    break;\n                case RECEIVE_ASYNC:\n                case RECEIVE_SYNC:\n                    long val = in.readLong();\n                    int len = in.readInt();\n                    byte[] data = new byte[len];\n                    in.readFully(data, 0, data.length);\n                    receiveData(val, data);\n                    if(type == RECEIVE_SYNC) {\n                        out.writeLong(System.currentTimeMillis());\n                        out.flush();\n                    }\n                    break;\n                default:\n                    System.err.println(\"type \" + type + \" not known\");\n            }\n        }\n    }\n\n    static void set(Socket socket) throws SocketException {\n        socket.setTcpNoDelay(true);\n        socket.setReceiveBufferSize(20000000);\n        socket.setSendBufferSize(10000000);\n    }\n\n    void stop() {\n        Util.close(sock);\n        Util.close(srv_sock);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class UnicastTestTcpRpc {\n    private ServerSocket srv_sock;\n    private Socket sock;\n    private DataInputStream sock_in;\n    private DataOutputStream sock_out;\n\n    public void init(long sleep_time, boolean exit_on_end, boolean busy_sleep, boolean sync, boolean oob, String addr, int local_port, int dest_port) {\n        try {\n            srv_sock = new ServerSocket(local_port, 0, InetAddress.getByName(addr));\n            new Thread(() -> {\n                while (true) {\n                    try {\n                        sock = srv_sock.accept();\n                        set(sock);\n                        sock_in = new DataInputStream(sock.getInputStream());\n                        sock_out = new DataOutputStream(sock.getOutputStream());\n                        boolean continueProcessing = handleRequest(sock_in, sock_out);\n                        if (!continueProcessing) break;\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void createSocket() {\n        if (srv_sock == null) {\n            try {\n                srv_sock = new ServerSocket();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private boolean handleRequest(DataInputStream in, DataOutputStream out) {\n        try {\n            byte[] data = new byte[1024];\n            int bytesRead = in.read(data);\n            if (bytesRead > 0) {\n                receiveData(System.currentTimeMillis(), data);\n                out.writeBytes(\"Response\");\n                out.flush();\n            }\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    private void set(Socket socket) {\n        try {\n            socket.setTcpNoDelay(true);\n            socket.setReceiveBufferSize(8192);\n            socket.setSendBufferSize(8192);\n        } catch (SocketException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (sock_in != null) sock_in.close();\n            if (sock_out != null) sock_out.close();\n            if (sock != null) sock.close();\n            if (srv_sock != null) srv_sock.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void startTest(int num) {\n        // Test logic based on num\n    }\n\n    private void receiveData(long val, byte[] data) {\n        // Process received data\n    }\n}\n```"
  },
  {
    "Task_id": 519,
    "Instruction": "Task Description: Create a mock IMAP server implementation in Java that simulates IMAP server behavior for testing purposes, handling client connections and interactions through TCP sockets.\n\nClass Description: MockImapServer is a test utility class that simulates an IMAP server by listening on a local port, accepting client connections, and processing predefined interactions. It manages server lifecycle and provides synchronization mechanisms for test coordination.\n\nAttributes:\n- interactions: Deque<ImapInteraction> - A thread-safe queue of predefined IMAP interactions to simulate\n- waitForConnectionClosed: CountDownLatch - Synchronization primitive for waiting until client connection closes\n- waitForAllExpectedCommands: CountDownLatch - Synchronization primitive for waiting until all expected commands are processed\n- mockServerThread: MockServerThread - The thread running the server operations\n- host: String - The host address the server is bound to\n- port: int - The port number the server is listening on\n\nMethods:\n- start() -> void - Starts the mock server by creating a ServerSocket and launching the server thread. Binds to an available port on localhost.\n- shutdown() -> void - Stops the server thread and cleans up resources, with a 500ms timeout for graceful shutdown.\n- MockServerThread(ServerSocket, Deque<ImapInteraction>, CountDownLatch, CountDownLatch) -> void - Constructor for the server thread implementation\n- run() -> void - Main server thread logic that accepts connections, processes interactions, and handles cleanup\n- handleInteractions() -> void - Processes the next interaction from the queue (internal method)\n- readAdditionalCommands() -> void - Reads additional unexpected commands from client (internal method)\n- shouldStop() -> void - Signals the server thread to stop and closes client socket",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Deque;\nimport java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MockImapServer {\n    private final Deque<ImapInteraction> interactions = new ConcurrentLinkedDeque<>();\n    private final CountDownLatch waitForConnectionClosed = new CountDownLatch(1);\n    private final CountDownLatch waitForAllExpectedCommands = new CountDownLatch(1);\n    private MockServerThread mockServerThread;\n    private String host;\n    private int port;\n\n    public void start() throws IOException {\n        InetAddress localAddress = InetAddress.getByName(null);\n        ServerSocket serverSocket = new ServerSocket(0, 1, localAddress);\n        host = ((java.net.InetSocketAddress) serverSocket.getLocalSocketAddress()).getHostString();\n        port = serverSocket.getLocalPort();\n\n        mockServerThread = new MockServerThread(serverSocket, interactions, waitForConnectionClosed,\n                waitForAllExpectedCommands);\n        mockServerThread.start();\n    }\n\n    public void shutdown() {\n        mockServerThread.shouldStop();\n        try {\n            mockServerThread.join(500L);\n        } catch (InterruptedException ignored) {\n        }\n    }\n\n    private static class MockServerThread extends Thread {\n        private final ServerSocket serverSocket;\n        private final Deque<ImapInteraction> interactions;\n        private final CountDownLatch waitForConnectionClosed;\n        private final CountDownLatch waitForAllExpectedCommands;\n        private volatile boolean shouldStop = false;\n        private volatile Socket clientSocket;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<ImapInteraction> interactions,\n                              CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands) {\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        @Override\n        public void run() {\n            try {\n                clientSocket = serverSocket.accept();\n                serverSocket.close();\n\n                while (!shouldStop && !interactions.isEmpty()) {\n                    handleInteractions();\n                }\n\n                waitForAllExpectedCommands.countDown();\n\n                while (!shouldStop) {\n                    readAdditionalCommands();\n                }\n\n                waitForConnectionClosed.countDown();\n            } catch (IOException e) {\n                if (!shouldStop) {\n                    e.printStackTrace();\n                }\n            } finally {\n                try {\n                    if (clientSocket != null) {\n                        clientSocket.close();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        private void handleInteractions() throws IOException {\n            ImapInteraction interaction = interactions.pop();\n            if (interaction instanceof CloseConnection) {\n                clientSocket.close();\n            }\n        }\n\n        private void readAdditionalCommands() throws IOException {\n            String command = new java.io.BufferedReader(\n                    new java.io.InputStreamReader(clientSocket.getInputStream())).readLine();\n            if (command == null) {\n                throw new java.io.EOFException();\n            }\n        }\n\n        public void shouldStop() {\n            shouldStop = true;\n            try {\n                if (clientSocket != null) {\n                    clientSocket.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private interface ImapInteraction {}\n    private static class CloseConnection implements ImapInteraction {}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class MockImapServer {\n    private final Deque<ImapInteraction> interactions;\n    private final CountDownLatch waitForConnectionClosed;\n    private final CountDownLatch waitForAllExpectedCommands;\n    private final MockServerThread mockServerThread;\n    private final String host;\n    private final int port;\n\n    public MockImapServer(Deque<ImapInteraction> interactions, CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands, String host, int port) {\n        this.interactions = interactions;\n        this.waitForConnectionClosed = waitForConnectionClosed;\n        this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        this.host = host;\n        this.port = port;\n        this.mockServerThread = new MockServerThread(null, interactions, waitForConnectionClosed, waitForAllExpectedCommands);\n    }\n\n    public void start() throws IOException {\n        ServerSocket serverSocket = new ServerSocket(0, 50, InetAddress.getByName(host));\n        this.port = serverSocket.getLocalPort();\n        this.mockServerThread.setServerSocket(serverSocket);\n        this.mockServerThread.start();\n    }\n\n    public void shutdown() {\n        mockServerThread.shouldStop();\n        try {\n            mockServerThread.join(500);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    private static class MockServerThread extends Thread {\n        private final Deque<ImapInteraction> interactions;\n        private final CountDownLatch waitForConnectionClosed;\n        private final CountDownLatch waitForAllExpectedCommands;\n        private ServerSocket serverSocket;\n        private volatile boolean stop = false;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<ImapInteraction> interactions, CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands) {\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        public void setServerSocket(ServerSocket serverSocket) {\n            this.serverSocket = serverSocket;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (!stop) {\n                    Socket clientSocket = serverSocket.accept();\n                    handleClient(clientSocket);\n                }\n            } catch (IOException e) {\n                if (!stop) {\n                    e.printStackTrace();\n                }\n            } finally {\n                try {\n                    serverSocket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        private void handleClient(Socket clientSocket) {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                 PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true)) {\n\n                while (!interactions.isEmpty() && !stop) {\n                    ImapInteraction interaction = interactions.pollFirst();\n                    String clientCommand = reader.readLine();\n                    if (clientCommand != null && clientCommand.equals(interaction.getClientCommand())) {\n                        writer.println(interaction.getServerResponse());\n                    } else {\n                        // Handle unexpected command\n                    }\n                }\n\n                readAdditionalCommands(reader, writer);\n\n                // Signal that all expected commands are processed\n                waitForAllExpectedCommands.countDown();\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    clientSocket.close();\n                    waitForConnectionClosed.countDown();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        private void readAdditionalCommands(BufferedReader reader, PrintWriter writer) throws IOException {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                // Read and ignore\n            }\n        }\n\n        public void shouldStop() {\n            stop = true;\n            try {\n                if (serverSocket != null && !serverSocket.isClosed()) {\n                    serverSocket.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 522,
    "Instruction": "Task Description: Implement a Java class that acts as an HTTP proxy cache server, handling incoming client connections, processing requests, and managing cached resources. The server should be able to handle multiple concurrent connections efficiently.\n\nClass Description: HttpProxyCacheServer is a TCP server that listens for incoming HTTP requests, processes them through a caching mechanism, and returns the appropriate responses. It manages client connections in a thread-safe manner and maintains a cache of resources.\n\nAttributes:\n\nclientsLock: [Object] - Synchronization object for thread-safe access to clients map\nsocketProcessor: [ExecutorService] - Thread pool for processing socket connections\nclientsMap: [Map<String, HttpProxyCacheServerClients>] - Thread-safe map of URL to client handlers\nserverSocket: [ServerSocket] - Main server socket listening for connections\nport: [int] - Port number the server is listening on\nwaitConnectionThread: [Thread] - Thread that waits for incoming connections\nconfig: [Config] - Server configuration object\n\nMethods:\n\nHttpProxyCacheServer: [Constructor]([Context context]) -> [void] - Initializes the server with default configuration\nHttpProxyCacheServer: [Constructor]([Config config]) -> [void] - Initializes the server with custom configuration\nwaitForRequest: [void]() -> [void] - Continuously accepts incoming connections and delegates processing\nprocessSocket: [void]([Socket socket]) -> [void] - Processes an individual client socket connection\ngetClients: [HttpProxyCacheServerClients]([String url]) -> [HttpProxyCacheServerClients] - Retrieves or creates client handler for a URL\nreleaseSocket: [void]([Socket socket]) -> [void] - Properly closes and releases socket resources\ncloseSocketInput: [void]([Socket socket]) -> [void] - Closes socket input stream\ncloseSocketOutput: [void]([Socket socket]) -> [void] - Closes socket output stream\ncloseSocket: [void]([Socket socket]) -> [void] - Closes the socket connection\nonError: [void]([Throwable e]) -> [void] - Handles errors during server operation\nWaitRequestsRunnable: [Class] - Inner class implementing connection waiting logic\nSocketProcessorRunnable: [Class] - Inner class implementing socket processing logic",
    "Canonical_solution": "import android.content.Context;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class HttpProxyCacheServer {\n\n    private static final String PROXY_HOST = \"127.0.0.1\";\n\n    private final Object clientsLock = new Object();\n    private final ExecutorService socketProcessor = Executors.newFixedThreadPool(8);\n    private final Map<String, HttpProxyCacheServerClients> clientsMap = new ConcurrentHashMap<>();\n    private final ServerSocket serverSocket;\n    private final int port;\n    private final Thread waitConnectionThread;\n    private final Config config;\n\n    public HttpProxyCacheServer(Context context) {\n        this(new Builder(context).buildConfig());\n    }\n\n    private HttpProxyCacheServer(Config config) {\n        this.config = config;\n        try {\n            InetAddress inetAddress = InetAddress.getByName(PROXY_HOST);\n            this.serverSocket = new ServerSocket(0, 8, inetAddress);\n            this.port = serverSocket.getLocalPort();\n            CountDownLatch startSignal = new CountDownLatch(1);\n            this.waitConnectionThread = new Thread(new WaitRequestsRunnable(startSignal));\n            this.waitConnectionThread.start();\n            startSignal.await();\n        } catch (IOException | InterruptedException e) {\n            socketProcessor.shutdown();\n            throw new IllegalStateException(\"Error starting local proxy server\", e);\n        }\n    }\n\n    private void waitForRequest() {\n        try {\n            while (!Thread.currentThread().isInterrupted()) {\n                Socket socket = serverSocket.accept();\n                socketProcessor.submit(new SocketProcessorRunnable(socket));\n            }\n        } catch (IOException e) {\n            onError(new ProxyCacheException(\"Error during waiting connection\", e));\n        }\n    }\n\n    private void processSocket(Socket socket) {\n        try {\n            GetRequest request = GetRequest.read(socket.getInputStream());\n            String url = ProxyCacheUtils.decode(request.uri);\n            HttpProxyCacheServerClients clients = getClients(url);\n            clients.processRequest(request, socket);\n        } catch (SocketException e) {\n            // Client closed connection\n        } catch (ProxyCacheException | IOException e) {\n            onError(new ProxyCacheException(\"Error processing request\", e));\n        } finally {\n            releaseSocket(socket);\n        }\n    }\n\n    private HttpProxyCacheServerClients getClients(String url) throws ProxyCacheException {\n        synchronized (clientsLock) {\n            HttpProxyCacheServerClients clients = clientsMap.get(url);\n            if (clients == null) {\n                clients = new HttpProxyCacheServerClients(url, config);\n                clientsMap.put(url, clients);\n            }\n            return clients;\n        }\n    }\n\n    private void releaseSocket(Socket socket) {\n        closeSocketInput(socket);\n        closeSocketOutput(socket);\n        closeSocket(socket);\n    }\n\n    private void closeSocketInput(Socket socket) {\n        try {\n            if (!socket.isInputShutdown()) {\n                socket.shutdownInput();\n            }\n        } catch (IOException e) {\n            onError(new ProxyCacheException(\"Error closing socket input stream\", e));\n        }\n    }\n\n    private void closeSocketOutput(Socket socket) {\n        try {\n            if (!socket.isOutputShutdown()) {\n                socket.shutdownOutput();\n            }\n        } catch (IOException e) {\n            onError(new ProxyCacheException(\"Error closing socket output stream\", e));\n        }\n    }\n\n    private void closeSocket(Socket socket) {\n        try {\n            if (!socket.isClosed()) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            onError(new ProxyCacheException(\"Error closing socket\", e));\n        }\n    }\n\n    private void onError(Throwable e) {\n        // Error handling\n    }\n\n    private final class WaitRequestsRunnable implements Runnable {\n        private final CountDownLatch startSignal;\n\n        public WaitRequestsRunnable(CountDownLatch startSignal) {\n            this.startSignal = startSignal;\n        }\n\n        @Override\n        public void run() {\n            startSignal.countDown();\n            waitForRequest();\n        }\n    }\n\n    private final class SocketProcessorRunnable implements Runnable {\n        private final Socket socket;\n\n        public SocketProcessorRunnable(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            processSocket(socket);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.Map;\nimport java.util.concurrent.*;\n\npublic class HttpProxyCacheServer {\n    private final Object clientsLock = new Object();\n    private final ExecutorService socketProcessor;\n    private final Map<String, HttpProxyCacheServerClients> clientsMap = new ConcurrentHashMap<>();\n    private ServerSocket serverSocket;\n    private int port;\n    private Thread waitConnectionThread;\n    private Config config;\n\n    public HttpProxyCacheServer(Context context) {\n        this.config = Config.getDefaultConfig();\n        this.port = config.getPort();\n        this.socketProcessor = Executors.newCachedThreadPool();\n        try {\n            this.serverSocket = new ServerSocket(this.port);\n        } catch (IOException e) {\n            onError(e);\n        }\n        this.waitConnectionThread = new Thread(new WaitRequestsRunnable());\n        this.waitConnectionThread.start();\n    }\n\n    public HttpProxyCacheServer(Config config) {\n        this.config = config;\n        this.port = config.getPort();\n        this.socketProcessor = Executors.newCachedThreadPool();\n        try {\n            this.serverSocket = new ServerSocket(this.port);\n        } catch (IOException e) {\n            onError(e);\n        }\n        this.waitConnectionThread = new Thread(new WaitRequestsRunnable());\n        this.waitConnectionThread.start();\n    }\n\n    private void waitForRequest() {\n        while (!serverSocket.isClosed()) {\n            try {\n                Socket socket = serverSocket.accept();\n                socketProcessor.submit(new SocketProcessorRunnable(socket));\n            } catch (IOException e) {\n                onError(e);\n            }\n        }\n    }\n\n    private void processSocket(Socket socket) {\n        // Implementation to handle the socket, check cache, etc.\n    }\n\n    public HttpProxyCacheServerClients getClients(String url) {\n        synchronized (clientsLock) {\n            return clientsMap.computeIfAbsent(url, k -> new HttpProxyCacheServerClients());\n        }\n    }\n\n    private void releaseSocket(Socket socket) {\n        closeSocket(socket);\n    }\n\n    private void closeSocketInput(Socket socket) {\n        try {\n            if (socket.getInputStream() != null) {\n                socket.getInputStream().close();\n            }\n        } catch (IOException e) {\n            onError(e);\n        }\n    }\n\n    private void closeSocketOutput(Socket socket) {\n        try {\n            if (socket.getOutputStream() != null) {\n                socket.getOutputStream().close();\n            }\n        } catch (IOException e) {\n            onError(e);\n        }\n    }\n\n    private void closeSocket(Socket socket) {\n        try {\n            if (!socket.isClosed()) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            onError(e);\n        }\n    }\n\n    private void onError(Throwable e) {\n        // Log the error\n    }\n\n    private class WaitRequestsRunnable implements Runnable {\n        @Override\n        public void run() {\n            waitForRequest();\n        }\n    }\n\n    private class SocketProcessorRunnable implements Runnable {\n        private final Socket socket;\n\n        public SocketProcessorRunnable(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            try {\n                processSocket(socket);\n            } finally {\n                releaseSocket(socket);\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 523,
    "Instruction": "Task Description: Implement a TCP transport class that can function as either a server or client, handling network communication with configurable buffer sizes and TCP_NODELAY option.\n\nClass Description: TcpTransport is a class that provides TCP-based communication capabilities, acting as either a server (accepting connections) or client (initiating connections). It manages socket creation, stream handling, and includes a dedicated receiver thread for asynchronous data reception.\n\nAttributes:\n- srv_sock: [ServerSocket] - Server socket instance for accepting connections (server mode)\n- sock: [Socket] - Socket instance for communication (both modes)\n- output: [OutputStream] - Output stream for sending data\n- input: [InputStream] - Input stream for receiving data\n- receiver_thread: [Receiver] - Thread for handling incoming data\n- receiver: [RtReceiver] - Callback handler for received data\n- host: [InetAddress] - Host address for connection\n- port: [int] - Port number for communication (default: 7800)\n- out_buf_size: [int] - Output buffer size (default: 8192)\n- in_buf_size: [int] - Input buffer size (default: 8192)\n- server: [boolean] - Flag indicating server mode\n- tcp_nodelay: [boolean] - TCP_NODELAY socket option flag\n- log: [Log] - Logger instance\n\nMethods:\n- start: [void](String... options) -> [void] - Initializes the transport in either server or client mode, creates sockets and streams, starts receiver thread\n- stop: [void]() -> [void] - Closes all resources (sockets and streams)\n- send: [void](byte[] buf, int offset, int length) -> [void] - Sends data through the output stream\n- Receiver (inner class): [void](InputStream in) -> [void] - Thread class that continuously reads incoming data and notifies receiver callback",
    "Canonical_solution": "import org.jgroups.logging.Log;\nimport org.jgroups.logging.LogFactory;\nimport org.jgroups.tests.RoundTrip;\nimport org.jgroups.tests.rt.RtReceiver;\nimport org.jgroups.util.Util;\n\nimport java.io.*;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class TcpTransport {\n    protected ServerSocket srv_sock;\n    protected Socket sock;\n    protected OutputStream output;\n    protected InputStream input;\n    protected Receiver receiver_thread;\n    protected RtReceiver receiver;\n    protected InetAddress host;\n    protected int port=7800;\n    protected int out_buf_size=8192, in_buf_size=8192;\n    protected boolean server, tcp_nodelay;\n    protected final Log log=LogFactory.getLog(TcpTransport.class);\n\n    public void start(String ... options) throws Exception {\n        if(server) {\n            srv_sock=new ServerSocket(port, 50, host);\n            Socket s=srv_sock.accept();\n            s.setTcpNoDelay(tcp_nodelay);\n            input=in_buf_size > 0? new BufferedInputStream(s.getInputStream(), in_buf_size) : s.getInputStream();\n            output=out_buf_size > 0? new BufferedOutputStream(s.getOutputStream(), out_buf_size) : s.getOutputStream();\n            receiver_thread=new Receiver(input);\n            receiver_thread.start();\n        }\n        else {\n            sock=new Socket();\n            sock.setTcpNoDelay(tcp_nodelay);\n            sock.connect(new InetSocketAddress(host, port));\n            input=in_buf_size > 0? new BufferedInputStream(sock.getInputStream(), in_buf_size) : sock.getInputStream();\n            output=out_buf_size > 0? new BufferedOutputStream(sock.getOutputStream(), out_buf_size) : sock.getOutputStream();\n            receiver_thread=new Receiver(input);\n            receiver_thread.start();\n        }\n    }\n\n    public void stop() {\n        Util.close(sock, srv_sock, input, output);\n    }\n\n    public void send(byte[] buf, int offset, int length) throws Exception {\n        output.write(buf, offset, length);\n        output.flush();\n    }\n\n    protected class Receiver extends Thread {\n        protected final InputStream in;\n\n        public Receiver(InputStream in) {\n            this.in=in;\n        }\n\n        public void run() {\n            byte[] buf=new byte[RoundTrip.PAYLOAD];\n            for(;;) {\n                try {\n                    int num=in.read(buf, 0, buf.length);\n                    if(num == -1)\n                        return;\n                    if(num != buf.length)\n                        throw new IllegalStateException(\"expected \" + buf.length + \" bytes, but got only \" + num);\n                    if(receiver != null)\n                        receiver.receive(null, buf, 0, buf.length);\n                }\n                catch(Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class TcpTransport {\n    private ServerSocket srv_sock;\n    private Socket sock;\n    private OutputStream output;\n    private InputStream input;\n    private Receiver receiver_thread;\n    private RtReceiver receiver;\n    private InetAddress host;\n    private int port = 7800;\n    private int out_buf_size = 8192;\n    private int in_buf_size = 8192;\n    private boolean server;\n    private boolean tcp_nodelay = false;\n    private Log log;\n\n    public TcpTransport(InetAddress host, int port, int out_buf_size, int in_buf_size, boolean server, boolean tcp_nodelay, Log log) {\n        this.host = host;\n        this.port = port;\n        this.out_buf_size = out_buf_size;\n        this.in_buf_size = in_buf_size;\n        this.server = server;\n        this.tcp_nodelay = tcp_nodelay;\n        this.log = log;\n    }\n\n    public void start(String... options) {\n        server = false;\n        if (options.length > 0 && options[0].equals(\"server\")) {\n            server = true;\n        }\n\n        try {\n            if (server) {\n                srv_sock = new ServerSocket(port, 0, host);\n                sock = srv_sock.accept();\n            } else {\n                sock = new Socket();\n                sock.connect(new InetSocketAddress(host, port));\n            }\n\n            output = sock.getOutputStream();\n            input = sock.getInputStream();\n\n            if (sock != null) {\n                sock.setTcpNoDelay(tcp_nodelay);\n                sock.setReceiveBufferSize(in_buf_size);\n                sock.setSendBufferSize(out_buf_size);\n            }\n\n            receiver_thread = new Receiver(input);\n            receiver_thread.start();\n        } catch (IOException e) {\n            log.error(\"Failed to start TcpTransport\", e);\n        }\n    }\n\n    public void stop() {\n        try {\n            if (receiver_thread != null) {\n                receiver_thread.interrupt();\n                receiver_thread.join();\n            }\n            if (output != null) output.close();\n            if (input != null) input.close();\n            if (sock != null) sock.close();\n            if (srv_sock != null) srv_sock.close();\n        } catch (IOException | InterruptedException e) {\n            log.error(\"Failed to stop TcpTransport\", e);\n        }\n    }\n\n    public void send(byte[] buf, int offset, int length) {\n        try {\n            output.write(buf, offset, length);\n            output.flush();\n        } catch (IOException e) {\n            log.error(\"Failed to send data\", e);\n        }\n    }\n\n    private class Receiver extends Thread {\n        private InputStream in;\n\n        public Receiver(InputStream in) {\n            this.in = in;\n        }\n\n        @Override\n        public void run() {\n            byte[] buffer = new byte[in_buf_size];\n            int bytesRead;\n            try {\n                while ((bytesRead = in.read(buffer)) != -1) {\n                    if (receiver != null) {\n                        receiver.onDataReceived(buffer, 0, bytesRead);\n                    }\n                }\n            } catch (IOException e) {\n                log.error(\"Error in receiver thread\", e);\n            } finally {\n                try {\n                    in.close();\n                } catch (IOException e) {\n                    log.error(\"Failed to close input stream\", e);\n                }\n            }\n        }\n    }\n\n    public void setReceiver(RtReceiver receiver) {\n        this.receiver = receiver;\n    }\n\n    public interface RtReceiver {\n        void onDataReceived(byte[] data, int offset, int length);\n    }\n\n    public interface Log {\n        void error(String message, Throwable t);\n    }\n}\n```"
  },
  {
    "Task_id": 524,
    "Instruction": "Task Description: Create a Java class that implements an HTTP media streaming server capable of serving files over a local network connection using TCP sockets.\n\nClass Description: The HttpMediaStreamer class provides functionality to stream media files over HTTP protocol. It creates a local server socket, handles incoming client connections, and streams the requested file with proper HTTP headers. The class manages the server lifecycle and provides access to the streaming URI.\n\nAttributes:\n- uri: Uri - The URI pointing to the local HTTP streaming endpoint\n- serverSocket: ServerSocket - The server socket instance used for listening to client connections\n- TAG: String - Constant for logging purposes (class name)\n\nMethods:\n- HttpMediaStreamer(String filename, String mimeType) -> [Constructor] - Initializes the streamer with the file to serve and its MIME type\n- getUri() -> Uri - Returns the streaming URI for the hosted file\n- destroy() -> void - Closes the server socket and cleans up resources\n- create(String filename, String mimeType) -> Uri - Internal method that sets up the server socket and starts the streaming thread",
    "Canonical_solution": "import info.guardianproject.iocipher.File;\nimport info.guardianproject.iocipher.FileInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport android.net.Uri;\nimport android.util.Log;\n\npublic class HttpMediaStreamer {\n    private static final String TAG = HttpMediaStreamer.class.getSimpleName();\n    private Uri uri;\n    private ServerSocket serverSocket;\n\n    public HttpMediaStreamer(String filename, String mimeType) throws IOException {\n        uri = create(filename, mimeType);\n    }\n\n    public Uri getUri() {\n        return uri;\n    }\n\n    public void destroy() {\n        try {\n            if (serverSocket != null)\n                serverSocket.close();\n        } catch (Exception e) {\n        }\n    }\n\n    private Uri create(final String filename, final String mimeType) throws IOException {\n        final File file = new File(filename);\n        if (!file.exists()) {\n            throw new IOException(\"File not found \" + filename);\n        }\n\n        try {\n            if (serverSocket != null)\n                serverSocket.close();\n        } catch (Exception e) {\n        }\n\n        serverSocket = new ServerSocket(0);\n        new Thread() {\n            public void run() {\n                try {\n                    while (true) {\n                        Socket socket = serverSocket.accept();\n                        byte[] b = new byte[8192];\n                        int len;\n\n                        InputStream is = socket.getInputStream();\n                        StringBuilder isb = new StringBuilder();\n                        len = is.read(b);\n                        isb.append(new String(b));\n\n                        StringBuilder sb = new StringBuilder();\n                        sb.append(\"HTTP/1.1 200\\r\\n\");\n                        sb.append(\"Content-Type: \" + mimeType + \"\\r\\n\");\n                        sb.append(\"Content-Length: \" + file.length() + \"\\r\\n\\r\\n\");\n\n                        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\n                        bos.write(sb.toString().getBytes());\n\n                        FileInputStream fis = new FileInputStream(file);\n                        int idx = 0;\n\n                        while ((len = fis.read(b)) != -1) {\n                            bos.write(b, 0, len);\n                            idx += len;\n                            Log.d(TAG, \"sharing via stream: \" + idx);\n                        }\n\n                        fis.close();\n                        bos.flush();\n                        bos.close();\n                        socket.close();\n                    }\n                } catch (IOException e) {\n                    Log.d(TAG, \"web share error\", e);\n                }\n            }\n        }.start();\n\n        Uri uri = Uri.parse(\"http://localhost:\" + serverSocket.getLocalPort() + file.getAbsolutePath());\n        return uri;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class HttpMediaStreamer {\n    private final String filename;\n    private final String mimeType;\n    private ServerSocket serverSocket;\n    private URI uri;\n    private static final String TAG = \"HttpMediaStreamer\";\n\n    public HttpMediaStreamer(String filename, String mimeType) {\n        this.filename = filename;\n        this.mimeType = mimeType;\n    }\n\n    public URI getUri() {\n        return uri;\n    }\n\n    public void destroy() {\n        try {\n            if (serverSocket != null && !serverSocket.isClosed()) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private URI create(String filename, String mimeType) {\n        try {\n            serverSocket = new ServerSocket(0);\n            int port = serverSocket.getLocalPort();\n            String host = \"localhost:\" + port;\n            uri = new URI(\"http\", host, \"/\" + filename, null, null);\n            new Thread(() -> {\n                while (!serverSocket.isClosed()) {\n                    try {\n                        Socket clientSocket = serverSocket.accept();\n                        handleClient(clientSocket);\n                    } catch (IOException e) {\n                        if (!serverSocket.isClosed()) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            }).start();\n        } catch (IOException | URISyntaxException e) {\n            e.printStackTrace();\n        }\n        return uri;\n    }\n\n    private void handleClient(Socket clientSocket) {\n        try (BufferedOutputStream out = new BufferedOutputStream(clientSocket.getOutputStream());\n             FileInputStream fis = new FileInputStream(filename)) {\n            String response = \"HTTP/1.1 200 OK\\r\\n\" +\n                              \"Content-Type: \" + mimeType + \"\\r\\n\" +\n                              \"Content-Length: \" + new File(filename).length() + \"\\r\\n\" +\n                              \"Connection: close\\r\\n\\r\\n\";\n            out.write(response.getBytes());\n            out.flush();\n\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = fis.read(buffer)) != -1) {\n                out.write(buffer, 0, bytesRead);\n                out.flush();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                clientSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 528,
    "Instruction": "Task Description: Implement a Java class that creates a TCP server using ServerSocket with GSSAPI (Generic Security Services API) authentication for secure client-server communication.\n\nClass Description: The GSSServer class establishes a secure TCP server that listens for incoming client connections, performs GSSAPI authentication, and enables secure message exchange between server and client.\n\nAttributes:\n- s: [ServerSocket] - The server socket that listens for incoming client connections on a specified port.\n\nMethods:\n- main([String[] args]) -> [void] - Entry point of the server application. Parses command line arguments (service name, port, and mechanism OID), creates server credentials, and starts listening for client connections.\n  Input: Command line arguments (optional: -port [portNumber], -mech [mechanismOID], serviceName)\n  Output: None (runs indefinitely until terminated)\n\n- processClient([GSSCredential server], [Socket client]) -> [void] - Handles an individual client connection by performing GSSAPI authentication and establishing a secure context.\n  Input: \n    - server: [GSSCredential] - Server's credentials for authentication\n    - client: [Socket] - Client connection socket\n  Output: None (closes connection when done)\n\n- exchangeWithPeer([GSSContext aCtxt], [DataInputStream dis], [DataOutputStream dos]) -> [void] - Performs secure message exchange with an authenticated client.\n  Input:\n    - aCtxt: [GSSContext] - Established security context\n    - dis: [DataInputStream] - Input stream from client\n    - dos: [DataOutputStream] - Output stream to client\n  Output: None (sends response and closes connection)\n\n- usage() -> [void] - Prints usage instructions for the server application.\n  Input: None\n  Output: None (prints to console)\n\n- print([String msg]) -> [void] - Helper method to print messages to console.\n  Input: msg [String] - Message to print\n  Output: None (prints to console)\n\n- exit([int status]) -> [void] - Cleanly shuts down the server by closing the server socket and exiting the application.\n  Input: status [int] - Exit status code\n  Output: None (terminates application)",
    "Canonical_solution": "import java.io.*;\nimport java.net.*;\nimport com.sun.gssapi.*;\n\nclass GSSServer {\n\n    private static ServerSocket s;\n\n    public static void main(String args[]) {\n        int port = 4444;\n\n        if (args.length < 1) {\n            usage();\n            exit(-1);\n        }\n\n        try {\n            String serviceName = args[args.length-1];\n            Oid mechOid = GSSManager.getDefaultMech();\n\n            for (int i = 0; i < args.length; i++) {\n                if (args[i].equals(\"-port\")) {\n                    if (i >= (args.length - 2)) {\n                        usage();\n                        exit(-1);\n                    }\n                    port = Integer.parseInt(args[++i]);\n                } else if (args[i].equals(\"-mech\")) {\n                    if (i >= (args.length-2)) {\n                        usage();\n                        exit(-1);\n                    }\n                    mechOid = new Oid(args[++i]);\n                }\n            }\n\n            GSSCredential server = new GSSCredential(new GSSName(serviceName,\n                GSSName.NT_HOSTBASED_SERVICE), GSSCredential.INDEFINITE,\n                mechOid, GSSCredential.ACCEPT_ONLY);\n\n            s = new ServerSocket(port);\n\n            while (true) {\n                Socket c = s.accept();\n                processClient(server, c);\n            }\n        } catch (IOException e) {\n            print(\"\\n**Communication ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        } catch (GSSException e) {\n            print(\"\\n**GSSAPI ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        }\n    }\n\n    private static void processClient(GSSCredential server, Socket client)\n            throws GSSException, IOException {\n        DataInputStream dis = new DataInputStream(new BufferedInputStream(client.getInputStream()));\n        DataOutputStream dos = new DataOutputStream(client.getOutputStream());\n\n        int tokLen = dis.readInt();\n        byte []inTok = new byte[tokLen];\n        dis.readFully(inTok, 0, inTok.length);\n\n        GSSContext aCtxt = new GSSContext(server);\n\n        do {\n            byte []outTok = aCtxt.accept(inTok, 0, inTok.length);\n\n            if (outTok != null) {\n                dos.writeInt(outTok.length);\n                dos.write(outTok);\n            }\n\n            if (aCtxt.isEstablished())\n                break;\n\n            inTok = new byte[dis.readInt()];\n            dis.readFully(inTok, 0, inTok.length);\n        } while (true);\n\n        exchangeWithPeer(aCtxt, dis, dos);\n        aCtxt.dispose();\n        client.close();\n    }\n\n    private static void exchangeWithPeer(GSSContext aCtxt, DataInputStream dis,\n            DataOutputStream dos) throws GSSException, IOException {\n        int len = dis.readInt();\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        MessageProp mInfo = new MessageProp();\n\n        aCtxt.unwrap(dis, bos, mInfo);\n\n        mInfo.setQOP(0);\n        mInfo.setPrivacy(false);\n\n        byte []peerTok = bos.toByteArray();\n        byte []toPeer = aCtxt.getMIC(peerTok, 0, peerTok.length, mInfo);\n\n        dos.writeInt(toPeer.length);\n        dos.write(toPeer);\n        dos.close();\n    }\n\n    private static void usage() {\n        print(\"\\nUsage:\\tGSSServert [-mech 1.2.34] [-port port] serviceName\");\n    }\n\n    private static void print(String msg) {\n        System.out.println(msg);\n    }\n\n    private static void exit(int status) {\n        if (s != null) {\n            try {\n                s.close();\n            } catch (IOException e) {};\n        }\n        System.exit(status);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport org.ietf.jgss.*;\nimport java.io.*;\nimport java.net.*;\n\npublic class GSSServer {\n    private ServerSocket s;\n\n    public static void main(String[] args) {\n        String serviceName = null;\n        int port = 8080;\n        String mechOID = \"1.2.840.113554.1.2.2\";\n\n        for (int i = 0; i < args.length; i++) {\n            if (args[i].equals(\"-port\")) {\n                port = Integer.parseInt(args[++i]);\n            } else if (args[i].equals(\"-mech\")) {\n                mechOID = args[++i];\n            } else {\n                serviceName = args[i];\n            }\n        }\n\n        if (serviceName == null) {\n            usage();\n            return;\n        }\n\n        try {\n            GSSManager manager = GSSManager.getInstance();\n            Oid mech = new Oid(mechOID);\n            GSSName name = manager.createName(serviceName, GSSName.NT_HOSTBASED_SERVICE);\n            GSSCredential serverCred = manager.createCredential(\n                    name, GSSCredential.DEFAULT_LIFETIME, mech, GSSCredential.ACCEPT_ONLY);\n\n            ServerSocket serverSocket = new ServerSocket(port);\n            System.out.println(\"Server started on port \" + port);\n\n            while (true) {\n                Socket client = serverSocket.accept();\n                new Thread(() -> {\n                    try {\n                        processClient(serverCred, client);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }).start();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void usage() {\n        System.out.println(\"Usage: java GSSServer [-port <port>] [-mech <mechOID>] <serviceName>\");\n    }\n\n    private static void print(String msg) {\n        System.out.println(msg);\n    }\n\n    private static void exit(int status) {\n        System.exit(status);\n    }\n\n    private static void processClient(GSSCredential server, Socket client) throws Exception {\n        GSSManager manager = GSSManager.getInstance();\n        DataInputStream dis = new DataInputStream(client.getInputStream());\n        DataOutputStream dos = new DataOutputStream(client.getOutputStream());\n\n        GSSContext context = manager.createContext(server, null, null, GSSContext.DEFAULT_LIFETIME);\n\n        byte[] token = new byte[0];\n        while (!context.isEstablished()) {\n            int len = dis.readInt();\n            byte[] inToken = new byte[len];\n            dis.readFully(inToken);\n            byte[] outToken = context.initSecContext(inToken, 0, inToken.length);\n            if (outToken != null) {\n                dos.writeInt(outToken.length);\n                dos.write(outToken);\n            }\n        }\n\n        exchangeWithPeer(context, dis, dos);\n        client.close();\n    }\n\n    private static void exchangeWithPeer(GSSContext context, DataInputStream dis, DataOutputStream dos) throws Exception {\n        int len = dis.readInt();\n        byte[] inData = new byte[len];\n        dis.readFully(inData);\n        byte[] unwrapped = context.unwrap(inData, 0, inData.length, null);\n        String message = new String(unwrapped);\n        print(\"Received: \" + message);\n\n        String response = \"Echo: \" + message;\n        byte[] wrapped = context.wrap(response.getBytes(), 0, response.length, false);\n        dos.writeInt(wrapped.length);\n        dos.write(wrapped);\n    }\n}\n```"
  },
  {
    "Task_id": 530,
    "Instruction": "Task Description: Implement a WebSocket server class in Java that handles WebSocket connections, performs the WebSocket handshake protocol, and manages client connections.\n\nClass Description: The WebSocketServer class represents a TCP server that implements the WebSocket protocol. It listens for incoming connections, handles the WebSocket handshake, and manages client connections. The server runs in a separate thread to avoid blocking the main thread.\n\nAttributes:\n- serverSocket: ServerSocket - The server socket that listens for incoming connections\n- port: int - The port number on which the server listens\n- serverThread: Thread - The thread in which the server runs\n\nMethods:\n- WebSocketServer(int port) -> None - Constructor that initializes the server with the specified port\n- start() -> None - Starts the server in a new thread and begins listening for connections\n- stop() -> None - Stops the server and releases all resources\n- handleClientConnection(Socket client) -> None - Handles the WebSocket handshake protocol for a connected client\n- generateFinalKey(String in) -> String - Generates the Sec-WebSocket-Accept key for the WebSocket handshake response",
    "Canonical_solution": "import java.net.ServerSocket;\nimport java.net.Socket;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.Scanner;\n\npublic class WebSocketServer {\n\n    private ServerSocket serverSocket;\n    private int port;\n    private Thread serverThread;\n\n    public WebSocketServer(int port) {\n        this.port = port;\n    }\n\n    public void start() {\n        serverThread = new Thread(() -> {\n            try {\n                serverSocket = new ServerSocket(port);\n                serverSocket.setReuseAddress(true);\n                while (true) {\n                    Socket client = null;\n                    try {\n                        client = serverSocket.accept();\n                        handleClientConnection(client);\n                    } catch (IOException e) {\n                        // Handle client connection error\n                    }\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n        serverThread.start();\n    }\n\n    private void handleClientConnection(Socket client) throws IOException {\n        Scanner in = new Scanner(client.getInputStream());\n        OutputStream os = client.getOutputStream();\n        \n        // Read client handshake\n        String input = in.nextLine();\n        String testCase = input.split(\" \")[1];\n        String seckey = \"\";\n        while (in.hasNext()) {\n            input = in.nextLine();\n            if (input.startsWith(\"Sec-WebSocket-Key: \")) {\n                seckey = input.split(\" \")[1];\n            }\n            if (input.startsWith(\"Upgrade\")) {\n                break;\n            }\n        }\n\n        // Send response based on test case\n        String response = \"HTTP/1.1 101 Websocket Connection Upgrade\\r\\n\" +\n                         \"Upgrade: websocket\\r\\n\" +\n                         \"Connection: Upgrade\\r\\n\" +\n                         \"Sec-WebSocket-Accept: \" + generateFinalKey(seckey) + \"\\r\\n\\r\\n\";\n        os.write(response.getBytes());\n        os.flush();\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null) {\n            serverSocket.close();\n        }\n        if (serverThread != null) {\n            serverThread.interrupt();\n        }\n    }\n\n    private String generateFinalKey(String in) {\n        String seckey = in.trim();\n        String acc = seckey + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\n        try {\n            java.security.MessageDigest sh1 = java.security.MessageDigest.getInstance(\"SHA1\");\n            return org.java_websocket.util.Base64.encodeBytes(sh1.digest(acc.getBytes()));\n        } catch (java.security.NoSuchAlgorithmException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Base64;\n\npublic class WebSocketServer {\n    private ServerSocket serverSocket;\n    private int port;\n    private Thread serverThread;\n\n    public WebSocketServer(int port) {\n        this.port = port;\n        try {\n            this.serverSocket = new ServerSocket(port);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        this.serverThread = new Thread(this::runServer);\n    }\n\n    private void runServer() {\n        while (!Thread.currentThread().isInterrupted()) {\n            try {\n                Socket client = serverSocket.accept();\n                handleClientConnection(client);\n            } catch (IOException e) {\n                break;\n            }\n        }\n    }\n\n    public void start() {\n        serverThread.start();\n    }\n\n    public void stop() {\n        try {\n            serverSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        serverThread.interrupt();\n    }\n\n    private void handleClientConnection(Socket client) {\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n             PrintWriter out = new PrintWriter(client.getOutputStream(), true)) {\n            \n            String line;\n            String secWebSocketKey = null;\n            \n            while ((line = in.readLine()) != null && !line.isEmpty()) {\n                if (line.startsWith(\"Sec-WebSocket-Key:\")) {\n                    secWebSocketKey = line.substring(\"Sec-WebSocket-Key:\".length()).trim();\n                }\n            }\n            \n            if (secWebSocketKey == null) {\n                client.close();\n                return;\n            }\n            \n            String acceptKey = generateFinalKey(secWebSocketKey);\n            \n            out.println(\"HTTP/1.1 101 Switching Protocols\");\n            out.println(\"Upgrade: websocket\");\n            out.println(\"Connection: Upgrade\");\n            out.println(\"Sec-WebSocket-Accept: \" + acceptKey);\n            out.println();\n            \n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private String generateFinalKey(String input) {\n        String magic = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\n        String combined = input + magic;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            byte[] hash = md.digest(combined.getBytes(java.nio.charset.StandardCharsets.UTF_8));\n            return Base64.getEncoder().encodeToString(hash);\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"SHA-1 algorithm not found\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 531,
    "Instruction": "Task Description: Create a Java class that implements a simplified NetCat-like TCP server using ServerSocket for client-server communication, with WebSocket support for real-time interaction.\n\nClass Description: The NetCat class is a WebSocket plugin that creates a TCP server listening on a specified port, accepts client connections, and enables bidirectional communication between server and client through input/output streams.\n\nAttributes:\nport: [int] - The port number on which the server listens for client connections\nserver: [ServerSocket] - The ServerSocket instance used to accept client connections\nclient: [Socket] - The Socket instance representing the connected client\npool: [ExecutorService] - Thread pool for handling client communication\nos: [OutputStream] - Output stream for sending data to the client\npw: [PrintWriter] - Buffered writer for sending data to the client\n\nMethods:\ncheck: [Map param] -> [boolean] - Validates if the specified port is valid (>= 10000)\nbefore: [void] -> [void] - Initializes the ServerSocket and starts listening for connections\nlisten: [void] -> [void] - Accepts incoming client connections and sets up I/O streams\necho: [void] -> [void] - Continuously reads and displays data received from the client\nstart: [void] -> [Object] - Main execution loop that sends user input to the client\nonClose: [void] -> [void] - Cleans up resources by closing sockets and shutting down threads",
    "Canonical_solution": "import com.trackray.base.annotation.Plugin;\nimport com.trackray.base.annotation.Param;\nimport com.trackray.base.annotation.Rule;\nimport com.trackray.base.plugin.WebSocketPlugin;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n@Plugin(value = \"netcat\", title = \"NetCat \u7b80\u6613\u7248\" , author = \"\u6d45\u84dd\")\n@Rule(params = {@Param(key = \"port\",defaultValue = \"10010\" , desc = \"\u76d1\u542c\u7684\u7aef\u53e3\uff0c\u5c3d\u91cf\u907f\u514d\u5c0f\u4e8e10000\u7684\u7aef\u53e3\"),},\n        sync = true,  websocket = true )\npublic class NetCat extends WebSocketPlugin {\n    private int port;\n    private ServerSocket server;\n    private Socket client;\n    private ExecutorService pool;\n    private OutputStream os;\n    private PrintWriter pw;\n\n    @Override\n    public boolean check(Map param) {\n        port = Integer.parseInt(param.get(\"port\").toString());\n        return port >= 10000;\n    }\n\n    @Override\n    public void before() {\n        try {\n            server = new ServerSocket(port);\n            pool = Executors.newSingleThreadExecutor();\n            println(\"port:\"+port);\n            println(\"\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5\");\n            listen();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void listen() {\n        try {\n            client = server.accept();\n            if (client.isConnected()){\n                println(\"\u5ba2\u6237\u7aef\u5df2\u8fde\u63a5:\"+client.getInetAddress().getHostAddress());\n                os = client.getOutputStream();\n                pw = new PrintWriter(os, true);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        pool.execute(() -> {\n            while (true){\n                echo();\n            }\n        });\n    }\n\n    private void echo() {\n        try {\n            if (client.isConnected()){\n                InputStream is = client.getInputStream();\n                BufferedReader bri = new BufferedReader(new InputStreamReader(is));\n                String temp;\n                while ((temp = bri.readLine())!=null && !\"\".equals(temp)) {\n                    println(temp);\n                }\n            }\n        }catch (Exception e){\n            println(e.getMessage());\n        }\n    }\n\n    @Override\n    public Object start() {\n        while (client!=null && client.isConnected()){\n            String input = getInput();\n            if (StringUtils.isNotBlank(input)){\n                pw.println(input);\n            }\n        }\n        println(\"\u4e3b\u673a\u5df2\u4e0b\u7ebf\");\n        return null;\n    }\n\n    @Override\n    public void onClose() {\n        try {\n            pool.shutdownNow();\n            if (client!=null && !client.isClosed())\n            {\n                client.close();\n            }\n            server.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "import java.io.*;\nimport java.net.*;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class NetCat {\n    private int port;\n    private ServerSocket server;\n    private Socket client;\n    private ExecutorService pool;\n    private OutputStream os;\n    private PrintWriter pw;\n\n    public boolean check(Map<String, Object> param) {\n        port = (int) param.get(\"port\");\n        return port >= 10000;\n    }\n\n    public void before() throws IOException {\n        server = new ServerSocket(port);\n        pool = Executors.newFixedThreadPool(2);\n    }\n\n    public void listen() throws IOException {\n        client = server.accept();\n        os = client.getOutputStream();\n        pw = new PrintWriter(os, true);\n        pool.execute(this::echo);\n    }\n\n    public void echo() {\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()))) {\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                System.out.println(\"Received: \" + inputLine);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void start() {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            String line = scanner.nextLine();\n            pw.println(line);\n        }\n    }\n\n    public void onClose() {\n        try {\n            if (client != null) client.close();\n            if (server != null) server.close();\n            if (pool != null) pool.shutdown();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 532,
    "Instruction": "Task Description: Create a WebSocket server class in Java that handles WebSocket connections, performs WebSocket handshake, and sends binary frames to clients.\n\nClass Description: The WebSocketServer class implements a basic WebSocket server that listens for incoming connections, performs the WebSocket handshake protocol, and sends binary data frames to connected clients. It supports configurable masking and frame size.\n\nAttributes:\n- serverSocket: ServerSocket - The server socket used to listen for incoming connections\n- port: int - The port number on which the server listens for connections\n\nMethods:\n- WebSocketServer(int port) -> None - Constructor that initializes the server with the specified port number\n- start() -> void - Starts the server by creating and binding the server socket\n- handleConnection() -> void - Handles an incoming connection, performs WebSocket handshake, and sends binary frames\n- stop() -> void - Stops the server by closing the server socket\n\nThe class should:\n1. Accept incoming TCP connections\n2. Parse WebSocket handshake headers\n3. Generate proper handshake response\n4. Create and send binary frames with configurable masking and size\n5. Properly close connections and clean up resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Scanner;\nimport org.java_websocket.util.Charsetfunctions;\nimport org.java_websocket.util.KeyUtils;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.framing.BinaryFrame;\nimport java.nio.ByteBuffer;\n\npublic class WebSocketServer {\n\n    private ServerSocket serverSocket;\n    private int port;\n\n    public WebSocketServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        serverSocket = new ServerSocket(port);\n        serverSocket.setReuseAddress(true);\n    }\n\n    public void handleConnection() throws IOException, InterruptedException {\n        Socket client = serverSocket.accept();\n        Scanner in = new Scanner(client.getInputStream());\n        String input;\n        String seckey = \"\";\n        String testCase;\n        boolean useMask = false;\n        int size = 0;\n        OutputStream os = client.getOutputStream();\n\n        while (in.hasNext()) {\n            input = in.nextLine();\n            if (input.startsWith(\"Sec-WebSocket-Key: \")) {\n                seckey = input.split(\" \")[1];\n            }\n            if (input.startsWith(\"Upgrade\")) {\n                os.write(Charsetfunctions.asciiBytes(\n                    \"HTTP/1.1 101 Websocket Connection Upgrade\\r\\nUpgrade: websocket\\r\\nConnection: Upgrade\\r\\n\"\n                        + KeyUtils.getSecKey(seckey) + \"\\r\\n\"));\n                os.flush();\n                Thread.sleep(10);\n                Draft_6455 draft_6455 = new Draft_6455();\n                BinaryFrame binaryFrame = new BinaryFrame();\n                binaryFrame.setPayload(ByteBuffer.allocate(size));\n                binaryFrame.setTransferemasked(useMask);\n                ByteBuffer byteBuffer = draft_6455.createBinaryFrame(binaryFrame);\n                byte[] bytes = byteBuffer.array();\n                int first = size / 2;\n                os.write(bytes, 0, first);\n                os.flush();\n                Thread.sleep(5);\n                os.write(bytes, first, bytes.length - first);\n                os.flush();\n                break;\n            }\n            if (input.startsWith(\"GET \")) {\n                testCase = input.split(\" \")[1];\n                String[] strings = testCase.split(\"/\");\n                useMask = Boolean.valueOf(strings[1]);\n                size = Integer.valueOf(strings[2]);\n            }\n        }\n        client.close();\n    }\n\n    public void stop() throws IOException {\n        serverSocket.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.security.*;\nimport java.util.Arrays;\nimport java.util.Base64;\nimport java.util.Random;\n\npublic class WebSocketServer {\n    private ServerSocket serverSocket;\n    private int port;\n    private boolean maskEnabled;\n    private int frameSize;\n\n    public WebSocketServer(int port) {\n        this.port = port;\n        this.maskEnabled = false;\n        this.frameSize = 1024;\n    }\n\n    public void start() {\n        try {\n            serverSocket = new ServerSocket(port);\n            System.out.println(\"Server started on port \" + port);\n            while (true) {\n                Socket socket = serverSocket.accept();\n                handleConnection(socket);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleConnection(Socket socket) {\n        try (InputStream input = socket.getInputStream();\n             OutputStream output = socket.getOutputStream()) {\n\n            StringBuilder request = new StringBuilder();\n            String line;\n            while (!(line = readLine(input)).isEmpty()) {\n                request.append(line).append(\"\\r\\n\");\n            }\n            request.append(\"\\r\\n\");\n\n            String[] headers = request.toString().split(\"\\r\\n\");\n            String secWebSocketKey = \"\";\n            for (String header : headers) {\n                if (header.startsWith(\"Sec-WebSocket-Key:\")) {\n                    secWebSocketKey = header.substring(\"Sec-WebSocket-Key:\".length()).trim();\n                    break;\n                }\n            }\n\n            String acceptKey = generateAcceptKey(secWebSocketKey);\n            String response = \"HTTP/1.1 101 Switching Protocols\\r\\n\" +\n                    \"Upgrade: websocket\\r\\n\" +\n                    \"Connection: Upgrade\\r\\n\" +\n                    \"Sec-WebSocket-Accept: \" + acceptKey + \"\\r\\n\\r\\n\";\n\n            output.write(response.getBytes());\n            output.flush();\n\n            sendBinaryFrame(output, frameSize, maskEnabled);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private String generateAcceptKey(String key) {\n        String magic = \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\";\n        String combined = key + magic;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            byte[] hash = md.digest(combined.getBytes(java.nio.charset.StandardCharsets.UTF_8));\n            return Base64.getEncoder().encodeToString(hash);\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(\"SHA-1 algorithm not found\", e);\n        }\n    }\n\n    private void sendBinaryFrame(OutputStream output, int frameSize, boolean mask) throws IOException {\n        byte[] payload = new byte[frameSize];\n        Arrays.fill(payload, (byte) 0x01);\n\n        ByteArrayOutputStream frame = new ByteArrayOutputStream();\n        byte finOpcode = (byte) 0x82;\n        if (mask) {\n            finOpcode |= 0x80;\n        }\n        frame.write(finOpcode);\n\n        int payloadLength = payload.length;\n        if (payloadLength <= 125) {\n            frame.write(payloadLength);\n        } else if (payloadLength <= 65535) {\n            frame.write(126);\n            frame.write((payloadLength >> 8) & 0xFF);\n            frame.write(payloadLength & 0xFF);\n        } else {\n            frame.write(127);\n            frame.write(new byte[6]);\n            frame.write((payloadLength >> 24) & 0xFF);\n            frame.write((payloadLength >> 16) & 0xFF);\n            frame.write((payloadLength >> 8) & 0xFF);\n            frame.write(payloadLength & 0xFF);\n        }\n\n        if (mask) {\n            byte[] maskKey = new byte[4];\n            new Random().nextBytes(maskKey);\n            frame.write(maskKey);\n            for (int i = 0; i < payload.length; i++) {\n                payload[i] ^= maskKey[i % 4];\n            }\n        }\n\n        frame.write(payload);\n        output.write(frame.toByteArray());\n        output.flush();\n    }\n\n    public void stop() {\n        try {\n            if (serverSocket != null && !serverSocket.isClosed()) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private String readLine(InputStream input) throws IOException {\n        StringBuilder line = new StringBuilder();\n        int c;\n        while ((c = input.read()) != -1) {\n            if (c == '\\r') {\n                int next = input.read();\n                if (next == '\\n') {\n                    break;\n                } else {\n                    line.append((char) c);\n                    line.append((char) next);\n                }\n            } else {\n                line.append((char) c);\n            }\n        }\n        return line.toString();\n    }\n}\n```"
  },
  {
    "Task_id": 534,
    "Instruction": "Task Description: Implement a WebSocket handshake server in Java that handles various test cases for WebSocket connection upgrades. The server should listen on a specified port, accept client connections, and respond with different HTTP responses based on the requested test case.\n\nClass Description: WebSocketHandshakeServer is a TCP server that simulates WebSocket handshake responses for testing purposes. It creates a ServerSocket to listen for incoming connections and handles each client connection in a separate thread, responding with different HTTP responses based on the requested test case path.\n\nAttributes:\n- serverSocket: ServerSocket - The server socket that listens for incoming client connections\n- port: int - The port number on which the server listens for connections\n- additionalHandshake: String - Constant string containing additional handshake headers required for WebSocket upgrade\n\nMethods:\n- WebSocketHandshakeServer(int port) -> None - Constructor that initializes the server with the specified port number\n- start() -> void - Starts the server, creates a ServerSocket, and begins accepting client connections in a new thread\n- stop() -> void - Stops the server by closing the ServerSocket if it's open\n- handleClientConnection(Socket client) -> void - Handles an individual client connection, reads the request, and sends the appropriate response based on the test case\n- asciiBytes(String input) -> byte[] - Helper method that converts a string to ASCII bytes for network transmission",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Scanner;\n\npublic class WebSocketHandshakeServer {\n\n    private static final String additionalHandshake = \"Upgrade: websocket\\r\\nConnection: Upgrade\\r\\n\\r\\n\";\n    private ServerSocket serverSocket;\n    private int port;\n\n    public WebSocketHandshakeServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        serverSocket = new ServerSocket(port);\n        serverSocket.setReuseAddress(true);\n        \n        new Thread(() -> {\n            while (!serverSocket.isClosed()) {\n                try {\n                    Socket client = serverSocket.accept();\n                    handleClientConnection(client);\n                } catch (IOException e) {\n                    if (!serverSocket.isClosed()) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }).start();\n    }\n\n    private void handleClientConnection(Socket client) throws IOException {\n        try (Scanner in = new Scanner(client.getInputStream());\n             OutputStream os = client.getOutputStream()) {\n            \n            String input = in.nextLine();\n            String testCase = input.split(\" \")[1];\n            \n            switch (testCase) {\n                case \"/0\":\n                    os.write(asciiBytes(\"HTTP/1.1 100 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/1\":\n                    os.write(asciiBytes(\"HTTP/1.0 100 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/2\":\n                    os.write(asciiBytes(\"HTTP 100 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/3\":\n                    os.write(asciiBytes(\"HTTP/1.1 200 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/4\":\n                    os.write(asciiBytes(\"HTTP 101 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/5\":\n                    os.write(asciiBytes(\"HTTP/1.1 404 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/6\":\n                    os.write(asciiBytes(\"HTTP/2.0 404 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/7\":\n                    os.write(asciiBytes(\"HTTP/1.1 500 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/8\":\n                    os.write(asciiBytes(\"GET 302 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/9\":\n                    os.write(asciiBytes(\"GET HTTP/1.1 101 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/10\":\n                    os.write(asciiBytes(\"HTTP/1.1 101 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/11\":\n                    os.write(asciiBytes(\"HTTP/1.1 101 Websocket Connection Upgrade\\r\\n\" + additionalHandshake));\n                    break;\n            }\n            os.flush();\n        } finally {\n            client.close();\n        }\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null && !serverSocket.isClosed()) {\n            serverSocket.close();\n        }\n    }\n\n    private byte[] asciiBytes(String input) {\n        return input.getBytes(java.nio.charset.StandardCharsets.US_ASCII);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.nio.charset.StandardCharsets;\n\npublic class WebSocketHandshakeServer {\n    private ServerSocket serverSocket;\n    private int port;\n    private String additionalHandshake;\n\n    public WebSocketHandshakeServer(int port) {\n        this.port = port;\n        this.additionalHandshake = \"Sec-WebSocket-Key: abc123\\r\\n\";\n    }\n\n    public void start() {\n        try {\n            serverSocket = new ServerSocket(port);\n            new Thread(() -> {\n                while (!serverSocket.isClosed()) {\n                    try {\n                        Socket client = serverSocket.accept();\n                        new Thread(() -> handleClientConnection(client)).start();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (serverSocket != null && !serverSocket.isClosed()) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleClientConnection(Socket client) {\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n             OutputStream out = client.getOutputStream()) {\n            String requestLine = in.readLine();\n            if (requestLine == null) return;\n\n            String[] parts = requestLine.split(\" \");\n            String requestPath = parts[1];\n\n            String response = \"\";\n            if (requestPath.equals(\"/upgrade\")) {\n                response = \"HTTP/1.1 101 Switching Protocols\\r\\n\" +\n                           \"Upgrade: websocket\\r\\n\" +\n                           \"Connection: Upgrade\\r\\n\" +\n                           additionalHandshake +\n                           \"\\r\\n\";\n            } else if (requestPath.equals(\"/bad\")) {\n                response = \"HTTP/1.1 400 Bad Request\\r\\n\\r\\n\";\n            } else {\n                response = \"HTTP/1.1 404 Not Found\\r\\n\\r\\n\";\n            }\n\n            out.write(asciiBytes(response));\n            out.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                client.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private byte[] asciiBytes(String input) {\n        return input.getBytes(StandardCharsets.US_ASCII);\n    }\n}\n```"
  },
  {
    "Task_id": 537,
    "Instruction": "Task Description: Implement a simple HTTP server class that listens for incoming client connections on a dynamically assigned port and responds with a \"Not Implemented\" HTTP status. The server should be able to handle basic client requests and clean up resources properly when closed.\n\nClass Description: The HTTPServer class implements a basic HTTP server using Java's ServerSocket. It runs in a separate thread to handle incoming connections and responds with a fixed HTTP 501 response. The class implements AutoCloseable for proper resource management.\n\nAttributes:\n- server: [ServerSocket] - The underlying ServerSocket instance that listens for incoming connections\n- thread: [Thread] - The thread in which the server runs to handle client connections asynchronously\n\nMethods:\n- HTTPServer() throws [IOException] -> [void] - Constructor that initializes the ServerSocket on a random available port and starts the server thread\n- port() -> [int] - Returns the local port number on which the server is listening\n- serve() -> [void] - Private method that handles incoming client connections and sends HTTP responses (runs in the server thread)\n- close() throws [Exception] -> [void] - Closes the server socket and waits for the server thread to terminate (implements AutoCloseable)",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.nio.charset.StandardCharsets;\n\npublic class HTTPServer implements AutoCloseable {\n    private final ServerSocket server;\n    private final Thread thread;\n\n    public HTTPServer() throws IOException {\n        server = new ServerSocket(0, 1);\n        thread = new Thread(new Runnable() {\n            @Override public void run() {\n                serve();\n            }\n        });\n        thread.start();\n    }\n\n    public final int port() {\n        return server.getLocalPort();\n    }\n\n    private void serve() {\n        try {\n            Socket client = server.accept();\n\n            try (InputStream inputStream = client.getInputStream()) {\n                while (inputStream.available() > 0) {\n                    if (inputStream.read() == -1) {\n                        break;\n                    }\n                }\n\n                try (OutputStream outputStream = client.getOutputStream()) {\n                    outputStream.write(\"HTTP/1.0 501 Not Implemented\\r\\n\\r\\n\".getBytes(StandardCharsets.UTF_8));\n                }\n            }\n        }\n        catch (IOException e) {\n            if (server.isClosed() && e instanceof SocketException) {\n                return;\n            }\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override public void close() throws Exception {\n        server.close();\n        thread.join();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class HTTPServer implements AutoCloseable {\n    private ServerSocket server;\n    private Thread thread;\n\n    public HTTPServer() throws IOException {\n        server = new ServerSocket(0);\n        thread = new Thread(this::serve);\n        thread.start();\n    }\n\n    public int port() {\n        return server.getLocalPort();\n    }\n\n    private void serve() {\n        while (!Thread.currentThread().isInterrupted()) {\n            try {\n                Socket client = server.accept();\n                PrintWriter out = new PrintWriter(client.getOutputStream(), true);\n                out.println(\"HTTP/1.1 501 Not Implemented\");\n                out.println(\"Content-Length: 0\");\n                out.println();\n                client.close();\n            } catch (IOException e) {\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void close() throws Exception {\n        server.close();\n        thread.interrupt();\n        thread.join();\n    }\n}\n```"
  },
  {
    "Task_id": 539,
    "Instruction": "Task Description: Create a TCP proxy server class that can forward traffic between a client and a remote server, with the ability to start, stop, and manage connections.\n\nClass Description: The ConnectionManipulationProxyServer class implements a TCP proxy server that listens on a local port, accepts client connections, and forwards traffic to a specified remote server. It provides thread-safe control over the proxy operation and proper resource cleanup.\n\nAttributes:\n- localPort: [int] - The local port number the proxy listens on\n- host: [String] - The hostname or IP address of the remote server\n- remotePort: [int] - The port number of the remote server\n- proxyThread: [Thread] - The thread running the proxy operation\n- enableLock: [Object] - Synchronization object for thread-safe control\n- enableProxy: [boolean] - Flag indicating whether proxy is enabled\n- running: [boolean] - Flag indicating whether proxy thread should continue running\n- client: [Socket] - Socket for client connection\n- server: [Socket] - Socket for server connection\n- serverSocket: [ServerSocket] - Server socket for accepting client connections\n\nMethods:\n- ConnectionManipulationProxyServer(String host, int remotePort, int localPort) -> [void] - Constructor that initializes the proxy server with target host and ports\n- startProxy() -> [void] - Starts the proxy server thread and enables traffic forwarding\n- stopProxy() -> [void] - Stops the proxy server thread and disables traffic forwarding\n- killOpenSockets() -> [void] - Closes all open sockets and cleans up resources\n- run() -> [void] - Main proxy thread implementation that handles connection forwarding\n- getLocalPort() -> [int] - Returns the local port number the proxy is listening on",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.logging.Logger;\n\npublic class ConnectionManipulationProxyServer implements Runnable {\n    private static final Logger log = Logger.getLogger(ConnectionManipulationProxyServer.class.getName());\n    private int localPort;\n    private String host;\n    private int remotePort;\n    private Thread proxyThread;\n    private final Object enableLock = new Object();\n    private boolean enableProxy = true;\n    private boolean running = true;\n    Socket client = null, server = null;\n    ServerSocket serverSocket = null;\n\n    public ConnectionManipulationProxyServer(String host, int remotePort, int localPort) {\n        this.localPort = localPort;\n        this.remotePort = remotePort;\n        this.host = host;\n        proxyThread = new Thread(this);\n    }\n\n    public void startProxy() {\n        log.info(\"[CMPS Proxy] - Starting Proxy\");\n        synchronized (enableLock) {\n            enableProxy = true;\n        }\n        running = true;\n        proxyThread.start();\n    }\n\n    public void stopProxy() {\n        log.info(\"[CMPS Proxy] - Stopping Proxy\");\n        synchronized (enableLock) {\n            enableProxy = false;\n        }\n        running = false;\n        killOpenSockets();\n    }\n\n    private void killOpenSockets() {\n        log.info(\"[CMPS Proxy] - killOpenSockets Called.\");\n        try {\n            if (serverSocket != null) {\n                serverSocket.close();\n            }\n            if (client != null) {\n                client.close();\n            }\n            if (server != null) {\n                server.close();\n            }\n        } catch (IOException ex) {\n            // Ignore during cleanup\n        }\n    }\n\n    @Override\n    public void run() {\n        log.info(\"[CMPS Proxy] - Proxy Thread running.\");\n        try {\n            final byte[] request = new byte[1024];\n            byte[] reply = new byte[4096];\n            boolean canIrun = true;\n            \n            while (running) {\n                synchronized (enableLock) {\n                    canIrun = enableProxy;\n                }\n                \n                while (canIrun) {\n                    synchronized (enableLock) {\n                        canIrun = enableProxy;\n                        if (!enableProxy) {\n                            break;\n                        }\n                    }\n                    \n                    if (serverSocket == null || serverSocket.isClosed()) {\n                        serverSocket = new ServerSocket(localPort);\n                        localPort = serverSocket.getLocalPort();\n                    }\n                    \n                    log.info(\"[CMPS Proxy] - Waiting for incoming connection..\");\n                    client = serverSocket.accept();\n                    log.info(\"[CMPS Proxy] - Client Opened Connection to Proxy...\");\n                    \n                    final InputStream streamFromClient = client.getInputStream();\n                    final OutputStream streamToClient = client.getOutputStream();\n                    \n                    server = new Socket(host, remotePort);\n                    log.info(\"Proxy: Proxy Connected to Server\");\n                    \n                    final InputStream streamFromServer = server.getInputStream();\n                    final OutputStream streamToServer = server.getOutputStream();\n                    \n                    Thread thread = new Thread() {\n                        public void run() {\n                            int bytesRead;\n                            try {\n                                while ((bytesRead = streamFromClient.read(request)) != -1) {\n                                    streamToServer.write(request, 0, bytesRead);\n                                    streamToServer.flush();\n                                }\n                            } catch (IOException ex) {\n                                log.warning(\"[CMPS Proxy] - IOException in client to server stream: \" + ex.getMessage());\n                                try {\n                                    client.close();\n                                    server.close();\n                                } catch (IOException e) {\n                                    // Ignore during cleanup\n                                }\n                            }\n                        }\n                    };\n                    \n                    thread.start();\n                    \n                    int bytesRead;\n                    try {\n                        while ((bytesRead = streamFromServer.read(reply)) != -1) {\n                            streamToClient.write(reply, 0, bytesRead);\n                            streamToClient.flush();\n                        }\n                    } catch (IOException ex) {\n                        log.warning(\"[CMPS Proxy] - IOException in server to client stream: \" + ex.getMessage());\n                        client.close();\n                        server.close();\n                    }\n                    \n                    streamToClient.close();\n                }\n            }\n            \n            if (!serverSocket.isClosed()) {\n                serverSocket.close();\n            }\n            \n        } catch (IOException ex) {\n            log.warning(\"[CMPS Proxy] - Thread Connection lost: \" + ex.getMessage());\n        }\n    }\n\n    public int getLocalPort() {\n        return localPort;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "import java.io.*;\nimport java.net.*;\n\npublic class ConnectionManipulationProxyServer implements Runnable {\n    private int localPort;\n    private String host;\n    private int remotePort;\n    private Thread proxyThread;\n    private Object enableLock = new Object();\n    private boolean enableProxy = false;\n    private boolean running = false;\n    private Socket client;\n    private Socket server;\n    private ServerSocket serverSocket;\n\n    public ConnectionManipulationProxyServer(String host, int remotePort, int localPort) {\n        this.host = host;\n        this.remotePort = remotePort;\n        this.localPort = localPort;\n        try {\n            serverSocket = new ServerSocket(localPort);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void startProxy() {\n        synchronized (enableLock) {\n            if (!enableProxy) {\n                enableProxy = true;\n                running = true;\n                proxyThread = new Thread(this);\n                proxyThread.start();\n            }\n        }\n    }\n\n    public void stopProxy() {\n        synchronized (enableLock) {\n            if (enableProxy) {\n                enableProxy = false;\n                running = false;\n                if (proxyThread != null) {\n                    proxyThread.interrupt();\n                }\n            }\n        }\n    }\n\n    public void killOpenSockets() {\n        try {\n            if (serverSocket != null) {\n                serverSocket.close();\n            }\n            if (client != null) {\n                client.close();\n            }\n            if (server != null) {\n                server.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void run() {\n        while (running) {\n            try {\n                synchronized (enableLock) {\n                    if (!enableProxy) {\n                        break;\n                    }\n                }\n                client = serverSocket.accept();\n                server = new Socket(host, remotePort);\n                new Thread(() -> forward(client, server)).start();\n                new Thread(() -> forward(server, client)).start();\n            } catch (IOException e) {\n                if (running) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private void forward(Socket from, Socket to) {\n        try (InputStream in = from.getInputStream();\n             OutputStream out = to.getOutputStream()) {\n            byte[] buffer = new byte[8192];\n            int bytesRead;\n            while ((bytesRead = in.read(buffer)) != -1) {\n                out.write(buffer, 0, bytesRead);\n                out.flush();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                from.close();\n                to.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public int getLocalPort() {\n        return localPort;\n    }\n}"
  },
  {
    "Task_id": 541,
    "Instruction": "Task Description: Implement a TCP server in Java that handles multiple client connections concurrently using blocking I/O. The server should echo back any data received from clients after sending an initial welcome message.\n\nClass Description: EchoBioServer is a TCP server implementation that listens for incoming client connections on a specified port. For each connection, it creates a new thread to handle communication, sending a welcome message initially and then echoing back all received data.\n\nAttributes:\n- FIRST_BYTES: byte[] - The welcome message to be sent to clients upon connection\n- serverSocket: ServerSocket - The server socket listening for incoming connections\n\nMethods:\n- EchoBioServer(int port) -> void - Constructor that initializes the server socket on the specified port\n- run() -> void - Main server loop that accepts incoming connections and spawns new threads for each client\n- BioConnection(Socket socket) -> void - Nested class constructor that handles individual client connections\n- run() -> void - (In BioConnection) Handles the communication with a single client, echoing received data\n\nNested Class: BioConnection\nAttributes:\n- socket: Socket - The client socket connection\n- input: InputStream - Input stream for reading client data\n- output: OutputStream - Output stream for writing to client\n- readBuffer: byte[] - Buffer for storing received data\n- writeBuffer: byte[] - Buffer for storing data to send\n\nMethods:\n- BioConnection(Socket socket) -> void - Constructor that initializes I/O streams and buffers for a client connection\n- run() -> void - Handles the client communication loop (send welcome message, echo received data)",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class EchoBioServer implements Runnable {\n\n    private static final byte[] FIRST_BYTES = \"Welcome to Cobar Server.\".getBytes();\n    private final ServerSocket serverSocket;\n\n    public EchoBioServer(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            try {\n                Socket socket = serverSocket.accept();\n                new Thread(new BioConnection(socket)).start();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private class BioConnection implements Runnable {\n        private Socket socket;\n        private InputStream input;\n        private OutputStream output;\n        private byte[] readBuffer;\n        private byte[] writeBuffer;\n\n        private BioConnection(Socket socket) throws IOException {\n            this.socket = socket;\n            this.input = socket.getInputStream();\n            this.output = socket.getOutputStream();\n            this.readBuffer = new byte[4096];\n            this.writeBuffer = new byte[4096];\n        }\n\n        @Override\n        public void run() {\n            try {\n                output.write(FIRST_BYTES);\n                output.flush();\n                while (true) {\n                    int got = input.read(readBuffer);\n                    output.write(writeBuffer, 0, got);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n                if (socket != null) {\n                    try {\n                        socket.close();\n                    } catch (IOException e1) {\n                        e1.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class EchoBioServer {\n    private static final byte[] FIRST_BYTES = \"Welcome to the server!\\n\".getBytes();\n    private ServerSocket serverSocket;\n\n    public EchoBioServer(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                Socket socket = serverSocket.accept();\n                new Thread(new BioConnection(socket)).start();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private class BioConnection implements Runnable {\n        private final Socket socket;\n        private InputStream input;\n        private OutputStream output;\n        private byte[] readBuffer = new byte[1024];\n        private byte[] writeBuffer = new byte[1024];\n\n        public BioConnection(Socket socket) {\n            this.socket = socket;\n            try {\n                input = socket.getInputStream();\n                output = socket.getOutputStream();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void run() {\n            try {\n                output.write(FIRST_BYTES);\n                output.flush();\n\n                int bytesRead;\n                while ((bytesRead = input.read(readBuffer)) != -1) {\n                    output.write(readBuffer, 0, bytesRead);\n                    output.flush();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 547,
    "Instruction": "Task Description: Implement a TCP server class that listens for incoming client connections, processes client commands, and sends responses back. The server should run in a dedicated thread and support graceful shutdown.\n\nClass Description: SnapshotService is a TCP server implementation that listens on a specified port for client connections. It processes incoming commands from clients and responds with processed messages. The server runs in a separate thread and maintains its state through a boolean flag for controlled shutdown.\n\nAttributes:\n- port: [int] - The port number on which the server listens for incoming connections\n- serverSocket: [ServerSocket] - The server socket instance used to accept client connections\n- closed: [boolean] - Flag indicating whether the server has been shut down\n\nMethods:\n- SnapshotService(int port) -> [void] - Constructor that validates and sets the server port\n- listen() -> [void] - Starts the server by opening a socket and beginning to listen for connections\n- openSocket(int port) -> [int] - Creates a ServerSocket and starts a thread to handle client connections, returns the actual port being used\n- isIgnoredException() -> [boolean] - Checks if an exception should be ignored based on server socket state\n- process(Socket socket) -> [void] - Processes an individual client connection, reading input and sending responses\n- outputMessage(BufferedWriter outputWriter, String msg) -> [void] - Helper method to send messages to clients\n- close() -> [void] - Gracefully shuts down the server by closing the server socket",
    "Canonical_solution": "import com.google.common.base.Preconditions;\nimport lombok.extern.slf4j.Slf4j;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n@Slf4j\npublic final class SnapshotService {\n\n    private final int port;\n    private ServerSocket serverSocket;\n    private volatile boolean closed;\n\n    public SnapshotService(final int port) {\n        Preconditions.checkArgument(port >= 0 && port <= 0xFFFF, \"Port value out of range: \" + port);\n        this.port = port;\n    }\n\n    public void listen() {\n        try {\n            log.info(\"ElasticJob: Snapshot service is running on port '{}'\", openSocket(port));\n        } catch (final IOException ex) {\n            log.error(\"ElasticJob: Snapshot service listen failure, error is: \", ex);\n        }\n    }\n\n    private int openSocket(final int port) throws IOException {\n        closed = false;\n        serverSocket = new ServerSocket(port);\n        int localPort = serverSocket.getLocalPort();\n        String threadName = String.format(\"elasticjob-snapshot-service-%d\", localPort);\n        new Thread(() -> {\n            while (!closed) {\n                try {\n                    process(serverSocket.accept());\n                } catch (final IOException ex) {\n                    if (isIgnoredException()) {\n                        return;\n                    }\n                    log.error(\"ElasticJob: Snapshot service open socket failure, error is: \", ex);\n                }\n            }\n        }, threadName).start();\n        return localPort;\n    }\n\n    private boolean isIgnoredException() {\n        return serverSocket.isClosed();\n    }\n\n    private void process(final Socket socket) throws IOException {\n        try (\n                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n                Socket ignored = socket) {\n            String cmdLine = reader.readLine();\n            if (null != cmdLine) {\n                outputMessage(writer, \"Processed: \" + cmdLine);\n            }\n        }\n    }\n\n    private void outputMessage(final BufferedWriter outputWriter, final String msg) throws IOException {\n        outputWriter.append(msg);\n        outputWriter.flush();\n    }\n\n    public void close() {\n        closed = true;\n        if (null != serverSocket && !serverSocket.isClosed()) {\n            try {\n                serverSocket.close();\n            } catch (final IOException ex) {\n                log.error(\"ElasticJob: Snapshot service close failure, error is: \", ex);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class SnapshotService {\n    private int port;\n    private ServerSocket serverSocket;\n    private boolean closed;\n\n    public SnapshotService(int port) {\n        if (port < 0 || port > 65535) {\n            throw new IllegalArgumentException(\"Invalid port: \" + port);\n        }\n        this.port = port;\n    }\n\n    public void listen() {\n        try {\n            openSocket(port);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private int openSocket(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n        int actualPort = serverSocket.getLocalPort();\n        new Thread(() -> {\n            try {\n                while (!closed) {\n                    Socket socket = serverSocket.accept();\n                    new Thread(() -> process(socket)).start();\n                }\n            } catch (IOException e) {\n                if (!isIgnoredException(e)) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n        return actualPort;\n    }\n\n    private boolean isIgnoredException(Exception e) {\n        return closed && e instanceof SocketException;\n    }\n\n    private void process(Socket socket) {\n        try (InputStream input = socket.getInputStream();\n             OutputStream output = socket.getOutputStream();\n             BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n             BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(output))) {\n            String command;\n            while ((command = reader.readLine()) != null) {\n                String response = \"Processed: \" + command;\n                outputMessage(writer, response);\n            }\n        } catch (IOException e) {\n            if (!isIgnoredException(e)) {\n                e.printStackTrace();\n            }\n        } finally {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void outputMessage(BufferedWriter outputWriter, String msg) throws IOException {\n        outputWriter.write(msg);\n        outputWriter.newLine();\n        outputWriter.flush();\n    }\n\n    public void close() {\n        closed = true;\n        try {\n            if (serverSocket != null && !serverSocket.isClosed()) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 549,
    "Instruction": "Task Description: Create a mock POP3 server class that simulates interactions with a client using TCP sockets for testing purposes.\n\nClass Description: The MockPop3Server class implements a simple POP3 server mock that can be used for testing email client implementations. It handles client connections, processes commands, and manages server shutdown. The server runs in a separate thread and maintains a queue of expected interactions.\n\nAttributes:\n- interactions: Deque<ImapInteraction> - A thread-safe queue of expected client-server interactions\n- waitForConnectionClosed: CountDownLatch - Synchronization aid to wait for connection closure\n- waitForAllExpectedCommands: CountDownLatch - Synchronization aid to wait for all expected commands to be processed\n- mockServerThread: MockServerThread - The thread running the server\n- host: String - The host address the server is bound to\n- port: int - The port number the server is listening on\n\nMethods:\n- start() -> void - Starts the mock server by creating a ServerSocket and launching the server thread\n- shutdown() -> void - Signals the server thread to stop and cleans up resources\n- MockServerThread(ServerSocket, Deque<ImapInteraction>, CountDownLatch, CountDownLatch) -> void - Constructor for the server thread\n- run() -> void - Main server thread execution that handles client connections and commands\n- handleInteractions() -> void - Processes the queued interactions with the client\n- readAdditionalCommands() -> void - Reads any additional unexpected commands from the client\n- readLine() -> String - Reads a line of input from the client socket\n- shouldStop() -> void - Signals the thread to stop execution",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Deque;\nimport java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MockPop3Server {\n    private final Deque<ImapInteraction> interactions = new ConcurrentLinkedDeque<>();\n    private final CountDownLatch waitForConnectionClosed = new CountDownLatch(1);\n    private final CountDownLatch waitForAllExpectedCommands = new CountDownLatch(1);\n    \n    private MockServerThread mockServerThread;\n    private String host;\n    private int port;\n\n    public void start() throws IOException {\n        InetAddress localAddress = InetAddress.getByName(null);\n        ServerSocket serverSocket = new ServerSocket(0, 1, localAddress);\n        InetSocketAddress localSocketAddress = (InetSocketAddress) serverSocket.getLocalSocketAddress();\n        host = localSocketAddress.getHostString();\n        port = serverSocket.getLocalPort();\n\n        mockServerThread = new MockServerThread(serverSocket, interactions, waitForConnectionClosed,\n                waitForAllExpectedCommands);\n        mockServerThread.start();\n    }\n\n    public void shutdown() {\n        mockServerThread.shouldStop();\n    }\n\n    private static class MockServerThread extends Thread {\n        private final ServerSocket serverSocket;\n        private final Deque<ImapInteraction> interactions;\n        private final CountDownLatch waitForConnectionClosed;\n        private final CountDownLatch waitForAllExpectedCommands;\n        \n        private volatile boolean shouldStop = false;\n        private volatile Socket clientSocket;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<ImapInteraction> interactions,\n                CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands) {\n            super(\"MockPop3Server\");\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        @Override\n        public void run() {\n            try {\n                clientSocket = serverSocket.accept();\n                serverSocket.close();\n\n                while (!shouldStop && !interactions.isEmpty()) {\n                    handleInteractions();\n                }\n\n                waitForAllExpectedCommands.countDown();\n\n                while (!shouldStop) {\n                    readAdditionalCommands();\n                }\n\n                waitForConnectionClosed.countDown();\n            } catch (IOException e) {\n                if (!shouldStop) {\n                    e.printStackTrace();\n                }\n            } finally {\n                try {\n                    clientSocket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        private void handleInteractions() throws IOException {\n            ImapInteraction interaction = interactions.pop();\n            if (interaction instanceof CloseConnection) {\n                clientSocket.close();\n            }\n        }\n\n        private void readAdditionalCommands() throws IOException {\n            String command = readLine();\n            if (command == null) {\n                throw new IOException(\"Connection closed\");\n            }\n        }\n\n        private String readLine() throws IOException {\n            return clientSocket.getInputStream().read() != -1 ? \"command\" : null;\n        }\n\n        public void shouldStop() {\n            shouldStop = true;\n            try {\n                clientSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private interface ImapInteraction {}\n    private static class CloseConnection implements ImapInteraction {}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.Deque;\nimport java.util.concurrent.ConcurrentLinkedDeque;\n\npublic class MockPop3Server {\n    private Deque<ImapInteraction> interactions;\n    private CountDownLatch waitForConnectionClosed;\n    private CountDownLatch waitForAllExpectedCommands;\n    private MockServerThread mockServerThread;\n    private String host;\n    private int port;\n\n    public void start() {\n        try {\n            ServerSocket serverSocket = new ServerSocket(port, 0, InetAddress.getByName(host));\n            mockServerThread = new MockServerThread(serverSocket, interactions, waitForConnectionClosed, waitForAllExpectedCommands);\n            mockServerThread.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        if (mockServerThread != null) {\n            mockServerThread.shouldStop();\n            mockServerThread.interrupt();\n        }\n    }\n\n    private class MockServerThread extends Thread {\n        private ServerSocket serverSocket;\n        private Deque<ImapInteraction> interactions;\n        private CountDownLatch waitForConnectionClosed;\n        private CountDownLatch waitForAllExpectedCommands;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<ImapInteraction> interactions, CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands) {\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        @Override\n        public void run() {\n            try (Socket clientSocket = serverSocket.accept()) {\n                handleInteractions(clientSocket);\n                readAdditionalCommands(clientSocket);\n                waitForConnectionClosed.countDown();\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                waitForAllExpectedCommands.countDown();\n            }\n        }\n\n        private void handleInteractions(Socket clientSocket) {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                 PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true)) {\n                for (ImapInteraction interaction : interactions) {\n                    String clientCommand = readLine(reader);\n                    writer.println(interaction.getResponse());\n                }\n                waitForAllExpectedCommands.countDown();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        private String readLine(BufferedReader reader) {\n            try {\n                return reader.readLine();\n            } catch (IOException e) {\n                return null;\n            }\n        }\n\n        private void readAdditionalCommands(Socket clientSocket) {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    // Handle unexpected commands\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void shouldStop() {\n            try {\n                serverSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 55,
    "Instruction": "Task Description: Create a Java utility class for handling HTTP requests and responses, including POST operations, with support for proxies, timeouts, and error handling.\n\nClass Description: JavaHttpUtility is a helper class designed to simplify HTTP communication in Java applications. It provides methods for making POST requests, handling responses, and managing errors. The class supports proxy configuration, connection timeouts, and compressed responses (gzip).\n\nAttributes:\nCONNECT_TIMEOUT: [int] - Connection timeout in milliseconds (default: 10000)\nREAD_TIMEOUT: [int] - Read timeout in milliseconds (default: 10000)\n\nMethods:\ngetProxy: () -> [Proxy] - Retrieves system proxy settings if configured\ndoPost: (String urlAddress, Map<String, String> param) -> [String] - Executes a POST request to the specified URL with given parameters\nhandleResponse: (HttpURLConnection httpURLConnection) -> [String] - Processes the HTTP response and handles errors\nreadResult: (HttpURLConnection urlConnection) -> [String] - Reads and returns the successful response body\nhandleError: (HttpURLConnection urlConnection) -> [String] - Processes and throws appropriate exceptions for error responses",
    "Canonical_solution": "import org.json.JSONException;\nimport org.json.JSONObject;\nimport org.qii.weiciyuan.support.debug.AppLogger;\nimport org.qii.weiciyuan.support.error.ErrorCode;\nimport org.qii.weiciyuan.support.error.WeiboException;\nimport org.qii.weiciyuan.support.utils.Utility;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.InterruptedIOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.zip.GZIPInputStream;\n\nimport javax.net.ssl.HttpsURLConnection;\n\npublic class JavaHttpUtility {\n\n    private static final int CONNECT_TIMEOUT = 10 * 1000;\n    private static final int READ_TIMEOUT = 10 * 1000;\n\n    private static Proxy getProxy() {\n        String proxyHost = System.getProperty(\"http.proxyHost\");\n        String proxyPort = System.getProperty(\"http.proxyPort\");\n        if (!TextUtils.isEmpty(proxyHost) && !TextUtils.isEmpty(proxyPort)) {\n            return new Proxy(java.net.Proxy.Type.HTTP,\n                    new InetSocketAddress(proxyHost, Integer.valueOf(proxyPort)));\n        } else {\n            return null;\n        }\n    }\n\n    public String doPost(String urlAddress, Map<String, String> param) throws WeiboException {\n        try {\n            URL url = new URL(urlAddress);\n            Proxy proxy = getProxy();\n            HttpsURLConnection uRLConnection;\n            if (proxy != null) {\n                uRLConnection = (HttpsURLConnection) url.openConnection(proxy);\n            } else {\n                uRLConnection = (HttpsURLConnection) url.openConnection();\n            }\n\n            uRLConnection.setDoInput(true);\n            uRLConnection.setDoOutput(true);\n            uRLConnection.setRequestMethod(\"POST\");\n            uRLConnection.setUseCaches(false);\n            uRLConnection.setConnectTimeout(CONNECT_TIMEOUT);\n            uRLConnection.setReadTimeout(READ_TIMEOUT);\n            uRLConnection.setInstanceFollowRedirects(false);\n            uRLConnection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n            uRLConnection.setRequestProperty(\"Charset\", \"UTF-8\");\n            uRLConnection.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n            uRLConnection.connect();\n\n            DataOutputStream out = new DataOutputStream(uRLConnection.getOutputStream());\n            out.write(Utility.encodeUrl(param).getBytes());\n            out.flush();\n            out.close();\n            return handleResponse(uRLConnection);\n        } catch (IOException e) {\n            throw new WeiboException(\"Timeout\", e);\n        }\n    }\n\n    private String handleResponse(HttpURLConnection httpURLConnection) throws WeiboException {\n        int status = 0;\n        try {\n            status = httpURLConnection.getResponseCode();\n        } catch (IOException e) {\n            httpURLConnection.disconnect();\n            throw new WeiboException(\"Timeout\", e);\n        }\n\n        if (status != HttpURLConnection.HTTP_OK) {\n            return handleError(httpURLConnection);\n        }\n\n        return readResult(httpURLConnection);\n    }\n\n    private String readResult(HttpURLConnection urlConnection) throws WeiboException {\n        InputStream is = null;\n        BufferedReader buffer = null;\n        try {\n            is = urlConnection.getInputStream();\n\n            String content_encode = urlConnection.getContentEncoding();\n            if (!TextUtils.isEmpty(content_encode) && content_encode.equals(\"gzip\")) {\n                is = new GZIPInputStream(is);\n            }\n\n            buffer = new BufferedReader(new InputStreamReader(is));\n            StringBuilder strBuilder = new StringBuilder();\n            String line;\n            while ((line = buffer.readLine()) != null) {\n                strBuilder.append(line);\n            }\n            return strBuilder.toString();\n        } catch (IOException e) {\n            throw new WeiboException(\"Timeout\", e);\n        } finally {\n            Utility.closeSilently(is);\n            Utility.closeSilently(buffer);\n            urlConnection.disconnect();\n        }\n    }\n\n    private String handleError(HttpURLConnection urlConnection) throws WeiboException {\n        InputStream is = null;\n        BufferedReader buffer = null;\n        try {\n            is = urlConnection.getErrorStream();\n            if (is == null) {\n                throw new WeiboException(\"Unknown network error\");\n            }\n\n            String content_encode = urlConnection.getContentEncoding();\n            if (!TextUtils.isEmpty(content_encode) && content_encode.equals(\"gzip\")) {\n                is = new GZIPInputStream(is);\n            }\n\n            buffer = new BufferedReader(new InputStreamReader(is));\n            StringBuilder strBuilder = new StringBuilder();\n            String line;\n            while ((line = buffer.readLine()) != null) {\n                strBuilder.append(line);\n            }\n            AppLogger.d(\"error result=\" + strBuilder.toString());\n            \n            JSONObject json = new JSONObject(strBuilder.toString());\n            String err = json.optString(\"error_description\", \"\");\n            if (TextUtils.isEmpty(err)) {\n                err = json.getString(\"error\");\n            }\n            int errCode = json.getInt(\"error_code\");\n            WeiboException exception = new WeiboException();\n            exception.setError_code(errCode);\n            exception.setOriError(err);\n\n            if (errCode == ErrorCode.EXPIRED_TOKEN || errCode == ErrorCode.INVALID_TOKEN) {\n                Utility.showExpiredTokenDialogOrNotification();\n            }\n\n            throw exception;\n        } catch (IOException | JSONException e) {\n            throw new WeiboException(\"Timeout\", e);\n        } finally {\n            Utility.closeSilently(is);\n            Utility.closeSilently(buffer);\n            urlConnection.disconnect();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class JavaHttpUtility {\n    public static final int CONNECT_TIMEOUT = 10000;\n    public static final int READ_TIMEOUT = 10000;\n\n    public static Proxy getProxy() {\n        Proxy proxy = Proxy.NO_PROXY;\n        try {\n            String httpProxy = System.getProperty(\"http.proxyHost\");\n            if (httpProxy != null) {\n                int port = Integer.parseInt(System.getProperty(\"http.proxyPort\", \"80\"));\n                proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(httpProxy, port));\n            }\n        } catch (Exception e) {\n        }\n        return proxy;\n    }\n\n    public static String doPost(String urlAddress, Map<String, String> param) {\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(urlAddress);\n            Proxy proxy = getProxy();\n            connection = (HttpURLConnection) url.openConnection(proxy);\n            connection.setRequestMethod(\"POST\");\n            connection.setConnectTimeout(CONNECT_TIMEOUT);\n            connection.setReadTimeout(READ_TIMEOUT);\n            connection.setDoOutput(true);\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n            String urlParameters = encodeParameters(param);\n            try (OutputStream os = connection.getOutputStream()) {\n                os.write(urlParameters.getBytes(StandardCharsets.UTF_8));\n            }\n\n            String response = handleResponse(connection);\n            return response;\n        } catch (Exception e) {\n            throw new RuntimeException(\"HTTP request failed\", e);\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n\n    private static String handleResponse(HttpURLConnection urlConnection) throws IOException {\n        int responseCode = urlConnection.getResponseCode();\n        if (responseCode >= 200 && responseCode < 300) {\n            return readResult(urlConnection);\n        } else {\n            return handleError(urlConnection);\n        }\n    }\n\n    private static String readResult(HttpURLConnection urlConnection) throws IOException {\n        StringBuilder response = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(getInputStream(urlConnection)))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.append(line);\n            }\n        }\n        return response.toString();\n    }\n\n    private static InputStream getInputStream(HttpURLConnection urlConnection) throws IOException {\n        String encoding = urlConnection.getContentEncoding();\n        if (encoding != null && encoding.contains(\"gzip\")) {\n            return new GZIPInputStream(urlConnection.getInputStream());\n        } else {\n            return urlConnection.getInputStream();\n        }\n    }\n\n    private static String handleError(HttpURLConnection urlConnection) throws IOException {\n        int responseCode = urlConnection.getResponseCode();\n        String message = urlConnection.getResponseMessage();\n        String errorResponse = readResult(urlConnection);\n        return \"HTTP error code: \" + responseCode + \", message: \" + message + \", response: \" + errorResponse;\n    }\n\n    private static String encodeParameters(Map<String, String> params) throws UnsupportedEncodingException {\n        StringBuilder result = new StringBuilder();\n        for (Map.Entry<String, String> entry : params.entrySet()) {\n            if (result.length() > 0) {\n                result.append(\"&\");\n            }\n            result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));\n            result.append(\"=\");\n            result.append(URLEncoder.encode(entry.getValue(), \"UTF-8\"));\n        }\n        return result.toString();\n    }\n}\n```"
  },
  {
    "Task_id": 550,
    "Instruction": "Task Description: Implement a simple embedded HTTP server class that can handle incoming HTTP requests, parse request information, and provide a framework for custom request handling.\n\nClass Description: The EmbedHttpServer class represents a basic HTTP server that listens on a specified port, accepts client connections, parses HTTP request headers and content, and provides hooks for custom request processing. It handles the low-level socket communication while delegating the actual request handling to subclasses or implementations.\n\nAttributes:\n- port: int - The port number on which the server will listen for incoming connections\n- serverSocket: ServerSocket - The server socket instance used to accept client connections\n\nMethods:\n- EmbedHttpServer(int port) -> None - Constructor that initializes the server with the specified port\n- start() -> void - Starts the server by creating a ServerSocket and launching a dedicated thread for handling connections\n- stop() -> void - Stops the server by closing the ServerSocket and cleaning up resources\n- run() -> void - The main server loop that accepts connections and processes requests (runs in a separate thread)\n- handle(String method, String path, HashMap<String,String> headers, Map<String,String> queries, InputStream input, OutputStream response) -> void - Abstract method meant to be overridden for custom request handling (does nothing in base implementation)\n- parsePath(String path) -> Map<String,String> - Helper method that parses the request path and extracts query parameters",
    "Canonical_solution": "import android.text.TextUtils;\nimport com.antfortune.freeline.router.ISchemaAction;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class EmbedHttpServer {\n\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        if (serverSocket == null) {\n            serverSocket = new ServerSocket(port);\n            new Thread(this::run, \"embed-http-server\").start();\n        }\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null) {\n            serverSocket.close();\n            serverSocket = null;\n        }\n    }\n\n    private void run() {\n        final ServerSocket ss = serverSocket;\n        while (ss == serverSocket) {\n            Socket conn = null;\n            try {\n                conn = ss.accept();\n                String method = null;\n                String path = null;\n                HashMap<String, String> headers = new HashMap<>();\n\n                InputStream ins = conn.getInputStream();\n                StringBuilder sb = new StringBuilder(512);\n                int l;\n                while ((l = ins.read()) != -1) {\n                    if (l == '\\n') {\n                        if (sb.length() > 0 && sb.charAt(sb.length() - 1) == '\\r')\n                            sb.setLength(sb.length() - 1);\n                        if (sb.length() == 0) {\n                            break;\n                        } else if (method == null) {\n                            int i = sb.indexOf(\" \");\n                            method = sb.substring(0, i);\n                            int j = sb.lastIndexOf(\" HTTP/\");\n                            path = sb.substring(i + 1, j).trim();\n                        } else {\n                            int i = sb.indexOf(\":\");\n                            String name = sb.substring(0, i).trim();\n                            String val = sb.substring(i + 1).trim();\n                            headers.put(name, val);\n                        }\n                        sb.setLength(0);\n                    } else {\n                        sb.append((char) l);\n                    }\n                }\n                int contentLength = 0;\n                String str = headers.get(\"Content-Length\");\n                if (str != null) {\n                    contentLength = Integer.parseInt(str);\n                }\n                OutputStream os = conn.getOutputStream();\n                str = headers.get(\"Expect\");\n                if (\"100-Continue\".equalsIgnoreCase(str)) {\n                    os.write(\"HTTP/1.1 100 Continue\\r\\n\\r\\n\".getBytes(\"ASCII\"));\n                    os.flush();\n                }\n                InputStream input = new BodyInputStream(ins, contentLength);\n                OutputStream response = new ResponseOutputStream(os);\n\n                Map<String, String> queries = parsePath(path);\n                handle(method, path, headers, queries, input, response);\n                response.close();\n\n                conn.close();\n            } catch (Exception e) {\n                if (conn != null) {\n                    try {\n                        conn.close();\n                    } catch (Exception ee) {}\n                }\n            }\n\n            if (!ss.isBound() || ss.isClosed()) {\n                serverSocket = null;\n            }\n        }\n    }\n\n    protected void handle(String method, String path,\n                         HashMap<String, String> headers, Map<String, String> queries, InputStream input,\n                         OutputStream response) throws Exception {\n    }\n\n    private static Map<String, String> parsePath(String path) {\n        if (TextUtils.isEmpty(path)) {\n            return null;\n        }\n        int descriptionIndex = path.indexOf(\"/\");\n        if (descriptionIndex == -1) {\n            return null;\n        }\n        String description = path.substring(descriptionIndex + 1);\n        Map<String, String> queries = new HashMap<>();\n        int queryIndex = description.indexOf(\"?\");\n        if (queryIndex == -1) {\n            queries.put(ISchemaAction.DESCRIPTION, description);\n        } else {\n            queries.put(ISchemaAction.DESCRIPTION, description.substring(0, queryIndex));\n            description = description.substring(queryIndex + 1);\n        }\n        String[] arr = description.split(\"&\");\n        for (String segment : arr) {\n            String[] query = segment.split(\"=\");\n            if (query.length == 2) {\n                queries.put(query[0], query[1]);\n            } else if (query.length == 1) {\n                queries.put(query[0], \"\");\n            }\n        }\n        return queries;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic abstract class EmbedHttpServer implements Runnable {\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() {\n        try {\n            serverSocket = new ServerSocket(port);\n            new Thread(this).start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (serverSocket != null && !serverSocket.isClosed()) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void run() {\n        while (!Thread.currentThread().isInterrupted()) {\n            try {\n                Socket clientSocket = serverSocket.accept();\n                InputStream input = clientSocket.getInputStream();\n                OutputStream output = clientSocket.getOutputStream();\n\n                BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n                String requestLine = reader.readLine();\n                if (requestLine == null) {\n                    continue;\n                }\n                String[] requestParts = requestLine.split(\" \");\n                String method = requestParts[0];\n                String path = requestParts[1];\n                String protocol = requestParts[2];\n\n                Map<String, String> headers = new HashMap<>();\n                String line;\n                while (!(line = reader.readLine()).isEmpty()) {\n                    String[] headerParts = line.split(\": \", 2);\n                    if (headerParts.length == 2) {\n                        headers.put(headerParts[0], headerParts[1]);\n                    }\n                }\n\n                Map<String, String> queries = parsePath(path);\n\n                handle(method, path, headers, queries, input, output);\n\n                clientSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    protected abstract void handle(String method, String path, Map<String, String> headers, Map<String, String> queries, InputStream input, OutputStream output);\n\n    private Map<String, String> parsePath(String path) {\n        Map<String, String> queries = new HashMap<>();\n        int questionIndex = path.indexOf('?');\n        if (questionIndex != -1) {\n            String queryStr = path.substring(questionIndex + 1);\n            String[] pairs = queryStr.split(\"&\");\n            for (String pair : pairs) {\n                String[] keyValue = pair.split(\"=\", 2);\n                if (keyValue.length == 2) {\n                    queries.put(keyValue[0], keyValue[1]);\n                }\n            }\n        }\n        return queries;\n    }\n}\n```"
  },
  {
    "Task_id": 551,
    "Instruction": "Task Description: Create a Java class that implements a simple HTTP server capable of handling GET requests, serving both static files and dynamically generated class files through Javassist's ClassPool mechanism.\n\nClass Description: The Webserver class is a multi-threaded HTTP server that listens for incoming connections on a specified port. It can serve both static files from the filesystem and dynamically generated bytecode through Javassist's class manipulation capabilities. The server follows basic HTTP/1.0 protocol and handles each client connection in a separate thread.\n\nAttributes:\n- socket: ServerSocket - The main server socket listening for incoming connections\n- classPool: ClassPool - Javassist class pool for dynamic class generation\n- translator: Translator - Optional translator for class manipulation\n- endofline: byte[] - Constant for HTTP line endings (CRLF)\n\nMethods:\n- Webserver(int port) -> void - Constructor that initializes the server socket on the specified port\n- setClassPool(ClassPool loader) -> void - Sets the Javassist ClassPool for dynamic class generation\n- addTranslator(ClassPool cp, Translator t) -> void - Configures both ClassPool and Translator for advanced class manipulation\n- end() -> void - Closes the server socket and stops the server\n- run() -> void - Main server loop that accepts connections and spawns service threads\n- process(Socket clnt) -> void - Processes an individual client connection (handles HTTP protocol)\n- readLine(InputStream in) -> String - Reads a line of input from the client\n- skipLine(InputStream in) -> int - Skips a line of input from the client\n- doReply(InputStream in, OutputStream out, String cmd) -> void - Processes the HTTP request and generates appropriate response\n- letUsersSendClassfile(OutputStream out, String filename, int length) -> boolean - Handles dynamic class file generation and transmission\n- sendHeader(OutputStream out, long dataLength, int filetype) -> void - Sends HTTP response headers\n- replyError(OutputStream out, BadHttpRequest e) -> void - Sends HTTP error response",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Date;\n\npublic class Webserver {\n    private ServerSocket socket;\n    private ClassPool classPool;\n    protected Translator translator;\n\n    private final static byte[] endofline = { 0x0d, 0x0a };\n\n    public Webserver(int port) throws IOException {\n        socket = new ServerSocket(port);\n        classPool = null;\n        translator = null;\n    }\n\n    public void setClassPool(ClassPool loader) {\n        classPool = loader;\n    }\n\n    public void addTranslator(ClassPool cp, Translator t)\n        throws NotFoundException, CannotCompileException\n    {\n        classPool = cp;\n        translator = t;\n        t.start(classPool);\n    }\n\n    public void end() throws IOException {\n        socket.close();\n    }\n\n    public void run() {\n        System.err.println(\"ready to service...\");\n        for (;;)\n            try {\n                ServiceThread th = new ServiceThread(this, socket.accept());\n                th.start();\n            }\n            catch (IOException e) {\n                System.out.println(e.toString());\n            }\n    }\n\n    final void process(Socket clnt) throws IOException {\n        InputStream in = new BufferedInputStream(clnt.getInputStream());\n        String cmd = readLine(in);\n        while (skipLine(in) > 0){\n        }\n\n        OutputStream out = new BufferedOutputStream(clnt.getOutputStream());\n        try {\n            doReply(in, out, cmd);\n        }\n        catch (BadHttpRequest e) {\n            replyError(out, e);\n        }\n\n        out.flush();\n        in.close();\n        out.close();\n        clnt.close();\n    }\n\n    private String readLine(InputStream in) throws IOException {\n        StringBuffer buf = new StringBuffer();\n        int c;\n        while ((c = in.read()) >= 0 && c != 0x0d)\n            buf.append((char)c);\n\n        in.read();      /* skip 0x0a (LF) */\n        return buf.toString();\n    }\n\n    private int skipLine(InputStream in) throws IOException {\n        int c;\n        int len = 0;\n        while ((c = in.read()) >= 0 && c != 0x0d)\n            ++len;\n\n        in.read();      /* skip 0x0a (LF) */\n        return len;\n    }\n\n    public void doReply(InputStream in, OutputStream out, String cmd)\n        throws IOException, BadHttpRequest\n    {\n        int len;\n        int fileType;\n        String filename, urlName;\n\n        if (cmd.startsWith(\"GET /\"))\n            filename = urlName = cmd.substring(5, cmd.indexOf(' ', 5));\n        else\n            throw new BadHttpRequest();\n\n        len = filename.length();\n        if (letUsersSendClassfile(out, filename, len))\n            return;\n\n        checkFilename(filename, len);\n        File file = new File(filename);\n        if (file.canRead()) {\n            sendHeader(out, file.length(), typeClass);\n            FileInputStream fin = new FileInputStream(file);\n            byte[] filebuffer = new byte[4096];\n            for (;;) {\n                len = fin.read(filebuffer);\n                if (len <= 0)\n                    break;\n                out.write(filebuffer, 0, len);\n            }\n\n            fin.close();\n            return;\n        }\n\n        throw new BadHttpRequest();\n    }\n\n    private boolean letUsersSendClassfile(OutputStream out,\n                                          String filename, int length)\n        throws IOException, BadHttpRequest\n    {\n        if (classPool == null)\n            return false;\n\n        byte[] classfile;\n        String classname\n            = filename.substring(0, length - 6).replace('/', '.');\n        try {\n            if (translator != null)\n                translator.onLoad(classPool, classname);\n\n            CtClass c = classPool.get(classname);\n            classfile = c.toBytecode();\n        }\n        catch (Exception e) {\n            throw new BadHttpRequest(e);\n        }\n\n        sendHeader(out, classfile.length, typeClass);\n        out.write(classfile);\n        return true;\n    }\n\n    private void sendHeader(OutputStream out, long dataLength, int filetype)\n        throws IOException\n    {\n        out.write(\"HTTP/1.0 200 OK\".getBytes());\n        out.write(endofline);\n        out.write(\"Content-Length: \".getBytes());\n        out.write(Long.toString(dataLength).getBytes());\n        out.write(endofline);\n        out.write(\"Content-Type: application/octet-stream\".getBytes());\n        out.write(endofline);\n        out.write(endofline);\n    }\n\n    private void replyError(OutputStream out, BadHttpRequest e)\n        throws IOException\n    {\n        out.write(\"HTTP/1.0 400 Bad Request\".getBytes());\n        out.write(endofline);\n        out.write(endofline);\n        out.write(\"<H1>Bad Request</H1>\".getBytes());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport javassist.*;\nimport javassist.bytecode.*;\n\npublic class Webserver {\n    private ServerSocket socket;\n    private ClassPool classPool;\n    private Translator translator;\n    private final byte[] endofline = \"\\r\\n\".getBytes();\n\n    public Webserver(int port) throws IOException {\n        this.socket = new ServerSocket(port);\n    }\n\n    public void setClassPool(ClassPool loader) {\n        this.classPool = loader;\n    }\n\n    public void addTranslator(ClassPool cp, Translator t) {\n        this.classPool = cp;\n        this.translator = t;\n        cp.insertTranslator(t);\n    }\n\n    public void end() {\n        try {\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                Socket client = socket.accept();\n                new Thread(() -> process(client)).start();\n            } catch (IOException e) {\n                e.printStackTrace();\n                break;\n            }\n        }\n    }\n\n    private void process(Socket clnt) {\n        try (InputStream in = clnt.getInputStream(); OutputStream out = clnt.getOutputStream()) {\n            String requestLine = readLine(in);\n            if (requestLine == null || requestLine.isEmpty()) {\n                return;\n            }\n            String[] parts = requestLine.split(\" \");\n            if (parts.length < 2) {\n                return;\n            }\n            String cmd = parts[0];\n            String path = parts[1];\n            doReply(in, out, cmd, path);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                clnt.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private String readLine(InputStream in) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int c;\n        while ((c = in.read()) != -1) {\n            if (c == '\\r') {\n                int next = in.read();\n                if (next == '\\n') {\n                    break;\n                } else {\n                    in.reset();\n                    break;\n                }\n            }\n            sb.append((char) c);\n        }\n        return sb.toString();\n    }\n\n    private int skipLine(InputStream in) throws IOException {\n        int c;\n        while ((c = in.read()) != -1) {\n            if (c == '\\r') {\n                int next = in.read();\n                if (next == '\\n') {\n                    return 0;\n                } else {\n                    in.reset();\n                    return -1;\n                }\n            }\n        }\n        return -1;\n    }\n\n    private void doReply(InputStream in, OutputStream out, String cmd, String path) {\n        if (\"GET\".equals(cmd)) {\n            if (path.endsWith(\".class\")) {\n                if (letUsersSendClassfile(out, path, 0)) {\n                    return;\n                }\n            }\n            File file = new File(path);\n            if (file.exists() && file.isFile()) {\n                try (FileInputStream fis = new FileInputStream(file)) {\n                    sendHeader(out, file.length(), 0);\n                    byte[] buffer = new byte[4096];\n                    int bytesRead;\n                    while ((bytesRead = fis.read(buffer)) != -1) {\n                        out.write(buffer, 0, bytesRead);\n                    }\n                    out.flush();\n                } catch (IOException e) {\n                    replyError(out, new BadHttpRequest(\"File not found\"));\n                }\n            } else {\n                replyError(out, new BadHttpRequest(\"File not found\"));\n            }\n        } else {\n            replyError(out, new BadHttpRequest(\"Method not allowed\"));\n        }\n    }\n\n    private boolean letUsersSendClassfile(OutputStream out, String filename, int length) {\n        try {\n            String className = filename.replace('/', '.').substring(1, filename.length() - 6);\n            CtClass cc = classPool.get(className);\n            byte[] bytecode = cc.toBytecode();\n            sendHeader(out, bytecode.length, 1);\n            out.write(bytecode);\n            out.flush();\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    private void sendHeader(OutputStream out, long dataLength, int filetype) {\n        String contentType = (filetype == 1) ? \"application/octet-stream\" : \"text/plain\";\n        try {\n            out.write(\"HTTP/1.0 200 OK\\r\\n\".getBytes());\n            out.write(\"Content-Type: \".getBytes());\n            out.write(contentType.getBytes());\n            out.write(\"\\r\\n\".getBytes());\n            out.write(\"Content-Length: \".getBytes());\n            out.write(String.valueOf(dataLength).getBytes());\n            out.write(\"\\r\\n\".getBytes());\n            out.write(\"\\r\\n\".getBytes());\n            out.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void replyError(OutputStream out, BadHttpRequest e) {\n        try {\n            out.write(\"HTTP/1.0 400 Bad Request\\r\\n\".getBytes());\n            out.write(\"\\r\\n\".getBytes());\n            out.flush();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 552,
    "Instruction": "Task Description: Implement a basic HTTP server in Java using ServerSocket that handles GET requests and responds with appropriate HTTP status codes.\n\nClass Description: The Webserver class represents a simple HTTP server that listens on a specified port, accepts client connections, processes HTTP GET requests, and sends responses. It uses multi-threading to handle multiple client connections simultaneously.\n\nAttributes:\n- socket: ServerSocket - The server socket that listens for incoming client connections\n\nMethods:\n- Webserver(int port) -> void - Constructor that initializes the server socket on the specified port\n- run() -> void - Starts the server, continuously accepting client connections and spawning ServiceThreads to handle them\n- process(Socket clnt) -> void - Processes a client connection by reading the request and sending a response\n- readLine(InputStream in) -> String - Reads a line of text from the input stream until CRLF is encountered\n- skipLine(InputStream in) -> int - Skips a line in the input stream and returns its length\n- doReply(InputStream in, OutputStream out, String cmd) -> void - Processes the HTTP command and generates an appropriate response\n- replyError(OutputStream out, Exception e) -> void - Sends an HTTP error response to the client\n\nAdditional Class:\nServiceThread: A helper class that extends Thread to handle individual client connections in separate threads\n\nServiceThread Attributes:\n- web: Webserver - Reference to the main server instance\n- sock: Socket - The client socket connection\n\nServiceThread Methods:\n- ServiceThread(Webserver w, Socket s) -> void - Constructor that initializes the thread with server and client socket references\n- run() -> void - The thread's main execution method that processes the client request",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class Webserver {\n    private ServerSocket socket;\n\n    public Webserver(int port) throws IOException {\n        socket = new ServerSocket(port);\n    }\n\n    public void run() {\n        System.err.println(\"ready to service...\");\n        for (;;)\n            try {\n                ServiceThread th = new ServiceThread(this, socket.accept());\n                th.start();\n            }\n            catch (IOException e) {\n                System.out.println(e.toString());\n            }\n    }\n\n    final void process(Socket clnt) throws IOException {\n        InputStream in = new BufferedInputStream(clnt.getInputStream());\n        OutputStream out = new BufferedOutputStream(clnt.getOutputStream());\n        try {\n            String cmd = readLine(in);\n            while (skipLine(in) > 0) {}\n            doReply(in, out, cmd);\n        }\n        catch (Exception e) {\n            replyError(out, e);\n        }\n        finally {\n            out.flush();\n            in.close();\n            out.close();\n            clnt.close();\n        }\n    }\n\n    private String readLine(InputStream in) throws IOException {\n        StringBuilder buf = new StringBuilder();\n        int c;\n        while ((c = in.read()) >= 0 && c != 0x0d)\n            buf.append((char)c);\n        in.read();\n        return buf.toString();\n    }\n\n    private int skipLine(InputStream in) throws IOException {\n        int c;\n        int len = 0;\n        while ((c = in.read()) >= 0 && c != 0x0d)\n            ++len;\n        in.read();\n        return len;\n    }\n\n    public void doReply(InputStream in, OutputStream out, String cmd) throws IOException {\n        if (cmd.startsWith(\"GET /\")) {\n            String filename = cmd.substring(5, cmd.indexOf(' ', 5));\n            out.write(\"HTTP/1.0 200 OK\\r\\n\\r\\n\".getBytes());\n        }\n        else\n            throw new IOException(\"Bad Request\");\n    }\n\n    private void replyError(OutputStream out, Exception e) throws IOException {\n        out.write(\"HTTP/1.0 400 Bad Request\\r\\n\\r\\n\".getBytes());\n        out.write(\"<H1>Bad Request</H1>\".getBytes());\n    }\n}\n\nclass ServiceThread extends Thread {\n    Webserver web;\n    Socket sock;\n\n    public ServiceThread(Webserver w, Socket s) {\n        web = w;\n        sock = s;\n    }\n\n    @Override\n    public void run() {\n        try {\n            web.process(sock);\n        }\n        catch (IOException e) {\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class Webserver {\n    private ServerSocket socket;\n\n    public Webserver(int port) throws IOException {\n        socket = new ServerSocket(port);\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                Socket client = socket.accept();\n                new ServiceThread(this, client).start();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void process(Socket clnt) {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = clnt.getInputStream();\n            out = clnt.getOutputStream();\n            String requestLine = readLine(in);\n            if (requestLine == null || requestLine.isEmpty()) {\n                replyError(out, new Exception(\"Empty request\"));\n                return;\n            }\n            String[] parts = requestLine.split(\" \");\n            if (parts.length < 3) {\n                replyError(out, new Exception(\"Invalid request line\"));\n                return;\n            }\n            String cmd = parts[0];\n            if (cmd.equals(\"GET\")) {\n                doReply(in, out, cmd);\n            } else {\n                replyError(out, new Exception(\"Method not allowed\"));\n            }\n        } catch (IOException e) {\n            replyError(out, e);\n        } finally {\n            try {\n                if (in != null) in.close();\n                if (out != null) out.close();\n                clnt.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private String readLine(InputStream in) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int c;\n        while ((c = in.read()) != -1) {\n            sb.append((char) c);\n            if (sb.length() >= 2 && sb.charAt(sb.length() - 2) == '\\r' && sb.charAt(sb.length() - 1) == '\\n') {\n                sb.setLength(sb.length() - 2);\n                return sb.toString();\n            }\n        }\n        return sb.toString();\n    }\n\n    private int skipLine(InputStream in) throws IOException {\n        int len = 0;\n        int c;\n        while ((c = in.read()) != -1) {\n            len++;\n            if (c == '\\n') {\n                break;\n            }\n        }\n        return len;\n    }\n\n    private void doReply(InputStream in, OutputStream out, String cmd) throws IOException {\n        String response = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\nContent-Length: 13\\r\\n\\r\\nHello, world!\";\n        out.write(response.getBytes());\n        out.flush();\n    }\n\n    private void replyError(OutputStream out, Exception e) {\n        try {\n            String errorMessage = \"HTTP/1.1 400 Bad Request\\r\\nContent-Type: text/plain\\r\\nContent-Length: \" + e.getMessage().length() + \"\\r\\n\\r\\n\" + e.getMessage();\n            out.write(errorMessage.getBytes());\n            out.flush();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n\nclass ServiceThread extends Thread {\n    private Webserver web;\n    private Socket sock;\n\n    public ServiceThread(Webserver w, Socket s) {\n        web = w;\n        sock = s;\n    }\n\n    @Override\n    public void run() {\n        web.process(sock);\n    }\n}\n```"
  },
  {
    "Task_id": 553,
    "Instruction": "Task Description: Create a TCP server class that listens for incoming client connections, handles each client connection in a separate thread, and processes incoming data from clients.\n\nClass Description: TCPServer is a Java class that implements a basic TCP server using ServerSocket. It listens on a specified port for incoming client connections, creates a new thread for each connected client, and reads UTF-encoded messages from clients. The server maintains a running state and properly closes resources when finished.\n\nAttributes:\n- serverSocket: ServerSocket - The server socket that listens for incoming connections\n- started: boolean - Flag indicating whether the server is running\n\nMethods:\n- start(int port) -> void - Starts the server on the specified port, begins listening for connections, and creates new threads for each client\n- ClientHandler(Socket socket) -> void - Constructor for the inner client handler class (takes a client socket as parameter)\n- run() -> void - The thread's main execution method that reads data from the client (inherited from Thread)",
    "Canonical_solution": "import java.io.DataInputStream;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class TCPServer {\n    private ServerSocket serverSocket;\n    private boolean started;\n\n    public void start(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n        started = true;\n        System.out.println(\"Server started\");\n\n        try {\n            while (started) {\n                Socket clientSocket = serverSocket.accept();\n                System.out.println(\"A client connected!\");\n                new ClientHandler(clientSocket).start();\n            }\n        } finally {\n            if (serverSocket != null) {\n                serverSocket.close();\n            }\n        }\n    }\n\n    private class ClientHandler extends Thread {\n        private Socket socket;\n        private DataInputStream inputStream;\n\n        public ClientHandler(Socket socket) throws IOException {\n            this.socket = socket;\n            this.inputStream = new DataInputStream(socket.getInputStream());\n        }\n\n        @Override\n        public void run() {\n            try {\n                System.out.println(inputStream.readUTF());\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    if (inputStream != null) {\n                        inputStream.close();\n                    }\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class TCPServer {\n    private ServerSocket serverSocket;\n    private boolean started;\n\n    public void start(int port) {\n        try {\n            serverSocket = new ServerSocket(port);\n            started = true;\n            while (started) {\n                Socket clientSocket = serverSocket.accept();\n                new Thread(new ClientHandler(clientSocket)).start();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (serverSocket != null) {\n                    serverSocket.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class ClientHandler implements Runnable {\n        private final Socket socket;\n\n        public ClientHandler(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            try (BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {\n                String line;\n                while ((line = in.readLine()) != null) {\n                    System.out.println(\"Received: \" + line);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 554,
    "Instruction": "Task Description: Create a Java class that implements a simple TCP echo server using ServerSocket to listen for client connections, receive messages, and send them back to the client with an \"ECHO : \" prefix until the client sends \"bye\" or an empty message.\n\nClass Description: The EchoServer class represents a TCP server that echoes back received messages to connected clients. It handles client connections, message processing, and resource cleanup.\n\nAttributes:\n- server: [ServerSocket] - The server socket listening for incoming connections\n- client: [Socket] - The socket representing the connected client\n- out: [PrintStream] - Output stream to send data to the client\n- buf: [BufferedReader] - Input stream to read data from the client\n- flag: [boolean] - Control flag for the server's main loop\n\nMethods:\n- EchoServer(int port) -> [void] - Constructor that initializes the server socket on the specified port\n- start() -> [void] - Starts the server, accepts client connections, and begins echoing messages\n- close() -> [void] - Closes client and server sockets to release resources",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class EchoServer {\n\n    private ServerSocket server;\n    private Socket client;\n    private PrintStream out;\n    private BufferedReader buf;\n    private boolean flag;\n\n    public EchoServer(int port) throws Exception {\n        server = new ServerSocket(port);\n        flag = true;\n    }\n\n    public void start() throws Exception {\n        System.out.println(\"\u670d\u52a1\u5668\u8fd0\u884c\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5\u3002\");\n        client = server.accept();\n        out = new PrintStream(client.getOutputStream());\n        buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        while (flag) {\n            String str = buf.readLine();\n            if (str == null || \"\".equals(str)) {\n                flag = false;\n            } else {\n                if (\"bye\".equals(str)) {\n                    flag = false;\n                } else {\n                    out.println(\"ECHO : \" + str);\n                }\n            }\n        }\n    }\n\n    public void close() throws Exception {\n        client.close();\n        server.close();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class EchoServer {\n    private ServerSocket server;\n    private Socket client;\n    private PrintStream out;\n    private BufferedReader buf;\n    private boolean flag;\n\n    public EchoServer(int port) throws IOException {\n        this.server = new ServerSocket(port);\n        this.flag = true;\n    }\n\n    public void start() {\n        try {\n            client = server.accept();\n            buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n            out = new PrintStream(client.getOutputStream());\n            while (flag) {\n                String inputLine = buf.readLine();\n                if (inputLine == null) {\n                    break;\n                }\n                if (inputLine.trim().isEmpty() || inputLine.equalsIgnoreCase(\"bye\")) {\n                    flag = false;\n                } else {\n                    out.println(\"ECHO : \" + inputLine);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            close();\n        }\n    }\n\n    public void close() {\n        try {\n            if (client != null) {\n                client.close();\n            }\n            if (server != null) {\n                server.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 555,
    "Instruction": "Task Description: Create a TCP server class that handles multiple types of client requests through socket communication, supporting operations like content updates, progress tracking, and layout management.\n\nClass Description: LinkServer is a TCP server implementation that listens on a specified port for incoming client connections. It handles different types of requests defined by operation codes, manages client connections in separate threads, and provides bidirectional communication through input/output streams.\n\nAttributes:\n- server: ServerSocket - The main server socket that listens for incoming connections\n- port: int - The port number on which the server listens (default: 9999)\n- UPDATE_CONTENT: int - Constant for content update operation (value: 1)\n- UPDATE_PROGRESS: int - Constant for progress update operation (value: 2)\n- GET_CURRENT_CONTENT: int - Constant for content retrieval operation (value: 3)\n- SET_DRAW_DEBUG: int - Constant for debug mode setting operation (value: 4)\n- GET_LAYOUT_LIST: int - Constant for layout list retrieval operation (value: 5)\n- GET_CURRENT_LAYOUT: int - Constant for current layout retrieval operation (value: 6)\n- UPDATE_LAYOUT_DIMENSIONS: int - Constant for layout dimensions update operation (value: 7)\n\nMethods:\n- LinkServer() -> void - Default constructor initializes server with default port\n- LinkServer(int port) -> void - Constructor that takes a custom port number\n- init() -> void - Initializes the ServerSocket instance\n- start() -> void - Starts the server and begins accepting client connections in a dedicated thread\n- handleRequest(Socket socket) -> void - Handles client requests in a separate thread (Input: client socket)\n- closeConnection(Socket socket) -> void - Closes the client socket connection (Input: client socket to close)",
    "Canonical_solution": "import java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Set;\n\npublic class LinkServer {\n    private ServerSocket server;\n    private int port = 9999;\n\n    final int UPDATE_CONTENT = 1;\n    final int UPDATE_PROGRESS = 2;\n    final int GET_CURRENT_CONTENT = 3;\n    final int SET_DRAW_DEBUG = 4;\n    final int GET_LAYOUT_LIST = 5;\n    final int GET_CURRENT_LAYOUT = 6;\n    final int UPDATE_LAYOUT_DIMENSIONS = 7;\n\n    public LinkServer() {\n        init();\n        start();\n    }\n\n    public LinkServer(int port) {\n        this.port = port;\n        init();\n        start();\n    }\n\n    private void init() {\n        try {\n            server = new ServerSocket(port);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void start() {\n        Thread t = new Thread(() -> {\n            try {\n                while (true) {\n                    Socket client = server.accept();\n                    Thread acceptThread = new Thread(() -> handleRequest(client));\n                    acceptThread.start();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n        t.setName(\"Link Debug Thread\");\n        t.start();\n    }\n\n    void handleRequest(Socket socket) {\n        boolean running = true;\n        DataInputStream reader;\n        DataOutputStream writer;\n        try {\n            reader = new DataInputStream(socket.getInputStream());\n            writer = new DataOutputStream(socket.getOutputStream());\n        } catch (IOException e) {\n            e.printStackTrace();\n            return;\n        }\n\n        while (running) {\n            try {\n                int type = reader.readInt();\n                String name = reader.readUTF();\n                switch (type) {\n                    case UPDATE_CONTENT:\n                        String content = reader.readUTF();\n                        break;\n                    case UPDATE_PROGRESS:\n                        float progress = reader.readFloat();\n                        break;\n                    case GET_CURRENT_CONTENT:\n                        content = \"\";\n                        writer.writeUTF(content);\n                        break;\n                    case SET_DRAW_DEBUG:\n                        boolean drawDebug = reader.readBoolean();\n                        break;\n                    case GET_LAYOUT_LIST:\n                        Set<String> list = Set.of();\n                        writer.writeInt(list.size());\n                        for (String layout : list) {\n                            writer.writeUTF(layout);\n                        }\n                        break;\n                    case GET_CURRENT_LAYOUT:\n                        content = \"\";\n                        writer.writeUTF(content);\n                        break;\n                    case UPDATE_LAYOUT_DIMENSIONS:\n                        int width = reader.readInt();\n                        int height = reader.readInt();\n                        break;\n                }\n            } catch (Exception e) {\n                closeConnection(socket);\n                running = false;\n            }\n        }\n    }\n\n    private void closeConnection(Socket socket) {\n        try {\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class LinkServer {\n    private ServerSocket server;\n    private int port;\n    public static final int UPDATE_CONTENT = 1;\n    public static final int UPDATE_PROGRESS = 2;\n    public static final int GET_CURRENT_CONTENT = 3;\n    public static final int SET_DRAW_DEBUG = 4;\n    public static final int GET_LAYOUT_LIST = 5;\n    public static final int GET_CURRENT_LAYOUT = 6;\n    public static final int UPDATE_LAYOUT_DIMENSIONS = 7;\n\n    public LinkServer() {\n        this(9999);\n    }\n\n    public LinkServer(int port) {\n        this.port = port;\n    }\n\n    public void init() {\n        try {\n            server = new ServerSocket(port);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void start() {\n        new Thread(() -> {\n            try {\n                while (true) {\n                    Socket socket = server.accept();\n                    new Thread(() -> handleRequest(socket)).start();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    private void handleRequest(Socket socket) {\n        try (DataInputStream input = new DataInputStream(socket.getInputStream());\n             DataOutputStream output = new DataOutputStream(socket.getOutputStream())) {\n            int opCode = input.readInt();\n            switch (opCode) {\n                case UPDATE_CONTENT:\n                    // Handle content update\n                    break;\n                case UPDATE_PROGRESS:\n                    // Handle progress update\n                    break;\n                case GET_CURRENT_CONTENT:\n                    // Send current content\n                    break;\n                case SET_DRAW_DEBUG:\n                    // Set debug mode\n                    break;\n                case GET_LAYOUT_LIST:\n                    // Send layout list\n                    break;\n                case GET_CURRENT_LAYOUT:\n                    // Send current layout\n                    break;\n                case UPDATE_LAYOUT_DIMENSIONS:\n                    // Update layout dimensions\n                    break;\n                default:\n                    // Unknown operation\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            closeConnection(socket);\n        }\n    }\n\n    private void closeConnection(Socket socket) {\n        try {\n            if (socket != null && !socket.isClosed()) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 556,
    "Instruction": "Task Description: Implement a TCP server class in Java that handles multiple client connections concurrently using thread pooling. The server should listen on a specified port, accept incoming connections, and process client requests in separate worker threads.\n\nClass Description: ViewServer is a TCP server implementation that manages incoming client connections using a thread pool. It provides methods to start and stop the server, and processes client requests asynchronously through worker threads.\n\nAttributes:\n- VIEW_SERVER_DEFAULT_PORT: int - Default port number for the server (4939)\n- VIEW_SERVER_MAX_CONNECTIONS: int - Maximum number of concurrent connections (10)\n- mServer: ServerSocket - The server socket instance for accepting connections\n- mPort: int - The port number on which the server listens\n- mThread: Thread - The server's main thread\n- mThreadPool: ExecutorService - Thread pool for handling client connections\n\nMethods:\n- ViewServer(int port) -> None - Constructor that initializes the server with specified port\n- start() -> boolean - Starts the server thread and initializes thread pool, returns true if successful\n- stop() -> boolean - Stops the server thread, shuts down thread pool, and closes server socket, returns true if successful\n- run() -> None - Main server loop that accepts incoming connections and delegates to worker threads\n- ViewServerWorker(Socket client) -> None - Nested class constructor for handling individual client connections\n- run() (in ViewServerWorker) -> None - Processes client request by reading input stream and closing connection",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ViewServer implements Runnable {\n    private static final int VIEW_SERVER_DEFAULT_PORT = 4939;\n    private static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n    \n    private ServerSocket mServer;\n    private final int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    private ViewServer(int port) {\n        mPort = port;\n    }\n\n    public boolean start() throws IOException {\n        if (mThread != null) {\n            return false;\n        }\n\n        mThread = new Thread(this, \"Local View Server [port=\" + mPort + \"]\");\n        mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n        mThread.start();\n        return true;\n    }\n\n    public boolean stop() {\n        if (mThread != null) {\n            mThread.interrupt();\n            if (mThreadPool != null) {\n                try {\n                    mThreadPool.shutdownNow();\n                } catch (SecurityException e) {\n                    // Ignore\n                }\n            }\n\n            mThreadPool = null;\n            mThread = null;\n\n            try {\n                mServer.close();\n                mServer = null;\n                return true;\n            } catch (IOException e) {\n                // Ignore\n            }\n        }\n        return false;\n    }\n\n    public void run() {\n        try {\n            mServer = new ServerSocket(mPort, VIEW_SERVER_MAX_CONNECTIONS, InetAddress.getLocalHost());\n        } catch (Exception e) {\n            // Ignore\n        }\n\n        while (mServer != null && Thread.currentThread() == mThread) {\n            try {\n                Socket client = mServer.accept();\n                if (mThreadPool != null) {\n                    mThreadPool.submit(new ViewServerWorker(client));\n                } else {\n                    try {\n                        client.close();\n                    } catch (IOException e) {\n                        // Ignore\n                    }\n                }\n            } catch (Exception e) {\n                // Ignore\n            }\n        }\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private Socket mClient;\n\n        public ViewServerWorker(Socket client) {\n            mClient = client;\n        }\n\n        public void run() {\n            BufferedReader in = null;\n            try {\n                in = new BufferedReader(new InputStreamReader(mClient.getInputStream()), 1024);\n                String request = in.readLine();\n                // Process client request here\n            } catch(IOException e) {\n                // Ignore\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        // Ignore\n                    }\n                }\n                if (mClient != null) {\n                    try {\n                        mClient.close();\n                    } catch (IOException e) {\n                        // Ignore\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.*;\n\npublic class ViewServer {\n    private static final int VIEW_SERVER_DEFAULT_PORT = 4939;\n    private static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n    private ServerSocket mServer;\n    private int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n    private volatile boolean isRunning;\n\n    public ViewServer(int port) {\n        this.mPort = port;\n    }\n\n    public boolean start() {\n        try {\n            mServer = new ServerSocket(mPort);\n            mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n            mThread = new Thread(this::run);\n            mThread.start();\n            isRunning = true;\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    public boolean stop() {\n        isRunning = false;\n        if (mThread != null) {\n            mThread.interrupt();\n        }\n        if (mServer != null) {\n            try {\n                mServer.close();\n            } catch (IOException e) {\n            }\n        }\n        if (mThreadPool != null) {\n            mThreadPool.shutdownNow();\n        }\n        return true;\n    }\n\n    public void run() {\n        while (isRunning) {\n            try {\n                Socket client = mServer.accept();\n                mThreadPool.submit(new ViewServerWorker(client));\n            } catch (IOException e) {\n                if (isRunning) {\n                }\n                break;\n            }\n        }\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private final Socket client;\n\n        public ViewServerWorker(Socket client) {\n            this.client = client;\n        }\n\n        @Override\n        public void run() {\n            try (InputStream input = client.getInputStream()) {\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = input.read(buffer)) != -1) {\n                }\n            } catch (IOException e) {\n            } finally {\n                try {\n                    client.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 558,
    "Instruction": "Task Description: Implement a simple embedded HTTP server in Java that can handle incoming HTTP requests, parse request headers, and delegate request handling to a customizable method.\n\nClass Description: The EmbedHttpServer class represents a basic HTTP server that listens on a specified port, accepts client connections, parses HTTP requests, and provides hooks for custom request handling.\n\nAttributes:\n- port: int - The port number on which the server listens for incoming connections\n- serverSocket: ServerSocket - The server socket used to accept client connections\n\nMethods:\n- EmbedHttpServer(int port) -> None - Constructor that initializes the server with the specified port\n- start() -> void - Starts the server by creating a ServerSocket and launching a new thread to handle connections\n- stop() -> void - Stops the server by closing the ServerSocket and cleaning up resources\n- handle(String method, String path, HashMap<String, String> headers, InputStream input, OutputStream response) -> void - Abstract method to be implemented for custom request handling (takes HTTP method, path, headers, request body stream, and response stream)\n- run() -> void - Main server loop that accepts connections, parses requests, and delegates to handle() method (implements Runnable interface)\n- BodyInputStream(InputStream ins, int n) -> None - Nested class constructor that creates an input stream with limited bytes to read\n- available() -> int - Returns the number of bytes available in the BodyInputStream\n- read() -> int - Reads a single byte from the BodyInputStream\n- read(byte[] b, int off, int len) -> int - Reads bytes into an array from the BodyInputStream\n- skip(long n) -> long - Throws IOException as skipping is not supported\n- close() -> void - Closes the underlying input stream",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.HashMap;\n\npublic class EmbedHttpServer implements Runnable {\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        if (serverSocket == null) {\n            serverSocket = new ServerSocket(port);\n            new Thread(this, \"embed-http-server\").start();\n        }\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null) {\n            serverSocket.close();\n            serverSocket = null;\n        }\n    }\n\n    protected void handle(String method, String path,\n            HashMap<String, String> headers, InputStream input,\n            OutputStream response) throws Exception {\n    }\n\n    @Override\n    public void run() {\n        final ServerSocket ss = serverSocket;\n        while (ss == serverSocket) {\n            Socket conn = null;\n            try {\n                conn = ss.accept();\n                String method = null;\n                String path = null;\n                HashMap<String, String> headers = new HashMap<String, String>();\n\n                InputStream ins = conn.getInputStream();\n                StringBuilder sb = new StringBuilder(512);\n                int l;\n                while ((l = ins.read()) != -1) {\n                    if (l == '\\n') {\n                        if (sb.length() > 0\n                                && sb.charAt(sb.length() - 1) == '\\r')\n                            sb.setLength(sb.length() - 1);\n                        if (sb.length() == 0) {\n                            break;\n                        } else if (method == null) {\n                            int i = sb.indexOf(\" \");\n                            method = sb.substring(0, i);\n                            int j = sb.lastIndexOf(\" HTTP/\");\n                            path = sb.substring(i + 1, j).trim();\n                        } else {\n                            int i = sb.indexOf(\":\");\n                            String name = sb.substring(0, i).trim();\n                            String val = sb.substring(i + 1).trim();\n                            headers.put(name, val);\n                        }\n                        sb.setLength(0);\n                    } else {\n                        sb.append((char) l);\n                    }\n                }\n                int contentLength = 0;\n                String str = headers.get(\"Content-Length\");\n                if (str != null) {\n                    contentLength = Integer.parseInt(str);\n                }\n                OutputStream os = conn.getOutputStream();\n                str = headers.get(\"Expect\");\n                if (\"100-Continue\".equalsIgnoreCase(str)) {\n                    os.write(\"HTTP/1.1 100 Continue\\r\\n\\r\\n\".getBytes(\"ASCII\"));\n                    os.flush();\n                }\n                InputStream input = new BodyInputStream(ins, contentLength);\n                handle(method, path, headers, input, os);\n                os.close();\n\n                conn.close();\n                conn = null;\n            } catch (Exception e) {\n                if (conn != null) {\n                    try {\n                        conn.close();\n                    } catch (Exception ee) {\n                    }\n                }\n            }\n\n            if (!ss.isBound() || ss.isClosed()) {\n                serverSocket = null;\n            }\n        }\n    }\n\n    private static class BodyInputStream extends InputStream {\n        private InputStream ins;\n        private int n;\n\n        public BodyInputStream(InputStream ins, int n) {\n            this.ins = ins;\n            this.n = n;\n        }\n\n        @Override\n        public int available() throws IOException {\n            return n;\n        }\n\n        @Override\n        public int read() throws IOException {\n            if (n <= 0)\n                return -1;\n            int r = ins.read();\n            if (r != -1)\n                n--;\n            return r;\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n            if (n <= 0)\n                return -1;\n            int l = ins.read(b, off, len < n ? len : n);\n            if (l != -1)\n                n -= l;\n            return l;\n        }\n\n        @Override\n        public long skip(long n) throws IOException {\n            throw new IOException(\"unsupported\");\n        }\n\n        @Override\n        public void close() throws IOException {\n            ins.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.HashMap;\n\npublic abstract class EmbedHttpServer implements Runnable {\n    private final int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() {\n        try {\n            serverSocket = new ServerSocket(port);\n            new Thread(this).start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (serverSocket != null) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public abstract void handle(String method, String path, HashMap<String, String> headers, InputStream input, OutputStream response);\n\n    @Override\n    public void run() {\n        while (!Thread.currentThread().isInterrupted()) {\n            try {\n                Socket clientSocket = serverSocket.accept();\n                InputStream input = clientSocket.getInputStream();\n                OutputStream output = clientSocket.getOutputStream();\n\n                String requestLine = readLine(input);\n                if (requestLine == null) {\n                    continue;\n                }\n                String[] parts = requestLine.split(\" \", 3);\n                String method = parts[0];\n                String path = parts[1];\n\n                HashMap<String, String> headers = new HashMap<>();\n                String line;\n                while (!(line = readLine(input)).isEmpty()) {\n                    String[] header = line.split(\": \", 2);\n                    if (header.length == 2) {\n                        headers.put(header[0], header[1]);\n                    }\n                }\n\n                int contentLength = 0;\n                if (headers.containsKey(\"Content-Length\")) {\n                    contentLength = Integer.parseInt(headers.get(\"Content-Length\"));\n                }\n\n                BodyInputStream bodyInput = new BodyInputStream(input, contentLength);\n\n                handle(method, path, headers, bodyInput, output);\n\n                clientSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private String readLine(InputStream input) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int c;\n        while ((c = input.read()) != -1) {\n            if (c == '\\n') {\n                break;\n            }\n            sb.append((char) c);\n        }\n        return sb.length() == 0 ? null : sb.toString();\n    }\n\n    private class BodyInputStream extends InputStream {\n        private final InputStream ins;\n        private final int limit;\n        private int remaining;\n\n        public BodyInputStream(InputStream ins, int n) {\n            this.ins = ins;\n            this.limit = n;\n            this.remaining = n;\n        }\n\n        @Override\n        public int available() throws IOException {\n            return remaining;\n        }\n\n        @Override\n        public int read() throws IOException {\n            if (remaining <= 0) {\n                return -1;\n            }\n            int b = ins.read();\n            if (b != -1) {\n                remaining--;\n            }\n            return b;\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n            if (remaining <= 0) {\n                return -1;\n            }\n            int toRead = Math.min(len, remaining);\n            int bytesRead = ins.read(b, off, toRead);\n            if (bytesRead != -1) {\n                remaining -= bytesRead;\n            }\n            return bytesRead;\n        }\n\n        @Override\n        public long skip(long n) throws IOException {\n            throw new IOException(\"Skip not supported\");\n        }\n\n        @Override\n        public void close() throws IOException {\n            ins.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 563,
    "Instruction": "Task Description: Create a Java function that tests a client-server connection using Socket programming, including handling connection events and verifying successful communication.\n\nFunction Description: The function establishes a TCP connection to a server, sends an HTTP GET request, and verifies both connection establishment and message delivery. It uses CountDownLatch for synchronization between the main thread and callback handlers. The function fails if either the connection or message delivery doesn't complete within specified timeouts.\n\nInput: None (uses DefaultServer class for host configuration)\n\nOutput: None (throws exceptions or asserts failures for unsuccessful operations)\n\nKey Operations:\n1. Creates Socket connection to default server\n2. Sets up server event handlers with callbacks\n3. Obtains input/output streams for communication\n4. Sends HTTP GET request\n5. Verifies connection establishment within 10 seconds\n6. Verifies message delivery within 10 seconds\n7. Properly closes resources\n8. Uses synchronization primitives for thread coordination",
    "Canonical_solution": "import java.net.Socket;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\n\npublic void testConnectionFail() throws IOException, InterruptedException {\n    final Socket socket = new Socket(DefaultServer.getHostAddress(\"default\"), DefaultServer.getHostPort(\"default\"));\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch connected = new CountDownLatch(1);\n    DefaultServer.setRootHandler(new ServerSentEventHandler(new ServerSentEventConnectionCallback() {\n        @Override\n        public void connected(final ServerSentEventConnection connection, final String lastEventId) {\n            final XnioIoThread thread = (XnioIoThread) Thread.currentThread();\n            connected.countDown();\n            thread.execute(new Runnable() {\n                @Override\n                public void run() {\n                    connection.send(\"hello\", new ServerSentEventConnection.EventCallback() {\n                        @Override\n                        public void done(ServerSentEventConnection connection, String data, String event, String id) {\n                        }\n\n                        @Override\n                        public void failed(ServerSentEventConnection connection, String data, String event, String id, IOException e) {\n                            latch.countDown();\n                        }\n                    });\n                    if(latch.getCount() > 0) {\n                        WorkerUtils.executeAfter(thread, this, 100, TimeUnit.MILLISECONDS);\n                    }\n                }\n            });\n        }\n    }));\n    InputStream in = socket.getInputStream();\n    OutputStream out = socket.getOutputStream();\n    out.write((\"GET / HTTP/1.1\\r\\nHost:\" + DefaultServer.getHostAddress() +\"\\r\\n\\r\\n\").getBytes());\n    out.flush();\n    if(!connected.await(10, TimeUnit.SECONDS)) {\n        Assert.fail();\n    }\n    out.close();\n    in.close();\n    if(!latch.await(10, TimeUnit.SECONDS)) {\n        Assert.fail();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 1,
    "right_result": "import java.net.*;\nimport java.io.*;\nimport java.util.concurrent.CountDownLatch;\n\npublic class ClientTest {\n    public static void testClientServerConnection() throws Exception {\n        CountDownLatch connectionLatch = new CountDownLatch(1);\n        CountDownLatch messageLatch = new CountDownLatch(1);\n        Socket socket = new Socket();\n        String host = DefaultServer.getHost();\n        int port = DefaultServer.getPort();\n\n        new Thread(() -> {\n            try {\n                socket.connect(new InetSocketAddress(host, port), 10000);\n                connectionLatch.countDown();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        if (!connectionLatch.await(10, java.util.concurrent.TimeUnit.SECONDS)) {\n            throw new RuntimeException(\"Connection establishment failed\");\n        }\n\n        try (OutputStream out = socket.getOutputStream();\n             InputStream in = socket.getInputStream()) {\n            String request = \"GET / HTTP/1.1\\r\\nHost: \" + host + \"\\r\\n\\r\\n\";\n            out.write(request.getBytes());\n            out.flush();\n\n            new Thread(() -> {\n                try {\n                    byte[] buffer = new byte[1024];\n                    int bytesRead = in.read(buffer);\n                    if (bytesRead > 0) {\n                        messageLatch.countDown();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }).start();\n\n            if (!messageLatch.await(10, java.util.concurrent.TimeUnit.SECONDS)) {\n                throw new RuntimeException(\"Message delivery failed\");\n            }\n        } finally {\n            socket.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 565,
    "Instruction": "Task Description: Create a Java class that establishes and manages a TCP connection to a database server using socket programming, including authentication and basic query functionality.\n\nClass Description: The UrlConnection class provides functionality to connect to a database server, authenticate, execute queries, and manage the connection lifecycle. It handles MySQL protocol communication including handshake, authentication, and basic command execution.\n\nAttributes:\n- host: String - The hostname or IP address of the database server\n- port: int - The port number of the database server\n- user: String - The username for authentication\n- password: String - The password for authentication\n- database: String - The name of the database to connect to\n- socket: Socket - The TCP socket connection to the server\n- in: InputStream - Input stream for reading data from the server\n- out: OutputStream - Output stream for writing data to the server\n- charsetIndex: int - The character set index used for communication\n- isClosed: AtomicBoolean - Flag indicating whether the connection is closed\n\nMethods:\n- UrlConnection(String, int, String, String, String) -> void - Constructor that initializes connection parameters\n- connect(int) -> void - Establishes a connection to the server with specified timeout\n- getServerList() -> List<CobarNode> - Executes a query to retrieve server list information\n- close() -> void - Closes the connection and releases resources\n- getRowList(int) -> List<CobarNode> - Helper method to process query result rows\n- auth411(HandshakePacket) -> BinaryPacket - Handles MySQL 4.1 authentication protocol\n- auth323(byte, byte[]) -> void - Handles MySQL 3.23 authentication protocol\n- getClientFlags() -> long - Returns client capability flags for MySQL protocol",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class UrlConnection {\n\n    private String host;\n    private int port;\n    private String user;\n    private String password;\n    private String database;\n    private Socket socket;\n    private InputStream in;\n    private OutputStream out;\n    private int charsetIndex;\n    private AtomicBoolean isClosed;\n\n    public UrlConnection(String host, int port, String user, String password, String database) {\n        this.host = host;\n        this.port = port;\n        this.user = user;\n        this.password = password;\n        this.database = database;\n        this.isClosed = new AtomicBoolean(false);\n    }\n\n    public void connect(int timeout) throws Exception {\n        socket = new Socket();\n        socket.setTcpNoDelay(true);\n        socket.setKeepAlive(true);\n        socket.connect(new InetSocketAddress(host, port), timeout);\n        in = new BufferedInputStream(socket.getInputStream());\n        out = new BufferedOutputStream(socket.getOutputStream());\n\n        BinaryPacket initPacket = new BinaryPacket();\n        initPacket.read(in);\n        HandshakePacket hsp = new HandshakePacket();\n        hsp.read(initPacket);\n\n        this.charsetIndex = hsp.serverCharsetIndex & 0xff;\n\n        BinaryPacket bin = null;\n        try {\n            bin = auth411(hsp);\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalArgumentException(e);\n        }\n        switch (bin.value[0]) {\n        case OkPacket.FIELD_COUNT:\n            break;\n        case ErrorPacket.FIELD_COUNT:\n            ErrorPacket err = new ErrorPacket();\n            err.read(bin);\n            throw new ErrorPacketException(new String(err.message));\n        case EOFPacket.FIELD_COUNT:\n            auth323(bin.packetId, hsp.seed);\n            break;\n        default:\n            throw new UnknownPacketException(bin.toString());\n        }\n    }\n\n    public List<CobarNode> getServerList() throws IOException {\n        CommandPacket cmd = new CommandPacket();\n        cmd.packetId = 0;\n        cmd.command = 3;\n        cmd.arg = \"SHOW COBAR_CLUSTER\".getBytes();\n        cmd.write(out);\n        out.flush();\n\n        int fieldCount = 0;\n        BinaryPacket bin = new BinaryPacket();\n        bin.read(in);\n        switch (bin.value[0]) {\n        case ErrorPacket.FIELD_COUNT: {\n            ErrorPacket err = new ErrorPacket();\n            err.read(bin);\n            throw new ErrorPacketException(new String(err.message));\n        }\n        default:\n            ResultSetHeaderPacket rsh = new ResultSetHeaderPacket();\n            rsh.read(bin);\n            fieldCount = rsh.fieldCount;\n        }\n        for (;;) {\n            bin = new BinaryPacket();\n            bin.read(in);\n            switch (bin.value[0]) {\n            case ErrorPacket.FIELD_COUNT: {\n                ErrorPacket err = new ErrorPacket();\n                err.read(bin);\n                throw new ErrorPacketException(new String(err.message));\n            }\n            case EOFPacket.FIELD_COUNT: {\n                return getRowList(fieldCount);\n            }\n            default:\n                continue;\n            }\n        }\n    }\n\n    public void close() {\n        if (isClosed.compareAndSet(false, true)) {\n            try {\n                if (out != null) {\n                    out.write(QuitPacket.QUIT);\n                    out.flush();\n                }\n            } catch (IOException e) {\n            } finally {\n                try {\n                    socket.close();\n                } catch (Throwable e) {\n                }\n            }\n        }\n    }\n\n    private List<CobarNode> getRowList(int fieldCount) throws IOException {\n        List<CobarNode> list = new LinkedList<CobarNode>();\n        BinaryPacket bin = null;\n        for (;;) {\n            bin = new BinaryPacket();\n            bin.read(in);\n            switch (bin.value[0]) {\n            case ErrorPacket.FIELD_COUNT: {\n                ErrorPacket err = new ErrorPacket();\n                err.read(bin);\n                throw new ErrorPacketException(new String(err.message));\n            }\n            case EOFPacket.FIELD_COUNT: {\n                return list;\n            }\n            default:\n                RowDataPacket row = new RowDataPacket(fieldCount);\n                row.read(bin);\n                String host = new String(row.fieldValues.get(0));\n                int weight = Integer.parseInt(new String(row.fieldValues.get(1)));\n                list.add(new CobarNode(host, weight));\n            }\n        }\n    }\n\n    private BinaryPacket auth411(HandshakePacket hsp) throws IOException, NoSuchAlgorithmException {\n        AuthPacket ap = new AuthPacket();\n        ap.packetId = 1;\n        ap.clientFlags = getClientFlags();\n        ap.maxPacketSize = 1024 * 1024 * 16;\n        ap.charsetIndex = charsetIndex;\n        ap.user = user;\n        String passwd = password;\n        if (passwd != null && passwd.length() > 0) {\n            byte[] password = passwd.getBytes();\n            byte[] seed = hsp.seed;\n            byte[] restOfScramble = hsp.restOfScrambleBuff;\n            byte[] authSeed = new byte[seed.length + restOfScramble.length];\n            System.arraycopy(seed, 0, authSeed, 0, seed.length);\n            System.arraycopy(restOfScramble, 0, authSeed, seed.length, restOfScramble.length);\n            ap.password = SecurityUtil.scramble411(password, authSeed);\n        }\n        ap.database = database;\n        ap.write(out);\n        out.flush();\n        BinaryPacket bin = new BinaryPacket();\n        bin.read(in);\n        return bin;\n    }\n\n    private void auth323(byte packetId, byte[] seed) throws IOException {\n        Reply323Packet r323 = new Reply323Packet();\n        r323.packetId = ++packetId;\n        String passwd = password;\n        if (passwd != null && passwd.length() > 0) {\n            r323.seed = SecurityUtil.scramble323(passwd, new String(seed)).getBytes();\n        }\n        r323.write(out);\n        out.flush();\n        BinaryPacket bin = new BinaryPacket();\n        bin.read(in);\n        switch (bin.value[0]) {\n        case OkPacket.FIELD_COUNT:\n            break;\n        case ErrorPacket.FIELD_COUNT:\n            ErrorPacket err = new ErrorPacket();\n            err.read(bin);\n            throw new ErrorPacketException(new String(err.message));\n        default:\n            throw new UnknownPacketException(bin.toString());\n        }\n    }\n\n    private static long getClientFlags() {\n        int flag = 0;\n        flag |= Capabilities.CLIENT_LONG_PASSWORD;\n        flag |= Capabilities.CLIENT_FOUND_ROWS;\n        flag |= Capabilities.CLIENT_LONG_FLAG;\n        flag |= Capabilities.CLIENT_CONNECT_WITH_DB;\n        flag |= Capabilities.CLIENT_ODBC;\n        flag |= Capabilities.CLIENT_IGNORE_SPACE;\n        flag |= Capabilities.CLIENT_PROTOCOL_41;\n        flag |= Capabilities.CLIENT_INTERACTIVE;\n        flag |= Capabilities.CLIENT_IGNORE_SIGPIPE;\n        flag |= Capabilities.CLIENT_TRANSACTIONS;\n        flag |= Capabilities.CLIENT_SECURE_CONNECTION;\n        return flag;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "right_result": "import java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class UrlConnection {\n    private String host;\n    private int port;\n    private String user;\n    private String password;\n    private String database;\n    private Socket socket;\n    private InputStream in;\n    private OutputStream out;\n    private int charsetIndex;\n    private AtomicBoolean isClosed;\n\n    public UrlConnection(String host, int port, String user, String password, String database) {\n        this.host = host;\n        this.port = port;\n        this.user = user;\n        this.password = password;\n        this.database = database;\n        this.isClosed = new AtomicBoolean(false);\n    }\n\n    public void connect(int timeout) throws IOException {\n        if (isClosed.get()) {\n            throw new IllegalStateException(\"Connection is closed\");\n        }\n        socket = new Socket();\n        socket.connect(new InetSocketAddress(host, port), timeout);\n        in = socket.getInputStream();\n        out = socket.getOutputStream();\n        byte[] handshake = new byte[1024];\n        in.read(handshake);\n        auth411(new HandshakePacket(handshake));\n    }\n\n    public List<CobarNode> getServerList() throws IOException {\n        String query = \"SHOW SERVERS\";\n        sendQuery(query);\n        List<CobarNode> nodes = new ArrayList<>();\n        return nodes;\n    }\n\n    public void close() {\n        if (isClosed.getAndSet(true)) {\n            return;\n        }\n        try {\n            if (socket != null) {\n                socket.close();\n            }\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public List<CobarNode> getRowList(int rowCount) throws IOException {\n        List<CobarNode> rows = new ArrayList<>();\n        return rows;\n    }\n\n    private BinaryPacket auth411(HandshakePacket handshake) {\n        return new BinaryPacket(new byte[0]);\n    }\n\n    private void auth323(byte protocolVersion, byte[] seed) {}\n\n    private long getClientFlags() {\n        return 0;\n    }\n\n    private void sendQuery(String query) throws IOException {\n        byte[] queryBytes = query.getBytes();\n        byte[] packet = new byte[4 + 1 + queryBytes.length];\n        packet[0] = (byte) (queryBytes.length & 0xFF);\n        packet[1] = (byte) ((queryBytes.length >> 8) & 0xFF);\n        packet[2] = (byte) ((queryBytes.length >> 16) & 0xFF);\n        packet[3] = 0;\n        packet[4] = 0x03;\n        System.arraycopy(queryBytes, 0, packet, 5, queryBytes.length);\n        out.write(packet);\n        out.flush();\n    }\n\n    private static class HandshakePacket {\n        public HandshakePacket(byte[] data) {}\n    }\n\n    private static class BinaryPacket {\n        public BinaryPacket(byte[] data) {}\n    }\n\n    public static class CobarNode {}\n}"
  },
  {
    "Task_id": 570,
    "Instruction": "Task Description: Implement a POP3 client connection class in Java that handles socket communication with a POP3 server, including connection establishment, data transmission, and resource cleanup.\n\nClass Description: The Pop3Connection class provides functionality to connect to a POP3 server using TCP sockets, send and receive data through input/output streams, and manage the connection lifecycle.\n\nAttributes:\n- socket: Socket - The TCP socket used for communication with the server\n- in: BufferedInputStream - Input stream for reading data from the server\n- out: BufferedOutputStream - Output stream for writing data to the server\n\nMethods:\n- connect() -> Socket - Establishes a connection to the POP3 server by trying all available IP addresses for the host\n- connectToAddress(InetAddress address) -> Socket - Creates and connects a socket to a specific server address\n- open() -> void - Opens the connection by initializing socket and streams, throws MessagingException on failure\n- isOpen() -> boolean - Checks if the connection is currently active and valid\n- close() -> void - Closes all connection resources (socket and streams)\n- writeLine(String s) -> void - Writes a line of text to the server (appends CRLF)\n- readLine() -> String - Reads a line of text from the server (handles CRLF line endings)",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\nclass Pop3Connection {\n    private Socket socket;\n    private BufferedInputStream in;\n    private BufferedOutputStream out;\n\n    private Socket connect() throws IOException, UnknownHostException {\n        InetAddress[] inetAddresses = InetAddress.getAllByName(settings.getHost());\n        IOException connectException = null;\n        for (InetAddress address : inetAddresses) {\n            try {\n                return connectToAddress(address);\n            } catch (IOException e) {\n                connectException = e;\n            }\n        }\n        throw connectException != null ? connectException : new UnknownHostException();\n    }\n\n    private Socket connectToAddress(InetAddress address) throws IOException {\n        InetSocketAddress socketAddress = new InetSocketAddress(address, settings.getPort());\n        final Socket socket = new Socket();\n        socket.connect(socketAddress, SOCKET_CONNECT_TIMEOUT);\n        return socket;\n    }\n\n    void open() throws MessagingException {\n        try {\n            socket = connect();\n            in = new BufferedInputStream(socket.getInputStream(), 1024);\n            out = new BufferedOutputStream(socket.getOutputStream(), 512);\n            socket.setSoTimeout(SOCKET_READ_TIMEOUT);\n            if (!isOpen()) {\n                throw new MessagingException(\"Unable to connect socket\");\n            }\n        } catch (IOException ioe) {\n            close();\n            throw new MessagingException(\"Unable to open connection to POP server.\", ioe);\n        }\n    }\n\n    boolean isOpen() {\n        return (in != null && out != null && socket != null\n                && socket.isConnected() && !socket.isClosed());\n    }\n\n    void close() {\n        try {\n            in.close();\n        } catch (Exception e) {}\n        try {\n            out.close();\n        } catch (Exception e) {}\n        try {\n            socket.close();\n        } catch (Exception e) {}\n        in = null;\n        out = null;\n        socket = null;\n    }\n\n    private void writeLine(String s) throws IOException {\n        out.write(s.getBytes());\n        out.write('\\r');\n        out.write('\\n');\n        out.flush();\n    }\n\n    String readLine() throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int d = in.read();\n        if (d == -1) {\n            throw new IOException(\"End of stream reached while trying to read line.\");\n        }\n        do {\n            if (((char)d) == '\\r') {\n                continue;\n            } else if (((char)d) == '\\n') {\n                break;\n            } else {\n                sb.append((char)d);\n            }\n        } while ((d = in.read()) != -1);\n        return sb.toString();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class Pop3Connection {\n    private String host;\n    private int port;\n    private Socket socket;\n    private BufferedInputStream in;\n    private BufferedOutputStream out;\n\n    public Pop3Connection(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public Socket connect() throws IOException {\n        InetAddress[] addresses = InetAddress.getByName(host);\n        for (InetAddress address : addresses) {\n            try {\n                return connectToAddress(address);\n            } catch (IOException e) {\n                // try next address\n            }\n        }\n        throw new IOException(\"Failed to connect to any address\");\n    }\n\n    private Socket connectToAddress(InetAddress address) throws IOException {\n        return new Socket(address, port);\n    }\n\n    public void open() throws MessagingException {\n        try {\n            socket = connect();\n            in = new BufferedInputStream(socket.getInputStream());\n            out = new BufferedOutputStream(socket.getOutputStream());\n        } catch (IOException e) {\n            throw new MessagingException(\"Failed to open connection\", e);\n        }\n    }\n\n    public boolean isOpen() {\n        return socket != null && socket.isConnected() && !socket.isClosed();\n    }\n\n    public void close() {\n        try {\n            if (in != null) in.close();\n        } catch (IOException e) {\n            // handle or log\n        }\n        try {\n            if (out != null) out.close();\n        } catch (IOException e) {\n            // handle or log\n        }\n        try {\n            if (socket != null) socket.close();\n        } catch (IOException e) {\n            // handle or log\n        }\n    }\n\n    public void writeLine(String s) throws IOException {\n        out.write(s.getBytes());\n        out.write('\\r');\n        out.write('\\n');\n        out.flush();\n    }\n\n    public String readLine() throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int c;\n        while ((c = in.read()) != -1) {\n            if (c == '\\r') {\n                int next = in.read();\n                if (next == '\\n') {\n                    break;\n                } else {\n                    sb.append((char) c);\n                    if (next != -1) {\n                        sb.append((char) next);\n                    }\n                    break;\n                }\n            } else {\n                sb.append((char) c);\n            }\n        }\n        if (sb.length() == 0) {\n            return null;\n        }\n        return sb.toString();\n    }\n}\n```"
  },
  {
    "Task_id": 571,
    "Instruction": "Task Description: Create a TCP client class that establishes a connection to a server, sends requests, receives responses, and manages the connection lifecycle.\n\nClass Description: TcpRequester is a TCP client implementation that handles communication with a server using sockets. It provides methods to start/stop the connection, send requests, and fetch responses. The class manages socket resources and includes error handling for network operations.\n\nAttributes:\n- sock: Socket - The socket instance used for TCP communication  \n- in: InputStream - Input stream for reading server responses  \n- out: OutputStream - Output stream for sending requests to the server  \n- dest: SocketAddress - The server address to connect to  \n- request: String - The initial request string  \n- passcode: String - Authentication passcode  \n- on_rsp: Consumer<ByteArray> - Callback for handling responses  \n\nMethods:\n- start(InetAddress bind_addr, long timeout, int ttl) -> T - Establishes a socket connection to the server with specified timeout and TTL  \n- stop() -> T - Closes the socket and releases all resources  \n- isRunning() -> boolean - Checks if the connection is active  \n- sendRequest(byte[] request) -> T - Sends a byte array request to the server  \n- fetchResponse() -> ByteArray - Reads and returns the server response as a ByteArray",
    "Canonical_solution": "import org.jgroups.util.ByteArray;\nimport org.jgroups.util.Util;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.Consumer;\n\nprotected class TcpRequester extends Requester {\n    protected Socket       sock;\n    protected InputStream  in;\n    protected OutputStream out;\n\n    protected TcpRequester(SocketAddress dest, String request, String passcode,\n                           Consumer<ByteArray> on_rsp) {\n        super(dest, request, passcode, on_rsp);\n    }\n\n    protected <T extends Requester> T start(InetAddress bind_addr, long timeout, int ttl) throws IOException {\n        sock=new Socket();\n        sock.setSoTimeout((int)timeout);\n        sock.bind(new InetSocketAddress(bind_addr, 0));\n        sock.connect(dest);\n        in=sock.getInputStream();\n        out=sock.getOutputStream();\n        return (T)this;\n    }\n\n    protected <T extends Requester> T stop() {\n        Util.close(sock,in,out);\n        return (T)this;\n    }\n\n    protected boolean isRunning() {\n        return sock != null && !sock.isClosed();\n    }\n\n    protected <T extends Requester> T sendRequest(byte[] request) throws IOException {\n        out.write(request);\n        out.write('\\n');\n        return (T)this;\n    }\n\n    protected ByteArray fetchResponse() {\n        byte[] buf=new byte[1024];\n        int    index=0;\n\n        for(;;) {\n            try {\n                int bytes_read=in.read(buf, index, buf.length - index);\n                if(bytes_read == -1) {\n                    if(index > 0)\n                        break;\n                    return null;\n                }\n                index+=bytes_read;\n                if(index >= buf.length) {\n                    byte[] tmp=new byte[buf.length + 1024];\n                    System.arraycopy(buf, 0, tmp, 0, index);\n                    buf=tmp;\n                }\n            }\n            catch(IOException e) {\n                break;\n            }\n        }\n        return new ByteArray(buf, 0, index);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "right_result": "import java.io.*;\nimport java.net.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class TcpRequester<T> {\n    private Socket sock;\n    private InputStream in;\n    private OutputStream out;\n    private SocketAddress dest;\n    private String request;\n    private String passcode;\n    private java.util.function.Consumer<byte[]> on_rsp;\n\n    public T start(InetAddress bind_addr, long timeout, int ttl) {\n        try {\n            sock = new Socket();\n            sock.bind(new InetSocketAddress(bind_addr, 0));\n            sock.setSoTimeout((int) timeout);\n            sock.connect(dest, (int) timeout);\n            in = sock.getInputStream();\n            out = sock.getOutputStream();\n        } catch (IOException e) {\n        }\n        return (T) this;\n    }\n\n    public T stop() {\n        try {\n            if (in != null) in.close();\n            if (out != null) out.close();\n            if (sock != null) sock.close();\n        } catch (IOException e) {\n        }\n        return (T) this;\n    }\n\n    public boolean isRunning() {\n        return sock != null && sock.isConnected() && !sock.isClosed();\n    }\n\n    public T sendRequest(byte[] request) {\n        try {\n            out.write(request);\n            out.flush();\n        } catch (IOException e) {\n        }\n        return (T) this;\n    }\n\n    public byte[] fetchResponse() {\n        try {\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = in.read(buffer)) != -1) {\n                baos.write(buffer, 0, bytesRead);\n            }\n            return baos.toByteArray();\n        } catch (IOException e) {\n            return new byte[0];\n        }\n    }\n}"
  },
  {
    "Task_id": 580,
    "Instruction": "Task Description: Create a function that establishes a TCP client connection to a server, sends data, and receives a response.\n\nFunction Description: The function `showText` establishes a TCP connection to a specified server using the provided IP address and port. It sends a sequence of bytes (`seq`) to the server and reads the response. The response is parsed into a `BxResp` object. The function handles connection timeouts and IO exceptions.\n\nInput:\n- `ip`: [String] - The IP address of the server to connect to.\n- `port`: [Integer] - The port number of the server to connect to.\n- `contents`: [List<String>] - A list of strings representing the data to be sent (Note: The reference code uses `seq` for sending data, but `contents` is not directly used in the provided snippet. Clarification may be needed on how `contents` maps to `seq`).\n\nOutput:\n- The function does not explicitly return a value but processes the server's response into a `BxResp` object. If an error occurs, it prints the stack trace.\n\nNote: The reference code snippet references a variable `seq` that is not defined in the provided code. Ensure `seq` is properly initialized from `contents` or another source before calling `out.write(seq)`.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.SocketAddress;\n\npublic static void showText(String ip, Integer port, List<String> contents) throws Exception {\n    // Create Socket\n    Socket client = new Socket();\n    // Create socket address\n    SocketAddress address = new InetSocketAddress(ip, port);\n    \n    try {\n        // Establish TCP connection\n        client.connect(address, 3000);\n        // Set read timeout\n        client.setSoTimeout(3000);\n        \n        // Create output stream\n        OutputStream out = client.getOutputStream();\n        // Create input stream\n        InputStream in = client.getInputStream();\n        \n        // Write data\n        out.write(seq);\n        \n        // Read response\n        byte[] resp = new byte[1024];\n        int len = in.read(resp);\n        \n        // Parse response\n        BxResp bxResp = BxResp.parse(resp, len);\n        \n        // Close resources\n        out.close();\n        in.close();\n        client.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 1,
    "right_result": "import java.io.*;\nimport java.net.*;\nimport java.util.List;\n\npublic class TcpClient {\n    public void showText(String ip, int port, List<String> contents) {\n        Socket socket = null;\n        try {\n            socket = new Socket();\n            socket.connect(new InetSocketAddress(ip, port), 5000);\n            String seqStr = String.join(\"\\n\", contents);\n            byte[] seq = seqStr.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n            OutputStream out = socket.getOutputStream();\n            out.write(seq);\n            out.flush();\n            InputStream in = socket.getInputStream();\n            byte[] response = new byte[1024];\n            int bytesRead = in.read(response);\n            BxResp resp = new BxResp(response, bytesRead);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (socket != null) {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 584,
    "Instruction": "Task Description: Create a Java class that implements a TCP socket client for communication with a server, including connection management and data transmission capabilities.\n\nClass Description: MocoSocketHelper is a TCP socket client implementation that handles connection to a server, sending data, and receiving responses. It implements Closeable for proper resource cleanup.\n\nAttributes:\n- socket: Socket - The underlying socket connection to the server\n- address: SocketAddress - The server address (host and port) to connect to\n- os: PrintStream - Output stream for sending data to the server\n- reader: BufferedReader - Input stream for reading responses from the server\n\nMethods:\n- MocoSocketHelper(String target, int port) -> void - Constructor that initializes the socket and address with target host and port\n- connect() -> void - Establishes connection to the server and initializes I/O streams\n- send(String request) -> String - Sends a request string to server and returns the response line\n- send(String request, int readCount) -> String - Sends a request string and reads specified number of characters from response\n- close() -> void - Closes the socket connection (inherited from Closeable interface)",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.util.concurrent.TimeUnit;\n\npublic class MocoSocketHelper implements Closeable {\n    private Socket socket;\n    private SocketAddress address;\n    private PrintStream os;\n    private BufferedReader reader;\n\n    public MocoSocketHelper(final String target, final int port) {\n        socket = new Socket();\n        address = new InetSocketAddress(target, port);\n    }\n\n    public void connect() {\n        try {\n            socket.connect(address);\n            socket.setSoTimeout((int) TimeUnit.SECONDS.toMillis(1));\n            OutputStream outputStream = this.socket.getOutputStream();\n            this.os = new PrintStream(outputStream);\n            this.reader = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String send(final String request) {\n        os.print(request);\n        os.flush();\n\n        try {\n            return reader.readLine();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String send(final String request, final int readCount) {\n        os.print(request);\n        os.flush();\n\n        try {\n            char[] buffer = new char[readCount];\n            reader.read(buffer);\n            return new String(buffer);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n        this.socket.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class MocoSocketHelper implements Closeable {\n    private Socket socket;\n    private SocketAddress address;\n    private PrintStream os;\n    private BufferedReader reader;\n\n    public MocoSocketHelper(String target, int port) {\n        this.address = new InetSocketAddress(target, port);\n        this.socket = new Socket();\n    }\n\n    public void connect() throws IOException {\n        socket.connect(address);\n        os = new PrintStream(socket.getOutputStream());\n        reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n    }\n\n    public String send(String request) throws IOException {\n        os.println(request);\n        os.flush();\n        return reader.readLine();\n    }\n\n    public String send(String request, int readCount) throws IOException {\n        os.println(request);\n        os.flush();\n        StringBuilder sb = new StringBuilder();\n        int totalRead = 0;\n        char[] buffer = new char[1024];\n        while (totalRead < readCount) {\n            int read = reader.read(buffer, 0, Math.min(readCount - totalRead, buffer.length));\n            if (read == -1) break;\n            sb.append(buffer, 0, read);\n            totalRead += read;\n        }\n        return sb.toString();\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (socket != null) {\n            socket.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 591,
    "Instruction": "Here is the structured instruction for the given class-level reference code:\n\nTask Description: Implement a UDP-based position forwarding service that sends GPS position data in Wialon protocol format to a specified server.\n\nClass Description: PositionForwarderWialon is a class that handles the forwarding of position data to a remote server using UDP. It formats the position data according to the Wialon protocol, manages the UDP socket connection, and provides methods for sending position data and handling results.\n\nAttributes:\n- socket: DatagramSocket - The UDP socket used for communication\n- address: InetAddress - The target server's IP address\n- port: int - The target server's port number\n\nMethods:\n- PositionForwarderWialon(Config config, ExecutorService executorService) -> void - Constructor that initializes the UDP connection. Takes a configuration object and an executor service for background packet receiving.\n- sendPosition(Position position, String uniqueId, ResultHandler resultHandler) -> void - Formats and sends position data to the server. Takes a Position object, device unique ID, and a callback handler for results.\n- compressData(byte[] data) -> ByteBuf - Static method that compresses data using Deflater. Takes a byte array and returns a compressed ByteBuf.\n- formatAttributes(Map<String, Object> attributes) -> String - Static helper method that formats position attributes into a string. Takes a map of attributes and returns a formatted string.\n\nInterface:\n- ResultHandler: Functional interface with onResult(boolean success, Throwable throwable) method for handling send operation results.",
    "Canonical_solution": "import io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport org.traccar.config.Config;\nimport org.traccar.config.Keys;\nimport org.traccar.helper.Checksum;\nimport org.traccar.helper.UnitsConverter;\nimport org.traccar.model.Position;\n\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.StandardCharsets;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Map;\nimport java.util.TimeZone;\nimport java.util.concurrent.ExecutorService;\nimport java.util.stream.Collectors;\nimport java.util.zip.Deflater;\n\npublic class PositionForwarderWialon {\n\n    private final DatagramSocket socket;\n    private final InetAddress address;\n    private final int port;\n\n    public PositionForwarderWialon(Config config, ExecutorService executorService) {\n        try {\n            URI url = new URI(config.getString(Keys.FORWARD_URL));\n            address = InetAddress.getByName(url.getHost());\n            port = url.getPort();\n            socket = new DatagramSocket();\n            executorService.submit(() -> {\n                byte[] buffer = new byte[1024];\n                while (!executorService.isShutdown()) {\n                    try {\n                        socket.receive(new DatagramPacket(buffer, buffer.length));\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n        } catch (IOException | URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public void sendPosition(Position position, String uniqueId, ResultHandler resultHandler) {\n        DateFormat dateFormat = new SimpleDateFormat(\"ddMMyy;HHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        String payload = String.format(\n                \"%s;%02d%.5f;%s;%03d%.5f;%s;%d;%d;%d;NA;NA;NA;NA;;%s;%s\",\n                dateFormat.format(position.getFixTime()),\n                (int) Math.abs(position.getLatitude()),\n                Math.abs(position.getLatitude()) % 1 * 60,\n                position.getLatitude() >= 0 ? \"N\" : \"S\",\n                (int) Math.abs(position.getLongitude()),\n                Math.abs(position.getLongitude()) % 1 * 60,\n                position.getLongitude() >= 0 ? \"E\" : \"W\",\n                (int) UnitsConverter.kphFromKnots(position.getSpeed()),\n                (int) position.getCourse(),\n                (int) position.getAltitude(),\n                position.getString(Position.KEY_DRIVER_UNIQUE_ID, \"NA\"),\n                formatAttributes(position.getAttributes()));\n\n        String message = uniqueId + \"#D#\" + payload + \"\\r\\n\";\n        byte[] buffer = message.getBytes();\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length, address, port);\n\n        try {\n            socket.send(packet);\n            resultHandler.onResult(true, null);\n        } catch (IOException e) {\n            resultHandler.onResult(false, e);\n        }\n    }\n\n    public static ByteBuf compressData(byte[] data) {\n        ByteBuf container;\n        Deflater deflater = new Deflater();\n        deflater.setInput(data);\n        deflater.finish();\n\n        ByteBuf compressedData = Unpooled.buffer(data.length);\n        byte[] tempBuffer = new byte[1024];\n\n        try {\n            while (!deflater.finished()) {\n                int count = deflater.deflate(tempBuffer);\n                compressedData.writeBytes(tempBuffer, 0, count);\n            }\n            container = Unpooled.buffer(3 + compressedData.readableBytes());\n            container.writeByte(0xFF);\n            container.writeShortLE(compressedData.readableBytes());\n            container.writeBytes(compressedData);\n        } finally {\n            deflater.end();\n            compressedData.release();\n        }\n\n        return container;\n    }\n\n    public static String formatAttributes(Map<String, Object> attributes) {\n        if (attributes.isEmpty()) {\n            return \"NA\";\n        }\n        return attributes.entrySet().stream()\n                .map(entry -> {\n                    Object value = entry.getValue();\n                    int type;\n                    if (value instanceof Double || value instanceof Float) {\n                        type = 2;\n                    } else if (value instanceof Number) {\n                        type = 1;\n                    } else {\n                        type = 3;\n                    }\n                    return entry.getKey() + \":\" + type + \":\" + value;\n                })\n                .collect(Collectors.joining(\",\"));\n    }\n\n    public interface ResultHandler {\n        void onResult(boolean success, Throwable throwable);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.util.Map;\nimport java.util.zip.Deflater;\nimport java.io.ByteArrayOutputStream;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\n\npublic class PositionForwarderWialon {\n    private final DatagramSocket socket;\n    private final InetAddress address;\n    private final int port;\n\n    public PositionForwarderWialon(Config config, java.util.concurrent.ExecutorService executorService) {\n        try {\n            this.address = InetAddress.getByName(config.getServerAddress());\n            this.port = config.getServerPort();\n            this.socket = new DatagramSocket();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to initialize UDP socket\", e);\n        }\n    }\n\n    public void sendPosition(Position position, String uniqueId, ResultHandler resultHandler) {\n        try {\n            Map<String, Object> attributes = position.getAttributes();\n            String attributesStr = formatAttributes(attributes);\n            byte[] data = attributesStr.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n            ByteBuf compressed = compressData(data);\n            byte[] compressedBytes = new byte[compressed.readableBytes()];\n            compressed.readBytes(compressedBytes);\n            DatagramPacket packet = new DatagramPacket(compressedBytes, compressedBytes.length, address, port);\n            socket.send(packet);\n            resultHandler.onResult(true, null);\n        } catch (Exception e) {\n            resultHandler.onResult(false, e);\n        }\n    }\n\n    public static ByteBuf compressData(byte[] data) {\n        Deflater deflater = new Deflater();\n        deflater.setInput(data);\n        deflater.finish();\n        byte[] buffer = new byte[1024];\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n        try {\n            while (!deflater.finished()) {\n                int count = deflater.deflate(buffer);\n                outputStream.write(buffer, 0, count);\n            }\n        } finally {\n            deflater.end();\n        }\n        return Unpooled.wrappedBuffer(outputStream.toByteArray());\n    }\n\n    public static String formatAttributes(Map<String, Object> attributes) {\n        StringBuilder sb = new StringBuilder();\n        for (Map.Entry<String, Object> entry : attributes.entrySet()) {\n            sb.append(entry.getKey()).append(\"=\").append(entry.getValue()).append(\",\");\n        }\n        if (sb.length() > 0) {\n            sb.setLength(sb.length() - 1);\n        }\n        return sb.toString();\n    }\n\n    @FunctionalInterface\n    public interface ResultHandler {\n        void onResult(boolean success, Throwable throwable);\n    }\n}\n```"
  },
  {
    "Task_id": 592,
    "Instruction": "Task Description: Implement a DNS resolver class that handles UDP communication for DNS query processing, sending DNS payloads to a specified local port and receiving responses.\n\nClass Description: The DNSResolver class provides functionality to send DNS query payloads via UDP to a local port and receive the corresponding DNS responses. It handles the creation of UDP sockets and packets for communication.\n\nAttributes:\nmPort: int - The local port number to which DNS queries will be sent\nmLocalhost: InetAddress - The local host address used for UDP communication\n\nMethods:\nDNSResolver(int localPort) -> void - Constructor that initializes the DNS resolver with the specified local port number\nprocessDNS(byte[] payload) -> byte[] - Sends the given DNS payload to the configured local port via UDP and returns the received DNS response\n    - Input: payload (byte[]) - The DNS query payload to be sent\n    - Output: byte[] - The received DNS response data",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class DNSResolver {\n\n    private final int mPort;\n    private InetAddress mLocalhost = null;\n\n    public DNSResolver(int localPort) {\n        mPort = localPort;\n    }\n\n    public byte[] processDNS(byte[] payload) throws IOException {\n        if (mLocalhost == null) mLocalhost = InetAddress.getLocalHost();\n\n        DatagramPacket packet = new DatagramPacket(payload, payload.length, mLocalhost, mPort);\n        DatagramSocket datagramSocket = new DatagramSocket();\n        datagramSocket.send(packet);\n\n        byte[] buf = new byte[1024];\n        packet = new DatagramPacket(buf, buf.length);\n        datagramSocket.receive(packet);\n        datagramSocket.close();\n\n        return packet.getData();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.*;\n\npublic class DNSResolver {\n    private int mPort;\n    private InetAddress mLocalhost;\n\n    public DNSResolver(int localPort) {\n        this.mPort = localPort;\n        try {\n            this.mLocalhost = InetAddress.getByName(\"127.0.0.1\");\n        } catch (UnknownHostException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public byte[] processDNS(byte[] payload) {\n        DatagramSocket socket = null;\n        try {\n            socket = new DatagramSocket();\n            InetAddress address = mLocalhost;\n            int port = mPort;\n            DatagramPacket packet = new DatagramPacket(payload, payload.length, address, port);\n            socket.send(packet);\n            byte[] buffer = new byte[512];\n            DatagramPacket responsePacket = new DatagramPacket(buffer, buffer.length);\n            socket.receive(responsePacket);\n            byte[] response = new byte[responsePacket.getLength()];\n            System.arraycopy(buffer, 0, response, 0, response.length);\n            return response;\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            if (socket != null) {\n                socket.close();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 595,
    "Instruction": "Task Description: Implement a Java class that handles SNTP (Simple Network Time Protocol) requests to synchronize time with an NTP server using UDP communication. The class should validate server responses and provide accurate time synchronization while handling potential errors.\n\nClass Description: The SntpImpl class implements the Sntp interface and provides functionality to request time from an NTP server. It uses UDP communication to send and receive NTP packets, validates server responses against specified thresholds, and calculates time offsets. The class includes helper methods for reading/writing NTP protocol fields and converting between different time representations.\n\nAttributes:\n- NTP_PORT: int - The standard NTP port (123)\n- NTP_MODE: int - The NTP mode (3 for client)\n- NTP_VERSION: int - The NTP version (3)\n- NTP_PACKET_SIZE: int - The size of NTP packets (48 bytes)\n- OFFSET_1900_TO_1970: long - The seconds offset between 1900 and 1970 epochs\n\nMethods:\n- requestTime(InetAddress, float, float, int, int, SntpEventListener) -> SntpResult - Requests time from specified NTP server with validation parameters and timeout\n- writeNtpVersion(byte[]) -> void - Writes NTP version and mode into the buffer\n- writeTimeStamp(byte[], int, long) -> void - Writes a timestamp into the buffer at specified offset\n- readTimeStamp(byte[], int) -> long - Reads a timestamp from the buffer at specified offset\n- read(byte[], int) -> long - Reads 4 bytes from buffer as a long value\n- ui(byte) -> int - Converts byte to unsigned integer\n- doubleMillis(long) -> double - Converts fixed-point NTP format to milliseconds",
    "Canonical_solution": "import android.os.SystemClock;\nimport com.instacart.truetime.InvalidNtpServerResponseException;\nimport com.instacart.truetime.SntpEventListener;\nimport org.jetbrains.annotations.NotNull;\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class SntpImpl implements Sntp {\n\n    private static final int NTP_PORT = 123;\n    private static final int NTP_MODE = 3;\n    private static final int NTP_VERSION = 3;\n    private static final int NTP_PACKET_SIZE = 48;\n    private static final long OFFSET_1900_TO_1970 = ((365L * 70L) + 17L) * 24L * 60L * 60L;\n\n    @NotNull\n    @Override\n    public synchronized SntpResult requestTime(\n            InetAddress address,\n            float rootDelayMax,\n            float rootDispersionMax,\n            int serverResponseDelayMax,\n            int timeoutInMillis,\n            SntpEventListener listener\n    ) throws IOException {\n\n        listener.sntpRequest(address);\n        DatagramSocket socket = null;\n\n        try {\n            socket = new DatagramSocket();\n            socket.setSoTimeout(timeoutInMillis);\n            byte[] buffer = new byte[NTP_PACKET_SIZE];\n            DatagramPacket request = new DatagramPacket(buffer, buffer.length, address, NTP_PORT);\n\n            writeNtpVersion(buffer);\n            long requestTime = System.currentTimeMillis();\n            long requestTicks = SystemClock.elapsedRealtime();\n            writeTimeStamp(buffer, INDEX_TRANSMIT_TIME, requestTime);\n            socket.send(request);\n\n            DatagramPacket response = new DatagramPacket(buffer, buffer.length);\n            socket.receive(response);\n            long responseTicks = SystemClock.elapsedRealtime();\n\n            long originateTime = readTimeStamp(buffer, INDEX_ORIGINATE_TIME);\n            long receiveTime = readTimeStamp(buffer, INDEX_RECEIVE_TIME);\n            long transmitTime = readTimeStamp(buffer, INDEX_TRANSMIT_TIME);\n            long responseTime = requestTime + (responseTicks - requestTicks);\n\n            double rootDelay = doubleMillis(read(buffer, INDEX_ROOT_DELAY));\n            if (rootDelay > rootDelayMax) {\n                throw new InvalidNtpServerResponseException(\n                        \"Invalid response from NTP server. %s violation. %f [actual] > %f [expected]\",\n                        \"root_delay\",\n                        (float) rootDelay,\n                        rootDelayMax);\n            }\n\n            double rootDispersion = doubleMillis(read(buffer, INDEX_ROOT_DISPERSION));\n            if (rootDispersion > rootDispersionMax) {\n                throw new InvalidNtpServerResponseException(\n                        \"Invalid response from NTP server. %s violation. %f [actual] > %f [expected]\",\n                        \"root_dispersion\",\n                        (float) rootDispersion,\n                        rootDispersionMax);\n            }\n\n            listener.sntpRequestSuccessful(address);\n            return new SntpResult(new long[]{\n                    originateTime,\n                    receiveTime,\n                    transmitTime,\n                    responseTime,\n                    read(buffer, INDEX_ROOT_DELAY),\n                    read(buffer, INDEX_ROOT_DISPERSION),\n                    buffer[1] & 0xff,\n                    responseTicks\n            });\n\n        } catch (Exception e) {\n            listener.sntpRequestFailed(address, e);\n            throw e;\n        } finally {\n            if (socket != null) {\n                socket.close();\n            }\n        }\n    }\n\n    private void writeNtpVersion(byte[] buffer) {\n        buffer[0] = NTP_MODE | (NTP_VERSION << 3);\n    }\n\n    private void writeTimeStamp(byte[] buffer, int offset, long time) {\n        long seconds = time / 1000L;\n        long milliseconds = time - seconds * 1000L;\n        seconds += OFFSET_1900_TO_1970;\n\n        buffer[offset++] = (byte) (seconds >> 24);\n        buffer[offset++] = (byte) (seconds >> 16);\n        buffer[offset++] = (byte) (seconds >> 8);\n        buffer[offset++] = (byte) (seconds >> 0);\n\n        long fraction = milliseconds * 0x100000000L / 1000L;\n        buffer[offset++] = (byte) (fraction >> 24);\n        buffer[offset++] = (byte) (fraction >> 16);\n        buffer[offset++] = (byte) (fraction >> 8);\n        buffer[offset] = (byte) (Math.random() * 255.0);\n    }\n\n    private long readTimeStamp(byte[] buffer, int offset) {\n        long seconds = read(buffer, offset);\n        long fraction = read(buffer, offset + 4);\n        return ((seconds - OFFSET_1900_TO_1970) * 1000) + ((fraction * 1000L) / 0x100000000L);\n    }\n\n    private long read(byte[] buffer, int offset) {\n        return ((long) ui(buffer[offset]) << 24) +\n               ((long) ui(buffer[offset + 1]) << 16) +\n               ((long) ui(buffer[offset + 2]) << 8) +\n               (long) ui(buffer[offset + 3]);\n    }\n\n    private int ui(byte b) {\n        return b & 0xFF;\n    }\n\n    private double doubleMillis(long fix) {\n        return fix / 65.536D;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.*;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\n\npublic class SntpImpl implements Sntp {\n    private static final int NTP_PORT = 123;\n    private static final int NTP_MODE = 3;\n    private static final int NTP_VERSION = 3;\n    private static final int NTP_PACKET_SIZE = 48;\n    private static final long OFFSET_1900_TO_1970 = 2208988800L;\n\n    public void writeNtpVersion(byte[] buffer) {\n        buffer[0] = (byte) ((NTP_VERSION << 3) | NTP_MODE);\n    }\n\n    public void writeTimeStamp(byte[] buffer, int offset, long timestamp) {\n        ByteBuffer bb = ByteBuffer.wrap(buffer, offset, 8);\n        bb.order(ByteOrder.BIG_ENDIAN);\n        bb.putLong(timestamp);\n    }\n\n    public long readTimeStamp(byte[] buffer, int offset) {\n        ByteBuffer bb = ByteBuffer.wrap(buffer, offset, 8);\n        bb.order(ByteOrder.BIG_ENDIAN);\n        return bb.getLong();\n    }\n\n    public long read(byte[] buffer, int offset) {\n        long value = 0;\n        for (int i = 0; i < 4; i++) {\n            value = (value << 8) | (buffer[offset + i] & 0xFF);\n        }\n        return value;\n    }\n\n    public int ui(byte b) {\n        return b & 0xFF;\n    }\n\n    public double doubleMillis(long value) {\n        return (value / (double) (1 << 32)) * 1000;\n    }\n\n    public SntpResult requestTime(InetAddress address, float jitterThreshold, float delayThreshold, int timeout, int retries, SntpEventListener listener) {\n        DatagramSocket socket = null;\n        try {\n            socket = new DatagramSocket();\n            socket.setSoTimeout(timeout);\n\n            byte[] buffer = new byte[NTP_PACKET_SIZE];\n            writeNtpVersion(buffer);\n\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, address, NTP_PORT);\n            socket.send(packet);\n\n            packet = new DatagramPacket(buffer, buffer.length);\n            socket.receive(packet);\n\n            if ((buffer[0] & 0xFF) != ((NTP_VERSION << 3) | 4)) {\n                return new SntpResult(false, 0, 0, \"Invalid mode\");\n            }\n\n            long originateTimestamp = readTimeStamp(buffer, 24);\n            long receiveTimestamp = readTimeStamp(buffer, 32);\n            long transmitTimestamp = readTimeStamp(buffer, 40);\n\n            long originateMillis = doubleMillis(originateTimestamp - OFFSET_1900_TO_1970);\n            long receiveMillis = doubleMillis(receiveTimestamp - OFFSET_1900_TO_1970);\n            long transmitMillis = doubleMillis(transmitTimestamp - OFFSET_1900_TO_1970);\n\n            double offset = (receiveMillis - originateMillis + transmitMillis - System.currentTimeMillis()) / 2.0;\n            double delay = (System.currentTimeMillis() - originateMillis) - (transmitMillis - receiveMillis);\n\n            if (Math.abs(offset) > jitterThreshold || Math.abs(delay) > delayThreshold) {\n                return new SntpResult(false, offset, delay, \"Threshold exceeded\");\n            }\n\n            if (listener != null) {\n                listener.onSuccess(offset, delay);\n            }\n\n            return new SntpResult(true, offset, delay, \"Success\");\n        } catch (Exception e) {\n            if (listener != null) {\n                listener.onError(e.getMessage());\n            }\n            return new SntpResult(false, 0, 0, e.getMessage());\n        } finally {\n            if (socket != null) {\n                socket.close();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 596,
    "Instruction": "Task Description: Create a UDP communication class that can function as either a server or client, handling packet transmission and reception with proper error handling and resource management.\n\nClass Description: UDPCommunicator is a class that encapsulates UDP communication functionality, allowing an instance to operate as either a server (receiving packets) or client (sending packets). The class manages socket creation, packet transmission/reception, and proper cleanup.\n\nAttributes:\n- socket: DatagramSocket - The underlying UDP socket used for communication\n- isServer: boolean - Flag indicating whether this instance operates as a server (true) or client (false)\n\nMethods:\n- UDPCommunicator(boolean isServer, int port) -> void - Constructor that initializes the UDP socket. Binds to specified port if operating as server.\n- sendPacket(byte[] data, String destAddress, int destPort) -> void - Sends a UDP packet to the specified destination (client mode only). Throws IOException on network errors and IllegalStateException if called in server mode.\n- receivePacket() -> byte[] - Receives a UDP packet (server mode only). Returns the packet data as byte array. Throws IOException on network errors and IllegalStateException if called in client mode.\n- close() -> void - Closes the socket and releases system resources. Safe to call multiple times.",
    "Canonical_solution": "import java.net.DatagramSocket;\nimport java.net.DatagramPacket;\nimport java.net.InetSocketAddress;\nimport java.net.SocketException;\nimport java.io.IOException;\n\npublic class UDPCommunicator {\n    private DatagramSocket socket;\n    private boolean isServer;\n\n    public UDPCommunicator(boolean isServer, int port) throws SocketException {\n        this.isServer = isServer;\n        this.socket = new DatagramSocket(null);\n        if (isServer) {\n            socket.bind(new InetSocketAddress(\"0.0.0.0\", port));\n        }\n    }\n\n    public void sendPacket(byte[] data, String destAddress, int destPort) throws IOException {\n        if (isServer) {\n            throw new IllegalStateException(\"Server cannot send packets without first receiving\");\n        }\n        DatagramPacket packet = new DatagramPacket(data, data.length, \n            new InetSocketAddress(destAddress, destPort));\n        socket.send(packet);\n    }\n\n    public byte[] receivePacket() throws IOException {\n        if (!isServer) {\n            throw new IllegalStateException(\"Client should not be receiving packets\");\n        }\n        byte[] buffer = new byte[800];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        socket.receive(packet);\n        return packet.getData();\n    }\n\n    public void close() {\n        if (socket != null && !socket.isClosed()) {\n            socket.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramSocket;\nimport java.net.DatagramPacket;\nimport java.net.InetAddress;\nimport java.io.IOException;\n\npublic class UDPCommunicator {\n    private DatagramSocket socket;\n    private boolean isServer;\n\n    public UDPCommunicator(boolean isServer, int port) throws IOException {\n        this.isServer = isServer;\n        socket = new DatagramSocket();\n        if (isServer) {\n            socket.bind(new java.net.InetSocketAddress(port));\n        }\n    }\n\n    public void sendPacket(byte[] data, String destAddress, int destPort) throws IOException {\n        if (isServer) {\n            throw new IllegalStateException(\"Cannot send packet in server mode\");\n        }\n        InetAddress address = InetAddress.getByName(destAddress);\n        DatagramPacket packet = new DatagramPacket(data, data.length, address, destPort);\n        socket.send(packet);\n    }\n\n    public byte[] receivePacket() throws IOException {\n        if (!isServer) {\n            throw new IllegalStateException(\"Cannot receive packet in client mode\");\n        }\n        byte[] buffer = new byte[65535];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        socket.receive(packet);\n        byte[] data = new byte[packet.getLength()];\n        System.arraycopy(buffer, 0, data, 0, data.length);\n        return data;\n    }\n\n    public void close() {\n        if (socket != null && !socket.isClosed()) {\n            socket.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 598,
    "Instruction": "Task Description: Create a Java class that implements a StatsD client using UDP protocol for sending metrics to a StatsD server. The class should handle metric batching and asynchronous sending to avoid blocking the main application thread.\n\nClass Description: The Statsd class is a singleton that provides asynchronous metric sending capability to a StatsD server via UDP. It uses a background thread to batch metrics and send them efficiently. The class handles connection setup, error cases, and metric aggregation.\n\nAttributes:\n- CHARSET: [Charset] - The character encoding used for sending metrics (US_ASCII)\n- e: [ExecutorService] - Single thread executor for asynchronous metric processing\n- qManager: [Implicit Queue Manager] - Manages the queue of metrics to be sent (implied by usage but not shown in attributes)\n\nMethods:\n- getInstance(): () -> [Statsd] - Returns the singleton instance of the StatsD client\n- <constructor>: () -> [Statsd] - Private constructor that initializes the background thread for metric processing\n- <background thread>: () -> [void] - Internal method that continuously processes metrics from the queue, batches them, and sends to the StatsD server via UDP\n\nNote: The actual queue management implementation (qManager) is not shown in the provided code but is implied by the usage of getQ() and drainTo() methods. The class handles UDP socket creation, packet preparation, and error cases for host resolution and socket operations.",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.openjdk.btrace.core.BTraceRuntime;\nimport org.openjdk.btrace.core.SharedSettings;\n\npublic final class Statsd {\n  private static final Charset CHARSET = StandardCharsets.US_ASCII;\n  private final ExecutorService e = Executors.newSingleThreadExecutor(\n      r -> {\n        Thread t = new Thread(r, \"jStatsD Client Submitter\");\n        t.setDaemon(true);\n        return t;\n      });\n\n  @SuppressWarnings(\"FutureReturnValueIgnored\")\n  private Statsd() {\n    e.submit(\n        () -> {\n          DatagramSocket ds = null;\n          boolean entered = BTraceRuntime.enter();\n          try {\n            ds = new DatagramSocket();\n            DatagramPacket dp = new DatagramPacket(new byte[0], 0);\n            try {\n              dp.setAddress(InetAddress.getByName(SharedSettings.GLOBAL.getStatsdHost()));\n            } catch (UnknownHostException ex) {\n              System.err.println(\n                  \"[statsd] invalid host defined: \" + SharedSettings.GLOBAL.getStatsdHost());\n              dp.setAddress(InetAddress.getLoopbackAddress());\n            } catch (SecurityException ex) {\n              dp.setAddress(InetAddress.getLoopbackAddress());\n            }\n            dp.setPort(SharedSettings.GLOBAL.getStatsdPort());\n\n            while (true) {\n              Collection<String> msgs = new ArrayList<>();\n              msgs.add(qManager.getQ().take());\n              qManager.getQ().drainTo(msgs);\n\n              StringBuilder sb = new StringBuilder();\n              for (String m : msgs) {\n                if (sb.length() + m.length() < 511) {\n                  sb.append(m).append('\\n');\n                } else {\n                  dp.setData(sb.toString().getBytes(CHARSET));\n                  ds.send(dp);\n                  sb.setLength(0);\n                }\n              }\n              if (sb.length() > 0) {\n                dp.setData(sb.toString().getBytes(CHARSET));\n                ds.send(dp);\n              }\n            }\n          } catch (IOException | InterruptedException ex) {\n            ex.printStackTrace();\n          } finally {\n            if (entered) {\n              BTraceRuntime.leave();\n            }\n          }\n        });\n  }\n\n  public static Statsd getInstance() {\n    return Singleton.INSTANCE;\n  }\n\n  private static final class Singleton {\n    private static final Statsd INSTANCE = new Statsd();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.*;\nimport java.util.concurrent.*;\n\npublic class Statsd {\n    private static final Charset CHARSET = Charset.forName(\"US-ASCII\");\n    private static final Statsd INSTANCE = new Statsd(\"localhost\", 8125);\n    private final ExecutorService executor;\n    private final DatagramSocket socket;\n    private final BlockingQueue<String> queue;\n    private final String host;\n    private final int port;\n\n    private Statsd(String host, int port) {\n        this.host = host;\n        this.port = port;\n        this.queue = new LinkedBlockingQueue<>();\n        this.executor = Executors.newSingleThreadExecutor();\n        try {\n            this.socket = new DatagramSocket();\n        } catch (SocketException e) {\n            throw new RuntimeException(\"Failed to create DatagramSocket\", e);\n        }\n        this.executor.submit(this::processMetrics);\n    }\n\n    public static Statsd getInstance() {\n        return INSTANCE;\n    }\n\n    public void increment(String metric) {\n        queue.offer(metric + \":1|c\");\n    }\n\n    public void gauge(String metric, double value) {\n        queue.offer(metric + \":\" + value + \"|g\");\n    }\n\n    public void timing(String metric, long value) {\n        queue.offer(metric + \":\" + value + \"|ms\");\n    }\n\n    private void processMetrics() {\n        while (!Thread.currentThread().isInterrupted()) {\n            try {\n                String metric = queue.take();\n                byte[] data = metric.getBytes(CHARSET);\n                InetAddress address = InetAddress.getByName(host);\n                DatagramPacket packet = new DatagramPacket(data, data.length, address, port);\n                socket.send(packet);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                break;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void shutdown() {\n        executor.shutdownNow();\n        socket.close();\n    }\n}\n```"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a Kafka topic using the AdminClient API in Java.\n\nFunction Description: This function creates a new Kafka topic with the specified name, number of partitions, and replication factor. It uses the Kafka AdminClient to interact with the Kafka broker and handles potential exceptions during the topic creation process.\n\nInput: \n- topic: String - The name of the Kafka topic to be created.\n\nOutput: \n- void - The function does not return any value but creates the topic in Kafka and stores the AdminClient instance in the class field.\n\nExceptions:\n- InterruptedException: If the thread is interrupted while waiting for the topic creation to complete.\n- ExecutionException: If the topic creation fails during execution.\n- TimeoutException: If the topic creation takes longer than the specified timeout period.",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport wiremock.com.google.common.collect.ImmutableMap;\n\nprivate AdminClient adminClient;\n\nprivate void createTopic(String topic) throws InterruptedException, ExecutionException, TimeoutException {\n    AdminClient adminClient = AdminClient\n        .create(ImmutableMap.of(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaContainer.getBootstrapServers()));\n    Collection<NewTopic> topics = Collections.singletonList(new NewTopic(topic, 3, (short) 1));\n    adminClient.createTopics(topics).all().get(30, TimeUnit.SECONDS);\n    this.adminClient = adminClient;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 34,
    "right_result": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.common.errors.TopicExistsException;\nimport java.util.Collections;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\npublic class KafkaTopicCreator {\n    private AdminClient adminClient;\n\n    public void createTopic(String topic, int numPartitions, short replicationFactor) \n            throws InterruptedException, ExecutionException, TimeoutException {\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        adminClient = AdminClient.create(props);\n\n        NewTopic newTopic = new NewTopic(topic, numPartitions, replicationFactor);\n        adminClient.createTopics(Collections.singletonList(newTopic)).all().get(10, TimeUnit.SECONDS);\n    }\n}"
  },
  {
    "Task_id": 600,
    "Instruction": "Task Description: Create a Java class for UDP socket communication that can be used for both sending and receiving datagram packets. The class should handle socket creation, binding, message transmission, and reception with proper error handling.\n\nClass Description: HTTPUSocket is a UDP socket wrapper class that provides simplified methods for UDP communication. It manages socket lifecycle and provides methods for sending messages to specific addresses and receiving incoming packets.\n\nAttributes:\n- ssdpUniSock: DatagramSocket - The underlying UDP socket for communication\n- localAddr: String - The local address bound to the socket\n\nMethods:\n- HTTPUSocket() -> void - Default constructor that creates an unbound UDP socket\n- HTTPUSocket(String bindAddr, int bindPort) -> void - Constructor that binds socket to specific address and port\n- HTTPUSocket(int bindPort) -> void - Constructor that binds socket to specific port on all interfaces\n- getDatagramSocket() -> DatagramSocket - Returns the underlying DatagramSocket instance\n- setLocalAddress(String addr) -> void - Sets the local address manually\n- getLocalAddress() -> String - Returns the local address bound to the socket\n- open() -> boolean - Creates an unbound UDP socket, returns success status\n- open(String bindAddr, int bindPort) -> boolean - Binds socket to specific address and port, returns success status\n- open(int bindPort) -> boolean - Binds socket to specific port on all interfaces, returns success status\n- close() -> boolean - Closes the socket, returns success status\n- post(String addr, int port, String msg) -> boolean - Sends a message to specified address and port, returns success status\n- receive() -> SSDPPacket - Receives an incoming packet and returns it wrapped in SSDPPacket object",
    "Canonical_solution": "import java.net.BindException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\n\npublic class HTTPUSocket {\n\n    private DatagramSocket ssdpUniSock = null;\n    private String localAddr = \"\";\n\n    public HTTPUSocket() {\n        open();\n    }\n\n    public HTTPUSocket(String bindAddr, int bindPort) throws BindException {\n        open(bindAddr, bindPort);\n    }\n\n    public HTTPUSocket(int bindPort) {\n        open(bindPort);\n    }\n\n    public DatagramSocket getDatagramSocket() {\n        return ssdpUniSock;\n    }\n\n    public void setLocalAddress(String addr) {\n        localAddr = addr;\n    }\n\n    public String getLocalAddress() {\n        if (0 < localAddr.length())\n            return localAddr;\n        return ssdpUniSock.getLocalAddress().getHostAddress();\n    }\n\n    public boolean open() {\n        close();\n        try {\n            ssdpUniSock = new DatagramSocket();\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean open(String bindAddr, int bindPort) throws BindException {\n        close();\n        try {\n            InetSocketAddress bindInetAddr = new InetSocketAddress(InetAddress.getByName(bindAddr), bindPort);\n            ssdpUniSock = new DatagramSocket(bindInetAddr);\n        }\n        catch (BindException possible) {\n            throw possible;\n        }\n        catch (Exception e) {\n            return false;\n        }\n        setLocalAddress(bindAddr);\n        return true;\n    }\n\n    public boolean open(int bindPort) {\n        close();\n        try {\n            InetSocketAddress bindSock = new InetSocketAddress(bindPort);\n            ssdpUniSock = new DatagramSocket(null);\n            ssdpUniSock.setReuseAddress(true);\n            ssdpUniSock.bind(bindSock);\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean close() {\n        if (ssdpUniSock == null)\n            return true;\n        try {\n            ssdpUniSock.close();\n            ssdpUniSock = null;\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean post(String addr, int port, String msg) {\n        try {\n            InetAddress inetAddr = InetAddress.getByName(addr);\n            DatagramPacket dgmPacket = new DatagramPacket(msg.getBytes(), msg.length(), inetAddr, port);\n            ssdpUniSock.send(dgmPacket);\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public SSDPPacket receive() {\n        byte ssdvRecvBuf[] = new byte[SSDP.RECV_MESSAGE_BUFSIZE];\n        SSDPPacket recvPacket = new SSDPPacket(ssdvRecvBuf, ssdvRecvBuf.length);\n        recvPacket.setLocalAddress(getLocalAddress());\n        try {\n            ssdpUniSock.receive(recvPacket.getDatagramPacket());\n            recvPacket.setTimeStamp(System.currentTimeMillis());\n        }\n        catch (Exception e) {\n            return null;\n        }\n        return recvPacket;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.*;\n\npublic class HTTPUSocket {\n    private DatagramSocket ssdpUniSock;\n    private String localAddr;\n\n    public HTTPUSocket() {\n        try {\n            this.ssdpUniSock = new DatagramSocket();\n            this.localAddr = null;\n        } catch (SocketException e) {\n            this.ssdpUniSock = null;\n        }\n    }\n\n    public HTTPUSocket(String bindAddr, int bindPort) {\n        try {\n            InetAddress address = InetAddress.getByName(bindAddr);\n            this.ssdpUniSock = new DatagramSocket(new InetSocketAddress(address, bindPort));\n            this.localAddr = this.ssdpUniSock.getLocalAddress().getHostAddress();\n        } catch (SocketException | UnknownHostException e) {\n            this.ssdpUniSock = null;\n        }\n    }\n\n    public HTTPUSocket(int bindPort) {\n        try {\n            this.ssdpUniSock = new DatagramSocket(bindPort);\n            this.localAddr = this.ssdpUniSock.getLocalAddress().getHostAddress();\n        } catch (SocketException e) {\n            this.ssdpUniSock = null;\n        }\n    }\n\n    public DatagramSocket getDatagramSocket() {\n        return ssdpUniSock;\n    }\n\n    public void setLocalAddress(String addr) {\n        this.localAddr = addr;\n    }\n\n    public String getLocalAddress() {\n        return localAddr;\n    }\n\n    public boolean open() {\n        try {\n            this.ssdpUniSock = new DatagramSocket();\n            this.localAddr = null;\n            return true;\n        } catch (SocketException e) {\n            this.ssdpUniSock = null;\n            return false;\n        }\n    }\n\n    public boolean open(String bindAddr, int bindPort) {\n        try {\n            InetAddress address = InetAddress.getByName(bindAddr);\n            this.ssdpUniSock = new DatagramSocket(new InetSocketAddress(address, bindPort));\n            this.localAddr = this.ssdpUniSock.getLocalAddress().getHostAddress();\n            return true;\n        } catch (SocketException | UnknownHostException e) {\n            this.ssdpUniSock = null;\n            return false;\n        }\n    }\n\n    public boolean open(int bindPort) {\n        try {\n            this.ssdpUniSock = new DatagramSocket(bindPort);\n            this.localAddr = this.ssdpUniSock.getLocalAddress().getHostAddress();\n            return true;\n        } catch (SocketException e) {\n            this.ssdpUniSock = null;\n            return false;\n        }\n    }\n\n    public boolean close() {\n        if (ssdpUniSock != null) {\n            ssdpUniSock.close();\n            ssdpUniSock = null;\n            return true;\n        }\n        return false;\n    }\n\n    public boolean post(String addr, int port, String msg) {\n        if (ssdpUniSock == null) {\n            return false;\n        }\n        try {\n            byte[] data = msg.getBytes();\n            InetAddress destination = InetAddress.getByName(addr);\n            DatagramPacket packet = new DatagramPacket(data, data.length, destination, port);\n            ssdpUniSock.send(packet);\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    public SSDPPacket receive() {\n        if (ssdpUniSock == null) {\n            return null;\n        }\n        byte[] buffer = new byte[1024];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        try {\n            ssdpUniSock.receive(packet);\n            return new SSDPPacket(packet);\n        } catch (IOException e) {\n            return null;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 602,
    "Instruction": "Task Description: Create a UDP server class that listens for incoming packets on a specified port, processes the received data, and provides a method to retrieve the received message.\n\nClass Description: The UdpServer class implements a Runnable interface to handle UDP communication asynchronously. It creates a datagram socket bound to a specified port, receives incoming packets, stores the message content, and allows retrieval of the received message. The server operates with a timeout of 60 seconds.\n\nAttributes:\n- serverSocket: DatagramSocket - The UDP socket used for communication\n- message: String - Stores the received message from the client\n\nMethods:\n- UdpServer(int port) -> void - Constructor that initializes the UDP server on the specified port and starts the receiver thread\n- run() -> void - The thread's main execution method that receives incoming packets and processes the data\n- getMessage() -> String - Retrieves the received message after processing",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\nimport java.io.IOException;\n\npublic class UdpServer implements Runnable {\n\n    private final DatagramSocket serverSocket;\n    private String message;\n\n    public UdpServer(int port) throws SocketException, InterruptedException {\n        serverSocket = new DatagramSocket(port);\n        serverSocket.setSoTimeout(60000);\n        final Thread thread = new Thread(this);\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    @Override\n    public synchronized void run() {\n        final byte[] data = new byte[1024];\n        final DatagramPacket packet = new DatagramPacket(data, data.length);\n        try {\n            serverSocket.receive(packet);\n            message = new String(packet.getData()).trim();\n        } catch (IOException e) {\n            message = \"Exception while receiving sentry call. \" + e.getMessage();\n        }\n    }\n\n    public synchronized String getMessage() throws InterruptedException {\n        return message;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\nimport java.net.SocketTimeoutException;\nimport java.io.IOException;\n\npublic class UdpServer implements Runnable {\n    private DatagramSocket serverSocket;\n    private String message;\n\n    public UdpServer(int port) {\n        try {\n            serverSocket = new DatagramSocket(port);\n            serverSocket.setSoTimeout(60000);\n            new Thread(this).start();\n        } catch (SocketException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void run() {\n        byte[] buffer = new byte[1024];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        try {\n            serverSocket.receive(packet);\n            message = new String(packet.getData(), 0, packet.getLength());\n        } catch (SocketTimeoutException e) {\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}\n```"
  },
  {
    "Task_id": 603,
    "Instruction": "Task Description: Implement a class that provides UDP-based network communication for device discovery and identity exchange in a local area network (LAN) environment, supporting both server (listener) and client (broadcaster) functionalities.\n\nClass Description: LanLinkProvider is a class that handles UDP communication for device discovery in a LAN. It listens for identity broadcasts from other devices and broadcasts its own identity. It manages socket creation, packet handling, and network trust verification.\n\nAttributes:\n- context: [Context] - Android context for accessing device information and preferences\n- udpServer: [DatagramSocket] - UDP socket for receiving broadcast packets\n- listening: [boolean] - Flag indicating whether the UDP listener is active\n- UDP_PORT: [static final int] - Default UDP port for communication (1716)\n- MIN_PORT: [static final int] - Minimum valid TCP port number (1716)\n- MAX_UDP_PACKET_SIZE: [static final int] - Maximum size of UDP packets (512KB)\n\nMethods:\n- setupUdpListener() -> [void] - Sets up and starts a UDP listener thread that continuously receives packets\n- udpPacketReceived(DatagramPacket packet) -> [void] - Processes received UDP packets containing device identity information\n- sendUdpIdentityPacket(List<InetAddress> ipList, @Nullable Network network) -> [void] - Broadcasts device identity to specified IP addresses\n- configureSocket(Socket socket) -> [void] - Configures socket settings (keep-alive)\n- isDeviceTrusted(String deviceId) -> [boolean] - Checks if a device is marked as trusted in shared preferences\n- onStart() -> [void] - Starts the UDP listener\n- onStop() -> [void] - Stops the UDP listener and cleans up resources",
    "Canonical_solution": "import android.content.Context;\nimport android.net.Network;\nimport android.os.Build;\nimport android.util.Log;\n\nimport org.json.JSONException;\nimport org.kde.kdeconnect.Helpers.ThreadHelper;\nimport org.kde.kdeconnect.NetworkPacket;\nimport org.kde.kdeconnect.Helpers.DeviceHelper;\nimport org.kde.kdeconnect.Helpers.TrustedNetworkHelper;\n\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport kotlin.text.Charsets;\n\npublic class LanLinkProvider {\n\n    final static int UDP_PORT = 1716;\n    final static int MIN_PORT = 1716;\n    final static int MAX_UDP_PACKET_SIZE = 1024 * 512;\n\n    private final Context context;\n    private DatagramSocket udpServer;\n    private boolean listening = false;\n\n    private void setupUdpListener() {\n        try {\n            udpServer = new DatagramSocket(null);\n            udpServer.setReuseAddress(true);\n            udpServer.setBroadcast(true);\n        } catch (SocketException e) {\n            Log.e(\"LanLinkProvider\", \"Error creating udp server\", e);\n            throw new RuntimeException(e);\n        }\n        try {\n            udpServer.bind(new InetSocketAddress(UDP_PORT));\n        } catch (SocketException e) {\n            Log.e(\"LanLinkProvider\", \"Error binding udp server\", e);\n        }\n        ThreadHelper.execute(() -> {\n            Log.i(\"UdpListener\", \"Starting UDP listener\");\n            while (listening) {\n                try {\n                    DatagramPacket packet = new DatagramPacket(new byte[MAX_UDP_PACKET_SIZE], MAX_UDP_PACKET_SIZE);\n                    udpServer.receive(packet);\n                    ThreadHelper.execute(() -> {\n                        try {\n                            udpPacketReceived(packet);\n                        } catch (JSONException | IOException e) {\n                            Log.e(\"LanLinkProvider\", \"Exception receiving UDP packet\", e);\n                        }\n                    });\n                } catch (IOException e) {\n                    Log.e(\"LanLinkProvider\", \"UdpReceive exception\", e);\n                }\n            }\n            Log.w(\"UdpListener\", \"Stopping UDP listener\");\n        });\n    }\n\n    @WorkerThread\n    private void udpPacketReceived(DatagramPacket packet) throws JSONException, IOException {\n        final InetAddress address = packet.getAddress();\n        String message = new String(packet.getData(), Charsets.UTF_8);\n        final NetworkPacket identityPacket = NetworkPacket.unserialize(message);\n\n        if (!DeviceInfo.isValidIdentityPacket(identityPacket)) {\n            Log.w(\"KDE/LanLinkProvider\", \"Invalid identity packet\");\n            return;\n        }\n\n        final String deviceId = identityPacket.getString(\"deviceId\");\n        String myId = DeviceHelper.getDeviceId(context);\n        if (deviceId.equals(myId)) {\n            return;\n        }\n\n        Log.i(\"KDE/LanLinkProvider\", \"Broadcast received from \" + identityPacket.getString(\"deviceName\"));\n\n        boolean deviceTrusted = isDeviceTrusted(identityPacket.getString(\"deviceId\"));\n        if (!deviceTrusted && !TrustedNetworkHelper.isTrustedNetwork(context)) {\n            Log.i(\"KDE/LanLinkProvider\", \"Ignoring untrusted device\");\n            return;\n        }\n\n        int tcpPort = identityPacket.getInt(\"tcpPort\", MIN_PORT);\n        if (tcpPort < MIN_PORT || tcpPort > MAX_PORT) {\n            Log.e(\"LanLinkProvider\", \"Invalid TCP port\");\n            return;\n        }\n\n        Socket socket = SocketFactory.getDefault().createSocket(address, tcpPort);\n        configureSocket(socket);\n\n        DeviceInfo myDeviceInfo = DeviceHelper.getDeviceInfo(context);\n        NetworkPacket myIdentity = myDeviceInfo.toIdentityPacket();\n\n        OutputStream out = socket.getOutputStream();\n        out.write(myIdentity.serialize().getBytes());\n        out.flush();\n    }\n\n    @WorkerThread\n    public void sendUdpIdentityPacket(List<InetAddress> ipList, @Nullable Network network) {\n        if (!listening) return;\n\n        DeviceInfo myDeviceInfo = DeviceHelper.getDeviceInfo(context);\n        NetworkPacket identity = myDeviceInfo.toIdentityPacket();\n        identity.set(\"tcpPort\", MIN_PORT);\n\n        byte[] bytes;\n        try {\n            bytes = identity.serialize().getBytes(Charsets.UTF_8);\n        } catch (JSONException e) {\n            Log.e(\"KDE/LanLinkProvider\", \"Failed to serialize packet\", e);\n            return;\n        }\n\n        DatagramSocket socket;\n        try {\n            socket = new DatagramSocket();\n            if (network != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {\n                try {\n                    network.bindSocket(socket);\n                } catch (IOException e) {\n                    Log.w(\"LanLinkProvider\", \"Network bind failed\");\n                }\n            }\n            socket.setReuseAddress(true);\n            socket.setBroadcast(true);\n        } catch (SocketException e) {\n            Log.e(\"KDE/LanLinkProvider\", \"Failed to create socket\", e);\n            return;\n        }\n\n        for (InetAddress ip : ipList) {\n            try {\n                socket.send(new DatagramPacket(bytes, bytes.length, ip, MIN_PORT));\n            } catch (IOException e) {\n                Log.e(\"KDE/LanLinkProvider\", \"Send failed to \" + ip, e);\n            }\n        }\n        socket.close();\n    }\n\n    private void configureSocket(Socket socket) {\n        try {\n            socket.setKeepAlive(true);\n        } catch (SocketException e) {\n            Log.e(\"LanLink\", \"Socket config failed\", e);\n        }\n    }\n\n    private boolean isDeviceTrusted(String deviceId) {\n        return context.getSharedPreferences(\"trusted_devices\", Context.MODE_PRIVATE)\n                     .getBoolean(deviceId, false);\n    }\n\n    public void onStart() {\n        if (!listening) {\n            listening = true;\n            setupUdpListener();\n        }\n    }\n\n    public void onStop() {\n        listening = false;\n        if (udpServer != null) {\n            udpServer.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport android.content.Context;\nimport android.net.Network;\nimport android.net.wifi.WifiManager;\nimport android.os.Bundle;\nimport android.util.Log;\n\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class LanLinkProvider {\n    private final Context context;\n    private DatagramSocket udpServer;\n    private boolean listening;\n    private static final int UDP_PORT = 1716;\n    private static final int MIN_PORT = 1716;\n    private static final int MAX_UDP_PACKET_SIZE = 512 * 1024;\n\n    public LanLinkProvider(Context context) {\n        this.context = context;\n    }\n\n    public void setupUdpListener() {\n        if (udpServer != null && !udpServer.isClosed()) {\n            return;\n        }\n        listening = true;\n        new Thread(this::startUdpListening).start();\n    }\n\n    private void startUdpListening() {\n        try {\n            udpServer = new DatagramSocket(UDP_PORT);\n            byte[] buffer = new byte[MAX_UDP_PACKET_SIZE];\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n            while (listening) {\n                udpServer.receive(packet);\n                udpPacketReceived(packet);\n            }\n        } catch (IOException e) {\n            Log.e(\"LanLinkProvider\", \"UDP listener error\", e);\n        } finally {\n            if (udpServer != null && !udpServer.isClosed()) {\n                udpServer.close();\n            }\n        }\n    }\n\n    public void udpPacketReceived(DatagramPacket packet) {\n        byte[] data = packet.getData();\n        String identity = new String(data).trim();\n        // Process identity data, e.g., parse JSON or extract device info\n    }\n\n    public void sendUdpIdentityPacket(List<InetAddress> ipList, @androidx.annotation.Nullable Network network) {\n        String identityData = generateIdentityData();\n        for (InetAddress address : ipList) {\n            try {\n                byte[] data = identityData.getBytes();\n                DatagramPacket packet = new DatagramPacket(data, data.length, address, UDP_PORT);\n                if (udpServer == null || udpServer.isClosed()) {\n                    udpServer = new DatagramSocket();\n                }\n                udpServer.send(packet);\n            } catch (IOException e) {\n                Log.e(\"LanLinkProvider\", \"Failed to send UDP packet to \" + address, e);\n            }\n        }\n    }\n\n    private String generateIdentityData() {\n        // Implement device identity generation logic\n        return \"DEVICE_ID:12345\";\n    }\n\n    public void configureSocket(Socket socket) {\n        try {\n            socket.setKeepAlive(true);\n        } catch (IOException e) {\n            Log.e(\"LanLinkProvider\", \"Failed to configure socket\", e);\n        }\n    }\n\n    public boolean isDeviceTrusted(String deviceId) {\n        // Check shared preferences for trusted devices\n        return false; // Placeholder\n    }\n\n    public void onStart() {\n        setupUdpListener();\n    }\n\n    public void onStop() {\n        listening = false;\n        if (udpServer != null && !udpServer.isClosed()) {\n            udpServer.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 604,
    "Instruction": "Task Description: Implement a UDP client class in Java that can send UDP packets to a specified target address and port, with optional response waiting functionality.\n\nClass Description: The UDPClient class provides functionality to send UDP packets to a network target. It supports both fire-and-forget mode and request-response mode. The class manages its own socket and thread for asynchronous operation, and includes cleanup mechanisms.\n\nAttributes:\n- mUdpSocket: DatagramSocket - The UDP socket used for communication\n- mRunning: boolean - Flag indicating whether the client is currently active\n- mThread: Thread - The thread handling the UDP communication\n\nMethods:\n- sendUDPPacket(String targetAddress, int port, String data, boolean waitResponse, ResponseHandler handler) -> void - \n  Sends a UDP packet to the specified address and port. If waitResponse is true, it will wait for and deliver any response.\n  Parameters:\n    - targetAddress: String - The IP address or hostname of the target\n    - port: int - The destination port number\n    - data: String - The message to send\n    - waitResponse: boolean - Whether to wait for a response\n    - handler: ResponseHandler - Callback interface for handling responses or errors\n\n- stop() -> void - \n  Stops any ongoing UDP communication and cleans up resources. Closes the socket and interrupts the thread if active.\n\n- interface ResponseHandler - \n  Callback interface for handling responses or errors\n  Methods:\n    - onResponse(String response) -> void - Called when a response is received\n    - onError(String errorMessage) -> void - Called when an error occurs",
    "Canonical_solution": "import android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.CheckBox;\nimport android.widget.EditText;\nimport android.widget.Spinner;\nimport android.widget.Toast;\nimport android.widget.ToggleButton;\n\nimport org.csploit.android.R;\nimport org.csploit.android.core.Plugin;\nimport org.csploit.android.core.System;\nimport org.csploit.android.net.Target;\nimport org.csploit.android.net.Target.Type;\n\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\n\npublic class UDPClient {\n\n    private DatagramSocket mUdpSocket = null;\n    private boolean mRunning = false;\n    private Thread mThread = null;\n\n    public void sendUDPPacket(String targetAddress, int port, String data, boolean waitResponse, final ResponseHandler handler) {\n        if (!mRunning) {\n            mRunning = true;\n\n            mThread = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    String error = null;\n                    try {\n                        mUdpSocket = new DatagramSocket();\n                        DatagramPacket packet = new DatagramPacket(\n                                data.getBytes(), data.length(),\n                                System.getCurrentTarget().getAddress(), port);\n\n                        mUdpSocket.send(packet);\n\n                        if (waitResponse) {\n                            byte[] buffer = new byte[1024];\n                            DatagramPacket response = new DatagramPacket(buffer, buffer.length);\n                            mUdpSocket.receive(response);\n                            final String responseText = new String(buffer);\n                            handler.onResponse(responseText);\n                        }\n                    } catch (Exception e) {\n                        error = e.getMessage();\n                    } finally {\n                        if (mUdpSocket != null) {\n                            mUdpSocket.close();\n                        }\n                        mRunning = false;\n                        if (error != null) {\n                            handler.onError(error);\n                        }\n                    }\n                }\n            });\n\n            mThread.start();\n        }\n    }\n\n    public void stop() {\n        mRunning = false;\n        try {\n            if (mThread != null && mThread.isAlive()) {\n                if (mUdpSocket != null)\n                    mUdpSocket.close();\n                mThread.interrupt();\n                mThread = null;\n            }\n        } catch (Exception e) {\n            // Ignore\n        }\n    }\n\n    public interface ResponseHandler {\n        void onResponse(String response);\n        void onError(String errorMessage);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.*;\n\npublic class UDPClient {\n    private DatagramSocket mUdpSocket;\n    private boolean mRunning;\n    private Thread mThread;\n\n    public UDPClient() {\n        try {\n            mUdpSocket = new DatagramSocket();\n            mRunning = true;\n            mThread = new Thread(() -> {\n                while (mRunning) {\n                    try {\n                        byte[] buffer = new byte[1024];\n                        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n                        mUdpSocket.receive(packet);\n                        // Handle incoming packets if needed\n                    } catch (SocketException e) {\n                        if (mRunning) {\n                            e.printStackTrace();\n                        }\n                    } catch (IOException e) {\n                        if (mRunning) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            });\n            mThread.start();\n        } catch (SocketException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void sendUDPPacket(String targetAddress, int port, String data, boolean waitResponse, ResponseHandler handler) {\n        try {\n            InetAddress address = InetAddress.getByName(targetAddress);\n            byte[] sendData = data.getBytes();\n            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, address, port);\n            mUdpSocket.send(sendPacket);\n\n            if (waitResponse) {\n                byte[] receiveData = new byte[1024];\n                DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\n                mUdpSocket.receive(receivePacket);\n                String response = new String(receivePacket.getData()).trim();\n                handler.onResponse(response);\n            }\n        } catch (Exception e) {\n            handler.onError(e.getMessage());\n        }\n    }\n\n    public void stop() {\n        mRunning = false;\n        if (mUdpSocket != null) {\n            mUdpSocket.close();\n        }\n        if (mThread != null) {\n            mThread.interrupt();\n        }\n    }\n\n    public interface ResponseHandler {\n        void onResponse(String response);\n        void onError(String errorMessage);\n    }\n}\n```"
  },
  {
    "Task_id": 605,
    "Instruction": "Task Description: Implement a UDP-based tracker server that handles client connections and announcements for a peer-to-peer network, managing connection IDs and responding to client requests with appropriate status information.\n\nClass Description: SingleClientUdpTracker is a UDP server implementation that simulates a BitTorrent tracker, handling client connect and announce requests while maintaining connection state and expiration.\n\nAttributes:\n- CONNECTION_EXPIRATION_TIME: [Duration] - Maximum duration before a connection expires\n- EPHEMERAL_CONNECTION_ID: [long] - Magic number used for initial connection requests\n- CONNECT_CODE: [int] - Action code for connection requests\n- ANNOUNCE_CODE: [int] - Action code for announce requests\n- ERROR_CODE: [int] - Action code for error responses\n- serverSocket: [DatagramSocket] - UDP socket for communication\n- interval: [int] - Announce interval to send to clients\n- leechers: [int] - Number of leechers to report\n- seeders: [int] - Number of seeders to report\n- shutdown: [boolean] - Flag to control server shutdown\n- currentConnection: [long] - Current active connection ID\n- connectedOn: [long] - Timestamp of when current connection was established\n\nMethods:\n- SingleClientUdpTracker([int interval, int leechers, int seeders]) -> [void] - Constructor that initializes the UDP socket with random port and sets tracker parameters\n- getServerAddress() -> [SocketAddress] - Returns the local socket address of the server\n- run() -> [void] - Main server loop that receives requests and sends responses\n- processRequest([byte[] requestData]) -> [byte[]] - Processes incoming UDP packets and generates appropriate responses\n- generateConnectionId() -> [long] - Generates a new random connection ID\n- createConnectResponse([long connectionId, int transactionId]) -> [byte[]] - Creates a connect response packet\n- createAnnounceResponse([long connectionId, int transactionId]) -> [byte[]] - Creates an announce response packet\n- createError([int transactionId, String message]) -> [byte[]] - Creates an error response packet\n- shutdown() -> [void] - Shuts down the server and closes the socket",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.Inet4Address;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.SocketException;\nimport java.nio.charset.StandardCharsets;\nimport java.time.Duration;\nimport java.util.Arrays;\nimport java.util.Random;\n\npublic class SingleClientUdpTracker {\n\n    private static final Duration CONNECTION_EXPIRATION_TIME = Duration.ofMinutes(2);\n    private static final long EPHEMERAL_CONNECTION_ID = 0x41727101980L;\n\n    private static final int CONNECT_CODE = 0;\n    private static final int ANNOUNCE_CODE = 1;\n    private static final int ERROR_CODE = 3;\n\n    private final DatagramSocket serverSocket;\n    private final int interval;\n    private final int leechers;\n    private final int seeders;\n\n    private volatile boolean shutdown;\n    private volatile long currentConnection;\n    private volatile long connectedOn;\n\n    public SingleClientUdpTracker(int interval, int leechers, int seeders) throws SocketException {\n        this.serverSocket = new DatagramSocket(new InetSocketAddress(Inet4Address.getLoopbackAddress(), 0));\n        this.interval = interval;\n        this.leechers = leechers;\n        this.seeders = seeders;\n    }\n\n    public SocketAddress getServerAddress() {\n        return serverSocket.getLocalSocketAddress();\n    }\n\n    public void run() {\n        byte[] rbuf = new byte[8192];\n        DatagramPacket received = new DatagramPacket(rbuf, rbuf.length);\n        try {\n            serverSocket.receive(received);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unexpected I/O error\", e);\n        }\n\n        byte[] response = processRequest(Arrays.copyOfRange(rbuf, 0, received.getLength()));\n        DatagramPacket sent = new DatagramPacket(response, response.length, received.getSocketAddress());\n        try {\n            serverSocket.send(sent);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unexpected I/O error\", e);\n        }\n    }\n\n    private byte[] processRequest(byte[] requestData) {\n        long connectionId = Protocols.readLong(requestData, 0);\n        int action = Protocols.readInt(requestData, 8);\n        int transactionId = Protocols.readInt(requestData, 12);\n        boolean connectionExpired = System.currentTimeMillis() - connectedOn > CONNECTION_EXPIRATION_TIME.toMillis();\n\n        switch (action) {\n            case CONNECT_CODE: {\n                if (connectionId != EPHEMERAL_CONNECTION_ID) {\n                    return createError(transactionId,\n                            \"Connect request should use \" + EPHEMERAL_CONNECTION_ID + \" as connection ID\");\n                } else if (!connectionExpired) {\n                    return createError(transactionId, \"Connection is not expired yet: \" + connectionId);\n                }\n                currentConnection = generateConnectionId();\n                connectedOn = System.currentTimeMillis();\n                return createConnectResponse(currentConnection, transactionId);\n            }\n            case ANNOUNCE_CODE: {\n                if (currentConnection != connectionId) {\n                    return createError(transactionId, \"Unknown connection: \" + connectionId);\n                } else if (connectionExpired) {\n                    return createError(transactionId, \"Connection expired: \" + connectionId);\n                }\n                return createAnnounceResponse(currentConnection, transactionId);\n            }\n            default: {\n                return createError(transactionId, \"Unsupported action: \" + action);\n            }\n        }\n    }\n\n    private long generateConnectionId() {\n        return new Random(System.currentTimeMillis()).nextLong();\n    }\n\n    private byte[] createConnectResponse(long connectionId, int transactionId) {\n        byte[] data = new byte[4 + 4 + 8];\n        System.arraycopy(Protocols.getIntBytes(CONNECT_CODE), 0, data, 0, 4);\n        System.arraycopy(Protocols.getIntBytes(transactionId), 0, data, 4, 4);\n        System.arraycopy(Protocols.getLongBytes(connectionId), 0, data, 8, 8);\n        return data;\n    }\n\n    private byte[] createAnnounceResponse(long connectionId, int transactionId) {\n        byte[] data = new byte[4 + 4 + 4 + 4 + 4];\n        System.arraycopy(Protocols.getIntBytes(ANNOUNCE_CODE), 0, data, 0, 4);\n        System.arraycopy(Protocols.getIntBytes(transactionId), 0, data, 4, 4);\n        System.arraycopy(Protocols.getIntBytes(interval), 0, data, 8, 4);\n        System.arraycopy(Protocols.getIntBytes(leechers), 0, data, 12, 4);\n        System.arraycopy(Protocols.getIntBytes(seeders), 0, data, 16, 4);\n        return data;\n    }\n\n    private byte[] createError(int transactionId, String message) {\n        byte[] messageBytes = message.getBytes(StandardCharsets.US_ASCII);\n        byte[] data = new byte[4 + 4 + messageBytes.length];\n        System.arraycopy(Protocols.getIntBytes(ERROR_CODE), 0, data, 0, 4);\n        System.arraycopy(Protocols.getIntBytes(transactionId), 0, data, 4, 4);\n        System.arraycopy(messageBytes, 0, data, 8, messageBytes.length);\n        return data;\n    }\n\n    public void shutdown() {\n        this.shutdown = true;\n        this.serverSocket.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "import java.net.*;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.StandardCharsets;\n\npublic class SingleClientUdpTracker {\n    private static final long CONNECTION_EXPIRATION_TIME = 30000;\n    private static final long EPHEMERAL_CONNECTION_ID = 0;\n    private static final int CONNECT_CODE = 0;\n    private static final int ANNOUNCE_CODE = 1;\n    private static final int ERROR_CODE = 2;\n\n    private DatagramSocket serverSocket;\n    private int interval;\n    private int leechers;\n    private int seeders;\n    private boolean shutdown;\n    private long currentConnection;\n    private long connectedOn;\n\n    public SingleClientUdpTracker(int interval, int leechers, int seeders) {\n        this.interval = interval;\n        this.leechers = leechers;\n        this.seeders = seeders;\n        try {\n            serverSocket = new DatagramSocket();\n        } catch (SocketException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public SocketAddress getServerAddress() {\n        return serverSocket.getLocalSocketAddress();\n    }\n\n    public void run() {\n        byte[] buffer = new byte[1024];\n        while (!shutdown) {\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n            try {\n                serverSocket.receive(packet);\n                byte[] response = processRequest(packet.getData());\n                DatagramPacket responsePacket = new DatagramPacket(response, response.length, packet.getAddress(), packet.getPort());\n                serverSocket.send(responsePacket);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private byte[] processRequest(byte[] requestData) {\n        ByteBuffer buffer = ByteBuffer.wrap(requestData);\n        int action = buffer.getInt();\n        int transactionId = buffer.getInt();\n        if (action == CONNECT_CODE) {\n            long connectionId = generateConnectionId();\n            currentConnection = connectionId;\n            connectedOn = System.currentTimeMillis();\n            return createConnectResponse(connectionId, transactionId);\n        } else if (action == ANNOUNCE_CODE) {\n            long receivedConnectionId = buffer.getLong();\n            if (receivedConnectionId != currentConnection || (System.currentTimeMillis() - connectedOn) > CONNECTION_EXPIRATION_TIME) {\n                return createError(transactionId, \"Invalid or expired connection\");\n            }\n            return createAnnounceResponse(currentConnection, transactionId);\n        } else {\n            return createError(transactionId, \"Unknown action\");\n        }\n    }\n\n    private long generateConnectionId() {\n        return new java.util.Random().nextLong();\n    }\n\n    private byte[] createConnectResponse(long connectionId, int transactionId) {\n        ByteBuffer buffer = ByteBuffer.allocate(16);\n        buffer.putInt(CONNECT_CODE);\n        buffer.putInt(transactionId);\n        buffer.putLong(connectionId);\n        return buffer.array();\n    }\n\n    private byte[] createAnnounceResponse(long connectionId, int transactionId) {\n        ByteBuffer buffer = ByteBuffer.allocate(20);\n        buffer.putInt(ANNOUNCE_CODE);\n        buffer.putInt(transactionId);\n        buffer.putInt(interval);\n        buffer.putInt(leechers);\n        buffer.putInt(seeders);\n        return buffer.array();\n    }\n\n    private byte[] createError(int transactionId, String message) {\n        byte[] messageBytes = message.getBytes(StandardCharsets.UTF_8);\n        ByteBuffer buffer = ByteBuffer.allocate(8 + messageBytes.length);\n        buffer.putInt(ERROR_CODE);\n        buffer.putInt(transactionId);\n        buffer.put(messageBytes);\n        return buffer.array();\n    }\n\n    public void shutdown() {\n        shutdown = true;\n        serverSocket.close();\n    }\n}"
  },
  {
    "Task_id": 610,
    "Instruction": "Task Description: Implement a UDP-based tracker client for peer-to-peer file sharing systems that can connect to a tracker server, maintain connection state, and handle announce requests and responses.\n\nClass Description: UDPTrackerClient is a specialized tracker client that communicates with BitTorrent trackers using UDP protocol. It handles connection establishment, announcement of peer information, and manages timeouts and retries for reliable communication.\n\nAttributes:\n- logger: Logger - Logger instance for tracking client activities\n- UDP_BASE_TIMEOUT_SECONDS: int - Base timeout value for UDP communication\n- UDP_MAX_TRIES: int - Maximum number of retry attempts\n- UDP_MAX_TRIES_ON_STOPPED: int - Maximum retries for STOPPED events\n- UDP_PACKET_LENGTH: int - Maximum UDP packet size\n- address: InetSocketAddress - Tracker server address\n- random: Random - Random number generator for transaction IDs\n- socket: DatagramSocket - UDP communication socket\n- connectionExpiration: Date - When the current connection expires\n- connectionId: long - Current connection identifier\n- transactionId: int - Current transaction identifier\n- stop: boolean - Flag to indicate if client should stop operations\n\nMethods:\n- UDPTrackerClient(List<Peer> peers, URI tracker) -> void - Constructor that initializes the client with peer list and tracker URI\n- announce(AnnounceRequestMessage.RequestEvent event, boolean inhibitEvents, AnnounceableInformation torrent, List<Peer> peers) -> void - Main method to announce peer information to tracker\n- handleTrackerAnnounceResponse(TrackerMessage message, boolean inhibitEvents, String hexInfoHash) -> void - Processes announce responses from tracker\n- close() -> void - Closes the client and releases resources\n- buildAnnounceRequest(AnnounceRequestMessage.RequestEvent event, AnnounceableInformation torrent, Peer peer) -> UDPAnnounceRequestMessage - Constructs announce request message\n- validateTrackerResponse(TrackerMessage message) -> void - Validates tracker response messages\n- handleTrackerConnectResponse(TrackerMessage message) -> void - Processes connection responses from tracker\n- send(ByteBuffer data) -> void - Sends data to tracker server\n- recv(int attempt) -> ByteBuffer - Receives data from tracker server with timeout handling",
    "Canonical_solution": "import com.turn.ttorrent.common.AnnounceableInformation;\nimport com.turn.ttorrent.common.Peer;\nimport com.turn.ttorrent.common.TorrentLoggerFactory;\nimport com.turn.ttorrent.common.protocol.AnnounceRequestMessage;\nimport com.turn.ttorrent.common.protocol.TrackerMessage;\nimport com.turn.ttorrent.common.protocol.TrackerMessage.ErrorMessage;\nimport com.turn.ttorrent.common.protocol.TrackerMessage.MessageValidationException;\nimport com.turn.ttorrent.common.protocol.udp.UDPAnnounceRequestMessage;\nimport com.turn.ttorrent.common.protocol.udp.UDPConnectRequestMessage;\nimport com.turn.ttorrent.common.protocol.udp.UDPConnectResponseMessage;\nimport com.turn.ttorrent.common.protocol.udp.UDPTrackerMessage;\nimport org.slf4j.Logger;\n\nimport java.io.IOException;\nimport java.net.*;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.UnsupportedAddressTypeException;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Random;\n\npublic class UDPTrackerClient extends TrackerClient {\n\n  protected static final Logger logger =\n          TorrentLoggerFactory.getLogger(UDPTrackerClient.class);\n\n  private static final int UDP_BASE_TIMEOUT_SECONDS = 15;\n  private static final int UDP_MAX_TRIES = 8;\n  private static final int UDP_MAX_TRIES_ON_STOPPED = 1;\n  private static final int UDP_PACKET_LENGTH = 512;\n\n  private final InetSocketAddress address;\n  private final Random random;\n\n  private DatagramSocket socket;\n  private Date connectionExpiration;\n  private long connectionId;\n  private int transactionId;\n  private boolean stop;\n\n  public UDPTrackerClient(List<Peer> peers, URI tracker)\n          throws UnknownHostException {\n    super(peers, tracker);\n\n    for (Peer peer : peers) {\n      if (!(InetAddress.getByName(peer.getIp()) instanceof Inet4Address)) {\n        throw new UnsupportedAddressTypeException();\n      }\n    }\n\n    this.address = new InetSocketAddress(\n            tracker.getHost(),\n            tracker.getPort());\n\n    this.socket = null;\n    this.random = new Random();\n    this.connectionExpiration = null;\n    this.stop = false;\n  }\n\n  @Override\n  public void announce(final AnnounceRequestMessage.RequestEvent event,\n                       boolean inhibitEvents, final AnnounceableInformation torrent, final List<Peer> peers) throws AnnounceException {\n    int maxAttempts = AnnounceRequestMessage.RequestEvent\n            .STOPPED.equals(event)\n            ? UDP_MAX_TRIES_ON_STOPPED\n            : UDP_MAX_TRIES;\n    int attempts = -1;\n\n    try {\n      this.socket = new DatagramSocket();\n      this.socket.connect(this.address);\n\n      while (++attempts <= maxAttempts) {\n        this.transactionId = this.random.nextInt();\n\n        if (this.connectionExpiration != null) {\n          if (new Date().before(this.connectionExpiration)) {\n            for (Peer peer : peers) {\n              this.send(this.buildAnnounceRequest(event, torrent, peer).getData());\n            }\n\n            try {\n              this.handleTrackerAnnounceResponse(\n                      UDPTrackerMessage.UDPTrackerResponseMessage\n                              .parse(this.recv(attempts)), inhibitEvents, torrent.getHexInfoHash());\n              return;\n            } catch (SocketTimeoutException ste) {\n              if (stop) {\n                return;\n              }\n            }\n          }\n        }\n\n        this.send(UDPConnectRequestMessage\n                .craft(this.transactionId).getData());\n\n        try {\n          this.handleTrackerConnectResponse(\n                  UDPTrackerMessage.UDPTrackerResponseMessage\n                          .parse(this.recv(attempts)));\n          attempts = -1;\n        } catch (SocketTimeoutException ste) {\n          if (stop) {\n            return;\n          }\n        }\n      }\n\n      throw new AnnounceException(\"Timeout while announcing\" +\n              this.formatAnnounceEvent(event) + \" to tracker!\");\n    } catch (IOException ioe) {\n      throw new AnnounceException(\"Error while announcing\" +\n              this.formatAnnounceEvent(event) +\n              \" to tracker: \" + ioe.getMessage(), ioe);\n    } catch (MessageValidationException mve) {\n      throw new AnnounceException(\"Tracker message violates expected \" +\n              \"protocol (\" + mve.getMessage() + \")\", mve);\n    }\n  }\n\n  @Override\n  protected void handleTrackerAnnounceResponse(TrackerMessage message,\n                                               boolean inhibitEvents, String hexInfoHash) throws AnnounceException {\n    this.validateTrackerResponse(message);\n    super.handleTrackerAnnounceResponse(message, inhibitEvents, hexInfoHash);\n  }\n\n  @Override\n  protected void close() {\n    this.stop = true;\n    if (this.socket != null && !this.socket.isClosed()) {\n      this.socket.close();\n    }\n  }\n\n  private UDPAnnounceRequestMessage buildAnnounceRequest(\n          final AnnounceRequestMessage.RequestEvent event, final AnnounceableInformation torrent, final Peer peer) {\n    return UDPAnnounceRequestMessage.craft(\n            this.connectionId,\n            transactionId,\n            torrent.getInfoHash(),\n            peer.getPeerIdArray(),\n            torrent.getDownloaded(),\n            torrent.getUploaded(),\n            torrent.getLeft(),\n            event,\n            peer.getAddress().getAddress(),\n            0,\n            AnnounceRequestMessage.DEFAULT_NUM_WANT,\n            peer.getPort());\n  }\n\n  private void validateTrackerResponse(TrackerMessage message)\n          throws AnnounceException {\n    if (message instanceof ErrorMessage) {\n      throw new AnnounceException(((ErrorMessage) message).getReason());\n    }\n\n    if (message instanceof UDPTrackerMessage &&\n            (((UDPTrackerMessage) message).getTransactionId() != this.transactionId)) {\n      throw new AnnounceException(\"Invalid transaction ID!\");\n    }\n  }\n\n  private void handleTrackerConnectResponse(TrackerMessage message)\n          throws AnnounceException {\n    this.validateTrackerResponse(message);\n\n    if (!(message instanceof ConnectionResponseMessage)) {\n      throw new AnnounceException(\"Unexpected tracker message type \" +\n              message.getType().name() + \"!\");\n    }\n\n    UDPConnectResponseMessage connectResponse =\n            (UDPConnectResponseMessage) message;\n\n    this.connectionId = connectResponse.getConnectionId();\n    Calendar now = Calendar.getInstance();\n    now.add(Calendar.MINUTE, 1);\n    this.connectionExpiration = now.getTime();\n  }\n\n  private void send(ByteBuffer data) {\n    try {\n      this.socket.send(new DatagramPacket(\n              data.array(),\n              data.capacity(),\n              this.address));\n    } catch (IOException ioe) {\n      logger.info(\"Error sending datagram packet to tracker at {}: {}.\", this.address, ioe.getMessage());\n    }\n  }\n\n  private ByteBuffer recv(int attempt)\n          throws IOException, SocketException, SocketTimeoutException {\n    int timeout = UDP_BASE_TIMEOUT_SECONDS * (int) Math.pow(2, attempt);\n    logger.trace(\"Setting receive timeout to {}s for attempt {}...\",\n            timeout, attempt);\n    this.socket.setSoTimeout(timeout * 1000);\n\n    try {\n      DatagramPacket p = new DatagramPacket(\n              new byte[UDP_PACKET_LENGTH],\n              UDP_PACKET_LENGTH);\n      this.socket.receive(p);\n      return ByteBuffer.wrap(p.getData(), 0, p.getLength());\n    } catch (SocketTimeoutException ste) {\n      throw ste;\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.*;\nimport java.nio.ByteBuffer;\nimport java.util.*;\nimport java.util.logging.Logger;\n\npublic class UDPTrackerClient {\n    private final Logger logger;\n    private final int UDP_BASE_TIMEOUT_SECONDS;\n    private final int UDP_MAX_TRIES;\n    private final int UDP_MAX_TRIES_ON_STOPPED;\n    private final int UDP_PACKET_LENGTH;\n    private final InetSocketAddress address;\n    private final Random random;\n    private DatagramSocket socket;\n    private Date connectionExpiration;\n    private long connectionId;\n    private int transactionId;\n    private boolean stop;\n\n    public UDPTrackerClient(List<Peer> peers, URI tracker) {\n        this.logger = Logger.getLogger(UDPTrackerClient.class.getName());\n        this.UDP_BASE_TIMEOUT_SECONDS = 5;\n        this.UDP_MAX_TRIES = 3;\n        this.UDP_MAX_TRIES_ON_STOPPED = 1;\n        this.UDP_PACKET_LENGTH = 1400;\n        this.address = new InetSocketAddress(tracker.getHost(), tracker.getPort());\n        this.random = new Random();\n        this.socket = new DatagramSocket();\n        this.connectionExpiration = new Date(0);\n        this.connectionId = 0;\n        this.transactionId = random.nextInt();\n        this.stop = false;\n    }\n\n    public void announce(AnnounceRequestMessage.RequestEvent event, boolean inhibitEvents, AnnounceableInformation torrent, List<Peer> peers) {\n        if (stop) return;\n        try {\n            if (System.currentTimeMillis() >= connectionExpiration.getTime()) {\n                connect();\n            }\n            UDPAnnounceRequestMessage request = buildAnnounceRequest(event, torrent, peers.get(0));\n            send(request.getData());\n            ByteBuffer response = recv(0);\n            TrackerMessage message = TrackerMessage.parse(response);\n            validateTrackerResponse(message);\n            handleTrackerAnnounceResponse(message, inhibitEvents, torrent.getInfoHash());\n        } catch (Exception e) {\n            logger.severe(\"Announce failed: \" + e.getMessage());\n        }\n    }\n\n    private void handleTrackerAnnounceResponse(TrackerMessage message, boolean inhibitEvents, String hexInfoHash) {\n        // Implementation for processing announce response\n    }\n\n    public void close() {\n        stop = true;\n        if (socket != null) {\n            socket.close();\n        }\n    }\n\n    private UDPAnnounceRequestMessage buildAnnounceRequest(AnnounceRequestMessage.RequestEvent event, AnnounceableInformation torrent, Peer peer) {\n        ByteBuffer buffer = ByteBuffer.allocate(UDP_PACKET_LENGTH);\n        buffer.putLong(connectionId);\n        buffer.putInt(transactionId);\n        // Add announce parameters\n        return new UDPAnnounceRequestMessage(buffer);\n    }\n\n    private void validateTrackerResponse(TrackerMessage message) {\n        // Implementation for validating response\n    }\n\n    private void handleTrackerConnectResponse(TrackerMessage message) {\n        // Implementation for processing connect response\n    }\n\n    private void send(ByteBuffer data) throws IOException {\n        DatagramPacket packet = new DatagramPacket(data.array(), data.limit(), address);\n        socket.send(packet);\n    }\n\n    private ByteBuffer recv(int attempt) throws IOException {\n        if (attempt >= UDP_MAX_TRIES) {\n            throw new IOException(\"Max retries exceeded\");\n        }\n        DatagramPacket packet = new DatagramPacket(new byte[UDP_PACKET_LENGTH], UDP_PACKET_LENGTH);\n        socket.setSoTimeout(UDP_BASE_TIMEOUT_SECONDS * 1000 * (1 << attempt));\n        try {\n            socket.receive(packet);\n            return ByteBuffer.wrap(packet.getData(), 0, packet.getLength());\n        } catch (SocketTimeoutException e) {\n            logger.warning(\"Timeout, retrying...\");\n            return recv(attempt + 1);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 611,
    "Instruction": "Task Description: Implement a UDP communication handler class that facilitates sending UDP messages and manages socket resources.\n\nClass Description: The UdpCommunicationHandler class provides functionality for sending UDP messages to a specified IP address and port, and includes methods for proper socket cleanup. It's designed for scenarios where a client needs to send confirmation messages to a server.\n\nAttributes:\n- mDatagramSocket: DatagramSocket - The UDP socket used for communication\n\nMethods:\n- sendFileReceiverInitSuccessMsg(IpPortInfo ipPortInfo) -> void - Sends a predefined success message (MSG_FILE_RECEIVER_INIT_SUCCESS) to the specified IP address and port. The socket is created on a port number that's one higher than the target port. Throws Exception if communication fails.\n- closeSocket() -> void - Closes and cleans up the DatagramSocket resource if it exists. This method should be called when the communication is complete to release system resources.\n\nInput:\n- For sendFileReceiverInitSuccessMsg: IpPortInfo object containing target IP address (InetAddress) and port number (int)\n- For closeSocket: None\n\nOutput:\n- For sendFileReceiverInitSuccessMsg: None (void), but sends UDP packet to specified destination\n- For closeSocket: None (void)",
    "Canonical_solution": "import android.util.Log;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UdpCommunicationHandler {\n    private DatagramSocket mDatagramSocket;\n\n    public void sendFileReceiverInitSuccessMsg(IpPortInfo ipPortInfo) throws Exception {\n        Log.i(\"UdpCommunicationHandler\", \"sendFileReceiverInitSuccessMsg------>>>start\");\n        mDatagramSocket = new DatagramSocket(ipPortInfo.getPort() + 1);\n        byte[] sendData = Constant.MSG_FILE_RECEIVER_INIT_SUCCESS.getBytes(BaseTransfer.UTF_8);\n        DatagramPacket sendPacket = new DatagramPacket(\n            sendData, \n            sendData.length, \n            ipPortInfo.getInetAddress(), \n            ipPortInfo.getPort()\n        );\n        mDatagramSocket.send(sendPacket);\n        Log.i(\"UdpCommunicationHandler\", \"Send Msg To FileSender######>>>\" + Constant.MSG_FILE_RECEIVER_INIT_SUCCESS);\n        Log.i(\"UdpCommunicationHandler\", \"sendFileReceiverInitSuccessMsg------>>>end\");\n    }\n\n    public void closeSocket() {\n        if (mDatagramSocket != null) {\n            mDatagramSocket.disconnect();\n            mDatagramSocket.close();\n            mDatagramSocket = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UdpCommunicationHandler {\n    private DatagramSocket mDatagramSocket;\n    private static final String MSG_FILE_RECEIVER_INIT_SUCCESS = \"MSG_FILE_RECEIVER_INIT_SUCCESS\";\n\n    public void sendFileReceiverInitSuccessMsg(IpPortInfo ipPortInfo) throws Exception {\n        try {\n            InetAddress targetIp = ipPortInfo.getIp();\n            int targetPort = ipPortInfo.getPort();\n            int localPort = targetPort + 1;\n            mDatagramSocket = new DatagramSocket(localPort);\n            byte[] data = MSG_FILE_RECEIVER_INIT_SUCCESS.getBytes();\n            DatagramPacket packet = new DatagramPacket(data, data.length, targetIp, targetPort);\n            mDatagramSocket.send(packet);\n        } catch (IOException e) {\n            throw new Exception(\"Failed to send UDP message\", e);\n        }\n    }\n\n    public void closeSocket() {\n        if (mDatagramSocket != null) {\n            mDatagramSocket.close();\n            mDatagramSocket = null;\n        }\n    }\n}"
  },
  {
    "Task_id": 613,
    "Instruction": "Task Description: Create a Java class that implements a UDP socket for SNMP communication, capable of sending and receiving datagram packets asynchronously while handling errors and resource cleanup properly.\n\nClass Description: The SnmpSocket class provides UDP socket functionality for SNMP communication, managing packet transmission and reception in a separate thread. It includes methods for sending packets, checking socket validity, and proper resource cleanup. The class implements Runnable to handle incoming packets asynchronously.\n\nAttributes:\n_socket: [DatagramSocket] - The UDP socket instance for communication\n_dgramHdlr: [SnmpResponseHandler] - Handler for processing received datagrams\n_sockThread: [Thread] - Thread for asynchronous packet reception\n_buffer: [byte[]] - Buffer for storing incoming packet data\nisClosing: [boolean] - Flag indicating if the socket is being closed\n_socketPort: [int] - Port number the socket is bound to\nresponseBufSize: [int] - Size of the response buffer\n\nMethods:\nConstructor: [SnmpSocket](SnmpResponseHandler rspHdlr, InetAddress addr, int bufferSize) -> [void] - Initializes the UDP socket and starts the receiver thread\nsendPacket: [sendPacket](byte[] buff, int length, InetAddress addr, int port) -> [void] - Sends a datagram packet with specified data to given address and port\nsendPacket: [sendPacket](DatagramPacket dgrmpkt) -> [void] - Sends a prepared datagram packet\nisValid: [isValid]() -> [boolean] - Checks if the socket is in a valid state\nclose: [close]() -> [void] - Closes the socket and cleans up resources\nrun: [run]() -> [void] - Main thread method for receiving packets (implements Runnable)\nfinalize: [finalize]() -> [void] - Ensures proper cleanup when object is garbage collected\nhandleJavaError: [handleJavaError](Throwable thr) -> [void] - Handles Java errors during operation\nhandleDatagram: [handleDatagram](DatagramPacket dgrmpkt) -> [void] - Processes received datagrams using the response handler",
    "Canonical_solution": "import java.net.InetAddress;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\nfinal class SnmpSocket implements java.lang.Runnable {\n\n    private DatagramSocket _socket = null;\n    private SnmpResponseHandler _dgramHdlr = null;\n    private Thread _sockThread = null;\n    private byte[] _buffer = null;\n    private transient boolean isClosing = false;\n\n    int _socketPort = 0;\n    int responseBufSize = 1024;\n\n    public SnmpSocket(SnmpResponseHandler rspHdlr, InetAddress addr, int bufferSize) throws SocketException {\n        _socket = new DatagramSocket(0, addr);\n        _socketPort = _socket.getLocalPort();\n        responseBufSize = bufferSize;\n        _buffer = new byte[responseBufSize];\n        _dgramHdlr = rspHdlr;\n        _sockThread = new Thread(this, \"SnmpSocket\");\n        _sockThread.start();\n    }\n\n    public synchronized void sendPacket(byte[] buff, int length, InetAddress addr, int port) throws IOException {\n        DatagramPacket dgrmpkt = new DatagramPacket(buff, length, addr, port);\n        sendPacket(dgrmpkt);\n    }\n\n    public synchronized void sendPacket(DatagramPacket dgrmpkt) throws IOException {\n        if (isValid()) {\n            _socket.send(dgrmpkt);\n        } else {\n            throw new IOException(\"Invalid state of SNMP datagram socket.\");\n        }\n    }\n\n    public synchronized boolean isValid() {\n        return _socket != null && _sockThread != null && _sockThread.isAlive();\n    }\n\n    public synchronized void close() {\n        isClosing = true;\n        if (_socket != null) {\n            _socket.close();\n            _socket = null;\n        }\n        if (_sockThread != null && _sockThread.isAlive()) {\n            _sockThread.interrupt();\n            try {\n                _sockThread.join();\n            } catch (InterruptedException e) {\n            }\n            _sockThread = null;\n        }\n    }\n\n    @Override\n    public void run() {\n        Thread.currentThread().setPriority(8);\n        while (true) {\n            try {\n                DatagramPacket dgrmpkt = new DatagramPacket(_buffer, _buffer.length);\n                _socket.receive(dgrmpkt);\n                if (isClosing)\n                    break;\n                if (dgrmpkt.getLength() <= 0)\n                    continue;\n                handleDatagram(dgrmpkt);\n                if (isClosing)\n                    break;\n            } catch (IOException io) {\n                if (isClosing) {\n                    break;\n                }\n            } catch (Exception e) {\n                if (isClosing) {\n                    break;\n                }\n            } catch (ThreadDeath d) {\n                close();\n                throw d;\n            } catch (Error err) {\n                handleJavaError(err);\n            }\n        }\n    }\n\n    @Override\n    protected synchronized void finalize() {\n        close();\n    }\n\n    private synchronized void handleJavaError(Throwable thr) {\n        if (thr instanceof OutOfMemoryError) {\n            Thread.yield();\n            return;\n        }\n        if (_socket != null) {\n            _socket.close();\n            _socket = null;\n        }\n        Thread.yield();\n    }\n\n    private synchronized void handleDatagram(DatagramPacket dgrmpkt) {\n        _dgramHdlr.processDatagram(dgrmpkt);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class SnmpSocket implements Runnable {\n    private DatagramSocket _socket;\n    private SnmpResponseHandler _dgramHdlr;\n    private Thread _sockThread;\n    private byte[] _buffer;\n    private boolean isClosing;\n    private int socketPort;\n    private int responseBufSize;\n\n    public SnmpSocket(SnmpResponseHandler rspHdlr, InetAddress addr, int bufferSize) {\n        this._dgramHdlr = rspHdlr;\n        this._buffer = new byte[bufferSize];\n        this.responseBufSize = bufferSize;\n        try {\n            this._socket = new DatagramSocket(0, addr);\n            this.socketPort = _socket.getLocalPort();\n        } catch (IOException e) {\n            handleJavaError(e);\n        }\n        this._sockThread = new Thread(this);\n        this._sockThread.start();\n    }\n\n    public void sendPacket(byte[] buff, int length, InetAddress addr, int port) {\n        if (!_socket.isClosed()) {\n            DatagramPacket packet = new DatagramPacket(buff, length, addr, port);\n            try {\n                _socket.send(packet);\n            } catch (IOException e) {\n                handleJavaError(e);\n            }\n        }\n    }\n\n    public void sendPacket(DatagramPacket dgrmpkt) {\n        if (!_socket.isClosed()) {\n            try {\n                _socket.send(dgrmpkt);\n            } catch (IOException e) {\n                handleJavaError(e);\n            }\n        }\n    }\n\n    public boolean isValid() {\n        return !_socket.isClosed() && !isClosing;\n    }\n\n    public void close() {\n        if (!isClosing) {\n            isClosing = true;\n            _socket.close();\n            _sockThread.interrupt();\n            try {\n                _sockThread.join();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                handleJavaError(e);\n            }\n            _socket = null;\n            _dgramHdlr = null;\n            _buffer = null;\n        }\n    }\n\n    @Override\n    public void run() {\n        while (!isClosing && !_socket.isClosed()) {\n            try {\n                DatagramPacket packet = new DatagramPacket(_buffer, _buffer.length);\n                _socket.receive(packet);\n                handleDatagram(packet);\n            } catch (IOException e) {\n                if (!isClosing) {\n                    handleJavaError(e);\n                }\n                break;\n            }\n        }\n    }\n\n    private void handleDatagram(DatagramPacket dgrmpkt) {\n        _dgramHdlr.handleResponse(dgrmpkt);\n    }\n\n    private void handleJavaError(Throwable thr) {\n        thr.printStackTrace();\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        try {\n            close();\n        } finally {\n            super.finalize();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 615,
    "Instruction": "Task Description: Implement a DNS UDP client class that can resolve DNS queries (A records and TXT records) by communicating with DNS servers over UDP.\n\nClass Description: The DnsUdpClient class provides functionality to send DNS queries to specified DNS servers and process the responses. It supports resolving domain names to IPv4 addresses (A records) and retrieving text records (TXT records).\n\nAttributes:\nDNS_SERVERS: InetSocketAddress[] - An array of predefined DNS server addresses with their respective ports\n\nMethods:\nresolveAOverUdp: resolveAOverUdp(InetSocketAddress dnsServer, byte[] query) -> List<Inet4Address> - Resolves a DNS A record query by sending it to the specified DNS server and returns a list of IPv4 addresses. Throws Exception if the operation fails.\n\ntoIps: toIps(byte[] buffer) -> List<Inet4Address> - Helper method that converts DNS response data into a list of IPv4 addresses by parsing A records.\n\nresolveTXTOverUdp: resolveTXTOverUdp(InetSocketAddress dnsServer, byte[] query) -> String - Resolves a DNS TXT record query by sending it to the specified DNS server and returns the text content. Throws Exception if the operation fails.\n\ntoTXT: toTXT(byte[] buffer) -> String - Helper method that extracts TXT record data from DNS response and returns it as a string. Throws RuntimeException if no TXT record is found.",
    "Canonical_solution": "import net.sf.ivmaidns.dns.DNSConnection;\nimport net.sf.ivmaidns.dns.DNSMsgHeader;\nimport net.sf.ivmaidns.dns.DNSName;\nimport net.sf.ivmaidns.dns.DNSRecord;\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.Inet4Address;\nimport java.net.InetSocketAddress;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DnsUdpClient {\n    private final static InetSocketAddress[] DNS_SERVERS = new InetSocketAddress[]{\n            new InetSocketAddress(\"8.8.8.8\", 53),\n            new InetSocketAddress(\"208.67.222.222\", 443),\n            new InetSocketAddress(\"208.67.220.220\", 443),\n            new InetSocketAddress(\"199.91.73.222\", 3389),\n            new InetSocketAddress(\"87.118.100.175\", 110),\n            new InetSocketAddress(\"87.118.85.241\", 110),\n            new InetSocketAddress(\"77.109.139.29\", 110),\n            new InetSocketAddress(\"77.109.138.45\", 110)\n    };\n\n    public List<Inet4Address> resolveAOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        DatagramSocket datagramSocket = new DatagramSocket();\n        datagramSocket.setSoTimeout(1000);\n        try {\n            datagramSocket.connect(dnsServer.getAddress(), dnsServer.getPort());\n            datagramSocket.send(new DatagramPacket(query, query.length));\n            DatagramPacket packet = new DatagramPacket(new byte[2048], 2048);\n            datagramSocket.receive(packet);\n            return toIps(packet.getData());\n        } finally {\n            datagramSocket.close();\n        }\n    }\n\n    private List<Inet4Address> toIps(byte[] buffer) {\n        DNSRecord[] records = DNSConnection.decode(buffer);\n        List<Inet4Address> ips = new ArrayList<Inet4Address>();\n        for (DNSRecord record : records) {\n            if (DNSRecord.A == record.getRType()) {\n                if (record.getRData().length > 0) {\n                    ips.add((Inet4Address) record.getRData()[0]);\n                }\n            }\n        }\n        return ips;\n    }\n\n    public String resolveTXTOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        DatagramSocket datagramSocket = new DatagramSocket();\n        datagramSocket.setSoTimeout(2000);\n        try {\n            datagramSocket.connect(dnsServer.getAddress(), dnsServer.getPort());\n            datagramSocket.send(new DatagramPacket(query, query.length));\n            DatagramPacket packet = new DatagramPacket(new byte[2048], 2048);\n            datagramSocket.receive(packet);\n            return toTXT(packet.getData());\n        } finally {\n            datagramSocket.close();\n        }\n    }\n\n    private String toTXT(byte[] buffer) {\n        DNSRecord[] records = DNSConnection.decode(buffer);\n        for (DNSRecord record : records) {\n            if (DNSRecord.TXT == record.getRType() && record.getRData().length > 0) {\n                return (String) record.getRData()[0];\n            }\n        }\n        throw new RuntimeException(\"not found\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "import java.net.*;\nimport java.util.*;\n\npublic class DnsUdpClient {\n    public static final InetSocketAddress[] DNS_SERVERS = {\n        new InetSocketAddress(\"8.8.8.8\", 53),\n        new InetSocketAddress(\"1.1.1.1\", 53)\n    };\n\n    public List<Inet4Address> resolveAOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        try (DatagramSocket socket = new DatagramSocket()) {\n            DatagramPacket sendPacket = new DatagramPacket(query, query.length, dnsServer.getAddress(), dnsServer.getPort());\n            socket.send(sendPacket);\n\n            byte[] buffer = new byte[512];\n            DatagramPacket receivePacket = new DatagramPacket(buffer, buffer.length);\n            socket.receive(receivePacket);\n\n            return toIps(buffer);\n        }\n    }\n\n    private List<Inet4Address> toIps(byte[] buffer) throws Exception {\n        List<Inet4Address> ips = new ArrayList<>();\n        int offset = 0;\n\n        int flags = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n        offset += 2;\n        int qdcount = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n        offset += 2;\n        int ancount = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n        offset += 2;\n        offset += 4;\n\n        if ((flags & 0x000F) != 0) {\n            throw new Exception(\"DNS error: \" + (flags & 0x000F));\n        }\n\n        for (int i = 0; i < qdcount; i++) {\n            offset = parseDomainName(buffer, offset);\n            offset += 4;\n        }\n\n        for (int i = 0; i < ancount; i++) {\n            offset = parseDomainName(buffer, offset);\n            int type = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n            offset += 2;\n            int clazz = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n            offset += 2;\n            int ttl = (buffer[offset] & 0xFF) << 24 | (buffer[offset + 1] & 0xFF) << 16 | (buffer[offset + 2] & 0xFF) << 8 | (buffer[offset + 3] & 0xFF);\n            offset += 4;\n            int dataLength = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n            offset += 2;\n\n            if (type == 1) {\n                byte[] ipBytes = new byte[4];\n                System.arraycopy(buffer, offset, ipBytes, 0, 4);\n                ips.add(Inet4Address.getByAddress(ipBytes));\n                offset += 4;\n            } else {\n                offset += dataLength;\n            }\n        }\n\n        return ips;\n    }\n\n    private int parseDomainName(byte[] buffer, int offset) {\n        int pos = offset;\n        while (true) {\n            int len = buffer[pos] & 0xFF;\n            if (len == 0) {\n                return pos + 1;\n            }\n            pos += len + 1;\n        }\n    }\n\n    public String resolveTXTOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        try (DatagramSocket socket = new DatagramSocket()) {\n            DatagramPacket sendPacket = new DatagramPacket(query, query.length, dnsServer.getAddress(), dnsServer.getPort());\n            socket.send(sendPacket);\n\n            byte[] buffer = new byte[512];\n            DatagramPacket receivePacket = new DatagramPacket(buffer, buffer.length);\n            socket.receive(receivePacket);\n\n            return toTXT(buffer);\n        }\n    }\n\n    private String toTXT(byte[] buffer) throws RuntimeException {\n        int offset = 0;\n\n        int flags = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n        offset += 2;\n        int qdcount = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n        offset += 2;\n        int ancount = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n        offset += 2;\n        offset += 4;\n\n        if ((flags & 0x000F) != 0) {\n            throw new RuntimeException(\"DNS error: \" + (flags & 0x000F));\n        }\n\n        for (int i = 0; i < qdcount; i++) {\n            offset = parseDomainName(buffer, offset);\n            offset += 4;\n        }\n\n        for (int i = 0; i < ancount; i++) {\n            offset = parseDomainName(buffer, offset);\n            int type = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n            offset += 2;\n            int clazz = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n            offset += 2;\n            int ttl = (buffer[offset] & 0xFF) << 24 | (buffer[offset + 1] & 0xFF) << 16 | (buffer[offset + 2] & 0xFF) << 8 | (buffer[offset + 3] & 0xFF);\n            offset += 4;\n            int dataLength = (buffer[offset] & 0xFF) << 8 | (buffer[offset + 1] & 0xFF);\n            offset += 2;\n\n            if (type == 16) {\n                StringBuilder txt = new StringBuilder();\n                int remaining = dataLength;\n                while (remaining > 0) {\n                    int len = buffer[offset] & 0xFF;\n                    txt.append(new String(buffer, offset + 1, len));\n                    offset += len + 1;\n                    remaining -= len + 1;\n                }\n                return txt.toString();\n            } else {\n                offset += dataLength;\n            }\n        }\n\n        throw new RuntimeException(\"No TXT record found\");\n    }\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a Java utility class for making HTTP POST requests with JSON payloads, handling both HTTP and HTTPS connections, including SSL certificate verification bypass for HTTPS, and processing JSON responses.\n\nClass Description: XxlJobRemotingUtil is a utility class designed to handle remote HTTP communication with JSON payloads, particularly for interacting with the XXL-JOB scheduler. It provides methods for making POST requests with proper headers, timeout settings, and access token authentication.\n\nAttributes:\n- logger: Logger - SLF4J logger for error and debug logging\n- XXL_JOB_ACCESS_TOKEN: String - Constant string for the access token header name\n- trustAllCerts: TrustManager[] - Array of trust managers that don't validate certificates\n\nMethods:\n- trustAllHosts(HttpsURLConnection connection) -> void - Configures the HTTPS connection to trust all hosts and certificates\n- postBody(String url, String accessToken, int timeout, Object requestObj, Class returnTargClassOfT) -> ReturnT - Makes an HTTP POST request with JSON payload and processes the JSON response\n\nMethod Details:\n1. trustAllHosts(HttpsURLConnection connection) -> void\n   - Input: HttpsURLConnection connection - The HTTPS connection to configure\n   - Description: Sets up SSL context to trust all certificates and hosts for the given HTTPS connection\n\n2. postBody(String url, String accessToken, int timeout, Object requestObj, Class returnTargClassOfT) -> ReturnT\n   - Input:\n     - url: String - The target URL for the POST request\n     - accessToken: String - Authentication token for the request\n     - timeout: int - Read timeout in seconds\n     - requestObj: Object - The object to be serialized as JSON request body\n     - returnTargClassOfT: Class - The class type for deserializing the response\n   - Output: ReturnT - A generic return type containing either the successful response or error information\n   - Description: \n     1. Creates and configures an HTTP/HTTPS connection\n     2. Sets request headers including content type and access token\n     3. Serializes the request object to JSON and sends it\n     4. Reads and deserializes the JSON response\n     5. Handles errors and connection cleanup",
    "Canonical_solution": "import com.xxl.job.core.biz.model.ReturnT;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.net.ssl.*;\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\n\npublic class XxlJobRemotingUtil {\n    private static Logger logger = LoggerFactory.getLogger(XxlJobRemotingUtil.class);\n    public static final String XXL_JOB_ACCESS_TOKEN = \"XXL-JOB-ACCESS-TOKEN\";\n\n    private static final TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {\n        public X509Certificate[] getAcceptedIssuers() {\n            return new X509Certificate[]{};\n        }\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n    }};\n\n    private static void trustAllHosts(HttpsURLConnection connection) {\n        try {\n            SSLContext sc = SSLContext.getInstance(\"TLS\");\n            sc.init(null, trustAllCerts, new java.security.SecureRandom());\n            SSLSocketFactory newFactory = sc.getSocketFactory();\n            connection.setSSLSocketFactory(newFactory);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        connection.setHostnameVerifier(new HostnameVerifier() {\n            public boolean verify(String hostname, SSLSession session) {\n                return true;\n            }\n        });\n    }\n\n    public static ReturnT postBody(String url, String accessToken, int timeout, Object requestObj, Class returnTargClassOfT) {\n        HttpURLConnection connection = null;\n        BufferedReader bufferedReader = null;\n        try {\n            URL realUrl = new URL(url);\n            connection = (HttpURLConnection) realUrl.openConnection();\n\n            boolean useHttps = url.startsWith(\"https\");\n            if (useHttps) {\n                HttpsURLConnection https = (HttpsURLConnection) connection;\n                trustAllHosts(https);\n            }\n\n            connection.setRequestMethod(\"POST\");\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.setUseCaches(false);\n            connection.setReadTimeout(timeout * 1000);\n            connection.setConnectTimeout(3 * 1000);\n            connection.setRequestProperty(\"connection\", \"Keep-Alive\");\n            connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n            connection.setRequestProperty(\"Accept-Charset\", \"application/json;charset=UTF-8\");\n\n            if(accessToken!=null && accessToken.trim().length()>0){\n                connection.setRequestProperty(XXL_JOB_ACCESS_TOKEN, accessToken);\n            }\n\n            connection.connect();\n\n            if (requestObj != null) {\n                String requestBody = GsonTool.toJson(requestObj);\n                DataOutputStream dataOutputStream = new DataOutputStream(connection.getOutputStream());\n                dataOutputStream.write(requestBody.getBytes(\"UTF-8\"));\n                dataOutputStream.flush();\n                dataOutputStream.close();\n            }\n\n            int statusCode = connection.getResponseCode();\n            if (statusCode != 200) {\n                return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting fail, StatusCode(\"+ statusCode +\") invalid. for url : \" + url);\n            }\n\n            bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n            StringBuilder result = new StringBuilder();\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                result.append(line);\n            }\n            String resultJson = result.toString();\n\n            try {\n                ReturnT returnT = GsonTool.fromJson(resultJson, ReturnT.class, returnTargClassOfT);\n                return returnT;\n            } catch (Exception e) {\n                logger.error(\"xxl-rpc remoting (url=\"+url+\") response content invalid(\"+ resultJson +\").\", e);\n                return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting (url=\"+url+\") response content invalid(\"+ resultJson +\").\");\n            }\n\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting error(\"+ e.getMessage() +\"), for url : \" + url);\n        } finally {\n            try {\n                if (bufferedReader != null) {\n                    bufferedReader.close();\n                }\n                if (connection != null) {\n                    connection.disconnect();\n                }\n            } catch (Exception e2) {\n                logger.error(e2.getMessage(), e2);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class XxlJobRemotingUtil {\n    private static final Logger logger = LoggerFactory.getLogger(XxlJobRemotingUtil.class);\n    public static final String XXL_JOB_ACCESS_TOKEN = \"X-XXL-JOB-ACCESS-TOKEN\";\n    private static final TrustManager[] trustAllCerts = new TrustManager[]{\n        new X509TrustManager() {\n            public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n                return new java.security.cert.X509Certificate[0];\n            }\n            public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n            }\n            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n            }\n        }\n    };\n\n    public static void trustAllHosts(HttpsURLConnection connection) {\n        try {\n            SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());\n            connection.setSSLSocketFactory(sslContext.getSocketFactory());\n            connection.setHostnameVerifier((hostname, session) -> true);\n        } catch (Exception e) {\n            logger.error(\"Error configuring trust all hosts\", e);\n        }\n    }\n\n    public static <T> T postBody(String url, String accessToken, int timeout, Object requestObj, Class<T> returnTargClassOfT) {\n        HttpURLConnection connection = null;\n        try {\n            URL uri = new URL(url);\n            if (uri.getProtocol().equals(\"https\")) {\n                connection = (HttpsURLConnection) uri.openConnection();\n                trustAllHosts((HttpsURLConnection) connection);\n            } else {\n                connection = (HttpURLConnection) uri.openConnection();\n            }\n            connection.setRequestMethod(\"POST\");\n            connection.setDoOutput(true);\n            connection.setConnectTimeout(timeout * 1000);\n            connection.setReadTimeout(timeout * 1000);\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\n            connection.setRequestProperty(XXL_JOB_ACCESS_TOKEN, accessToken);\n\n            ObjectMapper objectMapper = new ObjectMapper();\n            String jsonInputString = objectMapper.writeValueAsString(requestObj);\n            try (OutputStream os = connection.getOutputStream()) {\n                byte[] input = jsonInputString.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);\n            }\n\n            int responseCode = connection.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                try (BufferedReader br = new BufferedReader(\n                        new InputStreamReader(connection.getInputStream(), \"utf-8\"))) {\n                    StringBuilder response = new StringBuilder();\n                    String responseLine;\n                    while ((responseLine = br.readLine()) != null) {\n                        response.append(responseLine.trim());\n                    }\n                    return objectMapper.readValue(response.toString(), returnTargClassOfT);\n                }\n            } else {\n                logger.error(\"HTTP POST request failed with code: {}\", responseCode);\n                return null;\n            }\n        } catch (Exception e) {\n            logger.error(\"Error during HTTP POST request\", e);\n            return null;\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Create a utility class for making HTTP POST requests with configurable timeouts and form data submission capabilities.\n\nClass Description: TinyIdHttpUtils is a utility class that provides static methods for performing HTTP POST requests. It handles connection management, timeout configuration, form data encoding, and response reading. The class is designed to be thread-safe and includes proper resource cleanup.\n\nAttributes:\n- logger: Logger - Used for logging errors and warnings during HTTP operations\n\nMethods:\n- post(String url, Integer readTimeout, Integer connectTimeout) -> String - Makes a POST request to the specified URL with given timeout values\n- post(String url, Map<String,String> form, Integer readTimeout, Integer connectTimeout) -> String - Makes a POST request with form data to the specified URL with given timeout values",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class TinyIdHttpUtils {\n\n    private static final Logger logger = Logger.getLogger(TinyIdHttpUtils.class.getName());\n\n    private TinyIdHttpUtils() {\n    }\n\n    public static String post(String url, Integer readTimeout, Integer connectTimeout) {\n        return post(url, null, readTimeout, connectTimeout);\n    }\n\n    public static String post(String url, Map<String, String> form, Integer readTimeout, Integer connectTimeout) {\n        HttpURLConnection conn = null;\n        OutputStreamWriter os = null;\n        BufferedReader rd = null;\n        StringBuilder param = new StringBuilder();\n        StringBuilder sb = new StringBuilder();\n        String line = null;\n        String response = null;\n        if (form != null) {\n            for (Map.Entry<String, String> entry : form.entrySet()) {\n                String key = entry.getKey();\n                if (param.length() != 0) {\n                    param.append(\"&\");\n                }\n                param.append(key).append(\"=\").append(entry.getValue());\n            }\n        }\n        try {\n            conn = (HttpURLConnection) new URL(url).openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setDoOutput(true);\n            conn.setDoInput(true);\n            conn.setReadTimeout(readTimeout);\n            conn.setConnectTimeout(connectTimeout);\n            conn.setUseCaches(false);\n            conn.connect();\n            os = new OutputStreamWriter(conn.getOutputStream(), \"UTF-8\");\n            os.write(param.toString());\n            os.flush();\n            rd = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"UTF-8\"));\n            while ((line = rd.readLine()) != null) {\n                sb.append(line);\n            }\n            response = sb.toString();\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"error post url:\" + url + param, e);\n        } finally {\n            try {\n                if (os != null) {\n                    os.close();\n                }\n                if (rd != null) {\n                    rd.close();\n                }\n                if (conn != null) {\n                    conn.disconnect();\n                }\n            } catch (IOException e) {\n                logger.log(Level.WARNING, \"error close conn\", e);\n            }\n        }\n        return response;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class TinyIdHttpUtils {\n    private static final Logger logger = LoggerFactory.getLogger(TinyIdHttpUtils.class);\n\n    public static String post(String url, Integer readTimeout, Integer connectTimeout) {\n        try {\n            URL uri = new URL(url);\n            HttpURLConnection conn = (HttpURLConnection) uri.openConnection();\n            try {\n                conn.setRequestMethod(\"POST\");\n                if (connectTimeout != null) {\n                    conn.setConnectTimeout(connectTimeout);\n                }\n                if (readTimeout != null) {\n                    conn.setReadTimeout(readTimeout);\n                }\n                int responseCode = conn.getResponseCode();\n                if (responseCode == 200) {\n                    try (InputStream is = conn.getInputStream();\n                         BufferedReader in = new BufferedReader(new InputStreamReader(is))) {\n                        StringBuilder response = new StringBuilder();\n                        String inputLine;\n                        while ((inputLine = in.readLine()) != null) {\n                            response.append(inputLine);\n                        }\n                        return response.toString();\n                    }\n                } else {\n                    logger.warn(\"HTTP POST request returned code: {}\", responseCode);\n                    return null;\n                }\n            } finally {\n                conn.disconnect();\n            }\n        } catch (IOException e) {\n            logger.error(\"Error during HTTP POST\", e);\n            return null;\n        }\n    }\n\n    public static String post(String url, Map<String, String> form, Integer readTimeout, Integer connectTimeout) {\n        try {\n            URL uri = new URL(url);\n            HttpURLConnection conn = (HttpURLConnection) uri.openConnection();\n            try {\n                conn.setRequestMethod(\"POST\");\n                conn.setDoOutput(true);\n                if (connectTimeout != null) {\n                    conn.setConnectTimeout(connectTimeout);\n                }\n                if (readTimeout != null) {\n                    conn.setReadTimeout(readTimeout);\n                }\n                String formData = encodeForm(form);\n                try (OutputStream os = conn.getOutputStream()) {\n                    os.write(formData.getBytes(StandardCharsets.UTF_8));\n                }\n                int responseCode = conn.getResponseCode();\n                if (responseCode == 200) {\n                    try (InputStream is = conn.getInputStream();\n                         BufferedReader in = new BufferedReader(new InputStreamReader(is))) {\n                        StringBuilder response = new StringBuilder();\n                        String inputLine;\n                        while ((inputLine = in.readLine()) != null) {\n                            response.append(inputLine);\n                        }\n                        return response.toString();\n                    }\n                } else {\n                    logger.warn(\"HTTP POST with form data returned code: {}\", responseCode);\n                    return null;\n                }\n            } finally {\n                conn.disconnect();\n            }\n        } catch (IOException e) {\n            logger.error(\"Error during HTTP POST with form data\", e);\n            return null;\n        }\n    }\n\n    private static String encodeForm(Map<String, String> form) {\n        StringBuilder result = new StringBuilder();\n        boolean first = true;\n        for (Map.Entry<String, String> entry : form.entrySet()) {\n            if (first) {\n                first = false;\n            } else {\n                result.append(\"&\");\n            }\n            try {\n                result.append(URLEncoder.encode(entry.getKey(), \"UTF-8\"));\n                result.append(\"=\");\n                result.append(URLEncoder.encode(entry.getValue(), \"UTF-8\"));\n            } catch (IOException e) {\n                throw new RuntimeException(\"Encoding error\", e);\n            }\n        }\n        return result.toString();\n    }\n}"
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Create a Java utility class for making HTTP requests with support for both GET and POST methods, handling parameters, headers, and SSL configurations.\n\nClass Description: SimpleHttpUtils is a utility class that provides methods to perform HTTP requests (GET/POST) with configurable parameters, headers, timeouts, and SSL settings. It handles URL encoding, parameter serialization, and response processing.\n\nAttributes:\n- logger: Log - Logger instance for logging messages\n- DEFAULT_CHARSET: String - Default character encoding (utf-8)\n- HTTP_METHOD_POST: String - Constant for POST method\n- HTTP_METHOD_GET: String - Constant for GET method\n- HTTP_ERROR_MESSAGE: String - Key for error messages\n- DEFAULT_READ_TIMEOUT: int - Default read timeout in milliseconds\n- DEFAULT_CONNECT_TIMEOUT: int - Default connection timeout in milliseconds\n- HTTP_PREFIX: String - HTTP URL prefix\n- HTTPS_PREFIX: String - HTTPS URL prefix\n- MAX_FETCHSIZE: int - Maximum fetch size limit\n- trustAnyManagers: TrustManager[] - Array of trust managers for SSL\n\nMethods:\n- httpPost(String url, Map params) -> String - Makes an HTTP POST request to the specified URL with given parameters\n- httpGet(String url, Map params) -> String - Makes an HTTP GET request to the specified URL with given parameters\n- httpRequest(String url, Map<String,String> params, String method, String charSet, Map<String,String> headers) -> String - Makes an HTTP request with configurable method, charset and headers\n- httpRequest(SimpleHttpParam httpParam) -> SimpleHttpResult - Makes an HTTP request with comprehensive configuration options\n- mapToQueryString(Map parameters, String charSet) -> String - Converts a parameter map to a URL-encoded query string\n- urlEncode(String url, String charSet) -> String - URL-encodes a given string\n- setSSLSocketFactory(HttpURLConnection urlConn, boolean sslVerify, boolean hostnameVerify, TrustKeyStore trustKeyStore, ClientKeyStore clientKeyStore) -> void - Configures SSL settings for the connection\n- makeStringList(Object value) -> List<String> - Converts an input value to a list of strings\n\nNested Classes:\n- TrustAnyTrustManager: Implements X509TrustManager for custom SSL certificate handling\n- TrustAnyHostnameVerifier: Implements HostnameVerifier for custom hostname verification",
    "Canonical_solution": "import org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport javax.net.ssl.*;\nimport java.io.*;\nimport java.lang.reflect.Array;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.nio.charset.Charset;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.*;\nimport java.util.Map.Entry;\n\npublic class SimpleHttpUtils {\n    private static final Log logger = LogFactory.getLog(SimpleHttpUtils.class);\n    public static final String DEFAULT_CHARSET = \"utf-8\";\n    public static final String HTTP_METHOD_POST = \"POST\";\n    public static final String HTTP_METHOD_GET = \"GET\";\n    public static final String HTTP_ERROR_MESSAGE = \"http_error_message\";\n    public static final int DEFAULT_READ_TIMEOUT = 20000;\n    public static final int DEFAULT_CONNECT_TIMEOUT = 10000;\n    public static final String HTTP_PREFIX = \"http://\";\n    public static final String HTTPS_PREFIX = \"https://\";\n    public static final int MAX_FETCHSIZE = 5000;\n    private static TrustManager[] trustAnyManagers = new TrustManager[]{new TrustAnyTrustManager()};\n\n    static {\n        System.setProperty(\"sun.net.inetaddr.ttl\", \"3600\");\n    }\n\n    public static String httpPost(String url, Map params) {\n        return httpRequest(url, params, HTTP_METHOD_POST, DEFAULT_CHARSET, null);\n    }\n\n    public static String httpGet(String url, Map params) {\n        return httpRequest(url, params, HTTP_METHOD_GET, DEFAULT_CHARSET, null);\n    }\n\n    public static String httpRequest(String url, Map<String,String> params, String method,\n                                    String charSet, Map<String,String> headers) {\n        SimpleHttpParam param = new SimpleHttpParam(url);\n        if(null != param){\n            param.setParameters(params);\n        }\n        if(null != headers){\n            param.setHeaders(headers);\n        }\n        param.setCharSet(charSet);\n        param.setMethod(method);\n        SimpleHttpResult result = httpRequest(param);\n        if(result==null || !result.isSuccess()){\n            return null;\n        }else{\n            return result.getContent();\n        }\n    }\n\n    public static SimpleHttpResult httpRequest(SimpleHttpParam httpParam) {\n        String url = httpParam.getUrl();\n        Map<String,Object> parameters = httpParam.getParameters();\n        String sMethod = httpParam.getMethod();\n        String charSet = httpParam.getCharSet();\n        boolean sslVerify = httpParam.isSslVerify();\n        int maxResultSize = httpParam.getMaxResultSize();\n        Map<String,Object> headers = httpParam.getHeaders();\n        int readTimeout = httpParam.getReadTimeout();\n        int connectTimeout = httpParam.getConnectTimeout();\n        boolean ignoreContentIfUnsuccess = httpParam.isIgnoreContentIfUnsuccess();\n        boolean hostnameVerify = httpParam.isHostnameVerify();\n        TrustKeyStore trustKeyStore = httpParam.getTrustKeyStore();\n        ClientKeyStore clientKeyStore = httpParam.getClientKeyStore();\n        \n        if (url == null || url.trim().length() == 0) {\n            throw new IllegalArgumentException(\"invalid url : \" + url);\n        }\n        if(maxResultSize<=0){\n            throw new IllegalArgumentException(\"maxResultSize must be positive : \"+maxResultSize);\n        }\n        Charset.forName(charSet);\n        HttpURLConnection urlConn = null;\n        URL destURL = null;\n        \n        String baseUrl = url.trim();\n        if (!baseUrl.toLowerCase().startsWith(HTTPS_PREFIX) && !baseUrl.toLowerCase().startsWith(HTTP_PREFIX)) {\n            baseUrl = HTTP_PREFIX + baseUrl;\n        }\n\n        String method = null;\n        if (sMethod != null) {\n            method = sMethod.toUpperCase();\n        }\n        if (method == null\n                || !(method.equals(HTTP_METHOD_POST) || method\n                        .equals(HTTP_METHOD_GET))) {\n            throw new IllegalArgumentException(\"invalid http method : \"\n                    + method);\n        }\n        \n        int index = baseUrl.indexOf(\"?\");\n        if (index>0){\n            baseUrl = urlEncode(baseUrl, charSet);\n        }else if(index==0){\n            throw new IllegalArgumentException(\"invalid url : \" + url);\n        }\n        \n        String queryString = mapToQueryString(parameters, charSet);\n        String targetUrl = \"\";\n        if (method.equals(HTTP_METHOD_POST)) {\n            targetUrl = baseUrl;\n        } else {\n            if(index>0){\n                targetUrl = baseUrl +\"&\" + queryString;\n            }else{\n                targetUrl = baseUrl +\"?\" + queryString;\n            }\n        }\n        try {\n            destURL = new URL(targetUrl);\n            urlConn = (HttpURLConnection)destURL.openConnection();\n            \n            setSSLSocketFactory(urlConn, sslVerify, hostnameVerify, trustKeyStore, clientKeyStore);\n               \n            \n            boolean hasContentType = false;\n            boolean hasUserAgent = false;\n            for(String key : headers.keySet()){\n                if(\"Content-Type\".equalsIgnoreCase(key)){\n                    hasContentType = true;\n                }\n                if(\"user-agent\".equalsIgnoreCase(key)){\n                    hasUserAgent = true;\n                }\n            }\n            if(!hasContentType){\n                headers.put(\"Content-Type\", \"application/x-www-form-urlencoded; charset=\" + charSet);\n            }\n            if(!hasUserAgent){\n                headers.put(\"user-agent\", \"PlatSystem\");\n            }\n            \n            if(headers!=null && !headers.isEmpty()){\n                for(Entry<String, Object> entry : headers.entrySet()){\n                    String key = entry.getKey();\n                    Object value = entry.getValue();\n                    List<String> values = makeStringList(value);\n                    for(String v : values){\n                        urlConn.addRequestProperty(key, v);\n                    }\n                }\n            }\n            urlConn.setDoOutput(true);\n            urlConn.setDoInput(true);\n            urlConn.setAllowUserInteraction(false);\n            urlConn.setUseCaches(false);\n            urlConn.setRequestMethod(method);\n            urlConn.setConnectTimeout(connectTimeout);\n            urlConn.setReadTimeout(readTimeout);\n            \n            \n            \n            if (method.equals(HTTP_METHOD_POST)) {\n                String postData = queryString.length()==0?httpParam.getPostData():queryString;\n                if(postData!=null && postData.trim().length()>0){\n                    OutputStream os = urlConn.getOutputStream();\n                    OutputStreamWriter osw = new OutputStreamWriter(os, charSet);\n                    osw.write(postData);\n                    osw.flush();\n                    osw.close();\n                }\n            }\n\n            int responseCode = urlConn.getResponseCode();\n            Map<String, List<String>> responseHeaders = urlConn.getHeaderFields();\n            String contentType = urlConn.getContentType();\n                \n            SimpleHttpResult result = new SimpleHttpResult(responseCode);\n            result.setHeaders(responseHeaders);\n            result.setContentType(contentType);\n            \n            if(responseCode!=200 && ignoreContentIfUnsuccess){\n                return result;\n            }\n            \n            InputStream is = urlConn.getInputStream();\n            byte[] temp = new byte[1024];\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int readBytes = is.read(temp);\n            while(readBytes>0){\n                baos.write(temp, 0, readBytes);\n                readBytes =  is.read(temp);\n            }\n            String resultString = new String(baos.toByteArray(), charSet);\n            baos.close();\n            result.setContent(resultString);\n            return result;\n        } catch (Exception e) {\n            logger.warn(\"connection error : \" + e.getMessage());\n            return new SimpleHttpResult(e);\n        } finally {\n            if (urlConn != null) {\n                urlConn.disconnect();\n            }\n        }\n    }\n\n    private static class TrustAnyTrustManager implements X509TrustManager {\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n    \n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n    \n        public X509Certificate[] getAcceptedIssuers() {\n            return new X509Certificate[]{};\n        }\n    }\n    \n    private static class TrustAnyHostnameVerifier implements HostnameVerifier {\n        public boolean verify(String hostname, SSLSession session) {\n            return true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\npublic class SimpleHttpUtils {\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(SimpleHttpUtils.class);\n    public static final String DEFAULT_CHARSET = \"utf-8\";\n    public static final String HTTP_METHOD_POST = \"POST\";\n    public static final String HTTP_METHOD_GET = \"GET\";\n    public static final String HTTP_ERROR_MESSAGE = \"error\";\n    public static final int DEFAULT_READ_TIMEOUT = 10000;\n    public static final int DEFAULT_CONNECT_TIMEOUT = 10000;\n    public static final String HTTP_PREFIX = \"http://\";\n    public static final String HTTPS_PREFIX = \"https://\";\n    public static final int MAX_FETCHSIZE = 8192;\n    public static final TrustManager[] trustAnyManagers = new TrustManager[]{new TrustAnyTrustManager()};\n\n    public static String httpPost(String url, Map<String, String> params) throws IOException {\n        return httpRequest(url, params, HTTP_METHOD_POST, DEFAULT_CHARSET, new HashMap<>());\n    }\n\n    public static String httpGet(String url, Map<String, String> params) throws IOException {\n        return httpRequest(url, params, HTTP_METHOD_GET, DEFAULT_CHARSET, new HashMap<>());\n    }\n\n    public static String httpRequest(String url, Map<String, String> params, String method, String charSet, Map<String, String> headers) throws IOException {\n        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n        conn.setRequestMethod(method);\n        conn.setConnectTimeout(DEFAULT_CONNECT_TIMEOUT);\n        conn.setReadTimeout(DEFAULT_READ_TIMEOUT);\n        conn.setUseCaches(false);\n        conn.setDoInput(true);\n        if (method.equals(HTTP_METHOD_POST)) {\n            conn.setDoOutput(true);\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded; charset=\" + charSet);\n        }\n        for (Map.Entry<String, String> entry : headers.entrySet()) {\n            conn.setRequestProperty(entry.getKey(), entry.getValue());\n        }\n        if (method.equals(HTTP_METHOD_POST) && params != null && !params.isEmpty()) {\n            String query = mapToQueryString(params, charSet);\n            try (OutputStream os = conn.getOutputStream()) {\n                os.write(query.getBytes(charSet));\n                os.flush();\n            }\n        }\n        int responseCode = conn.getResponseCode();\n        StringBuilder response = new StringBuilder();\n        try (InputStream is = responseCode == 200 ? conn.getInputStream() : conn.getErrorStream();\n             BufferedReader reader = new BufferedReader(new InputStreamReader(is, charSet))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.append(line);\n            }\n        }\n        conn.disconnect();\n        return response.toString();\n    }\n\n    public static SimpleHttpResult httpRequest(SimpleHttpParam httpParam) {\n        try {\n            HttpURLConnection conn = (HttpURLConnection) new URL(httpParam.getUrl()).openConnection();\n            conn.setRequestMethod(httpParam.getMethod());\n            conn.setConnectTimeout(httpParam.getConnectTimeout() > 0 ? httpParam.getConnectTimeout() : DEFAULT_CONNECT_TIMEOUT);\n            conn.setReadTimeout(httpParam.getReadTimeout() > 0 ? httpParam.getReadTimeout() : DEFAULT_READ_TIMEOUT);\n            conn.setUseCaches(false);\n            conn.setDoInput(true);\n            if (httpParam.getMethod().equals(HTTP_METHOD_POST)) {\n                conn.setDoOutput(true);\n                conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded; charset=\" + httpParam.getCharSet());\n            }\n            for (Map.Entry<String, String> entry : httpParam.getHeaders().entrySet()) {\n                conn.setRequestProperty(entry.getKey(), entry.getValue());\n            }\n            if (httpParam.getMethod().equals(HTTP_METHOD_POST) && httpParam.getParams() != null && !httpParam.getParams().isEmpty()) {\n                String query = mapToQueryString(httpParam.getParams(), httpParam.getCharSet());\n                try (OutputStream os = conn.getOutputStream()) {\n                    os.write(query.getBytes(httpParam.getCharSet()));\n                    os.flush();\n                }\n            }\n            if (httpParam.isHttps() && httpParam.isSslVerify()) {\n                setSSLSocketFactory(conn, httpParam.isSslVerify(), httpParam.isHostnameVerify(), httpParam.getTrustKeyStore(), httpParam.getClientKeyStore());\n            }\n            int responseCode = conn.getResponseCode();\n            StringBuilder response = new StringBuilder();\n            try (InputStream is = responseCode == 200 ? conn.getInputStream() : conn.getErrorStream();\n                 BufferedReader reader = new BufferedReader(new InputStreamReader(is, httpParam.getCharSet()))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    response.append(line);\n                }\n            }\n            conn.disconnect();\n            return new SimpleHttpResult(responseCode, response.toString());\n        } catch (Exception e) {\n            logger.error(\"HTTP request failed\", e);\n            return new SimpleHttpResult(500, \"Request failed: \" + e.getMessage());\n        }\n    }\n\n    public static String mapToQueryString(Map<String, String> parameters, String charSet) throws IOException {\n        StringBuilder query = new StringBuilder();\n        for (Map.Entry<String, String> entry : parameters.entrySet()) {\n            if (query.length() > 0) {\n                query.append(\"&\");\n            }\n            query.append(URLEncoder.encode(entry.getKey(), charSet)).append(\"=\").append(URLEncoder.encode(entry.getValue(), charSet));\n        }\n        return query.toString();\n    }\n\n    public static String urlEncode(String url, String charSet) throws IOException {\n        return URLEncoder.encode(url, charSet);\n    }\n\n    public static void setSSLSocketFactory(HttpURLConnection urlConn, boolean sslVerify, boolean hostnameVerify, TrustKeyStore trustKeyStore, ClientKeyStore clientKeyStore) {\n        if (urlConn instanceof HttpsURLConnection) {\n            try {\n                SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n                TrustManager[] trustManagers = sslVerify ? new TrustManager[]{trustKeyStore.getTrustManager()} : trustAnyManagers;\n                sslContext.init(null, trustManagers, new SecureRandom());\n                ((HttpsURLConnection) urlConn).setSSLSocketFactory(sslContext.getSocketFactory());\n                if (!hostnameVerify) {\n                    ((HttpsURLConnection) urlConn).setHostnameVerifier(new TrustAnyHostnameVerifier());\n                }\n            } catch (NoSuchAlgorithmException | KeyManagementException e) {\n                logger.warn(\"Failed to configure SSL socket factory\", e);\n            }\n        }\n    }\n\n    public static List<String> makeStringList(Object value) {\n        List<String> list = new ArrayList<>();\n        if (value == null) {\n            return list;\n        }\n        if (value instanceof String) {\n            list.add((String) value);\n        } else if (value instanceof Collection) {\n            for (Object obj : (Collection<?>) value) {\n                if (obj != null) {\n                    list.add(obj.toString());\n                }\n            }\n        } else {\n            list.add(value.toString());\n        }\n        return list;\n    }\n\n    static class TrustAnyTrustManager implements X509TrustManager {\n        public void checkClientTrusted(X509Certificate[] chain, String authType) {\n        }\n\n        public void checkServerTrusted(X509Certificate[] chain, String authType) {\n        }\n\n        public X509Certificate[] getAcceptedIssuers() {\n            return new X509Certificate[0];\n        }\n    }\n\n    static class TrustAnyHostnameVerifier implements HostnameVerifier {\n        public boolean verify(String hostname, SSLSession session) {\n            return true;\n        }\n    }\n\n    public static class SimpleHttpResult {\n        private final int statusCode;\n        private final String content;\n\n        public SimpleHttpResult(int statusCode, String content) {\n            this.statusCode = statusCode;\n            this.content = content;\n        }\n\n        public int getStatusCode() {\n            return statusCode;\n        }\n\n        public String getContent() {\n            return content;\n        }\n    }\n\n    public static class SimpleHttpParam {\n        private String url;\n        private String method = HTTP_METHOD_GET;\n        private int connectTimeout = DEFAULT_CONNECT_TIMEOUT;\n        private int readTimeout = DEFAULT_READ_TIMEOUT;\n        private String charSet = DEFAULT_CHARSET;\n        private Map<String, String> params = new HashMap<>();\n        private Map<String, String> headers = new HashMap<>();\n        private boolean https = false;\n        private boolean sslVerify = true;\n        private boolean hostnameVerify = true;\n        private TrustKeyStore trustKeyStore;\n        private ClientKeyStore clientKeyStore;\n\n        public String getUrl() {\n            return url;\n        }\n\n        public void setUrl(String url) {\n            this.url = url;\n        }\n\n        public String getMethod() {\n            return method;\n        }\n\n        public void setMethod(String method) {\n            this.method = method;\n        }\n\n        public int getConnectTimeout() {\n            return connectTimeout;\n        }\n\n        public void setConnectTimeout(int connectTimeout) {\n            this.connectTimeout = connectTimeout;\n        }\n\n        public int getReadTimeout() {\n            return readTimeout;\n        }\n\n        public void setReadTimeout(int readTimeout) {\n            this.readTimeout = readTimeout;\n        }\n\n        public String getCharSet() {\n            return charSet;\n        }\n\n        public void setCharSet(String charSet) {\n            this.charSet = charSet;\n        }\n\n        public Map<String, String> getParams() {\n            return params;\n        }\n\n        public void setParams(Map<String, String> params) {\n            this.params = params;\n        }\n\n        public Map<String, String> getHeaders() {\n            return headers;\n        }\n\n        public void setHeaders(Map<String, String> headers) {\n            this.headers = headers;\n        }\n\n        public boolean isHttps() {\n            return https;\n        }\n\n        public void setHttps(boolean https) {\n            this.https = https;\n        }\n\n        public boolean isSslVerify() {\n            return sslVerify;\n        }\n\n        public void setSslVerify(boolean sslVerify) {\n            this.sslVerify = sslVerify;\n        }\n\n        public boolean isHostnameVerify() {\n            return hostnameVerify;\n        }\n\n        public void setHostnameVerify(boolean hostnameVerify) {\n            this.hostnameVerify = hostnameVerify;\n        }\n\n        public TrustKeyStore getTrustKeyStore() {\n            return trustKeyStore;\n        }\n\n        public void setTrustKeyStore(TrustKeyStore trustKeyStore) {\n            this.trustKeyStore = trustKeyStore;\n        }\n\n        public ClientKeyStore getClientKeyStore() {\n            return clientKeyStore;\n        }\n\n        public void setClientKeyStore(ClientKeyStore clientKeyStore) {\n            this.clientKeyStore = clientKeyStore;\n        }\n    }\n\n    public static class TrustKeyStore {\n        public X509TrustManager getTrustManager() {\n            return new TrustAnyTrustManager();\n        }\n    }\n\n    public static class ClientKeyStore {\n    }\n}\n```"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a Kafka topic using the AdminClient API in Java, specifying topic configuration such as name, partitions, replication factor, and retention time.\n\nFunction Description: This function creates a new Kafka topic with the specified configuration using the Kafka AdminClient. It handles the creation process, including setting up the AdminClient, defining the topic properties, and executing the topic creation while managing exceptions and resource cleanup.\n\nInput:\n- kafkaClientInfo: [KafkaClientInfo] - Contains connection and configuration details for the Kafka broker\n- newTopicInfo: [NewTopicInfo] - Contains the topic configuration including name, partitions, replication factor, and retention time in milliseconds\n\nOutput:\n- [boolean] - Returns true if the topic was successfully created, false if an error occurred",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.common.config.TopicConfig;\n\nprivate final KafkaStoragePlugin plugin;\n\npublic boolean createTopicName(KafkaClientInfo kafkaClientInfo, NewTopicInfo newTopicInfo) {\n    boolean status = false;\n    AdminClient adminClient = null;\n    try {\n        adminClient = AdminClient.create(plugin.getKafkaAdminClientProps(kafkaClientInfo));\n        NewTopic newTopic = new NewTopic(newTopicInfo.getTopicName(), newTopicInfo.getPartitions(), newTopicInfo.getReplication());\n        newTopic.configs(Collections.singletonMap(TopicConfig.RETENTION_MS_CONFIG, String.valueOf(newTopicInfo.getRetainMs())));\n        adminClient.createTopics(Collections.singleton(newTopic)).all().get();\n        status = true;\n    } catch (Exception e) {\n        status = false;\n        log.error(\"Create kafka topic has error, new topic [{}], msg is {}\", newTopicInfo, e);\n    } finally {\n        adminClient.close();\n    }\n    return status;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 34,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.clients.admin.CreateTopicsResult;\nimport org.apache.kafka.common.config.TopicConfig;\nimport java.util.Collections;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutionException;\n\npublic class KafkaTopicCreator {\n    public boolean createKafkaTopic(KafkaClientInfo kafkaClientInfo, NewTopicInfo newTopicInfo) {\n        Properties props = new Properties();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaClientInfo.getBootstrapServers());\n        AdminClient adminClient = AdminClient.create(props);\n        try {\n            NewTopic newTopic = new NewTopic(newTopicInfo.getName(), newTopicInfo.getPartitions(), newTopicInfo.getReplicationFactor())\n                .configs(Collections.singletonMap(TopicConfig.RETENTION_MS_CONFIG, String.valueOf(newTopicInfo.getRetentionTime())));\n            CreateTopicsResult result = adminClient.createTopics(Collections.singletonList(newTopic));\n            result.all().get();\n            return true;\n        } catch (Exception e) {\n            return false;\n        } finally {\n            adminClient.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 74,
    "Instruction": "Task Description: Create a Java utility class for handling HTTPS network requests, including downloading content as strings or files.\n\nClass Description: NetworkUtils is a utility class that provides methods for making HTTPS requests and downloading content either as strings or files. It handles connection setup, timeout configuration, and proper resource cleanup.\n\nAttributes:\nDEBUG: [boolean] - Flag to enable debug logging\nTAG: [String] - Tag used for logging\nHTTP_READ_TIMEOUT: [int] - Timeout for reading from connection (in milliseconds)\nHTTP_CONNECTION_TIMEOUT: [int] - Timeout for establishing connection (in milliseconds)\n\nMethods:\nsetupHttpsRequest: [String urlStr] -> [HttpsURLConnection] - Sets up an HTTPS connection with the specified URL, configures timeouts and request method, and establishes the connection. Returns the connection object if successful.\ndownloadUrlMemoryAsString: [String url] -> [String] - Downloads content from the specified URL and returns it as a UTF-8 encoded string. Returns null if the download fails.\ndownloadUrlFile: [String url, File f] -> [boolean] - Downloads content from the specified URL and saves it to the specified file. Returns true if successful, false otherwise.\nDownloadCallback: [interface] - Interface defining a callback for asynchronous download completion with onDownloadComplete method.",
    "Canonical_solution": "import android.util.Log;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport javax.net.ssl.HttpsURLConnection;\n\npublic class NetworkUtils {\n\n    private static final boolean DEBUG = false;\n    private static final String TAG = \"NetworkUtils\";\n    private static final int HTTP_READ_TIMEOUT = 60000;\n    private static final int HTTP_CONNECTION_TIMEOUT = 60000;\n\n    public static HttpsURLConnection setupHttpsRequest(String urlStr) {\n        URL url;\n        HttpsURLConnection urlConnection = null;\n        try {\n            url = new URL(urlStr);\n            urlConnection = (HttpsURLConnection) url.openConnection();\n            urlConnection.setConnectTimeout(HTTP_CONNECTION_TIMEOUT);\n            urlConnection.setReadTimeout(HTTP_READ_TIMEOUT);\n            urlConnection.setRequestMethod(\"GET\");\n            urlConnection.setDoInput(true);\n            urlConnection.connect();\n            int code = urlConnection.getResponseCode();\n            if (code != HttpsURLConnection.HTTP_OK) {\n                Log.d(TAG, \"response:\" + code);\n                return null;\n            }\n            return urlConnection;\n        } catch (Exception e) {\n            Log.e(TAG, \"Failed to connect to server\", e);\n            return null;\n        }\n    }\n\n    public static String downloadUrlMemoryAsString(String url) {\n        if (DEBUG) Log.d(TAG, \"download: \" + url);\n\n        HttpsURLConnection urlConnection = null;\n        try {\n            urlConnection = setupHttpsRequest(url);\n            if (urlConnection == null) {\n                return null;\n            }\n\n            InputStream is = urlConnection.getInputStream();\n            ByteArrayOutputStream byteArray = new ByteArrayOutputStream();\n            int byteInt;\n\n            while ((byteInt = is.read()) >= 0) {\n                byteArray.write(byteInt);\n            }\n\n            byte[] bytes = byteArray.toByteArray();\n            if (bytes == null) {\n                return null;\n            }\n\n            return new String(bytes, StandardCharsets.UTF_8);\n        } catch (Exception e) {\n            Log.e(TAG, \"\", e);\n            return null;\n        } finally {\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n        }\n    }\n\n    public static boolean downloadUrlFile(String url, File f) {\n        if (DEBUG) Log.d(TAG, \"download:\" + url);\n\n        HttpsURLConnection urlConnection = null;\n\n        if (f.exists())\n            f.delete();\n\n        try {\n            urlConnection = setupHttpsRequest(url);\n            if (urlConnection == null) {\n                return false;\n            }\n            long len = urlConnection.getContentLength();\n            if ((len > 0) && (len < 4L * 1024L * 1024L * 1024L)) {\n                byte[] buffer = new byte[262144];\n\n                InputStream is = urlConnection.getInputStream();\n                FileOutputStream os = new FileOutputStream(f, false);\n                try {\n                    int r;\n                    while ((r = is.read(buffer)) > 0) {\n                        os.write(buffer, 0, r);\n                    }\n                } finally {\n                    os.close();\n                }\n\n                return true;\n            }\n            return false;\n        } catch (Exception e) {\n            Log.e(TAG, \"\", e);\n            return false;\n        } finally {\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n        }\n    }\n\n    public interface DownloadCallback {\n        void onDownloadComplete(String result);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "import java.io.*;\nimport java.net.*;\nimport javax.net.ssl.*;\n\npublic class NetworkUtils {\n    private static final boolean DEBUG = true;\n    private static final String TAG = \"NetworkUtils\";\n    private static final int HTTP_READ_TIMEOUT = 10000;\n    private static final int HTTP_CONNECTION_TIMEOUT = 5000;\n\n    public static HttpsURLConnection setupHttpsRequest(String urlStr) throws IOException {\n        URL url = new URL(urlStr);\n        HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();\n        conn.setRequestMethod(\"GET\");\n        conn.setConnectTimeout(HTTP_CONNECTION_TIMEOUT);\n        conn.setReadTimeout(HTTP_READ_TIMEOUT);\n        conn.setDoInput(true);\n        conn.connect();\n        return conn;\n    }\n\n    public static String downloadUrlMemoryAsString(String url) {\n        HttpsURLConnection conn = null;\n        try {\n            conn = setupHttpsRequest(url);\n            int responseCode = conn.getResponseCode();\n            if (responseCode == HttpsURLConnection.HTTP_OK) {\n                try (InputStream is = conn.getInputStream();\n                     BufferedReader reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"))) {\n                    StringBuilder sb = new StringBuilder();\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        sb.append(line);\n                    }\n                    return sb.toString();\n                }\n            } else {\n                if (DEBUG) {\n                    System.out.println(TAG + \" Download failed with code: \" + responseCode);\n                }\n                return null;\n            }\n        } catch (IOException e) {\n            if (DEBUG) {\n                e.printStackTrace();\n            }\n            return null;\n        } finally {\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n    }\n\n    public static boolean downloadUrlFile(String url, File f) {\n        HttpsURLConnection conn = null;\n        try {\n            conn = setupHttpsRequest(url);\n            int responseCode = conn.getResponseCode();\n            if (responseCode == HttpsURLConnection.HTTP_OK) {\n                try (InputStream is = conn.getInputStream();\n                     FileOutputStream fos = new FileOutputStream(f)) {\n                    byte[] buffer = new byte[4096];\n                    int bytesRead;\n                    while ((bytesRead = is.read(buffer)) != -1) {\n                        fos.write(buffer, 0, bytesRead);\n                    }\n                    return true;\n                }\n            } else {\n                if (DEBUG) {\n                    System.out.println(TAG + \" Download failed with code: \" + responseCode);\n                }\n                return false;\n            }\n        } catch (IOException e) {\n            if (DEBUG) {\n                e.printStackTrace();\n            }\n            return false;\n        } finally {\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n    }\n\n    public interface DownloadCallback {\n        void onDownloadComplete(String result, String error);\n    }\n}"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a Kafka topic using Java's AdminClient API with configurable properties, partitions, and replication factor.\n\nClass Description: The KafkaTopicCreator class provides functionality to create Kafka topics programmatically. It encapsulates the AdminClient configuration and topic creation logic, handling the connection lifecycle and operation timeout.\n\nAttributes:\n- adminClientProperties: Map<String, Object> - Configuration properties for the AdminClient, initialized from KafkaProperties\n- operationTimeout: int - Timeout duration in seconds for Kafka operations (default: 30)\n\nMethods:\n- createTopic(String topicName, int partitions, short replicationFactor) -> void - Creates a new Kafka topic with the specified name, partition count, and replication factor. Throws Exception if operation fails or times out.\n- getAdminClientProperties() -> Map<String, Object> - Returns an unmodifiable view of the AdminClient configuration properties\n\nConstructor:\n- KafkaTopicCreator(KafkaProperties kafkaProperties) - Initializes the class with Kafka configuration properties",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.CreateTopicsResult;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.common.KafkaFuture;\nimport org.springframework.boot.autoconfigure.kafka.KafkaProperties;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\npublic class KafkaTopicCreator {\n\n    private final Map<String, Object> adminClientProperties;\n    private final int operationTimeout = 30;\n\n    public KafkaTopicCreator(KafkaProperties kafkaProperties) {\n        this.adminClientProperties = kafkaProperties.buildAdminProperties(null);\n    }\n\n    public void createTopic(String topicName, int partitions, short replicationFactor) throws Exception {\n        try (AdminClient adminClient = AdminClient.create(this.adminClientProperties)) {\n            NewTopic newTopic = new NewTopic(topicName, partitions, replicationFactor);\n            CreateTopicsResult createTopicsResult = adminClient.createTopics(Collections.singletonList(newTopic));\n            KafkaFuture<Void> future = createTopicsResult.all();\n            future.get(this.operationTimeout, TimeUnit.SECONDS);\n        }\n    }\n\n    public Map<String, Object> getAdminClientProperties() {\n        return Collections.unmodifiableMap(this.adminClientProperties);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 34,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.CreateTopicsResult;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\nimport java.util.HashMap;\nimport java.util.Collections;\n\npublic class KafkaTopicCreator {\n    private final Map<String, Object> adminClientProperties;\n    private final int operationTimeout;\n\n    public KafkaTopicCreator(KafkaProperties kafkaProperties) {\n        this.adminClientProperties = new HashMap<>(kafkaProperties.getProperties());\n        this.operationTimeout = 30;\n    }\n\n    public void createTopic(String topicName, int partitions, short replicationFactor) throws Exception {\n        try (AdminClient adminClient = AdminClient.create(adminClientProperties)) {\n            NewTopic newTopic = new NewTopic(topicName, partitions, replicationFactor);\n            CreateTopicsResult result = adminClient.createTopics(Collections.singletonList(newTopic));\n            result.values().get(topicName).get(operationTimeout, TimeUnit.SECONDS);\n        } catch (Exception e) {\n            throw new Exception(\"Failed to create topic \" + topicName, e);\n        }\n    }\n\n    public Map<String, Object> getAdminClientProperties() {\n        return Collections.unmodifiableMap(adminClientProperties);\n    }\n}\n```"
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Create a Java utility class for making HTTP requests and handling responses, including JSON parsing and connection management.\n\nClass Description: HttpRequester is a utility class that provides methods for creating HTTP connections, sending requests, and processing responses. It supports handling both successful responses and error streams, with specialized methods for parsing JSON responses. The class manages connection lifecycle and resource cleanup.\n\nAttributes: (None - this is a purely static utility class)\n\nMethods:\n\nMethod1: getConnectionFromRoute(String apiUrl, Route route, String... params) -> HttpURLConnection - Creates an HTTP connection from a route template and parameters. Sets up the connection with proper headers and request method.\n\nMethod2: getConnectionFromCompiledRoute(String apiUrl, Route.CompiledRoute route) -> HttpURLConnection - Creates an HTTP connection from a pre-compiled route. Configures the connection with headers and request method.\n\nMethod3: parseInputStreamAndClose(InputStream inputStream) -> String - Internal method that reads an input stream into a string and closes the stream.\n\nMethod4: parseString(HttpURLConnection connection) -> String - Reads the successful response from a connection into a string.\n\nMethod5: parseStringAndDisconnect(HttpURLConnection connection) -> String - Reads the response into a string and disconnects the connection.\n\nMethod6: parseErrorString(HttpURLConnection connection) -> String - Reads the error stream from a connection into a string.\n\nMethod7: parseErrorStringAndDisconnect(HttpURLConnection connection) -> String - Reads the error stream into a string and disconnects the connection.\n\nMethod8: parseJSONObject(HttpURLConnection connection) -> JSONObject - Parses the response as a JSON object.\n\nMethod9: parseJSONObjectAndDisconnect(HttpURLConnection connection) -> JSONObject - Parses the response as a JSON object and disconnects the connection.\n\nMethod10: parseJSONArray(HttpURLConnection connection) -> JSONArray - Parses the response as a JSON array.\n\nMethod11: parseJSONArrayAndDisconnect(HttpURLConnection connection) -> JSONArray - Parses the response as a JSON array and disconnects the connection.",
    "Canonical_solution": "import org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpRequester {\n\n    public static HttpURLConnection getConnectionFromRoute(String apiUrl, Route route, String... params) throws IOException {\n        return getConnectionFromCompiledRoute(apiUrl, route.compile(params));\n    }\n\n    public static HttpURLConnection getConnectionFromCompiledRoute(String apiUrl, Route.CompiledRoute route) throws IOException {\n        String url = apiUrl + route.getCompiledRoute();\n        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();\n        connection.setFixedLengthStreamingMode(0);\n        connection.setRequestMethod(route.getMethod().name());\n        String agentString = System.getProperty(\"http.agent\")\n                + \"; ReVanced/\" + Utils.getAppVersionName()\n                + \" (\" + Utils.getPatchesReleaseVersion() + \")\";\n        connection.setRequestProperty(\"User-Agent\", agentString);\n        return connection;\n    }\n\n    private static String parseInputStreamAndClose(InputStream inputStream) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n            StringBuilder jsonBuilder = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                jsonBuilder.append(line);\n                jsonBuilder.append('\\n');\n            }\n            return jsonBuilder.toString();\n        }\n    }\n\n    public static String parseString(HttpURLConnection connection) throws IOException {\n        return parseInputStreamAndClose(connection.getInputStream());\n    }\n\n    public static String parseStringAndDisconnect(HttpURLConnection connection) throws IOException {\n        String result = parseString(connection);\n        connection.disconnect();\n        return result;\n    }\n\n    public static String parseErrorString(HttpURLConnection connection) throws IOException {\n        InputStream errorStream = connection.getErrorStream();\n        if (errorStream == null) {\n            return \"\";\n        }\n        return parseInputStreamAndClose(errorStream);\n    }\n\n    public static String parseErrorStringAndDisconnect(HttpURLConnection connection) throws IOException {\n        String result = parseErrorString(connection);\n        connection.disconnect();\n        return result;\n    }\n\n    public static JSONObject parseJSONObject(HttpURLConnection connection) throws JSONException, IOException {\n        return new JSONObject(parseString(connection));\n    }\n\n    public static JSONObject parseJSONObjectAndDisconnect(HttpURLConnection connection) throws JSONException, IOException {\n        JSONObject object = parseJSONObject(connection);\n        connection.disconnect();\n        return object;\n    }\n\n    public static JSONArray parseJSONArray(HttpURLConnection connection) throws JSONException, IOException {\n        return new JSONArray(parseString(connection));\n    }\n\n    public static JSONArray parseJSONArrayAndDisconnect(HttpURLConnection connection) throws JSONException, IOException {\n        JSONArray array = parseJSONArray(connection);\n        connection.disconnect();\n        return array;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\npublic class HttpRequester {\n    public static HttpURLConnection getConnectionFromRoute(String apiUrl, Route route, String... params) throws IOException {\n        String routePath = route.getPath();\n        for (int i = 0; i < params.length; i++) {\n            routePath = routePath.replace(\"{\" + i + \"}\", params[i]);\n        }\n        String fullUrl = apiUrl + routePath;\n        URL url = new URL(fullUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(route.getRequestMethod());\n        connection.setRequestProperty(\"Accept\", \"application/json\");\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n        return connection;\n    }\n\n    public static HttpURLConnection getConnectionFromCompiledRoute(String apiUrl, Route.CompiledRoute route) throws IOException {\n        String routePath = route.getPath();\n        String fullUrl = apiUrl + routePath;\n        URL url = new URL(fullUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(route.getMethod());\n        connection.setRequestProperty(\"Accept\", \"application/json\");\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n        return connection;\n    }\n\n    public static String parseInputStreamAndClose(InputStream inputStream) {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n            StringBuilder sb = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            return sb.toString();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public static String parseString(HttpURLConnection connection) {\n        try {\n            int responseCode = connection.getResponseCode();\n            InputStream is;\n            if (responseCode >= 200 && responseCode < 300) {\n                is = connection.getInputStream();\n            } else {\n                is = connection.getErrorStream();\n            }\n            return parseInputStreamAndClose(is);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public static String parseStringAndDisconnect(HttpURLConnection connection) {\n        String result = parseString(connection);\n        connection.disconnect();\n        return result;\n    }\n\n    public static String parseErrorString(HttpURLConnection connection) {\n        try {\n            InputStream is = connection.getErrorStream();\n            return parseInputStreamAndClose(is);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public static String parseErrorStringAndDisconnect(HttpURLConnection connection) {\n        String result = parseErrorString(connection);\n        connection.disconnect();\n        return result;\n    }\n\n    public static JSONObject parseJSONObject(HttpURLConnection connection) {\n        try {\n            String response = parseString(connection);\n            return new JSONObject(response);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public static JSONObject parseJSONObjectAndDisconnect(HttpURLConnection connection) {\n        JSONObject obj = parseJSONObject(connection);\n        connection.disconnect();\n        return obj;\n    }\n\n    public static JSONArray parseJSONArray(HttpURLConnection connection) {\n        try {\n            String response = parseString(connection);\n            return new JSONArray(response);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public static JSONArray parseJSONArrayAndDisconnect(HttpURLConnection connection) {\n        JSONArray array = parseJSONArray(connection);\n        connection.disconnect();\n        return array;\n    }\n}\n```"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a Java class that provides functionality for managing Kafka topics using the Kafka AdminClient API. The class should be able to create and configure an AdminClient instance and use it to create new Kafka topics.\n\nClass Description: The KafkaTopicManager class encapsulates operations for interacting with Kafka topics through the AdminClient API. It provides methods to initialize an AdminClient connection and create new topics with specified configurations.\n\nAttributes:\n- adminClient: AdminClient - The Kafka AdminClient instance used for topic management operations\n\nMethods:\n- createAndConfigureAdminClient(String bootstrapServers) -> AdminClient - Creates and configures a Kafka AdminClient instance with the specified bootstrap servers\n- autoCreateMetricsTopic(AdminClient adminClient, String topicName) -> TopicDescription - Creates a new Kafka topic with default configuration (1 partition and replication factor of 1) and returns its description",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.CreateTopicsResult;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.clients.admin.TopicDescription;\nimport java.util.Collections;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutionException;\n\npublic AdminClient createAndConfigureAdminClient(String bootstrapServers) {\n    Properties adminProps = new Properties();\n    adminProps.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    AdminClient adminClient = AdminClient.create(adminProps);\n    return adminClient;\n}\n\npublic TopicDescription autoCreateMetricsTopic(AdminClient adminClient, String topicName) throws ExecutionException, InterruptedException {\n    NewTopic testTopic = new NewTopic(topicName, 1, (short) 1);\n    CreateTopicsResult createTopicsResult = adminClient.createTopics(Collections.singleton(testTopic));\n    createTopicsResult.all().get();\n    TopicDescription topicDescription = adminClient.describeTopics(Collections.singleton(topicName)).values().get(topicName).get();\n    return topicDescription;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 33,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.clients.admin.DescribeTopicsResult;\nimport org.apache.kafka.common.TopicDescription;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutionException;\n\npublic class KafkaTopicManager {\n    private AdminClient adminClient;\n\n    public AdminClient createAndConfigureAdminClient(String bootstrapServers) {\n        Properties props = new Properties();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        adminClient = AdminClient.create(props);\n        return adminClient;\n    }\n\n    public TopicDescription autoCreateMetricsTopic(AdminClient adminClient, String topicName) throws ExecutionException, InterruptedException {\n        NewTopic newTopic = new NewTopic(topicName, 1, (short) 1);\n        adminClient.createTopics(Collections.singletonList(newTopic)).all().get();\n        DescribeTopicsResult describeResult = adminClient.describeTopics(Collections.singletonList(topicName));\n        Map<String, TopicDescription> descriptions = describeResult.all().get();\n        return descriptions.get(topicName);\n    }\n}\n```"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create a Java utility class for making HTTP requests using HttpURLConnection, supporting both GET and POST methods asynchronously, with callback mechanisms for handling responses and errors. The class should also include functionality to retrieve network time from a server.\n\nClass Description: HttpURLConnectionUtils is a utility class that provides asynchronous HTTP request capabilities using Java's HttpURLConnection. It supports GET and POST methods, allows setting custom headers, and provides callback interfaces for handling responses and errors. Additionally, it includes functionality to fetch network time from a specified URL.\n\nAttributes:\n- TAG: String - Class tag for logging purposes\n- TIMEOUT_IN_MILLIONS: int - Default timeout for connections in milliseconds (5000ms)\n- BAIDU_URL: String - Default URL for network time requests (https://www.baidu.com)\n\nMethods:\n- doGetAsync(String urlStr, Callback callback) -> void - Performs an asynchronous GET request to the specified URL and invokes the callback with the response or error\n- doPostAsync(String urlStr, String params, Callback callback) -> void - Performs an asynchronous POST request to the specified URL with given parameters and invokes the callback\n- getNetTime(TimeCallback callback) -> void - Retrieves network time from the default BAIDU_URL using the provided callback\n- getNetTime(String urlStr, TimeCallback callback) -> void - Retrieves network time from the specified URL using the provided callback\n- request(String method, String urlStr, Map<String,String> headers, String params, Callback callback) -> void - Internal method that handles the actual HTTP request logic\n- reqNetTime(String urlStr, TimeCallback callback) -> void - Internal method that handles network time retrieval\n\nCallback Interfaces:\n- Callback: \n  - onResponse(String result, long response) -> void - Called when request succeeds\n  - onFail(Throwable error) -> void - Called when request fails\n- TimeCallback:\n  - onResponse(long millis) -> void - Called when network time retrieval succeeds\n  - onFail(Throwable error) -> void - Called when network time retrieval fails",
    "Canonical_solution": "import java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\n\npublic final class HttpURLConnectionUtils {\n\n    private static final String TAG = HttpURLConnectionUtils.class.getSimpleName();\n    private static final int TIMEOUT_IN_MILLIONS = 5000;\n    public static final String BAIDU_URL = \"https://www.baidu.com\";\n\n    public interface Callback {\n        void onResponse(String result, long response);\n        void onFail(Throwable error);\n    }\n\n    public interface TimeCallback {\n        void onResponse(long millis);\n        void onFail(Throwable error);\n    }\n\n    public static void doGetAsync(final String urlStr, final Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"GET\", urlStr, null, null, callback);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public static void doPostAsync(final String urlStr, final String params, final Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"POST\", urlStr, null, params, callback);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public static void getNetTime(final TimeCallback callback) {\n        getNetTime(BAIDU_URL, callback);\n    }\n\n    public static void getNetTime(final String urlStr, final TimeCallback callback) {\n        new Thread(() -> reqNetTime(urlStr, callback)).start();\n    }\n\n    private static void request(\n            final String method,\n            final String urlStr,\n            final Map<String, String> headers,\n            final String params,\n            final Callback callback\n    ) {\n        HttpURLConnection connection = null;\n        InputStream is = null;\n        ByteArrayOutputStream baos = null;\n        try {\n            URL url = new URL(urlStr);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(method);\n            \n            if (headers != null) {\n                for (Map.Entry<String, String> entry : headers.entrySet()) {\n                    connection.setRequestProperty(entry.getKey(), entry.getValue());\n                }\n            }\n            \n            if (params != null && params.length() != 0) {\n                connection.setDoInput(true);\n                connection.setDoOutput(true);\n                connection.setUseCaches(false);\n                OutputStream os = connection.getOutputStream();\n                os.write(params.getBytes());\n                os.flush();\n                os.close();\n            }\n            \n            connection.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n            connection.setReadTimeout(TIMEOUT_IN_MILLIONS);\n            \n            int responseCode = connection.getResponseCode();\n            if (responseCode >= 200 && responseCode < 300) {\n                is = connection.getInputStream();\n                baos = new ByteArrayOutputStream();\n                byte[] buffer = new byte[1024];\n                int len;\n                while (((len = is.read(buffer)) != -1)) {\n                    baos.write(buffer, 0, len);\n                }\n                String result = baos.toString();\n                if (callback != null) {\n                    callback.onResponse(result, connection.getDate());\n                }\n            } else {\n                if (callback != null) {\n                    callback.onFail(new Exception(\"responseCode not >= 200 or < 300, code: \" + responseCode));\n                }\n            }\n        } catch (Exception e) {\n            if (callback != null) {\n                callback.onFail(e);\n            }\n        } finally {\n            try {\n                if (baos != null) baos.close();\n                if (is != null) is.close();\n            } catch (Exception ignore) {}\n            \n            if (connection != null) {\n                try {\n                    connection.disconnect();\n                } catch (Exception ignore) {}\n            }\n        }\n    }\n\n    private static void reqNetTime(final String urlStr, final TimeCallback callback) {\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(urlStr);\n            connection = (HttpURLConnection) url.openConnection();\n            long date = connection.getDate();\n            if (date <= 0) {\n                date = -1L;\n            }\n            if (callback != null) {\n                callback.onResponse(date);\n            }\n        } catch (Exception e) {\n            if (callback != null) {\n                callback.onFail(e);\n            }\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.disconnect();\n                } catch (Exception ignore) {}\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.Map;\nimport java.text.SimpleDateFormat;\nimport java.util.Locale;\nimport java.util.TimeZone;\nimport java.util.Date;\nimport java.nio.charset.StandardCharsets;\n\npublic class HttpURLConnectionUtils {\n    private static final String TAG = \"HttpURLConnectionUtils\";\n    private static final int TIMEOUT_IN_MILLIONS = 5000;\n    private static final String BAIDU_URL = \"https://www.baidu.com\";\n\n    public interface Callback {\n        void onResponse(String result, long response);\n        void onFail(Throwable error);\n    }\n\n    public interface TimeCallback {\n        void onResponse(long millis);\n        void onFail(Throwable error);\n    }\n\n    public void doGetAsync(String urlStr, Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"GET\", urlStr, null, null, callback);\n            } catch (Exception e) {\n                callback.onFail(e);\n            }\n        }).start();\n    }\n\n    public void doPostAsync(String urlStr, String params, Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"POST\", urlStr, null, params, callback);\n            } catch (Exception e) {\n                callback.onFail(e);\n            }\n        }).start();\n    }\n\n    public void getNetTime(TimeCallback callback) {\n        getNetTime(BAIDU_URL, callback);\n    }\n\n    public void getNetTime(String urlStr, TimeCallback callback) {\n        new Thread(() -> {\n            try {\n                reqNetTime(urlStr, callback);\n            } catch (Exception e) {\n                callback.onFail(e);\n            }\n        }).start();\n    }\n\n    private void request(String method, String urlStr, Map<String, String> headers, String params, Callback callback) throws Exception {\n        URL url = new URL(urlStr);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(method);\n        connection.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n        connection.setReadTimeout(TIMEOUT_IN_MILLIONS);\n\n        if (headers != null) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                connection.setRequestProperty(entry.getKey(), entry.getValue());\n            }\n        }\n\n        if (\"POST\".equals(method)) {\n            connection.setDoOutput(true);\n            try (OutputStream os = connection.getOutputStream()) {\n                os.write(params.getBytes(StandardCharsets.UTF_8));\n            }\n        }\n\n        int responseCode = connection.getResponseCode();\n        String response = \"\";\n        if (responseCode >= 200 && responseCode < 300) {\n            response = readResponse(connection.getInputStream());\n        } else {\n            response = readResponse(connection.getErrorStream());\n            throw new IOException(\"HTTP error code: \" + responseCode + \", response: \" + response);\n        }\n\n        callback.onResponse(response, responseCode);\n        connection.disconnect();\n    }\n\n    private void reqNetTime(String urlStr, TimeCallback callback) throws Exception {\n        URL url = new URL(urlStr);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n        connection.setReadTimeout(TIMEOUT_IN_MILLIONS);\n\n        int responseCode = connection.getResponseCode();\n        if (responseCode >= 200 && responseCode < 300) {\n            String dateHeader = connection.getHeaderField(\"Date\");\n            if (dateHeader != null) {\n                SimpleDateFormat sdf = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\", Locale.US);\n                sdf.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n                Date date = sdf.parse(dateHeader);\n                callback.onResponse(date.getTime());\n            } else {\n                callback.onFail(new Exception(\"Date header not found in response\"));\n            }\n        } else {\n            String errorResponse = readResponse(connection.getErrorStream());\n            callback.onFail(new IOException(\"HTTP error code: \" + responseCode + \", response: \" + errorResponse));\n        }\n        connection.disconnect();\n    }\n\n    private String readResponse(InputStream inputStream) throws IOException {\n        if (inputStream == null) return \"\";\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n        StringBuilder response = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            response.append(line);\n        }\n        return response.toString();\n    }\n}\n```"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL and returns the response as a string.\n\nFunction Description: The function should establish an HTTP connection to the provided URL, send a GET request, read the response stream, and return the content as a UTF-8 encoded string. It should handle resource cleanup properly by closing all streams and disconnecting the HTTP connection.\n\nInput: \n- requestUrl: String - The URL to which the HTTP GET request will be sent\n\nOutput: \n- String - The response content from the HTTP GET request, or null if an error occurs",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nprivate static String httpRequest(String requestUrl) {\n    StringBuffer buffer = null;\n    BufferedReader bufferedReader = null;\n    InputStreamReader inputStreamReader = null;\n    InputStream inputStream = null;\n    HttpURLConnection httpUrlConn = null;\n    try {\n        // \u5efa\u7acbget\u8bf7\u6c42\n        URL url = new URL(requestUrl);\n        httpUrlConn = (HttpURLConnection) url.openConnection();\n        httpUrlConn.setDoInput(true);\n        httpUrlConn.setRequestMethod(\"GET\");\n        // \u83b7\u53d6\u8f93\u5165\u6d41\n        inputStream = httpUrlConn.getInputStream();\n        inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\n        bufferedReader = new BufferedReader(inputStreamReader);\n        // \u4ece\u8f93\u5165\u6d41\u83b7\u53d6\u7ed3\u679c\n        buffer = new StringBuffer();\n        String str = null;\n        while ((str = bufferedReader.readLine()) != null) {\n            str = new String(str.getBytes(), \"UTF-8\");\n            buffer.append(str);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (bufferedReader != null) {\n            try {\n                bufferedReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStreamReader != null) {\n            try {\n                inputStreamReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (httpUrlConn != null) {\n            httpUrlConn.disconnect();\n        }\n    }\n    return buffer.toString();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpUtil {\n    public static String sendGetRequest(String requestUrl) {\n        HttpURLConnection conn = null;\n        BufferedReader reader = null;\n        try {\n            URL url = new URL(requestUrl);\n            conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"GET\");\n            conn.connect();\n\n            int responseCode = conn.getResponseCode();\n            InputStream inputStream = (responseCode == 200) ? conn.getInputStream() : conn.getErrorStream();\n            reader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"));\n            StringBuilder response = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.append(line);\n            }\n            return response.toString();\n        } catch (IOException e) {\n            return null;\n        } finally {\n            try {\n                if (reader != null) reader.close();\n                if (conn != null) conn.disconnect();\n            } catch (IOException e) {\n                return null;\n            }\n        }\n    }\n}\n```"
  }
]