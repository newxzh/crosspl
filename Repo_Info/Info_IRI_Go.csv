File_path,Classfier,Classfier_ID,Interface_class,Interface_name,Status_description
D:\CAE\Splited_Repository\1\1Panel_515647260\backend\app\service\device.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\1Panel_515647260\backend\utils\ntp\ntp.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch1.2\16-hello-go-v2\hello.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.1\hello-service-v3\server-on-http\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.4\1\client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.4\2\client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.4\3\clientpub\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.4\3\clientsub\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.4\basic\client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.4\grpc-pubsub\clientPub\clientPub.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.4\grpc-pubsub\clientSub\clientSub.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.5\on-web\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.5\panic-and-log\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.5\tls\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\advanced-go-programming-book_115857954\examples\ch4.5\tok\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\air_106704041\runner\engine_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\7days-golang_201658460\gee-cache\day5-multi-nodes\geecache\http.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\7days-golang_201658460\gee-cache\day6-single-flight\geecache\http.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\7days-golang_201658460\gee-cache\day7-proto-buf\geecache\http.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\7days-golang_201658460\gee-rpc\day1-codec\main\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\brook_85371712\dohserver.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\brook_85371712\list.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\brook_85371712\socks5tohttp.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\1\brook_85371712\wsserver.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\amass_140457254\datasrcs\scripting\dns.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\amass_140457254\datasrcs\scripting\socket_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\1\buffalo_25594973\mail\internal\mail\smtp.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\beehive_21141781\bees\facebookbee\facebookbee.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\beehive_21141781\bees\ircbee\irctools\irctools.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\beehive_21141781\bees\socketbee\socketbee.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\beehive_21141781\bees\spaceapibee\spaceapibee.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\btcd_11931032\config.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\btcd_11931032\connmgr\tor.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\btcd_11931032\rpcclient\chain_test.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\1\bombardier_59949570\cmd\utils\simplebenchserver\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\1m-go-websockets_169982320\0_simple_web_server\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\1m-go-websockets_169982320\1_ws_example\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\1m-go-websockets_169982320\2_ws_ulimit\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\1m-go-websockets_169982320\3_optimize_ws_goroutines\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\1m-go-websockets_169982320\4_optimize_gobwas\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\alda_23338323\client\repl\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\alda_23338323\client\repl\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\1\awless_60350949\commands\run.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\awless_60350949\inspect\inspectors\pricer.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\awless_60350949\vendor\github.com\wallix\awless-scheduler\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\awless_60350949\vendor\github.com\wallix\awless-scheduler\client\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\awless_60350949\vendor\golang.org\x\crypto\acme\acme.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\awless_60350949\vendor\golang.org\x\net\http2\h2demo\h2demo.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\awless_60350949\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\1\awless_60350949\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\1\awless_60350949\vendor\golang.org\x\net\publicsuffix\gen.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\awless_60350949\vendor\golang.org\x\net\webdav\litmus_test_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\blocky_219954477\server\server_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\amqp_4141925\example_client_test.go,Inter-Process Communication (IPC),121,Go*,Simple Rabbitmq producer in go,"['Step 1: Import the streadway/amqp package', 'Step 2: Establish a connection to the RabbitMQ server', 'Step 3: Open a channel from the connection', 'Step 4: Declare an exchange (optional depending on use case)', 'Step 5: Declare a queue to publish messages to', 'Step 6: Publish a message to the declared queue or exchange']"
D:\CAE\Splited_Repository\1\amqp_4141925\integration_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\amqp_4141925\_examples\simple-consumer\consumer.go,Inter-Process Communication (IPC),122,Go*,Simple Rabbitmq consumer in go,"['Step 1: Import the streadway/amqp package', 'Step 2: Connect to the RabbitMQ server', 'Step 3: Create a channel for communication', 'Step 4: Declare the exchange to bind the queue (if needed)', 'Step 5: Declare the queue from which to consume messages', 'Step 6: Bind the queue to the exchange with a routing key', 'Step 7: Start consuming messages from the queue']"
D:\CAE\Splited_Repository\1\build-push-action_241092383\test\go\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\arduino-cli_144036833\internal\integrationtest\http_server.go,Inter-Process Communication (IPC),104,Go*,Advanced HTTP server with http.Server and ServeMux for custom configuration,"['Step 1: Import net/http for server and routing logic', 'Step 2: Create a custom http.Server instance for configuration', 'Step 3: Use ServeMux to create a custom multiplexer', 'Step 4: Register handlers to ServeMux', 'Step 5: Launch the server with ListenAndServe']"
D:\CAE\Splited_Repository\1\buildx_177210627\controller\remote\controller.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\1\buildx_177210627\vendor\github.com\docker\cli\cli\trust\trust.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\buildx_177210627\vendor\github.com\docker\cli\cli-plugins\socket\socket.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\1\buildx_177210627\vendor\github.com\docker\distribution\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\1\buildx_177210627\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\buildx_177210627\vendor\github.com\moby\buildkit\session\grpc.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\buildx_177210627\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\afrog_463027648\pkg\utils\tcp.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\assetfinder_193392376\crtsh.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\brick_14993750\brick.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\athenapdf_55075925\weaver\converter\cloudconvert\cloudconvert.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\avalanchego_246387644\network\peer\upgrader_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\1\botkube_161628176\examples\src\internal\meme\client.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\1\botkube_161628176\pkg\bot\slack_cloud.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\base64Captcha_113986555\_examples\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\acmetool_46200120\hooks\hooks.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\1\acmetool_46200120\interaction\dialog.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\1\BBTz_194292536\aron.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\1\appdash_26996090\collector.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\akutan_179586596\src\github.com\ebay\akutan\api\impl\http.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\akutan_179586596\src\github.com\ebay\akutan\blog\logspecclient\common_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\1\akutan_179586596\src\github.com\ebay\akutan\tools\plank\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\1\akutan_179586596\src\github.com\ebay\akutan\util\grpc\client\client_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\akutan_179586596\src\github.com\ebay\akutan\viewclient\viewreg\registry_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\1\Beaver_153948655\cmd\api.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\1\agola_188402099\internal\gitsources\agolagit\agolagit.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\agola_188402099\internal\gitsources\github\github.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\C1000K-Servers_36058160\goserver\src\webserver\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\argocd-image-updater_284753690\cmd\ask_pass_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\burp-awesome-tls_451267945\src-go\server\intercept.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\btcwallet_12136863\rpcserver.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\1\apisix-ingress-controller_221468226\test\e2e\suite-features\scheme.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\apisix-ingress-controller_221468226\test\e2e\testbackend\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\1\apisix-ingress-controller_221468226\test\e2e\testbackend\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\1\apisix-ingress-controller_221468226\test\e2e\testtimeout\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\croc_107286889\src\comm\comm_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\croc_107286889\src\tcp\tcp.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\croc_107286889\src\utils\utils.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\CasaOS_410430370\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\CasaOS_410430370\pkg\utils\httper\httper.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\CasaOS_410430370\route\v1\file.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\2\CasaOS_410430370\route\v1\notify_old.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\2\colly_105279544\_examples\multipart\multipart.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\colly_105279544\_examples\scraper_server\scraper_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\cli_159981830\src\utils\watcher.go,Inter-Process Communication (IPC),117,Go*,nhooyr.io-based websocket client in Go,"['Step 1: Import required packages', 'Step 2: Establish WebSocket connection', 'Step 3: Defer connection closure', 'Step 4: Send and receive WebSocket messages']"
D:\CAE\Splited_Repository\2\daytona_753490180\pkg\agent\tailscale\server.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\daytona_753490180\pkg\api\server.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\2\daytona_753490180\pkg\ports\ports.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\dep_70202506\vendor\github.com\Masterminds\vcs\vcs_remote_lookup.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cert-manager_92313258\pkg\issuer\acme\http\http.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\dnscrypt-proxy_116739828\dnscrypt-proxy\dnsutils.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\dnscrypt-proxy_116739828\dnscrypt-proxy\proxy.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\dnscrypt-proxy_116739828\dnscrypt-proxy\xtransport.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\dnscrypt-proxy_116739828\vendor\github.com\coreos\go-systemd\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\dnscrypt-proxy_116739828\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\dnscrypt-proxy_116739828\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\dnscrypt-proxy_116739828\vendor\github.com\quic-go\quic-go\http3\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\dnscrypt-proxy_116739828\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\dnscrypt-proxy_116739828\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\crawlab_169948217\core\grpc\server\server_v2.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\chromedp_79921099\chromedp_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\caire_116718067\vendor\gioui.org\app\os_wayland.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\2\crossplane_147886080\cmd\crank\render\render_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\crossplane_147886080\internal\xfn\function_runner_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\distribution_28366058\notifications\http_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\distribution_28366058\registry\registry_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\distribution_28366058\vendor\cloud.google.com\go\auth\grpctransport\grpctransport.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\2\distribution_28366058\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\distribution_28366058\vendor\github.com\google\s2a-go\s2a_options.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\2\distribution_28366058\vendor\github.com\gorilla\handlers\logging.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\distribution_28366058\vendor\golang.org\x\oauth2\google\externalaccount\aws.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\distribution_28366058\vendor\golang.org\x\oauth2\google\internal\stsexchange\sts_exchange.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\distribution_28366058\vendor\google.golang.org\api\transport\grpc\dial.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\2\cow_5552858\estimate_timeout.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\confd_13234395\backends\rancher\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\confd_13234395\integration\ssm\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\confd_13234395\vendor\github.com\coreos\go-systemd\v22\journal\journal_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\confd_13234395\vendor\github.com\samuel\go-zookeeper\zk\flw.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\dice_531220682\examples\leaderboard-go\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\dice_531220682\integration_tests\commands\websocket\writeretry_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\dice_531220682\integration_tests\config\parser_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\2\dice_531220682\internal\clientio\iohandler\netconn\netconn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\DeepLX_552635490\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\2\certificates_155658556\acme\challenge_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\certificates_155658556\ca\bootstrap_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\certificates_155658556\ca\ca.go,Inter-Process Communication (IPC),108,Go*,Chi-based HTTP Server in Go,"['Step 1: Import the Chi router package', 'Step 2: Create a new router instance', 'Step 3: Define routes and attach handler functions', 'Step 4: Start the HTTP server with the router']"
D:\CAE\Splited_Repository\2\cloud-torrent_36588302\server\server_search.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\classicswarm_19360616\api\utils.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\classicswarm_19360616\discovery\token\token.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\classicswarm_19360616\vendor\github.com\docker\docker\client\hijack.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\classicswarm_19360616\vendor\github.com\hashicorp\consul\api\api.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\classicswarm_19360616\vendor\github.com\samuel\go-zookeeper\zk\flw.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\client_golang_7823926\prometheus\graphite\bridge.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\client_golang_7823926\prometheus\promauto\auto.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\client_golang_7823926\prometheus\promhttp\instrument_server_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\client_golang_7823926\prometheus\promhttp\option_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\cli_88013053\cli\trust\trust.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cli_88013053\cli-plugins\socket\socket.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\cli_88013053\cli-plugins\socket\socket_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cli_88013053\vendor\github.com\docker\distribution\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\compress_39468142\gzhttp\compress_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\cosign_335952417\internal\pkg\cosign\tsa\client\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cosign_335952417\test\fakeoidc\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\descheduler_98671007\vendor\github.com\coreos\go-systemd\v22\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\descheduler_98671007\vendor\github.com\coreos\go-systemd\v22\journal\journal_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\descheduler_98671007\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\descheduler_98671007\vendor\k8s.io\kms\pkg\service\grpc_service.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\descheduler_98671007\vendor\kubevirt.io\client-go\generated\kubevirt\clientset\versioned\typed\core\v1\async.go,Inter-Process Communication (IPC),117,Go*,nhooyr.io-based websocket client in Go,"['Step 1: Import required packages', 'Step 2: Establish WebSocket connection', 'Step 3: Defer connection closure', 'Step 4: Send and receive WebSocket messages']"
D:\CAE\Splited_Repository\2\descheduler_98671007\vendor\kubevirt.io\client-go\generated\kubevirt\clientset\versioned\typed\core\v1\websocket.go,Inter-Process Communication (IPC),117,Go*,nhooyr.io-based websocket client in Go,"['Step 1: Import required packages', 'Step 2: Establish WebSocket connection', 'Step 3: Defer connection closure', 'Step 4: Send and receive WebSocket messages']"
D:\CAE\Splited_Repository\2\CDK_310247011\pkg\exploit\discovery\istio_check.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\CDK_310247011\pkg\tool\etcdctl\common.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\CDK_310247011\pkg\tool\kubectl\common.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\CDK_310247011\pkg\util\http_request.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\devzat_354515412\rpc.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\Cloak_158890222\internal\common\tls_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\Cloak_158890222\internal\test\integration_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\diun_115767098\vendor\github.com\containers\storage\pkg\unshare\unshare_linux.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\2\diun_115767098\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\diun_115767098\vendor\github.com\hashicorp\nomad\api\api.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\crypto_27522241\ssh\client_auth_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\crypto_27522241\ssh\handshake_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\crypto_27522241\ssh\agent\client_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\crypto_27522241\ssh\test\dial_unix_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\crypto_27522241\ssh\test\test_unix_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\DocHub_132346890\vendor\github.com\aliyun\aliyun-oss-go-sdk\oss\conn.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\DocHub_132346890\vendor\github.com\denverdino\aliyungo\common\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\DocHub_132346890\vendor\github.com\denverdino\aliyungo\oss\authenticate_callback.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\DocHub_132346890\vendor\github.com\qiniu\api.v7\rtc\util.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\DocHub_132346890\vendor\golang.org\x\crypto\acme\acme.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\clickhouse-go_78678862\tests\issues\209\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\Distributed-Systems_61299040\6.824\src\pbservice\test_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\cloud-on-k8s_155368246\pkg\controller\enterprisesearch\version_upgrade.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloud-on-k8s_155368246\pkg\dev\portforward\pod_forwarder.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\cmd\torrent\main.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\pkg\hostman\diskutils\vddk.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\pkg\hostman\hostdeployer\deployclient\deployclient.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\pkg\hostman\hostdeployer\deployserver\deployserver.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\pkg\mcclient\session.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\pkg\monitor\alerting\notifiers\util.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\pkg\util\httpstream\spdy\connection_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\pkg\util\pod\stream\stream.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\pkg\util\tftp\tftp.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\pkg\webconsole\server\rdp_server.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\aliyun\aliyun-oss-go-sdk\oss\conn.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\anacrolix\missinggo\httptoo\reverse_proxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\anacrolix\torrent\client.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\coredns\coredns\core\dnsserver\server_grpc.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\coreos\go-systemd\v22\journal\journal_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\docker\docker\client\hijack.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\elgatito\upnp\upnp.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\google\s2a-go\s2a_options.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\googleapis\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\koding\websocketproxy\websocketproxy.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\lestrrat\go-jwx\jwk\jwk.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\miekg\dns\xfr.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\opencontainers\runc\libcontainer\container_linux.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\rcrowley\go-metrics\graphite.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\rcrowley\go-metrics\opentsdb.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\tencentyun\cos-go-sdk-v5\object.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\github.com\volcengine\volc-sdk-golang\base\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\golang.org\x\oauth2\google\internal\externalaccount\aws.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\golang.org\x\oauth2\google\internal\stsexchange\sts_exchange.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\google.golang.org\api\transport\grpc\dial.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\gopkg.in\mail.v2\smtp.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\k8s.io\apimachinery\pkg\util\proxy\upgradeaware.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\yunion.io\x\cloudmux\pkg\multicloud\google\bucket.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\yunion.io\x\executor\client\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudpods_142542006\vendor\yunion.io\x\pkg\util\httputils\httputils.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cassandra-gocql-driver_5561238\conn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\discord-mass-DM-GO_423466379\instance\captcha.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\discord-mass-DM-GO_423466379\utilities\misc.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\container2wasm_601918925\tests\httphello\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\container2wasm_601918925\tests\imagemounter-test\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\chatgpt-dingtalk_576072728\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\2\chatgpt-dingtalk_576072728\pkg\ops\opstools.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\contrib_21525599\cache\redis.go,Inter-Process Communication (IPC),126,Go*,Redis in Go,"['Step 1: Import the redigo/redis package for Redis support', 'Step 2: Establish a connection to the Redis server using redis.Dial', 'Step 3: Use defer to ensure the Redis connection is properly closed', 'Step 4: Execute Redis commands such as Set, Get, lpop, lpush, HSet, and HGet']"
D:\CAE\Splited_Repository\2\contrib_21525599\cache\example\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\2\contrib_21525599\gzip\example\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\2\contrib_21525599\jwt\example\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\2\contrib_21525599\secure\example\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\2\contrib_21525599\sessions\example_cookie\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\2\contrib_21525599\sessions\example_redis\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\2\contrib_21525599\static\example\bindata\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\2\contrib_21525599\static\example\simple\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\2\cri-tools_80172100\pkg\validate\security_context_linux.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\cri-tools_80172100\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cri-tools_80172100\vendor\k8s.io\client-go\transport\websocket\roundtripper.go,Inter-Process Communication (IPC),117,Go*,nhooyr.io-based websocket client in Go,"['Step 1: Import required packages', 'Step 2: Establish WebSocket connection', 'Step 3: Defer connection closure', 'Step 4: Send and receive WebSocket messages']"
D:\CAE\Splited_Repository\2\cordless_165042306\vendor\github.com\google\go-github\v29\github\github.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\chirpstack-network-server_48647914\internal\api\ns\network_server_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\1\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\1\vendor\github.com\coreos\go-systemd\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\1\vendor\github.com\coreos\go-systemd\journal\journal.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\1\vendor\github.com\googleapis\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\1\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\1\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\1\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\vendor\github.com\coreos\go-systemd\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\vendor\github.com\coreos\go-systemd\journal\journal.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\vendor\github.com\googleapis\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\compose-on-kubernetes_158560458\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cherami-server_65776018\test\integration\kfc_test.go,Inter-Process Communication (IPC),123,Go*,Kafka Sync producer in Go,"['Step 1: Import the sarama package', 'Step 2: Create and configure a new sarama.Config instance', 'Step 3: Instantiate a synchronous Kafka producer', 'Step 4: Ensure producer resources are closed with defer', 'Step 5: Prepare a message to be sent using sarama.ProducerMessage', ""Step 6: Send the message using the producer's SendMessage method""]"
D:\CAE\Splited_Repository\2\cloudprober_93106035\cloudprober.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\cloudprober_93106035\probes\grpc\grpc.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\2\cloudprober_93106035\probes\grpc\grpc_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\cloudprober_93106035\rds\server\cmd\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\cloudprober_93106035\servers\grpc\grpc.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\cloudprober_93106035\servers\grpc\grpc_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\2\cloudprober_93106035\servers\http\http_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\cloudprober_93106035\servers\udp\udp_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\cloudprober_93106035\surfacers\pubsub\pubsub_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\github.com\aws\aws-sdk-go\aws\ec2metadata\service.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\http2\transport_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\http2\h2demo\h2demo.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv4\bpf_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv4\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv4\multicast_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv4\readwrite_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv4\unicast_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv6\bpf_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv6\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv6\multicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv6\readwrite_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\ipv6\unicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\proxy\proxy_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\publicsuffix\gen.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\webdav\litmus_test_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\webdav\webdav_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\2\convoy_29041226\vendor\golang.org\x\net\websocket\websocket_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\distribyted_259392969\webdav\http.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\codetainer_38206506\Godeps\_workspace\src\github.com\fsouza\go-dockerclient\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\2\codetainer_38206506\Godeps\_workspace\src\github.com\fsouza\go-dockerclient\client_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\codetainer_38206506\Godeps\_workspace\src\github.com\fsouza\go-dockerclient\container_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\2\codetainer_38206506\Godeps\_workspace\src\github.com\fsouza\go-dockerclient\testing\server_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\codetainer_38206506\Godeps\_workspace\src\github.com\gorilla\websocket\client_server_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\2\codetainer_38206506\Godeps\_workspace\src\github.com\gorilla\websocket\examples\autobahn\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\codetainer_38206506\Godeps\_workspace\src\github.com\gorilla\websocket\examples\chat\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\codetainer_38206506\Godeps\_workspace\src\github.com\gorilla\websocket\examples\filewatch\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\2\colossus_135078893\auth\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\2\colossus_135078893\web\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\faas_77144337\gateway\metrics\exporter.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\faas_77144337\gateway\plugin\external.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\faas_77144337\gateway\vendor\github.com\nats-io\nats.go\nats.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\fabric_66573241\common\grpclogging\server_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\common\grpcmetrics\interceptor_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\core\chaincode\accesscontrol\access_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\core\chaincode\extcc\extcc_handler_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\core\peer\pkg_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\fabric_66573241\core\scc\cscc\configure_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\discovery\client\client_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\gossip\comm\comm_impl.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\fabric_66573241\gossip\comm\comm_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\fabric_66573241\gossip\comm\crypto_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\gossip\discovery\discovery_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\gossip\service\gossip_service_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\internal\peer\channel\create_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\internal\pkg\comm\client_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\internal\pkg\comm\creds_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\fabric_66573241\internal\pkg\comm\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fabric_66573241\internal\pkg\comm\server_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\fabric_66573241\orderer\common\cluster\deliver_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\fabric_66573241\vendor\github.com\fsouza\go-dockerclient\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\fabric_66573241\vendor\github.com\gorilla\handlers\logging.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\fabric_66573241\vendor\github.com\hyperledger\fabric-chaincode-go\v2\shim\internal\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\gh-ost_54378638\vendor\github.com\magiconair\properties\load.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\gh-ost_54378638\vendor\github.com\testcontainers\testcontainers-go\reaper.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\gf_95761244\contrib\rpc\grpcx\grpcx_grpc_server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\gf_95761244\example\rpc\grpcx\rawgrpc\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\gf_95761244\example\rpc\grpcx\rawgrpc\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\gf_95761244\net\ghttp\ghttp_z_unit_feature_websocket_test.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\3\gf_95761244\net\gtcp\gtcp_func.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\evilginx2_140412864\vendor\github.com\elazarl\goproxy\https.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\evilginx2_140412864\vendor\github.com\magiconair\properties\load.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\evilginx2_140412864\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\evilginx2_140412864\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\evilginx2_140412864\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\evilginx2_140412864\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\external-dns_81497153\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\dragonfly-archived_110776471\client\request.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\dragonfly-archived_110776471\dfdaemon\proxy\proxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\dragonfly-archived_110776471\supernode\daemon\mgr\preheat\image_preaheater.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\evio_96170782\evio_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\evio_96170782\benchmarks\net-echo-server\main.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\evio_96170782\benchmarks\net-http-server\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\ethr_159038012\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\easegress_371564104\build\test\integration_test.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\3\easegress_371564104\example\backend-service\echo\echo.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\easegress_371564104\example\backend-service\mirror\mirror.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\easegress_371564104\example\backend-service\remote\remote.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\easegress_371564104\pkg\filters\remotefilter\remotefilter.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\easegress_371564104\pkg\object\grpcserver\runtime.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\duplicacy_52319759\src\duplicacy_hubicclient.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\duplicacy_52319759\src\duplicacy_sambastorage.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\find_44634390\server.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\boj\redistore\redistore.go,Inter-Process Communication (IPC),126,Go*,Redis in Go,"['Step 1: Import the redigo/redis package for Redis support', 'Step 2: Establish a connection to the Redis server using redis.Dial', 'Step 3: Use defer to ensure the Redis connection is properly closed', 'Step 4: Execute Redis commands such as Set, Get, lpop, lpush, HSet, and HGet']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\garyburd\redigo\redis\conn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\garyburd\redigo\redis\pool_test.go,Inter-Process Communication (IPC),126,Go*,Redis in Go,"['Step 1: Import the redigo/redis package for Redis support', 'Step 2: Establish a connection to the Redis server using redis.Dial', 'Step 3: Use defer to ensure the Redis connection is properly closed', 'Step 4: Execute Redis commands such as Set, Get, lpop, lpush, HSet, and HGet']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\contrib\cache\redis.go,Inter-Process Communication (IPC),126,Go*,Redis in Go,"['Step 1: Import the redigo/redis package for Redis support', 'Step 2: Establish a connection to the Redis server using redis.Dial', 'Step 3: Use defer to ensure the Redis connection is properly closed', 'Step 4: Execute Redis commands such as Set, Get, lpop, lpush, HSet, and HGet']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\contrib\cache\example\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\contrib\gzip\example\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\contrib\jwt\example\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\contrib\secure\example\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\contrib\sessions\example_cookie\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\contrib\sessions\example_redis\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\contrib\static\example\bindata\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\contrib\static\example\simple\example.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\gin\gin_integration_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\gin\examples\auto-tls\example1.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\gin\examples\auto-tls\example2.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\gin\examples\basic\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\gin\examples\upload-file\multiple\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\gin-gonic\gin\examples\upload-file\single\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\github.com\ugorji\go\codec\codec_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\http2\transport_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\http2\h2demo\h2demo.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv4\bpf_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv4\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv4\multicast_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv4\readwrite_go1_8_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv4\readwrite_go1_9_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv4\unicast_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv6\bpf_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv6\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv6\multicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv6\readwrite_go1_8_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv6\readwrite_go1_9_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\ipv6\unicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\proxy\proxy_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\publicsuffix\gen.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\webdav\litmus_test_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\webdav\webdav_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\find_44634390\vendor\golang.org\x\net\websocket\websocket_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\freegeoip_902930\db.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\dubbo-go_143965255\protocol\grpc\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\dubbo-go_143965255\protocol\grpc\internal\helloworld\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\dubbo-go_143965255\protocol\grpc\internal\routeguide\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\dubbo-go_143965255\protocol\jsonrpc\http.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\dubbo-go_143965255\remoting\xds\mapping\handler_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\dubbo-go_143965255\xds\client\controller\controller.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\gameboy.live_182409579\static\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\gin_11663059\lib\proxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\echoip_6768827\http\http.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\draft-classic_90411188\cmd\draft\testdata\create\generated\html-but-actually-go\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\draft-classic_90411188\cmd\draft\testdata\create\generated\simple-go\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\draft-classic_90411188\cmd\draft\testdata\create\generated\simple-go-with-chart\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\draft-classic_90411188\cmd\draft\testdata\create\generated\simple-go-with-draftignore\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\draft-classic_90411188\cmd\draft\testdata\create\src\html-but-actually-go\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\draft-classic_90411188\cmd\draft\testdata\create\src\simple-go\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\draft-classic_90411188\cmd\draft\testdata\create\src\simple-go-with-chart\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\draft-classic_90411188\cmd\draft\testdata\create\src\simple-go-with-draftignore\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\draft-classic_90411188\cmd\draft\testdata\delete\src\simple-go-error\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\draft-classic_90411188\examples\example-go\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\draft-classic_90411188\pkg\azure\containerregistry\util.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\3\emitter_72274618\internal\command\load\load.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\emitter_72274618\internal\network\listener\listener_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\examples_173227087\assets-in-binary\example02\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\auto-tls\example1\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\auto-tls\example2\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\auto-tls\example3\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\basic\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\cookie\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\favicon\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\file-binding\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\grpc\example1\gin\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\grpc\example1\grpc\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\examples_173227087\http-pusher\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\http2\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\new_relic\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\ratelimiter\rate.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\reverse-proxy\realServer\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\reverse-proxy\reverseServer\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\template\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\upload-file\multiple\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\upload-file\single\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\versioning\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\examples_173227087\websocket\client\client.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\3\examples_173227087\websocket\server\server.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\3\enhancements_57912964\api\groups.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\doctl_36529854\integration\apps_test.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\3\doctl_36529854\pkg\listen\listen.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\3\doctl_36529854\pkg\listen\listen_test.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\3\doctl_36529854\vendor\github.com\apache\openwhisk-client-go\whisk\client.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\doctl_36529854\vendor\github.com\magiconair\properties\load.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\ENScan_GO_444442096\runner\api.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\ghq_8026846\helpers_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\3\faasd_229264940\vendor\github.com\coreos\go-systemd\journal\journal.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\faasd_229264940\vendor\github.com\openfaas\faas-provider\proxy\proxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\faasd_229264940\vendor\github.com\prometheus\client_golang\prometheus\promauto\auto.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\ergo_55980660\irc\smtp\smtp.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\ergo_55980660\vendor\github.com\ergochat\go-ident\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\ergo_55980660\vendor\github.com\okzk\sdnotify\notify_linux.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\empire_30091667\cmd\emp\run.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\empire_30091667\internal\saml\saml.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\empire_30091667\vendor\code.google.com\p\goauth2\oauth\oauth.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\empire_30091667\vendor\github.com\fsouza\go-dockerclient\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\3\empire_30091667\vendor\github.com\fsouza\go-dockerclient\client_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\empire_30091667\vendor\github.com\fsouza\go-dockerclient\container_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\empire_30091667\vendor\github.com\go-sql-driver\mysql\driver_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\empire_30091667\vendor\github.com\gocql\gocql\conn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\gim_115840068\cmd\file\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\gim_115840068\internal\connect\ws_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\fleet_13512328\fleetctl\fdforward.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\fleet_13512328\registry\rpc\rpcserver.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fleet_13512328\vendor\github.com\prometheus\client_golang\prometheus\graphite\bridge.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\fleet_13512328\vendor\golang.org\x\net\http2\h2demo\h2demo.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\fleet_13512328\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\fleet_13512328\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\fleet_13512328\vendor\golang.org\x\net\webdav\litmus_test_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\fleet_13512328\vendor\google.golang.org\api\examples\pubsub.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\fleet_13512328\vendor\google.golang.org\grpc\interop\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\fleet_13512328\vendor\google.golang.org\grpc\interop\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fleet_13512328\vendor\google.golang.org\grpc\stress\client\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fleet_13512328\vendor\google.golang.org\grpc\stress\metrics_client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\client\config\dynconfig_local_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\client\daemon\daemon.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\client\daemon\peer\piece_manager.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\client\daemon\pex\peer_exchange_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\application_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\cluster_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\config_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\job_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\oauth_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\peer_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\permission_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\personal_access_token_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\preheat_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\role_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\scheduler_cluster_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\scheduler_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\seed_peer_cluster_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\seed_peer_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\manager\handlers\user_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\pkg\rpc\health\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\scheduler\scheduler.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\test\tools\download-grpc-test\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\dragonfly_309874357\test\tools\stress\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\git-sync_66168197\main.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\gin-admin_150440579\pkg\promx\prom.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\fibratus_54714794\pkg\alertsender\slack\slack.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\fibratus_54714794\pkg\util\rest\rest.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\firecracker-containerd_157781317\internal\network_test_utils.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\eggos_302390676\app\examples\httpd\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\eggos_302390676\app\gin\server.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\eggos_302390676\app\js\vm.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\eagle_139867270\pkg\registry\etcd\registry_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\eagle_139867270\pkg\transport\grpc\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\fireworq_114781987\dispatcher\worker\http.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\3\fireworq_114781987\web\job_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\fireworq_114781987\web\misc_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\fireworq_114781987\web\queue_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\fireworq_114781987\web\routing_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\fireworq_114781987\web\server_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\easeprobe_463013407\probe\http\http.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\easeprobe_463013407\probe\websocket\ws_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\envd_480303698\pkg\ssh\ssh.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\free5gc_237391530\test\registration_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\git2go_8587669\remote_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\doc\loadtest\docker\client\doorman_client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\doorman_51149151\doc\loadtest\docker\target\target.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\doorman_51149151\go\cmd\doorman_client\doorman_client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\doorman_51149151\go\cmd\doorman_shell\doorman_shell.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\doorman_51149151\go\status\status_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\Godeps\_workspace\src\github.com\coreos\go-systemd\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\Godeps\_workspace\src\github.com\prometheus\client_golang\prometheus\process_collector_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\Godeps\_workspace\src\github.com\ugorji\go\codec\codec_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\Godeps\_workspace\src\golang.org\x\net\http2\h2demo\h2demo.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\Godeps\_workspace\src\google.golang.org\grpc\benchmark\benchmark.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\Godeps\_workspace\src\google.golang.org\grpc\examples\helloworld\greeter_client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\Godeps\_workspace\src\google.golang.org\grpc\examples\helloworld\greeter_server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\Godeps\_workspace\src\google.golang.org\grpc\examples\route_guide\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\Godeps\_workspace\src\google.golang.org\grpc\examples\route_guide\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\Godeps\_workspace\src\google.golang.org\grpc\interop\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\Godeps\_workspace\src\google.golang.org\grpc\interop\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\pkg\transport\timeout_listener_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\coreos\etcd\tools\functional-tester\etcd-tester\stresser.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\github.com\prometheus\client_golang\prometheus\process_collector_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\crypto\ssh\handshake_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\crypto\ssh\test\tcpip_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\crypto\ssh\test\test_unix_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\http2\transport_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\http2\h2demo\h2demo.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\ipv4\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\ipv4\multicast_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\ipv4\readwrite_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\ipv4\unicast_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\ipv6\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\ipv6\multicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\ipv6\readwrite_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\ipv6\unicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\proxy\proxy_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\webdav\litmus_test_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\golang.org\x\net\websocket\websocket_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\google.golang.org\grpc\benchmark\benchmark.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\google.golang.org\grpc\examples\helloworld\greeter_client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\google.golang.org\grpc\examples\helloworld\greeter_server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\google.golang.org\grpc\examples\route_guide\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\google.golang.org\grpc\examples\route_guide\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\google.golang.org\grpc\interop\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\google.golang.org\grpc\interop\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\doorman_51149151\vendor\google.golang.org\grpc\test\end2end_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\gio_321485314\app\os_wayland.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\3\gev_205671865\server_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\gev_205671865\benchmarks\net-echo-server\main.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\gev_205671865\example\protobuf\client\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\gev_205671865\example\protocol\client\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\event-gateway_90390933\tests\integration_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\gg_434620830\proxy\proxy.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\3\drpc_204571899\examples\grpc\client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\drpc_204571899\examples\grpc_and_drpc\grpc_client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\3\drpc_204571899\examples\grpc_and_drpc\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\drpc_204571899\examples\opentelemetry\client\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\eventing_124951822\vendor\github.com\ahmetb\gen-crd-api-reference-docs\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\eventing_124951822\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\eventing_124951822\vendor\knative.dev\pkg\test\spoof\spoof.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\3\geodns_5519412\health\healthtest\healthtesters.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\dotweb_73269516\framework\redis\redisutil.go,Inter-Process Communication (IPC),126,Go*,Redis in Go,"['Step 1: Import the redigo/redis package for Redis support', 'Step 2: Establish a connection to the Redis server using redis.Dial', 'Step 3: Use defer to ensure the Redis connection is properly closed', 'Step 4: Execute Redis commands such as Set, Get, lpop, lpush, HSet, and HGet']"
D:\CAE\Splited_Repository\3\FlyDB_622050087\lib\raft\master.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\FlyDB_622050087\lib\raft\slave.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\3\getAwayBSG_165990457\proxypool\proxy.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\gitchain_19696307\main.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\3\gitchain_19696307\server\http\http.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\3\find-lf_75767569\server\server.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\3\eliasdb_65619619\api\v1\rest_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\headscale_273871859\hscontrol\app.go,Inter-Process Communication (IPC),104,Go*,Advanced HTTP server with http.Server and ServeMux for custom configuration,"['Step 1: Import net/http for server and routing logic', 'Step 2: Create a custom http.Server instance for configuration', 'Step 3: Use ServeMux to create a custom multiplexer', 'Step 4: Register handlers to ServeMux', 'Step 5: Launch the server with ListenAndServe']"
D:\CAE\Splited_Repository\4\headscale_273871859\hscontrol\derp\server\derp_server.go,Inter-Process Communication (IPC),116,Go*,nhooyr.io-based websocket server in Go,"['Step 1: Import required packages', 'Step 2: Upgrade HTTP connection to WebSocket', 'Step 3: Defer connection closure', 'Step 4: Handle message reading and writing']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\clientconn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\server_ext_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\admin\test\utils.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\authz\grpc_authz_end2end_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\balancer\grpclb\grpclb_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\balancer\pickfirst\pickfirst_ext_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\balancer\pickfirst\pickfirstleaf\pickfirstleaf_ext_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\benchmark\benchmark.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\benchmark\latency\latency_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\benchmark\worker\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\binarylog\binarylog_end2end_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\credentials\xds\xds_client_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\credentials\xds\xds_server_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\advancedtls\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\authentication\client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\authz\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\cancellation\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\compression\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\customloadbalancer\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\deadline\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\debugging\client\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\debugging\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\encryption\ALTS\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\encryption\TLS\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\error_details\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\error_handling\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\flow_control\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\gracefulstop\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\health\client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\health\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\interceptor\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\keepalive\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\load_balancing\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\metadata\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\metadata_interceptor\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\multiplex\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\name_resolving\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\observability\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\opentelemetry\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\orca\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\reflection\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\retry\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\stats_monitoring\client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\stats_monitoring\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\unix_abstract\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\wait_for_ready\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\features\xds\server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\helloworld\greeter_server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\route_guide\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\examples\route_guide\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\internal\idle\idle_e2e_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\internal\stats\metrics_recorder_list_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\internal\stubserver\stubserver.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\internal\testutils\fakegrpclb\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\internal\testutils\rls\fake_rls_server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\internal\testutils\xds\e2e\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\internal\testutils\xds\fakeserver\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\internal\transport\keepalive_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\internal\transport\proxy_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\internal\transport\transport_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\test_utils.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\alts\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\alts\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\grpclb_fallback\client_linux.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\http2\negative_http2_client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\observability\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\observability\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\stress\client\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\stress\metrics_client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\xds\client\client.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\xds\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\interop\xds_federation\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\orca\producer_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\profiling\cmd\remote.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\reflection\test\serverreflection_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\resolver\manual\manual_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\security\advancedtls\advancedtls_integration_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\stats\stats_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\authority_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\balancer_switching_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\balancer_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\channelz_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\clientconn_state_transition_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\creds_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\end2end_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\goaway_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\gracefulstop_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\healthcheck_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\insecure_creds_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\local_creds_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\resolver_update_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\retry_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\stats_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\xds\xds_client_certificate_providers_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\xds\xds_client_federation_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\xds\xds_security_config_nack_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\xds\xds_server_integration_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\test\xds\xds_server_rbac_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\xds\server_ext_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\xds\server_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\xds\googledirectpath\googlec2p_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\xds\internal\balancer\outlierdetection\balancer_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\xds\internal\balancer\ringhash\e2e\ringhash_balancer_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\xds\internal\server\listener_wrapper_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-go_27729907\xds\internal\xdsclient\transport\grpctransport\grpctransport_ext_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\go-redis_5179099\redis_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\golangci-lint_132145189\pkg\golinters\gosec\testdata\gosec_severity_confidence.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\hysteria_257434373\app\internal\forwarding\udp_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\hysteria_257434373\app\internal\http\server_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\grpcurl_111431261\grpcurl_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpcurl_111431261\cmd\grpcurl\grpcurl.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\grpcurl_111431261\internal\testing\cmd\bankdemo\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpcurl_111431261\internal\testing\cmd\testserver\testserver.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\gopsutil_18906266\net\net_linux_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gopsutil_18906266\process\process_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\grumpy_77073851\runtime\builtin_types_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\4\grumpy_77073851\runtime\module_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\4\go-cqhttp_281694167\server\http.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go-cqhttp_281694167\server\websocket.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\41_TCP\02_listen\main.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\41_TCP\03_dial\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\41_TCP\04_echo-server\v01\main.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\41_TCP\04_echo-server\v02\main.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\44_MUX_routing\08_HandleFunc\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\45_serving-files\01\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\45_serving-files\02\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\45_serving-files\03\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\45_serving-files\04_io-Copy\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\45_serving-files\05_ServeContent\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\45_serving-files\06_ServeFile\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\45_serving-files\07_FileServer\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\45_serving-files\08_FileServer\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\45_serving-files\09_FileServer\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\46_errata\01_set-header\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\46_errata\02_URL\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\46_errata\03_URL\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\46_errata\04_URL\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\46_errata\05_ServeFile\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\47_templates\x03_exercises\02\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\47_templates\x03_exercises\03_template_csv-parse\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\01_URL-values\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\02_form-values\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\03_form-values\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\04_form-values\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\05_form-values\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\06_form-values\01\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\06_form-values\02\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\07_form-data\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\08_form_file-upload\01\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\08_form_file-upload\02\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\08_form_file-upload\03\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\48_passing-data\08_form_file-upload\04\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\01_set-cookie\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\02_get-cookie\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\03_sessions\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\04_sessions\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\05_sessions-HMAC\01\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\05_sessions-HMAC\02\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\06_sessions_GORILLA\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\07_cookies_show-visits\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\08_log-in-out\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\09_HTTPS-TLS\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\10_HTTPS-TLS\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\49_cookies-sessions\11_HTTPS-TLS\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\98-good-student-code\daniel\Week8\firstTemplate\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\98-good-student-code\daniel\Week8\formExample\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\98-good-student-code\daniel\Week8\httpAnimals\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\98-good-student-code\daniel\Week8\secureHello\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\25_http-server_DefaultServeMux\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\26_serving-files_io-Copy\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\27_serving-files_ServeContent\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\28_serving-files_ServeFile\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\29_serving-files_FileServer\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\30_serving-files_FileServer\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\31_serving-files_FileServer\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\33_set-cookie\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\34_get-cookie\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\35_favicon-bye-bye\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\36_sessions_cookie\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\40_sessions_GORILLA\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\41_sessions_GORILLA_log-in-out\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\43_sessions_GORILLA_JSON\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\GolangTraining_40453691\27_code-in-process\99_svcc\46_HTTPS-TLS\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-cloud_126250425\blob\s3blob\s3blob.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\4\imgproxy_94897336\healthcheck.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gotenberg_126493684\pkg\modules\api\api.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\gotenberg_126493684\pkg\modules\api\context_test.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\gotenberg_126493684\pkg\modules\webhook\middleware_test.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-sqlite3_2755696\_example\vtable\vtable.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-app_70646781\docs\src\snipets\start.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-app_70646781\pkg\app\http_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gosec_63625434\testutils\g107_samples.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gosec_63625434\testutils\g108_samples.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gosec_63625434\testutils\g304_samples.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-ibax_290724437\packages\utils\ntp.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gopl.io_30219994\ch1\lissajous\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gopl.io_30219994\ch12\search\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gopl.io_30219994\ch7\surface\surface.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gopl.io_30219994\ch8\netcat1\netcat.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gopl.io_30219994\ch8\netcat2\netcat.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gopl.io_30219994\ch9\memotest\memotest.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gotop_122030607\vendor\golang.org\x\sys\unix\mksysnum.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gobyexample_5896437\examples\context\context.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gobyexample_5896437\examples\http-server\http-server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\goim_34854605\benchmarks\push_room\main.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gopacket_32351944\layers\gen.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-grpc-middleware_58821882\interceptors\client_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\go-grpc-middleware_58821882\interceptors\server_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\go-grpc-middleware_58821882\testing\testpb\interceptor_suite.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\go-grpc-middleware_58821882\testing\testpb\pingservice_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\examples\http-proxy\proxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\http\libp2phttp.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\muxer\testsuite\mux.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\net\swarm\swarm_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\net\upgrader\listener_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\security\noise\transport_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\security\tls\transport_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\transport\quicreuse\connmgr_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\transport\tcpreuse\listener_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\transport\tcpreuse\internal\sampledconn\sampledconn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\transport\webrtc\transport_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\transport\webrtc\udpmux\mux_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\transport\websocket\websocket_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-libp2p_43465675\p2p\transport\webtransport\transport_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goproxy_3802828\https.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goproxy_3802828\proxy_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\goproxy_3802828\examples\goproxy-transparent\transparent.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\goproxy_3802828\examples\websockets\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gopass_80723074\pkg\clipboard\copy_darwin.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\4\gitrob_28916646\core\router.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gocron_82515080\internal\modules\httpclient\http_client.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gocron_82515080\internal\modules\rpc\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day81-82(gRPC远程调用机制)\code\ClientStreamCode\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day81-82(gRPC远程调用机制)\code\gRPCInterceptor\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day81-82(gRPC远程调用机制)\code\grpcSSLCode\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day81-82(gRPC远程调用机制)\code\gRPCTokenCode\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\Golang-100-Days_199952039\Day81-82(gRPC远程调用机制)\code\ServerStreamCode\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\goproxy_146863879\proxy\router.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-socket.io_11388110\_examples\default-http\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-socket.io_11388110\_examples\pprof\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-astilectron_89053951\astilectron_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\Go-SCP_87070385\src\access-control\URL.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\Go-SCP_87070385\src\session-management\session.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\graphql-go_71253874\example\caching\server\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\graphql-go_71253874\example\directives\authorization\server\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\graphql-go_71253874\example\enum\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\graphql-go_71253874\example\federation\compatibility\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\graphql-go_71253874\example\social\server\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\graphql-go_71253874\example\starwars\server\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\golang-for-nodejs-developers_163927392\examples\http_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\grpc-web_64409189\go\grpcweb\health_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\grpc-web_64409189\go\grpcweb\wrapper_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\grpc-web_64409189\go\grpcwebproxy\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\goflyway_100870617\server.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\godropbox_21108219\cinterop\test\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\godropbox_21108219\io2\write_to_conn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-mysql-elasticsearch_29291158\elastic\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\google-api-go-client_27096595\transport\bytestream\client_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-api-go-client_27096595\transport\grpc\dial.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-api-go-client_27096595\transport\grpc\pool_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\go-stress-testing_202478438\tests\servers.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-stress-testing_202478438\tests\grpc\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\img_113604197\vendor\github.com\containerd\containerd\remotes\docker\authorizer.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\img_113604197\vendor\github.com\docker\distribution\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\img_113604197\vendor\github.com\docker\docker\pkg\chrootarchive\archive_unix.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\4\img_113604197\vendor\github.com\docker\docker\registry\endpoint_v1.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\img_113604197\vendor\github.com\docker\docker\registry\session.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\img_113604197\vendor\github.com\moby\buildkit\session\grpc.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\img_113604197\vendor\github.com\moby\buildkit\session\sshforward\sshprovider\agentprovider.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\img_113604197\vendor\github.com\opentracing-contrib\go-stdlib\nethttp\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gofr_709242076\pkg\gofr\context_test.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\auth\grpctransport\dial_socketopt_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\auth\grpctransport\grpctransport.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\auth\grpctransport\grpctransport_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\auth\grpctransport\pool_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\bigtable\bigtable_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\bigtable\conformance_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\bigtable\metrics_monitoring_exporter_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\bigtable\bttest\inmem.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\bigtable\internal\mockserver\inmem.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\bigtable\internal\testproxy\proxy.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\bigtable\internal\testproxy\proxy_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\compute\metadata\metadata.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\datastore\integration_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\httpreplay\cmd\httpr\integration_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\internal\examples\fake\fake_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\internal\testutil\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\internal\testutil\server_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\logging\logging_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\pubsub\pstest_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\pubsub\timeout_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\pubsub\topic_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\pubsub\internal\benchwrapper\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\pubsub\pstest\examples_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\pubsub\pstest\fake_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\rpcreplay\example_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\rpcreplay\fake_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\rpcreplay\rpcreplay.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\rpcreplay\rpcreplay_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\spanner\client_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\spanner\metric_monitoring_exporter_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\spanner\internal\benchwrapper\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\spanner\spannertest\inmem.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\google-cloud-go_19608522\spanner\test\cloudexecutor\worker_proxy.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\ion_175070907\pkg\util\grpc.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\bigtable\bigtable_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\bigtable\bttest\inmem.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\datastore\integration_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\httpreplay\cmd\httpr\integration_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\internal\testutil\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\internal\testutil\server_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\logging\logging_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\pubsub\pstest_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\pubsub\timeout_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\pubsub\topic_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\pubsub\pstest\examples_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\rpcreplay\fake_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\rpcreplay\rpcreplay.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\rpcreplay\rpcreplay_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\cloud.google.com\go\trace\grpc_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\github.com\googleapis\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\github.com\googleapis\gnostic\plugins\gnostic-go-generator\render_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\crypto\acme\acme.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\crypto\ssh\handshake_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\crypto\ssh\agent\client_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\crypto\ssh\test\dial_unix_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\crypto\ssh\test\test_unix_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\http2\server_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\http2\transport_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\http2\h2demo\h2demo.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\internal\socks\dial_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv4\bpf_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv4\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv4\multicast_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv4\readwrite_go1_8_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv4\readwrite_go1_9_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv4\unicast_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv6\bpf_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv6\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv6\multicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv6\readwrite_go1_8_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv6\readwrite_go1_9_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\ipv6\unicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\publicsuffix\gen.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\webdav\litmus_test_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\webdav\webdav_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\net\websocket\websocket_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\tools\cmd\getgo\download.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\tools\cmd\godoc\appinit.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\tools\cmd\godoc\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\golang.org\x\tools\cmd\heapview\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\google.golang.org\appengine\internal\api_pre17.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\google.golang.org\appengine\internal\internal_vm_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\connection_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\k8s.io\apimachinery\pkg\util\proxy\upgradeaware.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\k8s.io\apimachinery\pkg\util\proxy\upgradeaware_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\k8s.io\client-go\plugin\pkg\client\auth\oidc\oidc.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gitkube_124346949\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\goldmark_183616214\_tools\gen-unicode-case-folding-map.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gizmo_48060472\server\kit\kitserver_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gobgp_24011030\pkg\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\go-profiler-notes_327719215\examples\block-net\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gometalinter_22629932\_linters\src\github.com\securego\gosec\testutils\source.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\ignite_179326472\pkg\runtime\containerd\client.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\4\ignite_179326472\pkg\runtime\containerd\io.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\4\ignite_179326472\vendor\github.com\docker\docker\client\hijack.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\ignite_179326472\vendor\github.com\googleapis\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\ignite_179326472\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\ignite_179326472\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\ignite_179326472\vendor\github.com\miekg\dns\xfr.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\ignite_179326472\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\ignite_179326472\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\goby_81311270\vendor\github.com\lib\pq\conn.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goby_81311270\vm\simple_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\goby_81311270\vm\simple_server_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gleam_66631967\distributed\agent\agent_grpc_server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\gleam_66631967\distributed\executor\executor_grpc_server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\gleam_66631967\distributed\master\master.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\gleam_66631967\distributed\netchan\channels.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go-metrics_2823239\graphite.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go-metrics_2823239\opentsdb.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\GoSublime_2281177\something_borrowed\Go\generate.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\GoSublime_2281177\src\margo.sh\vendor\golang.org\x\sys\unix\mksysnum.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\glider_97128069\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\glider_97128069\pkg\smux\session_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\glider_97128069\proxy\http\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\glider_97128069\proxy\pxyproto\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\glider_97128069\proxy\socks5\server.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\glider_97128069\proxy\trojan\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\glider_97128069\proxy\udp\udp.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\glider_97128069\proxy\unix\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\glider_97128069\proxy\vless\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\glider_97128069\proxy\vsock\socket.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\glider_97128069\proxy\ws\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-containerregistry_125253663\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\go-containerregistry_125253663\vendor\github.com\docker\docker\client\hijack.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go-containerregistry_125253663\vendor\golang.org\x\oauth2\google\internal\externalaccount\aws.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-containerregistry_125253663\vendor\golang.org\x\oauth2\google\internal\externalaccount\sts_exchange.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-containerregistry_125253663\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-containerregistry_125253663\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-i18n_3180553\example\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-pry_31686893\example\goroutine\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gowebsocket_199363403\servers\grpcclient\grpc_client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\gowebsocket_199363403\servers\grpcserver\grpc_server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\server\app.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\echo.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\auto-tls\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\cors\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\crud\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\embed-resources\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\file-upload\multiple\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\file-upload\single\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\hello-world\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\http2\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\jsonp\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\jwt\custom-claims\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\jwt\map-claims\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\middleware\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\streaming-response\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\subdomains\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\github.com\labstack\echo\cookbook\websocket\gorilla\server.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\crypto\acme\acme.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\crypto\ssh\handshake_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\crypto\ssh\agent\client_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\crypto\ssh\test\tcpip_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\crypto\ssh\test\test_unix_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\http2\transport_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\http2\h2demo\h2demo.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv4\bpf_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv4\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv4\multicast_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv4\readwrite_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv4\unicast_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv6\bpf_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv6\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv6\multicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv6\readwrite_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\ipv6\unicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\proxy\proxy_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\publicsuffix\gen.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\webdav\litmus_test_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\webdav\webdav_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-starter-kit_37374972\vendor\golang.org\x\net\websocket\websocket_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gochat_218706050\connect\websocket.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gochat_218706050\site\site.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gochat_218706050\vendor\github.com\coreos\go-systemd\v22\journal\journal_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gochat_218706050\vendor\github.com\magiconair\properties\load.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gochat_218706050\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gochat_218706050\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gochat_218706050\vendor\github.com\miekg\dns\xfr.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gochat_218706050\vendor\github.com\rcrowley\go-metrics\graphite.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gochat_218706050\vendor\github.com\rcrowley\go-metrics\opentsdb.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gochat_218706050\vendor\github.com\samuel\go-zookeeper\zk\flw.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gochat_218706050\vendor\github.com\smallnest\rpcx\client\xclient.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gochat_218706050\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gochat_218706050\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\golang-guide_522195286\golang\go-study\exercise\framework\gin\test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\4\golang-guide_522195286\golang\go-study\exercise\Go\Gin\Bind Header.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\4\golang-guide_522195286\golang\go-study\exercise\Go\Gin\ip\获取ip地址.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\4\golang-guide_522195286\golang\go-study\exercise\Go\Gin\stream\流式返回.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\4\golang-guide_522195286\project\data-sync\mysql-to-mysql\ad_material\ad_material_sync_success.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\golang-guide_522195286\project\业务\字节广告\images\images2.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\golang-guide_522195286\project\业务\字节广告\vedio\vedio2.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\golang-guide_522195286\微服务\code\gRPC\hello_gRPC_client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\golang-guide_522195286\微服务\code\gRPC\hello_gRPC_server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\golang-guide_522195286\微服务\code\HTTP调用RESTful API\client.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\golang-guide_522195286\微服务\code\HTTP调用RESTful API\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\joy4_62488727\examples\http_flv_and_rtmp_server\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\github.com\bluebreezecf\opentsdb-goclient\client\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\github.com\coreos\go-systemd\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\github.com\coreos\go-systemd\journal\journal.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\github.com\go-openapi\swag\loading.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\github.com\googleapis\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\github.com\hawkular\hawkular-client-go\metrics\client.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\github.com\influxdata\influxdb\client\influxdb.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\github.com\rcrowley\go-metrics\graphite.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\github.com\rcrowley\go-metrics\opentsdb.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\github.com\smartystreets\go-aws-auth\common.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\k8s.io\apimachinery\pkg\util\proxy\upgradeaware.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\k8s.io\apiserver\pkg\storage\etcd\util\etcd_util.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\heapster_23272510\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gse_95233790\tools\server\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\golang-gin-realworld-example-app_105569787\hello.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\4\goreman_5790740\_example\web.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-systemd_12821303\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go-systemd_12821303\journal\journal_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goqu_31097246\vendor\github.com\lib\pq\conn.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go-quai_392810918\metrics_config\metrics.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-quai_392810918\quaistats\quaistats.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-quai_392810918\rpc\websocket_test.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\4\goread_8769058\_third_party\github.com\MiniProfiler\go\miniprofiler\doc.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\hoverfly_47131865\vendor\github.com\codegangsta\negroni\negroni.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\hoverfly_47131865\vendor\github.com\jackwakefield\gopac\parser.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\hoverfly_47131865\vendor\github.com\rcrowley\go-metrics\graphite.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\hoverfly_47131865\vendor\github.com\rcrowley\go-metrics\opentsdb.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\hoverfly_47131865\vendor\github.com\SpectoLabs\goproxy\https.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\goldfish_79487641\server\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\Azure\go-autorest\autorest\adal\token.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\circonus-labs\circonus-gometrics\submit.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\circonus-labs\circonus-gometrics\api\api.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\denisenkom\go-mssqldb\tds.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\hashicorp\consul\api\api.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\hashicorp\go-plugin\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\hashicorp\scada-client\provider.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\hashicorp\vault\builtin\credential\aws\path_login.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\hashicorp\vault\builtin\logical\ssh\communicator.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\hashicorp\vault\physical\couchdb\couchdb_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\hashicorp\vault\vault\request_forwarding.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\hashicorp\vault\vault\testing.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\labstack\echo\echo.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\labstack\echo\middleware\proxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\lib\pq\conn.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\samuel\go-zookeeper\zk\flw.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\SAP\go-hdb\internal\protocol\sniffer.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\github.com\sstarcher\go-okta\api.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\golang.org\x\crypto\acme\acme.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\goldfish_79487641\vendor\layeh.com\radius\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goHackTools_94073609\projects\11_netcat\replacingNetcat.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\goHackTools_94073609\projects\14_TCPProxy\proxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goHackTools_94073609\projects\63_icmpPayload\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goHackTools_94073609\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goHackTools_94073609\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\goHackTools_94073609\vendor\github.com\miekg\dns\xfr.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\goHackTools_94073609\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\goHackTools_94073609\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\gotestsum_126215645\cmd\main_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\4\gryffin_41846168\html-distance\feature_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\hyperd_36214040\client\api\hijack.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\hyperd_36214040\client\api\rpc\rpclient_demo.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\hyperd_36214040\integration\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\coreos\go-systemd\journal\journal.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\docker\distribution\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\docker\docker\daemon\logger\splunk\splunk.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\docker\docker\registry\endpoint.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\docker\docker\registry\session.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\docker\libnetwork\sandbox_externalkey_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\docker\libnetwork\portmapper\proxy.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\hashicorp\consul\api\api.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\hashicorp\memberlist\net.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\hyperhq\runv\hypervisor\vm_console.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\hyperhq\runv\hypervisor\kvmtool\lkvm.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\miekg\dns\xfr.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\hyperd_36214040\vendor\github.com\samuel\go-zookeeper\zk\flw.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gotrace_53668532\web.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\gobetween_60521033\src\healthcheck\probe.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go_10373529\codec\codec_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gitops-engine_211406020\agent\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\joker_76160954\main.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\joker_76160954\std\http\http_native.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\inspeqtor_20896284\expose\memstats.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\inspeqtor_20896284\metrics\daemon\nginx.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gwp_30534985\Chapter_1_Go_And_Web_Applications\first_webapp\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\goflow_3389838\runtime.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\goflow_3389838\runtime_test.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\4\gitjacker_298060777\internal\pkg\gitjacker\retriever.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gogo_504051070\v2\engine\icmpScan.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gonet_123211880\server\game\cmd\web.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-control-plane_107708884\internal\example\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\go-control-plane_107708884\internal\upstream\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-control-plane_107708884\pkg\client\sotw\v3\client_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\go-control-plane_107708884\pkg\test\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\gopher_385439239\advanced\example\go_ping.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gopher_385439239\blog\example\grpc-hello\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\4\jaeger-client-go_56550961\testutils\udp_transport_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\jaeger-client-go_56550961\transport\http_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\jaeger-client-go_56550961\transport\zipkin\http.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\jaeger-client-go_56550961\utils\http_json.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\jaeger-client-go_56550961\utils\reconnecting_udp_conn_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\joy_104183702\internal\chrome\downloader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\go-tun2socks_138587856\tun\stop.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\jet_55167435\examples\asset_packaging\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\jet_55167435\examples\todos\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\Golin_602941267\poc\AuthZookeeper.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\Golin_602941267\Protocol\mysql.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\Golin_602941267\scan\crack\telnet.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\go-langserver_70617656\main.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-langserver_70617656\debugserver\debug.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\4\go-langserver_70617656\langserver\langserver_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\jprq_256722315\cli\jprqc.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\horusec_293792548\internal\controllers\analyzer\analyzer_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\4\iox_242277226\operate\fwd.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\iox_242277226\operate\proxy.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\iox_242277226\socks5\socks5.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\4\gohangout_118875954\filter\translate.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\gohangout_118875954\output\bulk_http.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\4\haproxy-ingress_81008374\pkg\acme\x\acme\acme.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\4\haproxy-ingress_81008374\pkg\acme\x\acme\integration_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\4\go-microservices_153859939\src\user-microservice\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\5\kit_30215630\tracing\zipkin\grpc_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\kit_30215630\transport\http\server_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kit_30215630\transport\http\jsonrpc\server_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\micro_53632140\internal\config\plugin_installer.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\micro_53632140\tools\remove-nightly-assets.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kratos_165041732\contrib\registry\etcd\registry_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\kratos_165041732\transport\grpc\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learn-go-with-tests_123572362\di\v2\di.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\learn-go-with-tests_123572362\q-and-a\http-handlers-revisited\still_basic.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\learn-go-with-tests_123572362\websockets\v1\server_test.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\5\kcptun_52595226\server\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kcptun_52595226\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\kcptun_52595226\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\kubeshark_359419233\cmd\console.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\5\kompose_62088377\examples\web\vendor\github.com\codegangsta\negroni\negroni.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\keda_170411418\pkg\metricsservice\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\keda_170411418\pkg\scalers\beanstalkd_scaler_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\keda_170411418\pkg\scalers\external_scaler_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\keda_170411418\pkg\scalers\predictkube_scaler_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\cloud.google.com\go\auth\grpctransport\grpctransport.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\github.com\arangodb\go-driver\http\connection.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\github.com\coreos\go-systemd\v22\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\github.com\coreos\go-systemd\v22\journal\journal_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\github.com\google\s2a-go\s2a_options.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\github.com\jcmturner\gokrb5\v8\client\network.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\github.com\rcrowley\go-metrics\graphite.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\github.com\rcrowley\go-metrics\opentsdb.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\github.com\segmentio\kafka-go\dialer.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\golang.org\x\oauth2\google\externalaccount\aws.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\golang.org\x\oauth2\google\internal\stsexchange\sts_exchange.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\google.golang.org\api\transport\grpc\dial.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\keda_170411418\vendor\k8s.io\kms\pkg\service\grpc_service.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\lego_37038121\challenge\http01\http_challenge_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\lnd_49765480\lnd.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\lnd_49765480\brontide\noise_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\lnd_49765480\discovery\bootstrapper.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\lnd_49765480\itest\lnd_rest_api_test.go,Inter-Process Communication (IPC),117,Go*,nhooyr.io-based websocket client in Go,"['Step 1: Import required packages', 'Step 2: Establish WebSocket connection', 'Step 3: Defer connection closure', 'Step 4: Send and receive WebSocket messages']"
D:\CAE\Splited_Repository\5\lnd_49765480\lnrpc\routerrpc\router_server.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\lnd_49765480\lntest\node\harness_node.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\lnd_49765480\tor\tor.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kitex_384451028\pkg\remote\trans\nphttp2\grpc\keepalive_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kitex_384451028\pkg\remote\trans\nphttp2\grpc\transport_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\cloud\pkg\cloudhub\servers\udsserver\uds.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\cloud\pkg\csidriver\utils.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\edge\pkg\devicetwin\dmiserver\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\edge\test\test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\edgesite\cmd\edgesite-server\app\server.go,Inter-Process Communication (IPC),104,Go*,Advanced HTTP server with http.Server and ServeMux for custom configuration,"['Step 1: Import net/http for server and routing logic', 'Step 2: Create a custom http.Server instance for configuration', 'Step 3: Use ServeMux to create a custom multiplexer', 'Step 4: Register handlers to ServeMux', 'Step 5: Launch the server with ListenAndServe']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\staging\src\github.com\kubeedge\beehive\pkg\core\socket\modules\socket\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\staging\src\github.com\kubeedge\mapper-framework\pkg\grpcclient\register.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\staging\src\github.com\kubeedge\mapper-framework\pkg\grpcclient\report.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\staging\src\github.com\kubeedge\mapper-framework\pkg\grpcserver\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\github.com\coreos\go-systemd\v22\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\github.com\coreos\go-systemd\v22\journal\journal_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\github.com\docker\distribution\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\github.com\google\cadvisor\container\crio\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\github.com\google\s2a-go\s2a_options.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\github.com\lib\pq\conn.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\github.com\opencontainers\runc\libcontainer\container_linux.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\github.com\opencontainers\runc\libcontainer\process_linux.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\github.com\opencontainers\runc\libcontainer\userns\userns_maps_linux.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\golang.org\x\oauth2\google\internal\externalaccount\aws.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\golang.org\x\oauth2\google\internal\stsexchange\sts_exchange.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\k8s.io\kms\pkg\service\grpc_service.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\k8s.io\kubernetes\cmd\kubeadm\app\util\etcd\etcd.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\k8s.io\kubernetes\pkg\kubelet\cm\devicemanager\plugin\v1beta1\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\k8s.io\kubernetes\pkg\kubelet\cm\devicemanager\plugin\v1beta1\stub.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\k8s.io\kubernetes\pkg\kubelet\pluginmanager\pluginwatcher\example_plugin.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\k8s.io\kubernetes\pkg\volume\csi\csi_client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\k8s.io\kubernetes\test\e2e\storage\drivers\csi-test\driver\driver.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\k8s.io\legacy-cloud-providers\gce\gcpcredential\credentialutil.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kubeedge_150713223\vendor\sigs.k8s.io\apiserver-network-proxy\cmd\agent\app\server.go,Inter-Process Communication (IPC),104,Go*,Advanced HTTP server with http.Server and ServeMux for custom configuration,"['Step 1: Import net/http for server and routing logic', 'Step 2: Create a custom http.Server instance for configuration', 'Step 3: Use ServeMux to create a custom multiplexer', 'Step 4: Register handlers to ServeMux', 'Step 5: Launch the server with ListenAndServe']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\bridge\api\api.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\harmony-development\shibshib\gen\chat\v1\chat_hrpc_client.pb.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\hashicorp\go-plugin\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\hashicorp\go-plugin\testing.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\labstack\echo\v4\echo.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\labstack\echo\v4\middleware\proxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\lrstanley\girc\conn.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\magiconair\properties\load.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\mattermost\mattermost\server\public\model\client4.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\Rhymen\go-whatsapp\media.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\yaegashi\msgraph.go\msauth\device_authorization_grant.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\yaegashi\msgraph.go\msauth\msauth.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\github.com\yaegashi\msgraph.go\msauth\storage.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\matterbridge_44820350\vendor\layeh.com\gumble\gumble\ping.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\machine_27494663\drivers\softlayer\softlayer.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\machine_27494663\drivers\vmwarefusion\fusion_darwin.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\machine_27494663\libmachine\mcnutils\b2d.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\machine_27494663\vendor\github.com\Azure\azure-sdk-for-go\storage\client.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\machine_27494663\vendor\github.com\exoscale\egoscale\dns.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\machine_27494663\vendor\github.com\vmware\govmomi\vim25\soap\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\machine_27494663\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\machine_27494663\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\machine_27494663\vendor\google.golang.org\cloud\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\kingshard_38518423\vendor\github.com\labstack\echo\echo.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\5\kingshard_38518423\vendor\github.com\labstack\echo\middleware\proxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kingshard_38518423\vendor\golang.org\x\crypto\acme\acme.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\k3d_179063508\vendor\github.com\docker\cli\cli\trust\trust.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\k3d_179063508\vendor\github.com\docker\distribution\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\k3d_179063508\vendor\github.com\magiconair\properties\load.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\maddy_73098043\systemd.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\KubeOperator_158171016\pkg\service\cluster_health.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\KubeOperator_158171016\pkg\util\message\client\work_weixin.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\KubeOperator_158171016\pkg\util\msg\client\work_weixin.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kruise_189490177\pkg\daemon\criruntime\imageruntime\cri.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\lucky_513701178\module\portforward\socketproxy\tcpproxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\lucky_513701178\socketproxy\tcpproxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\lucky_513701178\thirdlib\gdylib\blinker\device.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\lucky_513701178\thirdlib\go-wol\wol.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\lucky_513701178\web\web.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\5\jupiter_243518322\pkg\client\grpc\common_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\jupiter_243518322\pkg\client\grpc\balancer\p2c\least_loaded_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\jupiter_243518322\pkg\client\rocketmq\producer.go,Inter-Process Communication (IPC),127,Go*,RocketMQ producer in Go,"['Step 1: Import the RocketMQ Go client package', 'Step 2: Create a new producer with specified configuration options', 'Step 3: Start the producer before sending messages to brokers', 'Step 4: Send messages using Sync, Async, or OneWay modes']"
D:\CAE\Splited_Repository\5\jupiter_243518322\pkg\client\rocketmq\push_consumer.go,Inter-Process Communication (IPC),128,Go*,RocketMQ consumer in Go,"['Step 1: Import the RocketMQ Go client package', 'Step 2: Create a new push consumer and set relevant options', 'Step 3: Subscribe to one or more topics and define a message handler callback', 'Step 4: Start the consumer to receive and process messages']"
D:\CAE\Splited_Repository\5\jupiter_243518322\pkg\server\xgrpc\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\jupiter_243518322\proto\helloworld\v1\gin_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\5\jupiter_243518322\test\e2e\server\xgin.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\5\litefs_484136945\http\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\litefs_484136945\http\proxy_server.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kscan_332606283\core\hydra\redis\redis.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kscan_332606283\lib\tcpping\tcpping.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\libretaxi_56734422\rabbit\rabbit.go,Inter-Process Communication (IPC),121,Go*,Simple Rabbitmq producer in go,"['Step 1: Import the streadway/amqp package', 'Step 2: Establish a connection to the RabbitMQ server', 'Step 3: Open a channel from the connection', 'Step 4: Declare an exchange (optional depending on use case)', 'Step 5: Declare a queue to publish messages to', 'Step 6: Publish a message to the declared queue or exchange']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\all_packaged_library\push\huawei\push.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\docker\docker.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\etcd\etcd-grpc\client_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\etcd\etcd-grpc\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\flink_kafka_clickhouse\kafka.go,Inter-Process Communication (IPC),125,Go*,Kafka Async producer in Go,"['Step 1: Import the sarama package', 'Step 2: Create and configure a new sarama.Config instance', 'Step 3: Instantiate an asynchronous Kafka producer', 'Step 4: Ensure producer resources are closed with defer', 'Step 5: Prepare a message to be sent using sarama.ProducerMessage', 'Step 6: Collect or read user input before sending the message']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v11\user_agent\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v11\user_agent\client\user_agent_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v11\user_agent\client\user_client.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v5\v5_user\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v5\v5_user\client\grpc_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v6\user_agent\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v6\user_agent\client\user_agent_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v7\user_agent\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v7\user_agent\client\user_agent_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v8\user_agent\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v8\user_agent\client\user_agent_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v9\user_agent\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\go-kit\v9\user_agent\client\user_agent_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\grpc\bidirectional_streaming_rpc\howie_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\grpc\bidirectional_streaming_rpc\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\grpc\server_side_streaming_rpc\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\grpc\simple_rpc\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\hlb-grpc\example\client_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\hlb-grpc\example\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\istio\logic_v1\logicV1.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\istio\logic_v2\logicV2.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\istio\logic_v3\logicV3.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\k8s\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\k8s\ci-cd\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\kafka\kafka_test.go,Inter-Process Communication (IPC),124,Go*,Kafka consumer in Go,"['Step 1: Import the sarama package', 'Step 2: Create a new Kafka consumer using sarama.NewConsumer', 'Step 3: Retrieve the available partitions for a given topic', 'Step 4: Ensure producer resources are closed with defer', 'Step 4: Start consuming from a specific partition']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\kafka\main.go,Inter-Process Communication (IPC),125,Go*,Kafka Async producer in Go,"['Step 1: Import the sarama package', 'Step 2: Create and configure a new sarama.Config instance', 'Step 3: Instantiate an asynchronous Kafka producer', 'Step 4: Ensure producer resources are closed with defer', 'Step 5: Prepare a message to be sent using sarama.ProducerMessage', 'Step 6: Collect or read user input before sending the message']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\kafka\offset_test.go,Inter-Process Communication (IPC),123,Go*,Kafka Sync producer in Go,"['Step 1: Import the sarama package', 'Step 2: Create and configure a new sarama.Config instance', 'Step 3: Instantiate a synchronous Kafka producer', 'Step 4: Ensure producer resources are closed with defer', 'Step 5: Prepare a message to be sent using sarama.ProducerMessage', ""Step 6: Send the message using the producer's SendMessage method""]"
D:\CAE\Splited_Repository\5\learning_tools_137360315\minio\old\minio_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\push\push_test.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\rocketmq\mq_test.go,Inter-Process Communication (IPC),127,Go*,RocketMQ producer in Go,"['Step 1: Import the RocketMQ Go client package', 'Step 2: Create a new producer with specified configuration options', 'Step 3: Start the producer before sending messages to brokers', 'Step 4: Send messages using Sync, Async, or OneWay modes']"
D:\CAE\Splited_Repository\5\learning_tools_137360315\tcp\howie_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\memberlist_12712630\net_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\memberlist_12712630\net_transport.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\mergestat-lite_276976140\cmd\serve.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\kyanos_793985221\agent\agent_utils_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\manba_57028434\cmd\backend\backend.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\5\manba_57028434\pkg\util\metric_push.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\kube-no-trouble_254161684\pkg\collector\file_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\5\kite_17035868\registerurl.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kite_17035868\kitectl\command\install.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\LeetCode-in-Go_97006318\Helper\leetcode-getGraphql.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\minikeyvalue_178999736\src\lib.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\minikeyvalue_178999736\tools\thrasher.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\k8s-device-plugin_106473613\tests\vendor\github.com\docker\distribution\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\k8s-device-plugin_106473613\tests\vendor\github.com\gonvenience\ytbx\input.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\k8s-device-plugin_106473613\tests\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\k8s-device-plugin_106473613\tests\vendor\github.com\lib\pq\conn.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\k8s-device-plugin_106473613\tests\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\k8s-device-plugin_106473613\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\k8s-device-plugin_106473613\vendor\github.com\opencontainers\runc\libcontainer\userns\userns_maps_linux.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\5\mc_29329884\pkg\deadlineconn\deadlineconn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\kubectl_86742497\pkg\cmd\edit\testdata\record.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\kubefed_116825580\cmd\controller-manager\app\controller-manager.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\minishift_62728051\pkg\minishift\update\update.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\minishift_62728051\vendor\github.com\containers\image\docker\docker_client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\minishift_62728051\vendor\github.com\docker\distribution\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\minishift_62728051\vendor\github.com\docker\docker\client\hijack.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\minishift_62728051\vendor\github.com\docker\machine\drivers\vmwarefusion\fusion_darwin.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\minishift_62728051\vendor\github.com\docker\machine\libmachine\mcnutils\b2d.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\minishift_62728051\vendor\github.com\elazarl\goproxy\https.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\minishift_62728051\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\minishift_62728051\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\minishift_62728051\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kapacitor_41681600\client\v1\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kapacitor_41681600\influxdb\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kapacitor_41681600\services\alert\handlers.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kapacitor_41681600\services\kafka\kafkatest\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\kapacitor_41681600\services\sensu\service.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kubectl-debug_162127381\pkg\agent\runtime.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\local-path-provisioner_150468186\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\local-path-provisioner_150468186\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\local-path-provisioner_150468186\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\local-path-provisioner_150468186\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\local-path-provisioner_150468186\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\ldap_25279567\v3\conn_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kubernetes-ingress-controller_127765544\test\e2e\utils_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kubernetes-ingress-controller_127765544\test\integration\ingress_https_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kubernetes-ingress-controller_127765544\test\integration\tlsroute_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kubernetes-ingress-controller_127765544\test\internal\helpers\http.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kube-vip_237778673\testing\e2e\e2e\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\resolver.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\sandbox_externalkey_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\cmd\diagnostic\main.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\cmd\networkdb-test\dbclient\ndbClient.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\cmd\proxy\network_proxy_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\portmapper\proxy.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\vendor\github.com\hashicorp\consul\api\api.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\vendor\github.com\miekg\dns\xfr.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\vendor\github.com\samuel\go-zookeeper\zk\flw.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\libnetwork_31046054\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\mahjong-helper_150190591\server.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\5\mix_95281307\src\grpc\tests\goserver\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\loginsrv_73474882\oauth2\bitbucket.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\loginsrv_73474882\oauth2\facebook.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\loginsrv_73474882\oauth2\gitlab.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\loginsrv_73474882\oauth2\google.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kine_186470345\pkg\endpoint\endpoint.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\meg_75330190\gohttp.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\mangos-v1_25734811\transport\ws\ws_specific_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\koordinator_470472185\pkg\koordlet\runtimehooks\proxyserver\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\koordinator_470472185\pkg\runtimeproxy\server\cri\criserver.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\koordinator_470472185\pkg\scheduler\plugins\elasticquota\plugin_service_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\5\Life-Dashboard_129922294\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\llama.go_616027609\pkg\server\server.go,Inter-Process Communication (IPC),107,Go*,Fiber-based HTTP Server in Go,"['Step 1: Import the Fiber framework package', 'Step 2: Initialize the Fiber app instance', 'Step 3: Define routes and register HTTP handlers', 'Step 4: Start the server by calling app.Listen']"
D:\CAE\Splited_Repository\5\loggie_430536935\pkg\source\grpc\source.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\loggie_430536935\pkg\source\unix\unixsock.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\loggie_430536935\vendor\github.com\aliyun\aliyun-log-go-sdk\request.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\loggie_430536935\vendor\github.com\apache\pulsar-client-go\pulsar\test_helper.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\loggie_430536935\vendor\github.com\AthenZ\athenz\clients\go\zts\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\loggie_430536935\vendor\github.com\google\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\loggie_430536935\vendor\github.com\jcmturner\gokrb5\v8\client\network.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\loggie_430536935\vendor\github.com\segmentio\kafka-go\dialer.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\loggie_430536935\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\loggie_430536935\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\loggie_430536935\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\mieru_410179004\pkg\cli\client.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\mieru_410179004\pkg\cli\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\5\mieru_410179004\pkg\socks5\request.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\mieru_410179004\pkg\socks5\socks5.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\5\mieru_410179004\pkg\socks5\socks5_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\mieru_410179004\test\cmd\httpserver\httpserver.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\mieru_410179004\test\cmd\sockshttpclient\sockshttpclient.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\github.com\coreos\go-systemd\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\github.com\coreos\go-systemd\journal\journal.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\github.com\googleapis\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\k8s.io\apimachinery\pkg\util\proxy\upgradeaware.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\k8s.io\client-go\plugin\pkg\client\auth\oidc\oidc.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\sigs.k8s.io\apiserver-network-proxy\konnectivity-client\pkg\client\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\5\kiosk_238232099\vendor\sigs.k8s.io\kustomize\kyaml\fn\runtime\starlark\starlark.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\eventer.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\sinks\wechat\wechat.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\vendor\github.com\denverdino\aliyungo\common\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\vendor\github.com\denverdino\aliyungo\metadata\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\vendor\github.com\googleapis\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\vendor\github.com\influxdata\influxdb\client\influxdb.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\vendor\github.com\rcrowley\go-metrics\graphite.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\vendor\github.com\rcrowley\go-metrics\opentsdb.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\vendor\github.com\smartystreets\go-aws-auth\common.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\5\kube-eventer_191912898\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\ngrok_8900723\src\ngrok\client\views\web\view.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\auth_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\client_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\closed_conns_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\gateway_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\leafnode_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\monitor_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\mqtt_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\msgtrace_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\norace_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\opts_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\ping_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\routes_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\server_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\server\websocket_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\test\leafnode_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\nats-server_6443435\test\maxpayload_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-server_6443435\test\route_discovery_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\nats-server_6443435\test\test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\nats-server_6443435\test\tls_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\open-im-server_370977430\pkg\common\startrpc\start.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\NekoBoxForAndroid_609535399\libcore\http.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\netbird_357897199\client\cmd\root.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\netbird_357897199\client\cmd\testutil_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\netbird_357897199\client\internal\engine_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\netbird_357897199\client\internal\auth\pkce_flow.go,Inter-Process Communication (IPC),104,Go*,Advanced HTTP server with http.Server and ServeMux for custom configuration,"['Step 1: Import net/http for server and routing logic', 'Step 2: Create a custom http.Server instance for configuration', 'Step 3: Use ServeMux to create a custom multiplexer', 'Step 4: Register handlers to ServeMux', 'Step 5: Launch the server with ListenAndServe']"
D:\CAE\Splited_Repository\6\netbird_357897199\client\internal\dns\server_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\netbird_357897199\client\internal\routemanager\systemops\systemops_unix_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\netbird_357897199\client\server\server_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\netbird_357897199\management\client\client_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\netbird_357897199\management\server\management_proto_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\netbird_357897199\management\server\management_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\netbird_357897199\relay\test\benchmark_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\netbird_357897199\signal\client\client_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\pgx_9120526\examples\url_shortener\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\pgx_9120526\internal\pgmock\pgmock_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\pgx_9120526\pgconn\pgconn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\nightingale_244694886\pkg\poster\post.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\6\nightingale_244694886\tdengine\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\netmaker_351486934\cli\functions\http_client.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\6\netmaker_351486934\pro\auth\auth.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\6\NoiseTorch_277194804\vendor\gioui.org\app\os_wayland.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\6\nezha_220588935\cmd\dashboard\controller\ws.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\6\pholcus_38499784\common\ping\ping.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\pholcus_38499784\vendor\github.com\rcrowley\go-metrics\graphite.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\pholcus_38499784\vendor\github.com\rcrowley\go-metrics\opentsdb.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\pholcus_38499784\vendor\gopkg.in\jcmturner\gokrb5.v7\client\network.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\noms_36778364\cmd\noms\splore\noms_splore_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\noms_36778364\tools\runner\serial_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\6\os_28796010\config\cloudinit\pkg\http_client.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\os_28796010\pkg\util\util.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\os_28796010\vendor\github.com\docker\distribution\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\6\os_28796010\vendor\github.com\docker\docker\registry\endpoint_v1.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\os_28796010\vendor\github.com\docker\docker\registry\session.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\os_28796010\vendor\github.com\docker\machine\utils\b2d.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\NTrace-core_491101744\util\latency.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats.go_5425992\nats.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats.go_5425992\nats_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\nats.go_5425992\test\conn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\opentelemetry-go_187086161\bridge\opentracing\test\bridge_grpc_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opentelemetry-go_187086161\exporters\otlp\otlplog\otlploggrpc\client_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opentelemetry-go_187086161\exporters\otlp\otlpmetric\otlpmetricgrpc\internal\otest\collector.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opentelemetry-go_187086161\exporters\otlp\otlpmetric\otlpmetrichttp\internal\otest\collector.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opentelemetry-go_187086161\exporters\otlp\otlptrace\otlptracegrpc\mock_collector_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\octosql_173582015\plugins\plugins.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\Modlishka_162460220\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\Modlishka_162460220\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\Modlishka_162460220\vendor\github.com\miekg\dns\xfr.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\Modlishka_162460220\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\Modlishka_162460220\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\naabu_235320869\pkg\scan\scan.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\noti_33417782\vendor\github.com\magiconair\properties\load.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\envoy-go-extension\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\filter\ipaccess\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\filter\jwtauthn\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\flowcontrol-sample\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\http-sample\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\protocol-auto-sample\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\proxy-fallback-example\httpserver.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\proxy-fallback-example\tcpserver.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\seata\server_a\server_a.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\seata\server_b\server_b.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\seata\server_c\server_c.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\slow-start-sample\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\tcpproxy-sample\http.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\trace\skywalking\http\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\trace\skywalking-plugin\http\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\trace\zipkin\http\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\wasm\httpCall\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\examples\codes\xds-server-sample\cmd\upstream\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\istio\_istio152\sds\fake_sds_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\admin\server\server_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\filter\network\grpc\grpc_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\module\http2\server_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\module\http2\transport_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\mtls\crypto\tls\handshake_client_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\mtls\crypto\tls\handshake_server_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\mtls\crypto\tls\tls_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\network\connection_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\network\transfer.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\server\handler.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\server\reconfigure.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\server\server_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\mosn_140654872\pkg\upstream\healthcheck\httpdial_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\cases\extends\streamfilter_terminate.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\cases\grpc\flowcontrol_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\cases\grpc\stream_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\cases\grpc\unary_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\cases\simple\http2_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\cases\streamfilter\terminate\terminate_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\cases\tproxy\tproxy_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\integrate\case.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\integrate\functiontest\direct_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\integrate\functiontest\faultinject_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\integrate\functiontest\http_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\mosn_140654872\test\lib\mosn\mosn.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\natpass_390982669\code\client\rule\code\workspace.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\natpass_390982669\code\client\rule\shell\h_ws.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\6\natpass_390982669\code\client\rule\vnc\h_ws.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\6\natpass_390982669\code\client\rule\vnc\process\process.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\6\natpass_390982669\test\code-server-forward\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\P4wnP1_aloa_131320370\cli_client\rpc_client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\P4wnP1_aloa_131320370\service\rpc_server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\olivia_136217503\modules\advices.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\olivia_136217503\modules\jokes.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\mm-wiki_136314388\app\utils\request.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\6\panicparse_30167459\stack\webstack\example_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\mutagen_78026877\pkg\integration\fixtures\httpdemo\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\oauth2_59758059\doc.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\oauth2_59758059\example\client\client.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\oauth2_59758059\example\server\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\okteto_143846881\cmd\remoterun\ssh.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\oathkeeper_104739489\middleware\grpc_middleware_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\nextdns_211206547\ctl\internal\winio\pipe_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\nextdns_211206547\discovery\dns.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nextdns_211206547\host\dns_util_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nextdns_211206547\resolver\dns53.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nextdns_211206547\resolver\endpoint\dns.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\notary_37743436\cmd\notary\tuf.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\notary_37743436\cmd\notary-signer\config.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\notary_37743436\signer\rpc_and_client_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\notary_37743436\vendor\github.com\docker\distribution\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\6\notary_37743436\vendor\github.com\lib\pq\conn.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\exporter\otelarrowexporter\otelarrow_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\exporter\syslogexporter\exporter_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\extension\jaegerremotesampling\extension_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\pkg\stanza\operator\input\tcp\input_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\pkg\stanza\operator\input\udp\input_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\awsxrayreceiver\receiver_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\awsxrayreceiver\internal\udppoller\poller_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\googlecloudpubsubreceiver\internal\handler_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\haproxyreceiver\scraper_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\libhoneyreceiver\receiver.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\opencensusreceiver\opencensus_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\opencensusreceiver\internal\ocmetrics\opencensus_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\opencensusreceiver\internal\octrace\opencensus_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\otelarrowreceiver\internal\logs\otlp_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\otelarrowreceiver\internal\metrics\otlp_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\otelarrowreceiver\internal\trace\otlp_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opentelemetry-collector-contrib_196414933\receiver\signalfxreceiver\receiver_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\olric_128195485\internal\pubsub\pubsub_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\openfga_501372599\cmd\run\run.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\mosdns_316297217\pkg\upstream\bootstrap\bootstrap.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\mosdns_316297217\tools\probe.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nano_99078544\cluster\node.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\onionscan_55757553\webui\webui.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\net_27522271\http2\transport_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\net_27522271\http2\h2c\h2c_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\net_27522271\internal\socket\socket_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\net_27522271\internal\socks\dial_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\net_27522271\ipv4\bpf_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\net_27522271\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\net_27522271\ipv4\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\net_27522271\ipv4\readwrite_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\6\net_27522271\ipv4\unicast_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\6\net_27522271\ipv6\bpf_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\net_27522271\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\net_27522271\ipv6\example_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\net_27522271\ipv6\multicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\net_27522271\ipv6\readwrite_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\6\net_27522271\ipv6\unicast_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\net_27522271\netutil\listen_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\net_27522271\webdav\litmus_test_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\net_27522271\websocket\websocket_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\pack_138544269\acceptance\testdata\mock_stack\windows\run\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\pack_138544269\internal\sshdialer\server_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\nats-streaming-server_54661965\server\clustering_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nats-streaming-server_54661965\server\server_run_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\6\nats-streaming-server_54661965\stores\sqlstore_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\multus-cni_76367175\pkg\kubeletclient\kubeletclient.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\multus-cni_76367175\pkg\kubeletclient\kubeletclient_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\multus-cni_76367175\pkg\server\api\api.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\multus-cni_76367175\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\multus-cni_76367175\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\multus-cni_76367175\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\nbio_236162999\nbio_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nbio_236162999\poller_kqueue.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\nbio_236162999\nbhttp\parser_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\opencensus-go_81387692\examples\grpc\helloworld_client\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\opencensus-go_81387692\examples\grpc\helloworld_server\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opencensus-go_81387692\examples\http\helloworld_server\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\opencensus-go_81387692\internal\testpb\impl.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\opencensus-go_81387692\plugin\ocgrpc\example_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\onedriver_166592722\fs\upload_session.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\6\onedriver_166592722\fs\graph\oauth2.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\openbooks_186865523\dcc\dcc.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\opengist_626121312\internal\ssh\run.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\nixery_199516328\cmd\server\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\netcap_159568339\collector\collector.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\netcap_159568339\dbs\clone.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\netcap_159568339\metrics\metrics.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\openyurt_265800635\pkg\yurthub\util\connrotation_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\openyurt_265800635\pkg\yurttunnel\server\anpserver.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\openyurt_265800635\pkg\yurttunnel\server\interceptor.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\openyurt_265800635\test\integration\yurttunnel_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nanobox_35048479\processors\log\log.go,Inter-Process Communication (IPC),117,Go*,nhooyr.io-based websocket client in Go,"['Step 1: Import required packages', 'Step 2: Establish WebSocket connection', 'Step 3: Defer connection closure', 'Step 4: Send and receive WebSocket messages']"
D:\CAE\Splited_Repository\6\ogen_372032505\internal\integration\bench_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\ninjabot_361178225\plot\chart.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\ops_148196645\daemon\daemon.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\ops_148196645\provider\onprem\onprem_instance.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\ops_148196645\provider\onprem\onprem_volume.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\ops_148196645\qemu\qmp.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\6\nintengo_16089031\http\http.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\6\naml_376186782\vendor\github.com\googleapis\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\naml_376186782\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\naml_376186782\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\naml_376186782\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\6\naml_376186782\vendor\sigs.k8s.io\kind\pkg\exec\helpers.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\6\morphos_701961515\main.go,Inter-Process Communication (IPC),108,Go*,Chi-based HTTP Server in Go,"['Step 1: Import the Chi router package', 'Step 2: Create a new router instance', 'Step 3: Define routes and attach handler functions', 'Step 4: Start the HTTP server with the router']"
D:\CAE\Splited_Repository\6\pd_53311716\pkg\mcs\utils\util.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\6\pd_53311716\pkg\utils\etcdutil\etcdutil_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\6\pd_53311716\tests\integrations\mcs\tso\server_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\6\pd_53311716\tests\registry\registry_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\7\quic-go_55637575\sys_conn_helper_linux_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\7\quic-go_55637575\sys_conn_oob_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\quic-go_55637575\http3\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\7\quic-go_55637575\http3\server_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\7\quic-go_55637575\integrationtests\self\stateless_reset_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\7\prometheus-operator_68964263\example\alertmanager-webhook\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\7\prometheus-operator_68964263\test\instrumented-sample-app\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\7\ponzu_68429735\cmd\ponzu\vendor\github.com\nilslice\jwt\doc.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\7\protoactor-go_56453473\cluster\clusterproviders\automanaged\automanaged.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\7\protoactor-go_56453473\remote\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\7\pouch_102555965\client\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\containerd\containerd\remotes\docker\authorizer.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\coreos\go-systemd\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\docker\docker\pkg\chrootarchive\archive_unix.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\docker\libnetwork\resolver.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\docker\libnetwork\sandbox_externalkey_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\docker\libnetwork\portmapper\proxy.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\hashicorp\consul\api\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\miekg\dns\xfr.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\moby\buildkit\session\grpc.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\opentracing-contrib\go-stdlib\nethttp\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\github.com\samuel\go-zookeeper\zk\flw.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\golang.org\x\crypto\acme\acme.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\golang.org\x\net\http2\h2demo\h2demo.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\7\pouch_102555965\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\7\req_83145406\examples\upload\uploadserver\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\7\req_83145406\examples\uploadcallback\uploadserver\main.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\7\req_83145406\internal\socks\dial_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\RedisShake_173063554\internal\status\handler.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\7\polaris_157735858\cmd\polaris\dashboard.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\7\proxify_316539944\socket.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\proxify_316539944\cmd\mitmrelay\mitmrelay.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\7\proxify_316539944\cmd\replay\replay.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\7\piknik_63753199\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\pitaya_125911051\pkg\acceptor\tcp_acceptor_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\pitaya_125911051\pkg\acceptor\ws_acceptor_test.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\7\pitaya_125911051\pkg\cluster\grpc_rpc_server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\7\ratelimit_80164872\src\client_cmd\main.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\7\ratelimit_80164872\src\server\server_impl.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\7\ratelimit_80164872\test\integration\integration_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\7\playwright-go_287942241\examples\download\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\7\playwright-go_287942241\tests\utils_test.go,Inter-Process Communication (IPC),116,Go*,nhooyr.io-based websocket server in Go,"['Step 1: Import required packages', 'Step 2: Upgrade HTTP connection to WebSocket', 'Step 3: Defer connection closure', 'Step 4: Handle message reading and writing']"
D:\CAE\Splited_Repository\7\plugins_84575398\pkg\testutils\echo\echo_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\plugins_84575398\pkg\testutils\echo\client\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\plugins_84575398\pkg\testutils\echo\server\main.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\7\plumber_283047400\plumber\cli_server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\github.com\AthenZ\athenz\clients\go\zts\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\github.com\google\s2a-go\s2a_options.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\github.com\jackc\pgx\conn.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\github.com\jcmturner\gokrb5\v8\client\network.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\github.com\nats-io\nats.go\nats.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\github.com\prometheus\client_golang\prometheus\promauto\auto.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\github.com\rcrowley\go-metrics\graphite.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\github.com\rcrowley\go-metrics\opentsdb.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\github.com\segmentio\kafka-go\dialer.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\github.com\tetratelabs\wazero\internal\sysfs\file_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\golang.org\x\oauth2\google\internal\externalaccount\aws.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\golang.org\x\oauth2\google\internal\stsexchange\sts_exchange.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\google.golang.org\api\transport\grpc\dial.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\7\plumber_283047400\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\7\piko_774198099\bench\http.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\piko_774198099\pkg\gossip\gossip.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\piko_774198099\pkg\websocket\conn.go,Inter-Process Communication (IPC),117,Go*,nhooyr.io-based websocket client in Go,"['Step 1: Import required packages', 'Step 2: Establish WebSocket connection', 'Step 3: Defer connection closure', 'Step 4: Send and receive WebSocket messages']"
D:\CAE\Splited_Repository\7\piko_774198099\server\proxy\server_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\piko_774198099\tests\server\proxy_test.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\7\puma-dev_64329846\cmd\puma-dev\main_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\promscale_252745692\pkg\runner\runner.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\7\rakshasa_617275793\rakshasa_lite\server\node.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\7\rakshasa_617275793\server\node.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\serve_240315046\jina\serve\consensus\add_voter.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\serve_240315046\jina\serve\consensus\run.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\sing-box_509091576\experimental\libbox\http.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\sing-box_509091576\experimental\v2rayapi\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\slim_42194129\pkg\app\master\probe\http\internal\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\slim_42194129\vendor\github.com\fsouza\go-dockerclient\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\slim_42194129\vendor\github.com\getkin\kin-openapi\openapi3\loader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\slim_42194129\vendor\github.com\gocolly\colly\v2\http_backend.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\slim_42194129\vendor\github.com\google\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\slim_42194129\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\slim_42194129\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\slim_42194129\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\sops_40684033\cmd\sops\subcommand\keyservice\keyservice.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\server_117591846\api\stream\stream_test.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\8\sarama_11206255\internal\toxiproxy\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\soar_152058245\common\config.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\soar_152058245\common\markdown.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\skopeo_53356367\cmd\skopeo\proxy.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\skopeo_53356367\integration\utils.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\skopeo_53356367\vendor\github.com\containers\storage\pkg\archive\archive.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\skopeo_53356367\vendor\github.com\containers\storage\pkg\chrootarchive\archive.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\skopeo_53356367\vendor\github.com\containers\storage\pkg\chrootarchive\archive_unix.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\skopeo_53356367\vendor\github.com\containers\storage\pkg\unshare\unshare_linux.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\server_280232135\ws\rooms_test.go,Inter-Process Communication (IPC),115,Go*,gorilla-based websocket client in Go,"['Step 1: Import the necessary Gorilla WebSocket library', 'Step 2: Use Dial function to establish a WebSocket connection with the server', 'Step 3: Ensure the WebSocket connection is properly closed after usage', 'Step 4: Read messages from or send messages to the WebSocket server']"
D:\CAE\Splited_Repository\8\sh_49766020\cmd\gosh\main_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\sh_49766020\interp\interp_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\shadowsocks-go_6486840\cmd\shadowsocks-server\server.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\shadowsocks-go_6486840\script\http.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\shadowsocks-go_6486840\shadowsocks\udprelay.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\8\serving_118828329\pkg\autoscaler\statforwarder\processor_test.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\8\serving_118828329\pkg\queue\health\probe.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\serving_118828329\pkg\queue\health\probe_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\serving_118828329\pkg\queue\readiness\probe_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\serving_118828329\test\e2e\grpc_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\serving_118828329\test\e2e\websocket.go,Inter-Process Communication (IPC),117,Go*,nhooyr.io-based websocket client in Go,"['Step 1: Import required packages', 'Step 2: Establish WebSocket connection', 'Step 3: Defer connection closure', 'Step 4: Send and receive WebSocket messages']"
D:\CAE\Splited_Repository\8\serving_118828329\test\test_images\wsserver\echo.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\8\serving_118828329\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\serving_118828329\vendor\github.com\ahmetb\gen-crd-api-reference-docs\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\serving_118828329\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\serving_118828329\vendor\github.com\google\s2a-go\s2a_options.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\serving_118828329\vendor\github.com\tsenart\vegeta\v12\lib\attack.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\serving_118828329\vendor\golang.org\x\oauth2\google\externalaccount\aws.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\serving_118828329\vendor\golang.org\x\oauth2\google\internal\stsexchange\sts_exchange.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\serving_118828329\vendor\knative.dev\pkg\test\spoof\spoof.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\scrutiny_289524449\webapp\backend\pkg\models\testdata\helper.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rod_235431922\lib\cdp\websocket.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\soft-serve_391209033\pkg\daemon\daemon.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\spicedb_396856161\cmd\spicedb\servetesting_integration_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\spicedb_396856161\cmd\spicedb\serve_integration_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\spicedb_396856161\pkg\cmd\util\util.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\rust-libp2p_86106381\wasm-tests\webtransport-tests\echo-server\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\scorecard_302670797\cmd\serve.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\scorecard_302670797\cron\internal\webhook\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\stolon_43884372\tests\integration\utils.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\supervisord_69154291\content_checker_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\supervisord_69154291\xmlrpcclient\xmlrpc-client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\sonyflake_36485077\awsutil\awsutil.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\sonyflake_36485077\example\sonyflake_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\space-cloud_169837628\runner\modules\scaler\operations.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\SpoofDPI_441833482\dns\resolver\doh.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\ssh3_712363932\client\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\ssh3_712363932\cmd\ssh3-server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\ssh3_712363932\integration_tests\ssh3_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\roshi_15902954\roshi-server\main_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\roshi_15902954\_vendor\src\github.com\garyburd\redigo\redis\conn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\roshi_15902954\_vendor\src\github.com\garyburd\redigo\redis\pubsub_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\sso_145011089\internal\proxy\reverse_proxy_test.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\8\Stowaway_221836131\agent\handler\listen.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\Stowaway_221836131\agent\initial\method.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\sentinel-golang_180593078\pkg\adapters\echo\middleware_example_test.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\8\sentinel-golang_180593078\pkg\adapters\fiber\middlware_example_test.go,Inter-Process Communication (IPC),107,Go*,Fiber-based HTTP Server in Go,"['Step 1: Import the Fiber framework package', 'Step 2: Initialize the Fiber app instance', 'Step 3: Define routes and register HTTP handlers', 'Step 4: Start the server by calling app.Listen']"
D:\CAE\Splited_Repository\8\Sia_25370072\modules\gateway\peers_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\Sia_25370072\modules\host\network.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\Sia_25370072\modules\renter\hostdb\scan.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\Sia_25370072\modules\renter\proto\formcontract.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\Sia_25370072\modules\renter\proto\renew.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\Sia_25370072\vendor\github.com\xtaci\smux\session_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\selenoid_66257173\selenoid.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\selenoid_66257173\utils_test.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\8\selenium_3845814\service.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\rueidis_407831273\rueidisotel\metrics_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\sup_31234749\example\example.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\source-to-image_16323162\vendor\github.com\containers\storage\pkg\archive\archive.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\source-to-image_16323162\vendor\github.com\containers\storage\pkg\chrootarchive\archive.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\source-to-image_16323162\vendor\github.com\containers\storage\pkg\chrootarchive\archive_unix.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\source-to-image_16323162\vendor\github.com\containers\storage\pkg\unshare\unshare_linux.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\rio_143456583\cli\cmd\images\image.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rio_143456583\cli\cmd\util\io.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rio_143456583\cli\pkg\up\build.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\cloud.google.com\go\compute\metadata\metadata.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\github.com\ahmetb\gen-crd-api-reference-docs\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\github.com\containerd\containerd\remotes\docker\authorizer.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\github.com\googleapis\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\github.com\hashicorp\consul\api\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\github.com\miekg\dns\xfr.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\github.com\moby\buildkit\session\grpc.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\github.com\moby\buildkit\session\sshforward\sshprovider\agentprovider.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\k8s.io\client-go\plugin\pkg\client\auth\oidc\oidc.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rio_143456583\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\stripe-go_20545279\example\v2\thinevent_webhook_handler\thinevent_webhook_handler.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\stripe-go_20545279\webhook\client_handler_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\svgo_549192\webfonts\webfonts.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\smoothmq_808155298\dashboard\dashboard.go,Inter-Process Communication (IPC),107,Go*,Fiber-based HTTP Server in Go,"['Step 1: Import the Fiber framework package', 'Step 2: Initialize the Fiber app instance', 'Step 3: Define routes and register HTTP handlers', 'Step 4: Start the server by calling app.Listen']"
D:\CAE\Splited_Repository\8\smoothmq_808155298\protocols\sqs\sqs.go,Inter-Process Communication (IPC),107,Go*,Fiber-based HTTP Server in Go,"['Step 1: Import the Fiber framework package', 'Step 2: Initialize the Fiber app instance', 'Step 3: Define routes and register HTTP handlers', 'Step 4: Start the server by calling app.Listen']"
D:\CAE\Splited_Repository\8\secure-code-game_617044081\Season-2\Level-2\code.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\sloth_355253165\cmd\sloth\commands\k8scontroller.go,Inter-Process Communication (IPC),104,Go*,Advanced HTTP server with http.Server and ServeMux for custom configuration,"['Step 1: Import net/http for server and routing logic', 'Step 2: Create a custom http.Server instance for configuration', 'Step 3: Use ServeMux to create a custom multiplexer', 'Step 4: Register handlers to ServeMux', 'Step 5: Launch the server with ListenAndServe']"
D:\CAE\Splited_Repository\8\runtime_110539997\cli\factory.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\runtime_110539997\vendor\github.com\uber\jaeger-client-go\utils\http_json.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\runtime_110539997\vendor\golang.org\x\sys\unix\mksysnum.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\runtime_110539997\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\runtime_110539997\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\runtime_110539997\virtcontainers\factory\grpccache\grpccache.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\runtime_110539997\virtcontainers\pkg\mock\mock.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\saml2aws_67908757\pkg\provider\aad\aad_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\shuttle_145510605\upgrade\upgrade.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\shuttle_145510605\util\ip.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\containers\buildah\run_common.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\containers\buildah\run_linux.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\containers\buildah\chroot\run_linux.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\containers\buildah\copier\copier.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\containers\buildah\define\types.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\containers\storage\pkg\archive\archive.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\containers\storage\pkg\chrootarchive\archive.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\containers\storage\pkg\chrootarchive\archive_unix.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\containers\storage\pkg\unshare\unshare_linux.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\distribution\distribution\v3\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\docker\distribution\registry\client\repository.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\docker\docker\client\hijack.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\docker\docker\registry\endpoint_v1.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\fsouza\go-dockerclient\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\google\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\jackpal\go-nat-pmp\network.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\magiconair\properties\load.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\miekg\dns\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\miekg\dns\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\miekg\dns\xfr.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\golang.org\x\net\ipv4\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\golang.org\x\net\ipv6\doc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\sigs.k8s.io\kustomize\kyaml\fn\runtime\starlark\starlark.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\seagull_25102239\controllers\dockerapi.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\seagull_25102239\Godeps\_workspace\src\github.com\astaxie\beego\admin.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\seagull_25102239\Godeps\_workspace\src\github.com\astaxie\beego\grace\grace.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\seagull_25102239\Godeps\_workspace\src\github.com\astaxie\beego\httplib\httplib.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\seagull_25102239\Godeps\_workspace\src\github.com\astaxie\beego\session\redis\sess_redis.go,Inter-Process Communication (IPC),126,Go*,Redis in Go,"['Step 1: Import the redigo/redis package for Redis support', 'Step 2: Establish a connection to the Redis server using redis.Dial', 'Step 3: Use defer to ensure the Redis connection is properly closed', 'Step 4: Execute Redis commands such as Set, Get, lpop, lpush, HSet, and HGet']"
D:\CAE\Splited_Repository\8\spread_49686795\vendor\github.com\fsouza\go-dockerclient\client.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\8\spread_49686795\vendor\k8s.io\kubernetes\pkg\client\restclient\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\spread_49686795\vendor\k8s.io\kubernetes\pkg\credentialprovider\config.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\events_resend_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\fixtures_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\listen_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\login_status_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\login_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\logs_tail_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\middleware_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\samples_list_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\sample_configs_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\sample_create_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\triggers_list_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\trigger_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\stripe-cli_191848501\pkg\rpcservice\version_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\statusok_41440228\notify\mail_notify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\SignTools_338889330\main.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\8\SignTools_338889330\main_test.go,Inter-Process Communication (IPC),106,Go*,Echo-based HTTP Server in Go,"['Step 1: Import Echo and net/http packages', 'Step 2: Create a new Echo instance', 'Step 3: Register route handlers for HTTP methods', 'Step 4: Start the HTTP server using e.Start()']"
D:\CAE\Splited_Repository\8\summitdb_70629059\machine\machine.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\summitdb_70629059\machine\mock_test.go,Inter-Process Communication (IPC),126,Go*,Redis in Go,"['Step 1: Import the redigo/redis package for Redis support', 'Step 2: Establish a connection to the Redis server using redis.Dial', 'Step 3: Use defer to ensure the Redis connection is properly closed', 'Step 4: Execute Redis commands such as Set, Get, lpop, lpush, HSet, and HGet']"
D:\CAE\Splited_Repository\8\summitdb_70629059\machine\transactions_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\summitdb_70629059\vendor\github.com\garyburd\redigo\redis\conn_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\8\summitdb_70629059\vendor\github.com\garyburd\redigo\redis\pool_test.go,Inter-Process Communication (IPC),126,Go*,Redis in Go,"['Step 1: Import the redigo/redis package for Redis support', 'Step 2: Establish a connection to the Redis server using redis.Dial', 'Step 3: Use defer to ensure the Redis connection is properly closed', 'Step 4: Execute Redis commands such as Set, Get, lpop, lpush, HSet, and HGet']"
D:\CAE\Splited_Repository\8\summitdb_70629059\vendor\github.com\hashicorp\go-msgpack\codec\codecs_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\summitdb_70629059\vendor\github.com\robertkrimen\otto\test\tester.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\summitdb_70629059\vendor\github.com\tidwall\finn\finn.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\summitdb_70629059\vendor\github.com\tidwall\raft-redcon\transport.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\summitdb_70629059\vendor\github.com\tidwall\redcon\redcon_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\summitdb_70629059\vendor\gopkg.in\sourcemap.v1\consumer_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\summitdb_70629059\vendor\gopkg.in\sourcemap.v1\example_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\secrets-store-csi-driver_163906733\pkg\secrets-store\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\secrets-store-csi-driver_163906733\provider\fake\fake_server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\services_300576059\cron\handler\cron.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\crypto\handler\crypto.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\currency\handler\currency.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\forex\handler\forex.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\gifs\handler\gifs.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\holidays\handler\holidays.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\image\handler\image.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\memegen\handler\memegen.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\ping\handler\ping.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\services_300576059\postcode\handler\postcode.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\stock\handler\stock.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\time\handler\time.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\url\proxy\proxy.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\services_300576059\weather\handler\weather.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\shoutrrr_180732115\pkg\services\matrix\matrix_client.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\shoutrrr_180732115\pkg\services\rocketchat\rocketchat.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\shoutrrr_180732115\pkg\services\slack\slack.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\shoutrrr_180732115\pkg\util\jsonclient\jsonclient.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\rig_685934319\cmd\rig-proxy\tunnel\tunnel.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\8\rig_685934319\pkg\tunnel\tunnel.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\subnet_81704476\vendor\golang.org\x\tools\cmd\godoc\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\subnet_81704476\vendor\golang.org\x\tools\cmd\heapview\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\subnet_81704476\vendor\golang.org\x\tools\cmd\tip\tip.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\superedge_322759957\pkg\helper-job\deploy\change.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\superedge_322759957\pkg\lite-apiserver\transport\transport_mgr.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\superedge_322759957\pkg\tunnel\proxy\common\proxy.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\superedge_322759957\pkg\tunnel\proxy\handlers\cloud_server_handler.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\superedge_322759957\pkg\tunnel\proxy\modules\stream\streammng\connect\grpcclient.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\8\superedge_322759957\pkg\tunnel\proxy\modules\stream\streammng\connect\grpcserver.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\8\sensu-go_82981995\backend\tessend\tessend.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\8\sshpiper_27552826\e2e\main_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\8\rootlesskit_135564955\pkg\network\slirp4netns\slirp4netns.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\8\rootlesskit_135564955\pkg\port\slirp4netns\slirp4netns.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\trufflehog_77726177\pkg\sources\syslog\syslog.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\toxiproxy_23664475\api.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\toxiproxy_23664475\toxics\bandwidth_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\toxiproxy_23664475\toxics\latency_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\toxiproxy_23664475\toxics\reset_peer_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\toxiproxy_23664475\toxics\timeout_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\toxiproxy_23664475\toxics\toxic_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\tile38_53171300\cmd\tile38-server\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\tile38_53171300\internal\endpoint\amqp.go,Inter-Process Communication (IPC),121,Go*,Simple Rabbitmq producer in go,"['Step 1: Import the streadway/amqp package', 'Step 2: Establish a connection to the RabbitMQ server', 'Step 3: Open a channel from the connection', 'Step 4: Declare an exchange (optional depending on use case)', 'Step 5: Declare a queue to publish messages to', 'Step 6: Publish a message to the declared queue or exchange']"
D:\CAE\Splited_Repository\9\tile38_53171300\tests\fence_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\tile38_53171300\tests\107\main.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\trojan-go_248025303\api\control\control.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\9\trojan-go_248025303\test\util\target.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\trojan-go_248025303\tunnel\http\http_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\vcluster_355946670\pkg\plugin\v1\plugin.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\vcluster_355946670\pkg\util\websocketproxy\websocketproxy.go,Inter-Process Communication (IPC),117,Go*,nhooyr.io-based websocket client in Go,"['Step 1: Import required packages', 'Step 2: Establish WebSocket connection', 'Step 3: Defer connection closure', 'Step 4: Send and receive WebSocket messages']"
D:\CAE\Splited_Repository\9\vcluster_355946670\vendor\github.com\coreos\go-systemd\v22\daemon\sdnotify.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\vcluster_355946670\vendor\github.com\coreos\go-systemd\v22\journal\journal_unix.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\vcluster_355946670\vendor\github.com\google\gnostic-models\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\vcluster_355946670\vendor\github.com\google\go-github\v30\github\github.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\9\vcluster_355946670\vendor\github.com\hashicorp\go-plugin\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\9\vcluster_355946670\vendor\github.com\hashicorp\go-plugin\testing.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\vcluster_355946670\vendor\k8s.io\apimachinery\pkg\util\httpstream\spdy\roundtripper.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\vcluster_355946670\vendor\k8s.io\kms\pkg\service\grpc_service.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\torrent_28986292\torrent_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\torrent_28986292\ut-holepunching_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\torrent_28986292\fs\torrentfs_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\torrent_28986292\internal\cmd\issue-908\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\torrent_28986292\mse\cmd\mse\main.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\torrent_28986292\tracker\udp_test.go,Inter-Process Communication (IPC),111,Go*,net-based UDP Server in Go,"['Step 1: Import the necessary net package', 'Step 2: Listen for incoming UDP packets on a specific port', 'Step 3: Ensure that the connection is properly closed after use', 'Step 4: Read incoming UDP data from clients', 'Step 5: Send response data back to the client']"
D:\CAE\Splited_Repository\9\torrent_28986292\tracker\udp\udp_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\torrent_28986292\webtorrent\tracker-client.go,Inter-Process Communication (IPC),117,Go*,nhooyr.io-based websocket client in Go,"['Step 1: Import required packages', 'Step 2: Establish WebSocket connection', 'Step 3: Defer connection closure', 'Step 4: Send and receive WebSocket messages']"
D:\CAE\Splited_Repository\9\trojan_242329748\util\linux.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\ui-for-docker_10575878\api\unix_handler.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\vugu_176644153\tinygo-dev\testpgm-srv.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\TopList_196937459\App\GetHot.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\TopList_196937459\App\Server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\terraform-provider-azurerm_93446042\vendor\github.com\hashicorp\go-plugin\client.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\9\terraform-provider-azurerm_93446042\vendor\github.com\hashicorp\go-plugin\testing.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\terraform-provider-azurerm_93446042\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\terraform-provider-azurerm_93446042\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\torsniff_52734325\vendor\github.com\coreos\go-systemd\journal\journal.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\testcontainers-go_141451032\docker_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\9\testcontainers-go_141451032\reaper.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\testcontainers-go_141451032\modules\registry\registry.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\testcontainers-go_141451032\wait\http_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\terramate_411630635\cmd\terramate\cli\cloud_credential_google.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\vault-ai_629313011\vault-web-server\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\vault-ai_629313011\vectordb\pinecone\pinecone.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\9\tusd_8825137\internal\e2e\e2e_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\tank_115186825\code\tool\webdav\litmus_test_server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\tank_115186825\code\tool\webdav\webdav_test.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\tiedot_10296238\httpapi\srv.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\vanus_452240290\server\controller\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\vanus_452240290\server\root\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\vanus_452240290\server\store\raft\transport\peer_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\vanus_452240290\server\store\raft\transport\server_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\vanus_452240290\server\store\segment\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\vanus_452240290\server\trigger\main.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\venus_113219518\cmd\version_daemon_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\venus_113219518\tools\genesis-file-server\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\triangle_101462242\cmd\triangle\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\triangle_101462242\utils\download.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\veneur_55277533\networking.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\veneur_55277533\networking_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\9\veneur_55277533\server_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\veneur_55277533\socket_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\veneur_55277533\cmd\veneur-emit\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\veneur_55277533\internal\forwardtest\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\veneur_55277533\proxy\proxy.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\veneur_55277533\proxy\connect\connect_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\veneur_55277533\sinks\cortex\cortex.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\9\veneur_55277533\sinks\falconer\grpsink_test.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\veneur_55277533\sinks\prometheus\prometheus.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\veneur_55277533\sinks\prometheus\prometheus_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\veneur_55277533\sources\proxy\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\9\veneur_55277533\trace\client_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\veneur_55277533\vendor\github.com\googleapis\gnostic\compiler\reader.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\veneur_55277533\vendor\github.com\hashicorp\consul\api\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\veneur_55277533\vendor\github.com\lightstep\lightstep-tracer-go\thrift_0_9_2\lib\go\thrift\http_client.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\veneur_55277533\vendor\github.com\newrelic\newrelic-client-go\internal\http\client.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\veneur_55277533\vendor\github.com\rcrowley\go-metrics\graphite.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\veneur_55277533\vendor\github.com\rcrowley\go-metrics\opentsdb.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\9\veneur_55277533\vendor\google.golang.org\appengine\internal\api.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\veneur_55277533\vendor\google.golang.org\appengine\internal\metadata.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\veneur_55277533\vendor\k8s.io\client-go\rest\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\tunasync_25347290\tests\httpServer.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\9\tunasync_25347290\worker\runner.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\9\tunasync_25347290\worker\worker_test.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\9\tenta-dns_94369364\responder\recursive_data_helpers.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\tenta-dns_94369364\responder\recursive_dns_resolver.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\tenta-dns_94369364\stresser\stresser.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\uniqush-push_2287470\restapi.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\uniqush-push_2287470\srv\adm.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\9\uniqush-push_2287470\srv\apns\http_api\processor.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\9\uniqush-push_2287470\srv\cloud_messaging\cloud_messaging.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\9\throttled_16983151\example_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\tour_35800468\solutions\http.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\9\sys_27522282\unix\sendfile_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\sys_27522282\unix\syscall_linux_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\9\sys_27522282\unix\syscall_solaris_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\9\sys_27522282\unix\syscall_unix_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\9\sys_27522282\unix\syscall_zos_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\9\sys_27522282\windows\syscall_windows_test.go,Inter-Process Communication (IPC),118,Go*,os.pipe-based pipe in Go,"[""Step 1: Import the 'os' package to support pipe creation and file descriptor handling."", 'Step 2: Use os.Pipe() to create a unidirectional in-memory pipe with reader and writer.', 'Step 3: Defer the Close() calls on both reader and writer to release resources properly.', 'Step 4: Use the writer to send data and the reader to receive data through the pipe.']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\app\dns\nameserver_doh.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\app\dns\nameserver_tcp.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\app\router\command\command_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\common\buf\io_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\common\buf\readv_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\common\mux\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\main\commands\all\api\shared.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\dns\dns.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\dokodemo\dokodemo.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\freedom\freedom.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\http\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\loopback\loopback.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\shadowsocks\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\socks\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\trojan\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\trojan\server.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\vless\inbound\inbound.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\vless\outbound\outbound.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\vmess\outbound\outbound.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\wireguard\client.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\testing\scenarios\command_test.go,Inter-Process Communication (IPC),120,Go*,Official-based gRPC client in Go,"['Step 1: Import gRPC package', 'Step 2: Establish a connection with the gRPC server', 'Step 3: Close the connection when done']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\testing\scenarios\common.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\testing\scenarios\feature_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\transport\internet\browser_dialer\dialer.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\transport\internet\grpc\hub.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\transport\internet\headers\http\http_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\transport\internet\splithttp\splithttp_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\watchtower_39038086\pkg\api\api.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\wtf_127227141\modules\spotifyweb\widget.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\webrtc_134012064\examples\examples.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\webrtc_134012064\examples\broadcast\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\webrtc_134012064\examples\ice-restart\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\webrtc_134012064\examples\ice-single-port\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\webrtc_134012064\examples\ice-tcp\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\webrtc_134012064\examples\ortc\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\webrtc_134012064\examples\ortc-media\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\webrtc_134012064\examples\pion-to-pion\answer\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\webrtc_134012064\examples\pion-to-pion\offer\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\webrtc_134012064\examples\play-from-disk-renegotiation\main.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\wuzz_80465011\wuzz.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\10\yaegi_116938442\_test\issue-1330.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\yaegi_116938442\_test\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\yaegi_116938442\_test\server0.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\yaegi_116938442\_test\server1.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\yaegi_116938442\_test\server1a.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\yaegi_116938442\_test\server2.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\yaegi_116938442\_test\server3.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\yaegi_116938442\_test\server4.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\yaegi_116938442\_test\server5.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\yaegi_116938442\_test\server6.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\zinx_167186080\znet\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\zinx_167186080\znotify\notify_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\ws_79746008\example\autobahn\autobahn.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\10\wild-workouts-go-ddd-example_261871717\internal\common\client\trainings\openapi_client_gen.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\10\weaver_585235597\http_test.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\yggdrasil-go_115685026\cmd\yggdrasilctl\main.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\xxim-server_544278340\app\gateway\internal\handler\wshandler.go,Inter-Process Communication (IPC),116,Go*,nhooyr.io-based websocket server in Go,"['Step 1: Import required packages', 'Step 2: Upgrade HTTP connection to WebSocket', 'Step 3: Defer connection closure', 'Step 4: Handle message reading and writing']"
D:\CAE\Splited_Repository\10\xxim-server_544278340\sdk\client\client.go,Inter-Process Communication (IPC),117,Go*,nhooyr.io-based websocket client in Go,"['Step 1: Import required packages', 'Step 2: Establish WebSocket connection', 'Step 3: Defer connection closure', 'Step 4: Send and receive WebSocket messages']"
D:\CAE\Splited_Repository\10\wireguard-go_133725375\ipc\namedpipe\namedpipe_test.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\10\zadig_366764229\examples\grayscale-demo\cmd\myapp-1\app\server.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\10\zadig_366764229\examples\grayscale-demo\cmd\myapp-2\app\server.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\10\zadig_366764229\examples\grayscale-demo\cmd\myapp-3\app\server.go,Inter-Process Communication (IPC),105,Go*,Gin-based HTTP Server in Go,"['Step 1: Import the Gin package', 'Step 2: Initialize the default Gin engine with Logger and Recovery middleware', 'Step 3: Register HTTP route handlers for different methods (GET, POST, etc.)', 'Step 4: Handle request data and send responses (e.g., JSON, HTML, form data)', 'Step 5: Start the Gin server with the specified port']"
D:\CAE\Splited_Repository\10\zadig_366764229\examples\microservice-demo\backend\backend.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\zadig_366764229\examples\multi-service-demo\src\service1\service1.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\zadig_366764229\examples\multi-service-demo\src\service2\service2.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\zadig_366764229\examples\multi-service-demo\src\service3\service3.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\zadig_366764229\pkg\microservice\aslan\core\environment\service\pm_exec.go,Inter-Process Communication (IPC),114,Go*,gorilla-based websocket server in Go,"['Step 1: Import necessary libraries for HTTP and WebSocket', 'Step 2: Create a WebSocket upgrader to handle WebSocket handshake', 'Step 3: Upgrade the HTTP connection to WebSocket connection using the upgrader', 'Step 4: Close the WebSocket connection after processing', 'Step 5: Read messages from and write messages to the WebSocket connection']"
D:\CAE\Splited_Repository\10\zadig_366764229\pkg\microservice\aslan\core\stat\service\ai\ai_analysis.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\10\zadig_366764229\pkg\microservice\cron\core\service\scheduler\schedule_env.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\10\zadig_366764229\pkg\tool\remotedialer\client_dialer.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\zadig_366764229\pkg\util\request.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\10\xray_96643394\crtsh.go,Inter-Process Communication (IPC),101,Go*,Simple HTTP GET client using net/http,"['Step 1: Import necessary packages like net/http and ioutil', 'Step 2: Initiate a simple HTTP request (e.g., http.Get)', 'Step 3: Defer closing of response body to prevent resource leaks', 'Step 4: Read the response body using ioutil.ReadAll']"
D:\CAE\Splited_Repository\10\webp_server_go_239239351\webp-server.go,Inter-Process Communication (IPC),107,Go*,Fiber-based HTTP Server in Go,"['Step 1: Import the Fiber framework package', 'Step 2: Initialize the Fiber app instance', 'Step 3: Define routes and register HTTP handlers', 'Step 4: Start the server by calling app.Listen']"
D:\CAE\Splited_Repository\10\weron_464642335\pkg\wrtcmgr\wrtcmgr.go,Inter-Process Communication (IPC),102,Go*,Advanced HTTP client with custom http.Client and request headers,"['Step 1: Import packages like net/http and ioutil for client and I/O operations', 'Step 2: Create a custom http.Client for request execution', 'Step 3: Create an HTTP request using http.NewRequest', 'Step 4 (optional): Add headers to the HTTP request', 'Step 5: Execute the HTTP request using client.Do(req)', 'Step 6: Defer the closing of the response body', 'Step 7: Read the response body']"
D:\CAE\Splited_Repository\10\wtf_311804365\http\server.go,Inter-Process Communication (IPC),103,Go*,Basic HTTP server using net/http with HandleFunc and ListenAndServe,"['Step 1: Import the net/http package to build an HTTP server', 'Step 2: Define handler functions with http.ResponseWriter and *http.Request parameters', 'Step 3: Register routes and their handler functions using HandleFunc or Handle', 'Step 4: Start the HTTP server by calling ListenAndServe on a specified port']"
D:\CAE\Splited_Repository\10\zoro_183399164\server.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\10\zoro_183399164\tcpserver.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\10\zoro_183399164\https\tlsserver.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\10\wombat_273655853\internal\server\server.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\10\YaraHunter_498618531\pkg\server\grpc.go,Inter-Process Communication (IPC),119,Go*,Official-based gRPC server in Go,"['Step 1: Import gRPC package', 'Step 2: Set up a network listener', 'Step 3: Create a new gRPC server instance', 'Step 4: Start the server to listen for incoming requests']"
D:\CAE\Splited_Repository\10\ytarchive_338966326\util.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\10\wingo_3701273\ipc.go,Inter-Process Communication (IPC),109,Go*,Net-based TCP Server in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Create a TCP listener on a specified port', 'Step 3: Ensure the listener is closed when done', 'Step 4: Accept incoming client connections in a loop', 'Step 5: Communicate with the client via conn.Read/conn.Write']"
D:\CAE\Splited_Repository\10\zot_193163140\pkg\api\controller_test.go,Inter-Process Communication (IPC),110,Go*,Net-based TCP Client in Go,"[""Step 1: Import Go's built-in net package for TCP networking"", 'Step 2: Establish a TCP connection to the server', 'Step 3: Ensure the connection is closed when finished', 'Step 4: Send or receive data over the TCP connection']"
D:\CAE\Splited_Repository\1\brook_85371712\relay.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\1\brook_85371712\relayoverbrook.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\1\beehive_21141781\bees\socketbee\socketbee.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\2\dnscrypt-proxy_116739828\dnscrypt-proxy\dnsutils.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\3\geodns_5519412\health\healthtest\healthtesters.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\4\hysteria_257434373\app\internal\socks5\server.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\4\go-ibax_290724437\packages\utils\ntp.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\4\golang-for-nodejs-developers_163927392\examples\udp_server.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\4\glider_97128069\proxy\tproxy\tproxy.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\4\jaeger-client-go_56550961\testutils\udp_transport_test.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\4\jaeger-client-go_56550961\utils\reconnecting_udp_conn_test.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\4\go-tun2socks_138587856\tun\stop.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\4\gosnmp_5567243\trap.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\4\iox_242277226\operate\fwd.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\5\lucky_513701178\thirdlib\go-wol\wol.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\5\kube-vip_237778673\demo\server\main.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\5\mieru_410179004\pkg\socks5\request.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\5\mieru_410179004\test\cmd\udpserver\udpserver.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\6\pholcus_38499784\vendor\gopkg.in\jcmturner\gokrb5.v7\client\network.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\6\mosdns_316297217\pkg\upstream\bootstrap\bootstrap.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\6\nbio_236162999\nbio_test.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\7\quic-go_55637575\sys_conn_oob_test.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\7\plugins_84575398\pkg\testutils\echo\client\client.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\8\shadowsocks-go_6486840\cmd\shadowsocks-server\server.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\8\ssh3_712363932\cmd\ssh3-server.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\8\ssh3_712363932\integration_tests\ssh3_test.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\8\sealer_362675427\vendor\github.com\jackpal\go-nat-pmp\network.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\9\trojan-go_248025303\tunnel\tproxy\udp.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\9\torrent_28986292\tracker\udp\udp_test.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\9\veneur_55277533\sinks\xray\xray_test.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\9\sys_27522282\unix\creds_test.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\10\Xray-core_311315731\proxy\wireguard\client.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\10\Xray-core_311315731\testing\scenarios\common.go,Inter-Process Communication (IPC),113,Go*,net-based UDP Client with DialUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.DialUDP to establish a UDP connection to the server', 'Step 3: Defer Close to release the connection when done', ""Step 4: Send data to the server using Write or Read the server's response using ReadFromUDP or Read""]"
D:\CAE\Splited_Repository\10\zoro_183399164\server.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"
D:\CAE\Splited_Repository\10\zoro_183399164\udpserver.go,Inter-Process Communication (IPC),112,Go*,net-based UDP Server with listenUDP in Go,"['Step 1: Import the net package for networking functionalities', 'Step 2: Use net.ListenUDP to bind the server to a specific UDP port', 'Step 3: Defer Close to clean up resources when the server exits', 'Step 4: Read incoming UDP data from clients using ReadFromUDP or Send response data back to clients using WriteToUDP']"